//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\GitHub\SqlSchemaCompare\SqlSchemaCompareGenerator\SqlSchemaCompareGenerator.Console\TSqlParser.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SqlSchemaCompare.Core.TSql {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class TSqlParser : Parser {
	public const int
		ABORT=1, ABORT_AFTER_WAIT=2, ABSENT=3, ABSOLUTE=4, ACCELERATED_DATABASE_RECOVERY=5, 
		ACCENT_SENSITIVITY=6, ACCESS=7, ACTION=8, ACTIVATION=9, ACTIVE=10, ADD=11, 
		ADDRESS=12, ADMINISTER=13, AES=14, AES_128=15, AES_192=16, AES_256=17, 
		AFFINITY=18, AFTER=19, AGGREGATE=20, ALGORITHM=21, ALL=22, ALLOWED=23, 
		ALLOW_CONNECTIONS=24, ALLOW_ENCRYPTED_VALUE_MODIFICATIONS=25, ALLOW_MULTIPLE_EVENT_LOSS=26, 
		ALLOW_PAGE_LOCKS=27, ALLOW_ROW_LOCKS=28, ALLOW_SINGLE_EVENT_LOSS=29, ALLOW_SNAPSHOT_ISOLATION=30, 
		ALL_CONSTRAINTS=31, ALL_ERRORMSGS=32, ALL_INDEXES=33, ALL_LEVELS=34, ALTER=35, 
		ALWAYS=36, AND=37, ANONYMOUS=38, ANSI_DEFAULTS=39, ANSI_NULLS=40, ANSI_NULL_DEFAULT=41, 
		ANSI_NULL_DFLT_OFF=42, ANSI_NULL_DFLT_ON=43, ANSI_PADDING=44, ANSI_WARNINGS=45, 
		ANY=46, APPEND=47, APPLICATION=48, APPLICATION_LOG=49, APPLOCK_MODE=50, 
		APPLOCK_TEST=51, APPLY=52, APP_NAME=53, ARITHABORT=54, ARITHIGNORE=55, 
		AS=56, ASC=57, ASCII=58, ASSEMBLY=59, ASSEMBLYPROPERTY=60, ASYMMETRIC=61, 
		ASYNCHRONOUS_COMMIT=62, AT_KEYWORD=63, AUDIT=64, AUDIT_GUID=65, AUTHENTICATE=66, 
		AUTHENTICATION=67, AUTHORIZATION=68, AUTO=69, AUTOGROW_ALL_FILES=70, AUTOGROW_SINGLE_FILE=71, 
		AUTOMATED_BACKUP_PREFERENCE=72, AUTOMATIC=73, AUTO_CLEANUP=74, AUTO_CLOSE=75, 
		AUTO_CREATE_STATISTICS=76, AUTO_DROP=77, AUTO_SHRINK=78, AUTO_UPDATE_STATISTICS=79, 
		AUTO_UPDATE_STATISTICS_ASYNC=80, AVAILABILITY=81, AVAILABILITY_MODE=82, 
		AVG=83, BACKSLASH=84, BACKUP=85, BACKUP_CLONEDB=86, BACKUP_PRIORITY=87, 
		BASE64=88, BEFORE=89, BEGIN=90, BEGIN_DIALOG=91, BETWEEN=92, BIGINT=93, 
		BINARY_CHECKSUM=94, BINARY_KEYWORD=95, BINDING=96, BLOB_STORAGE=97, BLOCK=98, 
		BLOCKERS=99, BLOCKING_HIERARCHY=100, BLOCKSIZE=101, BREAK=102, BROKER=103, 
		BROKER_INSTANCE=104, BROWSE=105, BUFFER=106, BUFFERCOUNT=107, BULK=108, 
		BULK_LOGGED=109, BY=110, CACHE=111, CALLED=112, CALLER=113, CAP_CPU_PERCENT=114, 
		CASCADE=115, CASE=116, CAST=117, CATALOG=118, CATALOG_COLLATION=119, CATCH=120, 
		CERTENCODED=121, CERTIFICATE=122, CERTPRIVATEKEY=123, CERT_ID=124, CHANGE=125, 
		CHANGES=126, CHANGETABLE=127, CHANGE_RETENTION=128, CHANGE_TRACKING=129, 
		CHAR=130, CHARINDEX=131, CHECK=132, CHECKALLOC=133, CHECKCATALOG=134, 
		CHECKCONSTRAINTS=135, CHECKDB=136, CHECKFILEGROUP=137, CHECKPOINT=138, 
		CHECKSUM=139, CHECKSUM_AGG=140, CHECKTABLE=141, CHECK_EXPIRATION=142, 
		CHECK_POLICY=143, CLASSIFIER_FUNCTION=144, CLEANTABLE=145, CLEANUP=146, 
		CLEANUP_POLICY=147, CLONEDATABASE=148, CLOSE=149, CLUSTER=150, CLUSTERED=151, 
		COALESCE=152, COLLATE=153, COLLECTION=154, COLUMN=155, COLUMNPROPERTY=156, 
		COLUMNS=157, COLUMNSTORE=158, COLUMNSTORE_ARCHIVE=159, COLUMN_ENCRYPTION_KEY=160, 
		COLUMN_MASTER_KEY=161, COL_LENGTH=162, COL_NAME=163, COMMIT=164, COMMITTED=165, 
		COMPATIBILITY_LEVEL=166, COMPRESS=167, COMPRESSION=168, COMPRESSION_DELAY=169, 
		COMPRESS_ALL_ROW_GROUPS=170, COMPUTE=171, CONCAT=172, CONCAT_NULL_YIELDS_NULL=173, 
		CONCAT_WS=174, CONFIGURATION=175, CONNECT=176, CONNECTION=177, CONNECTIONPROPERTY=178, 
		CONSTRAINT=179, CONTAINMENT=180, CONTAINS=181, CONTAINSTABLE=182, CONTENT=183, 
		CONTEXT=184, CONTEXT_INFO=185, CONTINUE=186, CONTINUE_AFTER_ERROR=187, 
		CONTRACT=188, CONTRACT_NAME=189, CONTROL=190, CONVERSATION=191, CONVERT=192, 
		COOKIE=193, COPY_ONLY=194, COUNT=195, COUNTER=196, COUNT_BIG=197, CPU=198, 
		CREATE=199, CREATE_NEW=200, CREATION_DISPOSITION=201, CREDENTIAL=202, 
		CROSS=203, CRYPTOGRAPHIC=204, CUME_DIST=205, CURRENT=206, CURRENT_DATE=207, 
		CURRENT_REQUEST_ID=208, CURRENT_TIME=209, CURRENT_TIMESTAMP=210, CURRENT_TRANSACTION_ID=211, 
		CURRENT_USER=212, CURSOR=213, CURSOR_CLOSE_ON_COMMIT=214, CURSOR_DEFAULT=215, 
		CURSOR_STATUS=216, CYCLE=217, DATA=218, DATABASE=219, DATABASEPROPERTYEX=220, 
		DATABASE_DEFAULT=221, DATABASE_MIRRORING=222, DATABASE_PRINCIPAL_ID=223, 
		DATALENGTH=224, DATASPACE=225, DATA_COMPRESSION=226, DATA_FLUSH_INTERVAL_SECONDS=227, 
		DATA_PURITY=228, DATA_SOURCE=229, DATEADD=230, DATEDIFF=231, DATENAME=232, 
		DATEPART=233, DATE_CORRELATION_OPTIMIZATION=234, DAYS=235, DBCC=236, DBREINDEX=237, 
		DB_CHAINING=238, DB_FAILOVER=239, DB_ID=240, DB_NAME=241, DDL=242, DEALLOCATE=243, 
		DECLARE=244, DECOMPRESS=245, DECRYPTION=246, DEFAULT=247, DEFAULT_DATABASE=248, 
		DEFAULT_DOUBLE_QUOTE=249, DEFAULT_FULLTEXT_LANGUAGE=250, DEFAULT_LANGUAGE=251, 
		DEFAULT_SCHEMA=252, DEFINITION=253, DELAY=254, DELAYED_DURABILITY=255, 
		DELETE=256, DELETED=257, DENSE_RANK=258, DENY=259, DEPENDENTS=260, DES=261, 
		DESC=262, DESCRIPTION=263, DESX=264, DETERMINISTIC=265, DHCP=266, DIAGNOSTICS=267, 
		DIALOG=268, DIFFERENCE=269, DIFFERENTIAL=270, DIRECTORY_NAME=271, DISABLE=272, 
		DISABLED=273, DISABLE_BROKER=274, DISK=275, DISTINCT=276, DISTRIBUTED=277, 
		DISTRIBUTION=278, DOCUMENT=279, DOLLAR_PARTITION=280, DOUBLE=281, DOUBLE_BACK_SLASH=282, 
		DOUBLE_FORWARD_SLASH=283, DROP=284, DROPCLEANBUFFERS=285, DROP_EXISTING=286, 
		DTC_SUPPORT=287, DUMP=288, DYNAMIC=289, EDITION=290, ELEMENTS=291, ELSE=292, 
		EMERGENCY=293, EMPTY=294, ENABLE=295, ENABLED=296, ENABLE_BROKER=297, 
		ENCRYPTED=298, ENCRYPTED_VALUE=299, ENCRYPTION=300, ENCRYPTION_TYPE=301, 
		END=302, ENDPOINT=303, ENDPOINT_URL=304, ERRLVL=305, ERROR=306, ERROR_BROKER_CONVERSATIONS=307, 
		ERROR_LINE=308, ERROR_MESSAGE=309, ERROR_NUMBER=310, ERROR_PROCEDURE=311, 
		ERROR_SEVERITY=312, ERROR_STATE=313, ESCAPE=314, ESTIMATEONLY=315, EVENT=316, 
		EVENTDATA=317, EVENT_RETENTION_MODE=318, EXCEPT=319, EXCLUSIVE=320, EXECUTABLE=321, 
		EXECUTABLE_FILE=322, EXECUTE=323, EXIST=324, EXISTS=325, EXIST_SQUARE_BRACKET=326, 
		EXIT=327, EXPAND=328, EXPIREDATE=329, EXPIRY_DATE=330, EXPLICIT=331, EXTENDED_LOGICAL_CHECKS=332, 
		EXTENSION=333, EXTERNAL=334, EXTERNAL_ACCESS=335, FAILOVER=336, FAILOVER_MODE=337, 
		FAILURE=338, FAILURECONDITIONLEVEL=339, FAILURE_CONDITION_LEVEL=340, FAIL_OPERATION=341, 
		FAN_IN=342, FAST=343, FAST_FORWARD=344, FETCH=345, FILE=346, FILEGROUP=347, 
		FILEGROUPPROPERTY=348, FILEGROUP_ID=349, FILEGROUP_NAME=350, FILEGROWTH=351, 
		FILENAME=352, FILEPATH=353, FILEPROPERTY=354, FILEPROPERTYEX=355, FILESTREAM=356, 
		FILESTREAM_ON=357, FILE_ID=358, FILE_IDEX=359, FILE_NAME=360, FILE_SNAPSHOT=361, 
		FILLFACTOR=362, FILTER=363, FIRST=364, FIRST_VALUE=365, FMTONLY=366, FOLLOWING=367, 
		FOR=368, FORCE=369, FORCED=370, FORCEPLAN=371, FORCESCAN=372, FORCESEEK=373, 
		FORCE_FAILOVER_ALLOW_DATA_LOSS=374, FORCE_SERVICE_ALLOW_DATA_LOSS=375, 
		FOREIGN=376, FORMAT=377, FORMATMESSAGE=378, FORWARD_ONLY=379, FREE=380, 
		FREETEXT=381, FREETEXTTABLE=382, FROM=383, FULL=384, FULLSCAN=385, FULLTEXT=386, 
		FULLTEXTCATALOGPROPERTY=387, FULLTEXTSERVICEPROPERTY=388, FUNCTION=389, 
		GB=390, GENERATED=391, GET=392, GETANCESTOR=393, GETANSINULL=394, GETDATE=395, 
		GETDESCENDANT=396, GETLEVEL=397, GETREPARENTEDVALUE=398, GETROOT=399, 
		GETUTCDATE=400, GET_FILESTREAM_TRANSACTION_CONTEXT=401, GLOBAL=402, GO=403, 
		GOTO=404, GOVERNOR=405, GRANT=406, GREATEST=407, GROUP=408, GROUPING=409, 
		GROUPING_ID=410, GROUP_MAX_REQUESTS=411, HADR=412, HASH=413, HASHED=414, 
		HAS_DBACCESS=415, HAS_PERMS_BY_NAME=416, HAVING=417, HEALTHCHECKTIMEOUT=418, 
		HEALTH_CHECK_TIMEOUT=419, HEAP=420, HIDDEN_KEYWORD=421, HIERARCHYID=422, 
		HIGH=423, HOLDLOCK=424, HONOR_BROKER_PRIORITY=425, HOST_ID=426, HOST_NAME=427, 
		HOURS=428, IDENTITY=429, IDENTITYCOL=430, IDENTITY_INSERT=431, IDENTITY_VALUE=432, 
		IDENT_CURRENT=433, IDENT_INCR=434, IDENT_SEED=435, IF=436, IGNORE_CONSTRAINTS=437, 
		IGNORE_DUP_KEY=438, IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=439, IGNORE_REPLICATED_TABLE_CACHE=440, 
		IGNORE_TRIGGERS=441, IIF=442, IMMEDIATE=443, IMPERSONATE=444, IMPLICIT_TRANSACTIONS=445, 
		IMPORTANCE=446, IN=447, INCLUDE=448, INCLUDE_NULL_VALUES=449, INCREMENT=450, 
		INCREMENTAL=451, INDEX=452, INDEXKEY_PROPERTY=453, INDEXPROPERTY=454, 
		INDEX_COL=455, INFINITE=456, INIT=457, INITIATOR=458, INNER=459, INPUT=460, 
		INSENSITIVE=461, INSERT=462, INSERTED=463, INSTEAD=464, INT=465, INTERSECT=466, 
		INTERVAL_LENGTH_MINUTES=467, INTO=468, IO=469, IP=470, IS=471, ISDESCENDANTOF=472, 
		ISJSON=473, ISNULL=474, ISNUMERIC=475, ISOLATION=476, IS_MEMBER=477, IS_ROLEMEMBER=478, 
		IS_SRVROLEMEMBER=479, JOB=480, JOIN=481, JSON=482, JSON_ARRAY=483, JSON_MODIFY=484, 
		JSON_OBJECT=485, JSON_PATH_EXISTS=486, JSON_QUERY=487, JSON_VALUE=488, 
		KB=489, KEEP=490, KEEPDEFAULTS=491, KEEPFIXED=492, KEEPIDENTITY=493, KERBEROS=494, 
		KEY=495, KEYS=496, KEYSET=497, KEY_PATH=498, KEY_SOURCE=499, KEY_STORE_PROVIDER_NAME=500, 
		KILL=501, LAG=502, LANGUAGE=503, LAST=504, LAST_VALUE=505, LEAD=506, LEAST=507, 
		LEDGER=508, LEFT=509, LEN=510, LEVEL=511, LIBRARY=512, LIFETIME=513, LIKE=514, 
		LINENO=515, LINKED=516, LINUX=517, LIST=518, LISTENER=519, LISTENER_IP=520, 
		LISTENER_PORT=521, LISTENER_URL=522, LOAD=523, LOB_COMPACTION=524, LOCAL=525, 
		LOCAL_SERVICE_NAME=526, LOCATION=527, LOCK=528, LOCK_ESCALATION=529, LOG=530, 
		LOGIN=531, LOGINPROPERTY=532, LOOP=533, LOW=534, LOWER=535, LTRIM=536, 
		MANUAL=537, MARK=538, MASK=539, MASKED=540, MASTER=541, MATCHED=542, MATERIALIZED=543, 
		MAX=544, MAXDOP=545, MAXRECURSION=546, MAXSIZE=547, MAXTRANSFER=548, MAXVALUE=549, 
		MAX_CPU_PERCENT=550, MAX_DISPATCH_LATENCY=551, MAX_DOP=552, MAX_DURATION=553, 
		MAX_EVENT_SIZE=554, MAX_FILES=555, MAX_IOPS_PER_VOLUME=556, MAX_MEMORY=557, 
		MAX_MEMORY_PERCENT=558, MAX_OUTSTANDING_IO_PER_VOLUME=559, MAX_PLANS_PER_QUERY=560, 
		MAX_PROCESSES=561, MAX_QUEUE_READERS=562, MAX_ROLLOVER_FILES=563, MAX_SIZE=564, 
		MAX_STORAGE_SIZE_MB=565, MB=566, MEDIADESCRIPTION=567, MEDIANAME=568, 
		MEDIUM=569, MEMBER=570, MEMORY_OPTIMIZED_DATA=571, MEMORY_PARTITION_MODE=572, 
		MERGE=573, MESSAGE=574, MESSAGE_FORWARDING=575, MESSAGE_FORWARD_SIZE=576, 
		MIN=577, MINUTES=578, MINVALUE=579, MIN_ACTIVE_ROWVERSION=580, MIN_CPU_PERCENT=581, 
		MIN_IOPS_PER_VOLUME=582, MIN_MEMORY_PERCENT=583, MIRROR=584, MIRROR_ADDRESS=585, 
		MIXED_PAGE_ALLOCATION=586, MODE=587, MODIFY=588, MODIFY_SQUARE_BRACKET=589, 
		MOVE=590, MULTI_USER=591, MUST_CHANGE=592, NAME=593, NATIONAL=594, NCHAR=595, 
		NEGOTIATE=596, NESTED_TRIGGERS=597, NEWID=598, NEWNAME=599, NEWSEQUENTIALID=600, 
		NEW_ACCOUNT=601, NEW_BROKER=602, NEW_PASSWORD=603, NEXT=604, NO=605, NOCHECK=606, 
		NOCOUNT=607, NODES=608, NOEXEC=609, NOEXPAND=610, NOFORMAT=611, NOHOLDLOCK=612, 
		NOINDEX=613, NOINIT=614, NOLOCK=615, NONCLUSTERED=616, NONE=617, NON_TRANSACTED_ACCESS=618, 
		NORECOMPUTE=619, NORECOVERY=620, NOREWIND=621, NOSKIP=622, NOT=623, NOTIFICATION=624, 
		NOTIFICATIONS=625, NOUNLOAD=626, NOWAIT=627, NO_CHECKSUM=628, NO_COMPRESSION=629, 
		NO_EVENT_LOSS=630, NO_INFOMSGS=631, NO_QUERYSTORE=632, NO_STATISTICS=633, 
		NO_TRUNCATE=634, NO_WAIT=635, NTILE=636, NTLM=637, NULLIF=638, NULL_=639, 
		NULL_DOUBLE_QUOTE=640, NUMANODE=641, NUMBER=642, NUMERIC_ROUNDABORT=643, 
		OBJECT=644, OBJECTPROPERTY=645, OBJECTPROPERTYEX=646, OBJECT_DEFINITION=647, 
		OBJECT_ID=648, OBJECT_NAME=649, OBJECT_SCHEMA_NAME=650, OF=651, OFF=652, 
		OFFLINE=653, OFFSET=654, OFFSETS=655, OLD_ACCOUNT=656, OLD_PASSWORD=657, 
		ON=658, ONLINE=659, ONLY=660, ON_FAILURE=661, OPEN=662, OPENDATASOURCE=663, 
		OPENJSON=664, OPENQUERY=665, OPENROWSET=666, OPENXML=667, OPEN_EXISTING=668, 
		OPERATIONS=669, OPERATION_MODE=670, OPTIMISTIC=671, OPTIMIZE=672, OPTIMIZE_FOR_SEQUENTIAL_KEY=673, 
		OPTION=674, OR=675, ORDER=676, ORIGINAL_DB_NAME=677, ORIGINAL_LOGIN=678, 
		OUT=679, OUTER=680, OUTPUT=681, OVER=682, OVERRIDE=683, OWNER=684, OWNERSHIP=685, 
		PAD_INDEX=686, PAGE=687, PAGECOUNT=688, PAGE_VERIFY=689, PAGLOCK=690, 
		PARAMETERIZATION=691, PARAM_NODE=692, PARSE=693, PARSENAME=694, PARSEONLY=695, 
		PARTIAL=696, PARTITION=697, PARTITIONS=698, PARTNER=699, PASSWORD=700, 
		PATH=701, PATINDEX=702, PAUSE=703, PDW_SHOWSPACEUSED=704, PERCENT=705, 
		PERCENTILE_CONT=706, PERCENTILE_DISC=707, PERCENT_RANK=708, PERMISSIONS=709, 
		PERMISSION_SET=710, PERSISTED=711, PERSIST_SAMPLE_PERCENT=712, PER_CPU=713, 
		PER_DB=714, PER_NODE=715, PHYSICAL_ONLY=716, PIVOT=717, PLAN=718, PLATFORM=719, 
		POISON_MESSAGE_HANDLING=720, POLICY=721, POOL=722, PORT=723, PRECEDING=724, 
		PRECISION=725, PREDICATE=726, PRIMARY=727, PRIMARY_ROLE=728, PRINT=729, 
		PRIOR=730, PRIORITY=731, PRIORITY_LEVEL=732, PRIVATE=733, PRIVATE_KEY=734, 
		PRIVILEGES=735, PROC=736, PROCCACHE=737, PROCEDURE=738, PROCEDURE_NAME=739, 
		PROCESS=740, PROFILE=741, PROPERTY=742, PROVIDER=743, PROVIDER_KEY_NAME=744, 
		PUBLIC=745, PWDCOMPARE=746, PWDENCRYPT=747, PYTHON=748, QUERY=749, QUERY_CAPTURE_MODE=750, 
		QUERY_SQUARE_BRACKET=751, QUERY_STORE=752, QUEUE=753, QUEUE_DELAY=754, 
		QUOTED_IDENTIFIER=755, QUOTENAME=756, R=757, RAISERROR=758, RANDOMIZED=759, 
		RANGE=760, RANK=761, RAW=762, RC2=763, RC4=764, RC4_128=765, READ=766, 
		READCOMMITTED=767, READCOMMITTEDLOCK=768, READONLY=769, READPAST=770, 
		READTEXT=771, READUNCOMMITTED=772, READWRITE=773, READ_COMMITTED_SNAPSHOT=774, 
		READ_ONLY=775, READ_ONLY_ROUTING_LIST=776, READ_WRITE=777, READ_WRITE_FILEGROUPS=778, 
		REBUILD=779, RECEIVE=780, RECOMPILE=781, RECONFIGURE=782, RECOVERY=783, 
		RECURSIVE_TRIGGERS=784, REFERENCES=785, REGENERATE=786, RELATED_CONVERSATION=787, 
		RELATED_CONVERSATION_GROUP=788, RELATIVE=789, REMOTE=790, REMOTE_PROC_TRANSACTIONS=791, 
		REMOTE_SERVICE_NAME=792, REMOVE=793, REORGANIZE=794, REPAIR_ALLOW_DATA_LOSS=795, 
		REPAIR_FAST=796, REPAIR_REBUILD=797, REPEATABLE=798, REPEATABLEREAD=799, 
		REPLACE=800, REPLICA=801, REPLICATE=802, REPLICATION=803, REQUEST_MAX_CPU_TIME_SEC=804, 
		REQUEST_MAX_MEMORY_GRANT_PERCENT=805, REQUEST_MEMORY_GRANT_TIMEOUT_SEC=806, 
		REQUIRED=807, REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT=808, RESAMPLE=809, 
		RESERVE_DISK_SPACE=810, RESET=811, RESOURCE=812, RESOURCES=813, RESOURCE_MANAGER_LOCATION=814, 
		RESTART=815, RESTORE=816, RESTRICT=817, RESTRICTED_USER=818, RESUMABLE=819, 
		RESUME=820, RETAINDAYS=821, RETENTION=822, RETURN=823, RETURNS=824, REVERSE=825, 
		REVERT=826, REVOKE=827, REWIND=828, RIGHT=829, ROBUST=830, ROLE=831, ROLLBACK=832, 
		ROOT=833, ROUND_ROBIN=834, ROUTE=835, ROW=836, ROWCOUNT=837, ROWCOUNT_BIG=838, 
		ROWGUID=839, ROWGUIDCOL=840, ROWLOCK=841, ROWS=842, ROW_NUMBER=843, RSA_1024=844, 
		RSA_2048=845, RSA_3072=846, RSA_4096=847, RSA_512=848, RTRIM=849, RULE=850, 
		SAFE=851, SAFETY=852, SAMPLE=853, SAVE=854, SCHEDULER=855, SCHEMA=856, 
		SCHEMABINDING=857, SCHEMA_ID=858, SCHEMA_NAME=859, SCHEME=860, SCOPED=861, 
		SCOPE_IDENTITY=862, SCRIPT=863, SCROLL=864, SCROLL_LOCKS=865, SEARCH=866, 
		SECONDARY=867, SECONDARY_ONLY=868, SECONDARY_ROLE=869, SECONDS=870, SECRET=871, 
		SECURABLES=872, SECURITY=873, SECURITYAUDIT=874, SECURITY_LOG=875, SEEDING_MODE=876, 
		SELECT=877, SELF=878, SEMANTICKEYPHRASETABLE=879, SEMANTICSIMILARITYDETAILSTABLE=880, 
		SEMANTICSIMILARITYTABLE=881, SEMI_SENSITIVE=882, SEND=883, SENT=884, SEQUENCE=885, 
		SEQUENCE_NUMBER=886, SERIALIZABLE=887, SERVER=888, SERVERPROPERTY=889, 
		SERVICE=890, SERVICEBROKER=891, SERVICE_BROKER=892, SERVICE_NAME=893, 
		SERVICE_OBJECTIVE=894, SESSION=895, SESSIONPROPERTY=896, SESSION_CONTEXT=897, 
		SESSION_TIMEOUT=898, SESSION_USER=899, SET=900, SETERROR=901, SETS=902, 
		SETTINGS=903, SETUSER=904, SHARE=905, SHARED=906, SHOWCONTIG=907, SHOWPLAN=908, 
		SHOWPLAN_ALL=909, SHOWPLAN_TEXT=910, SHOWPLAN_XML=911, SHRINKLOG=912, 
		SHUTDOWN=913, SID=914, SIGNATURE=915, SIMPLE=916, SINGLE_USER=917, SIZE=918, 
		SIZE_BASED_CLEANUP_MODE=919, SKIP_KEYWORD=920, SMALLINT=921, SNAPSHOT=922, 
		SOFTNUMA=923, SOME=924, SORT_IN_TEMPDB=925, SOUNDEX=926, SOURCE=927, SPACE_KEYWORD=928, 
		SPARSE=929, SPATIAL_WINDOW_MAX_CELLS=930, SPECIFICATION=931, SPLIT=932, 
		SQL=933, SQLDUMPERFLAGS=934, SQLDUMPERPATH=935, SQLDUMPERTIMEOUT=936, 
		SQL_VARIANT_PROPERTY=937, STALE_QUERY_THRESHOLD_DAYS=938, STANDBY=939, 
		START=940, STARTED=941, STARTUP_STATE=942, START_DATE=943, STATE=944, 
		STATIC=945, STATISTICS=946, STATISTICS_INCREMENTAL=947, STATISTICS_NORECOMPUTE=948, 
		STATS=949, STATS_DATE=950, STATS_STREAM=951, STATUS=952, STATUSONLY=953, 
		STDEV=954, STDEVP=955, STOP=956, STOPLIST=957, STOPPED=958, STOP_ON_ERROR=959, 
		STR=960, STRING_AGG=961, STRING_ESCAPE=962, STUFF=963, SUBJECT=964, SUBSCRIBE=965, 
		SUBSCRIPTION=966, SUBSTRING=967, SUM=968, SUPPORTED=969, SUSER_ID=970, 
		SUSER_NAME=971, SUSER_SID=972, SUSER_SNAME=973, SUSPEND=974, SWITCH=975, 
		SYMMETRIC=976, SYNCHRONOUS_COMMIT=977, SYNONYM=978, SYSTEM=979, SYSTEM_USER=980, 
		TABLE=981, TABLERESULTS=982, TABLESAMPLE=983, TABLOCK=984, TABLOCKX=985, 
		TAKE=986, TAPE=987, TARGET=988, TARGET_RECOVERY_TIME=989, TB=990, TCP=991, 
		TEXTIMAGE_ON=992, TEXTSIZE=993, THEN=994, THROW=995, TIES=996, TIME=997, 
		TIMEOUT=998, TIMER=999, TINYINT=1000, TO=1001, TOP=1002, TORN_PAGE_DETECTION=1003, 
		TOSTRING=1004, TRACE=1005, TRACKING=1006, TRACK_CAUSALITY=1007, TRAN=1008, 
		TRANSACTION=1009, TRANSACTION_ID=1010, TRANSFER=1011, TRANSFORM_NOISE_WORDS=1012, 
		TRANSLATE=1013, TRIGGER=1014, TRIM=1015, TRIPLE_DES=1016, TRIPLE_DES_3KEY=1017, 
		TRUNCATE=1018, TRUSTWORTHY=1019, TRY=1020, TRY_CAST=1021, TSEQUAL=1022, 
		TSQL=1023, TWO_DIGIT_YEAR_CUTOFF=1024, TYPE=1025, TYPEPROPERTY=1026, TYPE_ID=1027, 
		TYPE_NAME=1028, TYPE_WARNING=1029, UNBOUNDED=1030, UNCHECKED=1031, UNCOMMITTED=1032, 
		UNICODE=1033, UNION=1034, UNIQUE=1035, UNKNOWN=1036, UNLIMITED=1037, UNLOCK=1038, 
		UNMASK=1039, UNPIVOT=1040, UNSAFE=1041, UOW=1042, UPDATE=1043, UPDATETEXT=1044, 
		UPDLOCK=1045, UPPER=1046, URL=1047, USE=1048, USED=1049, USER=1050, USER_ID=1051, 
		USER_NAME=1052, USING=1053, VALIDATION=1054, VALID_XML=1055, VALUE=1056, 
		VALUES=1057, VALUE_SQUARE_BRACKET=1058, VAR=1059, VARBINARY_KEYWORD=1060, 
		VARP=1061, VARYING=1062, VERBOSELOGGING=1063, VERIFY_CLONEDB=1064, VERSION=1065, 
		VIEW=1066, VIEWS=1067, VIEW_METADATA=1068, VISIBILITY=1069, WAIT=1070, 
		WAITFOR=1071, WAIT_AT_LOW_PRIORITY=1072, WELL_FORMED_XML=1073, WAIT_STATS_CAPTURE_MODE=1074, 
		WHEN=1075, WHERE=1076, WHILE=1077, WINDOWS=1078, WITH=1079, WITHIN=1080, 
		WITHOUT=1081, WITHOUT_ARRAY_WRAPPER=1082, WITNESS=1083, WORK=1084, WORKLOAD=1085, 
		WRITETEXT=1086, XACT_ABORT=1087, XACT_STATE=1088, XLOCK=1089, XML=1090, 
		XMLDATA=1091, XMLNAMESPACES=1092, XMLSCHEMA=1093, XML_COMPRESSION=1094, 
		XSINIL=1095, ZONE=1096, ABS=1097, ACOS=1098, ASIN=1099, ATAN=1100, ATN2=1101, 
		CEILING=1102, COS=1103, COT=1104, DEGREES=1105, EXP=1106, FLOOR=1107, 
		LOG10=1108, PI=1109, POWER=1110, RADIANS=1111, RAND=1112, ROUND=1113, 
		SIGN=1114, SIN=1115, SQRT=1116, SQUARE=1117, TAN=1118, CURRENT_TIMEZONE=1119, 
		CURRENT_TIMEZONE_ID=1120, DATE_BUCKET=1121, DATEDIFF_BIG=1122, DATEFROMPARTS=1123, 
		DATETIME2FROMPARTS=1124, DATETIMEFROMPARTS=1125, DATETIMEOFFSETFROMPARTS=1126, 
		DATETRUNC=1127, DAY=1128, EOMONTH=1129, ISDATE=1130, MONTH=1131, SMALLDATETIMEFROMPARTS=1132, 
		SWITCHOFFSET=1133, SYSDATETIME=1134, SYSDATETIMEOFFSET=1135, SYSUTCDATETIME=1136, 
		TIMEFROMPARTS=1137, TODATETIMEOFFSET=1138, YEAR=1139, QUARTER=1140, DAYOFYEAR=1141, 
		WEEK=1142, HOUR=1143, MINUTE=1144, SECOND=1145, MILLISECOND=1146, MICROSECOND=1147, 
		NANOSECOND=1148, TZOFFSET=1149, ISO_WEEK=1150, WEEKDAY=1151, YEAR_ABBR=1152, 
		QUARTER_ABBR=1153, MONTH_ABBR=1154, DAYOFYEAR_ABBR=1155, DAY_ABBR=1156, 
		WEEK_ABBR=1157, HOUR_ABBR=1158, MINUTE_ABBR=1159, SECOND_ABBR=1160, MILLISECOND_ABBR=1161, 
		MICROSECOND_ABBR=1162, NANOSECOND_ABBR=1163, TZOFFSET_ABBR=1164, ISO_WEEK_ABBR=1165, 
		WEEKDAY_ABBR=1166, SP_EXECUTESQL=1167, VARCHAR=1168, NVARCHAR=1169, DISK_DRIVE=1170, 
		DOLLAR_ACTION=1171, CURSOR_ROWS=1172, FETCH_STATUS=1173, IPV4_ADDR=1174, 
		SPACE=1175, COMMENT=1176, LINE_COMMENT=1177, DOUBLE_QUOTE_ID=1178, DOUBLE_QUOTE_BLANK=1179, 
		SINGLE_QUOTE=1180, SQUARE_BRACKET_ID=1181, LOCAL_ID=1182, TEMP_ID=1183, 
		DECIMAL=1184, ID=1185, STRING=1186, BINARY=1187, FLOAT=1188, REAL=1189, 
		EQUAL=1190, GREATER=1191, LESS=1192, EXCLAMATION=1193, PLUS_ASSIGN=1194, 
		MINUS_ASSIGN=1195, MULT_ASSIGN=1196, DIV_ASSIGN=1197, MOD_ASSIGN=1198, 
		AND_ASSIGN=1199, XOR_ASSIGN=1200, OR_ASSIGN=1201, DOUBLE_BAR=1202, DOT=1203, 
		UNDERLINE=1204, AT=1205, SHARP=1206, DOLLAR=1207, LR_BRACKET=1208, RR_BRACKET=1209, 
		COMMA=1210, SEMI=1211, COLON=1212, DOUBLE_COLON=1213, STAR=1214, DIVIDE=1215, 
		MODULE=1216, PLUS=1217, MINUS=1218, BIT_NOT=1219, BIT_OR=1220, BIT_AND=1221, 
		BIT_XOR=1222, PLACEHOLDER=1223, QUERYTRACEON=1224;
	public const int
		RULE_tsql_file = 0, RULE_batch = 1, RULE_batch_level_statement = 2, RULE_sql_clauses = 3, 
		RULE_dml_clause = 4, RULE_ddl_clause = 5, RULE_backup_statement = 6, RULE_cfl_statement = 7, 
		RULE_block_statement = 8, RULE_break_statement = 9, RULE_continue_statement = 10, 
		RULE_goto_statement = 11, RULE_return_statement = 12, RULE_if_statement = 13, 
		RULE_throw_statement = 14, RULE_throw_error_number = 15, RULE_throw_message = 16, 
		RULE_throw_state = 17, RULE_try_catch_statement = 18, RULE_waitfor_statement = 19, 
		RULE_while_statement = 20, RULE_print_statement = 21, RULE_raiseerror_statement = 22, 
		RULE_empty_statement = 23, RULE_another_statement = 24, RULE_alter_application_role = 25, 
		RULE_alter_xml_schema_collection = 26, RULE_create_application_role = 27, 
		RULE_drop_aggregate = 28, RULE_drop_application_role = 29, RULE_alter_assembly = 30, 
		RULE_alter_assembly_start = 31, RULE_alter_assembly_clause = 32, RULE_alter_assembly_from_clause = 33, 
		RULE_alter_assembly_from_clause_start = 34, RULE_alter_assembly_drop_clause = 35, 
		RULE_alter_assembly_drop_multiple_files = 36, RULE_alter_assembly_drop = 37, 
		RULE_alter_assembly_add_clause = 38, RULE_alter_asssembly_add_clause_start = 39, 
		RULE_alter_assembly_client_file_clause = 40, RULE_alter_assembly_file_name = 41, 
		RULE_alter_assembly_file_bits = 42, RULE_alter_assembly_as = 43, RULE_alter_assembly_with_clause = 44, 
		RULE_alter_assembly_with = 45, RULE_client_assembly_specifier = 46, RULE_assembly_option = 47, 
		RULE_network_file_share = 48, RULE_network_computer = 49, RULE_network_file_start = 50, 
		RULE_file_path = 51, RULE_file_directory_path_separator = 52, RULE_local_file = 53, 
		RULE_local_drive = 54, RULE_multiple_local_files = 55, RULE_multiple_local_file_start = 56, 
		RULE_create_assembly = 57, RULE_drop_assembly = 58, RULE_alter_asymmetric_key = 59, 
		RULE_alter_asymmetric_key_start = 60, RULE_asymmetric_key_option = 61, 
		RULE_asymmetric_key_option_start = 62, RULE_asymmetric_key_password_change_option = 63, 
		RULE_create_asymmetric_key = 64, RULE_drop_asymmetric_key = 65, RULE_alter_authorization = 66, 
		RULE_authorization_grantee = 67, RULE_entity_to = 68, RULE_colon_colon = 69, 
		RULE_alter_authorization_start = 70, RULE_alter_authorization_for_sql_database = 71, 
		RULE_alter_authorization_for_azure_dw = 72, RULE_alter_authorization_for_parallel_dw = 73, 
		RULE_class_type = 74, RULE_class_type_for_sql_database = 75, RULE_class_type_for_azure_dw = 76, 
		RULE_class_type_for_parallel_dw = 77, RULE_class_type_for_grant = 78, 
		RULE_drop_availability_group = 79, RULE_alter_availability_group = 80, 
		RULE_alter_availability_group_start = 81, RULE_alter_availability_group_options = 82, 
		RULE_ip_v4_failover = 83, RULE_ip_v6_failover = 84, RULE_create_or_alter_broker_priority = 85, 
		RULE_drop_broker_priority = 86, RULE_alter_certificate = 87, RULE_alter_column_encryption_key = 88, 
		RULE_create_column_encryption_key = 89, RULE_drop_certificate = 90, RULE_drop_column_encryption_key = 91, 
		RULE_drop_column_master_key = 92, RULE_drop_contract = 93, RULE_drop_credential = 94, 
		RULE_drop_cryptograhic_provider = 95, RULE_drop_database = 96, RULE_drop_database_audit_specification = 97, 
		RULE_drop_database_encryption_key = 98, RULE_drop_database_scoped_credential = 99, 
		RULE_drop_default = 100, RULE_drop_endpoint = 101, RULE_drop_external_data_source = 102, 
		RULE_drop_external_file_format = 103, RULE_drop_external_library = 104, 
		RULE_drop_external_resource_pool = 105, RULE_drop_external_table = 106, 
		RULE_drop_event_notifications = 107, RULE_drop_event_session = 108, RULE_drop_fulltext_catalog = 109, 
		RULE_drop_fulltext_index = 110, RULE_drop_fulltext_stoplist = 111, RULE_drop_login = 112, 
		RULE_drop_master_key = 113, RULE_drop_message_type = 114, RULE_drop_partition_function = 115, 
		RULE_drop_partition_scheme = 116, RULE_drop_queue = 117, RULE_drop_remote_service_binding = 118, 
		RULE_drop_resource_pool = 119, RULE_drop_db_role = 120, RULE_drop_route = 121, 
		RULE_drop_rule = 122, RULE_drop_schema = 123, RULE_drop_search_property_list = 124, 
		RULE_drop_security_policy = 125, RULE_drop_sequence = 126, RULE_drop_server_audit = 127, 
		RULE_drop_server_audit_specification = 128, RULE_drop_server_role = 129, 
		RULE_drop_service = 130, RULE_drop_signature = 131, RULE_drop_statistics_name_azure_dw_and_pdw = 132, 
		RULE_drop_symmetric_key = 133, RULE_drop_synonym = 134, RULE_drop_user = 135, 
		RULE_drop_workload_group = 136, RULE_drop_xml_schema_collection = 137, 
		RULE_disable_trigger = 138, RULE_enable_trigger = 139, RULE_lock_table = 140, 
		RULE_truncate_table = 141, RULE_create_column_master_key = 142, RULE_alter_credential = 143, 
		RULE_create_credential = 144, RULE_alter_cryptographic_provider = 145, 
		RULE_create_cryptographic_provider = 146, RULE_create_endpoint = 147, 
		RULE_endpoint_encryption_alogorithm_clause = 148, RULE_endpoint_authentication_clause = 149, 
		RULE_endpoint_listener_clause = 150, RULE_create_event_notification = 151, 
		RULE_create_or_alter_event_session = 152, RULE_event_session_predicate_expression = 153, 
		RULE_event_session_predicate_factor = 154, RULE_event_session_predicate_leaf = 155, 
		RULE_alter_external_data_source = 156, RULE_alter_external_library = 157, 
		RULE_create_external_library = 158, RULE_alter_external_resource_pool = 159, 
		RULE_create_external_resource_pool = 160, RULE_alter_fulltext_catalog = 161, 
		RULE_create_fulltext_catalog = 162, RULE_alter_fulltext_stoplist = 163, 
		RULE_create_fulltext_stoplist = 164, RULE_alter_login_sql_server = 165, 
		RULE_create_login_sql_server = 166, RULE_alter_login_azure_sql = 167, 
		RULE_create_login_azure_sql = 168, RULE_alter_login_azure_sql_dw_and_pdw = 169, 
		RULE_create_login_pdw = 170, RULE_alter_master_key_sql_server = 171, RULE_create_master_key_sql_server = 172, 
		RULE_alter_master_key_azure_sql = 173, RULE_create_master_key_azure_sql = 174, 
		RULE_alter_message_type = 175, RULE_alter_partition_function = 176, RULE_alter_partition_scheme = 177, 
		RULE_alter_remote_service_binding = 178, RULE_create_remote_service_binding = 179, 
		RULE_create_resource_pool = 180, RULE_alter_resource_governor = 181, RULE_alter_database_audit_specification = 182, 
		RULE_audit_action_spec_group = 183, RULE_audit_action_specification = 184, 
		RULE_action_specification = 185, RULE_audit_class_name = 186, RULE_audit_securable = 187, 
		RULE_alter_db_role = 188, RULE_create_database_audit_specification = 189, 
		RULE_create_db_role = 190, RULE_create_route = 191, RULE_create_rule = 192, 
		RULE_alter_schema_sql = 193, RULE_create_schema = 194, RULE_create_schema_azure_sql_dw_and_pdw = 195, 
		RULE_alter_schema_azure_sql_dw_and_pdw = 196, RULE_create_search_property_list = 197, 
		RULE_create_security_policy = 198, RULE_alter_sequence = 199, RULE_create_sequence = 200, 
		RULE_alter_server_audit = 201, RULE_create_server_audit = 202, RULE_alter_server_audit_specification = 203, 
		RULE_create_server_audit_specification = 204, RULE_alter_server_configuration = 205, 
		RULE_alter_server_role = 206, RULE_create_server_role = 207, RULE_alter_server_role_pdw = 208, 
		RULE_alter_service = 209, RULE_opt_arg_clause = 210, RULE_create_service = 211, 
		RULE_alter_service_master_key = 212, RULE_alter_symmetric_key = 213, RULE_create_synonym = 214, 
		RULE_alter_user = 215, RULE_create_user = 216, RULE_create_user_azure_sql_dw = 217, 
		RULE_alter_user_azure_sql = 218, RULE_alter_workload_group = 219, RULE_create_workload_group = 220, 
		RULE_create_xml_schema_collection = 221, RULE_create_partition_function = 222, 
		RULE_create_partition_scheme = 223, RULE_create_queue = 224, RULE_queue_settings = 225, 
		RULE_alter_queue = 226, RULE_queue_action = 227, RULE_queue_rebuild_options = 228, 
		RULE_create_contract = 229, RULE_conversation_statement = 230, RULE_message_statement = 231, 
		RULE_merge_statement = 232, RULE_when_matches = 233, RULE_merge_matched = 234, 
		RULE_merge_not_matched = 235, RULE_delete_statement = 236, RULE_delete_statement_from = 237, 
		RULE_insert_statement = 238, RULE_insert_statement_value = 239, RULE_receive_statement = 240, 
		RULE_select_statement_standalone = 241, RULE_select_statement = 242, RULE_time = 243, 
		RULE_update_statement = 244, RULE_output_clause = 245, RULE_output_dml_list_elem = 246, 
		RULE_create_database = 247, RULE_create_database_azure = 248, RULE_create_database_azure_options = 249, 
		RULE_create_index = 250, RULE_create_index_options = 251, RULE_relational_index_option = 252, 
		RULE_alter_index = 253, RULE_resumable_index_options = 254, RULE_resumable_index_option = 255, 
		RULE_reorganize_partition = 256, RULE_reorganize_options = 257, RULE_reorganize_option = 258, 
		RULE_set_index_options = 259, RULE_set_index_option = 260, RULE_rebuild_partition = 261, 
		RULE_rebuild_index_options = 262, RULE_rebuild_index_option = 263, RULE_single_partition_rebuild_index_options = 264, 
		RULE_single_partition_rebuild_index_option = 265, RULE_on_partitions = 266, 
		RULE_create_columnstore_index = 267, RULE_create_columnstore_index_options = 268, 
		RULE_columnstore_index_option = 269, RULE_create_nonclustered_columnstore_index = 270, 
		RULE_create_xml_index = 271, RULE_xml_index_options = 272, RULE_xml_index_option = 273, 
		RULE_create_or_alter_procedure = 274, RULE_as_external_name = 275, RULE_create_or_alter_trigger = 276, 
		RULE_create_or_alter_dml_trigger = 277, RULE_dml_trigger_option = 278, 
		RULE_dml_trigger_operation = 279, RULE_create_or_alter_ddl_trigger = 280, 
		RULE_ddl_trigger_operation = 281, RULE_create_or_alter_function = 282, 
		RULE_func_body_returns_select = 283, RULE_func_body_returns_table = 284, 
		RULE_func_body_returns_scalar = 285, RULE_procedure_param_default_value = 286, 
		RULE_procedure_param = 287, RULE_procedure_option = 288, RULE_function_option = 289, 
		RULE_create_statistics = 290, RULE_update_statistics = 291, RULE_update_statistics_options = 292, 
		RULE_update_statistics_option = 293, RULE_create_table = 294, RULE_table_indices = 295, 
		RULE_table_options = 296, RULE_table_option = 297, RULE_create_table_index_options = 298, 
		RULE_create_table_index_option = 299, RULE_create_view = 300, RULE_view_attribute = 301, 
		RULE_alter_table = 302, RULE_switch_partition = 303, RULE_low_priority_lock_wait = 304, 
		RULE_alter_database = 305, RULE_add_or_modify_files = 306, RULE_filespec = 307, 
		RULE_add_or_modify_filegroups = 308, RULE_filegroup_updatability_option = 309, 
		RULE_database_optionspec = 310, RULE_query_store_options = 311, RULE_query_store_options_Azure = 312, 
		RULE_query_store_option_Azure = 313, RULE_auto_option = 314, RULE_change_tracking_option = 315, 
		RULE_change_tracking_option_list = 316, RULE_containment_option = 317, 
		RULE_cursor_option = 318, RULE_alter_endpoint = 319, RULE_database_mirroring_option = 320, 
		RULE_mirroring_set_option = 321, RULE_mirroring_partner = 322, RULE_mirroring_witness = 323, 
		RULE_witness_partner_equal = 324, RULE_partner_option = 325, RULE_witness_option = 326, 
		RULE_witness_server = 327, RULE_partner_server = 328, RULE_mirroring_host_port_seperator = 329, 
		RULE_partner_server_tcp_prefix = 330, RULE_port_number = 331, RULE_host = 332, 
		RULE_date_correlation_optimization_option = 333, RULE_db_encryption_option = 334, 
		RULE_db_state_option = 335, RULE_db_update_option = 336, RULE_db_user_access_option = 337, 
		RULE_delayed_durability_option = 338, RULE_external_access_option = 339, 
		RULE_hadr_options = 340, RULE_mixed_page_allocation_option = 341, RULE_parameterization_option = 342, 
		RULE_recovery_option = 343, RULE_service_broker_option = 344, RULE_snapshot_option = 345, 
		RULE_sql_option = 346, RULE_target_recovery_time_option = 347, RULE_termination = 348, 
		RULE_drop_index = 349, RULE_drop_relational_or_xml_or_spatial_index = 350, 
		RULE_drop_backward_compatible_index = 351, RULE_drop_procedure = 352, 
		RULE_drop_trigger = 353, RULE_drop_dml_trigger = 354, RULE_drop_ddl_trigger = 355, 
		RULE_drop_function = 356, RULE_drop_statistics = 357, RULE_drop_table = 358, 
		RULE_drop_view = 359, RULE_create_type = 360, RULE_drop_type = 361, RULE_rowset_function_limited = 362, 
		RULE_openquery = 363, RULE_opendatasource = 364, RULE_declare_statement = 365, 
		RULE_xml_declaration = 366, RULE_cursor_statement = 367, RULE_backup_database = 368, 
		RULE_backup_log = 369, RULE_backup_certificate = 370, RULE_backup_master_key = 371, 
		RULE_backup_service_master_key = 372, RULE_kill_statement = 373, RULE_kill_process = 374, 
		RULE_kill_query_notification = 375, RULE_kill_stats_job = 376, RULE_execute_statement = 377, 
		RULE_execute_body_batch = 378, RULE_execute_body = 379, RULE_execute_statement_arg = 380, 
		RULE_execute_statement_arg_named = 381, RULE_execute_statement_arg_unnamed = 382, 
		RULE_execute_parameter = 383, RULE_execute_var_string = 384, RULE_security_statement = 385, 
		RULE_principal_id = 386, RULE_create_certificate = 387, RULE_existing_keys = 388, 
		RULE_private_key_options = 389, RULE_generate_new_keys = 390, RULE_date_options = 391, 
		RULE_open_key = 392, RULE_close_key = 393, RULE_create_key = 394, RULE_key_options = 395, 
		RULE_algorithm = 396, RULE_encryption_mechanism = 397, RULE_decryption_mechanism = 398, 
		RULE_grant_permission = 399, RULE_set_statement = 400, RULE_transaction_statement = 401, 
		RULE_go_statement = 402, RULE_use_statement = 403, RULE_setuser_statement = 404, 
		RULE_reconfigure_statement = 405, RULE_shutdown_statement = 406, RULE_checkpoint_statement = 407, 
		RULE_dbcc_checkalloc_option = 408, RULE_dbcc_checkalloc = 409, RULE_dbcc_checkcatalog = 410, 
		RULE_dbcc_checkconstraints_option = 411, RULE_dbcc_checkconstraints = 412, 
		RULE_dbcc_checkdb_table_option = 413, RULE_dbcc_checkdb = 414, RULE_dbcc_checkfilegroup_option = 415, 
		RULE_dbcc_checkfilegroup = 416, RULE_dbcc_checktable = 417, RULE_dbcc_cleantable = 418, 
		RULE_dbcc_clonedatabase_option = 419, RULE_dbcc_clonedatabase = 420, RULE_dbcc_pdw_showspaceused = 421, 
		RULE_dbcc_proccache = 422, RULE_dbcc_showcontig_option = 423, RULE_dbcc_showcontig = 424, 
		RULE_dbcc_shrinklog = 425, RULE_dbcc_dbreindex = 426, RULE_dbcc_dll_free = 427, 
		RULE_dbcc_dropcleanbuffers = 428, RULE_dbcc_clause = 429, RULE_execute_clause = 430, 
		RULE_declare_local = 431, RULE_table_type_definition = 432, RULE_table_type_indices = 433, 
		RULE_xml_type_definition = 434, RULE_xml_schema_collection = 435, RULE_column_def_table_constraints = 436, 
		RULE_column_def_table_constraint = 437, RULE_column_definition = 438, 
		RULE_column_definition_element = 439, RULE_column_modifier = 440, RULE_materialized_column_definition = 441, 
		RULE_column_constraint = 442, RULE_column_index = 443, RULE_on_partition_or_filegroup = 444, 
		RULE_table_constraint = 445, RULE_connection_node = 446, RULE_primary_key_options = 447, 
		RULE_foreign_key_options = 448, RULE_check_constraint = 449, RULE_on_delete = 450, 
		RULE_on_update = 451, RULE_alter_table_index_options = 452, RULE_alter_table_index_option = 453, 
		RULE_declare_cursor = 454, RULE_declare_set_cursor_common = 455, RULE_declare_set_cursor_common_partial = 456, 
		RULE_fetch_cursor = 457, RULE_set_special = 458, RULE_special_list = 459, 
		RULE_constant_LOCAL_ID = 460, RULE_expression = 461, RULE_parameter = 462, 
		RULE_time_zone = 463, RULE_primitive_expression = 464, RULE_case_expression = 465, 
		RULE_unary_operator_expression = 466, RULE_bracket_expression = 467, RULE_subquery = 468, 
		RULE_with_expression = 469, RULE_common_table_expression = 470, RULE_update_elem = 471, 
		RULE_update_elem_merge = 472, RULE_search_condition = 473, RULE_predicate = 474, 
		RULE_query_expression = 475, RULE_sql_union = 476, RULE_query_specification = 477, 
		RULE_top_clause = 478, RULE_top_percent = 479, RULE_top_count = 480, RULE_order_by_clause = 481, 
		RULE_select_order_by_clause = 482, RULE_for_clause = 483, RULE_xml_common_directives = 484, 
		RULE_order_by_expression = 485, RULE_grouping_sets_item = 486, RULE_group_by_item = 487, 
		RULE_option_clause = 488, RULE_option = 489, RULE_optimize_for_arg = 490, 
		RULE_select_list = 491, RULE_udt_method_arguments = 492, RULE_asterisk = 493, 
		RULE_udt_elem = 494, RULE_expression_elem = 495, RULE_select_list_elem = 496, 
		RULE_table_sources = 497, RULE_non_ansi_join = 498, RULE_table_source = 499, 
		RULE_table_source_item = 500, RULE_open_xml = 501, RULE_open_json = 502, 
		RULE_json_declaration = 503, RULE_json_column_declaration = 504, RULE_schema_declaration = 505, 
		RULE_column_declaration = 506, RULE_change_table = 507, RULE_change_table_changes = 508, 
		RULE_change_table_version = 509, RULE_join_part = 510, RULE_join_on = 511, 
		RULE_cross_join = 512, RULE_apply_ = 513, RULE_pivot = 514, RULE_unpivot = 515, 
		RULE_pivot_clause = 516, RULE_unpivot_clause = 517, RULE_full_column_name_list = 518, 
		RULE_rowset_function = 519, RULE_bulk_option = 520, RULE_derived_table = 521, 
		RULE_function_call = 522, RULE_partition_function = 523, RULE_freetext_function = 524, 
		RULE_freetext_predicate = 525, RULE_json_key_value = 526, RULE_json_null_clause = 527, 
		RULE_built_in_functions = 528, RULE_xml_data_type_methods = 529, RULE_dateparts_9 = 530, 
		RULE_dateparts_12 = 531, RULE_dateparts_15 = 532, RULE_dateparts_datetrunc = 533, 
		RULE_value_method = 534, RULE_value_call = 535, RULE_query_method = 536, 
		RULE_query_call = 537, RULE_exist_method = 538, RULE_exist_call = 539, 
		RULE_modify_method = 540, RULE_modify_call = 541, RULE_hierarchyid_call = 542, 
		RULE_hierarchyid_static_method = 543, RULE_nodes_method = 544, RULE_switch_section = 545, 
		RULE_switch_search_condition_section = 546, RULE_as_column_alias = 547, 
		RULE_as_table_alias = 548, RULE_table_alias = 549, RULE_with_table_hints = 550, 
		RULE_deprecated_table_hint = 551, RULE_sybase_legacy_hints = 552, RULE_sybase_legacy_hint = 553, 
		RULE_table_hint = 554, RULE_index_value = 555, RULE_column_alias_list = 556, 
		RULE_column_alias = 557, RULE_table_value_constructor = 558, RULE_expression_list_ = 559, 
		RULE_ranking_windowed_function = 560, RULE_aggregate_windowed_function = 561, 
		RULE_analytic_windowed_function = 562, RULE_all_distinct_expression = 563, 
		RULE_over_clause = 564, RULE_row_or_range_clause = 565, RULE_window_frame_extent = 566, 
		RULE_window_frame_bound = 567, RULE_window_frame_preceding = 568, RULE_window_frame_following = 569, 
		RULE_create_database_option = 570, RULE_database_filestream_option = 571, 
		RULE_database_file_spec = 572, RULE_file_group = 573, RULE_file_spec = 574, 
		RULE_entity_name = 575, RULE_entity_name_for_azure_dw = 576, RULE_entity_name_for_parallel_dw = 577, 
		RULE_full_table_name = 578, RULE_table_name = 579, RULE_simple_name = 580, 
		RULE_func_proc_name_schema = 581, RULE_func_proc_name_database_schema = 582, 
		RULE_func_proc_name_server_database_schema = 583, RULE_ddl_object = 584, 
		RULE_full_column_name = 585, RULE_column_name_list_with_order = 586, RULE_insert_column_name_list = 587, 
		RULE_insert_column_id = 588, RULE_column_name_list = 589, RULE_cursor_name = 590, 
		RULE_on_off = 591, RULE_clustered = 592, RULE_null_notnull = 593, RULE_scalar_function_name = 594, 
		RULE_begin_conversation_timer = 595, RULE_begin_conversation_dialog = 596, 
		RULE_contract_name = 597, RULE_service_name = 598, RULE_end_conversation = 599, 
		RULE_waitfor_conversation = 600, RULE_get_conversation = 601, RULE_queue_id = 602, 
		RULE_send_conversation = 603, RULE_data_type = 604, RULE_constant = 605, 
		RULE_primitive_constant = 606, RULE_keyword = 607, RULE_id_ = 608, RULE_simple_id = 609, 
		RULE_id_or_string = 610, RULE_comparison_operator = 611, RULE_assignment_operator = 612, 
		RULE_file_size = 613;
	public static readonly string[] ruleNames = {
		"tsql_file", "batch", "batch_level_statement", "sql_clauses", "dml_clause", 
		"ddl_clause", "backup_statement", "cfl_statement", "block_statement", 
		"break_statement", "continue_statement", "goto_statement", "return_statement", 
		"if_statement", "throw_statement", "throw_error_number", "throw_message", 
		"throw_state", "try_catch_statement", "waitfor_statement", "while_statement", 
		"print_statement", "raiseerror_statement", "empty_statement", "another_statement", 
		"alter_application_role", "alter_xml_schema_collection", "create_application_role", 
		"drop_aggregate", "drop_application_role", "alter_assembly", "alter_assembly_start", 
		"alter_assembly_clause", "alter_assembly_from_clause", "alter_assembly_from_clause_start", 
		"alter_assembly_drop_clause", "alter_assembly_drop_multiple_files", "alter_assembly_drop", 
		"alter_assembly_add_clause", "alter_asssembly_add_clause_start", "alter_assembly_client_file_clause", 
		"alter_assembly_file_name", "alter_assembly_file_bits", "alter_assembly_as", 
		"alter_assembly_with_clause", "alter_assembly_with", "client_assembly_specifier", 
		"assembly_option", "network_file_share", "network_computer", "network_file_start", 
		"file_path", "file_directory_path_separator", "local_file", "local_drive", 
		"multiple_local_files", "multiple_local_file_start", "create_assembly", 
		"drop_assembly", "alter_asymmetric_key", "alter_asymmetric_key_start", 
		"asymmetric_key_option", "asymmetric_key_option_start", "asymmetric_key_password_change_option", 
		"create_asymmetric_key", "drop_asymmetric_key", "alter_authorization", 
		"authorization_grantee", "entity_to", "colon_colon", "alter_authorization_start", 
		"alter_authorization_for_sql_database", "alter_authorization_for_azure_dw", 
		"alter_authorization_for_parallel_dw", "class_type", "class_type_for_sql_database", 
		"class_type_for_azure_dw", "class_type_for_parallel_dw", "class_type_for_grant", 
		"drop_availability_group", "alter_availability_group", "alter_availability_group_start", 
		"alter_availability_group_options", "ip_v4_failover", "ip_v6_failover", 
		"create_or_alter_broker_priority", "drop_broker_priority", "alter_certificate", 
		"alter_column_encryption_key", "create_column_encryption_key", "drop_certificate", 
		"drop_column_encryption_key", "drop_column_master_key", "drop_contract", 
		"drop_credential", "drop_cryptograhic_provider", "drop_database", "drop_database_audit_specification", 
		"drop_database_encryption_key", "drop_database_scoped_credential", "drop_default", 
		"drop_endpoint", "drop_external_data_source", "drop_external_file_format", 
		"drop_external_library", "drop_external_resource_pool", "drop_external_table", 
		"drop_event_notifications", "drop_event_session", "drop_fulltext_catalog", 
		"drop_fulltext_index", "drop_fulltext_stoplist", "drop_login", "drop_master_key", 
		"drop_message_type", "drop_partition_function", "drop_partition_scheme", 
		"drop_queue", "drop_remote_service_binding", "drop_resource_pool", "drop_db_role", 
		"drop_route", "drop_rule", "drop_schema", "drop_search_property_list", 
		"drop_security_policy", "drop_sequence", "drop_server_audit", "drop_server_audit_specification", 
		"drop_server_role", "drop_service", "drop_signature", "drop_statistics_name_azure_dw_and_pdw", 
		"drop_symmetric_key", "drop_synonym", "drop_user", "drop_workload_group", 
		"drop_xml_schema_collection", "disable_trigger", "enable_trigger", "lock_table", 
		"truncate_table", "create_column_master_key", "alter_credential", "create_credential", 
		"alter_cryptographic_provider", "create_cryptographic_provider", "create_endpoint", 
		"endpoint_encryption_alogorithm_clause", "endpoint_authentication_clause", 
		"endpoint_listener_clause", "create_event_notification", "create_or_alter_event_session", 
		"event_session_predicate_expression", "event_session_predicate_factor", 
		"event_session_predicate_leaf", "alter_external_data_source", "alter_external_library", 
		"create_external_library", "alter_external_resource_pool", "create_external_resource_pool", 
		"alter_fulltext_catalog", "create_fulltext_catalog", "alter_fulltext_stoplist", 
		"create_fulltext_stoplist", "alter_login_sql_server", "create_login_sql_server", 
		"alter_login_azure_sql", "create_login_azure_sql", "alter_login_azure_sql_dw_and_pdw", 
		"create_login_pdw", "alter_master_key_sql_server", "create_master_key_sql_server", 
		"alter_master_key_azure_sql", "create_master_key_azure_sql", "alter_message_type", 
		"alter_partition_function", "alter_partition_scheme", "alter_remote_service_binding", 
		"create_remote_service_binding", "create_resource_pool", "alter_resource_governor", 
		"alter_database_audit_specification", "audit_action_spec_group", "audit_action_specification", 
		"action_specification", "audit_class_name", "audit_securable", "alter_db_role", 
		"create_database_audit_specification", "create_db_role", "create_route", 
		"create_rule", "alter_schema_sql", "create_schema", "create_schema_azure_sql_dw_and_pdw", 
		"alter_schema_azure_sql_dw_and_pdw", "create_search_property_list", "create_security_policy", 
		"alter_sequence", "create_sequence", "alter_server_audit", "create_server_audit", 
		"alter_server_audit_specification", "create_server_audit_specification", 
		"alter_server_configuration", "alter_server_role", "create_server_role", 
		"alter_server_role_pdw", "alter_service", "opt_arg_clause", "create_service", 
		"alter_service_master_key", "alter_symmetric_key", "create_synonym", "alter_user", 
		"create_user", "create_user_azure_sql_dw", "alter_user_azure_sql", "alter_workload_group", 
		"create_workload_group", "create_xml_schema_collection", "create_partition_function", 
		"create_partition_scheme", "create_queue", "queue_settings", "alter_queue", 
		"queue_action", "queue_rebuild_options", "create_contract", "conversation_statement", 
		"message_statement", "merge_statement", "when_matches", "merge_matched", 
		"merge_not_matched", "delete_statement", "delete_statement_from", "insert_statement", 
		"insert_statement_value", "receive_statement", "select_statement_standalone", 
		"select_statement", "time", "update_statement", "output_clause", "output_dml_list_elem", 
		"create_database", "create_database_azure", "create_database_azure_options", 
		"create_index", "create_index_options", "relational_index_option", "alter_index", 
		"resumable_index_options", "resumable_index_option", "reorganize_partition", 
		"reorganize_options", "reorganize_option", "set_index_options", "set_index_option", 
		"rebuild_partition", "rebuild_index_options", "rebuild_index_option", 
		"single_partition_rebuild_index_options", "single_partition_rebuild_index_option", 
		"on_partitions", "create_columnstore_index", "create_columnstore_index_options", 
		"columnstore_index_option", "create_nonclustered_columnstore_index", "create_xml_index", 
		"xml_index_options", "xml_index_option", "create_or_alter_procedure", 
		"as_external_name", "create_or_alter_trigger", "create_or_alter_dml_trigger", 
		"dml_trigger_option", "dml_trigger_operation", "create_or_alter_ddl_trigger", 
		"ddl_trigger_operation", "create_or_alter_function", "func_body_returns_select", 
		"func_body_returns_table", "func_body_returns_scalar", "procedure_param_default_value", 
		"procedure_param", "procedure_option", "function_option", "create_statistics", 
		"update_statistics", "update_statistics_options", "update_statistics_option", 
		"create_table", "table_indices", "table_options", "table_option", "create_table_index_options", 
		"create_table_index_option", "create_view", "view_attribute", "alter_table", 
		"switch_partition", "low_priority_lock_wait", "alter_database", "add_or_modify_files", 
		"filespec", "add_or_modify_filegroups", "filegroup_updatability_option", 
		"database_optionspec", "query_store_options", "query_store_options_Azure", 
		"query_store_option_Azure", "auto_option", "change_tracking_option", "change_tracking_option_list", 
		"containment_option", "cursor_option", "alter_endpoint", "database_mirroring_option", 
		"mirroring_set_option", "mirroring_partner", "mirroring_witness", "witness_partner_equal", 
		"partner_option", "witness_option", "witness_server", "partner_server", 
		"mirroring_host_port_seperator", "partner_server_tcp_prefix", "port_number", 
		"host", "date_correlation_optimization_option", "db_encryption_option", 
		"db_state_option", "db_update_option", "db_user_access_option", "delayed_durability_option", 
		"external_access_option", "hadr_options", "mixed_page_allocation_option", 
		"parameterization_option", "recovery_option", "service_broker_option", 
		"snapshot_option", "sql_option", "target_recovery_time_option", "termination", 
		"drop_index", "drop_relational_or_xml_or_spatial_index", "drop_backward_compatible_index", 
		"drop_procedure", "drop_trigger", "drop_dml_trigger", "drop_ddl_trigger", 
		"drop_function", "drop_statistics", "drop_table", "drop_view", "create_type", 
		"drop_type", "rowset_function_limited", "openquery", "opendatasource", 
		"declare_statement", "xml_declaration", "cursor_statement", "backup_database", 
		"backup_log", "backup_certificate", "backup_master_key", "backup_service_master_key", 
		"kill_statement", "kill_process", "kill_query_notification", "kill_stats_job", 
		"execute_statement", "execute_body_batch", "execute_body", "execute_statement_arg", 
		"execute_statement_arg_named", "execute_statement_arg_unnamed", "execute_parameter", 
		"execute_var_string", "security_statement", "principal_id", "create_certificate", 
		"existing_keys", "private_key_options", "generate_new_keys", "date_options", 
		"open_key", "close_key", "create_key", "key_options", "algorithm", "encryption_mechanism", 
		"decryption_mechanism", "grant_permission", "set_statement", "transaction_statement", 
		"go_statement", "use_statement", "setuser_statement", "reconfigure_statement", 
		"shutdown_statement", "checkpoint_statement", "dbcc_checkalloc_option", 
		"dbcc_checkalloc", "dbcc_checkcatalog", "dbcc_checkconstraints_option", 
		"dbcc_checkconstraints", "dbcc_checkdb_table_option", "dbcc_checkdb", 
		"dbcc_checkfilegroup_option", "dbcc_checkfilegroup", "dbcc_checktable", 
		"dbcc_cleantable", "dbcc_clonedatabase_option", "dbcc_clonedatabase", 
		"dbcc_pdw_showspaceused", "dbcc_proccache", "dbcc_showcontig_option", 
		"dbcc_showcontig", "dbcc_shrinklog", "dbcc_dbreindex", "dbcc_dll_free", 
		"dbcc_dropcleanbuffers", "dbcc_clause", "execute_clause", "declare_local", 
		"table_type_definition", "table_type_indices", "xml_type_definition", 
		"xml_schema_collection", "column_def_table_constraints", "column_def_table_constraint", 
		"column_definition", "column_definition_element", "column_modifier", "materialized_column_definition", 
		"column_constraint", "column_index", "on_partition_or_filegroup", "table_constraint", 
		"connection_node", "primary_key_options", "foreign_key_options", "check_constraint", 
		"on_delete", "on_update", "alter_table_index_options", "alter_table_index_option", 
		"declare_cursor", "declare_set_cursor_common", "declare_set_cursor_common_partial", 
		"fetch_cursor", "set_special", "special_list", "constant_LOCAL_ID", "expression", 
		"parameter", "time_zone", "primitive_expression", "case_expression", "unary_operator_expression", 
		"bracket_expression", "subquery", "with_expression", "common_table_expression", 
		"update_elem", "update_elem_merge", "search_condition", "predicate", "query_expression", 
		"sql_union", "query_specification", "top_clause", "top_percent", "top_count", 
		"order_by_clause", "select_order_by_clause", "for_clause", "xml_common_directives", 
		"order_by_expression", "grouping_sets_item", "group_by_item", "option_clause", 
		"option", "optimize_for_arg", "select_list", "udt_method_arguments", "asterisk", 
		"udt_elem", "expression_elem", "select_list_elem", "table_sources", "non_ansi_join", 
		"table_source", "table_source_item", "open_xml", "open_json", "json_declaration", 
		"json_column_declaration", "schema_declaration", "column_declaration", 
		"change_table", "change_table_changes", "change_table_version", "join_part", 
		"join_on", "cross_join", "apply_", "pivot", "unpivot", "pivot_clause", 
		"unpivot_clause", "full_column_name_list", "rowset_function", "bulk_option", 
		"derived_table", "function_call", "partition_function", "freetext_function", 
		"freetext_predicate", "json_key_value", "json_null_clause", "built_in_functions", 
		"xml_data_type_methods", "dateparts_9", "dateparts_12", "dateparts_15", 
		"dateparts_datetrunc", "value_method", "value_call", "query_method", "query_call", 
		"exist_method", "exist_call", "modify_method", "modify_call", "hierarchyid_call", 
		"hierarchyid_static_method", "nodes_method", "switch_section", "switch_search_condition_section", 
		"as_column_alias", "as_table_alias", "table_alias", "with_table_hints", 
		"deprecated_table_hint", "sybase_legacy_hints", "sybase_legacy_hint", 
		"table_hint", "index_value", "column_alias_list", "column_alias", "table_value_constructor", 
		"expression_list_", "ranking_windowed_function", "aggregate_windowed_function", 
		"analytic_windowed_function", "all_distinct_expression", "over_clause", 
		"row_or_range_clause", "window_frame_extent", "window_frame_bound", "window_frame_preceding", 
		"window_frame_following", "create_database_option", "database_filestream_option", 
		"database_file_spec", "file_group", "file_spec", "entity_name", "entity_name_for_azure_dw", 
		"entity_name_for_parallel_dw", "full_table_name", "table_name", "simple_name", 
		"func_proc_name_schema", "func_proc_name_database_schema", "func_proc_name_server_database_schema", 
		"ddl_object", "full_column_name", "column_name_list_with_order", "insert_column_name_list", 
		"insert_column_id", "column_name_list", "cursor_name", "on_off", "clustered", 
		"null_notnull", "scalar_function_name", "begin_conversation_timer", "begin_conversation_dialog", 
		"contract_name", "service_name", "end_conversation", "waitfor_conversation", 
		"get_conversation", "queue_id", "send_conversation", "data_type", "constant", 
		"primitive_constant", "keyword", "id_", "simple_id", "id_or_string", "comparison_operator", 
		"assignment_operator", "file_size"
	};

	private static readonly string[] _LiteralNames = {
		null, "'ABORT'", "'ABORT_AFTER_WAIT'", "'ABSENT'", "'ABSOLUTE'", "'ACCELERATED_DATABASE_RECOVERY'", 
		"'ACCENT_SENSITIVITY'", "'ACCESS'", "'ACTION'", "'ACTIVATION'", "'ACTIVE'", 
		"'ADD'", "'ADDRESS'", "'ADMINISTER'", "'AES'", "'AES_128'", "'AES_192'", 
		"'AES_256'", "'AFFINITY'", "'AFTER'", "'AGGREGATE'", "'ALGORITHM'", "'ALL'", 
		"'ALLOWED'", "'ALLOW_CONNECTIONS'", "'ALLOW_ENCRYPTED_VALUE_MODIFICATIONS'", 
		"'ALLOW_MULTIPLE_EVENT_LOSS'", "'ALLOW_PAGE_LOCKS'", "'ALLOW_ROW_LOCKS'", 
		"'ALLOW_SINGLE_EVENT_LOSS'", "'ALLOW_SNAPSHOT_ISOLATION'", "'ALL_CONSTRAINTS'", 
		"'ALL_ERRORMSGS'", "'ALL_INDEXES'", "'ALL_LEVELS'", "'ALTER'", "'ALWAYS'", 
		"'AND'", "'ANONYMOUS'", "'ANSI_DEFAULTS'", "'ANSI_NULLS'", "'ANSI_NULL_DEFAULT'", 
		"'ANSI_NULL_DFLT_OFF'", "'ANSI_NULL_DFLT_ON'", "'ANSI_PADDING'", "'ANSI_WARNINGS'", 
		"'ANY'", "'APPEND'", "'APPLICATION'", "'APPLICATION_LOG'", "'APPLOCK_MODE'", 
		"'APPLOCK_TEST'", "'APPLY'", "'APP_NAME'", "'ARITHABORT'", "'ARITHIGNORE'", 
		"'AS'", "'ASC'", "'ASCII'", "'ASSEMBLY'", "'ASSEMBLYPROPERTY'", "'ASYMMETRIC'", 
		"'ASYNCHRONOUS_COMMIT'", "'AT'", "'AUDIT'", "'AUDIT_GUID'", "'AUTHENTICATE'", 
		"'AUTHENTICATION'", "'AUTHORIZATION'", "'AUTO'", "'AUTOGROW_ALL_FILES'", 
		"'AUTOGROW_SINGLE_FILE'", "'AUTOMATED_BACKUP_PREFERENCE'", "'AUTOMATIC'", 
		"'AUTO_CLEANUP'", "'AUTO_CLOSE'", "'AUTO_CREATE_STATISTICS'", "'AUTO_DROP'", 
		"'AUTO_SHRINK'", "'AUTO_UPDATE_STATISTICS'", "'AUTO_UPDATE_STATISTICS_ASYNC'", 
		"'AVAILABILITY'", "'AVAILABILITY_MODE'", "'AVG'", "'\\'", "'BACKUP'", 
		"'BACKUP_CLONEDB'", "'BACKUP_PRIORITY'", "'BASE64'", "'BEFORE'", "'BEGIN'", 
		"'BEGIN_DIALOG'", "'BETWEEN'", "'BIGINT'", "'BINARY_CHECKSUM'", "'BINARY'", 
		"'BINDING'", "'BLOB_STORAGE'", "'BLOCK'", "'BLOCKERS'", "'BLOCKING_HIERARCHY'", 
		"'BLOCKSIZE'", "'BREAK'", "'BROKER'", "'BROKER_INSTANCE'", "'BROWSE'", 
		"'BUFFER'", "'BUFFERCOUNT'", "'BULK'", "'BULK_LOGGED'", "'BY'", "'CACHE'", 
		"'CALLED'", "'CALLER'", "'CAP_CPU_PERCENT'", "'CASCADE'", "'CASE'", "'CAST'", 
		"'CATALOG'", "'CATALOG_COLLATION'", "'CATCH'", "'CERTENCODED'", "'CERTIFICATE'", 
		"'CERTPRIVATEKEY'", "'CERT_ID'", "'CHANGE'", "'CHANGES'", "'CHANGETABLE'", 
		"'CHANGE_RETENTION'", "'CHANGE_TRACKING'", "'CHAR'", "'CHARINDEX'", "'CHECK'", 
		"'CHECKALLOC'", "'CHECKCATALOG'", "'CHECKCONSTRAINTS'", "'CHECKDB'", "'CHECKFILEGROUP'", 
		"'CHECKPOINT'", "'CHECKSUM'", "'CHECKSUM_AGG'", "'CHECKTABLE'", "'CHECK_EXPIRATION'", 
		"'CHECK_POLICY'", "'CLASSIFIER_FUNCTION'", "'CLEANTABLE'", "'CLEANUP'", 
		"'CLEANUP_POLICY'", "'CLONEDATABASE'", "'CLOSE'", "'CLUSTER'", "'CLUSTERED'", 
		"'COALESCE'", "'COLLATE'", "'COLLECTION'", "'COLUMN'", "'COLUMNPROPERTY'", 
		"'COLUMNS'", "'COLUMNSTORE'", "'COLUMNSTORE_ARCHIVE'", "'COLUMN_ENCRYPTION_KEY'", 
		"'COLUMN_MASTER_KEY'", "'COL_LENGTH'", "'COL_NAME'", "'COMMIT'", "'COMMITTED'", 
		"'COMPATIBILITY_LEVEL'", "'COMPRESS'", "'COMPRESSION'", "'COMPRESSION_DELAY'", 
		"'COMPRESS_ALL_ROW_GROUPS'", "'COMPUTE'", "'CONCAT'", "'CONCAT_NULL_YIELDS_NULL'", 
		"'CONCAT_WS'", "'CONFIGURATION'", "'CONNECT'", "'CONNECTION'", "'CONNECTIONPROPERTY'", 
		"'CONSTRAINT'", "'CONTAINMENT'", "'CONTAINS'", "'CONTAINSTABLE'", "'CONTENT'", 
		"'CONTEXT'", "'CONTEXT_INFO'", "'CONTINUE'", "'CONTINUE_AFTER_ERROR'", 
		"'CONTRACT'", "'CONTRACT_NAME'", "'CONTROL'", "'CONVERSATION'", null, 
		"'COOKIE'", "'COPY_ONLY'", "'COUNT'", "'COUNTER'", "'COUNT_BIG'", "'CPU'", 
		"'CREATE'", "'CREATE_NEW'", "'CREATION_DISPOSITION'", "'CREDENTIAL'", 
		"'CROSS'", "'CRYPTOGRAPHIC'", "'CUME_DIST'", "'CURRENT'", "'CURRENT_DATE'", 
		"'CURRENT_REQUEST_ID'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_TRANSACTION_ID'", 
		"'CURRENT_USER'", "'CURSOR'", "'CURSOR_CLOSE_ON_COMMIT'", "'CURSOR_DEFAULT'", 
		"'CURSOR_STATUS'", "'CYCLE'", "'DATA'", "'DATABASE'", "'DATABASEPROPERTYEX'", 
		"'DATABASE_DEFAULT'", "'DATABASE_MIRRORING'", "'DATABASE_PRINCIPAL_ID'", 
		"'DATALENGTH'", "'DATASPACE'", "'DATA_COMPRESSION'", "'DATA_FLUSH_INTERVAL_SECONDS'", 
		"'DATA_PURITY'", "'DATA_SOURCE'", "'DATEADD'", "'DATEDIFF'", "'DATENAME'", 
		"'DATEPART'", "'DATE_CORRELATION_OPTIMIZATION'", "'DAYS'", "'DBCC'", "'DBREINDEX'", 
		"'DB_CHAINING'", "'DB_FAILOVER'", "'DB_ID'", "'DB_NAME'", "'DDL'", "'DEALLOCATE'", 
		"'DECLARE'", "'DECOMPRESS'", "'DECRYPTION'", "'DEFAULT'", "'DEFAULT_DATABASE'", 
		null, "'DEFAULT_FULLTEXT_LANGUAGE'", "'DEFAULT_LANGUAGE'", "'DEFAULT_SCHEMA'", 
		"'DEFINITION'", "'DELAY'", "'DELAYED_DURABILITY'", "'DELETE'", "'DELETED'", 
		"'DENSE_RANK'", "'DENY'", "'DEPENDENTS'", "'DES'", "'DESC'", "'DESCRIPTION'", 
		"'DESX'", "'DETERMINISTIC'", "'DHCP'", "'DIAGNOSTICS'", "'DIALOG'", "'DIFFERENCE'", 
		"'DIFFERENTIAL'", "'DIRECTORY_NAME'", "'DISABLE'", "'DISABLED'", "'DISABLE_BROKER'", 
		"'DISK'", "'DISTINCT'", "'DISTRIBUTED'", "'DISTRIBUTION'", "'DOCUMENT'", 
		"'$PARTITION'", "'DOUBLE'", "'\\\\'", "'//'", "'DROP'", "'DROPCLEANBUFFERS'", 
		"'DROP_EXISTING'", "'DTC_SUPPORT'", "'DUMP'", "'DYNAMIC'", "'EDITION'", 
		"'ELEMENTS'", "'ELSE'", "'EMERGENCY'", "'EMPTY'", "'ENABLE'", "'ENABLED'", 
		"'ENABLE_BROKER'", "'ENCRYPTED'", "'ENCRYPTED_VALUE'", "'ENCRYPTION'", 
		"'ENCRYPTION_TYPE'", "'END'", "'ENDPOINT'", "'ENDPOINT_URL'", "'ERRLVL'", 
		"'ERROR'", "'ERROR_BROKER_CONVERSATIONS'", "'ERROR_LINE'", "'ERROR_MESSAGE'", 
		"'ERROR_NUMBER'", "'ERROR_PROCEDURE'", "'ERROR_SEVERITY'", "'ERROR_STATE'", 
		"'ESCAPE'", "'ESTIMATEONLY'", "'EVENT'", "'EVENTDATA'", "'EVENT_RETENTION_MODE'", 
		"'EXCEPT'", "'EXCLUSIVE'", "'EXECUTABLE'", "'EXECUTABLE_FILE'", null, 
		"'EXIST'", "'EXISTS'", "'[EXIST]'", "'EXIT'", "'EXPAND'", "'EXPIREDATE'", 
		"'EXPIRY_DATE'", "'EXPLICIT'", "'EXTENDED_LOGICAL_CHECKS'", "'EXTENSION'", 
		"'EXTERNAL'", "'EXTERNAL_ACCESS'", "'FAILOVER'", "'FAILOVER_MODE'", "'FAILURE'", 
		"'FAILURECONDITIONLEVEL'", "'FAILURE_CONDITION_LEVEL'", "'FAIL_OPERATION'", 
		"'FAN_IN'", "'FAST'", "'FAST_FORWARD'", "'FETCH'", "'FILE'", "'FILEGROUP'", 
		"'FILEGROUPPROPERTY'", "'FILEGROUP_ID'", "'FILEGROUP_NAME'", "'FILEGROWTH'", 
		"'FILENAME'", "'FILEPATH'", "'FILEPROPERTY'", "'FILEPROPERTYEX'", "'FILESTREAM'", 
		"'FILESTREAM_ON'", "'FILE_ID'", "'FILE_IDEX'", "'FILE_NAME'", "'FILE_SNAPSHOT'", 
		"'FILLFACTOR'", "'FILTER'", "'FIRST'", "'FIRST_VALUE'", "'FMTONLY'", "'FOLLOWING'", 
		"'FOR'", "'FORCE'", "'FORCED'", "'FORCEPLAN'", "'FORCESCAN'", "'FORCESEEK'", 
		"'FORCE_FAILOVER_ALLOW_DATA_LOSS'", "'FORCE_SERVICE_ALLOW_DATA_LOSS'", 
		"'FOREIGN'", "'FORMAT'", "'FORMATMESSAGE'", "'FORWARD_ONLY'", "'FREE'", 
		"'FREETEXT'", "'FREETEXTTABLE'", "'FROM'", "'FULL'", "'FULLSCAN'", "'FULLTEXT'", 
		"'FULLTEXTCATALOGPROPERTY'", "'FULLTEXTSERVICEPROPERTY'", "'FUNCTION'", 
		"'GB'", "'GENERATED'", "'GET'", "'GETANCESTOR'", "'GETANSINULL'", "'GETDATE'", 
		"'GETDESCENDANT'", "'GETLEVEL'", "'GETREPARENTEDVALUE'", "'GETROOT'", 
		"'GETUTCDATE'", "'GET_FILESTREAM_TRANSACTION_CONTEXT'", "'GLOBAL'", "'GO'", 
		"'GOTO'", "'GOVERNOR'", "'GRANT'", "'GREATEST'", "'GROUP'", "'GROUPING'", 
		"'GROUPING_ID'", "'GROUP_MAX_REQUESTS'", "'HADR'", "'HASH'", "'HASHED'", 
		"'HAS_DBACCESS'", "'HAS_PERMS_BY_NAME'", "'HAVING'", "'HEALTHCHECKTIMEOUT'", 
		"'HEALTH_CHECK_TIMEOUT'", "'HEAP'", "'HIDDEN'", "'HIERARCHYID'", "'HIGH'", 
		"'HOLDLOCK'", "'HONOR_BROKER_PRIORITY'", "'HOST_ID'", "'HOST_NAME'", "'HOURS'", 
		"'IDENTITY'", "'IDENTITYCOL'", "'IDENTITY_INSERT'", "'IDENTITY_VALUE'", 
		"'IDENT_CURRENT'", "'IDENT_INCR'", "'IDENT_SEED'", "'IF'", "'IGNORE_CONSTRAINTS'", 
		"'IGNORE_DUP_KEY'", "'IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX'", "'IGNORE_REPLICATED_TABLE_CACHE'", 
		"'IGNORE_TRIGGERS'", "'IIF'", "'IMMEDIATE'", "'IMPERSONATE'", "'IMPLICIT_TRANSACTIONS'", 
		"'IMPORTANCE'", "'IN'", "'INCLUDE'", "'INCLUDE_NULL_VALUES'", "'INCREMENT'", 
		"'INCREMENTAL'", "'INDEX'", "'INDEXKEY_PROPERTY'", "'INDEXPROPERTY'", 
		"'INDEX_COL'", "'INFINITE'", "'INIT'", "'INITIATOR'", "'INNER'", "'INPUT'", 
		"'INSENSITIVE'", "'INSERT'", "'INSERTED'", "'INSTEAD'", "'INT'", "'INTERSECT'", 
		"'INTERVAL_LENGTH_MINUTES'", "'INTO'", "'IO'", "'IP'", "'IS'", "'ISDESCENDANTOF'", 
		"'ISJSON'", "'ISNULL'", "'ISNUMERIC'", "'ISOLATION'", "'IS_MEMBER'", "'IS_ROLEMEMBER'", 
		"'IS_SRVROLEMEMBER'", "'JOB'", "'JOIN'", "'JSON'", "'JSON_ARRAY'", "'JSON_MODIFY'", 
		"'JSON_OBJECT'", "'JSON_PATH_EXISTS'", "'JSON_QUERY'", "'JSON_VALUE'", 
		"'KB'", "'KEEP'", "'KEEPDEFAULTS'", "'KEEPFIXED'", "'KEEPIDENTITY'", "'KERBEROS'", 
		"'KEY'", "'KEYS'", "'KEYSET'", "'KEY_PATH'", "'KEY_SOURCE'", "'KEY_STORE_PROVIDER_NAME'", 
		"'KILL'", "'LAG'", "'LANGUAGE'", "'LAST'", "'LAST_VALUE'", "'LEAD'", "'LEAST'", 
		"'LEDGER'", "'LEFT'", "'LEN'", "'LEVEL'", "'LIBRARY'", "'LIFETIME'", "'LIKE'", 
		"'LINENO'", "'LINKED'", "'LINUX'", "'LIST'", "'LISTENER'", "'LISTENER_IP'", 
		"'LISTENER_PORT'", "'LISTENER_URL'", "'LOAD'", "'LOB_COMPACTION'", "'LOCAL'", 
		"'LOCAL_SERVICE_NAME'", "'LOCATION'", "'LOCK'", "'LOCK_ESCALATION'", "'LOG'", 
		"'LOGIN'", "'LOGINPROPERTY'", "'LOOP'", "'LOW'", "'LOWER'", "'LTRIM'", 
		"'MANUAL'", "'MARK'", "'MASK'", "'MASKED'", "'MASTER'", "'MATCHED'", "'MATERIALIZED'", 
		"'MAX'", "'MAXDOP'", "'MAXRECURSION'", "'MAXSIZE'", "'MAXTRANSFER'", "'MAXVALUE'", 
		"'MAX_CPU_PERCENT'", "'MAX_DISPATCH_LATENCY'", "'MAX_DOP'", "'MAX_DURATION'", 
		"'MAX_EVENT_SIZE'", "'MAX_FILES'", "'MAX_IOPS_PER_VOLUME'", "'MAX_MEMORY'", 
		"'MAX_MEMORY_PERCENT'", "'MAX_OUTSTANDING_IO_PER_VOLUME'", "'MAX_PLANS_PER_QUERY'", 
		"'MAX_PROCESSES'", "'MAX_QUEUE_READERS'", "'MAX_ROLLOVER_FILES'", "'MAX_SIZE'", 
		"'MAX_STORAGE_SIZE_MB'", "'MB'", "'MEDIADESCRIPTION'", "'MEDIANAME'", 
		"'MEDIUM'", "'MEMBER'", "'MEMORY_OPTIMIZED_DATA'", "'MEMORY_PARTITION_MODE'", 
		"'MERGE'", "'MESSAGE'", "'MESSAGE_FORWARDING'", "'MESSAGE_FORWARD_SIZE'", 
		"'MIN'", "'MINUTES'", "'MINVALUE'", "'MIN_ACTIVE_ROWVERSION'", "'MIN_CPU_PERCENT'", 
		"'MIN_IOPS_PER_VOLUME'", "'MIN_MEMORY_PERCENT'", "'MIRROR'", "'MIRROR_ADDRESS'", 
		"'MIXED_PAGE_ALLOCATION'", "'MODE'", "'MODIFY'", "'[MODIFY]'", "'MOVE'", 
		"'MULTI_USER'", "'MUST_CHANGE'", "'NAME'", "'NATIONAL'", "'NCHAR'", "'NEGOTIATE'", 
		"'NESTED_TRIGGERS'", "'NEWID'", "'NEWNAME'", "'NEWSEQUENTIALID'", "'NEW_ACCOUNT'", 
		"'NEW_BROKER'", "'NEW_PASSWORD'", "'NEXT'", "'NO'", "'NOCHECK'", "'NOCOUNT'", 
		"'NODES'", "'NOEXEC'", "'NOEXPAND'", "'NOFORMAT'", "'NOHOLDLOCK'", "'NOINDEX'", 
		"'NOINIT'", "'NOLOCK'", "'NONCLUSTERED'", "'NONE'", "'NON_TRANSACTED_ACCESS'", 
		"'NORECOMPUTE'", "'NORECOVERY'", "'NOREWIND'", "'NOSKIP'", "'NOT'", "'NOTIFICATION'", 
		"'NOTIFICATIONS'", "'NOUNLOAD'", "'NOWAIT'", "'NO_CHECKSUM'", "'NO_COMPRESSION'", 
		"'NO_EVENT_LOSS'", "'NO_INFOMSGS'", "'NO_QUERYSTORE'", "'NO_STATISTICS'", 
		"'NO_TRUNCATE'", "'NO_WAIT'", "'NTILE'", "'NTLM'", "'NULLIF'", "'NULL'", 
		null, "'NUMANODE'", "'NUMBER'", "'NUMERIC_ROUNDABORT'", "'OBJECT'", "'OBJECTPROPERTY'", 
		"'OBJECTPROPERTYEX'", "'OBJECT_DEFINITION'", "'OBJECT_ID'", "'OBJECT_NAME'", 
		"'OBJECT_SCHEMA_NAME'", "'OF'", "'OFF'", "'OFFLINE'", "'OFFSET'", "'OFFSETS'", 
		"'OLD_ACCOUNT'", "'OLD_PASSWORD'", "'ON'", "'ONLINE'", "'ONLY'", "'ON_FAILURE'", 
		"'OPEN'", "'OPENDATASOURCE'", "'OPENJSON'", "'OPENQUERY'", "'OPENROWSET'", 
		"'OPENXML'", "'OPEN_EXISTING'", "'OPERATIONS'", "'OPERATION_MODE'", "'OPTIMISTIC'", 
		"'OPTIMIZE'", "'OPTIMIZE_FOR_SEQUENTIAL_KEY'", "'OPTION'", "'OR'", "'ORDER'", 
		"'ORIGINAL_DB_NAME'", "'ORIGINAL_LOGIN'", "'OUT'", "'OUTER'", "'OUTPUT'", 
		"'OVER'", "'OVERRIDE'", "'OWNER'", "'OWNERSHIP'", "'PAD_INDEX'", "'PAGE'", 
		"'PAGECOUNT'", "'PAGE_VERIFY'", "'PAGLOCK'", "'PARAMETERIZATION'", "'PARAM_NODE'", 
		null, "'PARSENAME'", "'PARSEONLY'", "'PARTIAL'", "'PARTITION'", "'PARTITIONS'", 
		"'PARTNER'", "'PASSWORD'", "'PATH'", "'PATINDEX'", "'PAUSE'", "'PDW_SHOWSPACEUSED'", 
		"'PERCENT'", "'PERCENTILE_CONT'", "'PERCENTILE_DISC'", "'PERCENT_RANK'", 
		"'PERMISSIONS'", "'PERMISSION_SET'", "'PERSISTED'", "'PERSIST_SAMPLE_PERCENT'", 
		"'PER_CPU'", "'PER_DB'", "'PER_NODE'", "'PHYSICAL_ONLY'", "'PIVOT'", "'PLAN'", 
		"'PLATFORM'", "'POISON_MESSAGE_HANDLING'", "'POLICY'", "'POOL'", "'PORT'", 
		"'PRECEDING'", "'PRECISION'", "'PREDICATE'", "'PRIMARY'", "'PRIMARY_ROLE'", 
		"'PRINT'", "'PRIOR'", "'PRIORITY'", "'PRIORITY_LEVEL'", "'PRIVATE'", "'PRIVATE_KEY'", 
		"'PRIVILEGES'", "'PROC'", "'PROCCACHE'", "'PROCEDURE'", "'PROCEDURE_NAME'", 
		"'PROCESS'", "'PROFILE'", "'PROPERTY'", "'PROVIDER'", "'PROVIDER_KEY_NAME'", 
		"'PUBLIC'", "'PWDCOMPARE'", "'PWDENCRYPT'", "'PYTHON'", "'QUERY'", "'QUERY_CAPTURE_MODE'", 
		"'[QUERY]'", "'QUERY_STORE'", "'QUEUE'", "'QUEUE_DELAY'", "'QUOTED_IDENTIFIER'", 
		"'QUOTENAME'", "'R'", "'RAISERROR'", "'RANDOMIZED'", "'RANGE'", "'RANK'", 
		"'RAW'", "'RC2'", "'RC4'", "'RC4_128'", "'READ'", "'READCOMMITTED'", "'READCOMMITTEDLOCK'", 
		"'READONLY'", "'READPAST'", "'READTEXT'", "'READUNCOMMITTED'", "'READWRITE'", 
		"'READ_COMMITTED_SNAPSHOT'", "'READ_ONLY'", "'READ_ONLY_ROUTING_LIST'", 
		"'READ_WRITE'", "'READ_WRITE_FILEGROUPS'", "'REBUILD'", "'RECEIVE'", "'RECOMPILE'", 
		"'RECONFIGURE'", "'RECOVERY'", "'RECURSIVE_TRIGGERS'", "'REFERENCES'", 
		"'REGENERATE'", "'RELATED_CONVERSATION'", "'RELATED_CONVERSATION_GROUP'", 
		"'RELATIVE'", "'REMOTE'", "'REMOTE_PROC_TRANSACTIONS'", "'REMOTE_SERVICE_NAME'", 
		"'REMOVE'", "'REORGANIZE'", "'REPAIR_ALLOW_DATA_LOSS'", "'REPAIR_FAST'", 
		"'REPAIR_REBUILD'", "'REPEATABLE'", "'REPEATABLEREAD'", "'REPLACE'", "'REPLICA'", 
		"'REPLICATE'", "'REPLICATION'", "'REQUEST_MAX_CPU_TIME_SEC'", "'REQUEST_MAX_MEMORY_GRANT_PERCENT'", 
		"'REQUEST_MEMORY_GRANT_TIMEOUT_SEC'", "'REQUIRED'", "'REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT'", 
		"'RESAMPLE'", "'RESERVE_DISK_SPACE'", "'RESET'", "'RESOURCE'", "'RESOURCES'", 
		"'RESOURCE_MANAGER_LOCATION'", "'RESTART'", "'RESTORE'", "'RESTRICT'", 
		"'RESTRICTED_USER'", "'RESUMABLE'", "'RESUME'", "'RETAINDAYS'", "'RETENTION'", 
		"'RETURN'", "'RETURNS'", "'REVERSE'", "'REVERT'", "'REVOKE'", "'REWIND'", 
		"'RIGHT'", "'ROBUST'", "'ROLE'", "'ROLLBACK'", "'ROOT'", "'ROUND_ROBIN'", 
		"'ROUTE'", "'ROW'", "'ROWCOUNT'", "'ROWCOUNT_BIG'", "'ROWGUID'", "'ROWGUIDCOL'", 
		"'ROWLOCK'", "'ROWS'", "'ROW_NUMBER'", "'RSA_1024'", "'RSA_2048'", "'RSA_3072'", 
		"'RSA_4096'", "'RSA_512'", "'RTRIM'", "'RULE'", "'SAFE'", "'SAFETY'", 
		"'SAMPLE'", "'SAVE'", "'SCHEDULER'", "'SCHEMA'", "'SCHEMABINDING'", "'SCHEMA_ID'", 
		"'SCHEMA_NAME'", "'SCHEME'", "'SCOPED'", "'SCOPE_IDENTITY'", "'SCRIPT'", 
		"'SCROLL'", "'SCROLL_LOCKS'", "'SEARCH'", "'SECONDARY'", "'SECONDARY_ONLY'", 
		"'SECONDARY_ROLE'", "'SECONDS'", "'SECRET'", "'SECURABLES'", "'SECURITY'", 
		"'SECURITYAUDIT'", "'SECURITY_LOG'", "'SEEDING_MODE'", "'SELECT'", "'SELF'", 
		"'SEMANTICKEYPHRASETABLE'", "'SEMANTICSIMILARITYDETAILSTABLE'", "'SEMANTICSIMILARITYTABLE'", 
		"'SEMI_SENSITIVE'", "'SEND'", "'SENT'", "'SEQUENCE'", "'SEQUENCE_NUMBER'", 
		"'SERIALIZABLE'", "'SERVER'", "'SERVERPROPERTY'", "'SERVICE'", "'SERVICEBROKER'", 
		"'SERVICE_BROKER'", "'SERVICE_NAME'", "'SERVICE_OBJECTIVE'", "'SESSION'", 
		"'SESSIONPROPERTY'", "'SESSION_CONTEXT'", "'SESSION_TIMEOUT'", "'SESSION_USER'", 
		"'SET'", "'SETERROR'", "'SETS'", "'SETTINGS'", "'SETUSER'", "'SHARE'", 
		"'SHARED'", "'SHOWCONTIG'", "'SHOWPLAN'", "'SHOWPLAN_ALL'", "'SHOWPLAN_TEXT'", 
		"'SHOWPLAN_XML'", "'SHRINKLOG'", "'SHUTDOWN'", "'SID'", "'SIGNATURE'", 
		"'SIMPLE'", "'SINGLE_USER'", "'SIZE'", "'SIZE_BASED_CLEANUP_MODE'", "'SKIP'", 
		"'SMALLINT'", "'SNAPSHOT'", "'SOFTNUMA'", "'SOME'", "'SORT_IN_TEMPDB'", 
		"'SOUNDEX'", "'SOURCE'", "'SPACE'", "'SPARSE'", "'SPATIAL_WINDOW_MAX_CELLS'", 
		"'SPECIFICATION'", "'SPLIT'", "'SQL'", "'SQLDUMPERFLAGS'", "'SQLDUMPERPATH'", 
		"'SQLDUMPERTIMEOUT'", "'SQL_VARIANT_PROPERTY'", "'STALE_QUERY_THRESHOLD_DAYS'", 
		"'STANDBY'", "'START'", "'STARTED'", "'STARTUP_STATE'", "'START_DATE'", 
		"'STATE'", "'STATIC'", "'STATISTICS'", "'STATISTICS_INCREMENTAL'", "'STATISTICS_NORECOMPUTE'", 
		"'STATS'", "'STATS_DATE'", "'STATS_STREAM'", "'STATUS'", "'STATUSONLY'", 
		"'STDEV'", "'STDEVP'", "'STOP'", "'STOPLIST'", "'STOPPED'", "'STOP_ON_ERROR'", 
		"'STR'", "'STRING_AGG'", "'STRING_ESCAPE'", "'STUFF'", "'SUBJECT'", "'SUBSCRIBE'", 
		"'SUBSCRIPTION'", "'SUBSTRING'", "'SUM'", "'SUPPORTED'", "'SUSER_ID'", 
		"'SUSER_NAME'", "'SUSER_SID'", "'SUSER_SNAME'", "'SUSPEND'", "'SWITCH'", 
		"'SYMMETRIC'", "'SYNCHRONOUS_COMMIT'", "'SYNONYM'", "'SYSTEM'", "'SYSTEM_USER'", 
		"'TABLE'", "'TABLERESULTS'", "'TABLESAMPLE'", "'TABLOCK'", "'TABLOCKX'", 
		"'TAKE'", "'TAPE'", "'TARGET'", "'TARGET_RECOVERY_TIME'", "'TB'", "'TCP'", 
		"'TEXTIMAGE_ON'", "'TEXTSIZE'", "'THEN'", "'THROW'", "'TIES'", "'TIME'", 
		"'TIMEOUT'", "'TIMER'", "'TINYINT'", "'TO'", "'TOP'", "'TORN_PAGE_DETECTION'", 
		"'TOSTRING'", "'TRACE'", "'TRACKING'", "'TRACK_CAUSALITY'", "'TRAN'", 
		"'TRANSACTION'", "'TRANSACTION_ID'", "'TRANSFER'", "'TRANSFORM_NOISE_WORDS'", 
		"'TRANSLATE'", "'TRIGGER'", "'TRIM'", "'TRIPLE_DES'", "'TRIPLE_DES_3KEY'", 
		"'TRUNCATE'", "'TRUSTWORTHY'", "'TRY'", "'TRY_CAST'", "'TSEQUAL'", "'TSQL'", 
		"'TWO_DIGIT_YEAR_CUTOFF'", "'TYPE'", "'TYPEPROPERTY'", "'TYPE_ID'", "'TYPE_NAME'", 
		"'TYPE_WARNING'", "'UNBOUNDED'", "'UNCHECKED'", "'UNCOMMITTED'", "'UNICODE'", 
		"'UNION'", "'UNIQUE'", "'UNKNOWN'", "'UNLIMITED'", "'UNLOCK'", "'UNMASK'", 
		"'UNPIVOT'", "'UNSAFE'", "'UOW'", "'UPDATE'", "'UPDATETEXT'", "'UPDLOCK'", 
		"'UPPER'", "'URL'", "'USE'", "'USED'", "'USER'", "'USER_ID'", "'USER_NAME'", 
		"'USING'", "'VALIDATION'", "'VALID_XML'", "'VALUE'", "'VALUES'", "'[VALUE]'", 
		"'VAR'", "'VARBINARY'", "'VARP'", "'VARYING'", "'VERBOSELOGGING'", "'VERIFY_CLONEDB'", 
		"'VERSION'", "'VIEW'", "'VIEWS'", "'VIEW_METADATA'", "'VISIBILITY'", "'WAIT'", 
		"'WAITFOR'", "'WAIT_AT_LOW_PRIORITY'", "'WELL_FORMED_XML'", "'WAIT_STATS_CAPTURE_MODE'", 
		"'WHEN'", "'WHERE'", "'WHILE'", "'WINDOWS'", "'WITH'", "'WITHIN'", "'WITHOUT'", 
		"'WITHOUT_ARRAY_WRAPPER'", "'WITNESS'", "'WORK'", "'WORKLOAD'", "'WRITETEXT'", 
		"'XACT_ABORT'", "'XACT_STATE'", "'XLOCK'", "'XML'", "'XMLDATA'", "'XMLNAMESPACES'", 
		"'XMLSCHEMA'", "'XML_COMPRESSION'", "'XSINIL'", "'ZONE'", "'ABS'", "'ACOS'", 
		"'ASIN'", "'ATAN'", "'ATN2'", "'CEILING'", "'COS'", "'COT'", "'DEGREES'", 
		"'EXP'", "'FLOOR'", "'LOG10'", "'PI'", "'POWER'", "'RADIANS'", "'RAND'", 
		"'ROUND'", "'SIGN'", "'SIN'", "'SQRT'", "'SQUARE'", "'TAN'", "'CURRENT_TIMEZONE'", 
		"'CURRENT_TIMEZONE_ID'", "'DATE_BUCKET'", "'DATEDIFF_BIG'", "'DATEFROMPARTS'", 
		"'DATETIME2FROMPARTS'", "'DATETIMEFROMPARTS'", "'DATETIMEOFFSETFROMPARTS'", 
		"'DATETRUNC'", "'DAY'", "'EOMONTH'", "'ISDATE'", "'MONTH'", "'SMALLDATETIMEFROMPARTS'", 
		"'SWITCHOFFSET'", "'SYSDATETIME'", "'SYSDATETIMEOFFSET'", "'SYSUTCDATETIME'", 
		"'TIMEFROMPARTS'", "'TODATETIMEOFFSET'", "'YEAR'", "'QUARTER'", "'DAYOFYEAR'", 
		"'WEEK'", "'HOUR'", "'MINUTE'", "'SECOND'", "'MILLISECOND'", "'MICROSECOND'", 
		"'NANOSECOND'", "'TZOFFSET'", "'ISO_WEEK'", "'WEEKDAY'", null, null, null, 
		null, null, null, "'hh'", null, null, "'ms'", "'mcs'", "'ns'", "'tz'", 
		null, "'dw'", "'SP_EXECUTESQL'", "'VARCHAR'", "'NVARCHAR'", null, "'$ACTION'", 
		"'@@CURSOR_ROWS'", "'@@FETCH_STATUS'", null, null, null, null, null, "'\"\"'", 
		"'''", null, null, null, null, null, null, null, null, null, "'='", "'>'", 
		"'<'", "'!'", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'^='", 
		"'|='", "'||'", "'.'", "'_'", "'@'", "'#'", "'$'", "'('", "')'", "','", 
		"';'", "':'", "'::'", "'*'", "'/'", "'%'", "'+'", "'-'", "'~'", "'|'", 
		"'&'", "'^'", "'?'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ABORT", "ABORT_AFTER_WAIT", "ABSENT", "ABSOLUTE", "ACCELERATED_DATABASE_RECOVERY", 
		"ACCENT_SENSITIVITY", "ACCESS", "ACTION", "ACTIVATION", "ACTIVE", "ADD", 
		"ADDRESS", "ADMINISTER", "AES", "AES_128", "AES_192", "AES_256", "AFFINITY", 
		"AFTER", "AGGREGATE", "ALGORITHM", "ALL", "ALLOWED", "ALLOW_CONNECTIONS", 
		"ALLOW_ENCRYPTED_VALUE_MODIFICATIONS", "ALLOW_MULTIPLE_EVENT_LOSS", "ALLOW_PAGE_LOCKS", 
		"ALLOW_ROW_LOCKS", "ALLOW_SINGLE_EVENT_LOSS", "ALLOW_SNAPSHOT_ISOLATION", 
		"ALL_CONSTRAINTS", "ALL_ERRORMSGS", "ALL_INDEXES", "ALL_LEVELS", "ALTER", 
		"ALWAYS", "AND", "ANONYMOUS", "ANSI_DEFAULTS", "ANSI_NULLS", "ANSI_NULL_DEFAULT", 
		"ANSI_NULL_DFLT_OFF", "ANSI_NULL_DFLT_ON", "ANSI_PADDING", "ANSI_WARNINGS", 
		"ANY", "APPEND", "APPLICATION", "APPLICATION_LOG", "APPLOCK_MODE", "APPLOCK_TEST", 
		"APPLY", "APP_NAME", "ARITHABORT", "ARITHIGNORE", "AS", "ASC", "ASCII", 
		"ASSEMBLY", "ASSEMBLYPROPERTY", "ASYMMETRIC", "ASYNCHRONOUS_COMMIT", "AT_KEYWORD", 
		"AUDIT", "AUDIT_GUID", "AUTHENTICATE", "AUTHENTICATION", "AUTHORIZATION", 
		"AUTO", "AUTOGROW_ALL_FILES", "AUTOGROW_SINGLE_FILE", "AUTOMATED_BACKUP_PREFERENCE", 
		"AUTOMATIC", "AUTO_CLEANUP", "AUTO_CLOSE", "AUTO_CREATE_STATISTICS", "AUTO_DROP", 
		"AUTO_SHRINK", "AUTO_UPDATE_STATISTICS", "AUTO_UPDATE_STATISTICS_ASYNC", 
		"AVAILABILITY", "AVAILABILITY_MODE", "AVG", "BACKSLASH", "BACKUP", "BACKUP_CLONEDB", 
		"BACKUP_PRIORITY", "BASE64", "BEFORE", "BEGIN", "BEGIN_DIALOG", "BETWEEN", 
		"BIGINT", "BINARY_CHECKSUM", "BINARY_KEYWORD", "BINDING", "BLOB_STORAGE", 
		"BLOCK", "BLOCKERS", "BLOCKING_HIERARCHY", "BLOCKSIZE", "BREAK", "BROKER", 
		"BROKER_INSTANCE", "BROWSE", "BUFFER", "BUFFERCOUNT", "BULK", "BULK_LOGGED", 
		"BY", "CACHE", "CALLED", "CALLER", "CAP_CPU_PERCENT", "CASCADE", "CASE", 
		"CAST", "CATALOG", "CATALOG_COLLATION", "CATCH", "CERTENCODED", "CERTIFICATE", 
		"CERTPRIVATEKEY", "CERT_ID", "CHANGE", "CHANGES", "CHANGETABLE", "CHANGE_RETENTION", 
		"CHANGE_TRACKING", "CHAR", "CHARINDEX", "CHECK", "CHECKALLOC", "CHECKCATALOG", 
		"CHECKCONSTRAINTS", "CHECKDB", "CHECKFILEGROUP", "CHECKPOINT", "CHECKSUM", 
		"CHECKSUM_AGG", "CHECKTABLE", "CHECK_EXPIRATION", "CHECK_POLICY", "CLASSIFIER_FUNCTION", 
		"CLEANTABLE", "CLEANUP", "CLEANUP_POLICY", "CLONEDATABASE", "CLOSE", "CLUSTER", 
		"CLUSTERED", "COALESCE", "COLLATE", "COLLECTION", "COLUMN", "COLUMNPROPERTY", 
		"COLUMNS", "COLUMNSTORE", "COLUMNSTORE_ARCHIVE", "COLUMN_ENCRYPTION_KEY", 
		"COLUMN_MASTER_KEY", "COL_LENGTH", "COL_NAME", "COMMIT", "COMMITTED", 
		"COMPATIBILITY_LEVEL", "COMPRESS", "COMPRESSION", "COMPRESSION_DELAY", 
		"COMPRESS_ALL_ROW_GROUPS", "COMPUTE", "CONCAT", "CONCAT_NULL_YIELDS_NULL", 
		"CONCAT_WS", "CONFIGURATION", "CONNECT", "CONNECTION", "CONNECTIONPROPERTY", 
		"CONSTRAINT", "CONTAINMENT", "CONTAINS", "CONTAINSTABLE", "CONTENT", "CONTEXT", 
		"CONTEXT_INFO", "CONTINUE", "CONTINUE_AFTER_ERROR", "CONTRACT", "CONTRACT_NAME", 
		"CONTROL", "CONVERSATION", "CONVERT", "COOKIE", "COPY_ONLY", "COUNT", 
		"COUNTER", "COUNT_BIG", "CPU", "CREATE", "CREATE_NEW", "CREATION_DISPOSITION", 
		"CREDENTIAL", "CROSS", "CRYPTOGRAPHIC", "CUME_DIST", "CURRENT", "CURRENT_DATE", 
		"CURRENT_REQUEST_ID", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_TRANSACTION_ID", 
		"CURRENT_USER", "CURSOR", "CURSOR_CLOSE_ON_COMMIT", "CURSOR_DEFAULT", 
		"CURSOR_STATUS", "CYCLE", "DATA", "DATABASE", "DATABASEPROPERTYEX", "DATABASE_DEFAULT", 
		"DATABASE_MIRRORING", "DATABASE_PRINCIPAL_ID", "DATALENGTH", "DATASPACE", 
		"DATA_COMPRESSION", "DATA_FLUSH_INTERVAL_SECONDS", "DATA_PURITY", "DATA_SOURCE", 
		"DATEADD", "DATEDIFF", "DATENAME", "DATEPART", "DATE_CORRELATION_OPTIMIZATION", 
		"DAYS", "DBCC", "DBREINDEX", "DB_CHAINING", "DB_FAILOVER", "DB_ID", "DB_NAME", 
		"DDL", "DEALLOCATE", "DECLARE", "DECOMPRESS", "DECRYPTION", "DEFAULT", 
		"DEFAULT_DATABASE", "DEFAULT_DOUBLE_QUOTE", "DEFAULT_FULLTEXT_LANGUAGE", 
		"DEFAULT_LANGUAGE", "DEFAULT_SCHEMA", "DEFINITION", "DELAY", "DELAYED_DURABILITY", 
		"DELETE", "DELETED", "DENSE_RANK", "DENY", "DEPENDENTS", "DES", "DESC", 
		"DESCRIPTION", "DESX", "DETERMINISTIC", "DHCP", "DIAGNOSTICS", "DIALOG", 
		"DIFFERENCE", "DIFFERENTIAL", "DIRECTORY_NAME", "DISABLE", "DISABLED", 
		"DISABLE_BROKER", "DISK", "DISTINCT", "DISTRIBUTED", "DISTRIBUTION", "DOCUMENT", 
		"DOLLAR_PARTITION", "DOUBLE", "DOUBLE_BACK_SLASH", "DOUBLE_FORWARD_SLASH", 
		"DROP", "DROPCLEANBUFFERS", "DROP_EXISTING", "DTC_SUPPORT", "DUMP", "DYNAMIC", 
		"EDITION", "ELEMENTS", "ELSE", "EMERGENCY", "EMPTY", "ENABLE", "ENABLED", 
		"ENABLE_BROKER", "ENCRYPTED", "ENCRYPTED_VALUE", "ENCRYPTION", "ENCRYPTION_TYPE", 
		"END", "ENDPOINT", "ENDPOINT_URL", "ERRLVL", "ERROR", "ERROR_BROKER_CONVERSATIONS", 
		"ERROR_LINE", "ERROR_MESSAGE", "ERROR_NUMBER", "ERROR_PROCEDURE", "ERROR_SEVERITY", 
		"ERROR_STATE", "ESCAPE", "ESTIMATEONLY", "EVENT", "EVENTDATA", "EVENT_RETENTION_MODE", 
		"EXCEPT", "EXCLUSIVE", "EXECUTABLE", "EXECUTABLE_FILE", "EXECUTE", "EXIST", 
		"EXISTS", "EXIST_SQUARE_BRACKET", "EXIT", "EXPAND", "EXPIREDATE", "EXPIRY_DATE", 
		"EXPLICIT", "EXTENDED_LOGICAL_CHECKS", "EXTENSION", "EXTERNAL", "EXTERNAL_ACCESS", 
		"FAILOVER", "FAILOVER_MODE", "FAILURE", "FAILURECONDITIONLEVEL", "FAILURE_CONDITION_LEVEL", 
		"FAIL_OPERATION", "FAN_IN", "FAST", "FAST_FORWARD", "FETCH", "FILE", "FILEGROUP", 
		"FILEGROUPPROPERTY", "FILEGROUP_ID", "FILEGROUP_NAME", "FILEGROWTH", "FILENAME", 
		"FILEPATH", "FILEPROPERTY", "FILEPROPERTYEX", "FILESTREAM", "FILESTREAM_ON", 
		"FILE_ID", "FILE_IDEX", "FILE_NAME", "FILE_SNAPSHOT", "FILLFACTOR", "FILTER", 
		"FIRST", "FIRST_VALUE", "FMTONLY", "FOLLOWING", "FOR", "FORCE", "FORCED", 
		"FORCEPLAN", "FORCESCAN", "FORCESEEK", "FORCE_FAILOVER_ALLOW_DATA_LOSS", 
		"FORCE_SERVICE_ALLOW_DATA_LOSS", "FOREIGN", "FORMAT", "FORMATMESSAGE", 
		"FORWARD_ONLY", "FREE", "FREETEXT", "FREETEXTTABLE", "FROM", "FULL", "FULLSCAN", 
		"FULLTEXT", "FULLTEXTCATALOGPROPERTY", "FULLTEXTSERVICEPROPERTY", "FUNCTION", 
		"GB", "GENERATED", "GET", "GETANCESTOR", "GETANSINULL", "GETDATE", "GETDESCENDANT", 
		"GETLEVEL", "GETREPARENTEDVALUE", "GETROOT", "GETUTCDATE", "GET_FILESTREAM_TRANSACTION_CONTEXT", 
		"GLOBAL", "GO", "GOTO", "GOVERNOR", "GRANT", "GREATEST", "GROUP", "GROUPING", 
		"GROUPING_ID", "GROUP_MAX_REQUESTS", "HADR", "HASH", "HASHED", "HAS_DBACCESS", 
		"HAS_PERMS_BY_NAME", "HAVING", "HEALTHCHECKTIMEOUT", "HEALTH_CHECK_TIMEOUT", 
		"HEAP", "HIDDEN_KEYWORD", "HIERARCHYID", "HIGH", "HOLDLOCK", "HONOR_BROKER_PRIORITY", 
		"HOST_ID", "HOST_NAME", "HOURS", "IDENTITY", "IDENTITYCOL", "IDENTITY_INSERT", 
		"IDENTITY_VALUE", "IDENT_CURRENT", "IDENT_INCR", "IDENT_SEED", "IF", "IGNORE_CONSTRAINTS", 
		"IGNORE_DUP_KEY", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", "IGNORE_REPLICATED_TABLE_CACHE", 
		"IGNORE_TRIGGERS", "IIF", "IMMEDIATE", "IMPERSONATE", "IMPLICIT_TRANSACTIONS", 
		"IMPORTANCE", "IN", "INCLUDE", "INCLUDE_NULL_VALUES", "INCREMENT", "INCREMENTAL", 
		"INDEX", "INDEXKEY_PROPERTY", "INDEXPROPERTY", "INDEX_COL", "INFINITE", 
		"INIT", "INITIATOR", "INNER", "INPUT", "INSENSITIVE", "INSERT", "INSERTED", 
		"INSTEAD", "INT", "INTERSECT", "INTERVAL_LENGTH_MINUTES", "INTO", "IO", 
		"IP", "IS", "ISDESCENDANTOF", "ISJSON", "ISNULL", "ISNUMERIC", "ISOLATION", 
		"IS_MEMBER", "IS_ROLEMEMBER", "IS_SRVROLEMEMBER", "JOB", "JOIN", "JSON", 
		"JSON_ARRAY", "JSON_MODIFY", "JSON_OBJECT", "JSON_PATH_EXISTS", "JSON_QUERY", 
		"JSON_VALUE", "KB", "KEEP", "KEEPDEFAULTS", "KEEPFIXED", "KEEPIDENTITY", 
		"KERBEROS", "KEY", "KEYS", "KEYSET", "KEY_PATH", "KEY_SOURCE", "KEY_STORE_PROVIDER_NAME", 
		"KILL", "LAG", "LANGUAGE", "LAST", "LAST_VALUE", "LEAD", "LEAST", "LEDGER", 
		"LEFT", "LEN", "LEVEL", "LIBRARY", "LIFETIME", "LIKE", "LINENO", "LINKED", 
		"LINUX", "LIST", "LISTENER", "LISTENER_IP", "LISTENER_PORT", "LISTENER_URL", 
		"LOAD", "LOB_COMPACTION", "LOCAL", "LOCAL_SERVICE_NAME", "LOCATION", "LOCK", 
		"LOCK_ESCALATION", "LOG", "LOGIN", "LOGINPROPERTY", "LOOP", "LOW", "LOWER", 
		"LTRIM", "MANUAL", "MARK", "MASK", "MASKED", "MASTER", "MATCHED", "MATERIALIZED", 
		"MAX", "MAXDOP", "MAXRECURSION", "MAXSIZE", "MAXTRANSFER", "MAXVALUE", 
		"MAX_CPU_PERCENT", "MAX_DISPATCH_LATENCY", "MAX_DOP", "MAX_DURATION", 
		"MAX_EVENT_SIZE", "MAX_FILES", "MAX_IOPS_PER_VOLUME", "MAX_MEMORY", "MAX_MEMORY_PERCENT", 
		"MAX_OUTSTANDING_IO_PER_VOLUME", "MAX_PLANS_PER_QUERY", "MAX_PROCESSES", 
		"MAX_QUEUE_READERS", "MAX_ROLLOVER_FILES", "MAX_SIZE", "MAX_STORAGE_SIZE_MB", 
		"MB", "MEDIADESCRIPTION", "MEDIANAME", "MEDIUM", "MEMBER", "MEMORY_OPTIMIZED_DATA", 
		"MEMORY_PARTITION_MODE", "MERGE", "MESSAGE", "MESSAGE_FORWARDING", "MESSAGE_FORWARD_SIZE", 
		"MIN", "MINUTES", "MINVALUE", "MIN_ACTIVE_ROWVERSION", "MIN_CPU_PERCENT", 
		"MIN_IOPS_PER_VOLUME", "MIN_MEMORY_PERCENT", "MIRROR", "MIRROR_ADDRESS", 
		"MIXED_PAGE_ALLOCATION", "MODE", "MODIFY", "MODIFY_SQUARE_BRACKET", "MOVE", 
		"MULTI_USER", "MUST_CHANGE", "NAME", "NATIONAL", "NCHAR", "NEGOTIATE", 
		"NESTED_TRIGGERS", "NEWID", "NEWNAME", "NEWSEQUENTIALID", "NEW_ACCOUNT", 
		"NEW_BROKER", "NEW_PASSWORD", "NEXT", "NO", "NOCHECK", "NOCOUNT", "NODES", 
		"NOEXEC", "NOEXPAND", "NOFORMAT", "NOHOLDLOCK", "NOINDEX", "NOINIT", "NOLOCK", 
		"NONCLUSTERED", "NONE", "NON_TRANSACTED_ACCESS", "NORECOMPUTE", "NORECOVERY", 
		"NOREWIND", "NOSKIP", "NOT", "NOTIFICATION", "NOTIFICATIONS", "NOUNLOAD", 
		"NOWAIT", "NO_CHECKSUM", "NO_COMPRESSION", "NO_EVENT_LOSS", "NO_INFOMSGS", 
		"NO_QUERYSTORE", "NO_STATISTICS", "NO_TRUNCATE", "NO_WAIT", "NTILE", "NTLM", 
		"NULLIF", "NULL_", "NULL_DOUBLE_QUOTE", "NUMANODE", "NUMBER", "NUMERIC_ROUNDABORT", 
		"OBJECT", "OBJECTPROPERTY", "OBJECTPROPERTYEX", "OBJECT_DEFINITION", "OBJECT_ID", 
		"OBJECT_NAME", "OBJECT_SCHEMA_NAME", "OF", "OFF", "OFFLINE", "OFFSET", 
		"OFFSETS", "OLD_ACCOUNT", "OLD_PASSWORD", "ON", "ONLINE", "ONLY", "ON_FAILURE", 
		"OPEN", "OPENDATASOURCE", "OPENJSON", "OPENQUERY", "OPENROWSET", "OPENXML", 
		"OPEN_EXISTING", "OPERATIONS", "OPERATION_MODE", "OPTIMISTIC", "OPTIMIZE", 
		"OPTIMIZE_FOR_SEQUENTIAL_KEY", "OPTION", "OR", "ORDER", "ORIGINAL_DB_NAME", 
		"ORIGINAL_LOGIN", "OUT", "OUTER", "OUTPUT", "OVER", "OVERRIDE", "OWNER", 
		"OWNERSHIP", "PAD_INDEX", "PAGE", "PAGECOUNT", "PAGE_VERIFY", "PAGLOCK", 
		"PARAMETERIZATION", "PARAM_NODE", "PARSE", "PARSENAME", "PARSEONLY", "PARTIAL", 
		"PARTITION", "PARTITIONS", "PARTNER", "PASSWORD", "PATH", "PATINDEX", 
		"PAUSE", "PDW_SHOWSPACEUSED", "PERCENT", "PERCENTILE_CONT", "PERCENTILE_DISC", 
		"PERCENT_RANK", "PERMISSIONS", "PERMISSION_SET", "PERSISTED", "PERSIST_SAMPLE_PERCENT", 
		"PER_CPU", "PER_DB", "PER_NODE", "PHYSICAL_ONLY", "PIVOT", "PLAN", "PLATFORM", 
		"POISON_MESSAGE_HANDLING", "POLICY", "POOL", "PORT", "PRECEDING", "PRECISION", 
		"PREDICATE", "PRIMARY", "PRIMARY_ROLE", "PRINT", "PRIOR", "PRIORITY", 
		"PRIORITY_LEVEL", "PRIVATE", "PRIVATE_KEY", "PRIVILEGES", "PROC", "PROCCACHE", 
		"PROCEDURE", "PROCEDURE_NAME", "PROCESS", "PROFILE", "PROPERTY", "PROVIDER", 
		"PROVIDER_KEY_NAME", "PUBLIC", "PWDCOMPARE", "PWDENCRYPT", "PYTHON", "QUERY", 
		"QUERY_CAPTURE_MODE", "QUERY_SQUARE_BRACKET", "QUERY_STORE", "QUEUE", 
		"QUEUE_DELAY", "QUOTED_IDENTIFIER", "QUOTENAME", "R", "RAISERROR", "RANDOMIZED", 
		"RANGE", "RANK", "RAW", "RC2", "RC4", "RC4_128", "READ", "READCOMMITTED", 
		"READCOMMITTEDLOCK", "READONLY", "READPAST", "READTEXT", "READUNCOMMITTED", 
		"READWRITE", "READ_COMMITTED_SNAPSHOT", "READ_ONLY", "READ_ONLY_ROUTING_LIST", 
		"READ_WRITE", "READ_WRITE_FILEGROUPS", "REBUILD", "RECEIVE", "RECOMPILE", 
		"RECONFIGURE", "RECOVERY", "RECURSIVE_TRIGGERS", "REFERENCES", "REGENERATE", 
		"RELATED_CONVERSATION", "RELATED_CONVERSATION_GROUP", "RELATIVE", "REMOTE", 
		"REMOTE_PROC_TRANSACTIONS", "REMOTE_SERVICE_NAME", "REMOVE", "REORGANIZE", 
		"REPAIR_ALLOW_DATA_LOSS", "REPAIR_FAST", "REPAIR_REBUILD", "REPEATABLE", 
		"REPEATABLEREAD", "REPLACE", "REPLICA", "REPLICATE", "REPLICATION", "REQUEST_MAX_CPU_TIME_SEC", 
		"REQUEST_MAX_MEMORY_GRANT_PERCENT", "REQUEST_MEMORY_GRANT_TIMEOUT_SEC", 
		"REQUIRED", "REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT", "RESAMPLE", 
		"RESERVE_DISK_SPACE", "RESET", "RESOURCE", "RESOURCES", "RESOURCE_MANAGER_LOCATION", 
		"RESTART", "RESTORE", "RESTRICT", "RESTRICTED_USER", "RESUMABLE", "RESUME", 
		"RETAINDAYS", "RETENTION", "RETURN", "RETURNS", "REVERSE", "REVERT", "REVOKE", 
		"REWIND", "RIGHT", "ROBUST", "ROLE", "ROLLBACK", "ROOT", "ROUND_ROBIN", 
		"ROUTE", "ROW", "ROWCOUNT", "ROWCOUNT_BIG", "ROWGUID", "ROWGUIDCOL", "ROWLOCK", 
		"ROWS", "ROW_NUMBER", "RSA_1024", "RSA_2048", "RSA_3072", "RSA_4096", 
		"RSA_512", "RTRIM", "RULE", "SAFE", "SAFETY", "SAMPLE", "SAVE", "SCHEDULER", 
		"SCHEMA", "SCHEMABINDING", "SCHEMA_ID", "SCHEMA_NAME", "SCHEME", "SCOPED", 
		"SCOPE_IDENTITY", "SCRIPT", "SCROLL", "SCROLL_LOCKS", "SEARCH", "SECONDARY", 
		"SECONDARY_ONLY", "SECONDARY_ROLE", "SECONDS", "SECRET", "SECURABLES", 
		"SECURITY", "SECURITYAUDIT", "SECURITY_LOG", "SEEDING_MODE", "SELECT", 
		"SELF", "SEMANTICKEYPHRASETABLE", "SEMANTICSIMILARITYDETAILSTABLE", "SEMANTICSIMILARITYTABLE", 
		"SEMI_SENSITIVE", "SEND", "SENT", "SEQUENCE", "SEQUENCE_NUMBER", "SERIALIZABLE", 
		"SERVER", "SERVERPROPERTY", "SERVICE", "SERVICEBROKER", "SERVICE_BROKER", 
		"SERVICE_NAME", "SERVICE_OBJECTIVE", "SESSION", "SESSIONPROPERTY", "SESSION_CONTEXT", 
		"SESSION_TIMEOUT", "SESSION_USER", "SET", "SETERROR", "SETS", "SETTINGS", 
		"SETUSER", "SHARE", "SHARED", "SHOWCONTIG", "SHOWPLAN", "SHOWPLAN_ALL", 
		"SHOWPLAN_TEXT", "SHOWPLAN_XML", "SHRINKLOG", "SHUTDOWN", "SID", "SIGNATURE", 
		"SIMPLE", "SINGLE_USER", "SIZE", "SIZE_BASED_CLEANUP_MODE", "SKIP_KEYWORD", 
		"SMALLINT", "SNAPSHOT", "SOFTNUMA", "SOME", "SORT_IN_TEMPDB", "SOUNDEX", 
		"SOURCE", "SPACE_KEYWORD", "SPARSE", "SPATIAL_WINDOW_MAX_CELLS", "SPECIFICATION", 
		"SPLIT", "SQL", "SQLDUMPERFLAGS", "SQLDUMPERPATH", "SQLDUMPERTIMEOUT", 
		"SQL_VARIANT_PROPERTY", "STALE_QUERY_THRESHOLD_DAYS", "STANDBY", "START", 
		"STARTED", "STARTUP_STATE", "START_DATE", "STATE", "STATIC", "STATISTICS", 
		"STATISTICS_INCREMENTAL", "STATISTICS_NORECOMPUTE", "STATS", "STATS_DATE", 
		"STATS_STREAM", "STATUS", "STATUSONLY", "STDEV", "STDEVP", "STOP", "STOPLIST", 
		"STOPPED", "STOP_ON_ERROR", "STR", "STRING_AGG", "STRING_ESCAPE", "STUFF", 
		"SUBJECT", "SUBSCRIBE", "SUBSCRIPTION", "SUBSTRING", "SUM", "SUPPORTED", 
		"SUSER_ID", "SUSER_NAME", "SUSER_SID", "SUSER_SNAME", "SUSPEND", "SWITCH", 
		"SYMMETRIC", "SYNCHRONOUS_COMMIT", "SYNONYM", "SYSTEM", "SYSTEM_USER", 
		"TABLE", "TABLERESULTS", "TABLESAMPLE", "TABLOCK", "TABLOCKX", "TAKE", 
		"TAPE", "TARGET", "TARGET_RECOVERY_TIME", "TB", "TCP", "TEXTIMAGE_ON", 
		"TEXTSIZE", "THEN", "THROW", "TIES", "TIME", "TIMEOUT", "TIMER", "TINYINT", 
		"TO", "TOP", "TORN_PAGE_DETECTION", "TOSTRING", "TRACE", "TRACKING", "TRACK_CAUSALITY", 
		"TRAN", "TRANSACTION", "TRANSACTION_ID", "TRANSFER", "TRANSFORM_NOISE_WORDS", 
		"TRANSLATE", "TRIGGER", "TRIM", "TRIPLE_DES", "TRIPLE_DES_3KEY", "TRUNCATE", 
		"TRUSTWORTHY", "TRY", "TRY_CAST", "TSEQUAL", "TSQL", "TWO_DIGIT_YEAR_CUTOFF", 
		"TYPE", "TYPEPROPERTY", "TYPE_ID", "TYPE_NAME", "TYPE_WARNING", "UNBOUNDED", 
		"UNCHECKED", "UNCOMMITTED", "UNICODE", "UNION", "UNIQUE", "UNKNOWN", "UNLIMITED", 
		"UNLOCK", "UNMASK", "UNPIVOT", "UNSAFE", "UOW", "UPDATE", "UPDATETEXT", 
		"UPDLOCK", "UPPER", "URL", "USE", "USED", "USER", "USER_ID", "USER_NAME", 
		"USING", "VALIDATION", "VALID_XML", "VALUE", "VALUES", "VALUE_SQUARE_BRACKET", 
		"VAR", "VARBINARY_KEYWORD", "VARP", "VARYING", "VERBOSELOGGING", "VERIFY_CLONEDB", 
		"VERSION", "VIEW", "VIEWS", "VIEW_METADATA", "VISIBILITY", "WAIT", "WAITFOR", 
		"WAIT_AT_LOW_PRIORITY", "WELL_FORMED_XML", "WAIT_STATS_CAPTURE_MODE", 
		"WHEN", "WHERE", "WHILE", "WINDOWS", "WITH", "WITHIN", "WITHOUT", "WITHOUT_ARRAY_WRAPPER", 
		"WITNESS", "WORK", "WORKLOAD", "WRITETEXT", "XACT_ABORT", "XACT_STATE", 
		"XLOCK", "XML", "XMLDATA", "XMLNAMESPACES", "XMLSCHEMA", "XML_COMPRESSION", 
		"XSINIL", "ZONE", "ABS", "ACOS", "ASIN", "ATAN", "ATN2", "CEILING", "COS", 
		"COT", "DEGREES", "EXP", "FLOOR", "LOG10", "PI", "POWER", "RADIANS", "RAND", 
		"ROUND", "SIGN", "SIN", "SQRT", "SQUARE", "TAN", "CURRENT_TIMEZONE", "CURRENT_TIMEZONE_ID", 
		"DATE_BUCKET", "DATEDIFF_BIG", "DATEFROMPARTS", "DATETIME2FROMPARTS", 
		"DATETIMEFROMPARTS", "DATETIMEOFFSETFROMPARTS", "DATETRUNC", "DAY", "EOMONTH", 
		"ISDATE", "MONTH", "SMALLDATETIMEFROMPARTS", "SWITCHOFFSET", "SYSDATETIME", 
		"SYSDATETIMEOFFSET", "SYSUTCDATETIME", "TIMEFROMPARTS", "TODATETIMEOFFSET", 
		"YEAR", "QUARTER", "DAYOFYEAR", "WEEK", "HOUR", "MINUTE", "SECOND", "MILLISECOND", 
		"MICROSECOND", "NANOSECOND", "TZOFFSET", "ISO_WEEK", "WEEKDAY", "YEAR_ABBR", 
		"QUARTER_ABBR", "MONTH_ABBR", "DAYOFYEAR_ABBR", "DAY_ABBR", "WEEK_ABBR", 
		"HOUR_ABBR", "MINUTE_ABBR", "SECOND_ABBR", "MILLISECOND_ABBR", "MICROSECOND_ABBR", 
		"NANOSECOND_ABBR", "TZOFFSET_ABBR", "ISO_WEEK_ABBR", "WEEKDAY_ABBR", "SP_EXECUTESQL", 
		"VARCHAR", "NVARCHAR", "DISK_DRIVE", "DOLLAR_ACTION", "CURSOR_ROWS", "FETCH_STATUS", 
		"IPV4_ADDR", "SPACE", "COMMENT", "LINE_COMMENT", "DOUBLE_QUOTE_ID", "DOUBLE_QUOTE_BLANK", 
		"SINGLE_QUOTE", "SQUARE_BRACKET_ID", "LOCAL_ID", "TEMP_ID", "DECIMAL", 
		"ID", "STRING", "BINARY", "FLOAT", "REAL", "EQUAL", "GREATER", "LESS", 
		"EXCLAMATION", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", 
		"MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "DOUBLE_BAR", "DOT", 
		"UNDERLINE", "AT", "SHARP", "DOLLAR", "LR_BRACKET", "RR_BRACKET", "COMMA", 
		"SEMI", "COLON", "DOUBLE_COLON", "STAR", "DIVIDE", "MODULE", "PLUS", "MINUS", 
		"BIT_NOT", "BIT_OR", "BIT_AND", "BIT_XOR", "PLACEHOLDER", "QUERYTRACEON"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TSqlParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public TSqlParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class Tsql_fileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(TSqlParser.Eof, 0); }
		public BatchContext[] batch() {
			return GetRuleContexts<BatchContext>();
		}
		public BatchContext batch(int i) {
			return GetRuleContext<BatchContext>(i);
		}
		public Execute_body_batchContext execute_body_batch() {
			return GetRuleContext<Execute_body_batchContext>(0);
		}
		public Go_statementContext[] go_statement() {
			return GetRuleContexts<Go_statementContext>();
		}
		public Go_statementContext go_statement(int i) {
			return GetRuleContext<Go_statementContext>(i);
		}
		public Tsql_fileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsql_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTsql_file(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTsql_file(this);
		}
	}

	[RuleVersion(0)]
	public Tsql_fileContext tsql_file() {
		Tsql_fileContext _localctx = new Tsql_fileContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_tsql_file);
		try {
			int _alt;
			State = 1244;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1231;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1228; batch();
						}
						} 
					}
					State = 1233;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
				}
				State = 1234; Match(Eof);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1235; execute_body_batch();
				State = 1239;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1236; go_statement();
						}
						} 
					}
					State = 1241;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
				}
				State = 1242; Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BatchContext : ParserRuleContext {
		public Go_statementContext[] go_statement() {
			return GetRuleContexts<Go_statementContext>();
		}
		public Go_statementContext go_statement(int i) {
			return GetRuleContext<Go_statementContext>(i);
		}
		public Execute_body_batchContext execute_body_batch() {
			return GetRuleContext<Execute_body_batchContext>(0);
		}
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public Batch_level_statementContext batch_level_statement() {
			return GetRuleContext<Batch_level_statementContext>(0);
		}
		public BatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_batch; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBatch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBatch(this);
		}
	}

	[RuleVersion(0)]
	public BatchContext batch() {
		BatchContext _localctx = new BatchContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_batch);
		try {
			int _alt;
			State = 1271;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1246; go_statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1248;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
				case 1:
					{
					State = 1247; execute_body_batch();
					}
					break;
				}
				State = 1256;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
				case 1:
					{
					State = 1250; go_statement();
					}
					break;

				case 2:
					{
					State = 1252;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 1251; sql_clauses();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1254;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;
				}
				State = 1261;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1258; go_statement();
						}
						} 
					}
					State = 1263;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1264; batch_level_statement();
				State = 1268;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1265; go_statement();
						}
						} 
					}
					State = 1270;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Batch_level_statementContext : ParserRuleContext {
		public Create_or_alter_functionContext create_or_alter_function() {
			return GetRuleContext<Create_or_alter_functionContext>(0);
		}
		public Create_or_alter_procedureContext create_or_alter_procedure() {
			return GetRuleContext<Create_or_alter_procedureContext>(0);
		}
		public Create_or_alter_triggerContext create_or_alter_trigger() {
			return GetRuleContext<Create_or_alter_triggerContext>(0);
		}
		public Create_viewContext create_view() {
			return GetRuleContext<Create_viewContext>(0);
		}
		public Batch_level_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_batch_level_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBatch_level_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBatch_level_statement(this);
		}
	}

	[RuleVersion(0)]
	public Batch_level_statementContext batch_level_statement() {
		Batch_level_statementContext _localctx = new Batch_level_statementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_batch_level_statement);
		try {
			State = 1277;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1273; create_or_alter_function();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1274; create_or_alter_procedure();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1275; create_or_alter_trigger();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1276; create_view();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_clausesContext : ParserRuleContext {
		public Dml_clauseContext dml_clause() {
			return GetRuleContext<Dml_clauseContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Cfl_statementContext cfl_statement() {
			return GetRuleContext<Cfl_statementContext>(0);
		}
		public Another_statementContext another_statement() {
			return GetRuleContext<Another_statementContext>(0);
		}
		public Ddl_clauseContext ddl_clause() {
			return GetRuleContext<Ddl_clauseContext>(0);
		}
		public Dbcc_clauseContext dbcc_clause() {
			return GetRuleContext<Dbcc_clauseContext>(0);
		}
		public Backup_statementContext backup_statement() {
			return GetRuleContext<Backup_statementContext>(0);
		}
		public Sql_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_clauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSql_clauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSql_clauses(this);
		}
	}

	[RuleVersion(0)]
	public Sql_clausesContext sql_clauses() {
		Sql_clausesContext _localctx = new Sql_clausesContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_sql_clauses);
		try {
			State = 1304;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1279; dml_clause();
				State = 1281;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
				case 1:
					{
					State = 1280; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1283; cfl_statement();
				State = 1285;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
				case 1:
					{
					State = 1284; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1287; another_statement();
				State = 1289;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
				case 1:
					{
					State = 1288; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1291; ddl_clause();
				State = 1293;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
				case 1:
					{
					State = 1292; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1295; dbcc_clause();
				State = 1297;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
				case 1:
					{
					State = 1296; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1299; backup_statement();
				State = 1301;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
				case 1:
					{
					State = 1300; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1303; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_clauseContext : ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return GetRuleContext<Merge_statementContext>(0);
		}
		public Delete_statementContext delete_statement() {
			return GetRuleContext<Delete_statementContext>(0);
		}
		public Insert_statementContext insert_statement() {
			return GetRuleContext<Insert_statementContext>(0);
		}
		public Select_statement_standaloneContext select_statement_standalone() {
			return GetRuleContext<Select_statement_standaloneContext>(0);
		}
		public Update_statementContext update_statement() {
			return GetRuleContext<Update_statementContext>(0);
		}
		public Dml_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDml_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDml_clause(this);
		}
	}

	[RuleVersion(0)]
	public Dml_clauseContext dml_clause() {
		Dml_clauseContext _localctx = new Dml_clauseContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_dml_clause);
		try {
			State = 1311;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1306; merge_statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1307; delete_statement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1308; insert_statement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1309; select_statement_standalone();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1310; update_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_clauseContext : ParserRuleContext {
		public Alter_application_roleContext alter_application_role() {
			return GetRuleContext<Alter_application_roleContext>(0);
		}
		public Alter_assemblyContext alter_assembly() {
			return GetRuleContext<Alter_assemblyContext>(0);
		}
		public Alter_asymmetric_keyContext alter_asymmetric_key() {
			return GetRuleContext<Alter_asymmetric_keyContext>(0);
		}
		public Alter_authorizationContext alter_authorization() {
			return GetRuleContext<Alter_authorizationContext>(0);
		}
		public Alter_authorization_for_azure_dwContext alter_authorization_for_azure_dw() {
			return GetRuleContext<Alter_authorization_for_azure_dwContext>(0);
		}
		public Alter_authorization_for_parallel_dwContext alter_authorization_for_parallel_dw() {
			return GetRuleContext<Alter_authorization_for_parallel_dwContext>(0);
		}
		public Alter_authorization_for_sql_databaseContext alter_authorization_for_sql_database() {
			return GetRuleContext<Alter_authorization_for_sql_databaseContext>(0);
		}
		public Alter_availability_groupContext alter_availability_group() {
			return GetRuleContext<Alter_availability_groupContext>(0);
		}
		public Alter_certificateContext alter_certificate() {
			return GetRuleContext<Alter_certificateContext>(0);
		}
		public Alter_column_encryption_keyContext alter_column_encryption_key() {
			return GetRuleContext<Alter_column_encryption_keyContext>(0);
		}
		public Alter_credentialContext alter_credential() {
			return GetRuleContext<Alter_credentialContext>(0);
		}
		public Alter_cryptographic_providerContext alter_cryptographic_provider() {
			return GetRuleContext<Alter_cryptographic_providerContext>(0);
		}
		public Alter_databaseContext alter_database() {
			return GetRuleContext<Alter_databaseContext>(0);
		}
		public Alter_database_audit_specificationContext alter_database_audit_specification() {
			return GetRuleContext<Alter_database_audit_specificationContext>(0);
		}
		public Alter_db_roleContext alter_db_role() {
			return GetRuleContext<Alter_db_roleContext>(0);
		}
		public Alter_endpointContext alter_endpoint() {
			return GetRuleContext<Alter_endpointContext>(0);
		}
		public Alter_external_data_sourceContext alter_external_data_source() {
			return GetRuleContext<Alter_external_data_sourceContext>(0);
		}
		public Alter_external_libraryContext alter_external_library() {
			return GetRuleContext<Alter_external_libraryContext>(0);
		}
		public Alter_external_resource_poolContext alter_external_resource_pool() {
			return GetRuleContext<Alter_external_resource_poolContext>(0);
		}
		public Alter_fulltext_catalogContext alter_fulltext_catalog() {
			return GetRuleContext<Alter_fulltext_catalogContext>(0);
		}
		public Alter_fulltext_stoplistContext alter_fulltext_stoplist() {
			return GetRuleContext<Alter_fulltext_stoplistContext>(0);
		}
		public Alter_indexContext alter_index() {
			return GetRuleContext<Alter_indexContext>(0);
		}
		public Alter_login_azure_sqlContext alter_login_azure_sql() {
			return GetRuleContext<Alter_login_azure_sqlContext>(0);
		}
		public Alter_login_azure_sql_dw_and_pdwContext alter_login_azure_sql_dw_and_pdw() {
			return GetRuleContext<Alter_login_azure_sql_dw_and_pdwContext>(0);
		}
		public Alter_login_sql_serverContext alter_login_sql_server() {
			return GetRuleContext<Alter_login_sql_serverContext>(0);
		}
		public Alter_master_key_azure_sqlContext alter_master_key_azure_sql() {
			return GetRuleContext<Alter_master_key_azure_sqlContext>(0);
		}
		public Alter_master_key_sql_serverContext alter_master_key_sql_server() {
			return GetRuleContext<Alter_master_key_sql_serverContext>(0);
		}
		public Alter_message_typeContext alter_message_type() {
			return GetRuleContext<Alter_message_typeContext>(0);
		}
		public Alter_partition_functionContext alter_partition_function() {
			return GetRuleContext<Alter_partition_functionContext>(0);
		}
		public Alter_partition_schemeContext alter_partition_scheme() {
			return GetRuleContext<Alter_partition_schemeContext>(0);
		}
		public Alter_remote_service_bindingContext alter_remote_service_binding() {
			return GetRuleContext<Alter_remote_service_bindingContext>(0);
		}
		public Alter_resource_governorContext alter_resource_governor() {
			return GetRuleContext<Alter_resource_governorContext>(0);
		}
		public Alter_schema_azure_sql_dw_and_pdwContext alter_schema_azure_sql_dw_and_pdw() {
			return GetRuleContext<Alter_schema_azure_sql_dw_and_pdwContext>(0);
		}
		public Alter_schema_sqlContext alter_schema_sql() {
			return GetRuleContext<Alter_schema_sqlContext>(0);
		}
		public Alter_sequenceContext alter_sequence() {
			return GetRuleContext<Alter_sequenceContext>(0);
		}
		public Alter_server_auditContext alter_server_audit() {
			return GetRuleContext<Alter_server_auditContext>(0);
		}
		public Alter_server_audit_specificationContext alter_server_audit_specification() {
			return GetRuleContext<Alter_server_audit_specificationContext>(0);
		}
		public Alter_server_configurationContext alter_server_configuration() {
			return GetRuleContext<Alter_server_configurationContext>(0);
		}
		public Alter_server_roleContext alter_server_role() {
			return GetRuleContext<Alter_server_roleContext>(0);
		}
		public Alter_server_role_pdwContext alter_server_role_pdw() {
			return GetRuleContext<Alter_server_role_pdwContext>(0);
		}
		public Alter_serviceContext alter_service() {
			return GetRuleContext<Alter_serviceContext>(0);
		}
		public Alter_service_master_keyContext alter_service_master_key() {
			return GetRuleContext<Alter_service_master_keyContext>(0);
		}
		public Alter_symmetric_keyContext alter_symmetric_key() {
			return GetRuleContext<Alter_symmetric_keyContext>(0);
		}
		public Alter_tableContext alter_table() {
			return GetRuleContext<Alter_tableContext>(0);
		}
		public Alter_userContext alter_user() {
			return GetRuleContext<Alter_userContext>(0);
		}
		public Alter_user_azure_sqlContext alter_user_azure_sql() {
			return GetRuleContext<Alter_user_azure_sqlContext>(0);
		}
		public Alter_workload_groupContext alter_workload_group() {
			return GetRuleContext<Alter_workload_groupContext>(0);
		}
		public Alter_xml_schema_collectionContext alter_xml_schema_collection() {
			return GetRuleContext<Alter_xml_schema_collectionContext>(0);
		}
		public Create_application_roleContext create_application_role() {
			return GetRuleContext<Create_application_roleContext>(0);
		}
		public Create_assemblyContext create_assembly() {
			return GetRuleContext<Create_assemblyContext>(0);
		}
		public Create_asymmetric_keyContext create_asymmetric_key() {
			return GetRuleContext<Create_asymmetric_keyContext>(0);
		}
		public Create_column_encryption_keyContext create_column_encryption_key() {
			return GetRuleContext<Create_column_encryption_keyContext>(0);
		}
		public Create_column_master_keyContext create_column_master_key() {
			return GetRuleContext<Create_column_master_keyContext>(0);
		}
		public Create_columnstore_indexContext create_columnstore_index() {
			return GetRuleContext<Create_columnstore_indexContext>(0);
		}
		public Create_credentialContext create_credential() {
			return GetRuleContext<Create_credentialContext>(0);
		}
		public Create_cryptographic_providerContext create_cryptographic_provider() {
			return GetRuleContext<Create_cryptographic_providerContext>(0);
		}
		public Create_databaseContext create_database() {
			return GetRuleContext<Create_databaseContext>(0);
		}
		public Create_database_azureContext create_database_azure() {
			return GetRuleContext<Create_database_azureContext>(0);
		}
		public Create_database_audit_specificationContext create_database_audit_specification() {
			return GetRuleContext<Create_database_audit_specificationContext>(0);
		}
		public Create_db_roleContext create_db_role() {
			return GetRuleContext<Create_db_roleContext>(0);
		}
		public Create_endpointContext create_endpoint() {
			return GetRuleContext<Create_endpointContext>(0);
		}
		public Create_event_notificationContext create_event_notification() {
			return GetRuleContext<Create_event_notificationContext>(0);
		}
		public Create_external_libraryContext create_external_library() {
			return GetRuleContext<Create_external_libraryContext>(0);
		}
		public Create_external_resource_poolContext create_external_resource_pool() {
			return GetRuleContext<Create_external_resource_poolContext>(0);
		}
		public Create_fulltext_catalogContext create_fulltext_catalog() {
			return GetRuleContext<Create_fulltext_catalogContext>(0);
		}
		public Create_fulltext_stoplistContext create_fulltext_stoplist() {
			return GetRuleContext<Create_fulltext_stoplistContext>(0);
		}
		public Create_indexContext create_index() {
			return GetRuleContext<Create_indexContext>(0);
		}
		public Create_login_azure_sqlContext create_login_azure_sql() {
			return GetRuleContext<Create_login_azure_sqlContext>(0);
		}
		public Create_login_pdwContext create_login_pdw() {
			return GetRuleContext<Create_login_pdwContext>(0);
		}
		public Create_login_sql_serverContext create_login_sql_server() {
			return GetRuleContext<Create_login_sql_serverContext>(0);
		}
		public Create_master_key_azure_sqlContext create_master_key_azure_sql() {
			return GetRuleContext<Create_master_key_azure_sqlContext>(0);
		}
		public Create_master_key_sql_serverContext create_master_key_sql_server() {
			return GetRuleContext<Create_master_key_sql_serverContext>(0);
		}
		public Create_nonclustered_columnstore_indexContext create_nonclustered_columnstore_index() {
			return GetRuleContext<Create_nonclustered_columnstore_indexContext>(0);
		}
		public Create_or_alter_broker_priorityContext create_or_alter_broker_priority() {
			return GetRuleContext<Create_or_alter_broker_priorityContext>(0);
		}
		public Create_or_alter_event_sessionContext create_or_alter_event_session() {
			return GetRuleContext<Create_or_alter_event_sessionContext>(0);
		}
		public Create_partition_functionContext create_partition_function() {
			return GetRuleContext<Create_partition_functionContext>(0);
		}
		public Create_partition_schemeContext create_partition_scheme() {
			return GetRuleContext<Create_partition_schemeContext>(0);
		}
		public Create_remote_service_bindingContext create_remote_service_binding() {
			return GetRuleContext<Create_remote_service_bindingContext>(0);
		}
		public Create_resource_poolContext create_resource_pool() {
			return GetRuleContext<Create_resource_poolContext>(0);
		}
		public Create_routeContext create_route() {
			return GetRuleContext<Create_routeContext>(0);
		}
		public Create_ruleContext create_rule() {
			return GetRuleContext<Create_ruleContext>(0);
		}
		public Create_schemaContext create_schema() {
			return GetRuleContext<Create_schemaContext>(0);
		}
		public Create_schema_azure_sql_dw_and_pdwContext create_schema_azure_sql_dw_and_pdw() {
			return GetRuleContext<Create_schema_azure_sql_dw_and_pdwContext>(0);
		}
		public Create_search_property_listContext create_search_property_list() {
			return GetRuleContext<Create_search_property_listContext>(0);
		}
		public Create_security_policyContext create_security_policy() {
			return GetRuleContext<Create_security_policyContext>(0);
		}
		public Create_sequenceContext create_sequence() {
			return GetRuleContext<Create_sequenceContext>(0);
		}
		public Create_server_auditContext create_server_audit() {
			return GetRuleContext<Create_server_auditContext>(0);
		}
		public Create_server_audit_specificationContext create_server_audit_specification() {
			return GetRuleContext<Create_server_audit_specificationContext>(0);
		}
		public Create_server_roleContext create_server_role() {
			return GetRuleContext<Create_server_roleContext>(0);
		}
		public Create_serviceContext create_service() {
			return GetRuleContext<Create_serviceContext>(0);
		}
		public Create_statisticsContext create_statistics() {
			return GetRuleContext<Create_statisticsContext>(0);
		}
		public Create_synonymContext create_synonym() {
			return GetRuleContext<Create_synonymContext>(0);
		}
		public Create_tableContext create_table() {
			return GetRuleContext<Create_tableContext>(0);
		}
		public Create_typeContext create_type() {
			return GetRuleContext<Create_typeContext>(0);
		}
		public Create_userContext create_user() {
			return GetRuleContext<Create_userContext>(0);
		}
		public Create_user_azure_sql_dwContext create_user_azure_sql_dw() {
			return GetRuleContext<Create_user_azure_sql_dwContext>(0);
		}
		public Create_workload_groupContext create_workload_group() {
			return GetRuleContext<Create_workload_groupContext>(0);
		}
		public Create_xml_indexContext create_xml_index() {
			return GetRuleContext<Create_xml_indexContext>(0);
		}
		public Create_xml_schema_collectionContext create_xml_schema_collection() {
			return GetRuleContext<Create_xml_schema_collectionContext>(0);
		}
		public Disable_triggerContext disable_trigger() {
			return GetRuleContext<Disable_triggerContext>(0);
		}
		public Drop_aggregateContext drop_aggregate() {
			return GetRuleContext<Drop_aggregateContext>(0);
		}
		public Drop_application_roleContext drop_application_role() {
			return GetRuleContext<Drop_application_roleContext>(0);
		}
		public Drop_assemblyContext drop_assembly() {
			return GetRuleContext<Drop_assemblyContext>(0);
		}
		public Drop_asymmetric_keyContext drop_asymmetric_key() {
			return GetRuleContext<Drop_asymmetric_keyContext>(0);
		}
		public Drop_availability_groupContext drop_availability_group() {
			return GetRuleContext<Drop_availability_groupContext>(0);
		}
		public Drop_broker_priorityContext drop_broker_priority() {
			return GetRuleContext<Drop_broker_priorityContext>(0);
		}
		public Drop_certificateContext drop_certificate() {
			return GetRuleContext<Drop_certificateContext>(0);
		}
		public Drop_column_encryption_keyContext drop_column_encryption_key() {
			return GetRuleContext<Drop_column_encryption_keyContext>(0);
		}
		public Drop_column_master_keyContext drop_column_master_key() {
			return GetRuleContext<Drop_column_master_keyContext>(0);
		}
		public Drop_contractContext drop_contract() {
			return GetRuleContext<Drop_contractContext>(0);
		}
		public Drop_credentialContext drop_credential() {
			return GetRuleContext<Drop_credentialContext>(0);
		}
		public Drop_cryptograhic_providerContext drop_cryptograhic_provider() {
			return GetRuleContext<Drop_cryptograhic_providerContext>(0);
		}
		public Drop_databaseContext drop_database() {
			return GetRuleContext<Drop_databaseContext>(0);
		}
		public Drop_database_audit_specificationContext drop_database_audit_specification() {
			return GetRuleContext<Drop_database_audit_specificationContext>(0);
		}
		public Drop_database_encryption_keyContext drop_database_encryption_key() {
			return GetRuleContext<Drop_database_encryption_keyContext>(0);
		}
		public Drop_database_scoped_credentialContext drop_database_scoped_credential() {
			return GetRuleContext<Drop_database_scoped_credentialContext>(0);
		}
		public Drop_db_roleContext drop_db_role() {
			return GetRuleContext<Drop_db_roleContext>(0);
		}
		public Drop_defaultContext drop_default() {
			return GetRuleContext<Drop_defaultContext>(0);
		}
		public Drop_endpointContext drop_endpoint() {
			return GetRuleContext<Drop_endpointContext>(0);
		}
		public Drop_event_notificationsContext drop_event_notifications() {
			return GetRuleContext<Drop_event_notificationsContext>(0);
		}
		public Drop_event_sessionContext drop_event_session() {
			return GetRuleContext<Drop_event_sessionContext>(0);
		}
		public Drop_external_data_sourceContext drop_external_data_source() {
			return GetRuleContext<Drop_external_data_sourceContext>(0);
		}
		public Drop_external_file_formatContext drop_external_file_format() {
			return GetRuleContext<Drop_external_file_formatContext>(0);
		}
		public Drop_external_libraryContext drop_external_library() {
			return GetRuleContext<Drop_external_libraryContext>(0);
		}
		public Drop_external_resource_poolContext drop_external_resource_pool() {
			return GetRuleContext<Drop_external_resource_poolContext>(0);
		}
		public Drop_external_tableContext drop_external_table() {
			return GetRuleContext<Drop_external_tableContext>(0);
		}
		public Drop_fulltext_catalogContext drop_fulltext_catalog() {
			return GetRuleContext<Drop_fulltext_catalogContext>(0);
		}
		public Drop_fulltext_indexContext drop_fulltext_index() {
			return GetRuleContext<Drop_fulltext_indexContext>(0);
		}
		public Drop_fulltext_stoplistContext drop_fulltext_stoplist() {
			return GetRuleContext<Drop_fulltext_stoplistContext>(0);
		}
		public Drop_functionContext drop_function() {
			return GetRuleContext<Drop_functionContext>(0);
		}
		public Drop_indexContext drop_index() {
			return GetRuleContext<Drop_indexContext>(0);
		}
		public Drop_loginContext drop_login() {
			return GetRuleContext<Drop_loginContext>(0);
		}
		public Drop_master_keyContext drop_master_key() {
			return GetRuleContext<Drop_master_keyContext>(0);
		}
		public Drop_message_typeContext drop_message_type() {
			return GetRuleContext<Drop_message_typeContext>(0);
		}
		public Drop_partition_functionContext drop_partition_function() {
			return GetRuleContext<Drop_partition_functionContext>(0);
		}
		public Drop_partition_schemeContext drop_partition_scheme() {
			return GetRuleContext<Drop_partition_schemeContext>(0);
		}
		public Drop_procedureContext drop_procedure() {
			return GetRuleContext<Drop_procedureContext>(0);
		}
		public Drop_queueContext drop_queue() {
			return GetRuleContext<Drop_queueContext>(0);
		}
		public Drop_remote_service_bindingContext drop_remote_service_binding() {
			return GetRuleContext<Drop_remote_service_bindingContext>(0);
		}
		public Drop_resource_poolContext drop_resource_pool() {
			return GetRuleContext<Drop_resource_poolContext>(0);
		}
		public Drop_routeContext drop_route() {
			return GetRuleContext<Drop_routeContext>(0);
		}
		public Drop_ruleContext drop_rule() {
			return GetRuleContext<Drop_ruleContext>(0);
		}
		public Drop_schemaContext drop_schema() {
			return GetRuleContext<Drop_schemaContext>(0);
		}
		public Drop_search_property_listContext drop_search_property_list() {
			return GetRuleContext<Drop_search_property_listContext>(0);
		}
		public Drop_security_policyContext drop_security_policy() {
			return GetRuleContext<Drop_security_policyContext>(0);
		}
		public Drop_sequenceContext drop_sequence() {
			return GetRuleContext<Drop_sequenceContext>(0);
		}
		public Drop_server_auditContext drop_server_audit() {
			return GetRuleContext<Drop_server_auditContext>(0);
		}
		public Drop_server_audit_specificationContext drop_server_audit_specification() {
			return GetRuleContext<Drop_server_audit_specificationContext>(0);
		}
		public Drop_server_roleContext drop_server_role() {
			return GetRuleContext<Drop_server_roleContext>(0);
		}
		public Drop_serviceContext drop_service() {
			return GetRuleContext<Drop_serviceContext>(0);
		}
		public Drop_signatureContext drop_signature() {
			return GetRuleContext<Drop_signatureContext>(0);
		}
		public Drop_statisticsContext drop_statistics() {
			return GetRuleContext<Drop_statisticsContext>(0);
		}
		public Drop_statistics_name_azure_dw_and_pdwContext drop_statistics_name_azure_dw_and_pdw() {
			return GetRuleContext<Drop_statistics_name_azure_dw_and_pdwContext>(0);
		}
		public Drop_symmetric_keyContext drop_symmetric_key() {
			return GetRuleContext<Drop_symmetric_keyContext>(0);
		}
		public Drop_synonymContext drop_synonym() {
			return GetRuleContext<Drop_synonymContext>(0);
		}
		public Drop_tableContext drop_table() {
			return GetRuleContext<Drop_tableContext>(0);
		}
		public Drop_triggerContext drop_trigger() {
			return GetRuleContext<Drop_triggerContext>(0);
		}
		public Drop_typeContext drop_type() {
			return GetRuleContext<Drop_typeContext>(0);
		}
		public Drop_userContext drop_user() {
			return GetRuleContext<Drop_userContext>(0);
		}
		public Drop_viewContext drop_view() {
			return GetRuleContext<Drop_viewContext>(0);
		}
		public Drop_workload_groupContext drop_workload_group() {
			return GetRuleContext<Drop_workload_groupContext>(0);
		}
		public Drop_xml_schema_collectionContext drop_xml_schema_collection() {
			return GetRuleContext<Drop_xml_schema_collectionContext>(0);
		}
		public Enable_triggerContext enable_trigger() {
			return GetRuleContext<Enable_triggerContext>(0);
		}
		public Lock_tableContext lock_table() {
			return GetRuleContext<Lock_tableContext>(0);
		}
		public Truncate_tableContext truncate_table() {
			return GetRuleContext<Truncate_tableContext>(0);
		}
		public Update_statisticsContext update_statistics() {
			return GetRuleContext<Update_statisticsContext>(0);
		}
		public Ddl_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDdl_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDdl_clause(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_clauseContext ddl_clause() {
		Ddl_clauseContext _localctx = new Ddl_clauseContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_ddl_clause);
		try {
			State = 1479;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1313; alter_application_role();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1314; alter_assembly();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1315; alter_asymmetric_key();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1316; alter_authorization();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1317; alter_authorization_for_azure_dw();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1318; alter_authorization_for_parallel_dw();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1319; alter_authorization_for_sql_database();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1320; alter_availability_group();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1321; alter_certificate();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1322; alter_column_encryption_key();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1323; alter_credential();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1324; alter_cryptographic_provider();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1325; alter_database();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1326; alter_database_audit_specification();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1327; alter_db_role();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1328; alter_endpoint();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1329; alter_external_data_source();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1330; alter_external_library();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1331; alter_external_resource_pool();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1332; alter_fulltext_catalog();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1333; alter_fulltext_stoplist();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1334; alter_index();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1335; alter_login_azure_sql();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1336; alter_login_azure_sql_dw_and_pdw();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1337; alter_login_sql_server();
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1338; alter_master_key_azure_sql();
				}
				break;

			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1339; alter_master_key_sql_server();
				}
				break;

			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1340; alter_message_type();
				}
				break;

			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1341; alter_partition_function();
				}
				break;

			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1342; alter_partition_scheme();
				}
				break;

			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 1343; alter_remote_service_binding();
				}
				break;

			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 1344; alter_resource_governor();
				}
				break;

			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 1345; alter_schema_azure_sql_dw_and_pdw();
				}
				break;

			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 1346; alter_schema_sql();
				}
				break;

			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 1347; alter_sequence();
				}
				break;

			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 1348; alter_server_audit();
				}
				break;

			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 1349; alter_server_audit_specification();
				}
				break;

			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 1350; alter_server_configuration();
				}
				break;

			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 1351; alter_server_role();
				}
				break;

			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 1352; alter_server_role_pdw();
				}
				break;

			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 1353; alter_service();
				}
				break;

			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 1354; alter_service_master_key();
				}
				break;

			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 1355; alter_symmetric_key();
				}
				break;

			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 1356; alter_table();
				}
				break;

			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 1357; alter_user();
				}
				break;

			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 1358; alter_user_azure_sql();
				}
				break;

			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 1359; alter_workload_group();
				}
				break;

			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 1360; alter_xml_schema_collection();
				}
				break;

			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 1361; create_application_role();
				}
				break;

			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 1362; create_assembly();
				}
				break;

			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 1363; create_asymmetric_key();
				}
				break;

			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 1364; create_column_encryption_key();
				}
				break;

			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 1365; create_column_master_key();
				}
				break;

			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 1366; create_columnstore_index();
				}
				break;

			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 1367; create_credential();
				}
				break;

			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 1368; create_cryptographic_provider();
				}
				break;

			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 1369; create_database();
				}
				break;

			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 1370; create_database_azure();
				}
				break;

			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 1371; create_database_audit_specification();
				}
				break;

			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 1372; create_db_role();
				}
				break;

			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 1373; create_endpoint();
				}
				break;

			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 1374; create_event_notification();
				}
				break;

			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 1375; create_external_library();
				}
				break;

			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 1376; create_external_resource_pool();
				}
				break;

			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 1377; create_fulltext_catalog();
				}
				break;

			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 1378; create_fulltext_stoplist();
				}
				break;

			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 1379; create_index();
				}
				break;

			case 68:
				EnterOuterAlt(_localctx, 68);
				{
				State = 1380; create_login_azure_sql();
				}
				break;

			case 69:
				EnterOuterAlt(_localctx, 69);
				{
				State = 1381; create_login_pdw();
				}
				break;

			case 70:
				EnterOuterAlt(_localctx, 70);
				{
				State = 1382; create_login_sql_server();
				}
				break;

			case 71:
				EnterOuterAlt(_localctx, 71);
				{
				State = 1383; create_master_key_azure_sql();
				}
				break;

			case 72:
				EnterOuterAlt(_localctx, 72);
				{
				State = 1384; create_master_key_sql_server();
				}
				break;

			case 73:
				EnterOuterAlt(_localctx, 73);
				{
				State = 1385; create_nonclustered_columnstore_index();
				}
				break;

			case 74:
				EnterOuterAlt(_localctx, 74);
				{
				State = 1386; create_or_alter_broker_priority();
				}
				break;

			case 75:
				EnterOuterAlt(_localctx, 75);
				{
				State = 1387; create_or_alter_event_session();
				}
				break;

			case 76:
				EnterOuterAlt(_localctx, 76);
				{
				State = 1388; create_partition_function();
				}
				break;

			case 77:
				EnterOuterAlt(_localctx, 77);
				{
				State = 1389; create_partition_scheme();
				}
				break;

			case 78:
				EnterOuterAlt(_localctx, 78);
				{
				State = 1390; create_remote_service_binding();
				}
				break;

			case 79:
				EnterOuterAlt(_localctx, 79);
				{
				State = 1391; create_resource_pool();
				}
				break;

			case 80:
				EnterOuterAlt(_localctx, 80);
				{
				State = 1392; create_route();
				}
				break;

			case 81:
				EnterOuterAlt(_localctx, 81);
				{
				State = 1393; create_rule();
				}
				break;

			case 82:
				EnterOuterAlt(_localctx, 82);
				{
				State = 1394; create_schema();
				}
				break;

			case 83:
				EnterOuterAlt(_localctx, 83);
				{
				State = 1395; create_schema_azure_sql_dw_and_pdw();
				}
				break;

			case 84:
				EnterOuterAlt(_localctx, 84);
				{
				State = 1396; create_search_property_list();
				}
				break;

			case 85:
				EnterOuterAlt(_localctx, 85);
				{
				State = 1397; create_security_policy();
				}
				break;

			case 86:
				EnterOuterAlt(_localctx, 86);
				{
				State = 1398; create_sequence();
				}
				break;

			case 87:
				EnterOuterAlt(_localctx, 87);
				{
				State = 1399; create_server_audit();
				}
				break;

			case 88:
				EnterOuterAlt(_localctx, 88);
				{
				State = 1400; create_server_audit_specification();
				}
				break;

			case 89:
				EnterOuterAlt(_localctx, 89);
				{
				State = 1401; create_server_role();
				}
				break;

			case 90:
				EnterOuterAlt(_localctx, 90);
				{
				State = 1402; create_service();
				}
				break;

			case 91:
				EnterOuterAlt(_localctx, 91);
				{
				State = 1403; create_statistics();
				}
				break;

			case 92:
				EnterOuterAlt(_localctx, 92);
				{
				State = 1404; create_synonym();
				}
				break;

			case 93:
				EnterOuterAlt(_localctx, 93);
				{
				State = 1405; create_table();
				}
				break;

			case 94:
				EnterOuterAlt(_localctx, 94);
				{
				State = 1406; create_type();
				}
				break;

			case 95:
				EnterOuterAlt(_localctx, 95);
				{
				State = 1407; create_user();
				}
				break;

			case 96:
				EnterOuterAlt(_localctx, 96);
				{
				State = 1408; create_user_azure_sql_dw();
				}
				break;

			case 97:
				EnterOuterAlt(_localctx, 97);
				{
				State = 1409; create_workload_group();
				}
				break;

			case 98:
				EnterOuterAlt(_localctx, 98);
				{
				State = 1410; create_xml_index();
				}
				break;

			case 99:
				EnterOuterAlt(_localctx, 99);
				{
				State = 1411; create_xml_schema_collection();
				}
				break;

			case 100:
				EnterOuterAlt(_localctx, 100);
				{
				State = 1412; disable_trigger();
				}
				break;

			case 101:
				EnterOuterAlt(_localctx, 101);
				{
				State = 1413; drop_aggregate();
				}
				break;

			case 102:
				EnterOuterAlt(_localctx, 102);
				{
				State = 1414; drop_application_role();
				}
				break;

			case 103:
				EnterOuterAlt(_localctx, 103);
				{
				State = 1415; drop_assembly();
				}
				break;

			case 104:
				EnterOuterAlt(_localctx, 104);
				{
				State = 1416; drop_asymmetric_key();
				}
				break;

			case 105:
				EnterOuterAlt(_localctx, 105);
				{
				State = 1417; drop_availability_group();
				}
				break;

			case 106:
				EnterOuterAlt(_localctx, 106);
				{
				State = 1418; drop_broker_priority();
				}
				break;

			case 107:
				EnterOuterAlt(_localctx, 107);
				{
				State = 1419; drop_certificate();
				}
				break;

			case 108:
				EnterOuterAlt(_localctx, 108);
				{
				State = 1420; drop_column_encryption_key();
				}
				break;

			case 109:
				EnterOuterAlt(_localctx, 109);
				{
				State = 1421; drop_column_master_key();
				}
				break;

			case 110:
				EnterOuterAlt(_localctx, 110);
				{
				State = 1422; drop_contract();
				}
				break;

			case 111:
				EnterOuterAlt(_localctx, 111);
				{
				State = 1423; drop_credential();
				}
				break;

			case 112:
				EnterOuterAlt(_localctx, 112);
				{
				State = 1424; drop_cryptograhic_provider();
				}
				break;

			case 113:
				EnterOuterAlt(_localctx, 113);
				{
				State = 1425; drop_database();
				}
				break;

			case 114:
				EnterOuterAlt(_localctx, 114);
				{
				State = 1426; drop_database_audit_specification();
				}
				break;

			case 115:
				EnterOuterAlt(_localctx, 115);
				{
				State = 1427; drop_database_encryption_key();
				}
				break;

			case 116:
				EnterOuterAlt(_localctx, 116);
				{
				State = 1428; drop_database_scoped_credential();
				}
				break;

			case 117:
				EnterOuterAlt(_localctx, 117);
				{
				State = 1429; drop_db_role();
				}
				break;

			case 118:
				EnterOuterAlt(_localctx, 118);
				{
				State = 1430; drop_default();
				}
				break;

			case 119:
				EnterOuterAlt(_localctx, 119);
				{
				State = 1431; drop_endpoint();
				}
				break;

			case 120:
				EnterOuterAlt(_localctx, 120);
				{
				State = 1432; drop_event_notifications();
				}
				break;

			case 121:
				EnterOuterAlt(_localctx, 121);
				{
				State = 1433; drop_event_session();
				}
				break;

			case 122:
				EnterOuterAlt(_localctx, 122);
				{
				State = 1434; drop_external_data_source();
				}
				break;

			case 123:
				EnterOuterAlt(_localctx, 123);
				{
				State = 1435; drop_external_file_format();
				}
				break;

			case 124:
				EnterOuterAlt(_localctx, 124);
				{
				State = 1436; drop_external_library();
				}
				break;

			case 125:
				EnterOuterAlt(_localctx, 125);
				{
				State = 1437; drop_external_resource_pool();
				}
				break;

			case 126:
				EnterOuterAlt(_localctx, 126);
				{
				State = 1438; drop_external_table();
				}
				break;

			case 127:
				EnterOuterAlt(_localctx, 127);
				{
				State = 1439; drop_fulltext_catalog();
				}
				break;

			case 128:
				EnterOuterAlt(_localctx, 128);
				{
				State = 1440; drop_fulltext_index();
				}
				break;

			case 129:
				EnterOuterAlt(_localctx, 129);
				{
				State = 1441; drop_fulltext_stoplist();
				}
				break;

			case 130:
				EnterOuterAlt(_localctx, 130);
				{
				State = 1442; drop_function();
				}
				break;

			case 131:
				EnterOuterAlt(_localctx, 131);
				{
				State = 1443; drop_index();
				}
				break;

			case 132:
				EnterOuterAlt(_localctx, 132);
				{
				State = 1444; drop_login();
				}
				break;

			case 133:
				EnterOuterAlt(_localctx, 133);
				{
				State = 1445; drop_master_key();
				}
				break;

			case 134:
				EnterOuterAlt(_localctx, 134);
				{
				State = 1446; drop_message_type();
				}
				break;

			case 135:
				EnterOuterAlt(_localctx, 135);
				{
				State = 1447; drop_partition_function();
				}
				break;

			case 136:
				EnterOuterAlt(_localctx, 136);
				{
				State = 1448; drop_partition_scheme();
				}
				break;

			case 137:
				EnterOuterAlt(_localctx, 137);
				{
				State = 1449; drop_procedure();
				}
				break;

			case 138:
				EnterOuterAlt(_localctx, 138);
				{
				State = 1450; drop_queue();
				}
				break;

			case 139:
				EnterOuterAlt(_localctx, 139);
				{
				State = 1451; drop_remote_service_binding();
				}
				break;

			case 140:
				EnterOuterAlt(_localctx, 140);
				{
				State = 1452; drop_resource_pool();
				}
				break;

			case 141:
				EnterOuterAlt(_localctx, 141);
				{
				State = 1453; drop_route();
				}
				break;

			case 142:
				EnterOuterAlt(_localctx, 142);
				{
				State = 1454; drop_rule();
				}
				break;

			case 143:
				EnterOuterAlt(_localctx, 143);
				{
				State = 1455; drop_schema();
				}
				break;

			case 144:
				EnterOuterAlt(_localctx, 144);
				{
				State = 1456; drop_search_property_list();
				}
				break;

			case 145:
				EnterOuterAlt(_localctx, 145);
				{
				State = 1457; drop_security_policy();
				}
				break;

			case 146:
				EnterOuterAlt(_localctx, 146);
				{
				State = 1458; drop_sequence();
				}
				break;

			case 147:
				EnterOuterAlt(_localctx, 147);
				{
				State = 1459; drop_server_audit();
				}
				break;

			case 148:
				EnterOuterAlt(_localctx, 148);
				{
				State = 1460; drop_server_audit_specification();
				}
				break;

			case 149:
				EnterOuterAlt(_localctx, 149);
				{
				State = 1461; drop_server_role();
				}
				break;

			case 150:
				EnterOuterAlt(_localctx, 150);
				{
				State = 1462; drop_service();
				}
				break;

			case 151:
				EnterOuterAlt(_localctx, 151);
				{
				State = 1463; drop_signature();
				}
				break;

			case 152:
				EnterOuterAlt(_localctx, 152);
				{
				State = 1464; drop_statistics();
				}
				break;

			case 153:
				EnterOuterAlt(_localctx, 153);
				{
				State = 1465; drop_statistics_name_azure_dw_and_pdw();
				}
				break;

			case 154:
				EnterOuterAlt(_localctx, 154);
				{
				State = 1466; drop_symmetric_key();
				}
				break;

			case 155:
				EnterOuterAlt(_localctx, 155);
				{
				State = 1467; drop_synonym();
				}
				break;

			case 156:
				EnterOuterAlt(_localctx, 156);
				{
				State = 1468; drop_table();
				}
				break;

			case 157:
				EnterOuterAlt(_localctx, 157);
				{
				State = 1469; drop_trigger();
				}
				break;

			case 158:
				EnterOuterAlt(_localctx, 158);
				{
				State = 1470; drop_type();
				}
				break;

			case 159:
				EnterOuterAlt(_localctx, 159);
				{
				State = 1471; drop_user();
				}
				break;

			case 160:
				EnterOuterAlt(_localctx, 160);
				{
				State = 1472; drop_view();
				}
				break;

			case 161:
				EnterOuterAlt(_localctx, 161);
				{
				State = 1473; drop_workload_group();
				}
				break;

			case 162:
				EnterOuterAlt(_localctx, 162);
				{
				State = 1474; drop_xml_schema_collection();
				}
				break;

			case 163:
				EnterOuterAlt(_localctx, 163);
				{
				State = 1475; enable_trigger();
				}
				break;

			case 164:
				EnterOuterAlt(_localctx, 164);
				{
				State = 1476; lock_table();
				}
				break;

			case 165:
				EnterOuterAlt(_localctx, 165);
				{
				State = 1477; truncate_table();
				}
				break;

			case 166:
				EnterOuterAlt(_localctx, 166);
				{
				State = 1478; update_statistics();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_statementContext : ParserRuleContext {
		public Backup_databaseContext backup_database() {
			return GetRuleContext<Backup_databaseContext>(0);
		}
		public Backup_logContext backup_log() {
			return GetRuleContext<Backup_logContext>(0);
		}
		public Backup_certificateContext backup_certificate() {
			return GetRuleContext<Backup_certificateContext>(0);
		}
		public Backup_master_keyContext backup_master_key() {
			return GetRuleContext<Backup_master_keyContext>(0);
		}
		public Backup_service_master_keyContext backup_service_master_key() {
			return GetRuleContext<Backup_service_master_keyContext>(0);
		}
		public Backup_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_statement(this);
		}
	}

	[RuleVersion(0)]
	public Backup_statementContext backup_statement() {
		Backup_statementContext _localctx = new Backup_statementContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_backup_statement);
		try {
			State = 1486;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1481; backup_database();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1482; backup_log();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1483; backup_certificate();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1484; backup_master_key();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1485; backup_service_master_key();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cfl_statementContext : ParserRuleContext {
		public Block_statementContext block_statement() {
			return GetRuleContext<Block_statementContext>(0);
		}
		public Break_statementContext break_statement() {
			return GetRuleContext<Break_statementContext>(0);
		}
		public Continue_statementContext continue_statement() {
			return GetRuleContext<Continue_statementContext>(0);
		}
		public Goto_statementContext goto_statement() {
			return GetRuleContext<Goto_statementContext>(0);
		}
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public Print_statementContext print_statement() {
			return GetRuleContext<Print_statementContext>(0);
		}
		public Raiseerror_statementContext raiseerror_statement() {
			return GetRuleContext<Raiseerror_statementContext>(0);
		}
		public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public Throw_statementContext throw_statement() {
			return GetRuleContext<Throw_statementContext>(0);
		}
		public Try_catch_statementContext try_catch_statement() {
			return GetRuleContext<Try_catch_statementContext>(0);
		}
		public Waitfor_statementContext waitfor_statement() {
			return GetRuleContext<Waitfor_statementContext>(0);
		}
		public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		public Cfl_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cfl_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCfl_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCfl_statement(this);
		}
	}

	[RuleVersion(0)]
	public Cfl_statementContext cfl_statement() {
		Cfl_statementContext _localctx = new Cfl_statementContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_cfl_statement);
		try {
			State = 1500;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1488; block_statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1489; break_statement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1490; continue_statement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1491; goto_statement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1492; if_statement();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1493; print_statement();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1494; raiseerror_statement();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1495; return_statement();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1496; throw_statement();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1497; try_catch_statement();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1498; waitfor_statement();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1499; while_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_statementContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public Block_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBlock_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBlock_statement(this);
		}
	}

	[RuleVersion(0)]
	public Block_statementContext block_statement() {
		Block_statementContext _localctx = new Block_statementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_block_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1502; Match(BEGIN);
			State = 1504;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				State = 1503; Match(SEMI);
				}
				break;
			}
			State = 1509;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1506; sql_clauses();
					}
					} 
				}
				State = 1511;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			}
			State = 1512; Match(END);
			State = 1514;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				State = 1513; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Break_statementContext : ParserRuleContext {
		public ITerminalNode BREAK() { return GetToken(TSqlParser.BREAK, 0); }
		public Break_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBreak_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBreak_statement(this);
		}
	}

	[RuleVersion(0)]
	public Break_statementContext break_statement() {
		Break_statementContext _localctx = new Break_statementContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_break_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1516; Match(BREAK);
			State = 1518;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				State = 1517; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Continue_statementContext : ParserRuleContext {
		public ITerminalNode CONTINUE() { return GetToken(TSqlParser.CONTINUE, 0); }
		public Continue_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continue_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterContinue_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitContinue_statement(this);
		}
	}

	[RuleVersion(0)]
	public Continue_statementContext continue_statement() {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_continue_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1520; Match(CONTINUE);
			State = 1522;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				State = 1521; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Goto_statementContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(TSqlParser.GOTO, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Goto_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goto_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGoto_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGoto_statement(this);
		}
	}

	[RuleVersion(0)]
	public Goto_statementContext goto_statement() {
		Goto_statementContext _localctx = new Goto_statementContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_goto_statement);
		try {
			State = 1534;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1524; Match(GOTO);
				State = 1525; id_();
				State = 1527;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
				case 1:
					{
					State = 1526; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1529; id_();
				State = 1530; Match(COLON);
				State = 1532;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
				case 1:
					{
					State = 1531; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_return_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1536; Match(RETURN);
			State = 1538;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				State = 1537; expression(0);
				}
				break;
			}
			State = 1541;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 1540; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(TSqlParser.ELSE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1543; Match(IF);
			State = 1544; search_condition(0);
			State = 1545; sql_clauses();
			State = 1548;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				State = 1546; Match(ELSE);
				State = 1547; sql_clauses();
				}
				break;
			}
			State = 1551;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				State = 1550; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_statementContext : ParserRuleContext {
		public ITerminalNode THROW() { return GetToken(TSqlParser.THROW, 0); }
		public Throw_error_numberContext throw_error_number() {
			return GetRuleContext<Throw_error_numberContext>(0);
		}
		public Throw_messageContext throw_message() {
			return GetRuleContext<Throw_messageContext>(0);
		}
		public Throw_stateContext throw_state() {
			return GetRuleContext<Throw_stateContext>(0);
		}
		public Throw_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterThrow_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitThrow_statement(this);
		}
	}

	[RuleVersion(0)]
	public Throw_statementContext throw_statement() {
		Throw_statementContext _localctx = new Throw_statementContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_throw_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1553; Match(THROW);
			State = 1560;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				State = 1554; throw_error_number();
				State = 1555; Match(COMMA);
				State = 1556; throw_message();
				State = 1557; Match(COMMA);
				State = 1558; throw_state();
				}
				break;
			}
			State = 1563;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				State = 1562; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_error_numberContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_error_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_error_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterThrow_error_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitThrow_error_number(this);
		}
	}

	[RuleVersion(0)]
	public Throw_error_numberContext throw_error_number() {
		Throw_error_numberContext _localctx = new Throw_error_numberContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_throw_error_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1565;
			_la = _input.La(1);
			if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_messageContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_messageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_message; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterThrow_message(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitThrow_message(this);
		}
	}

	[RuleVersion(0)]
	public Throw_messageContext throw_message() {
		Throw_messageContext _localctx = new Throw_messageContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_throw_message);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1567;
			_la = _input.La(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_stateContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_stateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_state; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterThrow_state(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitThrow_state(this);
		}
	}

	[RuleVersion(0)]
	public Throw_stateContext throw_state() {
		Throw_stateContext _localctx = new Throw_stateContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_throw_state);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1569;
			_la = _input.La(1);
			if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_catch_statementContext : ParserRuleContext {
		public Sql_clausesContext try_clauses;
		public Sql_clausesContext catch_clauses;
		public ITerminalNode[] BEGIN() { return GetTokens(TSqlParser.BEGIN); }
		public ITerminalNode BEGIN(int i) {
			return GetToken(TSqlParser.BEGIN, i);
		}
		public ITerminalNode[] TRY() { return GetTokens(TSqlParser.TRY); }
		public ITerminalNode TRY(int i) {
			return GetToken(TSqlParser.TRY, i);
		}
		public ITerminalNode[] END() { return GetTokens(TSqlParser.END); }
		public ITerminalNode END(int i) {
			return GetToken(TSqlParser.END, i);
		}
		public ITerminalNode[] CATCH() { return GetTokens(TSqlParser.CATCH); }
		public ITerminalNode CATCH(int i) {
			return GetToken(TSqlParser.CATCH, i);
		}
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public Try_catch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_catch_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTry_catch_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTry_catch_statement(this);
		}
	}

	[RuleVersion(0)]
	public Try_catch_statementContext try_catch_statement() {
		Try_catch_statementContext _localctx = new Try_catch_statementContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_try_catch_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1571; Match(BEGIN);
			State = 1572; Match(TRY);
			State = 1574;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				{
				State = 1573; Match(SEMI);
				}
				break;
			}
			State = 1577;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1576; _localctx.try_clauses = sql_clauses();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1579;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,36,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 1581; Match(END);
			State = 1582; Match(TRY);
			State = 1584;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				{
				State = 1583; Match(SEMI);
				}
				break;
			}
			State = 1586; Match(BEGIN);
			State = 1587; Match(CATCH);
			State = 1589;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				State = 1588; Match(SEMI);
				}
				break;
			}
			State = 1594;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,39,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1591; _localctx.catch_clauses = sql_clauses();
					}
					} 
				}
				State = 1596;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,39,_ctx);
			}
			State = 1597; Match(END);
			State = 1598; Match(CATCH);
			State = 1600;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
			case 1:
				{
				State = 1599; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Waitfor_statementContext : ParserRuleContext {
		public ITerminalNode WAITFOR() { return GetToken(TSqlParser.WAITFOR, 0); }
		public Receive_statementContext receive_statement() {
			return GetRuleContext<Receive_statementContext>(0);
		}
		public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DELAY() { return GetToken(TSqlParser.DELAY, 0); }
		public ITerminalNode TIME() { return GetToken(TSqlParser.TIME, 0); }
		public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public Waitfor_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitfor_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWaitfor_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWaitfor_statement(this);
		}
	}

	[RuleVersion(0)]
	public Waitfor_statementContext waitfor_statement() {
		Waitfor_statementContext _localctx = new Waitfor_statementContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_waitfor_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1602; Match(WAITFOR);
			State = 1604;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				{
				State = 1603; receive_statement();
				}
				break;
			}
			State = 1607;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				State = 1606; Match(COMMA);
				}
				break;
			}
			State = 1611;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				State = 1609;
				_la = _input.La(1);
				if ( !(_la==DELAY || _la==TIME || _la==TIMEOUT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1610; time();
				}
				break;
			}
			State = 1614;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				State = 1613; expression(0);
				}
				break;
			}
			State = 1617;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				{
				State = 1616; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(TSqlParser.WHILE, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Sql_clausesContext sql_clauses() {
			return GetRuleContext<Sql_clausesContext>(0);
		}
		public ITerminalNode BREAK() { return GetToken(TSqlParser.BREAK, 0); }
		public ITerminalNode CONTINUE() { return GetToken(TSqlParser.CONTINUE, 0); }
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1619; Match(WHILE);
			State = 1620; search_condition(0);
			State = 1630;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
			case 1:
				{
				State = 1621; sql_clauses();
				}
				break;

			case 2:
				{
				State = 1622; Match(BREAK);
				State = 1624;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
				case 1:
					{
					State = 1623; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 1626; Match(CONTINUE);
				State = 1628;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
				case 1:
					{
					State = 1627; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_statementContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(TSqlParser.PRINT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DOUBLE_QUOTE_ID() { return GetToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public Print_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrint_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrint_statement(this);
		}
	}

	[RuleVersion(0)]
	public Print_statementContext print_statement() {
		Print_statementContext _localctx = new Print_statementContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_print_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1632; Match(PRINT);
			State = 1635;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
			case 1:
				{
				State = 1633; expression(0);
				}
				break;

			case 2:
				{
				State = 1634; Match(DOUBLE_QUOTE_ID);
				}
				break;
			}
			State = 1641;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,50,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1637; Match(COMMA);
					State = 1638; Match(LOCAL_ID);
					}
					} 
				}
				State = 1643;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,50,_ctx);
			}
			State = 1645;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,51,_ctx) ) {
			case 1:
				{
				State = 1644; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raiseerror_statementContext : ParserRuleContext {
		public IToken msg;
		public Constant_LOCAL_IDContext severity;
		public Constant_LOCAL_IDContext state;
		public IToken formatstring;
		public IToken argument;
		public ITerminalNode RAISERROR() { return GetToken(TSqlParser.RAISERROR, 0); }
		public Constant_LOCAL_IDContext[] constant_LOCAL_ID() {
			return GetRuleContexts<Constant_LOCAL_IDContext>();
		}
		public Constant_LOCAL_IDContext constant_LOCAL_ID(int i) {
			return GetRuleContext<Constant_LOCAL_IDContext>(i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode SETERROR() { return GetToken(TSqlParser.SETERROR, 0); }
		public ITerminalNode NOWAIT() { return GetToken(TSqlParser.NOWAIT, 0); }
		public ITerminalNode[] NULL_() { return GetTokens(TSqlParser.NULL_); }
		public ITerminalNode NULL_(int i) {
			return GetToken(TSqlParser.NULL_, i);
		}
		public ITerminalNode DOUBLE_QUOTE_ID() { return GetToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public Raiseerror_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseerror_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRaiseerror_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRaiseerror_statement(this);
		}
	}

	[RuleVersion(0)]
	public Raiseerror_statementContext raiseerror_statement() {
		Raiseerror_statementContext _localctx = new Raiseerror_statementContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_raiseerror_statement);
		int _la;
		try {
			int _alt;
			State = 1682;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1647; Match(RAISERROR);
				State = 1648; Match(LR_BRACKET);
				State = 1649;
				_localctx.msg = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 1182)) & ~0x3f) == 0 && ((1L << (_la - 1182)) & ((1L << (LOCAL_ID - 1182)) | (1L << (DECIMAL - 1182)) | (1L << (STRING - 1182)))) != 0)) ) {
					_localctx.msg = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1650; Match(COMMA);
				State = 1651; _localctx.severity = constant_LOCAL_ID();
				State = 1652; Match(COMMA);
				State = 1653; _localctx.state = constant_LOCAL_ID();
				State = 1661;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,53,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1654; Match(COMMA);
						State = 1657;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
						case 1:
							{
							State = 1655; constant_LOCAL_ID();
							}
							break;

						case 2:
							{
							State = 1656; Match(NULL_);
							}
							break;
						}
						}
						} 
					}
					State = 1663;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,53,_ctx);
				}
				State = 1664; Match(RR_BRACKET);
				State = 1667;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
				case 1:
					{
					State = 1665; Match(WITH);
					State = 1666;
					_la = _input.La(1);
					if ( !(_la==LOG || _la==NOWAIT || _la==SETERROR) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 1670;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,55,_ctx) ) {
				case 1:
					{
					State = 1669; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1672; Match(RAISERROR);
				State = 1673; Match(DECIMAL);
				State = 1674;
				_localctx.formatstring = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 1178)) & ~0x3f) == 0 && ((1L << (_la - 1178)) & ((1L << (DOUBLE_QUOTE_ID - 1178)) | (1L << (LOCAL_ID - 1178)) | (1L << (STRING - 1178)))) != 0)) ) {
					_localctx.formatstring = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1679;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,56,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1675; Match(COMMA);
						State = 1676;
						_localctx.argument = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 1182)) & ~0x3f) == 0 && ((1L << (_la - 1182)) & ((1L << (LOCAL_ID - 1182)) | (1L << (DECIMAL - 1182)) | (1L << (STRING - 1182)))) != 0)) ) {
							_localctx.argument = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						} 
					}
					State = 1681;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,56,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_statementContext : ParserRuleContext {
		public Empty_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEmpty_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEmpty_statement(this);
		}
	}

	[RuleVersion(0)]
	public Empty_statementContext empty_statement() {
		Empty_statementContext _localctx = new Empty_statementContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_empty_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1684; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Another_statementContext : ParserRuleContext {
		public Alter_queueContext alter_queue() {
			return GetRuleContext<Alter_queueContext>(0);
		}
		public Checkpoint_statementContext checkpoint_statement() {
			return GetRuleContext<Checkpoint_statementContext>(0);
		}
		public Conversation_statementContext conversation_statement() {
			return GetRuleContext<Conversation_statementContext>(0);
		}
		public Create_contractContext create_contract() {
			return GetRuleContext<Create_contractContext>(0);
		}
		public Create_queueContext create_queue() {
			return GetRuleContext<Create_queueContext>(0);
		}
		public Cursor_statementContext cursor_statement() {
			return GetRuleContext<Cursor_statementContext>(0);
		}
		public Declare_statementContext declare_statement() {
			return GetRuleContext<Declare_statementContext>(0);
		}
		public Execute_statementContext execute_statement() {
			return GetRuleContext<Execute_statementContext>(0);
		}
		public Kill_statementContext kill_statement() {
			return GetRuleContext<Kill_statementContext>(0);
		}
		public Message_statementContext message_statement() {
			return GetRuleContext<Message_statementContext>(0);
		}
		public Reconfigure_statementContext reconfigure_statement() {
			return GetRuleContext<Reconfigure_statementContext>(0);
		}
		public Security_statementContext security_statement() {
			return GetRuleContext<Security_statementContext>(0);
		}
		public Set_statementContext set_statement() {
			return GetRuleContext<Set_statementContext>(0);
		}
		public Setuser_statementContext setuser_statement() {
			return GetRuleContext<Setuser_statementContext>(0);
		}
		public Shutdown_statementContext shutdown_statement() {
			return GetRuleContext<Shutdown_statementContext>(0);
		}
		public Transaction_statementContext transaction_statement() {
			return GetRuleContext<Transaction_statementContext>(0);
		}
		public Use_statementContext use_statement() {
			return GetRuleContext<Use_statementContext>(0);
		}
		public Another_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_another_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAnother_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAnother_statement(this);
		}
	}

	[RuleVersion(0)]
	public Another_statementContext another_statement() {
		Another_statementContext _localctx = new Another_statementContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_another_statement);
		try {
			State = 1703;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1686; alter_queue();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1687; checkpoint_statement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1688; conversation_statement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1689; create_contract();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1690; create_queue();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1691; cursor_statement();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1692; declare_statement();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1693; execute_statement();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1694; kill_statement();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1695; message_statement();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1696; reconfigure_statement();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1697; security_statement();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1698; set_statement();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1699; setuser_statement();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1700; shutdown_statement();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1701; transaction_statement();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1702; use_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_application_roleContext : ParserRuleContext {
		public Id_Context appliction_role;
		public Id_Context new_application_role_name;
		public IToken application_role_password;
		public Id_Context app_role_default_schema;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode DEFAULT_SCHEMA() { return GetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_application_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_application_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_application_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_application_role(this);
		}
	}

	[RuleVersion(0)]
	public Alter_application_roleContext alter_application_role() {
		Alter_application_roleContext _localctx = new Alter_application_roleContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_alter_application_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1705; Match(ALTER);
			State = 1706; Match(APPLICATION);
			State = 1707; Match(ROLE);
			State = 1708; _localctx.appliction_role = id_();
			State = 1709; Match(WITH);
			State = 1716;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,60,_ctx) ) {
			case 1:
				{
				State = 1711;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,59,_ctx) ) {
				case 1:
					{
					State = 1710; Match(COMMA);
					}
					break;
				}
				State = 1713; Match(NAME);
				State = 1714; Match(EQUAL);
				State = 1715; _localctx.new_application_role_name = id_();
				}
				break;
			}
			State = 1724;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,62,_ctx) ) {
			case 1:
				{
				State = 1719;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
				case 1:
					{
					State = 1718; Match(COMMA);
					}
					break;
				}
				State = 1721; Match(PASSWORD);
				State = 1722; Match(EQUAL);
				State = 1723; _localctx.application_role_password = Match(STRING);
				}
				break;
			}
			State = 1732;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,64,_ctx) ) {
			case 1:
				{
				State = 1727;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
				case 1:
					{
					State = 1726; Match(COMMA);
					}
					break;
				}
				State = 1729; Match(DEFAULT_SCHEMA);
				State = 1730; Match(EQUAL);
				State = 1731; _localctx.app_role_default_schema = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_xml_schema_collectionContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Alter_xml_schema_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_xml_schema_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_xml_schema_collection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_xml_schema_collection(this);
		}
	}

	[RuleVersion(0)]
	public Alter_xml_schema_collectionContext alter_xml_schema_collection() {
		Alter_xml_schema_collectionContext _localctx = new Alter_xml_schema_collectionContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_alter_xml_schema_collection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1734; Match(ALTER);
			State = 1735; Match(XML);
			State = 1736; Match(SCHEMA);
			State = 1737; Match(COLLECTION);
			State = 1741;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
			case 1:
				{
				State = 1738; id_();
				State = 1739; Match(DOT);
				}
				break;
			}
			State = 1743; id_();
			State = 1744; Match(ADD);
			State = 1745; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_application_roleContext : ParserRuleContext {
		public Id_Context appliction_role;
		public IToken application_role_password;
		public Id_Context app_role_default_schema;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode DEFAULT_SCHEMA() { return GetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_application_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_application_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_application_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_application_role(this);
		}
	}

	[RuleVersion(0)]
	public Create_application_roleContext create_application_role() {
		Create_application_roleContext _localctx = new Create_application_roleContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_create_application_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1747; Match(CREATE);
			State = 1748; Match(APPLICATION);
			State = 1749; Match(ROLE);
			State = 1750; _localctx.appliction_role = id_();
			State = 1751; Match(WITH);
			State = 1758;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,67,_ctx) ) {
			case 1:
				{
				State = 1753;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
				case 1:
					{
					State = 1752; Match(COMMA);
					}
					break;
				}
				State = 1755; Match(PASSWORD);
				State = 1756; Match(EQUAL);
				State = 1757; _localctx.application_role_password = Match(STRING);
				}
				break;
			}
			State = 1766;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,69,_ctx) ) {
			case 1:
				{
				State = 1761;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
				case 1:
					{
					State = 1760; Match(COMMA);
					}
					break;
				}
				State = 1763; Match(DEFAULT_SCHEMA);
				State = 1764; Match(EQUAL);
				State = 1765; _localctx.app_role_default_schema = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_aggregateContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context aggregate_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode AGGREGATE() { return GetToken(TSqlParser.AGGREGATE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_aggregateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_aggregate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_aggregate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_aggregate(this);
		}
	}

	[RuleVersion(0)]
	public Drop_aggregateContext drop_aggregate() {
		Drop_aggregateContext _localctx = new Drop_aggregateContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_drop_aggregate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1768; Match(DROP);
			State = 1769; Match(AGGREGATE);
			State = 1772;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
			case 1:
				{
				State = 1770; Match(IF);
				State = 1771; Match(EXISTS);
				}
				break;
			}
			State = 1777;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
			case 1:
				{
				State = 1774; _localctx.schema_name = id_();
				State = 1775; Match(DOT);
				}
				break;
			}
			State = 1779; _localctx.aggregate_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_application_roleContext : ParserRuleContext {
		public Id_Context rolename;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_application_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_application_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_application_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_application_role(this);
		}
	}

	[RuleVersion(0)]
	public Drop_application_roleContext drop_application_role() {
		Drop_application_roleContext _localctx = new Drop_application_roleContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_drop_application_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1781; Match(DROP);
			State = 1782; Match(APPLICATION);
			State = 1783; Match(ROLE);
			State = 1784; _localctx.rolename = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assemblyContext : ParserRuleContext {
		public Id_Context assembly_name;
		public Alter_assembly_startContext alter_assembly_start() {
			return GetRuleContext<Alter_assembly_startContext>(0);
		}
		public Alter_assembly_clauseContext alter_assembly_clause() {
			return GetRuleContext<Alter_assembly_clauseContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Alter_assemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assemblyContext alter_assembly() {
		Alter_assemblyContext _localctx = new Alter_assemblyContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_alter_assembly);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1786; alter_assembly_start();
			State = 1787; _localctx.assembly_name = id_();
			State = 1788; alter_assembly_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_startContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public Alter_assembly_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_start(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_startContext alter_assembly_start() {
		Alter_assembly_startContext _localctx = new Alter_assembly_startContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_alter_assembly_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1790; Match(ALTER);
			State = 1791; Match(ASSEMBLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_clauseContext : ParserRuleContext {
		public Alter_assembly_from_clauseContext alter_assembly_from_clause() {
			return GetRuleContext<Alter_assembly_from_clauseContext>(0);
		}
		public Alter_assembly_with_clauseContext alter_assembly_with_clause() {
			return GetRuleContext<Alter_assembly_with_clauseContext>(0);
		}
		public Alter_assembly_drop_clauseContext alter_assembly_drop_clause() {
			return GetRuleContext<Alter_assembly_drop_clauseContext>(0);
		}
		public Alter_assembly_add_clauseContext alter_assembly_add_clause() {
			return GetRuleContext<Alter_assembly_add_clauseContext>(0);
		}
		public Alter_assembly_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_clause(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_clauseContext alter_assembly_clause() {
		Alter_assembly_clauseContext _localctx = new Alter_assembly_clauseContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_alter_assembly_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1794;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				State = 1793; alter_assembly_from_clause();
				}
				break;
			}
			State = 1797;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,73,_ctx) ) {
			case 1:
				{
				State = 1796; alter_assembly_with_clause();
				}
				break;
			}
			State = 1800;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				State = 1799; alter_assembly_drop_clause();
				}
				break;
			}
			State = 1803;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
			case 1:
				{
				State = 1802; alter_assembly_add_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_from_clauseContext : ParserRuleContext {
		public Alter_assembly_from_clause_startContext alter_assembly_from_clause_start() {
			return GetRuleContext<Alter_assembly_from_clause_startContext>(0);
		}
		public Client_assembly_specifierContext client_assembly_specifier() {
			return GetRuleContext<Client_assembly_specifierContext>(0);
		}
		public Alter_assembly_file_bitsContext alter_assembly_file_bits() {
			return GetRuleContext<Alter_assembly_file_bitsContext>(0);
		}
		public Alter_assembly_from_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_from_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_from_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_from_clause(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_from_clauseContext alter_assembly_from_clause() {
		Alter_assembly_from_clauseContext _localctx = new Alter_assembly_from_clauseContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_alter_assembly_from_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1805; alter_assembly_from_clause_start();
			State = 1808;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,76,_ctx) ) {
			case 1:
				{
				State = 1806; client_assembly_specifier();
				}
				break;

			case 2:
				{
				State = 1807; alter_assembly_file_bits();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_from_clause_startContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Alter_assembly_from_clause_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_from_clause_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_from_clause_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_from_clause_start(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_from_clause_startContext alter_assembly_from_clause_start() {
		Alter_assembly_from_clause_startContext _localctx = new Alter_assembly_from_clause_startContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_alter_assembly_from_clause_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1810; Match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_drop_clauseContext : ParserRuleContext {
		public Alter_assembly_dropContext alter_assembly_drop() {
			return GetRuleContext<Alter_assembly_dropContext>(0);
		}
		public Alter_assembly_drop_multiple_filesContext alter_assembly_drop_multiple_files() {
			return GetRuleContext<Alter_assembly_drop_multiple_filesContext>(0);
		}
		public Alter_assembly_drop_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_drop_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_drop_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_drop_clause(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_drop_clauseContext alter_assembly_drop_clause() {
		Alter_assembly_drop_clauseContext _localctx = new Alter_assembly_drop_clauseContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_alter_assembly_drop_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1812; alter_assembly_drop();
			State = 1813; alter_assembly_drop_multiple_files();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_drop_multiple_filesContext : ParserRuleContext {
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Multiple_local_filesContext multiple_local_files() {
			return GetRuleContext<Multiple_local_filesContext>(0);
		}
		public Alter_assembly_drop_multiple_filesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_drop_multiple_files; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_drop_multiple_files(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_drop_multiple_files(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_drop_multiple_filesContext alter_assembly_drop_multiple_files() {
		Alter_assembly_drop_multiple_filesContext _localctx = new Alter_assembly_drop_multiple_filesContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_alter_assembly_drop_multiple_files);
		try {
			State = 1817;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,77,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1815; Match(ALL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1816; multiple_local_files();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_dropContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Alter_assembly_dropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_drop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_drop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_drop(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_dropContext alter_assembly_drop() {
		Alter_assembly_dropContext _localctx = new Alter_assembly_dropContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_alter_assembly_drop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1819; Match(DROP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_add_clauseContext : ParserRuleContext {
		public Alter_asssembly_add_clause_startContext alter_asssembly_add_clause_start() {
			return GetRuleContext<Alter_asssembly_add_clause_startContext>(0);
		}
		public Alter_assembly_client_file_clauseContext alter_assembly_client_file_clause() {
			return GetRuleContext<Alter_assembly_client_file_clauseContext>(0);
		}
		public Alter_assembly_add_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_add_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_add_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_add_clause(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_add_clauseContext alter_assembly_add_clause() {
		Alter_assembly_add_clauseContext _localctx = new Alter_assembly_add_clauseContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_alter_assembly_add_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1821; alter_asssembly_add_clause_start();
			State = 1822; alter_assembly_client_file_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_asssembly_add_clause_startContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Alter_asssembly_add_clause_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_asssembly_add_clause_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_asssembly_add_clause_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_asssembly_add_clause_start(this);
		}
	}

	[RuleVersion(0)]
	public Alter_asssembly_add_clause_startContext alter_asssembly_add_clause_start() {
		Alter_asssembly_add_clause_startContext _localctx = new Alter_asssembly_add_clause_startContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_alter_asssembly_add_clause_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1824; Match(ADD);
			State = 1825; Match(FILE);
			State = 1826; Match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_client_file_clauseContext : ParserRuleContext {
		public Alter_assembly_file_nameContext alter_assembly_file_name() {
			return GetRuleContext<Alter_assembly_file_nameContext>(0);
		}
		public Alter_assembly_asContext alter_assembly_as() {
			return GetRuleContext<Alter_assembly_asContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Alter_assembly_client_file_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_client_file_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_client_file_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_client_file_clause(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_client_file_clauseContext alter_assembly_client_file_clause() {
		Alter_assembly_client_file_clauseContext _localctx = new Alter_assembly_client_file_clauseContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_alter_assembly_client_file_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1828; alter_assembly_file_name();
			State = 1832;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,78,_ctx) ) {
			case 1:
				{
				State = 1829; alter_assembly_as();
				State = 1830; id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_file_nameContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Alter_assembly_file_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_file_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_file_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_file_name(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_file_nameContext alter_assembly_file_name() {
		Alter_assembly_file_nameContext _localctx = new Alter_assembly_file_nameContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_alter_assembly_file_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1834; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_file_bitsContext : ParserRuleContext {
		public Alter_assembly_asContext alter_assembly_as() {
			return GetRuleContext<Alter_assembly_asContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Alter_assembly_file_bitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_file_bits; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_file_bits(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_file_bits(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_file_bitsContext alter_assembly_file_bits() {
		Alter_assembly_file_bitsContext _localctx = new Alter_assembly_file_bitsContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_alter_assembly_file_bits);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1836; alter_assembly_as();
			State = 1837; id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_asContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Alter_assembly_asContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_as; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_as(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_as(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_asContext alter_assembly_as() {
		Alter_assembly_asContext _localctx = new Alter_assembly_asContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_alter_assembly_as);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1839; Match(AS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_with_clauseContext : ParserRuleContext {
		public Alter_assembly_withContext alter_assembly_with() {
			return GetRuleContext<Alter_assembly_withContext>(0);
		}
		public Assembly_optionContext assembly_option() {
			return GetRuleContext<Assembly_optionContext>(0);
		}
		public Alter_assembly_with_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_with_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_with_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_with_clause(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_with_clauseContext alter_assembly_with_clause() {
		Alter_assembly_with_clauseContext _localctx = new Alter_assembly_with_clauseContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_alter_assembly_with_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1841; alter_assembly_with();
			State = 1842; assembly_option(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_withContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Alter_assembly_withContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_with; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_with(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_with(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_withContext alter_assembly_with() {
		Alter_assembly_withContext _localctx = new Alter_assembly_withContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_alter_assembly_with);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1844; Match(WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Client_assembly_specifierContext : ParserRuleContext {
		public Network_file_shareContext network_file_share() {
			return GetRuleContext<Network_file_shareContext>(0);
		}
		public Local_fileContext local_file() {
			return GetRuleContext<Local_fileContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Client_assembly_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_client_assembly_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClient_assembly_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClient_assembly_specifier(this);
		}
	}

	[RuleVersion(0)]
	public Client_assembly_specifierContext client_assembly_specifier() {
		Client_assembly_specifierContext _localctx = new Client_assembly_specifierContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_client_assembly_specifier);
		try {
			State = 1849;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,79,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1846; network_file_share();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1847; local_file();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1848; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assembly_optionContext : ParserRuleContext {
		public ITerminalNode PERMISSION_SET() { return GetToken(TSqlParser.PERMISSION_SET, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode SAFE() { return GetToken(TSqlParser.SAFE, 0); }
		public ITerminalNode EXTERNAL_ACCESS() { return GetToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		public ITerminalNode UNSAFE() { return GetToken(TSqlParser.UNSAFE, 0); }
		public ITerminalNode VISIBILITY() { return GetToken(TSqlParser.VISIBILITY, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode UNCHECKED() { return GetToken(TSqlParser.UNCHECKED, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public Assembly_optionContext assembly_option() {
			return GetRuleContext<Assembly_optionContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Assembly_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assembly_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAssembly_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAssembly_option(this);
		}
	}

	[RuleVersion(0)]
	public Assembly_optionContext assembly_option() {
		return assembly_option(0);
	}

	private Assembly_optionContext assembly_option(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Assembly_optionContext _localctx = new Assembly_optionContext(_ctx, _parentState);
		Assembly_optionContext _prevctx = _localctx;
		int _startState = 94;
		EnterRecursionRule(_localctx, 94, RULE_assembly_option, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1860;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				State = 1852; Match(PERMISSION_SET);
				State = 1853; Match(EQUAL);
				State = 1854;
				_la = _input.La(1);
				if ( !(_la==EXTERNAL_ACCESS || _la==SAFE || _la==UNSAFE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				{
				State = 1855; Match(VISIBILITY);
				State = 1856; Match(EQUAL);
				State = 1857; on_off();
				}
				break;

			case 3:
				{
				State = 1858; Match(UNCHECKED);
				State = 1859; Match(DATA);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 1866;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,81,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Assembly_optionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_assembly_option);
					State = 1862;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 1863; Match(COMMA);
					}
					} 
				}
				State = 1868;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,81,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Network_file_shareContext : ParserRuleContext {
		public Network_file_startContext network_file_start() {
			return GetRuleContext<Network_file_startContext>(0);
		}
		public Network_computerContext network_computer() {
			return GetRuleContext<Network_computerContext>(0);
		}
		public File_pathContext file_path() {
			return GetRuleContext<File_pathContext>(0);
		}
		public Network_file_shareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_network_file_share; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNetwork_file_share(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNetwork_file_share(this);
		}
	}

	[RuleVersion(0)]
	public Network_file_shareContext network_file_share() {
		Network_file_shareContext _localctx = new Network_file_shareContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_network_file_share);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1869; network_file_start();
			State = 1870; network_computer();
			State = 1871; file_path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Network_computerContext : ParserRuleContext {
		public Id_Context computer_name;
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Network_computerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_network_computer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNetwork_computer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNetwork_computer(this);
		}
	}

	[RuleVersion(0)]
	public Network_computerContext network_computer() {
		Network_computerContext _localctx = new Network_computerContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_network_computer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1873; _localctx.computer_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Network_file_startContext : ParserRuleContext {
		public ITerminalNode DOUBLE_BACK_SLASH() { return GetToken(TSqlParser.DOUBLE_BACK_SLASH, 0); }
		public Network_file_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_network_file_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNetwork_file_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNetwork_file_start(this);
		}
	}

	[RuleVersion(0)]
	public Network_file_startContext network_file_start() {
		Network_file_startContext _localctx = new Network_file_startContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_network_file_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1875; Match(DOUBLE_BACK_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_pathContext : ParserRuleContext {
		public File_directory_path_separatorContext file_directory_path_separator() {
			return GetRuleContext<File_directory_path_separatorContext>(0);
		}
		public File_pathContext file_path() {
			return GetRuleContext<File_pathContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public File_pathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_path; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_path(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_path(this);
		}
	}

	[RuleVersion(0)]
	public File_pathContext file_path() {
		File_pathContext _localctx = new File_pathContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_file_path);
		try {
			State = 1881;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,82,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1877; file_directory_path_separator();
				State = 1878; file_path();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1880; id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_directory_path_separatorContext : ParserRuleContext {
		public File_directory_path_separatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_directory_path_separator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_directory_path_separator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_directory_path_separator(this);
		}
	}

	[RuleVersion(0)]
	public File_directory_path_separatorContext file_directory_path_separator() {
		File_directory_path_separatorContext _localctx = new File_directory_path_separatorContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_file_directory_path_separator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1883; Match(BACKSLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_fileContext : ParserRuleContext {
		public Local_driveContext local_drive() {
			return GetRuleContext<Local_driveContext>(0);
		}
		public File_pathContext file_path() {
			return GetRuleContext<File_pathContext>(0);
		}
		public Local_fileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLocal_file(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLocal_file(this);
		}
	}

	[RuleVersion(0)]
	public Local_fileContext local_file() {
		Local_fileContext _localctx = new Local_fileContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_local_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1885; local_drive();
			State = 1886; file_path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_driveContext : ParserRuleContext {
		public ITerminalNode DISK_DRIVE() { return GetToken(TSqlParser.DISK_DRIVE, 0); }
		public Local_driveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_drive; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLocal_drive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLocal_drive(this);
		}
	}

	[RuleVersion(0)]
	public Local_driveContext local_drive() {
		Local_driveContext _localctx = new Local_driveContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_local_drive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1888; Match(DISK_DRIVE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiple_local_filesContext : ParserRuleContext {
		public Multiple_local_file_startContext multiple_local_file_start() {
			return GetRuleContext<Multiple_local_file_startContext>(0);
		}
		public Local_fileContext local_file() {
			return GetRuleContext<Local_fileContext>(0);
		}
		public ITerminalNode SINGLE_QUOTE() { return GetToken(TSqlParser.SINGLE_QUOTE, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Multiple_local_filesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiple_local_files; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMultiple_local_files(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMultiple_local_files(this);
		}
	}

	[RuleVersion(0)]
	public Multiple_local_filesContext multiple_local_files() {
		Multiple_local_filesContext _localctx = new Multiple_local_filesContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_multiple_local_files);
		try {
			State = 1896;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,83,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1890; multiple_local_file_start();
				State = 1891; local_file();
				State = 1892; Match(SINGLE_QUOTE);
				State = 1893; Match(COMMA);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1895; local_file();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiple_local_file_startContext : ParserRuleContext {
		public ITerminalNode SINGLE_QUOTE() { return GetToken(TSqlParser.SINGLE_QUOTE, 0); }
		public Multiple_local_file_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiple_local_file_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMultiple_local_file_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMultiple_local_file_start(this);
		}
	}

	[RuleVersion(0)]
	public Multiple_local_file_startContext multiple_local_file_start() {
		Multiple_local_file_startContext _localctx = new Multiple_local_file_startContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_multiple_local_file_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1898; Match(SINGLE_QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_assemblyContext : ParserRuleContext {
		public Id_Context assembly_name;
		public Id_Context owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PERMISSION_SET() { return GetToken(TSqlParser.PERMISSION_SET, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] BINARY() { return GetTokens(TSqlParser.BINARY); }
		public ITerminalNode BINARY(int i) {
			return GetToken(TSqlParser.BINARY, i);
		}
		public ITerminalNode SAFE() { return GetToken(TSqlParser.SAFE, 0); }
		public ITerminalNode EXTERNAL_ACCESS() { return GetToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		public ITerminalNode UNSAFE() { return GetToken(TSqlParser.UNSAFE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_assemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_assembly; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_assembly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_assembly(this);
		}
	}

	[RuleVersion(0)]
	public Create_assemblyContext create_assembly() {
		Create_assemblyContext _localctx = new Create_assemblyContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_create_assembly);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1900; Match(CREATE);
			State = 1901; Match(ASSEMBLY);
			State = 1902; _localctx.assembly_name = id_();
			State = 1905;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,84,_ctx) ) {
			case 1:
				{
				State = 1903; Match(AUTHORIZATION);
				State = 1904; _localctx.owner_name = id_();
				}
				break;
			}
			State = 1907; Match(FROM);
			State = 1912;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1909;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,85,_ctx) ) {
					case 1:
						{
						State = 1908; Match(COMMA);
						}
						break;
					}
					State = 1911;
					_la = _input.La(1);
					if ( !(_la==STRING || _la==BINARY) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1914;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,86,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 1920;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				State = 1916; Match(WITH);
				State = 1917; Match(PERMISSION_SET);
				State = 1918; Match(EQUAL);
				State = 1919;
				_la = _input.La(1);
				if ( !(_la==EXTERNAL_ACCESS || _la==SAFE || _la==UNSAFE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_assemblyContext : ParserRuleContext {
		public Id_Context assembly_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode DEPENDENTS() { return GetToken(TSqlParser.DEPENDENTS, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_assemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_assembly; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_assembly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_assembly(this);
		}
	}

	[RuleVersion(0)]
	public Drop_assemblyContext drop_assembly() {
		Drop_assemblyContext _localctx = new Drop_assemblyContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_drop_assembly);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1922; Match(DROP);
			State = 1923; Match(ASSEMBLY);
			State = 1926;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,88,_ctx) ) {
			case 1:
				{
				State = 1924; Match(IF);
				State = 1925; Match(EXISTS);
				}
				break;
			}
			State = 1932;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1929;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,89,_ctx) ) {
					case 1:
						{
						State = 1928; Match(COMMA);
						}
						break;
					}
					State = 1931; _localctx.assembly_name = id_();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1934;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,90,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 1939;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				State = 1936; Match(WITH);
				State = 1937; Match(NO);
				State = 1938; Match(DEPENDENTS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_asymmetric_keyContext : ParserRuleContext {
		public Id_Context Asym_Key_Name;
		public Alter_asymmetric_key_startContext alter_asymmetric_key_start() {
			return GetRuleContext<Alter_asymmetric_key_startContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Asymmetric_key_optionContext asymmetric_key_option() {
			return GetRuleContext<Asymmetric_key_optionContext>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Alter_asymmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_asymmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_asymmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_asymmetric_key(this);
		}
	}

	[RuleVersion(0)]
	public Alter_asymmetric_keyContext alter_asymmetric_key() {
		Alter_asymmetric_keyContext _localctx = new Alter_asymmetric_keyContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_alter_asymmetric_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1941; alter_asymmetric_key_start();
			State = 1942; _localctx.Asym_Key_Name = id_();
			State = 1947;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,92,_ctx) ) {
			case 1:
				{
				State = 1943; asymmetric_key_option();
				}
				break;

			case 2:
				{
				State = 1944; Match(REMOVE);
				State = 1945; Match(PRIVATE);
				State = 1946; Match(KEY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_asymmetric_key_startContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Alter_asymmetric_key_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_asymmetric_key_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_asymmetric_key_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_asymmetric_key_start(this);
		}
	}

	[RuleVersion(0)]
	public Alter_asymmetric_key_startContext alter_asymmetric_key_start() {
		Alter_asymmetric_key_startContext _localctx = new Alter_asymmetric_key_startContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_alter_asymmetric_key_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1949; Match(ALTER);
			State = 1950; Match(ASYMMETRIC);
			State = 1951; Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asymmetric_key_optionContext : ParserRuleContext {
		public Asymmetric_key_option_startContext asymmetric_key_option_start() {
			return GetRuleContext<Asymmetric_key_option_startContext>(0);
		}
		public Asymmetric_key_password_change_optionContext[] asymmetric_key_password_change_option() {
			return GetRuleContexts<Asymmetric_key_password_change_optionContext>();
		}
		public Asymmetric_key_password_change_optionContext asymmetric_key_password_change_option(int i) {
			return GetRuleContext<Asymmetric_key_password_change_optionContext>(i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Asymmetric_key_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asymmetric_key_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAsymmetric_key_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAsymmetric_key_option(this);
		}
	}

	[RuleVersion(0)]
	public Asymmetric_key_optionContext asymmetric_key_option() {
		Asymmetric_key_optionContext _localctx = new Asymmetric_key_optionContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_asymmetric_key_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1953; asymmetric_key_option_start();
			State = 1954; asymmetric_key_password_change_option();
			State = 1957;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				State = 1955; Match(COMMA);
				State = 1956; asymmetric_key_password_change_option();
				}
				break;
			}
			State = 1959; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asymmetric_key_option_startContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Asymmetric_key_option_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asymmetric_key_option_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAsymmetric_key_option_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAsymmetric_key_option_start(this);
		}
	}

	[RuleVersion(0)]
	public Asymmetric_key_option_startContext asymmetric_key_option_start() {
		Asymmetric_key_option_startContext _localctx = new Asymmetric_key_option_startContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_asymmetric_key_option_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1961; Match(WITH);
			State = 1962; Match(PRIVATE);
			State = 1963; Match(KEY);
			State = 1964; Match(LR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asymmetric_key_password_change_optionContext : ParserRuleContext {
		public ITerminalNode DECRYPTION() { return GetToken(TSqlParser.DECRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public Asymmetric_key_password_change_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asymmetric_key_password_change_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAsymmetric_key_password_change_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAsymmetric_key_password_change_option(this);
		}
	}

	[RuleVersion(0)]
	public Asymmetric_key_password_change_optionContext asymmetric_key_password_change_option() {
		Asymmetric_key_password_change_optionContext _localctx = new Asymmetric_key_password_change_optionContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_asymmetric_key_password_change_option);
		try {
			State = 1976;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,94,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1966; Match(DECRYPTION);
				State = 1967; Match(BY);
				State = 1968; Match(PASSWORD);
				State = 1969; Match(EQUAL);
				State = 1970; Match(STRING);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1971; Match(ENCRYPTION);
				State = 1972; Match(BY);
				State = 1973; Match(PASSWORD);
				State = 1974; Match(EQUAL);
				State = 1975; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_asymmetric_keyContext : ParserRuleContext {
		public Id_Context Asym_Key_Nam;
		public Id_Context database_principal_name;
		public Id_Context Assembly_Name;
		public Id_Context Provider_Name;
		public IToken provider_key_name;
		public IToken asymmetric_key_password;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode EXECUTABLE_FILE() { return GetToken(TSqlParser.EXECUTABLE_FILE, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode PROVIDER_KEY_NAME() { return GetToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public ITerminalNode CREATION_DISPOSITION() { return GetToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public ITerminalNode RSA_4096() { return GetToken(TSqlParser.RSA_4096, 0); }
		public ITerminalNode RSA_3072() { return GetToken(TSqlParser.RSA_3072, 0); }
		public ITerminalNode RSA_2048() { return GetToken(TSqlParser.RSA_2048, 0); }
		public ITerminalNode RSA_1024() { return GetToken(TSqlParser.RSA_1024, 0); }
		public ITerminalNode RSA_512() { return GetToken(TSqlParser.RSA_512, 0); }
		public ITerminalNode CREATE_NEW() { return GetToken(TSqlParser.CREATE_NEW, 0); }
		public ITerminalNode OPEN_EXISTING() { return GetToken(TSqlParser.OPEN_EXISTING, 0); }
		public Create_asymmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_asymmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_asymmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_asymmetric_key(this);
		}
	}

	[RuleVersion(0)]
	public Create_asymmetric_keyContext create_asymmetric_key() {
		Create_asymmetric_keyContext _localctx = new Create_asymmetric_keyContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_create_asymmetric_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1978; Match(CREATE);
			State = 1979; Match(ASYMMETRIC);
			State = 1980; Match(KEY);
			State = 1981; _localctx.Asym_Key_Nam = id_();
			State = 1984;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,95,_ctx) ) {
			case 1:
				{
				State = 1982; Match(AUTHORIZATION);
				State = 1983; _localctx.database_principal_name = id_();
				}
				break;
			}
			State = 1999;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,97,_ctx) ) {
			case 1:
				{
				State = 1986; Match(FROM);
				State = 1997;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,96,_ctx) ) {
				case 1:
					{
					State = 1987; Match(FILE);
					State = 1988; Match(EQUAL);
					State = 1989; Match(STRING);
					}
					break;

				case 2:
					{
					State = 1990; Match(EXECUTABLE_FILE);
					State = 1991; Match(EQUAL);
					State = 1992; Match(STRING);
					}
					break;

				case 3:
					{
					State = 1993; Match(ASSEMBLY);
					State = 1994; _localctx.Assembly_Name = id_();
					}
					break;

				case 4:
					{
					State = 1995; Match(PROVIDER);
					State = 1996; _localctx.Provider_Name = id_();
					}
					break;
				}
				}
				break;
			}
			State = 2013;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,99,_ctx) ) {
			case 1:
				{
				State = 2001; Match(WITH);
				State = 2011;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,98,_ctx) ) {
				case 1:
					{
					State = 2002; Match(ALGORITHM);
					State = 2003; Match(EQUAL);
					State = 2004;
					_la = _input.La(1);
					if ( !(((((_la - 844)) & ~0x3f) == 0 && ((1L << (_la - 844)) & ((1L << (RSA_1024 - 844)) | (1L << (RSA_2048 - 844)) | (1L << (RSA_3072 - 844)) | (1L << (RSA_4096 - 844)) | (1L << (RSA_512 - 844)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 2:
					{
					State = 2005; Match(PROVIDER_KEY_NAME);
					State = 2006; Match(EQUAL);
					State = 2007; _localctx.provider_key_name = Match(STRING);
					}
					break;

				case 3:
					{
					State = 2008; Match(CREATION_DISPOSITION);
					State = 2009; Match(EQUAL);
					State = 2010;
					_la = _input.La(1);
					if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;
			}
			State = 2020;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,100,_ctx) ) {
			case 1:
				{
				State = 2015; Match(ENCRYPTION);
				State = 2016; Match(BY);
				State = 2017; Match(PASSWORD);
				State = 2018; Match(EQUAL);
				State = 2019; _localctx.asymmetric_key_password = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_asymmetric_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Drop_asymmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_asymmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_asymmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_asymmetric_key(this);
		}
	}

	[RuleVersion(0)]
	public Drop_asymmetric_keyContext drop_asymmetric_key() {
		Drop_asymmetric_keyContext _localctx = new Drop_asymmetric_keyContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_drop_asymmetric_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2022; Match(DROP);
			State = 2023; Match(ASYMMETRIC);
			State = 2024; Match(KEY);
			State = 2025; _localctx.key_name = id_();
			State = 2029;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,101,_ctx) ) {
			case 1:
				{
				State = 2026; Match(REMOVE);
				State = 2027; Match(PROVIDER);
				State = 2028; Match(KEY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorizationContext : ParserRuleContext {
		public Entity_nameContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return GetRuleContext<Alter_authorization_startContext>(0);
		}
		public Entity_toContext entity_to() {
			return GetRuleContext<Entity_toContext>(0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return GetRuleContext<Authorization_granteeContext>(0);
		}
		public Entity_nameContext entity_name() {
			return GetRuleContext<Entity_nameContext>(0);
		}
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public Colon_colonContext colon_colon() {
			return GetRuleContext<Colon_colonContext>(0);
		}
		public Alter_authorizationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorizationContext alter_authorization() {
		Alter_authorizationContext _localctx = new Alter_authorizationContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_alter_authorization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2031; alter_authorization_start();
			State = 2035;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,102,_ctx) ) {
			case 1:
				{
				State = 2032; class_type();
				State = 2033; colon_colon();
				}
				break;
			}
			State = 2037; _localctx.entity = entity_name();
			State = 2038; entity_to();
			State = 2039; authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Authorization_granteeContext : ParserRuleContext {
		public Id_Context principal_name;
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode OWNER() { return GetToken(TSqlParser.OWNER, 0); }
		public Authorization_granteeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_authorization_grantee; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAuthorization_grantee(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAuthorization_grantee(this);
		}
	}

	[RuleVersion(0)]
	public Authorization_granteeContext authorization_grantee() {
		Authorization_granteeContext _localctx = new Authorization_granteeContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_authorization_grantee);
		try {
			State = 2044;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,103,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2041; _localctx.principal_name = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2042; Match(SCHEMA);
				State = 2043; Match(OWNER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_toContext : ParserRuleContext {
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public Entity_toContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_to; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEntity_to(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEntity_to(this);
		}
	}

	[RuleVersion(0)]
	public Entity_toContext entity_to() {
		Entity_toContext _localctx = new Entity_toContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_entity_to);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2046; Match(TO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Colon_colonContext : ParserRuleContext {
		public ITerminalNode DOUBLE_COLON() { return GetToken(TSqlParser.DOUBLE_COLON, 0); }
		public Colon_colonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colon_colon; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColon_colon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColon_colon(this);
		}
	}

	[RuleVersion(0)]
	public Colon_colonContext colon_colon() {
		Colon_colonContext _localctx = new Colon_colonContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_colon_colon);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2048; Match(DOUBLE_COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorization_startContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Alter_authorization_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization_start(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorization_startContext alter_authorization_start() {
		Alter_authorization_startContext _localctx = new Alter_authorization_startContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_alter_authorization_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2050; Match(ALTER);
			State = 2051; Match(AUTHORIZATION);
			State = 2052; Match(ON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorization_for_sql_databaseContext : ParserRuleContext {
		public Entity_nameContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return GetRuleContext<Alter_authorization_startContext>(0);
		}
		public Entity_toContext entity_to() {
			return GetRuleContext<Entity_toContext>(0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return GetRuleContext<Authorization_granteeContext>(0);
		}
		public Entity_nameContext entity_name() {
			return GetRuleContext<Entity_nameContext>(0);
		}
		public Class_type_for_sql_databaseContext class_type_for_sql_database() {
			return GetRuleContext<Class_type_for_sql_databaseContext>(0);
		}
		public Colon_colonContext colon_colon() {
			return GetRuleContext<Colon_colonContext>(0);
		}
		public Alter_authorization_for_sql_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization_for_sql_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization_for_sql_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization_for_sql_database(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorization_for_sql_databaseContext alter_authorization_for_sql_database() {
		Alter_authorization_for_sql_databaseContext _localctx = new Alter_authorization_for_sql_databaseContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_alter_authorization_for_sql_database);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2054; alter_authorization_start();
			State = 2058;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,104,_ctx) ) {
			case 1:
				{
				State = 2055; class_type_for_sql_database();
				State = 2056; colon_colon();
				}
				break;
			}
			State = 2060; _localctx.entity = entity_name();
			State = 2061; entity_to();
			State = 2062; authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorization_for_azure_dwContext : ParserRuleContext {
		public Entity_name_for_azure_dwContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return GetRuleContext<Alter_authorization_startContext>(0);
		}
		public Entity_toContext entity_to() {
			return GetRuleContext<Entity_toContext>(0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return GetRuleContext<Authorization_granteeContext>(0);
		}
		public Entity_name_for_azure_dwContext entity_name_for_azure_dw() {
			return GetRuleContext<Entity_name_for_azure_dwContext>(0);
		}
		public Class_type_for_azure_dwContext class_type_for_azure_dw() {
			return GetRuleContext<Class_type_for_azure_dwContext>(0);
		}
		public Colon_colonContext colon_colon() {
			return GetRuleContext<Colon_colonContext>(0);
		}
		public Alter_authorization_for_azure_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization_for_azure_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization_for_azure_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization_for_azure_dw(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorization_for_azure_dwContext alter_authorization_for_azure_dw() {
		Alter_authorization_for_azure_dwContext _localctx = new Alter_authorization_for_azure_dwContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_alter_authorization_for_azure_dw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2064; alter_authorization_start();
			State = 2068;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,105,_ctx) ) {
			case 1:
				{
				State = 2065; class_type_for_azure_dw();
				State = 2066; colon_colon();
				}
				break;
			}
			State = 2070; _localctx.entity = entity_name_for_azure_dw();
			State = 2071; entity_to();
			State = 2072; authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorization_for_parallel_dwContext : ParserRuleContext {
		public Entity_name_for_parallel_dwContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return GetRuleContext<Alter_authorization_startContext>(0);
		}
		public Entity_toContext entity_to() {
			return GetRuleContext<Entity_toContext>(0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return GetRuleContext<Authorization_granteeContext>(0);
		}
		public Entity_name_for_parallel_dwContext entity_name_for_parallel_dw() {
			return GetRuleContext<Entity_name_for_parallel_dwContext>(0);
		}
		public Class_type_for_parallel_dwContext class_type_for_parallel_dw() {
			return GetRuleContext<Class_type_for_parallel_dwContext>(0);
		}
		public Colon_colonContext colon_colon() {
			return GetRuleContext<Colon_colonContext>(0);
		}
		public Alter_authorization_for_parallel_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization_for_parallel_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization_for_parallel_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization_for_parallel_dw(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorization_for_parallel_dwContext alter_authorization_for_parallel_dw() {
		Alter_authorization_for_parallel_dwContext _localctx = new Alter_authorization_for_parallel_dwContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_alter_authorization_for_parallel_dw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2074; alter_authorization_start();
			State = 2078;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,106,_ctx) ) {
			case 1:
				{
				State = 2075; class_type_for_parallel_dw();
				State = 2076; colon_colon();
				}
				break;
			}
			State = 2080; _localctx.entity = entity_name_for_parallel_dw();
			State = 2081; entity_to();
			State = 2082; authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_typeContext : ParserRuleContext {
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Class_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type(this);
		}
	}

	[RuleVersion(0)]
	public Class_typeContext class_type() {
		Class_typeContext _localctx = new Class_typeContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_class_type);
		try {
			State = 2118;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,107,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2084; Match(OBJECT);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2085; Match(ASSEMBLY);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2086; Match(ASYMMETRIC);
				State = 2087; Match(KEY);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2088; Match(AVAILABILITY);
				State = 2089; Match(GROUP);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2090; Match(CERTIFICATE);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2091; Match(CONTRACT);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2092; Match(TYPE);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2093; Match(DATABASE);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2094; Match(ENDPOINT);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2095; Match(FULLTEXT);
				State = 2096; Match(CATALOG);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2097; Match(FULLTEXT);
				State = 2098; Match(STOPLIST);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2099; Match(MESSAGE);
				State = 2100; Match(TYPE);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2101; Match(REMOTE);
				State = 2102; Match(SERVICE);
				State = 2103; Match(BINDING);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2104; Match(ROLE);
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2105; Match(ROUTE);
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2106; Match(SCHEMA);
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2107; Match(SEARCH);
				State = 2108; Match(PROPERTY);
				State = 2109; Match(LIST);
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2110; Match(SERVER);
				State = 2111; Match(ROLE);
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2112; Match(SERVICE);
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2113; Match(SYMMETRIC);
				State = 2114; Match(KEY);
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2115; Match(XML);
				State = 2116; Match(SCHEMA);
				State = 2117; Match(COLLECTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_type_for_sql_databaseContext : ParserRuleContext {
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Class_type_for_sql_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type_for_sql_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type_for_sql_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type_for_sql_database(this);
		}
	}

	[RuleVersion(0)]
	public Class_type_for_sql_databaseContext class_type_for_sql_database() {
		Class_type_for_sql_databaseContext _localctx = new Class_type_for_sql_databaseContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_class_type_for_sql_database);
		try {
			State = 2141;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,108,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2120; Match(OBJECT);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2121; Match(ASSEMBLY);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2122; Match(ASYMMETRIC);
				State = 2123; Match(KEY);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2124; Match(CERTIFICATE);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2125; Match(TYPE);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2126; Match(DATABASE);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2127; Match(FULLTEXT);
				State = 2128; Match(CATALOG);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2129; Match(FULLTEXT);
				State = 2130; Match(STOPLIST);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2131; Match(ROLE);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2132; Match(SCHEMA);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2133; Match(SEARCH);
				State = 2134; Match(PROPERTY);
				State = 2135; Match(LIST);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2136; Match(SYMMETRIC);
				State = 2137; Match(KEY);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2138; Match(XML);
				State = 2139; Match(SCHEMA);
				State = 2140; Match(COLLECTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_type_for_azure_dwContext : ParserRuleContext {
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public Class_type_for_azure_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type_for_azure_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type_for_azure_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type_for_azure_dw(this);
		}
	}

	[RuleVersion(0)]
	public Class_type_for_azure_dwContext class_type_for_azure_dw() {
		Class_type_for_azure_dwContext _localctx = new Class_type_for_azure_dwContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_class_type_for_azure_dw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2143;
			_la = _input.La(1);
			if ( !(_la==OBJECT || _la==SCHEMA) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_type_for_parallel_dwContext : ParserRuleContext {
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public Class_type_for_parallel_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type_for_parallel_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type_for_parallel_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type_for_parallel_dw(this);
		}
	}

	[RuleVersion(0)]
	public Class_type_for_parallel_dwContext class_type_for_parallel_dw() {
		Class_type_for_parallel_dwContext _localctx = new Class_type_for_parallel_dwContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_class_type_for_parallel_dw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2145;
			_la = _input.La(1);
			if ( !(_la==DATABASE || _la==OBJECT || _la==SCHEMA) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_type_for_grantContext : ParserRuleContext {
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode BROKER() { return GetToken(TSqlParser.BROKER, 0); }
		public ITerminalNode PRIORITY() { return GetToken(TSqlParser.PRIORITY, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		public ITerminalNode SCOPED() { return GetToken(TSqlParser.SCOPED, 0); }
		public ITerminalNode CONFIGURATION() { return GetToken(TSqlParser.CONFIGURATION, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode GOVERNOR() { return GetToken(TSqlParser.GOVERNOR, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode FORMAT() { return GetToken(TSqlParser.FORMAT, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public ITerminalNode SQL() { return GetToken(TSqlParser.SQL, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Class_type_for_grantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type_for_grant; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type_for_grant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type_for_grant(this);
		}
	}

	[RuleVersion(0)]
	public Class_type_for_grantContext class_type_for_grant() {
		Class_type_for_grantContext _localctx = new Class_type_for_grantContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_class_type_for_grant);
		int _la;
		try {
			State = 2238;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,114,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2147; Match(APPLICATION);
				State = 2148; Match(ROLE);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2149; Match(ASSEMBLY);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2150; Match(ASYMMETRIC);
				State = 2151; Match(KEY);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2152; Match(AUDIT);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2153; Match(AVAILABILITY);
				State = 2154; Match(GROUP);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2155; Match(BROKER);
				State = 2156; Match(PRIORITY);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2157; Match(CERTIFICATE);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2158; Match(COLUMN);
				State = 2159;
				_la = _input.La(1);
				if ( !(_la==ENCRYPTION || _la==MASTER) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2160; Match(KEY);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2161; Match(CONTRACT);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2162; Match(CREDENTIAL);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2163; Match(CRYPTOGRAPHIC);
				State = 2164; Match(PROVIDER);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2165; Match(DATABASE);
				State = 2179;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,110,_ctx) ) {
				case 1:
					{
					State = 2166; Match(AUDIT);
					State = 2167; Match(SPECIFICATION);
					}
					break;

				case 2:
					{
					State = 2168; Match(ENCRYPTION);
					State = 2169; Match(KEY);
					}
					break;

				case 3:
					{
					State = 2170; Match(EVENT);
					State = 2171; Match(SESSION);
					}
					break;

				case 4:
					{
					State = 2172; Match(SCOPED);
					State = 2177;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,109,_ctx) ) {
					case 1:
						{
						State = 2173; Match(CONFIGURATION);
						}
						break;

					case 2:
						{
						State = 2174; Match(CREDENTIAL);
						}
						break;

					case 3:
						{
						State = 2175; Match(RESOURCE);
						State = 2176; Match(GOVERNOR);
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2181; Match(ENDPOINT);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2182; Match(EVENT);
				State = 2183; Match(SESSION);
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2184; Match(NOTIFICATION);
				State = 2185;
				_la = _input.La(1);
				if ( !(_la==DATABASE || _la==OBJECT || _la==SERVER) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2186; Match(EXTERNAL);
				State = 2197;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,111,_ctx) ) {
				case 1:
					{
					State = 2187; Match(DATA);
					State = 2188; Match(SOURCE);
					}
					break;

				case 2:
					{
					State = 2189; Match(FILE);
					State = 2190; Match(FORMAT);
					}
					break;

				case 3:
					{
					State = 2191; Match(LIBRARY);
					}
					break;

				case 4:
					{
					State = 2192; Match(RESOURCE);
					State = 2193; Match(POOL);
					}
					break;

				case 5:
					{
					State = 2194; Match(TABLE);
					}
					break;

				case 6:
					{
					State = 2195; Match(CATALOG);
					}
					break;

				case 7:
					{
					State = 2196; Match(STOPLIST);
					}
					break;
				}
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2199; Match(LOGIN);
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2200; Match(MASTER);
				State = 2201; Match(KEY);
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2202; Match(MESSAGE);
				State = 2203; Match(TYPE);
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2204; Match(OBJECT);
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2205; Match(PARTITION);
				State = 2206;
				_la = _input.La(1);
				if ( !(_la==FUNCTION || _la==SCHEME) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 2207; Match(REMOTE);
				State = 2208; Match(SERVICE);
				State = 2209; Match(BINDING);
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 2210; Match(RESOURCE);
				State = 2211; Match(GOVERNOR);
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 2212; Match(ROLE);
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 2213; Match(ROUTE);
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 2214; Match(SCHEMA);
				}
				break;

			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 2215; Match(SEARCH);
				State = 2216; Match(PROPERTY);
				State = 2217; Match(LIST);
				}
				break;

			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 2218; Match(SERVER);
				State = 2224;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,113,_ctx) ) {
				case 1:
					{
					{
					State = 2219; Match(AUDIT);
					State = 2221;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,112,_ctx) ) {
					case 1:
						{
						State = 2220; Match(SPECIFICATION);
						}
						break;
					}
					}
					}
					break;

				case 2:
					{
					State = 2223; Match(ROLE);
					}
					break;
				}
				}
				break;

			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 2226; Match(SERVICE);
				}
				break;

			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 2227; Match(SQL);
				State = 2228; Match(LOGIN);
				}
				break;

			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 2229; Match(SYMMETRIC);
				State = 2230; Match(KEY);
				}
				break;

			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 2231; Match(TRIGGER);
				State = 2232;
				_la = _input.La(1);
				if ( !(_la==DATABASE || _la==SERVER) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 2233; Match(TYPE);
				}
				break;

			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 2234; Match(USER);
				}
				break;

			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 2235; Match(XML);
				State = 2236; Match(SCHEMA);
				State = 2237; Match(COLLECTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_availability_groupContext : ParserRuleContext {
		public Id_Context group_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_availability_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_availability_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_availability_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_availability_group(this);
		}
	}

	[RuleVersion(0)]
	public Drop_availability_groupContext drop_availability_group() {
		Drop_availability_groupContext _localctx = new Drop_availability_groupContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_drop_availability_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2240; Match(DROP);
			State = 2241; Match(AVAILABILITY);
			State = 2242; Match(GROUP);
			State = 2243; _localctx.group_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_availability_groupContext : ParserRuleContext {
		public Alter_availability_group_startContext alter_availability_group_start() {
			return GetRuleContext<Alter_availability_group_startContext>(0);
		}
		public Alter_availability_group_optionsContext alter_availability_group_options() {
			return GetRuleContext<Alter_availability_group_optionsContext>(0);
		}
		public Alter_availability_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_availability_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_availability_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_availability_group(this);
		}
	}

	[RuleVersion(0)]
	public Alter_availability_groupContext alter_availability_group() {
		Alter_availability_groupContext _localctx = new Alter_availability_groupContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_alter_availability_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2245; alter_availability_group_start();
			State = 2246; alter_availability_group_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_availability_group_startContext : ParserRuleContext {
		public Id_Context group_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Alter_availability_group_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_availability_group_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_availability_group_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_availability_group_start(this);
		}
	}

	[RuleVersion(0)]
	public Alter_availability_group_startContext alter_availability_group_start() {
		Alter_availability_group_startContext _localctx = new Alter_availability_group_startContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_alter_availability_group_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2248; Match(ALTER);
			State = 2249; Match(AVAILABILITY);
			State = 2250; Match(GROUP);
			State = 2251; _localctx.group_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_availability_group_optionsContext : ParserRuleContext {
		public IToken milliseconds;
		public Id_Context database_name;
		public IToken server_instance;
		public IToken session_timeout;
		public IToken ag_name;
		public IToken ag_name_modified;
		public IToken listener_name;
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode AUTOMATED_BACKUP_PREFERENCE() { return GetToken(TSqlParser.AUTOMATED_BACKUP_PREFERENCE, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode FAILURE_CONDITION_LEVEL() { return GetToken(TSqlParser.FAILURE_CONDITION_LEVEL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode HEALTH_CHECK_TIMEOUT() { return GetToken(TSqlParser.HEALTH_CHECK_TIMEOUT, 0); }
		public ITerminalNode DB_FAILOVER() { return GetToken(TSqlParser.DB_FAILOVER, 0); }
		public ITerminalNode REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT() { return GetToken(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0); }
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public ITerminalNode SECONDARY_ONLY() { return GetToken(TSqlParser.SECONDARY_ONLY, 0); }
		public ITerminalNode SECONDARY() { return GetToken(TSqlParser.SECONDARY, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode REPLICA() { return GetToken(TSqlParser.REPLICA, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] WITH() { return GetTokens(TSqlParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(TSqlParser.WITH, i);
		}
		public ITerminalNode ENDPOINT_URL() { return GetToken(TSqlParser.ENDPOINT_URL, 0); }
		public ITerminalNode[] AVAILABILITY_MODE() { return GetTokens(TSqlParser.AVAILABILITY_MODE); }
		public ITerminalNode AVAILABILITY_MODE(int i) {
			return GetToken(TSqlParser.AVAILABILITY_MODE, i);
		}
		public ITerminalNode[] FAILOVER_MODE() { return GetTokens(TSqlParser.FAILOVER_MODE); }
		public ITerminalNode FAILOVER_MODE(int i) {
			return GetToken(TSqlParser.FAILOVER_MODE, i);
		}
		public ITerminalNode[] SEEDING_MODE() { return GetTokens(TSqlParser.SEEDING_MODE); }
		public ITerminalNode SEEDING_MODE(int i) {
			return GetToken(TSqlParser.SEEDING_MODE, i);
		}
		public ITerminalNode BACKUP_PRIORITY() { return GetToken(TSqlParser.BACKUP_PRIORITY, 0); }
		public ITerminalNode PRIMARY_ROLE() { return GetToken(TSqlParser.PRIMARY_ROLE, 0); }
		public ITerminalNode[] ALLOW_CONNECTIONS() { return GetTokens(TSqlParser.ALLOW_CONNECTIONS); }
		public ITerminalNode ALLOW_CONNECTIONS(int i) {
			return GetToken(TSqlParser.ALLOW_CONNECTIONS, i);
		}
		public ITerminalNode SECONDARY_ROLE() { return GetToken(TSqlParser.SECONDARY_ROLE, 0); }
		public ITerminalNode[] SYNCHRONOUS_COMMIT() { return GetTokens(TSqlParser.SYNCHRONOUS_COMMIT); }
		public ITerminalNode SYNCHRONOUS_COMMIT(int i) {
			return GetToken(TSqlParser.SYNCHRONOUS_COMMIT, i);
		}
		public ITerminalNode[] ASYNCHRONOUS_COMMIT() { return GetTokens(TSqlParser.ASYNCHRONOUS_COMMIT); }
		public ITerminalNode ASYNCHRONOUS_COMMIT(int i) {
			return GetToken(TSqlParser.ASYNCHRONOUS_COMMIT, i);
		}
		public ITerminalNode[] AUTOMATIC() { return GetTokens(TSqlParser.AUTOMATIC); }
		public ITerminalNode AUTOMATIC(int i) {
			return GetToken(TSqlParser.AUTOMATIC, i);
		}
		public ITerminalNode[] MANUAL() { return GetTokens(TSqlParser.MANUAL); }
		public ITerminalNode MANUAL(int i) {
			return GetToken(TSqlParser.MANUAL, i);
		}
		public ITerminalNode READ_WRITE() { return GetToken(TSqlParser.READ_WRITE, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode READ_ONLY_ROUTING_LIST() { return GetToken(TSqlParser.READ_ONLY_ROUTING_LIST, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode SESSION_TIMEOUT() { return GetToken(TSqlParser.SESSION_TIMEOUT, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode JOIN() { return GetToken(TSqlParser.JOIN, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode[] LISTENER_URL() { return GetTokens(TSqlParser.LISTENER_URL); }
		public ITerminalNode LISTENER_URL(int i) {
			return GetToken(TSqlParser.LISTENER_URL, i);
		}
		public ITerminalNode GRANT() { return GetToken(TSqlParser.GRANT, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ANY() { return GetToken(TSqlParser.ANY, 0); }
		public ITerminalNode DENY() { return GetToken(TSqlParser.DENY, 0); }
		public ITerminalNode FAILOVER() { return GetToken(TSqlParser.FAILOVER, 0); }
		public ITerminalNode FORCE_FAILOVER_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode LISTENER() { return GetToken(TSqlParser.LISTENER, 0); }
		public ITerminalNode DHCP() { return GetToken(TSqlParser.DHCP, 0); }
		public ITerminalNode IP() { return GetToken(TSqlParser.IP, 0); }
		public Ip_v4_failoverContext[] ip_v4_failover() {
			return GetRuleContexts<Ip_v4_failoverContext>();
		}
		public Ip_v4_failoverContext ip_v4_failover(int i) {
			return GetRuleContext<Ip_v4_failoverContext>(i);
		}
		public ITerminalNode PORT() { return GetToken(TSqlParser.PORT, 0); }
		public Ip_v6_failoverContext[] ip_v6_failover() {
			return GetRuleContexts<Ip_v6_failoverContext>();
		}
		public Ip_v6_failoverContext ip_v6_failover(int i) {
			return GetRuleContext<Ip_v6_failoverContext>(i);
		}
		public ITerminalNode RESTART() { return GetToken(TSqlParser.RESTART, 0); }
		public ITerminalNode OFFLINE() { return GetToken(TSqlParser.OFFLINE, 0); }
		public ITerminalNode DTC_SUPPORT() { return GetToken(TSqlParser.DTC_SUPPORT, 0); }
		public ITerminalNode PER_DB() { return GetToken(TSqlParser.PER_DB, 0); }
		public Alter_availability_group_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_availability_group_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_availability_group_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_availability_group_options(this);
		}
	}

	[RuleVersion(0)]
	public Alter_availability_group_optionsContext alter_availability_group_options() {
		Alter_availability_group_optionsContext _localctx = new Alter_availability_group_optionsContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_alter_availability_group_options);
		int _la;
		try {
			int _alt;
			State = 2608;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,158,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2253; Match(SET);
				State = 2254; Match(LR_BRACKET);
				{
				State = 2270;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,115,_ctx) ) {
				case 1:
					{
					State = 2255; Match(AUTOMATED_BACKUP_PREFERENCE);
					State = 2256; Match(EQUAL);
					State = 2257;
					_la = _input.La(1);
					if ( !(_la==NONE || _la==PRIMARY || _la==SECONDARY || _la==SECONDARY_ONLY) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 2:
					{
					State = 2258; Match(FAILURE_CONDITION_LEVEL);
					State = 2259; Match(EQUAL);
					State = 2260; Match(DECIMAL);
					}
					break;

				case 3:
					{
					State = 2261; Match(HEALTH_CHECK_TIMEOUT);
					State = 2262; Match(EQUAL);
					State = 2263; _localctx.milliseconds = Match(DECIMAL);
					}
					break;

				case 4:
					{
					State = 2264; Match(DB_FAILOVER);
					State = 2265; Match(EQUAL);
					State = 2266;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 5:
					{
					State = 2267; Match(REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT);
					State = 2268; Match(EQUAL);
					State = 2269; Match(DECIMAL);
					}
					break;
				}
				State = 2272; Match(RR_BRACKET);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2273; Match(ADD);
				State = 2274; Match(DATABASE);
				State = 2275; _localctx.database_name = id_();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2276; Match(REMOVE);
				State = 2277; Match(DATABASE);
				State = 2278; _localctx.database_name = id_();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2279; Match(ADD);
				State = 2280; Match(REPLICA);
				State = 2281; Match(ON);
				State = 2282; _localctx.server_instance = Match(STRING);
				{
				State = 2283; Match(WITH);
				State = 2284; Match(LR_BRACKET);
				{
				State = 2288;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,116,_ctx) ) {
				case 1:
					{
					State = 2285; Match(ENDPOINT_URL);
					State = 2286; Match(EQUAL);
					State = 2287; Match(STRING);
					}
					break;
				}
				State = 2296;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,118,_ctx) ) {
				case 1:
					{
					State = 2291;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,117,_ctx) ) {
					case 1:
						{
						State = 2290; Match(COMMA);
						}
						break;
					}
					State = 2293; Match(AVAILABILITY_MODE);
					State = 2294; Match(EQUAL);
					State = 2295;
					_la = _input.La(1);
					if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 2304;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,120,_ctx) ) {
				case 1:
					{
					State = 2299;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,119,_ctx) ) {
					case 1:
						{
						State = 2298; Match(COMMA);
						}
						break;
					}
					State = 2301; Match(FAILOVER_MODE);
					State = 2302; Match(EQUAL);
					State = 2303;
					_la = _input.La(1);
					if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 2312;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,122,_ctx) ) {
				case 1:
					{
					State = 2307;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,121,_ctx) ) {
					case 1:
						{
						State = 2306; Match(COMMA);
						}
						break;
					}
					State = 2309; Match(SEEDING_MODE);
					State = 2310; Match(EQUAL);
					State = 2311;
					_la = _input.La(1);
					if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 2320;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,124,_ctx) ) {
				case 1:
					{
					State = 2315;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,123,_ctx) ) {
					case 1:
						{
						State = 2314; Match(COMMA);
						}
						break;
					}
					State = 2317; Match(BACKUP_PRIORITY);
					State = 2318; Match(EQUAL);
					State = 2319; Match(DECIMAL);
					}
					break;
				}
				State = 2331;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,126,_ctx) ) {
				case 1:
					{
					State = 2323;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,125,_ctx) ) {
					case 1:
						{
						State = 2322; Match(COMMA);
						}
						break;
					}
					State = 2325; Match(PRIMARY_ROLE);
					State = 2326; Match(LR_BRACKET);
					State = 2327; Match(ALLOW_CONNECTIONS);
					State = 2328; Match(EQUAL);
					State = 2329;
					_la = _input.La(1);
					if ( !(_la==ALL || _la==READ_WRITE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 2330; Match(RR_BRACKET);
					}
					break;
				}
				State = 2342;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,128,_ctx) ) {
				case 1:
					{
					State = 2334;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,127,_ctx) ) {
					case 1:
						{
						State = 2333; Match(COMMA);
						}
						break;
					}
					State = 2336; Match(SECONDARY_ROLE);
					State = 2337; Match(LR_BRACKET);
					State = 2338; Match(ALLOW_CONNECTIONS);
					State = 2339; Match(EQUAL);
					{
					State = 2340; Match(READ_ONLY);
					}
					State = 2341; Match(RR_BRACKET);
					}
					break;
				}
				}
				}
				State = 2344; Match(RR_BRACKET);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2345; Match(SECONDARY_ROLE);
				State = 2346; Match(LR_BRACKET);
				State = 2355;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,129,_ctx) ) {
				case 1:
					{
					State = 2347; Match(ALLOW_CONNECTIONS);
					State = 2348; Match(EQUAL);
					State = 2349;
					_la = _input.La(1);
					if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 2:
					{
					State = 2350; Match(READ_ONLY_ROUTING_LIST);
					State = 2351; Match(EQUAL);
					{
					State = 2352; Match(LR_BRACKET);
					{
					{
					State = 2353; Match(STRING);
					}
					}
					State = 2354; Match(RR_BRACKET);
					}
					}
					break;
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2357; Match(PRIMARY_ROLE);
				State = 2358; Match(LR_BRACKET);
				State = 2381;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,133,_ctx) ) {
				case 1:
					{
					State = 2359; Match(ALLOW_CONNECTIONS);
					State = 2360; Match(EQUAL);
					State = 2361;
					_la = _input.La(1);
					if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 2:
					{
					State = 2362; Match(READ_ONLY_ROUTING_LIST);
					State = 2363; Match(EQUAL);
					{
					State = 2364; Match(LR_BRACKET);
					State = 2375;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,132,_ctx) ) {
					case 1:
						{
						State = 2371;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,131,_ctx);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
							if ( _alt==1 ) {
								{
								{
								State = 2366;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,130,_ctx) ) {
								case 1:
									{
									State = 2365; Match(COMMA);
									}
									break;
								}
								State = 2368; Match(STRING);
								}
								} 
							}
							State = 2373;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,131,_ctx);
						}
						}
						break;

					case 2:
						{
						State = 2374; Match(NONE);
						}
						break;
					}
					State = 2377; Match(RR_BRACKET);
					}
					}
					break;

				case 3:
					{
					State = 2378; Match(SESSION_TIMEOUT);
					State = 2379; Match(EQUAL);
					State = 2380; _localctx.session_timeout = Match(DECIMAL);
					}
					break;
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2383; Match(MODIFY);
				State = 2384; Match(REPLICA);
				State = 2385; Match(ON);
				State = 2386; _localctx.server_instance = Match(STRING);
				State = 2444;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,140,_ctx) ) {
				case 1:
					{
					State = 2387; Match(WITH);
					State = 2388; Match(LR_BRACKET);
					State = 2404;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,134,_ctx) ) {
					case 1:
						{
						State = 2389; Match(ENDPOINT_URL);
						State = 2390; Match(EQUAL);
						State = 2391; Match(STRING);
						}
						break;

					case 2:
						{
						State = 2392; Match(AVAILABILITY_MODE);
						State = 2393; Match(EQUAL);
						State = 2394;
						_la = _input.La(1);
						if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 3:
						{
						State = 2395; Match(FAILOVER_MODE);
						State = 2396; Match(EQUAL);
						State = 2397;
						_la = _input.La(1);
						if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 4:
						{
						State = 2398; Match(SEEDING_MODE);
						State = 2399; Match(EQUAL);
						State = 2400;
						_la = _input.La(1);
						if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 5:
						{
						State = 2401; Match(BACKUP_PRIORITY);
						State = 2402; Match(EQUAL);
						State = 2403; Match(DECIMAL);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 2406; Match(SECONDARY_ROLE);
					State = 2407; Match(LR_BRACKET);
					State = 2416;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,135,_ctx) ) {
					case 1:
						{
						State = 2408; Match(ALLOW_CONNECTIONS);
						State = 2409; Match(EQUAL);
						State = 2410;
						_la = _input.La(1);
						if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 2:
						{
						State = 2411; Match(READ_ONLY_ROUTING_LIST);
						State = 2412; Match(EQUAL);
						{
						State = 2413; Match(LR_BRACKET);
						{
						{
						State = 2414; Match(STRING);
						}
						}
						State = 2415; Match(RR_BRACKET);
						}
						}
						break;
					}
					}
					break;

				case 3:
					{
					State = 2418; Match(PRIMARY_ROLE);
					State = 2419; Match(LR_BRACKET);
					State = 2442;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,139,_ctx) ) {
					case 1:
						{
						State = 2420; Match(ALLOW_CONNECTIONS);
						State = 2421; Match(EQUAL);
						State = 2422;
						_la = _input.La(1);
						if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 2:
						{
						State = 2423; Match(READ_ONLY_ROUTING_LIST);
						State = 2424; Match(EQUAL);
						{
						State = 2425; Match(LR_BRACKET);
						State = 2436;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,138,_ctx) ) {
						case 1:
							{
							State = 2432;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,137,_ctx);
							while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
								if ( _alt==1 ) {
									{
									{
									State = 2427;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,136,_ctx) ) {
									case 1:
										{
										State = 2426; Match(COMMA);
										}
										break;
									}
									State = 2429; Match(STRING);
									}
									} 
								}
								State = 2434;
								_errHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(_input,137,_ctx);
							}
							}
							break;

						case 2:
							{
							State = 2435; Match(NONE);
							}
							break;
						}
						State = 2438; Match(RR_BRACKET);
						}
						}
						break;

					case 3:
						{
						State = 2439; Match(SESSION_TIMEOUT);
						State = 2440; Match(EQUAL);
						State = 2441; _localctx.session_timeout = Match(DECIMAL);
						}
						break;
					}
					}
					break;
				}
				State = 2446; Match(RR_BRACKET);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2447; Match(REMOVE);
				State = 2448; Match(REPLICA);
				State = 2449; Match(ON);
				State = 2450; Match(STRING);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2451; Match(JOIN);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2452; Match(JOIN);
				State = 2453; Match(AVAILABILITY);
				State = 2454; Match(GROUP);
				State = 2455; Match(ON);
				State = 2478;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2457;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,141,_ctx) ) {
						case 1:
							{
							State = 2456; Match(COMMA);
							}
							break;
						}
						State = 2459; _localctx.ag_name = Match(STRING);
						State = 2460; Match(WITH);
						State = 2461; Match(LR_BRACKET);
						{
						State = 2462; Match(LISTENER_URL);
						State = 2463; Match(EQUAL);
						State = 2464; Match(STRING);
						State = 2465; Match(COMMA);
						State = 2466; Match(AVAILABILITY_MODE);
						State = 2467; Match(EQUAL);
						State = 2468;
						_la = _input.La(1);
						if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2469; Match(COMMA);
						State = 2470; Match(FAILOVER_MODE);
						State = 2471; Match(EQUAL);
						State = 2472; Match(MANUAL);
						State = 2473; Match(COMMA);
						State = 2474; Match(SEEDING_MODE);
						State = 2475; Match(EQUAL);
						State = 2476;
						_la = _input.La(1);
						if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2477; Match(RR_BRACKET);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2480;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,142,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2482; Match(MODIFY);
				State = 2483; Match(AVAILABILITY);
				State = 2484; Match(GROUP);
				State = 2485; Match(ON);
				State = 2520;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2487;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,143,_ctx) ) {
						case 1:
							{
							State = 2486; Match(COMMA);
							}
							break;
						}
						State = 2489; _localctx.ag_name_modified = Match(STRING);
						State = 2490; Match(WITH);
						State = 2491; Match(LR_BRACKET);
						{
						State = 2492; Match(LISTENER_URL);
						State = 2493; Match(EQUAL);
						State = 2494; Match(STRING);
						State = 2501;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,145,_ctx) ) {
						case 1:
							{
							State = 2496;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,144,_ctx) ) {
							case 1:
								{
								State = 2495; Match(COMMA);
								}
								break;
							}
							State = 2498; Match(AVAILABILITY_MODE);
							State = 2499; Match(EQUAL);
							State = 2500;
							_la = _input.La(1);
							if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;
						}
						State = 2509;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,147,_ctx) ) {
						case 1:
							{
							State = 2504;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,146,_ctx) ) {
							case 1:
								{
								State = 2503; Match(COMMA);
								}
								break;
							}
							State = 2506; Match(FAILOVER_MODE);
							State = 2507; Match(EQUAL);
							State = 2508; Match(MANUAL);
							}
							break;
						}
						State = 2517;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,149,_ctx) ) {
						case 1:
							{
							State = 2512;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,148,_ctx) ) {
							case 1:
								{
								State = 2511; Match(COMMA);
								}
								break;
							}
							State = 2514; Match(SEEDING_MODE);
							State = 2515; Match(EQUAL);
							State = 2516;
							_la = _input.La(1);
							if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;
						}
						State = 2519; Match(RR_BRACKET);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2522;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,150,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2524; Match(GRANT);
				State = 2525; Match(CREATE);
				State = 2526; Match(ANY);
				State = 2527; Match(DATABASE);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2528; Match(DENY);
				State = 2529; Match(CREATE);
				State = 2530; Match(ANY);
				State = 2531; Match(DATABASE);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2532; Match(FAILOVER);
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2533; Match(FORCE_FAILOVER_ALLOW_DATA_LOSS);
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2534; Match(ADD);
				State = 2535; Match(LISTENER);
				State = 2536; _localctx.listener_name = Match(STRING);
				State = 2537; Match(LR_BRACKET);
				State = 2573;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,155,_ctx) ) {
				case 1:
					{
					State = 2538; Match(WITH);
					State = 2539; Match(DHCP);
					{
					State = 2540; Match(ON);
					State = 2541; Match(LR_BRACKET);
					State = 2542; ip_v4_failover();
					State = 2543; ip_v4_failover();
					State = 2544; Match(RR_BRACKET);
					}
					}
					break;

				case 2:
					{
					State = 2546; Match(WITH);
					State = 2547; Match(IP);
					State = 2548; Match(LR_BRACKET);
					{
					State = 2562;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 2550;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,151,_ctx) ) {
							case 1:
								{
								State = 2549; Match(COMMA);
								}
								break;
							}
							State = 2552; Match(LR_BRACKET);
							State = 2558;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,152,_ctx) ) {
							case 1:
								{
								State = 2553; ip_v4_failover();
								State = 2554; Match(COMMA);
								State = 2555; ip_v4_failover();
								}
								break;

							case 2:
								{
								State = 2557; ip_v6_failover();
								}
								break;
							}
							State = 2560; Match(RR_BRACKET);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 2564;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,153,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					State = 2566; Match(RR_BRACKET);
					State = 2571;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,154,_ctx) ) {
					case 1:
						{
						State = 2567; Match(COMMA);
						State = 2568; Match(PORT);
						State = 2569; Match(EQUAL);
						State = 2570; Match(DECIMAL);
						}
						break;
					}
					}
					}
					break;
				}
				State = 2575; Match(RR_BRACKET);
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2577; Match(MODIFY);
				State = 2578; Match(LISTENER);
				State = 2593;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,157,_ctx) ) {
				case 1:
					{
					State = 2579; Match(ADD);
					State = 2580; Match(IP);
					State = 2581; Match(LR_BRACKET);
					State = 2586;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,156,_ctx) ) {
					case 1:
						{
						State = 2582; ip_v4_failover();
						State = 2583; ip_v4_failover();
						}
						break;

					case 2:
						{
						State = 2585; ip_v6_failover();
						}
						break;
					}
					State = 2588; Match(RR_BRACKET);
					}
					break;

				case 2:
					{
					State = 2590; Match(PORT);
					State = 2591; Match(EQUAL);
					State = 2592; Match(DECIMAL);
					}
					break;
				}
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2595; Match(RESTART);
				State = 2596; Match(LISTENER);
				State = 2597; Match(STRING);
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2598; Match(REMOVE);
				State = 2599; Match(LISTENER);
				State = 2600; Match(STRING);
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2601; Match(OFFLINE);
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2602; Match(WITH);
				State = 2603; Match(LR_BRACKET);
				State = 2604; Match(DTC_SUPPORT);
				State = 2605; Match(EQUAL);
				State = 2606; Match(PER_DB);
				State = 2607; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ip_v4_failoverContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Ip_v4_failoverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ip_v4_failover; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIp_v4_failover(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIp_v4_failover(this);
		}
	}

	[RuleVersion(0)]
	public Ip_v4_failoverContext ip_v4_failover() {
		Ip_v4_failoverContext _localctx = new Ip_v4_failoverContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_ip_v4_failover);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2610; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ip_v6_failoverContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Ip_v6_failoverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ip_v6_failover; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIp_v6_failover(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIp_v6_failover(this);
		}
	}

	[RuleVersion(0)]
	public Ip_v6_failoverContext ip_v6_failover() {
		Ip_v6_failoverContext _localctx = new Ip_v6_failoverContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_ip_v6_failover);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2612; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_broker_priorityContext : ParserRuleContext {
		public Id_Context ConversationPriorityName;
		public IToken RemoteServiceName;
		public IToken PriorityValue;
		public ITerminalNode BROKER() { return GetToken(TSqlParser.BROKER, 0); }
		public ITerminalNode PRIORITY() { return GetToken(TSqlParser.PRIORITY, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode CONTRACT_NAME() { return GetToken(TSqlParser.CONTRACT_NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode LOCAL_SERVICE_NAME() { return GetToken(TSqlParser.LOCAL_SERVICE_NAME, 0); }
		public ITerminalNode REMOTE_SERVICE_NAME() { return GetToken(TSqlParser.REMOTE_SERVICE_NAME, 0); }
		public ITerminalNode PRIORITY_LEVEL() { return GetToken(TSqlParser.PRIORITY_LEVEL, 0); }
		public ITerminalNode[] ANY() { return GetTokens(TSqlParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(TSqlParser.ANY, i);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode DOUBLE_FORWARD_SLASH() { return GetToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0); }
		public Create_or_alter_broker_priorityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_broker_priority; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_broker_priority(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_broker_priority(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_broker_priorityContext create_or_alter_broker_priority() {
		Create_or_alter_broker_priorityContext _localctx = new Create_or_alter_broker_priorityContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_create_or_alter_broker_priority);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2614;
			_la = _input.La(1);
			if ( !(_la==ALTER || _la==CREATE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 2615; Match(BROKER);
			State = 2616; Match(PRIORITY);
			State = 2617; _localctx.ConversationPriorityName = id_();
			State = 2618; Match(FOR);
			State = 2619; Match(CONVERSATION);
			State = 2620; Match(SET);
			State = 2621; Match(LR_BRACKET);
			State = 2631;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,161,_ctx) ) {
			case 1:
				{
				State = 2622; Match(CONTRACT_NAME);
				State = 2623; Match(EQUAL);
				State = 2626;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,159,_ctx) ) {
				case 1:
					{
					{
					State = 2624; id_();
					}
					}
					break;

				case 2:
					{
					State = 2625; Match(ANY);
					}
					break;
				}
				State = 2629;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,160,_ctx) ) {
				case 1:
					{
					State = 2628; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 2645;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,165,_ctx) ) {
			case 1:
				{
				State = 2633; Match(LOCAL_SERVICE_NAME);
				State = 2634; Match(EQUAL);
				State = 2640;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,163,_ctx) ) {
				case 1:
					{
					State = 2636;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,162,_ctx) ) {
					case 1:
						{
						State = 2635; Match(DOUBLE_FORWARD_SLASH);
						}
						break;
					}
					State = 2638; id_();
					}
					break;

				case 2:
					{
					State = 2639; Match(ANY);
					}
					break;
				}
				State = 2643;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,164,_ctx) ) {
				case 1:
					{
					State = 2642; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 2656;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,168,_ctx) ) {
			case 1:
				{
				State = 2647; Match(REMOTE_SERVICE_NAME);
				State = 2648; Match(EQUAL);
				State = 2651;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,166,_ctx) ) {
				case 1:
					{
					State = 2649; _localctx.RemoteServiceName = Match(STRING);
					}
					break;

				case 2:
					{
					State = 2650; Match(ANY);
					}
					break;
				}
				State = 2654;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,167,_ctx) ) {
				case 1:
					{
					State = 2653; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 2664;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,170,_ctx) ) {
			case 1:
				{
				State = 2658; Match(PRIORITY_LEVEL);
				State = 2659; Match(EQUAL);
				State = 2662;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,169,_ctx) ) {
				case 1:
					{
					State = 2660; _localctx.PriorityValue = Match(DECIMAL);
					}
					break;

				case 2:
					{
					State = 2661; Match(DEFAULT);
					}
					break;
				}
				}
				break;
			}
			State = 2666; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_broker_priorityContext : ParserRuleContext {
		public Id_Context ConversationPriorityName;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode BROKER() { return GetToken(TSqlParser.BROKER, 0); }
		public ITerminalNode PRIORITY() { return GetToken(TSqlParser.PRIORITY, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_broker_priorityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_broker_priority; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_broker_priority(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_broker_priority(this);
		}
	}

	[RuleVersion(0)]
	public Drop_broker_priorityContext drop_broker_priority() {
		Drop_broker_priorityContext _localctx = new Drop_broker_priorityContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_drop_broker_priority);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2668; Match(DROP);
			State = 2669; Match(BROKER);
			State = 2670; Match(PRIORITY);
			State = 2671; _localctx.ConversationPriorityName = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_certificateContext : ParserRuleContext {
		public Id_Context certificate_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode PRIVATE_KEY() { return GetToken(TSqlParser.PRIVATE_KEY, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode ACTIVE() { return GetToken(TSqlParser.ACTIVE, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode BEGIN_DIALOG() { return GetToken(TSqlParser.BEGIN_DIALOG, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode[] FILE() { return GetTokens(TSqlParser.FILE); }
		public ITerminalNode FILE(int i) {
			return GetToken(TSqlParser.FILE, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] DECRYPTION() { return GetTokens(TSqlParser.DECRYPTION); }
		public ITerminalNode DECRYPTION(int i) {
			return GetToken(TSqlParser.DECRYPTION, i);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public ITerminalNode[] PASSWORD() { return GetTokens(TSqlParser.PASSWORD); }
		public ITerminalNode PASSWORD(int i) {
			return GetToken(TSqlParser.PASSWORD, i);
		}
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_certificateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_certificate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_certificate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_certificate(this);
		}
	}

	[RuleVersion(0)]
	public Alter_certificateContext alter_certificate() {
		Alter_certificateContext _localctx = new Alter_certificateContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_alter_certificate);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2673; Match(ALTER);
			State = 2674; Match(CERTIFICATE);
			State = 2675; _localctx.certificate_name = id_();
			State = 2715;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,176,_ctx) ) {
			case 1:
				{
				State = 2676; Match(REMOVE);
				State = 2677; Match(PRIVATE_KEY);
				}
				break;

			case 2:
				{
				State = 2678; Match(WITH);
				State = 2679; Match(PRIVATE);
				State = 2680; Match(KEY);
				State = 2681; Match(LR_BRACKET);
				State = 2704;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 2704;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,174,_ctx) ) {
						case 1:
							{
							State = 2682; Match(FILE);
							State = 2683; Match(EQUAL);
							State = 2684; Match(STRING);
							State = 2686;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,171,_ctx) ) {
							case 1:
								{
								State = 2685; Match(COMMA);
								}
								break;
							}
							}
							break;

						case 2:
							{
							State = 2688; Match(DECRYPTION);
							State = 2689; Match(BY);
							State = 2690; Match(PASSWORD);
							State = 2691; Match(EQUAL);
							State = 2692; Match(STRING);
							State = 2694;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,172,_ctx) ) {
							case 1:
								{
								State = 2693; Match(COMMA);
								}
								break;
							}
							}
							break;

						case 3:
							{
							State = 2696; Match(ENCRYPTION);
							State = 2697; Match(BY);
							State = 2698; Match(PASSWORD);
							State = 2699; Match(EQUAL);
							State = 2700; Match(STRING);
							State = 2702;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,173,_ctx) ) {
							case 1:
								{
								State = 2701; Match(COMMA);
								}
								break;
							}
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2706;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,175,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 2708; Match(RR_BRACKET);
				}
				break;

			case 3:
				{
				State = 2709; Match(WITH);
				State = 2710; Match(ACTIVE);
				State = 2711; Match(FOR);
				State = 2712; Match(BEGIN_DIALOG);
				State = 2713; Match(EQUAL);
				State = 2714;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_column_encryption_keyContext : ParserRuleContext {
		public Id_Context column_encryption_key;
		public Id_Context column_master_key_name;
		public IToken algorithm_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode COLUMN_MASTER_KEY() { return GetToken(TSqlParser.COLUMN_MASTER_KEY, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode ENCRYPTED_VALUE() { return GetToken(TSqlParser.ENCRYPTED_VALUE, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Alter_column_encryption_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_column_encryption_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_column_encryption_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_column_encryption_key(this);
		}
	}

	[RuleVersion(0)]
	public Alter_column_encryption_keyContext alter_column_encryption_key() {
		Alter_column_encryption_keyContext _localctx = new Alter_column_encryption_keyContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_alter_column_encryption_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2717; Match(ALTER);
			State = 2718; Match(COLUMN);
			State = 2719; Match(ENCRYPTION);
			State = 2720; Match(KEY);
			State = 2721; _localctx.column_encryption_key = id_();
			State = 2722;
			_la = _input.La(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 2723; Match(VALUE);
			State = 2724; Match(LR_BRACKET);
			State = 2725; Match(COLUMN_MASTER_KEY);
			State = 2726; Match(EQUAL);
			State = 2727; _localctx.column_master_key_name = id_();
			State = 2736;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,177,_ctx) ) {
			case 1:
				{
				State = 2728; Match(COMMA);
				State = 2729; Match(ALGORITHM);
				State = 2730; Match(EQUAL);
				State = 2731; _localctx.algorithm_name = Match(STRING);
				State = 2732; Match(COMMA);
				State = 2733; Match(ENCRYPTED_VALUE);
				State = 2734; Match(EQUAL);
				State = 2735; Match(BINARY);
				}
				break;
			}
			State = 2738; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_column_encryption_keyContext : ParserRuleContext {
		public Id_Context column_encryption_key;
		public Id_Context column_master_key_name;
		public IToken algorithm_name;
		public IToken encrypted_value;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] COLUMN_MASTER_KEY() { return GetTokens(TSqlParser.COLUMN_MASTER_KEY); }
		public ITerminalNode COLUMN_MASTER_KEY(int i) {
			return GetToken(TSqlParser.COLUMN_MASTER_KEY, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] ALGORITHM() { return GetTokens(TSqlParser.ALGORITHM); }
		public ITerminalNode ALGORITHM(int i) {
			return GetToken(TSqlParser.ALGORITHM, i);
		}
		public ITerminalNode[] ENCRYPTED_VALUE() { return GetTokens(TSqlParser.ENCRYPTED_VALUE); }
		public ITerminalNode ENCRYPTED_VALUE(int i) {
			return GetToken(TSqlParser.ENCRYPTED_VALUE, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] BINARY() { return GetTokens(TSqlParser.BINARY); }
		public ITerminalNode BINARY(int i) {
			return GetToken(TSqlParser.BINARY, i);
		}
		public Create_column_encryption_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_column_encryption_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_column_encryption_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_column_encryption_key(this);
		}
	}

	[RuleVersion(0)]
	public Create_column_encryption_keyContext create_column_encryption_key() {
		Create_column_encryption_keyContext _localctx = new Create_column_encryption_keyContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_create_column_encryption_key);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2740; Match(CREATE);
			State = 2741; Match(COLUMN);
			State = 2742; Match(ENCRYPTION);
			State = 2743; Match(KEY);
			State = 2744; _localctx.column_encryption_key = id_();
			State = 2745; Match(WITH);
			State = 2746; Match(VALUES);
			State = 2766;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2747; Match(LR_BRACKET);
					State = 2749;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,178,_ctx) ) {
					case 1:
						{
						State = 2748; Match(COMMA);
						}
						break;
					}
					State = 2751; Match(COLUMN_MASTER_KEY);
					State = 2752; Match(EQUAL);
					State = 2753; _localctx.column_master_key_name = id_();
					State = 2754; Match(COMMA);
					State = 2755; Match(ALGORITHM);
					State = 2756; Match(EQUAL);
					State = 2757; _localctx.algorithm_name = Match(STRING);
					State = 2758; Match(COMMA);
					State = 2759; Match(ENCRYPTED_VALUE);
					State = 2760; Match(EQUAL);
					State = 2761; _localctx.encrypted_value = Match(BINARY);
					State = 2762; Match(RR_BRACKET);
					State = 2764;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,179,_ctx) ) {
					case 1:
						{
						State = 2763; Match(COMMA);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2768;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,180,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_certificateContext : ParserRuleContext {
		public Id_Context certificate_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_certificateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_certificate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_certificate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_certificate(this);
		}
	}

	[RuleVersion(0)]
	public Drop_certificateContext drop_certificate() {
		Drop_certificateContext _localctx = new Drop_certificateContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_drop_certificate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2770; Match(DROP);
			State = 2771; Match(CERTIFICATE);
			State = 2772; _localctx.certificate_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_column_encryption_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_column_encryption_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_column_encryption_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_column_encryption_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_column_encryption_key(this);
		}
	}

	[RuleVersion(0)]
	public Drop_column_encryption_keyContext drop_column_encryption_key() {
		Drop_column_encryption_keyContext _localctx = new Drop_column_encryption_keyContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_drop_column_encryption_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2774; Match(DROP);
			State = 2775; Match(COLUMN);
			State = 2776; Match(ENCRYPTION);
			State = 2777; Match(KEY);
			State = 2778; _localctx.key_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_column_master_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_column_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_column_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_column_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_column_master_key(this);
		}
	}

	[RuleVersion(0)]
	public Drop_column_master_keyContext drop_column_master_key() {
		Drop_column_master_keyContext _localctx = new Drop_column_master_keyContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_drop_column_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2780; Match(DROP);
			State = 2781; Match(COLUMN);
			State = 2782; Match(MASTER);
			State = 2783; Match(KEY);
			State = 2784; _localctx.key_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_contractContext : ParserRuleContext {
		public Id_Context dropped_contract_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_contractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_contract; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_contract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_contract(this);
		}
	}

	[RuleVersion(0)]
	public Drop_contractContext drop_contract() {
		Drop_contractContext _localctx = new Drop_contractContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_drop_contract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2786; Match(DROP);
			State = 2787; Match(CONTRACT);
			State = 2788; _localctx.dropped_contract_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_credentialContext : ParserRuleContext {
		public Id_Context credential_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_credentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_credential; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_credential(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_credential(this);
		}
	}

	[RuleVersion(0)]
	public Drop_credentialContext drop_credential() {
		Drop_credentialContext _localctx = new Drop_credentialContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_drop_credential);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2790; Match(DROP);
			State = 2791; Match(CREDENTIAL);
			State = 2792; _localctx.credential_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_cryptograhic_providerContext : ParserRuleContext {
		public Id_Context provider_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_cryptograhic_providerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_cryptograhic_provider; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_cryptograhic_provider(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_cryptograhic_provider(this);
		}
	}

	[RuleVersion(0)]
	public Drop_cryptograhic_providerContext drop_cryptograhic_provider() {
		Drop_cryptograhic_providerContext _localctx = new Drop_cryptograhic_providerContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_drop_cryptograhic_provider);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2794; Match(DROP);
			State = 2795; Match(CRYPTOGRAPHIC);
			State = 2796; Match(PROVIDER);
			State = 2797; _localctx.provider_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_databaseContext : ParserRuleContext {
		public Id_Context database_name_or_database_snapshot_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_database(this);
		}
	}

	[RuleVersion(0)]
	public Drop_databaseContext drop_database() {
		Drop_databaseContext _localctx = new Drop_databaseContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_drop_database);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2799; Match(DROP);
			State = 2800; Match(DATABASE);
			State = 2803;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,181,_ctx) ) {
			case 1:
				{
				State = 2801; Match(IF);
				State = 2802; Match(EXISTS);
				}
				break;
			}
			State = 2809;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2806;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,182,_ctx) ) {
					case 1:
						{
						State = 2805; Match(COMMA);
						}
						break;
					}
					State = 2808; _localctx.database_name_or_database_snapshot_name = id_();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2811;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,183,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_database_audit_specificationContext : ParserRuleContext {
		public Id_Context audit_specification_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_database_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_database_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_database_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_database_audit_specification(this);
		}
	}

	[RuleVersion(0)]
	public Drop_database_audit_specificationContext drop_database_audit_specification() {
		Drop_database_audit_specificationContext _localctx = new Drop_database_audit_specificationContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_drop_database_audit_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2813; Match(DROP);
			State = 2814; Match(DATABASE);
			State = 2815; Match(AUDIT);
			State = 2816; Match(SPECIFICATION);
			State = 2817; _localctx.audit_specification_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_database_encryption_keyContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Drop_database_encryption_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_database_encryption_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_database_encryption_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_database_encryption_key(this);
		}
	}

	[RuleVersion(0)]
	public Drop_database_encryption_keyContext drop_database_encryption_key() {
		Drop_database_encryption_keyContext _localctx = new Drop_database_encryption_keyContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_drop_database_encryption_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2819; Match(DROP);
			State = 2820; Match(DATABASE);
			State = 2821; Match(ENCRYPTION);
			State = 2822; Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_database_scoped_credentialContext : ParserRuleContext {
		public Id_Context credential_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode SCOPED() { return GetToken(TSqlParser.SCOPED, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_database_scoped_credentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_database_scoped_credential; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_database_scoped_credential(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_database_scoped_credential(this);
		}
	}

	[RuleVersion(0)]
	public Drop_database_scoped_credentialContext drop_database_scoped_credential() {
		Drop_database_scoped_credentialContext _localctx = new Drop_database_scoped_credentialContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_drop_database_scoped_credential);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2824; Match(DROP);
			State = 2825; Match(DATABASE);
			State = 2826; Match(SCOPED);
			State = 2827; Match(CREDENTIAL);
			State = 2828; _localctx.credential_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_defaultContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context default_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_default; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_default(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_default(this);
		}
	}

	[RuleVersion(0)]
	public Drop_defaultContext drop_default() {
		Drop_defaultContext _localctx = new Drop_defaultContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_drop_default);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2830; Match(DROP);
			State = 2831; Match(DEFAULT);
			State = 2834;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,184,_ctx) ) {
			case 1:
				{
				State = 2832; Match(IF);
				State = 2833; Match(EXISTS);
				}
				break;
			}
			{
			State = 2837;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,185,_ctx) ) {
			case 1:
				{
				State = 2836; Match(COMMA);
				}
				break;
			}
			State = 2842;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,186,_ctx) ) {
			case 1:
				{
				State = 2839; _localctx.schema_name = id_();
				State = 2840; Match(DOT);
				}
				break;
			}
			State = 2844; _localctx.default_name = id_();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_endpointContext : ParserRuleContext {
		public Id_Context endPointName;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_endpointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_endpoint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_endpoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_endpoint(this);
		}
	}

	[RuleVersion(0)]
	public Drop_endpointContext drop_endpoint() {
		Drop_endpointContext _localctx = new Drop_endpointContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_drop_endpoint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2846; Match(DROP);
			State = 2847; Match(ENDPOINT);
			State = 2848; _localctx.endPointName = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_data_sourceContext : ParserRuleContext {
		public Id_Context external_data_source_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_external_data_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_data_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_data_source(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_data_source(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_data_sourceContext drop_external_data_source() {
		Drop_external_data_sourceContext _localctx = new Drop_external_data_sourceContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_drop_external_data_source);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2850; Match(DROP);
			State = 2851; Match(EXTERNAL);
			State = 2852; Match(DATA);
			State = 2853; Match(SOURCE);
			State = 2854; _localctx.external_data_source_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_file_formatContext : ParserRuleContext {
		public Id_Context external_file_format_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode FORMAT() { return GetToken(TSqlParser.FORMAT, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_external_file_formatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_file_format; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_file_format(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_file_format(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_file_formatContext drop_external_file_format() {
		Drop_external_file_formatContext _localctx = new Drop_external_file_formatContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_drop_external_file_format);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2856; Match(DROP);
			State = 2857; Match(EXTERNAL);
			State = 2858; Match(FILE);
			State = 2859; Match(FORMAT);
			State = 2860; _localctx.external_file_format_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_libraryContext : ParserRuleContext {
		public Id_Context library_name;
		public Id_Context owner_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Drop_external_libraryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_library; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_library(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_library(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_libraryContext drop_external_library() {
		Drop_external_libraryContext _localctx = new Drop_external_libraryContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_drop_external_library);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2862; Match(DROP);
			State = 2863; Match(EXTERNAL);
			State = 2864; Match(LIBRARY);
			State = 2865; _localctx.library_name = id_();
			State = 2868;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,187,_ctx) ) {
			case 1:
				{
				State = 2866; Match(AUTHORIZATION);
				State = 2867; _localctx.owner_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_resource_poolContext : ParserRuleContext {
		public Id_Context pool_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_external_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_resource_pool(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_resource_poolContext drop_external_resource_pool() {
		Drop_external_resource_poolContext _localctx = new Drop_external_resource_poolContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_drop_external_resource_pool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2870; Match(DROP);
			State = 2871; Match(EXTERNAL);
			State = 2872; Match(RESOURCE);
			State = 2873; Match(POOL);
			State = 2874; _localctx.pool_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_tableContext : ParserRuleContext {
		public Id_Context database_name;
		public Id_Context schema_name;
		public Id_Context table;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Drop_external_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_table(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_tableContext drop_external_table() {
		Drop_external_tableContext _localctx = new Drop_external_tableContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_drop_external_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2876; Match(DROP);
			State = 2877; Match(EXTERNAL);
			State = 2878; Match(TABLE);
			State = 2882;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				State = 2879; _localctx.database_name = id_();
				State = 2880; Match(DOT);
				}
				break;
			}
			State = 2887;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,189,_ctx) ) {
			case 1:
				{
				State = 2884; _localctx.schema_name = id_();
				State = 2885; Match(DOT);
				}
				break;
			}
			State = 2889; _localctx.table = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_event_notificationsContext : ParserRuleContext {
		public Id_Context notification_name;
		public Id_Context queue_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_event_notificationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_event_notifications; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_event_notifications(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_event_notifications(this);
		}
	}

	[RuleVersion(0)]
	public Drop_event_notificationsContext drop_event_notifications() {
		Drop_event_notificationsContext _localctx = new Drop_event_notificationsContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_drop_event_notifications);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2891; Match(DROP);
			State = 2892; Match(EVENT);
			State = 2893; Match(NOTIFICATION);
			State = 2898;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2895;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,190,_ctx) ) {
					case 1:
						{
						State = 2894; Match(COMMA);
						}
						break;
					}
					State = 2897; _localctx.notification_name = id_();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2900;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,191,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 2902; Match(ON);
			State = 2907;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,192,_ctx) ) {
			case 1:
				{
				State = 2903; Match(SERVER);
				}
				break;

			case 2:
				{
				State = 2904; Match(DATABASE);
				}
				break;

			case 3:
				{
				State = 2905; Match(QUEUE);
				State = 2906; _localctx.queue_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_event_sessionContext : ParserRuleContext {
		public Id_Context event_session_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_event_sessionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_event_session; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_event_session(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_event_session(this);
		}
	}

	[RuleVersion(0)]
	public Drop_event_sessionContext drop_event_session() {
		Drop_event_sessionContext _localctx = new Drop_event_sessionContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_drop_event_session);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2909; Match(DROP);
			State = 2910; Match(EVENT);
			State = 2911; Match(SESSION);
			State = 2912; _localctx.event_session_name = id_();
			State = 2913; Match(ON);
			State = 2914; Match(SERVER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_fulltext_catalogContext : ParserRuleContext {
		public Id_Context catalog_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_fulltext_catalogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_fulltext_catalog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_fulltext_catalog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_fulltext_catalog(this);
		}
	}

	[RuleVersion(0)]
	public Drop_fulltext_catalogContext drop_fulltext_catalog() {
		Drop_fulltext_catalogContext _localctx = new Drop_fulltext_catalogContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_drop_fulltext_catalog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2916; Match(DROP);
			State = 2917; Match(FULLTEXT);
			State = 2918; Match(CATALOG);
			State = 2919; _localctx.catalog_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_fulltext_indexContext : ParserRuleContext {
		public Id_Context schema;
		public Id_Context table;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_fulltext_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_fulltext_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_fulltext_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_fulltext_index(this);
		}
	}

	[RuleVersion(0)]
	public Drop_fulltext_indexContext drop_fulltext_index() {
		Drop_fulltext_indexContext _localctx = new Drop_fulltext_indexContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_drop_fulltext_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2921; Match(DROP);
			State = 2922; Match(FULLTEXT);
			State = 2923; Match(INDEX);
			State = 2924; Match(ON);
			State = 2928;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,193,_ctx) ) {
			case 1:
				{
				State = 2925; _localctx.schema = id_();
				State = 2926; Match(DOT);
				}
				break;
			}
			State = 2930; _localctx.table = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_fulltext_stoplistContext : ParserRuleContext {
		public Id_Context stoplist_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_fulltext_stoplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_fulltext_stoplist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_fulltext_stoplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_fulltext_stoplist(this);
		}
	}

	[RuleVersion(0)]
	public Drop_fulltext_stoplistContext drop_fulltext_stoplist() {
		Drop_fulltext_stoplistContext _localctx = new Drop_fulltext_stoplistContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_drop_fulltext_stoplist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2932; Match(DROP);
			State = 2933; Match(FULLTEXT);
			State = 2934; Match(STOPLIST);
			State = 2935; _localctx.stoplist_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_loginContext : ParserRuleContext {
		public Id_Context login_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_loginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_login; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_login(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_login(this);
		}
	}

	[RuleVersion(0)]
	public Drop_loginContext drop_login() {
		Drop_loginContext _localctx = new Drop_loginContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_drop_login);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2937; Match(DROP);
			State = 2938; Match(LOGIN);
			State = 2939; _localctx.login_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_master_keyContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Drop_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_master_key(this);
		}
	}

	[RuleVersion(0)]
	public Drop_master_keyContext drop_master_key() {
		Drop_master_keyContext _localctx = new Drop_master_keyContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_drop_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2941; Match(DROP);
			State = 2942; Match(MASTER);
			State = 2943; Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_message_typeContext : ParserRuleContext {
		public Id_Context message_type_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_message_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_message_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_message_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_message_type(this);
		}
	}

	[RuleVersion(0)]
	public Drop_message_typeContext drop_message_type() {
		Drop_message_typeContext _localctx = new Drop_message_typeContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_drop_message_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2945; Match(DROP);
			State = 2946; Match(MESSAGE);
			State = 2947; Match(TYPE);
			State = 2948; _localctx.message_type_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_partition_functionContext : ParserRuleContext {
		public Id_Context partition_function_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_partition_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_partition_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_partition_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_partition_function(this);
		}
	}

	[RuleVersion(0)]
	public Drop_partition_functionContext drop_partition_function() {
		Drop_partition_functionContext _localctx = new Drop_partition_functionContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_drop_partition_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2950; Match(DROP);
			State = 2951; Match(PARTITION);
			State = 2952; Match(FUNCTION);
			State = 2953; _localctx.partition_function_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_partition_schemeContext : ParserRuleContext {
		public Id_Context partition_scheme_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_partition_schemeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_partition_scheme; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_partition_scheme(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_partition_scheme(this);
		}
	}

	[RuleVersion(0)]
	public Drop_partition_schemeContext drop_partition_scheme() {
		Drop_partition_schemeContext _localctx = new Drop_partition_schemeContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_drop_partition_scheme);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2955; Match(DROP);
			State = 2956; Match(PARTITION);
			State = 2957; Match(SCHEME);
			State = 2958; _localctx.partition_scheme_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_queueContext : ParserRuleContext {
		public Id_Context database_name;
		public Id_Context schema_name;
		public Id_Context queue_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Drop_queueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_queue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_queue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_queue(this);
		}
	}

	[RuleVersion(0)]
	public Drop_queueContext drop_queue() {
		Drop_queueContext _localctx = new Drop_queueContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_drop_queue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2960; Match(DROP);
			State = 2961; Match(QUEUE);
			State = 2965;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,194,_ctx) ) {
			case 1:
				{
				State = 2962; _localctx.database_name = id_();
				State = 2963; Match(DOT);
				}
				break;
			}
			State = 2970;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,195,_ctx) ) {
			case 1:
				{
				State = 2967; _localctx.schema_name = id_();
				State = 2968; Match(DOT);
				}
				break;
			}
			State = 2972; _localctx.queue_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_remote_service_bindingContext : ParserRuleContext {
		public Id_Context binding_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_remote_service_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_remote_service_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_remote_service_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_remote_service_binding(this);
		}
	}

	[RuleVersion(0)]
	public Drop_remote_service_bindingContext drop_remote_service_binding() {
		Drop_remote_service_bindingContext _localctx = new Drop_remote_service_bindingContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_drop_remote_service_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2974; Match(DROP);
			State = 2975; Match(REMOTE);
			State = 2976; Match(SERVICE);
			State = 2977; Match(BINDING);
			State = 2978; _localctx.binding_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_resource_poolContext : ParserRuleContext {
		public Id_Context pool_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_resource_pool(this);
		}
	}

	[RuleVersion(0)]
	public Drop_resource_poolContext drop_resource_pool() {
		Drop_resource_poolContext _localctx = new Drop_resource_poolContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_drop_resource_pool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2980; Match(DROP);
			State = 2981; Match(RESOURCE);
			State = 2982; Match(POOL);
			State = 2983; _localctx.pool_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_db_roleContext : ParserRuleContext {
		public Id_Context role_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_db_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_db_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_db_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_db_role(this);
		}
	}

	[RuleVersion(0)]
	public Drop_db_roleContext drop_db_role() {
		Drop_db_roleContext _localctx = new Drop_db_roleContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_drop_db_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2985; Match(DROP);
			State = 2986; Match(ROLE);
			State = 2989;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				State = 2987; Match(IF);
				State = 2988; Match(EXISTS);
				}
				break;
			}
			State = 2991; _localctx.role_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_routeContext : ParserRuleContext {
		public Id_Context route_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_routeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_route; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_route(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_route(this);
		}
	}

	[RuleVersion(0)]
	public Drop_routeContext drop_route() {
		Drop_routeContext _localctx = new Drop_routeContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_drop_route);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2993; Match(DROP);
			State = 2994; Match(ROUTE);
			State = 2995; _localctx.route_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_ruleContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context rule_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode RULE() { return GetToken(TSqlParser.RULE, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_rule; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_rule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_rule(this);
		}
	}

	[RuleVersion(0)]
	public Drop_ruleContext drop_rule() {
		Drop_ruleContext _localctx = new Drop_ruleContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_drop_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2997; Match(DROP);
			State = 2998; Match(RULE);
			State = 3001;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,197,_ctx) ) {
			case 1:
				{
				State = 2999; Match(IF);
				State = 3000; Match(EXISTS);
				}
				break;
			}
			State = 3012;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,200,_ctx) ) {
			case 1:
				{
				State = 3004;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,198,_ctx) ) {
				case 1:
					{
					State = 3003; Match(COMMA);
					}
					break;
				}
				State = 3009;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,199,_ctx) ) {
				case 1:
					{
					State = 3006; _localctx.schema_name = id_();
					State = 3007; Match(DOT);
					}
					break;
				}
				State = 3011; _localctx.rule_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_schemaContext : ParserRuleContext {
		public Id_Context schema_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_schema(this);
		}
	}

	[RuleVersion(0)]
	public Drop_schemaContext drop_schema() {
		Drop_schemaContext _localctx = new Drop_schemaContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_drop_schema);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3014; Match(DROP);
			State = 3015; Match(SCHEMA);
			State = 3018;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,201,_ctx) ) {
			case 1:
				{
				State = 3016; Match(IF);
				State = 3017; Match(EXISTS);
				}
				break;
			}
			State = 3020; _localctx.schema_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_search_property_listContext : ParserRuleContext {
		public Id_Context property_list_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_search_property_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_search_property_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_search_property_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_search_property_list(this);
		}
	}

	[RuleVersion(0)]
	public Drop_search_property_listContext drop_search_property_list() {
		Drop_search_property_listContext _localctx = new Drop_search_property_listContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_drop_search_property_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3022; Match(DROP);
			State = 3023; Match(SEARCH);
			State = 3024; Match(PROPERTY);
			State = 3025; Match(LIST);
			State = 3026; _localctx.property_list_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_security_policyContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context security_policy_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SECURITY() { return GetToken(TSqlParser.SECURITY, 0); }
		public ITerminalNode POLICY() { return GetToken(TSqlParser.POLICY, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_security_policyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_security_policy; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_security_policy(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_security_policy(this);
		}
	}

	[RuleVersion(0)]
	public Drop_security_policyContext drop_security_policy() {
		Drop_security_policyContext _localctx = new Drop_security_policyContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_drop_security_policy);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3028; Match(DROP);
			State = 3029; Match(SECURITY);
			State = 3030; Match(POLICY);
			State = 3033;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,202,_ctx) ) {
			case 1:
				{
				State = 3031; Match(IF);
				State = 3032; Match(EXISTS);
				}
				break;
			}
			State = 3038;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,203,_ctx) ) {
			case 1:
				{
				State = 3035; _localctx.schema_name = id_();
				State = 3036; Match(DOT);
				}
				break;
			}
			State = 3040; _localctx.security_policy_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_sequenceContext : ParserRuleContext {
		public Id_Context database_name;
		public Id_Context schema_name;
		public Id_Context sequence_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_sequence; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_sequence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_sequence(this);
		}
	}

	[RuleVersion(0)]
	public Drop_sequenceContext drop_sequence() {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_drop_sequence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3042; Match(DROP);
			State = 3043; Match(SEQUENCE);
			State = 3046;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,204,_ctx) ) {
			case 1:
				{
				State = 3044; Match(IF);
				State = 3045; Match(EXISTS);
				}
				break;
			}
			State = 3062;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,208,_ctx) ) {
			case 1:
				{
				State = 3049;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,205,_ctx) ) {
				case 1:
					{
					State = 3048; Match(COMMA);
					}
					break;
				}
				State = 3054;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,206,_ctx) ) {
				case 1:
					{
					State = 3051; _localctx.database_name = id_();
					State = 3052; Match(DOT);
					}
					break;
				}
				State = 3059;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,207,_ctx) ) {
				case 1:
					{
					State = 3056; _localctx.schema_name = id_();
					State = 3057; Match(DOT);
					}
					break;
				}
				State = 3061; _localctx.sequence_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_server_auditContext : ParserRuleContext {
		public Id_Context audit_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_server_auditContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_server_audit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_server_audit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_server_audit(this);
		}
	}

	[RuleVersion(0)]
	public Drop_server_auditContext drop_server_audit() {
		Drop_server_auditContext _localctx = new Drop_server_auditContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_drop_server_audit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3064; Match(DROP);
			State = 3065; Match(SERVER);
			State = 3066; Match(AUDIT);
			State = 3067; _localctx.audit_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_server_audit_specificationContext : ParserRuleContext {
		public Id_Context audit_specification_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_server_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_server_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_server_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_server_audit_specification(this);
		}
	}

	[RuleVersion(0)]
	public Drop_server_audit_specificationContext drop_server_audit_specification() {
		Drop_server_audit_specificationContext _localctx = new Drop_server_audit_specificationContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_drop_server_audit_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3069; Match(DROP);
			State = 3070; Match(SERVER);
			State = 3071; Match(AUDIT);
			State = 3072; Match(SPECIFICATION);
			State = 3073; _localctx.audit_specification_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_server_roleContext : ParserRuleContext {
		public Id_Context role_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_server_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_server_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_server_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_server_role(this);
		}
	}

	[RuleVersion(0)]
	public Drop_server_roleContext drop_server_role() {
		Drop_server_roleContext _localctx = new Drop_server_roleContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_drop_server_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3075; Match(DROP);
			State = 3076; Match(SERVER);
			State = 3077; Match(ROLE);
			State = 3078; _localctx.role_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_serviceContext : ParserRuleContext {
		public Id_Context dropped_service_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_serviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_service; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_service(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_service(this);
		}
	}

	[RuleVersion(0)]
	public Drop_serviceContext drop_service() {
		Drop_serviceContext _localctx = new Drop_serviceContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_drop_service);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3080; Match(DROP);
			State = 3081; Match(SERVICE);
			State = 3082; _localctx.dropped_service_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_signatureContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context module_name;
		public Id_Context cert_name;
		public Id_Context Asym_key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SIGNATURE() { return GetToken(TSqlParser.SIGNATURE, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode COUNTER() { return GetToken(TSqlParser.COUNTER, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode[] CERTIFICATE() { return GetTokens(TSqlParser.CERTIFICATE); }
		public ITerminalNode CERTIFICATE(int i) {
			return GetToken(TSqlParser.CERTIFICATE, i);
		}
		public ITerminalNode[] ASYMMETRIC() { return GetTokens(TSqlParser.ASYMMETRIC); }
		public ITerminalNode ASYMMETRIC(int i) {
			return GetToken(TSqlParser.ASYMMETRIC, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_signature(this);
		}
	}

	[RuleVersion(0)]
	public Drop_signatureContext drop_signature() {
		Drop_signatureContext _localctx = new Drop_signatureContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_drop_signature);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3084; Match(DROP);
			State = 3086;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,209,_ctx) ) {
			case 1:
				{
				State = 3085; Match(COUNTER);
				}
				break;
			}
			State = 3088; Match(SIGNATURE);
			State = 3089; Match(FROM);
			State = 3093;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,210,_ctx) ) {
			case 1:
				{
				State = 3090; _localctx.schema_name = id_();
				State = 3091; Match(DOT);
				}
				break;
			}
			State = 3095; _localctx.module_name = id_();
			State = 3096; Match(BY);
			State = 3108;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 3108;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,213,_ctx) ) {
					case 1:
						{
						State = 3098;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,211,_ctx) ) {
						case 1:
							{
							State = 3097; Match(COMMA);
							}
							break;
						}
						State = 3100; Match(CERTIFICATE);
						State = 3101; _localctx.cert_name = id_();
						}
						break;

					case 2:
						{
						State = 3103;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,212,_ctx) ) {
						case 1:
							{
							State = 3102; Match(COMMA);
							}
							break;
						}
						State = 3105; Match(ASYMMETRIC);
						State = 3106; Match(KEY);
						State = 3107; _localctx.Asym_key_name = id_();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3110;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,214,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_statistics_name_azure_dw_and_pdwContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context object_name;
		public Id_Context statistics_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Drop_statistics_name_azure_dw_and_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_statistics_name_azure_dw_and_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_statistics_name_azure_dw_and_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_statistics_name_azure_dw_and_pdw(this);
		}
	}

	[RuleVersion(0)]
	public Drop_statistics_name_azure_dw_and_pdwContext drop_statistics_name_azure_dw_and_pdw() {
		Drop_statistics_name_azure_dw_and_pdwContext _localctx = new Drop_statistics_name_azure_dw_and_pdwContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_drop_statistics_name_azure_dw_and_pdw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3112; Match(DROP);
			State = 3113; Match(STATISTICS);
			State = 3117;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,215,_ctx) ) {
			case 1:
				{
				State = 3114; _localctx.schema_name = id_();
				State = 3115; Match(DOT);
				}
				break;
			}
			State = 3119; _localctx.object_name = id_();
			State = 3120; Match(DOT);
			State = 3121; _localctx.statistics_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_symmetric_keyContext : ParserRuleContext {
		public Id_Context symmetric_key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Drop_symmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_symmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_symmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_symmetric_key(this);
		}
	}

	[RuleVersion(0)]
	public Drop_symmetric_keyContext drop_symmetric_key() {
		Drop_symmetric_keyContext _localctx = new Drop_symmetric_keyContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_drop_symmetric_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3123; Match(DROP);
			State = 3124; Match(SYMMETRIC);
			State = 3125; Match(KEY);
			State = 3126; _localctx.symmetric_key_name = id_();
			State = 3130;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,216,_ctx) ) {
			case 1:
				{
				State = 3127; Match(REMOVE);
				State = 3128; Match(PROVIDER);
				State = 3129; Match(KEY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_synonymContext : ParserRuleContext {
		public Id_Context schema;
		public Id_Context synonym_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SYNONYM() { return GetToken(TSqlParser.SYNONYM, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_synonymContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_synonym; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_synonym(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_synonym(this);
		}
	}

	[RuleVersion(0)]
	public Drop_synonymContext drop_synonym() {
		Drop_synonymContext _localctx = new Drop_synonymContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_drop_synonym);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3132; Match(DROP);
			State = 3133; Match(SYNONYM);
			State = 3136;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,217,_ctx) ) {
			case 1:
				{
				State = 3134; Match(IF);
				State = 3135; Match(EXISTS);
				}
				break;
			}
			State = 3141;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,218,_ctx) ) {
			case 1:
				{
				State = 3138; _localctx.schema = id_();
				State = 3139; Match(DOT);
				}
				break;
			}
			State = 3143; _localctx.synonym_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_userContext : ParserRuleContext {
		public Id_Context user_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_userContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_user; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_user(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_user(this);
		}
	}

	[RuleVersion(0)]
	public Drop_userContext drop_user() {
		Drop_userContext _localctx = new Drop_userContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_drop_user);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3145; Match(DROP);
			State = 3146; Match(USER);
			State = 3149;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,219,_ctx) ) {
			case 1:
				{
				State = 3147; Match(IF);
				State = 3148; Match(EXISTS);
				}
				break;
			}
			State = 3151; _localctx.user_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_workload_groupContext : ParserRuleContext {
		public Id_Context group_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode WORKLOAD() { return GetToken(TSqlParser.WORKLOAD, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_workload_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_workload_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_workload_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_workload_group(this);
		}
	}

	[RuleVersion(0)]
	public Drop_workload_groupContext drop_workload_group() {
		Drop_workload_groupContext _localctx = new Drop_workload_groupContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_drop_workload_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3153; Match(DROP);
			State = 3154; Match(WORKLOAD);
			State = 3155; Match(GROUP);
			State = 3156; _localctx.group_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_xml_schema_collectionContext : ParserRuleContext {
		public Id_Context relational_schema;
		public Id_Context sql_identifier;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_xml_schema_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_xml_schema_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_xml_schema_collection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_xml_schema_collection(this);
		}
	}

	[RuleVersion(0)]
	public Drop_xml_schema_collectionContext drop_xml_schema_collection() {
		Drop_xml_schema_collectionContext _localctx = new Drop_xml_schema_collectionContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_drop_xml_schema_collection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3158; Match(DROP);
			State = 3159; Match(XML);
			State = 3160; Match(SCHEMA);
			State = 3161; Match(COLLECTION);
			State = 3165;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,220,_ctx) ) {
			case 1:
				{
				State = 3162; _localctx.relational_schema = id_();
				State = 3163; Match(DOT);
				}
				break;
			}
			State = 3167; _localctx.sql_identifier = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Disable_triggerContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context trigger_name;
		public Id_Context schema_id;
		public Id_Context object_name;
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Disable_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disable_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDisable_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDisable_trigger(this);
		}
	}

	[RuleVersion(0)]
	public Disable_triggerContext disable_trigger() {
		Disable_triggerContext _localctx = new Disable_triggerContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_disable_trigger);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3169; Match(DISABLE);
			State = 3170; Match(TRIGGER);
			State = 3185;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,224,_ctx) ) {
			case 1:
				{
				State = 3180;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3172;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,221,_ctx) ) {
						case 1:
							{
							State = 3171; Match(COMMA);
							}
							break;
						}
						State = 3177;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,222,_ctx) ) {
						case 1:
							{
							State = 3174; _localctx.schema_name = id_();
							State = 3175; Match(DOT);
							}
							break;
						}
						State = 3179; _localctx.trigger_name = id_();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3182;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,223,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				{
				State = 3184; Match(ALL);
				}
				break;
			}
			State = 3187; Match(ON);
			State = 3197;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,226,_ctx) ) {
			case 1:
				{
				State = 3191;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,225,_ctx) ) {
				case 1:
					{
					State = 3188; _localctx.schema_id = id_();
					State = 3189; Match(DOT);
					}
					break;
				}
				State = 3193; _localctx.object_name = id_();
				}
				break;

			case 2:
				{
				State = 3194; Match(DATABASE);
				}
				break;

			case 3:
				{
				State = 3195; Match(ALL);
				State = 3196; Match(SERVER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enable_triggerContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context trigger_name;
		public Id_Context schema_id;
		public Id_Context object_name;
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Enable_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enable_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEnable_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEnable_trigger(this);
		}
	}

	[RuleVersion(0)]
	public Enable_triggerContext enable_trigger() {
		Enable_triggerContext _localctx = new Enable_triggerContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_enable_trigger);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3199; Match(ENABLE);
			State = 3200; Match(TRIGGER);
			State = 3215;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,230,_ctx) ) {
			case 1:
				{
				State = 3210;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3202;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,227,_ctx) ) {
						case 1:
							{
							State = 3201; Match(COMMA);
							}
							break;
						}
						State = 3207;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,228,_ctx) ) {
						case 1:
							{
							State = 3204; _localctx.schema_name = id_();
							State = 3205; Match(DOT);
							}
							break;
						}
						State = 3209; _localctx.trigger_name = id_();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3212;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,229,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				{
				State = 3214; Match(ALL);
				}
				break;
			}
			State = 3217; Match(ON);
			State = 3227;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,232,_ctx) ) {
			case 1:
				{
				State = 3221;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,231,_ctx) ) {
				case 1:
					{
					State = 3218; _localctx.schema_id = id_();
					State = 3219; Match(DOT);
					}
					break;
				}
				State = 3223; _localctx.object_name = id_();
				}
				break;

			case 2:
				{
				State = 3224; Match(DATABASE);
				}
				break;

			case 3:
				{
				State = 3225; Match(ALL);
				State = 3226; Match(SERVER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lock_tableContext : ParserRuleContext {
		public IToken seconds;
		public ITerminalNode LOCK() { return GetToken(TSqlParser.LOCK, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public ITerminalNode MODE() { return GetToken(TSqlParser.MODE, 0); }
		public ITerminalNode SHARE() { return GetToken(TSqlParser.SHARE, 0); }
		public ITerminalNode EXCLUSIVE() { return GetToken(TSqlParser.EXCLUSIVE, 0); }
		public ITerminalNode WAIT() { return GetToken(TSqlParser.WAIT, 0); }
		public ITerminalNode NOWAIT() { return GetToken(TSqlParser.NOWAIT, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Lock_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLock_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLock_table(this);
		}
	}

	[RuleVersion(0)]
	public Lock_tableContext lock_table() {
		Lock_tableContext _localctx = new Lock_tableContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_lock_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3229; Match(LOCK);
			State = 3230; Match(TABLE);
			State = 3231; table_name();
			State = 3232; Match(IN);
			State = 3233;
			_la = _input.La(1);
			if ( !(_la==EXCLUSIVE || _la==SHARE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 3234; Match(MODE);
			State = 3238;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,233,_ctx) ) {
			case 1:
				{
				State = 3235; Match(WAIT);
				State = 3236; _localctx.seconds = Match(DECIMAL);
				}
				break;

			case 2:
				{
				State = 3237; Match(NOWAIT);
				}
				break;
			}
			State = 3241;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,234,_ctx) ) {
			case 1:
				{
				State = 3240; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Truncate_tableContext : ParserRuleContext {
		public ITerminalNode TRUNCATE() { return GetToken(TSqlParser.TRUNCATE, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode PARTITIONS() { return GetToken(TSqlParser.PARTITIONS, 0); }
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Truncate_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncate_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTruncate_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTruncate_table(this);
		}
	}

	[RuleVersion(0)]
	public Truncate_tableContext truncate_table() {
		Truncate_tableContext _localctx = new Truncate_tableContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_truncate_table);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3243; Match(TRUNCATE);
			State = 3244; Match(TABLE);
			State = 3245; table_name();
			State = 3265;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,238,_ctx) ) {
			case 1:
				{
				State = 3246; Match(WITH);
				State = 3247; Match(LR_BRACKET);
				State = 3248; Match(PARTITIONS);
				State = 3249; Match(LR_BRACKET);
				State = 3259;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3251;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,235,_ctx) ) {
						case 1:
							{
							State = 3250; Match(COMMA);
							}
							break;
						}
						State = 3257;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,236,_ctx) ) {
						case 1:
							{
							State = 3253; Match(DECIMAL);
							}
							break;

						case 2:
							{
							State = 3254; Match(DECIMAL);
							State = 3255; Match(TO);
							State = 3256; Match(DECIMAL);
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3261;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,237,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 3263; Match(RR_BRACKET);
				State = 3264; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_column_master_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public IToken key_store_provider_name;
		public IToken key_path;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode KEY_STORE_PROVIDER_NAME() { return GetToken(TSqlParser.KEY_STORE_PROVIDER_NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode KEY_PATH() { return GetToken(TSqlParser.KEY_PATH, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Create_column_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_column_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_column_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_column_master_key(this);
		}
	}

	[RuleVersion(0)]
	public Create_column_master_keyContext create_column_master_key() {
		Create_column_master_keyContext _localctx = new Create_column_master_keyContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_create_column_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3267; Match(CREATE);
			State = 3268; Match(COLUMN);
			State = 3269; Match(MASTER);
			State = 3270; Match(KEY);
			State = 3271; _localctx.key_name = id_();
			State = 3272; Match(WITH);
			State = 3273; Match(LR_BRACKET);
			State = 3274; Match(KEY_STORE_PROVIDER_NAME);
			State = 3275; Match(EQUAL);
			State = 3276; _localctx.key_store_provider_name = Match(STRING);
			State = 3277; Match(COMMA);
			State = 3278; Match(KEY_PATH);
			State = 3279; Match(EQUAL);
			State = 3280; _localctx.key_path = Match(STRING);
			State = 3281; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_credentialContext : ParserRuleContext {
		public Id_Context credential_name;
		public IToken identity_name;
		public IToken secret;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode SECRET() { return GetToken(TSqlParser.SECRET, 0); }
		public Alter_credentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_credential; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_credential(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_credential(this);
		}
	}

	[RuleVersion(0)]
	public Alter_credentialContext alter_credential() {
		Alter_credentialContext _localctx = new Alter_credentialContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_alter_credential);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3283; Match(ALTER);
			State = 3284; Match(CREDENTIAL);
			State = 3285; _localctx.credential_name = id_();
			State = 3286; Match(WITH);
			State = 3287; Match(IDENTITY);
			State = 3288; Match(EQUAL);
			State = 3289; _localctx.identity_name = Match(STRING);
			State = 3294;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,239,_ctx) ) {
			case 1:
				{
				State = 3290; Match(COMMA);
				State = 3291; Match(SECRET);
				State = 3292; Match(EQUAL);
				State = 3293; _localctx.secret = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_credentialContext : ParserRuleContext {
		public Id_Context credential_name;
		public IToken identity_name;
		public IToken secret;
		public Id_Context cryptographic_provider_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode SECRET() { return GetToken(TSqlParser.SECRET, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Create_credentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_credential; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_credential(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_credential(this);
		}
	}

	[RuleVersion(0)]
	public Create_credentialContext create_credential() {
		Create_credentialContext _localctx = new Create_credentialContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_create_credential);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3296; Match(CREATE);
			State = 3297; Match(CREDENTIAL);
			State = 3298; _localctx.credential_name = id_();
			State = 3299; Match(WITH);
			State = 3300; Match(IDENTITY);
			State = 3301; Match(EQUAL);
			State = 3302; _localctx.identity_name = Match(STRING);
			State = 3307;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,240,_ctx) ) {
			case 1:
				{
				State = 3303; Match(COMMA);
				State = 3304; Match(SECRET);
				State = 3305; Match(EQUAL);
				State = 3306; _localctx.secret = Match(STRING);
				}
				break;
			}
			State = 3313;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,241,_ctx) ) {
			case 1:
				{
				State = 3309; Match(FOR);
				State = 3310; Match(CRYPTOGRAPHIC);
				State = 3311; Match(PROVIDER);
				State = 3312; _localctx.cryptographic_provider_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_cryptographic_providerContext : ParserRuleContext {
		public Id_Context provider_name;
		public IToken crypto_provider_ddl_file;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public Alter_cryptographic_providerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_cryptographic_provider; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_cryptographic_provider(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_cryptographic_provider(this);
		}
	}

	[RuleVersion(0)]
	public Alter_cryptographic_providerContext alter_cryptographic_provider() {
		Alter_cryptographic_providerContext _localctx = new Alter_cryptographic_providerContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_alter_cryptographic_provider);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3315; Match(ALTER);
			State = 3316; Match(CRYPTOGRAPHIC);
			State = 3317; Match(PROVIDER);
			State = 3318; _localctx.provider_name = id_();
			State = 3323;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,242,_ctx) ) {
			case 1:
				{
				State = 3319; Match(FROM);
				State = 3320; Match(FILE);
				State = 3321; Match(EQUAL);
				State = 3322; _localctx.crypto_provider_ddl_file = Match(STRING);
				}
				break;
			}
			State = 3326;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,243,_ctx) ) {
			case 1:
				{
				State = 3325;
				_la = _input.La(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_cryptographic_providerContext : ParserRuleContext {
		public Id_Context provider_name;
		public IToken path_of_DLL;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Create_cryptographic_providerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_cryptographic_provider; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_cryptographic_provider(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_cryptographic_provider(this);
		}
	}

	[RuleVersion(0)]
	public Create_cryptographic_providerContext create_cryptographic_provider() {
		Create_cryptographic_providerContext _localctx = new Create_cryptographic_providerContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_create_cryptographic_provider);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3328; Match(CREATE);
			State = 3329; Match(CRYPTOGRAPHIC);
			State = 3330; Match(PROVIDER);
			State = 3331; _localctx.provider_name = id_();
			State = 3332; Match(FROM);
			State = 3333; Match(FILE);
			State = 3334; Match(EQUAL);
			State = 3335; _localctx.path_of_DLL = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_endpointContext : ParserRuleContext {
		public Id_Context endpointname;
		public Id_Context login;
		public IToken state;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode TCP() { return GetToken(TSqlParser.TCP, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public Endpoint_listener_clauseContext endpoint_listener_clause() {
			return GetRuleContext<Endpoint_listener_clauseContext>(0);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode TSQL() { return GetToken(TSqlParser.TSQL, 0); }
		public ITerminalNode SERVICE_BROKER() { return GetToken(TSqlParser.SERVICE_BROKER, 0); }
		public Endpoint_authentication_clauseContext endpoint_authentication_clause() {
			return GetRuleContext<Endpoint_authentication_clauseContext>(0);
		}
		public ITerminalNode DATABASE_MIRRORING() { return GetToken(TSqlParser.DATABASE_MIRRORING, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode WITNESS() { return GetToken(TSqlParser.WITNESS, 0); }
		public ITerminalNode PARTNER() { return GetToken(TSqlParser.PARTNER, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode STARTED() { return GetToken(TSqlParser.STARTED, 0); }
		public ITerminalNode STOPPED() { return GetToken(TSqlParser.STOPPED, 0); }
		public ITerminalNode[] DISABLED() { return GetTokens(TSqlParser.DISABLED); }
		public ITerminalNode DISABLED(int i) {
			return GetToken(TSqlParser.DISABLED, i);
		}
		public Endpoint_encryption_alogorithm_clauseContext endpoint_encryption_alogorithm_clause() {
			return GetRuleContext<Endpoint_encryption_alogorithm_clauseContext>(0);
		}
		public ITerminalNode MESSAGE_FORWARDING() { return GetToken(TSqlParser.MESSAGE_FORWARDING, 0); }
		public ITerminalNode MESSAGE_FORWARD_SIZE() { return GetToken(TSqlParser.MESSAGE_FORWARD_SIZE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode ENABLED() { return GetToken(TSqlParser.ENABLED, 0); }
		public Create_endpointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_endpoint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_endpoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_endpoint(this);
		}
	}

	[RuleVersion(0)]
	public Create_endpointContext create_endpoint() {
		Create_endpointContext _localctx = new Create_endpointContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_create_endpoint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3337; Match(CREATE);
			State = 3338; Match(ENDPOINT);
			State = 3339; _localctx.endpointname = id_();
			State = 3342;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,244,_ctx) ) {
			case 1:
				{
				State = 3340; Match(AUTHORIZATION);
				State = 3341; _localctx.login = id_();
				}
				break;
			}
			State = 3347;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,245,_ctx) ) {
			case 1:
				{
				State = 3344; Match(STATE);
				State = 3345; Match(EQUAL);
				State = 3346;
				_localctx.state = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==DISABLED || _la==STARTED || _la==STOPPED) ) {
					_localctx.state = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 3349; Match(AS);
			State = 3350; Match(TCP);
			State = 3351; Match(LR_BRACKET);
			State = 3352; endpoint_listener_clause();
			State = 3353; Match(RR_BRACKET);
			State = 3404;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,255,_ctx) ) {
			case 1:
				{
				State = 3354; Match(FOR);
				State = 3355; Match(TSQL);
				State = 3356; Match(LR_BRACKET);
				State = 3357; Match(RR_BRACKET);
				}
				break;

			case 2:
				{
				State = 3358; Match(FOR);
				State = 3359; Match(SERVICE_BROKER);
				State = 3360; Match(LR_BRACKET);
				State = 3361; endpoint_authentication_clause();
				State = 3366;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,247,_ctx) ) {
				case 1:
					{
					State = 3363;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,246,_ctx) ) {
					case 1:
						{
						State = 3362; Match(COMMA);
						}
						break;
					}
					State = 3365; endpoint_encryption_alogorithm_clause();
					}
					break;
				}
				State = 3374;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,249,_ctx) ) {
				case 1:
					{
					State = 3369;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,248,_ctx) ) {
					case 1:
						{
						State = 3368; Match(COMMA);
						}
						break;
					}
					State = 3371; Match(MESSAGE_FORWARDING);
					State = 3372; Match(EQUAL);
					State = 3373;
					_la = _input.La(1);
					if ( !(_la==DISABLED || _la==ENABLED) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3382;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,251,_ctx) ) {
				case 1:
					{
					State = 3377;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,250,_ctx) ) {
					case 1:
						{
						State = 3376; Match(COMMA);
						}
						break;
					}
					State = 3379; Match(MESSAGE_FORWARD_SIZE);
					State = 3380; Match(EQUAL);
					State = 3381; Match(DECIMAL);
					}
					break;
				}
				State = 3384; Match(RR_BRACKET);
				}
				break;

			case 3:
				{
				State = 3386; Match(FOR);
				State = 3387; Match(DATABASE_MIRRORING);
				State = 3388; Match(LR_BRACKET);
				State = 3389; endpoint_authentication_clause();
				State = 3394;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,253,_ctx) ) {
				case 1:
					{
					State = 3391;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,252,_ctx) ) {
					case 1:
						{
						State = 3390; Match(COMMA);
						}
						break;
					}
					State = 3393; endpoint_encryption_alogorithm_clause();
					}
					break;
				}
				State = 3397;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,254,_ctx) ) {
				case 1:
					{
					State = 3396; Match(COMMA);
					}
					break;
				}
				State = 3399; Match(ROLE);
				State = 3400; Match(EQUAL);
				State = 3401;
				_la = _input.La(1);
				if ( !(_la==ALL || _la==PARTNER || _la==WITNESS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 3402; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Endpoint_encryption_alogorithm_clauseContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DISABLED() { return GetToken(TSqlParser.DISABLED, 0); }
		public ITerminalNode SUPPORTED() { return GetToken(TSqlParser.SUPPORTED, 0); }
		public ITerminalNode REQUIRED() { return GetToken(TSqlParser.REQUIRED, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode AES() { return GetToken(TSqlParser.AES, 0); }
		public ITerminalNode RC4() { return GetToken(TSqlParser.RC4, 0); }
		public Endpoint_encryption_alogorithm_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpoint_encryption_alogorithm_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEndpoint_encryption_alogorithm_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEndpoint_encryption_alogorithm_clause(this);
		}
	}

	[RuleVersion(0)]
	public Endpoint_encryption_alogorithm_clauseContext endpoint_encryption_alogorithm_clause() {
		Endpoint_encryption_alogorithm_clauseContext _localctx = new Endpoint_encryption_alogorithm_clauseContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_endpoint_encryption_alogorithm_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3406; Match(ENCRYPTION);
			State = 3407; Match(EQUAL);
			State = 3408;
			_la = _input.La(1);
			if ( !(_la==DISABLED || _la==REQUIRED || _la==SUPPORTED) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 3420;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,259,_ctx) ) {
			case 1:
				{
				State = 3409; Match(ALGORITHM);
				State = 3418;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,258,_ctx) ) {
				case 1:
					{
					State = 3410; Match(AES);
					State = 3412;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,256,_ctx) ) {
					case 1:
						{
						State = 3411; Match(RC4);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 3414; Match(RC4);
					State = 3416;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,257,_ctx) ) {
					case 1:
						{
						State = 3415; Match(AES);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Endpoint_authentication_clauseContext : ParserRuleContext {
		public Id_Context cert_name;
		public ITerminalNode AUTHENTICATION() { return GetToken(TSqlParser.AUTHENTICATION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode NTLM() { return GetToken(TSqlParser.NTLM, 0); }
		public ITerminalNode KERBEROS() { return GetToken(TSqlParser.KERBEROS, 0); }
		public ITerminalNode NEGOTIATE() { return GetToken(TSqlParser.NEGOTIATE, 0); }
		public Endpoint_authentication_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpoint_authentication_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEndpoint_authentication_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEndpoint_authentication_clause(this);
		}
	}

	[RuleVersion(0)]
	public Endpoint_authentication_clauseContext endpoint_authentication_clause() {
		Endpoint_authentication_clauseContext _localctx = new Endpoint_authentication_clauseContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_endpoint_authentication_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3422; Match(AUTHENTICATION);
			State = 3423; Match(EQUAL);
			State = 3440;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,264,_ctx) ) {
			case 1:
				{
				State = 3424; Match(WINDOWS);
				State = 3426;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,260,_ctx) ) {
				case 1:
					{
					State = 3425;
					_la = _input.La(1);
					if ( !(_la==KERBEROS || _la==NEGOTIATE || _la==NTLM) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3430;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,261,_ctx) ) {
				case 1:
					{
					State = 3428; Match(CERTIFICATE);
					State = 3429; _localctx.cert_name = id_();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 3432; Match(CERTIFICATE);
				State = 3433; _localctx.cert_name = id_();
				State = 3435;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,262,_ctx) ) {
				case 1:
					{
					State = 3434; Match(WINDOWS);
					}
					break;
				}
				State = 3438;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,263,_ctx) ) {
				case 1:
					{
					State = 3437;
					_la = _input.La(1);
					if ( !(_la==KERBEROS || _la==NEGOTIATE || _la==NTLM) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Endpoint_listener_clauseContext : ParserRuleContext {
		public IToken port;
		public IToken ipv4;
		public IToken ipv6;
		public ITerminalNode LISTENER_PORT() { return GetToken(TSqlParser.LISTENER_PORT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode LISTENER_IP() { return GetToken(TSqlParser.LISTENER_IP, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode IPV4_ADDR() { return GetToken(TSqlParser.IPV4_ADDR, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Endpoint_listener_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpoint_listener_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEndpoint_listener_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEndpoint_listener_clause(this);
		}
	}

	[RuleVersion(0)]
	public Endpoint_listener_clauseContext endpoint_listener_clause() {
		Endpoint_listener_clauseContext _localctx = new Endpoint_listener_clauseContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_endpoint_listener_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3442; Match(LISTENER_PORT);
			State = 3443; Match(EQUAL);
			State = 3444; _localctx.port = Match(DECIMAL);
			State = 3457;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,267,_ctx) ) {
			case 1:
				{
				State = 3445; Match(COMMA);
				State = 3446; Match(LISTENER_IP);
				State = 3447; Match(EQUAL);
				State = 3455;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,266,_ctx) ) {
				case 1:
					{
					State = 3448; Match(ALL);
					}
					break;

				case 2:
					{
					State = 3449; Match(LR_BRACKET);
					State = 3452;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,265,_ctx) ) {
					case 1:
						{
						State = 3450; _localctx.ipv4 = Match(IPV4_ADDR);
						}
						break;

					case 2:
						{
						State = 3451; _localctx.ipv6 = Match(STRING);
						}
						break;
					}
					State = 3454; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_event_notificationContext : ParserRuleContext {
		public Id_Context event_notification_name;
		public Id_Context queue_name;
		public Id_Context event_type_or_group;
		public IToken broker_service;
		public IToken broker_service_specifier_or_current_database;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FAN_IN() { return GetToken(TSqlParser.FAN_IN, 0); }
		public Create_event_notificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_event_notification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_event_notification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_event_notification(this);
		}
	}

	[RuleVersion(0)]
	public Create_event_notificationContext create_event_notification() {
		Create_event_notificationContext _localctx = new Create_event_notificationContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_create_event_notification);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3459; Match(CREATE);
			State = 3460; Match(EVENT);
			State = 3461; Match(NOTIFICATION);
			State = 3462; _localctx.event_notification_name = id_();
			State = 3463; Match(ON);
			State = 3468;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,268,_ctx) ) {
			case 1:
				{
				State = 3464; Match(SERVER);
				}
				break;

			case 2:
				{
				State = 3465; Match(DATABASE);
				}
				break;

			case 3:
				{
				State = 3466; Match(QUEUE);
				State = 3467; _localctx.queue_name = id_();
				}
				break;
			}
			State = 3472;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,269,_ctx) ) {
			case 1:
				{
				State = 3470; Match(WITH);
				State = 3471; Match(FAN_IN);
				}
				break;
			}
			State = 3474; Match(FOR);
			State = 3479;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 3476;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,270,_ctx) ) {
					case 1:
						{
						State = 3475; Match(COMMA);
						}
						break;
					}
					State = 3478; _localctx.event_type_or_group = id_();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3481;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,271,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 3483; Match(TO);
			State = 3484; Match(SERVICE);
			State = 3485; _localctx.broker_service = Match(STRING);
			State = 3486; Match(COMMA);
			State = 3487; _localctx.broker_service_specifier_or_current_database = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_event_sessionContext : ParserRuleContext {
		public Id_Context event_session_name;
		public Id_Context event_module_guid;
		public Id_Context event_package_name;
		public Id_Context event_name;
		public Id_Context event_customizable_attributue;
		public Id_Context action_name;
		public Id_Context target_name;
		public Id_Context target_parameter_name;
		public IToken max_memory;
		public IToken max_dispatch_latency_seconds;
		public IToken max_event_size;
		public ITerminalNode[] EVENT() { return GetTokens(TSqlParser.EVENT); }
		public ITerminalNode EVENT(int i) {
			return GetToken(TSqlParser.EVENT, i);
		}
		public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		public ITerminalNode[] DROP() { return GetTokens(TSqlParser.DROP); }
		public ITerminalNode DROP(int i) {
			return GetToken(TSqlParser.DROP, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode[] TARGET() { return GetTokens(TSqlParser.TARGET); }
		public ITerminalNode TARGET(int i) {
			return GetToken(TSqlParser.TARGET, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode START() { return GetToken(TSqlParser.START, 0); }
		public ITerminalNode STOP() { return GetToken(TSqlParser.STOP, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] SET() { return GetTokens(TSqlParser.SET); }
		public ITerminalNode SET(int i) {
			return GetToken(TSqlParser.SET, i);
		}
		public ITerminalNode MAX_MEMORY() { return GetToken(TSqlParser.MAX_MEMORY, 0); }
		public ITerminalNode EVENT_RETENTION_MODE() { return GetToken(TSqlParser.EVENT_RETENTION_MODE, 0); }
		public ITerminalNode MAX_DISPATCH_LATENCY() { return GetToken(TSqlParser.MAX_DISPATCH_LATENCY, 0); }
		public ITerminalNode MAX_EVENT_SIZE() { return GetToken(TSqlParser.MAX_EVENT_SIZE, 0); }
		public ITerminalNode MEMORY_PARTITION_MODE() { return GetToken(TSqlParser.MEMORY_PARTITION_MODE, 0); }
		public ITerminalNode TRACK_CAUSALITY() { return GetToken(TSqlParser.TRACK_CAUSALITY, 0); }
		public ITerminalNode STARTUP_STATE() { return GetToken(TSqlParser.STARTUP_STATE, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] KB() { return GetTokens(TSqlParser.KB); }
		public ITerminalNode KB(int i) {
			return GetToken(TSqlParser.KB, i);
		}
		public ITerminalNode[] MB() { return GetTokens(TSqlParser.MB); }
		public ITerminalNode MB(int i) {
			return GetToken(TSqlParser.MB, i);
		}
		public ITerminalNode ALLOW_SINGLE_EVENT_LOSS() { return GetToken(TSqlParser.ALLOW_SINGLE_EVENT_LOSS, 0); }
		public ITerminalNode ALLOW_MULTIPLE_EVENT_LOSS() { return GetToken(TSqlParser.ALLOW_MULTIPLE_EVENT_LOSS, 0); }
		public ITerminalNode NO_EVENT_LOSS() { return GetToken(TSqlParser.NO_EVENT_LOSS, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode PER_NODE() { return GetToken(TSqlParser.PER_NODE, 0); }
		public ITerminalNode PER_CPU() { return GetToken(TSqlParser.PER_CPU, 0); }
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode SECONDS() { return GetToken(TSqlParser.SECONDS, 0); }
		public ITerminalNode INFINITE() { return GetToken(TSqlParser.INFINITE, 0); }
		public ITerminalNode[] ACTION() { return GetTokens(TSqlParser.ACTION); }
		public ITerminalNode ACTION(int i) {
			return GetToken(TSqlParser.ACTION, i);
		}
		public ITerminalNode[] WHERE() { return GetTokens(TSqlParser.WHERE); }
		public ITerminalNode WHERE(int i) {
			return GetToken(TSqlParser.WHERE, i);
		}
		public Event_session_predicate_expressionContext[] event_session_predicate_expression() {
			return GetRuleContexts<Event_session_predicate_expressionContext>();
		}
		public Event_session_predicate_expressionContext event_session_predicate_expression(int i) {
			return GetRuleContext<Event_session_predicate_expressionContext>(i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Create_or_alter_event_sessionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_event_session; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_event_session(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_event_session(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_event_sessionContext create_or_alter_event_session() {
		Create_or_alter_event_sessionContext _localctx = new Create_or_alter_event_sessionContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_create_or_alter_event_session);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3489;
			_la = _input.La(1);
			if ( !(_la==ALTER || _la==CREATE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 3490; Match(EVENT);
			State = 3491; Match(SESSION);
			State = 3492; _localctx.event_session_name = id_();
			State = 3493; Match(ON);
			State = 3494; Match(SERVER);
			State = 3562;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,283,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 3496;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,272,_ctx) ) {
					case 1:
						{
						State = 3495; Match(COMMA);
						}
						break;
					}
					State = 3498; Match(ADD);
					State = 3499; Match(EVENT);
					{
					State = 3503;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,273,_ctx) ) {
					case 1:
						{
						State = 3500; _localctx.event_module_guid = id_();
						State = 3501; Match(DOT);
						}
						break;
					}
					State = 3505; _localctx.event_package_name = id_();
					State = 3506; Match(DOT);
					State = 3507; _localctx.event_name = id_();
					}
					State = 3557;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,282,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 3509; Match(LR_BRACKET);
							State = 3523;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,276,_ctx) ) {
							case 1:
								{
								State = 3510; Match(SET);
								State = 3520;
								_errHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(_input,275,_ctx);
								while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
									if ( _alt==1 ) {
										{
										{
										State = 3512;
										_errHandler.Sync(this);
										switch ( Interpreter.AdaptivePredict(_input,274,_ctx) ) {
										case 1:
											{
											State = 3511; Match(COMMA);
											}
											break;
										}
										State = 3514; _localctx.event_customizable_attributue = id_();
										State = 3515; Match(EQUAL);
										State = 3516;
										_la = _input.La(1);
										if ( !(_la==DECIMAL || _la==STRING) ) {
										_errHandler.RecoverInline(this);
										} else {
											if (_input.La(1) == TokenConstants.Eof) {
												matchedEOF = true;
											}

											_errHandler.ReportMatch(this);
											Consume();
										}
										}
										} 
									}
									State = 3522;
									_errHandler.Sync(this);
									_alt = Interpreter.AdaptivePredict(_input,275,_ctx);
								}
								}
								break;
							}
							State = 3545;
							_errHandler.Sync(this);
							_alt = 1;
							do {
								switch (_alt) {
								case 1:
									{
									{
									State = 3525; Match(ACTION);
									State = 3526; Match(LR_BRACKET);
									State = 3539;
									_errHandler.Sync(this);
									_alt = 1;
									do {
										switch (_alt) {
										case 1:
											{
											{
											State = 3528;
											_errHandler.Sync(this);
											switch ( Interpreter.AdaptivePredict(_input,277,_ctx) ) {
											case 1:
												{
												State = 3527; Match(COMMA);
												}
												break;
											}
											State = 3533;
											_errHandler.Sync(this);
											switch ( Interpreter.AdaptivePredict(_input,278,_ctx) ) {
											case 1:
												{
												State = 3530; _localctx.event_module_guid = id_();
												State = 3531; Match(DOT);
												}
												break;
											}
											State = 3535; _localctx.event_package_name = id_();
											State = 3536; Match(DOT);
											State = 3537; _localctx.action_name = id_();
											}
											}
											break;
										default:
											throw new NoViableAltException(this);
										}
										State = 3541;
										_errHandler.Sync(this);
										_alt = Interpreter.AdaptivePredict(_input,279,_ctx);
									} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
									State = 3543; Match(RR_BRACKET);
									}
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								State = 3547;
								_errHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(_input,280,_ctx);
							} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
							State = 3551;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,281,_ctx) ) {
							case 1:
								{
								State = 3549; Match(WHERE);
								State = 3550; event_session_predicate_expression();
								}
								break;
							}
							State = 3553; Match(RR_BRACKET);
							}
							} 
						}
						State = 3559;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,282,_ctx);
					}
					}
					} 
				}
				State = 3564;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,283,_ctx);
			}
			State = 3581;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,286,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 3566;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,284,_ctx) ) {
					case 1:
						{
						State = 3565; Match(COMMA);
						}
						break;
					}
					State = 3568; Match(DROP);
					State = 3569; Match(EVENT);
					State = 3573;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,285,_ctx) ) {
					case 1:
						{
						State = 3570; _localctx.event_module_guid = id_();
						State = 3571; Match(DOT);
						}
						break;
					}
					State = 3575; _localctx.event_package_name = id_();
					State = 3576; Match(DOT);
					State = 3577; _localctx.event_name = id_();
					}
					} 
				}
				State = 3583;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,286,_ctx);
			}
			State = 3625;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,294,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					{
					State = 3584; Match(ADD);
					State = 3585; Match(TARGET);
					State = 3589;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,287,_ctx) ) {
					case 1:
						{
						State = 3586; _localctx.event_module_guid = id_();
						State = 3587; Match(DOT);
						}
						break;
					}
					State = 3591; _localctx.event_package_name = id_();
					State = 3592; Match(DOT);
					State = 3593; _localctx.target_name = id_();
					}
					State = 3620;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,293,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 3595; Match(LR_BRACKET);
							State = 3596; Match(SET);
							State = 3612;
							_errHandler.Sync(this);
							_alt = 1;
							do {
								switch (_alt) {
								case 1:
									{
									{
									State = 3598;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,288,_ctx) ) {
									case 1:
										{
										State = 3597; Match(COMMA);
										}
										break;
									}
									State = 3600; _localctx.target_parameter_name = id_();
									State = 3601; Match(EQUAL);
									State = 3610;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,291,_ctx) ) {
									case 1:
										{
										State = 3603;
										_errHandler.Sync(this);
										switch ( Interpreter.AdaptivePredict(_input,289,_ctx) ) {
										case 1:
											{
											State = 3602; Match(LR_BRACKET);
											}
											break;
										}
										State = 3605; Match(DECIMAL);
										State = 3607;
										_errHandler.Sync(this);
										switch ( Interpreter.AdaptivePredict(_input,290,_ctx) ) {
										case 1:
											{
											State = 3606; Match(RR_BRACKET);
											}
											break;
										}
										}
										break;

									case 2:
										{
										State = 3609; Match(STRING);
										}
										break;
									}
									}
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								State = 3614;
								_errHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(_input,292,_ctx);
							} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
							State = 3616; Match(RR_BRACKET);
							}
							} 
						}
						State = 3622;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,293,_ctx);
					}
					}
					} 
				}
				State = 3627;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,294,_ctx);
			}
			State = 3641;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,296,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 3628; Match(DROP);
					State = 3629; Match(TARGET);
					State = 3633;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,295,_ctx) ) {
					case 1:
						{
						State = 3630; _localctx.event_module_guid = id_();
						State = 3631; Match(DOT);
						}
						break;
					}
					State = 3635; _localctx.event_package_name = id_();
					State = 3636; Match(DOT);
					State = 3637; _localctx.target_name = id_();
					}
					} 
				}
				State = 3643;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,296,_ctx);
			}
			State = 3709;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,312,_ctx) ) {
			case 1:
				{
				State = 3644; Match(WITH);
				State = 3645; Match(LR_BRACKET);
				State = 3653;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,298,_ctx) ) {
				case 1:
					{
					State = 3647;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,297,_ctx) ) {
					case 1:
						{
						State = 3646; Match(COMMA);
						}
						break;
					}
					State = 3649; Match(MAX_MEMORY);
					State = 3650; Match(EQUAL);
					State = 3651; _localctx.max_memory = Match(DECIMAL);
					State = 3652;
					_la = _input.La(1);
					if ( !(_la==KB || _la==MB) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3661;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,300,_ctx) ) {
				case 1:
					{
					State = 3656;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,299,_ctx) ) {
					case 1:
						{
						State = 3655; Match(COMMA);
						}
						break;
					}
					State = 3658; Match(EVENT_RETENTION_MODE);
					State = 3659; Match(EQUAL);
					State = 3660;
					_la = _input.La(1);
					if ( !(_la==ALLOW_MULTIPLE_EVENT_LOSS || _la==ALLOW_SINGLE_EVENT_LOSS || _la==NO_EVENT_LOSS) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3673;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,303,_ctx) ) {
				case 1:
					{
					State = 3664;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,301,_ctx) ) {
					case 1:
						{
						State = 3663; Match(COMMA);
						}
						break;
					}
					State = 3666; Match(MAX_DISPATCH_LATENCY);
					State = 3667; Match(EQUAL);
					State = 3671;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,302,_ctx) ) {
					case 1:
						{
						State = 3668; _localctx.max_dispatch_latency_seconds = Match(DECIMAL);
						State = 3669; Match(SECONDS);
						}
						break;

					case 2:
						{
						State = 3670; Match(INFINITE);
						}
						break;
					}
					}
					break;
				}
				State = 3682;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,305,_ctx) ) {
				case 1:
					{
					State = 3676;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,304,_ctx) ) {
					case 1:
						{
						State = 3675; Match(COMMA);
						}
						break;
					}
					State = 3678; Match(MAX_EVENT_SIZE);
					State = 3679; Match(EQUAL);
					State = 3680; _localctx.max_event_size = Match(DECIMAL);
					State = 3681;
					_la = _input.La(1);
					if ( !(_la==KB || _la==MB) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3690;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,307,_ctx) ) {
				case 1:
					{
					State = 3685;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,306,_ctx) ) {
					case 1:
						{
						State = 3684; Match(COMMA);
						}
						break;
					}
					State = 3687; Match(MEMORY_PARTITION_MODE);
					State = 3688; Match(EQUAL);
					State = 3689;
					_la = _input.La(1);
					if ( !(_la==NONE || _la==PER_CPU || _la==PER_NODE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3698;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,309,_ctx) ) {
				case 1:
					{
					State = 3693;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,308,_ctx) ) {
					case 1:
						{
						State = 3692; Match(COMMA);
						}
						break;
					}
					State = 3695; Match(TRACK_CAUSALITY);
					State = 3696; Match(EQUAL);
					State = 3697;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3706;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,311,_ctx) ) {
				case 1:
					{
					State = 3701;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,310,_ctx) ) {
					case 1:
						{
						State = 3700; Match(COMMA);
						}
						break;
					}
					State = 3703; Match(STARTUP_STATE);
					State = 3704; Match(EQUAL);
					State = 3705;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3708; Match(RR_BRACKET);
				}
				break;
			}
			State = 3714;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,313,_ctx) ) {
			case 1:
				{
				State = 3711; Match(STATE);
				State = 3712; Match(EQUAL);
				State = 3713;
				_la = _input.La(1);
				if ( !(_la==START || _la==STOP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_session_predicate_expressionContext : ParserRuleContext {
		public Event_session_predicate_factorContext[] event_session_predicate_factor() {
			return GetRuleContexts<Event_session_predicate_factorContext>();
		}
		public Event_session_predicate_factorContext event_session_predicate_factor(int i) {
			return GetRuleContext<Event_session_predicate_factorContext>(i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public Event_session_predicate_expressionContext[] event_session_predicate_expression() {
			return GetRuleContexts<Event_session_predicate_expressionContext>();
		}
		public Event_session_predicate_expressionContext event_session_predicate_expression(int i) {
			return GetRuleContext<Event_session_predicate_expressionContext>(i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] NOT() { return GetTokens(TSqlParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(TSqlParser.NOT, i);
		}
		public ITerminalNode[] AND() { return GetTokens(TSqlParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(TSqlParser.AND, i);
		}
		public ITerminalNode[] OR() { return GetTokens(TSqlParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(TSqlParser.OR, i);
		}
		public Event_session_predicate_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_session_predicate_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEvent_session_predicate_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEvent_session_predicate_expression(this);
		}
	}

	[RuleVersion(0)]
	public Event_session_predicate_expressionContext event_session_predicate_expression() {
		Event_session_predicate_expressionContext _localctx = new Event_session_predicate_expressionContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_event_session_predicate_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3732;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 3717;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,314,_ctx) ) {
					case 1:
						{
						State = 3716; Match(COMMA);
						}
						break;
					}
					State = 3720;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,315,_ctx) ) {
					case 1:
						{
						State = 3719;
						_la = _input.La(1);
						if ( !(_la==AND || _la==OR) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					State = 3723;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,316,_ctx) ) {
					case 1:
						{
						State = 3722; Match(NOT);
						}
						break;
					}
					State = 3730;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,317,_ctx) ) {
					case 1:
						{
						State = 3725; event_session_predicate_factor();
						}
						break;

					case 2:
						{
						State = 3726; Match(LR_BRACKET);
						State = 3727; event_session_predicate_expression();
						State = 3728; Match(RR_BRACKET);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3734;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,318,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_session_predicate_factorContext : ParserRuleContext {
		public Event_session_predicate_leafContext event_session_predicate_leaf() {
			return GetRuleContext<Event_session_predicate_leafContext>(0);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Event_session_predicate_expressionContext event_session_predicate_expression() {
			return GetRuleContext<Event_session_predicate_expressionContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Event_session_predicate_factorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_session_predicate_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEvent_session_predicate_factor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEvent_session_predicate_factor(this);
		}
	}

	[RuleVersion(0)]
	public Event_session_predicate_factorContext event_session_predicate_factor() {
		Event_session_predicate_factorContext _localctx = new Event_session_predicate_factorContext(_ctx, State);
		EnterRule(_localctx, 308, RULE_event_session_predicate_factor);
		try {
			State = 3741;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,319,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3736; event_session_predicate_leaf();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3737; Match(LR_BRACKET);
				State = 3738; event_session_predicate_expression();
				State = 3739; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_session_predicate_leafContext : ParserRuleContext {
		public Id_Context event_field_name;
		public Id_Context event_module_guid;
		public Id_Context event_package_name;
		public Id_Context predicate_source_name;
		public Id_Context predicate_compare_name;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode GREATER() { return GetToken(TSqlParser.GREATER, 0); }
		public ITerminalNode LESS() { return GetToken(TSqlParser.LESS, 0); }
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode EXCLAMATION() { return GetToken(TSqlParser.EXCLAMATION, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Event_session_predicate_leafContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_session_predicate_leaf; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEvent_session_predicate_leaf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEvent_session_predicate_leaf(this);
		}
	}

	[RuleVersion(0)]
	public Event_session_predicate_leafContext event_session_predicate_leaf() {
		Event_session_predicate_leafContext _localctx = new Event_session_predicate_leafContext(_ctx, State);
		EnterRule(_localctx, 310, RULE_event_session_predicate_leaf);
		int _la;
		try {
			State = 3799;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,327,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3771;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,323,_ctx) ) {
				case 1:
					{
					State = 3743; _localctx.event_field_name = id_();
					}
					break;

				case 2:
					{
					State = 3754;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,321,_ctx) ) {
					case 1:
						{
						State = 3744; _localctx.event_field_name = id_();
						}
						break;

					case 2:
						{
						{
						State = 3748;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,320,_ctx) ) {
						case 1:
							{
							State = 3745; _localctx.event_module_guid = id_();
							State = 3746; Match(DOT);
							}
							break;
						}
						State = 3750; _localctx.event_package_name = id_();
						State = 3751; Match(DOT);
						State = 3752; _localctx.predicate_source_name = id_();
						}
						}
						break;
					}
					State = 3767;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,322,_ctx) ) {
					case 1:
						{
						State = 3756; Match(EQUAL);
						}
						break;

					case 2:
						{
						{
						State = 3757; Match(LESS);
						State = 3758; Match(GREATER);
						}
						}
						break;

					case 3:
						{
						{
						State = 3759; Match(EXCLAMATION);
						State = 3760; Match(EQUAL);
						}
						}
						break;

					case 4:
						{
						State = 3761; Match(GREATER);
						}
						break;

					case 5:
						{
						{
						State = 3762; Match(GREATER);
						State = 3763; Match(EQUAL);
						}
						}
						break;

					case 6:
						{
						State = 3764; Match(LESS);
						}
						break;

					case 7:
						{
						State = 3765; Match(LESS);
						State = 3766; Match(EQUAL);
						}
						break;
					}
					State = 3769;
					_la = _input.La(1);
					if ( !(_la==DECIMAL || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3776;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,324,_ctx) ) {
				case 1:
					{
					State = 3773; _localctx.event_module_guid = id_();
					State = 3774; Match(DOT);
					}
					break;
				}
				State = 3778; _localctx.event_package_name = id_();
				State = 3779; Match(DOT);
				State = 3780; _localctx.predicate_compare_name = id_();
				State = 3781; Match(LR_BRACKET);
				State = 3795;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,326,_ctx) ) {
				case 1:
					{
					State = 3782; _localctx.event_field_name = id_();
					}
					break;

				case 2:
					{
					{
					State = 3786;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,325,_ctx) ) {
					case 1:
						{
						State = 3783; _localctx.event_module_guid = id_();
						State = 3784; Match(DOT);
						}
						break;
					}
					State = 3788; _localctx.event_package_name = id_();
					State = 3789; Match(DOT);
					State = 3790; _localctx.predicate_source_name = id_();
					}
					State = 3792; Match(COMMA);
					State = 3793;
					_la = _input.La(1);
					if ( !(_la==DECIMAL || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3797; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_external_data_sourceContext : ParserRuleContext {
		public Id_Context data_source_name;
		public IToken location;
		public IToken resource_manager_location;
		public Id_Context credential_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] LOCATION() { return GetTokens(TSqlParser.LOCATION); }
		public ITerminalNode LOCATION(int i) {
			return GetToken(TSqlParser.LOCATION, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] RESOURCE_MANAGER_LOCATION() { return GetTokens(TSqlParser.RESOURCE_MANAGER_LOCATION); }
		public ITerminalNode RESOURCE_MANAGER_LOCATION(int i) {
			return GetToken(TSqlParser.RESOURCE_MANAGER_LOCATION, i);
		}
		public ITerminalNode[] CREDENTIAL() { return GetTokens(TSqlParser.CREDENTIAL); }
		public ITerminalNode CREDENTIAL(int i) {
			return GetToken(TSqlParser.CREDENTIAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode BLOB_STORAGE() { return GetToken(TSqlParser.BLOB_STORAGE, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Alter_external_data_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_external_data_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_external_data_source(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_external_data_source(this);
		}
	}

	[RuleVersion(0)]
	public Alter_external_data_sourceContext alter_external_data_source() {
		Alter_external_data_sourceContext _localctx = new Alter_external_data_sourceContext(_ctx, State);
		EnterRule(_localctx, 312, RULE_alter_external_data_source);
		try {
			int _alt;
			State = 3848;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,333,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3801; Match(ALTER);
				State = 3802; Match(EXTERNAL);
				State = 3803; Match(DATA);
				State = 3804; Match(SOURCE);
				State = 3805; _localctx.data_source_name = id_();
				State = 3806; Match(SET);
				State = 3822;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 3822;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,330,_ctx) ) {
						case 1:
							{
							State = 3807; Match(LOCATION);
							State = 3808; Match(EQUAL);
							State = 3809; _localctx.location = Match(STRING);
							State = 3811;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,328,_ctx) ) {
							case 1:
								{
								State = 3810; Match(COMMA);
								}
								break;
							}
							}
							break;

						case 2:
							{
							State = 3813; Match(RESOURCE_MANAGER_LOCATION);
							State = 3814; Match(EQUAL);
							State = 3815; _localctx.resource_manager_location = Match(STRING);
							State = 3817;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,329,_ctx) ) {
							case 1:
								{
								State = 3816; Match(COMMA);
								}
								break;
							}
							}
							break;

						case 3:
							{
							State = 3819; Match(CREDENTIAL);
							State = 3820; Match(EQUAL);
							State = 3821; _localctx.credential_name = id_();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3824;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,331,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3826; Match(ALTER);
				State = 3827; Match(EXTERNAL);
				State = 3828; Match(DATA);
				State = 3829; Match(SOURCE);
				State = 3830; _localctx.data_source_name = id_();
				State = 3831; Match(WITH);
				State = 3832; Match(LR_BRACKET);
				State = 3833; Match(TYPE);
				State = 3834; Match(EQUAL);
				State = 3835; Match(BLOB_STORAGE);
				State = 3836; Match(COMMA);
				State = 3837; Match(LOCATION);
				State = 3838; Match(EQUAL);
				State = 3839; _localctx.location = Match(STRING);
				State = 3844;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,332,_ctx) ) {
				case 1:
					{
					State = 3840; Match(COMMA);
					State = 3841; Match(CREDENTIAL);
					State = 3842; Match(EQUAL);
					State = 3843; _localctx.credential_name = id_();
					}
					break;
				}
				State = 3846; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_external_libraryContext : ParserRuleContext {
		public Id_Context library_name;
		public Id_Context owner_name;
		public IToken client_library;
		public Id_Context external_data_source_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode PLATFORM() { return GetToken(TSqlParser.PLATFORM, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode[] LANGUAGE() { return GetTokens(TSqlParser.LANGUAGE); }
		public ITerminalNode LANGUAGE(int i) {
			return GetToken(TSqlParser.LANGUAGE, i);
		}
		public ITerminalNode[] DATA_SOURCE() { return GetTokens(TSqlParser.DATA_SOURCE); }
		public ITerminalNode DATA_SOURCE(int i) {
			return GetToken(TSqlParser.DATA_SOURCE, i);
		}
		public ITerminalNode[] R() { return GetTokens(TSqlParser.R); }
		public ITerminalNode R(int i) {
			return GetToken(TSqlParser.R, i);
		}
		public ITerminalNode[] PYTHON() { return GetTokens(TSqlParser.PYTHON); }
		public ITerminalNode PYTHON(int i) {
			return GetToken(TSqlParser.PYTHON, i);
		}
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode LINUX() { return GetToken(TSqlParser.LINUX, 0); }
		public Alter_external_libraryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_external_library; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_external_library(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_external_library(this);
		}
	}

	[RuleVersion(0)]
	public Alter_external_libraryContext alter_external_library() {
		Alter_external_libraryContext _localctx = new Alter_external_libraryContext(_ctx, State);
		EnterRule(_localctx, 314, RULE_alter_external_library);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3850; Match(ALTER);
			State = 3851; Match(EXTERNAL);
			State = 3852; Match(LIBRARY);
			State = 3853; _localctx.library_name = id_();
			State = 3856;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,334,_ctx) ) {
			case 1:
				{
				State = 3854; Match(AUTHORIZATION);
				State = 3855; _localctx.owner_name = id_();
				}
				break;
			}
			State = 3858;
			_la = _input.La(1);
			if ( !(_la==ADD || _la==SET) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			{
			State = 3859; Match(LR_BRACKET);
			State = 3860; Match(CONTENT);
			State = 3861; Match(EQUAL);
			State = 3865;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,335,_ctx) ) {
			case 1:
				{
				State = 3862; _localctx.client_library = Match(STRING);
				}
				break;

			case 2:
				{
				State = 3863; Match(BINARY);
				}
				break;

			case 3:
				{
				State = 3864; Match(NONE);
				}
				break;
			}
			{
			State = 3867; Match(COMMA);
			State = 3868; Match(PLATFORM);
			State = 3869; Match(EQUAL);
			State = 3871;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,336,_ctx) ) {
			case 1:
				{
				State = 3870;
				_la = _input.La(1);
				if ( !(_la==LINUX || _la==WINDOWS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 3873; Match(RR_BRACKET);
			}
			State = 3875; Match(WITH);
			State = 3885;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 3885;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,338,_ctx) ) {
					case 1:
						{
						State = 3877;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,337,_ctx) ) {
						case 1:
							{
							State = 3876; Match(COMMA);
							}
							break;
						}
						State = 3879; Match(LANGUAGE);
						State = 3880; Match(EQUAL);
						State = 3881;
						_la = _input.La(1);
						if ( !(_la==PYTHON || _la==R) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 2:
						{
						State = 3882; Match(DATA_SOURCE);
						State = 3883; Match(EQUAL);
						State = 3884; _localctx.external_data_source_name = id_();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3887;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,339,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 3889; Match(RR_BRACKET);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_external_libraryContext : ParserRuleContext {
		public Id_Context library_name;
		public Id_Context owner_name;
		public IToken client_library;
		public Id_Context external_data_source_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode PLATFORM() { return GetToken(TSqlParser.PLATFORM, 0); }
		public ITerminalNode[] LANGUAGE() { return GetTokens(TSqlParser.LANGUAGE); }
		public ITerminalNode LANGUAGE(int i) {
			return GetToken(TSqlParser.LANGUAGE, i);
		}
		public ITerminalNode[] DATA_SOURCE() { return GetTokens(TSqlParser.DATA_SOURCE); }
		public ITerminalNode DATA_SOURCE(int i) {
			return GetToken(TSqlParser.DATA_SOURCE, i);
		}
		public ITerminalNode[] R() { return GetTokens(TSqlParser.R); }
		public ITerminalNode R(int i) {
			return GetToken(TSqlParser.R, i);
		}
		public ITerminalNode[] PYTHON() { return GetTokens(TSqlParser.PYTHON); }
		public ITerminalNode PYTHON(int i) {
			return GetToken(TSqlParser.PYTHON, i);
		}
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode LINUX() { return GetToken(TSqlParser.LINUX, 0); }
		public Create_external_libraryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_external_library; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_external_library(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_external_library(this);
		}
	}

	[RuleVersion(0)]
	public Create_external_libraryContext create_external_library() {
		Create_external_libraryContext _localctx = new Create_external_libraryContext(_ctx, State);
		EnterRule(_localctx, 316, RULE_create_external_library);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3891; Match(CREATE);
			State = 3892; Match(EXTERNAL);
			State = 3893; Match(LIBRARY);
			State = 3894; _localctx.library_name = id_();
			State = 3897;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,340,_ctx) ) {
			case 1:
				{
				State = 3895; Match(AUTHORIZATION);
				State = 3896; _localctx.owner_name = id_();
				}
				break;
			}
			State = 3899; Match(FROM);
			{
			State = 3901;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,341,_ctx) ) {
			case 1:
				{
				State = 3900; Match(COMMA);
				}
				break;
			}
			State = 3904;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,342,_ctx) ) {
			case 1:
				{
				State = 3903; Match(LR_BRACKET);
				}
				break;
			}
			State = 3908;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,343,_ctx) ) {
			case 1:
				{
				State = 3906; Match(CONTENT);
				State = 3907; Match(EQUAL);
				}
				break;
			}
			State = 3913;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,344,_ctx) ) {
			case 1:
				{
				State = 3910; _localctx.client_library = Match(STRING);
				}
				break;

			case 2:
				{
				State = 3911; Match(BINARY);
				}
				break;

			case 3:
				{
				State = 3912; Match(NONE);
				}
				break;
			}
			State = 3922;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,346,_ctx) ) {
			case 1:
				{
				State = 3915; Match(COMMA);
				State = 3916; Match(PLATFORM);
				State = 3917; Match(EQUAL);
				State = 3919;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,345,_ctx) ) {
				case 1:
					{
					State = 3918;
					_la = _input.La(1);
					if ( !(_la==LINUX || _la==WINDOWS) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3921; Match(RR_BRACKET);
				}
				break;
			}
			}
			State = 3939;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,350,_ctx) ) {
			case 1:
				{
				State = 3924; Match(WITH);
				State = 3934;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 3934;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,348,_ctx) ) {
						case 1:
							{
							State = 3926;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,347,_ctx) ) {
							case 1:
								{
								State = 3925; Match(COMMA);
								}
								break;
							}
							State = 3928; Match(LANGUAGE);
							State = 3929; Match(EQUAL);
							State = 3930;
							_la = _input.La(1);
							if ( !(_la==PYTHON || _la==R) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 2:
							{
							State = 3931; Match(DATA_SOURCE);
							State = 3932; Match(EQUAL);
							State = 3933; _localctx.external_data_source_name = id_();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3936;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,349,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 3938; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_external_resource_poolContext : ParserRuleContext {
		public Id_Context pool_name;
		public IToken max_cpu_percent;
		public IToken max_memory_percent;
		public IToken max_processes;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode MAX_CPU_PERCENT() { return GetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode DEFAULT_DOUBLE_QUOTE() { return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0); }
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode CPU() { return GetToken(TSqlParser.CPU, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode MAX_MEMORY_PERCENT() { return GetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public ITerminalNode MAX_PROCESSES() { return GetToken(TSqlParser.MAX_PROCESSES, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Alter_external_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_external_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_external_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_external_resource_pool(this);
		}
	}

	[RuleVersion(0)]
	public Alter_external_resource_poolContext alter_external_resource_pool() {
		Alter_external_resource_poolContext _localctx = new Alter_external_resource_poolContext(_ctx, State);
		EnterRule(_localctx, 318, RULE_alter_external_resource_pool);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3941; Match(ALTER);
			State = 3942; Match(EXTERNAL);
			State = 3943; Match(RESOURCE);
			State = 3944; Match(POOL);
			State = 3947;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,351,_ctx) ) {
			case 1:
				{
				State = 3945; _localctx.pool_name = id_();
				}
				break;

			case 2:
				{
				State = 3946; Match(DEFAULT_DOUBLE_QUOTE);
				}
				break;
			}
			State = 3949; Match(WITH);
			State = 3950; Match(LR_BRACKET);
			State = 3951; Match(MAX_CPU_PERCENT);
			State = 3952; Match(EQUAL);
			State = 3953; _localctx.max_cpu_percent = Match(DECIMAL);
			State = 3991;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,361,_ctx) ) {
			case 1:
				{
				State = 3955;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,352,_ctx) ) {
				case 1:
					{
					State = 3954; Match(COMMA);
					}
					break;
				}
				State = 3957; Match(AFFINITY);
				State = 3958; Match(CPU);
				State = 3959; Match(EQUAL);
				State = 3973;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,356,_ctx) ) {
				case 1:
					{
					State = 3960; Match(AUTO);
					}
					break;

				case 2:
					{
					State = 3969;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							State = 3969;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,354,_ctx) ) {
							case 1:
								{
								State = 3962;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,353,_ctx) ) {
								case 1:
									{
									State = 3961; Match(COMMA);
									}
									break;
								}
								State = 3964; Match(DECIMAL);
								State = 3965; Match(TO);
								State = 3966; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 3967; Match(COMMA);
								State = 3968; Match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 3971;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,355,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 3975; Match(NUMANODE);
				State = 3976; Match(EQUAL);
				State = 3987;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 3987;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,359,_ctx) ) {
						case 1:
							{
							State = 3978;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,357,_ctx) ) {
							case 1:
								{
								State = 3977; Match(COMMA);
								}
								break;
							}
							State = 3980; Match(DECIMAL);
							State = 3981; Match(TO);
							State = 3982; Match(DECIMAL);
							}
							break;

						case 2:
							{
							State = 3984;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,358,_ctx) ) {
							case 1:
								{
								State = 3983; Match(COMMA);
								}
								break;
							}
							State = 3986; Match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3989;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,360,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 3999;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,363,_ctx) ) {
			case 1:
				{
				State = 3994;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,362,_ctx) ) {
				case 1:
					{
					State = 3993; Match(COMMA);
					}
					break;
				}
				State = 3996; Match(MAX_MEMORY_PERCENT);
				State = 3997; Match(EQUAL);
				State = 3998; _localctx.max_memory_percent = Match(DECIMAL);
				}
				break;
			}
			State = 4007;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,365,_ctx) ) {
			case 1:
				{
				State = 4002;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,364,_ctx) ) {
				case 1:
					{
					State = 4001; Match(COMMA);
					}
					break;
				}
				State = 4004; Match(MAX_PROCESSES);
				State = 4005; Match(EQUAL);
				State = 4006; _localctx.max_processes = Match(DECIMAL);
				}
				break;
			}
			State = 4009; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_external_resource_poolContext : ParserRuleContext {
		public Id_Context pool_name;
		public IToken max_cpu_percent;
		public IToken max_memory_percent;
		public IToken max_processes;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode MAX_CPU_PERCENT() { return GetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode CPU() { return GetToken(TSqlParser.CPU, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public ITerminalNode MAX_MEMORY_PERCENT() { return GetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public ITerminalNode MAX_PROCESSES() { return GetToken(TSqlParser.MAX_PROCESSES, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Create_external_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_external_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_external_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_external_resource_pool(this);
		}
	}

	[RuleVersion(0)]
	public Create_external_resource_poolContext create_external_resource_pool() {
		Create_external_resource_poolContext _localctx = new Create_external_resource_poolContext(_ctx, State);
		EnterRule(_localctx, 320, RULE_create_external_resource_pool);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4011; Match(CREATE);
			State = 4012; Match(EXTERNAL);
			State = 4013; Match(RESOURCE);
			State = 4014; Match(POOL);
			State = 4015; _localctx.pool_name = id_();
			State = 4016; Match(WITH);
			State = 4017; Match(LR_BRACKET);
			State = 4018; Match(MAX_CPU_PERCENT);
			State = 4019; Match(EQUAL);
			State = 4020; _localctx.max_cpu_percent = Match(DECIMAL);
			State = 4058;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,375,_ctx) ) {
			case 1:
				{
				State = 4022;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,366,_ctx) ) {
				case 1:
					{
					State = 4021; Match(COMMA);
					}
					break;
				}
				State = 4024; Match(AFFINITY);
				State = 4025; Match(CPU);
				State = 4026; Match(EQUAL);
				State = 4040;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,370,_ctx) ) {
				case 1:
					{
					State = 4027; Match(AUTO);
					}
					break;

				case 2:
					{
					State = 4036;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							State = 4036;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,368,_ctx) ) {
							case 1:
								{
								State = 4029;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,367,_ctx) ) {
								case 1:
									{
									State = 4028; Match(COMMA);
									}
									break;
								}
								State = 4031; Match(DECIMAL);
								State = 4032; Match(TO);
								State = 4033; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 4034; Match(COMMA);
								State = 4035; Match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 4038;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,369,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 4042; Match(NUMANODE);
				State = 4043; Match(EQUAL);
				State = 4054;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 4054;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,373,_ctx) ) {
						case 1:
							{
							State = 4045;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,371,_ctx) ) {
							case 1:
								{
								State = 4044; Match(COMMA);
								}
								break;
							}
							State = 4047; Match(DECIMAL);
							State = 4048; Match(TO);
							State = 4049; Match(DECIMAL);
							}
							break;

						case 2:
							{
							State = 4051;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,372,_ctx) ) {
							case 1:
								{
								State = 4050; Match(COMMA);
								}
								break;
							}
							State = 4053; Match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 4056;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,374,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 4066;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,377,_ctx) ) {
			case 1:
				{
				State = 4061;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,376,_ctx) ) {
				case 1:
					{
					State = 4060; Match(COMMA);
					}
					break;
				}
				State = 4063; Match(MAX_MEMORY_PERCENT);
				State = 4064; Match(EQUAL);
				State = 4065; _localctx.max_memory_percent = Match(DECIMAL);
				}
				break;
			}
			State = 4074;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,379,_ctx) ) {
			case 1:
				{
				State = 4069;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,378,_ctx) ) {
				case 1:
					{
					State = 4068; Match(COMMA);
					}
					break;
				}
				State = 4071; Match(MAX_PROCESSES);
				State = 4072; Match(EQUAL);
				State = 4073; _localctx.max_processes = Match(DECIMAL);
				}
				break;
			}
			State = 4076; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_fulltext_catalogContext : ParserRuleContext {
		public Id_Context catalog_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		public ITerminalNode REORGANIZE() { return GetToken(TSqlParser.REORGANIZE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ACCENT_SENSITIVITY() { return GetToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Alter_fulltext_catalogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_fulltext_catalog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_fulltext_catalog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_fulltext_catalog(this);
		}
	}

	[RuleVersion(0)]
	public Alter_fulltext_catalogContext alter_fulltext_catalog() {
		Alter_fulltext_catalogContext _localctx = new Alter_fulltext_catalogContext(_ctx, State);
		EnterRule(_localctx, 322, RULE_alter_fulltext_catalog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4078; Match(ALTER);
			State = 4079; Match(FULLTEXT);
			State = 4080; Match(CATALOG);
			State = 4081; _localctx.catalog_name = id_();
			State = 4092;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,381,_ctx) ) {
			case 1:
				{
				State = 4082; Match(REBUILD);
				State = 4087;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,380,_ctx) ) {
				case 1:
					{
					State = 4083; Match(WITH);
					State = 4084; Match(ACCENT_SENSITIVITY);
					State = 4085; Match(EQUAL);
					State = 4086;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 4089; Match(REORGANIZE);
				}
				break;

			case 3:
				{
				State = 4090; Match(AS);
				State = 4091; Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_fulltext_catalogContext : ParserRuleContext {
		public Id_Context catalog_name;
		public Id_Context filegroup;
		public IToken rootpath;
		public Id_Context owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ACCENT_SENSITIVITY() { return GetToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_fulltext_catalogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_fulltext_catalog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_fulltext_catalog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_fulltext_catalog(this);
		}
	}

	[RuleVersion(0)]
	public Create_fulltext_catalogContext create_fulltext_catalog() {
		Create_fulltext_catalogContext _localctx = new Create_fulltext_catalogContext(_ctx, State);
		EnterRule(_localctx, 324, RULE_create_fulltext_catalog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4094; Match(CREATE);
			State = 4095; Match(FULLTEXT);
			State = 4096; Match(CATALOG);
			State = 4097; _localctx.catalog_name = id_();
			State = 4101;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,382,_ctx) ) {
			case 1:
				{
				State = 4098; Match(ON);
				State = 4099; Match(FILEGROUP);
				State = 4100; _localctx.filegroup = id_();
				}
				break;
			}
			State = 4106;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,383,_ctx) ) {
			case 1:
				{
				State = 4103; Match(IN);
				State = 4104; Match(PATH);
				State = 4105; _localctx.rootpath = Match(STRING);
				}
				break;
			}
			State = 4112;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,384,_ctx) ) {
			case 1:
				{
				State = 4108; Match(WITH);
				State = 4109; Match(ACCENT_SENSITIVITY);
				State = 4110; Match(EQUAL);
				State = 4111;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 4116;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,385,_ctx) ) {
			case 1:
				{
				State = 4114; Match(AS);
				State = 4115; Match(DEFAULT);
				}
				break;
			}
			State = 4120;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,386,_ctx) ) {
			case 1:
				{
				State = 4118; Match(AUTHORIZATION);
				State = 4119; _localctx.owner_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_fulltext_stoplistContext : ParserRuleContext {
		public Id_Context stoplist_name;
		public IToken stopword;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode LANGUAGE() { return GetToken(TSqlParser.LANGUAGE, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Alter_fulltext_stoplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_fulltext_stoplist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_fulltext_stoplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_fulltext_stoplist(this);
		}
	}

	[RuleVersion(0)]
	public Alter_fulltext_stoplistContext alter_fulltext_stoplist() {
		Alter_fulltext_stoplistContext _localctx = new Alter_fulltext_stoplistContext(_ctx, State);
		EnterRule(_localctx, 326, RULE_alter_fulltext_stoplist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4122; Match(ALTER);
			State = 4123; Match(FULLTEXT);
			State = 4124; Match(STOPLIST);
			State = 4125; _localctx.stoplist_name = id_();
			State = 4139;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,388,_ctx) ) {
			case 1:
				{
				State = 4126; Match(ADD);
				State = 4127; _localctx.stopword = Match(STRING);
				State = 4128; Match(LANGUAGE);
				State = 4129;
				_la = _input.La(1);
				if ( !(((((_la - 1184)) & ~0x3f) == 0 && ((1L << (_la - 1184)) & ((1L << (DECIMAL - 1184)) | (1L << (STRING - 1184)) | (1L << (BINARY - 1184)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				{
				State = 4130; Match(DROP);
				State = 4137;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,387,_ctx) ) {
				case 1:
					{
					State = 4131; _localctx.stopword = Match(STRING);
					State = 4132; Match(LANGUAGE);
					State = 4133;
					_la = _input.La(1);
					if ( !(((((_la - 1184)) & ~0x3f) == 0 && ((1L << (_la - 1184)) & ((1L << (DECIMAL - 1184)) | (1L << (STRING - 1184)) | (1L << (BINARY - 1184)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 2:
					{
					State = 4134; Match(ALL);
					State = 4135;
					_la = _input.La(1);
					if ( !(((((_la - 1184)) & ~0x3f) == 0 && ((1L << (_la - 1184)) & ((1L << (DECIMAL - 1184)) | (1L << (STRING - 1184)) | (1L << (BINARY - 1184)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 3:
					{
					State = 4136; Match(ALL);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_fulltext_stoplistContext : ParserRuleContext {
		public Id_Context stoplist_name;
		public Id_Context database_name;
		public Id_Context source_stoplist_name;
		public Id_Context owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode[] STOPLIST() { return GetTokens(TSqlParser.STOPLIST); }
		public ITerminalNode STOPLIST(int i) {
			return GetToken(TSqlParser.STOPLIST, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode SYSTEM() { return GetToken(TSqlParser.SYSTEM, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Create_fulltext_stoplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_fulltext_stoplist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_fulltext_stoplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_fulltext_stoplist(this);
		}
	}

	[RuleVersion(0)]
	public Create_fulltext_stoplistContext create_fulltext_stoplist() {
		Create_fulltext_stoplistContext _localctx = new Create_fulltext_stoplistContext(_ctx, State);
		EnterRule(_localctx, 328, RULE_create_fulltext_stoplist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4141; Match(CREATE);
			State = 4142; Match(FULLTEXT);
			State = 4143; Match(STOPLIST);
			State = 4144; _localctx.stoplist_name = id_();
			State = 4156;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,391,_ctx) ) {
			case 1:
				{
				State = 4145; Match(FROM);
				State = 4154;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,390,_ctx) ) {
				case 1:
					{
					State = 4149;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,389,_ctx) ) {
					case 1:
						{
						State = 4146; _localctx.database_name = id_();
						State = 4147; Match(DOT);
						}
						break;
					}
					State = 4151; _localctx.source_stoplist_name = id_();
					}
					break;

				case 2:
					{
					State = 4152; Match(SYSTEM);
					State = 4153; Match(STOPLIST);
					}
					break;
				}
				}
				break;
			}
			State = 4160;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,392,_ctx) ) {
			case 1:
				{
				State = 4158; Match(AUTHORIZATION);
				State = 4159; _localctx.owner_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_login_sql_serverContext : ParserRuleContext {
		public Id_Context login_name;
		public IToken password;
		public IToken password_hash;
		public IToken old_password;
		public Id_Context default_database;
		public Id_Context default_laguage;
		public Id_Context credential_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] CREDENTIAL() { return GetTokens(TSqlParser.CREDENTIAL); }
		public ITerminalNode CREDENTIAL(int i) {
			return GetToken(TSqlParser.CREDENTIAL, i);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode DEFAULT_DATABASE() { return GetToken(TSqlParser.DEFAULT_DATABASE, 0); }
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode CHECK_POLICY() { return GetToken(TSqlParser.CHECK_POLICY, 0); }
		public ITerminalNode CHECK_EXPIRATION() { return GetToken(TSqlParser.CHECK_EXPIRATION, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode HASHED() { return GetToken(TSqlParser.HASHED, 0); }
		public ITerminalNode[] MUST_CHANGE() { return GetTokens(TSqlParser.MUST_CHANGE); }
		public ITerminalNode MUST_CHANGE(int i) {
			return GetToken(TSqlParser.MUST_CHANGE, i);
		}
		public ITerminalNode[] UNLOCK() { return GetTokens(TSqlParser.UNLOCK); }
		public ITerminalNode UNLOCK(int i) {
			return GetToken(TSqlParser.UNLOCK, i);
		}
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public Alter_login_sql_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_login_sql_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_login_sql_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_login_sql_server(this);
		}
	}

	[RuleVersion(0)]
	public Alter_login_sql_serverContext alter_login_sql_server() {
		Alter_login_sql_serverContext _localctx = new Alter_login_sql_serverContext(_ctx, State);
		EnterRule(_localctx, 330, RULE_alter_login_sql_server);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4162; Match(ALTER);
			State = 4163; Match(LOGIN);
			State = 4164; _localctx.login_name = id_();
			State = 4232;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,406,_ctx) ) {
			case 1:
				{
				State = 4166;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,393,_ctx) ) {
				case 1:
					{
					State = 4165;
					_la = _input.La(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 4168; Match(WITH);
				State = 4182;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,396,_ctx) ) {
				case 1:
					{
					{
					State = 4169; Match(PASSWORD);
					State = 4170; Match(EQUAL);
					State = 4174;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,394,_ctx) ) {
					case 1:
						{
						State = 4171; _localctx.password = Match(STRING);
						}
						break;

					case 2:
						{
						State = 4172; _localctx.password_hash = Match(BINARY);
						State = 4173; Match(HASHED);
						}
						break;
					}
					}
					State = 4179;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,395,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 4176;
							_la = _input.La(1);
							if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							} 
						}
						State = 4181;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,395,_ctx);
					}
					}
					break;
				}
				State = 4193;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,398,_ctx) ) {
				case 1:
					{
					State = 4184; Match(OLD_PASSWORD);
					State = 4185; Match(EQUAL);
					State = 4186; _localctx.old_password = Match(STRING);
					State = 4190;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,397,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 4187;
							_la = _input.La(1);
							if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							} 
						}
						State = 4192;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,397,_ctx);
					}
					}
					break;
				}
				State = 4198;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,399,_ctx) ) {
				case 1:
					{
					State = 4195; Match(DEFAULT_DATABASE);
					State = 4196; Match(EQUAL);
					State = 4197; _localctx.default_database = id_();
					}
					break;
				}
				State = 4203;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,400,_ctx) ) {
				case 1:
					{
					State = 4200; Match(DEFAULT_LANGUAGE);
					State = 4201; Match(EQUAL);
					State = 4202; _localctx.default_laguage = id_();
					}
					break;
				}
				State = 4208;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,401,_ctx) ) {
				case 1:
					{
					State = 4205; Match(NAME);
					State = 4206; Match(EQUAL);
					State = 4207; _localctx.login_name = id_();
					}
					break;
				}
				State = 4213;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,402,_ctx) ) {
				case 1:
					{
					State = 4210; Match(CHECK_POLICY);
					State = 4211; Match(EQUAL);
					State = 4212;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 4218;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,403,_ctx) ) {
				case 1:
					{
					State = 4215; Match(CHECK_EXPIRATION);
					State = 4216; Match(EQUAL);
					State = 4217;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 4223;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,404,_ctx) ) {
				case 1:
					{
					State = 4220; Match(CREDENTIAL);
					State = 4221; Match(EQUAL);
					State = 4222; _localctx.credential_name = id_();
					}
					break;
				}
				State = 4227;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,405,_ctx) ) {
				case 1:
					{
					State = 4225; Match(NO);
					State = 4226; Match(CREDENTIAL);
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 4229;
				_la = _input.La(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 4230; Match(CREDENTIAL);
				State = 4231; _localctx.credential_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_login_sql_serverContext : ParserRuleContext {
		public Id_Context login_name;
		public IToken password;
		public IToken password_hash;
		public IToken sid;
		public Id_Context default_database;
		public Id_Context default_laguage;
		public Id_Context credential_name;
		public IToken default_language;
		public Id_Context certname;
		public Id_Context asym_key_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode SID() { return GetToken(TSqlParser.SID, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode DEFAULT_DATABASE() { return GetToken(TSqlParser.DEFAULT_DATABASE, 0); }
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode CHECK_EXPIRATION() { return GetToken(TSqlParser.CHECK_EXPIRATION, 0); }
		public ITerminalNode CHECK_POLICY() { return GetToken(TSqlParser.CHECK_POLICY, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode[] BINARY() { return GetTokens(TSqlParser.BINARY); }
		public ITerminalNode BINARY(int i) {
			return GetToken(TSqlParser.BINARY, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode HASHED() { return GetToken(TSqlParser.HASHED, 0); }
		public ITerminalNode[] MUST_CHANGE() { return GetTokens(TSqlParser.MUST_CHANGE); }
		public ITerminalNode MUST_CHANGE(int i) {
			return GetToken(TSqlParser.MUST_CHANGE, i);
		}
		public ITerminalNode[] UNLOCK() { return GetTokens(TSqlParser.UNLOCK); }
		public ITerminalNode UNLOCK(int i) {
			return GetToken(TSqlParser.UNLOCK, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Create_login_sql_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_login_sql_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_login_sql_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_login_sql_server(this);
		}
	}

	[RuleVersion(0)]
	public Create_login_sql_serverContext create_login_sql_server() {
		Create_login_sql_serverContext _localctx = new Create_login_sql_serverContext(_ctx, State);
		EnterRule(_localctx, 332, RULE_create_login_sql_server);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4234; Match(CREATE);
			State = 4235; Match(LOGIN);
			State = 4236; _localctx.login_name = id_();
			State = 4327;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,427,_ctx) ) {
			case 1:
				{
				State = 4237; Match(WITH);
				State = 4251;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,409,_ctx) ) {
				case 1:
					{
					{
					State = 4238; Match(PASSWORD);
					State = 4239; Match(EQUAL);
					State = 4243;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,407,_ctx) ) {
					case 1:
						{
						State = 4240; _localctx.password = Match(STRING);
						}
						break;

					case 2:
						{
						State = 4241; _localctx.password_hash = Match(BINARY);
						State = 4242; Match(HASHED);
						}
						break;
					}
					}
					State = 4248;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,408,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 4245;
							_la = _input.La(1);
							if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							} 
						}
						State = 4250;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,408,_ctx);
					}
					}
					break;
				}
				State = 4259;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,411,_ctx) ) {
				case 1:
					{
					State = 4254;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,410,_ctx) ) {
					case 1:
						{
						State = 4253; Match(COMMA);
						}
						break;
					}
					State = 4256; Match(SID);
					State = 4257; Match(EQUAL);
					State = 4258; _localctx.sid = Match(BINARY);
					}
					break;
				}
				State = 4267;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,413,_ctx) ) {
				case 1:
					{
					State = 4262;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,412,_ctx) ) {
					case 1:
						{
						State = 4261; Match(COMMA);
						}
						break;
					}
					State = 4264; Match(DEFAULT_DATABASE);
					State = 4265; Match(EQUAL);
					State = 4266; _localctx.default_database = id_();
					}
					break;
				}
				State = 4275;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,415,_ctx) ) {
				case 1:
					{
					State = 4270;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,414,_ctx) ) {
					case 1:
						{
						State = 4269; Match(COMMA);
						}
						break;
					}
					State = 4272; Match(DEFAULT_LANGUAGE);
					State = 4273; Match(EQUAL);
					State = 4274; _localctx.default_laguage = id_();
					}
					break;
				}
				State = 4283;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,417,_ctx) ) {
				case 1:
					{
					State = 4278;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,416,_ctx) ) {
					case 1:
						{
						State = 4277; Match(COMMA);
						}
						break;
					}
					State = 4280; Match(CHECK_EXPIRATION);
					State = 4281; Match(EQUAL);
					State = 4282;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 4291;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,419,_ctx) ) {
				case 1:
					{
					State = 4286;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,418,_ctx) ) {
					case 1:
						{
						State = 4285; Match(COMMA);
						}
						break;
					}
					State = 4288; Match(CHECK_POLICY);
					State = 4289; Match(EQUAL);
					State = 4290;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 4299;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,421,_ctx) ) {
				case 1:
					{
					State = 4294;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,420,_ctx) ) {
					case 1:
						{
						State = 4293; Match(COMMA);
						}
						break;
					}
					State = 4296; Match(CREDENTIAL);
					State = 4297; Match(EQUAL);
					State = 4298; _localctx.credential_name = id_();
					}
					break;
				}
				}
				break;

			case 2:
				{
				{
				State = 4301; Match(FROM);
				State = 4325;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,426,_ctx) ) {
				case 1:
					{
					State = 4302; Match(WINDOWS);
					{
					State = 4303; Match(WITH);
					State = 4310;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,423,_ctx) ) {
					case 1:
						{
						State = 4305;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,422,_ctx) ) {
						case 1:
							{
							State = 4304; Match(COMMA);
							}
							break;
						}
						State = 4307; Match(DEFAULT_DATABASE);
						State = 4308; Match(EQUAL);
						State = 4309; _localctx.default_database = id_();
						}
						break;
					}
					State = 4318;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,425,_ctx) ) {
					case 1:
						{
						State = 4313;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,424,_ctx) ) {
						case 1:
							{
							State = 4312; Match(COMMA);
							}
							break;
						}
						State = 4315; Match(DEFAULT_LANGUAGE);
						State = 4316; Match(EQUAL);
						State = 4317; _localctx.default_language = Match(STRING);
						}
						break;
					}
					}
					}
					break;

				case 2:
					{
					State = 4320; Match(CERTIFICATE);
					State = 4321; _localctx.certname = id_();
					}
					break;

				case 3:
					{
					State = 4322; Match(ASYMMETRIC);
					State = 4323; Match(KEY);
					State = 4324; _localctx.asym_key_name = id_();
					}
					break;
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_login_azure_sqlContext : ParserRuleContext {
		public Id_Context login_name;
		public IToken password;
		public IToken old_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public Alter_login_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_login_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_login_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_login_azure_sql(this);
		}
	}

	[RuleVersion(0)]
	public Alter_login_azure_sqlContext alter_login_azure_sql() {
		Alter_login_azure_sqlContext _localctx = new Alter_login_azure_sqlContext(_ctx, State);
		EnterRule(_localctx, 334, RULE_alter_login_azure_sql);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4329; Match(ALTER);
			State = 4330; Match(LOGIN);
			State = 4331; _localctx.login_name = id_();
			State = 4349;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,431,_ctx) ) {
			case 1:
				{
				State = 4333;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,428,_ctx) ) {
				case 1:
					{
					State = 4332;
					_la = _input.La(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 4335; Match(WITH);
				State = 4347;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,430,_ctx) ) {
				case 1:
					{
					State = 4336; Match(PASSWORD);
					State = 4337; Match(EQUAL);
					State = 4338; _localctx.password = Match(STRING);
					State = 4342;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,429,_ctx) ) {
					case 1:
						{
						State = 4339; Match(OLD_PASSWORD);
						State = 4340; Match(EQUAL);
						State = 4341; _localctx.old_password = Match(STRING);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 4344; Match(NAME);
					State = 4345; Match(EQUAL);
					State = 4346; _localctx.login_name = id_();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_login_azure_sqlContext : ParserRuleContext {
		public Id_Context login_name;
		public IToken sid;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode SID() { return GetToken(TSqlParser.SID, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public Create_login_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_login_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_login_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_login_azure_sql(this);
		}
	}

	[RuleVersion(0)]
	public Create_login_azure_sqlContext create_login_azure_sql() {
		Create_login_azure_sqlContext _localctx = new Create_login_azure_sqlContext(_ctx, State);
		EnterRule(_localctx, 336, RULE_create_login_azure_sql);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4351; Match(CREATE);
			State = 4352; Match(LOGIN);
			State = 4353; _localctx.login_name = id_();
			State = 4354; Match(WITH);
			State = 4355; Match(PASSWORD);
			State = 4356; Match(EQUAL);
			State = 4357; Match(STRING);
			State = 4361;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,432,_ctx) ) {
			case 1:
				{
				State = 4358; Match(SID);
				State = 4359; Match(EQUAL);
				State = 4360; _localctx.sid = Match(BINARY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_login_azure_sql_dw_and_pdwContext : ParserRuleContext {
		public Id_Context login_name;
		public IToken password;
		public IToken old_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public ITerminalNode[] MUST_CHANGE() { return GetTokens(TSqlParser.MUST_CHANGE); }
		public ITerminalNode MUST_CHANGE(int i) {
			return GetToken(TSqlParser.MUST_CHANGE, i);
		}
		public ITerminalNode[] UNLOCK() { return GetTokens(TSqlParser.UNLOCK); }
		public ITerminalNode UNLOCK(int i) {
			return GetToken(TSqlParser.UNLOCK, i);
		}
		public Alter_login_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_login_azure_sql_dw_and_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_login_azure_sql_dw_and_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_login_azure_sql_dw_and_pdw(this);
		}
	}

	[RuleVersion(0)]
	public Alter_login_azure_sql_dw_and_pdwContext alter_login_azure_sql_dw_and_pdw() {
		Alter_login_azure_sql_dw_and_pdwContext _localctx = new Alter_login_azure_sql_dw_and_pdwContext(_ctx, State);
		EnterRule(_localctx, 338, RULE_alter_login_azure_sql_dw_and_pdw);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4363; Match(ALTER);
			State = 4364; Match(LOGIN);
			State = 4365; _localctx.login_name = id_();
			State = 4389;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,437,_ctx) ) {
			case 1:
				{
				State = 4367;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,433,_ctx) ) {
				case 1:
					{
					State = 4366;
					_la = _input.La(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 4369; Match(WITH);
				State = 4387;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,436,_ctx) ) {
				case 1:
					{
					State = 4370; Match(PASSWORD);
					State = 4371; Match(EQUAL);
					State = 4372; _localctx.password = Match(STRING);
					State = 4382;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,435,_ctx) ) {
					case 1:
						{
						State = 4373; Match(OLD_PASSWORD);
						State = 4374; Match(EQUAL);
						State = 4375; _localctx.old_password = Match(STRING);
						State = 4379;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,434,_ctx);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
							if ( _alt==1 ) {
								{
								{
								State = 4376;
								_la = _input.La(1);
								if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								} 
							}
							State = 4381;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,434,_ctx);
						}
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 4384; Match(NAME);
					State = 4385; Match(EQUAL);
					State = 4386; _localctx.login_name = id_();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_login_pdwContext : ParserRuleContext {
		public Id_Context loginName;
		public IToken password;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode MUST_CHANGE() { return GetToken(TSqlParser.MUST_CHANGE, 0); }
		public ITerminalNode CHECK_POLICY() { return GetToken(TSqlParser.CHECK_POLICY, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_login_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_login_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_login_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_login_pdw(this);
		}
	}

	[RuleVersion(0)]
	public Create_login_pdwContext create_login_pdw() {
		Create_login_pdwContext _localctx = new Create_login_pdwContext(_ctx, State);
		EnterRule(_localctx, 340, RULE_create_login_pdw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4391; Match(CREATE);
			State = 4392; Match(LOGIN);
			State = 4393; _localctx.loginName = id_();
			State = 4410;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,441,_ctx) ) {
			case 1:
				{
				State = 4394; Match(WITH);
				{
				State = 4395; Match(PASSWORD);
				State = 4396; Match(EQUAL);
				State = 4397; _localctx.password = Match(STRING);
				State = 4399;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,438,_ctx) ) {
				case 1:
					{
					State = 4398; Match(MUST_CHANGE);
					}
					break;
				}
				State = 4406;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,440,_ctx) ) {
				case 1:
					{
					State = 4401; Match(CHECK_POLICY);
					State = 4402; Match(EQUAL);
					State = 4404;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,439,_ctx) ) {
					case 1:
						{
						State = 4403;
						_la = _input.La(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				}
				break;

			case 2:
				{
				State = 4408; Match(FROM);
				State = 4409; Match(WINDOWS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_master_key_sql_serverContext : ParserRuleContext {
		public IToken password;
		public IToken encryption_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] MASTER() { return GetTokens(TSqlParser.MASTER); }
		public ITerminalNode MASTER(int i) {
			return GetToken(TSqlParser.MASTER, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public ITerminalNode REGENERATE() { return GetToken(TSqlParser.REGENERATE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public Alter_master_key_sql_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_master_key_sql_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_master_key_sql_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_master_key_sql_server(this);
		}
	}

	[RuleVersion(0)]
	public Alter_master_key_sql_serverContext alter_master_key_sql_server() {
		Alter_master_key_sql_serverContext _localctx = new Alter_master_key_sql_serverContext(_ctx, State);
		EnterRule(_localctx, 342, RULE_alter_master_key_sql_server);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4412; Match(ALTER);
			State = 4413; Match(MASTER);
			State = 4414; Match(KEY);
			State = 4436;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,444,_ctx) ) {
			case 1:
				{
				State = 4416;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,442,_ctx) ) {
				case 1:
					{
					State = 4415; Match(FORCE);
					}
					break;
				}
				State = 4418; Match(REGENERATE);
				State = 4419; Match(WITH);
				State = 4420; Match(ENCRYPTION);
				State = 4421; Match(BY);
				State = 4422; Match(PASSWORD);
				State = 4423; Match(EQUAL);
				State = 4424; _localctx.password = Match(STRING);
				}
				break;

			case 2:
				{
				State = 4425;
				_la = _input.La(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 4426; Match(ENCRYPTION);
				State = 4427; Match(BY);
				State = 4434;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,443,_ctx) ) {
				case 1:
					{
					State = 4428; Match(SERVICE);
					State = 4429; Match(MASTER);
					State = 4430; Match(KEY);
					}
					break;

				case 2:
					{
					State = 4431; Match(PASSWORD);
					State = 4432; Match(EQUAL);
					State = 4433; _localctx.encryption_password = Match(STRING);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_master_key_sql_serverContext : ParserRuleContext {
		public IToken password;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Create_master_key_sql_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_master_key_sql_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_master_key_sql_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_master_key_sql_server(this);
		}
	}

	[RuleVersion(0)]
	public Create_master_key_sql_serverContext create_master_key_sql_server() {
		Create_master_key_sql_serverContext _localctx = new Create_master_key_sql_serverContext(_ctx, State);
		EnterRule(_localctx, 344, RULE_create_master_key_sql_server);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4438; Match(CREATE);
			State = 4439; Match(MASTER);
			State = 4440; Match(KEY);
			State = 4441; Match(ENCRYPTION);
			State = 4442; Match(BY);
			State = 4443; Match(PASSWORD);
			State = 4444; Match(EQUAL);
			State = 4445; _localctx.password = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_master_key_azure_sqlContext : ParserRuleContext {
		public IToken password;
		public IToken encryption_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] MASTER() { return GetTokens(TSqlParser.MASTER); }
		public ITerminalNode MASTER(int i) {
			return GetToken(TSqlParser.MASTER, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public ITerminalNode REGENERATE() { return GetToken(TSqlParser.REGENERATE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public Alter_master_key_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_master_key_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_master_key_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_master_key_azure_sql(this);
		}
	}

	[RuleVersion(0)]
	public Alter_master_key_azure_sqlContext alter_master_key_azure_sql() {
		Alter_master_key_azure_sqlContext _localctx = new Alter_master_key_azure_sqlContext(_ctx, State);
		EnterRule(_localctx, 346, RULE_alter_master_key_azure_sql);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4447; Match(ALTER);
			State = 4448; Match(MASTER);
			State = 4449; Match(KEY);
			State = 4477;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,447,_ctx) ) {
			case 1:
				{
				State = 4451;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,445,_ctx) ) {
				case 1:
					{
					State = 4450; Match(FORCE);
					}
					break;
				}
				State = 4453; Match(REGENERATE);
				State = 4454; Match(WITH);
				State = 4455; Match(ENCRYPTION);
				State = 4456; Match(BY);
				State = 4457; Match(PASSWORD);
				State = 4458; Match(EQUAL);
				State = 4459; _localctx.password = Match(STRING);
				}
				break;

			case 2:
				{
				State = 4460; Match(ADD);
				State = 4461; Match(ENCRYPTION);
				State = 4462; Match(BY);
				State = 4469;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,446,_ctx) ) {
				case 1:
					{
					State = 4463; Match(SERVICE);
					State = 4464; Match(MASTER);
					State = 4465; Match(KEY);
					}
					break;

				case 2:
					{
					State = 4466; Match(PASSWORD);
					State = 4467; Match(EQUAL);
					State = 4468; _localctx.encryption_password = Match(STRING);
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 4471; Match(DROP);
				State = 4472; Match(ENCRYPTION);
				State = 4473; Match(BY);
				State = 4474; Match(PASSWORD);
				State = 4475; Match(EQUAL);
				State = 4476; _localctx.encryption_password = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_master_key_azure_sqlContext : ParserRuleContext {
		public IToken password;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Create_master_key_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_master_key_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_master_key_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_master_key_azure_sql(this);
		}
	}

	[RuleVersion(0)]
	public Create_master_key_azure_sqlContext create_master_key_azure_sql() {
		Create_master_key_azure_sqlContext _localctx = new Create_master_key_azure_sqlContext(_ctx, State);
		EnterRule(_localctx, 348, RULE_create_master_key_azure_sql);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4479; Match(CREATE);
			State = 4480; Match(MASTER);
			State = 4481; Match(KEY);
			State = 4487;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,448,_ctx) ) {
			case 1:
				{
				State = 4482; Match(ENCRYPTION);
				State = 4483; Match(BY);
				State = 4484; Match(PASSWORD);
				State = 4485; Match(EQUAL);
				State = 4486; _localctx.password = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_message_typeContext : ParserRuleContext {
		public Id_Context message_type_name;
		public Id_Context schema_collection_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode VALIDATION() { return GetToken(TSqlParser.VALIDATION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode EMPTY() { return GetToken(TSqlParser.EMPTY, 0); }
		public ITerminalNode WELL_FORMED_XML() { return GetToken(TSqlParser.WELL_FORMED_XML, 0); }
		public ITerminalNode VALID_XML() { return GetToken(TSqlParser.VALID_XML, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Alter_message_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_message_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_message_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_message_type(this);
		}
	}

	[RuleVersion(0)]
	public Alter_message_typeContext alter_message_type() {
		Alter_message_typeContext _localctx = new Alter_message_typeContext(_ctx, State);
		EnterRule(_localctx, 350, RULE_alter_message_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4489; Match(ALTER);
			State = 4490; Match(MESSAGE);
			State = 4491; Match(TYPE);
			State = 4492; _localctx.message_type_name = id_();
			State = 4493; Match(VALIDATION);
			State = 4494; Match(EQUAL);
			State = 4503;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,449,_ctx) ) {
			case 1:
				{
				State = 4495; Match(NONE);
				}
				break;

			case 2:
				{
				State = 4496; Match(EMPTY);
				}
				break;

			case 3:
				{
				State = 4497; Match(WELL_FORMED_XML);
				}
				break;

			case 4:
				{
				State = 4498; Match(VALID_XML);
				State = 4499; Match(WITH);
				State = 4500; Match(SCHEMA);
				State = 4501; Match(COLLECTION);
				State = 4502; _localctx.schema_collection_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_partition_functionContext : ParserRuleContext {
		public Id_Context partition_function_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode RANGE() { return GetToken(TSqlParser.RANGE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode SPLIT() { return GetToken(TSqlParser.SPLIT, 0); }
		public ITerminalNode MERGE() { return GetToken(TSqlParser.MERGE, 0); }
		public Alter_partition_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_partition_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_partition_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_partition_function(this);
		}
	}

	[RuleVersion(0)]
	public Alter_partition_functionContext alter_partition_function() {
		Alter_partition_functionContext _localctx = new Alter_partition_functionContext(_ctx, State);
		EnterRule(_localctx, 352, RULE_alter_partition_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4505; Match(ALTER);
			State = 4506; Match(PARTITION);
			State = 4507; Match(FUNCTION);
			State = 4508; _localctx.partition_function_name = id_();
			State = 4509; Match(LR_BRACKET);
			State = 4510; Match(RR_BRACKET);
			State = 4511;
			_la = _input.La(1);
			if ( !(_la==MERGE || _la==SPLIT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 4512; Match(RANGE);
			State = 4513; Match(LR_BRACKET);
			State = 4514; Match(DECIMAL);
			State = 4515; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_partition_schemeContext : ParserRuleContext {
		public Id_Context partition_scheme_name;
		public Id_Context file_group_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public ITerminalNode USED() { return GetToken(TSqlParser.USED, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Alter_partition_schemeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_partition_scheme; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_partition_scheme(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_partition_scheme(this);
		}
	}

	[RuleVersion(0)]
	public Alter_partition_schemeContext alter_partition_scheme() {
		Alter_partition_schemeContext _localctx = new Alter_partition_schemeContext(_ctx, State);
		EnterRule(_localctx, 354, RULE_alter_partition_scheme);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4517; Match(ALTER);
			State = 4518; Match(PARTITION);
			State = 4519; Match(SCHEME);
			State = 4520; _localctx.partition_scheme_name = id_();
			State = 4521; Match(NEXT);
			State = 4522; Match(USED);
			State = 4524;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,450,_ctx) ) {
			case 1:
				{
				State = 4523; _localctx.file_group_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_remote_service_bindingContext : ParserRuleContext {
		public Id_Context binding_name;
		public Id_Context user_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode ANONYMOUS() { return GetToken(TSqlParser.ANONYMOUS, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Alter_remote_service_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_remote_service_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_remote_service_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_remote_service_binding(this);
		}
	}

	[RuleVersion(0)]
	public Alter_remote_service_bindingContext alter_remote_service_binding() {
		Alter_remote_service_bindingContext _localctx = new Alter_remote_service_bindingContext(_ctx, State);
		EnterRule(_localctx, 356, RULE_alter_remote_service_binding);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4526; Match(ALTER);
			State = 4527; Match(REMOTE);
			State = 4528; Match(SERVICE);
			State = 4529; Match(BINDING);
			State = 4530; _localctx.binding_name = id_();
			State = 4531; Match(WITH);
			State = 4535;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,451,_ctx) ) {
			case 1:
				{
				State = 4532; Match(USER);
				State = 4533; Match(EQUAL);
				State = 4534; _localctx.user_name = id_();
				}
				break;
			}
			State = 4541;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,452,_ctx) ) {
			case 1:
				{
				State = 4537; Match(COMMA);
				State = 4538; Match(ANONYMOUS);
				State = 4539; Match(EQUAL);
				State = 4540;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_remote_service_bindingContext : ParserRuleContext {
		public Id_Context binding_name;
		public Id_Context owner_name;
		public IToken remote_service_name;
		public Id_Context user_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode[] SERVICE() { return GetTokens(TSqlParser.SERVICE); }
		public ITerminalNode SERVICE(int i) {
			return GetToken(TSqlParser.SERVICE, i);
		}
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode ANONYMOUS() { return GetToken(TSqlParser.ANONYMOUS, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_remote_service_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_remote_service_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_remote_service_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_remote_service_binding(this);
		}
	}

	[RuleVersion(0)]
	public Create_remote_service_bindingContext create_remote_service_binding() {
		Create_remote_service_bindingContext _localctx = new Create_remote_service_bindingContext(_ctx, State);
		EnterRule(_localctx, 358, RULE_create_remote_service_binding);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4543; Match(CREATE);
			State = 4544; Match(REMOTE);
			State = 4545; Match(SERVICE);
			State = 4546; Match(BINDING);
			State = 4547; _localctx.binding_name = id_();
			State = 4550;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,453,_ctx) ) {
			case 1:
				{
				State = 4548; Match(AUTHORIZATION);
				State = 4549; _localctx.owner_name = id_();
				}
				break;
			}
			State = 4552; Match(TO);
			State = 4553; Match(SERVICE);
			State = 4554; _localctx.remote_service_name = Match(STRING);
			State = 4555; Match(WITH);
			State = 4559;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,454,_ctx) ) {
			case 1:
				{
				State = 4556; Match(USER);
				State = 4557; Match(EQUAL);
				State = 4558; _localctx.user_name = id_();
				}
				break;
			}
			State = 4565;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,455,_ctx) ) {
			case 1:
				{
				State = 4561; Match(COMMA);
				State = 4562; Match(ANONYMOUS);
				State = 4563; Match(EQUAL);
				State = 4564;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_resource_poolContext : ParserRuleContext {
		public Id_Context pool_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode MIN_CPU_PERCENT() { return GetToken(TSqlParser.MIN_CPU_PERCENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode MAX_CPU_PERCENT() { return GetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public ITerminalNode CAP_CPU_PERCENT() { return GetToken(TSqlParser.CAP_CPU_PERCENT, 0); }
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode SCHEDULER() { return GetToken(TSqlParser.SCHEDULER, 0); }
		public ITerminalNode MIN_MEMORY_PERCENT() { return GetToken(TSqlParser.MIN_MEMORY_PERCENT, 0); }
		public ITerminalNode MAX_MEMORY_PERCENT() { return GetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public ITerminalNode MIN_IOPS_PER_VOLUME() { return GetToken(TSqlParser.MIN_IOPS_PER_VOLUME, 0); }
		public ITerminalNode MAX_IOPS_PER_VOLUME() { return GetToken(TSqlParser.MAX_IOPS_PER_VOLUME, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Create_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_resource_pool(this);
		}
	}

	[RuleVersion(0)]
	public Create_resource_poolContext create_resource_pool() {
		Create_resource_poolContext _localctx = new Create_resource_poolContext(_ctx, State);
		EnterRule(_localctx, 360, RULE_create_resource_pool);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4567; Match(CREATE);
			State = 4568; Match(RESOURCE);
			State = 4569; Match(POOL);
			State = 4570; _localctx.pool_name = id_();
			State = 4673;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,479,_ctx) ) {
			case 1:
				{
				State = 4571; Match(WITH);
				State = 4572; Match(LR_BRACKET);
				State = 4579;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,457,_ctx) ) {
				case 1:
					{
					State = 4574;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,456,_ctx) ) {
					case 1:
						{
						State = 4573; Match(COMMA);
						}
						break;
					}
					State = 4576; Match(MIN_CPU_PERCENT);
					State = 4577; Match(EQUAL);
					State = 4578; Match(DECIMAL);
					}
					break;
				}
				State = 4587;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,459,_ctx) ) {
				case 1:
					{
					State = 4582;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,458,_ctx) ) {
					case 1:
						{
						State = 4581; Match(COMMA);
						}
						break;
					}
					State = 4584; Match(MAX_CPU_PERCENT);
					State = 4585; Match(EQUAL);
					State = 4586; Match(DECIMAL);
					}
					break;
				}
				State = 4595;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,461,_ctx) ) {
				case 1:
					{
					State = 4590;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,460,_ctx) ) {
					case 1:
						{
						State = 4589; Match(COMMA);
						}
						break;
					}
					State = 4592; Match(CAP_CPU_PERCENT);
					State = 4593; Match(EQUAL);
					State = 4594; Match(DECIMAL);
					}
					break;
				}
				State = 4638;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,470,_ctx) ) {
				case 1:
					{
					State = 4598;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,462,_ctx) ) {
					case 1:
						{
						State = 4597; Match(COMMA);
						}
						break;
					}
					State = 4600; Match(AFFINITY);
					State = 4601; Match(SCHEDULER);
					State = 4602; Match(EQUAL);
					State = 4636;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,469,_ctx) ) {
					case 1:
						{
						State = 4603; Match(AUTO);
						}
						break;

					case 2:
						{
						State = 4604; Match(LR_BRACKET);
						State = 4614;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 4606;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,463,_ctx) ) {
								case 1:
									{
									State = 4605; Match(COMMA);
									}
									break;
								}
								State = 4612;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,464,_ctx) ) {
								case 1:
									{
									State = 4608; Match(DECIMAL);
									}
									break;

								case 2:
									{
									State = 4609; Match(DECIMAL);
									State = 4610; Match(TO);
									State = 4611; Match(DECIMAL);
									}
									break;
								}
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 4616;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,465,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						State = 4618; Match(RR_BRACKET);
						}
						break;

					case 3:
						{
						State = 4619; Match(NUMANODE);
						State = 4620; Match(EQUAL);
						State = 4621; Match(LR_BRACKET);
						State = 4631;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 4623;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,466,_ctx) ) {
								case 1:
									{
									State = 4622; Match(COMMA);
									}
									break;
								}
								State = 4629;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,467,_ctx) ) {
								case 1:
									{
									State = 4625; Match(DECIMAL);
									}
									break;

								case 2:
									{
									State = 4626; Match(DECIMAL);
									State = 4627; Match(TO);
									State = 4628; Match(DECIMAL);
									}
									break;
								}
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 4633;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,468,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						State = 4635; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				State = 4646;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,472,_ctx) ) {
				case 1:
					{
					State = 4641;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,471,_ctx) ) {
					case 1:
						{
						State = 4640; Match(COMMA);
						}
						break;
					}
					State = 4643; Match(MIN_MEMORY_PERCENT);
					State = 4644; Match(EQUAL);
					State = 4645; Match(DECIMAL);
					}
					break;
				}
				State = 4654;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,474,_ctx) ) {
				case 1:
					{
					State = 4649;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,473,_ctx) ) {
					case 1:
						{
						State = 4648; Match(COMMA);
						}
						break;
					}
					State = 4651; Match(MAX_MEMORY_PERCENT);
					State = 4652; Match(EQUAL);
					State = 4653; Match(DECIMAL);
					}
					break;
				}
				State = 4662;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,476,_ctx) ) {
				case 1:
					{
					State = 4657;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,475,_ctx) ) {
					case 1:
						{
						State = 4656; Match(COMMA);
						}
						break;
					}
					State = 4659; Match(MIN_IOPS_PER_VOLUME);
					State = 4660; Match(EQUAL);
					State = 4661; Match(DECIMAL);
					}
					break;
				}
				State = 4670;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,478,_ctx) ) {
				case 1:
					{
					State = 4665;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,477,_ctx) ) {
					case 1:
						{
						State = 4664; Match(COMMA);
						}
						break;
					}
					State = 4667; Match(MAX_IOPS_PER_VOLUME);
					State = 4668; Match(EQUAL);
					State = 4669; Match(DECIMAL);
					}
					break;
				}
				State = 4672; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_resource_governorContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context function_name;
		public IToken max_outstanding_io_per_volume;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode GOVERNOR() { return GetToken(TSqlParser.GOVERNOR, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode CLASSIFIER_FUNCTION() { return GetToken(TSqlParser.CLASSIFIER_FUNCTION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode RESET() { return GetToken(TSqlParser.RESET, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public ITerminalNode MAX_OUTSTANDING_IO_PER_VOLUME() { return GetToken(TSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode RECONFIGURE() { return GetToken(TSqlParser.RECONFIGURE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Alter_resource_governorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_resource_governor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_resource_governor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_resource_governor(this);
		}
	}

	[RuleVersion(0)]
	public Alter_resource_governorContext alter_resource_governor() {
		Alter_resource_governorContext _localctx = new Alter_resource_governorContext(_ctx, State);
		EnterRule(_localctx, 362, RULE_alter_resource_governor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4675; Match(ALTER);
			State = 4676; Match(RESOURCE);
			State = 4677; Match(GOVERNOR);
			State = 4699;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,481,_ctx) ) {
			case 1:
				{
				State = 4678;
				_la = _input.La(1);
				if ( !(_la==DISABLE || _la==RECONFIGURE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				{
				State = 4679; Match(WITH);
				State = 4680; Match(LR_BRACKET);
				State = 4681; Match(CLASSIFIER_FUNCTION);
				State = 4682; Match(EQUAL);
				State = 4688;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,480,_ctx) ) {
				case 1:
					{
					State = 4683; _localctx.schema_name = id_();
					State = 4684; Match(DOT);
					State = 4685; _localctx.function_name = id_();
					}
					break;

				case 2:
					{
					State = 4687; Match(NULL_);
					}
					break;
				}
				State = 4690; Match(RR_BRACKET);
				}
				break;

			case 3:
				{
				State = 4691; Match(RESET);
				State = 4692; Match(STATISTICS);
				}
				break;

			case 4:
				{
				State = 4693; Match(WITH);
				State = 4694; Match(LR_BRACKET);
				State = 4695; Match(MAX_OUTSTANDING_IO_PER_VOLUME);
				State = 4696; Match(EQUAL);
				State = 4697; _localctx.max_outstanding_io_per_volume = Match(DECIMAL);
				State = 4698; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_database_audit_specificationContext : ParserRuleContext {
		public Id_Context audit_specification_name;
		public Id_Context audit_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode[] AUDIT() { return GetTokens(TSqlParser.AUDIT); }
		public ITerminalNode AUDIT(int i) {
			return GetToken(TSqlParser.AUDIT, i);
		}
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public Audit_action_spec_groupContext[] audit_action_spec_group() {
			return GetRuleContexts<Audit_action_spec_groupContext>();
		}
		public Audit_action_spec_groupContext audit_action_spec_group(int i) {
			return GetRuleContext<Audit_action_spec_groupContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Alter_database_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_database_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_database_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_database_audit_specification(this);
		}
	}

	[RuleVersion(0)]
	public Alter_database_audit_specificationContext alter_database_audit_specification() {
		Alter_database_audit_specificationContext _localctx = new Alter_database_audit_specificationContext(_ctx, State);
		EnterRule(_localctx, 364, RULE_alter_database_audit_specification);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4701; Match(ALTER);
			State = 4702; Match(DATABASE);
			State = 4703; Match(AUDIT);
			State = 4704; Match(SPECIFICATION);
			State = 4705; _localctx.audit_specification_name = id_();
			State = 4710;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,482,_ctx) ) {
			case 1:
				{
				State = 4706; Match(FOR);
				State = 4707; Match(SERVER);
				State = 4708; Match(AUDIT);
				State = 4709; _localctx.audit_name = id_();
				}
				break;
			}
			State = 4720;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,484,_ctx) ) {
			case 1:
				{
				State = 4712; audit_action_spec_group();
				State = 4717;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,483,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 4713; Match(COMMA);
						State = 4714; audit_action_spec_group();
						}
						} 
					}
					State = 4719;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,483,_ctx);
				}
				}
				break;
			}
			State = 4728;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,485,_ctx) ) {
			case 1:
				{
				State = 4722; Match(WITH);
				State = 4723; Match(LR_BRACKET);
				State = 4724; Match(STATE);
				State = 4725; Match(EQUAL);
				State = 4726;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 4727; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Audit_action_spec_groupContext : ParserRuleContext {
		public Id_Context audit_action_group_name;
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Audit_action_specificationContext audit_action_specification() {
			return GetRuleContext<Audit_action_specificationContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Audit_action_spec_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_audit_action_spec_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAudit_action_spec_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAudit_action_spec_group(this);
		}
	}

	[RuleVersion(0)]
	public Audit_action_spec_groupContext audit_action_spec_group() {
		Audit_action_spec_groupContext _localctx = new Audit_action_spec_groupContext(_ctx, State);
		EnterRule(_localctx, 366, RULE_audit_action_spec_group);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4730;
			_la = _input.La(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 4731; Match(LR_BRACKET);
			State = 4734;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,486,_ctx) ) {
			case 1:
				{
				State = 4732; audit_action_specification();
				}
				break;

			case 2:
				{
				State = 4733; _localctx.audit_action_group_name = id_();
				}
				break;
			}
			State = 4736; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Audit_action_specificationContext : ParserRuleContext {
		public Action_specificationContext[] action_specification() {
			return GetRuleContexts<Action_specificationContext>();
		}
		public Action_specificationContext action_specification(int i) {
			return GetRuleContext<Action_specificationContext>(i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Audit_securableContext audit_securable() {
			return GetRuleContext<Audit_securableContext>(0);
		}
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public Principal_idContext[] principal_id() {
			return GetRuleContexts<Principal_idContext>();
		}
		public Principal_idContext principal_id(int i) {
			return GetRuleContext<Principal_idContext>(i);
		}
		public Audit_class_nameContext audit_class_name() {
			return GetRuleContext<Audit_class_nameContext>(0);
		}
		public Audit_action_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_audit_action_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAudit_action_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAudit_action_specification(this);
		}
	}

	[RuleVersion(0)]
	public Audit_action_specificationContext audit_action_specification() {
		Audit_action_specificationContext _localctx = new Audit_action_specificationContext(_ctx, State);
		EnterRule(_localctx, 368, RULE_audit_action_specification);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4738; action_specification();
			State = 4743;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,487,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 4739; Match(COMMA);
					State = 4740; action_specification();
					}
					} 
				}
				State = 4745;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,487,_ctx);
			}
			State = 4746; Match(ON);
			State = 4750;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,488,_ctx) ) {
			case 1:
				{
				State = 4747; audit_class_name();
				State = 4748; Match(DOUBLE_COLON);
				}
				break;
			}
			State = 4752; audit_securable();
			State = 4753; Match(BY);
			State = 4754; principal_id();
			State = 4759;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,489,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 4755; Match(COMMA);
					State = 4756; principal_id();
					}
					} 
				}
				State = 4761;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,489,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Action_specificationContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(TSqlParser.SELECT, 0); }
		public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		public ITerminalNode RECEIVE() { return GetToken(TSqlParser.RECEIVE, 0); }
		public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		public Action_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAction_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAction_specification(this);
		}
	}

	[RuleVersion(0)]
	public Action_specificationContext action_specification() {
		Action_specificationContext _localctx = new Action_specificationContext(_ctx, State);
		EnterRule(_localctx, 370, RULE_action_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4762;
			_la = _input.La(1);
			if ( !(_la==DELETE || _la==EXECUTE || _la==INSERT || _la==RECEIVE || _la==REFERENCES || _la==SELECT || _la==UPDATE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Audit_class_nameContext : ParserRuleContext {
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Audit_class_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_audit_class_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAudit_class_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAudit_class_name(this);
		}
	}

	[RuleVersion(0)]
	public Audit_class_nameContext audit_class_name() {
		Audit_class_nameContext _localctx = new Audit_class_nameContext(_ctx, State);
		EnterRule(_localctx, 372, RULE_audit_class_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4764;
			_la = _input.La(1);
			if ( !(_la==OBJECT || _la==SCHEMA || _la==TABLE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Audit_securableContext : ParserRuleContext {
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Audit_securableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_audit_securable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAudit_securable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAudit_securable(this);
		}
	}

	[RuleVersion(0)]
	public Audit_securableContext audit_securable() {
		Audit_securableContext _localctx = new Audit_securableContext(_ctx, State);
		EnterRule(_localctx, 374, RULE_audit_securable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4774;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,491,_ctx) ) {
			case 1:
				{
				State = 4769;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,490,_ctx) ) {
				case 1:
					{
					State = 4766; id_();
					State = 4767; Match(DOT);
					}
					break;
				}
				State = 4771; id_();
				State = 4772; Match(DOT);
				}
				break;
			}
			State = 4776; id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_db_roleContext : ParserRuleContext {
		public Id_Context role_name;
		public Id_Context database_principal;
		public Id_Context new_role_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode MEMBER() { return GetToken(TSqlParser.MEMBER, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Alter_db_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_db_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_db_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_db_role(this);
		}
	}

	[RuleVersion(0)]
	public Alter_db_roleContext alter_db_role() {
		Alter_db_roleContext _localctx = new Alter_db_roleContext(_ctx, State);
		EnterRule(_localctx, 376, RULE_alter_db_role);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4778; Match(ALTER);
			State = 4779; Match(ROLE);
			State = 4780; _localctx.role_name = id_();
			State = 4788;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,492,_ctx) ) {
			case 1:
				{
				State = 4781;
				_la = _input.La(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 4782; Match(MEMBER);
				State = 4783; _localctx.database_principal = id_();
				}
				break;

			case 2:
				{
				State = 4784; Match(WITH);
				State = 4785; Match(NAME);
				State = 4786; Match(EQUAL);
				State = 4787; _localctx.new_role_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_database_audit_specificationContext : ParserRuleContext {
		public Id_Context audit_specification_name;
		public Id_Context audit_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode[] AUDIT() { return GetTokens(TSqlParser.AUDIT); }
		public ITerminalNode AUDIT(int i) {
			return GetToken(TSqlParser.AUDIT, i);
		}
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public Audit_action_spec_groupContext[] audit_action_spec_group() {
			return GetRuleContexts<Audit_action_spec_groupContext>();
		}
		public Audit_action_spec_groupContext audit_action_spec_group(int i) {
			return GetRuleContext<Audit_action_spec_groupContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_database_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_database_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_database_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_database_audit_specification(this);
		}
	}

	[RuleVersion(0)]
	public Create_database_audit_specificationContext create_database_audit_specification() {
		Create_database_audit_specificationContext _localctx = new Create_database_audit_specificationContext(_ctx, State);
		EnterRule(_localctx, 378, RULE_create_database_audit_specification);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4790; Match(CREATE);
			State = 4791; Match(DATABASE);
			State = 4792; Match(AUDIT);
			State = 4793; Match(SPECIFICATION);
			State = 4794; _localctx.audit_specification_name = id_();
			State = 4799;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,493,_ctx) ) {
			case 1:
				{
				State = 4795; Match(FOR);
				State = 4796; Match(SERVER);
				State = 4797; Match(AUDIT);
				State = 4798; _localctx.audit_name = id_();
				}
				break;
			}
			State = 4809;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,495,_ctx) ) {
			case 1:
				{
				State = 4801; audit_action_spec_group();
				State = 4806;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,494,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 4802; Match(COMMA);
						State = 4803; audit_action_spec_group();
						}
						} 
					}
					State = 4808;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,494,_ctx);
				}
				}
				break;
			}
			State = 4817;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,496,_ctx) ) {
			case 1:
				{
				State = 4811; Match(WITH);
				State = 4812; Match(LR_BRACKET);
				State = 4813; Match(STATE);
				State = 4814; Match(EQUAL);
				State = 4815;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 4816; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_db_roleContext : ParserRuleContext {
		public Id_Context role_name;
		public Id_Context owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_db_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_db_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_db_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_db_role(this);
		}
	}

	[RuleVersion(0)]
	public Create_db_roleContext create_db_role() {
		Create_db_roleContext _localctx = new Create_db_roleContext(_ctx, State);
		EnterRule(_localctx, 380, RULE_create_db_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4819; Match(CREATE);
			State = 4820; Match(ROLE);
			State = 4821; _localctx.role_name = id_();
			State = 4824;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,497,_ctx) ) {
			case 1:
				{
				State = 4822; Match(AUTHORIZATION);
				State = 4823; _localctx.owner_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_routeContext : ParserRuleContext {
		public Id_Context route_name;
		public Id_Context owner_name;
		public IToken route_service_name;
		public IToken broker_instance_identifier;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ADDRESS() { return GetToken(TSqlParser.ADDRESS, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode SERVICE_NAME() { return GetToken(TSqlParser.SERVICE_NAME, 0); }
		public ITerminalNode BROKER_INSTANCE() { return GetToken(TSqlParser.BROKER_INSTANCE, 0); }
		public ITerminalNode LIFETIME() { return GetToken(TSqlParser.LIFETIME, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode MIRROR_ADDRESS() { return GetToken(TSqlParser.MIRROR_ADDRESS, 0); }
		public Create_routeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_route; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_route(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_route(this);
		}
	}

	[RuleVersion(0)]
	public Create_routeContext create_route() {
		Create_routeContext _localctx = new Create_routeContext(_ctx, State);
		EnterRule(_localctx, 382, RULE_create_route);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4826; Match(CREATE);
			State = 4827; Match(ROUTE);
			State = 4828; _localctx.route_name = id_();
			State = 4831;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,498,_ctx) ) {
			case 1:
				{
				State = 4829; Match(AUTHORIZATION);
				State = 4830; _localctx.owner_name = id_();
				}
				break;
			}
			State = 4833; Match(WITH);
			State = 4840;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,500,_ctx) ) {
			case 1:
				{
				State = 4835;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,499,_ctx) ) {
				case 1:
					{
					State = 4834; Match(COMMA);
					}
					break;
				}
				State = 4837; Match(SERVICE_NAME);
				State = 4838; Match(EQUAL);
				State = 4839; _localctx.route_service_name = Match(STRING);
				}
				break;
			}
			State = 4848;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,502,_ctx) ) {
			case 1:
				{
				State = 4843;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,501,_ctx) ) {
				case 1:
					{
					State = 4842; Match(COMMA);
					}
					break;
				}
				State = 4845; Match(BROKER_INSTANCE);
				State = 4846; Match(EQUAL);
				State = 4847; _localctx.broker_instance_identifier = Match(STRING);
				}
				break;
			}
			State = 4856;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,504,_ctx) ) {
			case 1:
				{
				State = 4851;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,503,_ctx) ) {
				case 1:
					{
					State = 4850; Match(COMMA);
					}
					break;
				}
				State = 4853; Match(LIFETIME);
				State = 4854; Match(EQUAL);
				State = 4855; Match(DECIMAL);
				}
				break;
			}
			State = 4859;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,505,_ctx) ) {
			case 1:
				{
				State = 4858; Match(COMMA);
				}
				break;
			}
			State = 4861; Match(ADDRESS);
			State = 4862; Match(EQUAL);
			State = 4863; Match(STRING);
			State = 4868;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,506,_ctx) ) {
			case 1:
				{
				State = 4864; Match(COMMA);
				State = 4865; Match(MIRROR_ADDRESS);
				State = 4866; Match(EQUAL);
				State = 4867; Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_ruleContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context rule_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode RULE() { return GetToken(TSqlParser.RULE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Create_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_rule; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_rule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_rule(this);
		}
	}

	[RuleVersion(0)]
	public Create_ruleContext create_rule() {
		Create_ruleContext _localctx = new Create_ruleContext(_ctx, State);
		EnterRule(_localctx, 384, RULE_create_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4870; Match(CREATE);
			State = 4871; Match(RULE);
			State = 4875;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,507,_ctx) ) {
			case 1:
				{
				State = 4872; _localctx.schema_name = id_();
				State = 4873; Match(DOT);
				}
				break;
			}
			State = 4877; _localctx.rule_name = id_();
			State = 4878; Match(AS);
			State = 4879; search_condition(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_sqlContext : ParserRuleContext {
		public Id_Context schema_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] SCHEMA() { return GetTokens(TSqlParser.SCHEMA); }
		public ITerminalNode SCHEMA(int i) {
			return GetToken(TSqlParser.SCHEMA, i);
		}
		public ITerminalNode TRANSFER() { return GetToken(TSqlParser.TRANSFER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode DOUBLE_COLON() { return GetToken(TSqlParser.DOUBLE_COLON, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Alter_schema_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_sql(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_sqlContext alter_schema_sql() {
		Alter_schema_sqlContext _localctx = new Alter_schema_sqlContext(_ctx, State);
		EnterRule(_localctx, 386, RULE_alter_schema_sql);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4881; Match(ALTER);
			State = 4882; Match(SCHEMA);
			State = 4883; _localctx.schema_name = id_();
			State = 4884; Match(TRANSFER);
			State = 4893;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,509,_ctx) ) {
			case 1:
				{
				State = 4890;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,508,_ctx) ) {
				case 1:
					{
					State = 4885; Match(OBJECT);
					}
					break;

				case 2:
					{
					State = 4886; Match(TYPE);
					}
					break;

				case 3:
					{
					State = 4887; Match(XML);
					State = 4888; Match(SCHEMA);
					State = 4889; Match(COLLECTION);
					}
					break;
				}
				State = 4892; Match(DOUBLE_COLON);
				}
				break;
			}
			State = 4895; id_();
			State = 4898;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,510,_ctx) ) {
			case 1:
				{
				State = 4896; Match(DOT);
				State = 4897; id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_schemaContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context owner_name;
		public Id_Context object_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode[] SCHEMA() { return GetTokens(TSqlParser.SCHEMA); }
		public ITerminalNode SCHEMA(int i) {
			return GetToken(TSqlParser.SCHEMA, i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Create_tableContext[] create_table() {
			return GetRuleContexts<Create_tableContext>();
		}
		public Create_tableContext create_table(int i) {
			return GetRuleContext<Create_tableContext>(i);
		}
		public Create_viewContext[] create_view() {
			return GetRuleContexts<Create_viewContext>();
		}
		public Create_viewContext create_view(int i) {
			return GetRuleContext<Create_viewContext>(i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public ITerminalNode[] REVOKE() { return GetTokens(TSqlParser.REVOKE); }
		public ITerminalNode REVOKE(int i) {
			return GetToken(TSqlParser.REVOKE, i);
		}
		public ITerminalNode[] FROM() { return GetTokens(TSqlParser.FROM); }
		public ITerminalNode FROM(int i) {
			return GetToken(TSqlParser.FROM, i);
		}
		public ITerminalNode[] GRANT() { return GetTokens(TSqlParser.GRANT); }
		public ITerminalNode GRANT(int i) {
			return GetToken(TSqlParser.GRANT, i);
		}
		public ITerminalNode[] DENY() { return GetTokens(TSqlParser.DENY); }
		public ITerminalNode DENY(int i) {
			return GetToken(TSqlParser.DENY, i);
		}
		public ITerminalNode[] SELECT() { return GetTokens(TSqlParser.SELECT); }
		public ITerminalNode SELECT(int i) {
			return GetToken(TSqlParser.SELECT, i);
		}
		public ITerminalNode[] INSERT() { return GetTokens(TSqlParser.INSERT); }
		public ITerminalNode INSERT(int i) {
			return GetToken(TSqlParser.INSERT, i);
		}
		public ITerminalNode[] DELETE() { return GetTokens(TSqlParser.DELETE); }
		public ITerminalNode DELETE(int i) {
			return GetToken(TSqlParser.DELETE, i);
		}
		public ITerminalNode[] UPDATE() { return GetTokens(TSqlParser.UPDATE); }
		public ITerminalNode UPDATE(int i) {
			return GetToken(TSqlParser.UPDATE, i);
		}
		public ITerminalNode[] DOUBLE_COLON() { return GetTokens(TSqlParser.DOUBLE_COLON); }
		public ITerminalNode DOUBLE_COLON(int i) {
			return GetToken(TSqlParser.DOUBLE_COLON, i);
		}
		public Create_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_schema(this);
		}
	}

	[RuleVersion(0)]
	public Create_schemaContext create_schema() {
		Create_schemaContext _localctx = new Create_schemaContext(_ctx, State);
		EnterRule(_localctx, 388, RULE_create_schema);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4900; Match(CREATE);
			State = 4901; Match(SCHEMA);
			State = 4909;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,511,_ctx) ) {
			case 1:
				{
				State = 4902; _localctx.schema_name = id_();
				}
				break;

			case 2:
				{
				State = 4903; Match(AUTHORIZATION);
				State = 4904; _localctx.owner_name = id_();
				}
				break;

			case 3:
				{
				State = 4905; _localctx.schema_name = id_();
				State = 4906; Match(AUTHORIZATION);
				State = 4907; _localctx.owner_name = id_();
				}
				break;
			}
			State = 4937;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,515,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 4935;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,514,_ctx) ) {
					case 1:
						{
						State = 4911; create_table();
						}
						break;

					case 2:
						{
						State = 4912; create_view();
						}
						break;

					case 3:
						{
						State = 4913;
						_la = _input.La(1);
						if ( !(_la==DENY || _la==GRANT) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 4914;
						_la = _input.La(1);
						if ( !(_la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 4915; Match(ON);
						State = 4918;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,512,_ctx) ) {
						case 1:
							{
							State = 4916; Match(SCHEMA);
							State = 4917; Match(DOUBLE_COLON);
							}
							break;
						}
						State = 4920; _localctx.object_name = id_();
						State = 4921; Match(TO);
						State = 4922; _localctx.owner_name = id_();
						}
						break;

					case 4:
						{
						State = 4924; Match(REVOKE);
						State = 4925;
						_la = _input.La(1);
						if ( !(_la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 4926; Match(ON);
						State = 4929;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,513,_ctx) ) {
						case 1:
							{
							State = 4927; Match(SCHEMA);
							State = 4928; Match(DOUBLE_COLON);
							}
							break;
						}
						State = 4931; _localctx.object_name = id_();
						State = 4932; Match(FROM);
						State = 4933; _localctx.owner_name = id_();
						}
						break;
					}
					} 
				}
				State = 4939;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,515,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_schema_azure_sql_dw_and_pdwContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_schema_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_schema_azure_sql_dw_and_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_schema_azure_sql_dw_and_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_schema_azure_sql_dw_and_pdw(this);
		}
	}

	[RuleVersion(0)]
	public Create_schema_azure_sql_dw_and_pdwContext create_schema_azure_sql_dw_and_pdw() {
		Create_schema_azure_sql_dw_and_pdwContext _localctx = new Create_schema_azure_sql_dw_and_pdwContext(_ctx, State);
		EnterRule(_localctx, 390, RULE_create_schema_azure_sql_dw_and_pdw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4940; Match(CREATE);
			State = 4941; Match(SCHEMA);
			State = 4942; _localctx.schema_name = id_();
			State = 4945;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,516,_ctx) ) {
			case 1:
				{
				State = 4943; Match(AUTHORIZATION);
				State = 4944; _localctx.owner_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_azure_sql_dw_and_pdwContext : ParserRuleContext {
		public Id_Context schema_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode TRANSFER() { return GetToken(TSqlParser.TRANSFER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode DOUBLE_COLON() { return GetToken(TSqlParser.DOUBLE_COLON, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public Alter_schema_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_azure_sql_dw_and_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_azure_sql_dw_and_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_azure_sql_dw_and_pdw(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_azure_sql_dw_and_pdwContext alter_schema_azure_sql_dw_and_pdw() {
		Alter_schema_azure_sql_dw_and_pdwContext _localctx = new Alter_schema_azure_sql_dw_and_pdwContext(_ctx, State);
		EnterRule(_localctx, 392, RULE_alter_schema_azure_sql_dw_and_pdw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4947; Match(ALTER);
			State = 4948; Match(SCHEMA);
			State = 4949; _localctx.schema_name = id_();
			State = 4950; Match(TRANSFER);
			State = 4953;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,517,_ctx) ) {
			case 1:
				{
				State = 4951; Match(OBJECT);
				State = 4952; Match(DOUBLE_COLON);
				}
				break;
			}
			State = 4955; id_();
			State = 4958;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,518,_ctx) ) {
			case 1:
				{
				State = 4956; Match(DOT);
				State = 4957; Match(ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_search_property_listContext : ParserRuleContext {
		public Id_Context new_list_name;
		public Id_Context database_name;
		public Id_Context source_list_name;
		public Id_Context owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Create_search_property_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_search_property_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_search_property_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_search_property_list(this);
		}
	}

	[RuleVersion(0)]
	public Create_search_property_listContext create_search_property_list() {
		Create_search_property_listContext _localctx = new Create_search_property_listContext(_ctx, State);
		EnterRule(_localctx, 394, RULE_create_search_property_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4960; Match(CREATE);
			State = 4961; Match(SEARCH);
			State = 4962; Match(PROPERTY);
			State = 4963; Match(LIST);
			State = 4964; _localctx.new_list_name = id_();
			State = 4972;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,520,_ctx) ) {
			case 1:
				{
				State = 4965; Match(FROM);
				State = 4969;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,519,_ctx) ) {
				case 1:
					{
					State = 4966; _localctx.database_name = id_();
					State = 4967; Match(DOT);
					}
					break;
				}
				State = 4971; _localctx.source_list_name = id_();
				}
				break;
			}
			State = 4976;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,521,_ctx) ) {
			case 1:
				{
				State = 4974; Match(AUTHORIZATION);
				State = 4975; _localctx.owner_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_security_policyContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context security_policy_name;
		public Id_Context tvf_schema_name;
		public Id_Context security_predicate_function_name;
		public Id_Context column_name_or_arguments;
		public Id_Context table_schema_name;
		public Id_Context name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SECURITY() { return GetToken(TSqlParser.SECURITY, 0); }
		public ITerminalNode POLICY() { return GetToken(TSqlParser.POLICY, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		public ITerminalNode[] PREDICATE() { return GetTokens(TSqlParser.PREDICATE); }
		public ITerminalNode PREDICATE(int i) {
			return GetToken(TSqlParser.PREDICATE, i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] AFTER() { return GetTokens(TSqlParser.AFTER); }
		public ITerminalNode AFTER(int i) {
			return GetToken(TSqlParser.AFTER, i);
		}
		public ITerminalNode[] BEFORE() { return GetTokens(TSqlParser.BEFORE); }
		public ITerminalNode BEFORE(int i) {
			return GetToken(TSqlParser.BEFORE, i);
		}
		public ITerminalNode SCHEMABINDING() { return GetToken(TSqlParser.SCHEMABINDING, 0); }
		public ITerminalNode[] FILTER() { return GetTokens(TSqlParser.FILTER); }
		public ITerminalNode FILTER(int i) {
			return GetToken(TSqlParser.FILTER, i);
		}
		public ITerminalNode[] BLOCK() { return GetTokens(TSqlParser.BLOCK); }
		public ITerminalNode BLOCK(int i) {
			return GetToken(TSqlParser.BLOCK, i);
		}
		public ITerminalNode[] INSERT() { return GetTokens(TSqlParser.INSERT); }
		public ITerminalNode INSERT(int i) {
			return GetToken(TSqlParser.INSERT, i);
		}
		public ITerminalNode[] UPDATE() { return GetTokens(TSqlParser.UPDATE); }
		public ITerminalNode UPDATE(int i) {
			return GetToken(TSqlParser.UPDATE, i);
		}
		public ITerminalNode[] DELETE() { return GetTokens(TSqlParser.DELETE); }
		public ITerminalNode DELETE(int i) {
			return GetToken(TSqlParser.DELETE, i);
		}
		public Create_security_policyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_security_policy; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_security_policy(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_security_policy(this);
		}
	}

	[RuleVersion(0)]
	public Create_security_policyContext create_security_policy() {
		Create_security_policyContext _localctx = new Create_security_policyContext(_ctx, State);
		EnterRule(_localctx, 396, RULE_create_security_policy);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4978; Match(CREATE);
			State = 4979; Match(SECURITY);
			State = 4980; Match(POLICY);
			State = 4984;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,522,_ctx) ) {
			case 1:
				{
				State = 4981; _localctx.schema_name = id_();
				State = 4982; Match(DOT);
				}
				break;
			}
			State = 4986; _localctx.security_policy_name = id_();
			State = 5027;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4988;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,523,_ctx) ) {
					case 1:
						{
						State = 4987; Match(COMMA);
						}
						break;
					}
					State = 4990; Match(ADD);
					State = 4992;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,524,_ctx) ) {
					case 1:
						{
						State = 4991;
						_la = _input.La(1);
						if ( !(_la==BLOCK || _la==FILTER) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					State = 4994; Match(PREDICATE);
					State = 4995; _localctx.tvf_schema_name = id_();
					State = 4996; Match(DOT);
					State = 4997; _localctx.security_predicate_function_name = id_();
					State = 4998; Match(LR_BRACKET);
					State = 5003;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 5000;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,525,_ctx) ) {
							case 1:
								{
								State = 4999; Match(COMMA);
								}
								break;
							}
							State = 5002; _localctx.column_name_or_arguments = id_();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 5005;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,526,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					State = 5007; Match(RR_BRACKET);
					State = 5008; Match(ON);
					State = 5009; _localctx.table_schema_name = id_();
					State = 5010; Match(DOT);
					State = 5011; _localctx.name = id_();
					State = 5024;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,530,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 5022;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,529,_ctx) ) {
							case 1:
								{
								State = 5013;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,527,_ctx) ) {
								case 1:
									{
									State = 5012; Match(COMMA);
									}
									break;
								}
								State = 5015; Match(AFTER);
								State = 5016;
								_la = _input.La(1);
								if ( !(_la==INSERT || _la==UPDATE) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;

							case 2:
								{
								State = 5018;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,528,_ctx) ) {
								case 1:
									{
									State = 5017; Match(COMMA);
									}
									break;
								}
								State = 5020; Match(BEFORE);
								State = 5021;
								_la = _input.La(1);
								if ( !(_la==DELETE || _la==UPDATE) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;
							}
							} 
						}
						State = 5026;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,530,_ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5029;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,531,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 5041;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,533,_ctx) ) {
			case 1:
				{
				State = 5031; Match(WITH);
				State = 5032; Match(LR_BRACKET);
				State = 5033; Match(STATE);
				State = 5034; Match(EQUAL);
				State = 5035;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 5038;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,532,_ctx) ) {
				case 1:
					{
					State = 5036; Match(SCHEMABINDING);
					State = 5037;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 5040; Match(RR_BRACKET);
				}
				break;
			}
			State = 5046;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,534,_ctx) ) {
			case 1:
				{
				State = 5043; Match(NOT);
				State = 5044; Match(FOR);
				State = 5045; Match(REPLICATION);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_sequenceContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context sequence_name;
		public IToken sequnce_increment;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode RESTART() { return GetToken(TSqlParser.RESTART, 0); }
		public ITerminalNode INCREMENT() { return GetToken(TSqlParser.INCREMENT, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode MINVALUE() { return GetToken(TSqlParser.MINVALUE, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] NO() { return GetTokens(TSqlParser.NO); }
		public ITerminalNode NO(int i) {
			return GetToken(TSqlParser.NO, i);
		}
		public ITerminalNode MAXVALUE() { return GetToken(TSqlParser.MAXVALUE, 0); }
		public ITerminalNode CYCLE() { return GetToken(TSqlParser.CYCLE, 0); }
		public ITerminalNode CACHE() { return GetToken(TSqlParser.CACHE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_sequence; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_sequence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_sequence(this);
		}
	}

	[RuleVersion(0)]
	public Alter_sequenceContext alter_sequence() {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(_ctx, State);
		EnterRule(_localctx, 398, RULE_alter_sequence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5048; Match(ALTER);
			State = 5049; Match(SEQUENCE);
			State = 5053;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,535,_ctx) ) {
			case 1:
				{
				State = 5050; _localctx.schema_name = id_();
				State = 5051; Match(DOT);
				}
				break;
			}
			State = 5055; _localctx.sequence_name = id_();
			State = 5061;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,537,_ctx) ) {
			case 1:
				{
				State = 5056; Match(RESTART);
				State = 5059;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,536,_ctx) ) {
				case 1:
					{
					State = 5057; Match(WITH);
					State = 5058; Match(DECIMAL);
					}
					break;
				}
				}
				break;
			}
			State = 5066;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,538,_ctx) ) {
			case 1:
				{
				State = 5063; Match(INCREMENT);
				State = 5064; Match(BY);
				State = 5065; _localctx.sequnce_increment = Match(DECIMAL);
				}
				break;
			}
			State = 5072;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,539,_ctx) ) {
			case 1:
				{
				State = 5068; Match(MINVALUE);
				State = 5069; Match(DECIMAL);
				}
				break;

			case 2:
				{
				State = 5070; Match(NO);
				State = 5071; Match(MINVALUE);
				}
				break;
			}
			State = 5078;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,540,_ctx) ) {
			case 1:
				{
				State = 5074; Match(MAXVALUE);
				State = 5075; Match(DECIMAL);
				}
				break;

			case 2:
				{
				State = 5076; Match(NO);
				State = 5077; Match(MAXVALUE);
				}
				break;
			}
			State = 5083;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,541,_ctx) ) {
			case 1:
				{
				State = 5080; Match(CYCLE);
				}
				break;

			case 2:
				{
				State = 5081; Match(NO);
				State = 5082; Match(CYCLE);
				}
				break;
			}
			State = 5089;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,542,_ctx) ) {
			case 1:
				{
				State = 5085; Match(CACHE);
				State = 5086; Match(DECIMAL);
				}
				break;

			case 2:
				{
				State = 5087; Match(NO);
				State = 5088; Match(CACHE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_sequenceContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context sequence_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode START() { return GetToken(TSqlParser.START, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode INCREMENT() { return GetToken(TSqlParser.INCREMENT, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode MINVALUE() { return GetToken(TSqlParser.MINVALUE, 0); }
		public ITerminalNode[] NO() { return GetTokens(TSqlParser.NO); }
		public ITerminalNode NO(int i) {
			return GetToken(TSqlParser.NO, i);
		}
		public ITerminalNode MAXVALUE() { return GetToken(TSqlParser.MAXVALUE, 0); }
		public ITerminalNode CYCLE() { return GetToken(TSqlParser.CYCLE, 0); }
		public ITerminalNode CACHE() { return GetToken(TSqlParser.CACHE, 0); }
		public ITerminalNode[] MINUS() { return GetTokens(TSqlParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(TSqlParser.MINUS, i);
		}
		public Create_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_sequence; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_sequence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_sequence(this);
		}
	}

	[RuleVersion(0)]
	public Create_sequenceContext create_sequence() {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, State);
		EnterRule(_localctx, 400, RULE_create_sequence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5091; Match(CREATE);
			State = 5092; Match(SEQUENCE);
			State = 5096;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,543,_ctx) ) {
			case 1:
				{
				State = 5093; _localctx.schema_name = id_();
				State = 5094; Match(DOT);
				}
				break;
			}
			State = 5098; _localctx.sequence_name = id_();
			State = 5101;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,544,_ctx) ) {
			case 1:
				{
				State = 5099; Match(AS);
				State = 5100; data_type();
				}
				break;
			}
			State = 5106;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,545,_ctx) ) {
			case 1:
				{
				State = 5103; Match(START);
				State = 5104; Match(WITH);
				State = 5105; Match(DECIMAL);
				}
				break;
			}
			State = 5114;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,547,_ctx) ) {
			case 1:
				{
				State = 5108; Match(INCREMENT);
				State = 5109; Match(BY);
				State = 5111;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,546,_ctx) ) {
				case 1:
					{
					State = 5110; Match(MINUS);
					}
					break;
				}
				State = 5113; Match(DECIMAL);
				}
				break;
			}
			State = 5125;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,550,_ctx) ) {
			case 1:
				{
				State = 5116; Match(MINVALUE);
				State = 5121;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,549,_ctx) ) {
				case 1:
					{
					State = 5118;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,548,_ctx) ) {
					case 1:
						{
						State = 5117; Match(MINUS);
						}
						break;
					}
					State = 5120; Match(DECIMAL);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 5123; Match(NO);
				State = 5124; Match(MINVALUE);
				}
				break;
			}
			State = 5136;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,553,_ctx) ) {
			case 1:
				{
				State = 5127; Match(MAXVALUE);
				State = 5132;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,552,_ctx) ) {
				case 1:
					{
					State = 5129;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,551,_ctx) ) {
					case 1:
						{
						State = 5128; Match(MINUS);
						}
						break;
					}
					State = 5131; Match(DECIMAL);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 5134; Match(NO);
				State = 5135; Match(MAXVALUE);
				}
				break;
			}
			State = 5141;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,554,_ctx) ) {
			case 1:
				{
				State = 5138; Match(CYCLE);
				}
				break;

			case 2:
				{
				State = 5139; Match(NO);
				State = 5140; Match(CYCLE);
				}
				break;
			}
			State = 5149;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,556,_ctx) ) {
			case 1:
				{
				State = 5143; Match(CACHE);
				State = 5145;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,555,_ctx) ) {
				case 1:
					{
					State = 5144; Match(DECIMAL);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 5147; Match(NO);
				State = 5148; Match(CACHE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_auditContext : ParserRuleContext {
		public Id_Context audit_name;
		public IToken filepath;
		public IToken max_rollover_files;
		public IToken max_files;
		public IToken queue_delay;
		public Id_Context event_field_name;
		public Id_Context new_audit_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode APPLICATION_LOG() { return GetToken(TSqlParser.APPLICATION_LOG, 0); }
		public ITerminalNode SECURITY_LOG() { return GetToken(TSqlParser.SECURITY_LOG, 0); }
		public ITerminalNode[] QUEUE_DELAY() { return GetTokens(TSqlParser.QUEUE_DELAY); }
		public ITerminalNode QUEUE_DELAY(int i) {
			return GetToken(TSqlParser.QUEUE_DELAY, i);
		}
		public ITerminalNode[] ON_FAILURE() { return GetTokens(TSqlParser.ON_FAILURE); }
		public ITerminalNode ON_FAILURE(int i) {
			return GetToken(TSqlParser.ON_FAILURE, i);
		}
		public ITerminalNode[] STATE() { return GetTokens(TSqlParser.STATE); }
		public ITerminalNode STATE(int i) {
			return GetToken(TSqlParser.STATE, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public ITerminalNode[] CONTINUE() { return GetTokens(TSqlParser.CONTINUE); }
		public ITerminalNode CONTINUE(int i) {
			return GetToken(TSqlParser.CONTINUE, i);
		}
		public ITerminalNode[] SHUTDOWN() { return GetTokens(TSqlParser.SHUTDOWN); }
		public ITerminalNode SHUTDOWN(int i) {
			return GetToken(TSqlParser.SHUTDOWN, i);
		}
		public ITerminalNode[] FAIL_OPERATION() { return GetTokens(TSqlParser.FAIL_OPERATION); }
		public ITerminalNode FAIL_OPERATION(int i) {
			return GetToken(TSqlParser.FAIL_OPERATION, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode GREATER() { return GetToken(TSqlParser.GREATER, 0); }
		public ITerminalNode LESS() { return GetToken(TSqlParser.LESS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode EXCLAMATION() { return GetToken(TSqlParser.EXCLAMATION, 0); }
		public ITerminalNode[] FILEPATH() { return GetTokens(TSqlParser.FILEPATH); }
		public ITerminalNode FILEPATH(int i) {
			return GetToken(TSqlParser.FILEPATH, i);
		}
		public ITerminalNode[] MAXSIZE() { return GetTokens(TSqlParser.MAXSIZE); }
		public ITerminalNode MAXSIZE(int i) {
			return GetToken(TSqlParser.MAXSIZE, i);
		}
		public ITerminalNode[] MAX_ROLLOVER_FILES() { return GetTokens(TSqlParser.MAX_ROLLOVER_FILES); }
		public ITerminalNode MAX_ROLLOVER_FILES(int i) {
			return GetToken(TSqlParser.MAX_ROLLOVER_FILES, i);
		}
		public ITerminalNode[] MAX_FILES() { return GetTokens(TSqlParser.MAX_FILES); }
		public ITerminalNode MAX_FILES(int i) {
			return GetToken(TSqlParser.MAX_FILES, i);
		}
		public ITerminalNode[] RESERVE_DISK_SPACE() { return GetTokens(TSqlParser.RESERVE_DISK_SPACE); }
		public ITerminalNode RESERVE_DISK_SPACE(int i) {
			return GetToken(TSqlParser.RESERVE_DISK_SPACE, i);
		}
		public ITerminalNode[] UNLIMITED() { return GetTokens(TSqlParser.UNLIMITED); }
		public ITerminalNode UNLIMITED(int i) {
			return GetToken(TSqlParser.UNLIMITED, i);
		}
		public ITerminalNode[] MB() { return GetTokens(TSqlParser.MB); }
		public ITerminalNode MB(int i) {
			return GetToken(TSqlParser.MB, i);
		}
		public ITerminalNode[] GB() { return GetTokens(TSqlParser.GB); }
		public ITerminalNode GB(int i) {
			return GetToken(TSqlParser.GB, i);
		}
		public ITerminalNode[] TB() { return GetTokens(TSqlParser.TB); }
		public ITerminalNode TB(int i) {
			return GetToken(TSqlParser.TB, i);
		}
		public Alter_server_auditContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_audit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_audit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_audit(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_auditContext alter_server_audit() {
		Alter_server_auditContext _localctx = new Alter_server_auditContext(_ctx, State);
		EnterRule(_localctx, 402, RULE_alter_server_audit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5151; Match(ALTER);
			State = 5152; Match(SERVER);
			State = 5153; Match(AUDIT);
			State = 5154; _localctx.audit_name = id_();
			State = 5286;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,581,_ctx) ) {
			case 1:
				{
				State = 5202;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,566,_ctx) ) {
				case 1:
					{
					State = 5155; Match(TO);
					State = 5200;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,565,_ctx) ) {
					case 1:
						{
						State = 5156; Match(FILE);
						{
						State = 5157; Match(LR_BRACKET);
						State = 5194;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,564,_ctx);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
							if ( _alt==1 ) {
								{
								State = 5192;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,563,_ctx) ) {
								case 1:
									{
									State = 5159;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,557,_ctx) ) {
									case 1:
										{
										State = 5158; Match(COMMA);
										}
										break;
									}
									State = 5161; Match(FILEPATH);
									State = 5162; Match(EQUAL);
									State = 5163; _localctx.filepath = Match(STRING);
									}
									break;

								case 2:
									{
									State = 5165;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,558,_ctx) ) {
									case 1:
										{
										State = 5164; Match(COMMA);
										}
										break;
									}
									State = 5167; Match(MAXSIZE);
									State = 5168; Match(EQUAL);
									State = 5172;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,559,_ctx) ) {
									case 1:
										{
										State = 5169; Match(DECIMAL);
										State = 5170;
										_la = _input.La(1);
										if ( !(_la==GB || _la==MB || _la==TB) ) {
										_errHandler.RecoverInline(this);
										} else {
											if (_input.La(1) == TokenConstants.Eof) {
												matchedEOF = true;
											}

											_errHandler.ReportMatch(this);
											Consume();
										}
										}
										break;

									case 2:
										{
										State = 5171; Match(UNLIMITED);
										}
										break;
									}
									}
									break;

								case 3:
									{
									State = 5175;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,560,_ctx) ) {
									case 1:
										{
										State = 5174; Match(COMMA);
										}
										break;
									}
									State = 5177; Match(MAX_ROLLOVER_FILES);
									State = 5178; Match(EQUAL);
									State = 5179;
									_localctx.max_rollover_files = _input.Lt(1);
									_la = _input.La(1);
									if ( !(_la==UNLIMITED || _la==DECIMAL) ) {
										_localctx.max_rollover_files = _errHandler.RecoverInline(this);
									} else {
										if (_input.La(1) == TokenConstants.Eof) {
											matchedEOF = true;
										}

										_errHandler.ReportMatch(this);
										Consume();
									}
									}
									break;

								case 4:
									{
									State = 5181;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,561,_ctx) ) {
									case 1:
										{
										State = 5180; Match(COMMA);
										}
										break;
									}
									State = 5183; Match(MAX_FILES);
									State = 5184; Match(EQUAL);
									State = 5185; _localctx.max_files = Match(DECIMAL);
									}
									break;

								case 5:
									{
									State = 5187;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,562,_ctx) ) {
									case 1:
										{
										State = 5186; Match(COMMA);
										}
										break;
									}
									State = 5189; Match(RESERVE_DISK_SPACE);
									State = 5190; Match(EQUAL);
									State = 5191;
									_la = _input.La(1);
									if ( !(_la==OFF || _la==ON) ) {
									_errHandler.RecoverInline(this);
									} else {
										if (_input.La(1) == TokenConstants.Eof) {
											matchedEOF = true;
										}

										_errHandler.ReportMatch(this);
										Consume();
									}
									}
									break;
								}
								} 
							}
							State = 5196;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,564,_ctx);
						}
						State = 5197; Match(RR_BRACKET);
						}
						}
						break;

					case 2:
						{
						State = 5198; Match(APPLICATION_LOG);
						}
						break;

					case 3:
						{
						State = 5199; Match(SECURITY_LOG);
						}
						break;
					}
					}
					break;
				}
				State = 5230;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,572,_ctx) ) {
				case 1:
					{
					State = 5204; Match(WITH);
					State = 5205; Match(LR_BRACKET);
					State = 5226;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,571,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 5224;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,570,_ctx) ) {
							case 1:
								{
								State = 5207;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,567,_ctx) ) {
								case 1:
									{
									State = 5206; Match(COMMA);
									}
									break;
								}
								State = 5209; Match(QUEUE_DELAY);
								State = 5210; Match(EQUAL);
								State = 5211; _localctx.queue_delay = Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 5213;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,568,_ctx) ) {
								case 1:
									{
									State = 5212; Match(COMMA);
									}
									break;
								}
								State = 5215; Match(ON_FAILURE);
								State = 5216; Match(EQUAL);
								State = 5217;
								_la = _input.La(1);
								if ( !(_la==CONTINUE || _la==FAIL_OPERATION || _la==SHUTDOWN) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;

							case 3:
								{
								State = 5219;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,569,_ctx) ) {
								case 1:
									{
									State = 5218; Match(COMMA);
									}
									break;
								}
								State = 5221; Match(STATE);
								State = 5222; Match(EQUAL);
								State = 5223;
								_la = _input.La(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;
							}
							} 
						}
						State = 5228;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,571,_ctx);
					}
					State = 5229; Match(RR_BRACKET);
					}
					break;
				}
				State = 5278;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,580,_ctx) ) {
				case 1:
					{
					State = 5232; Match(WHERE);
					State = 5276;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,579,_ctx) ) {
					case 1:
						{
						State = 5234;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,573,_ctx) ) {
						case 1:
							{
							State = 5233; Match(COMMA);
							}
							break;
						}
						{
						State = 5237;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,574,_ctx) ) {
						case 1:
							{
							State = 5236; Match(NOT);
							}
							break;
						}
						}
						State = 5239; _localctx.event_field_name = id_();
						State = 5251;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,575,_ctx) ) {
						case 1:
							{
							State = 5240; Match(EQUAL);
							}
							break;

						case 2:
							{
							{
							State = 5241; Match(LESS);
							State = 5242; Match(GREATER);
							}
							}
							break;

						case 3:
							{
							{
							State = 5243; Match(EXCLAMATION);
							State = 5244; Match(EQUAL);
							}
							}
							break;

						case 4:
							{
							State = 5245; Match(GREATER);
							}
							break;

						case 5:
							{
							{
							State = 5246; Match(GREATER);
							State = 5247; Match(EQUAL);
							}
							}
							break;

						case 6:
							{
							State = 5248; Match(LESS);
							}
							break;

						case 7:
							{
							State = 5249; Match(LESS);
							State = 5250; Match(EQUAL);
							}
							break;
						}
						State = 5253;
						_la = _input.La(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 2:
						{
						State = 5256;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,576,_ctx) ) {
						case 1:
							{
							State = 5255; Match(COMMA);
							}
							break;
						}
						State = 5258;
						_la = _input.La(1);
						if ( !(_la==AND || _la==OR) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 5260;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,577,_ctx) ) {
						case 1:
							{
							State = 5259; Match(NOT);
							}
							break;
						}
						State = 5273;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,578,_ctx) ) {
						case 1:
							{
							State = 5262; Match(EQUAL);
							}
							break;

						case 2:
							{
							{
							State = 5263; Match(LESS);
							State = 5264; Match(GREATER);
							}
							}
							break;

						case 3:
							{
							{
							State = 5265; Match(EXCLAMATION);
							State = 5266; Match(EQUAL);
							}
							}
							break;

						case 4:
							{
							State = 5267; Match(GREATER);
							}
							break;

						case 5:
							{
							{
							State = 5268; Match(GREATER);
							State = 5269; Match(EQUAL);
							}
							}
							break;

						case 6:
							{
							State = 5270; Match(LESS);
							}
							break;

						case 7:
							{
							State = 5271; Match(LESS);
							State = 5272; Match(EQUAL);
							}
							break;
						}
						State = 5275;
						_la = _input.La(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 5280; Match(REMOVE);
				State = 5281; Match(WHERE);
				}
				break;

			case 3:
				{
				State = 5282; Match(MODIFY);
				State = 5283; Match(NAME);
				State = 5284; Match(EQUAL);
				State = 5285; _localctx.new_audit_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_server_auditContext : ParserRuleContext {
		public Id_Context audit_name;
		public IToken filepath;
		public IToken max_rollover_files;
		public IToken max_files;
		public IToken queue_delay;
		public Id_Context audit_guid;
		public Id_Context event_field_name;
		public Id_Context new_audit_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode APPLICATION_LOG() { return GetToken(TSqlParser.APPLICATION_LOG, 0); }
		public ITerminalNode SECURITY_LOG() { return GetToken(TSqlParser.SECURITY_LOG, 0); }
		public ITerminalNode[] QUEUE_DELAY() { return GetTokens(TSqlParser.QUEUE_DELAY); }
		public ITerminalNode QUEUE_DELAY(int i) {
			return GetToken(TSqlParser.QUEUE_DELAY, i);
		}
		public ITerminalNode[] ON_FAILURE() { return GetTokens(TSqlParser.ON_FAILURE); }
		public ITerminalNode ON_FAILURE(int i) {
			return GetToken(TSqlParser.ON_FAILURE, i);
		}
		public ITerminalNode[] STATE() { return GetTokens(TSqlParser.STATE); }
		public ITerminalNode STATE(int i) {
			return GetToken(TSqlParser.STATE, i);
		}
		public ITerminalNode[] AUDIT_GUID() { return GetTokens(TSqlParser.AUDIT_GUID); }
		public ITerminalNode AUDIT_GUID(int i) {
			return GetToken(TSqlParser.AUDIT_GUID, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public ITerminalNode[] CONTINUE() { return GetTokens(TSqlParser.CONTINUE); }
		public ITerminalNode CONTINUE(int i) {
			return GetToken(TSqlParser.CONTINUE, i);
		}
		public ITerminalNode[] SHUTDOWN() { return GetTokens(TSqlParser.SHUTDOWN); }
		public ITerminalNode SHUTDOWN(int i) {
			return GetToken(TSqlParser.SHUTDOWN, i);
		}
		public ITerminalNode[] FAIL_OPERATION() { return GetTokens(TSqlParser.FAIL_OPERATION); }
		public ITerminalNode FAIL_OPERATION(int i) {
			return GetToken(TSqlParser.FAIL_OPERATION, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode GREATER() { return GetToken(TSqlParser.GREATER, 0); }
		public ITerminalNode LESS() { return GetToken(TSqlParser.LESS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode EXCLAMATION() { return GetToken(TSqlParser.EXCLAMATION, 0); }
		public ITerminalNode[] FILEPATH() { return GetTokens(TSqlParser.FILEPATH); }
		public ITerminalNode FILEPATH(int i) {
			return GetToken(TSqlParser.FILEPATH, i);
		}
		public ITerminalNode[] MAXSIZE() { return GetTokens(TSqlParser.MAXSIZE); }
		public ITerminalNode MAXSIZE(int i) {
			return GetToken(TSqlParser.MAXSIZE, i);
		}
		public ITerminalNode[] MAX_ROLLOVER_FILES() { return GetTokens(TSqlParser.MAX_ROLLOVER_FILES); }
		public ITerminalNode MAX_ROLLOVER_FILES(int i) {
			return GetToken(TSqlParser.MAX_ROLLOVER_FILES, i);
		}
		public ITerminalNode[] MAX_FILES() { return GetTokens(TSqlParser.MAX_FILES); }
		public ITerminalNode MAX_FILES(int i) {
			return GetToken(TSqlParser.MAX_FILES, i);
		}
		public ITerminalNode[] RESERVE_DISK_SPACE() { return GetTokens(TSqlParser.RESERVE_DISK_SPACE); }
		public ITerminalNode RESERVE_DISK_SPACE(int i) {
			return GetToken(TSqlParser.RESERVE_DISK_SPACE, i);
		}
		public ITerminalNode[] UNLIMITED() { return GetTokens(TSqlParser.UNLIMITED); }
		public ITerminalNode UNLIMITED(int i) {
			return GetToken(TSqlParser.UNLIMITED, i);
		}
		public ITerminalNode[] MB() { return GetTokens(TSqlParser.MB); }
		public ITerminalNode MB(int i) {
			return GetToken(TSqlParser.MB, i);
		}
		public ITerminalNode[] GB() { return GetTokens(TSqlParser.GB); }
		public ITerminalNode GB(int i) {
			return GetToken(TSqlParser.GB, i);
		}
		public ITerminalNode[] TB() { return GetTokens(TSqlParser.TB); }
		public ITerminalNode TB(int i) {
			return GetToken(TSqlParser.TB, i);
		}
		public Create_server_auditContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_server_audit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_server_audit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_server_audit(this);
		}
	}

	[RuleVersion(0)]
	public Create_server_auditContext create_server_audit() {
		Create_server_auditContext _localctx = new Create_server_auditContext(_ctx, State);
		EnterRule(_localctx, 404, RULE_create_server_audit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5288; Match(CREATE);
			State = 5289; Match(SERVER);
			State = 5290; Match(AUDIT);
			State = 5291; _localctx.audit_name = id_();
			State = 5429;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,607,_ctx) ) {
			case 1:
				{
				State = 5339;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,591,_ctx) ) {
				case 1:
					{
					State = 5292; Match(TO);
					State = 5337;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,590,_ctx) ) {
					case 1:
						{
						State = 5293; Match(FILE);
						{
						State = 5294; Match(LR_BRACKET);
						State = 5331;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,589,_ctx);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
							if ( _alt==1 ) {
								{
								State = 5329;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,588,_ctx) ) {
								case 1:
									{
									State = 5296;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,582,_ctx) ) {
									case 1:
										{
										State = 5295; Match(COMMA);
										}
										break;
									}
									State = 5298; Match(FILEPATH);
									State = 5299; Match(EQUAL);
									State = 5300; _localctx.filepath = Match(STRING);
									}
									break;

								case 2:
									{
									State = 5302;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,583,_ctx) ) {
									case 1:
										{
										State = 5301; Match(COMMA);
										}
										break;
									}
									State = 5304; Match(MAXSIZE);
									State = 5305; Match(EQUAL);
									State = 5309;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,584,_ctx) ) {
									case 1:
										{
										State = 5306; Match(DECIMAL);
										State = 5307;
										_la = _input.La(1);
										if ( !(_la==GB || _la==MB || _la==TB) ) {
										_errHandler.RecoverInline(this);
										} else {
											if (_input.La(1) == TokenConstants.Eof) {
												matchedEOF = true;
											}

											_errHandler.ReportMatch(this);
											Consume();
										}
										}
										break;

									case 2:
										{
										State = 5308; Match(UNLIMITED);
										}
										break;
									}
									}
									break;

								case 3:
									{
									State = 5312;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,585,_ctx) ) {
									case 1:
										{
										State = 5311; Match(COMMA);
										}
										break;
									}
									State = 5314; Match(MAX_ROLLOVER_FILES);
									State = 5315; Match(EQUAL);
									State = 5316;
									_localctx.max_rollover_files = _input.Lt(1);
									_la = _input.La(1);
									if ( !(_la==UNLIMITED || _la==DECIMAL) ) {
										_localctx.max_rollover_files = _errHandler.RecoverInline(this);
									} else {
										if (_input.La(1) == TokenConstants.Eof) {
											matchedEOF = true;
										}

										_errHandler.ReportMatch(this);
										Consume();
									}
									}
									break;

								case 4:
									{
									State = 5318;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,586,_ctx) ) {
									case 1:
										{
										State = 5317; Match(COMMA);
										}
										break;
									}
									State = 5320; Match(MAX_FILES);
									State = 5321; Match(EQUAL);
									State = 5322; _localctx.max_files = Match(DECIMAL);
									}
									break;

								case 5:
									{
									State = 5324;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,587,_ctx) ) {
									case 1:
										{
										State = 5323; Match(COMMA);
										}
										break;
									}
									State = 5326; Match(RESERVE_DISK_SPACE);
									State = 5327; Match(EQUAL);
									State = 5328;
									_la = _input.La(1);
									if ( !(_la==OFF || _la==ON) ) {
									_errHandler.RecoverInline(this);
									} else {
										if (_input.La(1) == TokenConstants.Eof) {
											matchedEOF = true;
										}

										_errHandler.ReportMatch(this);
										Consume();
									}
									}
									break;
								}
								} 
							}
							State = 5333;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,589,_ctx);
						}
						State = 5334; Match(RR_BRACKET);
						}
						}
						break;

					case 2:
						{
						State = 5335; Match(APPLICATION_LOG);
						}
						break;

					case 3:
						{
						State = 5336; Match(SECURITY_LOG);
						}
						break;
					}
					}
					break;
				}
				State = 5373;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,598,_ctx) ) {
				case 1:
					{
					State = 5341; Match(WITH);
					State = 5342; Match(LR_BRACKET);
					State = 5369;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,597,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 5367;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,596,_ctx) ) {
							case 1:
								{
								State = 5344;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,592,_ctx) ) {
								case 1:
									{
									State = 5343; Match(COMMA);
									}
									break;
								}
								State = 5346; Match(QUEUE_DELAY);
								State = 5347; Match(EQUAL);
								State = 5348; _localctx.queue_delay = Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 5350;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,593,_ctx) ) {
								case 1:
									{
									State = 5349; Match(COMMA);
									}
									break;
								}
								State = 5352; Match(ON_FAILURE);
								State = 5353; Match(EQUAL);
								State = 5354;
								_la = _input.La(1);
								if ( !(_la==CONTINUE || _la==FAIL_OPERATION || _la==SHUTDOWN) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;

							case 3:
								{
								State = 5356;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,594,_ctx) ) {
								case 1:
									{
									State = 5355; Match(COMMA);
									}
									break;
								}
								State = 5358; Match(STATE);
								State = 5359; Match(EQUAL);
								State = 5360;
								_la = _input.La(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;

							case 4:
								{
								State = 5362;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,595,_ctx) ) {
								case 1:
									{
									State = 5361; Match(COMMA);
									}
									break;
								}
								State = 5364; Match(AUDIT_GUID);
								State = 5365; Match(EQUAL);
								State = 5366; _localctx.audit_guid = id_();
								}
								break;
							}
							} 
						}
						State = 5371;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,597,_ctx);
					}
					State = 5372; Match(RR_BRACKET);
					}
					break;
				}
				State = 5421;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,606,_ctx) ) {
				case 1:
					{
					State = 5375; Match(WHERE);
					State = 5419;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,605,_ctx) ) {
					case 1:
						{
						State = 5377;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,599,_ctx) ) {
						case 1:
							{
							State = 5376; Match(COMMA);
							}
							break;
						}
						{
						State = 5380;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,600,_ctx) ) {
						case 1:
							{
							State = 5379; Match(NOT);
							}
							break;
						}
						}
						State = 5382; _localctx.event_field_name = id_();
						State = 5394;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,601,_ctx) ) {
						case 1:
							{
							State = 5383; Match(EQUAL);
							}
							break;

						case 2:
							{
							{
							State = 5384; Match(LESS);
							State = 5385; Match(GREATER);
							}
							}
							break;

						case 3:
							{
							{
							State = 5386; Match(EXCLAMATION);
							State = 5387; Match(EQUAL);
							}
							}
							break;

						case 4:
							{
							State = 5388; Match(GREATER);
							}
							break;

						case 5:
							{
							{
							State = 5389; Match(GREATER);
							State = 5390; Match(EQUAL);
							}
							}
							break;

						case 6:
							{
							State = 5391; Match(LESS);
							}
							break;

						case 7:
							{
							State = 5392; Match(LESS);
							State = 5393; Match(EQUAL);
							}
							break;
						}
						State = 5396;
						_la = _input.La(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 2:
						{
						State = 5399;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,602,_ctx) ) {
						case 1:
							{
							State = 5398; Match(COMMA);
							}
							break;
						}
						State = 5401;
						_la = _input.La(1);
						if ( !(_la==AND || _la==OR) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 5403;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,603,_ctx) ) {
						case 1:
							{
							State = 5402; Match(NOT);
							}
							break;
						}
						State = 5416;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,604,_ctx) ) {
						case 1:
							{
							State = 5405; Match(EQUAL);
							}
							break;

						case 2:
							{
							{
							State = 5406; Match(LESS);
							State = 5407; Match(GREATER);
							}
							}
							break;

						case 3:
							{
							{
							State = 5408; Match(EXCLAMATION);
							State = 5409; Match(EQUAL);
							}
							}
							break;

						case 4:
							{
							State = 5410; Match(GREATER);
							}
							break;

						case 5:
							{
							{
							State = 5411; Match(GREATER);
							State = 5412; Match(EQUAL);
							}
							}
							break;

						case 6:
							{
							State = 5413; Match(LESS);
							}
							break;

						case 7:
							{
							State = 5414; Match(LESS);
							State = 5415; Match(EQUAL);
							}
							break;
						}
						State = 5418;
						_la = _input.La(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 5423; Match(REMOVE);
				State = 5424; Match(WHERE);
				}
				break;

			case 3:
				{
				State = 5425; Match(MODIFY);
				State = 5426; Match(NAME);
				State = 5427; Match(EQUAL);
				State = 5428; _localctx.new_audit_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_audit_specificationContext : ParserRuleContext {
		public Id_Context audit_specification_name;
		public Id_Context audit_name;
		public Id_Context audit_action_group_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] SERVER() { return GetTokens(TSqlParser.SERVER); }
		public ITerminalNode SERVER(int i) {
			return GetToken(TSqlParser.SERVER, i);
		}
		public ITerminalNode[] AUDIT() { return GetTokens(TSqlParser.AUDIT); }
		public ITerminalNode AUDIT(int i) {
			return GetToken(TSqlParser.AUDIT, i);
		}
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		public ITerminalNode[] DROP() { return GetTokens(TSqlParser.DROP); }
		public ITerminalNode DROP(int i) {
			return GetToken(TSqlParser.DROP, i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Alter_server_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_audit_specification(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_audit_specificationContext alter_server_audit_specification() {
		Alter_server_audit_specificationContext _localctx = new Alter_server_audit_specificationContext(_ctx, State);
		EnterRule(_localctx, 406, RULE_alter_server_audit_specification);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5431; Match(ALTER);
			State = 5432; Match(SERVER);
			State = 5433; Match(AUDIT);
			State = 5434; Match(SPECIFICATION);
			State = 5435; _localctx.audit_specification_name = id_();
			State = 5440;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,608,_ctx) ) {
			case 1:
				{
				State = 5436; Match(FOR);
				State = 5437; Match(SERVER);
				State = 5438; Match(AUDIT);
				State = 5439; _localctx.audit_name = id_();
				}
				break;
			}
			State = 5449;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,609,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 5442;
					_la = _input.La(1);
					if ( !(_la==ADD || _la==DROP) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5443; Match(LR_BRACKET);
					State = 5444; _localctx.audit_action_group_name = id_();
					State = 5445; Match(RR_BRACKET);
					}
					} 
				}
				State = 5451;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,609,_ctx);
			}
			State = 5458;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,610,_ctx) ) {
			case 1:
				{
				State = 5452; Match(WITH);
				State = 5453; Match(LR_BRACKET);
				State = 5454; Match(STATE);
				State = 5455; Match(EQUAL);
				State = 5456;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 5457; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_server_audit_specificationContext : ParserRuleContext {
		public Id_Context audit_specification_name;
		public Id_Context audit_name;
		public Id_Context audit_action_group_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode[] SERVER() { return GetTokens(TSqlParser.SERVER); }
		public ITerminalNode SERVER(int i) {
			return GetToken(TSqlParser.SERVER, i);
		}
		public ITerminalNode[] AUDIT() { return GetTokens(TSqlParser.AUDIT); }
		public ITerminalNode AUDIT(int i) {
			return GetToken(TSqlParser.AUDIT, i);
		}
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_server_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_server_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_server_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_server_audit_specification(this);
		}
	}

	[RuleVersion(0)]
	public Create_server_audit_specificationContext create_server_audit_specification() {
		Create_server_audit_specificationContext _localctx = new Create_server_audit_specificationContext(_ctx, State);
		EnterRule(_localctx, 408, RULE_create_server_audit_specification);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5460; Match(CREATE);
			State = 5461; Match(SERVER);
			State = 5462; Match(AUDIT);
			State = 5463; Match(SPECIFICATION);
			State = 5464; _localctx.audit_specification_name = id_();
			State = 5469;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,611,_ctx) ) {
			case 1:
				{
				State = 5465; Match(FOR);
				State = 5466; Match(SERVER);
				State = 5467; Match(AUDIT);
				State = 5468; _localctx.audit_name = id_();
				}
				break;
			}
			State = 5478;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,612,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 5471; Match(ADD);
					State = 5472; Match(LR_BRACKET);
					State = 5473; _localctx.audit_action_group_name = id_();
					State = 5474; Match(RR_BRACKET);
					}
					} 
				}
				State = 5480;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,612,_ctx);
			}
			State = 5487;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,613,_ctx) ) {
			case 1:
				{
				State = 5481; Match(WITH);
				State = 5482; Match(LR_BRACKET);
				State = 5483; Match(STATE);
				State = 5484; Match(EQUAL);
				State = 5485;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 5486; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_configurationContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode CONFIGURATION() { return GetToken(TSqlParser.CONFIGURATION, 0); }
		public ITerminalNode[] SET() { return GetTokens(TSqlParser.SET); }
		public ITerminalNode SET(int i) {
			return GetToken(TSqlParser.SET, i);
		}
		public ITerminalNode PROCESS() { return GetToken(TSqlParser.PROCESS, 0); }
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode DIAGNOSTICS() { return GetToken(TSqlParser.DIAGNOSTICS, 0); }
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode FAILOVER() { return GetToken(TSqlParser.FAILOVER, 0); }
		public ITerminalNode CLUSTER() { return GetToken(TSqlParser.CLUSTER, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode HADR() { return GetToken(TSqlParser.HADR, 0); }
		public ITerminalNode CONTEXT() { return GetToken(TSqlParser.CONTEXT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode BUFFER() { return GetToken(TSqlParser.BUFFER, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public ITerminalNode EXTENSION() { return GetToken(TSqlParser.EXTENSION, 0); }
		public ITerminalNode SOFTNUMA() { return GetToken(TSqlParser.SOFTNUMA, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LOCAL() { return GetToken(TSqlParser.LOCAL, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode CPU() { return GetToken(TSqlParser.CPU, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		public ITerminalNode MAX_SIZE() { return GetToken(TSqlParser.MAX_SIZE, 0); }
		public ITerminalNode MAX_FILES() { return GetToken(TSqlParser.MAX_FILES, 0); }
		public ITerminalNode VERBOSELOGGING() { return GetToken(TSqlParser.VERBOSELOGGING, 0); }
		public ITerminalNode SQLDUMPERFLAGS() { return GetToken(TSqlParser.SQLDUMPERFLAGS, 0); }
		public ITerminalNode SQLDUMPERPATH() { return GetToken(TSqlParser.SQLDUMPERPATH, 0); }
		public ITerminalNode SQLDUMPERTIMEOUT() { return GetToken(TSqlParser.SQLDUMPERTIMEOUT, 0); }
		public ITerminalNode FAILURECONDITIONLEVEL() { return GetToken(TSqlParser.FAILURECONDITIONLEVEL, 0); }
		public ITerminalNode HEALTHCHECKTIMEOUT() { return GetToken(TSqlParser.HEALTHCHECKTIMEOUT, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode FILENAME() { return GetToken(TSqlParser.FILENAME, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode KB() { return GetToken(TSqlParser.KB, 0); }
		public ITerminalNode MB() { return GetToken(TSqlParser.MB, 0); }
		public ITerminalNode GB() { return GetToken(TSqlParser.GB, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Alter_server_configurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_configuration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_configuration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_configuration(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_configurationContext alter_server_configuration() {
		Alter_server_configurationContext _localctx = new Alter_server_configurationContext(_ctx, State);
		EnterRule(_localctx, 410, RULE_alter_server_configuration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5489; Match(ALTER);
			State = 5490; Match(SERVER);
			State = 5491; Match(CONFIGURATION);
			State = 5492; Match(SET);
			{
			State = 5598;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,628,_ctx) ) {
			case 1:
				{
				State = 5493; Match(PROCESS);
				State = 5494; Match(AFFINITY);
				State = 5530;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,623,_ctx) ) {
				case 1:
					{
					State = 5495; Match(CPU);
					State = 5496; Match(EQUAL);
					State = 5512;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,618,_ctx) ) {
					case 1:
						{
						State = 5497; Match(AUTO);
						}
						break;

					case 2:
						{
						State = 5508;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								State = 5508;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,616,_ctx) ) {
								case 1:
									{
									State = 5499;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,614,_ctx) ) {
									case 1:
										{
										State = 5498; Match(COMMA);
										}
										break;
									}
									State = 5501; Match(DECIMAL);
									}
									break;

								case 2:
									{
									State = 5503;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,615,_ctx) ) {
									case 1:
										{
										State = 5502; Match(COMMA);
										}
										break;
									}
									State = 5505; Match(DECIMAL);
									State = 5506; Match(TO);
									State = 5507; Match(DECIMAL);
									}
									break;
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 5510;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,617,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 5514; Match(NUMANODE);
					State = 5515; Match(EQUAL);
					State = 5526;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							State = 5526;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,621,_ctx) ) {
							case 1:
								{
								State = 5517;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,619,_ctx) ) {
								case 1:
									{
									State = 5516; Match(COMMA);
									}
									break;
								}
								State = 5519; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 5521;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,620,_ctx) ) {
								case 1:
									{
									State = 5520; Match(COMMA);
									}
									break;
								}
								State = 5523; Match(DECIMAL);
								State = 5524; Match(TO);
								State = 5525; Match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 5528;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,622,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 5532; Match(DIAGNOSTICS);
				State = 5533; Match(LOG);
				State = 5549;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,625,_ctx) ) {
				case 1:
					{
					State = 5534; Match(ON);
					}
					break;

				case 2:
					{
					State = 5535; Match(OFF);
					}
					break;

				case 3:
					{
					State = 5536; Match(PATH);
					State = 5537; Match(EQUAL);
					State = 5538;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 4:
					{
					State = 5539; Match(MAX_SIZE);
					State = 5540; Match(EQUAL);
					State = 5544;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,624,_ctx) ) {
					case 1:
						{
						State = 5541; Match(DECIMAL);
						State = 5542; Match(MB);
						}
						break;

					case 2:
						{
						State = 5543; Match(DEFAULT);
						}
						break;
					}
					}
					break;

				case 5:
					{
					State = 5546; Match(MAX_FILES);
					State = 5547; Match(EQUAL);
					State = 5548;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==DECIMAL) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 5551; Match(FAILOVER);
				State = 5552; Match(CLUSTER);
				State = 5553; Match(PROPERTY);
				State = 5571;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,626,_ctx) ) {
				case 1:
					{
					State = 5554; Match(VERBOSELOGGING);
					State = 5555; Match(EQUAL);
					State = 5556;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 2:
					{
					State = 5557; Match(SQLDUMPERFLAGS);
					State = 5558; Match(EQUAL);
					State = 5559;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 3:
					{
					State = 5560; Match(SQLDUMPERPATH);
					State = 5561; Match(EQUAL);
					State = 5562;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 4:
					{
					State = 5563; Match(SQLDUMPERTIMEOUT);
					State = 5564;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 5:
					{
					State = 5565; Match(FAILURECONDITIONLEVEL);
					State = 5566; Match(EQUAL);
					State = 5567;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 6:
					{
					State = 5568; Match(HEALTHCHECKTIMEOUT);
					State = 5569; Match(EQUAL);
					State = 5570;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==DECIMAL) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 4:
				{
				State = 5573; Match(HADR);
				State = 5574; Match(CLUSTER);
				State = 5575; Match(CONTEXT);
				State = 5576; Match(EQUAL);
				State = 5577;
				_la = _input.La(1);
				if ( !(_la==LOCAL || _la==STRING) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 5:
				{
				State = 5578; Match(BUFFER);
				State = 5579; Match(POOL);
				State = 5580; Match(EXTENSION);
				State = 5593;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,627,_ctx) ) {
				case 1:
					{
					State = 5581; Match(ON);
					State = 5582; Match(LR_BRACKET);
					State = 5583; Match(FILENAME);
					State = 5584; Match(EQUAL);
					State = 5585; Match(STRING);
					State = 5586; Match(COMMA);
					State = 5587; Match(SIZE);
					State = 5588; Match(EQUAL);
					State = 5589; Match(DECIMAL);
					State = 5590;
					_la = _input.La(1);
					if ( !(_la==GB || _la==KB || _la==MB) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5591; Match(RR_BRACKET);
					}
					break;

				case 2:
					{
					State = 5592; Match(OFF);
					}
					break;
				}
				}
				break;

			case 6:
				{
				State = 5595; Match(SET);
				State = 5596; Match(SOFTNUMA);
				State = 5597;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_roleContext : ParserRuleContext {
		public Id_Context server_role_name;
		public Id_Context server_principal;
		public Id_Context new_server_role_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode MEMBER() { return GetToken(TSqlParser.MEMBER, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Alter_server_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_role(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_roleContext alter_server_role() {
		Alter_server_roleContext _localctx = new Alter_server_roleContext(_ctx, State);
		EnterRule(_localctx, 412, RULE_alter_server_role);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5600; Match(ALTER);
			State = 5601; Match(SERVER);
			State = 5602; Match(ROLE);
			State = 5603; _localctx.server_role_name = id_();
			State = 5611;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,629,_ctx) ) {
			case 1:
				{
				State = 5604;
				_la = _input.La(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 5605; Match(MEMBER);
				State = 5606; _localctx.server_principal = id_();
				}
				break;

			case 2:
				{
				State = 5607; Match(WITH);
				State = 5608; Match(NAME);
				State = 5609; Match(EQUAL);
				State = 5610; _localctx.new_server_role_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_server_roleContext : ParserRuleContext {
		public Id_Context server_role;
		public Id_Context server_principal;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_server_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_server_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_server_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_server_role(this);
		}
	}

	[RuleVersion(0)]
	public Create_server_roleContext create_server_role() {
		Create_server_roleContext _localctx = new Create_server_roleContext(_ctx, State);
		EnterRule(_localctx, 414, RULE_create_server_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5613; Match(CREATE);
			State = 5614; Match(SERVER);
			State = 5615; Match(ROLE);
			State = 5616; _localctx.server_role = id_();
			State = 5619;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,630,_ctx) ) {
			case 1:
				{
				State = 5617; Match(AUTHORIZATION);
				State = 5618; _localctx.server_principal = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_role_pdwContext : ParserRuleContext {
		public Id_Context server_role_name;
		public Id_Context login;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode MEMBER() { return GetToken(TSqlParser.MEMBER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Alter_server_role_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_role_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_role_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_role_pdw(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_role_pdwContext alter_server_role_pdw() {
		Alter_server_role_pdwContext _localctx = new Alter_server_role_pdwContext(_ctx, State);
		EnterRule(_localctx, 416, RULE_alter_server_role_pdw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5621; Match(ALTER);
			State = 5622; Match(SERVER);
			State = 5623; Match(ROLE);
			State = 5624; _localctx.server_role_name = id_();
			State = 5625;
			_la = _input.La(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 5626; Match(MEMBER);
			State = 5627; _localctx.login = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_serviceContext : ParserRuleContext {
		public Id_Context modified_service_name;
		public Id_Context schema_name;
		public Id_Context queue_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public Opt_arg_clauseContext[] opt_arg_clause() {
			return GetRuleContexts<Opt_arg_clauseContext>();
		}
		public Opt_arg_clauseContext opt_arg_clause(int i) {
			return GetRuleContext<Opt_arg_clauseContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_serviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_service; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_service(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_service(this);
		}
	}

	[RuleVersion(0)]
	public Alter_serviceContext alter_service() {
		Alter_serviceContext _localctx = new Alter_serviceContext(_ctx, State);
		EnterRule(_localctx, 418, RULE_alter_service);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5629; Match(ALTER);
			State = 5630; Match(SERVICE);
			State = 5631; _localctx.modified_service_name = id_();
			State = 5640;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,632,_ctx) ) {
			case 1:
				{
				State = 5632; Match(ON);
				State = 5633; Match(QUEUE);
				State = 5637;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,631,_ctx) ) {
				case 1:
					{
					State = 5634; _localctx.schema_name = id_();
					State = 5635; Match(DOT);
					}
					break;
				}
				State = 5639; _localctx.queue_name = id_();
				}
				break;
			}
			State = 5653;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,634,_ctx) ) {
			case 1:
				{
				State = 5642; Match(LR_BRACKET);
				State = 5643; opt_arg_clause();
				State = 5648;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,633,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 5644; Match(COMMA);
						State = 5645; opt_arg_clause();
						}
						} 
					}
					State = 5650;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,633,_ctx);
				}
				State = 5651; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_arg_clauseContext : ParserRuleContext {
		public Id_Context modified_contract_name;
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Opt_arg_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_arg_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpt_arg_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpt_arg_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_arg_clauseContext opt_arg_clause() {
		Opt_arg_clauseContext _localctx = new Opt_arg_clauseContext(_ctx, State);
		EnterRule(_localctx, 420, RULE_opt_arg_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5655;
			_la = _input.La(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 5656; Match(CONTRACT);
			State = 5657; _localctx.modified_contract_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_serviceContext : ParserRuleContext {
		public Id_Context create_service_name;
		public Id_Context owner_name;
		public Id_Context schema_name;
		public Id_Context queue_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] DEFAULT() { return GetTokens(TSqlParser.DEFAULT); }
		public ITerminalNode DEFAULT(int i) {
			return GetToken(TSqlParser.DEFAULT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_serviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_service; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_service(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_service(this);
		}
	}

	[RuleVersion(0)]
	public Create_serviceContext create_service() {
		Create_serviceContext _localctx = new Create_serviceContext(_ctx, State);
		EnterRule(_localctx, 422, RULE_create_service);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5659; Match(CREATE);
			State = 5660; Match(SERVICE);
			State = 5661; _localctx.create_service_name = id_();
			State = 5664;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,635,_ctx) ) {
			case 1:
				{
				State = 5662; Match(AUTHORIZATION);
				State = 5663; _localctx.owner_name = id_();
				}
				break;
			}
			State = 5666; Match(ON);
			State = 5667; Match(QUEUE);
			State = 5671;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,636,_ctx) ) {
			case 1:
				{
				State = 5668; _localctx.schema_name = id_();
				State = 5669; Match(DOT);
				}
				break;
			}
			State = 5673; _localctx.queue_name = id_();
			State = 5687;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,640,_ctx) ) {
			case 1:
				{
				State = 5674; Match(LR_BRACKET);
				State = 5682;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 5676;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,637,_ctx) ) {
						case 1:
							{
							State = 5675; Match(COMMA);
							}
							break;
						}
						State = 5680;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,638,_ctx) ) {
						case 1:
							{
							State = 5678; id_();
							}
							break;

						case 2:
							{
							State = 5679; Match(DEFAULT);
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 5684;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,639,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 5686; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_service_master_keyContext : ParserRuleContext {
		public IToken acold_account_name;
		public IToken old_password;
		public IToken new_account_name;
		public IToken new_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode REGENERATE() { return GetToken(TSqlParser.REGENERATE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public ITerminalNode OLD_ACCOUNT() { return GetToken(TSqlParser.OLD_ACCOUNT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public ITerminalNode NEW_ACCOUNT() { return GetToken(TSqlParser.NEW_ACCOUNT, 0); }
		public ITerminalNode NEW_PASSWORD() { return GetToken(TSqlParser.NEW_PASSWORD, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Alter_service_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_service_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_service_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_service_master_key(this);
		}
	}

	[RuleVersion(0)]
	public Alter_service_master_keyContext alter_service_master_key() {
		Alter_service_master_keyContext _localctx = new Alter_service_master_keyContext(_ctx, State);
		EnterRule(_localctx, 424, RULE_alter_service_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5689; Match(ALTER);
			State = 5690; Match(SERVICE);
			State = 5691; Match(MASTER);
			State = 5692; Match(KEY);
			State = 5714;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,643,_ctx) ) {
			case 1:
				{
				State = 5694;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,641,_ctx) ) {
				case 1:
					{
					State = 5693; Match(FORCE);
					}
					break;
				}
				State = 5696; Match(REGENERATE);
				}
				break;

			case 2:
				{
				{
				State = 5697; Match(WITH);
				State = 5712;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,642,_ctx) ) {
				case 1:
					{
					State = 5698; Match(OLD_ACCOUNT);
					State = 5699; Match(EQUAL);
					State = 5700; _localctx.acold_account_name = Match(STRING);
					State = 5701; Match(COMMA);
					State = 5702; Match(OLD_PASSWORD);
					State = 5703; Match(EQUAL);
					State = 5704; _localctx.old_password = Match(STRING);
					}
					break;

				case 2:
					{
					State = 5705; Match(NEW_ACCOUNT);
					State = 5706; Match(EQUAL);
					State = 5707; _localctx.new_account_name = Match(STRING);
					State = 5708; Match(COMMA);
					State = 5709; Match(NEW_PASSWORD);
					State = 5710; Match(EQUAL);
					State = 5711; _localctx.new_password = Match(STRING);
					}
					break;
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_symmetric_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public Id_Context certificate_name;
		public IToken password;
		public Id_Context symmetric_key_name;
		public Id_Context Asym_key_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] SYMMETRIC() { return GetTokens(TSqlParser.SYMMETRIC); }
		public ITerminalNode SYMMETRIC(int i) {
			return GetToken(TSqlParser.SYMMETRIC, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Alter_symmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_symmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_symmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_symmetric_key(this);
		}
	}

	[RuleVersion(0)]
	public Alter_symmetric_keyContext alter_symmetric_key() {
		Alter_symmetric_keyContext _localctx = new Alter_symmetric_keyContext(_ctx, State);
		EnterRule(_localctx, 426, RULE_alter_symmetric_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5716; Match(ALTER);
			State = 5717; Match(SYMMETRIC);
			State = 5718; Match(KEY);
			State = 5719; _localctx.key_name = id_();
			{
			State = 5720;
			_la = _input.La(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 5721; Match(ENCRYPTION);
			State = 5722; Match(BY);
			State = 5734;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,644,_ctx) ) {
			case 1:
				{
				State = 5723; Match(CERTIFICATE);
				State = 5724; _localctx.certificate_name = id_();
				}
				break;

			case 2:
				{
				State = 5725; Match(PASSWORD);
				State = 5726; Match(EQUAL);
				State = 5727; _localctx.password = Match(STRING);
				}
				break;

			case 3:
				{
				State = 5728; Match(SYMMETRIC);
				State = 5729; Match(KEY);
				State = 5730; _localctx.symmetric_key_name = id_();
				}
				break;

			case 4:
				{
				State = 5731; Match(ASYMMETRIC);
				State = 5732; Match(KEY);
				State = 5733; _localctx.Asym_key_name = id_();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_synonymContext : ParserRuleContext {
		public Id_Context schema_name_1;
		public Id_Context synonym_name;
		public Id_Context server_name;
		public Id_Context database_name;
		public Id_Context schema_name_2;
		public Id_Context object_name;
		public Id_Context database_or_schema2;
		public Id_Context schema_id_2_or_object_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SYNONYM() { return GetToken(TSqlParser.SYNONYM, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Create_synonymContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_synonym; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_synonym(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_synonym(this);
		}
	}

	[RuleVersion(0)]
	public Create_synonymContext create_synonym() {
		Create_synonymContext _localctx = new Create_synonymContext(_ctx, State);
		EnterRule(_localctx, 428, RULE_create_synonym);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5736; Match(CREATE);
			State = 5737; Match(SYNONYM);
			State = 5741;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,645,_ctx) ) {
			case 1:
				{
				State = 5738; _localctx.schema_name_1 = id_();
				State = 5739; Match(DOT);
				}
				break;
			}
			State = 5743; _localctx.synonym_name = id_();
			State = 5744; Match(FOR);
			State = 5771;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,651,_ctx) ) {
			case 1:
				{
				State = 5748;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,646,_ctx) ) {
				case 1:
					{
					State = 5745; _localctx.server_name = id_();
					State = 5746; Match(DOT);
					}
					break;
				}
				State = 5753;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,647,_ctx) ) {
				case 1:
					{
					State = 5750; _localctx.database_name = id_();
					State = 5751; Match(DOT);
					}
					break;
				}
				State = 5758;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,648,_ctx) ) {
				case 1:
					{
					State = 5755; _localctx.schema_name_2 = id_();
					State = 5756; Match(DOT);
					}
					break;
				}
				State = 5760; _localctx.object_name = id_();
				}
				break;

			case 2:
				{
				State = 5764;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,649,_ctx) ) {
				case 1:
					{
					State = 5761; _localctx.database_or_schema2 = id_();
					State = 5762; Match(DOT);
					}
					break;
				}
				State = 5769;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,650,_ctx) ) {
				case 1:
					{
					State = 5766; _localctx.schema_id_2_or_object_name = id_();
					State = 5767; Match(DOT);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_userContext : ParserRuleContext {
		public Id_Context username;
		public Id_Context newusername;
		public Id_Context schema_name;
		public Id_Context loginame;
		public IToken lcid;
		public Id_Context language_name_or_alias;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] NAME() { return GetTokens(TSqlParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(TSqlParser.NAME, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] DEFAULT_SCHEMA() { return GetTokens(TSqlParser.DEFAULT_SCHEMA); }
		public ITerminalNode DEFAULT_SCHEMA(int i) {
			return GetToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public ITerminalNode[] LOGIN() { return GetTokens(TSqlParser.LOGIN); }
		public ITerminalNode LOGIN(int i) {
			return GetToken(TSqlParser.LOGIN, i);
		}
		public ITerminalNode[] PASSWORD() { return GetTokens(TSqlParser.PASSWORD); }
		public ITerminalNode PASSWORD(int i) {
			return GetToken(TSqlParser.PASSWORD, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] DEFAULT_LANGUAGE() { return GetTokens(TSqlParser.DEFAULT_LANGUAGE); }
		public ITerminalNode DEFAULT_LANGUAGE(int i) {
			return GetToken(TSqlParser.DEFAULT_LANGUAGE, i);
		}
		public ITerminalNode[] ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return GetTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public ITerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return GetToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode[] NULL_() { return GetTokens(TSqlParser.NULL_); }
		public ITerminalNode NULL_(int i) {
			return GetToken(TSqlParser.NULL_, i);
		}
		public ITerminalNode[] NONE() { return GetTokens(TSqlParser.NONE); }
		public ITerminalNode NONE(int i) {
			return GetToken(TSqlParser.NONE, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] OLD_PASSWORD() { return GetTokens(TSqlParser.OLD_PASSWORD); }
		public ITerminalNode OLD_PASSWORD(int i) {
			return GetToken(TSqlParser.OLD_PASSWORD, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public Alter_userContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_user; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_user(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_user(this);
		}
	}

	[RuleVersion(0)]
	public Alter_userContext alter_user() {
		Alter_userContext _localctx = new Alter_userContext(_ctx, State);
		EnterRule(_localctx, 430, RULE_alter_user);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5773; Match(ALTER);
			State = 5774; Match(USER);
			State = 5775; _localctx.username = id_();
			State = 5776; Match(WITH);
			State = 5827;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 5827;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,661,_ctx) ) {
					case 1:
						{
						State = 5778;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,652,_ctx) ) {
						case 1:
							{
							State = 5777; Match(COMMA);
							}
							break;
						}
						State = 5780; Match(NAME);
						State = 5781; Match(EQUAL);
						State = 5782; _localctx.newusername = id_();
						}
						break;

					case 2:
						{
						State = 5784;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,653,_ctx) ) {
						case 1:
							{
							State = 5783; Match(COMMA);
							}
							break;
						}
						State = 5786; Match(DEFAULT_SCHEMA);
						State = 5787; Match(EQUAL);
						State = 5790;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,654,_ctx) ) {
						case 1:
							{
							State = 5788; _localctx.schema_name = id_();
							}
							break;

						case 2:
							{
							State = 5789; Match(NULL_);
							}
							break;
						}
						}
						break;

					case 3:
						{
						State = 5793;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,655,_ctx) ) {
						case 1:
							{
							State = 5792; Match(COMMA);
							}
							break;
						}
						State = 5795; Match(LOGIN);
						State = 5796; Match(EQUAL);
						State = 5797; _localctx.loginame = id_();
						}
						break;

					case 4:
						{
						State = 5799;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,656,_ctx) ) {
						case 1:
							{
							State = 5798; Match(COMMA);
							}
							break;
						}
						State = 5801; Match(PASSWORD);
						State = 5802; Match(EQUAL);
						State = 5803; Match(STRING);
						State = 5807;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 5804; Match(OLD_PASSWORD);
								State = 5805; Match(EQUAL);
								State = 5806; Match(STRING);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 5809;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,657,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						break;

					case 5:
						{
						State = 5812;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,658,_ctx) ) {
						case 1:
							{
							State = 5811; Match(COMMA);
							}
							break;
						}
						State = 5814; Match(DEFAULT_LANGUAGE);
						State = 5815; Match(EQUAL);
						State = 5819;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,659,_ctx) ) {
						case 1:
							{
							State = 5816; Match(NONE);
							}
							break;

						case 2:
							{
							State = 5817; _localctx.lcid = Match(DECIMAL);
							}
							break;

						case 3:
							{
							State = 5818; _localctx.language_name_or_alias = id_();
							}
							break;
						}
						}
						break;

					case 6:
						{
						State = 5822;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,660,_ctx) ) {
						case 1:
							{
							State = 5821; Match(COMMA);
							}
							break;
						}
						State = 5824; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
						State = 5825; Match(EQUAL);
						State = 5826;
						_la = _input.La(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5829;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,662,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_userContext : ParserRuleContext {
		public Id_Context user_name;
		public Id_Context login_name;
		public Id_Context schema_name;
		public Id_Context windows_principal;
		public Id_Context language_name_or_alias;
		public IToken password;
		public Id_Context Azure_Active_Directory_principal;
		public Id_Context cert_name;
		public Id_Context asym_key_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode[] DEFAULT_SCHEMA() { return GetTokens(TSqlParser.DEFAULT_SCHEMA); }
		public ITerminalNode DEFAULT_SCHEMA(int i) {
			return GetToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return GetTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public ITerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return GetToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode[] DEFAULT_LANGUAGE() { return GetTokens(TSqlParser.DEFAULT_LANGUAGE); }
		public ITerminalNode DEFAULT_LANGUAGE(int i) {
			return GetToken(TSqlParser.DEFAULT_LANGUAGE, i);
		}
		public ITerminalNode[] SID() { return GetTokens(TSqlParser.SID); }
		public ITerminalNode SID(int i) {
			return GetToken(TSqlParser.SID, i);
		}
		public ITerminalNode[] BINARY() { return GetTokens(TSqlParser.BINARY); }
		public ITerminalNode BINARY(int i) {
			return GetToken(TSqlParser.BINARY, i);
		}
		public ITerminalNode[] NONE() { return GetTokens(TSqlParser.NONE); }
		public ITerminalNode NONE(int i) {
			return GetToken(TSqlParser.NONE, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode WITHOUT() { return GetToken(TSqlParser.WITHOUT, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Create_userContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_user; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_user(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_user(this);
		}
	}

	[RuleVersion(0)]
	public Create_userContext create_user() {
		Create_userContext _localctx = new Create_userContext(_ctx, State);
		EnterRule(_localctx, 432, RULE_create_user);
		int _la;
		try {
			int _alt;
			State = 5977;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,690,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5831; Match(CREATE);
				State = 5832; Match(USER);
				State = 5833; _localctx.user_name = id_();
				State = 5837;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,663,_ctx) ) {
				case 1:
					{
					State = 5834;
					_la = _input.La(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5835; Match(LOGIN);
					State = 5836; _localctx.login_name = id_();
					}
					break;
				}
				State = 5857;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,668,_ctx) ) {
				case 1:
					{
					State = 5839; Match(WITH);
					State = 5854;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,667,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 5852;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,666,_ctx) ) {
							case 1:
								{
								State = 5841;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,664,_ctx) ) {
								case 1:
									{
									State = 5840; Match(COMMA);
									}
									break;
								}
								State = 5843; Match(DEFAULT_SCHEMA);
								State = 5844; Match(EQUAL);
								State = 5845; _localctx.schema_name = id_();
								}
								break;

							case 2:
								{
								State = 5847;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,665,_ctx) ) {
								case 1:
									{
									State = 5846; Match(COMMA);
									}
									break;
								}
								State = 5849; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								State = 5850; Match(EQUAL);
								State = 5851;
								_la = _input.La(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;
							}
							} 
						}
						State = 5856;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,667,_ctx);
					}
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5859; Match(CREATE);
				State = 5860; Match(USER);
				State = 5941;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,684,_ctx) ) {
				case 1:
					{
					State = 5861; _localctx.windows_principal = id_();
					State = 5896;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,676,_ctx) ) {
					case 1:
						{
						State = 5862; Match(WITH);
						State = 5893;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,675,_ctx);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
							if ( _alt==1 ) {
								{
								State = 5891;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,674,_ctx) ) {
								case 1:
									{
									State = 5864;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,669,_ctx) ) {
									case 1:
										{
										State = 5863; Match(COMMA);
										}
										break;
									}
									State = 5866; Match(DEFAULT_SCHEMA);
									State = 5867; Match(EQUAL);
									State = 5868; _localctx.schema_name = id_();
									}
									break;

								case 2:
									{
									State = 5870;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,670,_ctx) ) {
									case 1:
										{
										State = 5869; Match(COMMA);
										}
										break;
									}
									State = 5872; Match(DEFAULT_LANGUAGE);
									State = 5873; Match(EQUAL);
									State = 5877;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,671,_ctx) ) {
									case 1:
										{
										State = 5874; Match(NONE);
										}
										break;

									case 2:
										{
										State = 5875; Match(DECIMAL);
										}
										break;

									case 3:
										{
										State = 5876; _localctx.language_name_or_alias = id_();
										}
										break;
									}
									}
									break;

								case 3:
									{
									State = 5880;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,672,_ctx) ) {
									case 1:
										{
										State = 5879; Match(COMMA);
										}
										break;
									}
									State = 5882; Match(SID);
									State = 5883; Match(EQUAL);
									State = 5884; Match(BINARY);
									}
									break;

								case 4:
									{
									State = 5886;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,673,_ctx) ) {
									case 1:
										{
										State = 5885; Match(COMMA);
										}
										break;
									}
									State = 5888; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
									State = 5889; Match(EQUAL);
									State = 5890;
									_la = _input.La(1);
									if ( !(_la==OFF || _la==ON) ) {
									_errHandler.RecoverInline(this);
									} else {
										if (_input.La(1) == TokenConstants.Eof) {
											matchedEOF = true;
										}

										_errHandler.ReportMatch(this);
										Consume();
									}
									}
									break;
								}
								} 
							}
							State = 5895;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,675,_ctx);
						}
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 5898; _localctx.user_name = id_();
					State = 5899; Match(WITH);
					State = 5900; Match(PASSWORD);
					State = 5901; Match(EQUAL);
					State = 5902; _localctx.password = Match(STRING);
					State = 5933;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,683,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 5931;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,682,_ctx) ) {
							case 1:
								{
								State = 5904;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,677,_ctx) ) {
								case 1:
									{
									State = 5903; Match(COMMA);
									}
									break;
								}
								State = 5906; Match(DEFAULT_SCHEMA);
								State = 5907; Match(EQUAL);
								State = 5908; _localctx.schema_name = id_();
								}
								break;

							case 2:
								{
								State = 5910;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,678,_ctx) ) {
								case 1:
									{
									State = 5909; Match(COMMA);
									}
									break;
								}
								State = 5912; Match(DEFAULT_LANGUAGE);
								State = 5913; Match(EQUAL);
								State = 5917;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,679,_ctx) ) {
								case 1:
									{
									State = 5914; Match(NONE);
									}
									break;

								case 2:
									{
									State = 5915; Match(DECIMAL);
									}
									break;

								case 3:
									{
									State = 5916; _localctx.language_name_or_alias = id_();
									}
									break;
								}
								}
								break;

							case 3:
								{
								State = 5920;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,680,_ctx) ) {
								case 1:
									{
									State = 5919; Match(COMMA);
									}
									break;
								}
								State = 5922; Match(SID);
								State = 5923; Match(EQUAL);
								State = 5924; Match(BINARY);
								}
								break;

							case 4:
								{
								State = 5926;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,681,_ctx) ) {
								case 1:
									{
									State = 5925; Match(COMMA);
									}
									break;
								}
								State = 5928; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								State = 5929; Match(EQUAL);
								State = 5930;
								_la = _input.La(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;
							}
							} 
						}
						State = 5935;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,683,_ctx);
					}
					}
					break;

				case 3:
					{
					State = 5936; _localctx.Azure_Active_Directory_principal = id_();
					State = 5937; Match(FROM);
					State = 5938; Match(EXTERNAL);
					State = 5939; Match(PROVIDER);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5943; Match(CREATE);
				State = 5944; Match(USER);
				State = 5945; _localctx.user_name = id_();
				State = 5972;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,689,_ctx) ) {
				case 1:
					{
					State = 5946; Match(WITHOUT);
					State = 5947; Match(LOGIN);
					State = 5962;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,688,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 5960;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,687,_ctx) ) {
							case 1:
								{
								State = 5949;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,685,_ctx) ) {
								case 1:
									{
									State = 5948; Match(COMMA);
									}
									break;
								}
								State = 5951; Match(DEFAULT_SCHEMA);
								State = 5952; Match(EQUAL);
								State = 5953; _localctx.schema_name = id_();
								}
								break;

							case 2:
								{
								State = 5955;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,686,_ctx) ) {
								case 1:
									{
									State = 5954; Match(COMMA);
									}
									break;
								}
								State = 5957; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								State = 5958; Match(EQUAL);
								State = 5959;
								_la = _input.La(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;
							}
							} 
						}
						State = 5964;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,688,_ctx);
					}
					}
					break;

				case 2:
					{
					State = 5965;
					_la = _input.La(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5966; Match(CERTIFICATE);
					State = 5967; _localctx.cert_name = id_();
					}
					break;

				case 3:
					{
					State = 5968;
					_la = _input.La(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5969; Match(ASYMMETRIC);
					State = 5970; Match(KEY);
					State = 5971; _localctx.asym_key_name = id_();
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5974; Match(CREATE);
				State = 5975; Match(USER);
				State = 5976; _localctx.user_name = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_user_azure_sql_dwContext : ParserRuleContext {
		public Id_Context user_name;
		public Id_Context login_name;
		public Id_Context schema_name;
		public Id_Context Azure_Active_Directory_principal;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode WITHOUT() { return GetToken(TSqlParser.WITHOUT, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode DEFAULT_SCHEMA() { return GetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Create_user_azure_sql_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_user_azure_sql_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_user_azure_sql_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_user_azure_sql_dw(this);
		}
	}

	[RuleVersion(0)]
	public Create_user_azure_sql_dwContext create_user_azure_sql_dw() {
		Create_user_azure_sql_dwContext _localctx = new Create_user_azure_sql_dwContext(_ctx, State);
		EnterRule(_localctx, 434, RULE_create_user_azure_sql_dw);
		int _la;
		try {
			State = 6007;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,694,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5979; Match(CREATE);
				State = 5980; Match(USER);
				State = 5981; _localctx.user_name = id_();
				State = 5987;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,691,_ctx) ) {
				case 1:
					{
					State = 5982;
					_la = _input.La(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5983; Match(LOGIN);
					State = 5984; _localctx.login_name = id_();
					}
					break;

				case 2:
					{
					State = 5985; Match(WITHOUT);
					State = 5986; Match(LOGIN);
					}
					break;
				}
				State = 5993;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,692,_ctx) ) {
				case 1:
					{
					State = 5989; Match(WITH);
					State = 5990; Match(DEFAULT_SCHEMA);
					State = 5991; Match(EQUAL);
					State = 5992; _localctx.schema_name = id_();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5995; Match(CREATE);
				State = 5996; Match(USER);
				State = 5997; _localctx.Azure_Active_Directory_principal = id_();
				State = 5998; Match(FROM);
				State = 5999; Match(EXTERNAL);
				State = 6000; Match(PROVIDER);
				State = 6005;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,693,_ctx) ) {
				case 1:
					{
					State = 6001; Match(WITH);
					State = 6002; Match(DEFAULT_SCHEMA);
					State = 6003; Match(EQUAL);
					State = 6004; _localctx.schema_name = id_();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_user_azure_sqlContext : ParserRuleContext {
		public Id_Context username;
		public Id_Context newusername;
		public Id_Context schema_name;
		public Id_Context loginame;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] NAME() { return GetTokens(TSqlParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(TSqlParser.NAME, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] DEFAULT_SCHEMA() { return GetTokens(TSqlParser.DEFAULT_SCHEMA); }
		public ITerminalNode DEFAULT_SCHEMA(int i) {
			return GetToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public ITerminalNode[] LOGIN() { return GetTokens(TSqlParser.LOGIN); }
		public ITerminalNode LOGIN(int i) {
			return GetToken(TSqlParser.LOGIN, i);
		}
		public ITerminalNode[] ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return GetTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public ITerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return GetToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_user_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_user_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_user_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_user_azure_sql(this);
		}
	}

	[RuleVersion(0)]
	public Alter_user_azure_sqlContext alter_user_azure_sql() {
		Alter_user_azure_sqlContext _localctx = new Alter_user_azure_sqlContext(_ctx, State);
		EnterRule(_localctx, 436, RULE_alter_user_azure_sql);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6009; Match(ALTER);
			State = 6010; Match(USER);
			State = 6011; _localctx.username = id_();
			State = 6012; Match(WITH);
			State = 6037;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 6037;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,699,_ctx) ) {
					case 1:
						{
						State = 6014;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,695,_ctx) ) {
						case 1:
							{
							State = 6013; Match(COMMA);
							}
							break;
						}
						State = 6016; Match(NAME);
						State = 6017; Match(EQUAL);
						State = 6018; _localctx.newusername = id_();
						}
						break;

					case 2:
						{
						State = 6020;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,696,_ctx) ) {
						case 1:
							{
							State = 6019; Match(COMMA);
							}
							break;
						}
						State = 6022; Match(DEFAULT_SCHEMA);
						State = 6023; Match(EQUAL);
						State = 6024; _localctx.schema_name = id_();
						}
						break;

					case 3:
						{
						State = 6026;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,697,_ctx) ) {
						case 1:
							{
							State = 6025; Match(COMMA);
							}
							break;
						}
						State = 6028; Match(LOGIN);
						State = 6029; Match(EQUAL);
						State = 6030; _localctx.loginame = id_();
						}
						break;

					case 4:
						{
						State = 6032;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,698,_ctx) ) {
						case 1:
							{
							State = 6031; Match(COMMA);
							}
							break;
						}
						State = 6034; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
						State = 6035; Match(EQUAL);
						State = 6036;
						_la = _input.La(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6039;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,700,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_workload_groupContext : ParserRuleContext {
		public Id_Context workload_group_group_name;
		public IToken request_max_memory_grant;
		public IToken request_max_cpu_time_sec;
		public IToken request_memory_grant_timeout_sec;
		public IToken max_dop;
		public IToken group_max_requests;
		public Id_Context workload_group_pool_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode WORKLOAD() { return GetToken(TSqlParser.WORKLOAD, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode[] DEFAULT_DOUBLE_QUOTE() { return GetTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE); }
		public ITerminalNode DEFAULT_DOUBLE_QUOTE(int i) {
			return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public ITerminalNode[] IMPORTANCE() { return GetTokens(TSqlParser.IMPORTANCE); }
		public ITerminalNode IMPORTANCE(int i) {
			return GetToken(TSqlParser.IMPORTANCE, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] REQUEST_MAX_MEMORY_GRANT_PERCENT() { return GetTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT); }
		public ITerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT(int i) {
			return GetToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
		}
		public ITerminalNode[] REQUEST_MAX_CPU_TIME_SEC() { return GetTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC); }
		public ITerminalNode REQUEST_MAX_CPU_TIME_SEC(int i) {
			return GetToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i);
		}
		public ITerminalNode[] REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return GetTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC); }
		public ITerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC(int i) {
			return GetToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
		}
		public ITerminalNode[] MAX_DOP() { return GetTokens(TSqlParser.MAX_DOP); }
		public ITerminalNode MAX_DOP(int i) {
			return GetToken(TSqlParser.MAX_DOP, i);
		}
		public ITerminalNode[] GROUP_MAX_REQUESTS() { return GetTokens(TSqlParser.GROUP_MAX_REQUESTS); }
		public ITerminalNode GROUP_MAX_REQUESTS(int i) {
			return GetToken(TSqlParser.GROUP_MAX_REQUESTS, i);
		}
		public ITerminalNode[] LOW() { return GetTokens(TSqlParser.LOW); }
		public ITerminalNode LOW(int i) {
			return GetToken(TSqlParser.LOW, i);
		}
		public ITerminalNode[] MEDIUM() { return GetTokens(TSqlParser.MEDIUM); }
		public ITerminalNode MEDIUM(int i) {
			return GetToken(TSqlParser.MEDIUM, i);
		}
		public ITerminalNode[] HIGH() { return GetTokens(TSqlParser.HIGH); }
		public ITerminalNode HIGH(int i) {
			return GetToken(TSqlParser.HIGH, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_workload_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_workload_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_workload_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_workload_group(this);
		}
	}

	[RuleVersion(0)]
	public Alter_workload_groupContext alter_workload_group() {
		Alter_workload_groupContext _localctx = new Alter_workload_groupContext(_ctx, State);
		EnterRule(_localctx, 438, RULE_alter_workload_group);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6041; Match(ALTER);
			State = 6042; Match(WORKLOAD);
			State = 6043; Match(GROUP);
			State = 6046;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,701,_ctx) ) {
			case 1:
				{
				State = 6044; _localctx.workload_group_group_name = id_();
				}
				break;

			case 2:
				{
				State = 6045; Match(DEFAULT_DOUBLE_QUOTE);
				}
				break;
			}
			State = 6079;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,706,_ctx) ) {
			case 1:
				{
				State = 6048; Match(WITH);
				State = 6049; Match(LR_BRACKET);
				State = 6074;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 6074;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,704,_ctx) ) {
						case 1:
							{
							State = 6050; Match(IMPORTANCE);
							State = 6051; Match(EQUAL);
							State = 6052;
							_la = _input.La(1);
							if ( !(_la==HIGH || _la==LOW || _la==MEDIUM) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 2:
							{
							State = 6054;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,702,_ctx) ) {
							case 1:
								{
								State = 6053; Match(COMMA);
								}
								break;
							}
							State = 6056; Match(REQUEST_MAX_MEMORY_GRANT_PERCENT);
							State = 6057; Match(EQUAL);
							State = 6058; _localctx.request_max_memory_grant = Match(DECIMAL);
							}
							break;

						case 3:
							{
							State = 6060;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,703,_ctx) ) {
							case 1:
								{
								State = 6059; Match(COMMA);
								}
								break;
							}
							State = 6062; Match(REQUEST_MAX_CPU_TIME_SEC);
							State = 6063; Match(EQUAL);
							State = 6064; _localctx.request_max_cpu_time_sec = Match(DECIMAL);
							}
							break;

						case 4:
							{
							State = 6065; Match(REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
							State = 6066; Match(EQUAL);
							State = 6067; _localctx.request_memory_grant_timeout_sec = Match(DECIMAL);
							}
							break;

						case 5:
							{
							State = 6068; Match(MAX_DOP);
							State = 6069; Match(EQUAL);
							State = 6070; _localctx.max_dop = Match(DECIMAL);
							}
							break;

						case 6:
							{
							State = 6071; Match(GROUP_MAX_REQUESTS);
							State = 6072; Match(EQUAL);
							State = 6073; _localctx.group_max_requests = Match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6076;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,705,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 6078; Match(RR_BRACKET);
				}
				break;
			}
			State = 6086;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,708,_ctx) ) {
			case 1:
				{
				State = 6081; Match(USING);
				State = 6084;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,707,_ctx) ) {
				case 1:
					{
					State = 6082; _localctx.workload_group_pool_name = id_();
					}
					break;

				case 2:
					{
					State = 6083; Match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_workload_groupContext : ParserRuleContext {
		public Id_Context workload_group_group_name;
		public IToken request_max_memory_grant;
		public IToken request_max_cpu_time_sec;
		public IToken request_memory_grant_timeout_sec;
		public IToken max_dop;
		public IToken group_max_requests;
		public Id_Context workload_group_pool_name;
		public Id_Context external_pool_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode WORKLOAD() { return GetToken(TSqlParser.WORKLOAD, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public ITerminalNode[] IMPORTANCE() { return GetTokens(TSqlParser.IMPORTANCE); }
		public ITerminalNode IMPORTANCE(int i) {
			return GetToken(TSqlParser.IMPORTANCE, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] REQUEST_MAX_MEMORY_GRANT_PERCENT() { return GetTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT); }
		public ITerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT(int i) {
			return GetToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
		}
		public ITerminalNode[] REQUEST_MAX_CPU_TIME_SEC() { return GetTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC); }
		public ITerminalNode REQUEST_MAX_CPU_TIME_SEC(int i) {
			return GetToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i);
		}
		public ITerminalNode[] REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return GetTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC); }
		public ITerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC(int i) {
			return GetToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
		}
		public ITerminalNode[] MAX_DOP() { return GetTokens(TSqlParser.MAX_DOP); }
		public ITerminalNode MAX_DOP(int i) {
			return GetToken(TSqlParser.MAX_DOP, i);
		}
		public ITerminalNode[] GROUP_MAX_REQUESTS() { return GetTokens(TSqlParser.GROUP_MAX_REQUESTS); }
		public ITerminalNode GROUP_MAX_REQUESTS(int i) {
			return GetToken(TSqlParser.GROUP_MAX_REQUESTS, i);
		}
		public ITerminalNode[] DEFAULT_DOUBLE_QUOTE() { return GetTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE); }
		public ITerminalNode DEFAULT_DOUBLE_QUOTE(int i) {
			return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i);
		}
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode[] LOW() { return GetTokens(TSqlParser.LOW); }
		public ITerminalNode LOW(int i) {
			return GetToken(TSqlParser.LOW, i);
		}
		public ITerminalNode[] MEDIUM() { return GetTokens(TSqlParser.MEDIUM); }
		public ITerminalNode MEDIUM(int i) {
			return GetToken(TSqlParser.MEDIUM, i);
		}
		public ITerminalNode[] HIGH() { return GetTokens(TSqlParser.HIGH); }
		public ITerminalNode HIGH(int i) {
			return GetToken(TSqlParser.HIGH, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_workload_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_workload_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_workload_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_workload_group(this);
		}
	}

	[RuleVersion(0)]
	public Create_workload_groupContext create_workload_group() {
		Create_workload_groupContext _localctx = new Create_workload_groupContext(_ctx, State);
		EnterRule(_localctx, 440, RULE_create_workload_group);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6088; Match(CREATE);
			State = 6089; Match(WORKLOAD);
			State = 6090; Match(GROUP);
			State = 6091; _localctx.workload_group_group_name = id_();
			State = 6123;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,713,_ctx) ) {
			case 1:
				{
				State = 6092; Match(WITH);
				State = 6093; Match(LR_BRACKET);
				State = 6118;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 6118;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,711,_ctx) ) {
						case 1:
							{
							State = 6094; Match(IMPORTANCE);
							State = 6095; Match(EQUAL);
							State = 6096;
							_la = _input.La(1);
							if ( !(_la==HIGH || _la==LOW || _la==MEDIUM) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 2:
							{
							State = 6098;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,709,_ctx) ) {
							case 1:
								{
								State = 6097; Match(COMMA);
								}
								break;
							}
							State = 6100; Match(REQUEST_MAX_MEMORY_GRANT_PERCENT);
							State = 6101; Match(EQUAL);
							State = 6102; _localctx.request_max_memory_grant = Match(DECIMAL);
							}
							break;

						case 3:
							{
							State = 6104;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,710,_ctx) ) {
							case 1:
								{
								State = 6103; Match(COMMA);
								}
								break;
							}
							State = 6106; Match(REQUEST_MAX_CPU_TIME_SEC);
							State = 6107; Match(EQUAL);
							State = 6108; _localctx.request_max_cpu_time_sec = Match(DECIMAL);
							}
							break;

						case 4:
							{
							State = 6109; Match(REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
							State = 6110; Match(EQUAL);
							State = 6111; _localctx.request_memory_grant_timeout_sec = Match(DECIMAL);
							}
							break;

						case 5:
							{
							State = 6112; Match(MAX_DOP);
							State = 6113; Match(EQUAL);
							State = 6114; _localctx.max_dop = Match(DECIMAL);
							}
							break;

						case 6:
							{
							State = 6115; Match(GROUP_MAX_REQUESTS);
							State = 6116; Match(EQUAL);
							State = 6117; _localctx.group_max_requests = Match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6120;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,712,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 6122; Match(RR_BRACKET);
				}
				break;
			}
			State = 6138;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,717,_ctx) ) {
			case 1:
				{
				State = 6125; Match(USING);
				State = 6128;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,714,_ctx) ) {
				case 1:
					{
					State = 6126; _localctx.workload_group_pool_name = id_();
					}
					break;

				case 2:
					{
					State = 6127; Match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				State = 6136;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,716,_ctx) ) {
				case 1:
					{
					State = 6131;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,715,_ctx) ) {
					case 1:
						{
						State = 6130; Match(COMMA);
						}
						break;
					}
					State = 6133; Match(EXTERNAL);
					State = 6134; _localctx.external_pool_name = id_();
					}
					break;

				case 2:
					{
					State = 6135; Match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_xml_schema_collectionContext : ParserRuleContext {
		public Id_Context relational_schema;
		public Id_Context sql_identifier;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Create_xml_schema_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_xml_schema_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_xml_schema_collection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_xml_schema_collection(this);
		}
	}

	[RuleVersion(0)]
	public Create_xml_schema_collectionContext create_xml_schema_collection() {
		Create_xml_schema_collectionContext _localctx = new Create_xml_schema_collectionContext(_ctx, State);
		EnterRule(_localctx, 442, RULE_create_xml_schema_collection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6140; Match(CREATE);
			State = 6141; Match(XML);
			State = 6142; Match(SCHEMA);
			State = 6143; Match(COLLECTION);
			State = 6147;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,718,_ctx) ) {
			case 1:
				{
				State = 6144; _localctx.relational_schema = id_();
				State = 6145; Match(DOT);
				}
				break;
			}
			State = 6149; _localctx.sql_identifier = id_();
			State = 6150; Match(AS);
			State = 6154;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,719,_ctx) ) {
			case 1:
				{
				State = 6151; Match(STRING);
				}
				break;

			case 2:
				{
				State = 6152; id_();
				}
				break;

			case 3:
				{
				State = 6153; Match(LOCAL_ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_partition_functionContext : ParserRuleContext {
		public Id_Context partition_function_name;
		public Data_typeContext input_parameter_type;
		public Expression_list_Context boundary_values;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode RANGE() { return GetToken(TSqlParser.RANGE, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public ITerminalNode LEFT() { return GetToken(TSqlParser.LEFT, 0); }
		public ITerminalNode RIGHT() { return GetToken(TSqlParser.RIGHT, 0); }
		public Create_partition_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_partition_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_partition_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_partition_function(this);
		}
	}

	[RuleVersion(0)]
	public Create_partition_functionContext create_partition_function() {
		Create_partition_functionContext _localctx = new Create_partition_functionContext(_ctx, State);
		EnterRule(_localctx, 444, RULE_create_partition_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6156; Match(CREATE);
			State = 6157; Match(PARTITION);
			State = 6158; Match(FUNCTION);
			State = 6159; _localctx.partition_function_name = id_();
			State = 6160; Match(LR_BRACKET);
			State = 6161; _localctx.input_parameter_type = data_type();
			State = 6162; Match(RR_BRACKET);
			State = 6163; Match(AS);
			State = 6164; Match(RANGE);
			State = 6166;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,720,_ctx) ) {
			case 1:
				{
				State = 6165;
				_la = _input.La(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 6168; Match(FOR);
			State = 6169; Match(VALUES);
			State = 6170; Match(LR_BRACKET);
			State = 6171; _localctx.boundary_values = expression_list_();
			State = 6172; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_partition_schemeContext : ParserRuleContext {
		public Id_Context partition_scheme_name;
		public Id_Context partition_function_name;
		public Id_Context _id_;
		public IList<Id_Context> _file_group_names = new List<Id_Context>();
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode[] PARTITION() { return GetTokens(TSqlParser.PARTITION); }
		public ITerminalNode PARTITION(int i) {
			return GetToken(TSqlParser.PARTITION, i);
		}
		public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Create_partition_schemeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_partition_scheme; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_partition_scheme(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_partition_scheme(this);
		}
	}

	[RuleVersion(0)]
	public Create_partition_schemeContext create_partition_scheme() {
		Create_partition_schemeContext _localctx = new Create_partition_schemeContext(_ctx, State);
		EnterRule(_localctx, 446, RULE_create_partition_scheme);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6174; Match(CREATE);
			State = 6175; Match(PARTITION);
			State = 6176; Match(SCHEME);
			State = 6177; _localctx.partition_scheme_name = id_();
			State = 6178; Match(AS);
			State = 6179; Match(PARTITION);
			State = 6180; _localctx.partition_function_name = id_();
			State = 6182;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,721,_ctx) ) {
			case 1:
				{
				State = 6181; Match(ALL);
				}
				break;
			}
			State = 6184; Match(TO);
			State = 6185; Match(LR_BRACKET);
			State = 6186; _localctx._id_ = id_();
			_localctx._file_group_names.Add(_localctx._id_);
			State = 6191;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,722,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6187; Match(COMMA);
					State = 6188; _localctx._id_ = id_();
					_localctx._file_group_names.Add(_localctx._id_);
					}
					} 
				}
				State = 6193;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,722,_ctx);
			}
			State = 6194; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_queueContext : ParserRuleContext {
		public Id_Context queue_name;
		public Id_Context filegroup;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Queue_settingsContext queue_settings() {
			return GetRuleContext<Queue_settingsContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public Create_queueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_queue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_queue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_queue(this);
		}
	}

	[RuleVersion(0)]
	public Create_queueContext create_queue() {
		Create_queueContext _localctx = new Create_queueContext(_ctx, State);
		EnterRule(_localctx, 448, RULE_create_queue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6196; Match(CREATE);
			State = 6197; Match(QUEUE);
			State = 6200;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,723,_ctx) ) {
			case 1:
				{
				State = 6198; full_table_name();
				}
				break;

			case 2:
				{
				State = 6199; _localctx.queue_name = id_();
				}
				break;
			}
			State = 6203;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,724,_ctx) ) {
			case 1:
				{
				State = 6202; queue_settings();
				}
				break;
			}
			State = 6208;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,725,_ctx) ) {
			case 1:
				{
				State = 6205; Match(ON);
				State = 6206; _localctx.filegroup = id_();
				}
				break;

			case 2:
				{
				State = 6207; Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Queue_settingsContext : ParserRuleContext {
		public IToken max_readers;
		public IToken user_name;
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] STATUS() { return GetTokens(TSqlParser.STATUS); }
		public ITerminalNode STATUS(int i) {
			return GetToken(TSqlParser.STATUS, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public On_offContext[] on_off() {
			return GetRuleContexts<On_offContext>();
		}
		public On_offContext on_off(int i) {
			return GetRuleContext<On_offContext>(i);
		}
		public ITerminalNode RETENTION() { return GetToken(TSqlParser.RETENTION, 0); }
		public ITerminalNode ACTIVATION() { return GetToken(TSqlParser.ACTIVATION, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode POISON_MESSAGE_HANDLING() { return GetToken(TSqlParser.POISON_MESSAGE_HANDLING, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode PROCEDURE_NAME() { return GetToken(TSqlParser.PROCEDURE_NAME, 0); }
		public Func_proc_name_database_schemaContext func_proc_name_database_schema() {
			return GetRuleContext<Func_proc_name_database_schemaContext>(0);
		}
		public ITerminalNode MAX_QUEUE_READERS() { return GetToken(TSqlParser.MAX_QUEUE_READERS, 0); }
		public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode SELF() { return GetToken(TSqlParser.SELF, 0); }
		public ITerminalNode OWNER() { return GetToken(TSqlParser.OWNER, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Queue_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queue_settings; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQueue_settings(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQueue_settings(this);
		}
	}

	[RuleVersion(0)]
	public Queue_settingsContext queue_settings() {
		Queue_settingsContext _localctx = new Queue_settingsContext(_ctx, State);
		EnterRule(_localctx, 450, RULE_queue_settings);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6210; Match(WITH);
			State = 6217;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,727,_ctx) ) {
			case 1:
				{
				State = 6211; Match(STATUS);
				State = 6212; Match(EQUAL);
				State = 6213; on_off();
				State = 6215;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,726,_ctx) ) {
				case 1:
					{
					State = 6214; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 6225;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,729,_ctx) ) {
			case 1:
				{
				State = 6219; Match(RETENTION);
				State = 6220; Match(EQUAL);
				State = 6221; on_off();
				State = 6223;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,728,_ctx) ) {
				case 1:
					{
					State = 6222; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 6272;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,741,_ctx) ) {
			case 1:
				{
				State = 6227; Match(ACTIVATION);
				State = 6228; Match(LR_BRACKET);
				State = 6266;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,739,_ctx) ) {
				case 1:
					{
					{
					State = 6235;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,731,_ctx) ) {
					case 1:
						{
						State = 6229; Match(STATUS);
						State = 6230; Match(EQUAL);
						State = 6231; on_off();
						State = 6233;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,730,_ctx) ) {
						case 1:
							{
							State = 6232; Match(COMMA);
							}
							break;
						}
						}
						break;
					}
					State = 6243;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,733,_ctx) ) {
					case 1:
						{
						State = 6237; Match(PROCEDURE_NAME);
						State = 6238; Match(EQUAL);
						State = 6239; func_proc_name_database_schema();
						State = 6241;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,732,_ctx) ) {
						case 1:
							{
							State = 6240; Match(COMMA);
							}
							break;
						}
						}
						break;
					}
					State = 6251;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,735,_ctx) ) {
					case 1:
						{
						State = 6245; Match(MAX_QUEUE_READERS);
						State = 6246; Match(EQUAL);
						State = 6247; _localctx.max_readers = Match(DECIMAL);
						State = 6249;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,734,_ctx) ) {
						case 1:
							{
							State = 6248; Match(COMMA);
							}
							break;
						}
						}
						break;
					}
					State = 6263;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,738,_ctx) ) {
					case 1:
						{
						State = 6253; Match(EXECUTE);
						State = 6254; Match(AS);
						State = 6258;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,736,_ctx) ) {
						case 1:
							{
							State = 6255; Match(SELF);
							}
							break;

						case 2:
							{
							State = 6256; _localctx.user_name = Match(STRING);
							}
							break;

						case 3:
							{
							State = 6257; Match(OWNER);
							}
							break;
						}
						State = 6261;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,737,_ctx) ) {
						case 1:
							{
							State = 6260; Match(COMMA);
							}
							break;
						}
						}
						break;
					}
					}
					}
					break;

				case 2:
					{
					State = 6265; Match(DROP);
					}
					break;
				}
				State = 6268; Match(RR_BRACKET);
				State = 6270;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,740,_ctx) ) {
				case 1:
					{
					State = 6269; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 6282;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,742,_ctx) ) {
			case 1:
				{
				State = 6274; Match(POISON_MESSAGE_HANDLING);
				State = 6275; Match(LR_BRACKET);
				{
				State = 6276; Match(STATUS);
				State = 6277; Match(EQUAL);
				State = 6278; on_off();
				}
				State = 6280; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_queueContext : ParserRuleContext {
		public Id_Context queue_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public Queue_settingsContext queue_settings() {
			return GetRuleContext<Queue_settingsContext>(0);
		}
		public Queue_actionContext queue_action() {
			return GetRuleContext<Queue_actionContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Alter_queueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_queue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_queue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_queue(this);
		}
	}

	[RuleVersion(0)]
	public Alter_queueContext alter_queue() {
		Alter_queueContext _localctx = new Alter_queueContext(_ctx, State);
		EnterRule(_localctx, 452, RULE_alter_queue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6284; Match(ALTER);
			State = 6285; Match(QUEUE);
			State = 6288;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,743,_ctx) ) {
			case 1:
				{
				State = 6286; full_table_name();
				}
				break;

			case 2:
				{
				State = 6287; _localctx.queue_name = id_();
				}
				break;
			}
			State = 6292;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,744,_ctx) ) {
			case 1:
				{
				State = 6290; queue_settings();
				}
				break;

			case 2:
				{
				State = 6291; queue_action();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Queue_actionContext : ParserRuleContext {
		public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Queue_rebuild_optionsContext queue_rebuild_options() {
			return GetRuleContext<Queue_rebuild_optionsContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode REORGANIZE() { return GetToken(TSqlParser.REORGANIZE, 0); }
		public ITerminalNode LOB_COMPACTION() { return GetToken(TSqlParser.LOB_COMPACTION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode MOVE() { return GetToken(TSqlParser.MOVE, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public Queue_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queue_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQueue_action(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQueue_action(this);
		}
	}

	[RuleVersion(0)]
	public Queue_actionContext queue_action() {
		Queue_actionContext _localctx = new Queue_actionContext(_ctx, State);
		EnterRule(_localctx, 454, RULE_queue_action);
		try {
			State = 6315;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,748,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6294; Match(REBUILD);
				State = 6300;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,745,_ctx) ) {
				case 1:
					{
					State = 6295; Match(WITH);
					State = 6296; Match(LR_BRACKET);
					State = 6297; queue_rebuild_options();
					State = 6298; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6302; Match(REORGANIZE);
				State = 6307;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,746,_ctx) ) {
				case 1:
					{
					State = 6303; Match(WITH);
					State = 6304; Match(LOB_COMPACTION);
					State = 6305; Match(EQUAL);
					State = 6306; on_off();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6309; Match(MOVE);
				State = 6310; Match(TO);
				State = 6313;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,747,_ctx) ) {
				case 1:
					{
					State = 6311; id_();
					}
					break;

				case 2:
					{
					State = 6312; Match(DEFAULT);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Queue_rebuild_optionsContext : ParserRuleContext {
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Queue_rebuild_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queue_rebuild_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQueue_rebuild_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQueue_rebuild_options(this);
		}
	}

	[RuleVersion(0)]
	public Queue_rebuild_optionsContext queue_rebuild_options() {
		Queue_rebuild_optionsContext _localctx = new Queue_rebuild_optionsContext(_ctx, State);
		EnterRule(_localctx, 456, RULE_queue_rebuild_options);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6317; Match(MAXDOP);
			State = 6318; Match(EQUAL);
			State = 6319; Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_contractContext : ParserRuleContext {
		public Id_Context owner_name;
		public Id_Context message_type_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public Contract_nameContext contract_name() {
			return GetRuleContext<Contract_nameContext>(0);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode[] SENT() { return GetTokens(TSqlParser.SENT); }
		public ITerminalNode SENT(int i) {
			return GetToken(TSqlParser.SENT, i);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] INITIATOR() { return GetTokens(TSqlParser.INITIATOR); }
		public ITerminalNode INITIATOR(int i) {
			return GetToken(TSqlParser.INITIATOR, i);
		}
		public ITerminalNode[] TARGET() { return GetTokens(TSqlParser.TARGET); }
		public ITerminalNode TARGET(int i) {
			return GetToken(TSqlParser.TARGET, i);
		}
		public ITerminalNode[] ANY() { return GetTokens(TSqlParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(TSqlParser.ANY, i);
		}
		public ITerminalNode[] DEFAULT() { return GetTokens(TSqlParser.DEFAULT); }
		public ITerminalNode DEFAULT(int i) {
			return GetToken(TSqlParser.DEFAULT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_contractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_contract; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_contract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_contract(this);
		}
	}

	[RuleVersion(0)]
	public Create_contractContext create_contract() {
		Create_contractContext _localctx = new Create_contractContext(_ctx, State);
		EnterRule(_localctx, 458, RULE_create_contract);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6321; Match(CREATE);
			State = 6322; Match(CONTRACT);
			State = 6323; contract_name();
			State = 6326;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,749,_ctx) ) {
			case 1:
				{
				State = 6324; Match(AUTHORIZATION);
				State = 6325; _localctx.owner_name = id_();
				}
				break;
			}
			State = 6328; Match(LR_BRACKET);
			State = 6339;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 6331;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,750,_ctx) ) {
					case 1:
						{
						State = 6329; _localctx.message_type_name = id_();
						}
						break;

					case 2:
						{
						State = 6330; Match(DEFAULT);
						}
						break;
					}
					State = 6333; Match(SENT);
					State = 6334; Match(BY);
					State = 6335;
					_la = _input.La(1);
					if ( !(_la==ANY || _la==INITIATOR || _la==TARGET) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 6337;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,751,_ctx) ) {
					case 1:
						{
						State = 6336; Match(COMMA);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6341;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,752,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 6343; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conversation_statementContext : ParserRuleContext {
		public Begin_conversation_timerContext begin_conversation_timer() {
			return GetRuleContext<Begin_conversation_timerContext>(0);
		}
		public Begin_conversation_dialogContext begin_conversation_dialog() {
			return GetRuleContext<Begin_conversation_dialogContext>(0);
		}
		public End_conversationContext end_conversation() {
			return GetRuleContext<End_conversationContext>(0);
		}
		public Get_conversationContext get_conversation() {
			return GetRuleContext<Get_conversationContext>(0);
		}
		public Send_conversationContext send_conversation() {
			return GetRuleContext<Send_conversationContext>(0);
		}
		public Waitfor_conversationContext waitfor_conversation() {
			return GetRuleContext<Waitfor_conversationContext>(0);
		}
		public Conversation_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversation_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterConversation_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitConversation_statement(this);
		}
	}

	[RuleVersion(0)]
	public Conversation_statementContext conversation_statement() {
		Conversation_statementContext _localctx = new Conversation_statementContext(_ctx, State);
		EnterRule(_localctx, 460, RULE_conversation_statement);
		try {
			State = 6351;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,753,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6345; begin_conversation_timer();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6346; begin_conversation_dialog();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6347; end_conversation();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6348; get_conversation();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6349; send_conversation();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6350; waitfor_conversation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Message_statementContext : ParserRuleContext {
		public Id_Context message_type_name;
		public Id_Context owner_name;
		public Id_Context schema_collection_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode VALIDATION() { return GetToken(TSqlParser.VALIDATION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode EMPTY() { return GetToken(TSqlParser.EMPTY, 0); }
		public ITerminalNode WELL_FORMED_XML() { return GetToken(TSqlParser.WELL_FORMED_XML, 0); }
		public ITerminalNode VALID_XML() { return GetToken(TSqlParser.VALID_XML, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Message_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_message_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMessage_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMessage_statement(this);
		}
	}

	[RuleVersion(0)]
	public Message_statementContext message_statement() {
		Message_statementContext _localctx = new Message_statementContext(_ctx, State);
		EnterRule(_localctx, 462, RULE_message_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6353; Match(CREATE);
			State = 6354; Match(MESSAGE);
			State = 6355; Match(TYPE);
			State = 6356; _localctx.message_type_name = id_();
			State = 6359;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,754,_ctx) ) {
			case 1:
				{
				State = 6357; Match(AUTHORIZATION);
				State = 6358; _localctx.owner_name = id_();
				}
				break;
			}
			{
			State = 6361; Match(VALIDATION);
			State = 6362; Match(EQUAL);
			State = 6371;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,755,_ctx) ) {
			case 1:
				{
				State = 6363; Match(NONE);
				}
				break;

			case 2:
				{
				State = 6364; Match(EMPTY);
				}
				break;

			case 3:
				{
				State = 6365; Match(WELL_FORMED_XML);
				}
				break;

			case 4:
				{
				State = 6366; Match(VALID_XML);
				State = 6367; Match(WITH);
				State = 6368; Match(SCHEMA);
				State = 6369; Match(COLLECTION);
				State = 6370; _localctx.schema_collection_name = id_();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_statementContext : ParserRuleContext {
		public ITerminalNode MERGE() { return GetToken(TSqlParser.MERGE, 0); }
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public When_matchesContext[] when_matches() {
			return GetRuleContexts<When_matchesContext>();
		}
		public When_matchesContext when_matches(int i) {
			return GetRuleContext<When_matchesContext>(i);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public Merge_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMerge_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMerge_statement(this);
		}
	}

	[RuleVersion(0)]
	public Merge_statementContext merge_statement() {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, State);
		EnterRule(_localctx, 464, RULE_merge_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6374;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,756,_ctx) ) {
			case 1:
				{
				State = 6373; with_expression();
				}
				break;
			}
			State = 6376; Match(MERGE);
			State = 6384;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,758,_ctx) ) {
			case 1:
				{
				State = 6377; Match(TOP);
				State = 6378; Match(LR_BRACKET);
				State = 6379; expression(0);
				State = 6380; Match(RR_BRACKET);
				State = 6382;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,757,_ctx) ) {
				case 1:
					{
					State = 6381; Match(PERCENT);
					}
					break;
				}
				}
				break;
			}
			State = 6387;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,759,_ctx) ) {
			case 1:
				{
				State = 6386; Match(INTO);
				}
				break;
			}
			State = 6389; ddl_object();
			State = 6391;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,760,_ctx) ) {
			case 1:
				{
				State = 6390; with_table_hints();
				}
				break;
			}
			State = 6394;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,761,_ctx) ) {
			case 1:
				{
				State = 6393; as_table_alias();
				}
				break;
			}
			State = 6396; Match(USING);
			State = 6397; table_sources();
			State = 6398; Match(ON);
			State = 6399; search_condition(0);
			State = 6401;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 6400; when_matches();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6403;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,762,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 6406;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,763,_ctx) ) {
			case 1:
				{
				State = 6405; output_clause();
				}
				break;
			}
			State = 6409;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,764,_ctx) ) {
			case 1:
				{
				State = 6408; option_clause();
				}
				break;
			}
			State = 6411; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class When_matchesContext : ParserRuleContext {
		public ITerminalNode[] WHEN() { return GetTokens(TSqlParser.WHEN); }
		public ITerminalNode WHEN(int i) {
			return GetToken(TSqlParser.WHEN, i);
		}
		public ITerminalNode[] MATCHED() { return GetTokens(TSqlParser.MATCHED); }
		public ITerminalNode MATCHED(int i) {
			return GetToken(TSqlParser.MATCHED, i);
		}
		public ITerminalNode[] THEN() { return GetTokens(TSqlParser.THEN); }
		public ITerminalNode THEN(int i) {
			return GetToken(TSqlParser.THEN, i);
		}
		public Merge_matchedContext[] merge_matched() {
			return GetRuleContexts<Merge_matchedContext>();
		}
		public Merge_matchedContext merge_matched(int i) {
			return GetRuleContext<Merge_matchedContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(TSqlParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(TSqlParser.AND, i);
		}
		public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		public ITerminalNode[] NOT() { return GetTokens(TSqlParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(TSqlParser.NOT, i);
		}
		public Merge_not_matchedContext merge_not_matched() {
			return GetRuleContext<Merge_not_matchedContext>(0);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public ITerminalNode TARGET() { return GetToken(TSqlParser.TARGET, 0); }
		public ITerminalNode[] SOURCE() { return GetTokens(TSqlParser.SOURCE); }
		public ITerminalNode SOURCE(int i) {
			return GetToken(TSqlParser.SOURCE, i);
		}
		public When_matchesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_when_matches; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWhen_matches(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWhen_matches(this);
		}
	}

	[RuleVersion(0)]
	public When_matchesContext when_matches() {
		When_matchesContext _localctx = new When_matchesContext(_ctx, State);
		EnterRule(_localctx, 466, RULE_when_matches);
		try {
			int _alt;
			State = 6453;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,771,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6421;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 6413; Match(WHEN);
						State = 6414; Match(MATCHED);
						State = 6417;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,765,_ctx) ) {
						case 1:
							{
							State = 6415; Match(AND);
							State = 6416; search_condition(0);
							}
							break;
						}
						State = 6419; Match(THEN);
						State = 6420; merge_matched();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6423;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,766,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 6425; Match(WHEN);
				State = 6426; Match(NOT);
				State = 6427; Match(MATCHED);
				State = 6430;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,767,_ctx) ) {
				case 1:
					{
					State = 6428; Match(BY);
					State = 6429; Match(TARGET);
					}
					break;
				}
				State = 6434;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,768,_ctx) ) {
				case 1:
					{
					State = 6432; Match(AND);
					State = 6433; search_condition(0);
					}
					break;
				}
				State = 6436; Match(THEN);
				State = 6437; merge_not_matched();
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6449;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 6438; Match(WHEN);
						State = 6439; Match(NOT);
						State = 6440; Match(MATCHED);
						State = 6441; Match(BY);
						State = 6442; Match(SOURCE);
						State = 6445;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,769,_ctx) ) {
						case 1:
							{
							State = 6443; Match(AND);
							State = 6444; search_condition(0);
							}
							break;
						}
						State = 6447; Match(THEN);
						State = 6448; merge_matched();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6451;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,770,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_matchedContext : ParserRuleContext {
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public Update_elem_mergeContext[] update_elem_merge() {
			return GetRuleContexts<Update_elem_mergeContext>();
		}
		public Update_elem_mergeContext update_elem_merge(int i) {
			return GetRuleContext<Update_elem_mergeContext>(i);
		}
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public Merge_matchedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_matched; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMerge_matched(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMerge_matched(this);
		}
	}

	[RuleVersion(0)]
	public Merge_matchedContext merge_matched() {
		Merge_matchedContext _localctx = new Merge_matchedContext(_ctx, State);
		EnterRule(_localctx, 468, RULE_merge_matched);
		try {
			int _alt;
			State = 6466;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,773,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6455; Match(UPDATE);
				State = 6456; Match(SET);
				State = 6457; update_elem_merge();
				State = 6462;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,772,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6458; Match(COMMA);
						State = 6459; update_elem_merge();
						}
						} 
					}
					State = 6464;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,772,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6465; Match(DELETE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_not_matchedContext : ParserRuleContext {
		public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		public Table_value_constructorContext table_value_constructor() {
			return GetRuleContext<Table_value_constructorContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Merge_not_matchedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_not_matched; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMerge_not_matched(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMerge_not_matched(this);
		}
	}

	[RuleVersion(0)]
	public Merge_not_matchedContext merge_not_matched() {
		Merge_not_matchedContext _localctx = new Merge_not_matchedContext(_ctx, State);
		EnterRule(_localctx, 470, RULE_merge_not_matched);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6468; Match(INSERT);
			State = 6473;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,774,_ctx) ) {
			case 1:
				{
				State = 6469; Match(LR_BRACKET);
				State = 6470; column_name_list();
				State = 6471; Match(RR_BRACKET);
				}
				break;
			}
			State = 6478;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,775,_ctx) ) {
			case 1:
				{
				State = 6475; table_value_constructor();
				}
				break;

			case 2:
				{
				State = 6476; Match(DEFAULT);
				State = 6477; Match(VALUES);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_statementContext : ParserRuleContext {
		public IToken cursor_var;
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public Delete_statement_fromContext delete_statement_from() {
			return GetRuleContext<Delete_statement_fromContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode[] FROM() { return GetTokens(TSqlParser.FROM); }
		public ITerminalNode FROM(int i) {
			return GetToken(TSqlParser.FROM, i);
		}
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode CURRENT() { return GetToken(TSqlParser.CURRENT, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public Delete_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDelete_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDelete_statement(this);
		}
	}

	[RuleVersion(0)]
	public Delete_statementContext delete_statement() {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, State);
		EnterRule(_localctx, 472, RULE_delete_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6481;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,776,_ctx) ) {
			case 1:
				{
				State = 6480; with_expression();
				}
				break;
			}
			State = 6483; Match(DELETE);
			State = 6493;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,778,_ctx) ) {
			case 1:
				{
				State = 6484; Match(TOP);
				State = 6485; Match(LR_BRACKET);
				State = 6486; expression(0);
				State = 6487; Match(RR_BRACKET);
				State = 6489;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,777,_ctx) ) {
				case 1:
					{
					State = 6488; Match(PERCENT);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 6491; Match(TOP);
				State = 6492; Match(DECIMAL);
				}
				break;
			}
			State = 6496;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,779,_ctx) ) {
			case 1:
				{
				State = 6495; Match(FROM);
				}
				break;
			}
			State = 6498; delete_statement_from();
			State = 6500;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,780,_ctx) ) {
			case 1:
				{
				State = 6499; with_table_hints();
				}
				break;
			}
			State = 6503;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,781,_ctx) ) {
			case 1:
				{
				State = 6502; output_clause();
				}
				break;
			}
			State = 6507;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,782,_ctx) ) {
			case 1:
				{
				State = 6505; Match(FROM);
				State = 6506; table_sources();
				}
				break;
			}
			State = 6522;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,786,_ctx) ) {
			case 1:
				{
				State = 6509; Match(WHERE);
				State = 6520;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,785,_ctx) ) {
				case 1:
					{
					State = 6510; search_condition(0);
					}
					break;

				case 2:
					{
					State = 6511; Match(CURRENT);
					State = 6512; Match(OF);
					State = 6518;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,784,_ctx) ) {
					case 1:
						{
						State = 6514;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,783,_ctx) ) {
						case 1:
							{
							State = 6513; Match(GLOBAL);
							}
							break;
						}
						State = 6516; cursor_name();
						}
						break;

					case 2:
						{
						State = 6517; _localctx.cursor_var = Match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			State = 6525;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,787,_ctx) ) {
			case 1:
				{
				State = 6524; for_clause();
				}
				break;
			}
			State = 6528;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,788,_ctx) ) {
			case 1:
				{
				State = 6527; option_clause();
				}
				break;
			}
			State = 6531;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,789,_ctx) ) {
			case 1:
				{
				State = 6530; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_statement_fromContext : ParserRuleContext {
		public IToken table_var;
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Delete_statement_fromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_statement_from; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDelete_statement_from(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDelete_statement_from(this);
		}
	}

	[RuleVersion(0)]
	public Delete_statement_fromContext delete_statement_from() {
		Delete_statement_fromContext _localctx = new Delete_statement_fromContext(_ctx, State);
		EnterRule(_localctx, 474, RULE_delete_statement_from);
		try {
			State = 6536;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,790,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6533; ddl_object();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6534; rowset_function_limited();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6535; _localctx.table_var = Match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_statementContext : ParserRuleContext {
		public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		public Insert_statement_valueContext insert_statement_value() {
			return GetRuleContext<Insert_statement_valueContext>(0);
		}
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Insert_column_name_listContext insert_column_name_list() {
			return GetRuleContext<Insert_column_name_listContext>(0);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public Insert_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_statement(this);
		}
	}

	[RuleVersion(0)]
	public Insert_statementContext insert_statement() {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, State);
		EnterRule(_localctx, 476, RULE_insert_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6539;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,791,_ctx) ) {
			case 1:
				{
				State = 6538; with_expression();
				}
				break;
			}
			State = 6541; Match(INSERT);
			State = 6549;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,793,_ctx) ) {
			case 1:
				{
				State = 6542; Match(TOP);
				State = 6543; Match(LR_BRACKET);
				State = 6544; expression(0);
				State = 6545; Match(RR_BRACKET);
				State = 6547;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,792,_ctx) ) {
				case 1:
					{
					State = 6546; Match(PERCENT);
					}
					break;
				}
				}
				break;
			}
			State = 6552;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,794,_ctx) ) {
			case 1:
				{
				State = 6551; Match(INTO);
				}
				break;
			}
			State = 6556;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,795,_ctx) ) {
			case 1:
				{
				State = 6554; ddl_object();
				}
				break;

			case 2:
				{
				State = 6555; rowset_function_limited();
				}
				break;
			}
			State = 6559;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,796,_ctx) ) {
			case 1:
				{
				State = 6558; with_table_hints();
				}
				break;
			}
			State = 6565;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,797,_ctx) ) {
			case 1:
				{
				State = 6561; Match(LR_BRACKET);
				State = 6562; insert_column_name_list();
				State = 6563; Match(RR_BRACKET);
				}
				break;
			}
			State = 6568;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,798,_ctx) ) {
			case 1:
				{
				State = 6567; output_clause();
				}
				break;
			}
			State = 6570; insert_statement_value();
			State = 6572;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,799,_ctx) ) {
			case 1:
				{
				State = 6571; for_clause();
				}
				break;
			}
			State = 6575;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,800,_ctx) ) {
			case 1:
				{
				State = 6574; option_clause();
				}
				break;
			}
			State = 6578;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,801,_ctx) ) {
			case 1:
				{
				State = 6577; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_statement_valueContext : ParserRuleContext {
		public Table_value_constructorContext table_value_constructor() {
			return GetRuleContext<Table_value_constructorContext>(0);
		}
		public Derived_tableContext derived_table() {
			return GetRuleContext<Derived_tableContext>(0);
		}
		public Execute_statementContext execute_statement() {
			return GetRuleContext<Execute_statementContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Insert_statement_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_statement_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_statement_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_statement_value(this);
		}
	}

	[RuleVersion(0)]
	public Insert_statement_valueContext insert_statement_value() {
		Insert_statement_valueContext _localctx = new Insert_statement_valueContext(_ctx, State);
		EnterRule(_localctx, 478, RULE_insert_statement_value);
		try {
			State = 6585;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,802,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6580; table_value_constructor();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6581; derived_table();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6582; execute_statement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6583; Match(DEFAULT);
				State = 6584; Match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Receive_statementContext : ParserRuleContext {
		public Id_Context table_variable;
		public Search_conditionContext where;
		public ITerminalNode RECEIVE() { return GetToken(TSqlParser.RECEIVE, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode DISTINCT() { return GetToken(TSqlParser.DISTINCT, 0); }
		public Top_clauseContext top_clause() {
			return GetRuleContext<Top_clauseContext>(0);
		}
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Receive_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receive_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterReceive_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitReceive_statement(this);
		}
	}

	[RuleVersion(0)]
	public Receive_statementContext receive_statement() {
		Receive_statementContext _localctx = new Receive_statementContext(_ctx, State);
		EnterRule(_localctx, 480, RULE_receive_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6588;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,803,_ctx) ) {
			case 1:
				{
				State = 6587; Match(LR_BRACKET);
				}
				break;
			}
			State = 6590; Match(RECEIVE);
			State = 6595;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,804,_ctx) ) {
			case 1:
				{
				State = 6591; Match(ALL);
				}
				break;

			case 2:
				{
				State = 6592; Match(DISTINCT);
				}
				break;

			case 3:
				{
				State = 6593; top_clause();
				}
				break;

			case 4:
				{
				State = 6594; Match(STAR);
				}
				break;
			}
			State = 6605;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,806,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6597; Match(LOCAL_ID);
					State = 6598; Match(EQUAL);
					State = 6599; expression(0);
					State = 6601;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,805,_ctx) ) {
					case 1:
						{
						State = 6600; Match(COMMA);
						}
						break;
					}
					}
					} 
				}
				State = 6607;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,806,_ctx);
			}
			State = 6608; Match(FROM);
			State = 6609; full_table_name();
			State = 6615;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,807,_ctx) ) {
			case 1:
				{
				State = 6610; Match(INTO);
				State = 6611; _localctx.table_variable = id_();
				{
				State = 6612; Match(WHERE);
				State = 6613; _localctx.where = search_condition(0);
				}
				}
				break;
			}
			State = 6618;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,808,_ctx) ) {
			case 1:
				{
				State = 6617; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_statement_standaloneContext : ParserRuleContext {
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public Select_statement_standaloneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_statement_standalone; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_statement_standalone(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_statement_standalone(this);
		}
	}

	[RuleVersion(0)]
	public Select_statement_standaloneContext select_statement_standalone() {
		Select_statement_standaloneContext _localctx = new Select_statement_standaloneContext(_ctx, State);
		EnterRule(_localctx, 482, RULE_select_statement_standalone);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6621;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,809,_ctx) ) {
			case 1:
				{
				State = 6620; with_expression();
				}
				break;
			}
			State = 6623; select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_statementContext : ParserRuleContext {
		public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public Select_order_by_clauseContext select_order_by_clause() {
			return GetRuleContext<Select_order_by_clauseContext>(0);
		}
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_statement(this);
		}
	}

	[RuleVersion(0)]
	public Select_statementContext select_statement() {
		Select_statementContext _localctx = new Select_statementContext(_ctx, State);
		EnterRule(_localctx, 484, RULE_select_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6625; query_expression();
			State = 6627;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,810,_ctx) ) {
			case 1:
				{
				State = 6626; select_order_by_clause();
				}
				break;
			}
			State = 6630;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,811,_ctx) ) {
			case 1:
				{
				State = 6629; for_clause();
				}
				break;
			}
			State = 6633;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,812,_ctx) ) {
			case 1:
				{
				State = 6632; option_clause();
				}
				break;
			}
			State = 6636;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,813,_ctx) ) {
			case 1:
				{
				State = 6635; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public TimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTime(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTime(this);
		}
	}

	[RuleVersion(0)]
	public TimeContext time() {
		TimeContext _localctx = new TimeContext(_ctx, State);
		EnterRule(_localctx, 486, RULE_time);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6640;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,814,_ctx) ) {
			case 1:
				{
				State = 6638; Match(LOCAL_ID);
				}
				break;

			case 2:
				{
				State = 6639; constant();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_statementContext : ParserRuleContext {
		public IToken cursor_var;
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public Update_elemContext[] update_elem() {
			return GetRuleContexts<Update_elemContext>();
		}
		public Update_elemContext update_elem(int i) {
			return GetRuleContext<Update_elemContext>(i);
		}
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode CURRENT() { return GetToken(TSqlParser.CURRENT, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public Update_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_statement(this);
		}
	}

	[RuleVersion(0)]
	public Update_statementContext update_statement() {
		Update_statementContext _localctx = new Update_statementContext(_ctx, State);
		EnterRule(_localctx, 488, RULE_update_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6643;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,815,_ctx) ) {
			case 1:
				{
				State = 6642; with_expression();
				}
				break;
			}
			State = 6645; Match(UPDATE);
			State = 6653;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,817,_ctx) ) {
			case 1:
				{
				State = 6646; Match(TOP);
				State = 6647; Match(LR_BRACKET);
				State = 6648; expression(0);
				State = 6649; Match(RR_BRACKET);
				State = 6651;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,816,_ctx) ) {
				case 1:
					{
					State = 6650; Match(PERCENT);
					}
					break;
				}
				}
				break;
			}
			State = 6657;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,818,_ctx) ) {
			case 1:
				{
				State = 6655; ddl_object();
				}
				break;

			case 2:
				{
				State = 6656; rowset_function_limited();
				}
				break;
			}
			State = 6660;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,819,_ctx) ) {
			case 1:
				{
				State = 6659; with_table_hints();
				}
				break;
			}
			State = 6662; Match(SET);
			State = 6663; update_elem();
			State = 6668;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,820,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6664; Match(COMMA);
					State = 6665; update_elem();
					}
					} 
				}
				State = 6670;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,820,_ctx);
			}
			State = 6672;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,821,_ctx) ) {
			case 1:
				{
				State = 6671; output_clause();
				}
				break;
			}
			State = 6676;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,822,_ctx) ) {
			case 1:
				{
				State = 6674; Match(FROM);
				State = 6675; table_sources();
				}
				break;
			}
			State = 6691;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,826,_ctx) ) {
			case 1:
				{
				State = 6678; Match(WHERE);
				State = 6689;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,825,_ctx) ) {
				case 1:
					{
					State = 6679; search_condition(0);
					}
					break;

				case 2:
					{
					State = 6680; Match(CURRENT);
					State = 6681; Match(OF);
					State = 6687;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,824,_ctx) ) {
					case 1:
						{
						State = 6683;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,823,_ctx) ) {
						case 1:
							{
							State = 6682; Match(GLOBAL);
							}
							break;
						}
						State = 6685; cursor_name();
						}
						break;

					case 2:
						{
						State = 6686; _localctx.cursor_var = Match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			State = 6694;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,827,_ctx) ) {
			case 1:
				{
				State = 6693; for_clause();
				}
				break;
			}
			State = 6697;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,828,_ctx) ) {
			case 1:
				{
				State = 6696; option_clause();
				}
				break;
			}
			State = 6700;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,829,_ctx) ) {
			case 1:
				{
				State = 6699; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_clauseContext : ParserRuleContext {
		public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		public Output_dml_list_elemContext[] output_dml_list_elem() {
			return GetRuleContexts<Output_dml_list_elemContext>();
		}
		public Output_dml_list_elemContext output_dml_list_elem(int i) {
			return GetRuleContext<Output_dml_list_elemContext>(i);
		}
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Output_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOutput_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOutput_clause(this);
		}
	}

	[RuleVersion(0)]
	public Output_clauseContext output_clause() {
		Output_clauseContext _localctx = new Output_clauseContext(_ctx, State);
		EnterRule(_localctx, 490, RULE_output_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6702; Match(OUTPUT);
			State = 6703; output_dml_list_elem();
			State = 6708;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,830,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6704; Match(COMMA);
					State = 6705; output_dml_list_elem();
					}
					} 
				}
				State = 6710;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,830,_ctx);
			}
			State = 6722;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,833,_ctx) ) {
			case 1:
				{
				State = 6711; Match(INTO);
				State = 6714;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,831,_ctx) ) {
				case 1:
					{
					State = 6712; Match(LOCAL_ID);
					}
					break;

				case 2:
					{
					State = 6713; table_name();
					}
					break;
				}
				State = 6720;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,832,_ctx) ) {
				case 1:
					{
					State = 6716; Match(LR_BRACKET);
					State = 6717; column_name_list();
					State = 6718; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_dml_list_elemContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AsteriskContext asterisk() {
			return GetRuleContext<AsteriskContext>(0);
		}
		public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public Output_dml_list_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_dml_list_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOutput_dml_list_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOutput_dml_list_elem(this);
		}
	}

	[RuleVersion(0)]
	public Output_dml_list_elemContext output_dml_list_elem() {
		Output_dml_list_elemContext _localctx = new Output_dml_list_elemContext(_ctx, State);
		EnterRule(_localctx, 492, RULE_output_dml_list_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6726;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,834,_ctx) ) {
			case 1:
				{
				State = 6724; expression(0);
				}
				break;

			case 2:
				{
				State = 6725; asterisk();
				}
				break;
			}
			State = 6729;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,835,_ctx) ) {
			case 1:
				{
				State = 6728; as_column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_databaseContext : ParserRuleContext {
		public Id_Context database;
		public Id_Context collation_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode CONTAINMENT() { return GetToken(TSqlParser.CONTAINMENT, 0); }
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public Database_file_specContext[] database_file_spec() {
			return GetRuleContexts<Database_file_specContext>();
		}
		public Database_file_specContext database_file_spec(int i) {
			return GetRuleContext<Database_file_specContext>(i);
		}
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Create_database_optionContext[] create_database_option() {
			return GetRuleContexts<Create_database_optionContext>();
		}
		public Create_database_optionContext create_database_option(int i) {
			return GetRuleContext<Create_database_optionContext>(i);
		}
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode PARTIAL() { return GetToken(TSqlParser.PARTIAL, 0); }
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public Create_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_database(this);
		}
	}

	[RuleVersion(0)]
	public Create_databaseContext create_database() {
		Create_databaseContext _localctx = new Create_databaseContext(_ctx, State);
		EnterRule(_localctx, 494, RULE_create_database);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6731; Match(CREATE);
			State = 6732; Match(DATABASE);
			{
			State = 6733; _localctx.database = id_();
			}
			State = 6737;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,836,_ctx) ) {
			case 1:
				{
				State = 6734; Match(CONTAINMENT);
				State = 6735; Match(EQUAL);
				State = 6736;
				_la = _input.La(1);
				if ( !(_la==NONE || _la==PARTIAL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 6751;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,839,_ctx) ) {
			case 1:
				{
				State = 6739; Match(ON);
				State = 6741;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,837,_ctx) ) {
				case 1:
					{
					State = 6740; Match(PRIMARY);
					}
					break;
				}
				State = 6743; database_file_spec();
				State = 6748;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,838,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6744; Match(COMMA);
						State = 6745; database_file_spec();
						}
						} 
					}
					State = 6750;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,838,_ctx);
				}
				}
				break;
			}
			State = 6763;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,841,_ctx) ) {
			case 1:
				{
				State = 6753; Match(LOG);
				State = 6754; Match(ON);
				State = 6755; database_file_spec();
				State = 6760;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,840,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6756; Match(COMMA);
						State = 6757; database_file_spec();
						}
						} 
					}
					State = 6762;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,840,_ctx);
				}
				}
				break;
			}
			State = 6767;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,842,_ctx) ) {
			case 1:
				{
				State = 6765; Match(COLLATE);
				State = 6766; _localctx.collation_name = id_();
				}
				break;
			}
			State = 6778;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,844,_ctx) ) {
			case 1:
				{
				State = 6769; Match(WITH);
				State = 6770; create_database_option();
				State = 6775;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,843,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6771; Match(COMMA);
						State = 6772; create_database_option();
						}
						} 
					}
					State = 6777;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,843,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_database_azureContext : ParserRuleContext {
		public Id_Context database;
		public Id_Context collation_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode CONTAINMENT() { return GetToken(TSqlParser.CONTAINMENT, 0); }
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public Database_file_specContext[] database_file_spec() {
			return GetRuleContexts<Database_file_specContext>();
		}
		public Database_file_specContext database_file_spec(int i) {
			return GetRuleContext<Database_file_specContext>(i);
		}
		public Create_database_azure_optionsContext[] create_database_azure_options() {
			return GetRuleContexts<Create_database_azure_optionsContext>();
		}
		public Create_database_azure_optionsContext create_database_azure_options(int i) {
			return GetRuleContext<Create_database_azure_optionsContext>(i);
		}
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Create_database_optionContext[] create_database_option() {
			return GetRuleContexts<Create_database_optionContext>();
		}
		public Create_database_optionContext create_database_option(int i) {
			return GetRuleContext<Create_database_optionContext>(i);
		}
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode PARTIAL() { return GetToken(TSqlParser.PARTIAL, 0); }
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public Create_database_azureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_database_azure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_database_azure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_database_azure(this);
		}
	}

	[RuleVersion(0)]
	public Create_database_azureContext create_database_azure() {
		Create_database_azureContext _localctx = new Create_database_azureContext(_ctx, State);
		EnterRule(_localctx, 496, RULE_create_database_azure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6780; Match(CREATE);
			State = 6781; Match(DATABASE);
			{
			State = 6782; _localctx.database = id_();
			}
			State = 6786;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,845,_ctx) ) {
			case 1:
				{
				State = 6783; Match(CONTAINMENT);
				State = 6784; Match(EQUAL);
				State = 6785;
				_la = _input.La(1);
				if ( !(_la==NONE || _la==PARTIAL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 6800;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,848,_ctx) ) {
			case 1:
				{
				State = 6788; Match(ON);
				State = 6790;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,846,_ctx) ) {
				case 1:
					{
					State = 6789; Match(PRIMARY);
					}
					break;
				}
				State = 6792; database_file_spec();
				State = 6797;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,847,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6793; Match(COMMA);
						State = 6794; database_file_spec();
						}
						} 
					}
					State = 6799;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,847,_ctx);
				}
				}
				break;
			}
			State = 6813;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,850,_ctx) ) {
			case 1:
				{
				State = 6802; Match(LR_BRACKET);
				State = 6803; create_database_azure_options();
				State = 6808;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,849,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6804; Match(COMMA);
						State = 6805; create_database_azure_options();
						}
						} 
					}
					State = 6810;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,849,_ctx);
				}
				State = 6811; Match(RR_BRACKET);
				}
				break;
			}
			State = 6825;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,852,_ctx) ) {
			case 1:
				{
				State = 6815; Match(LOG);
				State = 6816; Match(ON);
				State = 6817; database_file_spec();
				State = 6822;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,851,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6818; Match(COMMA);
						State = 6819; database_file_spec();
						}
						} 
					}
					State = 6824;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,851,_ctx);
				}
				}
				break;
			}
			State = 6829;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,853,_ctx) ) {
			case 1:
				{
				State = 6827; Match(COLLATE);
				State = 6828; _localctx.collation_name = id_();
				}
				break;
			}
			State = 6840;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,855,_ctx) ) {
			case 1:
				{
				State = 6831; Match(WITH);
				State = 6832; create_database_option();
				State = 6837;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,854,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6833; Match(COMMA);
						State = 6834; create_database_option();
						}
						} 
					}
					State = 6839;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,854,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_database_azure_optionsContext : ParserRuleContext {
		public ITerminalNode MAXSIZE() { return GetToken(TSqlParser.MAXSIZE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode MB() { return GetToken(TSqlParser.MB, 0); }
		public ITerminalNode GB() { return GetToken(TSqlParser.GB, 0); }
		public ITerminalNode SERVICE_OBJECTIVE() { return GetToken(TSqlParser.SERVICE_OBJECTIVE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode EDITION() { return GetToken(TSqlParser.EDITION, 0); }
		public Create_database_azure_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_database_azure_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_database_azure_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_database_azure_options(this);
		}
	}

	[RuleVersion(0)]
	public Create_database_azure_optionsContext create_database_azure_options() {
		Create_database_azure_optionsContext _localctx = new Create_database_azure_optionsContext(_ctx, State);
		EnterRule(_localctx, 498, RULE_create_database_azure_options);
		int _la;
		try {
			State = 6852;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,856,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6842; Match(MAXSIZE);
				State = 6843; Match(EQUAL);
				State = 6844; Match(DECIMAL);
				State = 6845;
				_la = _input.La(1);
				if ( !(_la==GB || _la==MB) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6846; Match(SERVICE_OBJECTIVE);
				State = 6847; Match(EQUAL);
				State = 6848; Match(STRING);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6849; Match(EDITION);
				State = 6850; Match(EQUAL);
				State = 6851; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_indexContext : ParserRuleContext {
		public Search_conditionContext where;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		public ITerminalNode INCLUDE() { return GetToken(TSqlParser.INCLUDE, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public Create_index_optionsContext create_index_options() {
			return GetRuleContext<Create_index_optionsContext>(0);
		}
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Create_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_index(this);
		}
	}

	[RuleVersion(0)]
	public Create_indexContext create_index() {
		Create_indexContext _localctx = new Create_indexContext(_ctx, State);
		EnterRule(_localctx, 500, RULE_create_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6854; Match(CREATE);
			State = 6856;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,857,_ctx) ) {
			case 1:
				{
				State = 6855; Match(UNIQUE);
				}
				break;
			}
			State = 6859;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,858,_ctx) ) {
			case 1:
				{
				State = 6858; clustered();
				}
				break;
			}
			State = 6861; Match(INDEX);
			State = 6862; id_();
			State = 6863; Match(ON);
			State = 6864; table_name();
			State = 6865; Match(LR_BRACKET);
			State = 6866; column_name_list_with_order();
			State = 6867; Match(RR_BRACKET);
			State = 6873;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,859,_ctx) ) {
			case 1:
				{
				State = 6868; Match(INCLUDE);
				State = 6869; Match(LR_BRACKET);
				State = 6870; column_name_list();
				State = 6871; Match(RR_BRACKET);
				}
				break;
			}
			State = 6877;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,860,_ctx) ) {
			case 1:
				{
				State = 6875; Match(WHERE);
				State = 6876; _localctx.where = search_condition(0);
				}
				break;
			}
			State = 6880;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,861,_ctx) ) {
			case 1:
				{
				State = 6879; create_index_options();
				}
				break;
			}
			State = 6884;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,862,_ctx) ) {
			case 1:
				{
				State = 6882; Match(ON);
				State = 6883; id_();
				}
				break;
			}
			State = 6887;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,863,_ctx) ) {
			case 1:
				{
				State = 6886; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_index_optionsContext : ParserRuleContext {
		public Relational_index_optionContext[] relational_index_option() {
			return GetRuleContexts<Relational_index_optionContext>();
		}
		public Relational_index_optionContext relational_index_option(int i) {
			return GetRuleContext<Relational_index_optionContext>(i);
		}
		public Create_index_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_index_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_index_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_index_options(this);
		}
	}

	[RuleVersion(0)]
	public Create_index_optionsContext create_index_options() {
		Create_index_optionsContext _localctx = new Create_index_optionsContext(_ctx, State);
		EnterRule(_localctx, 502, RULE_create_index_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6889; Match(WITH);
			State = 6890; Match(LR_BRACKET);
			State = 6891; relational_index_option();
			State = 6896;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,864,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6892; Match(COMMA);
					State = 6893; relational_index_option();
					}
					} 
				}
				State = 6898;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,864,_ctx);
			}
			State = 6899; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_index_optionContext : ParserRuleContext {
		public Rebuild_index_optionContext rebuild_index_option() {
			return GetRuleContext<Rebuild_index_optionContext>(0);
		}
		public ITerminalNode DROP_EXISTING() { return GetToken(TSqlParser.DROP_EXISTING, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode OPTIMIZE_FOR_SEQUENTIAL_KEY() { return GetToken(TSqlParser.OPTIMIZE_FOR_SEQUENTIAL_KEY, 0); }
		public Relational_index_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_index_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRelational_index_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRelational_index_option(this);
		}
	}

	[RuleVersion(0)]
	public Relational_index_optionContext relational_index_option() {
		Relational_index_optionContext _localctx = new Relational_index_optionContext(_ctx, State);
		EnterRule(_localctx, 504, RULE_relational_index_option);
		try {
			State = 6908;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,865,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6901; rebuild_index_option();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6902; Match(DROP_EXISTING);
				State = 6903; Match(EQUAL);
				State = 6904; on_off();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6905; Match(OPTIMIZE_FOR_SEQUENTIAL_KEY);
				State = 6906; Match(EQUAL);
				State = 6907; on_off();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_indexContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode PAUSE() { return GetToken(TSqlParser.PAUSE, 0); }
		public ITerminalNode ABORT() { return GetToken(TSqlParser.ABORT, 0); }
		public ITerminalNode RESUME() { return GetToken(TSqlParser.RESUME, 0); }
		public Reorganize_partitionContext reorganize_partition() {
			return GetRuleContext<Reorganize_partitionContext>(0);
		}
		public Set_index_optionsContext set_index_options() {
			return GetRuleContext<Set_index_optionsContext>(0);
		}
		public Rebuild_partitionContext rebuild_partition() {
			return GetRuleContext<Rebuild_partitionContext>(0);
		}
		public Resumable_index_optionsContext resumable_index_options() {
			return GetRuleContext<Resumable_index_optionsContext>(0);
		}
		public Alter_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_index(this);
		}
	}

	[RuleVersion(0)]
	public Alter_indexContext alter_index() {
		Alter_indexContext _localctx = new Alter_indexContext(_ctx, State);
		EnterRule(_localctx, 506, RULE_alter_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6910; Match(ALTER);
			State = 6911; Match(INDEX);
			State = 6914;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,866,_ctx) ) {
			case 1:
				{
				State = 6912; id_();
				}
				break;

			case 2:
				{
				State = 6913; Match(ALL);
				}
				break;
			}
			State = 6916; Match(ON);
			State = 6917; table_name();
			State = 6928;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,868,_ctx) ) {
			case 1:
				{
				State = 6918; Match(DISABLE);
				}
				break;

			case 2:
				{
				State = 6919; Match(PAUSE);
				}
				break;

			case 3:
				{
				State = 6920; Match(ABORT);
				}
				break;

			case 4:
				{
				State = 6921; Match(RESUME);
				State = 6923;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,867,_ctx) ) {
				case 1:
					{
					State = 6922; resumable_index_options();
					}
					break;
				}
				}
				break;

			case 5:
				{
				State = 6925; reorganize_partition();
				}
				break;

			case 6:
				{
				State = 6926; set_index_options();
				}
				break;

			case 7:
				{
				State = 6927; rebuild_partition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Resumable_index_optionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Resumable_index_optionContext[] resumable_index_option() {
			return GetRuleContexts<Resumable_index_optionContext>();
		}
		public Resumable_index_optionContext resumable_index_option(int i) {
			return GetRuleContext<Resumable_index_optionContext>(i);
		}
		public Resumable_index_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resumable_index_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterResumable_index_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitResumable_index_options(this);
		}
	}

	[RuleVersion(0)]
	public Resumable_index_optionsContext resumable_index_options() {
		Resumable_index_optionsContext _localctx = new Resumable_index_optionsContext(_ctx, State);
		EnterRule(_localctx, 508, RULE_resumable_index_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6930; Match(WITH);
			State = 6931; Match(LR_BRACKET);
			{
			State = 6932; resumable_index_option();
			State = 6937;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,869,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6933; Match(COMMA);
					State = 6934; resumable_index_option();
					}
					} 
				}
				State = 6939;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,869,_ctx);
			}
			}
			State = 6940; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Resumable_index_optionContext : ParserRuleContext {
		public IToken max_degree_of_parallelism;
		public IToken max_duration;
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode MAX_DURATION() { return GetToken(TSqlParser.MAX_DURATION, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public Low_priority_lock_waitContext low_priority_lock_wait() {
			return GetRuleContext<Low_priority_lock_waitContext>(0);
		}
		public Resumable_index_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resumable_index_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterResumable_index_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitResumable_index_option(this);
		}
	}

	[RuleVersion(0)]
	public Resumable_index_optionContext resumable_index_option() {
		Resumable_index_optionContext _localctx = new Resumable_index_optionContext(_ctx, State);
		EnterRule(_localctx, 510, RULE_resumable_index_option);
		try {
			State = 6952;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,871,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6942; Match(MAXDOP);
				State = 6943; Match(EQUAL);
				State = 6944; _localctx.max_degree_of_parallelism = Match(DECIMAL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6945; Match(MAX_DURATION);
				State = 6946; Match(EQUAL);
				State = 6947; _localctx.max_duration = Match(DECIMAL);
				State = 6949;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,870,_ctx) ) {
				case 1:
					{
					State = 6948; Match(MINUTES);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6951; low_priority_lock_wait();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reorganize_partitionContext : ParserRuleContext {
		public ITerminalNode REORGANIZE() { return GetToken(TSqlParser.REORGANIZE, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Reorganize_optionsContext reorganize_options() {
			return GetRuleContext<Reorganize_optionsContext>(0);
		}
		public Reorganize_partitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reorganize_partition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterReorganize_partition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitReorganize_partition(this);
		}
	}

	[RuleVersion(0)]
	public Reorganize_partitionContext reorganize_partition() {
		Reorganize_partitionContext _localctx = new Reorganize_partitionContext(_ctx, State);
		EnterRule(_localctx, 512, RULE_reorganize_partition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6954; Match(REORGANIZE);
			State = 6958;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,872,_ctx) ) {
			case 1:
				{
				State = 6955; Match(PARTITION);
				State = 6956; Match(EQUAL);
				State = 6957; Match(DECIMAL);
				}
				break;
			}
			State = 6961;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,873,_ctx) ) {
			case 1:
				{
				State = 6960; reorganize_options();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reorganize_optionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Reorganize_optionContext[] reorganize_option() {
			return GetRuleContexts<Reorganize_optionContext>();
		}
		public Reorganize_optionContext reorganize_option(int i) {
			return GetRuleContext<Reorganize_optionContext>(i);
		}
		public Reorganize_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reorganize_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterReorganize_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitReorganize_options(this);
		}
	}

	[RuleVersion(0)]
	public Reorganize_optionsContext reorganize_options() {
		Reorganize_optionsContext _localctx = new Reorganize_optionsContext(_ctx, State);
		EnterRule(_localctx, 514, RULE_reorganize_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6963; Match(WITH);
			State = 6964; Match(LR_BRACKET);
			{
			State = 6965; reorganize_option();
			State = 6970;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,874,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6966; Match(COMMA);
					State = 6967; reorganize_option();
					}
					} 
				}
				State = 6972;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,874,_ctx);
			}
			}
			State = 6973; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reorganize_optionContext : ParserRuleContext {
		public ITerminalNode LOB_COMPACTION() { return GetToken(TSqlParser.LOB_COMPACTION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode COMPRESS_ALL_ROW_GROUPS() { return GetToken(TSqlParser.COMPRESS_ALL_ROW_GROUPS, 0); }
		public Reorganize_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reorganize_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterReorganize_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitReorganize_option(this);
		}
	}

	[RuleVersion(0)]
	public Reorganize_optionContext reorganize_option() {
		Reorganize_optionContext _localctx = new Reorganize_optionContext(_ctx, State);
		EnterRule(_localctx, 516, RULE_reorganize_option);
		try {
			State = 6981;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,875,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6975; Match(LOB_COMPACTION);
				State = 6976; Match(EQUAL);
				State = 6977; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6978; Match(COMPRESS_ALL_ROW_GROUPS);
				State = 6979; Match(EQUAL);
				State = 6980; on_off();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_index_optionsContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public Set_index_optionContext[] set_index_option() {
			return GetRuleContexts<Set_index_optionContext>();
		}
		public Set_index_optionContext set_index_option(int i) {
			return GetRuleContext<Set_index_optionContext>(i);
		}
		public Set_index_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_index_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSet_index_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSet_index_options(this);
		}
	}

	[RuleVersion(0)]
	public Set_index_optionsContext set_index_options() {
		Set_index_optionsContext _localctx = new Set_index_optionsContext(_ctx, State);
		EnterRule(_localctx, 518, RULE_set_index_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6983; Match(SET);
			State = 6984; Match(LR_BRACKET);
			State = 6985; set_index_option();
			State = 6990;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,876,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6986; Match(COMMA);
					State = 6987; set_index_option();
					}
					} 
				}
				State = 6992;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,876,_ctx);
			}
			State = 6993; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_index_optionContext : ParserRuleContext {
		public IToken delay;
		public ITerminalNode ALLOW_ROW_LOCKS() { return GetToken(TSqlParser.ALLOW_ROW_LOCKS, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode ALLOW_PAGE_LOCKS() { return GetToken(TSqlParser.ALLOW_PAGE_LOCKS, 0); }
		public ITerminalNode OPTIMIZE_FOR_SEQUENTIAL_KEY() { return GetToken(TSqlParser.OPTIMIZE_FOR_SEQUENTIAL_KEY, 0); }
		public ITerminalNode IGNORE_DUP_KEY() { return GetToken(TSqlParser.IGNORE_DUP_KEY, 0); }
		public ITerminalNode STATISTICS_NORECOMPUTE() { return GetToken(TSqlParser.STATISTICS_NORECOMPUTE, 0); }
		public ITerminalNode COMPRESSION_DELAY() { return GetToken(TSqlParser.COMPRESSION_DELAY, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public Set_index_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_index_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSet_index_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSet_index_option(this);
		}
	}

	[RuleVersion(0)]
	public Set_index_optionContext set_index_option() {
		Set_index_optionContext _localctx = new Set_index_optionContext(_ctx, State);
		EnterRule(_localctx, 520, RULE_set_index_option);
		try {
			State = 7016;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,878,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6995; Match(ALLOW_ROW_LOCKS);
				State = 6996; Match(EQUAL);
				State = 6997; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6998; Match(ALLOW_PAGE_LOCKS);
				State = 6999; Match(EQUAL);
				State = 7000; on_off();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7001; Match(OPTIMIZE_FOR_SEQUENTIAL_KEY);
				State = 7002; Match(EQUAL);
				State = 7003; on_off();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7004; Match(IGNORE_DUP_KEY);
				State = 7005; Match(EQUAL);
				State = 7006; on_off();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7007; Match(STATISTICS_NORECOMPUTE);
				State = 7008; Match(EQUAL);
				State = 7009; on_off();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7010; Match(COMPRESSION_DELAY);
				State = 7011; Match(EQUAL);
				State = 7012; _localctx.delay = Match(DECIMAL);
				State = 7014;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,877,_ctx) ) {
				case 1:
					{
					State = 7013; Match(MINUTES);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rebuild_partitionContext : ParserRuleContext {
		public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Rebuild_index_optionsContext rebuild_index_options() {
			return GetRuleContext<Rebuild_index_optionsContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Single_partition_rebuild_index_optionsContext single_partition_rebuild_index_options() {
			return GetRuleContext<Single_partition_rebuild_index_optionsContext>(0);
		}
		public Rebuild_partitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rebuild_partition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRebuild_partition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRebuild_partition(this);
		}
	}

	[RuleVersion(0)]
	public Rebuild_partitionContext rebuild_partition() {
		Rebuild_partitionContext _localctx = new Rebuild_partitionContext(_ctx, State);
		EnterRule(_localctx, 522, RULE_rebuild_partition);
		try {
			State = 7034;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,882,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7018; Match(REBUILD);
				State = 7022;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,879,_ctx) ) {
				case 1:
					{
					State = 7019; Match(PARTITION);
					State = 7020; Match(EQUAL);
					State = 7021; Match(ALL);
					}
					break;
				}
				State = 7025;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,880,_ctx) ) {
				case 1:
					{
					State = 7024; rebuild_index_options();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7027; Match(REBUILD);
				State = 7028; Match(PARTITION);
				State = 7029; Match(EQUAL);
				State = 7030; Match(DECIMAL);
				State = 7032;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,881,_ctx) ) {
				case 1:
					{
					State = 7031; single_partition_rebuild_index_options();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rebuild_index_optionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Rebuild_index_optionContext[] rebuild_index_option() {
			return GetRuleContexts<Rebuild_index_optionContext>();
		}
		public Rebuild_index_optionContext rebuild_index_option(int i) {
			return GetRuleContext<Rebuild_index_optionContext>(i);
		}
		public Rebuild_index_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rebuild_index_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRebuild_index_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRebuild_index_options(this);
		}
	}

	[RuleVersion(0)]
	public Rebuild_index_optionsContext rebuild_index_options() {
		Rebuild_index_optionsContext _localctx = new Rebuild_index_optionsContext(_ctx, State);
		EnterRule(_localctx, 524, RULE_rebuild_index_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7036; Match(WITH);
			State = 7037; Match(LR_BRACKET);
			State = 7038; rebuild_index_option();
			State = 7043;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,883,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7039; Match(COMMA);
					State = 7040; rebuild_index_option();
					}
					} 
				}
				State = 7045;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,883,_ctx);
			}
			State = 7046; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rebuild_index_optionContext : ParserRuleContext {
		public IToken times;
		public IToken max_degree_of_parallelism;
		public ITerminalNode PAD_INDEX() { return GetToken(TSqlParser.PAD_INDEX, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode FILLFACTOR() { return GetToken(TSqlParser.FILLFACTOR, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode SORT_IN_TEMPDB() { return GetToken(TSqlParser.SORT_IN_TEMPDB, 0); }
		public ITerminalNode IGNORE_DUP_KEY() { return GetToken(TSqlParser.IGNORE_DUP_KEY, 0); }
		public ITerminalNode STATISTICS_NORECOMPUTE() { return GetToken(TSqlParser.STATISTICS_NORECOMPUTE, 0); }
		public ITerminalNode STATISTICS_INCREMENTAL() { return GetToken(TSqlParser.STATISTICS_INCREMENTAL, 0); }
		public ITerminalNode ONLINE() { return GetToken(TSqlParser.ONLINE, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Low_priority_lock_waitContext low_priority_lock_wait() {
			return GetRuleContext<Low_priority_lock_waitContext>(0);
		}
		public ITerminalNode RESUMABLE() { return GetToken(TSqlParser.RESUMABLE, 0); }
		public ITerminalNode MAX_DURATION() { return GetToken(TSqlParser.MAX_DURATION, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public ITerminalNode ALLOW_ROW_LOCKS() { return GetToken(TSqlParser.ALLOW_ROW_LOCKS, 0); }
		public ITerminalNode ALLOW_PAGE_LOCKS() { return GetToken(TSqlParser.ALLOW_PAGE_LOCKS, 0); }
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode DATA_COMPRESSION() { return GetToken(TSqlParser.DATA_COMPRESSION, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		public ITerminalNode PAGE() { return GetToken(TSqlParser.PAGE, 0); }
		public ITerminalNode COLUMNSTORE() { return GetToken(TSqlParser.COLUMNSTORE, 0); }
		public ITerminalNode COLUMNSTORE_ARCHIVE() { return GetToken(TSqlParser.COLUMNSTORE_ARCHIVE, 0); }
		public On_partitionsContext on_partitions() {
			return GetRuleContext<On_partitionsContext>(0);
		}
		public ITerminalNode XML_COMPRESSION() { return GetToken(TSqlParser.XML_COMPRESSION, 0); }
		public Rebuild_index_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rebuild_index_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRebuild_index_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRebuild_index_option(this);
		}
	}

	[RuleVersion(0)]
	public Rebuild_index_optionContext rebuild_index_option() {
		Rebuild_index_optionContext _localctx = new Rebuild_index_optionContext(_ctx, State);
		EnterRule(_localctx, 526, RULE_rebuild_index_option);
		int _la;
		try {
			State = 7108;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,889,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7048; Match(PAD_INDEX);
				State = 7049; Match(EQUAL);
				State = 7050; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7051; Match(FILLFACTOR);
				State = 7052; Match(EQUAL);
				State = 7053; Match(DECIMAL);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7054; Match(SORT_IN_TEMPDB);
				State = 7055; Match(EQUAL);
				State = 7056; on_off();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7057; Match(IGNORE_DUP_KEY);
				State = 7058; Match(EQUAL);
				State = 7059; on_off();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7060; Match(STATISTICS_NORECOMPUTE);
				State = 7061; Match(EQUAL);
				State = 7062; on_off();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7063; Match(STATISTICS_INCREMENTAL);
				State = 7064; Match(EQUAL);
				State = 7065; on_off();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7066; Match(ONLINE);
				State = 7067; Match(EQUAL);
				State = 7076;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,885,_ctx) ) {
				case 1:
					{
					State = 7068; Match(ON);
					State = 7073;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,884,_ctx) ) {
					case 1:
						{
						State = 7069; Match(LR_BRACKET);
						State = 7070; low_priority_lock_wait();
						State = 7071; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 7075; Match(OFF);
					}
					break;
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7078; Match(RESUMABLE);
				State = 7079; Match(EQUAL);
				State = 7080; on_off();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7081; Match(MAX_DURATION);
				State = 7082; Match(EQUAL);
				State = 7083; _localctx.times = Match(DECIMAL);
				State = 7085;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,886,_ctx) ) {
				case 1:
					{
					State = 7084; Match(MINUTES);
					}
					break;
				}
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7087; Match(ALLOW_ROW_LOCKS);
				State = 7088; Match(EQUAL);
				State = 7089; on_off();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 7090; Match(ALLOW_PAGE_LOCKS);
				State = 7091; Match(EQUAL);
				State = 7092; on_off();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 7093; Match(MAXDOP);
				State = 7094; Match(EQUAL);
				State = 7095; _localctx.max_degree_of_parallelism = Match(DECIMAL);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 7096; Match(DATA_COMPRESSION);
				State = 7097; Match(EQUAL);
				State = 7098;
				_la = _input.La(1);
				if ( !(_la==COLUMNSTORE || _la==COLUMNSTORE_ARCHIVE || _la==NONE || _la==PAGE || _la==ROW) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 7100;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,887,_ctx) ) {
				case 1:
					{
					State = 7099; on_partitions();
					}
					break;
				}
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 7102; Match(XML_COMPRESSION);
				State = 7103; Match(EQUAL);
				State = 7104; on_off();
				State = 7106;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,888,_ctx) ) {
				case 1:
					{
					State = 7105; on_partitions();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_partition_rebuild_index_optionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Single_partition_rebuild_index_optionContext[] single_partition_rebuild_index_option() {
			return GetRuleContexts<Single_partition_rebuild_index_optionContext>();
		}
		public Single_partition_rebuild_index_optionContext single_partition_rebuild_index_option(int i) {
			return GetRuleContext<Single_partition_rebuild_index_optionContext>(i);
		}
		public Single_partition_rebuild_index_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_partition_rebuild_index_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSingle_partition_rebuild_index_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSingle_partition_rebuild_index_options(this);
		}
	}

	[RuleVersion(0)]
	public Single_partition_rebuild_index_optionsContext single_partition_rebuild_index_options() {
		Single_partition_rebuild_index_optionsContext _localctx = new Single_partition_rebuild_index_optionsContext(_ctx, State);
		EnterRule(_localctx, 528, RULE_single_partition_rebuild_index_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7110; Match(WITH);
			State = 7111; Match(LR_BRACKET);
			State = 7112; single_partition_rebuild_index_option();
			State = 7117;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,890,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7113; Match(COMMA);
					State = 7114; single_partition_rebuild_index_option();
					}
					} 
				}
				State = 7119;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,890,_ctx);
			}
			State = 7120; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_partition_rebuild_index_optionContext : ParserRuleContext {
		public IToken max_degree_of_parallelism;
		public ITerminalNode SORT_IN_TEMPDB() { return GetToken(TSqlParser.SORT_IN_TEMPDB, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode RESUMABLE() { return GetToken(TSqlParser.RESUMABLE, 0); }
		public ITerminalNode DATA_COMPRESSION() { return GetToken(TSqlParser.DATA_COMPRESSION, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		public ITerminalNode PAGE() { return GetToken(TSqlParser.PAGE, 0); }
		public ITerminalNode COLUMNSTORE() { return GetToken(TSqlParser.COLUMNSTORE, 0); }
		public ITerminalNode COLUMNSTORE_ARCHIVE() { return GetToken(TSqlParser.COLUMNSTORE_ARCHIVE, 0); }
		public On_partitionsContext on_partitions() {
			return GetRuleContext<On_partitionsContext>(0);
		}
		public ITerminalNode XML_COMPRESSION() { return GetToken(TSqlParser.XML_COMPRESSION, 0); }
		public ITerminalNode ONLINE() { return GetToken(TSqlParser.ONLINE, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Low_priority_lock_waitContext low_priority_lock_wait() {
			return GetRuleContext<Low_priority_lock_waitContext>(0);
		}
		public Single_partition_rebuild_index_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_partition_rebuild_index_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSingle_partition_rebuild_index_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSingle_partition_rebuild_index_option(this);
		}
	}

	[RuleVersion(0)]
	public Single_partition_rebuild_index_optionContext single_partition_rebuild_index_option() {
		Single_partition_rebuild_index_optionContext _localctx = new Single_partition_rebuild_index_optionContext(_ctx, State);
		EnterRule(_localctx, 530, RULE_single_partition_rebuild_index_option);
		int _la;
		try {
			State = 7155;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,895,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7122; Match(SORT_IN_TEMPDB);
				State = 7123; Match(EQUAL);
				State = 7124; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7125; Match(MAXDOP);
				State = 7126; Match(EQUAL);
				State = 7127; _localctx.max_degree_of_parallelism = Match(DECIMAL);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7128; Match(RESUMABLE);
				State = 7129; Match(EQUAL);
				State = 7130; on_off();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7131; Match(DATA_COMPRESSION);
				State = 7132; Match(EQUAL);
				State = 7133;
				_la = _input.La(1);
				if ( !(_la==COLUMNSTORE || _la==COLUMNSTORE_ARCHIVE || _la==NONE || _la==PAGE || _la==ROW) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 7135;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,891,_ctx) ) {
				case 1:
					{
					State = 7134; on_partitions();
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7137; Match(XML_COMPRESSION);
				State = 7138; Match(EQUAL);
				State = 7139; on_off();
				State = 7141;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,892,_ctx) ) {
				case 1:
					{
					State = 7140; on_partitions();
					}
					break;
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7143; Match(ONLINE);
				State = 7144; Match(EQUAL);
				State = 7153;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,894,_ctx) ) {
				case 1:
					{
					State = 7145; Match(ON);
					State = 7150;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,893,_ctx) ) {
					case 1:
						{
						State = 7146; Match(LR_BRACKET);
						State = 7147; low_priority_lock_wait();
						State = 7148; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 7152; Match(OFF);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_partitionsContext : ParserRuleContext {
		public IToken partition_number;
		public IToken to_partition_number;
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode PARTITIONS() { return GetToken(TSqlParser.PARTITIONS, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public On_partitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_partitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOn_partitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOn_partitions(this);
		}
	}

	[RuleVersion(0)]
	public On_partitionsContext on_partitions() {
		On_partitionsContext _localctx = new On_partitionsContext(_ctx, State);
		EnterRule(_localctx, 532, RULE_on_partitions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7157; Match(ON);
			State = 7158; Match(PARTITIONS);
			State = 7159; Match(LR_BRACKET);
			State = 7160; _localctx.partition_number = Match(DECIMAL);
			State = 7163;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,896,_ctx) ) {
			case 1:
				{
				State = 7161; Match(TO);
				State = 7162; _localctx.to_partition_number = Match(DECIMAL);
				}
				break;
			}
			State = 7173;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,898,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7165; Match(COMMA);
					State = 7166; _localctx.partition_number = Match(DECIMAL);
					State = 7169;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,897,_ctx) ) {
					case 1:
						{
						State = 7167; Match(TO);
						State = 7168; _localctx.to_partition_number = Match(DECIMAL);
						}
						break;
					}
					}
					} 
				}
				State = 7175;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,898,_ctx);
			}
			State = 7176; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_columnstore_indexContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode CLUSTERED() { return GetToken(TSqlParser.CLUSTERED, 0); }
		public ITerminalNode COLUMNSTORE() { return GetToken(TSqlParser.COLUMNSTORE, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Create_columnstore_index_optionsContext create_columnstore_index_options() {
			return GetRuleContext<Create_columnstore_index_optionsContext>(0);
		}
		public Create_columnstore_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_columnstore_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_columnstore_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_columnstore_index(this);
		}
	}

	[RuleVersion(0)]
	public Create_columnstore_indexContext create_columnstore_index() {
		Create_columnstore_indexContext _localctx = new Create_columnstore_indexContext(_ctx, State);
		EnterRule(_localctx, 534, RULE_create_columnstore_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7178; Match(CREATE);
			State = 7179; Match(CLUSTERED);
			State = 7180; Match(COLUMNSTORE);
			State = 7181; Match(INDEX);
			State = 7182; id_();
			State = 7183; Match(ON);
			State = 7184; table_name();
			State = 7186;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,899,_ctx) ) {
			case 1:
				{
				State = 7185; create_columnstore_index_options();
				}
				break;
			}
			State = 7190;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,900,_ctx) ) {
			case 1:
				{
				State = 7188; Match(ON);
				State = 7189; id_();
				}
				break;
			}
			State = 7193;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,901,_ctx) ) {
			case 1:
				{
				State = 7192; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_columnstore_index_optionsContext : ParserRuleContext {
		public Columnstore_index_optionContext[] columnstore_index_option() {
			return GetRuleContexts<Columnstore_index_optionContext>();
		}
		public Columnstore_index_optionContext columnstore_index_option(int i) {
			return GetRuleContext<Columnstore_index_optionContext>(i);
		}
		public Create_columnstore_index_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_columnstore_index_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_columnstore_index_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_columnstore_index_options(this);
		}
	}

	[RuleVersion(0)]
	public Create_columnstore_index_optionsContext create_columnstore_index_options() {
		Create_columnstore_index_optionsContext _localctx = new Create_columnstore_index_optionsContext(_ctx, State);
		EnterRule(_localctx, 536, RULE_create_columnstore_index_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7195; Match(WITH);
			State = 7196; Match(LR_BRACKET);
			State = 7197; columnstore_index_option();
			State = 7202;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,902,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7198; Match(COMMA);
					State = 7199; columnstore_index_option();
					}
					} 
				}
				State = 7204;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,902,_ctx);
			}
			State = 7205; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Columnstore_index_optionContext : ParserRuleContext {
		public IToken max_degree_of_parallelism;
		public IToken delay;
		public ITerminalNode DROP_EXISTING() { return GetToken(TSqlParser.DROP_EXISTING, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode ONLINE() { return GetToken(TSqlParser.ONLINE, 0); }
		public ITerminalNode COMPRESSION_DELAY() { return GetToken(TSqlParser.COMPRESSION_DELAY, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public ITerminalNode DATA_COMPRESSION() { return GetToken(TSqlParser.DATA_COMPRESSION, 0); }
		public ITerminalNode COLUMNSTORE() { return GetToken(TSqlParser.COLUMNSTORE, 0); }
		public ITerminalNode COLUMNSTORE_ARCHIVE() { return GetToken(TSqlParser.COLUMNSTORE_ARCHIVE, 0); }
		public On_partitionsContext on_partitions() {
			return GetRuleContext<On_partitionsContext>(0);
		}
		public Columnstore_index_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnstore_index_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumnstore_index_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumnstore_index_option(this);
		}
	}

	[RuleVersion(0)]
	public Columnstore_index_optionContext columnstore_index_option() {
		Columnstore_index_optionContext _localctx = new Columnstore_index_optionContext(_ctx, State);
		EnterRule(_localctx, 538, RULE_columnstore_index_option);
		int _la;
		try {
			State = 7228;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,905,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7207; Match(DROP_EXISTING);
				State = 7208; Match(EQUAL);
				State = 7209; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7210; Match(MAXDOP);
				State = 7211; Match(EQUAL);
				State = 7212; _localctx.max_degree_of_parallelism = Match(DECIMAL);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7213; Match(ONLINE);
				State = 7214; Match(EQUAL);
				State = 7215; on_off();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7216; Match(COMPRESSION_DELAY);
				State = 7217; Match(EQUAL);
				State = 7218; _localctx.delay = Match(DECIMAL);
				State = 7220;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,903,_ctx) ) {
				case 1:
					{
					State = 7219; Match(MINUTES);
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7222; Match(DATA_COMPRESSION);
				State = 7223; Match(EQUAL);
				State = 7224;
				_la = _input.La(1);
				if ( !(_la==COLUMNSTORE || _la==COLUMNSTORE_ARCHIVE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 7226;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,904,_ctx) ) {
				case 1:
					{
					State = 7225; on_partitions();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_nonclustered_columnstore_indexContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode COLUMNSTORE() { return GetToken(TSqlParser.COLUMNSTORE, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		public ITerminalNode NONCLUSTERED() { return GetToken(TSqlParser.NONCLUSTERED, 0); }
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Create_columnstore_index_optionsContext create_columnstore_index_options() {
			return GetRuleContext<Create_columnstore_index_optionsContext>(0);
		}
		public Create_nonclustered_columnstore_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_nonclustered_columnstore_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_nonclustered_columnstore_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_nonclustered_columnstore_index(this);
		}
	}

	[RuleVersion(0)]
	public Create_nonclustered_columnstore_indexContext create_nonclustered_columnstore_index() {
		Create_nonclustered_columnstore_indexContext _localctx = new Create_nonclustered_columnstore_indexContext(_ctx, State);
		EnterRule(_localctx, 540, RULE_create_nonclustered_columnstore_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7230; Match(CREATE);
			State = 7232;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,906,_ctx) ) {
			case 1:
				{
				State = 7231; Match(NONCLUSTERED);
				}
				break;
			}
			State = 7234; Match(COLUMNSTORE);
			State = 7235; Match(INDEX);
			State = 7236; id_();
			State = 7237; Match(ON);
			State = 7238; table_name();
			State = 7239; Match(LR_BRACKET);
			State = 7240; column_name_list_with_order();
			State = 7241; Match(RR_BRACKET);
			State = 7244;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,907,_ctx) ) {
			case 1:
				{
				State = 7242; Match(WHERE);
				State = 7243; search_condition(0);
				}
				break;
			}
			State = 7247;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,908,_ctx) ) {
			case 1:
				{
				State = 7246; create_columnstore_index_options();
				}
				break;
			}
			State = 7251;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,909,_ctx) ) {
			case 1:
				{
				State = 7249; Match(ON);
				State = 7250; id_();
				}
				break;
			}
			State = 7254;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,910,_ctx) ) {
			case 1:
				{
				State = 7253; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_xml_indexContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode[] XML() { return GetTokens(TSqlParser.XML); }
		public ITerminalNode XML(int i) {
			return GetToken(TSqlParser.XML, i);
		}
		public ITerminalNode[] INDEX() { return GetTokens(TSqlParser.INDEX); }
		public ITerminalNode INDEX(int i) {
			return GetToken(TSqlParser.INDEX, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public Xml_index_optionsContext xml_index_options() {
			return GetRuleContext<Xml_index_optionsContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public Create_xml_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_xml_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_xml_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_xml_index(this);
		}
	}

	[RuleVersion(0)]
	public Create_xml_indexContext create_xml_index() {
		Create_xml_indexContext _localctx = new Create_xml_indexContext(_ctx, State);
		EnterRule(_localctx, 542, RULE_create_xml_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7256; Match(CREATE);
			State = 7258;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,911,_ctx) ) {
			case 1:
				{
				State = 7257; Match(PRIMARY);
				}
				break;
			}
			State = 7260; Match(XML);
			State = 7261; Match(INDEX);
			State = 7262; id_();
			State = 7263; Match(ON);
			State = 7264; table_name();
			State = 7265; Match(LR_BRACKET);
			State = 7266; id_();
			State = 7267; Match(RR_BRACKET);
			State = 7278;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,914,_ctx) ) {
			case 1:
				{
				State = 7268; Match(USING);
				State = 7269; Match(XML);
				State = 7270; Match(INDEX);
				State = 7271; id_();
				State = 7276;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,913,_ctx) ) {
				case 1:
					{
					State = 7272; Match(FOR);
					State = 7274;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,912,_ctx) ) {
					case 1:
						{
						State = 7273;
						_la = _input.La(1);
						if ( !(_la==PATH || _la==PROPERTY || _la==VALUE) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			State = 7281;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,915,_ctx) ) {
			case 1:
				{
				State = 7280; xml_index_options();
				}
				break;
			}
			State = 7284;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,916,_ctx) ) {
			case 1:
				{
				State = 7283; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_index_optionsContext : ParserRuleContext {
		public Xml_index_optionContext[] xml_index_option() {
			return GetRuleContexts<Xml_index_optionContext>();
		}
		public Xml_index_optionContext xml_index_option(int i) {
			return GetRuleContext<Xml_index_optionContext>(i);
		}
		public Xml_index_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_index_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_index_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_index_options(this);
		}
	}

	[RuleVersion(0)]
	public Xml_index_optionsContext xml_index_options() {
		Xml_index_optionsContext _localctx = new Xml_index_optionsContext(_ctx, State);
		EnterRule(_localctx, 544, RULE_xml_index_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7286; Match(WITH);
			State = 7287; Match(LR_BRACKET);
			State = 7288; xml_index_option();
			State = 7293;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,917,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7289; Match(COMMA);
					State = 7290; xml_index_option();
					}
					} 
				}
				State = 7295;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,917,_ctx);
			}
			State = 7296; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_index_optionContext : ParserRuleContext {
		public IToken max_degree_of_parallelism;
		public ITerminalNode PAD_INDEX() { return GetToken(TSqlParser.PAD_INDEX, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode FILLFACTOR() { return GetToken(TSqlParser.FILLFACTOR, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode SORT_IN_TEMPDB() { return GetToken(TSqlParser.SORT_IN_TEMPDB, 0); }
		public ITerminalNode IGNORE_DUP_KEY() { return GetToken(TSqlParser.IGNORE_DUP_KEY, 0); }
		public ITerminalNode DROP_EXISTING() { return GetToken(TSqlParser.DROP_EXISTING, 0); }
		public ITerminalNode ONLINE() { return GetToken(TSqlParser.ONLINE, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Low_priority_lock_waitContext low_priority_lock_wait() {
			return GetRuleContext<Low_priority_lock_waitContext>(0);
		}
		public ITerminalNode ALLOW_ROW_LOCKS() { return GetToken(TSqlParser.ALLOW_ROW_LOCKS, 0); }
		public ITerminalNode ALLOW_PAGE_LOCKS() { return GetToken(TSqlParser.ALLOW_PAGE_LOCKS, 0); }
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode XML_COMPRESSION() { return GetToken(TSqlParser.XML_COMPRESSION, 0); }
		public Xml_index_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_index_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_index_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_index_option(this);
		}
	}

	[RuleVersion(0)]
	public Xml_index_optionContext xml_index_option() {
		Xml_index_optionContext _localctx = new Xml_index_optionContext(_ctx, State);
		EnterRule(_localctx, 546, RULE_xml_index_option);
		try {
			State = 7337;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,920,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7298; Match(PAD_INDEX);
				State = 7299; Match(EQUAL);
				State = 7300; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7301; Match(FILLFACTOR);
				State = 7302; Match(EQUAL);
				State = 7303; Match(DECIMAL);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7304; Match(SORT_IN_TEMPDB);
				State = 7305; Match(EQUAL);
				State = 7306; on_off();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7307; Match(IGNORE_DUP_KEY);
				State = 7308; Match(EQUAL);
				State = 7309; on_off();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7310; Match(DROP_EXISTING);
				State = 7311; Match(EQUAL);
				State = 7312; on_off();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7313; Match(ONLINE);
				State = 7314; Match(EQUAL);
				State = 7323;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,919,_ctx) ) {
				case 1:
					{
					State = 7315; Match(ON);
					State = 7320;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,918,_ctx) ) {
					case 1:
						{
						State = 7316; Match(LR_BRACKET);
						State = 7317; low_priority_lock_wait();
						State = 7318; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 7322; Match(OFF);
					}
					break;
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7325; Match(ALLOW_ROW_LOCKS);
				State = 7326; Match(EQUAL);
				State = 7327; on_off();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7328; Match(ALLOW_PAGE_LOCKS);
				State = 7329; Match(EQUAL);
				State = 7330; on_off();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7331; Match(MAXDOP);
				State = 7332; Match(EQUAL);
				State = 7333; _localctx.max_degree_of_parallelism = Match(DECIMAL);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7334; Match(XML_COMPRESSION);
				State = 7335; Match(EQUAL);
				State = 7336; on_off();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_procedureContext : ParserRuleContext {
		public IToken proc;
		public Func_proc_name_schemaContext procName;
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Func_proc_name_schemaContext func_proc_name_schema() {
			return GetRuleContext<Func_proc_name_schemaContext>(0);
		}
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode PROC() { return GetToken(TSqlParser.PROC, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(TSqlParser.PROCEDURE, 0); }
		public As_external_nameContext as_external_name() {
			return GetRuleContext<As_external_nameContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Procedure_paramContext[] procedure_param() {
			return GetRuleContexts<Procedure_paramContext>();
		}
		public Procedure_paramContext procedure_param(int i) {
			return GetRuleContext<Procedure_paramContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Procedure_optionContext[] procedure_option() {
			return GetRuleContexts<Procedure_optionContext>();
		}
		public Procedure_optionContext procedure_option(int i) {
			return GetRuleContext<Procedure_optionContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(TSqlParser.REPLACE, 0); }
		public Create_or_alter_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_procedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_procedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_procedure(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_procedureContext create_or_alter_procedure() {
		Create_or_alter_procedureContext _localctx = new Create_or_alter_procedureContext(_ctx, State);
		EnterRule(_localctx, 548, RULE_create_or_alter_procedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7345;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,922,_ctx) ) {
			case 1:
				{
				{
				State = 7339; Match(CREATE);
				State = 7342;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,921,_ctx) ) {
				case 1:
					{
					State = 7340; Match(OR);
					State = 7341;
					_la = _input.La(1);
					if ( !(_la==ALTER || _la==REPLACE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				}
				break;

			case 2:
				{
				State = 7344; Match(ALTER);
				}
				break;
			}
			State = 7347;
			_localctx.proc = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
				_localctx.proc = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 7348; _localctx.procName = func_proc_name_schema();
			State = 7351;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,923,_ctx) ) {
			case 1:
				{
				State = 7349; Match(SEMI);
				State = 7350; Match(DECIMAL);
				}
				break;
			}
			State = 7367;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,927,_ctx) ) {
			case 1:
				{
				State = 7354;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,924,_ctx) ) {
				case 1:
					{
					State = 7353; Match(LR_BRACKET);
					}
					break;
				}
				State = 7356; procedure_param();
				State = 7361;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,925,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7357; Match(COMMA);
						State = 7358; procedure_param();
						}
						} 
					}
					State = 7363;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,925,_ctx);
				}
				State = 7365;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,926,_ctx) ) {
				case 1:
					{
					State = 7364; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
			State = 7378;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,929,_ctx) ) {
			case 1:
				{
				State = 7369; Match(WITH);
				State = 7370; procedure_option();
				State = 7375;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,928,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7371; Match(COMMA);
						State = 7372; procedure_option();
						}
						} 
					}
					State = 7377;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,928,_ctx);
				}
				}
				break;
			}
			State = 7382;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,930,_ctx) ) {
			case 1:
				{
				State = 7380; Match(FOR);
				State = 7381; Match(REPLICATION);
				}
				break;
			}
			State = 7384; Match(AS);
			State = 7392;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,932,_ctx) ) {
			case 1:
				{
				State = 7385; as_external_name();
				}
				break;

			case 2:
				{
				State = 7389;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,931,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7386; sql_clauses();
						}
						} 
					}
					State = 7391;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,931,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_external_nameContext : ParserRuleContext {
		public Id_Context assembly_name;
		public Id_Context class_name;
		public Id_Context method_name;
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public As_external_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_external_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAs_external_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAs_external_name(this);
		}
	}

	[RuleVersion(0)]
	public As_external_nameContext as_external_name() {
		As_external_nameContext _localctx = new As_external_nameContext(_ctx, State);
		EnterRule(_localctx, 550, RULE_as_external_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7394; Match(EXTERNAL);
			State = 7395; Match(NAME);
			State = 7396; _localctx.assembly_name = id_();
			State = 7397; Match(DOT);
			State = 7398; _localctx.class_name = id_();
			State = 7399; Match(DOT);
			State = 7400; _localctx.method_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_triggerContext : ParserRuleContext {
		public Create_or_alter_dml_triggerContext create_or_alter_dml_trigger() {
			return GetRuleContext<Create_or_alter_dml_triggerContext>(0);
		}
		public Create_or_alter_ddl_triggerContext create_or_alter_ddl_trigger() {
			return GetRuleContext<Create_or_alter_ddl_triggerContext>(0);
		}
		public Create_or_alter_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_trigger(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_triggerContext create_or_alter_trigger() {
		Create_or_alter_triggerContext _localctx = new Create_or_alter_triggerContext(_ctx, State);
		EnterRule(_localctx, 552, RULE_create_or_alter_trigger);
		try {
			State = 7404;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,933,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7402; create_or_alter_dml_trigger();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7403; create_or_alter_ddl_trigger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_dml_triggerContext : ParserRuleContext {
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Dml_trigger_operationContext[] dml_trigger_operation() {
			return GetRuleContexts<Dml_trigger_operationContext>();
		}
		public Dml_trigger_operationContext dml_trigger_operation(int i) {
			return GetRuleContext<Dml_trigger_operationContext>(i);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] FOR() { return GetTokens(TSqlParser.FOR); }
		public ITerminalNode FOR(int i) {
			return GetToken(TSqlParser.FOR, i);
		}
		public ITerminalNode AFTER() { return GetToken(TSqlParser.AFTER, 0); }
		public ITerminalNode INSTEAD() { return GetToken(TSqlParser.INSTEAD, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public ITerminalNode[] WITH() { return GetTokens(TSqlParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(TSqlParser.WITH, i);
		}
		public Dml_trigger_optionContext[] dml_trigger_option() {
			return GetRuleContexts<Dml_trigger_optionContext>();
		}
		public Dml_trigger_optionContext dml_trigger_option(int i) {
			return GetRuleContext<Dml_trigger_optionContext>(i);
		}
		public ITerminalNode APPEND() { return GetToken(TSqlParser.APPEND, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(TSqlParser.REPLACE, 0); }
		public Create_or_alter_dml_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_dml_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_dml_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_dml_trigger(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_dml_triggerContext create_or_alter_dml_trigger() {
		Create_or_alter_dml_triggerContext _localctx = new Create_or_alter_dml_triggerContext(_ctx, State);
		EnterRule(_localctx, 554, RULE_create_or_alter_dml_trigger);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7412;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,935,_ctx) ) {
			case 1:
				{
				State = 7406; Match(CREATE);
				State = 7409;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,934,_ctx) ) {
				case 1:
					{
					State = 7407; Match(OR);
					State = 7408;
					_la = _input.La(1);
					if ( !(_la==ALTER || _la==REPLACE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 7411; Match(ALTER);
				}
				break;
			}
			State = 7414; Match(TRIGGER);
			State = 7415; simple_name();
			State = 7416; Match(ON);
			State = 7417; table_name();
			State = 7427;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,937,_ctx) ) {
			case 1:
				{
				State = 7418; Match(WITH);
				State = 7419; dml_trigger_option();
				State = 7424;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,936,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7420; Match(COMMA);
						State = 7421; dml_trigger_option();
						}
						} 
					}
					State = 7426;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,936,_ctx);
				}
				}
				break;
			}
			State = 7433;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,938,_ctx) ) {
			case 1:
				{
				State = 7429; Match(FOR);
				}
				break;

			case 2:
				{
				State = 7430; Match(AFTER);
				}
				break;

			case 3:
				{
				State = 7431; Match(INSTEAD);
				State = 7432; Match(OF);
				}
				break;
			}
			State = 7435; dml_trigger_operation();
			State = 7440;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,939,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7436; Match(COMMA);
					State = 7437; dml_trigger_operation();
					}
					} 
				}
				State = 7442;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,939,_ctx);
			}
			State = 7445;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,940,_ctx) ) {
			case 1:
				{
				State = 7443; Match(WITH);
				State = 7444; Match(APPEND);
				}
				break;
			}
			State = 7450;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,941,_ctx) ) {
			case 1:
				{
				State = 7447; Match(NOT);
				State = 7448; Match(FOR);
				State = 7449; Match(REPLICATION);
				}
				break;
			}
			State = 7452; Match(AS);
			State = 7454;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 7453; sql_clauses();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7456;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,942,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_trigger_optionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public Dml_trigger_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_trigger_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDml_trigger_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDml_trigger_option(this);
		}
	}

	[RuleVersion(0)]
	public Dml_trigger_optionContext dml_trigger_option() {
		Dml_trigger_optionContext _localctx = new Dml_trigger_optionContext(_ctx, State);
		EnterRule(_localctx, 556, RULE_dml_trigger_option);
		try {
			State = 7460;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,943,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7458; Match(ENCRYPTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7459; execute_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_trigger_operationContext : ParserRuleContext {
		public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public Dml_trigger_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_trigger_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDml_trigger_operation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDml_trigger_operation(this);
		}
	}

	[RuleVersion(0)]
	public Dml_trigger_operationContext dml_trigger_operation() {
		Dml_trigger_operationContext _localctx = new Dml_trigger_operationContext(_ctx, State);
		EnterRule(_localctx, 558, RULE_dml_trigger_operation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7462;
			_la = _input.La(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_ddl_triggerContext : ParserRuleContext {
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Ddl_trigger_operationContext[] ddl_trigger_operation() {
			return GetRuleContexts<Ddl_trigger_operationContext>();
		}
		public Ddl_trigger_operationContext ddl_trigger_operation(int i) {
			return GetRuleContext<Ddl_trigger_operationContext>(i);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode AFTER() { return GetToken(TSqlParser.AFTER, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Dml_trigger_optionContext[] dml_trigger_option() {
			return GetRuleContexts<Dml_trigger_optionContext>();
		}
		public Dml_trigger_optionContext dml_trigger_option(int i) {
			return GetRuleContext<Dml_trigger_optionContext>(i);
		}
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(TSqlParser.REPLACE, 0); }
		public Create_or_alter_ddl_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_ddl_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_ddl_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_ddl_trigger(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_ddl_triggerContext create_or_alter_ddl_trigger() {
		Create_or_alter_ddl_triggerContext _localctx = new Create_or_alter_ddl_triggerContext(_ctx, State);
		EnterRule(_localctx, 560, RULE_create_or_alter_ddl_trigger);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7470;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,945,_ctx) ) {
			case 1:
				{
				State = 7464; Match(CREATE);
				State = 7467;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,944,_ctx) ) {
				case 1:
					{
					State = 7465; Match(OR);
					State = 7466;
					_la = _input.La(1);
					if ( !(_la==ALTER || _la==REPLACE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 7469; Match(ALTER);
				}
				break;
			}
			State = 7472; Match(TRIGGER);
			State = 7473; simple_name();
			State = 7474; Match(ON);
			State = 7478;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,946,_ctx) ) {
			case 1:
				{
				State = 7475; Match(ALL);
				State = 7476; Match(SERVER);
				}
				break;

			case 2:
				{
				State = 7477; Match(DATABASE);
				}
				break;
			}
			State = 7489;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,948,_ctx) ) {
			case 1:
				{
				State = 7480; Match(WITH);
				State = 7481; dml_trigger_option();
				State = 7486;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,947,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7482; Match(COMMA);
						State = 7483; dml_trigger_option();
						}
						} 
					}
					State = 7488;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,947,_ctx);
				}
				}
				break;
			}
			State = 7491;
			_la = _input.La(1);
			if ( !(_la==AFTER || _la==FOR) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 7492; ddl_trigger_operation();
			State = 7497;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,949,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7493; Match(COMMA);
					State = 7494; ddl_trigger_operation();
					}
					} 
				}
				State = 7499;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,949,_ctx);
			}
			State = 7500; Match(AS);
			State = 7502;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 7501; sql_clauses();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7504;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,950,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_trigger_operationContext : ParserRuleContext {
		public Simple_idContext simple_id() {
			return GetRuleContext<Simple_idContext>(0);
		}
		public Ddl_trigger_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_trigger_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDdl_trigger_operation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDdl_trigger_operation(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_trigger_operationContext ddl_trigger_operation() {
		Ddl_trigger_operationContext _localctx = new Ddl_trigger_operationContext(_ctx, State);
		EnterRule(_localctx, 562, RULE_ddl_trigger_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7506; simple_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_functionContext : ParserRuleContext {
		public Func_proc_name_schemaContext funcName;
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public Func_proc_name_schemaContext func_proc_name_schema() {
			return GetRuleContext<Func_proc_name_schemaContext>(0);
		}
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public Func_body_returns_selectContext func_body_returns_select() {
			return GetRuleContext<Func_body_returns_selectContext>(0);
		}
		public Func_body_returns_tableContext func_body_returns_table() {
			return GetRuleContext<Func_body_returns_tableContext>(0);
		}
		public Func_body_returns_scalarContext func_body_returns_scalar() {
			return GetRuleContext<Func_body_returns_scalarContext>(0);
		}
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public Procedure_paramContext[] procedure_param() {
			return GetRuleContexts<Procedure_paramContext>();
		}
		public Procedure_paramContext procedure_param(int i) {
			return GetRuleContext<Procedure_paramContext>(i);
		}
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public Create_or_alter_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_function(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_functionContext create_or_alter_function() {
		Create_or_alter_functionContext _localctx = new Create_or_alter_functionContext(_ctx, State);
		EnterRule(_localctx, 564, RULE_create_or_alter_function);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7514;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,952,_ctx) ) {
			case 1:
				{
				{
				State = 7508; Match(CREATE);
				State = 7511;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,951,_ctx) ) {
				case 1:
					{
					State = 7509; Match(OR);
					State = 7510; Match(ALTER);
					}
					break;
				}
				}
				}
				break;

			case 2:
				{
				State = 7513; Match(ALTER);
				}
				break;
			}
			State = 7516; Match(FUNCTION);
			State = 7517; _localctx.funcName = func_proc_name_schema();
			State = 7531;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,954,_ctx) ) {
			case 1:
				{
				{
				State = 7518; Match(LR_BRACKET);
				State = 7519; procedure_param();
				State = 7524;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,953,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7520; Match(COMMA);
						State = 7521; procedure_param();
						}
						} 
					}
					State = 7526;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,953,_ctx);
				}
				State = 7527; Match(RR_BRACKET);
				}
				}
				break;

			case 2:
				{
				State = 7529; Match(LR_BRACKET);
				State = 7530; Match(RR_BRACKET);
				}
				break;
			}
			State = 7536;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,955,_ctx) ) {
			case 1:
				{
				State = 7533; func_body_returns_select();
				}
				break;

			case 2:
				{
				State = 7534; func_body_returns_table();
				}
				break;

			case 3:
				{
				State = 7535; func_body_returns_scalar();
				}
				break;
			}
			State = 7539;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,956,_ctx) ) {
			case 1:
				{
				State = 7538; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_body_returns_selectContext : ParserRuleContext {
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public As_external_nameContext as_external_name() {
			return GetRuleContext<As_external_nameContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Function_optionContext[] function_option() {
			return GetRuleContexts<Function_optionContext>();
		}
		public Function_optionContext function_option(int i) {
			return GetRuleContext<Function_optionContext>(i);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Select_statement_standaloneContext select_statement_standalone() {
			return GetRuleContext<Select_statement_standaloneContext>(0);
		}
		public Func_body_returns_selectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_body_returns_select; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_body_returns_select(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_body_returns_select(this);
		}
	}

	[RuleVersion(0)]
	public Func_body_returns_selectContext func_body_returns_select() {
		Func_body_returns_selectContext _localctx = new Func_body_returns_selectContext(_ctx, State);
		EnterRule(_localctx, 566, RULE_func_body_returns_select);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7541; Match(RETURNS);
			State = 7542; Match(TABLE);
			State = 7552;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,958,_ctx) ) {
			case 1:
				{
				State = 7543; Match(WITH);
				State = 7544; function_option();
				State = 7549;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,957,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7545; Match(COMMA);
						State = 7546; function_option();
						}
						} 
					}
					State = 7551;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,957,_ctx);
				}
				}
				break;
			}
			State = 7555;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,959,_ctx) ) {
			case 1:
				{
				State = 7554; Match(AS);
				}
				break;
			}
			State = 7566;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,961,_ctx) ) {
			case 1:
				{
				State = 7557; as_external_name();
				}
				break;

			case 2:
				{
				State = 7558; Match(RETURN);
				State = 7564;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,960,_ctx) ) {
				case 1:
					{
					State = 7559; Match(LR_BRACKET);
					State = 7560; select_statement_standalone();
					State = 7561; Match(RR_BRACKET);
					}
					break;

				case 2:
					{
					State = 7563; select_statement_standalone();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_body_returns_tableContext : ParserRuleContext {
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Table_type_definitionContext table_type_definition() {
			return GetRuleContext<Table_type_definitionContext>(0);
		}
		public As_external_nameContext as_external_name() {
			return GetRuleContext<As_external_nameContext>(0);
		}
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Function_optionContext[] function_option() {
			return GetRuleContexts<Function_optionContext>();
		}
		public Function_optionContext function_option(int i) {
			return GetRuleContext<Function_optionContext>(i);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public Func_body_returns_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_body_returns_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_body_returns_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_body_returns_table(this);
		}
	}

	[RuleVersion(0)]
	public Func_body_returns_tableContext func_body_returns_table() {
		Func_body_returns_tableContext _localctx = new Func_body_returns_tableContext(_ctx, State);
		EnterRule(_localctx, 568, RULE_func_body_returns_table);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7568; Match(RETURNS);
			State = 7569; Match(LOCAL_ID);
			State = 7570; table_type_definition();
			State = 7580;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,963,_ctx) ) {
			case 1:
				{
				State = 7571; Match(WITH);
				State = 7572; function_option();
				State = 7577;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,962,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7573; Match(COMMA);
						State = 7574; function_option();
						}
						} 
					}
					State = 7579;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,962,_ctx);
				}
				}
				break;
			}
			State = 7583;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,964,_ctx) ) {
			case 1:
				{
				State = 7582; Match(AS);
				}
				break;
			}
			State = 7601;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,968,_ctx) ) {
			case 1:
				{
				State = 7585; as_external_name();
				}
				break;

			case 2:
				{
				State = 7586; Match(BEGIN);
				State = 7590;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,965,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7587; sql_clauses();
						}
						} 
					}
					State = 7592;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,965,_ctx);
				}
				State = 7593; Match(RETURN);
				State = 7595;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,966,_ctx) ) {
				case 1:
					{
					State = 7594; Match(SEMI);
					}
					break;
				}
				State = 7597; Match(END);
				State = 7599;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,967,_ctx) ) {
				case 1:
					{
					State = 7598; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_body_returns_scalarContext : ParserRuleContext {
		public ExpressionContext ret;
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public As_external_nameContext as_external_name() {
			return GetRuleContext<As_external_nameContext>(0);
		}
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Function_optionContext[] function_option() {
			return GetRuleContexts<Function_optionContext>();
		}
		public Function_optionContext function_option(int i) {
			return GetRuleContext<Function_optionContext>(i);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public Func_body_returns_scalarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_body_returns_scalar; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_body_returns_scalar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_body_returns_scalar(this);
		}
	}

	[RuleVersion(0)]
	public Func_body_returns_scalarContext func_body_returns_scalar() {
		Func_body_returns_scalarContext _localctx = new Func_body_returns_scalarContext(_ctx, State);
		EnterRule(_localctx, 570, RULE_func_body_returns_scalar);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7603; Match(RETURNS);
			State = 7604; data_type();
			State = 7614;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,970,_ctx) ) {
			case 1:
				{
				State = 7605; Match(WITH);
				State = 7606; function_option();
				State = 7611;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,969,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7607; Match(COMMA);
						State = 7608; function_option();
						}
						} 
					}
					State = 7613;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,969,_ctx);
				}
				}
				break;
			}
			State = 7617;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,971,_ctx) ) {
			case 1:
				{
				State = 7616; Match(AS);
				}
				break;
			}
			State = 7634;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,974,_ctx) ) {
			case 1:
				{
				State = 7619; as_external_name();
				}
				break;

			case 2:
				{
				State = 7620; Match(BEGIN);
				State = 7624;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,972,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7621; sql_clauses();
						}
						} 
					}
					State = 7626;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,972,_ctx);
				}
				State = 7627; Match(RETURN);
				State = 7628; _localctx.ret = expression(0);
				State = 7630;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,973,_ctx) ) {
				case 1:
					{
					State = 7629; Match(SEMI);
					}
					break;
				}
				State = 7632; Match(END);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_param_default_valueContext : ParserRuleContext {
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Procedure_param_default_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_param_default_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterProcedure_param_default_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitProcedure_param_default_value(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_param_default_valueContext procedure_param_default_value() {
		Procedure_param_default_valueContext _localctx = new Procedure_param_default_valueContext(_ctx, State);
		EnterRule(_localctx, 572, RULE_procedure_param_default_value);
		try {
			State = 7640;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,975,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7636; Match(NULL_);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7637; Match(DEFAULT);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7638; constant();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7639; Match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_paramContext : ParserRuleContext {
		public Id_Context type_schema;
		public Procedure_param_default_valueContext default_val;
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode VARYING() { return GetToken(TSqlParser.VARYING, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Procedure_param_default_valueContext procedure_param_default_value() {
			return GetRuleContext<Procedure_param_default_valueContext>(0);
		}
		public ITerminalNode OUT() { return GetToken(TSqlParser.OUT, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		public ITerminalNode READONLY() { return GetToken(TSqlParser.READONLY, 0); }
		public Procedure_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_param; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterProcedure_param(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitProcedure_param(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_paramContext procedure_param() {
		Procedure_paramContext _localctx = new Procedure_paramContext(_ctx, State);
		EnterRule(_localctx, 574, RULE_procedure_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7642; Match(LOCAL_ID);
			State = 7644;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,976,_ctx) ) {
			case 1:
				{
				State = 7643; Match(AS);
				}
				break;
			}
			State = 7649;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,977,_ctx) ) {
			case 1:
				{
				State = 7646; _localctx.type_schema = id_();
				State = 7647; Match(DOT);
				}
				break;
			}
			State = 7651; data_type();
			State = 7653;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,978,_ctx) ) {
			case 1:
				{
				State = 7652; Match(VARYING);
				}
				break;
			}
			State = 7657;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,979,_ctx) ) {
			case 1:
				{
				State = 7655; Match(EQUAL);
				State = 7656; _localctx.default_val = procedure_param_default_value();
				}
				break;
			}
			State = 7660;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,980,_ctx) ) {
			case 1:
				{
				State = 7659;
				_la = _input.La(1);
				if ( !(_la==OUT || _la==OUTPUT || _la==READONLY) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_optionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode RECOMPILE() { return GetToken(TSqlParser.RECOMPILE, 0); }
		public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public Procedure_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterProcedure_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitProcedure_option(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_optionContext procedure_option() {
		Procedure_optionContext _localctx = new Procedure_optionContext(_ctx, State);
		EnterRule(_localctx, 576, RULE_procedure_option);
		try {
			State = 7665;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,981,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7662; Match(ENCRYPTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7663; Match(RECOMPILE);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7664; execute_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_optionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode SCHEMABINDING() { return GetToken(TSqlParser.SCHEMABINDING, 0); }
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public ITerminalNode[] NULL_() { return GetTokens(TSqlParser.NULL_); }
		public ITerminalNode NULL_(int i) {
			return GetToken(TSqlParser.NULL_, i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode INPUT() { return GetToken(TSqlParser.INPUT, 0); }
		public ITerminalNode CALLED() { return GetToken(TSqlParser.CALLED, 0); }
		public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public Function_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunction_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunction_option(this);
		}
	}

	[RuleVersion(0)]
	public Function_optionContext function_option() {
		Function_optionContext _localctx = new Function_optionContext(_ctx, State);
		EnterRule(_localctx, 578, RULE_function_option);
		try {
			State = 7679;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,982,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7667; Match(ENCRYPTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7668; Match(SCHEMABINDING);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7669; Match(RETURNS);
				State = 7670; Match(NULL_);
				State = 7671; Match(ON);
				State = 7672; Match(NULL_);
				State = 7673; Match(INPUT);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7674; Match(CALLED);
				State = 7675; Match(ON);
				State = 7676; Match(NULL_);
				State = 7677; Match(INPUT);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7678; execute_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_statisticsContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FULLSCAN() { return GetToken(TSqlParser.FULLSCAN, 0); }
		public ITerminalNode SAMPLE() { return GetToken(TSqlParser.SAMPLE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode STATS_STREAM() { return GetToken(TSqlParser.STATS_STREAM, 0); }
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public ITerminalNode ROWS() { return GetToken(TSqlParser.ROWS, 0); }
		public ITerminalNode NORECOMPUTE() { return GetToken(TSqlParser.NORECOMPUTE, 0); }
		public ITerminalNode INCREMENTAL() { return GetToken(TSqlParser.INCREMENTAL, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Create_statisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_statistics; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_statistics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_statistics(this);
		}
	}

	[RuleVersion(0)]
	public Create_statisticsContext create_statistics() {
		Create_statisticsContext _localctx = new Create_statisticsContext(_ctx, State);
		EnterRule(_localctx, 580, RULE_create_statistics);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7681; Match(CREATE);
			State = 7682; Match(STATISTICS);
			State = 7683; id_();
			State = 7684; Match(ON);
			State = 7685; table_name();
			State = 7686; Match(LR_BRACKET);
			State = 7687; column_name_list();
			State = 7688; Match(RR_BRACKET);
			State = 7707;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,986,_ctx) ) {
			case 1:
				{
				State = 7689; Match(WITH);
				State = 7695;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,983,_ctx) ) {
				case 1:
					{
					State = 7690; Match(FULLSCAN);
					}
					break;

				case 2:
					{
					State = 7691; Match(SAMPLE);
					State = 7692; Match(DECIMAL);
					State = 7693;
					_la = _input.La(1);
					if ( !(_la==PERCENT || _la==ROWS) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 3:
					{
					State = 7694; Match(STATS_STREAM);
					}
					break;
				}
				State = 7699;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,984,_ctx) ) {
				case 1:
					{
					State = 7697; Match(COMMA);
					State = 7698; Match(NORECOMPUTE);
					}
					break;
				}
				State = 7705;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,985,_ctx) ) {
				case 1:
					{
					State = 7701; Match(COMMA);
					State = 7702; Match(INCREMENTAL);
					State = 7703; Match(EQUAL);
					State = 7704; on_off();
					}
					break;
				}
				}
				break;
			}
			State = 7710;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,987,_ctx) ) {
			case 1:
				{
				State = 7709; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_statisticsContext : ParserRuleContext {
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Update_statistics_optionsContext update_statistics_options() {
			return GetRuleContext<Update_statistics_optionsContext>(0);
		}
		public Update_statisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_statistics; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_statistics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_statistics(this);
		}
	}

	[RuleVersion(0)]
	public Update_statisticsContext update_statistics() {
		Update_statisticsContext _localctx = new Update_statisticsContext(_ctx, State);
		EnterRule(_localctx, 582, RULE_update_statistics);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7712; Match(UPDATE);
			State = 7713; Match(STATISTICS);
			State = 7714; full_table_name();
			State = 7727;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,989,_ctx) ) {
			case 1:
				{
				State = 7715; id_();
				}
				break;

			case 2:
				{
				State = 7716; Match(LR_BRACKET);
				State = 7717; id_();
				State = 7722;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,988,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7718; Match(COMMA);
						State = 7719; id_();
						}
						} 
					}
					State = 7724;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,988,_ctx);
				}
				State = 7725; Match(RR_BRACKET);
				}
				break;
			}
			State = 7730;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,990,_ctx) ) {
			case 1:
				{
				State = 7729; update_statistics_options();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_statistics_optionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Update_statistics_optionContext[] update_statistics_option() {
			return GetRuleContexts<Update_statistics_optionContext>();
		}
		public Update_statistics_optionContext update_statistics_option(int i) {
			return GetRuleContext<Update_statistics_optionContext>(i);
		}
		public Update_statistics_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_statistics_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_statistics_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_statistics_options(this);
		}
	}

	[RuleVersion(0)]
	public Update_statistics_optionsContext update_statistics_options() {
		Update_statistics_optionsContext _localctx = new Update_statistics_optionsContext(_ctx, State);
		EnterRule(_localctx, 584, RULE_update_statistics_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7732; Match(WITH);
			State = 7733; update_statistics_option();
			State = 7738;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,991,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7734; Match(COMMA);
					State = 7735; update_statistics_option();
					}
					} 
				}
				State = 7740;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,991,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_statistics_optionContext : ParserRuleContext {
		public IToken number;
		public ExpressionContext stats_stream_;
		public IToken max_dregree_of_parallelism;
		public ITerminalNode FULLSCAN() { return GetToken(TSqlParser.FULLSCAN, 0); }
		public ITerminalNode PERSIST_SAMPLE_PERCENT() { return GetToken(TSqlParser.PERSIST_SAMPLE_PERCENT, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode SAMPLE() { return GetToken(TSqlParser.SAMPLE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public ITerminalNode ROWS() { return GetToken(TSqlParser.ROWS, 0); }
		public ITerminalNode RESAMPLE() { return GetToken(TSqlParser.RESAMPLE, 0); }
		public On_partitionsContext on_partitions() {
			return GetRuleContext<On_partitionsContext>(0);
		}
		public ITerminalNode STATS_STREAM() { return GetToken(TSqlParser.STATS_STREAM, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ROWCOUNT() { return GetToken(TSqlParser.ROWCOUNT, 0); }
		public ITerminalNode PAGECOUNT() { return GetToken(TSqlParser.PAGECOUNT, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode COLUMNS() { return GetToken(TSqlParser.COLUMNS, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public ITerminalNode NORECOMPUTE() { return GetToken(TSqlParser.NORECOMPUTE, 0); }
		public ITerminalNode INCREMENTAL() { return GetToken(TSqlParser.INCREMENTAL, 0); }
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode AUTO_DROP() { return GetToken(TSqlParser.AUTO_DROP, 0); }
		public Update_statistics_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_statistics_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_statistics_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_statistics_option(this);
		}
	}

	[RuleVersion(0)]
	public Update_statistics_optionContext update_statistics_option() {
		Update_statistics_optionContext _localctx = new Update_statistics_optionContext(_ctx, State);
		EnterRule(_localctx, 586, RULE_update_statistics_option);
		int _la;
		try {
			State = 7787;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,997,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 7741; Match(FULLSCAN);
				State = 7748;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,993,_ctx) ) {
				case 1:
					{
					State = 7743;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,992,_ctx) ) {
					case 1:
						{
						State = 7742; Match(COMMA);
						}
						break;
					}
					State = 7745; Match(PERSIST_SAMPLE_PERCENT);
					State = 7746; Match(EQUAL);
					State = 7747; on_off();
					}
					break;
				}
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 7750; Match(SAMPLE);
				State = 7751; _localctx.number = Match(DECIMAL);
				State = 7752;
				_la = _input.La(1);
				if ( !(_la==PERCENT || _la==ROWS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 7759;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,995,_ctx) ) {
				case 1:
					{
					State = 7754;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,994,_ctx) ) {
					case 1:
						{
						State = 7753; Match(COMMA);
						}
						break;
					}
					State = 7756; Match(PERSIST_SAMPLE_PERCENT);
					State = 7757; Match(EQUAL);
					State = 7758; on_off();
					}
					break;
				}
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7761; Match(RESAMPLE);
				State = 7763;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,996,_ctx) ) {
				case 1:
					{
					State = 7762; on_partitions();
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7765; Match(STATS_STREAM);
				State = 7766; Match(EQUAL);
				State = 7767; _localctx.stats_stream_ = expression(0);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7768; Match(ROWCOUNT);
				State = 7769; Match(EQUAL);
				State = 7770; Match(DECIMAL);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7771; Match(PAGECOUNT);
				State = 7772; Match(EQUAL);
				State = 7773; Match(DECIMAL);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7774; Match(ALL);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7775; Match(COLUMNS);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7776; Match(INDEX);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7777; Match(NORECOMPUTE);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 7778; Match(INCREMENTAL);
				State = 7779; Match(EQUAL);
				State = 7780; on_off();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 7781; Match(MAXDOP);
				State = 7782; Match(EQUAL);
				State = 7783; _localctx.max_dregree_of_parallelism = Match(DECIMAL);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 7784; Match(AUTO_DROP);
				State = 7785; Match(EQUAL);
				State = 7786; on_off();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_tableContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return GetRuleContext<Column_def_table_constraintsContext>(0);
		}
		public Table_indicesContext[] table_indices() {
			return GetRuleContexts<Table_indicesContext>();
		}
		public Table_indicesContext table_indices(int i) {
			return GetRuleContext<Table_indicesContext>(i);
		}
		public ITerminalNode LOCK() { return GetToken(TSqlParser.LOCK, 0); }
		public Simple_idContext simple_id() {
			return GetRuleContext<Simple_idContext>(0);
		}
		public Table_optionsContext[] table_options() {
			return GetRuleContexts<Table_optionsContext>();
		}
		public Table_optionsContext table_options(int i) {
			return GetRuleContext<Table_optionsContext>(i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DEFAULT() { return GetTokens(TSqlParser.DEFAULT); }
		public ITerminalNode DEFAULT(int i) {
			return GetToken(TSqlParser.DEFAULT, i);
		}
		public On_partition_or_filegroupContext on_partition_or_filegroup() {
			return GetRuleContext<On_partition_or_filegroupContext>(0);
		}
		public ITerminalNode TEXTIMAGE_ON() { return GetToken(TSqlParser.TEXTIMAGE_ON, 0); }
		public Create_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_table(this);
		}
	}

	[RuleVersion(0)]
	public Create_tableContext create_table() {
		Create_tableContext _localctx = new Create_tableContext(_ctx, State);
		EnterRule(_localctx, 588, RULE_create_table);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7789; Match(CREATE);
			State = 7790; Match(TABLE);
			State = 7791; table_name();
			State = 7792; Match(LR_BRACKET);
			State = 7793; column_def_table_constraints();
			State = 7800;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,999,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7795;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,998,_ctx) ) {
					case 1:
						{
						State = 7794; Match(COMMA);
						}
						break;
					}
					State = 7797; table_indices();
					}
					} 
				}
				State = 7802;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,999,_ctx);
			}
			State = 7804;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1000,_ctx) ) {
			case 1:
				{
				State = 7803; Match(COMMA);
				}
				break;
			}
			State = 7806; Match(RR_BRACKET);
			State = 7809;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1001,_ctx) ) {
			case 1:
				{
				State = 7807; Match(LOCK);
				State = 7808; simple_id();
				}
				break;
			}
			State = 7814;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1002,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7811; table_options();
					}
					} 
				}
				State = 7816;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1002,_ctx);
			}
			State = 7821;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1003,_ctx) ) {
			case 1:
				{
				State = 7817; Match(ON);
				State = 7818; id_();
				}
				break;

			case 2:
				{
				State = 7819; Match(DEFAULT);
				}
				break;

			case 3:
				{
				State = 7820; on_partition_or_filegroup();
				}
				break;
			}
			State = 7826;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1004,_ctx) ) {
			case 1:
				{
				State = 7823; Match(TEXTIMAGE_ON);
				State = 7824; id_();
				}
				break;

			case 2:
				{
				State = 7825; Match(DEFAULT);
				}
				break;
			}
			State = 7829;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1005,_ctx) ) {
			case 1:
				{
				State = 7828; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_indicesContext : ParserRuleContext {
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		public ITerminalNode CLUSTERED() { return GetToken(TSqlParser.CLUSTERED, 0); }
		public ITerminalNode COLUMNSTORE() { return GetToken(TSqlParser.COLUMNSTORE, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode NONCLUSTERED() { return GetToken(TSqlParser.NONCLUSTERED, 0); }
		public Create_table_index_optionsContext create_table_index_options() {
			return GetRuleContext<Create_table_index_optionsContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Table_indicesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_indices; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_indices(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_indices(this);
		}
	}

	[RuleVersion(0)]
	public Table_indicesContext table_indices() {
		Table_indicesContext _localctx = new Table_indicesContext(_ctx, State);
		EnterRule(_localctx, 590, RULE_table_indices);
		try {
			State = 7864;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1011,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7831; Match(INDEX);
				State = 7832; id_();
				State = 7834;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1006,_ctx) ) {
				case 1:
					{
					State = 7833; Match(UNIQUE);
					}
					break;
				}
				State = 7837;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1007,_ctx) ) {
				case 1:
					{
					State = 7836; clustered();
					}
					break;
				}
				State = 7839; Match(LR_BRACKET);
				State = 7840; column_name_list_with_order();
				State = 7841; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7843; Match(INDEX);
				State = 7844; id_();
				State = 7845; Match(CLUSTERED);
				State = 7846; Match(COLUMNSTORE);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7848; Match(INDEX);
				State = 7849; id_();
				State = 7851;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1008,_ctx) ) {
				case 1:
					{
					State = 7850; Match(NONCLUSTERED);
					}
					break;
				}
				State = 7853; Match(COLUMNSTORE);
				State = 7854; Match(LR_BRACKET);
				State = 7855; column_name_list();
				State = 7856; Match(RR_BRACKET);
				State = 7858;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1009,_ctx) ) {
				case 1:
					{
					State = 7857; create_table_index_options();
					}
					break;
				}
				State = 7862;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1010,_ctx) ) {
				case 1:
					{
					State = 7860; Match(ON);
					State = 7861; id_();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_optionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Table_optionContext[] table_option() {
			return GetRuleContexts<Table_optionContext>();
		}
		public Table_optionContext table_option(int i) {
			return GetRuleContext<Table_optionContext>(i);
		}
		public Table_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_options(this);
		}
	}

	[RuleVersion(0)]
	public Table_optionsContext table_options() {
		Table_optionsContext _localctx = new Table_optionsContext(_ctx, State);
		EnterRule(_localctx, 592, RULE_table_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7866; Match(WITH);
			State = 7886;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1014,_ctx) ) {
			case 1:
				{
				State = 7867; Match(LR_BRACKET);
				State = 7868; table_option();
				State = 7873;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1012,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7869; Match(COMMA);
						State = 7870; table_option();
						}
						} 
					}
					State = 7875;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1012,_ctx);
				}
				State = 7876; Match(RR_BRACKET);
				}
				break;

			case 2:
				{
				State = 7878; table_option();
				State = 7883;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1013,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7879; Match(COMMA);
						State = 7880; table_option();
						}
						} 
					}
					State = 7885;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1013,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_optionContext : ParserRuleContext {
		public Simple_idContext[] simple_id() {
			return GetRuleContexts<Simple_idContext>();
		}
		public Simple_idContext simple_id(int i) {
			return GetRuleContext<Simple_idContext>(i);
		}
		public KeywordContext[] keyword() {
			return GetRuleContexts<KeywordContext>();
		}
		public KeywordContext keyword(int i) {
			return GetRuleContext<KeywordContext>(i);
		}
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode CLUSTERED() { return GetToken(TSqlParser.CLUSTERED, 0); }
		public ITerminalNode COLUMNSTORE() { return GetToken(TSqlParser.COLUMNSTORE, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public ITerminalNode HEAP() { return GetToken(TSqlParser.HEAP, 0); }
		public ITerminalNode FILLFACTOR() { return GetToken(TSqlParser.FILLFACTOR, 0); }
		public ITerminalNode DISTRIBUTION() { return GetToken(TSqlParser.DISTRIBUTION, 0); }
		public ITerminalNode HASH() { return GetToken(TSqlParser.HASH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] ASC() { return GetTokens(TSqlParser.ASC); }
		public ITerminalNode ASC(int i) {
			return GetToken(TSqlParser.ASC, i);
		}
		public ITerminalNode[] DESC() { return GetTokens(TSqlParser.DESC); }
		public ITerminalNode DESC(int i) {
			return GetToken(TSqlParser.DESC, i);
		}
		public ITerminalNode DATA_COMPRESSION() { return GetToken(TSqlParser.DATA_COMPRESSION, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		public ITerminalNode PAGE() { return GetToken(TSqlParser.PAGE, 0); }
		public On_partitionsContext on_partitions() {
			return GetRuleContext<On_partitionsContext>(0);
		}
		public ITerminalNode XML_COMPRESSION() { return GetToken(TSqlParser.XML_COMPRESSION, 0); }
		public Table_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_option(this);
		}
	}

	[RuleVersion(0)]
	public Table_optionContext table_option() {
		Table_optionContext _localctx = new Table_optionContext(_ctx, State);
		EnterRule(_localctx, 594, RULE_table_option);
		int _la;
		try {
			int _alt;
			State = 7944;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1022,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7890;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1015,_ctx) ) {
				case 1:
					{
					State = 7888; simple_id();
					}
					break;

				case 2:
					{
					State = 7889; keyword();
					}
					break;
				}
				State = 7892; Match(EQUAL);
				State = 7897;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1016,_ctx) ) {
				case 1:
					{
					State = 7893; simple_id();
					}
					break;

				case 2:
					{
					State = 7894; keyword();
					}
					break;

				case 3:
					{
					State = 7895; on_off();
					}
					break;

				case 4:
					{
					State = 7896; Match(DECIMAL);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7899; Match(CLUSTERED);
				State = 7900; Match(COLUMNSTORE);
				State = 7901; Match(INDEX);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7902; Match(HEAP);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7903; Match(FILLFACTOR);
				State = 7904; Match(EQUAL);
				State = 7905; Match(DECIMAL);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7906; Match(DISTRIBUTION);
				State = 7907; Match(EQUAL);
				State = 7908; Match(HASH);
				State = 7909; Match(LR_BRACKET);
				State = 7910; id_();
				State = 7911; Match(RR_BRACKET);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7913; Match(CLUSTERED);
				State = 7914; Match(INDEX);
				State = 7915; Match(LR_BRACKET);
				State = 7916; id_();
				State = 7918;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1017,_ctx) ) {
				case 1:
					{
					State = 7917;
					_la = _input.La(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 7927;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1019,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7920; Match(COMMA);
						State = 7921; id_();
						State = 7923;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1018,_ctx) ) {
						case 1:
							{
							State = 7922;
							_la = _input.La(1);
							if ( !(_la==ASC || _la==DESC) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;
						}
						}
						} 
					}
					State = 7929;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1019,_ctx);
				}
				State = 7930; Match(RR_BRACKET);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7932; Match(DATA_COMPRESSION);
				State = 7933; Match(EQUAL);
				State = 7934;
				_la = _input.La(1);
				if ( !(_la==NONE || _la==PAGE || _la==ROW) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 7936;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1020,_ctx) ) {
				case 1:
					{
					State = 7935; on_partitions();
					}
					break;
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7938; Match(XML_COMPRESSION);
				State = 7939; Match(EQUAL);
				State = 7940; on_off();
				State = 7942;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1021,_ctx) ) {
				case 1:
					{
					State = 7941; on_partitions();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_index_optionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Create_table_index_optionContext[] create_table_index_option() {
			return GetRuleContexts<Create_table_index_optionContext>();
		}
		public Create_table_index_optionContext create_table_index_option(int i) {
			return GetRuleContext<Create_table_index_optionContext>(i);
		}
		public Create_table_index_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_index_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_table_index_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_table_index_options(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_index_optionsContext create_table_index_options() {
		Create_table_index_optionsContext _localctx = new Create_table_index_optionsContext(_ctx, State);
		EnterRule(_localctx, 596, RULE_create_table_index_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7946; Match(WITH);
			State = 7947; Match(LR_BRACKET);
			State = 7948; create_table_index_option();
			State = 7953;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1023,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7949; Match(COMMA);
					State = 7950; create_table_index_option();
					}
					} 
				}
				State = 7955;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1023,_ctx);
			}
			State = 7956; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_index_optionContext : ParserRuleContext {
		public ITerminalNode PAD_INDEX() { return GetToken(TSqlParser.PAD_INDEX, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode FILLFACTOR() { return GetToken(TSqlParser.FILLFACTOR, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode IGNORE_DUP_KEY() { return GetToken(TSqlParser.IGNORE_DUP_KEY, 0); }
		public ITerminalNode STATISTICS_NORECOMPUTE() { return GetToken(TSqlParser.STATISTICS_NORECOMPUTE, 0); }
		public ITerminalNode STATISTICS_INCREMENTAL() { return GetToken(TSqlParser.STATISTICS_INCREMENTAL, 0); }
		public ITerminalNode ALLOW_ROW_LOCKS() { return GetToken(TSqlParser.ALLOW_ROW_LOCKS, 0); }
		public ITerminalNode ALLOW_PAGE_LOCKS() { return GetToken(TSqlParser.ALLOW_PAGE_LOCKS, 0); }
		public ITerminalNode OPTIMIZE_FOR_SEQUENTIAL_KEY() { return GetToken(TSqlParser.OPTIMIZE_FOR_SEQUENTIAL_KEY, 0); }
		public ITerminalNode DATA_COMPRESSION() { return GetToken(TSqlParser.DATA_COMPRESSION, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		public ITerminalNode PAGE() { return GetToken(TSqlParser.PAGE, 0); }
		public ITerminalNode COLUMNSTORE() { return GetToken(TSqlParser.COLUMNSTORE, 0); }
		public ITerminalNode COLUMNSTORE_ARCHIVE() { return GetToken(TSqlParser.COLUMNSTORE_ARCHIVE, 0); }
		public On_partitionsContext on_partitions() {
			return GetRuleContext<On_partitionsContext>(0);
		}
		public ITerminalNode XML_COMPRESSION() { return GetToken(TSqlParser.XML_COMPRESSION, 0); }
		public Create_table_index_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_index_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_table_index_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_table_index_option(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_index_optionContext create_table_index_option() {
		Create_table_index_optionContext _localctx = new Create_table_index_optionContext(_ctx, State);
		EnterRule(_localctx, 598, RULE_create_table_index_option);
		int _la;
		try {
			State = 7994;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1026,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7958; Match(PAD_INDEX);
				State = 7959; Match(EQUAL);
				State = 7960; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7961; Match(FILLFACTOR);
				State = 7962; Match(EQUAL);
				State = 7963; Match(DECIMAL);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7964; Match(IGNORE_DUP_KEY);
				State = 7965; Match(EQUAL);
				State = 7966; on_off();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7967; Match(STATISTICS_NORECOMPUTE);
				State = 7968; Match(EQUAL);
				State = 7969; on_off();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7970; Match(STATISTICS_INCREMENTAL);
				State = 7971; Match(EQUAL);
				State = 7972; on_off();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7973; Match(ALLOW_ROW_LOCKS);
				State = 7974; Match(EQUAL);
				State = 7975; on_off();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7976; Match(ALLOW_PAGE_LOCKS);
				State = 7977; Match(EQUAL);
				State = 7978; on_off();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7979; Match(OPTIMIZE_FOR_SEQUENTIAL_KEY);
				State = 7980; Match(EQUAL);
				State = 7981; on_off();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7982; Match(DATA_COMPRESSION);
				State = 7983; Match(EQUAL);
				State = 7984;
				_la = _input.La(1);
				if ( !(_la==COLUMNSTORE || _la==COLUMNSTORE_ARCHIVE || _la==NONE || _la==PAGE || _la==ROW) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 7986;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1024,_ctx) ) {
				case 1:
					{
					State = 7985; on_partitions();
					}
					break;
				}
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7988; Match(XML_COMPRESSION);
				State = 7989; Match(EQUAL);
				State = 7990; on_off();
				State = 7992;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1025,_ctx) ) {
				case 1:
					{
					State = 7991; on_partitions();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_viewContext : ParserRuleContext {
		public ITerminalNode VIEW() { return GetToken(TSqlParser.VIEW, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Select_statement_standaloneContext select_statement_standalone() {
			return GetRuleContext<Select_statement_standaloneContext>(0);
		}
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode[] WITH() { return GetTokens(TSqlParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(TSqlParser.WITH, i);
		}
		public View_attributeContext[] view_attribute() {
			return GetRuleContexts<View_attributeContext>();
		}
		public View_attributeContext view_attribute(int i) {
			return GetRuleContext<View_attributeContext>(i);
		}
		public ITerminalNode CHECK() { return GetToken(TSqlParser.CHECK, 0); }
		public ITerminalNode OPTION() { return GetToken(TSqlParser.OPTION, 0); }
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(TSqlParser.REPLACE, 0); }
		public Create_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_view; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_view(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_view(this);
		}
	}

	[RuleVersion(0)]
	public Create_viewContext create_view() {
		Create_viewContext _localctx = new Create_viewContext(_ctx, State);
		EnterRule(_localctx, 600, RULE_create_view);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8002;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1028,_ctx) ) {
			case 1:
				{
				State = 7996; Match(CREATE);
				State = 7999;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1027,_ctx) ) {
				case 1:
					{
					State = 7997; Match(OR);
					State = 7998;
					_la = _input.La(1);
					if ( !(_la==ALTER || _la==REPLACE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 8001; Match(ALTER);
				}
				break;
			}
			State = 8004; Match(VIEW);
			State = 8005; simple_name();
			State = 8010;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1029,_ctx) ) {
			case 1:
				{
				State = 8006; Match(LR_BRACKET);
				State = 8007; column_name_list();
				State = 8008; Match(RR_BRACKET);
				}
				break;
			}
			State = 8021;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1031,_ctx) ) {
			case 1:
				{
				State = 8012; Match(WITH);
				State = 8013; view_attribute();
				State = 8018;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1030,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8014; Match(COMMA);
						State = 8015; view_attribute();
						}
						} 
					}
					State = 8020;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1030,_ctx);
				}
				}
				break;
			}
			State = 8023; Match(AS);
			State = 8024; select_statement_standalone();
			State = 8028;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1032,_ctx) ) {
			case 1:
				{
				State = 8025; Match(WITH);
				State = 8026; Match(CHECK);
				State = 8027; Match(OPTION);
				}
				break;
			}
			State = 8031;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1033,_ctx) ) {
			case 1:
				{
				State = 8030; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_attributeContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode SCHEMABINDING() { return GetToken(TSqlParser.SCHEMABINDING, 0); }
		public ITerminalNode VIEW_METADATA() { return GetToken(TSqlParser.VIEW_METADATA, 0); }
		public View_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterView_attribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitView_attribute(this);
		}
	}

	[RuleVersion(0)]
	public View_attributeContext view_attribute() {
		View_attributeContext _localctx = new View_attributeContext(_ctx, State);
		EnterRule(_localctx, 602, RULE_view_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8033;
			_la = _input.La(1);
			if ( !(_la==ENCRYPTION || _la==SCHEMABINDING || _la==VIEW_METADATA) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_tableContext : ParserRuleContext {
		public Id_Context constraint;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		public ITerminalNode[] ALTER() { return GetTokens(TSqlParser.ALTER); }
		public ITerminalNode ALTER(int i) {
			return GetToken(TSqlParser.ALTER, i);
		}
		public ITerminalNode[] TABLE() { return GetTokens(TSqlParser.TABLE); }
		public ITerminalNode TABLE(int i) {
			return GetToken(TSqlParser.TABLE, i);
		}
		public Table_nameContext[] table_name() {
			return GetRuleContexts<Table_nameContext>();
		}
		public Table_nameContext table_name(int i) {
			return GetRuleContext<Table_nameContext>(i);
		}
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode LOCK_ESCALATION() { return GetToken(TSqlParser.LOCK_ESCALATION, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return GetRuleContext<Column_def_table_constraintsContext>(0);
		}
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(TSqlParser.CONSTRAINT, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		public Table_optionsContext table_options() {
			return GetRuleContext<Table_optionsContext>(0);
		}
		public ITerminalNode SWITCH() { return GetToken(TSqlParser.SWITCH, 0); }
		public Switch_partitionContext switch_partition() {
			return GetRuleContext<Switch_partitionContext>(0);
		}
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode[] CHECK() { return GetTokens(TSqlParser.CHECK); }
		public ITerminalNode CHECK(int i) {
			return GetToken(TSqlParser.CHECK, i);
		}
		public ITerminalNode NOCHECK() { return GetToken(TSqlParser.NOCHECK, 0); }
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public Column_definitionContext column_definition() {
			return GetRuleContext<Column_definitionContext>(0);
		}
		public Column_modifierContext column_modifier() {
			return GetRuleContext<Column_modifierContext>(0);
		}
		public ITerminalNode FOREIGN() { return GetToken(TSqlParser.FOREIGN, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Column_name_listContext[] column_name_list() {
			return GetRuleContexts<Column_name_listContext>();
		}
		public Column_name_listContext column_name_list(int i) {
			return GetRuleContext<Column_name_listContext>(i);
		}
		public On_deleteContext[] on_delete() {
			return GetRuleContexts<On_deleteContext>();
		}
		public On_deleteContext on_delete(int i) {
			return GetRuleContext<On_deleteContext>(i);
		}
		public On_updateContext[] on_update() {
			return GetRuleContexts<On_updateContext>();
		}
		public On_updateContext on_update(int i) {
			return GetRuleContext<On_updateContext>(i);
		}
		public Alter_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_table(this);
		}
	}

	[RuleVersion(0)]
	public Alter_tableContext alter_table() {
		Alter_tableContext _localctx = new Alter_tableContext(_ctx, State);
		EnterRule(_localctx, 604, RULE_alter_table);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8035; Match(ALTER);
			State = 8036; Match(TABLE);
			State = 8037; table_name();
			State = 8111;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1042,_ctx) ) {
			case 1:
				{
				State = 8038; Match(SET);
				State = 8039; Match(LR_BRACKET);
				State = 8040; Match(LOCK_ESCALATION);
				State = 8041; Match(EQUAL);
				State = 8042;
				_la = _input.La(1);
				if ( !(_la==AUTO || _la==DISABLE || _la==TABLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 8043; Match(RR_BRACKET);
				}
				break;

			case 2:
				{
				State = 8044; Match(ADD);
				State = 8045; column_def_table_constraints();
				}
				break;

			case 3:
				{
				State = 8046; Match(ALTER);
				State = 8047; Match(COLUMN);
				State = 8050;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1034,_ctx) ) {
				case 1:
					{
					State = 8048; column_definition();
					}
					break;

				case 2:
					{
					State = 8049; column_modifier();
					}
					break;
				}
				}
				break;

			case 4:
				{
				State = 8052; Match(DROP);
				State = 8053; Match(COLUMN);
				State = 8054; id_();
				State = 8059;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1035,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8055; Match(COMMA);
						State = 8056; id_();
						}
						} 
					}
					State = 8061;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1035,_ctx);
				}
				}
				break;

			case 5:
				{
				State = 8062; Match(DROP);
				State = 8063; Match(CONSTRAINT);
				State = 8064; _localctx.constraint = id_();
				}
				break;

			case 6:
				{
				State = 8065; Match(WITH);
				State = 8066;
				_la = _input.La(1);
				if ( !(_la==CHECK || _la==NOCHECK) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 8067; Match(ADD);
				State = 8070;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1036,_ctx) ) {
				case 1:
					{
					State = 8068; Match(CONSTRAINT);
					State = 8069; _localctx.constraint = id_();
					}
					break;
				}
				State = 8097;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1040,_ctx) ) {
				case 1:
					{
					State = 8072; Match(FOREIGN);
					State = 8073; Match(KEY);
					State = 8074; Match(LR_BRACKET);
					State = 8075; _localctx.fk = column_name_list();
					State = 8076; Match(RR_BRACKET);
					State = 8077; Match(REFERENCES);
					State = 8078; table_name();
					State = 8083;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1037,_ctx) ) {
					case 1:
						{
						State = 8079; Match(LR_BRACKET);
						State = 8080; _localctx.pk = column_name_list();
						State = 8081; Match(RR_BRACKET);
						}
						break;
					}
					State = 8089;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1039,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 8087;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1038,_ctx) ) {
							case 1:
								{
								State = 8085; on_delete();
								}
								break;

							case 2:
								{
								State = 8086; on_update();
								}
								break;
							}
							} 
						}
						State = 8091;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1039,_ctx);
					}
					}
					break;

				case 2:
					{
					State = 8092; Match(CHECK);
					State = 8093; Match(LR_BRACKET);
					State = 8094; search_condition(0);
					State = 8095; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;

			case 7:
				{
				State = 8099;
				_la = _input.La(1);
				if ( !(_la==CHECK || _la==NOCHECK) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 8100; Match(CONSTRAINT);
				State = 8101; _localctx.constraint = id_();
				}
				break;

			case 8:
				{
				State = 8102;
				_la = _input.La(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 8103; Match(TRIGGER);
				State = 8105;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1041,_ctx) ) {
				case 1:
					{
					State = 8104; id_();
					}
					break;
				}
				}
				break;

			case 9:
				{
				State = 8107; Match(REBUILD);
				State = 8108; table_options();
				}
				break;

			case 10:
				{
				State = 8109; Match(SWITCH);
				State = 8110; switch_partition();
				}
				break;
			}
			State = 8114;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1043,_ctx) ) {
			case 1:
				{
				State = 8113; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_partitionContext : ParserRuleContext {
		public ExpressionContext source_partition_number_expression;
		public Table_nameContext target_table;
		public ExpressionContext target_partition_number_expression;
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode[] PARTITION() { return GetTokens(TSqlParser.PARTITION); }
		public ITerminalNode PARTITION(int i) {
			return GetToken(TSqlParser.PARTITION, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Low_priority_lock_waitContext low_priority_lock_wait() {
			return GetRuleContext<Low_priority_lock_waitContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Switch_partitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_partition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSwitch_partition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSwitch_partition(this);
		}
	}

	[RuleVersion(0)]
	public Switch_partitionContext switch_partition() {
		Switch_partitionContext _localctx = new Switch_partitionContext(_ctx, State);
		EnterRule(_localctx, 606, RULE_switch_partition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8120;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1045,_ctx) ) {
			case 1:
				{
				State = 8117;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1044,_ctx) ) {
				case 1:
					{
					State = 8116; Match(PARTITION);
					}
					break;
				}
				State = 8119; _localctx.source_partition_number_expression = expression(0);
				}
				break;
			}
			State = 8122; Match(TO);
			State = 8123; _localctx.target_table = table_name();
			State = 8126;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1046,_ctx) ) {
			case 1:
				{
				State = 8124; Match(PARTITION);
				State = 8125; _localctx.target_partition_number_expression = expression(0);
				}
				break;
			}
			State = 8130;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1047,_ctx) ) {
			case 1:
				{
				State = 8128; Match(WITH);
				State = 8129; low_priority_lock_wait();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Low_priority_lock_waitContext : ParserRuleContext {
		public TimeContext max_duration;
		public IToken abort_after_wait;
		public ITerminalNode WAIT_AT_LOW_PRIORITY() { return GetToken(TSqlParser.WAIT_AT_LOW_PRIORITY, 0); }
		public ITerminalNode MAX_DURATION() { return GetToken(TSqlParser.MAX_DURATION, 0); }
		public ITerminalNode ABORT_AFTER_WAIT() { return GetToken(TSqlParser.ABORT_AFTER_WAIT, 0); }
		public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode SELF() { return GetToken(TSqlParser.SELF, 0); }
		public ITerminalNode BLOCKERS() { return GetToken(TSqlParser.BLOCKERS, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public Low_priority_lock_waitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_low_priority_lock_wait; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLow_priority_lock_wait(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLow_priority_lock_wait(this);
		}
	}

	[RuleVersion(0)]
	public Low_priority_lock_waitContext low_priority_lock_wait() {
		Low_priority_lock_waitContext _localctx = new Low_priority_lock_waitContext(_ctx, State);
		EnterRule(_localctx, 608, RULE_low_priority_lock_wait);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8132; Match(WAIT_AT_LOW_PRIORITY);
			State = 8133; Match(LR_BRACKET);
			State = 8134; Match(MAX_DURATION);
			State = 8135; Match(EQUAL);
			State = 8136; _localctx.max_duration = time();
			State = 8138;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1048,_ctx) ) {
			case 1:
				{
				State = 8137; Match(MINUTES);
				}
				break;
			}
			State = 8140; Match(COMMA);
			State = 8141; Match(ABORT_AFTER_WAIT);
			State = 8142; Match(EQUAL);
			State = 8143;
			_localctx.abort_after_wait = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==BLOCKERS || _la==NONE || _la==SELF) ) {
				_localctx.abort_after_wait = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 8144; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_databaseContext : ParserRuleContext {
		public Id_Context database;
		public Id_Context new_name;
		public Id_Context collation;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode CURRENT() { return GetToken(TSqlParser.CURRENT, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public Database_optionspecContext database_optionspec() {
			return GetRuleContext<Database_optionspecContext>(0);
		}
		public Add_or_modify_filesContext add_or_modify_files() {
			return GetRuleContext<Add_or_modify_filesContext>(0);
		}
		public Add_or_modify_filegroupsContext add_or_modify_filegroups() {
			return GetRuleContext<Add_or_modify_filegroupsContext>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public TerminationContext termination() {
			return GetRuleContext<TerminationContext>(0);
		}
		public Alter_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_database(this);
		}
	}

	[RuleVersion(0)]
	public Alter_databaseContext alter_database() {
		Alter_databaseContext _localctx = new Alter_databaseContext(_ctx, State);
		EnterRule(_localctx, 610, RULE_alter_database);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8146; Match(ALTER);
			State = 8147; Match(DATABASE);
			State = 8150;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1049,_ctx) ) {
			case 1:
				{
				State = 8148; _localctx.database = id_();
				}
				break;

			case 2:
				{
				State = 8149; Match(CURRENT);
				}
				break;
			}
			State = 8166;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1051,_ctx) ) {
			case 1:
				{
				State = 8152; Match(MODIFY);
				State = 8153; Match(NAME);
				State = 8154; Match(EQUAL);
				State = 8155; _localctx.new_name = id_();
				}
				break;

			case 2:
				{
				State = 8156; Match(COLLATE);
				State = 8157; _localctx.collation = id_();
				}
				break;

			case 3:
				{
				State = 8158; Match(SET);
				State = 8159; database_optionspec();
				State = 8162;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1050,_ctx) ) {
				case 1:
					{
					State = 8160; Match(WITH);
					State = 8161; termination();
					}
					break;
				}
				}
				break;

			case 4:
				{
				State = 8164; add_or_modify_files();
				}
				break;

			case 5:
				{
				State = 8165; add_or_modify_filegroups();
				}
				break;
			}
			State = 8169;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1052,_ctx) ) {
			case 1:
				{
				State = 8168; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_or_modify_filesContext : ParserRuleContext {
		public Id_Context filegroup_name;
		public Id_Context logical_file_name;
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public FilespecContext[] filespec() {
			return GetRuleContexts<FilespecContext>();
		}
		public FilespecContext filespec(int i) {
			return GetRuleContext<FilespecContext>(i);
		}
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public Add_or_modify_filesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_or_modify_files; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAdd_or_modify_files(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAdd_or_modify_files(this);
		}
	}

	[RuleVersion(0)]
	public Add_or_modify_filesContext add_or_modify_files() {
		Add_or_modify_filesContext _localctx = new Add_or_modify_filesContext(_ctx, State);
		EnterRule(_localctx, 612, RULE_add_or_modify_files);
		try {
			int _alt;
			State = 8203;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1056,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8171; Match(ADD);
				State = 8172; Match(FILE);
				State = 8173; filespec();
				State = 8178;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1053,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8174; Match(COMMA);
						State = 8175; filespec();
						}
						} 
					}
					State = 8180;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1053,_ctx);
				}
				State = 8184;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1054,_ctx) ) {
				case 1:
					{
					State = 8181; Match(TO);
					State = 8182; Match(FILEGROUP);
					State = 8183; _localctx.filegroup_name = id_();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8186; Match(ADD);
				State = 8187; Match(LOG);
				State = 8188; Match(FILE);
				State = 8189; filespec();
				State = 8194;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1055,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8190; Match(COMMA);
						State = 8191; filespec();
						}
						} 
					}
					State = 8196;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1055,_ctx);
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8197; Match(REMOVE);
				State = 8198; Match(FILE);
				State = 8199; _localctx.logical_file_name = id_();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8200; Match(MODIFY);
				State = 8201; Match(FILE);
				State = 8202; filespec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilespecContext : ParserRuleContext {
		public Id_or_stringContext name;
		public Id_or_stringContext new_name;
		public IToken file_name;
		public File_sizeContext size;
		public File_sizeContext max_size;
		public File_sizeContext growth_increment;
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public Id_or_stringContext[] id_or_string() {
			return GetRuleContexts<Id_or_stringContext>();
		}
		public Id_or_stringContext id_or_string(int i) {
			return GetRuleContext<Id_or_stringContext>(i);
		}
		public ITerminalNode NEWNAME() { return GetToken(TSqlParser.NEWNAME, 0); }
		public ITerminalNode FILENAME() { return GetToken(TSqlParser.FILENAME, 0); }
		public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		public ITerminalNode MAXSIZE() { return GetToken(TSqlParser.MAXSIZE, 0); }
		public ITerminalNode UNLIMITED() { return GetToken(TSqlParser.UNLIMITED, 0); }
		public ITerminalNode FILEGROWTH() { return GetToken(TSqlParser.FILEGROWTH, 0); }
		public ITerminalNode OFFLINE() { return GetToken(TSqlParser.OFFLINE, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public File_sizeContext[] file_size() {
			return GetRuleContexts<File_sizeContext>();
		}
		public File_sizeContext file_size(int i) {
			return GetRuleContext<File_sizeContext>(i);
		}
		public FilespecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filespec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFilespec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFilespec(this);
		}
	}

	[RuleVersion(0)]
	public FilespecContext filespec() {
		FilespecContext _localctx = new FilespecContext(_ctx, State);
		EnterRule(_localctx, 614, RULE_filespec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8205; Match(LR_BRACKET);
			State = 8206; Match(NAME);
			State = 8207; Match(EQUAL);
			State = 8208; _localctx.name = id_or_string();
			State = 8213;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1057,_ctx) ) {
			case 1:
				{
				State = 8209; Match(COMMA);
				State = 8210; Match(NEWNAME);
				State = 8211; Match(EQUAL);
				State = 8212; _localctx.new_name = id_or_string();
				}
				break;
			}
			State = 8219;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1058,_ctx) ) {
			case 1:
				{
				State = 8215; Match(COMMA);
				State = 8216; Match(FILENAME);
				State = 8217; Match(EQUAL);
				State = 8218; _localctx.file_name = Match(STRING);
				}
				break;
			}
			State = 8225;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1059,_ctx) ) {
			case 1:
				{
				State = 8221; Match(COMMA);
				State = 8222; Match(SIZE);
				State = 8223; Match(EQUAL);
				State = 8224; _localctx.size = file_size();
				}
				break;
			}
			State = 8232;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1060,_ctx) ) {
			case 1:
				{
				State = 8227; Match(COMMA);
				State = 8228; Match(MAXSIZE);
				State = 8229; Match(EQUAL);
				{
				State = 8230; _localctx.max_size = file_size();
				}
				}
				break;

			case 2:
				{
				State = 8231; Match(UNLIMITED);
				}
				break;
			}
			State = 8238;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1061,_ctx) ) {
			case 1:
				{
				State = 8234; Match(COMMA);
				State = 8235; Match(FILEGROWTH);
				State = 8236; Match(EQUAL);
				State = 8237; _localctx.growth_increment = file_size();
				}
				break;
			}
			State = 8242;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1062,_ctx) ) {
			case 1:
				{
				State = 8240; Match(COMMA);
				State = 8241; Match(OFFLINE);
				}
				break;
			}
			State = 8244; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_or_modify_filegroupsContext : ParserRuleContext {
		public Id_Context filegroup_name;
		public Id_Context filegrou_name;
		public Id_Context new_filegroup_name;
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode CONTAINS() { return GetToken(TSqlParser.CONTAINS, 0); }
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public ITerminalNode MEMORY_OPTIMIZED_DATA() { return GetToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public Filegroup_updatability_optionContext filegroup_updatability_option() {
			return GetRuleContext<Filegroup_updatability_optionContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode AUTOGROW_SINGLE_FILE() { return GetToken(TSqlParser.AUTOGROW_SINGLE_FILE, 0); }
		public ITerminalNode AUTOGROW_ALL_FILES() { return GetToken(TSqlParser.AUTOGROW_ALL_FILES, 0); }
		public Add_or_modify_filegroupsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_or_modify_filegroups; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAdd_or_modify_filegroups(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAdd_or_modify_filegroups(this);
		}
	}

	[RuleVersion(0)]
	public Add_or_modify_filegroupsContext add_or_modify_filegroups() {
		Add_or_modify_filegroupsContext _localctx = new Add_or_modify_filegroupsContext(_ctx, State);
		EnterRule(_localctx, 616, RULE_add_or_modify_filegroups);
		try {
			State = 8270;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1065,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8246; Match(ADD);
				State = 8247; Match(FILEGROUP);
				State = 8248; _localctx.filegroup_name = id_();
				State = 8253;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1063,_ctx) ) {
				case 1:
					{
					State = 8249; Match(CONTAINS);
					State = 8250; Match(FILESTREAM);
					}
					break;

				case 2:
					{
					State = 8251; Match(CONTAINS);
					State = 8252; Match(MEMORY_OPTIMIZED_DATA);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8255; Match(REMOVE);
				State = 8256; Match(FILEGROUP);
				State = 8257; _localctx.filegrou_name = id_();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8258; Match(MODIFY);
				State = 8259; Match(FILEGROUP);
				State = 8260; _localctx.filegrou_name = id_();
				State = 8268;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1064,_ctx) ) {
				case 1:
					{
					State = 8261; filegroup_updatability_option();
					}
					break;

				case 2:
					{
					State = 8262; Match(DEFAULT);
					}
					break;

				case 3:
					{
					State = 8263; Match(NAME);
					State = 8264; Match(EQUAL);
					State = 8265; _localctx.new_filegroup_name = id_();
					}
					break;

				case 4:
					{
					State = 8266; Match(AUTOGROW_SINGLE_FILE);
					}
					break;

				case 5:
					{
					State = 8267; Match(AUTOGROW_ALL_FILES);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Filegroup_updatability_optionContext : ParserRuleContext {
		public ITerminalNode READONLY() { return GetToken(TSqlParser.READONLY, 0); }
		public ITerminalNode READWRITE() { return GetToken(TSqlParser.READWRITE, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(TSqlParser.READ_WRITE, 0); }
		public Filegroup_updatability_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filegroup_updatability_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFilegroup_updatability_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFilegroup_updatability_option(this);
		}
	}

	[RuleVersion(0)]
	public Filegroup_updatability_optionContext filegroup_updatability_option() {
		Filegroup_updatability_optionContext _localctx = new Filegroup_updatability_optionContext(_ctx, State);
		EnterRule(_localctx, 618, RULE_filegroup_updatability_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8272;
			_la = _input.La(1);
			if ( !(((((_la - 769)) & ~0x3f) == 0 && ((1L << (_la - 769)) & ((1L << (READONLY - 769)) | (1L << (READWRITE - 769)) | (1L << (READ_ONLY - 769)) | (1L << (READ_WRITE - 769)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_optionspecContext : ParserRuleContext {
		public Auto_optionContext auto_option() {
			return GetRuleContext<Auto_optionContext>(0);
		}
		public Change_tracking_optionContext change_tracking_option() {
			return GetRuleContext<Change_tracking_optionContext>(0);
		}
		public Containment_optionContext containment_option() {
			return GetRuleContext<Containment_optionContext>(0);
		}
		public Cursor_optionContext cursor_option() {
			return GetRuleContext<Cursor_optionContext>(0);
		}
		public Database_mirroring_optionContext database_mirroring_option() {
			return GetRuleContext<Database_mirroring_optionContext>(0);
		}
		public Date_correlation_optimization_optionContext date_correlation_optimization_option() {
			return GetRuleContext<Date_correlation_optimization_optionContext>(0);
		}
		public Db_encryption_optionContext db_encryption_option() {
			return GetRuleContext<Db_encryption_optionContext>(0);
		}
		public Db_state_optionContext db_state_option() {
			return GetRuleContext<Db_state_optionContext>(0);
		}
		public Db_update_optionContext db_update_option() {
			return GetRuleContext<Db_update_optionContext>(0);
		}
		public Db_user_access_optionContext db_user_access_option() {
			return GetRuleContext<Db_user_access_optionContext>(0);
		}
		public Delayed_durability_optionContext delayed_durability_option() {
			return GetRuleContext<Delayed_durability_optionContext>(0);
		}
		public External_access_optionContext external_access_option() {
			return GetRuleContext<External_access_optionContext>(0);
		}
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public Database_filestream_optionContext database_filestream_option() {
			return GetRuleContext<Database_filestream_optionContext>(0);
		}
		public Hadr_optionsContext hadr_options() {
			return GetRuleContext<Hadr_optionsContext>(0);
		}
		public Mixed_page_allocation_optionContext mixed_page_allocation_option() {
			return GetRuleContext<Mixed_page_allocation_optionContext>(0);
		}
		public Parameterization_optionContext parameterization_option() {
			return GetRuleContext<Parameterization_optionContext>(0);
		}
		public Query_store_optionsContext query_store_options() {
			return GetRuleContext<Query_store_optionsContext>(0);
		}
		public Query_store_options_AzureContext query_store_options_Azure() {
			return GetRuleContext<Query_store_options_AzureContext>(0);
		}
		public Recovery_optionContext recovery_option() {
			return GetRuleContext<Recovery_optionContext>(0);
		}
		public Service_broker_optionContext service_broker_option() {
			return GetRuleContext<Service_broker_optionContext>(0);
		}
		public Snapshot_optionContext snapshot_option() {
			return GetRuleContext<Snapshot_optionContext>(0);
		}
		public Sql_optionContext sql_option() {
			return GetRuleContext<Sql_optionContext>(0);
		}
		public Target_recovery_time_optionContext target_recovery_time_option() {
			return GetRuleContext<Target_recovery_time_optionContext>(0);
		}
		public TerminationContext termination() {
			return GetRuleContext<TerminationContext>(0);
		}
		public Database_optionspecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_optionspec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDatabase_optionspec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDatabase_optionspec(this);
		}
	}

	[RuleVersion(0)]
	public Database_optionspecContext database_optionspec() {
		Database_optionspecContext _localctx = new Database_optionspecContext(_ctx, State);
		EnterRule(_localctx, 620, RULE_database_optionspec);
		try {
			State = 8299;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1066,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8274; auto_option();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8275; change_tracking_option();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8276; containment_option();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8277; cursor_option();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8278; database_mirroring_option();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8279; date_correlation_optimization_option();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8280; db_encryption_option();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8281; db_state_option();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 8282; db_update_option();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 8283; db_user_access_option();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 8284; delayed_durability_option();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 8285; external_access_option();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 8286; Match(FILESTREAM);
				State = 8287; database_filestream_option();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 8288; hadr_options();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 8289; mixed_page_allocation_option();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 8290; parameterization_option();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 8291; query_store_options();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 8292; query_store_options_Azure();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 8293; recovery_option();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 8294; service_broker_option();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 8295; snapshot_option();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 8296; sql_option();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 8297; target_recovery_time_option();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 8298; termination();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_store_optionsContext : ParserRuleContext {
		public ITerminalNode QUERY_STORE() { return GetToken(TSqlParser.QUERY_STORE, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Query_store_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_store_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_store_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_store_options(this);
		}
	}

	[RuleVersion(0)]
	public Query_store_optionsContext query_store_options() {
		Query_store_optionsContext _localctx = new Query_store_optionsContext(_ctx, State);
		EnterRule(_localctx, 622, RULE_query_store_options);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8301; Match(QUERY_STORE);
			State = 8302; Match(EQUAL);
			State = 8303; on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_store_options_AzureContext : ParserRuleContext {
		public ITerminalNode QUERY_STORE() { return GetToken(TSqlParser.QUERY_STORE, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Query_store_option_AzureContext[] query_store_option_Azure() {
			return GetRuleContexts<Query_store_option_AzureContext>();
		}
		public Query_store_option_AzureContext query_store_option_Azure(int i) {
			return GetRuleContext<Query_store_option_AzureContext>(i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Query_store_options_AzureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_store_options_Azure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_store_options_Azure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_store_options_Azure(this);
		}
	}

	[RuleVersion(0)]
	public Query_store_options_AzureContext query_store_options_Azure() {
		Query_store_options_AzureContext _localctx = new Query_store_options_AzureContext(_ctx, State);
		EnterRule(_localctx, 624, RULE_query_store_options_Azure);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8305; Match(QUERY_STORE);
			State = 8306; Match(LR_BRACKET);
			State = 8307; query_store_option_Azure();
			State = 8312;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1067,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 8308; Match(COMMA);
					State = 8309; query_store_option_Azure();
					}
					} 
				}
				State = 8314;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1067,_ctx);
			}
			State = 8315; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_store_option_AzureContext : ParserRuleContext {
		public ITerminalNode OPERATION_MODE() { return GetToken(TSqlParser.OPERATION_MODE, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(TSqlParser.READ_WRITE, 0); }
		public ITerminalNode CLEANUP_POLICY() { return GetToken(TSqlParser.CLEANUP_POLICY, 0); }
		public ITerminalNode STALE_QUERY_THRESHOLD_DAYS() { return GetToken(TSqlParser.STALE_QUERY_THRESHOLD_DAYS, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode DATA_FLUSH_INTERVAL_SECONDS() { return GetToken(TSqlParser.DATA_FLUSH_INTERVAL_SECONDS, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode INTERVAL_LENGTH_MINUTES() { return GetToken(TSqlParser.INTERVAL_LENGTH_MINUTES, 0); }
		public ITerminalNode MAX_STORAGE_SIZE_MB() { return GetToken(TSqlParser.MAX_STORAGE_SIZE_MB, 0); }
		public ITerminalNode QUERY_CAPTURE_MODE() { return GetToken(TSqlParser.QUERY_CAPTURE_MODE, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode SIZE_BASED_CLEANUP_MODE() { return GetToken(TSqlParser.SIZE_BASED_CLEANUP_MODE, 0); }
		public ITerminalNode MAX_PLANS_PER_QUERY() { return GetToken(TSqlParser.MAX_PLANS_PER_QUERY, 0); }
		public ITerminalNode WAIT_STATS_CAPTURE_MODE() { return GetToken(TSqlParser.WAIT_STATS_CAPTURE_MODE, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Query_store_option_AzureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_store_option_Azure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_store_option_Azure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_store_option_Azure(this);
		}
	}

	[RuleVersion(0)]
	public Query_store_option_AzureContext query_store_option_Azure() {
		Query_store_option_AzureContext _localctx = new Query_store_option_AzureContext(_ctx, State);
		EnterRule(_localctx, 626, RULE_query_store_option_Azure);
		try {
			State = 8349;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1068,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8317; Match(OPERATION_MODE);
				State = 8318; Match(EQUAL);
				State = 8319; Match(READ_WRITE);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8320; Match(CLEANUP_POLICY);
				State = 8321; Match(EQUAL);
				State = 8322; Match(LR_BRACKET);
				State = 8323; Match(STALE_QUERY_THRESHOLD_DAYS);
				State = 8324; Match(EQUAL);
				State = 8325; Match(DECIMAL);
				State = 8326; Match(RR_BRACKET);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8327; Match(DATA_FLUSH_INTERVAL_SECONDS);
				State = 8328; Match(EQUAL);
				State = 8329; Match(DECIMAL);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8330; Match(INTERVAL_LENGTH_MINUTES);
				State = 8331; Match(EQUAL);
				State = 8332; Match(DECIMAL);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8333; Match(MAX_STORAGE_SIZE_MB);
				State = 8334; Match(EQUAL);
				State = 8335; Match(DECIMAL);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8336; Match(QUERY_CAPTURE_MODE);
				State = 8337; Match(EQUAL);
				State = 8338; Match(AUTO);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8339; Match(SIZE_BASED_CLEANUP_MODE);
				State = 8340; Match(EQUAL);
				State = 8341; Match(AUTO);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8342; Match(MAX_PLANS_PER_QUERY);
				State = 8343; Match(EQUAL);
				State = 8344; Match(DECIMAL);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 8345; Match(WAIT_STATS_CAPTURE_MODE);
				State = 8346; Match(EQUAL);
				State = 8347; Match(ON);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 8348; Match(OFF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Auto_optionContext : ParserRuleContext {
		public ITerminalNode AUTO_CLOSE() { return GetToken(TSqlParser.AUTO_CLOSE, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode AUTO_CREATE_STATISTICS() { return GetToken(TSqlParser.AUTO_CREATE_STATISTICS, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode INCREMENTAL() { return GetToken(TSqlParser.INCREMENTAL, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode AUTO_SHRINK() { return GetToken(TSqlParser.AUTO_SHRINK, 0); }
		public ITerminalNode AUTO_UPDATE_STATISTICS() { return GetToken(TSqlParser.AUTO_UPDATE_STATISTICS, 0); }
		public ITerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return GetToken(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public Auto_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_auto_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAuto_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAuto_option(this);
		}
	}

	[RuleVersion(0)]
	public Auto_optionContext auto_option() {
		Auto_optionContext _localctx = new Auto_optionContext(_ctx, State);
		EnterRule(_localctx, 628, RULE_auto_option);
		int _la;
		try {
			State = 8368;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1070,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8351; Match(AUTO_CLOSE);
				State = 8352; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8353; Match(AUTO_CREATE_STATISTICS);
				State = 8354; Match(OFF);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8355; Match(ON);
				State = 8360;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1069,_ctx) ) {
				case 1:
					{
					State = 8356; Match(INCREMENTAL);
					State = 8357; Match(EQUAL);
					State = 8358; Match(ON);
					}
					break;

				case 2:
					{
					State = 8359; Match(OFF);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8362; Match(AUTO_SHRINK);
				State = 8363; on_off();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8364; Match(AUTO_UPDATE_STATISTICS);
				State = 8365; on_off();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8366; Match(AUTO_UPDATE_STATISTICS_ASYNC);
				State = 8367;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_tracking_optionContext : ParserRuleContext {
		public ITerminalNode CHANGE_TRACKING() { return GetToken(TSqlParser.CHANGE_TRACKING, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Change_tracking_option_listContext[] change_tracking_option_list() {
			return GetRuleContexts<Change_tracking_option_listContext>();
		}
		public Change_tracking_option_listContext change_tracking_option_list(int i) {
			return GetRuleContext<Change_tracking_option_listContext>(i);
		}
		public Change_tracking_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_tracking_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_tracking_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_tracking_option(this);
		}
	}

	[RuleVersion(0)]
	public Change_tracking_optionContext change_tracking_option() {
		Change_tracking_optionContext _localctx = new Change_tracking_optionContext(_ctx, State);
		EnterRule(_localctx, 630, RULE_change_tracking_option);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8370; Match(CHANGE_TRACKING);
			State = 8371; Match(EQUAL);
			State = 8389;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1073,_ctx) ) {
			case 1:
				{
				State = 8372; Match(OFF);
				}
				break;

			case 2:
				{
				State = 8373; Match(ON);
				State = 8374; Match(LR_BRACKET);
				State = 8385;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1072,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8375; change_tracking_option_list();
						State = 8380;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1071,_ctx);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
							if ( _alt==1 ) {
								{
								{
								State = 8376; Match(COMMA);
								State = 8377; change_tracking_option_list();
								}
								} 
							}
							State = 8382;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,1071,_ctx);
						}
						}
						} 
					}
					State = 8387;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1072,_ctx);
				}
				State = 8388; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_tracking_option_listContext : ParserRuleContext {
		public ITerminalNode AUTO_CLEANUP() { return GetToken(TSqlParser.AUTO_CLEANUP, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode CHANGE_RETENTION() { return GetToken(TSqlParser.CHANGE_RETENTION, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode DAYS() { return GetToken(TSqlParser.DAYS, 0); }
		public ITerminalNode HOURS() { return GetToken(TSqlParser.HOURS, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public Change_tracking_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_tracking_option_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_tracking_option_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_tracking_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Change_tracking_option_listContext change_tracking_option_list() {
		Change_tracking_option_listContext _localctx = new Change_tracking_option_listContext(_ctx, State);
		EnterRule(_localctx, 632, RULE_change_tracking_option_list);
		int _la;
		try {
			State = 8398;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1074,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8391; Match(AUTO_CLEANUP);
				State = 8392; Match(EQUAL);
				State = 8393; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8394; Match(CHANGE_RETENTION);
				State = 8395; Match(EQUAL);
				State = 8396; Match(DECIMAL);
				State = 8397;
				_la = _input.La(1);
				if ( !(_la==DAYS || _la==HOURS || _la==MINUTES) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Containment_optionContext : ParserRuleContext {
		public ITerminalNode CONTAINMENT() { return GetToken(TSqlParser.CONTAINMENT, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode PARTIAL() { return GetToken(TSqlParser.PARTIAL, 0); }
		public Containment_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_containment_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterContainment_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitContainment_option(this);
		}
	}

	[RuleVersion(0)]
	public Containment_optionContext containment_option() {
		Containment_optionContext _localctx = new Containment_optionContext(_ctx, State);
		EnterRule(_localctx, 634, RULE_containment_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8400; Match(CONTAINMENT);
			State = 8401; Match(EQUAL);
			State = 8402;
			_la = _input.La(1);
			if ( !(_la==NONE || _la==PARTIAL) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_optionContext : ParserRuleContext {
		public ITerminalNode CURSOR_CLOSE_ON_COMMIT() { return GetToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode CURSOR_DEFAULT() { return GetToken(TSqlParser.CURSOR_DEFAULT, 0); }
		public ITerminalNode LOCAL() { return GetToken(TSqlParser.LOCAL, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public Cursor_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCursor_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCursor_option(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_optionContext cursor_option() {
		Cursor_optionContext _localctx = new Cursor_optionContext(_ctx, State);
		EnterRule(_localctx, 636, RULE_cursor_option);
		int _la;
		try {
			State = 8408;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1075,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8404; Match(CURSOR_CLOSE_ON_COMMIT);
				State = 8405; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8406; Match(CURSOR_DEFAULT);
				State = 8407;
				_la = _input.La(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_endpointContext : ParserRuleContext {
		public Id_Context endpointname;
		public Id_Context login;
		public IToken state;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode TCP() { return GetToken(TSqlParser.TCP, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public Endpoint_listener_clauseContext endpoint_listener_clause() {
			return GetRuleContext<Endpoint_listener_clauseContext>(0);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode TSQL() { return GetToken(TSqlParser.TSQL, 0); }
		public ITerminalNode SERVICE_BROKER() { return GetToken(TSqlParser.SERVICE_BROKER, 0); }
		public Endpoint_authentication_clauseContext endpoint_authentication_clause() {
			return GetRuleContext<Endpoint_authentication_clauseContext>(0);
		}
		public ITerminalNode DATABASE_MIRRORING() { return GetToken(TSqlParser.DATABASE_MIRRORING, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode WITNESS() { return GetToken(TSqlParser.WITNESS, 0); }
		public ITerminalNode PARTNER() { return GetToken(TSqlParser.PARTNER, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode STARTED() { return GetToken(TSqlParser.STARTED, 0); }
		public ITerminalNode STOPPED() { return GetToken(TSqlParser.STOPPED, 0); }
		public ITerminalNode[] DISABLED() { return GetTokens(TSqlParser.DISABLED); }
		public ITerminalNode DISABLED(int i) {
			return GetToken(TSqlParser.DISABLED, i);
		}
		public Endpoint_encryption_alogorithm_clauseContext endpoint_encryption_alogorithm_clause() {
			return GetRuleContext<Endpoint_encryption_alogorithm_clauseContext>(0);
		}
		public ITerminalNode MESSAGE_FORWARDING() { return GetToken(TSqlParser.MESSAGE_FORWARDING, 0); }
		public ITerminalNode MESSAGE_FORWARD_SIZE() { return GetToken(TSqlParser.MESSAGE_FORWARD_SIZE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode ENABLED() { return GetToken(TSqlParser.ENABLED, 0); }
		public Alter_endpointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_endpoint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_endpoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_endpoint(this);
		}
	}

	[RuleVersion(0)]
	public Alter_endpointContext alter_endpoint() {
		Alter_endpointContext _localctx = new Alter_endpointContext(_ctx, State);
		EnterRule(_localctx, 638, RULE_alter_endpoint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8410; Match(ALTER);
			State = 8411; Match(ENDPOINT);
			State = 8412; _localctx.endpointname = id_();
			State = 8415;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1076,_ctx) ) {
			case 1:
				{
				State = 8413; Match(AUTHORIZATION);
				State = 8414; _localctx.login = id_();
				}
				break;
			}
			State = 8420;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1077,_ctx) ) {
			case 1:
				{
				State = 8417; Match(STATE);
				State = 8418; Match(EQUAL);
				State = 8419;
				_localctx.state = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==DISABLED || _la==STARTED || _la==STOPPED) ) {
					_localctx.state = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 8422; Match(AS);
			State = 8423; Match(TCP);
			State = 8424; Match(LR_BRACKET);
			State = 8425; endpoint_listener_clause();
			State = 8426; Match(RR_BRACKET);
			State = 8477;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1087,_ctx) ) {
			case 1:
				{
				State = 8427; Match(FOR);
				State = 8428; Match(TSQL);
				State = 8429; Match(LR_BRACKET);
				State = 8430; Match(RR_BRACKET);
				}
				break;

			case 2:
				{
				State = 8431; Match(FOR);
				State = 8432; Match(SERVICE_BROKER);
				State = 8433; Match(LR_BRACKET);
				State = 8434; endpoint_authentication_clause();
				State = 8439;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1079,_ctx) ) {
				case 1:
					{
					State = 8436;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1078,_ctx) ) {
					case 1:
						{
						State = 8435; Match(COMMA);
						}
						break;
					}
					State = 8438; endpoint_encryption_alogorithm_clause();
					}
					break;
				}
				State = 8447;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1081,_ctx) ) {
				case 1:
					{
					State = 8442;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1080,_ctx) ) {
					case 1:
						{
						State = 8441; Match(COMMA);
						}
						break;
					}
					State = 8444; Match(MESSAGE_FORWARDING);
					State = 8445; Match(EQUAL);
					State = 8446;
					_la = _input.La(1);
					if ( !(_la==DISABLED || _la==ENABLED) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 8455;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1083,_ctx) ) {
				case 1:
					{
					State = 8450;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1082,_ctx) ) {
					case 1:
						{
						State = 8449; Match(COMMA);
						}
						break;
					}
					State = 8452; Match(MESSAGE_FORWARD_SIZE);
					State = 8453; Match(EQUAL);
					State = 8454; Match(DECIMAL);
					}
					break;
				}
				State = 8457; Match(RR_BRACKET);
				}
				break;

			case 3:
				{
				State = 8459; Match(FOR);
				State = 8460; Match(DATABASE_MIRRORING);
				State = 8461; Match(LR_BRACKET);
				State = 8462; endpoint_authentication_clause();
				State = 8467;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1085,_ctx) ) {
				case 1:
					{
					State = 8464;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1084,_ctx) ) {
					case 1:
						{
						State = 8463; Match(COMMA);
						}
						break;
					}
					State = 8466; endpoint_encryption_alogorithm_clause();
					}
					break;
				}
				State = 8470;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1086,_ctx) ) {
				case 1:
					{
					State = 8469; Match(COMMA);
					}
					break;
				}
				State = 8472; Match(ROLE);
				State = 8473; Match(EQUAL);
				State = 8474;
				_la = _input.La(1);
				if ( !(_la==ALL || _la==PARTNER || _la==WITNESS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 8475; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_mirroring_optionContext : ParserRuleContext {
		public Mirroring_set_optionContext mirroring_set_option() {
			return GetRuleContext<Mirroring_set_optionContext>(0);
		}
		public Database_mirroring_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_mirroring_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDatabase_mirroring_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDatabase_mirroring_option(this);
		}
	}

	[RuleVersion(0)]
	public Database_mirroring_optionContext database_mirroring_option() {
		Database_mirroring_optionContext _localctx = new Database_mirroring_optionContext(_ctx, State);
		EnterRule(_localctx, 640, RULE_database_mirroring_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8479; mirroring_set_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mirroring_set_optionContext : ParserRuleContext {
		public Mirroring_partnerContext mirroring_partner() {
			return GetRuleContext<Mirroring_partnerContext>(0);
		}
		public Partner_optionContext partner_option() {
			return GetRuleContext<Partner_optionContext>(0);
		}
		public Mirroring_witnessContext mirroring_witness() {
			return GetRuleContext<Mirroring_witnessContext>(0);
		}
		public Witness_optionContext witness_option() {
			return GetRuleContext<Witness_optionContext>(0);
		}
		public Mirroring_set_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mirroring_set_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMirroring_set_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMirroring_set_option(this);
		}
	}

	[RuleVersion(0)]
	public Mirroring_set_optionContext mirroring_set_option() {
		Mirroring_set_optionContext _localctx = new Mirroring_set_optionContext(_ctx, State);
		EnterRule(_localctx, 642, RULE_mirroring_set_option);
		try {
			State = 8487;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1088,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8481; mirroring_partner();
				State = 8482; partner_option();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8484; mirroring_witness();
				State = 8485; witness_option();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mirroring_partnerContext : ParserRuleContext {
		public ITerminalNode PARTNER() { return GetToken(TSqlParser.PARTNER, 0); }
		public Mirroring_partnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mirroring_partner; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMirroring_partner(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMirroring_partner(this);
		}
	}

	[RuleVersion(0)]
	public Mirroring_partnerContext mirroring_partner() {
		Mirroring_partnerContext _localctx = new Mirroring_partnerContext(_ctx, State);
		EnterRule(_localctx, 644, RULE_mirroring_partner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8489; Match(PARTNER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mirroring_witnessContext : ParserRuleContext {
		public ITerminalNode WITNESS() { return GetToken(TSqlParser.WITNESS, 0); }
		public Mirroring_witnessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mirroring_witness; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMirroring_witness(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMirroring_witness(this);
		}
	}

	[RuleVersion(0)]
	public Mirroring_witnessContext mirroring_witness() {
		Mirroring_witnessContext _localctx = new Mirroring_witnessContext(_ctx, State);
		EnterRule(_localctx, 646, RULE_mirroring_witness);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8491; Match(WITNESS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Witness_partner_equalContext : ParserRuleContext {
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public Witness_partner_equalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_witness_partner_equal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWitness_partner_equal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWitness_partner_equal(this);
		}
	}

	[RuleVersion(0)]
	public Witness_partner_equalContext witness_partner_equal() {
		Witness_partner_equalContext _localctx = new Witness_partner_equalContext(_ctx, State);
		EnterRule(_localctx, 648, RULE_witness_partner_equal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8493; Match(EQUAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partner_optionContext : ParserRuleContext {
		public Witness_partner_equalContext witness_partner_equal() {
			return GetRuleContext<Witness_partner_equalContext>(0);
		}
		public Partner_serverContext partner_server() {
			return GetRuleContext<Partner_serverContext>(0);
		}
		public ITerminalNode FAILOVER() { return GetToken(TSqlParser.FAILOVER, 0); }
		public ITerminalNode FORCE_SERVICE_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode RESUME() { return GetToken(TSqlParser.RESUME, 0); }
		public ITerminalNode SAFETY() { return GetToken(TSqlParser.SAFETY, 0); }
		public ITerminalNode FULL() { return GetToken(TSqlParser.FULL, 0); }
		public ITerminalNode SUSPEND() { return GetToken(TSqlParser.SUSPEND, 0); }
		public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Partner_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partner_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPartner_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPartner_option(this);
		}
	}

	[RuleVersion(0)]
	public Partner_optionContext partner_option() {
		Partner_optionContext _localctx = new Partner_optionContext(_ctx, State);
		EnterRule(_localctx, 650, RULE_partner_option);
		int _la;
		try {
			State = 8507;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1089,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8495; witness_partner_equal();
				State = 8496; partner_server();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8498; Match(FAILOVER);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8499; Match(FORCE_SERVICE_ALLOW_DATA_LOSS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8500; Match(OFF);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8501; Match(RESUME);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8502; Match(SAFETY);
				State = 8503;
				_la = _input.La(1);
				if ( !(_la==FULL || _la==OFF) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8504; Match(SUSPEND);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8505; Match(TIMEOUT);
				State = 8506; Match(DECIMAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Witness_optionContext : ParserRuleContext {
		public Witness_partner_equalContext witness_partner_equal() {
			return GetRuleContext<Witness_partner_equalContext>(0);
		}
		public Witness_serverContext witness_server() {
			return GetRuleContext<Witness_serverContext>(0);
		}
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Witness_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_witness_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWitness_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWitness_option(this);
		}
	}

	[RuleVersion(0)]
	public Witness_optionContext witness_option() {
		Witness_optionContext _localctx = new Witness_optionContext(_ctx, State);
		EnterRule(_localctx, 652, RULE_witness_option);
		try {
			State = 8513;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1090,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8509; witness_partner_equal();
				State = 8510; witness_server();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8512; Match(OFF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Witness_serverContext : ParserRuleContext {
		public Partner_serverContext partner_server() {
			return GetRuleContext<Partner_serverContext>(0);
		}
		public Witness_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_witness_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWitness_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWitness_server(this);
		}
	}

	[RuleVersion(0)]
	public Witness_serverContext witness_server() {
		Witness_serverContext _localctx = new Witness_serverContext(_ctx, State);
		EnterRule(_localctx, 654, RULE_witness_server);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8515; partner_server();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partner_serverContext : ParserRuleContext {
		public Partner_server_tcp_prefixContext partner_server_tcp_prefix() {
			return GetRuleContext<Partner_server_tcp_prefixContext>(0);
		}
		public HostContext host() {
			return GetRuleContext<HostContext>(0);
		}
		public Mirroring_host_port_seperatorContext mirroring_host_port_seperator() {
			return GetRuleContext<Mirroring_host_port_seperatorContext>(0);
		}
		public Port_numberContext port_number() {
			return GetRuleContext<Port_numberContext>(0);
		}
		public Partner_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partner_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPartner_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPartner_server(this);
		}
	}

	[RuleVersion(0)]
	public Partner_serverContext partner_server() {
		Partner_serverContext _localctx = new Partner_serverContext(_ctx, State);
		EnterRule(_localctx, 656, RULE_partner_server);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8517; partner_server_tcp_prefix();
			State = 8518; host();
			State = 8519; mirroring_host_port_seperator();
			State = 8520; port_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mirroring_host_port_seperatorContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(TSqlParser.COLON, 0); }
		public Mirroring_host_port_seperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mirroring_host_port_seperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMirroring_host_port_seperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMirroring_host_port_seperator(this);
		}
	}

	[RuleVersion(0)]
	public Mirroring_host_port_seperatorContext mirroring_host_port_seperator() {
		Mirroring_host_port_seperatorContext _localctx = new Mirroring_host_port_seperatorContext(_ctx, State);
		EnterRule(_localctx, 658, RULE_mirroring_host_port_seperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8522; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partner_server_tcp_prefixContext : ParserRuleContext {
		public ITerminalNode TCP() { return GetToken(TSqlParser.TCP, 0); }
		public ITerminalNode COLON() { return GetToken(TSqlParser.COLON, 0); }
		public ITerminalNode DOUBLE_FORWARD_SLASH() { return GetToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0); }
		public Partner_server_tcp_prefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partner_server_tcp_prefix; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPartner_server_tcp_prefix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPartner_server_tcp_prefix(this);
		}
	}

	[RuleVersion(0)]
	public Partner_server_tcp_prefixContext partner_server_tcp_prefix() {
		Partner_server_tcp_prefixContext _localctx = new Partner_server_tcp_prefixContext(_ctx, State);
		EnterRule(_localctx, 660, RULE_partner_server_tcp_prefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8524; Match(TCP);
			State = 8525; Match(COLON);
			State = 8526; Match(DOUBLE_FORWARD_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Port_numberContext : ParserRuleContext {
		public IToken port;
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Port_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_port_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPort_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPort_number(this);
		}
	}

	[RuleVersion(0)]
	public Port_numberContext port_number() {
		Port_numberContext _localctx = new Port_numberContext(_ctx, State);
		EnterRule(_localctx, 662, RULE_port_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8528; _localctx.port = Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HostContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public HostContext host() {
			return GetRuleContext<HostContext>(0);
		}
		public HostContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_host; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterHost(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitHost(this);
		}
	}

	[RuleVersion(0)]
	public HostContext host() {
		HostContext _localctx = new HostContext(_ctx, State);
		EnterRule(_localctx, 664, RULE_host);
		try {
			State = 8540;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1092,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8530; id_();
				State = 8531; Match(DOT);
				State = 8532; host();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8538;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1091,_ctx) ) {
				case 1:
					{
					State = 8534; id_();
					State = 8535; Match(DOT);
					}
					break;

				case 2:
					{
					State = 8537; id_();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_correlation_optimization_optionContext : ParserRuleContext {
		public ITerminalNode DATE_CORRELATION_OPTIMIZATION() { return GetToken(TSqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Date_correlation_optimization_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_correlation_optimization_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDate_correlation_optimization_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDate_correlation_optimization_option(this);
		}
	}

	[RuleVersion(0)]
	public Date_correlation_optimization_optionContext date_correlation_optimization_option() {
		Date_correlation_optimization_optionContext _localctx = new Date_correlation_optimization_optionContext(_ctx, State);
		EnterRule(_localctx, 666, RULE_date_correlation_optimization_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8542; Match(DATE_CORRELATION_OPTIMIZATION);
			State = 8543; on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_encryption_optionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Db_encryption_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_encryption_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDb_encryption_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDb_encryption_option(this);
		}
	}

	[RuleVersion(0)]
	public Db_encryption_optionContext db_encryption_option() {
		Db_encryption_optionContext _localctx = new Db_encryption_optionContext(_ctx, State);
		EnterRule(_localctx, 668, RULE_db_encryption_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8545; Match(ENCRYPTION);
			State = 8546; on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_state_optionContext : ParserRuleContext {
		public ITerminalNode ONLINE() { return GetToken(TSqlParser.ONLINE, 0); }
		public ITerminalNode OFFLINE() { return GetToken(TSqlParser.OFFLINE, 0); }
		public ITerminalNode EMERGENCY() { return GetToken(TSqlParser.EMERGENCY, 0); }
		public Db_state_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_state_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDb_state_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDb_state_option(this);
		}
	}

	[RuleVersion(0)]
	public Db_state_optionContext db_state_option() {
		Db_state_optionContext _localctx = new Db_state_optionContext(_ctx, State);
		EnterRule(_localctx, 670, RULE_db_state_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8548;
			_la = _input.La(1);
			if ( !(_la==EMERGENCY || _la==OFFLINE || _la==ONLINE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_update_optionContext : ParserRuleContext {
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(TSqlParser.READ_WRITE, 0); }
		public Db_update_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_update_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDb_update_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDb_update_option(this);
		}
	}

	[RuleVersion(0)]
	public Db_update_optionContext db_update_option() {
		Db_update_optionContext _localctx = new Db_update_optionContext(_ctx, State);
		EnterRule(_localctx, 672, RULE_db_update_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8550;
			_la = _input.La(1);
			if ( !(_la==READ_ONLY || _la==READ_WRITE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_user_access_optionContext : ParserRuleContext {
		public ITerminalNode SINGLE_USER() { return GetToken(TSqlParser.SINGLE_USER, 0); }
		public ITerminalNode RESTRICTED_USER() { return GetToken(TSqlParser.RESTRICTED_USER, 0); }
		public ITerminalNode MULTI_USER() { return GetToken(TSqlParser.MULTI_USER, 0); }
		public Db_user_access_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_user_access_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDb_user_access_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDb_user_access_option(this);
		}
	}

	[RuleVersion(0)]
	public Db_user_access_optionContext db_user_access_option() {
		Db_user_access_optionContext _localctx = new Db_user_access_optionContext(_ctx, State);
		EnterRule(_localctx, 674, RULE_db_user_access_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8552;
			_la = _input.La(1);
			if ( !(_la==MULTI_USER || _la==RESTRICTED_USER || _la==SINGLE_USER) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delayed_durability_optionContext : ParserRuleContext {
		public ITerminalNode DELAYED_DURABILITY() { return GetToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DISABLED() { return GetToken(TSqlParser.DISABLED, 0); }
		public ITerminalNode ALLOWED() { return GetToken(TSqlParser.ALLOWED, 0); }
		public ITerminalNode FORCED() { return GetToken(TSqlParser.FORCED, 0); }
		public Delayed_durability_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delayed_durability_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDelayed_durability_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDelayed_durability_option(this);
		}
	}

	[RuleVersion(0)]
	public Delayed_durability_optionContext delayed_durability_option() {
		Delayed_durability_optionContext _localctx = new Delayed_durability_optionContext(_ctx, State);
		EnterRule(_localctx, 676, RULE_delayed_durability_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8554; Match(DELAYED_DURABILITY);
			State = 8555; Match(EQUAL);
			State = 8556;
			_la = _input.La(1);
			if ( !(_la==ALLOWED || _la==DISABLED || _la==FORCED) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_access_optionContext : ParserRuleContext {
		public ITerminalNode DB_CHAINING() { return GetToken(TSqlParser.DB_CHAINING, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode TRUSTWORTHY() { return GetToken(TSqlParser.TRUSTWORTHY, 0); }
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public ITerminalNode NESTED_TRIGGERS() { return GetToken(TSqlParser.NESTED_TRIGGERS, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode TRANSFORM_NOISE_WORDS() { return GetToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public ITerminalNode TWO_DIGIT_YEAR_CUTOFF() { return GetToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public External_access_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_access_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExternal_access_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExternal_access_option(this);
		}
	}

	[RuleVersion(0)]
	public External_access_optionContext external_access_option() {
		External_access_optionContext _localctx = new External_access_optionContext(_ctx, State);
		EnterRule(_localctx, 678, RULE_external_access_option);
		int _la;
		try {
			State = 8583;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1095,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8558; Match(DB_CHAINING);
				State = 8559; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8560; Match(TRUSTWORTHY);
				State = 8561; on_off();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8562; Match(DEFAULT_LANGUAGE);
				State = 8563; Match(EQUAL);
				State = 8566;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1093,_ctx) ) {
				case 1:
					{
					State = 8564; id_();
					}
					break;

				case 2:
					{
					State = 8565; Match(STRING);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8568; Match(DEFAULT_FULLTEXT_LANGUAGE);
				State = 8569; Match(EQUAL);
				State = 8572;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1094,_ctx) ) {
				case 1:
					{
					State = 8570; id_();
					}
					break;

				case 2:
					{
					State = 8571; Match(STRING);
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8574; Match(NESTED_TRIGGERS);
				State = 8575; Match(EQUAL);
				State = 8576;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8577; Match(TRANSFORM_NOISE_WORDS);
				State = 8578; Match(EQUAL);
				State = 8579;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8580; Match(TWO_DIGIT_YEAR_CUTOFF);
				State = 8581; Match(EQUAL);
				State = 8582; Match(DECIMAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hadr_optionsContext : ParserRuleContext {
		public Id_Context availability_group_name;
		public ITerminalNode HADR() { return GetToken(TSqlParser.HADR, 0); }
		public ITerminalNode SUSPEND() { return GetToken(TSqlParser.SUSPEND, 0); }
		public ITerminalNode RESUME() { return GetToken(TSqlParser.RESUME, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Hadr_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hadr_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterHadr_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitHadr_options(this);
		}
	}

	[RuleVersion(0)]
	public Hadr_optionsContext hadr_options() {
		Hadr_optionsContext _localctx = new Hadr_optionsContext(_ctx, State);
		EnterRule(_localctx, 680, RULE_hadr_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8585; Match(HADR);
			State = 8594;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1097,_ctx) ) {
			case 1:
				{
				State = 8591;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1096,_ctx) ) {
				case 1:
					{
					State = 8586; Match(AVAILABILITY);
					State = 8587; Match(GROUP);
					State = 8588; Match(EQUAL);
					State = 8589; _localctx.availability_group_name = id_();
					}
					break;

				case 2:
					{
					State = 8590; Match(OFF);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 8593;
				_la = _input.La(1);
				if ( !(_la==RESUME || _la==SUSPEND) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mixed_page_allocation_optionContext : ParserRuleContext {
		public ITerminalNode MIXED_PAGE_ALLOCATION() { return GetToken(TSqlParser.MIXED_PAGE_ALLOCATION, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Mixed_page_allocation_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mixed_page_allocation_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMixed_page_allocation_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMixed_page_allocation_option(this);
		}
	}

	[RuleVersion(0)]
	public Mixed_page_allocation_optionContext mixed_page_allocation_option() {
		Mixed_page_allocation_optionContext _localctx = new Mixed_page_allocation_optionContext(_ctx, State);
		EnterRule(_localctx, 682, RULE_mixed_page_allocation_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8596; Match(MIXED_PAGE_ALLOCATION);
			State = 8597;
			_la = _input.La(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameterization_optionContext : ParserRuleContext {
		public ITerminalNode PARAMETERIZATION() { return GetToken(TSqlParser.PARAMETERIZATION, 0); }
		public ITerminalNode SIMPLE() { return GetToken(TSqlParser.SIMPLE, 0); }
		public ITerminalNode FORCED() { return GetToken(TSqlParser.FORCED, 0); }
		public Parameterization_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterization_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterParameterization_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitParameterization_option(this);
		}
	}

	[RuleVersion(0)]
	public Parameterization_optionContext parameterization_option() {
		Parameterization_optionContext _localctx = new Parameterization_optionContext(_ctx, State);
		EnterRule(_localctx, 684, RULE_parameterization_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8599; Match(PARAMETERIZATION);
			State = 8600;
			_la = _input.La(1);
			if ( !(_la==FORCED || _la==SIMPLE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Recovery_optionContext : ParserRuleContext {
		public ITerminalNode RECOVERY() { return GetToken(TSqlParser.RECOVERY, 0); }
		public ITerminalNode FULL() { return GetToken(TSqlParser.FULL, 0); }
		public ITerminalNode BULK_LOGGED() { return GetToken(TSqlParser.BULK_LOGGED, 0); }
		public ITerminalNode SIMPLE() { return GetToken(TSqlParser.SIMPLE, 0); }
		public ITerminalNode TORN_PAGE_DETECTION() { return GetToken(TSqlParser.TORN_PAGE_DETECTION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode ACCELERATED_DATABASE_RECOVERY() { return GetToken(TSqlParser.ACCELERATED_DATABASE_RECOVERY, 0); }
		public ITerminalNode PAGE_VERIFY() { return GetToken(TSqlParser.PAGE_VERIFY, 0); }
		public ITerminalNode CHECKSUM() { return GetToken(TSqlParser.CHECKSUM, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public Recovery_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recovery_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRecovery_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRecovery_option(this);
		}
	}

	[RuleVersion(0)]
	public Recovery_optionContext recovery_option() {
		Recovery_optionContext _localctx = new Recovery_optionContext(_ctx, State);
		EnterRule(_localctx, 686, RULE_recovery_option);
		int _la;
		try {
			State = 8611;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1098,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8602; Match(RECOVERY);
				State = 8603;
				_la = _input.La(1);
				if ( !(_la==BULK_LOGGED || _la==FULL || _la==SIMPLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8604; Match(TORN_PAGE_DETECTION);
				State = 8605; on_off();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8606; Match(ACCELERATED_DATABASE_RECOVERY);
				State = 8607; Match(EQUAL);
				State = 8608; on_off();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8609; Match(PAGE_VERIFY);
				State = 8610;
				_la = _input.La(1);
				if ( !(_la==CHECKSUM || _la==NONE || _la==TORN_PAGE_DETECTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Service_broker_optionContext : ParserRuleContext {
		public ITerminalNode ENABLE_BROKER() { return GetToken(TSqlParser.ENABLE_BROKER, 0); }
		public ITerminalNode DISABLE_BROKER() { return GetToken(TSqlParser.DISABLE_BROKER, 0); }
		public ITerminalNode NEW_BROKER() { return GetToken(TSqlParser.NEW_BROKER, 0); }
		public ITerminalNode ERROR_BROKER_CONVERSATIONS() { return GetToken(TSqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
		public ITerminalNode HONOR_BROKER_PRIORITY() { return GetToken(TSqlParser.HONOR_BROKER_PRIORITY, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Service_broker_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_service_broker_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterService_broker_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitService_broker_option(this);
		}
	}

	[RuleVersion(0)]
	public Service_broker_optionContext service_broker_option() {
		Service_broker_optionContext _localctx = new Service_broker_optionContext(_ctx, State);
		EnterRule(_localctx, 688, RULE_service_broker_option);
		try {
			State = 8619;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1099,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8613; Match(ENABLE_BROKER);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8614; Match(DISABLE_BROKER);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8615; Match(NEW_BROKER);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8616; Match(ERROR_BROKER_CONVERSATIONS);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8617; Match(HONOR_BROKER_PRIORITY);
				State = 8618; on_off();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Snapshot_optionContext : ParserRuleContext {
		public IToken MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT;
		public ITerminalNode ALLOW_SNAPSHOT_ISOLATION() { return GetToken(TSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode READ_COMMITTED_SNAPSHOT() { return GetToken(TSqlParser.READ_COMMITTED_SNAPSHOT, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Snapshot_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_snapshot_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSnapshot_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSnapshot_option(this);
		}
	}

	[RuleVersion(0)]
	public Snapshot_optionContext snapshot_option() {
		Snapshot_optionContext _localctx = new Snapshot_optionContext(_ctx, State);
		EnterRule(_localctx, 690, RULE_snapshot_option);
		int _la;
		try {
			State = 8626;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1100,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8621; Match(ALLOW_SNAPSHOT_ISOLATION);
				State = 8622; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8623; Match(READ_COMMITTED_SNAPSHOT);
				State = 8624;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8625;
				_localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
					_localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_optionContext : ParserRuleContext {
		public ITerminalNode ANSI_NULL_DEFAULT() { return GetToken(TSqlParser.ANSI_NULL_DEFAULT, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode ANSI_NULLS() { return GetToken(TSqlParser.ANSI_NULLS, 0); }
		public ITerminalNode ANSI_PADDING() { return GetToken(TSqlParser.ANSI_PADDING, 0); }
		public ITerminalNode ANSI_WARNINGS() { return GetToken(TSqlParser.ANSI_WARNINGS, 0); }
		public ITerminalNode ARITHABORT() { return GetToken(TSqlParser.ARITHABORT, 0); }
		public ITerminalNode COMPATIBILITY_LEVEL() { return GetToken(TSqlParser.COMPATIBILITY_LEVEL, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode CONCAT_NULL_YIELDS_NULL() { return GetToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public ITerminalNode NUMERIC_ROUNDABORT() { return GetToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
		public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public ITerminalNode RECURSIVE_TRIGGERS() { return GetToken(TSqlParser.RECURSIVE_TRIGGERS, 0); }
		public Sql_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSql_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSql_option(this);
		}
	}

	[RuleVersion(0)]
	public Sql_optionContext sql_option() {
		Sql_optionContext _localctx = new Sql_optionContext(_ctx, State);
		EnterRule(_localctx, 692, RULE_sql_option);
		try {
			State = 8649;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1101,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8628; Match(ANSI_NULL_DEFAULT);
				State = 8629; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8630; Match(ANSI_NULLS);
				State = 8631; on_off();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8632; Match(ANSI_PADDING);
				State = 8633; on_off();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8634; Match(ANSI_WARNINGS);
				State = 8635; on_off();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8636; Match(ARITHABORT);
				State = 8637; on_off();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8638; Match(COMPATIBILITY_LEVEL);
				State = 8639; Match(EQUAL);
				State = 8640; Match(DECIMAL);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8641; Match(CONCAT_NULL_YIELDS_NULL);
				State = 8642; on_off();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8643; Match(NUMERIC_ROUNDABORT);
				State = 8644; on_off();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 8645; Match(QUOTED_IDENTIFIER);
				State = 8646; on_off();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 8647; Match(RECURSIVE_TRIGGERS);
				State = 8648; on_off();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target_recovery_time_optionContext : ParserRuleContext {
		public ITerminalNode TARGET_RECOVERY_TIME() { return GetToken(TSqlParser.TARGET_RECOVERY_TIME, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode SECONDS() { return GetToken(TSqlParser.SECONDS, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public Target_recovery_time_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target_recovery_time_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTarget_recovery_time_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTarget_recovery_time_option(this);
		}
	}

	[RuleVersion(0)]
	public Target_recovery_time_optionContext target_recovery_time_option() {
		Target_recovery_time_optionContext _localctx = new Target_recovery_time_optionContext(_ctx, State);
		EnterRule(_localctx, 694, RULE_target_recovery_time_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8651; Match(TARGET_RECOVERY_TIME);
			State = 8652; Match(EQUAL);
			State = 8653; Match(DECIMAL);
			State = 8654;
			_la = _input.La(1);
			if ( !(_la==MINUTES || _la==SECONDS) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminationContext : ParserRuleContext {
		public IToken seconds;
		public ITerminalNode ROLLBACK() { return GetToken(TSqlParser.ROLLBACK, 0); }
		public ITerminalNode AFTER() { return GetToken(TSqlParser.AFTER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(TSqlParser.IMMEDIATE, 0); }
		public ITerminalNode NO_WAIT() { return GetToken(TSqlParser.NO_WAIT, 0); }
		public TerminationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termination; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTermination(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTermination(this);
		}
	}

	[RuleVersion(0)]
	public TerminationContext termination() {
		TerminationContext _localctx = new TerminationContext(_ctx, State);
		EnterRule(_localctx, 696, RULE_termination);
		try {
			State = 8662;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1102,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8656; Match(ROLLBACK);
				State = 8657; Match(AFTER);
				State = 8658; _localctx.seconds = Match(DECIMAL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8659; Match(ROLLBACK);
				State = 8660; Match(IMMEDIATE);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8661; Match(NO_WAIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_indexContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Drop_relational_or_xml_or_spatial_indexContext[] drop_relational_or_xml_or_spatial_index() {
			return GetRuleContexts<Drop_relational_or_xml_or_spatial_indexContext>();
		}
		public Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index(int i) {
			return GetRuleContext<Drop_relational_or_xml_or_spatial_indexContext>(i);
		}
		public Drop_backward_compatible_indexContext[] drop_backward_compatible_index() {
			return GetRuleContexts<Drop_backward_compatible_indexContext>();
		}
		public Drop_backward_compatible_indexContext drop_backward_compatible_index(int i) {
			return GetRuleContext<Drop_backward_compatible_indexContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_index(this);
		}
	}

	[RuleVersion(0)]
	public Drop_indexContext drop_index() {
		Drop_indexContext _localctx = new Drop_indexContext(_ctx, State);
		EnterRule(_localctx, 698, RULE_drop_index);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8664; Match(DROP);
			State = 8665; Match(INDEX);
			State = 8668;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1103,_ctx) ) {
			case 1:
				{
				State = 8666; Match(IF);
				State = 8667; Match(EXISTS);
				}
				break;
			}
			State = 8686;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1106,_ctx) ) {
			case 1:
				{
				State = 8670; drop_relational_or_xml_or_spatial_index();
				State = 8675;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1104,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8671; Match(COMMA);
						State = 8672; drop_relational_or_xml_or_spatial_index();
						}
						} 
					}
					State = 8677;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1104,_ctx);
				}
				}
				break;

			case 2:
				{
				State = 8678; drop_backward_compatible_index();
				State = 8683;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1105,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8679; Match(COMMA);
						State = 8680; drop_backward_compatible_index();
						}
						} 
					}
					State = 8685;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1105,_ctx);
				}
				}
				break;
			}
			State = 8689;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1107,_ctx) ) {
			case 1:
				{
				State = 8688; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_relational_or_xml_or_spatial_indexContext : ParserRuleContext {
		public Id_Context index_name;
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_relational_or_xml_or_spatial_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_relational_or_xml_or_spatial_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_relational_or_xml_or_spatial_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_relational_or_xml_or_spatial_index(this);
		}
	}

	[RuleVersion(0)]
	public Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index() {
		Drop_relational_or_xml_or_spatial_indexContext _localctx = new Drop_relational_or_xml_or_spatial_indexContext(_ctx, State);
		EnterRule(_localctx, 700, RULE_drop_relational_or_xml_or_spatial_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8691; _localctx.index_name = id_();
			State = 8692; Match(ON);
			State = 8693; full_table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_backward_compatible_indexContext : ParserRuleContext {
		public Id_Context owner_name;
		public Id_Context table_or_view_name;
		public Id_Context index_name;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Drop_backward_compatible_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_backward_compatible_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_backward_compatible_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_backward_compatible_index(this);
		}
	}

	[RuleVersion(0)]
	public Drop_backward_compatible_indexContext drop_backward_compatible_index() {
		Drop_backward_compatible_indexContext _localctx = new Drop_backward_compatible_indexContext(_ctx, State);
		EnterRule(_localctx, 702, RULE_drop_backward_compatible_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8698;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1108,_ctx) ) {
			case 1:
				{
				State = 8695; _localctx.owner_name = id_();
				State = 8696; Match(DOT);
				}
				break;
			}
			State = 8700; _localctx.table_or_view_name = id_();
			State = 8701; Match(DOT);
			State = 8702; _localctx.index_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_procedureContext : ParserRuleContext {
		public IToken proc;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Func_proc_name_schemaContext[] func_proc_name_schema() {
			return GetRuleContexts<Func_proc_name_schemaContext>();
		}
		public Func_proc_name_schemaContext func_proc_name_schema(int i) {
			return GetRuleContext<Func_proc_name_schemaContext>(i);
		}
		public ITerminalNode PROC() { return GetToken(TSqlParser.PROC, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(TSqlParser.PROCEDURE, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_procedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_procedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_procedure(this);
		}
	}

	[RuleVersion(0)]
	public Drop_procedureContext drop_procedure() {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, State);
		EnterRule(_localctx, 704, RULE_drop_procedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8704; Match(DROP);
			State = 8705;
			_localctx.proc = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
				_localctx.proc = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 8708;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1109,_ctx) ) {
			case 1:
				{
				State = 8706; Match(IF);
				State = 8707; Match(EXISTS);
				}
				break;
			}
			State = 8710; func_proc_name_schema();
			State = 8715;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1110,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 8711; Match(COMMA);
					State = 8712; func_proc_name_schema();
					}
					} 
				}
				State = 8717;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1110,_ctx);
			}
			State = 8719;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1111,_ctx) ) {
			case 1:
				{
				State = 8718; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_triggerContext : ParserRuleContext {
		public Drop_dml_triggerContext drop_dml_trigger() {
			return GetRuleContext<Drop_dml_triggerContext>(0);
		}
		public Drop_ddl_triggerContext drop_ddl_trigger() {
			return GetRuleContext<Drop_ddl_triggerContext>(0);
		}
		public Drop_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_trigger(this);
		}
	}

	[RuleVersion(0)]
	public Drop_triggerContext drop_trigger() {
		Drop_triggerContext _localctx = new Drop_triggerContext(_ctx, State);
		EnterRule(_localctx, 706, RULE_drop_trigger);
		try {
			State = 8723;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1112,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8721; drop_dml_trigger();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8722; drop_ddl_trigger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_dml_triggerContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext[] simple_name() {
			return GetRuleContexts<Simple_nameContext>();
		}
		public Simple_nameContext simple_name(int i) {
			return GetRuleContext<Simple_nameContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_dml_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_dml_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_dml_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_dml_trigger(this);
		}
	}

	[RuleVersion(0)]
	public Drop_dml_triggerContext drop_dml_trigger() {
		Drop_dml_triggerContext _localctx = new Drop_dml_triggerContext(_ctx, State);
		EnterRule(_localctx, 708, RULE_drop_dml_trigger);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8725; Match(DROP);
			State = 8726; Match(TRIGGER);
			State = 8729;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1113,_ctx) ) {
			case 1:
				{
				State = 8727; Match(IF);
				State = 8728; Match(EXISTS);
				}
				break;
			}
			State = 8731; simple_name();
			State = 8736;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1114,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 8732; Match(COMMA);
					State = 8733; simple_name();
					}
					} 
				}
				State = 8738;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1114,_ctx);
			}
			State = 8740;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1115,_ctx) ) {
			case 1:
				{
				State = 8739; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_ddl_triggerContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext[] simple_name() {
			return GetRuleContexts<Simple_nameContext>();
		}
		public Simple_nameContext simple_name(int i) {
			return GetRuleContext<Simple_nameContext>(i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_ddl_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_ddl_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_ddl_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_ddl_trigger(this);
		}
	}

	[RuleVersion(0)]
	public Drop_ddl_triggerContext drop_ddl_trigger() {
		Drop_ddl_triggerContext _localctx = new Drop_ddl_triggerContext(_ctx, State);
		EnterRule(_localctx, 710, RULE_drop_ddl_trigger);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8742; Match(DROP);
			State = 8743; Match(TRIGGER);
			State = 8746;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1116,_ctx) ) {
			case 1:
				{
				State = 8744; Match(IF);
				State = 8745; Match(EXISTS);
				}
				break;
			}
			State = 8748; simple_name();
			State = 8753;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1117,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 8749; Match(COMMA);
					State = 8750; simple_name();
					}
					} 
				}
				State = 8755;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1117,_ctx);
			}
			State = 8756; Match(ON);
			State = 8760;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1118,_ctx) ) {
			case 1:
				{
				State = 8757; Match(DATABASE);
				}
				break;

			case 2:
				{
				State = 8758; Match(ALL);
				State = 8759; Match(SERVER);
				}
				break;
			}
			State = 8763;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1119,_ctx) ) {
			case 1:
				{
				State = 8762; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_functionContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public Func_proc_name_schemaContext[] func_proc_name_schema() {
			return GetRuleContexts<Func_proc_name_schemaContext>();
		}
		public Func_proc_name_schemaContext func_proc_name_schema(int i) {
			return GetRuleContext<Func_proc_name_schemaContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_function(this);
		}
	}

	[RuleVersion(0)]
	public Drop_functionContext drop_function() {
		Drop_functionContext _localctx = new Drop_functionContext(_ctx, State);
		EnterRule(_localctx, 712, RULE_drop_function);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8765; Match(DROP);
			State = 8766; Match(FUNCTION);
			State = 8769;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1120,_ctx) ) {
			case 1:
				{
				State = 8767; Match(IF);
				State = 8768; Match(EXISTS);
				}
				break;
			}
			State = 8771; func_proc_name_schema();
			State = 8776;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1121,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 8772; Match(COMMA);
					State = 8773; func_proc_name_schema();
					}
					} 
				}
				State = 8778;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1121,_ctx);
			}
			State = 8780;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1122,_ctx) ) {
			case 1:
				{
				State = 8779; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_statisticsContext : ParserRuleContext {
		public Id_Context name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Table_nameContext[] table_name() {
			return GetRuleContexts<Table_nameContext>();
		}
		public Table_nameContext table_name(int i) {
			return GetRuleContext<Table_nameContext>(i);
		}
		public Drop_statisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_statistics; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_statistics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_statistics(this);
		}
	}

	[RuleVersion(0)]
	public Drop_statisticsContext drop_statistics() {
		Drop_statisticsContext _localctx = new Drop_statisticsContext(_ctx, State);
		EnterRule(_localctx, 714, RULE_drop_statistics);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8782; Match(DROP);
			State = 8783; Match(STATISTICS);
			State = 8793;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 8785;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1123,_ctx) ) {
					case 1:
						{
						State = 8784; Match(COMMA);
						}
						break;
					}
					State = 8790;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1124,_ctx) ) {
					case 1:
						{
						State = 8787; table_name();
						State = 8788; Match(DOT);
						}
						break;
					}
					State = 8792; _localctx.name = id_();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8795;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1125,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 8797; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_tableContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Table_nameContext[] table_name() {
			return GetRuleContexts<Table_nameContext>();
		}
		public Table_nameContext table_name(int i) {
			return GetRuleContext<Table_nameContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_table(this);
		}
	}

	[RuleVersion(0)]
	public Drop_tableContext drop_table() {
		Drop_tableContext _localctx = new Drop_tableContext(_ctx, State);
		EnterRule(_localctx, 716, RULE_drop_table);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8799; Match(DROP);
			State = 8800; Match(TABLE);
			State = 8803;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1126,_ctx) ) {
			case 1:
				{
				State = 8801; Match(IF);
				State = 8802; Match(EXISTS);
				}
				break;
			}
			State = 8805; table_name();
			State = 8810;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1127,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 8806; Match(COMMA);
					State = 8807; table_name();
					}
					} 
				}
				State = 8812;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1127,_ctx);
			}
			State = 8814;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1128,_ctx) ) {
			case 1:
				{
				State = 8813; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_viewContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode VIEW() { return GetToken(TSqlParser.VIEW, 0); }
		public Simple_nameContext[] simple_name() {
			return GetRuleContexts<Simple_nameContext>();
		}
		public Simple_nameContext simple_name(int i) {
			return GetRuleContext<Simple_nameContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_view; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_view(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_view(this);
		}
	}

	[RuleVersion(0)]
	public Drop_viewContext drop_view() {
		Drop_viewContext _localctx = new Drop_viewContext(_ctx, State);
		EnterRule(_localctx, 718, RULE_drop_view);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8816; Match(DROP);
			State = 8817; Match(VIEW);
			State = 8820;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1129,_ctx) ) {
			case 1:
				{
				State = 8818; Match(IF);
				State = 8819; Match(EXISTS);
				}
				break;
			}
			State = 8822; simple_name();
			State = 8827;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1130,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 8823; Match(COMMA);
					State = 8824; simple_name();
					}
					} 
				}
				State = 8829;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1130,_ctx);
			}
			State = 8831;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1131,_ctx) ) {
			case 1:
				{
				State = 8830; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_typeContext : ParserRuleContext {
		public Simple_nameContext name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return GetRuleContext<Column_def_table_constraintsContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public Create_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_type(this);
		}
	}

	[RuleVersion(0)]
	public Create_typeContext create_type() {
		Create_typeContext _localctx = new Create_typeContext(_ctx, State);
		EnterRule(_localctx, 720, RULE_create_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8833; Match(CREATE);
			State = 8834; Match(TYPE);
			State = 8835; _localctx.name = simple_name();
			State = 8841;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1133,_ctx) ) {
			case 1:
				{
				State = 8836; Match(FROM);
				State = 8837; data_type();
				State = 8839;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1132,_ctx) ) {
				case 1:
					{
					State = 8838; null_notnull();
					}
					break;
				}
				}
				break;
			}
			State = 8849;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1134,_ctx) ) {
			case 1:
				{
				State = 8843; Match(AS);
				State = 8844; Match(TABLE);
				State = 8845; Match(LR_BRACKET);
				State = 8846; column_def_table_constraints();
				State = 8847; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_typeContext : ParserRuleContext {
		public Simple_nameContext name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_type(this);
		}
	}

	[RuleVersion(0)]
	public Drop_typeContext drop_type() {
		Drop_typeContext _localctx = new Drop_typeContext(_ctx, State);
		EnterRule(_localctx, 722, RULE_drop_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8851; Match(DROP);
			State = 8852; Match(TYPE);
			State = 8855;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1135,_ctx) ) {
			case 1:
				{
				State = 8853; Match(IF);
				State = 8854; Match(EXISTS);
				}
				break;
			}
			State = 8857; _localctx.name = simple_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rowset_function_limitedContext : ParserRuleContext {
		public OpenqueryContext openquery() {
			return GetRuleContext<OpenqueryContext>(0);
		}
		public OpendatasourceContext opendatasource() {
			return GetRuleContext<OpendatasourceContext>(0);
		}
		public Rowset_function_limitedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowset_function_limited; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRowset_function_limited(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRowset_function_limited(this);
		}
	}

	[RuleVersion(0)]
	public Rowset_function_limitedContext rowset_function_limited() {
		Rowset_function_limitedContext _localctx = new Rowset_function_limitedContext(_ctx, State);
		EnterRule(_localctx, 724, RULE_rowset_function_limited);
		try {
			State = 8861;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1136,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8859; openquery();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8860; opendatasource();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenqueryContext : ParserRuleContext {
		public Id_Context linked_server;
		public IToken query;
		public ITerminalNode OPENQUERY() { return GetToken(TSqlParser.OPENQUERY, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public OpenqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpenquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpenquery(this);
		}
	}

	[RuleVersion(0)]
	public OpenqueryContext openquery() {
		OpenqueryContext _localctx = new OpenqueryContext(_ctx, State);
		EnterRule(_localctx, 726, RULE_openquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8863; Match(OPENQUERY);
			State = 8864; Match(LR_BRACKET);
			State = 8865; _localctx.linked_server = id_();
			State = 8866; Match(COMMA);
			State = 8867; _localctx.query = Match(STRING);
			State = 8868; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpendatasourceContext : ParserRuleContext {
		public IToken provider;
		public IToken init;
		public Id_Context database;
		public Id_Context scheme;
		public Id_Context table;
		public ITerminalNode OPENDATASOURCE() { return GetToken(TSqlParser.OPENDATASOURCE, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public OpendatasourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opendatasource; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpendatasource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpendatasource(this);
		}
	}

	[RuleVersion(0)]
	public OpendatasourceContext opendatasource() {
		OpendatasourceContext _localctx = new OpendatasourceContext(_ctx, State);
		EnterRule(_localctx, 728, RULE_opendatasource);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8870; Match(OPENDATASOURCE);
			State = 8871; Match(LR_BRACKET);
			State = 8872; _localctx.provider = Match(STRING);
			State = 8873; Match(COMMA);
			State = 8874; _localctx.init = Match(STRING);
			State = 8875; Match(RR_BRACKET);
			State = 8876; Match(DOT);
			State = 8878;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1137,_ctx) ) {
			case 1:
				{
				State = 8877; _localctx.database = id_();
				}
				break;
			}
			State = 8880; Match(DOT);
			State = 8882;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1138,_ctx) ) {
			case 1:
				{
				State = 8881; _localctx.scheme = id_();
				}
				break;
			}
			State = 8884; Match(DOT);
			{
			State = 8885; _localctx.table = id_();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_statementContext : ParserRuleContext {
		public Declare_localContext _declare_local;
		public IList<Declare_localContext> _loc = new List<Declare_localContext>();
		public Xml_declarationContext _xml_declaration;
		public IList<Xml_declarationContext> _xml_dec = new List<Xml_declarationContext>();
		public ITerminalNode DECLARE() { return GetToken(TSqlParser.DECLARE, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public Table_type_definitionContext table_type_definition() {
			return GetRuleContext<Table_type_definitionContext>(0);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Declare_localContext[] declare_local() {
			return GetRuleContexts<Declare_localContext>();
		}
		public Declare_localContext declare_local(int i) {
			return GetRuleContext<Declare_localContext>(i);
		}
		public Xml_type_definitionContext xml_type_definition() {
			return GetRuleContext<Xml_type_definitionContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode XMLNAMESPACES() { return GetToken(TSqlParser.XMLNAMESPACES, 0); }
		public Xml_declarationContext[] xml_declaration() {
			return GetRuleContexts<Xml_declarationContext>();
		}
		public Xml_declarationContext xml_declaration(int i) {
			return GetRuleContext<Xml_declarationContext>(i);
		}
		public Declare_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_statement(this);
		}
	}

	[RuleVersion(0)]
	public Declare_statementContext declare_statement() {
		Declare_statementContext _localctx = new Declare_statementContext(_ctx, State);
		EnterRule(_localctx, 730, RULE_declare_statement);
		try {
			int _alt;
			State = 8925;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1144,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8887; Match(DECLARE);
				State = 8888; Match(LOCAL_ID);
				State = 8890;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1139,_ctx) ) {
				case 1:
					{
					State = 8889; Match(AS);
					}
					break;
				}
				State = 8895;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1140,_ctx) ) {
				case 1:
					{
					State = 8892; data_type();
					}
					break;

				case 2:
					{
					State = 8893; table_type_definition();
					}
					break;

				case 3:
					{
					State = 8894; table_name();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8897; Match(DECLARE);
				State = 8898; _localctx._declare_local = declare_local();
				_localctx._loc.Add(_localctx._declare_local);
				State = 8903;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1141,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8899; Match(COMMA);
						State = 8900; _localctx._declare_local = declare_local();
						_localctx._loc.Add(_localctx._declare_local);
						}
						} 
					}
					State = 8905;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1141,_ctx);
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8906; Match(DECLARE);
				State = 8907; Match(LOCAL_ID);
				State = 8909;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1142,_ctx) ) {
				case 1:
					{
					State = 8908; Match(AS);
					}
					break;
				}
				State = 8911; xml_type_definition();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8912; Match(WITH);
				State = 8913; Match(XMLNAMESPACES);
				State = 8914; Match(LR_BRACKET);
				State = 8915; _localctx._xml_declaration = xml_declaration();
				_localctx._xml_dec.Add(_localctx._xml_declaration);
				State = 8920;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1143,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8916; Match(COMMA);
						State = 8917; _localctx._xml_declaration = xml_declaration();
						_localctx._xml_dec.Add(_localctx._xml_declaration);
						}
						} 
					}
					State = 8922;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1143,_ctx);
				}
				State = 8923; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_declarationContext : ParserRuleContext {
		public IToken xml_namespace_uri;
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public Xml_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Xml_declarationContext xml_declaration() {
		Xml_declarationContext _localctx = new Xml_declarationContext(_ctx, State);
		EnterRule(_localctx, 732, RULE_xml_declaration);
		try {
			State = 8932;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1145,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8927; _localctx.xml_namespace_uri = Match(STRING);
				State = 8928; Match(AS);
				State = 8929; id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8930; Match(DEFAULT);
				State = 8931; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_statementContext : ParserRuleContext {
		public ITerminalNode CLOSE() { return GetToken(TSqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public ITerminalNode DEALLOCATE() { return GetToken(TSqlParser.DEALLOCATE, 0); }
		public ITerminalNode CURSOR() { return GetToken(TSqlParser.CURSOR, 0); }
		public Declare_cursorContext declare_cursor() {
			return GetRuleContext<Declare_cursorContext>(0);
		}
		public Fetch_cursorContext fetch_cursor() {
			return GetRuleContext<Fetch_cursorContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(TSqlParser.OPEN, 0); }
		public Cursor_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCursor_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCursor_statement(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_statementContext cursor_statement() {
		Cursor_statementContext _localctx = new Cursor_statementContext(_ctx, State);
		EnterRule(_localctx, 734, RULE_cursor_statement);
		try {
			State = 8963;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1153,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8934; Match(CLOSE);
				State = 8936;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1146,_ctx) ) {
				case 1:
					{
					State = 8935; Match(GLOBAL);
					}
					break;
				}
				State = 8938; cursor_name();
				State = 8940;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1147,_ctx) ) {
				case 1:
					{
					State = 8939; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8942; Match(DEALLOCATE);
				State = 8944;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1148,_ctx) ) {
				case 1:
					{
					State = 8943; Match(GLOBAL);
					}
					break;
				}
				State = 8947;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1149,_ctx) ) {
				case 1:
					{
					State = 8946; Match(CURSOR);
					}
					break;
				}
				State = 8949; cursor_name();
				State = 8951;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1150,_ctx) ) {
				case 1:
					{
					State = 8950; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8953; declare_cursor();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8954; fetch_cursor();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8955; Match(OPEN);
				State = 8957;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1151,_ctx) ) {
				case 1:
					{
					State = 8956; Match(GLOBAL);
					}
					break;
				}
				State = 8959; cursor_name();
				State = 8961;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1152,_ctx) ) {
				case 1:
					{
					State = 8960; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_databaseContext : ParserRuleContext {
		public Id_Context database_name;
		public IToken file_or_filegroup;
		public Id_Context logical_device_name;
		public Id_Context backup_set_name;
		public IToken medianame;
		public IToken stats_percent;
		public Id_Context encryptor_name;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode READ_WRITE_FILEGROUPS() { return GetToken(TSqlParser.READ_WRITE_FILEGROUPS, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] FILE() { return GetTokens(TSqlParser.FILE); }
		public ITerminalNode FILE(int i) {
			return GetToken(TSqlParser.FILE, i);
		}
		public ITerminalNode[] FILEGROUP() { return GetTokens(TSqlParser.FILEGROUP); }
		public ITerminalNode FILEGROUP(int i) {
			return GetToken(TSqlParser.FILEGROUP, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] DISK() { return GetTokens(TSqlParser.DISK); }
		public ITerminalNode DISK(int i) {
			return GetToken(TSqlParser.DISK, i);
		}
		public ITerminalNode[] TAPE() { return GetTokens(TSqlParser.TAPE); }
		public ITerminalNode TAPE(int i) {
			return GetToken(TSqlParser.TAPE, i);
		}
		public ITerminalNode[] URL() { return GetTokens(TSqlParser.URL); }
		public ITerminalNode URL(int i) {
			return GetToken(TSqlParser.URL, i);
		}
		public ITerminalNode[] MIRROR() { return GetTokens(TSqlParser.MIRROR); }
		public ITerminalNode MIRROR(int i) {
			return GetToken(TSqlParser.MIRROR, i);
		}
		public ITerminalNode[] DIFFERENTIAL() { return GetTokens(TSqlParser.DIFFERENTIAL); }
		public ITerminalNode DIFFERENTIAL(int i) {
			return GetToken(TSqlParser.DIFFERENTIAL, i);
		}
		public ITerminalNode[] COPY_ONLY() { return GetTokens(TSqlParser.COPY_ONLY); }
		public ITerminalNode COPY_ONLY(int i) {
			return GetToken(TSqlParser.COPY_ONLY, i);
		}
		public ITerminalNode[] DESCRIPTION() { return GetTokens(TSqlParser.DESCRIPTION); }
		public ITerminalNode DESCRIPTION(int i) {
			return GetToken(TSqlParser.DESCRIPTION, i);
		}
		public ITerminalNode[] NAME() { return GetTokens(TSqlParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(TSqlParser.NAME, i);
		}
		public ITerminalNode[] CREDENTIAL() { return GetTokens(TSqlParser.CREDENTIAL); }
		public ITerminalNode CREDENTIAL(int i) {
			return GetToken(TSqlParser.CREDENTIAL, i);
		}
		public ITerminalNode[] FILE_SNAPSHOT() { return GetTokens(TSqlParser.FILE_SNAPSHOT); }
		public ITerminalNode FILE_SNAPSHOT(int i) {
			return GetToken(TSqlParser.FILE_SNAPSHOT, i);
		}
		public ITerminalNode[] MEDIADESCRIPTION() { return GetTokens(TSqlParser.MEDIADESCRIPTION); }
		public ITerminalNode MEDIADESCRIPTION(int i) {
			return GetToken(TSqlParser.MEDIADESCRIPTION, i);
		}
		public ITerminalNode[] MEDIANAME() { return GetTokens(TSqlParser.MEDIANAME); }
		public ITerminalNode MEDIANAME(int i) {
			return GetToken(TSqlParser.MEDIANAME, i);
		}
		public ITerminalNode[] BLOCKSIZE() { return GetTokens(TSqlParser.BLOCKSIZE); }
		public ITerminalNode BLOCKSIZE(int i) {
			return GetToken(TSqlParser.BLOCKSIZE, i);
		}
		public ITerminalNode[] BUFFERCOUNT() { return GetTokens(TSqlParser.BUFFERCOUNT); }
		public ITerminalNode BUFFERCOUNT(int i) {
			return GetToken(TSqlParser.BUFFERCOUNT, i);
		}
		public ITerminalNode[] MAXTRANSFER() { return GetTokens(TSqlParser.MAXTRANSFER); }
		public ITerminalNode MAXTRANSFER(int i) {
			return GetToken(TSqlParser.MAXTRANSFER, i);
		}
		public ITerminalNode[] RESTART() { return GetTokens(TSqlParser.RESTART); }
		public ITerminalNode RESTART(int i) {
			return GetToken(TSqlParser.RESTART, i);
		}
		public ITerminalNode[] STATS() { return GetTokens(TSqlParser.STATS); }
		public ITerminalNode STATS(int i) {
			return GetToken(TSqlParser.STATS, i);
		}
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] ALGORITHM() { return GetTokens(TSqlParser.ALGORITHM); }
		public ITerminalNode ALGORITHM(int i) {
			return GetToken(TSqlParser.ALGORITHM, i);
		}
		public ITerminalNode[] SERVER() { return GetTokens(TSqlParser.SERVER); }
		public ITerminalNode SERVER(int i) {
			return GetToken(TSqlParser.SERVER, i);
		}
		public ITerminalNode[] CERTIFICATE() { return GetTokens(TSqlParser.CERTIFICATE); }
		public ITerminalNode CERTIFICATE(int i) {
			return GetToken(TSqlParser.CERTIFICATE, i);
		}
		public ITerminalNode[] COMPRESSION() { return GetTokens(TSqlParser.COMPRESSION); }
		public ITerminalNode COMPRESSION(int i) {
			return GetToken(TSqlParser.COMPRESSION, i);
		}
		public ITerminalNode[] NO_COMPRESSION() { return GetTokens(TSqlParser.NO_COMPRESSION); }
		public ITerminalNode NO_COMPRESSION(int i) {
			return GetToken(TSqlParser.NO_COMPRESSION, i);
		}
		public ITerminalNode[] NOINIT() { return GetTokens(TSqlParser.NOINIT); }
		public ITerminalNode NOINIT(int i) {
			return GetToken(TSqlParser.NOINIT, i);
		}
		public ITerminalNode[] INIT() { return GetTokens(TSqlParser.INIT); }
		public ITerminalNode INIT(int i) {
			return GetToken(TSqlParser.INIT, i);
		}
		public ITerminalNode[] NOSKIP() { return GetTokens(TSqlParser.NOSKIP); }
		public ITerminalNode NOSKIP(int i) {
			return GetToken(TSqlParser.NOSKIP, i);
		}
		public ITerminalNode[] SKIP_KEYWORD() { return GetTokens(TSqlParser.SKIP_KEYWORD); }
		public ITerminalNode SKIP_KEYWORD(int i) {
			return GetToken(TSqlParser.SKIP_KEYWORD, i);
		}
		public ITerminalNode[] NOFORMAT() { return GetTokens(TSqlParser.NOFORMAT); }
		public ITerminalNode NOFORMAT(int i) {
			return GetToken(TSqlParser.NOFORMAT, i);
		}
		public ITerminalNode[] FORMAT() { return GetTokens(TSqlParser.FORMAT); }
		public ITerminalNode FORMAT(int i) {
			return GetToken(TSqlParser.FORMAT, i);
		}
		public ITerminalNode[] NO_CHECKSUM() { return GetTokens(TSqlParser.NO_CHECKSUM); }
		public ITerminalNode NO_CHECKSUM(int i) {
			return GetToken(TSqlParser.NO_CHECKSUM, i);
		}
		public ITerminalNode[] CHECKSUM() { return GetTokens(TSqlParser.CHECKSUM); }
		public ITerminalNode CHECKSUM(int i) {
			return GetToken(TSqlParser.CHECKSUM, i);
		}
		public ITerminalNode[] STOP_ON_ERROR() { return GetTokens(TSqlParser.STOP_ON_ERROR); }
		public ITerminalNode STOP_ON_ERROR(int i) {
			return GetToken(TSqlParser.STOP_ON_ERROR, i);
		}
		public ITerminalNode[] CONTINUE_AFTER_ERROR() { return GetTokens(TSqlParser.CONTINUE_AFTER_ERROR); }
		public ITerminalNode CONTINUE_AFTER_ERROR(int i) {
			return GetToken(TSqlParser.CONTINUE_AFTER_ERROR, i);
		}
		public ITerminalNode[] REWIND() { return GetTokens(TSqlParser.REWIND); }
		public ITerminalNode REWIND(int i) {
			return GetToken(TSqlParser.REWIND, i);
		}
		public ITerminalNode[] NOREWIND() { return GetTokens(TSqlParser.NOREWIND); }
		public ITerminalNode NOREWIND(int i) {
			return GetToken(TSqlParser.NOREWIND, i);
		}
		public ITerminalNode[] LOAD() { return GetTokens(TSqlParser.LOAD); }
		public ITerminalNode LOAD(int i) {
			return GetToken(TSqlParser.LOAD, i);
		}
		public ITerminalNode[] NOUNLOAD() { return GetTokens(TSqlParser.NOUNLOAD); }
		public ITerminalNode NOUNLOAD(int i) {
			return GetToken(TSqlParser.NOUNLOAD, i);
		}
		public ITerminalNode[] AES_128() { return GetTokens(TSqlParser.AES_128); }
		public ITerminalNode AES_128(int i) {
			return GetToken(TSqlParser.AES_128, i);
		}
		public ITerminalNode[] AES_192() { return GetTokens(TSqlParser.AES_192); }
		public ITerminalNode AES_192(int i) {
			return GetToken(TSqlParser.AES_192, i);
		}
		public ITerminalNode[] AES_256() { return GetTokens(TSqlParser.AES_256); }
		public ITerminalNode AES_256(int i) {
			return GetToken(TSqlParser.AES_256, i);
		}
		public ITerminalNode[] TRIPLE_DES_3KEY() { return GetTokens(TSqlParser.TRIPLE_DES_3KEY); }
		public ITerminalNode TRIPLE_DES_3KEY(int i) {
			return GetToken(TSqlParser.TRIPLE_DES_3KEY, i);
		}
		public ITerminalNode[] EXPIREDATE() { return GetTokens(TSqlParser.EXPIREDATE); }
		public ITerminalNode EXPIREDATE(int i) {
			return GetToken(TSqlParser.EXPIREDATE, i);
		}
		public ITerminalNode[] RETAINDAYS() { return GetTokens(TSqlParser.RETAINDAYS); }
		public ITerminalNode RETAINDAYS(int i) {
			return GetToken(TSqlParser.RETAINDAYS, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] ASYMMETRIC() { return GetTokens(TSqlParser.ASYMMETRIC); }
		public ITerminalNode ASYMMETRIC(int i) {
			return GetToken(TSqlParser.ASYMMETRIC, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public Backup_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_database(this);
		}
	}

	[RuleVersion(0)]
	public Backup_databaseContext backup_database() {
		Backup_databaseContext _localctx = new Backup_databaseContext(_ctx, State);
		EnterRule(_localctx, 736, RULE_backup_database);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8965; Match(BACKUP);
			State = 8966; Match(DATABASE);
			{
			State = 8967; _localctx.database_name = id_();
			}
			State = 8980;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1156,_ctx) ) {
			case 1:
				{
				State = 8968; Match(READ_WRITE_FILEGROUPS);
				State = 8977;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1155,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8970;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1154,_ctx) ) {
						case 1:
							{
							State = 8969; Match(COMMA);
							}
							break;
						}
						State = 8972;
						_la = _input.La(1);
						if ( !(_la==FILE || _la==FILEGROUP) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 8973; Match(EQUAL);
						State = 8974; _localctx.file_or_filegroup = Match(STRING);
						}
						} 
					}
					State = 8979;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1155,_ctx);
				}
				}
				break;
			}
			State = 8990;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1158,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 8983;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1157,_ctx) ) {
					case 1:
						{
						State = 8982; Match(COMMA);
						}
						break;
					}
					State = 8985;
					_la = _input.La(1);
					if ( !(_la==FILE || _la==FILEGROUP) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 8986; Match(EQUAL);
					State = 8987; _localctx.file_or_filegroup = Match(STRING);
					}
					} 
				}
				State = 8992;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1158,_ctx);
			}
			State = 9016;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1164,_ctx) ) {
			case 1:
				{
				State = 8993; Match(TO);
				State = 8998;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 8995;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1159,_ctx) ) {
						case 1:
							{
							State = 8994; Match(COMMA);
							}
							break;
						}
						State = 8997; _localctx.logical_device_name = id_();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 9000;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1160,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				{
				State = 9002; Match(TO);
				State = 9012;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 9004;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1161,_ctx) ) {
						case 1:
							{
							State = 9003; Match(COMMA);
							}
							break;
						}
						State = 9006;
						_la = _input.La(1);
						if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 9007; Match(EQUAL);
						State = 9010;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1162,_ctx) ) {
						case 1:
							{
							State = 9008; Match(STRING);
							}
							break;

						case 2:
							{
							State = 9009; id_();
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 9014;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1163,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 9051;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1172,_ctx) ) {
			case 1:
				{
				State = 9028;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 9018; Match(MIRROR);
						State = 9019; Match(TO);
						State = 9024;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 9021;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1165,_ctx) ) {
								case 1:
									{
									State = 9020; Match(COMMA);
									}
									break;
								}
								State = 9023; _localctx.logical_device_name = id_();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 9026;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,1166,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 9030;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1167,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				{
				State = 9047;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 9032; Match(MIRROR);
						State = 9033; Match(TO);
						State = 9043;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 9035;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1168,_ctx) ) {
								case 1:
									{
									State = 9034; Match(COMMA);
									}
									break;
								}
								State = 9037;
								_la = _input.La(1);
								if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								State = 9038; Match(EQUAL);
								State = 9041;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1169,_ctx) ) {
								case 1:
									{
									State = 9039; Match(STRING);
									}
									break;

								case 2:
									{
									State = 9040; id_();
									}
									break;
								}
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 9045;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,1170,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 9049;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1171,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 9213;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1208,_ctx) ) {
			case 1:
				{
				State = 9053; Match(WITH);
				State = 9210;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1207,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						State = 9208;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1206,_ctx) ) {
						case 1:
							{
							State = 9055;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1173,_ctx) ) {
							case 1:
								{
								State = 9054; Match(COMMA);
								}
								break;
							}
							State = 9057; Match(DIFFERENTIAL);
							}
							break;

						case 2:
							{
							State = 9059;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1174,_ctx) ) {
							case 1:
								{
								State = 9058; Match(COMMA);
								}
								break;
							}
							State = 9061; Match(COPY_ONLY);
							}
							break;

						case 3:
							{
							State = 9063;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1175,_ctx) ) {
							case 1:
								{
								State = 9062; Match(COMMA);
								}
								break;
							}
							State = 9065;
							_la = _input.La(1);
							if ( !(_la==COMPRESSION || _la==NO_COMPRESSION) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 4:
							{
							State = 9067;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1176,_ctx) ) {
							case 1:
								{
								State = 9066; Match(COMMA);
								}
								break;
							}
							State = 9069; Match(DESCRIPTION);
							State = 9070; Match(EQUAL);
							State = 9073;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1177,_ctx) ) {
							case 1:
								{
								State = 9071; Match(STRING);
								}
								break;

							case 2:
								{
								State = 9072; id_();
								}
								break;
							}
							}
							break;

						case 5:
							{
							State = 9076;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1178,_ctx) ) {
							case 1:
								{
								State = 9075; Match(COMMA);
								}
								break;
							}
							State = 9078; Match(NAME);
							State = 9079; Match(EQUAL);
							State = 9080; _localctx.backup_set_name = id_();
							}
							break;

						case 6:
							{
							State = 9082;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1179,_ctx) ) {
							case 1:
								{
								State = 9081; Match(COMMA);
								}
								break;
							}
							State = 9084; Match(CREDENTIAL);
							}
							break;

						case 7:
							{
							State = 9086;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1180,_ctx) ) {
							case 1:
								{
								State = 9085; Match(COMMA);
								}
								break;
							}
							State = 9088; Match(FILE_SNAPSHOT);
							}
							break;

						case 8:
							{
							State = 9090;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1181,_ctx) ) {
							case 1:
								{
								State = 9089; Match(COMMA);
								}
								break;
							}
							State = 9104;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1184,_ctx) ) {
							case 1:
								{
								State = 9092; Match(EXPIREDATE);
								State = 9093; Match(EQUAL);
								State = 9096;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1182,_ctx) ) {
								case 1:
									{
									State = 9094; Match(STRING);
									}
									break;

								case 2:
									{
									State = 9095; id_();
									}
									break;
								}
								}
								break;

							case 2:
								{
								State = 9098; Match(RETAINDAYS);
								State = 9099; Match(EQUAL);
								State = 9102;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1183,_ctx) ) {
								case 1:
									{
									State = 9100; Match(DECIMAL);
									}
									break;

								case 2:
									{
									State = 9101; id_();
									}
									break;
								}
								}
								break;
							}
							}
							break;

						case 9:
							{
							State = 9107;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1185,_ctx) ) {
							case 1:
								{
								State = 9106; Match(COMMA);
								}
								break;
							}
							State = 9109;
							_la = _input.La(1);
							if ( !(_la==INIT || _la==NOINIT) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 10:
							{
							State = 9111;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1186,_ctx) ) {
							case 1:
								{
								State = 9110; Match(COMMA);
								}
								break;
							}
							State = 9113;
							_la = _input.La(1);
							if ( !(_la==NOSKIP || _la==SKIP_KEYWORD) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 11:
							{
							State = 9115;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1187,_ctx) ) {
							case 1:
								{
								State = 9114; Match(COMMA);
								}
								break;
							}
							State = 9117;
							_la = _input.La(1);
							if ( !(_la==FORMAT || _la==NOFORMAT) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 12:
							{
							State = 9119;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1188,_ctx) ) {
							case 1:
								{
								State = 9118; Match(COMMA);
								}
								break;
							}
							State = 9121; Match(MEDIADESCRIPTION);
							State = 9122; Match(EQUAL);
							State = 9125;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1189,_ctx) ) {
							case 1:
								{
								State = 9123; Match(STRING);
								}
								break;

							case 2:
								{
								State = 9124; id_();
								}
								break;
							}
							}
							break;

						case 13:
							{
							State = 9128;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1190,_ctx) ) {
							case 1:
								{
								State = 9127; Match(COMMA);
								}
								break;
							}
							State = 9130; Match(MEDIANAME);
							State = 9131; Match(EQUAL);
							{
							State = 9132; _localctx.medianame = Match(STRING);
							}
							}
							break;

						case 14:
							{
							State = 9134;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1191,_ctx) ) {
							case 1:
								{
								State = 9133; Match(COMMA);
								}
								break;
							}
							State = 9136; Match(BLOCKSIZE);
							State = 9137; Match(EQUAL);
							State = 9140;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1192,_ctx) ) {
							case 1:
								{
								State = 9138; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 9139; id_();
								}
								break;
							}
							}
							break;

						case 15:
							{
							State = 9143;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1193,_ctx) ) {
							case 1:
								{
								State = 9142; Match(COMMA);
								}
								break;
							}
							State = 9145; Match(BUFFERCOUNT);
							State = 9146; Match(EQUAL);
							State = 9149;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1194,_ctx) ) {
							case 1:
								{
								State = 9147; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 9148; id_();
								}
								break;
							}
							}
							break;

						case 16:
							{
							State = 9152;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1195,_ctx) ) {
							case 1:
								{
								State = 9151; Match(COMMA);
								}
								break;
							}
							State = 9154; Match(MAXTRANSFER);
							State = 9155; Match(EQUAL);
							State = 9158;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1196,_ctx) ) {
							case 1:
								{
								State = 9156; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 9157; id_();
								}
								break;
							}
							}
							break;

						case 17:
							{
							State = 9161;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1197,_ctx) ) {
							case 1:
								{
								State = 9160; Match(COMMA);
								}
								break;
							}
							State = 9163;
							_la = _input.La(1);
							if ( !(_la==CHECKSUM || _la==NO_CHECKSUM) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 18:
							{
							State = 9165;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1198,_ctx) ) {
							case 1:
								{
								State = 9164; Match(COMMA);
								}
								break;
							}
							State = 9167;
							_la = _input.La(1);
							if ( !(_la==CONTINUE_AFTER_ERROR || _la==STOP_ON_ERROR) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 19:
							{
							State = 9169;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1199,_ctx) ) {
							case 1:
								{
								State = 9168; Match(COMMA);
								}
								break;
							}
							State = 9171; Match(RESTART);
							}
							break;

						case 20:
							{
							State = 9173;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1200,_ctx) ) {
							case 1:
								{
								State = 9172; Match(COMMA);
								}
								break;
							}
							State = 9175; Match(STATS);
							State = 9178;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1201,_ctx) ) {
							case 1:
								{
								State = 9176; Match(EQUAL);
								State = 9177; _localctx.stats_percent = Match(DECIMAL);
								}
								break;
							}
							}
							break;

						case 21:
							{
							State = 9181;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1202,_ctx) ) {
							case 1:
								{
								State = 9180; Match(COMMA);
								}
								break;
							}
							State = 9183;
							_la = _input.La(1);
							if ( !(_la==NOREWIND || _la==REWIND) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 22:
							{
							State = 9185;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1203,_ctx) ) {
							case 1:
								{
								State = 9184; Match(COMMA);
								}
								break;
							}
							State = 9187;
							_la = _input.La(1);
							if ( !(_la==LOAD || _la==NOUNLOAD) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 23:
							{
							State = 9189;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1204,_ctx) ) {
							case 1:
								{
								State = 9188; Match(COMMA);
								}
								break;
							}
							State = 9191; Match(ENCRYPTION);
							State = 9192; Match(LR_BRACKET);
							State = 9193; Match(ALGORITHM);
							State = 9194; Match(EQUAL);
							State = 9195;
							_la = _input.La(1);
							if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AES_128) | (1L << AES_192) | (1L << AES_256))) != 0) || _la==TRIPLE_DES_3KEY) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							State = 9196; Match(COMMA);
							State = 9197; Match(SERVER);
							State = 9198; Match(CERTIFICATE);
							State = 9199; Match(EQUAL);
							State = 9206;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1205,_ctx) ) {
							case 1:
								{
								State = 9200; _localctx.encryptor_name = id_();
								}
								break;

							case 2:
								{
								State = 9201; Match(SERVER);
								State = 9202; Match(ASYMMETRIC);
								State = 9203; Match(KEY);
								State = 9204; Match(EQUAL);
								State = 9205; _localctx.encryptor_name = id_();
								}
								break;
							}
							}
							break;
						}
						} 
					}
					State = 9212;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1207,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_logContext : ParserRuleContext {
		public Id_Context database_name;
		public Id_Context logical_device_name;
		public Id_Context backup_set_name;
		public IToken medianame;
		public IToken stats_percent;
		public IToken undo_file_name;
		public Id_Context encryptor_name;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] DISK() { return GetTokens(TSqlParser.DISK); }
		public ITerminalNode DISK(int i) {
			return GetToken(TSqlParser.DISK, i);
		}
		public ITerminalNode[] TAPE() { return GetTokens(TSqlParser.TAPE); }
		public ITerminalNode TAPE(int i) {
			return GetToken(TSqlParser.TAPE, i);
		}
		public ITerminalNode[] URL() { return GetTokens(TSqlParser.URL); }
		public ITerminalNode URL(int i) {
			return GetToken(TSqlParser.URL, i);
		}
		public ITerminalNode[] MIRROR() { return GetTokens(TSqlParser.MIRROR); }
		public ITerminalNode MIRROR(int i) {
			return GetToken(TSqlParser.MIRROR, i);
		}
		public ITerminalNode[] DIFFERENTIAL() { return GetTokens(TSqlParser.DIFFERENTIAL); }
		public ITerminalNode DIFFERENTIAL(int i) {
			return GetToken(TSqlParser.DIFFERENTIAL, i);
		}
		public ITerminalNode[] COPY_ONLY() { return GetTokens(TSqlParser.COPY_ONLY); }
		public ITerminalNode COPY_ONLY(int i) {
			return GetToken(TSqlParser.COPY_ONLY, i);
		}
		public ITerminalNode[] DESCRIPTION() { return GetTokens(TSqlParser.DESCRIPTION); }
		public ITerminalNode DESCRIPTION(int i) {
			return GetToken(TSqlParser.DESCRIPTION, i);
		}
		public ITerminalNode[] NAME() { return GetTokens(TSqlParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(TSqlParser.NAME, i);
		}
		public ITerminalNode[] CREDENTIAL() { return GetTokens(TSqlParser.CREDENTIAL); }
		public ITerminalNode CREDENTIAL(int i) {
			return GetToken(TSqlParser.CREDENTIAL, i);
		}
		public ITerminalNode[] FILE_SNAPSHOT() { return GetTokens(TSqlParser.FILE_SNAPSHOT); }
		public ITerminalNode FILE_SNAPSHOT(int i) {
			return GetToken(TSqlParser.FILE_SNAPSHOT, i);
		}
		public ITerminalNode[] MEDIADESCRIPTION() { return GetTokens(TSqlParser.MEDIADESCRIPTION); }
		public ITerminalNode MEDIADESCRIPTION(int i) {
			return GetToken(TSqlParser.MEDIADESCRIPTION, i);
		}
		public ITerminalNode[] MEDIANAME() { return GetTokens(TSqlParser.MEDIANAME); }
		public ITerminalNode MEDIANAME(int i) {
			return GetToken(TSqlParser.MEDIANAME, i);
		}
		public ITerminalNode[] BLOCKSIZE() { return GetTokens(TSqlParser.BLOCKSIZE); }
		public ITerminalNode BLOCKSIZE(int i) {
			return GetToken(TSqlParser.BLOCKSIZE, i);
		}
		public ITerminalNode[] BUFFERCOUNT() { return GetTokens(TSqlParser.BUFFERCOUNT); }
		public ITerminalNode BUFFERCOUNT(int i) {
			return GetToken(TSqlParser.BUFFERCOUNT, i);
		}
		public ITerminalNode[] MAXTRANSFER() { return GetTokens(TSqlParser.MAXTRANSFER); }
		public ITerminalNode MAXTRANSFER(int i) {
			return GetToken(TSqlParser.MAXTRANSFER, i);
		}
		public ITerminalNode[] RESTART() { return GetTokens(TSqlParser.RESTART); }
		public ITerminalNode RESTART(int i) {
			return GetToken(TSqlParser.RESTART, i);
		}
		public ITerminalNode[] STATS() { return GetTokens(TSqlParser.STATS); }
		public ITerminalNode STATS(int i) {
			return GetToken(TSqlParser.STATS, i);
		}
		public ITerminalNode[] NO_TRUNCATE() { return GetTokens(TSqlParser.NO_TRUNCATE); }
		public ITerminalNode NO_TRUNCATE(int i) {
			return GetToken(TSqlParser.NO_TRUNCATE, i);
		}
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] ALGORITHM() { return GetTokens(TSqlParser.ALGORITHM); }
		public ITerminalNode ALGORITHM(int i) {
			return GetToken(TSqlParser.ALGORITHM, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] SERVER() { return GetTokens(TSqlParser.SERVER); }
		public ITerminalNode SERVER(int i) {
			return GetToken(TSqlParser.SERVER, i);
		}
		public ITerminalNode[] CERTIFICATE() { return GetTokens(TSqlParser.CERTIFICATE); }
		public ITerminalNode CERTIFICATE(int i) {
			return GetToken(TSqlParser.CERTIFICATE, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] COMPRESSION() { return GetTokens(TSqlParser.COMPRESSION); }
		public ITerminalNode COMPRESSION(int i) {
			return GetToken(TSqlParser.COMPRESSION, i);
		}
		public ITerminalNode[] NO_COMPRESSION() { return GetTokens(TSqlParser.NO_COMPRESSION); }
		public ITerminalNode NO_COMPRESSION(int i) {
			return GetToken(TSqlParser.NO_COMPRESSION, i);
		}
		public ITerminalNode[] NOINIT() { return GetTokens(TSqlParser.NOINIT); }
		public ITerminalNode NOINIT(int i) {
			return GetToken(TSqlParser.NOINIT, i);
		}
		public ITerminalNode[] INIT() { return GetTokens(TSqlParser.INIT); }
		public ITerminalNode INIT(int i) {
			return GetToken(TSqlParser.INIT, i);
		}
		public ITerminalNode[] NOSKIP() { return GetTokens(TSqlParser.NOSKIP); }
		public ITerminalNode NOSKIP(int i) {
			return GetToken(TSqlParser.NOSKIP, i);
		}
		public ITerminalNode[] SKIP_KEYWORD() { return GetTokens(TSqlParser.SKIP_KEYWORD); }
		public ITerminalNode SKIP_KEYWORD(int i) {
			return GetToken(TSqlParser.SKIP_KEYWORD, i);
		}
		public ITerminalNode[] NOFORMAT() { return GetTokens(TSqlParser.NOFORMAT); }
		public ITerminalNode NOFORMAT(int i) {
			return GetToken(TSqlParser.NOFORMAT, i);
		}
		public ITerminalNode[] FORMAT() { return GetTokens(TSqlParser.FORMAT); }
		public ITerminalNode FORMAT(int i) {
			return GetToken(TSqlParser.FORMAT, i);
		}
		public ITerminalNode[] NO_CHECKSUM() { return GetTokens(TSqlParser.NO_CHECKSUM); }
		public ITerminalNode NO_CHECKSUM(int i) {
			return GetToken(TSqlParser.NO_CHECKSUM, i);
		}
		public ITerminalNode[] CHECKSUM() { return GetTokens(TSqlParser.CHECKSUM); }
		public ITerminalNode CHECKSUM(int i) {
			return GetToken(TSqlParser.CHECKSUM, i);
		}
		public ITerminalNode[] STOP_ON_ERROR() { return GetTokens(TSqlParser.STOP_ON_ERROR); }
		public ITerminalNode STOP_ON_ERROR(int i) {
			return GetToken(TSqlParser.STOP_ON_ERROR, i);
		}
		public ITerminalNode[] CONTINUE_AFTER_ERROR() { return GetTokens(TSqlParser.CONTINUE_AFTER_ERROR); }
		public ITerminalNode CONTINUE_AFTER_ERROR(int i) {
			return GetToken(TSqlParser.CONTINUE_AFTER_ERROR, i);
		}
		public ITerminalNode[] REWIND() { return GetTokens(TSqlParser.REWIND); }
		public ITerminalNode REWIND(int i) {
			return GetToken(TSqlParser.REWIND, i);
		}
		public ITerminalNode[] NOREWIND() { return GetTokens(TSqlParser.NOREWIND); }
		public ITerminalNode NOREWIND(int i) {
			return GetToken(TSqlParser.NOREWIND, i);
		}
		public ITerminalNode[] LOAD() { return GetTokens(TSqlParser.LOAD); }
		public ITerminalNode LOAD(int i) {
			return GetToken(TSqlParser.LOAD, i);
		}
		public ITerminalNode[] NOUNLOAD() { return GetTokens(TSqlParser.NOUNLOAD); }
		public ITerminalNode NOUNLOAD(int i) {
			return GetToken(TSqlParser.NOUNLOAD, i);
		}
		public ITerminalNode[] AES_128() { return GetTokens(TSqlParser.AES_128); }
		public ITerminalNode AES_128(int i) {
			return GetToken(TSqlParser.AES_128, i);
		}
		public ITerminalNode[] AES_192() { return GetTokens(TSqlParser.AES_192); }
		public ITerminalNode AES_192(int i) {
			return GetToken(TSqlParser.AES_192, i);
		}
		public ITerminalNode[] AES_256() { return GetTokens(TSqlParser.AES_256); }
		public ITerminalNode AES_256(int i) {
			return GetToken(TSqlParser.AES_256, i);
		}
		public ITerminalNode[] TRIPLE_DES_3KEY() { return GetTokens(TSqlParser.TRIPLE_DES_3KEY); }
		public ITerminalNode TRIPLE_DES_3KEY(int i) {
			return GetToken(TSqlParser.TRIPLE_DES_3KEY, i);
		}
		public ITerminalNode[] EXPIREDATE() { return GetTokens(TSqlParser.EXPIREDATE); }
		public ITerminalNode EXPIREDATE(int i) {
			return GetToken(TSqlParser.EXPIREDATE, i);
		}
		public ITerminalNode[] RETAINDAYS() { return GetTokens(TSqlParser.RETAINDAYS); }
		public ITerminalNode RETAINDAYS(int i) {
			return GetToken(TSqlParser.RETAINDAYS, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] NORECOVERY() { return GetTokens(TSqlParser.NORECOVERY); }
		public ITerminalNode NORECOVERY(int i) {
			return GetToken(TSqlParser.NORECOVERY, i);
		}
		public ITerminalNode[] STANDBY() { return GetTokens(TSqlParser.STANDBY); }
		public ITerminalNode STANDBY(int i) {
			return GetToken(TSqlParser.STANDBY, i);
		}
		public ITerminalNode[] ASYMMETRIC() { return GetTokens(TSqlParser.ASYMMETRIC); }
		public ITerminalNode ASYMMETRIC(int i) {
			return GetToken(TSqlParser.ASYMMETRIC, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public Backup_logContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_log; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_log(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_log(this);
		}
	}

	[RuleVersion(0)]
	public Backup_logContext backup_log() {
		Backup_logContext _localctx = new Backup_logContext(_ctx, State);
		EnterRule(_localctx, 738, RULE_backup_log);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9215; Match(BACKUP);
			State = 9216; Match(LOG);
			{
			State = 9217; _localctx.database_name = id_();
			}
			State = 9241;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1214,_ctx) ) {
			case 1:
				{
				State = 9218; Match(TO);
				State = 9223;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 9220;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1209,_ctx) ) {
						case 1:
							{
							State = 9219; Match(COMMA);
							}
							break;
						}
						State = 9222; _localctx.logical_device_name = id_();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 9225;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1210,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				{
				State = 9227; Match(TO);
				State = 9237;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 9229;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1211,_ctx) ) {
						case 1:
							{
							State = 9228; Match(COMMA);
							}
							break;
						}
						State = 9231;
						_la = _input.La(1);
						if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 9232; Match(EQUAL);
						State = 9235;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1212,_ctx) ) {
						case 1:
							{
							State = 9233; Match(STRING);
							}
							break;

						case 2:
							{
							State = 9234; id_();
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 9239;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1213,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 9276;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1222,_ctx) ) {
			case 1:
				{
				State = 9253;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 9243; Match(MIRROR);
						State = 9244; Match(TO);
						State = 9249;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 9246;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1215,_ctx) ) {
								case 1:
									{
									State = 9245; Match(COMMA);
									}
									break;
								}
								State = 9248; _localctx.logical_device_name = id_();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 9251;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,1216,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 9255;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1217,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				{
				State = 9272;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 9257; Match(MIRROR);
						State = 9258; Match(TO);
						State = 9268;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 9260;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1218,_ctx) ) {
								case 1:
									{
									State = 9259; Match(COMMA);
									}
									break;
								}
								State = 9262;
								_la = _input.La(1);
								if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								State = 9263; Match(EQUAL);
								State = 9266;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1219,_ctx) ) {
								case 1:
									{
									State = 9264; Match(STRING);
									}
									break;

								case 2:
									{
									State = 9265; id_();
									}
									break;
								}
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 9270;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,1220,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 9274;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1221,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 9451;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1261,_ctx) ) {
			case 1:
				{
				State = 9278; Match(WITH);
				State = 9448;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1260,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						State = 9446;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1259,_ctx) ) {
						case 1:
							{
							State = 9280;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1223,_ctx) ) {
							case 1:
								{
								State = 9279; Match(COMMA);
								}
								break;
							}
							State = 9282; Match(DIFFERENTIAL);
							}
							break;

						case 2:
							{
							State = 9284;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1224,_ctx) ) {
							case 1:
								{
								State = 9283; Match(COMMA);
								}
								break;
							}
							State = 9286; Match(COPY_ONLY);
							}
							break;

						case 3:
							{
							State = 9288;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1225,_ctx) ) {
							case 1:
								{
								State = 9287; Match(COMMA);
								}
								break;
							}
							State = 9290;
							_la = _input.La(1);
							if ( !(_la==COMPRESSION || _la==NO_COMPRESSION) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 4:
							{
							State = 9292;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1226,_ctx) ) {
							case 1:
								{
								State = 9291; Match(COMMA);
								}
								break;
							}
							State = 9294; Match(DESCRIPTION);
							State = 9295; Match(EQUAL);
							State = 9298;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1227,_ctx) ) {
							case 1:
								{
								State = 9296; Match(STRING);
								}
								break;

							case 2:
								{
								State = 9297; id_();
								}
								break;
							}
							}
							break;

						case 5:
							{
							State = 9301;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1228,_ctx) ) {
							case 1:
								{
								State = 9300; Match(COMMA);
								}
								break;
							}
							State = 9303; Match(NAME);
							State = 9304; Match(EQUAL);
							State = 9305; _localctx.backup_set_name = id_();
							}
							break;

						case 6:
							{
							State = 9307;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1229,_ctx) ) {
							case 1:
								{
								State = 9306; Match(COMMA);
								}
								break;
							}
							State = 9309; Match(CREDENTIAL);
							}
							break;

						case 7:
							{
							State = 9311;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1230,_ctx) ) {
							case 1:
								{
								State = 9310; Match(COMMA);
								}
								break;
							}
							State = 9313; Match(FILE_SNAPSHOT);
							}
							break;

						case 8:
							{
							State = 9315;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1231,_ctx) ) {
							case 1:
								{
								State = 9314; Match(COMMA);
								}
								break;
							}
							State = 9329;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1234,_ctx) ) {
							case 1:
								{
								State = 9317; Match(EXPIREDATE);
								State = 9318; Match(EQUAL);
								State = 9321;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1232,_ctx) ) {
								case 1:
									{
									State = 9319; Match(STRING);
									}
									break;

								case 2:
									{
									State = 9320; id_();
									}
									break;
								}
								}
								break;

							case 2:
								{
								State = 9323; Match(RETAINDAYS);
								State = 9324; Match(EQUAL);
								State = 9327;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1233,_ctx) ) {
								case 1:
									{
									State = 9325; Match(DECIMAL);
									}
									break;

								case 2:
									{
									State = 9326; id_();
									}
									break;
								}
								}
								break;
							}
							}
							break;

						case 9:
							{
							State = 9332;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1235,_ctx) ) {
							case 1:
								{
								State = 9331; Match(COMMA);
								}
								break;
							}
							State = 9334;
							_la = _input.La(1);
							if ( !(_la==INIT || _la==NOINIT) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 10:
							{
							State = 9336;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1236,_ctx) ) {
							case 1:
								{
								State = 9335; Match(COMMA);
								}
								break;
							}
							State = 9338;
							_la = _input.La(1);
							if ( !(_la==NOSKIP || _la==SKIP_KEYWORD) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 11:
							{
							State = 9340;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1237,_ctx) ) {
							case 1:
								{
								State = 9339; Match(COMMA);
								}
								break;
							}
							State = 9342;
							_la = _input.La(1);
							if ( !(_la==FORMAT || _la==NOFORMAT) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 12:
							{
							State = 9344;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1238,_ctx) ) {
							case 1:
								{
								State = 9343; Match(COMMA);
								}
								break;
							}
							State = 9346; Match(MEDIADESCRIPTION);
							State = 9347; Match(EQUAL);
							State = 9350;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1239,_ctx) ) {
							case 1:
								{
								State = 9348; Match(STRING);
								}
								break;

							case 2:
								{
								State = 9349; id_();
								}
								break;
							}
							}
							break;

						case 13:
							{
							State = 9353;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1240,_ctx) ) {
							case 1:
								{
								State = 9352; Match(COMMA);
								}
								break;
							}
							State = 9355; Match(MEDIANAME);
							State = 9356; Match(EQUAL);
							{
							State = 9357; _localctx.medianame = Match(STRING);
							}
							}
							break;

						case 14:
							{
							State = 9359;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1241,_ctx) ) {
							case 1:
								{
								State = 9358; Match(COMMA);
								}
								break;
							}
							State = 9361; Match(BLOCKSIZE);
							State = 9362; Match(EQUAL);
							State = 9365;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1242,_ctx) ) {
							case 1:
								{
								State = 9363; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 9364; id_();
								}
								break;
							}
							}
							break;

						case 15:
							{
							State = 9368;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1243,_ctx) ) {
							case 1:
								{
								State = 9367; Match(COMMA);
								}
								break;
							}
							State = 9370; Match(BUFFERCOUNT);
							State = 9371; Match(EQUAL);
							State = 9374;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1244,_ctx) ) {
							case 1:
								{
								State = 9372; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 9373; id_();
								}
								break;
							}
							}
							break;

						case 16:
							{
							State = 9377;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1245,_ctx) ) {
							case 1:
								{
								State = 9376; Match(COMMA);
								}
								break;
							}
							State = 9379; Match(MAXTRANSFER);
							State = 9380; Match(EQUAL);
							State = 9383;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1246,_ctx) ) {
							case 1:
								{
								State = 9381; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 9382; id_();
								}
								break;
							}
							}
							break;

						case 17:
							{
							State = 9386;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1247,_ctx) ) {
							case 1:
								{
								State = 9385; Match(COMMA);
								}
								break;
							}
							State = 9388;
							_la = _input.La(1);
							if ( !(_la==CHECKSUM || _la==NO_CHECKSUM) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 18:
							{
							State = 9390;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1248,_ctx) ) {
							case 1:
								{
								State = 9389; Match(COMMA);
								}
								break;
							}
							State = 9392;
							_la = _input.La(1);
							if ( !(_la==CONTINUE_AFTER_ERROR || _la==STOP_ON_ERROR) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 19:
							{
							State = 9394;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1249,_ctx) ) {
							case 1:
								{
								State = 9393; Match(COMMA);
								}
								break;
							}
							State = 9396; Match(RESTART);
							}
							break;

						case 20:
							{
							State = 9398;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1250,_ctx) ) {
							case 1:
								{
								State = 9397; Match(COMMA);
								}
								break;
							}
							State = 9400; Match(STATS);
							State = 9403;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1251,_ctx) ) {
							case 1:
								{
								State = 9401; Match(EQUAL);
								State = 9402; _localctx.stats_percent = Match(DECIMAL);
								}
								break;
							}
							}
							break;

						case 21:
							{
							State = 9406;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1252,_ctx) ) {
							case 1:
								{
								State = 9405; Match(COMMA);
								}
								break;
							}
							State = 9408;
							_la = _input.La(1);
							if ( !(_la==NOREWIND || _la==REWIND) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 22:
							{
							State = 9410;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1253,_ctx) ) {
							case 1:
								{
								State = 9409; Match(COMMA);
								}
								break;
							}
							State = 9412;
							_la = _input.La(1);
							if ( !(_la==LOAD || _la==NOUNLOAD) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 23:
							{
							State = 9414;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1254,_ctx) ) {
							case 1:
								{
								State = 9413; Match(COMMA);
								}
								break;
							}
							State = 9420;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1255,_ctx) ) {
							case 1:
								{
								State = 9416; Match(NORECOVERY);
								}
								break;

							case 2:
								{
								State = 9417; Match(STANDBY);
								State = 9418; Match(EQUAL);
								State = 9419; _localctx.undo_file_name = Match(STRING);
								}
								break;
							}
							}
							break;

						case 24:
							{
							State = 9423;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1256,_ctx) ) {
							case 1:
								{
								State = 9422; Match(COMMA);
								}
								break;
							}
							State = 9425; Match(NO_TRUNCATE);
							}
							break;

						case 25:
							{
							State = 9427;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1257,_ctx) ) {
							case 1:
								{
								State = 9426; Match(COMMA);
								}
								break;
							}
							State = 9429; Match(ENCRYPTION);
							State = 9430; Match(LR_BRACKET);
							State = 9431; Match(ALGORITHM);
							State = 9432; Match(EQUAL);
							State = 9433;
							_la = _input.La(1);
							if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AES_128) | (1L << AES_192) | (1L << AES_256))) != 0) || _la==TRIPLE_DES_3KEY) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							State = 9434; Match(COMMA);
							State = 9435; Match(SERVER);
							State = 9436; Match(CERTIFICATE);
							State = 9437; Match(EQUAL);
							State = 9444;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1258,_ctx) ) {
							case 1:
								{
								State = 9438; _localctx.encryptor_name = id_();
								}
								break;

							case 2:
								{
								State = 9439; Match(SERVER);
								State = 9440; Match(ASYMMETRIC);
								State = 9441; Match(KEY);
								State = 9442; Match(EQUAL);
								State = 9443; _localctx.encryptor_name = id_();
								}
								break;
							}
							}
							break;
						}
						} 
					}
					State = 9450;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1260,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_certificateContext : ParserRuleContext {
		public Id_Context certname;
		public IToken cert_file;
		public IToken private_key_file;
		public IToken encryption_password;
		public IToken decryption_pasword;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode[] FILE() { return GetTokens(TSqlParser.FILE); }
		public ITerminalNode FILE(int i) {
			return GetToken(TSqlParser.FILE, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public ITerminalNode[] PASSWORD() { return GetTokens(TSqlParser.PASSWORD); }
		public ITerminalNode PASSWORD(int i) {
			return GetToken(TSqlParser.PASSWORD, i);
		}
		public ITerminalNode[] DECRYPTION() { return GetTokens(TSqlParser.DECRYPTION); }
		public ITerminalNode DECRYPTION(int i) {
			return GetToken(TSqlParser.DECRYPTION, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Backup_certificateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_certificate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_certificate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_certificate(this);
		}
	}

	[RuleVersion(0)]
	public Backup_certificateContext backup_certificate() {
		Backup_certificateContext _localctx = new Backup_certificateContext(_ctx, State);
		EnterRule(_localctx, 740, RULE_backup_certificate);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9453; Match(BACKUP);
			State = 9454; Match(CERTIFICATE);
			State = 9455; _localctx.certname = id_();
			State = 9456; Match(TO);
			State = 9457; Match(FILE);
			State = 9458; Match(EQUAL);
			State = 9459; _localctx.cert_file = Match(STRING);
			State = 9491;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1267,_ctx) ) {
			case 1:
				{
				State = 9460; Match(WITH);
				State = 9461; Match(PRIVATE);
				State = 9462; Match(KEY);
				State = 9463; Match(LR_BRACKET);
				State = 9486;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 9486;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1265,_ctx) ) {
						case 1:
							{
							State = 9465;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1262,_ctx) ) {
							case 1:
								{
								State = 9464; Match(COMMA);
								}
								break;
							}
							State = 9467; Match(FILE);
							State = 9468; Match(EQUAL);
							State = 9469; _localctx.private_key_file = Match(STRING);
							}
							break;

						case 2:
							{
							State = 9471;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1263,_ctx) ) {
							case 1:
								{
								State = 9470; Match(COMMA);
								}
								break;
							}
							State = 9473; Match(ENCRYPTION);
							State = 9474; Match(BY);
							State = 9475; Match(PASSWORD);
							State = 9476; Match(EQUAL);
							State = 9477; _localctx.encryption_password = Match(STRING);
							}
							break;

						case 3:
							{
							State = 9479;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1264,_ctx) ) {
							case 1:
								{
								State = 9478; Match(COMMA);
								}
								break;
							}
							State = 9481; Match(DECRYPTION);
							State = 9482; Match(BY);
							State = 9483; Match(PASSWORD);
							State = 9484; Match(EQUAL);
							State = 9485; _localctx.decryption_pasword = Match(STRING);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 9488;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1266,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 9490; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_master_keyContext : ParserRuleContext {
		public IToken master_key_backup_file;
		public IToken encryption_password;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Backup_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_master_key(this);
		}
	}

	[RuleVersion(0)]
	public Backup_master_keyContext backup_master_key() {
		Backup_master_keyContext _localctx = new Backup_master_keyContext(_ctx, State);
		EnterRule(_localctx, 742, RULE_backup_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9493; Match(BACKUP);
			State = 9494; Match(MASTER);
			State = 9495; Match(KEY);
			State = 9496; Match(TO);
			State = 9497; Match(FILE);
			State = 9498; Match(EQUAL);
			State = 9499; _localctx.master_key_backup_file = Match(STRING);
			State = 9500; Match(ENCRYPTION);
			State = 9501; Match(BY);
			State = 9502; Match(PASSWORD);
			State = 9503; Match(EQUAL);
			State = 9504; _localctx.encryption_password = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_service_master_keyContext : ParserRuleContext {
		public IToken service_master_key_backup_file;
		public IToken encryption_password;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Backup_service_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_service_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_service_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_service_master_key(this);
		}
	}

	[RuleVersion(0)]
	public Backup_service_master_keyContext backup_service_master_key() {
		Backup_service_master_keyContext _localctx = new Backup_service_master_keyContext(_ctx, State);
		EnterRule(_localctx, 744, RULE_backup_service_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9506; Match(BACKUP);
			State = 9507; Match(SERVICE);
			State = 9508; Match(MASTER);
			State = 9509; Match(KEY);
			State = 9510; Match(TO);
			State = 9511; Match(FILE);
			State = 9512; Match(EQUAL);
			State = 9513; _localctx.service_master_key_backup_file = Match(STRING);
			State = 9514; Match(ENCRYPTION);
			State = 9515; Match(BY);
			State = 9516; Match(PASSWORD);
			State = 9517; Match(EQUAL);
			State = 9518; _localctx.encryption_password = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kill_statementContext : ParserRuleContext {
		public ITerminalNode KILL() { return GetToken(TSqlParser.KILL, 0); }
		public Kill_processContext kill_process() {
			return GetRuleContext<Kill_processContext>(0);
		}
		public Kill_query_notificationContext kill_query_notification() {
			return GetRuleContext<Kill_query_notificationContext>(0);
		}
		public Kill_stats_jobContext kill_stats_job() {
			return GetRuleContext<Kill_stats_jobContext>(0);
		}
		public Kill_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kill_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKill_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKill_statement(this);
		}
	}

	[RuleVersion(0)]
	public Kill_statementContext kill_statement() {
		Kill_statementContext _localctx = new Kill_statementContext(_ctx, State);
		EnterRule(_localctx, 746, RULE_kill_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9520; Match(KILL);
			State = 9524;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1268,_ctx) ) {
			case 1:
				{
				State = 9521; kill_process();
				}
				break;

			case 2:
				{
				State = 9522; kill_query_notification();
				}
				break;

			case 3:
				{
				State = 9523; kill_stats_job();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kill_processContext : ParserRuleContext {
		public IToken session_id;
		public ITerminalNode UOW() { return GetToken(TSqlParser.UOW, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STATUSONLY() { return GetToken(TSqlParser.STATUSONLY, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Kill_processContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kill_process; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKill_process(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKill_process(this);
		}
	}

	[RuleVersion(0)]
	public Kill_processContext kill_process() {
		Kill_processContext _localctx = new Kill_processContext(_ctx, State);
		EnterRule(_localctx, 748, RULE_kill_process);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9528;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1269,_ctx) ) {
			case 1:
				{
				State = 9526;
				_localctx.session_id = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==DECIMAL || _la==STRING) ) {
					_localctx.session_id = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				{
				State = 9527; Match(UOW);
				}
				break;
			}
			State = 9532;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1270,_ctx) ) {
			case 1:
				{
				State = 9530; Match(WITH);
				State = 9531; Match(STATUSONLY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kill_query_notificationContext : ParserRuleContext {
		public IToken subscription_id;
		public ITerminalNode QUERY() { return GetToken(TSqlParser.QUERY, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode SUBSCRIPTION() { return GetToken(TSqlParser.SUBSCRIPTION, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Kill_query_notificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kill_query_notification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKill_query_notification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKill_query_notification(this);
		}
	}

	[RuleVersion(0)]
	public Kill_query_notificationContext kill_query_notification() {
		Kill_query_notificationContext _localctx = new Kill_query_notificationContext(_ctx, State);
		EnterRule(_localctx, 750, RULE_kill_query_notification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9534; Match(QUERY);
			State = 9535; Match(NOTIFICATION);
			State = 9536; Match(SUBSCRIPTION);
			State = 9539;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1271,_ctx) ) {
			case 1:
				{
				State = 9537; Match(ALL);
				}
				break;

			case 2:
				{
				State = 9538; _localctx.subscription_id = Match(DECIMAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kill_stats_jobContext : ParserRuleContext {
		public IToken job_id;
		public ITerminalNode STATS() { return GetToken(TSqlParser.STATS, 0); }
		public ITerminalNode JOB() { return GetToken(TSqlParser.JOB, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Kill_stats_jobContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kill_stats_job; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKill_stats_job(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKill_stats_job(this);
		}
	}

	[RuleVersion(0)]
	public Kill_stats_jobContext kill_stats_job() {
		Kill_stats_jobContext _localctx = new Kill_stats_jobContext(_ctx, State);
		EnterRule(_localctx, 752, RULE_kill_stats_job);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9541; Match(STATS);
			State = 9542; Match(JOB);
			State = 9543; _localctx.job_id = Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statementContext : ParserRuleContext {
		public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		public Execute_bodyContext execute_body() {
			return GetRuleContext<Execute_bodyContext>(0);
		}
		public Execute_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_statement(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statementContext execute_statement() {
		Execute_statementContext _localctx = new Execute_statementContext(_ctx, State);
		EnterRule(_localctx, 754, RULE_execute_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9545; Match(EXECUTE);
			State = 9546; execute_body();
			State = 9548;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1272,_ctx) ) {
			case 1:
				{
				State = 9547; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_body_batchContext : ParserRuleContext {
		public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return GetRuleContext<Func_proc_name_server_database_schemaContext>(0);
		}
		public Execute_statement_argContext[] execute_statement_arg() {
			return GetRuleContexts<Execute_statement_argContext>();
		}
		public Execute_statement_argContext execute_statement_arg(int i) {
			return GetRuleContext<Execute_statement_argContext>(i);
		}
		public Execute_body_batchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_body_batch; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_body_batch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_body_batch(this);
		}
	}

	[RuleVersion(0)]
	public Execute_body_batchContext execute_body_batch() {
		Execute_body_batchContext _localctx = new Execute_body_batchContext(_ctx, State);
		EnterRule(_localctx, 756, RULE_execute_body_batch);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9550; func_proc_name_server_database_schema();
			State = 9559;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1274,_ctx) ) {
			case 1:
				{
				State = 9551; execute_statement_arg();
				State = 9556;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1273,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 9552; Match(COMMA);
						State = 9553; execute_statement_arg();
						}
						} 
					}
					State = 9558;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1273,_ctx);
				}
				}
				break;
			}
			State = 9562;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1275,_ctx) ) {
			case 1:
				{
				State = 9561; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_bodyContext : ParserRuleContext {
		public IToken return_status;
		public Id_Context linkedServer;
		public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return GetRuleContext<Func_proc_name_server_database_schemaContext>(0);
		}
		public Execute_var_stringContext[] execute_var_string() {
			return GetRuleContexts<Execute_var_stringContext>();
		}
		public Execute_var_stringContext execute_var_string(int i) {
			return GetRuleContext<Execute_var_stringContext>(i);
		}
		public Execute_statement_argContext execute_statement_arg() {
			return GetRuleContext<Execute_statement_argContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode AT_KEYWORD() { return GetToken(TSqlParser.AT_KEYWORD, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode CALLER() { return GetToken(TSqlParser.CALLER, 0); }
		public Execute_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_body(this);
		}
	}

	[RuleVersion(0)]
	public Execute_bodyContext execute_body() {
		Execute_bodyContext _localctx = new Execute_bodyContext(_ctx, State);
		EnterRule(_localctx, 758, RULE_execute_body);
		int _la;
		try {
			int _alt;
			State = 9602;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1283,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9566;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1276,_ctx) ) {
				case 1:
					{
					State = 9564; _localctx.return_status = Match(LOCAL_ID);
					State = 9565; Match(EQUAL);
					}
					break;
				}
				State = 9570;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1277,_ctx) ) {
				case 1:
					{
					State = 9568; func_proc_name_server_database_schema();
					}
					break;

				case 2:
					{
					State = 9569; execute_var_string();
					}
					break;
				}
				State = 9573;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1278,_ctx) ) {
				case 1:
					{
					State = 9572; execute_statement_arg();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9575; Match(LR_BRACKET);
				State = 9576; execute_var_string();
				State = 9581;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1279,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 9577; Match(COMMA);
						State = 9578; execute_var_string();
						}
						} 
					}
					State = 9583;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1279,_ctx);
				}
				State = 9584; Match(RR_BRACKET);
				State = 9589;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1280,_ctx) ) {
				case 1:
					{
					State = 9585; Match(AS);
					State = 9586;
					_la = _input.La(1);
					if ( !(_la==LOGIN || _la==USER) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 9587; Match(EQUAL);
					State = 9588; Match(STRING);
					}
					break;
				}
				State = 9593;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1281,_ctx) ) {
				case 1:
					{
					State = 9591; Match(AT_KEYWORD);
					State = 9592; _localctx.linkedServer = id_();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9595; Match(AS);
				State = 9600;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1282,_ctx) ) {
				case 1:
					{
					State = 9596;
					_la = _input.La(1);
					if ( !(_la==LOGIN || _la==USER) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 9597; Match(EQUAL);
					State = 9598; Match(STRING);
					}
					break;

				case 2:
					{
					State = 9599; Match(CALLER);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statement_argContext : ParserRuleContext {
		public Execute_statement_arg_unnamedContext execute_statement_arg_unnamed() {
			return GetRuleContext<Execute_statement_arg_unnamedContext>(0);
		}
		public Execute_statement_argContext[] execute_statement_arg() {
			return GetRuleContexts<Execute_statement_argContext>();
		}
		public Execute_statement_argContext execute_statement_arg(int i) {
			return GetRuleContext<Execute_statement_argContext>(i);
		}
		public Execute_statement_arg_namedContext[] execute_statement_arg_named() {
			return GetRuleContexts<Execute_statement_arg_namedContext>();
		}
		public Execute_statement_arg_namedContext execute_statement_arg_named(int i) {
			return GetRuleContext<Execute_statement_arg_namedContext>(i);
		}
		public Execute_statement_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_statement_arg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_statement_arg(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statement_argContext execute_statement_arg() {
		Execute_statement_argContext _localctx = new Execute_statement_argContext(_ctx, State);
		EnterRule(_localctx, 760, RULE_execute_statement_arg);
		try {
			int _alt;
			State = 9620;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1286,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9604; execute_statement_arg_unnamed();
				State = 9609;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1284,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 9605; Match(COMMA);
						State = 9606; execute_statement_arg();
						}
						} 
					}
					State = 9611;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1284,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9612; execute_statement_arg_named();
				State = 9617;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1285,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 9613; Match(COMMA);
						State = 9614; execute_statement_arg_named();
						}
						} 
					}
					State = 9619;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1285,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statement_arg_namedContext : ParserRuleContext {
		public IToken name;
		public Execute_parameterContext value;
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Execute_parameterContext execute_parameter() {
			return GetRuleContext<Execute_parameterContext>(0);
		}
		public Execute_statement_arg_namedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement_arg_named; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_statement_arg_named(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_statement_arg_named(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statement_arg_namedContext execute_statement_arg_named() {
		Execute_statement_arg_namedContext _localctx = new Execute_statement_arg_namedContext(_ctx, State);
		EnterRule(_localctx, 762, RULE_execute_statement_arg_named);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9622; _localctx.name = Match(LOCAL_ID);
			State = 9623; Match(EQUAL);
			State = 9624; _localctx.value = execute_parameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statement_arg_unnamedContext : ParserRuleContext {
		public Execute_parameterContext value;
		public Execute_parameterContext execute_parameter() {
			return GetRuleContext<Execute_parameterContext>(0);
		}
		public Execute_statement_arg_unnamedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement_arg_unnamed; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_statement_arg_unnamed(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_statement_arg_unnamed(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statement_arg_unnamedContext execute_statement_arg_unnamed() {
		Execute_statement_arg_unnamedContext _localctx = new Execute_statement_arg_unnamedContext(_ctx, State);
		EnterRule(_localctx, 764, RULE_execute_statement_arg_unnamed);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9626; _localctx.value = execute_parameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_parameterContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		public ITerminalNode OUT() { return GetToken(TSqlParser.OUT, 0); }
		public Execute_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_parameter(this);
		}
	}

	[RuleVersion(0)]
	public Execute_parameterContext execute_parameter() {
		Execute_parameterContext _localctx = new Execute_parameterContext(_ctx, State);
		EnterRule(_localctx, 766, RULE_execute_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9636;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1288,_ctx) ) {
			case 1:
				{
				State = 9628; constant();
				}
				break;

			case 2:
				{
				State = 9629; Match(LOCAL_ID);
				State = 9631;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1287,_ctx) ) {
				case 1:
					{
					State = 9630;
					_la = _input.La(1);
					if ( !(_la==OUT || _la==OUTPUT) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 9633; id_();
				}
				break;

			case 4:
				{
				State = 9634; Match(DEFAULT);
				}
				break;

			case 5:
				{
				State = 9635; Match(NULL_);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_var_stringContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Execute_var_stringContext execute_var_string() {
			return GetRuleContext<Execute_var_stringContext>(0);
		}
		public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		public ITerminalNode OUT() { return GetToken(TSqlParser.OUT, 0); }
		public Execute_var_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_var_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_var_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_var_string(this);
		}
	}

	[RuleVersion(0)]
	public Execute_var_stringContext execute_var_string() {
		Execute_var_stringContext _localctx = new Execute_var_stringContext(_ctx, State);
		EnterRule(_localctx, 768, RULE_execute_var_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9643;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1290,_ctx) ) {
			case 1:
				{
				State = 9638; Match(LOCAL_ID);
				State = 9640;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1289,_ctx) ) {
				case 1:
					{
					State = 9639;
					_la = _input.La(1);
					if ( !(_la==OUT || _la==OUTPUT) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 9642; Match(STRING);
				}
				break;
			}
			State = 9647;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1291,_ctx) ) {
			case 1:
				{
				State = 9645; Match(PLUS);
				State = 9646; execute_var_string();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Security_statementContext : ParserRuleContext {
		public Table_nameContext on_id;
		public Principal_idContext _principal_id;
		public IList<Principal_idContext> _to_principal = new List<Principal_idContext>();
		public Principal_idContext as_principal;
		public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public ITerminalNode[] GRANT() { return GetTokens(TSqlParser.GRANT); }
		public ITerminalNode GRANT(int i) {
			return GetToken(TSqlParser.GRANT, i);
		}
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public Principal_idContext[] principal_id() {
			return GetRuleContexts<Principal_idContext>();
		}
		public Principal_idContext principal_id(int i) {
			return GetRuleContext<Principal_idContext>(i);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Grant_permissionContext grant_permission() {
			return GetRuleContext<Grant_permissionContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode OPTION() { return GetToken(TSqlParser.OPTION, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode PRIVILEGES() { return GetToken(TSqlParser.PRIVILEGES, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Class_type_for_grantContext class_type_for_grant() {
			return GetRuleContext<Class_type_for_grantContext>(0);
		}
		public ITerminalNode REVERT() { return GetToken(TSqlParser.REVERT, 0); }
		public ITerminalNode COOKIE() { return GetToken(TSqlParser.COOKIE, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Open_keyContext open_key() {
			return GetRuleContext<Open_keyContext>(0);
		}
		public Close_keyContext close_key() {
			return GetRuleContext<Close_keyContext>(0);
		}
		public Create_keyContext create_key() {
			return GetRuleContext<Create_keyContext>(0);
		}
		public Create_certificateContext create_certificate() {
			return GetRuleContext<Create_certificateContext>(0);
		}
		public Security_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_security_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSecurity_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSecurity_statement(this);
		}
	}

	[RuleVersion(0)]
	public Security_statementContext security_statement() {
		Security_statementContext _localctx = new Security_statementContext(_ctx, State);
		EnterRule(_localctx, 770, RULE_security_statement);
		try {
			int _alt;
			State = 9711;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1304,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9649; execute_clause();
				State = 9651;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1292,_ctx) ) {
				case 1:
					{
					State = 9650; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9653; Match(GRANT);
				State = 9665;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1295,_ctx) ) {
				case 1:
					{
					State = 9654; Match(ALL);
					State = 9656;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1293,_ctx) ) {
					case 1:
						{
						State = 9655; Match(PRIVILEGES);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 9658; grant_permission();
					State = 9663;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1294,_ctx) ) {
					case 1:
						{
						State = 9659; Match(LR_BRACKET);
						State = 9660; column_name_list();
						State = 9661; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				State = 9674;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1297,_ctx) ) {
				case 1:
					{
					State = 9667; Match(ON);
					State = 9671;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1296,_ctx) ) {
					case 1:
						{
						State = 9668; class_type_for_grant();
						State = 9669; Match(DOUBLE_COLON);
						}
						break;
					}
					State = 9673; _localctx.on_id = table_name();
					}
					break;
				}
				State = 9676; Match(TO);
				State = 9677; _localctx._principal_id = principal_id();
				_localctx._to_principal.Add(_localctx._principal_id);
				State = 9682;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1298,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 9678; Match(COMMA);
						State = 9679; _localctx._principal_id = principal_id();
						_localctx._to_principal.Add(_localctx._principal_id);
						}
						} 
					}
					State = 9684;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1298,_ctx);
				}
				State = 9688;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1299,_ctx) ) {
				case 1:
					{
					State = 9685; Match(WITH);
					State = 9686; Match(GRANT);
					State = 9687; Match(OPTION);
					}
					break;
				}
				State = 9692;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1300,_ctx) ) {
				case 1:
					{
					State = 9690; Match(AS);
					State = 9691; _localctx.as_principal = principal_id();
					}
					break;
				}
				State = 9695;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1301,_ctx) ) {
				case 1:
					{
					State = 9694; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9697; Match(REVERT);
				State = 9702;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1302,_ctx) ) {
				case 1:
					{
					State = 9698; Match(WITH);
					State = 9699; Match(COOKIE);
					State = 9700; Match(EQUAL);
					State = 9701; Match(LOCAL_ID);
					}
					break;
				}
				State = 9705;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1303,_ctx) ) {
				case 1:
					{
					State = 9704; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9707; open_key();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9708; close_key();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9709; create_key();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9710; create_certificate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Principal_idContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode PUBLIC() { return GetToken(TSqlParser.PUBLIC, 0); }
		public Principal_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_principal_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrincipal_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrincipal_id(this);
		}
	}

	[RuleVersion(0)]
	public Principal_idContext principal_id() {
		Principal_idContext _localctx = new Principal_idContext(_ctx, State);
		EnterRule(_localctx, 772, RULE_principal_id);
		try {
			State = 9715;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1305,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9713; id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9714; Match(PUBLIC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_certificateContext : ParserRuleContext {
		public Id_Context certificate_name;
		public Id_Context user_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Existing_keysContext existing_keys() {
			return GetRuleContext<Existing_keysContext>(0);
		}
		public Generate_new_keysContext generate_new_keys() {
			return GetRuleContext<Generate_new_keysContext>(0);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode ACTIVE() { return GetToken(TSqlParser.ACTIVE, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode DIALOG() { return GetToken(TSqlParser.DIALOG, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Create_certificateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_certificate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_certificate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_certificate(this);
		}
	}

	[RuleVersion(0)]
	public Create_certificateContext create_certificate() {
		Create_certificateContext _localctx = new Create_certificateContext(_ctx, State);
		EnterRule(_localctx, 774, RULE_create_certificate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9717; Match(CREATE);
			State = 9718; Match(CERTIFICATE);
			State = 9719; _localctx.certificate_name = id_();
			State = 9722;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1306,_ctx) ) {
			case 1:
				{
				State = 9720; Match(AUTHORIZATION);
				State = 9721; _localctx.user_name = id_();
				}
				break;
			}
			State = 9727;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1307,_ctx) ) {
			case 1:
				{
				State = 9724; Match(FROM);
				State = 9725; existing_keys();
				}
				break;

			case 2:
				{
				State = 9726; generate_new_keys();
				}
				break;
			}
			State = 9735;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1308,_ctx) ) {
			case 1:
				{
				State = 9729; Match(ACTIVE);
				State = 9730; Match(FOR);
				State = 9731; Match(BEGIN);
				State = 9732; Match(DIALOG);
				State = 9733; Match(EQUAL);
				State = 9734; on_off();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Existing_keysContext : ParserRuleContext {
		public Id_Context assembly_name;
		public IToken path_to_file;
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode EXECUTABLE() { return GetToken(TSqlParser.EXECUTABLE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Private_key_optionsContext private_key_options() {
			return GetRuleContext<Private_key_optionsContext>(0);
		}
		public Existing_keysContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_existing_keys; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExisting_keys(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExisting_keys(this);
		}
	}

	[RuleVersion(0)]
	public Existing_keysContext existing_keys() {
		Existing_keysContext _localctx = new Existing_keysContext(_ctx, State);
		EnterRule(_localctx, 776, RULE_existing_keys);
		try {
			State = 9754;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1311,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9737; Match(ASSEMBLY);
				State = 9738; _localctx.assembly_name = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9740;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1309,_ctx) ) {
				case 1:
					{
					State = 9739; Match(EXECUTABLE);
					}
					break;
				}
				State = 9742; Match(FILE);
				State = 9743; Match(EQUAL);
				State = 9744; _localctx.path_to_file = Match(STRING);
				State = 9752;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1310,_ctx) ) {
				case 1:
					{
					State = 9745; Match(WITH);
					State = 9746; Match(PRIVATE);
					State = 9747; Match(KEY);
					State = 9748; Match(LR_BRACKET);
					State = 9749; private_key_options();
					State = 9750; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Private_key_optionsContext : ParserRuleContext {
		public IToken path;
		public IToken password;
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode DECRYPTION() { return GetToken(TSqlParser.DECRYPTION, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public Private_key_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_private_key_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrivate_key_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrivate_key_options(this);
		}
	}

	[RuleVersion(0)]
	public Private_key_optionsContext private_key_options() {
		Private_key_optionsContext _localctx = new Private_key_optionsContext(_ctx, State);
		EnterRule(_localctx, 778, RULE_private_key_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9756;
			_la = _input.La(1);
			if ( !(_la==FILE || _la==BINARY) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 9757; Match(EQUAL);
			State = 9758; _localctx.path = Match(STRING);
			State = 9765;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1312,_ctx) ) {
			case 1:
				{
				State = 9759; Match(COMMA);
				State = 9760;
				_la = _input.La(1);
				if ( !(_la==DECRYPTION || _la==ENCRYPTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 9761; Match(BY);
				State = 9762; Match(PASSWORD);
				State = 9763; Match(EQUAL);
				State = 9764; _localctx.password = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generate_new_keysContext : ParserRuleContext {
		public IToken password;
		public IToken certificate_subject_name;
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode SUBJECT() { return GetToken(TSqlParser.SUBJECT, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public Date_optionsContext[] date_options() {
			return GetRuleContexts<Date_optionsContext>();
		}
		public Date_optionsContext date_options(int i) {
			return GetRuleContext<Date_optionsContext>(i);
		}
		public Generate_new_keysContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generate_new_keys; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGenerate_new_keys(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGenerate_new_keys(this);
		}
	}

	[RuleVersion(0)]
	public Generate_new_keysContext generate_new_keys() {
		Generate_new_keysContext _localctx = new Generate_new_keysContext(_ctx, State);
		EnterRule(_localctx, 780, RULE_generate_new_keys);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9772;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1313,_ctx) ) {
			case 1:
				{
				State = 9767; Match(ENCRYPTION);
				State = 9768; Match(BY);
				State = 9769; Match(PASSWORD);
				State = 9770; Match(EQUAL);
				State = 9771; _localctx.password = Match(STRING);
				}
				break;
			}
			State = 9774; Match(WITH);
			State = 9775; Match(SUBJECT);
			State = 9776; Match(EQUAL);
			State = 9777; _localctx.certificate_subject_name = Match(STRING);
			State = 9782;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1314,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 9778; Match(COMMA);
					State = 9779; date_options();
					}
					} 
				}
				State = 9784;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1314,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_optionsContext : ParserRuleContext {
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode START_DATE() { return GetToken(TSqlParser.START_DATE, 0); }
		public ITerminalNode EXPIRY_DATE() { return GetToken(TSqlParser.EXPIRY_DATE, 0); }
		public Date_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDate_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDate_options(this);
		}
	}

	[RuleVersion(0)]
	public Date_optionsContext date_options() {
		Date_optionsContext _localctx = new Date_optionsContext(_ctx, State);
		EnterRule(_localctx, 782, RULE_date_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9785;
			_la = _input.La(1);
			if ( !(_la==EXPIRY_DATE || _la==START_DATE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 9786; Match(EQUAL);
			State = 9787; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public IToken password;
		public ITerminalNode OPEN() { return GetToken(TSqlParser.OPEN, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode DECRYPTION() { return GetToken(TSqlParser.DECRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public Decryption_mechanismContext decryption_mechanism() {
			return GetRuleContext<Decryption_mechanismContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Open_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpen_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpen_key(this);
		}
	}

	[RuleVersion(0)]
	public Open_keyContext open_key() {
		Open_keyContext _localctx = new Open_keyContext(_ctx, State);
		EnterRule(_localctx, 784, RULE_open_key);
		try {
			State = 9805;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1315,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9789; Match(OPEN);
				State = 9790; Match(SYMMETRIC);
				State = 9791; Match(KEY);
				State = 9792; _localctx.key_name = id_();
				State = 9793; Match(DECRYPTION);
				State = 9794; Match(BY);
				State = 9795; decryption_mechanism();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9797; Match(OPEN);
				State = 9798; Match(MASTER);
				State = 9799; Match(KEY);
				State = 9800; Match(DECRYPTION);
				State = 9801; Match(BY);
				State = 9802; Match(PASSWORD);
				State = 9803; Match(EQUAL);
				State = 9804; _localctx.password = Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Close_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public ITerminalNode CLOSE() { return GetToken(TSqlParser.CLOSE, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode KEYS() { return GetToken(TSqlParser.KEYS, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public Close_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_close_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClose_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClose_key(this);
		}
	}

	[RuleVersion(0)]
	public Close_keyContext close_key() {
		Close_keyContext _localctx = new Close_keyContext(_ctx, State);
		EnterRule(_localctx, 786, RULE_close_key);
		try {
			State = 9818;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1316,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9807; Match(CLOSE);
				State = 9808; Match(SYMMETRIC);
				State = 9809; Match(KEY);
				State = 9810; _localctx.key_name = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9811; Match(CLOSE);
				State = 9812; Match(ALL);
				State = 9813; Match(SYMMETRIC);
				State = 9814; Match(KEYS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9815; Match(CLOSE);
				State = 9816; Match(MASTER);
				State = 9817; Match(KEY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_keyContext : ParserRuleContext {
		public IToken password;
		public Id_Context key_name;
		public Id_Context user_name;
		public Id_Context provider_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Key_optionsContext[] key_options() {
			return GetRuleContexts<Key_optionsContext>();
		}
		public Key_optionsContext key_options(int i) {
			return GetRuleContext<Key_optionsContext>(i);
		}
		public Encryption_mechanismContext[] encryption_mechanism() {
			return GetRuleContexts<Encryption_mechanismContext>();
		}
		public Encryption_mechanismContext encryption_mechanism(int i) {
			return GetRuleContext<Encryption_mechanismContext>(i);
		}
		public Create_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_key(this);
		}
	}

	[RuleVersion(0)]
	public Create_keyContext create_key() {
		Create_keyContext _localctx = new Create_keyContext(_ctx, State);
		EnterRule(_localctx, 788, RULE_create_key);
		try {
			int _alt;
			State = 9855;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1322,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9820; Match(CREATE);
				State = 9821; Match(MASTER);
				State = 9822; Match(KEY);
				State = 9823; Match(ENCRYPTION);
				State = 9824; Match(BY);
				State = 9825; Match(PASSWORD);
				State = 9826; Match(EQUAL);
				State = 9827; _localctx.password = Match(STRING);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9828; Match(CREATE);
				State = 9829; Match(SYMMETRIC);
				State = 9830; Match(KEY);
				State = 9831; _localctx.key_name = id_();
				State = 9834;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1317,_ctx) ) {
				case 1:
					{
					State = 9832; Match(AUTHORIZATION);
					State = 9833; _localctx.user_name = id_();
					}
					break;
				}
				State = 9839;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1318,_ctx) ) {
				case 1:
					{
					State = 9836; Match(FROM);
					State = 9837; Match(PROVIDER);
					State = 9838; _localctx.provider_name = id_();
					}
					break;
				}
				State = 9841; Match(WITH);
				State = 9851;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 9846;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1319,_ctx) ) {
						case 1:
							{
							State = 9842; key_options();
							}
							break;

						case 2:
							{
							State = 9843; Match(ENCRYPTION);
							State = 9844; Match(BY);
							State = 9845; encryption_mechanism();
							}
							break;
						}
						State = 9849;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1320,_ctx) ) {
						case 1:
							{
							State = 9848; Match(COMMA);
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 9853;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1321,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_optionsContext : ParserRuleContext {
		public IToken pass_phrase;
		public IToken identity_phrase;
		public IToken key_name_in_provider;
		public ITerminalNode KEY_SOURCE() { return GetToken(TSqlParser.KEY_SOURCE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public AlgorithmContext algorithm() {
			return GetRuleContext<AlgorithmContext>(0);
		}
		public ITerminalNode IDENTITY_VALUE() { return GetToken(TSqlParser.IDENTITY_VALUE, 0); }
		public ITerminalNode PROVIDER_KEY_NAME() { return GetToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public ITerminalNode CREATION_DISPOSITION() { return GetToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public ITerminalNode CREATE_NEW() { return GetToken(TSqlParser.CREATE_NEW, 0); }
		public ITerminalNode OPEN_EXISTING() { return GetToken(TSqlParser.OPEN_EXISTING, 0); }
		public Key_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKey_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKey_options(this);
		}
	}

	[RuleVersion(0)]
	public Key_optionsContext key_options() {
		Key_optionsContext _localctx = new Key_optionsContext(_ctx, State);
		EnterRule(_localctx, 790, RULE_key_options);
		int _la;
		try {
			State = 9872;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1323,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9857; Match(KEY_SOURCE);
				State = 9858; Match(EQUAL);
				State = 9859; _localctx.pass_phrase = Match(STRING);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9860; Match(ALGORITHM);
				State = 9861; Match(EQUAL);
				State = 9862; algorithm();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9863; Match(IDENTITY_VALUE);
				State = 9864; Match(EQUAL);
				State = 9865; _localctx.identity_phrase = Match(STRING);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9866; Match(PROVIDER_KEY_NAME);
				State = 9867; Match(EQUAL);
				State = 9868; _localctx.key_name_in_provider = Match(STRING);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9869; Match(CREATION_DISPOSITION);
				State = 9870; Match(EQUAL);
				State = 9871;
				_la = _input.La(1);
				if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlgorithmContext : ParserRuleContext {
		public ITerminalNode DES() { return GetToken(TSqlParser.DES, 0); }
		public ITerminalNode TRIPLE_DES() { return GetToken(TSqlParser.TRIPLE_DES, 0); }
		public ITerminalNode TRIPLE_DES_3KEY() { return GetToken(TSqlParser.TRIPLE_DES_3KEY, 0); }
		public ITerminalNode RC2() { return GetToken(TSqlParser.RC2, 0); }
		public ITerminalNode RC4() { return GetToken(TSqlParser.RC4, 0); }
		public ITerminalNode RC4_128() { return GetToken(TSqlParser.RC4_128, 0); }
		public ITerminalNode DESX() { return GetToken(TSqlParser.DESX, 0); }
		public ITerminalNode AES_128() { return GetToken(TSqlParser.AES_128, 0); }
		public ITerminalNode AES_192() { return GetToken(TSqlParser.AES_192, 0); }
		public ITerminalNode AES_256() { return GetToken(TSqlParser.AES_256, 0); }
		public AlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_algorithm; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlgorithm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlgorithm(this);
		}
	}

	[RuleVersion(0)]
	public AlgorithmContext algorithm() {
		AlgorithmContext _localctx = new AlgorithmContext(_ctx, State);
		EnterRule(_localctx, 792, RULE_algorithm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9874;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AES_128) | (1L << AES_192) | (1L << AES_256))) != 0) || _la==DES || _la==DESX || ((((_la - 763)) & ~0x3f) == 0 && ((1L << (_la - 763)) & ((1L << (RC2 - 763)) | (1L << (RC4 - 763)) | (1L << (RC4_128 - 763)))) != 0) || _la==TRIPLE_DES || _la==TRIPLE_DES_3KEY) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Encryption_mechanismContext : ParserRuleContext {
		public Id_Context certificate_name;
		public Id_Context asym_key_name;
		public Id_Context decrypting_Key_name;
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Encryption_mechanismContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encryption_mechanism; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEncryption_mechanism(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEncryption_mechanism(this);
		}
	}

	[RuleVersion(0)]
	public Encryption_mechanismContext encryption_mechanism() {
		Encryption_mechanismContext _localctx = new Encryption_mechanismContext(_ctx, State);
		EnterRule(_localctx, 794, RULE_encryption_mechanism);
		try {
			State = 9887;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1324,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9876; Match(CERTIFICATE);
				State = 9877; _localctx.certificate_name = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9878; Match(ASYMMETRIC);
				State = 9879; Match(KEY);
				State = 9880; _localctx.asym_key_name = id_();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9881; Match(SYMMETRIC);
				State = 9882; Match(KEY);
				State = 9883; _localctx.decrypting_Key_name = id_();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9884; Match(PASSWORD);
				State = 9885; Match(EQUAL);
				State = 9886; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decryption_mechanismContext : ParserRuleContext {
		public Id_Context certificate_name;
		public Id_Context asym_key_name;
		public Id_Context decrypting_Key_name;
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public Decryption_mechanismContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decryption_mechanism; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDecryption_mechanism(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDecryption_mechanism(this);
		}
	}

	[RuleVersion(0)]
	public Decryption_mechanismContext decryption_mechanism() {
		Decryption_mechanismContext _localctx = new Decryption_mechanismContext(_ctx, State);
		EnterRule(_localctx, 796, RULE_decryption_mechanism);
		try {
			State = 9912;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1327,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9889; Match(CERTIFICATE);
				State = 9890; _localctx.certificate_name = id_();
				State = 9895;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1325,_ctx) ) {
				case 1:
					{
					State = 9891; Match(WITH);
					State = 9892; Match(PASSWORD);
					State = 9893; Match(EQUAL);
					State = 9894; Match(STRING);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9897; Match(ASYMMETRIC);
				State = 9898; Match(KEY);
				State = 9899; _localctx.asym_key_name = id_();
				State = 9904;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1326,_ctx) ) {
				case 1:
					{
					State = 9900; Match(WITH);
					State = 9901; Match(PASSWORD);
					State = 9902; Match(EQUAL);
					State = 9903; Match(STRING);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9906; Match(SYMMETRIC);
				State = 9907; Match(KEY);
				State = 9908; _localctx.decrypting_Key_name = id_();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9909; Match(PASSWORD);
				State = 9910; Match(EQUAL);
				State = 9911; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grant_permissionContext : ParserRuleContext {
		public ITerminalNode ADMINISTER() { return GetToken(TSqlParser.ADMINISTER, 0); }
		public ITerminalNode BULK() { return GetToken(TSqlParser.BULK, 0); }
		public ITerminalNode OPERATIONS() { return GetToken(TSqlParser.OPERATIONS, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ANY() { return GetToken(TSqlParser.ANY, 0); }
		public ITerminalNode RESOURCES() { return GetToken(TSqlParser.RESOURCES, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode SETTINGS() { return GetToken(TSqlParser.SETTINGS, 0); }
		public ITerminalNode TRACE() { return GetToken(TSqlParser.TRACE, 0); }
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode CONNECTION() { return GetToken(TSqlParser.CONNECTION, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode DATASPACE() { return GetToken(TSqlParser.DATASPACE, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public ITerminalNode LINKED() { return GetToken(TSqlParser.LINKED, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode MASK() { return GetToken(TSqlParser.MASK, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode SECURITY() { return GetToken(TSqlParser.SECURITY, 0); }
		public ITerminalNode POLICY() { return GetToken(TSqlParser.POLICY, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode FORMAT() { return GetToken(TSqlParser.FORMAT, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public ITerminalNode DDL() { return GetToken(TSqlParser.DDL, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public ITerminalNode SCOPED() { return GetToken(TSqlParser.SCOPED, 0); }
		public ITerminalNode CONFIGURATION() { return GetToken(TSqlParser.CONFIGURATION, 0); }
		public ITerminalNode AUTHENTICATE() { return GetToken(TSqlParser.AUTHENTICATE, 0); }
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode CHECKPOINT() { return GetToken(TSqlParser.CHECKPOINT, 0); }
		public ITerminalNode CONNECT() { return GetToken(TSqlParser.CONNECT, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode SQL() { return GetToken(TSqlParser.SQL, 0); }
		public ITerminalNode CONTROL() { return GetToken(TSqlParser.CONTROL, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode AGGREGATE() { return GetToken(TSqlParser.AGGREGATE, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(TSqlParser.PROCEDURE, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public ITerminalNode RULE() { return GetToken(TSqlParser.RULE, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		public ITerminalNode SYNONYM() { return GetToken(TSqlParser.SYNONYM, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public ITerminalNode VIEW() { return GetToken(TSqlParser.VIEW, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		public ITerminalNode SCRIPT() { return GetToken(TSqlParser.SCRIPT, 0); }
		public ITerminalNode ACCESS() { return GetToken(TSqlParser.ACCESS, 0); }
		public ITerminalNode IMPERSONATE() { return GetToken(TSqlParser.IMPERSONATE, 0); }
		public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		public ITerminalNode KILL() { return GetToken(TSqlParser.KILL, 0); }
		public ITerminalNode RECEIVE() { return GetToken(TSqlParser.RECEIVE, 0); }
		public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		public ITerminalNode SELECT() { return GetToken(TSqlParser.SELECT, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode SECURABLES() { return GetToken(TSqlParser.SECURABLES, 0); }
		public ITerminalNode SEND() { return GetToken(TSqlParser.SEND, 0); }
		public ITerminalNode SHOWPLAN() { return GetToken(TSqlParser.SHOWPLAN, 0); }
		public ITerminalNode SHUTDOWN() { return GetToken(TSqlParser.SHUTDOWN, 0); }
		public ITerminalNode SUBSCRIBE() { return GetToken(TSqlParser.SUBSCRIBE, 0); }
		public ITerminalNode QUERY() { return GetToken(TSqlParser.QUERY, 0); }
		public ITerminalNode NOTIFICATIONS() { return GetToken(TSqlParser.NOTIFICATIONS, 0); }
		public ITerminalNode TAKE() { return GetToken(TSqlParser.TAKE, 0); }
		public ITerminalNode OWNERSHIP() { return GetToken(TSqlParser.OWNERSHIP, 0); }
		public ITerminalNode UNMASK() { return GetToken(TSqlParser.UNMASK, 0); }
		public ITerminalNode UNSAFE() { return GetToken(TSqlParser.UNSAFE, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode CHANGE() { return GetToken(TSqlParser.CHANGE, 0); }
		public ITerminalNode TRACKING() { return GetToken(TSqlParser.TRACKING, 0); }
		public ITerminalNode DEFINITION() { return GetToken(TSqlParser.DEFINITION, 0); }
		public Grant_permissionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grant_permission; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGrant_permission(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGrant_permission(this);
		}
	}

	[RuleVersion(0)]
	public Grant_permissionContext grant_permission() {
		Grant_permissionContext _localctx = new Grant_permissionContext(_ctx, State);
		EnterRule(_localctx, 798, RULE_grant_permission);
		int _la;
		try {
			State = 10127;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1344,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9914; Match(ADMINISTER);
				State = 9920;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1328,_ctx) ) {
				case 1:
					{
					State = 9915; Match(BULK);
					State = 9916; Match(OPERATIONS);
					}
					break;

				case 2:
					{
					State = 9917; Match(DATABASE);
					State = 9918; Match(BULK);
					State = 9919; Match(OPERATIONS);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9922; Match(ALTER);
				State = 9993;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1333,_ctx) ) {
				case 1:
					{
					State = 9923; Match(ANY);
					State = 9986;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1332,_ctx) ) {
					case 1:
						{
						State = 9924; Match(APPLICATION);
						State = 9925; Match(ROLE);
						}
						break;

					case 2:
						{
						State = 9926; Match(ASSEMBLY);
						}
						break;

					case 3:
						{
						State = 9927; Match(ASYMMETRIC);
						State = 9928; Match(KEY);
						}
						break;

					case 4:
						{
						State = 9929; Match(AVAILABILITY);
						State = 9930; Match(GROUP);
						}
						break;

					case 5:
						{
						State = 9931; Match(CERTIFICATE);
						}
						break;

					case 6:
						{
						State = 9932; Match(COLUMN);
						State = 9937;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1329,_ctx) ) {
						case 1:
							{
							State = 9933; Match(ENCRYPTION);
							State = 9934; Match(KEY);
							}
							break;

						case 2:
							{
							State = 9935; Match(MASTER);
							State = 9936; Match(KEY);
							}
							break;
						}
						}
						break;

					case 7:
						{
						State = 9939; Match(CONNECTION);
						}
						break;

					case 8:
						{
						State = 9940; Match(CONTRACT);
						}
						break;

					case 9:
						{
						State = 9941; Match(CREDENTIAL);
						}
						break;

					case 10:
						{
						State = 9942; Match(DATABASE);
						State = 9950;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1330,_ctx) ) {
						case 1:
							{
							State = 9943; Match(AUDIT);
							}
							break;

						case 2:
							{
							State = 9944; Match(DDL);
							State = 9945; Match(TRIGGER);
							}
							break;

						case 3:
							{
							State = 9946; Match(EVENT);
							State = 9947;
							_la = _input.La(1);
							if ( !(_la==NOTIFICATION || _la==SESSION) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 4:
							{
							State = 9948; Match(SCOPED);
							State = 9949; Match(CONFIGURATION);
							}
							break;
						}
						}
						break;

					case 11:
						{
						State = 9952; Match(DATASPACE);
						}
						break;

					case 12:
						{
						State = 9953; Match(ENDPOINT);
						}
						break;

					case 13:
						{
						State = 9954; Match(EVENT);
						State = 9955;
						_la = _input.La(1);
						if ( !(_la==NOTIFICATION || _la==SESSION) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 14:
						{
						State = 9956; Match(EXTERNAL);
						State = 9962;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1331,_ctx) ) {
						case 1:
							{
							State = 9957; Match(DATA);
							State = 9958; Match(SOURCE);
							}
							break;

						case 2:
							{
							State = 9959; Match(FILE);
							State = 9960; Match(FORMAT);
							}
							break;

						case 3:
							{
							State = 9961; Match(LIBRARY);
							}
							break;
						}
						}
						break;

					case 15:
						{
						State = 9964; Match(FULLTEXT);
						State = 9965; Match(CATALOG);
						}
						break;

					case 16:
						{
						State = 9966; Match(LINKED);
						State = 9967; Match(SERVER);
						}
						break;

					case 17:
						{
						State = 9968; Match(LOGIN);
						}
						break;

					case 18:
						{
						State = 9969; Match(MASK);
						}
						break;

					case 19:
						{
						State = 9970; Match(MESSAGE);
						State = 9971; Match(TYPE);
						}
						break;

					case 20:
						{
						State = 9972; Match(REMOTE);
						State = 9973; Match(SERVICE);
						State = 9974; Match(BINDING);
						}
						break;

					case 21:
						{
						State = 9975; Match(ROLE);
						}
						break;

					case 22:
						{
						State = 9976; Match(ROUTE);
						}
						break;

					case 23:
						{
						State = 9977; Match(SCHEMA);
						}
						break;

					case 24:
						{
						State = 9978; Match(SECURITY);
						State = 9979; Match(POLICY);
						}
						break;

					case 25:
						{
						State = 9980; Match(SERVER);
						State = 9981;
						_la = _input.La(1);
						if ( !(_la==AUDIT || _la==ROLE) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 26:
						{
						State = 9982; Match(SERVICE);
						}
						break;

					case 27:
						{
						State = 9983; Match(SYMMETRIC);
						State = 9984; Match(KEY);
						}
						break;

					case 28:
						{
						State = 9985; Match(USER);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 9988; Match(RESOURCES);
					}
					break;

				case 3:
					{
					State = 9989; Match(SERVER);
					State = 9990; Match(STATE);
					}
					break;

				case 4:
					{
					State = 9991; Match(SETTINGS);
					}
					break;

				case 5:
					{
					State = 9992; Match(TRACE);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9995; Match(AUTHENTICATE);
				State = 9997;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1334,_ctx) ) {
				case 1:
					{
					State = 9996; Match(SERVER);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9999; Match(BACKUP);
				State = 10000;
				_la = _input.La(1);
				if ( !(_la==DATABASE || _la==LOG) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10001; Match(CHECKPOINT);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10002; Match(CONNECT);
				State = 10007;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1335,_ctx) ) {
				case 1:
					{
					State = 10003; Match(ANY);
					State = 10004; Match(DATABASE);
					}
					break;

				case 2:
					{
					State = 10005; Match(REPLICATION);
					}
					break;

				case 3:
					{
					State = 10006; Match(SQL);
					}
					break;
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10009; Match(CONTROL);
				State = 10011;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1336,_ctx) ) {
				case 1:
					{
					State = 10010; Match(SERVER);
					}
					break;
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10013; Match(CREATE);
				State = 10067;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1338,_ctx) ) {
				case 1:
					{
					State = 10014; Match(AGGREGATE);
					}
					break;

				case 2:
					{
					State = 10015; Match(ANY);
					State = 10016; Match(DATABASE);
					}
					break;

				case 3:
					{
					State = 10017; Match(ASSEMBLY);
					}
					break;

				case 4:
					{
					State = 10018; Match(ASYMMETRIC);
					State = 10019; Match(KEY);
					}
					break;

				case 5:
					{
					State = 10020; Match(AVAILABILITY);
					State = 10021; Match(GROUP);
					}
					break;

				case 6:
					{
					State = 10022; Match(CERTIFICATE);
					}
					break;

				case 7:
					{
					State = 10023; Match(CONTRACT);
					}
					break;

				case 8:
					{
					State = 10024; Match(DATABASE);
					State = 10028;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1337,_ctx) ) {
					case 1:
						{
						State = 10025; Match(DDL);
						State = 10026; Match(EVENT);
						State = 10027; Match(NOTIFICATION);
						}
						break;
					}
					}
					break;

				case 9:
					{
					State = 10030; Match(DDL);
					State = 10031; Match(EVENT);
					State = 10032; Match(NOTIFICATION);
					}
					break;

				case 10:
					{
					State = 10033; Match(DEFAULT);
					}
					break;

				case 11:
					{
					State = 10034; Match(ENDPOINT);
					}
					break;

				case 12:
					{
					State = 10035; Match(EXTERNAL);
					State = 10036; Match(LIBRARY);
					}
					break;

				case 13:
					{
					State = 10037; Match(FULLTEXT);
					State = 10038; Match(CATALOG);
					}
					break;

				case 14:
					{
					State = 10039; Match(FUNCTION);
					}
					break;

				case 15:
					{
					State = 10040; Match(MESSAGE);
					State = 10041; Match(TYPE);
					}
					break;

				case 16:
					{
					State = 10042; Match(PROCEDURE);
					}
					break;

				case 17:
					{
					State = 10043; Match(QUEUE);
					}
					break;

				case 18:
					{
					State = 10044; Match(REMOTE);
					State = 10045; Match(SERVICE);
					State = 10046; Match(BINDING);
					}
					break;

				case 19:
					{
					State = 10047; Match(ROLE);
					}
					break;

				case 20:
					{
					State = 10048; Match(ROUTE);
					}
					break;

				case 21:
					{
					State = 10049; Match(RULE);
					}
					break;

				case 22:
					{
					State = 10050; Match(SCHEMA);
					}
					break;

				case 23:
					{
					State = 10051; Match(SEQUENCE);
					}
					break;

				case 24:
					{
					State = 10052; Match(SERVER);
					State = 10053; Match(ROLE);
					}
					break;

				case 25:
					{
					State = 10054; Match(SERVICE);
					}
					break;

				case 26:
					{
					State = 10055; Match(SYMMETRIC);
					State = 10056; Match(KEY);
					}
					break;

				case 27:
					{
					State = 10057; Match(SYNONYM);
					}
					break;

				case 28:
					{
					State = 10058; Match(TABLE);
					}
					break;

				case 29:
					{
					State = 10059; Match(TRACE);
					State = 10060; Match(EVENT);
					State = 10061; Match(NOTIFICATION);
					}
					break;

				case 30:
					{
					State = 10062; Match(TYPE);
					}
					break;

				case 31:
					{
					State = 10063; Match(VIEW);
					}
					break;

				case 32:
					{
					State = 10064; Match(XML);
					State = 10065; Match(SCHEMA);
					State = 10066; Match(COLLECTION);
					}
					break;
				}
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 10069; Match(DELETE);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 10070; Match(EXECUTE);
				State = 10074;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1339,_ctx) ) {
				case 1:
					{
					State = 10071; Match(ANY);
					State = 10072; Match(EXTERNAL);
					State = 10073; Match(SCRIPT);
					}
					break;
				}
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 10076; Match(EXTERNAL);
				State = 10077; Match(ACCESS);
				State = 10078; Match(ASSEMBLY);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 10079; Match(IMPERSONATE);
				State = 10082;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1340,_ctx) ) {
				case 1:
					{
					State = 10080; Match(ANY);
					State = 10081; Match(LOGIN);
					}
					break;
				}
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 10084; Match(INSERT);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 10085; Match(KILL);
				State = 10086; Match(DATABASE);
				State = 10087; Match(CONNECTION);
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 10088; Match(RECEIVE);
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 10089; Match(REFERENCES);
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 10090; Match(SELECT);
				State = 10094;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1341,_ctx) ) {
				case 1:
					{
					State = 10091; Match(ALL);
					State = 10092; Match(USER);
					State = 10093; Match(SECURABLES);
					}
					break;
				}
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 10096; Match(SEND);
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 10097; Match(SHOWPLAN);
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 10098; Match(SHUTDOWN);
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 10099; Match(SUBSCRIBE);
				State = 10100; Match(QUERY);
				State = 10101; Match(NOTIFICATIONS);
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 10102; Match(TAKE);
				State = 10103; Match(OWNERSHIP);
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 10104; Match(UNMASK);
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 10105; Match(UNSAFE);
				State = 10106; Match(ASSEMBLY);
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 10107; Match(UPDATE);
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 10108; Match(VIEW);
				State = 10125;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1343,_ctx) ) {
				case 1:
					{
					State = 10109; Match(ANY);
					State = 10116;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1342,_ctx) ) {
					case 1:
						{
						State = 10110; Match(DATABASE);
						}
						break;

					case 2:
						{
						State = 10111; Match(DEFINITION);
						}
						break;

					case 3:
						{
						State = 10112; Match(COLUMN);
						State = 10113;
						_la = _input.La(1);
						if ( !(_la==ENCRYPTION || _la==MASTER) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 10114; Match(KEY);
						State = 10115; Match(DEFINITION);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 10118; Match(CHANGE);
					State = 10119; Match(TRACKING);
					}
					break;

				case 3:
					{
					State = 10120; Match(DATABASE);
					State = 10121; Match(STATE);
					}
					break;

				case 4:
					{
					State = 10122; Match(DEFINITION);
					}
					break;

				case 5:
					{
					State = 10123; Match(SERVER);
					State = 10124; Match(STATE);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_statementContext : ParserRuleContext {
		public Id_Context member_name;
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public ITerminalNode CURSOR() { return GetToken(TSqlParser.CURSOR, 0); }
		public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return GetRuleContext<Declare_set_cursor_commonContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode READ() { return GetToken(TSqlParser.READ, 0); }
		public ITerminalNode ONLY() { return GetToken(TSqlParser.ONLY, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Set_specialContext set_special() {
			return GetRuleContext<Set_specialContext>(0);
		}
		public Set_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSet_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSet_statement(this);
		}
	}

	[RuleVersion(0)]
	public Set_statementContext set_statement() {
		Set_statementContext _localctx = new Set_statementContext(_ctx, State);
		EnterRule(_localctx, 800, RULE_set_statement);
		try {
			State = 10160;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1349,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10129; Match(SET);
				State = 10130; Match(LOCAL_ID);
				State = 10133;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1345,_ctx) ) {
				case 1:
					{
					State = 10131; Match(DOT);
					State = 10132; _localctx.member_name = id_();
					}
					break;
				}
				State = 10135; Match(EQUAL);
				State = 10136; expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10137; Match(SET);
				State = 10138; Match(LOCAL_ID);
				State = 10139; assignment_operator();
				State = 10140; expression(0);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10142; Match(SET);
				State = 10143; Match(LOCAL_ID);
				State = 10144; Match(EQUAL);
				State = 10145; Match(CURSOR);
				State = 10146; declare_set_cursor_common();
				State = 10157;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1348,_ctx) ) {
				case 1:
					{
					State = 10147; Match(FOR);
					State = 10155;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1347,_ctx) ) {
					case 1:
						{
						State = 10148; Match(READ);
						State = 10149; Match(ONLY);
						}
						break;

					case 2:
						{
						State = 10150; Match(UPDATE);
						State = 10153;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1346,_ctx) ) {
						case 1:
							{
							State = 10151; Match(OF);
							State = 10152; column_name_list();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10159; set_special();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_statementContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode DISTRIBUTED() { return GetToken(TSqlParser.DISTRIBUTED, 0); }
		public ITerminalNode TRAN() { return GetToken(TSqlParser.TRAN, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(TSqlParser.TRANSACTION, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode MARK() { return GetToken(TSqlParser.MARK, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode COMMIT() { return GetToken(TSqlParser.COMMIT, 0); }
		public ITerminalNode DELAYED_DURABILITY() { return GetToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode WORK() { return GetToken(TSqlParser.WORK, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(TSqlParser.ROLLBACK, 0); }
		public ITerminalNode SAVE() { return GetToken(TSqlParser.SAVE, 0); }
		public Transaction_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTransaction_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTransaction_statement(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_statementContext transaction_statement() {
		Transaction_statementContext _localctx = new Transaction_statementContext(_ctx, State);
		EnterRule(_localctx, 802, RULE_transaction_statement);
		int _la;
		try {
			State = 10222;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1361,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10162; Match(BEGIN);
				State = 10163; Match(DISTRIBUTED);
				State = 10164;
				_la = _input.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10167;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1350,_ctx) ) {
				case 1:
					{
					State = 10165; id_();
					}
					break;

				case 2:
					{
					State = 10166; Match(LOCAL_ID);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10169; Match(BEGIN);
				State = 10170;
				_la = _input.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10180;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1353,_ctx) ) {
				case 1:
					{
					State = 10173;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1351,_ctx) ) {
					case 1:
						{
						State = 10171; id_();
						}
						break;

					case 2:
						{
						State = 10172; Match(LOCAL_ID);
						}
						break;
					}
					State = 10178;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1352,_ctx) ) {
					case 1:
						{
						State = 10175; Match(WITH);
						State = 10176; Match(MARK);
						State = 10177; Match(STRING);
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10182; Match(COMMIT);
				State = 10183;
				_la = _input.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10196;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1356,_ctx) ) {
				case 1:
					{
					State = 10186;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1354,_ctx) ) {
					case 1:
						{
						State = 10184; id_();
						}
						break;

					case 2:
						{
						State = 10185; Match(LOCAL_ID);
						}
						break;
					}
					State = 10194;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1355,_ctx) ) {
					case 1:
						{
						State = 10188; Match(WITH);
						State = 10189; Match(LR_BRACKET);
						State = 10190; Match(DELAYED_DURABILITY);
						State = 10191; Match(EQUAL);
						State = 10192;
						_la = _input.La(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 10193; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10198; Match(COMMIT);
				State = 10200;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1357,_ctx) ) {
				case 1:
					{
					State = 10199; Match(WORK);
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10202; Match(COMMIT);
				State = 10203; id_();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10204; Match(ROLLBACK);
				State = 10205; id_();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10206; Match(ROLLBACK);
				State = 10207;
				_la = _input.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10210;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1358,_ctx) ) {
				case 1:
					{
					State = 10208; id_();
					}
					break;

				case 2:
					{
					State = 10209; Match(LOCAL_ID);
					}
					break;
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10212; Match(ROLLBACK);
				State = 10214;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1359,_ctx) ) {
				case 1:
					{
					State = 10213; Match(WORK);
					}
					break;
				}
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 10216; Match(SAVE);
				State = 10217;
				_la = _input.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10220;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1360,_ctx) ) {
				case 1:
					{
					State = 10218; id_();
					}
					break;

				case 2:
					{
					State = 10219; Match(LOCAL_ID);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Go_statementContext : ParserRuleContext {
		public IToken count;
		public ITerminalNode GO() { return GetToken(TSqlParser.GO, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Go_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_go_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGo_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGo_statement(this);
		}
	}

	[RuleVersion(0)]
	public Go_statementContext go_statement() {
		Go_statementContext _localctx = new Go_statementContext(_ctx, State);
		EnterRule(_localctx, 804, RULE_go_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10224; Match(GO);
			State = 10226;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1362,_ctx) ) {
			case 1:
				{
				State = 10225; _localctx.count = Match(DECIMAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Use_statementContext : ParserRuleContext {
		public Id_Context database;
		public ITerminalNode USE() { return GetToken(TSqlParser.USE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Use_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUse_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUse_statement(this);
		}
	}

	[RuleVersion(0)]
	public Use_statementContext use_statement() {
		Use_statementContext _localctx = new Use_statementContext(_ctx, State);
		EnterRule(_localctx, 806, RULE_use_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10228; Match(USE);
			State = 10229; _localctx.database = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Setuser_statementContext : ParserRuleContext {
		public IToken user;
		public ITerminalNode SETUSER() { return GetToken(TSqlParser.SETUSER, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Setuser_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setuser_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSetuser_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSetuser_statement(this);
		}
	}

	[RuleVersion(0)]
	public Setuser_statementContext setuser_statement() {
		Setuser_statementContext _localctx = new Setuser_statementContext(_ctx, State);
		EnterRule(_localctx, 808, RULE_setuser_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10231; Match(SETUSER);
			State = 10233;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1363,_ctx) ) {
			case 1:
				{
				State = 10232; _localctx.user = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reconfigure_statementContext : ParserRuleContext {
		public ITerminalNode RECONFIGURE() { return GetToken(TSqlParser.RECONFIGURE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(TSqlParser.OVERRIDE, 0); }
		public Reconfigure_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reconfigure_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterReconfigure_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitReconfigure_statement(this);
		}
	}

	[RuleVersion(0)]
	public Reconfigure_statementContext reconfigure_statement() {
		Reconfigure_statementContext _localctx = new Reconfigure_statementContext(_ctx, State);
		EnterRule(_localctx, 810, RULE_reconfigure_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10235; Match(RECONFIGURE);
			State = 10238;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1364,_ctx) ) {
			case 1:
				{
				State = 10236; Match(WITH);
				State = 10237; Match(OVERRIDE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shutdown_statementContext : ParserRuleContext {
		public ITerminalNode SHUTDOWN() { return GetToken(TSqlParser.SHUTDOWN, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NOWAIT() { return GetToken(TSqlParser.NOWAIT, 0); }
		public Shutdown_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shutdown_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterShutdown_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitShutdown_statement(this);
		}
	}

	[RuleVersion(0)]
	public Shutdown_statementContext shutdown_statement() {
		Shutdown_statementContext _localctx = new Shutdown_statementContext(_ctx, State);
		EnterRule(_localctx, 812, RULE_shutdown_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10240; Match(SHUTDOWN);
			State = 10243;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1365,_ctx) ) {
			case 1:
				{
				State = 10241; Match(WITH);
				State = 10242; Match(NOWAIT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Checkpoint_statementContext : ParserRuleContext {
		public IToken checkPointDuration;
		public ITerminalNode CHECKPOINT() { return GetToken(TSqlParser.CHECKPOINT, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Checkpoint_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkpoint_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCheckpoint_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCheckpoint_statement(this);
		}
	}

	[RuleVersion(0)]
	public Checkpoint_statementContext checkpoint_statement() {
		Checkpoint_statementContext _localctx = new Checkpoint_statementContext(_ctx, State);
		EnterRule(_localctx, 814, RULE_checkpoint_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10245; Match(CHECKPOINT);
			State = 10247;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1366,_ctx) ) {
			case 1:
				{
				State = 10246; _localctx.checkPointDuration = Match(DECIMAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checkalloc_optionContext : ParserRuleContext {
		public ITerminalNode ALL_ERRORMSGS() { return GetToken(TSqlParser.ALL_ERRORMSGS, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public ITerminalNode TABLOCK() { return GetToken(TSqlParser.TABLOCK, 0); }
		public ITerminalNode ESTIMATEONLY() { return GetToken(TSqlParser.ESTIMATEONLY, 0); }
		public Dbcc_checkalloc_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checkalloc_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checkalloc_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checkalloc_option(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checkalloc_optionContext dbcc_checkalloc_option() {
		Dbcc_checkalloc_optionContext _localctx = new Dbcc_checkalloc_optionContext(_ctx, State);
		EnterRule(_localctx, 816, RULE_dbcc_checkalloc_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10249;
			_la = _input.La(1);
			if ( !(_la==ALL_ERRORMSGS || _la==ESTIMATEONLY || _la==NO_INFOMSGS || _la==TABLOCK) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checkallocContext : ParserRuleContext {
		public IToken name;
		public Id_Context database;
		public IToken databaseid;
		public Dbcc_checkalloc_optionContext dbcc_option;
		public ITerminalNode CHECKALLOC() { return GetToken(TSqlParser.CHECKALLOC, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode NOINDEX() { return GetToken(TSqlParser.NOINDEX, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode REPAIR_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.REPAIR_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode REPAIR_FAST() { return GetToken(TSqlParser.REPAIR_FAST, 0); }
		public ITerminalNode REPAIR_REBUILD() { return GetToken(TSqlParser.REPAIR_REBUILD, 0); }
		public Dbcc_checkalloc_optionContext[] dbcc_checkalloc_option() {
			return GetRuleContexts<Dbcc_checkalloc_optionContext>();
		}
		public Dbcc_checkalloc_optionContext dbcc_checkalloc_option(int i) {
			return GetRuleContext<Dbcc_checkalloc_optionContext>(i);
		}
		public Dbcc_checkallocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checkalloc; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checkalloc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checkalloc(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checkallocContext dbcc_checkalloc() {
		Dbcc_checkallocContext _localctx = new Dbcc_checkallocContext(_ctx, State);
		EnterRule(_localctx, 818, RULE_dbcc_checkalloc);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10251; _localctx.name = Match(CHECKALLOC);
			State = 10276;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1371,_ctx) ) {
			case 1:
				{
				State = 10252; Match(LR_BRACKET);
				State = 10256;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1367,_ctx) ) {
				case 1:
					{
					State = 10253; _localctx.database = id_();
					}
					break;

				case 2:
					{
					State = 10254; _localctx.databaseid = Match(STRING);
					}
					break;

				case 3:
					{
					State = 10255; Match(DECIMAL);
					}
					break;
				}
				State = 10262;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1368,_ctx) ) {
				case 1:
					{
					State = 10258; Match(COMMA);
					State = 10259; Match(NOINDEX);
					}
					break;

				case 2:
					{
					State = 10260; Match(COMMA);
					State = 10261;
					_la = _input.La(1);
					if ( !(((((_la - 795)) & ~0x3f) == 0 && ((1L << (_la - 795)) & ((1L << (REPAIR_ALLOW_DATA_LOSS - 795)) | (1L << (REPAIR_FAST - 795)) | (1L << (REPAIR_REBUILD - 795)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 10264; Match(RR_BRACKET);
				State = 10274;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1370,_ctx) ) {
				case 1:
					{
					State = 10265; Match(WITH);
					State = 10266; _localctx.dbcc_option = dbcc_checkalloc_option();
					State = 10271;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1369,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 10267; Match(COMMA);
							State = 10268; _localctx.dbcc_option = dbcc_checkalloc_option();
							}
							} 
						}
						State = 10273;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1369,_ctx);
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checkcatalogContext : ParserRuleContext {
		public IToken name;
		public Id_Context database;
		public IToken databasename;
		public IToken dbcc_option;
		public ITerminalNode CHECKCATALOG() { return GetToken(TSqlParser.CHECKCATALOG, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Dbcc_checkcatalogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checkcatalog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checkcatalog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checkcatalog(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checkcatalogContext dbcc_checkcatalog() {
		Dbcc_checkcatalogContext _localctx = new Dbcc_checkcatalogContext(_ctx, State);
		EnterRule(_localctx, 820, RULE_dbcc_checkcatalog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10278; _localctx.name = Match(CHECKCATALOG);
			State = 10286;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1373,_ctx) ) {
			case 1:
				{
				State = 10279; Match(LR_BRACKET);
				State = 10283;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1372,_ctx) ) {
				case 1:
					{
					State = 10280; _localctx.database = id_();
					}
					break;

				case 2:
					{
					State = 10281; _localctx.databasename = Match(STRING);
					}
					break;

				case 3:
					{
					State = 10282; Match(DECIMAL);
					}
					break;
				}
				State = 10285; Match(RR_BRACKET);
				}
				break;
			}
			State = 10290;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1374,_ctx) ) {
			case 1:
				{
				State = 10288; Match(WITH);
				State = 10289; _localctx.dbcc_option = Match(NO_INFOMSGS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checkconstraints_optionContext : ParserRuleContext {
		public ITerminalNode ALL_CONSTRAINTS() { return GetToken(TSqlParser.ALL_CONSTRAINTS, 0); }
		public ITerminalNode ALL_ERRORMSGS() { return GetToken(TSqlParser.ALL_ERRORMSGS, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public Dbcc_checkconstraints_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checkconstraints_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checkconstraints_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checkconstraints_option(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checkconstraints_optionContext dbcc_checkconstraints_option() {
		Dbcc_checkconstraints_optionContext _localctx = new Dbcc_checkconstraints_optionContext(_ctx, State);
		EnterRule(_localctx, 822, RULE_dbcc_checkconstraints_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10292;
			_la = _input.La(1);
			if ( !(_la==ALL_CONSTRAINTS || _la==ALL_ERRORMSGS || _la==NO_INFOMSGS) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checkconstraintsContext : ParserRuleContext {
		public IToken name;
		public Id_Context table_or_constraint;
		public IToken table_or_constraint_name;
		public Dbcc_checkconstraints_optionContext dbcc_option;
		public ITerminalNode CHECKCONSTRAINTS() { return GetToken(TSqlParser.CHECKCONSTRAINTS, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Dbcc_checkconstraints_optionContext[] dbcc_checkconstraints_option() {
			return GetRuleContexts<Dbcc_checkconstraints_optionContext>();
		}
		public Dbcc_checkconstraints_optionContext dbcc_checkconstraints_option(int i) {
			return GetRuleContext<Dbcc_checkconstraints_optionContext>(i);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Dbcc_checkconstraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checkconstraints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checkconstraints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checkconstraints(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checkconstraintsContext dbcc_checkconstraints() {
		Dbcc_checkconstraintsContext _localctx = new Dbcc_checkconstraintsContext(_ctx, State);
		EnterRule(_localctx, 824, RULE_dbcc_checkconstraints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10294; _localctx.name = Match(CHECKCONSTRAINTS);
			State = 10301;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1376,_ctx) ) {
			case 1:
				{
				State = 10295; Match(LR_BRACKET);
				State = 10298;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1375,_ctx) ) {
				case 1:
					{
					State = 10296; _localctx.table_or_constraint = id_();
					}
					break;

				case 2:
					{
					State = 10297; _localctx.table_or_constraint_name = Match(STRING);
					}
					break;
				}
				State = 10300; Match(RR_BRACKET);
				}
				break;
			}
			State = 10312;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1378,_ctx) ) {
			case 1:
				{
				State = 10303; Match(WITH);
				State = 10304; _localctx.dbcc_option = dbcc_checkconstraints_option();
				State = 10309;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1377,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10305; Match(COMMA);
						State = 10306; _localctx.dbcc_option = dbcc_checkconstraints_option();
						}
						} 
					}
					State = 10311;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1377,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checkdb_table_optionContext : ParserRuleContext {
		public IToken max_dregree_of_parallelism;
		public ITerminalNode ALL_ERRORMSGS() { return GetToken(TSqlParser.ALL_ERRORMSGS, 0); }
		public ITerminalNode EXTENDED_LOGICAL_CHECKS() { return GetToken(TSqlParser.EXTENDED_LOGICAL_CHECKS, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public ITerminalNode TABLOCK() { return GetToken(TSqlParser.TABLOCK, 0); }
		public ITerminalNode ESTIMATEONLY() { return GetToken(TSqlParser.ESTIMATEONLY, 0); }
		public ITerminalNode PHYSICAL_ONLY() { return GetToken(TSqlParser.PHYSICAL_ONLY, 0); }
		public ITerminalNode DATA_PURITY() { return GetToken(TSqlParser.DATA_PURITY, 0); }
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Dbcc_checkdb_table_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checkdb_table_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checkdb_table_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checkdb_table_option(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checkdb_table_optionContext dbcc_checkdb_table_option() {
		Dbcc_checkdb_table_optionContext _localctx = new Dbcc_checkdb_table_optionContext(_ctx, State);
		EnterRule(_localctx, 826, RULE_dbcc_checkdb_table_option);
		try {
			State = 10324;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1379,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10314; Match(ALL_ERRORMSGS);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10315; Match(EXTENDED_LOGICAL_CHECKS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10316; Match(NO_INFOMSGS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10317; Match(TABLOCK);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10318; Match(ESTIMATEONLY);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10319; Match(PHYSICAL_ONLY);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10320; Match(DATA_PURITY);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10321; Match(MAXDOP);
				State = 10322; Match(EQUAL);
				State = 10323; _localctx.max_dregree_of_parallelism = Match(DECIMAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checkdbContext : ParserRuleContext {
		public IToken name;
		public Id_Context database;
		public IToken databasename;
		public Dbcc_checkdb_table_optionContext dbcc_option;
		public ITerminalNode CHECKDB() { return GetToken(TSqlParser.CHECKDB, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Dbcc_checkdb_table_optionContext[] dbcc_checkdb_table_option() {
			return GetRuleContexts<Dbcc_checkdb_table_optionContext>();
		}
		public Dbcc_checkdb_table_optionContext dbcc_checkdb_table_option(int i) {
			return GetRuleContext<Dbcc_checkdb_table_optionContext>(i);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode NOINDEX() { return GetToken(TSqlParser.NOINDEX, 0); }
		public ITerminalNode REPAIR_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.REPAIR_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode REPAIR_FAST() { return GetToken(TSqlParser.REPAIR_FAST, 0); }
		public ITerminalNode REPAIR_REBUILD() { return GetToken(TSqlParser.REPAIR_REBUILD, 0); }
		public Dbcc_checkdbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checkdb; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checkdb(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checkdb(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checkdbContext dbcc_checkdb() {
		Dbcc_checkdbContext _localctx = new Dbcc_checkdbContext(_ctx, State);
		EnterRule(_localctx, 828, RULE_dbcc_checkdb);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10326; _localctx.name = Match(CHECKDB);
			State = 10338;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1382,_ctx) ) {
			case 1:
				{
				State = 10327; Match(LR_BRACKET);
				State = 10331;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1380,_ctx) ) {
				case 1:
					{
					State = 10328; _localctx.database = id_();
					}
					break;

				case 2:
					{
					State = 10329; _localctx.databasename = Match(STRING);
					}
					break;

				case 3:
					{
					State = 10330; Match(DECIMAL);
					}
					break;
				}
				State = 10335;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1381,_ctx) ) {
				case 1:
					{
					State = 10333; Match(COMMA);
					State = 10334;
					_la = _input.La(1);
					if ( !(_la==NOINDEX || ((((_la - 795)) & ~0x3f) == 0 && ((1L << (_la - 795)) & ((1L << (REPAIR_ALLOW_DATA_LOSS - 795)) | (1L << (REPAIR_FAST - 795)) | (1L << (REPAIR_REBUILD - 795)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 10337; Match(RR_BRACKET);
				}
				break;
			}
			State = 10349;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1384,_ctx) ) {
			case 1:
				{
				State = 10340; Match(WITH);
				State = 10341; _localctx.dbcc_option = dbcc_checkdb_table_option();
				State = 10346;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1383,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10342; Match(COMMA);
						State = 10343; _localctx.dbcc_option = dbcc_checkdb_table_option();
						}
						} 
					}
					State = 10348;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1383,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checkfilegroup_optionContext : ParserRuleContext {
		public IToken max_dregree_of_parallelism;
		public ITerminalNode ALL_ERRORMSGS() { return GetToken(TSqlParser.ALL_ERRORMSGS, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public ITerminalNode TABLOCK() { return GetToken(TSqlParser.TABLOCK, 0); }
		public ITerminalNode ESTIMATEONLY() { return GetToken(TSqlParser.ESTIMATEONLY, 0); }
		public ITerminalNode PHYSICAL_ONLY() { return GetToken(TSqlParser.PHYSICAL_ONLY, 0); }
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Dbcc_checkfilegroup_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checkfilegroup_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checkfilegroup_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checkfilegroup_option(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checkfilegroup_optionContext dbcc_checkfilegroup_option() {
		Dbcc_checkfilegroup_optionContext _localctx = new Dbcc_checkfilegroup_optionContext(_ctx, State);
		EnterRule(_localctx, 830, RULE_dbcc_checkfilegroup_option);
		try {
			State = 10359;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1385,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10351; Match(ALL_ERRORMSGS);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10352; Match(NO_INFOMSGS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10353; Match(TABLOCK);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10354; Match(ESTIMATEONLY);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10355; Match(PHYSICAL_ONLY);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10356; Match(MAXDOP);
				State = 10357; Match(EQUAL);
				State = 10358; _localctx.max_dregree_of_parallelism = Match(DECIMAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checkfilegroupContext : ParserRuleContext {
		public IToken name;
		public IToken filegroup_id;
		public IToken filegroup_name;
		public Dbcc_checkfilegroup_optionContext dbcc_option;
		public ITerminalNode CHECKFILEGROUP() { return GetToken(TSqlParser.CHECKFILEGROUP, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Dbcc_checkfilegroup_optionContext[] dbcc_checkfilegroup_option() {
			return GetRuleContexts<Dbcc_checkfilegroup_optionContext>();
		}
		public Dbcc_checkfilegroup_optionContext dbcc_checkfilegroup_option(int i) {
			return GetRuleContext<Dbcc_checkfilegroup_optionContext>(i);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode NOINDEX() { return GetToken(TSqlParser.NOINDEX, 0); }
		public ITerminalNode REPAIR_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.REPAIR_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode REPAIR_FAST() { return GetToken(TSqlParser.REPAIR_FAST, 0); }
		public ITerminalNode REPAIR_REBUILD() { return GetToken(TSqlParser.REPAIR_REBUILD, 0); }
		public Dbcc_checkfilegroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checkfilegroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checkfilegroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checkfilegroup(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checkfilegroupContext dbcc_checkfilegroup() {
		Dbcc_checkfilegroupContext _localctx = new Dbcc_checkfilegroupContext(_ctx, State);
		EnterRule(_localctx, 832, RULE_dbcc_checkfilegroup);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10361; _localctx.name = Match(CHECKFILEGROUP);
			State = 10372;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1388,_ctx) ) {
			case 1:
				{
				State = 10362; Match(LR_BRACKET);
				State = 10365;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1386,_ctx) ) {
				case 1:
					{
					State = 10363; _localctx.filegroup_id = Match(DECIMAL);
					}
					break;

				case 2:
					{
					State = 10364; _localctx.filegroup_name = Match(STRING);
					}
					break;
				}
				State = 10369;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1387,_ctx) ) {
				case 1:
					{
					State = 10367; Match(COMMA);
					State = 10368;
					_la = _input.La(1);
					if ( !(_la==NOINDEX || ((((_la - 795)) & ~0x3f) == 0 && ((1L << (_la - 795)) & ((1L << (REPAIR_ALLOW_DATA_LOSS - 795)) | (1L << (REPAIR_FAST - 795)) | (1L << (REPAIR_REBUILD - 795)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 10371; Match(RR_BRACKET);
				}
				break;
			}
			State = 10383;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1390,_ctx) ) {
			case 1:
				{
				State = 10374; Match(WITH);
				State = 10375; _localctx.dbcc_option = dbcc_checkfilegroup_option();
				State = 10380;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1389,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10376; Match(COMMA);
						State = 10377; _localctx.dbcc_option = dbcc_checkfilegroup_option();
						}
						} 
					}
					State = 10382;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1389,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checktableContext : ParserRuleContext {
		public IToken name;
		public IToken table_or_view_name;
		public ExpressionContext index_id;
		public Dbcc_checkdb_table_optionContext dbcc_option;
		public ITerminalNode CHECKTABLE() { return GetToken(TSqlParser.CHECKTABLE, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Dbcc_checkdb_table_optionContext[] dbcc_checkdb_table_option() {
			return GetRuleContexts<Dbcc_checkdb_table_optionContext>();
		}
		public Dbcc_checkdb_table_optionContext dbcc_checkdb_table_option(int i) {
			return GetRuleContext<Dbcc_checkdb_table_optionContext>(i);
		}
		public ITerminalNode NOINDEX() { return GetToken(TSqlParser.NOINDEX, 0); }
		public ITerminalNode REPAIR_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.REPAIR_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode REPAIR_FAST() { return GetToken(TSqlParser.REPAIR_FAST, 0); }
		public ITerminalNode REPAIR_REBUILD() { return GetToken(TSqlParser.REPAIR_REBUILD, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Dbcc_checktableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checktable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checktable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checktable(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checktableContext dbcc_checktable() {
		Dbcc_checktableContext _localctx = new Dbcc_checktableContext(_ctx, State);
		EnterRule(_localctx, 834, RULE_dbcc_checktable);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10385; _localctx.name = Match(CHECKTABLE);
			State = 10386; Match(LR_BRACKET);
			State = 10387; _localctx.table_or_view_name = Match(STRING);
			State = 10396;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1392,_ctx) ) {
			case 1:
				{
				State = 10388; Match(COMMA);
				State = 10394;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1391,_ctx) ) {
				case 1:
					{
					State = 10389; Match(NOINDEX);
					}
					break;

				case 2:
					{
					State = 10390; _localctx.index_id = expression(0);
					}
					break;

				case 3:
					{
					State = 10391; Match(REPAIR_ALLOW_DATA_LOSS);
					}
					break;

				case 4:
					{
					State = 10392; Match(REPAIR_FAST);
					}
					break;

				case 5:
					{
					State = 10393; Match(REPAIR_REBUILD);
					}
					break;
				}
				}
				break;
			}
			State = 10398; Match(RR_BRACKET);
			State = 10408;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1394,_ctx) ) {
			case 1:
				{
				State = 10399; Match(WITH);
				State = 10400; _localctx.dbcc_option = dbcc_checkdb_table_option();
				State = 10405;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1393,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10401; Match(COMMA);
						State = 10402; _localctx.dbcc_option = dbcc_checkdb_table_option();
						}
						} 
					}
					State = 10407;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1393,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_cleantableContext : ParserRuleContext {
		public IToken name;
		public Id_Context database;
		public IToken databasename;
		public Id_Context table_or_view;
		public IToken table_or_view_name;
		public IToken batch_size;
		public IToken dbcc_option;
		public ITerminalNode CLEANTABLE() { return GetToken(TSqlParser.CLEANTABLE, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public Dbcc_cleantableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_cleantable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_cleantable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_cleantable(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_cleantableContext dbcc_cleantable() {
		Dbcc_cleantableContext _localctx = new Dbcc_cleantableContext(_ctx, State);
		EnterRule(_localctx, 836, RULE_dbcc_cleantable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10410; _localctx.name = Match(CLEANTABLE);
			State = 10411; Match(LR_BRACKET);
			State = 10415;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1395,_ctx) ) {
			case 1:
				{
				State = 10412; _localctx.database = id_();
				}
				break;

			case 2:
				{
				State = 10413; _localctx.databasename = Match(STRING);
				}
				break;

			case 3:
				{
				State = 10414; Match(DECIMAL);
				}
				break;
			}
			State = 10417; Match(COMMA);
			State = 10420;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1396,_ctx) ) {
			case 1:
				{
				State = 10418; _localctx.table_or_view = id_();
				}
				break;

			case 2:
				{
				State = 10419; _localctx.table_or_view_name = Match(STRING);
				}
				break;
			}
			State = 10424;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1397,_ctx) ) {
			case 1:
				{
				State = 10422; Match(COMMA);
				State = 10423; _localctx.batch_size = Match(DECIMAL);
				}
				break;
			}
			State = 10426; Match(RR_BRACKET);
			State = 10429;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1398,_ctx) ) {
			case 1:
				{
				State = 10427; Match(WITH);
				State = 10428; _localctx.dbcc_option = Match(NO_INFOMSGS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_clonedatabase_optionContext : ParserRuleContext {
		public ITerminalNode NO_STATISTICS() { return GetToken(TSqlParser.NO_STATISTICS, 0); }
		public ITerminalNode NO_QUERYSTORE() { return GetToken(TSqlParser.NO_QUERYSTORE, 0); }
		public ITerminalNode SERVICEBROKER() { return GetToken(TSqlParser.SERVICEBROKER, 0); }
		public ITerminalNode VERIFY_CLONEDB() { return GetToken(TSqlParser.VERIFY_CLONEDB, 0); }
		public ITerminalNode BACKUP_CLONEDB() { return GetToken(TSqlParser.BACKUP_CLONEDB, 0); }
		public Dbcc_clonedatabase_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_clonedatabase_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_clonedatabase_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_clonedatabase_option(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_clonedatabase_optionContext dbcc_clonedatabase_option() {
		Dbcc_clonedatabase_optionContext _localctx = new Dbcc_clonedatabase_optionContext(_ctx, State);
		EnterRule(_localctx, 838, RULE_dbcc_clonedatabase_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10431;
			_la = _input.La(1);
			if ( !(_la==BACKUP_CLONEDB || _la==NO_QUERYSTORE || _la==NO_STATISTICS || _la==SERVICEBROKER || _la==VERIFY_CLONEDB) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_clonedatabaseContext : ParserRuleContext {
		public IToken name;
		public Id_Context source_database;
		public Id_Context target_database;
		public Dbcc_clonedatabase_optionContext dbcc_option;
		public ITerminalNode CLONEDATABASE() { return GetToken(TSqlParser.CLONEDATABASE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Dbcc_clonedatabase_optionContext[] dbcc_clonedatabase_option() {
			return GetRuleContexts<Dbcc_clonedatabase_optionContext>();
		}
		public Dbcc_clonedatabase_optionContext dbcc_clonedatabase_option(int i) {
			return GetRuleContext<Dbcc_clonedatabase_optionContext>(i);
		}
		public Dbcc_clonedatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_clonedatabase; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_clonedatabase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_clonedatabase(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_clonedatabaseContext dbcc_clonedatabase() {
		Dbcc_clonedatabaseContext _localctx = new Dbcc_clonedatabaseContext(_ctx, State);
		EnterRule(_localctx, 840, RULE_dbcc_clonedatabase);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10433; _localctx.name = Match(CLONEDATABASE);
			State = 10434; Match(LR_BRACKET);
			State = 10435; _localctx.source_database = id_();
			State = 10436; Match(COMMA);
			State = 10437; _localctx.target_database = id_();
			State = 10438; Match(RR_BRACKET);
			State = 10448;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1400,_ctx) ) {
			case 1:
				{
				State = 10439; Match(WITH);
				State = 10440; _localctx.dbcc_option = dbcc_clonedatabase_option();
				State = 10445;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1399,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10441; Match(COMMA);
						State = 10442; _localctx.dbcc_option = dbcc_clonedatabase_option();
						}
						} 
					}
					State = 10447;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1399,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_pdw_showspaceusedContext : ParserRuleContext {
		public IToken name;
		public Id_Context tablename;
		public IToken dbcc_option;
		public ITerminalNode PDW_SHOWSPACEUSED() { return GetToken(TSqlParser.PDW_SHOWSPACEUSED, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode IGNORE_REPLICATED_TABLE_CACHE() { return GetToken(TSqlParser.IGNORE_REPLICATED_TABLE_CACHE, 0); }
		public Dbcc_pdw_showspaceusedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_pdw_showspaceused; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_pdw_showspaceused(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_pdw_showspaceused(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_pdw_showspaceusedContext dbcc_pdw_showspaceused() {
		Dbcc_pdw_showspaceusedContext _localctx = new Dbcc_pdw_showspaceusedContext(_ctx, State);
		EnterRule(_localctx, 842, RULE_dbcc_pdw_showspaceused);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10450; _localctx.name = Match(PDW_SHOWSPACEUSED);
			State = 10455;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1401,_ctx) ) {
			case 1:
				{
				State = 10451; Match(LR_BRACKET);
				State = 10452; _localctx.tablename = id_();
				State = 10453; Match(RR_BRACKET);
				}
				break;
			}
			State = 10459;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1402,_ctx) ) {
			case 1:
				{
				State = 10457; Match(WITH);
				State = 10458; _localctx.dbcc_option = Match(IGNORE_REPLICATED_TABLE_CACHE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_proccacheContext : ParserRuleContext {
		public IToken name;
		public IToken dbcc_option;
		public ITerminalNode PROCCACHE() { return GetToken(TSqlParser.PROCCACHE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public Dbcc_proccacheContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_proccache; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_proccache(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_proccache(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_proccacheContext dbcc_proccache() {
		Dbcc_proccacheContext _localctx = new Dbcc_proccacheContext(_ctx, State);
		EnterRule(_localctx, 844, RULE_dbcc_proccache);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10461; _localctx.name = Match(PROCCACHE);
			State = 10464;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1403,_ctx) ) {
			case 1:
				{
				State = 10462; Match(WITH);
				State = 10463; _localctx.dbcc_option = Match(NO_INFOMSGS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_showcontig_optionContext : ParserRuleContext {
		public ITerminalNode ALL_INDEXES() { return GetToken(TSqlParser.ALL_INDEXES, 0); }
		public ITerminalNode TABLERESULTS() { return GetToken(TSqlParser.TABLERESULTS, 0); }
		public ITerminalNode FAST() { return GetToken(TSqlParser.FAST, 0); }
		public ITerminalNode ALL_LEVELS() { return GetToken(TSqlParser.ALL_LEVELS, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public Dbcc_showcontig_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_showcontig_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_showcontig_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_showcontig_option(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_showcontig_optionContext dbcc_showcontig_option() {
		Dbcc_showcontig_optionContext _localctx = new Dbcc_showcontig_optionContext(_ctx, State);
		EnterRule(_localctx, 846, RULE_dbcc_showcontig_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10466;
			_la = _input.La(1);
			if ( !(_la==ALL_INDEXES || _la==ALL_LEVELS || _la==FAST || _la==NO_INFOMSGS || _la==TABLERESULTS) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_showcontigContext : ParserRuleContext {
		public IToken name;
		public ExpressionContext table_or_view;
		public ExpressionContext index;
		public Dbcc_showcontig_optionContext dbcc_option;
		public ITerminalNode SHOWCONTIG() { return GetToken(TSqlParser.SHOWCONTIG, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Dbcc_showcontig_optionContext[] dbcc_showcontig_option() {
			return GetRuleContexts<Dbcc_showcontig_optionContext>();
		}
		public Dbcc_showcontig_optionContext dbcc_showcontig_option(int i) {
			return GetRuleContext<Dbcc_showcontig_optionContext>(i);
		}
		public Dbcc_showcontigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_showcontig; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_showcontig(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_showcontig(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_showcontigContext dbcc_showcontig() {
		Dbcc_showcontigContext _localctx = new Dbcc_showcontigContext(_ctx, State);
		EnterRule(_localctx, 848, RULE_dbcc_showcontig);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10468; _localctx.name = Match(SHOWCONTIG);
			State = 10477;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1405,_ctx) ) {
			case 1:
				{
				State = 10469; Match(LR_BRACKET);
				State = 10470; _localctx.table_or_view = expression(0);
				State = 10473;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1404,_ctx) ) {
				case 1:
					{
					State = 10471; Match(COMMA);
					State = 10472; _localctx.index = expression(0);
					}
					break;
				}
				State = 10475; Match(RR_BRACKET);
				}
				break;
			}
			State = 10488;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1407,_ctx) ) {
			case 1:
				{
				State = 10479; Match(WITH);
				State = 10480; _localctx.dbcc_option = dbcc_showcontig_option();
				State = 10485;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1406,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10481; Match(COMMA);
						State = 10482; dbcc_showcontig_option();
						}
						} 
					}
					State = 10487;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1406,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_shrinklogContext : ParserRuleContext {
		public IToken name;
		public IToken dbcc_option;
		public ITerminalNode SHRINKLOG() { return GetToken(TSqlParser.SHRINKLOG, 0); }
		public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode MB() { return GetToken(TSqlParser.MB, 0); }
		public ITerminalNode GB() { return GetToken(TSqlParser.GB, 0); }
		public ITerminalNode TB() { return GetToken(TSqlParser.TB, 0); }
		public Dbcc_shrinklogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_shrinklog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_shrinklog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_shrinklog(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_shrinklogContext dbcc_shrinklog() {
		Dbcc_shrinklogContext _localctx = new Dbcc_shrinklogContext(_ctx, State);
		EnterRule(_localctx, 850, RULE_dbcc_shrinklog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10490; _localctx.name = Match(SHRINKLOG);
			State = 10500;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1409,_ctx) ) {
			case 1:
				{
				State = 10491; Match(LR_BRACKET);
				State = 10492; Match(SIZE);
				State = 10493; Match(EQUAL);
				State = 10497;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1408,_ctx) ) {
				case 1:
					{
					{
					State = 10494; Match(DECIMAL);
					State = 10495;
					_la = _input.La(1);
					if ( !(_la==GB || _la==MB || _la==TB) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					}
					break;

				case 2:
					{
					State = 10496; Match(DEFAULT);
					}
					break;
				}
				State = 10499; Match(RR_BRACKET);
				}
				break;
			}
			State = 10504;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1410,_ctx) ) {
			case 1:
				{
				State = 10502; Match(WITH);
				State = 10503; _localctx.dbcc_option = Match(NO_INFOMSGS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_dbreindexContext : ParserRuleContext {
		public IToken name;
		public Id_or_stringContext table;
		public Id_or_stringContext index_name;
		public ExpressionContext fillfactor;
		public IToken dbcc_option;
		public ITerminalNode DBREINDEX() { return GetToken(TSqlParser.DBREINDEX, 0); }
		public Id_or_stringContext[] id_or_string() {
			return GetRuleContexts<Id_or_stringContext>();
		}
		public Id_or_stringContext id_or_string(int i) {
			return GetRuleContext<Id_or_stringContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Dbcc_dbreindexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_dbreindex; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_dbreindex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_dbreindex(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_dbreindexContext dbcc_dbreindex() {
		Dbcc_dbreindexContext _localctx = new Dbcc_dbreindexContext(_ctx, State);
		EnterRule(_localctx, 852, RULE_dbcc_dbreindex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10506; _localctx.name = Match(DBREINDEX);
			State = 10507; Match(LR_BRACKET);
			State = 10508; _localctx.table = id_or_string();
			State = 10515;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1412,_ctx) ) {
			case 1:
				{
				State = 10509; Match(COMMA);
				State = 10510; _localctx.index_name = id_or_string();
				State = 10513;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1411,_ctx) ) {
				case 1:
					{
					State = 10511; Match(COMMA);
					State = 10512; _localctx.fillfactor = expression(0);
					}
					break;
				}
				}
				break;
			}
			State = 10517; Match(RR_BRACKET);
			State = 10520;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1413,_ctx) ) {
			case 1:
				{
				State = 10518; Match(WITH);
				State = 10519; _localctx.dbcc_option = Match(NO_INFOMSGS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_dll_freeContext : ParserRuleContext {
		public Id_Context dllname;
		public IToken name;
		public IToken dbcc_option;
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode FREE() { return GetToken(TSqlParser.FREE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public Dbcc_dll_freeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_dll_free; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_dll_free(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_dll_free(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_dll_freeContext dbcc_dll_free() {
		Dbcc_dll_freeContext _localctx = new Dbcc_dll_freeContext(_ctx, State);
		EnterRule(_localctx, 854, RULE_dbcc_dll_free);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10522; _localctx.dllname = id_();
			State = 10523; Match(LR_BRACKET);
			State = 10524; _localctx.name = Match(FREE);
			State = 10525; Match(RR_BRACKET);
			State = 10528;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1414,_ctx) ) {
			case 1:
				{
				State = 10526; Match(WITH);
				State = 10527; _localctx.dbcc_option = Match(NO_INFOMSGS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_dropcleanbuffersContext : ParserRuleContext {
		public IToken name;
		public IToken dbcc_option;
		public ITerminalNode DROPCLEANBUFFERS() { return GetToken(TSqlParser.DROPCLEANBUFFERS, 0); }
		public ITerminalNode COMPUTE() { return GetToken(TSqlParser.COMPUTE, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public Dbcc_dropcleanbuffersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_dropcleanbuffers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_dropcleanbuffers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_dropcleanbuffers(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_dropcleanbuffersContext dbcc_dropcleanbuffers() {
		Dbcc_dropcleanbuffersContext _localctx = new Dbcc_dropcleanbuffersContext(_ctx, State);
		EnterRule(_localctx, 856, RULE_dbcc_dropcleanbuffers);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10530; _localctx.name = Match(DROPCLEANBUFFERS);
			State = 10535;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1415,_ctx) ) {
			case 1:
				{
				State = 10531; Match(LR_BRACKET);
				State = 10532; Match(COMPUTE);
				}
				break;

			case 2:
				{
				State = 10533; Match(ALL);
				State = 10534; Match(RR_BRACKET);
				}
				break;
			}
			State = 10539;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1416,_ctx) ) {
			case 1:
				{
				State = 10537; Match(WITH);
				State = 10538; _localctx.dbcc_option = Match(NO_INFOMSGS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_clauseContext : ParserRuleContext {
		public ITerminalNode DBCC() { return GetToken(TSqlParser.DBCC, 0); }
		public Dbcc_checkallocContext dbcc_checkalloc() {
			return GetRuleContext<Dbcc_checkallocContext>(0);
		}
		public Dbcc_checkcatalogContext dbcc_checkcatalog() {
			return GetRuleContext<Dbcc_checkcatalogContext>(0);
		}
		public Dbcc_checkconstraintsContext dbcc_checkconstraints() {
			return GetRuleContext<Dbcc_checkconstraintsContext>(0);
		}
		public Dbcc_checkdbContext dbcc_checkdb() {
			return GetRuleContext<Dbcc_checkdbContext>(0);
		}
		public Dbcc_checkfilegroupContext dbcc_checkfilegroup() {
			return GetRuleContext<Dbcc_checkfilegroupContext>(0);
		}
		public Dbcc_checktableContext dbcc_checktable() {
			return GetRuleContext<Dbcc_checktableContext>(0);
		}
		public Dbcc_cleantableContext dbcc_cleantable() {
			return GetRuleContext<Dbcc_cleantableContext>(0);
		}
		public Dbcc_clonedatabaseContext dbcc_clonedatabase() {
			return GetRuleContext<Dbcc_clonedatabaseContext>(0);
		}
		public Dbcc_dbreindexContext dbcc_dbreindex() {
			return GetRuleContext<Dbcc_dbreindexContext>(0);
		}
		public Dbcc_dll_freeContext dbcc_dll_free() {
			return GetRuleContext<Dbcc_dll_freeContext>(0);
		}
		public Dbcc_dropcleanbuffersContext dbcc_dropcleanbuffers() {
			return GetRuleContext<Dbcc_dropcleanbuffersContext>(0);
		}
		public Dbcc_pdw_showspaceusedContext dbcc_pdw_showspaceused() {
			return GetRuleContext<Dbcc_pdw_showspaceusedContext>(0);
		}
		public Dbcc_proccacheContext dbcc_proccache() {
			return GetRuleContext<Dbcc_proccacheContext>(0);
		}
		public Dbcc_showcontigContext dbcc_showcontig() {
			return GetRuleContext<Dbcc_showcontigContext>(0);
		}
		public Dbcc_shrinklogContext dbcc_shrinklog() {
			return GetRuleContext<Dbcc_shrinklogContext>(0);
		}
		public Dbcc_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_clause(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_clauseContext dbcc_clause() {
		Dbcc_clauseContext _localctx = new Dbcc_clauseContext(_ctx, State);
		EnterRule(_localctx, 858, RULE_dbcc_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10541; Match(DBCC);
			State = 10557;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1417,_ctx) ) {
			case 1:
				{
				State = 10542; dbcc_checkalloc();
				}
				break;

			case 2:
				{
				State = 10543; dbcc_checkcatalog();
				}
				break;

			case 3:
				{
				State = 10544; dbcc_checkconstraints();
				}
				break;

			case 4:
				{
				State = 10545; dbcc_checkdb();
				}
				break;

			case 5:
				{
				State = 10546; dbcc_checkfilegroup();
				}
				break;

			case 6:
				{
				State = 10547; dbcc_checktable();
				}
				break;

			case 7:
				{
				State = 10548; dbcc_cleantable();
				}
				break;

			case 8:
				{
				State = 10549; dbcc_clonedatabase();
				}
				break;

			case 9:
				{
				State = 10550; dbcc_dbreindex();
				}
				break;

			case 10:
				{
				State = 10551; dbcc_dll_free();
				}
				break;

			case 11:
				{
				State = 10552; dbcc_dropcleanbuffers();
				}
				break;

			case 12:
				{
				State = 10553; dbcc_pdw_showspaceused();
				}
				break;

			case 13:
				{
				State = 10554; dbcc_proccache();
				}
				break;

			case 14:
				{
				State = 10555; dbcc_showcontig();
				}
				break;

			case 15:
				{
				State = 10556; dbcc_shrinklog();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_clauseContext : ParserRuleContext {
		public IToken clause;
		public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode CALLER() { return GetToken(TSqlParser.CALLER, 0); }
		public ITerminalNode SELF() { return GetToken(TSqlParser.SELF, 0); }
		public ITerminalNode OWNER() { return GetToken(TSqlParser.OWNER, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Execute_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_clause(this);
		}
	}

	[RuleVersion(0)]
	public Execute_clauseContext execute_clause() {
		Execute_clauseContext _localctx = new Execute_clauseContext(_ctx, State);
		EnterRule(_localctx, 860, RULE_execute_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10559; Match(EXECUTE);
			State = 10560; Match(AS);
			State = 10561;
			_localctx.clause = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==CALLER || _la==OWNER || _la==SELF || _la==STRING) ) {
				_localctx.clause = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_localContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Declare_localContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_local; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_local(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_local(this);
		}
	}

	[RuleVersion(0)]
	public Declare_localContext declare_local() {
		Declare_localContext _localctx = new Declare_localContext(_ctx, State);
		EnterRule(_localctx, 862, RULE_declare_local);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10563; Match(LOCAL_ID);
			State = 10565;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1418,_ctx) ) {
			case 1:
				{
				State = 10564; Match(AS);
				}
				break;
			}
			State = 10567; data_type();
			State = 10570;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1419,_ctx) ) {
			case 1:
				{
				State = 10568; Match(EQUAL);
				State = 10569; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_type_definitionContext : ParserRuleContext {
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return GetRuleContext<Column_def_table_constraintsContext>(0);
		}
		public Table_type_indicesContext[] table_type_indices() {
			return GetRuleContexts<Table_type_indicesContext>();
		}
		public Table_type_indicesContext table_type_indices(int i) {
			return GetRuleContext<Table_type_indicesContext>(i);
		}
		public Table_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_type_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_type_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_type_definition(this);
		}
	}

	[RuleVersion(0)]
	public Table_type_definitionContext table_type_definition() {
		Table_type_definitionContext _localctx = new Table_type_definitionContext(_ctx, State);
		EnterRule(_localctx, 864, RULE_table_type_definition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10572; Match(TABLE);
			State = 10573; Match(LR_BRACKET);
			State = 10574; column_def_table_constraints();
			State = 10581;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1421,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 10576;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1420,_ctx) ) {
					case 1:
						{
						State = 10575; Match(COMMA);
						}
						break;
					}
					State = 10578; table_type_indices();
					}
					} 
				}
				State = 10583;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1421,_ctx);
			}
			State = 10584; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_type_indicesContext : ParserRuleContext {
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode CLUSTERED() { return GetToken(TSqlParser.CLUSTERED, 0); }
		public ITerminalNode NONCLUSTERED() { return GetToken(TSqlParser.NONCLUSTERED, 0); }
		public ITerminalNode CHECK() { return GetToken(TSqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Table_type_indicesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_type_indices; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_type_indices(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_type_indices(this);
		}
	}

	[RuleVersion(0)]
	public Table_type_indicesContext table_type_indices() {
		Table_type_indicesContext _localctx = new Table_type_indicesContext(_ctx, State);
		EnterRule(_localctx, 866, RULE_table_type_indices);
		int _la;
		try {
			State = 10607;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1425,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10596;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1424,_ctx) ) {
				case 1:
					{
					{
					State = 10590;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1422,_ctx) ) {
					case 1:
						{
						State = 10586; Match(PRIMARY);
						State = 10587; Match(KEY);
						}
						break;

					case 2:
						{
						State = 10588; Match(INDEX);
						State = 10589; id_();
						}
						break;
					}
					State = 10593;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1423,_ctx) ) {
					case 1:
						{
						State = 10592;
						_la = _input.La(1);
						if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					}
					break;

				case 2:
					{
					State = 10595; Match(UNIQUE);
					}
					break;
				}
				State = 10598; Match(LR_BRACKET);
				State = 10599; column_name_list_with_order();
				State = 10600; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10602; Match(CHECK);
				State = 10603; Match(LR_BRACKET);
				State = 10604; search_condition(0);
				State = 10605; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_type_definitionContext : ParserRuleContext {
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public Xml_schema_collectionContext xml_schema_collection() {
			return GetRuleContext<Xml_schema_collectionContext>(0);
		}
		public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		public ITerminalNode DOCUMENT() { return GetToken(TSqlParser.DOCUMENT, 0); }
		public Xml_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_type_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_type_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_type_definition(this);
		}
	}

	[RuleVersion(0)]
	public Xml_type_definitionContext xml_type_definition() {
		Xml_type_definitionContext _localctx = new Xml_type_definitionContext(_ctx, State);
		EnterRule(_localctx, 868, RULE_xml_type_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10609; Match(XML);
			State = 10610; Match(LR_BRACKET);
			State = 10612;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1426,_ctx) ) {
			case 1:
				{
				State = 10611;
				_la = _input.La(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 10614; xml_schema_collection();
			State = 10615; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_schema_collectionContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(TSqlParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(TSqlParser.ID, i);
		}
		public Xml_schema_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_schema_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_schema_collection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_schema_collection(this);
		}
	}

	[RuleVersion(0)]
	public Xml_schema_collectionContext xml_schema_collection() {
		Xml_schema_collectionContext _localctx = new Xml_schema_collectionContext(_ctx, State);
		EnterRule(_localctx, 870, RULE_xml_schema_collection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10617; Match(ID);
			State = 10618; Match(DOT);
			State = 10619; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_def_table_constraintsContext : ParserRuleContext {
		public Column_def_table_constraintContext[] column_def_table_constraint() {
			return GetRuleContexts<Column_def_table_constraintContext>();
		}
		public Column_def_table_constraintContext column_def_table_constraint(int i) {
			return GetRuleContext<Column_def_table_constraintContext>(i);
		}
		public Column_def_table_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def_table_constraints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_def_table_constraints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_def_table_constraints(this);
		}
	}

	[RuleVersion(0)]
	public Column_def_table_constraintsContext column_def_table_constraints() {
		Column_def_table_constraintsContext _localctx = new Column_def_table_constraintsContext(_ctx, State);
		EnterRule(_localctx, 872, RULE_column_def_table_constraints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10621; column_def_table_constraint();
			State = 10628;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1428,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 10623;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1427,_ctx) ) {
					case 1:
						{
						State = 10622; Match(COMMA);
						}
						break;
					}
					State = 10625; column_def_table_constraint();
					}
					} 
				}
				State = 10630;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1428,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_def_table_constraintContext : ParserRuleContext {
		public Column_definitionContext column_definition() {
			return GetRuleContext<Column_definitionContext>(0);
		}
		public Materialized_column_definitionContext materialized_column_definition() {
			return GetRuleContext<Materialized_column_definitionContext>(0);
		}
		public Table_constraintContext table_constraint() {
			return GetRuleContext<Table_constraintContext>(0);
		}
		public Column_def_table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def_table_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_def_table_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_def_table_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Column_def_table_constraintContext column_def_table_constraint() {
		Column_def_table_constraintContext _localctx = new Column_def_table_constraintContext(_ctx, State);
		EnterRule(_localctx, 874, RULE_column_def_table_constraint);
		try {
			State = 10634;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1429,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10631; column_definition();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10632; materialized_column_definition();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10633; table_constraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_definitionContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Column_definition_elementContext[] column_definition_element() {
			return GetRuleContexts<Column_definition_elementContext>();
		}
		public Column_definition_elementContext column_definition_element(int i) {
			return GetRuleContext<Column_definition_elementContext>(i);
		}
		public Column_indexContext column_index() {
			return GetRuleContext<Column_indexContext>(0);
		}
		public ITerminalNode PERSISTED() { return GetToken(TSqlParser.PERSISTED, 0); }
		public Column_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_definition(this);
		}
	}

	[RuleVersion(0)]
	public Column_definitionContext column_definition() {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, State);
		EnterRule(_localctx, 876, RULE_column_definition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10636; id_();
			State = 10643;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1431,_ctx) ) {
			case 1:
				{
				State = 10637; data_type();
				}
				break;

			case 2:
				{
				State = 10638; Match(AS);
				State = 10639; expression(0);
				State = 10641;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1430,_ctx) ) {
				case 1:
					{
					State = 10640; Match(PERSISTED);
					}
					break;
				}
				}
				break;
			}
			State = 10648;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1432,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 10645; column_definition_element();
					}
					} 
				}
				State = 10650;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1432,_ctx);
			}
			State = 10652;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1433,_ctx) ) {
			case 1:
				{
				State = 10651; column_index();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_definition_elementContext : ParserRuleContext {
		public Id_Context collation_name;
		public IToken mask_function;
		public Id_Context constraint;
		public ExpressionContext constant_expr;
		public IToken seed;
		public IToken increment;
		public IToken key_name;
		public IToken algo;
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public ITerminalNode DATABASE_DEFAULT() { return GetToken(TSqlParser.DATABASE_DEFAULT, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode SPARSE() { return GetToken(TSqlParser.SPARSE, 0); }
		public ITerminalNode MASKED() { return GetToken(TSqlParser.MASKED, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(TSqlParser.CONSTRAINT, 0); }
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode GENERATED() { return GetToken(TSqlParser.GENERATED, 0); }
		public ITerminalNode ALWAYS() { return GetToken(TSqlParser.ALWAYS, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		public ITerminalNode TRANSACTION_ID() { return GetToken(TSqlParser.TRANSACTION_ID, 0); }
		public ITerminalNode SEQUENCE_NUMBER() { return GetToken(TSqlParser.SEQUENCE_NUMBER, 0); }
		public ITerminalNode START() { return GetToken(TSqlParser.START, 0); }
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public ITerminalNode HIDDEN_KEYWORD() { return GetToken(TSqlParser.HIDDEN_KEYWORD, 0); }
		public ITerminalNode ROWGUIDCOL() { return GetToken(TSqlParser.ROWGUIDCOL, 0); }
		public ITerminalNode ENCRYPTED() { return GetToken(TSqlParser.ENCRYPTED, 0); }
		public ITerminalNode COLUMN_ENCRYPTION_KEY() { return GetToken(TSqlParser.COLUMN_ENCRYPTION_KEY, 0); }
		public ITerminalNode ENCRYPTION_TYPE() { return GetToken(TSqlParser.ENCRYPTION_TYPE, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode DETERMINISTIC() { return GetToken(TSqlParser.DETERMINISTIC, 0); }
		public ITerminalNode RANDOMIZED() { return GetToken(TSqlParser.RANDOMIZED, 0); }
		public Column_constraintContext column_constraint() {
			return GetRuleContext<Column_constraintContext>(0);
		}
		public Column_definition_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_definition_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_definition_element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_definition_element(this);
		}
	}

	[RuleVersion(0)]
	public Column_definition_elementContext column_definition_element() {
		Column_definition_elementContext _localctx = new Column_definition_elementContext(_ctx, State);
		EnterRule(_localctx, 878, RULE_column_definition_element);
		int _la;
		try {
			State = 10710;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1438,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10654; Match(FILESTREAM);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10655; Match(COLLATE);
				State = 10658;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1434,_ctx) ) {
				case 1:
					{
					State = 10656; _localctx.collation_name = id_();
					}
					break;

				case 2:
					{
					State = 10657; Match(DATABASE_DEFAULT);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10660; Match(SPARSE);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10661; Match(MASKED);
				State = 10662; Match(WITH);
				State = 10663; Match(LR_BRACKET);
				State = 10664; Match(FUNCTION);
				State = 10665; Match(EQUAL);
				State = 10666; _localctx.mask_function = Match(STRING);
				State = 10667; Match(RR_BRACKET);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10670;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1435,_ctx) ) {
				case 1:
					{
					State = 10668; Match(CONSTRAINT);
					State = 10669; _localctx.constraint = id_();
					}
					break;
				}
				State = 10672; Match(DEFAULT);
				State = 10673; _localctx.constant_expr = expression(0);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10674; Match(IDENTITY);
				State = 10680;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1436,_ctx) ) {
				case 1:
					{
					State = 10675; Match(LR_BRACKET);
					State = 10676; _localctx.seed = Match(DECIMAL);
					State = 10677; Match(COMMA);
					State = 10678; _localctx.increment = Match(DECIMAL);
					State = 10679; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10682; Match(NOT);
				State = 10683; Match(FOR);
				State = 10684; Match(REPLICATION);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10685; Match(GENERATED);
				State = 10686; Match(ALWAYS);
				State = 10687; Match(AS);
				State = 10688;
				_la = _input.La(1);
				if ( !(_la==ROW || _la==SEQUENCE_NUMBER || _la==TRANSACTION_ID) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10689;
				_la = _input.La(1);
				if ( !(_la==END || _la==START) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10691;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1437,_ctx) ) {
				case 1:
					{
					State = 10690; Match(HIDDEN_KEYWORD);
					}
					break;
				}
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 10693; Match(ROWGUIDCOL);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 10694; Match(ENCRYPTED);
				State = 10695; Match(WITH);
				State = 10696; Match(LR_BRACKET);
				State = 10697; Match(COLUMN_ENCRYPTION_KEY);
				State = 10698; Match(EQUAL);
				State = 10699; _localctx.key_name = Match(STRING);
				State = 10700; Match(COMMA);
				State = 10701; Match(ENCRYPTION_TYPE);
				State = 10702; Match(EQUAL);
				State = 10703;
				_la = _input.La(1);
				if ( !(_la==DETERMINISTIC || _la==RANDOMIZED) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10704; Match(COMMA);
				State = 10705; Match(ALGORITHM);
				State = 10706; Match(EQUAL);
				State = 10707; _localctx.algo = Match(STRING);
				State = 10708; Match(RR_BRACKET);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 10709; column_constraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_modifierContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ROWGUIDCOL() { return GetToken(TSqlParser.ROWGUIDCOL, 0); }
		public ITerminalNode PERSISTED() { return GetToken(TSqlParser.PERSISTED, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode SPARSE() { return GetToken(TSqlParser.SPARSE, 0); }
		public ITerminalNode HIDDEN_KEYWORD() { return GetToken(TSqlParser.HIDDEN_KEYWORD, 0); }
		public ITerminalNode MASKED() { return GetToken(TSqlParser.MASKED, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Column_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_modifier(this);
		}
	}

	[RuleVersion(0)]
	public Column_modifierContext column_modifier() {
		Column_modifierContext _localctx = new Column_modifierContext(_ctx, State);
		EnterRule(_localctx, 880, RULE_column_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10712; id_();
			State = 10713;
			_la = _input.La(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 10735;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1441,_ctx) ) {
			case 1:
				{
				State = 10714; Match(ROWGUIDCOL);
				}
				break;

			case 2:
				{
				State = 10715; Match(PERSISTED);
				}
				break;

			case 3:
				{
				State = 10716; Match(NOT);
				State = 10717; Match(FOR);
				State = 10718; Match(REPLICATION);
				}
				break;

			case 4:
				{
				State = 10719; Match(SPARSE);
				}
				break;

			case 5:
				{
				State = 10720; Match(HIDDEN_KEYWORD);
				}
				break;

			case 6:
				{
				State = 10721; Match(MASKED);
				State = 10733;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1440,_ctx) ) {
				case 1:
					{
					State = 10722; Match(WITH);
					State = 10731;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1439,_ctx) ) {
					case 1:
						{
						State = 10723; Match(FUNCTION);
						State = 10724; Match(EQUAL);
						State = 10725; Match(STRING);
						}
						break;

					case 2:
						{
						State = 10726; Match(LR_BRACKET);
						State = 10727; Match(FUNCTION);
						State = 10728; Match(EQUAL);
						State = 10729; Match(STRING);
						State = 10730; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Materialized_column_definitionContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COMPUTE() { return GetToken(TSqlParser.COMPUTE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode MATERIALIZED() { return GetToken(TSqlParser.MATERIALIZED, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public Materialized_column_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialized_column_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMaterialized_column_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMaterialized_column_definition(this);
		}
	}

	[RuleVersion(0)]
	public Materialized_column_definitionContext materialized_column_definition() {
		Materialized_column_definitionContext _localctx = new Materialized_column_definitionContext(_ctx, State);
		EnterRule(_localctx, 882, RULE_materialized_column_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10737; id_();
			State = 10738;
			_la = _input.La(1);
			if ( !(_la==AS || _la==COMPUTE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 10739; expression(0);
			State = 10743;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1442,_ctx) ) {
			case 1:
				{
				State = 10740; Match(MATERIALIZED);
				}
				break;

			case 2:
				{
				State = 10741; Match(NOT);
				State = 10742; Match(MATERIALIZED);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraintContext : ParserRuleContext {
		public Id_Context constraint;
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public Check_constraintContext check_constraint() {
			return GetRuleContext<Check_constraintContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(TSqlParser.CONSTRAINT, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Primary_key_optionsContext primary_key_options() {
			return GetRuleContext<Primary_key_optionsContext>(0);
		}
		public Foreign_key_optionsContext foreign_key_options() {
			return GetRuleContext<Foreign_key_optionsContext>(0);
		}
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		public ITerminalNode FOREIGN() { return GetToken(TSqlParser.FOREIGN, 0); }
		public Column_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraintContext column_constraint() {
		Column_constraintContext _localctx = new Column_constraintContext(_ctx, State);
		EnterRule(_localctx, 884, RULE_column_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10747;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1443,_ctx) ) {
			case 1:
				{
				State = 10745; Match(CONSTRAINT);
				State = 10746; _localctx.constraint = id_();
				}
				break;
			}
			State = 10765;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1447,_ctx) ) {
			case 1:
				{
				State = 10749; null_notnull();
				}
				break;

			case 2:
				{
				{
				State = 10753;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1444,_ctx) ) {
				case 1:
					{
					State = 10750; Match(PRIMARY);
					State = 10751; Match(KEY);
					}
					break;

				case 2:
					{
					State = 10752; Match(UNIQUE);
					}
					break;
				}
				State = 10756;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1445,_ctx) ) {
				case 1:
					{
					State = 10755; clustered();
					}
					break;
				}
				State = 10758; primary_key_options();
				}
				}
				break;

			case 3:
				{
				{
				State = 10761;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1446,_ctx) ) {
				case 1:
					{
					State = 10759; Match(FOREIGN);
					State = 10760; Match(KEY);
					}
					break;
				}
				State = 10763; foreign_key_options();
				}
				}
				break;

			case 4:
				{
				State = 10764; check_constraint();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_indexContext : ParserRuleContext {
		public Id_Context index_name;
		public Id_Context filestream_filegroup_or_partition_schema_name;
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		public Create_table_index_optionsContext create_table_index_options() {
			return GetRuleContext<Create_table_index_optionsContext>(0);
		}
		public On_partition_or_filegroupContext on_partition_or_filegroup() {
			return GetRuleContext<On_partition_or_filegroupContext>(0);
		}
		public ITerminalNode FILESTREAM_ON() { return GetToken(TSqlParser.FILESTREAM_ON, 0); }
		public ITerminalNode NULL_DOUBLE_QUOTE() { return GetToken(TSqlParser.NULL_DOUBLE_QUOTE, 0); }
		public Column_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_index(this);
		}
	}

	[RuleVersion(0)]
	public Column_indexContext column_index() {
		Column_indexContext _localctx = new Column_indexContext(_ctx, State);
		EnterRule(_localctx, 886, RULE_column_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10767; Match(INDEX);
			State = 10768; _localctx.index_name = id_();
			State = 10770;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1448,_ctx) ) {
			case 1:
				{
				State = 10769; clustered();
				}
				break;
			}
			State = 10773;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1449,_ctx) ) {
			case 1:
				{
				State = 10772; create_table_index_options();
				}
				break;
			}
			State = 10776;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1450,_ctx) ) {
			case 1:
				{
				State = 10775; on_partition_or_filegroup();
				}
				break;
			}
			State = 10783;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1452,_ctx) ) {
			case 1:
				{
				State = 10778; Match(FILESTREAM_ON);
				State = 10781;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1451,_ctx) ) {
				case 1:
					{
					State = 10779; _localctx.filestream_filegroup_or_partition_schema_name = id_();
					}
					break;

				case 2:
					{
					State = 10780; Match(NULL_DOUBLE_QUOTE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_partition_or_filegroupContext : ParserRuleContext {
		public Id_Context partition_scheme_name;
		public Id_Context partition_column_name;
		public Id_Context filegroup;
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode DEFAULT_DOUBLE_QUOTE() { return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public On_partition_or_filegroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_partition_or_filegroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOn_partition_or_filegroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOn_partition_or_filegroup(this);
		}
	}

	[RuleVersion(0)]
	public On_partition_or_filegroupContext on_partition_or_filegroup() {
		On_partition_or_filegroupContext _localctx = new On_partition_or_filegroupContext(_ctx, State);
		EnterRule(_localctx, 888, RULE_on_partition_or_filegroup);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10785; Match(ON);
			State = 10793;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1453,_ctx) ) {
			case 1:
				{
				{
				State = 10786; _localctx.partition_scheme_name = id_();
				State = 10787; Match(LR_BRACKET);
				State = 10788; _localctx.partition_column_name = id_();
				State = 10789; Match(RR_BRACKET);
				}
				}
				break;

			case 2:
				{
				State = 10791; _localctx.filegroup = id_();
				}
				break;

			case 3:
				{
				State = 10792; Match(DEFAULT_DOUBLE_QUOTE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_constraintContext : ParserRuleContext {
		public Id_Context constraint;
		public Column_name_listContext fk;
		public ExpressionContext constant_expr;
		public Id_Context column;
		public Check_constraintContext check_constraint() {
			return GetRuleContext<Check_constraintContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(TSqlParser.CONSTRAINT, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		public Primary_key_optionsContext primary_key_options() {
			return GetRuleContext<Primary_key_optionsContext>(0);
		}
		public ITerminalNode FOREIGN() { return GetToken(TSqlParser.FOREIGN, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Foreign_key_optionsContext foreign_key_options() {
			return GetRuleContext<Foreign_key_optionsContext>(0);
		}
		public ITerminalNode CONNECTION() { return GetToken(TSqlParser.CONNECTION, 0); }
		public Connection_nodeContext[] connection_node() {
			return GetRuleContexts<Connection_nodeContext>();
		}
		public Connection_nodeContext connection_node(int i) {
			return GetRuleContext<Connection_nodeContext>(i);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Table_constraintContext table_constraint() {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, State);
		EnterRule(_localctx, 890, RULE_table_constraint);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10797;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1454,_ctx) ) {
			case 1:
				{
				State = 10795; Match(CONSTRAINT);
				State = 10796; _localctx.constraint = id_();
				}
				break;
			}
			State = 10840;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1459,_ctx) ) {
			case 1:
				{
				{
				State = 10802;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1455,_ctx) ) {
				case 1:
					{
					State = 10799; Match(PRIMARY);
					State = 10800; Match(KEY);
					}
					break;

				case 2:
					{
					State = 10801; Match(UNIQUE);
					}
					break;
				}
				State = 10805;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1456,_ctx) ) {
				case 1:
					{
					State = 10804; clustered();
					}
					break;
				}
				State = 10807; Match(LR_BRACKET);
				State = 10808; column_name_list_with_order();
				State = 10809; Match(RR_BRACKET);
				State = 10810; primary_key_options();
				}
				}
				break;

			case 2:
				{
				{
				State = 10812; Match(FOREIGN);
				State = 10813; Match(KEY);
				State = 10814; Match(LR_BRACKET);
				State = 10815; _localctx.fk = column_name_list();
				State = 10816; Match(RR_BRACKET);
				State = 10817; foreign_key_options();
				}
				}
				break;

			case 3:
				{
				{
				State = 10819; Match(CONNECTION);
				State = 10820; Match(LR_BRACKET);
				State = 10821; connection_node();
				State = 10826;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1457,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10822; Match(COMMA);
						State = 10823; connection_node();
						}
						} 
					}
					State = 10828;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1457,_ctx);
				}
				State = 10829; Match(RR_BRACKET);
				}
				}
				break;

			case 4:
				{
				{
				State = 10831; Match(DEFAULT);
				State = 10832; _localctx.constant_expr = expression(0);
				State = 10833; Match(FOR);
				State = 10834; _localctx.column = id_();
				State = 10837;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1458,_ctx) ) {
				case 1:
					{
					State = 10835; Match(WITH);
					State = 10836; Match(VALUES);
					}
					break;
				}
				}
				}
				break;

			case 5:
				{
				State = 10839; check_constraint();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Connection_nodeContext : ParserRuleContext {
		public Id_Context from_node_table;
		public Id_Context to_node_table;
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Connection_nodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connection_node; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterConnection_node(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitConnection_node(this);
		}
	}

	[RuleVersion(0)]
	public Connection_nodeContext connection_node() {
		Connection_nodeContext _localctx = new Connection_nodeContext(_ctx, State);
		EnterRule(_localctx, 892, RULE_connection_node);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10842; _localctx.from_node_table = id_();
			State = 10843; Match(TO);
			State = 10844; _localctx.to_node_table = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_key_optionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FILLFACTOR() { return GetToken(TSqlParser.FILLFACTOR, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Alter_table_index_optionsContext alter_table_index_options() {
			return GetRuleContext<Alter_table_index_optionsContext>(0);
		}
		public On_partition_or_filegroupContext on_partition_or_filegroup() {
			return GetRuleContext<On_partition_or_filegroupContext>(0);
		}
		public Primary_key_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_key_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrimary_key_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrimary_key_options(this);
		}
	}

	[RuleVersion(0)]
	public Primary_key_optionsContext primary_key_options() {
		Primary_key_optionsContext _localctx = new Primary_key_optionsContext(_ctx, State);
		EnterRule(_localctx, 894, RULE_primary_key_options);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10850;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1460,_ctx) ) {
			case 1:
				{
				State = 10846; Match(WITH);
				State = 10847; Match(FILLFACTOR);
				State = 10848; Match(EQUAL);
				State = 10849; Match(DECIMAL);
				}
				break;
			}
			State = 10853;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1461,_ctx) ) {
			case 1:
				{
				State = 10852; alter_table_index_options();
				}
				break;
			}
			State = 10856;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1462,_ctx) ) {
			case 1:
				{
				State = 10855; on_partition_or_filegroup();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_key_optionsContext : ParserRuleContext {
		public Column_name_listContext pk;
		public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public On_deleteContext[] on_delete() {
			return GetRuleContexts<On_deleteContext>();
		}
		public On_deleteContext on_delete(int i) {
			return GetRuleContext<On_deleteContext>(i);
		}
		public On_updateContext[] on_update() {
			return GetRuleContexts<On_updateContext>();
		}
		public On_updateContext on_update(int i) {
			return GetRuleContext<On_updateContext>(i);
		}
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public Foreign_key_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_key_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterForeign_key_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitForeign_key_options(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_key_optionsContext foreign_key_options() {
		Foreign_key_optionsContext _localctx = new Foreign_key_optionsContext(_ctx, State);
		EnterRule(_localctx, 896, RULE_foreign_key_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10858; Match(REFERENCES);
			State = 10859; table_name();
			State = 10860; Match(LR_BRACKET);
			State = 10861; _localctx.pk = column_name_list();
			State = 10862; Match(RR_BRACKET);
			State = 10867;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1464,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 10865;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1463,_ctx) ) {
					case 1:
						{
						State = 10863; on_delete();
						}
						break;

					case 2:
						{
						State = 10864; on_update();
						}
						break;
					}
					} 
				}
				State = 10869;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1464,_ctx);
			}
			State = 10873;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1465,_ctx) ) {
			case 1:
				{
				State = 10870; Match(NOT);
				State = 10871; Match(FOR);
				State = 10872; Match(REPLICATION);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Check_constraintContext : ParserRuleContext {
		public ITerminalNode CHECK() { return GetToken(TSqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public Check_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_check_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCheck_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCheck_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Check_constraintContext check_constraint() {
		Check_constraintContext _localctx = new Check_constraintContext(_ctx, State);
		EnterRule(_localctx, 898, RULE_check_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10875; Match(CHECK);
			State = 10879;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1466,_ctx) ) {
			case 1:
				{
				State = 10876; Match(NOT);
				State = 10877; Match(FOR);
				State = 10878; Match(REPLICATION);
				}
				break;
			}
			State = 10881; Match(LR_BRACKET);
			State = 10882; search_condition(0);
			State = 10883; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_deleteContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode ACTION() { return GetToken(TSqlParser.ACTION, 0); }
		public ITerminalNode CASCADE() { return GetToken(TSqlParser.CASCADE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public On_deleteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_delete; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOn_delete(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOn_delete(this);
		}
	}

	[RuleVersion(0)]
	public On_deleteContext on_delete() {
		On_deleteContext _localctx = new On_deleteContext(_ctx, State);
		EnterRule(_localctx, 900, RULE_on_delete);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10885; Match(ON);
			State = 10886; Match(DELETE);
			State = 10894;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1467,_ctx) ) {
			case 1:
				{
				State = 10887; Match(NO);
				State = 10888; Match(ACTION);
				}
				break;

			case 2:
				{
				State = 10889; Match(CASCADE);
				}
				break;

			case 3:
				{
				State = 10890; Match(SET);
				State = 10891; Match(NULL_);
				}
				break;

			case 4:
				{
				State = 10892; Match(SET);
				State = 10893; Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_updateContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode ACTION() { return GetToken(TSqlParser.ACTION, 0); }
		public ITerminalNode CASCADE() { return GetToken(TSqlParser.CASCADE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public On_updateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_update; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOn_update(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOn_update(this);
		}
	}

	[RuleVersion(0)]
	public On_updateContext on_update() {
		On_updateContext _localctx = new On_updateContext(_ctx, State);
		EnterRule(_localctx, 902, RULE_on_update);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10896; Match(ON);
			State = 10897; Match(UPDATE);
			State = 10905;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1468,_ctx) ) {
			case 1:
				{
				State = 10898; Match(NO);
				State = 10899; Match(ACTION);
				}
				break;

			case 2:
				{
				State = 10900; Match(CASCADE);
				}
				break;

			case 3:
				{
				State = 10901; Match(SET);
				State = 10902; Match(NULL_);
				}
				break;

			case 4:
				{
				State = 10903; Match(SET);
				State = 10904; Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_index_optionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Alter_table_index_optionContext[] alter_table_index_option() {
			return GetRuleContexts<Alter_table_index_optionContext>();
		}
		public Alter_table_index_optionContext alter_table_index_option(int i) {
			return GetRuleContext<Alter_table_index_optionContext>(i);
		}
		public Alter_table_index_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_index_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_index_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_index_options(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_index_optionsContext alter_table_index_options() {
		Alter_table_index_optionsContext _localctx = new Alter_table_index_optionsContext(_ctx, State);
		EnterRule(_localctx, 904, RULE_alter_table_index_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10907; Match(WITH);
			State = 10908; Match(LR_BRACKET);
			State = 10909; alter_table_index_option();
			State = 10914;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1469,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 10910; Match(COMMA);
					State = 10911; alter_table_index_option();
					}
					} 
				}
				State = 10916;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1469,_ctx);
			}
			State = 10917; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_index_optionContext : ParserRuleContext {
		public IToken max_degree_of_parallelism;
		public IToken times;
		public ITerminalNode PAD_INDEX() { return GetToken(TSqlParser.PAD_INDEX, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode FILLFACTOR() { return GetToken(TSqlParser.FILLFACTOR, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode IGNORE_DUP_KEY() { return GetToken(TSqlParser.IGNORE_DUP_KEY, 0); }
		public ITerminalNode STATISTICS_NORECOMPUTE() { return GetToken(TSqlParser.STATISTICS_NORECOMPUTE, 0); }
		public ITerminalNode ALLOW_ROW_LOCKS() { return GetToken(TSqlParser.ALLOW_ROW_LOCKS, 0); }
		public ITerminalNode ALLOW_PAGE_LOCKS() { return GetToken(TSqlParser.ALLOW_PAGE_LOCKS, 0); }
		public ITerminalNode OPTIMIZE_FOR_SEQUENTIAL_KEY() { return GetToken(TSqlParser.OPTIMIZE_FOR_SEQUENTIAL_KEY, 0); }
		public ITerminalNode SORT_IN_TEMPDB() { return GetToken(TSqlParser.SORT_IN_TEMPDB, 0); }
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode DATA_COMPRESSION() { return GetToken(TSqlParser.DATA_COMPRESSION, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		public ITerminalNode PAGE() { return GetToken(TSqlParser.PAGE, 0); }
		public ITerminalNode COLUMNSTORE() { return GetToken(TSqlParser.COLUMNSTORE, 0); }
		public ITerminalNode COLUMNSTORE_ARCHIVE() { return GetToken(TSqlParser.COLUMNSTORE_ARCHIVE, 0); }
		public On_partitionsContext on_partitions() {
			return GetRuleContext<On_partitionsContext>(0);
		}
		public ITerminalNode XML_COMPRESSION() { return GetToken(TSqlParser.XML_COMPRESSION, 0); }
		public ITerminalNode DISTRIBUTION() { return GetToken(TSqlParser.DISTRIBUTION, 0); }
		public ITerminalNode HASH() { return GetToken(TSqlParser.HASH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode CLUSTERED() { return GetToken(TSqlParser.CLUSTERED, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public ITerminalNode[] ASC() { return GetTokens(TSqlParser.ASC); }
		public ITerminalNode ASC(int i) {
			return GetToken(TSqlParser.ASC, i);
		}
		public ITerminalNode[] DESC() { return GetTokens(TSqlParser.DESC); }
		public ITerminalNode DESC(int i) {
			return GetToken(TSqlParser.DESC, i);
		}
		public ITerminalNode ONLINE() { return GetToken(TSqlParser.ONLINE, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Low_priority_lock_waitContext low_priority_lock_wait() {
			return GetRuleContext<Low_priority_lock_waitContext>(0);
		}
		public ITerminalNode RESUMABLE() { return GetToken(TSqlParser.RESUMABLE, 0); }
		public ITerminalNode MAX_DURATION() { return GetToken(TSqlParser.MAX_DURATION, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public Alter_table_index_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_index_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_index_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_index_option(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_index_optionContext alter_table_index_option() {
		Alter_table_index_optionContext _localctx = new Alter_table_index_optionContext(_ctx, State);
		EnterRule(_localctx, 906, RULE_alter_table_index_option);
		int _la;
		try {
			int _alt;
			State = 11005;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1478,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10919; Match(PAD_INDEX);
				State = 10920; Match(EQUAL);
				State = 10921; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10922; Match(FILLFACTOR);
				State = 10923; Match(EQUAL);
				State = 10924; Match(DECIMAL);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10925; Match(IGNORE_DUP_KEY);
				State = 10926; Match(EQUAL);
				State = 10927; on_off();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10928; Match(STATISTICS_NORECOMPUTE);
				State = 10929; Match(EQUAL);
				State = 10930; on_off();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10931; Match(ALLOW_ROW_LOCKS);
				State = 10932; Match(EQUAL);
				State = 10933; on_off();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10934; Match(ALLOW_PAGE_LOCKS);
				State = 10935; Match(EQUAL);
				State = 10936; on_off();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10937; Match(OPTIMIZE_FOR_SEQUENTIAL_KEY);
				State = 10938; Match(EQUAL);
				State = 10939; on_off();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10940; Match(SORT_IN_TEMPDB);
				State = 10941; Match(EQUAL);
				State = 10942; on_off();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 10943; Match(MAXDOP);
				State = 10944; Match(EQUAL);
				State = 10945; _localctx.max_degree_of_parallelism = Match(DECIMAL);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 10946; Match(DATA_COMPRESSION);
				State = 10947; Match(EQUAL);
				State = 10948;
				_la = _input.La(1);
				if ( !(_la==COLUMNSTORE || _la==COLUMNSTORE_ARCHIVE || _la==NONE || _la==PAGE || _la==ROW) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10950;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1470,_ctx) ) {
				case 1:
					{
					State = 10949; on_partitions();
					}
					break;
				}
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 10952; Match(XML_COMPRESSION);
				State = 10953; Match(EQUAL);
				State = 10954; on_off();
				State = 10956;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1471,_ctx) ) {
				case 1:
					{
					State = 10955; on_partitions();
					}
					break;
				}
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 10958; Match(DISTRIBUTION);
				State = 10959; Match(EQUAL);
				State = 10960; Match(HASH);
				State = 10961; Match(LR_BRACKET);
				State = 10962; id_();
				State = 10963; Match(RR_BRACKET);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 10965; Match(CLUSTERED);
				State = 10966; Match(INDEX);
				State = 10967; Match(LR_BRACKET);
				State = 10968; id_();
				State = 10970;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1472,_ctx) ) {
				case 1:
					{
					State = 10969;
					_la = _input.La(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 10979;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1474,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10972; Match(COMMA);
						State = 10973; id_();
						State = 10975;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1473,_ctx) ) {
						case 1:
							{
							State = 10974;
							_la = _input.La(1);
							if ( !(_la==ASC || _la==DESC) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;
						}
						}
						} 
					}
					State = 10981;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1474,_ctx);
				}
				State = 10982; Match(RR_BRACKET);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 10984; Match(ONLINE);
				State = 10985; Match(EQUAL);
				State = 10994;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1476,_ctx) ) {
				case 1:
					{
					State = 10986; Match(ON);
					State = 10991;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1475,_ctx) ) {
					case 1:
						{
						State = 10987; Match(LR_BRACKET);
						State = 10988; low_priority_lock_wait();
						State = 10989; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 10993; Match(OFF);
					}
					break;
				}
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 10996; Match(RESUMABLE);
				State = 10997; Match(EQUAL);
				State = 10998; on_off();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 10999; Match(MAX_DURATION);
				State = 11000; Match(EQUAL);
				State = 11001; _localctx.times = Match(DECIMAL);
				State = 11003;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1477,_ctx) ) {
				case 1:
					{
					State = 11002; Match(MINUTES);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_cursorContext : ParserRuleContext {
		public ITerminalNode DECLARE() { return GetToken(TSqlParser.DECLARE, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode CURSOR() { return GetToken(TSqlParser.CURSOR, 0); }
		public ITerminalNode[] FOR() { return GetTokens(TSqlParser.FOR); }
		public ITerminalNode FOR(int i) {
			return GetToken(TSqlParser.FOR, i);
		}
		public Select_statement_standaloneContext select_statement_standalone() {
			return GetRuleContext<Select_statement_standaloneContext>(0);
		}
		public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return GetRuleContext<Declare_set_cursor_commonContext>(0);
		}
		public ITerminalNode SCROLL() { return GetToken(TSqlParser.SCROLL, 0); }
		public ITerminalNode SEMI_SENSITIVE() { return GetToken(TSqlParser.SEMI_SENSITIVE, 0); }
		public ITerminalNode INSENSITIVE() { return GetToken(TSqlParser.INSENSITIVE, 0); }
		public ITerminalNode READ() { return GetToken(TSqlParser.READ, 0); }
		public ITerminalNode ONLY() { return GetToken(TSqlParser.ONLY, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Declare_cursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_cursor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_cursor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_cursor(this);
		}
	}

	[RuleVersion(0)]
	public Declare_cursorContext declare_cursor() {
		Declare_cursorContext _localctx = new Declare_cursorContext(_ctx, State);
		EnterRule(_localctx, 908, RULE_declare_cursor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11007; Match(DECLARE);
			State = 11008; cursor_name();
			State = 11040;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1486,_ctx) ) {
			case 1:
				{
				State = 11009; Match(CURSOR);
				State = 11019;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1481,_ctx) ) {
				case 1:
					{
					State = 11010; declare_set_cursor_common();
					State = 11017;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1480,_ctx) ) {
					case 1:
						{
						State = 11011; Match(FOR);
						State = 11012; Match(UPDATE);
						State = 11015;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1479,_ctx) ) {
						case 1:
							{
							State = 11013; Match(OF);
							State = 11014; column_name_list();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 11022;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1482,_ctx) ) {
				case 1:
					{
					State = 11021;
					_la = _input.La(1);
					if ( !(_la==INSENSITIVE || _la==SEMI_SENSITIVE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 11025;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1483,_ctx) ) {
				case 1:
					{
					State = 11024; Match(SCROLL);
					}
					break;
				}
				State = 11027; Match(CURSOR);
				State = 11028; Match(FOR);
				State = 11029; select_statement_standalone();
				State = 11038;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1485,_ctx) ) {
				case 1:
					{
					State = 11030; Match(FOR);
					State = 11036;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1484,_ctx) ) {
					case 1:
						{
						State = 11031; Match(READ);
						State = 11032; Match(ONLY);
						}
						break;

					case 2:
						{
						State = 11033; Match(UPDATE);
						}
						break;

					case 3:
						{
						{
						State = 11034; Match(OF);
						State = 11035; column_name_list();
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			State = 11043;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1487,_ctx) ) {
			case 1:
				{
				State = 11042; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_set_cursor_commonContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Select_statement_standaloneContext select_statement_standalone() {
			return GetRuleContext<Select_statement_standaloneContext>(0);
		}
		public Declare_set_cursor_common_partialContext[] declare_set_cursor_common_partial() {
			return GetRuleContexts<Declare_set_cursor_common_partialContext>();
		}
		public Declare_set_cursor_common_partialContext declare_set_cursor_common_partial(int i) {
			return GetRuleContext<Declare_set_cursor_common_partialContext>(i);
		}
		public Declare_set_cursor_commonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_set_cursor_common; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_set_cursor_common(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_set_cursor_common(this);
		}
	}

	[RuleVersion(0)]
	public Declare_set_cursor_commonContext declare_set_cursor_common() {
		Declare_set_cursor_commonContext _localctx = new Declare_set_cursor_commonContext(_ctx, State);
		EnterRule(_localctx, 910, RULE_declare_set_cursor_common);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11048;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1488,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11045; declare_set_cursor_common_partial();
					}
					} 
				}
				State = 11050;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1488,_ctx);
			}
			State = 11051; Match(FOR);
			State = 11052; select_statement_standalone();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_set_cursor_common_partialContext : ParserRuleContext {
		public ITerminalNode LOCAL() { return GetToken(TSqlParser.LOCAL, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public ITerminalNode FORWARD_ONLY() { return GetToken(TSqlParser.FORWARD_ONLY, 0); }
		public ITerminalNode SCROLL() { return GetToken(TSqlParser.SCROLL, 0); }
		public ITerminalNode STATIC() { return GetToken(TSqlParser.STATIC, 0); }
		public ITerminalNode KEYSET() { return GetToken(TSqlParser.KEYSET, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(TSqlParser.DYNAMIC, 0); }
		public ITerminalNode FAST_FORWARD() { return GetToken(TSqlParser.FAST_FORWARD, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode SCROLL_LOCKS() { return GetToken(TSqlParser.SCROLL_LOCKS, 0); }
		public ITerminalNode OPTIMISTIC() { return GetToken(TSqlParser.OPTIMISTIC, 0); }
		public ITerminalNode TYPE_WARNING() { return GetToken(TSqlParser.TYPE_WARNING, 0); }
		public Declare_set_cursor_common_partialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_set_cursor_common_partial; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_set_cursor_common_partial(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_set_cursor_common_partial(this);
		}
	}

	[RuleVersion(0)]
	public Declare_set_cursor_common_partialContext declare_set_cursor_common_partial() {
		Declare_set_cursor_common_partialContext _localctx = new Declare_set_cursor_common_partialContext(_ctx, State);
		EnterRule(_localctx, 912, RULE_declare_set_cursor_common_partial);
		int _la;
		try {
			State = 11059;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1489,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11054;
				_la = _input.La(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11055;
				_la = _input.La(1);
				if ( !(_la==FORWARD_ONLY || _la==SCROLL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11056;
				_la = _input.La(1);
				if ( !(_la==DYNAMIC || _la==FAST_FORWARD || _la==KEYSET || _la==STATIC) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11057;
				_la = _input.La(1);
				if ( !(_la==OPTIMISTIC || _la==READ_ONLY || _la==SCROLL_LOCKS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11058; Match(TYPE_WARNING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fetch_cursorContext : ParserRuleContext {
		public ITerminalNode FETCH() { return GetToken(TSqlParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public ITerminalNode PRIOR() { return GetToken(TSqlParser.PRIOR, 0); }
		public ITerminalNode FIRST() { return GetToken(TSqlParser.FIRST, 0); }
		public ITerminalNode LAST() { return GetToken(TSqlParser.LAST, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ABSOLUTE() { return GetToken(TSqlParser.ABSOLUTE, 0); }
		public ITerminalNode RELATIVE() { return GetToken(TSqlParser.RELATIVE, 0); }
		public Fetch_cursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetch_cursor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFetch_cursor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFetch_cursor(this);
		}
	}

	[RuleVersion(0)]
	public Fetch_cursorContext fetch_cursor() {
		Fetch_cursorContext _localctx = new Fetch_cursorContext(_ctx, State);
		EnterRule(_localctx, 914, RULE_fetch_cursor);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11061; Match(FETCH);
			State = 11071;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1491,_ctx) ) {
			case 1:
				{
				State = 11068;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1490,_ctx) ) {
				case 1:
					{
					State = 11062; Match(NEXT);
					}
					break;

				case 2:
					{
					State = 11063; Match(PRIOR);
					}
					break;

				case 3:
					{
					State = 11064; Match(FIRST);
					}
					break;

				case 4:
					{
					State = 11065; Match(LAST);
					}
					break;

				case 5:
					{
					State = 11066;
					_la = _input.La(1);
					if ( !(_la==ABSOLUTE || _la==RELATIVE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 11067; expression(0);
					}
					break;
				}
				State = 11070; Match(FROM);
				}
				break;
			}
			State = 11074;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1492,_ctx) ) {
			case 1:
				{
				State = 11073; Match(GLOBAL);
				}
				break;
			}
			State = 11076; cursor_name();
			State = 11086;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1494,_ctx) ) {
			case 1:
				{
				State = 11077; Match(INTO);
				State = 11078; Match(LOCAL_ID);
				State = 11083;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1493,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 11079; Match(COMMA);
						State = 11080; Match(LOCAL_ID);
						}
						} 
					}
					State = 11085;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1493,_ctx);
				}
				}
				break;
			}
			State = 11089;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1495,_ctx) ) {
			case 1:
				{
				State = 11088; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_specialContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Constant_LOCAL_IDContext constant_LOCAL_ID() {
			return GetRuleContext<Constant_LOCAL_IDContext>(0);
		}
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public ITerminalNode IO() { return GetToken(TSqlParser.IO, 0); }
		public ITerminalNode TIME() { return GetToken(TSqlParser.TIME, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode PROFILE() { return GetToken(TSqlParser.PROFILE, 0); }
		public ITerminalNode ROWCOUNT() { return GetToken(TSqlParser.ROWCOUNT, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode TEXTSIZE() { return GetToken(TSqlParser.TEXTSIZE, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(TSqlParser.TRANSACTION, 0); }
		public ITerminalNode ISOLATION() { return GetToken(TSqlParser.ISOLATION, 0); }
		public ITerminalNode LEVEL() { return GetToken(TSqlParser.LEVEL, 0); }
		public ITerminalNode READ() { return GetToken(TSqlParser.READ, 0); }
		public ITerminalNode UNCOMMITTED() { return GetToken(TSqlParser.UNCOMMITTED, 0); }
		public ITerminalNode COMMITTED() { return GetToken(TSqlParser.COMMITTED, 0); }
		public ITerminalNode REPEATABLE() { return GetToken(TSqlParser.REPEATABLE, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(TSqlParser.SNAPSHOT, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(TSqlParser.SERIALIZABLE, 0); }
		public ITerminalNode IDENTITY_INSERT() { return GetToken(TSqlParser.IDENTITY_INSERT, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Special_listContext[] special_list() {
			return GetRuleContexts<Special_listContext>();
		}
		public Special_listContext special_list(int i) {
			return GetRuleContext<Special_listContext>(i);
		}
		public Modify_methodContext modify_method() {
			return GetRuleContext<Modify_methodContext>(0);
		}
		public Set_specialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_special; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSet_special(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSet_special(this);
		}
	}

	[RuleVersion(0)]
	public Set_specialContext set_special() {
		Set_specialContext _localctx = new Set_specialContext(_ctx, State);
		EnterRule(_localctx, 916, RULE_set_special);
		int _la;
		try {
			int _alt;
			State = 11158;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1505,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11091; Match(SET);
				State = 11092; id_();
				State = 11096;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1496,_ctx) ) {
				case 1:
					{
					State = 11093; id_();
					}
					break;

				case 2:
					{
					State = 11094; constant_LOCAL_ID();
					}
					break;

				case 3:
					{
					State = 11095; on_off();
					}
					break;
				}
				State = 11099;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1497,_ctx) ) {
				case 1:
					{
					State = 11098; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11101; Match(SET);
				State = 11102; Match(STATISTICS);
				State = 11103;
				_la = _input.La(1);
				if ( !(_la==IO || _la==PROFILE || _la==TIME || _la==XML) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11104; on_off();
				State = 11106;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1498,_ctx) ) {
				case 1:
					{
					State = 11105; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11108; Match(SET);
				State = 11109; Match(ROWCOUNT);
				State = 11110;
				_la = _input.La(1);
				if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11112;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1499,_ctx) ) {
				case 1:
					{
					State = 11111; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11114; Match(SET);
				State = 11115; Match(TEXTSIZE);
				State = 11116; Match(DECIMAL);
				State = 11118;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1500,_ctx) ) {
				case 1:
					{
					State = 11117; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11120; Match(SET);
				State = 11121; Match(TRANSACTION);
				State = 11122; Match(ISOLATION);
				State = 11123; Match(LEVEL);
				State = 11133;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1501,_ctx) ) {
				case 1:
					{
					State = 11124; Match(READ);
					State = 11125; Match(UNCOMMITTED);
					}
					break;

				case 2:
					{
					State = 11126; Match(READ);
					State = 11127; Match(COMMITTED);
					}
					break;

				case 3:
					{
					State = 11128; Match(REPEATABLE);
					State = 11129; Match(READ);
					}
					break;

				case 4:
					{
					State = 11130; Match(SNAPSHOT);
					}
					break;

				case 5:
					{
					State = 11131; Match(SERIALIZABLE);
					}
					break;

				case 6:
					{
					State = 11132; Match(DECIMAL);
					}
					break;
				}
				State = 11136;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1502,_ctx) ) {
				case 1:
					{
					State = 11135; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 11138; Match(SET);
				State = 11139; Match(IDENTITY_INSERT);
				State = 11140; table_name();
				State = 11141; on_off();
				State = 11143;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1503,_ctx) ) {
				case 1:
					{
					State = 11142; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 11145; Match(SET);
				State = 11146; special_list();
				State = 11151;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1504,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 11147; Match(COMMA);
						State = 11148; special_list();
						}
						} 
					}
					State = 11153;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1504,_ctx);
				}
				State = 11154; on_off();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 11156; Match(SET);
				State = 11157; modify_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Special_listContext : ParserRuleContext {
		public ITerminalNode ANSI_NULLS() { return GetToken(TSqlParser.ANSI_NULLS, 0); }
		public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public ITerminalNode ANSI_PADDING() { return GetToken(TSqlParser.ANSI_PADDING, 0); }
		public ITerminalNode ANSI_WARNINGS() { return GetToken(TSqlParser.ANSI_WARNINGS, 0); }
		public ITerminalNode ANSI_DEFAULTS() { return GetToken(TSqlParser.ANSI_DEFAULTS, 0); }
		public ITerminalNode ANSI_NULL_DFLT_OFF() { return GetToken(TSqlParser.ANSI_NULL_DFLT_OFF, 0); }
		public ITerminalNode ANSI_NULL_DFLT_ON() { return GetToken(TSqlParser.ANSI_NULL_DFLT_ON, 0); }
		public ITerminalNode ARITHABORT() { return GetToken(TSqlParser.ARITHABORT, 0); }
		public ITerminalNode ARITHIGNORE() { return GetToken(TSqlParser.ARITHIGNORE, 0); }
		public ITerminalNode CONCAT_NULL_YIELDS_NULL() { return GetToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public ITerminalNode CURSOR_CLOSE_ON_COMMIT() { return GetToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public ITerminalNode FMTONLY() { return GetToken(TSqlParser.FMTONLY, 0); }
		public ITerminalNode FORCEPLAN() { return GetToken(TSqlParser.FORCEPLAN, 0); }
		public ITerminalNode IMPLICIT_TRANSACTIONS() { return GetToken(TSqlParser.IMPLICIT_TRANSACTIONS, 0); }
		public ITerminalNode NOCOUNT() { return GetToken(TSqlParser.NOCOUNT, 0); }
		public ITerminalNode NOEXEC() { return GetToken(TSqlParser.NOEXEC, 0); }
		public ITerminalNode NUMERIC_ROUNDABORT() { return GetToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
		public ITerminalNode PARSEONLY() { return GetToken(TSqlParser.PARSEONLY, 0); }
		public ITerminalNode REMOTE_PROC_TRANSACTIONS() { return GetToken(TSqlParser.REMOTE_PROC_TRANSACTIONS, 0); }
		public ITerminalNode SHOWPLAN_ALL() { return GetToken(TSqlParser.SHOWPLAN_ALL, 0); }
		public ITerminalNode SHOWPLAN_TEXT() { return GetToken(TSqlParser.SHOWPLAN_TEXT, 0); }
		public ITerminalNode SHOWPLAN_XML() { return GetToken(TSqlParser.SHOWPLAN_XML, 0); }
		public ITerminalNode XACT_ABORT() { return GetToken(TSqlParser.XACT_ABORT, 0); }
		public Special_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_special_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSpecial_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSpecial_list(this);
		}
	}

	[RuleVersion(0)]
	public Special_listContext special_list() {
		Special_listContext _localctx = new Special_listContext(_ctx, State);
		EnterRule(_localctx, 918, RULE_special_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11160;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANSI_DEFAULTS) | (1L << ANSI_NULLS) | (1L << ANSI_NULL_DFLT_OFF) | (1L << ANSI_NULL_DFLT_ON) | (1L << ANSI_PADDING) | (1L << ANSI_WARNINGS) | (1L << ARITHABORT) | (1L << ARITHIGNORE))) != 0) || _la==CONCAT_NULL_YIELDS_NULL || _la==CURSOR_CLOSE_ON_COMMIT || _la==FMTONLY || _la==FORCEPLAN || _la==IMPLICIT_TRANSACTIONS || ((((_la - 607)) & ~0x3f) == 0 && ((1L << (_la - 607)) & ((1L << (NOCOUNT - 607)) | (1L << (NOEXEC - 607)) | (1L << (NUMERIC_ROUNDABORT - 607)))) != 0) || _la==PARSEONLY || _la==QUOTED_IDENTIFIER || _la==REMOTE_PROC_TRANSACTIONS || ((((_la - 909)) & ~0x3f) == 0 && ((1L << (_la - 909)) & ((1L << (SHOWPLAN_ALL - 909)) | (1L << (SHOWPLAN_TEXT - 909)) | (1L << (SHOWPLAN_XML - 909)))) != 0) || _la==XACT_ABORT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_LOCAL_IDContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Constant_LOCAL_IDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_LOCAL_ID; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterConstant_LOCAL_ID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitConstant_LOCAL_ID(this);
		}
	}

	[RuleVersion(0)]
	public Constant_LOCAL_IDContext constant_LOCAL_ID() {
		Constant_LOCAL_IDContext _localctx = new Constant_LOCAL_IDContext(_ctx, State);
		EnterRule(_localctx, 920, RULE_constant_LOCAL_ID);
		try {
			State = 11164;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1506,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11162; constant();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11163; Match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken op;
		public Primitive_expressionContext primitive_expression() {
			return GetRuleContext<Primitive_expressionContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Value_callContext value_call() {
			return GetRuleContext<Value_callContext>(0);
		}
		public Query_callContext query_call() {
			return GetRuleContext<Query_callContext>(0);
		}
		public Exist_callContext exist_call() {
			return GetRuleContext<Exist_callContext>(0);
		}
		public Modify_callContext modify_call() {
			return GetRuleContext<Modify_callContext>(0);
		}
		public Hierarchyid_callContext hierarchyid_call() {
			return GetRuleContext<Hierarchyid_callContext>(0);
		}
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Case_expressionContext case_expression() {
			return GetRuleContext<Case_expressionContext>(0);
		}
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public Bracket_expressionContext bracket_expression() {
			return GetRuleContext<Bracket_expressionContext>(0);
		}
		public Unary_operator_expressionContext unary_operator_expression() {
			return GetRuleContext<Unary_operator_expressionContext>(0);
		}
		public Time_zoneContext time_zone() {
			return GetRuleContext<Time_zoneContext>(0);
		}
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ITerminalNode DOLLAR_ACTION() { return GetToken(TSqlParser.DOLLAR_ACTION, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 922;
		EnterRecursionRule(_localctx, 922, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11175;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1507,_ctx) ) {
			case 1:
				{
				State = 11167; primitive_expression();
				}
				break;

			case 2:
				{
				State = 11168; function_call();
				}
				break;

			case 3:
				{
				State = 11169; case_expression();
				}
				break;

			case 4:
				{
				State = 11170; full_column_name();
				}
				break;

			case 5:
				{
				State = 11171; bracket_expression();
				}
				break;

			case 6:
				{
				State = 11172; unary_operator_expression();
				}
				break;

			case 7:
				{
				State = 11173; over_clause();
				}
				break;

			case 8:
				{
				State = 11174; Match(DOLLAR_ACTION);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 11201;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1510,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 11199;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1509,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 11177;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 11178;
						_localctx.op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 1214)) & ~0x3f) == 0 && ((1L << (_la - 1214)) & ((1L << (STAR - 1214)) | (1L << (DIVIDE - 1214)) | (1L << (MODULE - 1214)))) != 0)) ) {
							_localctx.op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 11179; expression(6);
						}
						break;

					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 11180;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 11181;
						_localctx.op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 1202)) & ~0x3f) == 0 && ((1L << (_la - 1202)) & ((1L << (DOUBLE_BAR - 1202)) | (1L << (PLUS - 1202)) | (1L << (MINUS - 1202)) | (1L << (BIT_OR - 1202)) | (1L << (BIT_AND - 1202)) | (1L << (BIT_XOR - 1202)))) != 0)) ) {
							_localctx.op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 11182; expression(5);
						}
						break;

					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 11183;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 11184; Match(DOT);
						State = 11189;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1508,_ctx) ) {
						case 1:
							{
							State = 11185; value_call();
							}
							break;

						case 2:
							{
							State = 11186; query_call();
							}
							break;

						case 3:
							{
							State = 11187; exist_call();
							}
							break;

						case 4:
							{
							State = 11188; modify_call();
							}
							break;
						}
						}
						break;

					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 11191;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 11192; Match(DOT);
						State = 11193; hierarchyid_call();
						}
						break;

					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 11194;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 11195; Match(COLLATE);
						State = 11196; id_();
						}
						break;

					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 11197;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 11198; time_zone();
						}
						break;
					}
					} 
				}
				State = 11203;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1510,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ITerminalNode PLACEHOLDER() { return GetToken(TSqlParser.PLACEHOLDER, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(_ctx, State);
		EnterRule(_localctx, 924, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11204; Match(PLACEHOLDER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Time_zoneContext : ParserRuleContext {
		public ITerminalNode AT_KEYWORD() { return GetToken(TSqlParser.AT_KEYWORD, 0); }
		public ITerminalNode TIME() { return GetToken(TSqlParser.TIME, 0); }
		public ITerminalNode ZONE() { return GetToken(TSqlParser.ZONE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Time_zoneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time_zone; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTime_zone(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTime_zone(this);
		}
	}

	[RuleVersion(0)]
	public Time_zoneContext time_zone() {
		Time_zoneContext _localctx = new Time_zoneContext(_ctx, State);
		EnterRule(_localctx, 926, RULE_time_zone);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11206; Match(AT_KEYWORD);
			State = 11207; Match(TIME);
			State = 11208; Match(ZONE);
			State = 11209; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primitive_expressionContext : ParserRuleContext {
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Primitive_constantContext primitive_constant() {
			return GetRuleContext<Primitive_constantContext>(0);
		}
		public Primitive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrimitive_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrimitive_expression(this);
		}
	}

	[RuleVersion(0)]
	public Primitive_expressionContext primitive_expression() {
		Primitive_expressionContext _localctx = new Primitive_expressionContext(_ctx, State);
		EnterRule(_localctx, 928, RULE_primitive_expression);
		try {
			State = 11215;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1511,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11211; Match(DEFAULT);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11212; Match(NULL_);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11213; Match(LOCAL_ID);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11214; primitive_constant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_expressionContext : ParserRuleContext {
		public ExpressionContext caseExpr;
		public ExpressionContext elseExpr;
		public ITerminalNode CASE() { return GetToken(TSqlParser.CASE, 0); }
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Switch_sectionContext[] switch_section() {
			return GetRuleContexts<Switch_sectionContext>();
		}
		public Switch_sectionContext switch_section(int i) {
			return GetRuleContext<Switch_sectionContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(TSqlParser.ELSE, 0); }
		public Switch_search_condition_sectionContext[] switch_search_condition_section() {
			return GetRuleContexts<Switch_search_condition_sectionContext>();
		}
		public Switch_search_condition_sectionContext switch_search_condition_section(int i) {
			return GetRuleContext<Switch_search_condition_sectionContext>(i);
		}
		public Case_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCase_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCase_expression(this);
		}
	}

	[RuleVersion(0)]
	public Case_expressionContext case_expression() {
		Case_expressionContext _localctx = new Case_expressionContext(_ctx, State);
		EnterRule(_localctx, 930, RULE_case_expression);
		try {
			int _alt;
			State = 11242;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1516,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11217; Match(CASE);
				State = 11218; _localctx.caseExpr = expression(0);
				State = 11220;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 11219; switch_section();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 11222;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1512,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 11226;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1513,_ctx) ) {
				case 1:
					{
					State = 11224; Match(ELSE);
					State = 11225; _localctx.elseExpr = expression(0);
					}
					break;
				}
				State = 11228; Match(END);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11230; Match(CASE);
				State = 11232;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 11231; switch_search_condition_section();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 11234;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1514,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 11238;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1515,_ctx) ) {
				case 1:
					{
					State = 11236; Match(ELSE);
					State = 11237; _localctx.elseExpr = expression(0);
					}
					break;
				}
				State = 11240; Match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operator_expressionContext : ParserRuleContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Unary_operator_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUnary_operator_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUnary_operator_expression(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operator_expressionContext unary_operator_expression() {
		Unary_operator_expressionContext _localctx = new Unary_operator_expressionContext(_ctx, State);
		EnterRule(_localctx, 932, RULE_unary_operator_expression);
		int _la;
		try {
			State = 11248;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1517,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11244; Match(BIT_NOT);
				State = 11245; expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11246;
				_localctx.op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					_localctx.op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11247; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bracket_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Bracket_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracket_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBracket_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBracket_expression(this);
		}
	}

	[RuleVersion(0)]
	public Bracket_expressionContext bracket_expression() {
		Bracket_expressionContext _localctx = new Bracket_expressionContext(_ctx, State);
		EnterRule(_localctx, 934, RULE_bracket_expression);
		try {
			State = 11258;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1518,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11250; Match(LR_BRACKET);
				State = 11251; expression(0);
				State = 11252; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11254; Match(LR_BRACKET);
				State = 11255; subquery();
				State = 11256; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubqueryContext : ParserRuleContext {
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSubquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSubquery(this);
		}
	}

	[RuleVersion(0)]
	public SubqueryContext subquery() {
		SubqueryContext _localctx = new SubqueryContext(_ctx, State);
		EnterRule(_localctx, 936, RULE_subquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11260; select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_expressionContext : ParserRuleContext {
		public Common_table_expressionContext _common_table_expression;
		public IList<Common_table_expressionContext> _ctes = new List<Common_table_expressionContext>();
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Common_table_expressionContext[] common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		public With_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWith_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWith_expression(this);
		}
	}

	[RuleVersion(0)]
	public With_expressionContext with_expression() {
		With_expressionContext _localctx = new With_expressionContext(_ctx, State);
		EnterRule(_localctx, 938, RULE_with_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11262; Match(WITH);
			State = 11263; _localctx._common_table_expression = common_table_expression();
			_localctx._ctes.Add(_localctx._common_table_expression);
			State = 11268;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1519,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11264; Match(COMMA);
					State = 11265; _localctx._common_table_expression = common_table_expression();
					_localctx._ctes.Add(_localctx._common_table_expression);
					}
					} 
				}
				State = 11270;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1519,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_table_expressionContext : ParserRuleContext {
		public Id_Context expression_name;
		public Column_name_listContext columns;
		public Select_statementContext cte_query;
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_table_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCommon_table_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCommon_table_expression(this);
		}
	}

	[RuleVersion(0)]
	public Common_table_expressionContext common_table_expression() {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(_ctx, State);
		EnterRule(_localctx, 940, RULE_common_table_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11271; _localctx.expression_name = id_();
			State = 11276;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1520,_ctx) ) {
			case 1:
				{
				State = 11272; Match(LR_BRACKET);
				State = 11273; _localctx.columns = column_name_list();
				State = 11274; Match(RR_BRACKET);
				}
				break;
			}
			State = 11278; Match(AS);
			State = 11279; Match(LR_BRACKET);
			State = 11280; _localctx.cte_query = select_statement();
			State = 11281; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_elemContext : ParserRuleContext {
		public Id_Context udt_column_name;
		public Id_Context method_name;
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Update_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_elem(this);
		}
	}

	[RuleVersion(0)]
	public Update_elemContext update_elem() {
		Update_elemContext _localctx = new Update_elemContext(_ctx, State);
		EnterRule(_localctx, 942, RULE_update_elem);
		try {
			State = 11308;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1524,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11283; Match(LOCAL_ID);
				State = 11284; Match(EQUAL);
				State = 11285; full_column_name();
				State = 11288;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1521,_ctx) ) {
				case 1:
					{
					State = 11286; Match(EQUAL);
					}
					break;

				case 2:
					{
					State = 11287; assignment_operator();
					}
					break;
				}
				State = 11290; expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11294;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1522,_ctx) ) {
				case 1:
					{
					State = 11292; full_column_name();
					}
					break;

				case 2:
					{
					State = 11293; Match(LOCAL_ID);
					}
					break;
				}
				State = 11298;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1523,_ctx) ) {
				case 1:
					{
					State = 11296; Match(EQUAL);
					}
					break;

				case 2:
					{
					State = 11297; assignment_operator();
					}
					break;
				}
				State = 11300; expression(0);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11301; _localctx.udt_column_name = id_();
				State = 11302; Match(DOT);
				State = 11303; _localctx.method_name = id_();
				State = 11304; Match(LR_BRACKET);
				State = 11305; expression_list_();
				State = 11306; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_elem_mergeContext : ParserRuleContext {
		public Id_Context udt_column_name;
		public Id_Context method_name;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Update_elem_mergeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_elem_merge; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_elem_merge(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_elem_merge(this);
		}
	}

	[RuleVersion(0)]
	public Update_elem_mergeContext update_elem_merge() {
		Update_elem_mergeContext _localctx = new Update_elem_mergeContext(_ctx, State);
		EnterRule(_localctx, 944, RULE_update_elem_merge);
		try {
			State = 11326;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1527,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11312;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1525,_ctx) ) {
				case 1:
					{
					State = 11310; full_column_name();
					}
					break;

				case 2:
					{
					State = 11311; Match(LOCAL_ID);
					}
					break;
				}
				State = 11316;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1526,_ctx) ) {
				case 1:
					{
					State = 11314; Match(EQUAL);
					}
					break;

				case 2:
					{
					State = 11315; assignment_operator();
					}
					break;
				}
				State = 11318; expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11319; _localctx.udt_column_name = id_();
				State = 11320; Match(DOT);
				State = 11321; _localctx.method_name = id_();
				State = 11322; Match(LR_BRACKET);
				State = 11323; expression_list_();
				State = 11324; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_conditionContext : ParserRuleContext {
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		public ITerminalNode[] NOT() { return GetTokens(TSqlParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(TSqlParser.NOT, i);
		}
		public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public Search_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSearch_condition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSearch_condition(this);
		}
	}

	[RuleVersion(0)]
	public Search_conditionContext search_condition() {
		return search_condition(0);
	}

	private Search_conditionContext search_condition(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Search_conditionContext _localctx = new Search_conditionContext(_ctx, _parentState);
		Search_conditionContext _prevctx = _localctx;
		int _startState = 946;
		EnterRecursionRule(_localctx, 946, RULE_search_condition, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 11332;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1528,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11329; Match(NOT);
					}
					} 
				}
				State = 11334;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1528,_ctx);
			}
			State = 11340;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1529,_ctx) ) {
			case 1:
				{
				State = 11335; predicate();
				}
				break;

			case 2:
				{
				State = 11336; Match(LR_BRACKET);
				State = 11337; search_condition(0);
				State = 11338; Match(RR_BRACKET);
				}
				break;
			}
			}
			_ctx.stop = _input.Lt(-1);
			State = 11350;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1531,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 11348;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1530,_ctx) ) {
					case 1:
						{
						_localctx = new Search_conditionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_search_condition);
						State = 11342;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 11343; Match(AND);
						State = 11344; search_condition(3);
						}
						break;

					case 2:
						{
						_localctx = new Search_conditionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_search_condition);
						State = 11345;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 11346; Match(OR);
						State = 11347; search_condition(2);
						}
						break;
					}
					} 
				}
				State = 11352;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1531,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Freetext_predicateContext freetext_predicate() {
			return GetRuleContext<Freetext_predicateContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		public ITerminalNode MULT_ASSIGN() { return GetToken(TSqlParser.MULT_ASSIGN, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode SOME() { return GetToken(TSqlParser.SOME, 0); }
		public ITerminalNode ANY() { return GetToken(TSqlParser.ANY, 0); }
		public ITerminalNode BETWEEN() { return GetToken(TSqlParser.BETWEEN, 0); }
		public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		public ITerminalNode[] NOT() { return GetTokens(TSqlParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(TSqlParser.NOT, i);
		}
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public ITerminalNode LIKE() { return GetToken(TSqlParser.LIKE, 0); }
		public ITerminalNode ESCAPE() { return GetToken(TSqlParser.ESCAPE, 0); }
		public ITerminalNode IS() { return GetToken(TSqlParser.IS, 0); }
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(_ctx, State);
		EnterRule(_localctx, 948, RULE_predicate);
		int _la;
		try {
			int _alt;
			State = 11418;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1537,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11353; Match(EXISTS);
				State = 11354; Match(LR_BRACKET);
				State = 11355; subquery();
				State = 11356; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11358; freetext_predicate();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11359; expression(0);
				State = 11360; comparison_operator();
				State = 11361; expression(0);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11363; expression(0);
				State = 11364; Match(MULT_ASSIGN);
				State = 11365; expression(0);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11367; expression(0);
				State = 11368; comparison_operator();
				State = 11369;
				_la = _input.La(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11370; Match(LR_BRACKET);
				State = 11371; subquery();
				State = 11372; Match(RR_BRACKET);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 11374; expression(0);
				State = 11378;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1532,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 11375; Match(NOT);
						}
						} 
					}
					State = 11380;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1532,_ctx);
				}
				State = 11381; Match(BETWEEN);
				State = 11382; expression(0);
				State = 11383; Match(AND);
				State = 11384; expression(0);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 11386; expression(0);
				State = 11390;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1533,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 11387; Match(NOT);
						}
						} 
					}
					State = 11392;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1533,_ctx);
				}
				State = 11393; Match(IN);
				State = 11394; Match(LR_BRACKET);
				State = 11397;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1534,_ctx) ) {
				case 1:
					{
					State = 11395; subquery();
					}
					break;

				case 2:
					{
					State = 11396; expression_list_();
					}
					break;
				}
				State = 11399; Match(RR_BRACKET);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 11401; expression(0);
				State = 11405;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1535,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 11402; Match(NOT);
						}
						} 
					}
					State = 11407;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1535,_ctx);
				}
				State = 11408; Match(LIKE);
				State = 11409; expression(0);
				State = 11412;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1536,_ctx) ) {
				case 1:
					{
					State = 11410; Match(ESCAPE);
					State = 11411; expression(0);
					}
					break;
				}
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 11414; expression(0);
				State = 11415; Match(IS);
				State = 11416; null_notnull();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_expressionContext : ParserRuleContext {
		public Sql_unionContext _sql_union;
		public IList<Sql_unionContext> _unions = new List<Sql_unionContext>();
		public Query_specificationContext query_specification() {
			return GetRuleContext<Query_specificationContext>(0);
		}
		public Select_order_by_clauseContext select_order_by_clause() {
			return GetRuleContext<Select_order_by_clauseContext>(0);
		}
		public Sql_unionContext[] sql_union() {
			return GetRuleContexts<Sql_unionContext>();
		}
		public Sql_unionContext sql_union(int i) {
			return GetRuleContext<Sql_unionContext>(i);
		}
		public Query_expressionContext[] query_expression() {
			return GetRuleContexts<Query_expressionContext>();
		}
		public Query_expressionContext query_expression(int i) {
			return GetRuleContext<Query_expressionContext>(i);
		}
		public ITerminalNode UNION() { return GetToken(TSqlParser.UNION, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Query_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_expression(this);
		}
	}

	[RuleVersion(0)]
	public Query_expressionContext query_expression() {
		Query_expressionContext _localctx = new Query_expressionContext(_ctx, State);
		EnterRule(_localctx, 950, RULE_query_expression);
		try {
			int _alt;
			State = 11440;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1542,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11420; query_specification();
				State = 11422;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1538,_ctx) ) {
				case 1:
					{
					State = 11421; select_order_by_clause();
					}
					break;
				}
				State = 11427;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1539,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 11424; _localctx._sql_union = sql_union();
						_localctx._unions.Add(_localctx._sql_union);
						}
						} 
					}
					State = 11429;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1539,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11430; Match(LR_BRACKET);
				State = 11431; query_expression();
				State = 11432; Match(RR_BRACKET);
				State = 11438;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1541,_ctx) ) {
				case 1:
					{
					State = 11433; Match(UNION);
					State = 11435;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1540,_ctx) ) {
					case 1:
						{
						State = 11434; Match(ALL);
						}
						break;
					}
					State = 11437; query_expression();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_unionContext : ParserRuleContext {
		public Query_specificationContext spec;
		public Query_expressionContext op;
		public ITerminalNode UNION() { return GetToken(TSqlParser.UNION, 0); }
		public ITerminalNode EXCEPT() { return GetToken(TSqlParser.EXCEPT, 0); }
		public ITerminalNode INTERSECT() { return GetToken(TSqlParser.INTERSECT, 0); }
		public Query_specificationContext query_specification() {
			return GetRuleContext<Query_specificationContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public Sql_unionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_union; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSql_union(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSql_union(this);
		}
	}

	[RuleVersion(0)]
	public Sql_unionContext sql_union() {
		Sql_unionContext _localctx = new Sql_unionContext(_ctx, State);
		EnterRule(_localctx, 952, RULE_sql_union);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11448;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1544,_ctx) ) {
			case 1:
				{
				State = 11442; Match(UNION);
				State = 11444;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1543,_ctx) ) {
				case 1:
					{
					State = 11443; Match(ALL);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 11446; Match(EXCEPT);
				}
				break;

			case 3:
				{
				State = 11447; Match(INTERSECT);
				}
				break;
			}
			State = 11455;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1545,_ctx) ) {
			case 1:
				{
				State = 11450; _localctx.spec = query_specification();
				}
				break;

			case 2:
				{
				{
				State = 11451; Match(LR_BRACKET);
				State = 11452; _localctx.op = query_expression();
				State = 11453; Match(RR_BRACKET);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_specificationContext : ParserRuleContext {
		public IToken allOrDistinct;
		public Top_clauseContext top;
		public Select_listContext columns;
		public Table_nameContext into;
		public Table_sourcesContext from;
		public Search_conditionContext where;
		public IToken groupByAll;
		public Group_by_itemContext _group_by_item;
		public IList<Group_by_itemContext> _groupBys = new List<Group_by_itemContext>();
		public Grouping_sets_itemContext _grouping_sets_item;
		public IList<Grouping_sets_itemContext> _groupSets = new List<Grouping_sets_itemContext>();
		public Search_conditionContext having;
		public ITerminalNode SELECT() { return GetToken(TSqlParser.SELECT, 0); }
		public Select_listContext select_list() {
			return GetRuleContext<Select_listContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode HAVING() { return GetToken(TSqlParser.HAVING, 0); }
		public Top_clauseContext top_clause() {
			return GetRuleContext<Top_clauseContext>(0);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		public ITerminalNode DISTINCT() { return GetToken(TSqlParser.DISTINCT, 0); }
		public ITerminalNode GROUPING() { return GetToken(TSqlParser.GROUPING, 0); }
		public ITerminalNode SETS() { return GetToken(TSqlParser.SETS, 0); }
		public Grouping_sets_itemContext[] grouping_sets_item() {
			return GetRuleContexts<Grouping_sets_itemContext>();
		}
		public Grouping_sets_itemContext grouping_sets_item(int i) {
			return GetRuleContext<Grouping_sets_itemContext>(i);
		}
		public Group_by_itemContext[] group_by_item() {
			return GetRuleContexts<Group_by_itemContext>();
		}
		public Group_by_itemContext group_by_item(int i) {
			return GetRuleContext<Group_by_itemContext>(i);
		}
		public Query_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_specification(this);
		}
	}

	[RuleVersion(0)]
	public Query_specificationContext query_specification() {
		Query_specificationContext _localctx = new Query_specificationContext(_ctx, State);
		EnterRule(_localctx, 954, RULE_query_specification);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11457; Match(SELECT);
			State = 11459;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1546,_ctx) ) {
			case 1:
				{
				State = 11458;
				_localctx.allOrDistinct = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					_localctx.allOrDistinct = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 11462;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1547,_ctx) ) {
			case 1:
				{
				State = 11461; _localctx.top = top_clause();
				}
				break;
			}
			State = 11464; _localctx.columns = select_list();
			State = 11467;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1548,_ctx) ) {
			case 1:
				{
				State = 11465; Match(INTO);
				State = 11466; _localctx.into = table_name();
				}
				break;
			}
			State = 11471;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1549,_ctx) ) {
			case 1:
				{
				State = 11469; Match(FROM);
				State = 11470; _localctx.from = table_sources();
				}
				break;
			}
			State = 11475;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1550,_ctx) ) {
			case 1:
				{
				State = 11473; Match(WHERE);
				State = 11474; _localctx.where = search_condition(0);
				}
				break;
			}
			State = 11505;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1555,_ctx) ) {
			case 1:
				{
				State = 11477; Match(GROUP);
				State = 11478; Match(BY);
				State = 11503;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1554,_ctx) ) {
				case 1:
					{
					{
					State = 11480;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1551,_ctx) ) {
					case 1:
						{
						State = 11479; _localctx.groupByAll = Match(ALL);
						}
						break;
					}
					State = 11482; _localctx._group_by_item = group_by_item();
					_localctx._groupBys.Add(_localctx._group_by_item);
					State = 11487;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1552,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 11483; Match(COMMA);
							State = 11484; _localctx._group_by_item = group_by_item();
							_localctx._groupBys.Add(_localctx._group_by_item);
							}
							} 
						}
						State = 11489;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1552,_ctx);
					}
					}
					}
					break;

				case 2:
					{
					State = 11490; Match(GROUPING);
					State = 11491; Match(SETS);
					State = 11492; Match(LR_BRACKET);
					State = 11493; _localctx._grouping_sets_item = grouping_sets_item();
					_localctx._groupSets.Add(_localctx._grouping_sets_item);
					State = 11498;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1553,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 11494; Match(COMMA);
							State = 11495; _localctx._grouping_sets_item = grouping_sets_item();
							_localctx._groupSets.Add(_localctx._grouping_sets_item);
							}
							} 
						}
						State = 11500;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1553,_ctx);
					}
					State = 11501; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
			State = 11509;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1556,_ctx) ) {
			case 1:
				{
				State = 11507; Match(HAVING);
				State = 11508; _localctx.having = search_condition(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_clauseContext : ParserRuleContext {
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public Top_percentContext top_percent() {
			return GetRuleContext<Top_percentContext>(0);
		}
		public Top_countContext top_count() {
			return GetRuleContext<Top_countContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode TIES() { return GetToken(TSqlParser.TIES, 0); }
		public Top_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTop_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTop_clause(this);
		}
	}

	[RuleVersion(0)]
	public Top_clauseContext top_clause() {
		Top_clauseContext _localctx = new Top_clauseContext(_ctx, State);
		EnterRule(_localctx, 956, RULE_top_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11511; Match(TOP);
			State = 11514;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1557,_ctx) ) {
			case 1:
				{
				State = 11512; top_percent();
				}
				break;

			case 2:
				{
				State = 11513; top_count();
				}
				break;
			}
			State = 11518;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1558,_ctx) ) {
			case 1:
				{
				State = 11516; Match(WITH);
				State = 11517; Match(TIES);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_percentContext : ParserRuleContext {
		public IToken percent_constant;
		public ExpressionContext topper_expression;
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public ITerminalNode REAL() { return GetToken(TSqlParser.REAL, 0); }
		public ITerminalNode FLOAT() { return GetToken(TSqlParser.FLOAT, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Top_percentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_percent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTop_percent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTop_percent(this);
		}
	}

	[RuleVersion(0)]
	public Top_percentContext top_percent() {
		Top_percentContext _localctx = new Top_percentContext(_ctx, State);
		EnterRule(_localctx, 958, RULE_top_percent);
		int _la;
		try {
			State = 11527;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1559,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11520;
				_localctx.percent_constant = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 1184)) & ~0x3f) == 0 && ((1L << (_la - 1184)) & ((1L << (DECIMAL - 1184)) | (1L << (FLOAT - 1184)) | (1L << (REAL - 1184)))) != 0)) ) {
					_localctx.percent_constant = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11521; Match(PERCENT);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11522; Match(LR_BRACKET);
				State = 11523; _localctx.topper_expression = expression(0);
				State = 11524; Match(RR_BRACKET);
				State = 11525; Match(PERCENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_countContext : ParserRuleContext {
		public IToken count_constant;
		public ExpressionContext topcount_expression;
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Top_countContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_count; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTop_count(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTop_count(this);
		}
	}

	[RuleVersion(0)]
	public Top_countContext top_count() {
		Top_countContext _localctx = new Top_countContext(_ctx, State);
		EnterRule(_localctx, 960, RULE_top_count);
		try {
			State = 11534;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1560,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11529; _localctx.count_constant = Match(DECIMAL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11530; Match(LR_BRACKET);
				State = 11531; _localctx.topcount_expression = expression(0);
				State = 11532; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_clauseContext : ParserRuleContext {
		public Order_by_expressionContext _order_by_expression;
		public IList<Order_by_expressionContext> _order_bys = new List<Order_by_expressionContext>();
		public ITerminalNode ORDER() { return GetToken(TSqlParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public Order_by_expressionContext[] order_by_expression() {
			return GetRuleContexts<Order_by_expressionContext>();
		}
		public Order_by_expressionContext order_by_expression(int i) {
			return GetRuleContext<Order_by_expressionContext>(i);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_clause(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_clauseContext order_by_clause() {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, State);
		EnterRule(_localctx, 962, RULE_order_by_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11536; Match(ORDER);
			State = 11537; Match(BY);
			State = 11538; _localctx._order_by_expression = order_by_expression();
			_localctx._order_bys.Add(_localctx._order_by_expression);
			State = 11543;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1561,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11539; Match(COMMA);
					State = 11540; _localctx._order_by_expression = order_by_expression();
					_localctx._order_bys.Add(_localctx._order_by_expression);
					}
					} 
				}
				State = 11545;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1561,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_order_by_clauseContext : ParserRuleContext {
		public ExpressionContext offset_exp;
		public IToken offset_rows;
		public IToken fetch_offset;
		public ExpressionContext fetch_exp;
		public IToken fetch_rows;
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public ITerminalNode OFFSET() { return GetToken(TSqlParser.OFFSET, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] ROW() { return GetTokens(TSqlParser.ROW); }
		public ITerminalNode ROW(int i) {
			return GetToken(TSqlParser.ROW, i);
		}
		public ITerminalNode[] ROWS() { return GetTokens(TSqlParser.ROWS); }
		public ITerminalNode ROWS(int i) {
			return GetToken(TSqlParser.ROWS, i);
		}
		public ITerminalNode FETCH() { return GetToken(TSqlParser.FETCH, 0); }
		public ITerminalNode ONLY() { return GetToken(TSqlParser.ONLY, 0); }
		public ITerminalNode FIRST() { return GetToken(TSqlParser.FIRST, 0); }
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public Select_order_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_order_by_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_order_by_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_order_by_clause(this);
		}
	}

	[RuleVersion(0)]
	public Select_order_by_clauseContext select_order_by_clause() {
		Select_order_by_clauseContext _localctx = new Select_order_by_clauseContext(_ctx, State);
		EnterRule(_localctx, 964, RULE_select_order_by_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11546; order_by_clause();
			State = 11558;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1563,_ctx) ) {
			case 1:
				{
				State = 11547; Match(OFFSET);
				State = 11548; _localctx.offset_exp = expression(0);
				State = 11549;
				_localctx.offset_rows = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ROW || _la==ROWS) ) {
					_localctx.offset_rows = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11556;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1562,_ctx) ) {
				case 1:
					{
					State = 11550; Match(FETCH);
					State = 11551;
					_localctx.fetch_offset = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==FIRST || _la==NEXT) ) {
						_localctx.fetch_offset = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 11552; _localctx.fetch_exp = expression(0);
					State = 11553;
					_localctx.fetch_rows = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==ROW || _la==ROWS) ) {
						_localctx.fetch_rows = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 11554; Match(ONLY);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_clauseContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode BROWSE() { return GetToken(TSqlParser.BROWSE, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode RAW() { return GetToken(TSqlParser.RAW, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public Xml_common_directivesContext[] xml_common_directives() {
			return GetRuleContexts<Xml_common_directivesContext>();
		}
		public Xml_common_directivesContext xml_common_directives(int i) {
			return GetRuleContext<Xml_common_directivesContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode ELEMENTS() { return GetToken(TSqlParser.ELEMENTS, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode XMLDATA() { return GetToken(TSqlParser.XMLDATA, 0); }
		public ITerminalNode XMLSCHEMA() { return GetToken(TSqlParser.XMLSCHEMA, 0); }
		public ITerminalNode XSINIL() { return GetToken(TSqlParser.XSINIL, 0); }
		public ITerminalNode ABSENT() { return GetToken(TSqlParser.ABSENT, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(TSqlParser.EXPLICIT, 0); }
		public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		public ITerminalNode JSON() { return GetToken(TSqlParser.JSON, 0); }
		public ITerminalNode[] ROOT() { return GetTokens(TSqlParser.ROOT); }
		public ITerminalNode ROOT(int i) {
			return GetToken(TSqlParser.ROOT, i);
		}
		public ITerminalNode[] INCLUDE_NULL_VALUES() { return GetTokens(TSqlParser.INCLUDE_NULL_VALUES); }
		public ITerminalNode INCLUDE_NULL_VALUES(int i) {
			return GetToken(TSqlParser.INCLUDE_NULL_VALUES, i);
		}
		public ITerminalNode[] WITHOUT_ARRAY_WRAPPER() { return GetTokens(TSqlParser.WITHOUT_ARRAY_WRAPPER); }
		public ITerminalNode WITHOUT_ARRAY_WRAPPER(int i) {
			return GetToken(TSqlParser.WITHOUT_ARRAY_WRAPPER, i);
		}
		public For_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFor_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFor_clause(this);
		}
	}

	[RuleVersion(0)]
	public For_clauseContext for_clause() {
		For_clauseContext _localctx = new For_clauseContext(_ctx, State);
		EnterRule(_localctx, 966, RULE_for_clause);
		int _la;
		try {
			int _alt;
			State = 11649;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1580,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11560; Match(FOR);
				State = 11561; Match(BROWSE);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11562; Match(FOR);
				State = 11563; Match(XML);
				State = 11571;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1565,_ctx) ) {
				case 1:
					{
					State = 11564; Match(RAW);
					State = 11568;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1564,_ctx) ) {
					case 1:
						{
						State = 11565; Match(LR_BRACKET);
						State = 11566; Match(STRING);
						State = 11567; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 11570; Match(AUTO);
					}
					break;
				}
				State = 11576;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1566,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 11573; xml_common_directives();
						}
						} 
					}
					State = 11578;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1566,_ctx);
				}
				State = 11589;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1569,_ctx) ) {
				case 1:
					{
					State = 11579; Match(COMMA);
					State = 11587;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1568,_ctx) ) {
					case 1:
						{
						State = 11580; Match(XMLDATA);
						}
						break;

					case 2:
						{
						State = 11581; Match(XMLSCHEMA);
						State = 11585;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1567,_ctx) ) {
						case 1:
							{
							State = 11582; Match(LR_BRACKET);
							State = 11583; Match(STRING);
							State = 11584; Match(RR_BRACKET);
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				State = 11596;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1571,_ctx) ) {
				case 1:
					{
					State = 11591; Match(COMMA);
					State = 11592; Match(ELEMENTS);
					State = 11594;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1570,_ctx) ) {
					case 1:
						{
						State = 11593;
						_la = _input.La(1);
						if ( !(_la==ABSENT || _la==XSINIL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11598; Match(FOR);
				State = 11599; Match(XML);
				State = 11600; Match(EXPLICIT);
				State = 11604;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1572,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 11601; xml_common_directives();
						}
						} 
					}
					State = 11606;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1572,_ctx);
				}
				State = 11609;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1573,_ctx) ) {
				case 1:
					{
					State = 11607; Match(COMMA);
					State = 11608; Match(XMLDATA);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11611; Match(FOR);
				State = 11612; Match(XML);
				State = 11613; Match(PATH);
				State = 11617;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1574,_ctx) ) {
				case 1:
					{
					State = 11614; Match(LR_BRACKET);
					State = 11615; Match(STRING);
					State = 11616; Match(RR_BRACKET);
					}
					break;
				}
				State = 11622;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1575,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 11619; xml_common_directives();
						}
						} 
					}
					State = 11624;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1575,_ctx);
				}
				State = 11630;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1577,_ctx) ) {
				case 1:
					{
					State = 11625; Match(COMMA);
					State = 11626; Match(ELEMENTS);
					State = 11628;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1576,_ctx) ) {
					case 1:
						{
						State = 11627;
						_la = _input.La(1);
						if ( !(_la==ABSENT || _la==XSINIL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11632; Match(FOR);
				State = 11633; Match(JSON);
				State = 11634;
				_la = _input.La(1);
				if ( !(_la==AUTO || _la==PATH) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11646;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1579,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 11635; Match(COMMA);
						State = 11642;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1578,_ctx) ) {
						case 1:
							{
							State = 11636; Match(ROOT);
							{
							State = 11637; Match(LR_BRACKET);
							State = 11638; Match(STRING);
							State = 11639; Match(RR_BRACKET);
							}
							}
							break;

						case 2:
							{
							State = 11640; Match(INCLUDE_NULL_VALUES);
							}
							break;

						case 3:
							{
							State = 11641; Match(WITHOUT_ARRAY_WRAPPER);
							}
							break;
						}
						}
						} 
					}
					State = 11648;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1579,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_common_directivesContext : ParserRuleContext {
		public ITerminalNode BINARY_KEYWORD() { return GetToken(TSqlParser.BINARY_KEYWORD, 0); }
		public ITerminalNode BASE64() { return GetToken(TSqlParser.BASE64, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode ROOT() { return GetToken(TSqlParser.ROOT, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Xml_common_directivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_common_directives; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_common_directives(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_common_directives(this);
		}
	}

	[RuleVersion(0)]
	public Xml_common_directivesContext xml_common_directives() {
		Xml_common_directivesContext _localctx = new Xml_common_directivesContext(_ctx, State);
		EnterRule(_localctx, 968, RULE_xml_common_directives);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11651; Match(COMMA);
			State = 11661;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1582,_ctx) ) {
			case 1:
				{
				State = 11652; Match(BINARY_KEYWORD);
				State = 11653; Match(BASE64);
				}
				break;

			case 2:
				{
				State = 11654; Match(TYPE);
				}
				break;

			case 3:
				{
				State = 11655; Match(ROOT);
				State = 11659;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1581,_ctx) ) {
				case 1:
					{
					State = 11656; Match(LR_BRACKET);
					State = 11657; Match(STRING);
					State = 11658; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_expressionContext : ParserRuleContext {
		public ExpressionContext order_by;
		public IToken ascending;
		public IToken descending;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ASC() { return GetToken(TSqlParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(TSqlParser.DESC, 0); }
		public Order_by_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_expression(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_expressionContext order_by_expression() {
		Order_by_expressionContext _localctx = new Order_by_expressionContext(_ctx, State);
		EnterRule(_localctx, 970, RULE_order_by_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11663; _localctx.order_by = expression(0);
			State = 11666;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1583,_ctx) ) {
			case 1:
				{
				State = 11664; _localctx.ascending = Match(ASC);
				}
				break;

			case 2:
				{
				State = 11665; _localctx.descending = Match(DESC);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_sets_itemContext : ParserRuleContext {
		public Group_by_itemContext _group_by_item;
		public IList<Group_by_itemContext> _groupSetItems = new List<Group_by_itemContext>();
		public Group_by_itemContext[] group_by_item() {
			return GetRuleContexts<Group_by_itemContext>();
		}
		public Group_by_itemContext group_by_item(int i) {
			return GetRuleContext<Group_by_itemContext>(i);
		}
		public Grouping_sets_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_sets_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGrouping_sets_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGrouping_sets_item(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_sets_itemContext grouping_sets_item() {
		Grouping_sets_itemContext _localctx = new Grouping_sets_itemContext(_ctx, State);
		EnterRule(_localctx, 972, RULE_grouping_sets_item);
		try {
			int _alt;
			State = 11684;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1587,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11669;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1584,_ctx) ) {
				case 1:
					{
					State = 11668; Match(LR_BRACKET);
					}
					break;
				}
				State = 11671; _localctx._group_by_item = group_by_item();
				_localctx._groupSetItems.Add(_localctx._group_by_item);
				State = 11676;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1585,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 11672; Match(COMMA);
						State = 11673; _localctx._group_by_item = group_by_item();
						_localctx._groupSetItems.Add(_localctx._group_by_item);
						}
						} 
					}
					State = 11678;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1585,_ctx);
				}
				State = 11680;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1586,_ctx) ) {
				case 1:
					{
					State = 11679; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11682; Match(LR_BRACKET);
				State = 11683; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_itemContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Group_by_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGroup_by_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGroup_by_item(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_itemContext group_by_item() {
		Group_by_itemContext _localctx = new Group_by_itemContext(_ctx, State);
		EnterRule(_localctx, 974, RULE_group_by_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11686; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Option_clauseContext : ParserRuleContext {
		public OptionContext _option;
		public IList<OptionContext> _options_ = new List<OptionContext>();
		public ITerminalNode OPTION() { return GetToken(TSqlParser.OPTION, 0); }
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public Option_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOption_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOption_clause(this);
		}
	}

	[RuleVersion(0)]
	public Option_clauseContext option_clause() {
		Option_clauseContext _localctx = new Option_clauseContext(_ctx, State);
		EnterRule(_localctx, 976, RULE_option_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11688; Match(OPTION);
			State = 11689; Match(LR_BRACKET);
			State = 11690; _localctx._option = option();
			_localctx._options_.Add(_localctx._option);
			State = 11695;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1588,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11691; Match(COMMA);
					State = 11692; _localctx._option = option();
					_localctx._options_.Add(_localctx._option);
					}
					} 
				}
				State = 11697;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1588,_ctx);
			}
			State = 11698; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		public IToken number_rows;
		public IToken number_of_processors;
		public IToken number_recursion;
		public IToken traceFlag;
		public ITerminalNode FAST() { return GetToken(TSqlParser.FAST, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode HASH() { return GetToken(TSqlParser.HASH, 0); }
		public ITerminalNode ORDER() { return GetToken(TSqlParser.ORDER, 0); }
		public ITerminalNode UNION() { return GetToken(TSqlParser.UNION, 0); }
		public ITerminalNode MERGE() { return GetToken(TSqlParser.MERGE, 0); }
		public ITerminalNode CONCAT() { return GetToken(TSqlParser.CONCAT, 0); }
		public ITerminalNode JOIN() { return GetToken(TSqlParser.JOIN, 0); }
		public ITerminalNode LOOP() { return GetToken(TSqlParser.LOOP, 0); }
		public ITerminalNode EXPAND() { return GetToken(TSqlParser.EXPAND, 0); }
		public ITerminalNode VIEWS() { return GetToken(TSqlParser.VIEWS, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public ITerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return GetToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public ITerminalNode KEEP() { return GetToken(TSqlParser.KEEP, 0); }
		public ITerminalNode PLAN() { return GetToken(TSqlParser.PLAN, 0); }
		public ITerminalNode KEEPFIXED() { return GetToken(TSqlParser.KEEPFIXED, 0); }
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode MAXRECURSION() { return GetToken(TSqlParser.MAXRECURSION, 0); }
		public ITerminalNode OPTIMIZE() { return GetToken(TSqlParser.OPTIMIZE, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Optimize_for_argContext[] optimize_for_arg() {
			return GetRuleContexts<Optimize_for_argContext>();
		}
		public Optimize_for_argContext optimize_for_arg(int i) {
			return GetRuleContext<Optimize_for_argContext>(i);
		}
		public ITerminalNode UNKNOWN() { return GetToken(TSqlParser.UNKNOWN, 0); }
		public ITerminalNode PARAMETERIZATION() { return GetToken(TSqlParser.PARAMETERIZATION, 0); }
		public ITerminalNode SIMPLE() { return GetToken(TSqlParser.SIMPLE, 0); }
		public ITerminalNode FORCED() { return GetToken(TSqlParser.FORCED, 0); }
		public ITerminalNode QUERYTRACEON() { return GetToken(TSqlParser.QUERYTRACEON, 0); }
		public ITerminalNode RECOMPILE() { return GetToken(TSqlParser.RECOMPILE, 0); }
		public ITerminalNode ROBUST() { return GetToken(TSqlParser.ROBUST, 0); }
		public ITerminalNode USE() { return GetToken(TSqlParser.USE, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(_ctx, State);
		EnterRule(_localctx, 978, RULE_option);
		int _la;
		try {
			int _alt;
			State = 11747;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1590,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11700; Match(FAST);
				State = 11701; _localctx.number_rows = Match(DECIMAL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11702;
				_la = _input.La(1);
				if ( !(_la==HASH || _la==ORDER) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11703; Match(GROUP);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11704;
				_la = _input.La(1);
				if ( !(_la==CONCAT || _la==HASH || _la==MERGE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11705; Match(UNION);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11706;
				_la = _input.La(1);
				if ( !(_la==HASH || _la==LOOP || _la==MERGE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11707; Match(JOIN);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11708; Match(EXPAND);
				State = 11709; Match(VIEWS);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 11710; Match(FORCE);
				State = 11711; Match(ORDER);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 11712; Match(IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 11713; Match(KEEP);
				State = 11714; Match(PLAN);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 11715; Match(KEEPFIXED);
				State = 11716; Match(PLAN);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 11717; Match(MAXDOP);
				State = 11718; _localctx.number_of_processors = Match(DECIMAL);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 11719; Match(MAXRECURSION);
				State = 11720; _localctx.number_recursion = Match(DECIMAL);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 11721; Match(OPTIMIZE);
				State = 11722; Match(FOR);
				State = 11723; Match(LR_BRACKET);
				State = 11724; optimize_for_arg();
				State = 11729;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1589,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 11725; Match(COMMA);
						State = 11726; optimize_for_arg();
						}
						} 
					}
					State = 11731;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1589,_ctx);
				}
				State = 11732; Match(RR_BRACKET);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 11734; Match(OPTIMIZE);
				State = 11735; Match(FOR);
				State = 11736; Match(UNKNOWN);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 11737; Match(PARAMETERIZATION);
				State = 11738;
				_la = _input.La(1);
				if ( !(_la==FORCED || _la==SIMPLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 11739; Match(QUERYTRACEON);
				State = 11740; _localctx.traceFlag = Match(DECIMAL);
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 11741; Match(RECOMPILE);
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 11742; Match(ROBUST);
				State = 11743; Match(PLAN);
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 11744; Match(USE);
				State = 11745; Match(PLAN);
				State = 11746; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Optimize_for_argContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode UNKNOWN() { return GetToken(TSqlParser.UNKNOWN, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public Optimize_for_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optimize_for_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOptimize_for_arg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOptimize_for_arg(this);
		}
	}

	[RuleVersion(0)]
	public Optimize_for_argContext optimize_for_arg() {
		Optimize_for_argContext _localctx = new Optimize_for_argContext(_ctx, State);
		EnterRule(_localctx, 980, RULE_optimize_for_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11749; Match(LOCAL_ID);
			State = 11756;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1592,_ctx) ) {
			case 1:
				{
				State = 11750; Match(UNKNOWN);
				}
				break;

			case 2:
				{
				State = 11751; Match(EQUAL);
				State = 11754;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1591,_ctx) ) {
				case 1:
					{
					State = 11752; constant();
					}
					break;

				case 2:
					{
					State = 11753; Match(NULL_);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_listContext : ParserRuleContext {
		public Select_list_elemContext _select_list_elem;
		public IList<Select_list_elemContext> _selectElement = new List<Select_list_elemContext>();
		public Select_list_elemContext[] select_list_elem() {
			return GetRuleContexts<Select_list_elemContext>();
		}
		public Select_list_elemContext select_list_elem(int i) {
			return GetRuleContext<Select_list_elemContext>(i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_list(this);
		}
	}

	[RuleVersion(0)]
	public Select_listContext select_list() {
		Select_listContext _localctx = new Select_listContext(_ctx, State);
		EnterRule(_localctx, 982, RULE_select_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11758; _localctx._select_list_elem = select_list_elem();
			_localctx._selectElement.Add(_localctx._select_list_elem);
			State = 11763;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1593,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11759; Match(COMMA);
					State = 11760; _localctx._select_list_elem = select_list_elem();
					_localctx._selectElement.Add(_localctx._select_list_elem);
					}
					} 
				}
				State = 11765;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1593,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Udt_method_argumentsContext : ParserRuleContext {
		public Execute_var_stringContext _execute_var_string;
		public IList<Execute_var_stringContext> _argument = new List<Execute_var_stringContext>();
		public Execute_var_stringContext[] execute_var_string() {
			return GetRuleContexts<Execute_var_stringContext>();
		}
		public Execute_var_stringContext execute_var_string(int i) {
			return GetRuleContext<Execute_var_stringContext>(i);
		}
		public Udt_method_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udt_method_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUdt_method_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUdt_method_arguments(this);
		}
	}

	[RuleVersion(0)]
	public Udt_method_argumentsContext udt_method_arguments() {
		Udt_method_argumentsContext _localctx = new Udt_method_argumentsContext(_ctx, State);
		EnterRule(_localctx, 984, RULE_udt_method_arguments);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11766; Match(LR_BRACKET);
			State = 11767; _localctx._execute_var_string = execute_var_string();
			_localctx._argument.Add(_localctx._execute_var_string);
			State = 11772;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1594,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11768; Match(COMMA);
					State = 11769; _localctx._execute_var_string = execute_var_string();
					_localctx._argument.Add(_localctx._execute_var_string);
					}
					} 
				}
				State = 11774;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1594,_ctx);
			}
			State = 11775; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsteriskContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode INSERTED() { return GetToken(TSqlParser.INSERTED, 0); }
		public ITerminalNode DELETED() { return GetToken(TSqlParser.DELETED, 0); }
		public AsteriskContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asterisk; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAsterisk(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAsterisk(this);
		}
	}

	[RuleVersion(0)]
	public AsteriskContext asterisk() {
		AsteriskContext _localctx = new AsteriskContext(_ctx, State);
		EnterRule(_localctx, 986, RULE_asterisk);
		int _la;
		try {
			State = 11786;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1596,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11780;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1595,_ctx) ) {
				case 1:
					{
					State = 11777; table_name();
					State = 11778; Match(DOT);
					}
					break;
				}
				State = 11782; Match(STAR);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11783;
				_la = _input.La(1);
				if ( !(_la==DELETED || _la==INSERTED) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11784; Match(DOT);
				State = 11785; Match(STAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Udt_elemContext : ParserRuleContext {
		public Id_Context udt_column_name;
		public Id_Context non_static_attr;
		public Id_Context static_attr;
		public Udt_method_argumentsContext udt_method_arguments() {
			return GetRuleContext<Udt_method_argumentsContext>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public ITerminalNode DOUBLE_COLON() { return GetToken(TSqlParser.DOUBLE_COLON, 0); }
		public Udt_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udt_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUdt_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUdt_elem(this);
		}
	}

	[RuleVersion(0)]
	public Udt_elemContext udt_elem() {
		Udt_elemContext _localctx = new Udt_elemContext(_ctx, State);
		EnterRule(_localctx, 988, RULE_udt_elem);
		try {
			State = 11804;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1600,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11788; _localctx.udt_column_name = id_();
				State = 11789; Match(DOT);
				State = 11790; _localctx.non_static_attr = id_();
				State = 11791; udt_method_arguments();
				State = 11793;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1597,_ctx) ) {
				case 1:
					{
					State = 11792; as_column_alias();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11795; _localctx.udt_column_name = id_();
				State = 11796; Match(DOUBLE_COLON);
				State = 11797; _localctx.static_attr = id_();
				State = 11799;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1598,_ctx) ) {
				case 1:
					{
					State = 11798; udt_method_arguments();
					}
					break;
				}
				State = 11802;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1599,_ctx) ) {
				case 1:
					{
					State = 11801; as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_elemContext : ParserRuleContext {
		public Column_aliasContext leftAlias;
		public IToken eq;
		public ExpressionContext leftAssignment;
		public ExpressionContext expressionAs;
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public Expression_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExpression_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExpression_elem(this);
		}
	}

	[RuleVersion(0)]
	public Expression_elemContext expression_elem() {
		Expression_elemContext _localctx = new Expression_elemContext(_ctx, State);
		EnterRule(_localctx, 990, RULE_expression_elem);
		try {
			State = 11814;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1602,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11806; _localctx.leftAlias = column_alias();
				State = 11807; _localctx.eq = Match(EQUAL);
				State = 11808; _localctx.leftAssignment = expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11810; _localctx.expressionAs = expression(0);
				State = 11812;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1601,_ctx) ) {
				case 1:
					{
					State = 11811; as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_list_elemContext : ParserRuleContext {
		public AsteriskContext asterisk() {
			return GetRuleContext<AsteriskContext>(0);
		}
		public Udt_elemContext udt_elem() {
			return GetRuleContext<Udt_elemContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Expression_elemContext expression_elem() {
			return GetRuleContext<Expression_elemContext>(0);
		}
		public Select_list_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_list_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_list_elem(this);
		}
	}

	[RuleVersion(0)]
	public Select_list_elemContext select_list_elem() {
		Select_list_elemContext _localctx = new Select_list_elemContext(_ctx, State);
		EnterRule(_localctx, 992, RULE_select_list_elem);
		try {
			State = 11825;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1604,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11816; asterisk();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11817; udt_elem();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11818; Match(LOCAL_ID);
				State = 11821;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1603,_ctx) ) {
				case 1:
					{
					State = 11819; assignment_operator();
					}
					break;

				case 2:
					{
					State = 11820; Match(EQUAL);
					}
					break;
				}
				State = 11823; expression(0);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11824; expression_elem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_sourcesContext : ParserRuleContext {
		public Table_sourceContext _table_source;
		public IList<Table_sourceContext> _source = new List<Table_sourceContext>();
		public Non_ansi_joinContext non_ansi_join() {
			return GetRuleContext<Non_ansi_joinContext>(0);
		}
		public Table_sourceContext[] table_source() {
			return GetRuleContexts<Table_sourceContext>();
		}
		public Table_sourceContext table_source(int i) {
			return GetRuleContext<Table_sourceContext>(i);
		}
		public Table_sourcesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_sources; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_sources(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_sources(this);
		}
	}

	[RuleVersion(0)]
	public Table_sourcesContext table_sources() {
		Table_sourcesContext _localctx = new Table_sourcesContext(_ctx, State);
		EnterRule(_localctx, 994, RULE_table_sources);
		try {
			int _alt;
			State = 11836;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1606,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11827; non_ansi_join();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11828; _localctx._table_source = table_source();
				_localctx._source.Add(_localctx._table_source);
				State = 11833;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1605,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 11829; Match(COMMA);
						State = 11830; _localctx._table_source = table_source();
						_localctx._source.Add(_localctx._table_source);
						}
						} 
					}
					State = 11835;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1605,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_ansi_joinContext : ParserRuleContext {
		public Table_sourceContext _table_source;
		public IList<Table_sourceContext> _source = new List<Table_sourceContext>();
		public Table_sourceContext[] table_source() {
			return GetRuleContexts<Table_sourceContext>();
		}
		public Table_sourceContext table_source(int i) {
			return GetRuleContext<Table_sourceContext>(i);
		}
		public Non_ansi_joinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_ansi_join; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNon_ansi_join(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNon_ansi_join(this);
		}
	}

	[RuleVersion(0)]
	public Non_ansi_joinContext non_ansi_join() {
		Non_ansi_joinContext _localctx = new Non_ansi_joinContext(_ctx, State);
		EnterRule(_localctx, 996, RULE_non_ansi_join);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11838; _localctx._table_source = table_source();
			_localctx._source.Add(_localctx._table_source);
			State = 11841;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 11839; Match(COMMA);
					State = 11840; _localctx._table_source = table_source();
					_localctx._source.Add(_localctx._table_source);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 11843;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1607,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_sourceContext : ParserRuleContext {
		public Join_partContext _join_part;
		public IList<Join_partContext> _joins = new List<Join_partContext>();
		public Table_source_itemContext table_source_item() {
			return GetRuleContext<Table_source_itemContext>(0);
		}
		public Join_partContext[] join_part() {
			return GetRuleContexts<Join_partContext>();
		}
		public Join_partContext join_part(int i) {
			return GetRuleContext<Join_partContext>(i);
		}
		public Table_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_source(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_source(this);
		}
	}

	[RuleVersion(0)]
	public Table_sourceContext table_source() {
		Table_sourceContext _localctx = new Table_sourceContext(_ctx, State);
		EnterRule(_localctx, 998, RULE_table_source);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11845; table_source_item();
			State = 11849;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1608,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11846; _localctx._join_part = join_part();
					_localctx._joins.Add(_localctx._join_part);
					}
					} 
				}
				State = 11851;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1608,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_source_itemContext : ParserRuleContext {
		public IToken loc_id;
		public IToken loc_id_call;
		public Function_callContext loc_fcall;
		public Function_callContext oldstyle_fcall;
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public Deprecated_table_hintContext deprecated_table_hint() {
			return GetRuleContext<Deprecated_table_hintContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Sybase_legacy_hintsContext sybase_legacy_hints() {
			return GetRuleContext<Sybase_legacy_hintsContext>(0);
		}
		public Rowset_functionContext rowset_function() {
			return GetRuleContext<Rowset_functionContext>(0);
		}
		public Derived_tableContext derived_table() {
			return GetRuleContext<Derived_tableContext>(0);
		}
		public Column_alias_listContext column_alias_list() {
			return GetRuleContext<Column_alias_listContext>(0);
		}
		public Change_tableContext change_table() {
			return GetRuleContext<Change_tableContext>(0);
		}
		public Nodes_methodContext nodes_method() {
			return GetRuleContext<Nodes_methodContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Open_xmlContext open_xml() {
			return GetRuleContext<Open_xmlContext>(0);
		}
		public Open_jsonContext open_json() {
			return GetRuleContext<Open_jsonContext>(0);
		}
		public ITerminalNode DOUBLE_COLON() { return GetToken(TSqlParser.DOUBLE_COLON, 0); }
		public Table_sourceContext table_source() {
			return GetRuleContext<Table_sourceContext>(0);
		}
		public Table_source_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_source_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_source_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_source_item(this);
		}
	}

	[RuleVersion(0)]
	public Table_source_itemContext table_source_item() {
		Table_source_itemContext _localctx = new Table_source_itemContext(_ctx, State);
		EnterRule(_localctx, 1000, RULE_table_source_item);
		try {
			State = 11920;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1623,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11852; full_table_name();
				State = 11853; deprecated_table_hint();
				State = 11854; as_table_alias();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11856; full_table_name();
				State = 11858;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1609,_ctx) ) {
				case 1:
					{
					State = 11857; as_table_alias();
					}
					break;
				}
				State = 11863;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1610,_ctx) ) {
				case 1:
					{
					State = 11860; with_table_hints();
					}
					break;

				case 2:
					{
					State = 11861; deprecated_table_hint();
					}
					break;

				case 3:
					{
					State = 11862; sybase_legacy_hints();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11865; rowset_function();
				State = 11867;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1611,_ctx) ) {
				case 1:
					{
					State = 11866; as_table_alias();
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11869; Match(LR_BRACKET);
				State = 11870; derived_table();
				State = 11871; Match(RR_BRACKET);
				State = 11876;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1613,_ctx) ) {
				case 1:
					{
					State = 11872; as_table_alias();
					State = 11874;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1612,_ctx) ) {
					case 1:
						{
						State = 11873; column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11878; change_table();
				State = 11880;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1614,_ctx) ) {
				case 1:
					{
					State = 11879; as_table_alias();
					}
					break;
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 11882; nodes_method();
				State = 11887;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1616,_ctx) ) {
				case 1:
					{
					State = 11883; as_table_alias();
					State = 11885;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1615,_ctx) ) {
					case 1:
						{
						State = 11884; column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 11889; function_call();
				State = 11894;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1618,_ctx) ) {
				case 1:
					{
					State = 11890; as_table_alias();
					State = 11892;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1617,_ctx) ) {
					case 1:
						{
						State = 11891; column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 11896; _localctx.loc_id = Match(LOCAL_ID);
				State = 11898;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1619,_ctx) ) {
				case 1:
					{
					State = 11897; as_table_alias();
					}
					break;
				}
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 11900; _localctx.loc_id_call = Match(LOCAL_ID);
				State = 11901; Match(DOT);
				State = 11902; _localctx.loc_fcall = function_call();
				State = 11907;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1621,_ctx) ) {
				case 1:
					{
					State = 11903; as_table_alias();
					State = 11905;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1620,_ctx) ) {
					case 1:
						{
						State = 11904; column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 11909; open_xml();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 11910; open_json();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 11911; Match(DOUBLE_COLON);
				State = 11912; _localctx.oldstyle_fcall = function_call();
				State = 11914;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1622,_ctx) ) {
				case 1:
					{
					State = 11913; as_table_alias();
					}
					break;
				}
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 11916; Match(LR_BRACKET);
				State = 11917; table_source();
				State = 11918; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_xmlContext : ParserRuleContext {
		public ITerminalNode OPENXML() { return GetToken(TSqlParser.OPENXML, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Schema_declarationContext schema_declaration() {
			return GetRuleContext<Schema_declarationContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public Open_xmlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_xml; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpen_xml(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpen_xml(this);
		}
	}

	[RuleVersion(0)]
	public Open_xmlContext open_xml() {
		Open_xmlContext _localctx = new Open_xmlContext(_ctx, State);
		EnterRule(_localctx, 1002, RULE_open_xml);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11922; Match(OPENXML);
			State = 11923; Match(LR_BRACKET);
			State = 11924; expression(0);
			State = 11925; Match(COMMA);
			State = 11926; expression(0);
			State = 11929;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1624,_ctx) ) {
			case 1:
				{
				State = 11927; Match(COMMA);
				State = 11928; expression(0);
				}
				break;
			}
			State = 11931; Match(RR_BRACKET);
			State = 11937;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1625,_ctx) ) {
			case 1:
				{
				State = 11932; Match(WITH);
				State = 11933; Match(LR_BRACKET);
				State = 11934; schema_declaration();
				State = 11935; Match(RR_BRACKET);
				}
				break;
			}
			State = 11940;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1626,_ctx) ) {
			case 1:
				{
				State = 11939; as_table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_jsonContext : ParserRuleContext {
		public ITerminalNode OPENJSON() { return GetToken(TSqlParser.OPENJSON, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Json_declarationContext json_declaration() {
			return GetRuleContext<Json_declarationContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public Open_jsonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_json; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpen_json(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpen_json(this);
		}
	}

	[RuleVersion(0)]
	public Open_jsonContext open_json() {
		Open_jsonContext _localctx = new Open_jsonContext(_ctx, State);
		EnterRule(_localctx, 1004, RULE_open_json);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11942; Match(OPENJSON);
			State = 11943; Match(LR_BRACKET);
			State = 11944; expression(0);
			State = 11947;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1627,_ctx) ) {
			case 1:
				{
				State = 11945; Match(COMMA);
				State = 11946; expression(0);
				}
				break;
			}
			State = 11949; Match(RR_BRACKET);
			State = 11955;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1628,_ctx) ) {
			case 1:
				{
				State = 11950; Match(WITH);
				State = 11951; Match(LR_BRACKET);
				State = 11952; json_declaration();
				State = 11953; Match(RR_BRACKET);
				}
				break;
			}
			State = 11958;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1629,_ctx) ) {
			case 1:
				{
				State = 11957; as_table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_declarationContext : ParserRuleContext {
		public Json_column_declarationContext _json_column_declaration;
		public IList<Json_column_declarationContext> _json_col = new List<Json_column_declarationContext>();
		public Json_column_declarationContext[] json_column_declaration() {
			return GetRuleContexts<Json_column_declarationContext>();
		}
		public Json_column_declarationContext json_column_declaration(int i) {
			return GetRuleContext<Json_column_declarationContext>(i);
		}
		public Json_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJson_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJson_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Json_declarationContext json_declaration() {
		Json_declarationContext _localctx = new Json_declarationContext(_ctx, State);
		EnterRule(_localctx, 1006, RULE_json_declaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11960; _localctx._json_column_declaration = json_column_declaration();
			_localctx._json_col.Add(_localctx._json_column_declaration);
			State = 11965;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1630,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11961; Match(COMMA);
					State = 11962; _localctx._json_column_declaration = json_column_declaration();
					_localctx._json_col.Add(_localctx._json_column_declaration);
					}
					} 
				}
				State = 11967;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1630,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_column_declarationContext : ParserRuleContext {
		public Column_declarationContext column_declaration() {
			return GetRuleContext<Column_declarationContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode JSON() { return GetToken(TSqlParser.JSON, 0); }
		public Json_column_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_column_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJson_column_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJson_column_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Json_column_declarationContext json_column_declaration() {
		Json_column_declarationContext _localctx = new Json_column_declarationContext(_ctx, State);
		EnterRule(_localctx, 1008, RULE_json_column_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11968; column_declaration();
			State = 11971;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1631,_ctx) ) {
			case 1:
				{
				State = 11969; Match(AS);
				State = 11970; Match(JSON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Schema_declarationContext : ParserRuleContext {
		public Column_declarationContext _column_declaration;
		public IList<Column_declarationContext> _xml_col = new List<Column_declarationContext>();
		public Column_declarationContext[] column_declaration() {
			return GetRuleContexts<Column_declarationContext>();
		}
		public Column_declarationContext column_declaration(int i) {
			return GetRuleContext<Column_declarationContext>(i);
		}
		public Schema_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSchema_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSchema_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Schema_declarationContext schema_declaration() {
		Schema_declarationContext _localctx = new Schema_declarationContext(_ctx, State);
		EnterRule(_localctx, 1010, RULE_schema_declaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11973; _localctx._column_declaration = column_declaration();
			_localctx._xml_col.Add(_localctx._column_declaration);
			State = 11978;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1632,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11974; Match(COMMA);
					State = 11975; _localctx._column_declaration = column_declaration();
					_localctx._xml_col.Add(_localctx._column_declaration);
					}
					} 
				}
				State = 11980;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1632,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_declarationContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Column_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Column_declarationContext column_declaration() {
		Column_declarationContext _localctx = new Column_declarationContext(_ctx, State);
		EnterRule(_localctx, 1012, RULE_column_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11981; id_();
			State = 11982; data_type();
			State = 11984;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1633,_ctx) ) {
			case 1:
				{
				State = 11983; Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_tableContext : ParserRuleContext {
		public Change_table_changesContext change_table_changes() {
			return GetRuleContext<Change_table_changesContext>(0);
		}
		public Change_table_versionContext change_table_version() {
			return GetRuleContext<Change_table_versionContext>(0);
		}
		public Change_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_table(this);
		}
	}

	[RuleVersion(0)]
	public Change_tableContext change_table() {
		Change_tableContext _localctx = new Change_tableContext(_ctx, State);
		EnterRule(_localctx, 1014, RULE_change_table);
		try {
			State = 11988;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1634,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11986; change_table_changes();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11987; change_table_version();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_table_changesContext : ParserRuleContext {
		public Table_nameContext changetable;
		public IToken changesid;
		public ITerminalNode CHANGETABLE() { return GetToken(TSqlParser.CHANGETABLE, 0); }
		public ITerminalNode CHANGES() { return GetToken(TSqlParser.CHANGES, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Change_table_changesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_table_changes; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_table_changes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_table_changes(this);
		}
	}

	[RuleVersion(0)]
	public Change_table_changesContext change_table_changes() {
		Change_table_changesContext _localctx = new Change_table_changesContext(_ctx, State);
		EnterRule(_localctx, 1016, RULE_change_table_changes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11990; Match(CHANGETABLE);
			State = 11991; Match(LR_BRACKET);
			State = 11992; Match(CHANGES);
			State = 11993; _localctx.changetable = table_name();
			State = 11994; Match(COMMA);
			State = 11995;
			_localctx.changesid = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==NULL_ || _la==LOCAL_ID || _la==DECIMAL) ) {
				_localctx.changesid = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 11996; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_table_versionContext : ParserRuleContext {
		public Table_nameContext versiontable;
		public Full_column_name_listContext pk_columns;
		public Select_listContext pk_values;
		public ITerminalNode CHANGETABLE() { return GetToken(TSqlParser.CHANGETABLE, 0); }
		public ITerminalNode VERSION() { return GetToken(TSqlParser.VERSION, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Full_column_name_listContext full_column_name_list() {
			return GetRuleContext<Full_column_name_listContext>(0);
		}
		public Select_listContext select_list() {
			return GetRuleContext<Select_listContext>(0);
		}
		public Change_table_versionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_table_version; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_table_version(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_table_version(this);
		}
	}

	[RuleVersion(0)]
	public Change_table_versionContext change_table_version() {
		Change_table_versionContext _localctx = new Change_table_versionContext(_ctx, State);
		EnterRule(_localctx, 1018, RULE_change_table_version);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11998; Match(CHANGETABLE);
			State = 11999; Match(LR_BRACKET);
			State = 12000; Match(VERSION);
			State = 12001; _localctx.versiontable = table_name();
			State = 12002; Match(COMMA);
			State = 12003; _localctx.pk_columns = full_column_name_list();
			State = 12004; Match(COMMA);
			State = 12005; _localctx.pk_values = select_list();
			State = 12006; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_partContext : ParserRuleContext {
		public Join_onContext join_on() {
			return GetRuleContext<Join_onContext>(0);
		}
		public Cross_joinContext cross_join() {
			return GetRuleContext<Cross_joinContext>(0);
		}
		public Apply_Context apply_() {
			return GetRuleContext<Apply_Context>(0);
		}
		public PivotContext pivot() {
			return GetRuleContext<PivotContext>(0);
		}
		public UnpivotContext unpivot() {
			return GetRuleContext<UnpivotContext>(0);
		}
		public Join_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_part; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJoin_part(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJoin_part(this);
		}
	}

	[RuleVersion(0)]
	public Join_partContext join_part() {
		Join_partContext _localctx = new Join_partContext(_ctx, State);
		EnterRule(_localctx, 1020, RULE_join_part);
		try {
			State = 12013;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1635,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12008; join_on();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12009; cross_join();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 12010; apply_();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 12011; pivot();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 12012; unpivot();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_onContext : ParserRuleContext {
		public IToken inner;
		public IToken join_type;
		public IToken outer;
		public IToken join_hint;
		public Table_sourceContext source;
		public Search_conditionContext cond;
		public ITerminalNode JOIN() { return GetToken(TSqlParser.JOIN, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Table_sourceContext table_source() {
			return GetRuleContext<Table_sourceContext>(0);
		}
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode LEFT() { return GetToken(TSqlParser.LEFT, 0); }
		public ITerminalNode RIGHT() { return GetToken(TSqlParser.RIGHT, 0); }
		public ITerminalNode FULL() { return GetToken(TSqlParser.FULL, 0); }
		public ITerminalNode LOOP() { return GetToken(TSqlParser.LOOP, 0); }
		public ITerminalNode HASH() { return GetToken(TSqlParser.HASH, 0); }
		public ITerminalNode MERGE() { return GetToken(TSqlParser.MERGE, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode INNER() { return GetToken(TSqlParser.INNER, 0); }
		public ITerminalNode OUTER() { return GetToken(TSqlParser.OUTER, 0); }
		public Join_onContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_on; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJoin_on(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJoin_on(this);
		}
	}

	[RuleVersion(0)]
	public Join_onContext join_on() {
		Join_onContext _localctx = new Join_onContext(_ctx, State);
		EnterRule(_localctx, 1022, RULE_join_on);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12022;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1638,_ctx) ) {
			case 1:
				{
				State = 12016;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1636,_ctx) ) {
				case 1:
					{
					State = 12015; _localctx.inner = Match(INNER);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 12018;
				_localctx.join_type = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
					_localctx.join_type = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 12020;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1637,_ctx) ) {
				case 1:
					{
					State = 12019; _localctx.outer = Match(OUTER);
					}
					break;
				}
				}
				break;
			}
			State = 12025;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1639,_ctx) ) {
			case 1:
				{
				State = 12024;
				_localctx.join_hint = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==HASH || _la==LOOP || _la==MERGE || _la==REMOTE) ) {
					_localctx.join_hint = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 12027; Match(JOIN);
			State = 12028; _localctx.source = table_source();
			State = 12029; Match(ON);
			State = 12030; _localctx.cond = search_condition(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cross_joinContext : ParserRuleContext {
		public ITerminalNode CROSS() { return GetToken(TSqlParser.CROSS, 0); }
		public ITerminalNode JOIN() { return GetToken(TSqlParser.JOIN, 0); }
		public Table_source_itemContext table_source_item() {
			return GetRuleContext<Table_source_itemContext>(0);
		}
		public Cross_joinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cross_join; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCross_join(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCross_join(this);
		}
	}

	[RuleVersion(0)]
	public Cross_joinContext cross_join() {
		Cross_joinContext _localctx = new Cross_joinContext(_ctx, State);
		EnterRule(_localctx, 1024, RULE_cross_join);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12032; Match(CROSS);
			State = 12033; Match(JOIN);
			State = 12034; table_source_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Apply_Context : ParserRuleContext {
		public IToken apply_style;
		public Table_source_itemContext source;
		public ITerminalNode APPLY() { return GetToken(TSqlParser.APPLY, 0); }
		public Table_source_itemContext table_source_item() {
			return GetRuleContext<Table_source_itemContext>(0);
		}
		public ITerminalNode CROSS() { return GetToken(TSqlParser.CROSS, 0); }
		public ITerminalNode OUTER() { return GetToken(TSqlParser.OUTER, 0); }
		public Apply_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_apply_; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterApply_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitApply_(this);
		}
	}

	[RuleVersion(0)]
	public Apply_Context apply_() {
		Apply_Context _localctx = new Apply_Context(_ctx, State);
		EnterRule(_localctx, 1026, RULE_apply_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12036;
			_localctx.apply_style = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==CROSS || _la==OUTER) ) {
				_localctx.apply_style = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 12037; Match(APPLY);
			State = 12038; _localctx.source = table_source_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PivotContext : ParserRuleContext {
		public ITerminalNode PIVOT() { return GetToken(TSqlParser.PIVOT, 0); }
		public Pivot_clauseContext pivot_clause() {
			return GetRuleContext<Pivot_clauseContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public PivotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPivot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPivot(this);
		}
	}

	[RuleVersion(0)]
	public PivotContext pivot() {
		PivotContext _localctx = new PivotContext(_ctx, State);
		EnterRule(_localctx, 1028, RULE_pivot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12040; Match(PIVOT);
			State = 12041; pivot_clause();
			State = 12042; as_table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnpivotContext : ParserRuleContext {
		public ITerminalNode UNPIVOT() { return GetToken(TSqlParser.UNPIVOT, 0); }
		public Unpivot_clauseContext unpivot_clause() {
			return GetRuleContext<Unpivot_clauseContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public UnpivotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpivot; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUnpivot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUnpivot(this);
		}
	}

	[RuleVersion(0)]
	public UnpivotContext unpivot() {
		UnpivotContext _localctx = new UnpivotContext(_ctx, State);
		EnterRule(_localctx, 1030, RULE_unpivot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12044; Match(UNPIVOT);
			State = 12045; unpivot_clause();
			State = 12046; as_table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pivot_clauseContext : ParserRuleContext {
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return GetRuleContext<Aggregate_windowed_functionContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public Column_alias_listContext column_alias_list() {
			return GetRuleContext<Column_alias_listContext>(0);
		}
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPivot_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPivot_clause(this);
		}
	}

	[RuleVersion(0)]
	public Pivot_clauseContext pivot_clause() {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, State);
		EnterRule(_localctx, 1032, RULE_pivot_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12048; Match(LR_BRACKET);
			State = 12049; aggregate_windowed_function();
			State = 12050; Match(FOR);
			State = 12051; full_column_name();
			State = 12052; Match(IN);
			State = 12053; column_alias_list();
			State = 12054; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unpivot_clauseContext : ParserRuleContext {
		public ExpressionContext unpivot_exp;
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public Full_column_name_listContext full_column_name_list() {
			return GetRuleContext<Full_column_name_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpivot_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUnpivot_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUnpivot_clause(this);
		}
	}

	[RuleVersion(0)]
	public Unpivot_clauseContext unpivot_clause() {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, State);
		EnterRule(_localctx, 1034, RULE_unpivot_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12056; Match(LR_BRACKET);
			State = 12057; _localctx.unpivot_exp = expression(0);
			State = 12058; Match(FOR);
			State = 12059; full_column_name();
			State = 12060; Match(IN);
			State = 12061; Match(LR_BRACKET);
			State = 12062; full_column_name_list();
			State = 12063; Match(RR_BRACKET);
			State = 12064; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_column_name_listContext : ParserRuleContext {
		public Full_column_nameContext _full_column_name;
		public IList<Full_column_nameContext> _column = new List<Full_column_nameContext>();
		public Full_column_nameContext[] full_column_name() {
			return GetRuleContexts<Full_column_nameContext>();
		}
		public Full_column_nameContext full_column_name(int i) {
			return GetRuleContext<Full_column_nameContext>(i);
		}
		public Full_column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_column_name_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFull_column_name_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFull_column_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Full_column_name_listContext full_column_name_list() {
		Full_column_name_listContext _localctx = new Full_column_name_listContext(_ctx, State);
		EnterRule(_localctx, 1036, RULE_full_column_name_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 12066; _localctx._full_column_name = full_column_name();
			_localctx._column.Add(_localctx._full_column_name);
			State = 12071;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1640,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 12067; Match(COMMA);
					State = 12068; _localctx._full_column_name = full_column_name();
					_localctx._column.Add(_localctx._full_column_name);
					}
					} 
				}
				State = 12073;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1640,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rowset_functionContext : ParserRuleContext {
		public IToken provider_name;
		public IToken connectionString;
		public IToken sql;
		public IToken data_file;
		public ITerminalNode OPENROWSET() { return GetToken(TSqlParser.OPENROWSET, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode BULK() { return GetToken(TSqlParser.BULK, 0); }
		public Bulk_optionContext[] bulk_option() {
			return GetRuleContexts<Bulk_optionContext>();
		}
		public Bulk_optionContext bulk_option(int i) {
			return GetRuleContext<Bulk_optionContext>(i);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Rowset_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowset_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRowset_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRowset_function(this);
		}
	}

	[RuleVersion(0)]
	public Rowset_functionContext rowset_function() {
		Rowset_functionContext _localctx = new Rowset_functionContext(_ctx, State);
		EnterRule(_localctx, 1038, RULE_rowset_function);
		try {
			int _alt;
			State = 12100;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1643,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 12074; Match(OPENROWSET);
				State = 12075; Match(LR_BRACKET);
				State = 12076; _localctx.provider_name = Match(STRING);
				State = 12077; Match(COMMA);
				State = 12078; _localctx.connectionString = Match(STRING);
				State = 12079; Match(COMMA);
				State = 12080; _localctx.sql = Match(STRING);
				State = 12081; Match(RR_BRACKET);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 12082; Match(OPENROWSET);
				State = 12083; Match(LR_BRACKET);
				State = 12084; Match(BULK);
				State = 12085; _localctx.data_file = Match(STRING);
				State = 12086; Match(COMMA);
				State = 12096;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1642,_ctx) ) {
				case 1:
					{
					State = 12087; bulk_option();
					State = 12092;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1641,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 12088; Match(COMMA);
							State = 12089; bulk_option();
							}
							} 
						}
						State = 12094;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1641,_ctx);
					}
					}
					break;

				case 2:
					{
					State = 12095; id_();
					}
					break;
				}
				State = 12098; Match(RR_BRACKET);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bulk_optionContext : ParserRuleContext {
		public IToken bulk_option_value;
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Bulk_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bulk_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBulk_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBulk_option(this);
		}
	}

	[RuleVersion(0)]
	public Bulk_optionContext bulk_option() {
		Bulk_optionContext _localctx = new Bulk_optionContext(_ctx, State);
		EnterRule(_localctx, 1040, RULE_bulk_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12102; id_();
			State = 12103; Match(EQUAL);
			State = 12104;
			_localctx.bulk_option_value = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==DECIMAL || _la==STRING) ) {
				_localctx.bulk_option_value = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_tableContext : ParserRuleContext {
		public SubqueryContext[] subquery() {
			return GetRuleContexts<SubqueryContext>();
		}
		public SubqueryContext subquery(int i) {
			return GetRuleContext<SubqueryContext>(i);
		}
		public ITerminalNode[] UNION() { return GetTokens(TSqlParser.UNION); }
		public ITerminalNode UNION(int i) {
			return GetToken(TSqlParser.UNION, i);
		}
		public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		public Table_value_constructorContext table_value_constructor() {
			return GetRuleContext<Table_value_constructorContext>(0);
		}
		public Derived_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDerived_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDerived_table(this);
		}
	}

	[RuleVersion(0)]
	public Derived_tableContext derived_table() {
		Derived_tableContext _localctx = new Derived_tableContext(_ctx, State);
		EnterRule(_localctx, 1042, RULE_derived_table);
		try {
			int _alt;
			State = 12124;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1645,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12106; subquery();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12107; Match(LR_BRACKET);
				State = 12108; subquery();
				State = 12114;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1644,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 12109; Match(UNION);
						State = 12110; Match(ALL);
						State = 12111; subquery();
						}
						} 
					}
					State = 12116;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1644,_ctx);
				}
				State = 12117; Match(RR_BRACKET);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 12119; table_value_constructor();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 12120; Match(LR_BRACKET);
				State = 12121; table_value_constructor();
				State = 12122; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
	 
		public Function_callContext() { }
		public virtual void CopyFrom(Function_callContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RANKING_WINDOWED_FUNCContext : Function_callContext {
		public Ranking_windowed_functionContext ranking_windowed_function() {
			return GetRuleContext<Ranking_windowed_functionContext>(0);
		}
		public RANKING_WINDOWED_FUNCContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRANKING_WINDOWED_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRANKING_WINDOWED_FUNC(this);
		}
	}
	public partial class AGGREGATE_WINDOWED_FUNCContext : Function_callContext {
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return GetRuleContext<Aggregate_windowed_functionContext>(0);
		}
		public AGGREGATE_WINDOWED_FUNCContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAGGREGATE_WINDOWED_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAGGREGATE_WINDOWED_FUNC(this);
		}
	}
	public partial class ANALYTIC_WINDOWED_FUNCContext : Function_callContext {
		public Analytic_windowed_functionContext analytic_windowed_function() {
			return GetRuleContext<Analytic_windowed_functionContext>(0);
		}
		public ANALYTIC_WINDOWED_FUNCContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterANALYTIC_WINDOWED_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitANALYTIC_WINDOWED_FUNC(this);
		}
	}
	public partial class BUILT_IN_FUNCContext : Function_callContext {
		public Built_in_functionsContext built_in_functions() {
			return GetRuleContext<Built_in_functionsContext>(0);
		}
		public BUILT_IN_FUNCContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBUILT_IN_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBUILT_IN_FUNC(this);
		}
	}
	public partial class SCALAR_FUNCTIONContext : Function_callContext {
		public Scalar_function_nameContext scalar_function_name() {
			return GetRuleContext<Scalar_function_nameContext>(0);
		}
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public SCALAR_FUNCTIONContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSCALAR_FUNCTION(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSCALAR_FUNCTION(this);
		}
	}
	public partial class FREE_TEXTContext : Function_callContext {
		public Freetext_functionContext freetext_function() {
			return GetRuleContext<Freetext_functionContext>(0);
		}
		public FREE_TEXTContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFREE_TEXT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFREE_TEXT(this);
		}
	}
	public partial class PARTITION_FUNCContext : Function_callContext {
		public Partition_functionContext partition_function() {
			return GetRuleContext<Partition_functionContext>(0);
		}
		public PARTITION_FUNCContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPARTITION_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPARTITION_FUNC(this);
		}
	}
	public partial class HIERARCHYID_METHODContext : Function_callContext {
		public Hierarchyid_static_methodContext hierarchyid_static_method() {
			return GetRuleContext<Hierarchyid_static_methodContext>(0);
		}
		public HIERARCHYID_METHODContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterHIERARCHYID_METHOD(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitHIERARCHYID_METHOD(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(_ctx, State);
		EnterRule(_localctx, 1044, RULE_function_call);
		try {
			State = 12140;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1647,_ctx) ) {
			case 1:
				_localctx = new RANKING_WINDOWED_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 12126; ranking_windowed_function();
				}
				break;

			case 2:
				_localctx = new AGGREGATE_WINDOWED_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 12127; aggregate_windowed_function();
				}
				break;

			case 3:
				_localctx = new ANALYTIC_WINDOWED_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 12128; analytic_windowed_function();
				}
				break;

			case 4:
				_localctx = new BUILT_IN_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 12129; built_in_functions();
				}
				break;

			case 5:
				_localctx = new SCALAR_FUNCTIONContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 12130; scalar_function_name();
				State = 12131; Match(LR_BRACKET);
				State = 12133;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1646,_ctx) ) {
				case 1:
					{
					State = 12132; expression_list_();
					}
					break;
				}
				State = 12135; Match(RR_BRACKET);
				}
				break;

			case 6:
				_localctx = new FREE_TEXTContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 12137; freetext_function();
				}
				break;

			case 7:
				_localctx = new PARTITION_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 12138; partition_function();
				}
				break;

			case 8:
				_localctx = new HIERARCHYID_METHODContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 12139; hierarchyid_static_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_functionContext : ParserRuleContext {
		public Id_Context database;
		public Id_Context func_name;
		public ITerminalNode DOLLAR_PARTITION() { return GetToken(TSqlParser.DOLLAR_PARTITION, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Partition_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPartition_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPartition_function(this);
		}
	}

	[RuleVersion(0)]
	public Partition_functionContext partition_function() {
		Partition_functionContext _localctx = new Partition_functionContext(_ctx, State);
		EnterRule(_localctx, 1046, RULE_partition_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12145;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1648,_ctx) ) {
			case 1:
				{
				State = 12142; _localctx.database = id_();
				State = 12143; Match(DOT);
				}
				break;
			}
			State = 12147; Match(DOLLAR_PARTITION);
			State = 12148; Match(DOT);
			State = 12149; _localctx.func_name = id_();
			State = 12150; Match(LR_BRACKET);
			State = 12151; expression(0);
			State = 12152; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Freetext_functionContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode CONTAINSTABLE() { return GetToken(TSqlParser.CONTAINSTABLE, 0); }
		public ITerminalNode FREETEXTTABLE() { return GetToken(TSqlParser.FREETEXTTABLE, 0); }
		public Full_column_nameContext[] full_column_name() {
			return GetRuleContexts<Full_column_nameContext>();
		}
		public Full_column_nameContext full_column_name(int i) {
			return GetRuleContext<Full_column_nameContext>(i);
		}
		public ITerminalNode LANGUAGE() { return GetToken(TSqlParser.LANGUAGE, 0); }
		public ITerminalNode SEMANTICSIMILARITYTABLE() { return GetToken(TSqlParser.SEMANTICSIMILARITYTABLE, 0); }
		public ITerminalNode SEMANTICKEYPHRASETABLE() { return GetToken(TSqlParser.SEMANTICKEYPHRASETABLE, 0); }
		public ITerminalNode SEMANTICSIMILARITYDETAILSTABLE() { return GetToken(TSqlParser.SEMANTICSIMILARITYDETAILSTABLE, 0); }
		public Freetext_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_freetext_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFreetext_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFreetext_function(this);
		}
	}

	[RuleVersion(0)]
	public Freetext_functionContext freetext_function() {
		Freetext_functionContext _localctx = new Freetext_functionContext(_ctx, State);
		EnterRule(_localctx, 1048, RULE_freetext_function);
		int _la;
		try {
			int _alt;
			State = 12222;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1655,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12154;
				_la = _input.La(1);
				if ( !(_la==CONTAINSTABLE || _la==FREETEXTTABLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 12155; Match(LR_BRACKET);
				State = 12156; table_name();
				State = 12157; Match(COMMA);
				State = 12171;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1650,_ctx) ) {
				case 1:
					{
					State = 12158; full_column_name();
					}
					break;

				case 2:
					{
					State = 12159; Match(LR_BRACKET);
					State = 12160; full_column_name();
					State = 12165;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1649,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 12161; Match(COMMA);
							State = 12162; full_column_name();
							}
							} 
						}
						State = 12167;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1649,_ctx);
					}
					State = 12168; Match(RR_BRACKET);
					}
					break;

				case 3:
					{
					State = 12170; Match(STAR);
					}
					break;
				}
				State = 12173; Match(COMMA);
				State = 12174; expression(0);
				State = 12178;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1651,_ctx) ) {
				case 1:
					{
					State = 12175; Match(COMMA);
					State = 12176; Match(LANGUAGE);
					State = 12177; expression(0);
					}
					break;
				}
				State = 12182;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1652,_ctx) ) {
				case 1:
					{
					State = 12180; Match(COMMA);
					State = 12181; expression(0);
					}
					break;
				}
				State = 12184; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12186;
				_la = _input.La(1);
				if ( !(_la==SEMANTICKEYPHRASETABLE || _la==SEMANTICSIMILARITYTABLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 12187; Match(LR_BRACKET);
				State = 12188; table_name();
				State = 12189; Match(COMMA);
				State = 12203;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1654,_ctx) ) {
				case 1:
					{
					State = 12190; full_column_name();
					}
					break;

				case 2:
					{
					State = 12191; Match(LR_BRACKET);
					State = 12192; full_column_name();
					State = 12197;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1653,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 12193; Match(COMMA);
							State = 12194; full_column_name();
							}
							} 
						}
						State = 12199;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1653,_ctx);
					}
					State = 12200; Match(RR_BRACKET);
					}
					break;

				case 3:
					{
					State = 12202; Match(STAR);
					}
					break;
				}
				State = 12205; Match(COMMA);
				State = 12206; expression(0);
				State = 12207; Match(RR_BRACKET);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 12209; Match(SEMANTICSIMILARITYDETAILSTABLE);
				State = 12210; Match(LR_BRACKET);
				State = 12211; table_name();
				State = 12212; Match(COMMA);
				State = 12213; full_column_name();
				State = 12214; Match(COMMA);
				State = 12215; expression(0);
				State = 12216; Match(COMMA);
				State = 12217; full_column_name();
				State = 12218; Match(COMMA);
				State = 12219; expression(0);
				State = 12220; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Freetext_predicateContext : ParserRuleContext {
		public ITerminalNode CONTAINS() { return GetToken(TSqlParser.CONTAINS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Full_column_nameContext[] full_column_name() {
			return GetRuleContexts<Full_column_nameContext>();
		}
		public Full_column_nameContext full_column_name(int i) {
			return GetRuleContext<Full_column_nameContext>(i);
		}
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode FREETEXT() { return GetToken(TSqlParser.FREETEXT, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode LANGUAGE() { return GetToken(TSqlParser.LANGUAGE, 0); }
		public Freetext_predicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_freetext_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFreetext_predicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFreetext_predicate(this);
		}
	}

	[RuleVersion(0)]
	public Freetext_predicateContext freetext_predicate() {
		Freetext_predicateContext _localctx = new Freetext_predicateContext(_ctx, State);
		EnterRule(_localctx, 1050, RULE_freetext_predicate);
		try {
			int _alt;
			State = 12280;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1661,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12224; Match(CONTAINS);
				State = 12225; Match(LR_BRACKET);
				State = 12246;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1657,_ctx) ) {
				case 1:
					{
					State = 12226; full_column_name();
					}
					break;

				case 2:
					{
					State = 12227; Match(LR_BRACKET);
					State = 12228; full_column_name();
					State = 12233;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1656,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 12229; Match(COMMA);
							State = 12230; full_column_name();
							}
							} 
						}
						State = 12235;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1656,_ctx);
					}
					State = 12236; Match(RR_BRACKET);
					}
					break;

				case 3:
					{
					State = 12238; Match(STAR);
					}
					break;

				case 4:
					{
					State = 12239; Match(PROPERTY);
					State = 12240; Match(LR_BRACKET);
					State = 12241; full_column_name();
					State = 12242; Match(COMMA);
					State = 12243; expression(0);
					State = 12244; Match(RR_BRACKET);
					}
					break;
				}
				State = 12248; Match(COMMA);
				State = 12249; expression(0);
				State = 12250; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12252; Match(FREETEXT);
				State = 12253; Match(LR_BRACKET);
				State = 12254; table_name();
				State = 12255; Match(COMMA);
				State = 12269;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1659,_ctx) ) {
				case 1:
					{
					State = 12256; full_column_name();
					}
					break;

				case 2:
					{
					State = 12257; Match(LR_BRACKET);
					State = 12258; full_column_name();
					State = 12263;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1658,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 12259; Match(COMMA);
							State = 12260; full_column_name();
							}
							} 
						}
						State = 12265;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1658,_ctx);
					}
					State = 12266; Match(RR_BRACKET);
					}
					break;

				case 3:
					{
					State = 12268; Match(STAR);
					}
					break;
				}
				State = 12271; Match(COMMA);
				State = 12272; expression(0);
				State = 12276;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1660,_ctx) ) {
				case 1:
					{
					State = 12273; Match(COMMA);
					State = 12274; Match(LANGUAGE);
					State = 12275; expression(0);
					}
					break;
				}
				State = 12278; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_key_valueContext : ParserRuleContext {
		public ExpressionContext json_key_name;
		public ExpressionContext value_expression;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Json_key_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_key_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJson_key_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJson_key_value(this);
		}
	}

	[RuleVersion(0)]
	public Json_key_valueContext json_key_value() {
		Json_key_valueContext _localctx = new Json_key_valueContext(_ctx, State);
		EnterRule(_localctx, 1052, RULE_json_key_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12282; _localctx.json_key_name = expression(0);
			State = 12283; Match(COLON);
			State = 12284; _localctx.value_expression = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_null_clauseContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode[] NULL_() { return GetTokens(TSqlParser.NULL_); }
		public ITerminalNode NULL_(int i) {
			return GetToken(TSqlParser.NULL_, i);
		}
		public ITerminalNode ABSENT() { return GetToken(TSqlParser.ABSENT, 0); }
		public Json_null_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_null_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJson_null_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJson_null_clause(this);
		}
	}

	[RuleVersion(0)]
	public Json_null_clauseContext json_null_clause() {
		Json_null_clauseContext _localctx = new Json_null_clauseContext(_ctx, State);
		EnterRule(_localctx, 1054, RULE_json_null_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12286;
			_la = _input.La(1);
			if ( !(_la==ABSENT || _la==NULL_) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 12287; Match(ON);
			State = 12288; Match(NULL_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Built_in_functionsContext : ParserRuleContext {
		public Built_in_functionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_built_in_functions; } }
	 
		public Built_in_functionsContext() { }
		public virtual void CopyFrom(Built_in_functionsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class APP_NAMEContext : Built_in_functionsContext {
		public ITerminalNode APP_NAME() { return GetToken(TSqlParser.APP_NAME, 0); }
		public APP_NAMEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAPP_NAME(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAPP_NAME(this);
		}
	}
	public partial class APPLOCK_MODEContext : Built_in_functionsContext {
		public ExpressionContext database_principal;
		public ExpressionContext resource_name;
		public ExpressionContext lock_owner;
		public ITerminalNode APPLOCK_MODE() { return GetToken(TSqlParser.APPLOCK_MODE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public APPLOCK_MODEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAPPLOCK_MODE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAPPLOCK_MODE(this);
		}
	}
	public partial class APPLOCK_TESTContext : Built_in_functionsContext {
		public ExpressionContext database_principal;
		public ExpressionContext resource_name;
		public ExpressionContext lock_mode;
		public ExpressionContext lock_owner;
		public ITerminalNode APPLOCK_TEST() { return GetToken(TSqlParser.APPLOCK_TEST, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public APPLOCK_TESTContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAPPLOCK_TEST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAPPLOCK_TEST(this);
		}
	}
	public partial class ASSEMBLYPROPERTYContext : Built_in_functionsContext {
		public ExpressionContext assembly_name;
		public ExpressionContext property_name;
		public ITerminalNode ASSEMBLYPROPERTY() { return GetToken(TSqlParser.ASSEMBLYPROPERTY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ASSEMBLYPROPERTYContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterASSEMBLYPROPERTY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitASSEMBLYPROPERTY(this);
		}
	}
	public partial class COL_LENGTHContext : Built_in_functionsContext {
		public ExpressionContext table;
		public ExpressionContext column;
		public ITerminalNode COL_LENGTH() { return GetToken(TSqlParser.COL_LENGTH, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public COL_LENGTHContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCOL_LENGTH(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCOL_LENGTH(this);
		}
	}
	public partial class COL_NAMEContext : Built_in_functionsContext {
		public ExpressionContext table_id;
		public ExpressionContext column_id;
		public ITerminalNode COL_NAME() { return GetToken(TSqlParser.COL_NAME, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public COL_NAMEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCOL_NAME(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCOL_NAME(this);
		}
	}
	public partial class COLUMNPROPERTYContext : Built_in_functionsContext {
		public ExpressionContext id;
		public ExpressionContext column;
		public ExpressionContext property;
		public ITerminalNode COLUMNPROPERTY() { return GetToken(TSqlParser.COLUMNPROPERTY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public COLUMNPROPERTYContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCOLUMNPROPERTY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCOLUMNPROPERTY(this);
		}
	}
	public partial class DATABASEPROPERTYEXContext : Built_in_functionsContext {
		public ExpressionContext database;
		public ExpressionContext property;
		public ITerminalNode DATABASEPROPERTYEX() { return GetToken(TSqlParser.DATABASEPROPERTYEX, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DATABASEPROPERTYEXContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATABASEPROPERTYEX(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATABASEPROPERTYEX(this);
		}
	}
	public partial class DB_IDContext : Built_in_functionsContext {
		public ExpressionContext database_name;
		public ITerminalNode DB_ID() { return GetToken(TSqlParser.DB_ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DB_IDContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDB_ID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDB_ID(this);
		}
	}
	public partial class DB_NAMEContext : Built_in_functionsContext {
		public ExpressionContext database_id;
		public ITerminalNode DB_NAME() { return GetToken(TSqlParser.DB_NAME, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DB_NAMEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDB_NAME(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDB_NAME(this);
		}
	}
	public partial class FILE_IDContext : Built_in_functionsContext {
		public ExpressionContext file_name;
		public ITerminalNode FILE_ID() { return GetToken(TSqlParser.FILE_ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FILE_IDContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFILE_ID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFILE_ID(this);
		}
	}
	public partial class FILE_IDEXContext : Built_in_functionsContext {
		public ExpressionContext file_name;
		public ITerminalNode FILE_IDEX() { return GetToken(TSqlParser.FILE_IDEX, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FILE_IDEXContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFILE_IDEX(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFILE_IDEX(this);
		}
	}
	public partial class FILE_NAMEContext : Built_in_functionsContext {
		public ExpressionContext file_id;
		public ITerminalNode FILE_NAME() { return GetToken(TSqlParser.FILE_NAME, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FILE_NAMEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFILE_NAME(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFILE_NAME(this);
		}
	}
	public partial class FILEGROUP_IDContext : Built_in_functionsContext {
		public ExpressionContext filegroup_name;
		public ITerminalNode FILEGROUP_ID() { return GetToken(TSqlParser.FILEGROUP_ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FILEGROUP_IDContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFILEGROUP_ID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFILEGROUP_ID(this);
		}
	}
	public partial class FILEGROUP_NAMEContext : Built_in_functionsContext {
		public ExpressionContext filegroup_id;
		public ITerminalNode FILEGROUP_NAME() { return GetToken(TSqlParser.FILEGROUP_NAME, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FILEGROUP_NAMEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFILEGROUP_NAME(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFILEGROUP_NAME(this);
		}
	}
	public partial class FILEGROUPPROPERTYContext : Built_in_functionsContext {
		public ExpressionContext filegroup_name;
		public ExpressionContext property;
		public ITerminalNode FILEGROUPPROPERTY() { return GetToken(TSqlParser.FILEGROUPPROPERTY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FILEGROUPPROPERTYContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFILEGROUPPROPERTY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFILEGROUPPROPERTY(this);
		}
	}
	public partial class FILEPROPERTYContext : Built_in_functionsContext {
		public ExpressionContext file_name;
		public ExpressionContext property;
		public ITerminalNode FILEPROPERTY() { return GetToken(TSqlParser.FILEPROPERTY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FILEPROPERTYContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFILEPROPERTY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFILEPROPERTY(this);
		}
	}
	public partial class FILEPROPERTYEXContext : Built_in_functionsContext {
		public ExpressionContext name;
		public ExpressionContext property;
		public ITerminalNode FILEPROPERTYEX() { return GetToken(TSqlParser.FILEPROPERTYEX, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FILEPROPERTYEXContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFILEPROPERTYEX(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFILEPROPERTYEX(this);
		}
	}
	public partial class FULLTEXTCATALOGPROPERTYContext : Built_in_functionsContext {
		public ExpressionContext catalog_name;
		public ExpressionContext property;
		public ITerminalNode FULLTEXTCATALOGPROPERTY() { return GetToken(TSqlParser.FULLTEXTCATALOGPROPERTY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FULLTEXTCATALOGPROPERTYContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFULLTEXTCATALOGPROPERTY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFULLTEXTCATALOGPROPERTY(this);
		}
	}
	public partial class FULLTEXTSERVICEPROPERTYContext : Built_in_functionsContext {
		public ExpressionContext property;
		public ITerminalNode FULLTEXTSERVICEPROPERTY() { return GetToken(TSqlParser.FULLTEXTSERVICEPROPERTY, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FULLTEXTSERVICEPROPERTYContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFULLTEXTSERVICEPROPERTY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFULLTEXTSERVICEPROPERTY(this);
		}
	}
	public partial class INDEX_COLContext : Built_in_functionsContext {
		public ExpressionContext table_or_view_name;
		public ExpressionContext index_id;
		public ExpressionContext key_id;
		public ITerminalNode INDEX_COL() { return GetToken(TSqlParser.INDEX_COL, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public INDEX_COLContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterINDEX_COL(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitINDEX_COL(this);
		}
	}
	public partial class INDEXKEY_PROPERTYContext : Built_in_functionsContext {
		public ExpressionContext object_id;
		public ExpressionContext index_id;
		public ExpressionContext key_id;
		public ExpressionContext property;
		public ITerminalNode INDEXKEY_PROPERTY() { return GetToken(TSqlParser.INDEXKEY_PROPERTY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public INDEXKEY_PROPERTYContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterINDEXKEY_PROPERTY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitINDEXKEY_PROPERTY(this);
		}
	}
	public partial class INDEXPROPERTYContext : Built_in_functionsContext {
		public ExpressionContext object_id;
		public ExpressionContext index_or_statistics_name;
		public ExpressionContext property;
		public ITerminalNode INDEXPROPERTY() { return GetToken(TSqlParser.INDEXPROPERTY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public INDEXPROPERTYContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterINDEXPROPERTY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitINDEXPROPERTY(this);
		}
	}
	public partial class NEXT_VALUE_FORContext : Built_in_functionsContext {
		public Table_nameContext sequence_name;
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode OVER() { return GetToken(TSqlParser.OVER, 0); }
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public NEXT_VALUE_FORContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNEXT_VALUE_FOR(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNEXT_VALUE_FOR(this);
		}
	}
	public partial class OBJECT_DEFINITIONContext : Built_in_functionsContext {
		public ExpressionContext object_id;
		public ITerminalNode OBJECT_DEFINITION() { return GetToken(TSqlParser.OBJECT_DEFINITION, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public OBJECT_DEFINITIONContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOBJECT_DEFINITION(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOBJECT_DEFINITION(this);
		}
	}
	public partial class OBJECT_IDContext : Built_in_functionsContext {
		public ExpressionContext object_name;
		public ExpressionContext object_type;
		public ITerminalNode OBJECT_ID() { return GetToken(TSqlParser.OBJECT_ID, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OBJECT_IDContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOBJECT_ID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOBJECT_ID(this);
		}
	}
	public partial class OBJECT_NAMEContext : Built_in_functionsContext {
		public ExpressionContext object_id;
		public ExpressionContext database_id;
		public ITerminalNode OBJECT_NAME() { return GetToken(TSqlParser.OBJECT_NAME, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OBJECT_NAMEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOBJECT_NAME(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOBJECT_NAME(this);
		}
	}
	public partial class OBJECT_SCHEMA_NAMEContext : Built_in_functionsContext {
		public ExpressionContext object_id;
		public ExpressionContext database_id;
		public ITerminalNode OBJECT_SCHEMA_NAME() { return GetToken(TSqlParser.OBJECT_SCHEMA_NAME, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OBJECT_SCHEMA_NAMEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOBJECT_SCHEMA_NAME(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOBJECT_SCHEMA_NAME(this);
		}
	}
	public partial class OBJECTPROPERTYContext : Built_in_functionsContext {
		public ExpressionContext id;
		public ExpressionContext property;
		public ITerminalNode OBJECTPROPERTY() { return GetToken(TSqlParser.OBJECTPROPERTY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OBJECTPROPERTYContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOBJECTPROPERTY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOBJECTPROPERTY(this);
		}
	}
	public partial class OBJECTPROPERTYEXContext : Built_in_functionsContext {
		public ExpressionContext id;
		public ExpressionContext property;
		public ITerminalNode OBJECTPROPERTYEX() { return GetToken(TSqlParser.OBJECTPROPERTYEX, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OBJECTPROPERTYEXContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOBJECTPROPERTYEX(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOBJECTPROPERTYEX(this);
		}
	}
	public partial class ORIGINAL_DB_NAMEContext : Built_in_functionsContext {
		public ITerminalNode ORIGINAL_DB_NAME() { return GetToken(TSqlParser.ORIGINAL_DB_NAME, 0); }
		public ORIGINAL_DB_NAMEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterORIGINAL_DB_NAME(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitORIGINAL_DB_NAME(this);
		}
	}
	public partial class PARSENAMEContext : Built_in_functionsContext {
		public ExpressionContext object_name;
		public ExpressionContext object_piece;
		public ITerminalNode PARSENAME() { return GetToken(TSqlParser.PARSENAME, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PARSENAMEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPARSENAME(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPARSENAME(this);
		}
	}
	public partial class SCHEMA_IDContext : Built_in_functionsContext {
		public ExpressionContext schema_name;
		public ITerminalNode SCHEMA_ID() { return GetToken(TSqlParser.SCHEMA_ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SCHEMA_IDContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSCHEMA_ID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSCHEMA_ID(this);
		}
	}
	public partial class SCHEMA_NAMEContext : Built_in_functionsContext {
		public ExpressionContext schema_id;
		public ITerminalNode SCHEMA_NAME() { return GetToken(TSqlParser.SCHEMA_NAME, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SCHEMA_NAMEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSCHEMA_NAME(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSCHEMA_NAME(this);
		}
	}
	public partial class SCOPE_IDENTITYContext : Built_in_functionsContext {
		public ITerminalNode SCOPE_IDENTITY() { return GetToken(TSqlParser.SCOPE_IDENTITY, 0); }
		public SCOPE_IDENTITYContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSCOPE_IDENTITY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSCOPE_IDENTITY(this);
		}
	}
	public partial class SERVERPROPERTYContext : Built_in_functionsContext {
		public ExpressionContext property;
		public ITerminalNode SERVERPROPERTY() { return GetToken(TSqlParser.SERVERPROPERTY, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SERVERPROPERTYContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSERVERPROPERTY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSERVERPROPERTY(this);
		}
	}
	public partial class STATS_DATEContext : Built_in_functionsContext {
		public ExpressionContext object_id;
		public ExpressionContext stats_id;
		public ITerminalNode STATS_DATE() { return GetToken(TSqlParser.STATS_DATE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public STATS_DATEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSTATS_DATE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSTATS_DATE(this);
		}
	}
	public partial class TYPE_IDContext : Built_in_functionsContext {
		public ExpressionContext type_name;
		public ITerminalNode TYPE_ID() { return GetToken(TSqlParser.TYPE_ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TYPE_IDContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTYPE_ID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTYPE_ID(this);
		}
	}
	public partial class TYPE_NAMEContext : Built_in_functionsContext {
		public ExpressionContext type_id;
		public ITerminalNode TYPE_NAME() { return GetToken(TSqlParser.TYPE_NAME, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TYPE_NAMEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTYPE_NAME(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTYPE_NAME(this);
		}
	}
	public partial class TYPEPROPERTYContext : Built_in_functionsContext {
		public ExpressionContext type;
		public ExpressionContext property;
		public ITerminalNode TYPEPROPERTY() { return GetToken(TSqlParser.TYPEPROPERTY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TYPEPROPERTYContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTYPEPROPERTY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTYPEPROPERTY(this);
		}
	}
	public partial class ASCIIContext : Built_in_functionsContext {
		public ExpressionContext character_expression;
		public ITerminalNode ASCII() { return GetToken(TSqlParser.ASCII, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ASCIIContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterASCII(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitASCII(this);
		}
	}
	public partial class CHARContext : Built_in_functionsContext {
		public ExpressionContext integer_expression;
		public ITerminalNode CHAR() { return GetToken(TSqlParser.CHAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CHARContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCHAR(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCHAR(this);
		}
	}
	public partial class CHARINDEXContext : Built_in_functionsContext {
		public ExpressionContext expressionToFind;
		public ExpressionContext expressionToSearch;
		public ExpressionContext start_location;
		public ITerminalNode CHARINDEX() { return GetToken(TSqlParser.CHARINDEX, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CHARINDEXContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCHARINDEX(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCHARINDEX(this);
		}
	}
	public partial class CONCATContext : Built_in_functionsContext {
		public ExpressionContext string_value_1;
		public ExpressionContext string_value_2;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _string_value_n = new List<ExpressionContext>();
		public ITerminalNode CONCAT() { return GetToken(TSqlParser.CONCAT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CONCATContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCONCAT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCONCAT(this);
		}
	}
	public partial class CONCAT_WSContext : Built_in_functionsContext {
		public ExpressionContext separator;
		public ExpressionContext argument_1;
		public ExpressionContext argument_2;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _argument_n = new List<ExpressionContext>();
		public ITerminalNode CONCAT_WS() { return GetToken(TSqlParser.CONCAT_WS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CONCAT_WSContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCONCAT_WS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCONCAT_WS(this);
		}
	}
	public partial class DIFFERENCEContext : Built_in_functionsContext {
		public ExpressionContext character_expression_1;
		public ExpressionContext character_expression_2;
		public ITerminalNode DIFFERENCE() { return GetToken(TSqlParser.DIFFERENCE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DIFFERENCEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDIFFERENCE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDIFFERENCE(this);
		}
	}
	public partial class FORMATContext : Built_in_functionsContext {
		public ExpressionContext value;
		public ExpressionContext format;
		public ExpressionContext culture;
		public ITerminalNode FORMAT() { return GetToken(TSqlParser.FORMAT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FORMATContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFORMAT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFORMAT(this);
		}
	}
	public partial class LEFTContext : Built_in_functionsContext {
		public ExpressionContext character_expression;
		public ExpressionContext integer_expression;
		public ITerminalNode LEFT() { return GetToken(TSqlParser.LEFT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LEFTContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLEFT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLEFT(this);
		}
	}
	public partial class LENContext : Built_in_functionsContext {
		public ExpressionContext string_expression;
		public ITerminalNode LEN() { return GetToken(TSqlParser.LEN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LENContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLEN(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLEN(this);
		}
	}
	public partial class LOWERContext : Built_in_functionsContext {
		public ExpressionContext character_expression;
		public ITerminalNode LOWER() { return GetToken(TSqlParser.LOWER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LOWERContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLOWER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLOWER(this);
		}
	}
	public partial class LTRIMContext : Built_in_functionsContext {
		public ExpressionContext character_expression;
		public ITerminalNode LTRIM() { return GetToken(TSqlParser.LTRIM, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LTRIMContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLTRIM(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLTRIM(this);
		}
	}
	public partial class NCHARContext : Built_in_functionsContext {
		public ExpressionContext integer_expression;
		public ITerminalNode NCHAR() { return GetToken(TSqlParser.NCHAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NCHARContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNCHAR(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNCHAR(this);
		}
	}
	public partial class PATINDEXContext : Built_in_functionsContext {
		public ExpressionContext pattern;
		public ExpressionContext string_expression;
		public ITerminalNode PATINDEX() { return GetToken(TSqlParser.PATINDEX, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PATINDEXContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPATINDEX(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPATINDEX(this);
		}
	}
	public partial class QUOTENAMEContext : Built_in_functionsContext {
		public ExpressionContext character_string;
		public ExpressionContext quote_character;
		public ITerminalNode QUOTENAME() { return GetToken(TSqlParser.QUOTENAME, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public QUOTENAMEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQUOTENAME(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQUOTENAME(this);
		}
	}
	public partial class REPLACEContext : Built_in_functionsContext {
		public ExpressionContext input;
		public ExpressionContext replacing;
		public ExpressionContext with;
		public ITerminalNode REPLACE() { return GetToken(TSqlParser.REPLACE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public REPLACEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterREPLACE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitREPLACE(this);
		}
	}
	public partial class REPLICATEContext : Built_in_functionsContext {
		public ExpressionContext string_expression;
		public ExpressionContext integer_expression;
		public ITerminalNode REPLICATE() { return GetToken(TSqlParser.REPLICATE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public REPLICATEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterREPLICATE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitREPLICATE(this);
		}
	}
	public partial class REVERSEContext : Built_in_functionsContext {
		public ExpressionContext string_expression;
		public ITerminalNode REVERSE() { return GetToken(TSqlParser.REVERSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public REVERSEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterREVERSE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitREVERSE(this);
		}
	}
	public partial class RIGHTContext : Built_in_functionsContext {
		public ExpressionContext character_expression;
		public ExpressionContext integer_expression;
		public ITerminalNode RIGHT() { return GetToken(TSqlParser.RIGHT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RIGHTContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRIGHT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRIGHT(this);
		}
	}
	public partial class RTRIMContext : Built_in_functionsContext {
		public ExpressionContext character_expression;
		public ITerminalNode RTRIM() { return GetToken(TSqlParser.RTRIM, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RTRIMContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRTRIM(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRTRIM(this);
		}
	}
	public partial class SOUNDEXContext : Built_in_functionsContext {
		public ExpressionContext character_expression;
		public ITerminalNode SOUNDEX() { return GetToken(TSqlParser.SOUNDEX, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SOUNDEXContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSOUNDEX(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSOUNDEX(this);
		}
	}
	public partial class SPACEContext : Built_in_functionsContext {
		public ExpressionContext integer_expression;
		public ITerminalNode SPACE_KEYWORD() { return GetToken(TSqlParser.SPACE_KEYWORD, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SPACEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSPACE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSPACE(this);
		}
	}
	public partial class STRContext : Built_in_functionsContext {
		public ExpressionContext float_expression;
		public ExpressionContext length_expression;
		public ExpressionContext @decimal;
		public ITerminalNode STR() { return GetToken(TSqlParser.STR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public STRContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSTR(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSTR(this);
		}
	}
	public partial class STRINGAGGContext : Built_in_functionsContext {
		public ExpressionContext expr;
		public ExpressionContext separator;
		public ITerminalNode STRING_AGG() { return GetToken(TSqlParser.STRING_AGG, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode WITHIN() { return GetToken(TSqlParser.WITHIN, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public STRINGAGGContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSTRINGAGG(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSTRINGAGG(this);
		}
	}
	public partial class STRING_ESCAPEContext : Built_in_functionsContext {
		public ExpressionContext text_;
		public ExpressionContext type_;
		public ITerminalNode STRING_ESCAPE() { return GetToken(TSqlParser.STRING_ESCAPE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public STRING_ESCAPEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSTRING_ESCAPE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSTRING_ESCAPE(this);
		}
	}
	public partial class STUFFContext : Built_in_functionsContext {
		public ExpressionContext str;
		public ExpressionContext from;
		public ExpressionContext to;
		public ExpressionContext str_with;
		public ITerminalNode STUFF() { return GetToken(TSqlParser.STUFF, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public STUFFContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSTUFF(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSTUFF(this);
		}
	}
	public partial class SUBSTRINGContext : Built_in_functionsContext {
		public ExpressionContext string_expression;
		public ExpressionContext start_;
		public ExpressionContext length;
		public ITerminalNode SUBSTRING() { return GetToken(TSqlParser.SUBSTRING, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SUBSTRINGContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSUBSTRING(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSUBSTRING(this);
		}
	}
	public partial class TRANSLATEContext : Built_in_functionsContext {
		public ExpressionContext inputString;
		public ExpressionContext characters;
		public ExpressionContext translations;
		public ITerminalNode TRANSLATE() { return GetToken(TSqlParser.TRANSLATE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TRANSLATEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTRANSLATE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTRANSLATE(this);
		}
	}
	public partial class TRIMContext : Built_in_functionsContext {
		public ExpressionContext characters;
		public ExpressionContext string_;
		public ITerminalNode TRIM() { return GetToken(TSqlParser.TRIM, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public TRIMContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTRIM(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTRIM(this);
		}
	}
	public partial class UNICODEContext : Built_in_functionsContext {
		public ExpressionContext ncharacter_expression;
		public ITerminalNode UNICODE() { return GetToken(TSqlParser.UNICODE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UNICODEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUNICODE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUNICODE(this);
		}
	}
	public partial class UPPERContext : Built_in_functionsContext {
		public ExpressionContext character_expression;
		public ITerminalNode UPPER() { return GetToken(TSqlParser.UPPER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UPPERContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUPPER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUPPER(this);
		}
	}
	public partial class BINARY_CHECKSUMContext : Built_in_functionsContext {
		public IToken star;
		public ITerminalNode BINARY_CHECKSUM() { return GetToken(TSqlParser.BINARY_CHECKSUM, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BINARY_CHECKSUMContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBINARY_CHECKSUM(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBINARY_CHECKSUM(this);
		}
	}
	public partial class CHECKSUMContext : Built_in_functionsContext {
		public IToken star;
		public ITerminalNode CHECKSUM() { return GetToken(TSqlParser.CHECKSUM, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CHECKSUMContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCHECKSUM(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCHECKSUM(this);
		}
	}
	public partial class COMPRESSContext : Built_in_functionsContext {
		public ExpressionContext expr;
		public ITerminalNode COMPRESS() { return GetToken(TSqlParser.COMPRESS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public COMPRESSContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCOMPRESS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCOMPRESS(this);
		}
	}
	public partial class CONNECTIONPROPERTYContext : Built_in_functionsContext {
		public IToken property;
		public ITerminalNode CONNECTIONPROPERTY() { return GetToken(TSqlParser.CONNECTIONPROPERTY, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public CONNECTIONPROPERTYContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCONNECTIONPROPERTY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCONNECTIONPROPERTY(this);
		}
	}
	public partial class CONTEXT_INFOContext : Built_in_functionsContext {
		public ITerminalNode CONTEXT_INFO() { return GetToken(TSqlParser.CONTEXT_INFO, 0); }
		public CONTEXT_INFOContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCONTEXT_INFO(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCONTEXT_INFO(this);
		}
	}
	public partial class CURRENT_REQUEST_IDContext : Built_in_functionsContext {
		public ITerminalNode CURRENT_REQUEST_ID() { return GetToken(TSqlParser.CURRENT_REQUEST_ID, 0); }
		public CURRENT_REQUEST_IDContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCURRENT_REQUEST_ID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCURRENT_REQUEST_ID(this);
		}
	}
	public partial class CURRENT_TRANSACTION_IDContext : Built_in_functionsContext {
		public ITerminalNode CURRENT_TRANSACTION_ID() { return GetToken(TSqlParser.CURRENT_TRANSACTION_ID, 0); }
		public CURRENT_TRANSACTION_IDContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCURRENT_TRANSACTION_ID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCURRENT_TRANSACTION_ID(this);
		}
	}
	public partial class DECOMPRESSContext : Built_in_functionsContext {
		public ExpressionContext expr;
		public ITerminalNode DECOMPRESS() { return GetToken(TSqlParser.DECOMPRESS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DECOMPRESSContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDECOMPRESS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDECOMPRESS(this);
		}
	}
	public partial class ERROR_LINEContext : Built_in_functionsContext {
		public ITerminalNode ERROR_LINE() { return GetToken(TSqlParser.ERROR_LINE, 0); }
		public ERROR_LINEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterERROR_LINE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitERROR_LINE(this);
		}
	}
	public partial class ERROR_MESSAGEContext : Built_in_functionsContext {
		public ITerminalNode ERROR_MESSAGE() { return GetToken(TSqlParser.ERROR_MESSAGE, 0); }
		public ERROR_MESSAGEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterERROR_MESSAGE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitERROR_MESSAGE(this);
		}
	}
	public partial class ERROR_NUMBERContext : Built_in_functionsContext {
		public ITerminalNode ERROR_NUMBER() { return GetToken(TSqlParser.ERROR_NUMBER, 0); }
		public ERROR_NUMBERContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterERROR_NUMBER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitERROR_NUMBER(this);
		}
	}
	public partial class ERROR_PROCEDUREContext : Built_in_functionsContext {
		public ITerminalNode ERROR_PROCEDURE() { return GetToken(TSqlParser.ERROR_PROCEDURE, 0); }
		public ERROR_PROCEDUREContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterERROR_PROCEDURE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitERROR_PROCEDURE(this);
		}
	}
	public partial class ERROR_SEVERITYContext : Built_in_functionsContext {
		public ITerminalNode ERROR_SEVERITY() { return GetToken(TSqlParser.ERROR_SEVERITY, 0); }
		public ERROR_SEVERITYContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterERROR_SEVERITY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitERROR_SEVERITY(this);
		}
	}
	public partial class ERROR_STATEContext : Built_in_functionsContext {
		public ITerminalNode ERROR_STATE() { return GetToken(TSqlParser.ERROR_STATE, 0); }
		public ERROR_STATEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterERROR_STATE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitERROR_STATE(this);
		}
	}
	public partial class FORMATMESSAGEContext : Built_in_functionsContext {
		public IToken msg_number;
		public IToken msg_string;
		public IToken msg_variable;
		public ITerminalNode FORMATMESSAGE() { return GetToken(TSqlParser.FORMATMESSAGE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public FORMATMESSAGEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFORMATMESSAGE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFORMATMESSAGE(this);
		}
	}
	public partial class GET_FILESTREAM_TRANSACTION_CONTEXTContext : Built_in_functionsContext {
		public ITerminalNode GET_FILESTREAM_TRANSACTION_CONTEXT() { return GetToken(TSqlParser.GET_FILESTREAM_TRANSACTION_CONTEXT, 0); }
		public GET_FILESTREAM_TRANSACTION_CONTEXTContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGET_FILESTREAM_TRANSACTION_CONTEXT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGET_FILESTREAM_TRANSACTION_CONTEXT(this);
		}
	}
	public partial class GETANSINULLContext : Built_in_functionsContext {
		public IToken database;
		public ITerminalNode GETANSINULL() { return GetToken(TSqlParser.GETANSINULL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public GETANSINULLContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGETANSINULL(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGETANSINULL(this);
		}
	}
	public partial class HOST_IDContext : Built_in_functionsContext {
		public ITerminalNode HOST_ID() { return GetToken(TSqlParser.HOST_ID, 0); }
		public HOST_IDContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterHOST_ID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitHOST_ID(this);
		}
	}
	public partial class HOST_NAMEContext : Built_in_functionsContext {
		public ITerminalNode HOST_NAME() { return GetToken(TSqlParser.HOST_NAME, 0); }
		public HOST_NAMEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterHOST_NAME(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitHOST_NAME(this);
		}
	}
	public partial class ISNULLContext : Built_in_functionsContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode ISNULL() { return GetToken(TSqlParser.ISNULL, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ISNULLContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterISNULL(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitISNULL(this);
		}
	}
	public partial class ISNUMERICContext : Built_in_functionsContext {
		public ITerminalNode ISNUMERIC() { return GetToken(TSqlParser.ISNUMERIC, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ISNUMERICContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterISNUMERIC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitISNUMERIC(this);
		}
	}
	public partial class MIN_ACTIVE_ROWVERSIONContext : Built_in_functionsContext {
		public ITerminalNode MIN_ACTIVE_ROWVERSION() { return GetToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		public MIN_ACTIVE_ROWVERSIONContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMIN_ACTIVE_ROWVERSION(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMIN_ACTIVE_ROWVERSION(this);
		}
	}
	public partial class NEWIDContext : Built_in_functionsContext {
		public ITerminalNode NEWID() { return GetToken(TSqlParser.NEWID, 0); }
		public NEWIDContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNEWID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNEWID(this);
		}
	}
	public partial class NEWSEQUENTIALIDContext : Built_in_functionsContext {
		public ITerminalNode NEWSEQUENTIALID() { return GetToken(TSqlParser.NEWSEQUENTIALID, 0); }
		public NEWSEQUENTIALIDContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNEWSEQUENTIALID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNEWSEQUENTIALID(this);
		}
	}
	public partial class ROWCOUNT_BIGContext : Built_in_functionsContext {
		public ITerminalNode ROWCOUNT_BIG() { return GetToken(TSqlParser.ROWCOUNT_BIG, 0); }
		public ROWCOUNT_BIGContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterROWCOUNT_BIG(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitROWCOUNT_BIG(this);
		}
	}
	public partial class SESSION_CONTEXTContext : Built_in_functionsContext {
		public IToken key;
		public ITerminalNode SESSION_CONTEXT() { return GetToken(TSqlParser.SESSION_CONTEXT, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public SESSION_CONTEXTContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSESSION_CONTEXT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSESSION_CONTEXT(this);
		}
	}
	public partial class XACT_STATEContext : Built_in_functionsContext {
		public ITerminalNode XACT_STATE() { return GetToken(TSqlParser.XACT_STATE, 0); }
		public XACT_STATEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXACT_STATE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXACT_STATE(this);
		}
	}
	public partial class CASTContext : Built_in_functionsContext {
		public ITerminalNode CAST() { return GetToken(TSqlParser.CAST, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public CASTContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCAST(this);
		}
	}
	public partial class TRY_CASTContext : Built_in_functionsContext {
		public ITerminalNode TRY_CAST() { return GetToken(TSqlParser.TRY_CAST, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public TRY_CASTContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTRY_CAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTRY_CAST(this);
		}
	}
	public partial class CONVERTContext : Built_in_functionsContext {
		public Data_typeContext convert_data_type;
		public ExpressionContext convert_expression;
		public ExpressionContext style;
		public ITerminalNode CONVERT() { return GetToken(TSqlParser.CONVERT, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CONVERTContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCONVERT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCONVERT(this);
		}
	}
	public partial class COALESCEContext : Built_in_functionsContext {
		public ITerminalNode COALESCE() { return GetToken(TSqlParser.COALESCE, 0); }
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public COALESCEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCOALESCE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCOALESCE(this);
		}
	}
	public partial class CURSOR_ROWSContext : Built_in_functionsContext {
		public ITerminalNode CURSOR_ROWS() { return GetToken(TSqlParser.CURSOR_ROWS, 0); }
		public CURSOR_ROWSContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCURSOR_ROWS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCURSOR_ROWS(this);
		}
	}
	public partial class FETCH_STATUSContext : Built_in_functionsContext {
		public ITerminalNode FETCH_STATUS() { return GetToken(TSqlParser.FETCH_STATUS, 0); }
		public FETCH_STATUSContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFETCH_STATUS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFETCH_STATUS(this);
		}
	}
	public partial class CURSOR_STATUSContext : Built_in_functionsContext {
		public IToken scope;
		public ExpressionContext cursor;
		public ITerminalNode CURSOR_STATUS() { return GetToken(TSqlParser.CURSOR_STATUS, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CURSOR_STATUSContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCURSOR_STATUS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCURSOR_STATUS(this);
		}
	}
	public partial class CERT_IDContext : Built_in_functionsContext {
		public ExpressionContext cert_name;
		public ITerminalNode CERT_ID() { return GetToken(TSqlParser.CERT_ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CERT_IDContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCERT_ID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCERT_ID(this);
		}
	}
	public partial class DATALENGTHContext : Built_in_functionsContext {
		public ITerminalNode DATALENGTH() { return GetToken(TSqlParser.DATALENGTH, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DATALENGTHContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATALENGTH(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATALENGTH(this);
		}
	}
	public partial class IDENT_CURRENTContext : Built_in_functionsContext {
		public ExpressionContext table_or_view;
		public ITerminalNode IDENT_CURRENT() { return GetToken(TSqlParser.IDENT_CURRENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IDENT_CURRENTContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIDENT_CURRENT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIDENT_CURRENT(this);
		}
	}
	public partial class IDENT_INCRContext : Built_in_functionsContext {
		public ExpressionContext table_or_view;
		public ITerminalNode IDENT_INCR() { return GetToken(TSqlParser.IDENT_INCR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IDENT_INCRContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIDENT_INCR(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIDENT_INCR(this);
		}
	}
	public partial class IDENT_SEEDContext : Built_in_functionsContext {
		public ExpressionContext table_or_view;
		public ITerminalNode IDENT_SEED() { return GetToken(TSqlParser.IDENT_SEED, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IDENT_SEEDContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIDENT_SEED(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIDENT_SEED(this);
		}
	}
	public partial class IDENTITYContext : Built_in_functionsContext {
		public Data_typeContext datatype;
		public IToken seed;
		public IToken increment;
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public IDENTITYContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIDENTITY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIDENTITY(this);
		}
	}
	public partial class SQL_VARIANT_PROPERTYContext : Built_in_functionsContext {
		public ExpressionContext expr;
		public IToken property;
		public ITerminalNode SQL_VARIANT_PROPERTY() { return GetToken(TSqlParser.SQL_VARIANT_PROPERTY, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public SQL_VARIANT_PROPERTYContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSQL_VARIANT_PROPERTY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSQL_VARIANT_PROPERTY(this);
		}
	}
	public partial class CURRENT_DATEContext : Built_in_functionsContext {
		public ITerminalNode CURRENT_DATE() { return GetToken(TSqlParser.CURRENT_DATE, 0); }
		public CURRENT_DATEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCURRENT_DATE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCURRENT_DATE(this);
		}
	}
	public partial class CURRENT_TIMESTAMPContext : Built_in_functionsContext {
		public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(TSqlParser.CURRENT_TIMESTAMP, 0); }
		public CURRENT_TIMESTAMPContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCURRENT_TIMESTAMP(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCURRENT_TIMESTAMP(this);
		}
	}
	public partial class CURRENT_TIMEZONEContext : Built_in_functionsContext {
		public ITerminalNode CURRENT_TIMEZONE() { return GetToken(TSqlParser.CURRENT_TIMEZONE, 0); }
		public CURRENT_TIMEZONEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCURRENT_TIMEZONE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCURRENT_TIMEZONE(this);
		}
	}
	public partial class CURRENT_TIMEZONE_IDContext : Built_in_functionsContext {
		public ITerminalNode CURRENT_TIMEZONE_ID() { return GetToken(TSqlParser.CURRENT_TIMEZONE_ID, 0); }
		public CURRENT_TIMEZONE_IDContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCURRENT_TIMEZONE_ID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCURRENT_TIMEZONE_ID(this);
		}
	}
	public partial class DATE_BUCKETContext : Built_in_functionsContext {
		public Dateparts_9Context datepart;
		public ExpressionContext number;
		public ExpressionContext date;
		public ExpressionContext origin;
		public ITerminalNode DATE_BUCKET() { return GetToken(TSqlParser.DATE_BUCKET, 0); }
		public Dateparts_9Context dateparts_9() {
			return GetRuleContext<Dateparts_9Context>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DATE_BUCKETContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATE_BUCKET(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATE_BUCKET(this);
		}
	}
	public partial class DATEADDContext : Built_in_functionsContext {
		public Dateparts_12Context datepart;
		public ExpressionContext number;
		public ExpressionContext date;
		public ITerminalNode DATEADD() { return GetToken(TSqlParser.DATEADD, 0); }
		public Dateparts_12Context dateparts_12() {
			return GetRuleContext<Dateparts_12Context>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DATEADDContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATEADD(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATEADD(this);
		}
	}
	public partial class DATEDIFFContext : Built_in_functionsContext {
		public Dateparts_12Context datepart;
		public ExpressionContext date_first;
		public ExpressionContext date_second;
		public ITerminalNode DATEDIFF() { return GetToken(TSqlParser.DATEDIFF, 0); }
		public Dateparts_12Context dateparts_12() {
			return GetRuleContext<Dateparts_12Context>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DATEDIFFContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATEDIFF(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATEDIFF(this);
		}
	}
	public partial class DATEDIFF_BIGContext : Built_in_functionsContext {
		public Dateparts_12Context datepart;
		public ExpressionContext startdate;
		public ExpressionContext enddate;
		public ITerminalNode DATEDIFF_BIG() { return GetToken(TSqlParser.DATEDIFF_BIG, 0); }
		public Dateparts_12Context dateparts_12() {
			return GetRuleContext<Dateparts_12Context>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DATEDIFF_BIGContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATEDIFF_BIG(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATEDIFF_BIG(this);
		}
	}
	public partial class DATEFROMPARTSContext : Built_in_functionsContext {
		public ExpressionContext year;
		public ExpressionContext month;
		public ExpressionContext day;
		public ITerminalNode DATEFROMPARTS() { return GetToken(TSqlParser.DATEFROMPARTS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DATEFROMPARTSContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATEFROMPARTS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATEFROMPARTS(this);
		}
	}
	public partial class DATENAMEContext : Built_in_functionsContext {
		public Dateparts_15Context datepart;
		public ExpressionContext date;
		public ITerminalNode DATENAME() { return GetToken(TSqlParser.DATENAME, 0); }
		public Dateparts_15Context dateparts_15() {
			return GetRuleContext<Dateparts_15Context>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DATENAMEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATENAME(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATENAME(this);
		}
	}
	public partial class DATEPARTContext : Built_in_functionsContext {
		public Dateparts_15Context datepart;
		public ExpressionContext date;
		public ITerminalNode DATEPART() { return GetToken(TSqlParser.DATEPART, 0); }
		public Dateparts_15Context dateparts_15() {
			return GetRuleContext<Dateparts_15Context>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DATEPARTContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATEPART(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATEPART(this);
		}
	}
	public partial class DATETIME2FROMPARTSContext : Built_in_functionsContext {
		public ExpressionContext year;
		public ExpressionContext month;
		public ExpressionContext day;
		public ExpressionContext hour;
		public ExpressionContext minute;
		public ExpressionContext seconds;
		public ExpressionContext fractions;
		public ExpressionContext precision;
		public ITerminalNode DATETIME2FROMPARTS() { return GetToken(TSqlParser.DATETIME2FROMPARTS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DATETIME2FROMPARTSContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATETIME2FROMPARTS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATETIME2FROMPARTS(this);
		}
	}
	public partial class DATETIMEFROMPARTSContext : Built_in_functionsContext {
		public ExpressionContext year;
		public ExpressionContext month;
		public ExpressionContext day;
		public ExpressionContext hour;
		public ExpressionContext minute;
		public ExpressionContext seconds;
		public ExpressionContext milliseconds;
		public ITerminalNode DATETIMEFROMPARTS() { return GetToken(TSqlParser.DATETIMEFROMPARTS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DATETIMEFROMPARTSContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATETIMEFROMPARTS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATETIMEFROMPARTS(this);
		}
	}
	public partial class DATETIMEOFFSETFROMPARTSContext : Built_in_functionsContext {
		public ExpressionContext year;
		public ExpressionContext month;
		public ExpressionContext day;
		public ExpressionContext hour;
		public ExpressionContext minute;
		public ExpressionContext seconds;
		public ExpressionContext fractions;
		public ExpressionContext hour_offset;
		public ExpressionContext minute_offset;
		public IToken precision;
		public ITerminalNode DATETIMEOFFSETFROMPARTS() { return GetToken(TSqlParser.DATETIMEOFFSETFROMPARTS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public DATETIMEOFFSETFROMPARTSContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATETIMEOFFSETFROMPARTS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATETIMEOFFSETFROMPARTS(this);
		}
	}
	public partial class DATETRUNCContext : Built_in_functionsContext {
		public Dateparts_datetruncContext datepart;
		public ExpressionContext date;
		public ITerminalNode DATETRUNC() { return GetToken(TSqlParser.DATETRUNC, 0); }
		public Dateparts_datetruncContext dateparts_datetrunc() {
			return GetRuleContext<Dateparts_datetruncContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DATETRUNCContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATETRUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATETRUNC(this);
		}
	}
	public partial class DAYContext : Built_in_functionsContext {
		public ExpressionContext date;
		public ITerminalNode DAY() { return GetToken(TSqlParser.DAY, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DAYContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDAY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDAY(this);
		}
	}
	public partial class EOMONTHContext : Built_in_functionsContext {
		public ExpressionContext start_date;
		public ExpressionContext month_to_add;
		public ITerminalNode EOMONTH() { return GetToken(TSqlParser.EOMONTH, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EOMONTHContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEOMONTH(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEOMONTH(this);
		}
	}
	public partial class GETDATEContext : Built_in_functionsContext {
		public ITerminalNode GETDATE() { return GetToken(TSqlParser.GETDATE, 0); }
		public GETDATEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGETDATE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGETDATE(this);
		}
	}
	public partial class GETUTCDATEContext : Built_in_functionsContext {
		public ITerminalNode GETUTCDATE() { return GetToken(TSqlParser.GETUTCDATE, 0); }
		public GETUTCDATEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGETUTCDATE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGETUTCDATE(this);
		}
	}
	public partial class ISDATEContext : Built_in_functionsContext {
		public ITerminalNode ISDATE() { return GetToken(TSqlParser.ISDATE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ISDATEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterISDATE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitISDATE(this);
		}
	}
	public partial class MONTHContext : Built_in_functionsContext {
		public ExpressionContext date;
		public ITerminalNode MONTH() { return GetToken(TSqlParser.MONTH, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MONTHContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMONTH(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMONTH(this);
		}
	}
	public partial class SMALLDATETIMEFROMPARTSContext : Built_in_functionsContext {
		public ExpressionContext year;
		public ExpressionContext month;
		public ExpressionContext day;
		public ExpressionContext hour;
		public ExpressionContext minute;
		public ITerminalNode SMALLDATETIMEFROMPARTS() { return GetToken(TSqlParser.SMALLDATETIMEFROMPARTS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SMALLDATETIMEFROMPARTSContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSMALLDATETIMEFROMPARTS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSMALLDATETIMEFROMPARTS(this);
		}
	}
	public partial class SWITCHOFFSETContext : Built_in_functionsContext {
		public ExpressionContext datetimeoffset_expression;
		public ExpressionContext timezoneoffset_expression;
		public ITerminalNode SWITCHOFFSET() { return GetToken(TSqlParser.SWITCHOFFSET, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SWITCHOFFSETContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSWITCHOFFSET(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSWITCHOFFSET(this);
		}
	}
	public partial class SYSDATETIMEContext : Built_in_functionsContext {
		public ITerminalNode SYSDATETIME() { return GetToken(TSqlParser.SYSDATETIME, 0); }
		public SYSDATETIMEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSYSDATETIME(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSYSDATETIME(this);
		}
	}
	public partial class SYSDATETIMEOFFSETContext : Built_in_functionsContext {
		public ITerminalNode SYSDATETIMEOFFSET() { return GetToken(TSqlParser.SYSDATETIMEOFFSET, 0); }
		public SYSDATETIMEOFFSETContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSYSDATETIMEOFFSET(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSYSDATETIMEOFFSET(this);
		}
	}
	public partial class SYSUTCDATETIMEContext : Built_in_functionsContext {
		public ITerminalNode SYSUTCDATETIME() { return GetToken(TSqlParser.SYSUTCDATETIME, 0); }
		public SYSUTCDATETIMEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSYSUTCDATETIME(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSYSUTCDATETIME(this);
		}
	}
	public partial class TIMEFROMPARTSContext : Built_in_functionsContext {
		public ExpressionContext hour;
		public ExpressionContext minute;
		public ExpressionContext seconds;
		public ExpressionContext fractions;
		public IToken precision;
		public ITerminalNode TIMEFROMPARTS() { return GetToken(TSqlParser.TIMEFROMPARTS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public TIMEFROMPARTSContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTIMEFROMPARTS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTIMEFROMPARTS(this);
		}
	}
	public partial class TODATETIMEOFFSETContext : Built_in_functionsContext {
		public ExpressionContext datetime_expression;
		public ExpressionContext timezoneoffset_expression;
		public ITerminalNode TODATETIMEOFFSET() { return GetToken(TSqlParser.TODATETIMEOFFSET, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TODATETIMEOFFSETContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTODATETIMEOFFSET(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTODATETIMEOFFSET(this);
		}
	}
	public partial class YEARContext : Built_in_functionsContext {
		public ExpressionContext date;
		public ITerminalNode YEAR() { return GetToken(TSqlParser.YEAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public YEARContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterYEAR(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitYEAR(this);
		}
	}
	public partial class NULLIFContext : Built_in_functionsContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NULLIF() { return GetToken(TSqlParser.NULLIF, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NULLIFContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNULLIF(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNULLIF(this);
		}
	}
	public partial class PARSEContext : Built_in_functionsContext {
		public ExpressionContext str;
		public ExpressionContext culture;
		public ITerminalNode PARSE() { return GetToken(TSqlParser.PARSE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public PARSEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPARSE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPARSE(this);
		}
	}
	public partial class XML_DATA_TYPE_FUNCContext : Built_in_functionsContext {
		public Xml_data_type_methodsContext xml_data_type_methods() {
			return GetRuleContext<Xml_data_type_methodsContext>(0);
		}
		public XML_DATA_TYPE_FUNCContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXML_DATA_TYPE_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXML_DATA_TYPE_FUNC(this);
		}
	}
	public partial class IIFContext : Built_in_functionsContext {
		public Search_conditionContext cond;
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode IIF() { return GetToken(TSqlParser.IIF, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IIFContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIIF(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIIF(this);
		}
	}
	public partial class ISJSONContext : Built_in_functionsContext {
		public ExpressionContext json_expr;
		public ExpressionContext json_type_constraint;
		public ITerminalNode ISJSON() { return GetToken(TSqlParser.ISJSON, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ISJSONContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterISJSON(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitISJSON(this);
		}
	}
	public partial class JSON_OBJECTContext : Built_in_functionsContext {
		public Json_key_valueContext key_value;
		public ITerminalNode JSON_OBJECT() { return GetToken(TSqlParser.JSON_OBJECT, 0); }
		public Json_null_clauseContext json_null_clause() {
			return GetRuleContext<Json_null_clauseContext>(0);
		}
		public Json_key_valueContext[] json_key_value() {
			return GetRuleContexts<Json_key_valueContext>();
		}
		public Json_key_valueContext json_key_value(int i) {
			return GetRuleContext<Json_key_valueContext>(i);
		}
		public JSON_OBJECTContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJSON_OBJECT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJSON_OBJECT(this);
		}
	}
	public partial class JSON_ARRAYContext : Built_in_functionsContext {
		public ITerminalNode JSON_ARRAY() { return GetToken(TSqlParser.JSON_ARRAY, 0); }
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public Json_null_clauseContext json_null_clause() {
			return GetRuleContext<Json_null_clauseContext>(0);
		}
		public JSON_ARRAYContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJSON_ARRAY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJSON_ARRAY(this);
		}
	}
	public partial class JSON_VALUEContext : Built_in_functionsContext {
		public ExpressionContext expr;
		public ExpressionContext path;
		public ITerminalNode JSON_VALUE() { return GetToken(TSqlParser.JSON_VALUE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public JSON_VALUEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJSON_VALUE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJSON_VALUE(this);
		}
	}
	public partial class JSON_QUERYContext : Built_in_functionsContext {
		public ExpressionContext expr;
		public ExpressionContext path;
		public ITerminalNode JSON_QUERY() { return GetToken(TSqlParser.JSON_QUERY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public JSON_QUERYContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJSON_QUERY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJSON_QUERY(this);
		}
	}
	public partial class JSON_MODIFYContext : Built_in_functionsContext {
		public ExpressionContext expr;
		public ExpressionContext path;
		public ExpressionContext new_value;
		public ITerminalNode JSON_MODIFY() { return GetToken(TSqlParser.JSON_MODIFY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public JSON_MODIFYContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJSON_MODIFY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJSON_MODIFY(this);
		}
	}
	public partial class JSON_PATH_EXISTSContext : Built_in_functionsContext {
		public ExpressionContext value_expression;
		public ExpressionContext sql_json_path;
		public ITerminalNode JSON_PATH_EXISTS() { return GetToken(TSqlParser.JSON_PATH_EXISTS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public JSON_PATH_EXISTSContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJSON_PATH_EXISTS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJSON_PATH_EXISTS(this);
		}
	}
	public partial class ABSContext : Built_in_functionsContext {
		public ExpressionContext numeric_expression;
		public ITerminalNode ABS() { return GetToken(TSqlParser.ABS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ABSContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterABS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitABS(this);
		}
	}
	public partial class ACOSContext : Built_in_functionsContext {
		public ExpressionContext float_expression;
		public ITerminalNode ACOS() { return GetToken(TSqlParser.ACOS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ACOSContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterACOS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitACOS(this);
		}
	}
	public partial class ASINContext : Built_in_functionsContext {
		public ExpressionContext float_expression;
		public ITerminalNode ASIN() { return GetToken(TSqlParser.ASIN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ASINContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterASIN(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitASIN(this);
		}
	}
	public partial class ATANContext : Built_in_functionsContext {
		public ExpressionContext float_expression;
		public ITerminalNode ATAN() { return GetToken(TSqlParser.ATAN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ATANContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterATAN(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitATAN(this);
		}
	}
	public partial class ATN2Context : Built_in_functionsContext {
		public ExpressionContext float_expression;
		public ITerminalNode ATN2() { return GetToken(TSqlParser.ATN2, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ATN2Context(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterATN2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitATN2(this);
		}
	}
	public partial class CEILINGContext : Built_in_functionsContext {
		public ExpressionContext numeric_expression;
		public ITerminalNode CEILING() { return GetToken(TSqlParser.CEILING, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CEILINGContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCEILING(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCEILING(this);
		}
	}
	public partial class COSContext : Built_in_functionsContext {
		public ExpressionContext float_expression;
		public ITerminalNode COS() { return GetToken(TSqlParser.COS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public COSContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCOS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCOS(this);
		}
	}
	public partial class COTContext : Built_in_functionsContext {
		public ExpressionContext float_expression;
		public ITerminalNode COT() { return GetToken(TSqlParser.COT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public COTContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCOT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCOT(this);
		}
	}
	public partial class DEGREESContext : Built_in_functionsContext {
		public ExpressionContext numeric_expression;
		public ITerminalNode DEGREES() { return GetToken(TSqlParser.DEGREES, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DEGREESContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDEGREES(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDEGREES(this);
		}
	}
	public partial class EXPContext : Built_in_functionsContext {
		public ExpressionContext float_expression;
		public ITerminalNode EXP() { return GetToken(TSqlParser.EXP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EXPContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEXP(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEXP(this);
		}
	}
	public partial class FLOORContext : Built_in_functionsContext {
		public ExpressionContext numeric_expression;
		public ITerminalNode FLOOR() { return GetToken(TSqlParser.FLOOR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FLOORContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFLOOR(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFLOOR(this);
		}
	}
	public partial class LOGContext : Built_in_functionsContext {
		public ExpressionContext float_expression;
		public ExpressionContext @base;
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LOGContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLOG(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLOG(this);
		}
	}
	public partial class LOG10Context : Built_in_functionsContext {
		public ExpressionContext float_expression;
		public ITerminalNode LOG10() { return GetToken(TSqlParser.LOG10, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LOG10Context(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLOG10(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLOG10(this);
		}
	}
	public partial class PIContext : Built_in_functionsContext {
		public ITerminalNode PI() { return GetToken(TSqlParser.PI, 0); }
		public PIContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPI(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPI(this);
		}
	}
	public partial class POWERContext : Built_in_functionsContext {
		public ExpressionContext float_expression;
		public ExpressionContext y;
		public ITerminalNode POWER() { return GetToken(TSqlParser.POWER, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public POWERContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPOWER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPOWER(this);
		}
	}
	public partial class RADIANSContext : Built_in_functionsContext {
		public ExpressionContext numeric_expression;
		public ITerminalNode RADIANS() { return GetToken(TSqlParser.RADIANS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RADIANSContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRADIANS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRADIANS(this);
		}
	}
	public partial class RANDContext : Built_in_functionsContext {
		public ExpressionContext seed;
		public ITerminalNode RAND() { return GetToken(TSqlParser.RAND, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RANDContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRAND(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRAND(this);
		}
	}
	public partial class ROUNDContext : Built_in_functionsContext {
		public ExpressionContext numeric_expression;
		public ExpressionContext length;
		public ExpressionContext function;
		public ITerminalNode ROUND() { return GetToken(TSqlParser.ROUND, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ROUNDContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterROUND(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitROUND(this);
		}
	}
	public partial class MATH_SIGNContext : Built_in_functionsContext {
		public ExpressionContext numeric_expression;
		public ITerminalNode SIGN() { return GetToken(TSqlParser.SIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MATH_SIGNContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMATH_SIGN(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMATH_SIGN(this);
		}
	}
	public partial class SINContext : Built_in_functionsContext {
		public ExpressionContext float_expression;
		public ITerminalNode SIN() { return GetToken(TSqlParser.SIN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SINContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSIN(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSIN(this);
		}
	}
	public partial class SQRTContext : Built_in_functionsContext {
		public ExpressionContext float_expression;
		public ITerminalNode SQRT() { return GetToken(TSqlParser.SQRT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SQRTContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSQRT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSQRT(this);
		}
	}
	public partial class SQUAREContext : Built_in_functionsContext {
		public ExpressionContext float_expression;
		public ITerminalNode SQUARE() { return GetToken(TSqlParser.SQUARE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SQUAREContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSQUARE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSQUARE(this);
		}
	}
	public partial class TANContext : Built_in_functionsContext {
		public ExpressionContext float_expression;
		public ITerminalNode TAN() { return GetToken(TSqlParser.TAN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TANContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTAN(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTAN(this);
		}
	}
	public partial class GREATESTContext : Built_in_functionsContext {
		public ITerminalNode GREATEST() { return GetToken(TSqlParser.GREATEST, 0); }
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public GREATESTContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGREATEST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGREATEST(this);
		}
	}
	public partial class LEASTContext : Built_in_functionsContext {
		public ITerminalNode LEAST() { return GetToken(TSqlParser.LEAST, 0); }
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public LEASTContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLEAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLEAST(this);
		}
	}
	public partial class CERTENCODEDContext : Built_in_functionsContext {
		public ExpressionContext certid;
		public ITerminalNode CERTENCODED() { return GetToken(TSqlParser.CERTENCODED, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CERTENCODEDContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCERTENCODED(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCERTENCODED(this);
		}
	}
	public partial class CERTPRIVATEKEYContext : Built_in_functionsContext {
		public ExpressionContext certid;
		public ExpressionContext encryption_password;
		public ExpressionContext decryption_pasword;
		public ITerminalNode CERTPRIVATEKEY() { return GetToken(TSqlParser.CERTPRIVATEKEY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CERTPRIVATEKEYContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCERTPRIVATEKEY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCERTPRIVATEKEY(this);
		}
	}
	public partial class CURRENT_USERContext : Built_in_functionsContext {
		public ITerminalNode CURRENT_USER() { return GetToken(TSqlParser.CURRENT_USER, 0); }
		public CURRENT_USERContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCURRENT_USER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCURRENT_USER(this);
		}
	}
	public partial class DATABASE_PRINCIPAL_IDContext : Built_in_functionsContext {
		public ExpressionContext principal_name;
		public ITerminalNode DATABASE_PRINCIPAL_ID() { return GetToken(TSqlParser.DATABASE_PRINCIPAL_ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DATABASE_PRINCIPAL_IDContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATABASE_PRINCIPAL_ID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATABASE_PRINCIPAL_ID(this);
		}
	}
	public partial class HAS_DBACCESSContext : Built_in_functionsContext {
		public ExpressionContext database_name;
		public ITerminalNode HAS_DBACCESS() { return GetToken(TSqlParser.HAS_DBACCESS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HAS_DBACCESSContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterHAS_DBACCESS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitHAS_DBACCESS(this);
		}
	}
	public partial class HAS_PERMS_BY_NAMEContext : Built_in_functionsContext {
		public ExpressionContext securable;
		public ExpressionContext securable_class;
		public ExpressionContext permission;
		public ExpressionContext sub_securable;
		public ExpressionContext sub_securable_class;
		public ITerminalNode HAS_PERMS_BY_NAME() { return GetToken(TSqlParser.HAS_PERMS_BY_NAME, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public HAS_PERMS_BY_NAMEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterHAS_PERMS_BY_NAME(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitHAS_PERMS_BY_NAME(this);
		}
	}
	public partial class IS_MEMBERContext : Built_in_functionsContext {
		public ExpressionContext group_or_role;
		public ITerminalNode IS_MEMBER() { return GetToken(TSqlParser.IS_MEMBER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IS_MEMBERContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIS_MEMBER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIS_MEMBER(this);
		}
	}
	public partial class IS_ROLEMEMBERContext : Built_in_functionsContext {
		public ExpressionContext role;
		public ExpressionContext database_principal;
		public ITerminalNode IS_ROLEMEMBER() { return GetToken(TSqlParser.IS_ROLEMEMBER, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IS_ROLEMEMBERContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIS_ROLEMEMBER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIS_ROLEMEMBER(this);
		}
	}
	public partial class IS_SRVROLEMEMBERContext : Built_in_functionsContext {
		public ExpressionContext role;
		public ExpressionContext login;
		public ITerminalNode IS_SRVROLEMEMBER() { return GetToken(TSqlParser.IS_SRVROLEMEMBER, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IS_SRVROLEMEMBERContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIS_SRVROLEMEMBER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIS_SRVROLEMEMBER(this);
		}
	}
	public partial class LOGINPROPERTYContext : Built_in_functionsContext {
		public ExpressionContext login_name;
		public ExpressionContext property_name;
		public ITerminalNode LOGINPROPERTY() { return GetToken(TSqlParser.LOGINPROPERTY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LOGINPROPERTYContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLOGINPROPERTY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLOGINPROPERTY(this);
		}
	}
	public partial class ORIGINAL_LOGINContext : Built_in_functionsContext {
		public ITerminalNode ORIGINAL_LOGIN() { return GetToken(TSqlParser.ORIGINAL_LOGIN, 0); }
		public ORIGINAL_LOGINContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterORIGINAL_LOGIN(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitORIGINAL_LOGIN(this);
		}
	}
	public partial class PERMISSIONSContext : Built_in_functionsContext {
		public ExpressionContext object_id;
		public ExpressionContext column;
		public ITerminalNode PERMISSIONS() { return GetToken(TSqlParser.PERMISSIONS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PERMISSIONSContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPERMISSIONS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPERMISSIONS(this);
		}
	}
	public partial class PWDENCRYPTContext : Built_in_functionsContext {
		public ExpressionContext password;
		public ITerminalNode PWDENCRYPT() { return GetToken(TSqlParser.PWDENCRYPT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PWDENCRYPTContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPWDENCRYPT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPWDENCRYPT(this);
		}
	}
	public partial class PWDCOMPAREContext : Built_in_functionsContext {
		public ExpressionContext clear_text_password;
		public ExpressionContext password_hash;
		public ExpressionContext version;
		public ITerminalNode PWDCOMPARE() { return GetToken(TSqlParser.PWDCOMPARE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PWDCOMPAREContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPWDCOMPARE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPWDCOMPARE(this);
		}
	}
	public partial class SESSION_USERContext : Built_in_functionsContext {
		public ITerminalNode SESSION_USER() { return GetToken(TSqlParser.SESSION_USER, 0); }
		public SESSION_USERContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSESSION_USER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSESSION_USER(this);
		}
	}
	public partial class SESSIONPROPERTYContext : Built_in_functionsContext {
		public ExpressionContext option_name;
		public ITerminalNode SESSIONPROPERTY() { return GetToken(TSqlParser.SESSIONPROPERTY, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SESSIONPROPERTYContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSESSIONPROPERTY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSESSIONPROPERTY(this);
		}
	}
	public partial class SUSER_IDContext : Built_in_functionsContext {
		public ExpressionContext login;
		public ITerminalNode SUSER_ID() { return GetToken(TSqlParser.SUSER_ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SUSER_IDContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSUSER_ID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSUSER_ID(this);
		}
	}
	public partial class SUSER_SNAMEContext : Built_in_functionsContext {
		public ExpressionContext server_user_sid;
		public ITerminalNode SUSER_NAME() { return GetToken(TSqlParser.SUSER_NAME, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SUSER_SNAME() { return GetToken(TSqlParser.SUSER_SNAME, 0); }
		public SUSER_SNAMEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSUSER_SNAME(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSUSER_SNAME(this);
		}
	}
	public partial class SUSER_SIDContext : Built_in_functionsContext {
		public ExpressionContext login;
		public ExpressionContext param2;
		public ITerminalNode SUSER_SID() { return GetToken(TSqlParser.SUSER_SID, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SUSER_SIDContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSUSER_SID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSUSER_SID(this);
		}
	}
	public partial class SYSTEM_USERContext : Built_in_functionsContext {
		public ITerminalNode SYSTEM_USER() { return GetToken(TSqlParser.SYSTEM_USER, 0); }
		public SYSTEM_USERContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSYSTEM_USER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSYSTEM_USER(this);
		}
	}
	public partial class USERContext : Built_in_functionsContext {
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public USERContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUSER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUSER(this);
		}
	}
	public partial class USER_IDContext : Built_in_functionsContext {
		public ExpressionContext user;
		public ITerminalNode USER_ID() { return GetToken(TSqlParser.USER_ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public USER_IDContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUSER_ID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUSER_ID(this);
		}
	}
	public partial class USER_NAMEContext : Built_in_functionsContext {
		public ExpressionContext id;
		public ITerminalNode USER_NAME() { return GetToken(TSqlParser.USER_NAME, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public USER_NAMEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUSER_NAME(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUSER_NAME(this);
		}
	}

	[RuleVersion(0)]
	public Built_in_functionsContext built_in_functions() {
		Built_in_functionsContext _localctx = new Built_in_functionsContext(_ctx, State);
		EnterRule(_localctx, 1056, RULE_built_in_functions);
		try {
			int _alt;
			State = 13636;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1719,_ctx) ) {
			case 1:
				_localctx = new APP_NAMEContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 12290; Match(APP_NAME);
				State = 12291; Match(LR_BRACKET);
				State = 12292; Match(RR_BRACKET);
				}
				break;

			case 2:
				_localctx = new APPLOCK_MODEContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 12293; Match(APPLOCK_MODE);
				State = 12294; Match(LR_BRACKET);
				State = 12295; ((APPLOCK_MODEContext)_localctx).database_principal = expression(0);
				State = 12296; Match(COMMA);
				State = 12297; ((APPLOCK_MODEContext)_localctx).resource_name = expression(0);
				State = 12298; Match(COMMA);
				State = 12299; ((APPLOCK_MODEContext)_localctx).lock_owner = expression(0);
				State = 12300; Match(RR_BRACKET);
				}
				break;

			case 3:
				_localctx = new APPLOCK_TESTContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 12302; Match(APPLOCK_TEST);
				State = 12303; Match(LR_BRACKET);
				State = 12304; ((APPLOCK_TESTContext)_localctx).database_principal = expression(0);
				State = 12305; Match(COMMA);
				State = 12306; ((APPLOCK_TESTContext)_localctx).resource_name = expression(0);
				State = 12307; Match(COMMA);
				State = 12308; ((APPLOCK_TESTContext)_localctx).lock_mode = expression(0);
				State = 12309; Match(COMMA);
				State = 12310; ((APPLOCK_TESTContext)_localctx).lock_owner = expression(0);
				State = 12311; Match(RR_BRACKET);
				}
				break;

			case 4:
				_localctx = new ASSEMBLYPROPERTYContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 12313; Match(ASSEMBLYPROPERTY);
				State = 12314; Match(LR_BRACKET);
				State = 12315; ((ASSEMBLYPROPERTYContext)_localctx).assembly_name = expression(0);
				State = 12316; Match(COMMA);
				State = 12317; ((ASSEMBLYPROPERTYContext)_localctx).property_name = expression(0);
				State = 12318; Match(RR_BRACKET);
				}
				break;

			case 5:
				_localctx = new COL_LENGTHContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 12320; Match(COL_LENGTH);
				State = 12321; Match(LR_BRACKET);
				State = 12322; ((COL_LENGTHContext)_localctx).table = expression(0);
				State = 12323; Match(COMMA);
				State = 12324; ((COL_LENGTHContext)_localctx).column = expression(0);
				State = 12325; Match(RR_BRACKET);
				}
				break;

			case 6:
				_localctx = new COL_NAMEContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 12327; Match(COL_NAME);
				State = 12328; Match(LR_BRACKET);
				State = 12329; ((COL_NAMEContext)_localctx).table_id = expression(0);
				State = 12330; Match(COMMA);
				State = 12331; ((COL_NAMEContext)_localctx).column_id = expression(0);
				State = 12332; Match(RR_BRACKET);
				}
				break;

			case 7:
				_localctx = new COLUMNPROPERTYContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 12334; Match(COLUMNPROPERTY);
				State = 12335; Match(LR_BRACKET);
				State = 12336; ((COLUMNPROPERTYContext)_localctx).id = expression(0);
				State = 12337; Match(COMMA);
				State = 12338; ((COLUMNPROPERTYContext)_localctx).column = expression(0);
				State = 12339; Match(COMMA);
				State = 12340; ((COLUMNPROPERTYContext)_localctx).property = expression(0);
				State = 12341; Match(RR_BRACKET);
				}
				break;

			case 8:
				_localctx = new DATABASEPROPERTYEXContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 12343; Match(DATABASEPROPERTYEX);
				State = 12344; Match(LR_BRACKET);
				State = 12345; ((DATABASEPROPERTYEXContext)_localctx).database = expression(0);
				State = 12346; Match(COMMA);
				State = 12347; ((DATABASEPROPERTYEXContext)_localctx).property = expression(0);
				State = 12348; Match(RR_BRACKET);
				}
				break;

			case 9:
				_localctx = new DB_IDContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 12350; Match(DB_ID);
				State = 12351; Match(LR_BRACKET);
				State = 12353;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1662,_ctx) ) {
				case 1:
					{
					State = 12352; ((DB_IDContext)_localctx).database_name = expression(0);
					}
					break;
				}
				State = 12355; Match(RR_BRACKET);
				}
				break;

			case 10:
				_localctx = new DB_NAMEContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 12356; Match(DB_NAME);
				State = 12357; Match(LR_BRACKET);
				State = 12359;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1663,_ctx) ) {
				case 1:
					{
					State = 12358; ((DB_NAMEContext)_localctx).database_id = expression(0);
					}
					break;
				}
				State = 12361; Match(RR_BRACKET);
				}
				break;

			case 11:
				_localctx = new FILE_IDContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 12362; Match(FILE_ID);
				State = 12363; Match(LR_BRACKET);
				State = 12364; ((FILE_IDContext)_localctx).file_name = expression(0);
				State = 12365; Match(RR_BRACKET);
				}
				break;

			case 12:
				_localctx = new FILE_IDEXContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 12367; Match(FILE_IDEX);
				State = 12368; Match(LR_BRACKET);
				State = 12369; ((FILE_IDEXContext)_localctx).file_name = expression(0);
				State = 12370; Match(RR_BRACKET);
				}
				break;

			case 13:
				_localctx = new FILE_NAMEContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 12372; Match(FILE_NAME);
				State = 12373; Match(LR_BRACKET);
				State = 12374; ((FILE_NAMEContext)_localctx).file_id = expression(0);
				State = 12375; Match(RR_BRACKET);
				}
				break;

			case 14:
				_localctx = new FILEGROUP_IDContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 12377; Match(FILEGROUP_ID);
				State = 12378; Match(LR_BRACKET);
				State = 12379; ((FILEGROUP_IDContext)_localctx).filegroup_name = expression(0);
				State = 12380; Match(RR_BRACKET);
				}
				break;

			case 15:
				_localctx = new FILEGROUP_NAMEContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 12382; Match(FILEGROUP_NAME);
				State = 12383; Match(LR_BRACKET);
				State = 12384; ((FILEGROUP_NAMEContext)_localctx).filegroup_id = expression(0);
				State = 12385; Match(RR_BRACKET);
				}
				break;

			case 16:
				_localctx = new FILEGROUPPROPERTYContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 12387; Match(FILEGROUPPROPERTY);
				State = 12388; Match(LR_BRACKET);
				State = 12389; ((FILEGROUPPROPERTYContext)_localctx).filegroup_name = expression(0);
				State = 12390; Match(COMMA);
				State = 12391; ((FILEGROUPPROPERTYContext)_localctx).property = expression(0);
				State = 12392; Match(RR_BRACKET);
				}
				break;

			case 17:
				_localctx = new FILEPROPERTYContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 12394; Match(FILEPROPERTY);
				State = 12395; Match(LR_BRACKET);
				State = 12396; ((FILEPROPERTYContext)_localctx).file_name = expression(0);
				State = 12397; Match(COMMA);
				State = 12398; ((FILEPROPERTYContext)_localctx).property = expression(0);
				State = 12399; Match(RR_BRACKET);
				}
				break;

			case 18:
				_localctx = new FILEPROPERTYEXContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 12401; Match(FILEPROPERTYEX);
				State = 12402; Match(LR_BRACKET);
				State = 12403; ((FILEPROPERTYEXContext)_localctx).name = expression(0);
				State = 12404; Match(COMMA);
				State = 12405; ((FILEPROPERTYEXContext)_localctx).property = expression(0);
				State = 12406; Match(RR_BRACKET);
				}
				break;

			case 19:
				_localctx = new FULLTEXTCATALOGPROPERTYContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 12408; Match(FULLTEXTCATALOGPROPERTY);
				State = 12409; Match(LR_BRACKET);
				State = 12410; ((FULLTEXTCATALOGPROPERTYContext)_localctx).catalog_name = expression(0);
				State = 12411; Match(COMMA);
				State = 12412; ((FULLTEXTCATALOGPROPERTYContext)_localctx).property = expression(0);
				State = 12413; Match(RR_BRACKET);
				}
				break;

			case 20:
				_localctx = new FULLTEXTSERVICEPROPERTYContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 12415; Match(FULLTEXTSERVICEPROPERTY);
				State = 12416; Match(LR_BRACKET);
				State = 12417; ((FULLTEXTSERVICEPROPERTYContext)_localctx).property = expression(0);
				State = 12418; Match(RR_BRACKET);
				}
				break;

			case 21:
				_localctx = new INDEX_COLContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 12420; Match(INDEX_COL);
				State = 12421; Match(LR_BRACKET);
				State = 12422; ((INDEX_COLContext)_localctx).table_or_view_name = expression(0);
				State = 12423; Match(COMMA);
				State = 12424; ((INDEX_COLContext)_localctx).index_id = expression(0);
				State = 12425; Match(COMMA);
				State = 12426; ((INDEX_COLContext)_localctx).key_id = expression(0);
				State = 12427; Match(RR_BRACKET);
				}
				break;

			case 22:
				_localctx = new INDEXKEY_PROPERTYContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 12429; Match(INDEXKEY_PROPERTY);
				State = 12430; Match(LR_BRACKET);
				State = 12431; ((INDEXKEY_PROPERTYContext)_localctx).object_id = expression(0);
				State = 12432; Match(COMMA);
				State = 12433; ((INDEXKEY_PROPERTYContext)_localctx).index_id = expression(0);
				State = 12434; Match(COMMA);
				State = 12435; ((INDEXKEY_PROPERTYContext)_localctx).key_id = expression(0);
				State = 12436; Match(COMMA);
				State = 12437; ((INDEXKEY_PROPERTYContext)_localctx).property = expression(0);
				State = 12438; Match(RR_BRACKET);
				}
				break;

			case 23:
				_localctx = new INDEXPROPERTYContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 12440; Match(INDEXPROPERTY);
				State = 12441; Match(LR_BRACKET);
				State = 12442; ((INDEXPROPERTYContext)_localctx).object_id = expression(0);
				State = 12443; Match(COMMA);
				State = 12444; ((INDEXPROPERTYContext)_localctx).index_or_statistics_name = expression(0);
				State = 12445; Match(COMMA);
				State = 12446; ((INDEXPROPERTYContext)_localctx).property = expression(0);
				State = 12447; Match(RR_BRACKET);
				}
				break;

			case 24:
				_localctx = new NEXT_VALUE_FORContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 12449; Match(NEXT);
				State = 12450; Match(VALUE);
				State = 12451; Match(FOR);
				State = 12452; ((NEXT_VALUE_FORContext)_localctx).sequence_name = table_name();
				State = 12458;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1664,_ctx) ) {
				case 1:
					{
					State = 12453; Match(OVER);
					State = 12454; Match(LR_BRACKET);
					State = 12455; order_by_clause();
					State = 12456; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;

			case 25:
				_localctx = new OBJECT_DEFINITIONContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 12460; Match(OBJECT_DEFINITION);
				State = 12461; Match(LR_BRACKET);
				State = 12462; ((OBJECT_DEFINITIONContext)_localctx).object_id = expression(0);
				State = 12463; Match(RR_BRACKET);
				}
				break;

			case 26:
				_localctx = new OBJECT_IDContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 12465; Match(OBJECT_ID);
				State = 12466; Match(LR_BRACKET);
				State = 12467; ((OBJECT_IDContext)_localctx).object_name = expression(0);
				State = 12470;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1665,_ctx) ) {
				case 1:
					{
					State = 12468; Match(COMMA);
					State = 12469; ((OBJECT_IDContext)_localctx).object_type = expression(0);
					}
					break;
				}
				State = 12472; Match(RR_BRACKET);
				}
				break;

			case 27:
				_localctx = new OBJECT_NAMEContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 12474; Match(OBJECT_NAME);
				State = 12475; Match(LR_BRACKET);
				State = 12476; ((OBJECT_NAMEContext)_localctx).object_id = expression(0);
				State = 12479;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1666,_ctx) ) {
				case 1:
					{
					State = 12477; Match(COMMA);
					State = 12478; ((OBJECT_NAMEContext)_localctx).database_id = expression(0);
					}
					break;
				}
				State = 12481; Match(RR_BRACKET);
				}
				break;

			case 28:
				_localctx = new OBJECT_SCHEMA_NAMEContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 12483; Match(OBJECT_SCHEMA_NAME);
				State = 12484; Match(LR_BRACKET);
				State = 12485; ((OBJECT_SCHEMA_NAMEContext)_localctx).object_id = expression(0);
				State = 12488;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1667,_ctx) ) {
				case 1:
					{
					State = 12486; Match(COMMA);
					State = 12487; ((OBJECT_SCHEMA_NAMEContext)_localctx).database_id = expression(0);
					}
					break;
				}
				State = 12490; Match(RR_BRACKET);
				}
				break;

			case 29:
				_localctx = new OBJECTPROPERTYContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 12492; Match(OBJECTPROPERTY);
				State = 12493; Match(LR_BRACKET);
				State = 12494; ((OBJECTPROPERTYContext)_localctx).id = expression(0);
				State = 12495; Match(COMMA);
				State = 12496; ((OBJECTPROPERTYContext)_localctx).property = expression(0);
				State = 12497; Match(RR_BRACKET);
				}
				break;

			case 30:
				_localctx = new OBJECTPROPERTYEXContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 12499; Match(OBJECTPROPERTYEX);
				State = 12500; Match(LR_BRACKET);
				State = 12501; ((OBJECTPROPERTYEXContext)_localctx).id = expression(0);
				State = 12502; Match(COMMA);
				State = 12503; ((OBJECTPROPERTYEXContext)_localctx).property = expression(0);
				State = 12504; Match(RR_BRACKET);
				}
				break;

			case 31:
				_localctx = new ORIGINAL_DB_NAMEContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 12506; Match(ORIGINAL_DB_NAME);
				State = 12507; Match(LR_BRACKET);
				State = 12508; Match(RR_BRACKET);
				}
				break;

			case 32:
				_localctx = new PARSENAMEContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 12509; Match(PARSENAME);
				State = 12510; Match(LR_BRACKET);
				State = 12511; ((PARSENAMEContext)_localctx).object_name = expression(0);
				State = 12512; Match(COMMA);
				State = 12513; ((PARSENAMEContext)_localctx).object_piece = expression(0);
				State = 12514; Match(RR_BRACKET);
				}
				break;

			case 33:
				_localctx = new SCHEMA_IDContext(_localctx);
				EnterOuterAlt(_localctx, 33);
				{
				State = 12516; Match(SCHEMA_ID);
				State = 12517; Match(LR_BRACKET);
				State = 12519;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1668,_ctx) ) {
				case 1:
					{
					State = 12518; ((SCHEMA_IDContext)_localctx).schema_name = expression(0);
					}
					break;
				}
				State = 12521; Match(RR_BRACKET);
				}
				break;

			case 34:
				_localctx = new SCHEMA_NAMEContext(_localctx);
				EnterOuterAlt(_localctx, 34);
				{
				State = 12522; Match(SCHEMA_NAME);
				State = 12523; Match(LR_BRACKET);
				State = 12525;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1669,_ctx) ) {
				case 1:
					{
					State = 12524; ((SCHEMA_NAMEContext)_localctx).schema_id = expression(0);
					}
					break;
				}
				State = 12527; Match(RR_BRACKET);
				}
				break;

			case 35:
				_localctx = new SCOPE_IDENTITYContext(_localctx);
				EnterOuterAlt(_localctx, 35);
				{
				State = 12528; Match(SCOPE_IDENTITY);
				State = 12529; Match(LR_BRACKET);
				State = 12530; Match(RR_BRACKET);
				}
				break;

			case 36:
				_localctx = new SERVERPROPERTYContext(_localctx);
				EnterOuterAlt(_localctx, 36);
				{
				State = 12531; Match(SERVERPROPERTY);
				State = 12532; Match(LR_BRACKET);
				State = 12533; ((SERVERPROPERTYContext)_localctx).property = expression(0);
				State = 12534; Match(RR_BRACKET);
				}
				break;

			case 37:
				_localctx = new STATS_DATEContext(_localctx);
				EnterOuterAlt(_localctx, 37);
				{
				State = 12536; Match(STATS_DATE);
				State = 12537; Match(LR_BRACKET);
				State = 12538; ((STATS_DATEContext)_localctx).object_id = expression(0);
				State = 12539; Match(COMMA);
				State = 12540; ((STATS_DATEContext)_localctx).stats_id = expression(0);
				State = 12541; Match(RR_BRACKET);
				}
				break;

			case 38:
				_localctx = new TYPE_IDContext(_localctx);
				EnterOuterAlt(_localctx, 38);
				{
				State = 12543; Match(TYPE_ID);
				State = 12544; Match(LR_BRACKET);
				State = 12545; ((TYPE_IDContext)_localctx).type_name = expression(0);
				State = 12546; Match(RR_BRACKET);
				}
				break;

			case 39:
				_localctx = new TYPE_NAMEContext(_localctx);
				EnterOuterAlt(_localctx, 39);
				{
				State = 12548; Match(TYPE_NAME);
				State = 12549; Match(LR_BRACKET);
				State = 12550; ((TYPE_NAMEContext)_localctx).type_id = expression(0);
				State = 12551; Match(RR_BRACKET);
				}
				break;

			case 40:
				_localctx = new TYPEPROPERTYContext(_localctx);
				EnterOuterAlt(_localctx, 40);
				{
				State = 12553; Match(TYPEPROPERTY);
				State = 12554; Match(LR_BRACKET);
				State = 12555; ((TYPEPROPERTYContext)_localctx).type = expression(0);
				State = 12556; Match(COMMA);
				State = 12557; ((TYPEPROPERTYContext)_localctx).property = expression(0);
				State = 12558; Match(RR_BRACKET);
				}
				break;

			case 41:
				_localctx = new ASCIIContext(_localctx);
				EnterOuterAlt(_localctx, 41);
				{
				State = 12560; Match(ASCII);
				State = 12561; Match(LR_BRACKET);
				State = 12562; ((ASCIIContext)_localctx).character_expression = expression(0);
				State = 12563; Match(RR_BRACKET);
				}
				break;

			case 42:
				_localctx = new CHARContext(_localctx);
				EnterOuterAlt(_localctx, 42);
				{
				State = 12565; Match(CHAR);
				State = 12566; Match(LR_BRACKET);
				State = 12567; ((CHARContext)_localctx).integer_expression = expression(0);
				State = 12568; Match(RR_BRACKET);
				}
				break;

			case 43:
				_localctx = new CHARINDEXContext(_localctx);
				EnterOuterAlt(_localctx, 43);
				{
				State = 12570; Match(CHARINDEX);
				State = 12571; Match(LR_BRACKET);
				State = 12572; ((CHARINDEXContext)_localctx).expressionToFind = expression(0);
				State = 12573; Match(COMMA);
				State = 12574; ((CHARINDEXContext)_localctx).expressionToSearch = expression(0);
				State = 12577;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1670,_ctx) ) {
				case 1:
					{
					State = 12575; Match(COMMA);
					State = 12576; ((CHARINDEXContext)_localctx).start_location = expression(0);
					}
					break;
				}
				State = 12579; Match(RR_BRACKET);
				}
				break;

			case 44:
				_localctx = new CONCATContext(_localctx);
				EnterOuterAlt(_localctx, 44);
				{
				State = 12581; Match(CONCAT);
				State = 12582; Match(LR_BRACKET);
				State = 12583; ((CONCATContext)_localctx).string_value_1 = expression(0);
				State = 12584; Match(COMMA);
				State = 12585; ((CONCATContext)_localctx).string_value_2 = expression(0);
				State = 12590;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1671,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 12586; Match(COMMA);
						State = 12587; ((CONCATContext)_localctx)._expression = expression(0);
						((CONCATContext)_localctx)._string_value_n.Add(((CONCATContext)_localctx)._expression);
						}
						} 
					}
					State = 12592;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1671,_ctx);
				}
				State = 12593; Match(RR_BRACKET);
				}
				break;

			case 45:
				_localctx = new CONCAT_WSContext(_localctx);
				EnterOuterAlt(_localctx, 45);
				{
				State = 12595; Match(CONCAT_WS);
				State = 12596; Match(LR_BRACKET);
				State = 12597; ((CONCAT_WSContext)_localctx).separator = expression(0);
				State = 12598; Match(COMMA);
				State = 12599; ((CONCAT_WSContext)_localctx).argument_1 = expression(0);
				State = 12600; Match(COMMA);
				State = 12601; ((CONCAT_WSContext)_localctx).argument_2 = expression(0);
				State = 12606;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1672,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 12602; Match(COMMA);
						State = 12603; ((CONCAT_WSContext)_localctx)._expression = expression(0);
						((CONCAT_WSContext)_localctx)._argument_n.Add(((CONCAT_WSContext)_localctx)._expression);
						}
						} 
					}
					State = 12608;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1672,_ctx);
				}
				State = 12609; Match(RR_BRACKET);
				}
				break;

			case 46:
				_localctx = new DIFFERENCEContext(_localctx);
				EnterOuterAlt(_localctx, 46);
				{
				State = 12611; Match(DIFFERENCE);
				State = 12612; Match(LR_BRACKET);
				State = 12613; ((DIFFERENCEContext)_localctx).character_expression_1 = expression(0);
				State = 12614; Match(COMMA);
				State = 12615; ((DIFFERENCEContext)_localctx).character_expression_2 = expression(0);
				State = 12616; Match(RR_BRACKET);
				}
				break;

			case 47:
				_localctx = new FORMATContext(_localctx);
				EnterOuterAlt(_localctx, 47);
				{
				State = 12618; Match(FORMAT);
				State = 12619; Match(LR_BRACKET);
				State = 12620; ((FORMATContext)_localctx).value = expression(0);
				State = 12621; Match(COMMA);
				State = 12622; ((FORMATContext)_localctx).format = expression(0);
				State = 12625;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1673,_ctx) ) {
				case 1:
					{
					State = 12623; Match(COMMA);
					State = 12624; ((FORMATContext)_localctx).culture = expression(0);
					}
					break;
				}
				State = 12627; Match(RR_BRACKET);
				}
				break;

			case 48:
				_localctx = new LEFTContext(_localctx);
				EnterOuterAlt(_localctx, 48);
				{
				State = 12629; Match(LEFT);
				State = 12630; Match(LR_BRACKET);
				State = 12631; ((LEFTContext)_localctx).character_expression = expression(0);
				State = 12632; Match(COMMA);
				State = 12633; ((LEFTContext)_localctx).integer_expression = expression(0);
				State = 12634; Match(RR_BRACKET);
				}
				break;

			case 49:
				_localctx = new LENContext(_localctx);
				EnterOuterAlt(_localctx, 49);
				{
				State = 12636; Match(LEN);
				State = 12637; Match(LR_BRACKET);
				State = 12638; ((LENContext)_localctx).string_expression = expression(0);
				State = 12639; Match(RR_BRACKET);
				}
				break;

			case 50:
				_localctx = new LOWERContext(_localctx);
				EnterOuterAlt(_localctx, 50);
				{
				State = 12641; Match(LOWER);
				State = 12642; Match(LR_BRACKET);
				State = 12643; ((LOWERContext)_localctx).character_expression = expression(0);
				State = 12644; Match(RR_BRACKET);
				}
				break;

			case 51:
				_localctx = new LTRIMContext(_localctx);
				EnterOuterAlt(_localctx, 51);
				{
				State = 12646; Match(LTRIM);
				State = 12647; Match(LR_BRACKET);
				State = 12648; ((LTRIMContext)_localctx).character_expression = expression(0);
				State = 12649; Match(RR_BRACKET);
				}
				break;

			case 52:
				_localctx = new NCHARContext(_localctx);
				EnterOuterAlt(_localctx, 52);
				{
				State = 12651; Match(NCHAR);
				State = 12652; Match(LR_BRACKET);
				State = 12653; ((NCHARContext)_localctx).integer_expression = expression(0);
				State = 12654; Match(RR_BRACKET);
				}
				break;

			case 53:
				_localctx = new PATINDEXContext(_localctx);
				EnterOuterAlt(_localctx, 53);
				{
				State = 12656; Match(PATINDEX);
				State = 12657; Match(LR_BRACKET);
				State = 12658; ((PATINDEXContext)_localctx).pattern = expression(0);
				State = 12659; Match(COMMA);
				State = 12660; ((PATINDEXContext)_localctx).string_expression = expression(0);
				State = 12661; Match(RR_BRACKET);
				}
				break;

			case 54:
				_localctx = new QUOTENAMEContext(_localctx);
				EnterOuterAlt(_localctx, 54);
				{
				State = 12663; Match(QUOTENAME);
				State = 12664; Match(LR_BRACKET);
				State = 12665; ((QUOTENAMEContext)_localctx).character_string = expression(0);
				State = 12668;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1674,_ctx) ) {
				case 1:
					{
					State = 12666; Match(COMMA);
					State = 12667; ((QUOTENAMEContext)_localctx).quote_character = expression(0);
					}
					break;
				}
				State = 12670; Match(RR_BRACKET);
				}
				break;

			case 55:
				_localctx = new REPLACEContext(_localctx);
				EnterOuterAlt(_localctx, 55);
				{
				State = 12672; Match(REPLACE);
				State = 12673; Match(LR_BRACKET);
				State = 12674; ((REPLACEContext)_localctx).input = expression(0);
				State = 12675; Match(COMMA);
				State = 12676; ((REPLACEContext)_localctx).replacing = expression(0);
				State = 12677; Match(COMMA);
				State = 12678; ((REPLACEContext)_localctx).with = expression(0);
				State = 12679; Match(RR_BRACKET);
				}
				break;

			case 56:
				_localctx = new REPLICATEContext(_localctx);
				EnterOuterAlt(_localctx, 56);
				{
				State = 12681; Match(REPLICATE);
				State = 12682; Match(LR_BRACKET);
				State = 12683; ((REPLICATEContext)_localctx).string_expression = expression(0);
				State = 12684; Match(COMMA);
				State = 12685; ((REPLICATEContext)_localctx).integer_expression = expression(0);
				State = 12686; Match(RR_BRACKET);
				}
				break;

			case 57:
				_localctx = new REVERSEContext(_localctx);
				EnterOuterAlt(_localctx, 57);
				{
				State = 12688; Match(REVERSE);
				State = 12689; Match(LR_BRACKET);
				State = 12690; ((REVERSEContext)_localctx).string_expression = expression(0);
				State = 12691; Match(RR_BRACKET);
				}
				break;

			case 58:
				_localctx = new RIGHTContext(_localctx);
				EnterOuterAlt(_localctx, 58);
				{
				State = 12693; Match(RIGHT);
				State = 12694; Match(LR_BRACKET);
				State = 12695; ((RIGHTContext)_localctx).character_expression = expression(0);
				State = 12696; Match(COMMA);
				State = 12697; ((RIGHTContext)_localctx).integer_expression = expression(0);
				State = 12698; Match(RR_BRACKET);
				}
				break;

			case 59:
				_localctx = new RTRIMContext(_localctx);
				EnterOuterAlt(_localctx, 59);
				{
				State = 12700; Match(RTRIM);
				State = 12701; Match(LR_BRACKET);
				State = 12702; ((RTRIMContext)_localctx).character_expression = expression(0);
				State = 12703; Match(RR_BRACKET);
				}
				break;

			case 60:
				_localctx = new SOUNDEXContext(_localctx);
				EnterOuterAlt(_localctx, 60);
				{
				State = 12705; Match(SOUNDEX);
				State = 12706; Match(LR_BRACKET);
				State = 12707; ((SOUNDEXContext)_localctx).character_expression = expression(0);
				State = 12708; Match(RR_BRACKET);
				}
				break;

			case 61:
				_localctx = new SPACEContext(_localctx);
				EnterOuterAlt(_localctx, 61);
				{
				State = 12710; Match(SPACE_KEYWORD);
				State = 12711; Match(LR_BRACKET);
				State = 12712; ((SPACEContext)_localctx).integer_expression = expression(0);
				State = 12713; Match(RR_BRACKET);
				}
				break;

			case 62:
				_localctx = new STRContext(_localctx);
				EnterOuterAlt(_localctx, 62);
				{
				State = 12715; Match(STR);
				State = 12716; Match(LR_BRACKET);
				State = 12717; ((STRContext)_localctx).float_expression = expression(0);
				State = 12724;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1676,_ctx) ) {
				case 1:
					{
					State = 12718; Match(COMMA);
					State = 12719; ((STRContext)_localctx).length_expression = expression(0);
					State = 12722;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1675,_ctx) ) {
					case 1:
						{
						State = 12720; Match(COMMA);
						State = 12721; ((STRContext)_localctx).@decimal = expression(0);
						}
						break;
					}
					}
					break;
				}
				State = 12726; Match(RR_BRACKET);
				}
				break;

			case 63:
				_localctx = new STRINGAGGContext(_localctx);
				EnterOuterAlt(_localctx, 63);
				{
				State = 12728; Match(STRING_AGG);
				State = 12729; Match(LR_BRACKET);
				State = 12730; ((STRINGAGGContext)_localctx).expr = expression(0);
				State = 12731; Match(COMMA);
				State = 12732; ((STRINGAGGContext)_localctx).separator = expression(0);
				State = 12733; Match(RR_BRACKET);
				State = 12740;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1677,_ctx) ) {
				case 1:
					{
					State = 12734; Match(WITHIN);
					State = 12735; Match(GROUP);
					State = 12736; Match(LR_BRACKET);
					State = 12737; order_by_clause();
					State = 12738; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;

			case 64:
				_localctx = new STRING_ESCAPEContext(_localctx);
				EnterOuterAlt(_localctx, 64);
				{
				State = 12742; Match(STRING_ESCAPE);
				State = 12743; Match(LR_BRACKET);
				State = 12744; ((STRING_ESCAPEContext)_localctx).text_ = expression(0);
				State = 12745; Match(COMMA);
				State = 12746; ((STRING_ESCAPEContext)_localctx).type_ = expression(0);
				State = 12747; Match(RR_BRACKET);
				}
				break;

			case 65:
				_localctx = new STUFFContext(_localctx);
				EnterOuterAlt(_localctx, 65);
				{
				State = 12749; Match(STUFF);
				State = 12750; Match(LR_BRACKET);
				State = 12751; ((STUFFContext)_localctx).str = expression(0);
				State = 12752; Match(COMMA);
				State = 12753; ((STUFFContext)_localctx).from = expression(0);
				State = 12754; Match(COMMA);
				State = 12755; ((STUFFContext)_localctx).to = expression(0);
				State = 12756; Match(COMMA);
				State = 12757; ((STUFFContext)_localctx).str_with = expression(0);
				State = 12758; Match(RR_BRACKET);
				}
				break;

			case 66:
				_localctx = new SUBSTRINGContext(_localctx);
				EnterOuterAlt(_localctx, 66);
				{
				State = 12760; Match(SUBSTRING);
				State = 12761; Match(LR_BRACKET);
				State = 12762; ((SUBSTRINGContext)_localctx).string_expression = expression(0);
				State = 12763; Match(COMMA);
				State = 12764; ((SUBSTRINGContext)_localctx).start_ = expression(0);
				State = 12765; Match(COMMA);
				State = 12766; ((SUBSTRINGContext)_localctx).length = expression(0);
				State = 12767; Match(RR_BRACKET);
				}
				break;

			case 67:
				_localctx = new TRANSLATEContext(_localctx);
				EnterOuterAlt(_localctx, 67);
				{
				State = 12769; Match(TRANSLATE);
				State = 12770; Match(LR_BRACKET);
				State = 12771; ((TRANSLATEContext)_localctx).inputString = expression(0);
				State = 12772; Match(COMMA);
				State = 12773; ((TRANSLATEContext)_localctx).characters = expression(0);
				State = 12774; Match(COMMA);
				State = 12775; ((TRANSLATEContext)_localctx).translations = expression(0);
				State = 12776; Match(RR_BRACKET);
				}
				break;

			case 68:
				_localctx = new TRIMContext(_localctx);
				EnterOuterAlt(_localctx, 68);
				{
				State = 12778; Match(TRIM);
				State = 12779; Match(LR_BRACKET);
				State = 12783;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1678,_ctx) ) {
				case 1:
					{
					State = 12780; ((TRIMContext)_localctx).characters = expression(0);
					State = 12781; Match(FROM);
					}
					break;
				}
				State = 12785; ((TRIMContext)_localctx).string_ = expression(0);
				State = 12786; Match(RR_BRACKET);
				}
				break;

			case 69:
				_localctx = new UNICODEContext(_localctx);
				EnterOuterAlt(_localctx, 69);
				{
				State = 12788; Match(UNICODE);
				State = 12789; Match(LR_BRACKET);
				State = 12790; ((UNICODEContext)_localctx).ncharacter_expression = expression(0);
				State = 12791; Match(RR_BRACKET);
				}
				break;

			case 70:
				_localctx = new UPPERContext(_localctx);
				EnterOuterAlt(_localctx, 70);
				{
				State = 12793; Match(UPPER);
				State = 12794; Match(LR_BRACKET);
				State = 12795; ((UPPERContext)_localctx).character_expression = expression(0);
				State = 12796; Match(RR_BRACKET);
				}
				break;

			case 71:
				_localctx = new BINARY_CHECKSUMContext(_localctx);
				EnterOuterAlt(_localctx, 71);
				{
				State = 12798; Match(BINARY_CHECKSUM);
				State = 12799; Match(LR_BRACKET);
				State = 12809;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1680,_ctx) ) {
				case 1:
					{
					State = 12800; ((BINARY_CHECKSUMContext)_localctx).star = Match(STAR);
					}
					break;

				case 2:
					{
					State = 12801; expression(0);
					State = 12806;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1679,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 12802; Match(COMMA);
							State = 12803; expression(0);
							}
							} 
						}
						State = 12808;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1679,_ctx);
					}
					}
					break;
				}
				State = 12811; Match(RR_BRACKET);
				}
				break;

			case 72:
				_localctx = new CHECKSUMContext(_localctx);
				EnterOuterAlt(_localctx, 72);
				{
				State = 12812; Match(CHECKSUM);
				State = 12813; Match(LR_BRACKET);
				State = 12823;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1682,_ctx) ) {
				case 1:
					{
					State = 12814; ((CHECKSUMContext)_localctx).star = Match(STAR);
					}
					break;

				case 2:
					{
					State = 12815; expression(0);
					State = 12820;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1681,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 12816; Match(COMMA);
							State = 12817; expression(0);
							}
							} 
						}
						State = 12822;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1681,_ctx);
					}
					}
					break;
				}
				State = 12825; Match(RR_BRACKET);
				}
				break;

			case 73:
				_localctx = new COMPRESSContext(_localctx);
				EnterOuterAlt(_localctx, 73);
				{
				State = 12826; Match(COMPRESS);
				State = 12827; Match(LR_BRACKET);
				State = 12828; ((COMPRESSContext)_localctx).expr = expression(0);
				State = 12829; Match(RR_BRACKET);
				}
				break;

			case 74:
				_localctx = new CONNECTIONPROPERTYContext(_localctx);
				EnterOuterAlt(_localctx, 74);
				{
				State = 12831; Match(CONNECTIONPROPERTY);
				State = 12832; Match(LR_BRACKET);
				State = 12833; ((CONNECTIONPROPERTYContext)_localctx).property = Match(STRING);
				State = 12834; Match(RR_BRACKET);
				}
				break;

			case 75:
				_localctx = new CONTEXT_INFOContext(_localctx);
				EnterOuterAlt(_localctx, 75);
				{
				State = 12835; Match(CONTEXT_INFO);
				State = 12836; Match(LR_BRACKET);
				State = 12837; Match(RR_BRACKET);
				}
				break;

			case 76:
				_localctx = new CURRENT_REQUEST_IDContext(_localctx);
				EnterOuterAlt(_localctx, 76);
				{
				State = 12838; Match(CURRENT_REQUEST_ID);
				State = 12839; Match(LR_BRACKET);
				State = 12840; Match(RR_BRACKET);
				}
				break;

			case 77:
				_localctx = new CURRENT_TRANSACTION_IDContext(_localctx);
				EnterOuterAlt(_localctx, 77);
				{
				State = 12841; Match(CURRENT_TRANSACTION_ID);
				State = 12842; Match(LR_BRACKET);
				State = 12843; Match(RR_BRACKET);
				}
				break;

			case 78:
				_localctx = new DECOMPRESSContext(_localctx);
				EnterOuterAlt(_localctx, 78);
				{
				State = 12844; Match(DECOMPRESS);
				State = 12845; Match(LR_BRACKET);
				State = 12846; ((DECOMPRESSContext)_localctx).expr = expression(0);
				State = 12847; Match(RR_BRACKET);
				}
				break;

			case 79:
				_localctx = new ERROR_LINEContext(_localctx);
				EnterOuterAlt(_localctx, 79);
				{
				State = 12849; Match(ERROR_LINE);
				State = 12850; Match(LR_BRACKET);
				State = 12851; Match(RR_BRACKET);
				}
				break;

			case 80:
				_localctx = new ERROR_MESSAGEContext(_localctx);
				EnterOuterAlt(_localctx, 80);
				{
				State = 12852; Match(ERROR_MESSAGE);
				State = 12853; Match(LR_BRACKET);
				State = 12854; Match(RR_BRACKET);
				}
				break;

			case 81:
				_localctx = new ERROR_NUMBERContext(_localctx);
				EnterOuterAlt(_localctx, 81);
				{
				State = 12855; Match(ERROR_NUMBER);
				State = 12856; Match(LR_BRACKET);
				State = 12857; Match(RR_BRACKET);
				}
				break;

			case 82:
				_localctx = new ERROR_PROCEDUREContext(_localctx);
				EnterOuterAlt(_localctx, 82);
				{
				State = 12858; Match(ERROR_PROCEDURE);
				State = 12859; Match(LR_BRACKET);
				State = 12860; Match(RR_BRACKET);
				}
				break;

			case 83:
				_localctx = new ERROR_SEVERITYContext(_localctx);
				EnterOuterAlt(_localctx, 83);
				{
				State = 12861; Match(ERROR_SEVERITY);
				State = 12862; Match(LR_BRACKET);
				State = 12863; Match(RR_BRACKET);
				}
				break;

			case 84:
				_localctx = new ERROR_STATEContext(_localctx);
				EnterOuterAlt(_localctx, 84);
				{
				State = 12864; Match(ERROR_STATE);
				State = 12865; Match(LR_BRACKET);
				State = 12866; Match(RR_BRACKET);
				}
				break;

			case 85:
				_localctx = new FORMATMESSAGEContext(_localctx);
				EnterOuterAlt(_localctx, 85);
				{
				State = 12867; Match(FORMATMESSAGE);
				State = 12868; Match(LR_BRACKET);
				State = 12872;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1683,_ctx) ) {
				case 1:
					{
					State = 12869; ((FORMATMESSAGEContext)_localctx).msg_number = Match(DECIMAL);
					}
					break;

				case 2:
					{
					State = 12870; ((FORMATMESSAGEContext)_localctx).msg_string = Match(STRING);
					}
					break;

				case 3:
					{
					State = 12871; ((FORMATMESSAGEContext)_localctx).msg_variable = Match(LOCAL_ID);
					}
					break;
				}
				State = 12874; Match(COMMA);
				State = 12875; expression(0);
				State = 12880;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1684,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 12876; Match(COMMA);
						State = 12877; expression(0);
						}
						} 
					}
					State = 12882;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1684,_ctx);
				}
				State = 12883; Match(RR_BRACKET);
				}
				break;

			case 86:
				_localctx = new GET_FILESTREAM_TRANSACTION_CONTEXTContext(_localctx);
				EnterOuterAlt(_localctx, 86);
				{
				State = 12885; Match(GET_FILESTREAM_TRANSACTION_CONTEXT);
				State = 12886; Match(LR_BRACKET);
				State = 12887; Match(RR_BRACKET);
				}
				break;

			case 87:
				_localctx = new GETANSINULLContext(_localctx);
				EnterOuterAlt(_localctx, 87);
				{
				State = 12888; Match(GETANSINULL);
				State = 12889; Match(LR_BRACKET);
				State = 12891;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1685,_ctx) ) {
				case 1:
					{
					State = 12890; ((GETANSINULLContext)_localctx).database = Match(STRING);
					}
					break;
				}
				State = 12893; Match(RR_BRACKET);
				}
				break;

			case 88:
				_localctx = new HOST_IDContext(_localctx);
				EnterOuterAlt(_localctx, 88);
				{
				State = 12894; Match(HOST_ID);
				State = 12895; Match(LR_BRACKET);
				State = 12896; Match(RR_BRACKET);
				}
				break;

			case 89:
				_localctx = new HOST_NAMEContext(_localctx);
				EnterOuterAlt(_localctx, 89);
				{
				State = 12897; Match(HOST_NAME);
				State = 12898; Match(LR_BRACKET);
				State = 12899; Match(RR_BRACKET);
				}
				break;

			case 90:
				_localctx = new ISNULLContext(_localctx);
				EnterOuterAlt(_localctx, 90);
				{
				State = 12900; Match(ISNULL);
				State = 12901; Match(LR_BRACKET);
				State = 12902; ((ISNULLContext)_localctx).left = expression(0);
				State = 12903; Match(COMMA);
				State = 12904; ((ISNULLContext)_localctx).right = expression(0);
				State = 12905; Match(RR_BRACKET);
				}
				break;

			case 91:
				_localctx = new ISNUMERICContext(_localctx);
				EnterOuterAlt(_localctx, 91);
				{
				State = 12907; Match(ISNUMERIC);
				State = 12908; Match(LR_BRACKET);
				State = 12909; expression(0);
				State = 12910; Match(RR_BRACKET);
				}
				break;

			case 92:
				_localctx = new MIN_ACTIVE_ROWVERSIONContext(_localctx);
				EnterOuterAlt(_localctx, 92);
				{
				State = 12912; Match(MIN_ACTIVE_ROWVERSION);
				State = 12913; Match(LR_BRACKET);
				State = 12914; Match(RR_BRACKET);
				}
				break;

			case 93:
				_localctx = new NEWIDContext(_localctx);
				EnterOuterAlt(_localctx, 93);
				{
				State = 12915; Match(NEWID);
				State = 12916; Match(LR_BRACKET);
				State = 12917; Match(RR_BRACKET);
				}
				break;

			case 94:
				_localctx = new NEWSEQUENTIALIDContext(_localctx);
				EnterOuterAlt(_localctx, 94);
				{
				State = 12918; Match(NEWSEQUENTIALID);
				State = 12919; Match(LR_BRACKET);
				State = 12920; Match(RR_BRACKET);
				}
				break;

			case 95:
				_localctx = new ROWCOUNT_BIGContext(_localctx);
				EnterOuterAlt(_localctx, 95);
				{
				State = 12921; Match(ROWCOUNT_BIG);
				State = 12922; Match(LR_BRACKET);
				State = 12923; Match(RR_BRACKET);
				}
				break;

			case 96:
				_localctx = new SESSION_CONTEXTContext(_localctx);
				EnterOuterAlt(_localctx, 96);
				{
				State = 12924; Match(SESSION_CONTEXT);
				State = 12925; Match(LR_BRACKET);
				State = 12926; ((SESSION_CONTEXTContext)_localctx).key = Match(STRING);
				State = 12927; Match(RR_BRACKET);
				}
				break;

			case 97:
				_localctx = new XACT_STATEContext(_localctx);
				EnterOuterAlt(_localctx, 97);
				{
				State = 12928; Match(XACT_STATE);
				State = 12929; Match(LR_BRACKET);
				State = 12930; Match(RR_BRACKET);
				}
				break;

			case 98:
				_localctx = new CASTContext(_localctx);
				EnterOuterAlt(_localctx, 98);
				{
				State = 12931; Match(CAST);
				State = 12932; Match(LR_BRACKET);
				State = 12933; expression(0);
				State = 12934; Match(AS);
				State = 12935; data_type();
				State = 12936; Match(RR_BRACKET);
				}
				break;

			case 99:
				_localctx = new TRY_CASTContext(_localctx);
				EnterOuterAlt(_localctx, 99);
				{
				State = 12938; Match(TRY_CAST);
				State = 12939; Match(LR_BRACKET);
				State = 12940; expression(0);
				State = 12941; Match(AS);
				State = 12942; data_type();
				State = 12943; Match(RR_BRACKET);
				}
				break;

			case 100:
				_localctx = new CONVERTContext(_localctx);
				EnterOuterAlt(_localctx, 100);
				{
				State = 12945; Match(CONVERT);
				State = 12946; Match(LR_BRACKET);
				State = 12947; ((CONVERTContext)_localctx).convert_data_type = data_type();
				State = 12948; Match(COMMA);
				State = 12949; ((CONVERTContext)_localctx).convert_expression = expression(0);
				State = 12952;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1686,_ctx) ) {
				case 1:
					{
					State = 12950; Match(COMMA);
					State = 12951; ((CONVERTContext)_localctx).style = expression(0);
					}
					break;
				}
				State = 12954; Match(RR_BRACKET);
				}
				break;

			case 101:
				_localctx = new COALESCEContext(_localctx);
				EnterOuterAlt(_localctx, 101);
				{
				State = 12956; Match(COALESCE);
				State = 12957; Match(LR_BRACKET);
				State = 12958; expression_list_();
				State = 12959; Match(RR_BRACKET);
				}
				break;

			case 102:
				_localctx = new CURSOR_ROWSContext(_localctx);
				EnterOuterAlt(_localctx, 102);
				{
				State = 12961; Match(CURSOR_ROWS);
				}
				break;

			case 103:
				_localctx = new FETCH_STATUSContext(_localctx);
				EnterOuterAlt(_localctx, 103);
				{
				State = 12962; Match(FETCH_STATUS);
				}
				break;

			case 104:
				_localctx = new CURSOR_STATUSContext(_localctx);
				EnterOuterAlt(_localctx, 104);
				{
				State = 12963; Match(CURSOR_STATUS);
				State = 12964; Match(LR_BRACKET);
				State = 12965; ((CURSOR_STATUSContext)_localctx).scope = Match(STRING);
				State = 12966; Match(COMMA);
				State = 12967; ((CURSOR_STATUSContext)_localctx).cursor = expression(0);
				State = 12968; Match(RR_BRACKET);
				}
				break;

			case 105:
				_localctx = new CERT_IDContext(_localctx);
				EnterOuterAlt(_localctx, 105);
				{
				State = 12970; Match(CERT_ID);
				State = 12971; Match(LR_BRACKET);
				State = 12972; ((CERT_IDContext)_localctx).cert_name = expression(0);
				State = 12973; Match(RR_BRACKET);
				}
				break;

			case 106:
				_localctx = new DATALENGTHContext(_localctx);
				EnterOuterAlt(_localctx, 106);
				{
				State = 12975; Match(DATALENGTH);
				State = 12976; Match(LR_BRACKET);
				State = 12977; expression(0);
				State = 12978; Match(RR_BRACKET);
				}
				break;

			case 107:
				_localctx = new IDENT_CURRENTContext(_localctx);
				EnterOuterAlt(_localctx, 107);
				{
				State = 12980; Match(IDENT_CURRENT);
				State = 12981; Match(LR_BRACKET);
				State = 12982; ((IDENT_CURRENTContext)_localctx).table_or_view = expression(0);
				State = 12983; Match(RR_BRACKET);
				}
				break;

			case 108:
				_localctx = new IDENT_INCRContext(_localctx);
				EnterOuterAlt(_localctx, 108);
				{
				State = 12985; Match(IDENT_INCR);
				State = 12986; Match(LR_BRACKET);
				State = 12987; ((IDENT_INCRContext)_localctx).table_or_view = expression(0);
				State = 12988; Match(RR_BRACKET);
				}
				break;

			case 109:
				_localctx = new IDENT_SEEDContext(_localctx);
				EnterOuterAlt(_localctx, 109);
				{
				State = 12990; Match(IDENT_SEED);
				State = 12991; Match(LR_BRACKET);
				State = 12992; ((IDENT_SEEDContext)_localctx).table_or_view = expression(0);
				State = 12993; Match(RR_BRACKET);
				}
				break;

			case 110:
				_localctx = new IDENTITYContext(_localctx);
				EnterOuterAlt(_localctx, 110);
				{
				State = 12995; Match(IDENTITY);
				State = 12996; Match(LR_BRACKET);
				State = 12997; ((IDENTITYContext)_localctx).datatype = data_type();
				State = 13002;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1687,_ctx) ) {
				case 1:
					{
					State = 12998; Match(COMMA);
					State = 12999; ((IDENTITYContext)_localctx).seed = Match(DECIMAL);
					State = 13000; Match(COMMA);
					State = 13001; ((IDENTITYContext)_localctx).increment = Match(DECIMAL);
					}
					break;
				}
				State = 13004; Match(RR_BRACKET);
				}
				break;

			case 111:
				_localctx = new SQL_VARIANT_PROPERTYContext(_localctx);
				EnterOuterAlt(_localctx, 111);
				{
				State = 13006; Match(SQL_VARIANT_PROPERTY);
				State = 13007; Match(LR_BRACKET);
				State = 13008; ((SQL_VARIANT_PROPERTYContext)_localctx).expr = expression(0);
				State = 13009; Match(COMMA);
				State = 13010; ((SQL_VARIANT_PROPERTYContext)_localctx).property = Match(STRING);
				State = 13011; Match(RR_BRACKET);
				}
				break;

			case 112:
				_localctx = new CURRENT_DATEContext(_localctx);
				EnterOuterAlt(_localctx, 112);
				{
				State = 13013; Match(CURRENT_DATE);
				State = 13014; Match(LR_BRACKET);
				State = 13015; Match(RR_BRACKET);
				}
				break;

			case 113:
				_localctx = new CURRENT_TIMESTAMPContext(_localctx);
				EnterOuterAlt(_localctx, 113);
				{
				State = 13016; Match(CURRENT_TIMESTAMP);
				}
				break;

			case 114:
				_localctx = new CURRENT_TIMEZONEContext(_localctx);
				EnterOuterAlt(_localctx, 114);
				{
				State = 13017; Match(CURRENT_TIMEZONE);
				State = 13018; Match(LR_BRACKET);
				State = 13019; Match(RR_BRACKET);
				}
				break;

			case 115:
				_localctx = new CURRENT_TIMEZONE_IDContext(_localctx);
				EnterOuterAlt(_localctx, 115);
				{
				State = 13020; Match(CURRENT_TIMEZONE_ID);
				State = 13021; Match(LR_BRACKET);
				State = 13022; Match(RR_BRACKET);
				}
				break;

			case 116:
				_localctx = new DATE_BUCKETContext(_localctx);
				EnterOuterAlt(_localctx, 116);
				{
				State = 13023; Match(DATE_BUCKET);
				State = 13024; Match(LR_BRACKET);
				State = 13025; ((DATE_BUCKETContext)_localctx).datepart = dateparts_9();
				State = 13026; Match(COMMA);
				State = 13027; ((DATE_BUCKETContext)_localctx).number = expression(0);
				State = 13028; Match(COMMA);
				State = 13029; ((DATE_BUCKETContext)_localctx).date = expression(0);
				State = 13032;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1688,_ctx) ) {
				case 1:
					{
					State = 13030; Match(COMMA);
					State = 13031; ((DATE_BUCKETContext)_localctx).origin = expression(0);
					}
					break;
				}
				State = 13034; Match(RR_BRACKET);
				}
				break;

			case 117:
				_localctx = new DATEADDContext(_localctx);
				EnterOuterAlt(_localctx, 117);
				{
				State = 13036; Match(DATEADD);
				State = 13037; Match(LR_BRACKET);
				State = 13038; ((DATEADDContext)_localctx).datepart = dateparts_12();
				State = 13039; Match(COMMA);
				State = 13040; ((DATEADDContext)_localctx).number = expression(0);
				State = 13041; Match(COMMA);
				State = 13042; ((DATEADDContext)_localctx).date = expression(0);
				State = 13043; Match(RR_BRACKET);
				}
				break;

			case 118:
				_localctx = new DATEDIFFContext(_localctx);
				EnterOuterAlt(_localctx, 118);
				{
				State = 13045; Match(DATEDIFF);
				State = 13046; Match(LR_BRACKET);
				State = 13047; ((DATEDIFFContext)_localctx).datepart = dateparts_12();
				State = 13048; Match(COMMA);
				State = 13049; ((DATEDIFFContext)_localctx).date_first = expression(0);
				State = 13050; Match(COMMA);
				State = 13051; ((DATEDIFFContext)_localctx).date_second = expression(0);
				State = 13052; Match(RR_BRACKET);
				}
				break;

			case 119:
				_localctx = new DATEDIFF_BIGContext(_localctx);
				EnterOuterAlt(_localctx, 119);
				{
				State = 13054; Match(DATEDIFF_BIG);
				State = 13055; Match(LR_BRACKET);
				State = 13056; ((DATEDIFF_BIGContext)_localctx).datepart = dateparts_12();
				State = 13057; Match(COMMA);
				State = 13058; ((DATEDIFF_BIGContext)_localctx).startdate = expression(0);
				State = 13059; Match(COMMA);
				State = 13060; ((DATEDIFF_BIGContext)_localctx).enddate = expression(0);
				State = 13061; Match(RR_BRACKET);
				}
				break;

			case 120:
				_localctx = new DATEFROMPARTSContext(_localctx);
				EnterOuterAlt(_localctx, 120);
				{
				State = 13063; Match(DATEFROMPARTS);
				State = 13064; Match(LR_BRACKET);
				State = 13065; ((DATEFROMPARTSContext)_localctx).year = expression(0);
				State = 13066; Match(COMMA);
				State = 13067; ((DATEFROMPARTSContext)_localctx).month = expression(0);
				State = 13068; Match(COMMA);
				State = 13069; ((DATEFROMPARTSContext)_localctx).day = expression(0);
				State = 13070; Match(RR_BRACKET);
				}
				break;

			case 121:
				_localctx = new DATENAMEContext(_localctx);
				EnterOuterAlt(_localctx, 121);
				{
				State = 13072; Match(DATENAME);
				State = 13073; Match(LR_BRACKET);
				State = 13074; ((DATENAMEContext)_localctx).datepart = dateparts_15();
				State = 13075; Match(COMMA);
				State = 13076; ((DATENAMEContext)_localctx).date = expression(0);
				State = 13077; Match(RR_BRACKET);
				}
				break;

			case 122:
				_localctx = new DATEPARTContext(_localctx);
				EnterOuterAlt(_localctx, 122);
				{
				State = 13079; Match(DATEPART);
				State = 13080; Match(LR_BRACKET);
				State = 13081; ((DATEPARTContext)_localctx).datepart = dateparts_15();
				State = 13082; Match(COMMA);
				State = 13083; ((DATEPARTContext)_localctx).date = expression(0);
				State = 13084; Match(RR_BRACKET);
				}
				break;

			case 123:
				_localctx = new DATETIME2FROMPARTSContext(_localctx);
				EnterOuterAlt(_localctx, 123);
				{
				State = 13086; Match(DATETIME2FROMPARTS);
				State = 13087; Match(LR_BRACKET);
				State = 13088; ((DATETIME2FROMPARTSContext)_localctx).year = expression(0);
				State = 13089; Match(COMMA);
				State = 13090; ((DATETIME2FROMPARTSContext)_localctx).month = expression(0);
				State = 13091; Match(COMMA);
				State = 13092; ((DATETIME2FROMPARTSContext)_localctx).day = expression(0);
				State = 13093; Match(COMMA);
				State = 13094; ((DATETIME2FROMPARTSContext)_localctx).hour = expression(0);
				State = 13095; Match(COMMA);
				State = 13096; ((DATETIME2FROMPARTSContext)_localctx).minute = expression(0);
				State = 13097; Match(COMMA);
				State = 13098; ((DATETIME2FROMPARTSContext)_localctx).seconds = expression(0);
				State = 13099; Match(COMMA);
				State = 13100; ((DATETIME2FROMPARTSContext)_localctx).fractions = expression(0);
				State = 13101; Match(COMMA);
				State = 13102; ((DATETIME2FROMPARTSContext)_localctx).precision = expression(0);
				State = 13103; Match(RR_BRACKET);
				}
				break;

			case 124:
				_localctx = new DATETIMEFROMPARTSContext(_localctx);
				EnterOuterAlt(_localctx, 124);
				{
				State = 13105; Match(DATETIMEFROMPARTS);
				State = 13106; Match(LR_BRACKET);
				State = 13107; ((DATETIMEFROMPARTSContext)_localctx).year = expression(0);
				State = 13108; Match(COMMA);
				State = 13109; ((DATETIMEFROMPARTSContext)_localctx).month = expression(0);
				State = 13110; Match(COMMA);
				State = 13111; ((DATETIMEFROMPARTSContext)_localctx).day = expression(0);
				State = 13112; Match(COMMA);
				State = 13113; ((DATETIMEFROMPARTSContext)_localctx).hour = expression(0);
				State = 13114; Match(COMMA);
				State = 13115; ((DATETIMEFROMPARTSContext)_localctx).minute = expression(0);
				State = 13116; Match(COMMA);
				State = 13117; ((DATETIMEFROMPARTSContext)_localctx).seconds = expression(0);
				State = 13118; Match(COMMA);
				State = 13119; ((DATETIMEFROMPARTSContext)_localctx).milliseconds = expression(0);
				State = 13120; Match(RR_BRACKET);
				}
				break;

			case 125:
				_localctx = new DATETIMEOFFSETFROMPARTSContext(_localctx);
				EnterOuterAlt(_localctx, 125);
				{
				State = 13122; Match(DATETIMEOFFSETFROMPARTS);
				State = 13123; Match(LR_BRACKET);
				State = 13124; ((DATETIMEOFFSETFROMPARTSContext)_localctx).year = expression(0);
				State = 13125; Match(COMMA);
				State = 13126; ((DATETIMEOFFSETFROMPARTSContext)_localctx).month = expression(0);
				State = 13127; Match(COMMA);
				State = 13128; ((DATETIMEOFFSETFROMPARTSContext)_localctx).day = expression(0);
				State = 13129; Match(COMMA);
				State = 13130; ((DATETIMEOFFSETFROMPARTSContext)_localctx).hour = expression(0);
				State = 13131; Match(COMMA);
				State = 13132; ((DATETIMEOFFSETFROMPARTSContext)_localctx).minute = expression(0);
				State = 13133; Match(COMMA);
				State = 13134; ((DATETIMEOFFSETFROMPARTSContext)_localctx).seconds = expression(0);
				State = 13135; Match(COMMA);
				State = 13136; ((DATETIMEOFFSETFROMPARTSContext)_localctx).fractions = expression(0);
				State = 13137; Match(COMMA);
				State = 13138; ((DATETIMEOFFSETFROMPARTSContext)_localctx).hour_offset = expression(0);
				State = 13139; Match(COMMA);
				State = 13140; ((DATETIMEOFFSETFROMPARTSContext)_localctx).minute_offset = expression(0);
				State = 13141; Match(COMMA);
				State = 13142; ((DATETIMEOFFSETFROMPARTSContext)_localctx).precision = Match(DECIMAL);
				State = 13143; Match(RR_BRACKET);
				}
				break;

			case 126:
				_localctx = new DATETRUNCContext(_localctx);
				EnterOuterAlt(_localctx, 126);
				{
				State = 13145; Match(DATETRUNC);
				State = 13146; Match(LR_BRACKET);
				State = 13147; ((DATETRUNCContext)_localctx).datepart = dateparts_datetrunc();
				State = 13148; Match(COMMA);
				State = 13149; ((DATETRUNCContext)_localctx).date = expression(0);
				State = 13150; Match(RR_BRACKET);
				}
				break;

			case 127:
				_localctx = new DAYContext(_localctx);
				EnterOuterAlt(_localctx, 127);
				{
				State = 13152; Match(DAY);
				State = 13153; Match(LR_BRACKET);
				State = 13154; ((DAYContext)_localctx).date = expression(0);
				State = 13155; Match(RR_BRACKET);
				}
				break;

			case 128:
				_localctx = new EOMONTHContext(_localctx);
				EnterOuterAlt(_localctx, 128);
				{
				State = 13157; Match(EOMONTH);
				State = 13158; Match(LR_BRACKET);
				State = 13159; ((EOMONTHContext)_localctx).start_date = expression(0);
				State = 13162;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1689,_ctx) ) {
				case 1:
					{
					State = 13160; Match(COMMA);
					State = 13161; ((EOMONTHContext)_localctx).month_to_add = expression(0);
					}
					break;
				}
				State = 13164; Match(RR_BRACKET);
				}
				break;

			case 129:
				_localctx = new GETDATEContext(_localctx);
				EnterOuterAlt(_localctx, 129);
				{
				State = 13166; Match(GETDATE);
				State = 13167; Match(LR_BRACKET);
				State = 13168; Match(RR_BRACKET);
				}
				break;

			case 130:
				_localctx = new GETUTCDATEContext(_localctx);
				EnterOuterAlt(_localctx, 130);
				{
				State = 13169; Match(GETUTCDATE);
				State = 13170; Match(LR_BRACKET);
				State = 13171; Match(RR_BRACKET);
				}
				break;

			case 131:
				_localctx = new ISDATEContext(_localctx);
				EnterOuterAlt(_localctx, 131);
				{
				State = 13172; Match(ISDATE);
				State = 13173; Match(LR_BRACKET);
				State = 13174; expression(0);
				State = 13175; Match(RR_BRACKET);
				}
				break;

			case 132:
				_localctx = new MONTHContext(_localctx);
				EnterOuterAlt(_localctx, 132);
				{
				State = 13177; Match(MONTH);
				State = 13178; Match(LR_BRACKET);
				State = 13179; ((MONTHContext)_localctx).date = expression(0);
				State = 13180; Match(RR_BRACKET);
				}
				break;

			case 133:
				_localctx = new SMALLDATETIMEFROMPARTSContext(_localctx);
				EnterOuterAlt(_localctx, 133);
				{
				State = 13182; Match(SMALLDATETIMEFROMPARTS);
				State = 13183; Match(LR_BRACKET);
				State = 13184; ((SMALLDATETIMEFROMPARTSContext)_localctx).year = expression(0);
				State = 13185; Match(COMMA);
				State = 13186; ((SMALLDATETIMEFROMPARTSContext)_localctx).month = expression(0);
				State = 13187; Match(COMMA);
				State = 13188; ((SMALLDATETIMEFROMPARTSContext)_localctx).day = expression(0);
				State = 13189; Match(COMMA);
				State = 13190; ((SMALLDATETIMEFROMPARTSContext)_localctx).hour = expression(0);
				State = 13191; Match(COMMA);
				State = 13192; ((SMALLDATETIMEFROMPARTSContext)_localctx).minute = expression(0);
				State = 13193; Match(RR_BRACKET);
				}
				break;

			case 134:
				_localctx = new SWITCHOFFSETContext(_localctx);
				EnterOuterAlt(_localctx, 134);
				{
				State = 13195; Match(SWITCHOFFSET);
				State = 13196; Match(LR_BRACKET);
				State = 13197; ((SWITCHOFFSETContext)_localctx).datetimeoffset_expression = expression(0);
				State = 13198; Match(COMMA);
				State = 13199; ((SWITCHOFFSETContext)_localctx).timezoneoffset_expression = expression(0);
				State = 13200; Match(RR_BRACKET);
				}
				break;

			case 135:
				_localctx = new SYSDATETIMEContext(_localctx);
				EnterOuterAlt(_localctx, 135);
				{
				State = 13202; Match(SYSDATETIME);
				State = 13203; Match(LR_BRACKET);
				State = 13204; Match(RR_BRACKET);
				}
				break;

			case 136:
				_localctx = new SYSDATETIMEOFFSETContext(_localctx);
				EnterOuterAlt(_localctx, 136);
				{
				State = 13205; Match(SYSDATETIMEOFFSET);
				State = 13206; Match(LR_BRACKET);
				State = 13207; Match(RR_BRACKET);
				}
				break;

			case 137:
				_localctx = new SYSUTCDATETIMEContext(_localctx);
				EnterOuterAlt(_localctx, 137);
				{
				State = 13208; Match(SYSUTCDATETIME);
				State = 13209; Match(LR_BRACKET);
				State = 13210; Match(RR_BRACKET);
				}
				break;

			case 138:
				_localctx = new TIMEFROMPARTSContext(_localctx);
				EnterOuterAlt(_localctx, 138);
				{
				State = 13211; Match(TIMEFROMPARTS);
				State = 13212; Match(LR_BRACKET);
				State = 13213; ((TIMEFROMPARTSContext)_localctx).hour = expression(0);
				State = 13214; Match(COMMA);
				State = 13215; ((TIMEFROMPARTSContext)_localctx).minute = expression(0);
				State = 13216; Match(COMMA);
				State = 13217; ((TIMEFROMPARTSContext)_localctx).seconds = expression(0);
				State = 13218; Match(COMMA);
				State = 13219; ((TIMEFROMPARTSContext)_localctx).fractions = expression(0);
				State = 13220; Match(COMMA);
				State = 13221; ((TIMEFROMPARTSContext)_localctx).precision = Match(DECIMAL);
				State = 13222; Match(RR_BRACKET);
				}
				break;

			case 139:
				_localctx = new TODATETIMEOFFSETContext(_localctx);
				EnterOuterAlt(_localctx, 139);
				{
				State = 13224; Match(TODATETIMEOFFSET);
				State = 13225; Match(LR_BRACKET);
				State = 13226; ((TODATETIMEOFFSETContext)_localctx).datetime_expression = expression(0);
				State = 13227; Match(COMMA);
				State = 13228; ((TODATETIMEOFFSETContext)_localctx).timezoneoffset_expression = expression(0);
				State = 13229; Match(RR_BRACKET);
				}
				break;

			case 140:
				_localctx = new YEARContext(_localctx);
				EnterOuterAlt(_localctx, 140);
				{
				State = 13231; Match(YEAR);
				State = 13232; Match(LR_BRACKET);
				State = 13233; ((YEARContext)_localctx).date = expression(0);
				State = 13234; Match(RR_BRACKET);
				}
				break;

			case 141:
				_localctx = new IDENTITYContext(_localctx);
				EnterOuterAlt(_localctx, 141);
				{
				State = 13236; Match(IDENTITY);
				State = 13237; Match(LR_BRACKET);
				State = 13238; data_type();
				State = 13241;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1690,_ctx) ) {
				case 1:
					{
					State = 13239; Match(COMMA);
					State = 13240; ((IDENTITYContext)_localctx).seed = Match(DECIMAL);
					}
					break;
				}
				State = 13245;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1691,_ctx) ) {
				case 1:
					{
					State = 13243; Match(COMMA);
					State = 13244; ((IDENTITYContext)_localctx).increment = Match(DECIMAL);
					}
					break;
				}
				State = 13247; Match(RR_BRACKET);
				}
				break;

			case 142:
				_localctx = new MIN_ACTIVE_ROWVERSIONContext(_localctx);
				EnterOuterAlt(_localctx, 142);
				{
				State = 13249; Match(MIN_ACTIVE_ROWVERSION);
				State = 13250; Match(LR_BRACKET);
				State = 13251; Match(RR_BRACKET);
				}
				break;

			case 143:
				_localctx = new NULLIFContext(_localctx);
				EnterOuterAlt(_localctx, 143);
				{
				State = 13252; Match(NULLIF);
				State = 13253; Match(LR_BRACKET);
				State = 13254; ((NULLIFContext)_localctx).left = expression(0);
				State = 13255; Match(COMMA);
				State = 13256; ((NULLIFContext)_localctx).right = expression(0);
				State = 13257; Match(RR_BRACKET);
				}
				break;

			case 144:
				_localctx = new PARSEContext(_localctx);
				EnterOuterAlt(_localctx, 144);
				{
				State = 13259; Match(PARSE);
				State = 13260; Match(LR_BRACKET);
				State = 13261; ((PARSEContext)_localctx).str = expression(0);
				State = 13262; Match(AS);
				State = 13263; data_type();
				State = 13266;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1692,_ctx) ) {
				case 1:
					{
					State = 13264; Match(USING);
					State = 13265; ((PARSEContext)_localctx).culture = expression(0);
					}
					break;
				}
				State = 13268; Match(RR_BRACKET);
				}
				break;

			case 145:
				_localctx = new XML_DATA_TYPE_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 145);
				{
				State = 13270; xml_data_type_methods();
				}
				break;

			case 146:
				_localctx = new IIFContext(_localctx);
				EnterOuterAlt(_localctx, 146);
				{
				State = 13271; Match(IIF);
				State = 13272; Match(LR_BRACKET);
				State = 13273; ((IIFContext)_localctx).cond = search_condition(0);
				State = 13274; Match(COMMA);
				State = 13275; ((IIFContext)_localctx).left = expression(0);
				State = 13276; Match(COMMA);
				State = 13277; ((IIFContext)_localctx).right = expression(0);
				State = 13278; Match(RR_BRACKET);
				}
				break;

			case 147:
				_localctx = new ISJSONContext(_localctx);
				EnterOuterAlt(_localctx, 147);
				{
				State = 13280; Match(ISJSON);
				State = 13281; Match(LR_BRACKET);
				State = 13282; ((ISJSONContext)_localctx).json_expr = expression(0);
				State = 13285;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1693,_ctx) ) {
				case 1:
					{
					State = 13283; Match(COMMA);
					State = 13284; ((ISJSONContext)_localctx).json_type_constraint = expression(0);
					}
					break;
				}
				State = 13287; Match(RR_BRACKET);
				}
				break;

			case 148:
				_localctx = new JSON_OBJECTContext(_localctx);
				EnterOuterAlt(_localctx, 148);
				{
				State = 13289; Match(JSON_OBJECT);
				State = 13290; Match(LR_BRACKET);
				State = 13299;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1695,_ctx) ) {
				case 1:
					{
					State = 13291; ((JSON_OBJECTContext)_localctx).key_value = json_key_value();
					State = 13296;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1694,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 13292; Match(COMMA);
							State = 13293; ((JSON_OBJECTContext)_localctx).key_value = json_key_value();
							}
							} 
						}
						State = 13298;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1694,_ctx);
					}
					}
					break;
				}
				State = 13302;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1696,_ctx) ) {
				case 1:
					{
					State = 13301; json_null_clause();
					}
					break;
				}
				State = 13304; Match(RR_BRACKET);
				}
				break;

			case 149:
				_localctx = new JSON_ARRAYContext(_localctx);
				EnterOuterAlt(_localctx, 149);
				{
				State = 13305; Match(JSON_ARRAY);
				State = 13306; Match(LR_BRACKET);
				State = 13308;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1697,_ctx) ) {
				case 1:
					{
					State = 13307; expression_list_();
					}
					break;
				}
				State = 13311;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1698,_ctx) ) {
				case 1:
					{
					State = 13310; json_null_clause();
					}
					break;
				}
				State = 13313; Match(RR_BRACKET);
				}
				break;

			case 150:
				_localctx = new JSON_VALUEContext(_localctx);
				EnterOuterAlt(_localctx, 150);
				{
				State = 13314; Match(JSON_VALUE);
				State = 13315; Match(LR_BRACKET);
				State = 13316; ((JSON_VALUEContext)_localctx).expr = expression(0);
				State = 13317; Match(COMMA);
				State = 13318; ((JSON_VALUEContext)_localctx).path = expression(0);
				State = 13319; Match(RR_BRACKET);
				}
				break;

			case 151:
				_localctx = new JSON_QUERYContext(_localctx);
				EnterOuterAlt(_localctx, 151);
				{
				State = 13321; Match(JSON_QUERY);
				State = 13322; Match(LR_BRACKET);
				State = 13323; ((JSON_QUERYContext)_localctx).expr = expression(0);
				State = 13326;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1699,_ctx) ) {
				case 1:
					{
					State = 13324; Match(COMMA);
					State = 13325; ((JSON_QUERYContext)_localctx).path = expression(0);
					}
					break;
				}
				State = 13328; Match(RR_BRACKET);
				}
				break;

			case 152:
				_localctx = new JSON_MODIFYContext(_localctx);
				EnterOuterAlt(_localctx, 152);
				{
				State = 13330; Match(JSON_MODIFY);
				State = 13331; Match(LR_BRACKET);
				State = 13332; ((JSON_MODIFYContext)_localctx).expr = expression(0);
				State = 13333; Match(COMMA);
				State = 13334; ((JSON_MODIFYContext)_localctx).path = expression(0);
				State = 13335; Match(COMMA);
				State = 13336; ((JSON_MODIFYContext)_localctx).new_value = expression(0);
				State = 13337; Match(RR_BRACKET);
				}
				break;

			case 153:
				_localctx = new JSON_PATH_EXISTSContext(_localctx);
				EnterOuterAlt(_localctx, 153);
				{
				State = 13339; Match(JSON_PATH_EXISTS);
				State = 13340; Match(LR_BRACKET);
				State = 13341; ((JSON_PATH_EXISTSContext)_localctx).value_expression = expression(0);
				State = 13342; Match(COMMA);
				State = 13343; ((JSON_PATH_EXISTSContext)_localctx).sql_json_path = expression(0);
				State = 13344; Match(RR_BRACKET);
				}
				break;

			case 154:
				_localctx = new ABSContext(_localctx);
				EnterOuterAlt(_localctx, 154);
				{
				State = 13346; Match(ABS);
				State = 13347; Match(LR_BRACKET);
				State = 13348; ((ABSContext)_localctx).numeric_expression = expression(0);
				State = 13349; Match(RR_BRACKET);
				}
				break;

			case 155:
				_localctx = new ACOSContext(_localctx);
				EnterOuterAlt(_localctx, 155);
				{
				State = 13351; Match(ACOS);
				State = 13352; Match(LR_BRACKET);
				State = 13353; ((ACOSContext)_localctx).float_expression = expression(0);
				State = 13354; Match(RR_BRACKET);
				}
				break;

			case 156:
				_localctx = new ASINContext(_localctx);
				EnterOuterAlt(_localctx, 156);
				{
				State = 13356; Match(ASIN);
				State = 13357; Match(LR_BRACKET);
				State = 13358; ((ASINContext)_localctx).float_expression = expression(0);
				State = 13359; Match(RR_BRACKET);
				}
				break;

			case 157:
				_localctx = new ATANContext(_localctx);
				EnterOuterAlt(_localctx, 157);
				{
				State = 13361; Match(ATAN);
				State = 13362; Match(LR_BRACKET);
				State = 13363; ((ATANContext)_localctx).float_expression = expression(0);
				State = 13364; Match(RR_BRACKET);
				}
				break;

			case 158:
				_localctx = new ATN2Context(_localctx);
				EnterOuterAlt(_localctx, 158);
				{
				State = 13366; Match(ATN2);
				State = 13367; Match(LR_BRACKET);
				State = 13368; ((ATN2Context)_localctx).float_expression = expression(0);
				State = 13369; Match(COMMA);
				State = 13370; ((ATN2Context)_localctx).float_expression = expression(0);
				State = 13371; Match(RR_BRACKET);
				}
				break;

			case 159:
				_localctx = new CEILINGContext(_localctx);
				EnterOuterAlt(_localctx, 159);
				{
				State = 13373; Match(CEILING);
				State = 13374; Match(LR_BRACKET);
				State = 13375; ((CEILINGContext)_localctx).numeric_expression = expression(0);
				State = 13376; Match(RR_BRACKET);
				}
				break;

			case 160:
				_localctx = new COSContext(_localctx);
				EnterOuterAlt(_localctx, 160);
				{
				State = 13378; Match(COS);
				State = 13379; Match(LR_BRACKET);
				State = 13380; ((COSContext)_localctx).float_expression = expression(0);
				State = 13381; Match(RR_BRACKET);
				}
				break;

			case 161:
				_localctx = new COTContext(_localctx);
				EnterOuterAlt(_localctx, 161);
				{
				State = 13383; Match(COT);
				State = 13384; Match(LR_BRACKET);
				State = 13385; ((COTContext)_localctx).float_expression = expression(0);
				State = 13386; Match(RR_BRACKET);
				}
				break;

			case 162:
				_localctx = new DEGREESContext(_localctx);
				EnterOuterAlt(_localctx, 162);
				{
				State = 13388; Match(DEGREES);
				State = 13389; Match(LR_BRACKET);
				State = 13390; ((DEGREESContext)_localctx).numeric_expression = expression(0);
				State = 13391; Match(RR_BRACKET);
				}
				break;

			case 163:
				_localctx = new EXPContext(_localctx);
				EnterOuterAlt(_localctx, 163);
				{
				State = 13393; Match(EXP);
				State = 13394; Match(LR_BRACKET);
				State = 13395; ((EXPContext)_localctx).float_expression = expression(0);
				State = 13396; Match(RR_BRACKET);
				}
				break;

			case 164:
				_localctx = new FLOORContext(_localctx);
				EnterOuterAlt(_localctx, 164);
				{
				State = 13398; Match(FLOOR);
				State = 13399; Match(LR_BRACKET);
				State = 13400; ((FLOORContext)_localctx).numeric_expression = expression(0);
				State = 13401; Match(RR_BRACKET);
				}
				break;

			case 165:
				_localctx = new LOGContext(_localctx);
				EnterOuterAlt(_localctx, 165);
				{
				State = 13403; Match(LOG);
				State = 13404; Match(LR_BRACKET);
				State = 13405; ((LOGContext)_localctx).float_expression = expression(0);
				State = 13408;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1700,_ctx) ) {
				case 1:
					{
					State = 13406; Match(COMMA);
					State = 13407; ((LOGContext)_localctx).@base = expression(0);
					}
					break;
				}
				State = 13410; Match(RR_BRACKET);
				}
				break;

			case 166:
				_localctx = new LOG10Context(_localctx);
				EnterOuterAlt(_localctx, 166);
				{
				State = 13412; Match(LOG10);
				State = 13413; Match(LR_BRACKET);
				State = 13414; ((LOG10Context)_localctx).float_expression = expression(0);
				State = 13415; Match(RR_BRACKET);
				}
				break;

			case 167:
				_localctx = new PIContext(_localctx);
				EnterOuterAlt(_localctx, 167);
				{
				State = 13417; Match(PI);
				State = 13418; Match(LR_BRACKET);
				State = 13419; Match(RR_BRACKET);
				}
				break;

			case 168:
				_localctx = new POWERContext(_localctx);
				EnterOuterAlt(_localctx, 168);
				{
				State = 13420; Match(POWER);
				State = 13421; Match(LR_BRACKET);
				State = 13422; ((POWERContext)_localctx).float_expression = expression(0);
				State = 13423; Match(COMMA);
				State = 13424; ((POWERContext)_localctx).y = expression(0);
				State = 13425; Match(RR_BRACKET);
				}
				break;

			case 169:
				_localctx = new RADIANSContext(_localctx);
				EnterOuterAlt(_localctx, 169);
				{
				State = 13427; Match(RADIANS);
				State = 13428; Match(LR_BRACKET);
				State = 13429; ((RADIANSContext)_localctx).numeric_expression = expression(0);
				State = 13430; Match(RR_BRACKET);
				}
				break;

			case 170:
				_localctx = new RANDContext(_localctx);
				EnterOuterAlt(_localctx, 170);
				{
				State = 13432; Match(RAND);
				State = 13433; Match(LR_BRACKET);
				State = 13435;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1701,_ctx) ) {
				case 1:
					{
					State = 13434; ((RANDContext)_localctx).seed = expression(0);
					}
					break;
				}
				State = 13437; Match(RR_BRACKET);
				}
				break;

			case 171:
				_localctx = new ROUNDContext(_localctx);
				EnterOuterAlt(_localctx, 171);
				{
				State = 13438; Match(ROUND);
				State = 13439; Match(LR_BRACKET);
				State = 13440; ((ROUNDContext)_localctx).numeric_expression = expression(0);
				State = 13441; Match(COMMA);
				State = 13442; ((ROUNDContext)_localctx).length = expression(0);
				State = 13445;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1702,_ctx) ) {
				case 1:
					{
					State = 13443; Match(COMMA);
					State = 13444; ((ROUNDContext)_localctx).function = expression(0);
					}
					break;
				}
				State = 13447; Match(RR_BRACKET);
				}
				break;

			case 172:
				_localctx = new MATH_SIGNContext(_localctx);
				EnterOuterAlt(_localctx, 172);
				{
				State = 13449; Match(SIGN);
				State = 13450; Match(LR_BRACKET);
				State = 13451; ((MATH_SIGNContext)_localctx).numeric_expression = expression(0);
				State = 13452; Match(RR_BRACKET);
				}
				break;

			case 173:
				_localctx = new SINContext(_localctx);
				EnterOuterAlt(_localctx, 173);
				{
				State = 13454; Match(SIN);
				State = 13455; Match(LR_BRACKET);
				State = 13456; ((SINContext)_localctx).float_expression = expression(0);
				State = 13457; Match(RR_BRACKET);
				}
				break;

			case 174:
				_localctx = new SQRTContext(_localctx);
				EnterOuterAlt(_localctx, 174);
				{
				State = 13459; Match(SQRT);
				State = 13460; Match(LR_BRACKET);
				State = 13461; ((SQRTContext)_localctx).float_expression = expression(0);
				State = 13462; Match(RR_BRACKET);
				}
				break;

			case 175:
				_localctx = new SQUAREContext(_localctx);
				EnterOuterAlt(_localctx, 175);
				{
				State = 13464; Match(SQUARE);
				State = 13465; Match(LR_BRACKET);
				State = 13466; ((SQUAREContext)_localctx).float_expression = expression(0);
				State = 13467; Match(RR_BRACKET);
				}
				break;

			case 176:
				_localctx = new TANContext(_localctx);
				EnterOuterAlt(_localctx, 176);
				{
				State = 13469; Match(TAN);
				State = 13470; Match(LR_BRACKET);
				State = 13471; ((TANContext)_localctx).float_expression = expression(0);
				State = 13472; Match(RR_BRACKET);
				}
				break;

			case 177:
				_localctx = new GREATESTContext(_localctx);
				EnterOuterAlt(_localctx, 177);
				{
				State = 13474; Match(GREATEST);
				State = 13475; Match(LR_BRACKET);
				State = 13476; expression_list_();
				State = 13477; Match(RR_BRACKET);
				}
				break;

			case 178:
				_localctx = new LEASTContext(_localctx);
				EnterOuterAlt(_localctx, 178);
				{
				State = 13479; Match(LEAST);
				State = 13480; Match(LR_BRACKET);
				State = 13481; expression_list_();
				State = 13482; Match(RR_BRACKET);
				}
				break;

			case 179:
				_localctx = new CERTENCODEDContext(_localctx);
				EnterOuterAlt(_localctx, 179);
				{
				State = 13484; Match(CERTENCODED);
				State = 13485; Match(LR_BRACKET);
				State = 13486; ((CERTENCODEDContext)_localctx).certid = expression(0);
				State = 13487; Match(RR_BRACKET);
				}
				break;

			case 180:
				_localctx = new CERTPRIVATEKEYContext(_localctx);
				EnterOuterAlt(_localctx, 180);
				{
				State = 13489; Match(CERTPRIVATEKEY);
				State = 13490; Match(LR_BRACKET);
				State = 13491; ((CERTPRIVATEKEYContext)_localctx).certid = expression(0);
				State = 13492; Match(COMMA);
				State = 13493; ((CERTPRIVATEKEYContext)_localctx).encryption_password = expression(0);
				State = 13496;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1703,_ctx) ) {
				case 1:
					{
					State = 13494; Match(COMMA);
					State = 13495; ((CERTPRIVATEKEYContext)_localctx).decryption_pasword = expression(0);
					}
					break;
				}
				State = 13498; Match(RR_BRACKET);
				}
				break;

			case 181:
				_localctx = new CURRENT_USERContext(_localctx);
				EnterOuterAlt(_localctx, 181);
				{
				State = 13500; Match(CURRENT_USER);
				}
				break;

			case 182:
				_localctx = new DATABASE_PRINCIPAL_IDContext(_localctx);
				EnterOuterAlt(_localctx, 182);
				{
				State = 13501; Match(DATABASE_PRINCIPAL_ID);
				State = 13502; Match(LR_BRACKET);
				State = 13504;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1704,_ctx) ) {
				case 1:
					{
					State = 13503; ((DATABASE_PRINCIPAL_IDContext)_localctx).principal_name = expression(0);
					}
					break;
				}
				State = 13506; Match(RR_BRACKET);
				}
				break;

			case 183:
				_localctx = new HAS_DBACCESSContext(_localctx);
				EnterOuterAlt(_localctx, 183);
				{
				State = 13507; Match(HAS_DBACCESS);
				State = 13508; Match(LR_BRACKET);
				State = 13509; ((HAS_DBACCESSContext)_localctx).database_name = expression(0);
				State = 13510; Match(RR_BRACKET);
				}
				break;

			case 184:
				_localctx = new HAS_PERMS_BY_NAMEContext(_localctx);
				EnterOuterAlt(_localctx, 184);
				{
				State = 13512; Match(HAS_PERMS_BY_NAME);
				State = 13513; Match(LR_BRACKET);
				State = 13514; ((HAS_PERMS_BY_NAMEContext)_localctx).securable = expression(0);
				State = 13515; Match(COMMA);
				State = 13516; ((HAS_PERMS_BY_NAMEContext)_localctx).securable_class = expression(0);
				State = 13517; Match(COMMA);
				State = 13518; ((HAS_PERMS_BY_NAMEContext)_localctx).permission = expression(0);
				State = 13525;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1706,_ctx) ) {
				case 1:
					{
					State = 13519; Match(COMMA);
					State = 13520; ((HAS_PERMS_BY_NAMEContext)_localctx).sub_securable = expression(0);
					State = 13523;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1705,_ctx) ) {
					case 1:
						{
						State = 13521; Match(COMMA);
						State = 13522; ((HAS_PERMS_BY_NAMEContext)_localctx).sub_securable_class = expression(0);
						}
						break;
					}
					}
					break;
				}
				State = 13527; Match(RR_BRACKET);
				}
				break;

			case 185:
				_localctx = new IS_MEMBERContext(_localctx);
				EnterOuterAlt(_localctx, 185);
				{
				State = 13529; Match(IS_MEMBER);
				State = 13530; Match(LR_BRACKET);
				State = 13531; ((IS_MEMBERContext)_localctx).group_or_role = expression(0);
				State = 13532; Match(RR_BRACKET);
				}
				break;

			case 186:
				_localctx = new IS_ROLEMEMBERContext(_localctx);
				EnterOuterAlt(_localctx, 186);
				{
				State = 13534; Match(IS_ROLEMEMBER);
				State = 13535; Match(LR_BRACKET);
				State = 13536; ((IS_ROLEMEMBERContext)_localctx).role = expression(0);
				State = 13539;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1707,_ctx) ) {
				case 1:
					{
					State = 13537; Match(COMMA);
					State = 13538; ((IS_ROLEMEMBERContext)_localctx).database_principal = expression(0);
					}
					break;
				}
				State = 13541; Match(RR_BRACKET);
				}
				break;

			case 187:
				_localctx = new IS_SRVROLEMEMBERContext(_localctx);
				EnterOuterAlt(_localctx, 187);
				{
				State = 13543; Match(IS_SRVROLEMEMBER);
				State = 13544; Match(LR_BRACKET);
				State = 13545; ((IS_SRVROLEMEMBERContext)_localctx).role = expression(0);
				State = 13548;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1708,_ctx) ) {
				case 1:
					{
					State = 13546; Match(COMMA);
					State = 13547; ((IS_SRVROLEMEMBERContext)_localctx).login = expression(0);
					}
					break;
				}
				State = 13550; Match(RR_BRACKET);
				}
				break;

			case 188:
				_localctx = new LOGINPROPERTYContext(_localctx);
				EnterOuterAlt(_localctx, 188);
				{
				State = 13552; Match(LOGINPROPERTY);
				State = 13553; Match(LR_BRACKET);
				State = 13554; ((LOGINPROPERTYContext)_localctx).login_name = expression(0);
				State = 13555; Match(COMMA);
				State = 13556; ((LOGINPROPERTYContext)_localctx).property_name = expression(0);
				State = 13557; Match(RR_BRACKET);
				}
				break;

			case 189:
				_localctx = new ORIGINAL_LOGINContext(_localctx);
				EnterOuterAlt(_localctx, 189);
				{
				State = 13559; Match(ORIGINAL_LOGIN);
				State = 13560; Match(LR_BRACKET);
				State = 13561; Match(RR_BRACKET);
				}
				break;

			case 190:
				_localctx = new PERMISSIONSContext(_localctx);
				EnterOuterAlt(_localctx, 190);
				{
				State = 13562; Match(PERMISSIONS);
				State = 13563; Match(LR_BRACKET);
				State = 13569;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1710,_ctx) ) {
				case 1:
					{
					State = 13564; ((PERMISSIONSContext)_localctx).object_id = expression(0);
					State = 13567;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1709,_ctx) ) {
					case 1:
						{
						State = 13565; Match(COMMA);
						State = 13566; ((PERMISSIONSContext)_localctx).column = expression(0);
						}
						break;
					}
					}
					break;
				}
				State = 13571; Match(RR_BRACKET);
				}
				break;

			case 191:
				_localctx = new PWDENCRYPTContext(_localctx);
				EnterOuterAlt(_localctx, 191);
				{
				State = 13572; Match(PWDENCRYPT);
				State = 13573; Match(LR_BRACKET);
				State = 13574; ((PWDENCRYPTContext)_localctx).password = expression(0);
				State = 13575; Match(RR_BRACKET);
				}
				break;

			case 192:
				_localctx = new PWDCOMPAREContext(_localctx);
				EnterOuterAlt(_localctx, 192);
				{
				State = 13577; Match(PWDCOMPARE);
				State = 13578; Match(LR_BRACKET);
				State = 13579; ((PWDCOMPAREContext)_localctx).clear_text_password = expression(0);
				State = 13580; Match(COMMA);
				State = 13581; ((PWDCOMPAREContext)_localctx).password_hash = expression(0);
				State = 13584;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1711,_ctx) ) {
				case 1:
					{
					State = 13582; Match(COMMA);
					State = 13583; ((PWDCOMPAREContext)_localctx).version = expression(0);
					}
					break;
				}
				State = 13586; Match(RR_BRACKET);
				}
				break;

			case 193:
				_localctx = new SESSION_USERContext(_localctx);
				EnterOuterAlt(_localctx, 193);
				{
				State = 13588; Match(SESSION_USER);
				}
				break;

			case 194:
				_localctx = new SESSIONPROPERTYContext(_localctx);
				EnterOuterAlt(_localctx, 194);
				{
				State = 13589; Match(SESSIONPROPERTY);
				State = 13590; Match(LR_BRACKET);
				State = 13591; ((SESSIONPROPERTYContext)_localctx).option_name = expression(0);
				State = 13592; Match(RR_BRACKET);
				}
				break;

			case 195:
				_localctx = new SUSER_IDContext(_localctx);
				EnterOuterAlt(_localctx, 195);
				{
				State = 13594; Match(SUSER_ID);
				State = 13595; Match(LR_BRACKET);
				State = 13597;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1712,_ctx) ) {
				case 1:
					{
					State = 13596; ((SUSER_IDContext)_localctx).login = expression(0);
					}
					break;
				}
				State = 13599; Match(RR_BRACKET);
				}
				break;

			case 196:
				_localctx = new SUSER_SNAMEContext(_localctx);
				EnterOuterAlt(_localctx, 196);
				{
				State = 13600; Match(SUSER_NAME);
				State = 13601; Match(LR_BRACKET);
				State = 13603;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1713,_ctx) ) {
				case 1:
					{
					State = 13602; ((SUSER_SNAMEContext)_localctx).server_user_sid = expression(0);
					}
					break;
				}
				State = 13605; Match(RR_BRACKET);
				}
				break;

			case 197:
				_localctx = new SUSER_SIDContext(_localctx);
				EnterOuterAlt(_localctx, 197);
				{
				State = 13606; Match(SUSER_SID);
				State = 13607; Match(LR_BRACKET);
				State = 13613;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1715,_ctx) ) {
				case 1:
					{
					State = 13608; ((SUSER_SIDContext)_localctx).login = expression(0);
					State = 13611;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1714,_ctx) ) {
					case 1:
						{
						State = 13609; Match(COMMA);
						State = 13610; ((SUSER_SIDContext)_localctx).param2 = expression(0);
						}
						break;
					}
					}
					break;
				}
				State = 13615; Match(RR_BRACKET);
				}
				break;

			case 198:
				_localctx = new SUSER_SNAMEContext(_localctx);
				EnterOuterAlt(_localctx, 198);
				{
				State = 13616; Match(SUSER_SNAME);
				State = 13617; Match(LR_BRACKET);
				State = 13619;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1716,_ctx) ) {
				case 1:
					{
					State = 13618; ((SUSER_SNAMEContext)_localctx).server_user_sid = expression(0);
					}
					break;
				}
				State = 13621; Match(RR_BRACKET);
				}
				break;

			case 199:
				_localctx = new SYSTEM_USERContext(_localctx);
				EnterOuterAlt(_localctx, 199);
				{
				State = 13622; Match(SYSTEM_USER);
				}
				break;

			case 200:
				_localctx = new USERContext(_localctx);
				EnterOuterAlt(_localctx, 200);
				{
				State = 13623; Match(USER);
				}
				break;

			case 201:
				_localctx = new USER_IDContext(_localctx);
				EnterOuterAlt(_localctx, 201);
				{
				State = 13624; Match(USER_ID);
				State = 13625; Match(LR_BRACKET);
				State = 13627;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1717,_ctx) ) {
				case 1:
					{
					State = 13626; ((USER_IDContext)_localctx).user = expression(0);
					}
					break;
				}
				State = 13629; Match(RR_BRACKET);
				}
				break;

			case 202:
				_localctx = new USER_NAMEContext(_localctx);
				EnterOuterAlt(_localctx, 202);
				{
				State = 13630; Match(USER_NAME);
				State = 13631; Match(LR_BRACKET);
				State = 13633;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1718,_ctx) ) {
				case 1:
					{
					State = 13632; ((USER_NAMEContext)_localctx).id = expression(0);
					}
					break;
				}
				State = 13635; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_data_type_methodsContext : ParserRuleContext {
		public Value_methodContext value_method() {
			return GetRuleContext<Value_methodContext>(0);
		}
		public Query_methodContext query_method() {
			return GetRuleContext<Query_methodContext>(0);
		}
		public Exist_methodContext exist_method() {
			return GetRuleContext<Exist_methodContext>(0);
		}
		public Modify_methodContext modify_method() {
			return GetRuleContext<Modify_methodContext>(0);
		}
		public Xml_data_type_methodsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_data_type_methods; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_data_type_methods(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_data_type_methods(this);
		}
	}

	[RuleVersion(0)]
	public Xml_data_type_methodsContext xml_data_type_methods() {
		Xml_data_type_methodsContext _localctx = new Xml_data_type_methodsContext(_ctx, State);
		EnterRule(_localctx, 1058, RULE_xml_data_type_methods);
		try {
			State = 13642;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1720,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13638; value_method();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13639; query_method();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 13640; exist_method();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 13641; modify_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dateparts_9Context : ParserRuleContext {
		public ITerminalNode YEAR() { return GetToken(TSqlParser.YEAR, 0); }
		public ITerminalNode YEAR_ABBR() { return GetToken(TSqlParser.YEAR_ABBR, 0); }
		public ITerminalNode QUARTER() { return GetToken(TSqlParser.QUARTER, 0); }
		public ITerminalNode QUARTER_ABBR() { return GetToken(TSqlParser.QUARTER_ABBR, 0); }
		public ITerminalNode MONTH() { return GetToken(TSqlParser.MONTH, 0); }
		public ITerminalNode MONTH_ABBR() { return GetToken(TSqlParser.MONTH_ABBR, 0); }
		public ITerminalNode DAY() { return GetToken(TSqlParser.DAY, 0); }
		public ITerminalNode DAY_ABBR() { return GetToken(TSqlParser.DAY_ABBR, 0); }
		public ITerminalNode WEEK() { return GetToken(TSqlParser.WEEK, 0); }
		public ITerminalNode WEEK_ABBR() { return GetToken(TSqlParser.WEEK_ABBR, 0); }
		public ITerminalNode HOUR() { return GetToken(TSqlParser.HOUR, 0); }
		public ITerminalNode HOUR_ABBR() { return GetToken(TSqlParser.HOUR_ABBR, 0); }
		public ITerminalNode MINUTE() { return GetToken(TSqlParser.MINUTE, 0); }
		public ITerminalNode MINUTE_ABBR() { return GetToken(TSqlParser.MINUTE_ABBR, 0); }
		public ITerminalNode SECOND() { return GetToken(TSqlParser.SECOND, 0); }
		public ITerminalNode SECOND_ABBR() { return GetToken(TSqlParser.SECOND_ABBR, 0); }
		public ITerminalNode MILLISECOND() { return GetToken(TSqlParser.MILLISECOND, 0); }
		public ITerminalNode MILLISECOND_ABBR() { return GetToken(TSqlParser.MILLISECOND_ABBR, 0); }
		public Dateparts_9Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateparts_9; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDateparts_9(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDateparts_9(this);
		}
	}

	[RuleVersion(0)]
	public Dateparts_9Context dateparts_9() {
		Dateparts_9Context _localctx = new Dateparts_9Context(_ctx, State);
		EnterRule(_localctx, 1060, RULE_dateparts_9);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13644;
			_la = _input.La(1);
			if ( !(((((_la - 1128)) & ~0x3f) == 0 && ((1L << (_la - 1128)) & ((1L << (DAY - 1128)) | (1L << (MONTH - 1128)) | (1L << (YEAR - 1128)) | (1L << (QUARTER - 1128)) | (1L << (WEEK - 1128)) | (1L << (HOUR - 1128)) | (1L << (MINUTE - 1128)) | (1L << (SECOND - 1128)) | (1L << (MILLISECOND - 1128)) | (1L << (YEAR_ABBR - 1128)) | (1L << (QUARTER_ABBR - 1128)) | (1L << (MONTH_ABBR - 1128)) | (1L << (DAY_ABBR - 1128)) | (1L << (WEEK_ABBR - 1128)) | (1L << (HOUR_ABBR - 1128)) | (1L << (MINUTE_ABBR - 1128)) | (1L << (SECOND_ABBR - 1128)) | (1L << (MILLISECOND_ABBR - 1128)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dateparts_12Context : ParserRuleContext {
		public Dateparts_9Context dateparts_9() {
			return GetRuleContext<Dateparts_9Context>(0);
		}
		public ITerminalNode DAYOFYEAR() { return GetToken(TSqlParser.DAYOFYEAR, 0); }
		public ITerminalNode DAYOFYEAR_ABBR() { return GetToken(TSqlParser.DAYOFYEAR_ABBR, 0); }
		public ITerminalNode MICROSECOND() { return GetToken(TSqlParser.MICROSECOND, 0); }
		public ITerminalNode MICROSECOND_ABBR() { return GetToken(TSqlParser.MICROSECOND_ABBR, 0); }
		public ITerminalNode NANOSECOND() { return GetToken(TSqlParser.NANOSECOND, 0); }
		public ITerminalNode NANOSECOND_ABBR() { return GetToken(TSqlParser.NANOSECOND_ABBR, 0); }
		public Dateparts_12Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateparts_12; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDateparts_12(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDateparts_12(this);
		}
	}

	[RuleVersion(0)]
	public Dateparts_12Context dateparts_12() {
		Dateparts_12Context _localctx = new Dateparts_12Context(_ctx, State);
		EnterRule(_localctx, 1062, RULE_dateparts_12);
		try {
			State = 13653;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1721,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13646; dateparts_9();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13647; Match(DAYOFYEAR);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 13648; Match(DAYOFYEAR_ABBR);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 13649; Match(MICROSECOND);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 13650; Match(MICROSECOND_ABBR);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 13651; Match(NANOSECOND);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 13652; Match(NANOSECOND_ABBR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dateparts_15Context : ParserRuleContext {
		public Dateparts_12Context dateparts_12() {
			return GetRuleContext<Dateparts_12Context>(0);
		}
		public ITerminalNode WEEKDAY() { return GetToken(TSqlParser.WEEKDAY, 0); }
		public ITerminalNode WEEKDAY_ABBR() { return GetToken(TSqlParser.WEEKDAY_ABBR, 0); }
		public ITerminalNode TZOFFSET() { return GetToken(TSqlParser.TZOFFSET, 0); }
		public ITerminalNode TZOFFSET_ABBR() { return GetToken(TSqlParser.TZOFFSET_ABBR, 0); }
		public ITerminalNode ISO_WEEK() { return GetToken(TSqlParser.ISO_WEEK, 0); }
		public ITerminalNode ISO_WEEK_ABBR() { return GetToken(TSqlParser.ISO_WEEK_ABBR, 0); }
		public Dateparts_15Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateparts_15; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDateparts_15(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDateparts_15(this);
		}
	}

	[RuleVersion(0)]
	public Dateparts_15Context dateparts_15() {
		Dateparts_15Context _localctx = new Dateparts_15Context(_ctx, State);
		EnterRule(_localctx, 1064, RULE_dateparts_15);
		try {
			State = 13662;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1722,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13655; dateparts_12();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13656; Match(WEEKDAY);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 13657; Match(WEEKDAY_ABBR);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 13658; Match(TZOFFSET);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 13659; Match(TZOFFSET_ABBR);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 13660; Match(ISO_WEEK);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 13661; Match(ISO_WEEK_ABBR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dateparts_datetruncContext : ParserRuleContext {
		public Dateparts_9Context dateparts_9() {
			return GetRuleContext<Dateparts_9Context>(0);
		}
		public ITerminalNode DAYOFYEAR() { return GetToken(TSqlParser.DAYOFYEAR, 0); }
		public ITerminalNode DAYOFYEAR_ABBR() { return GetToken(TSqlParser.DAYOFYEAR_ABBR, 0); }
		public ITerminalNode MICROSECOND() { return GetToken(TSqlParser.MICROSECOND, 0); }
		public ITerminalNode MICROSECOND_ABBR() { return GetToken(TSqlParser.MICROSECOND_ABBR, 0); }
		public ITerminalNode ISO_WEEK() { return GetToken(TSqlParser.ISO_WEEK, 0); }
		public ITerminalNode ISO_WEEK_ABBR() { return GetToken(TSqlParser.ISO_WEEK_ABBR, 0); }
		public Dateparts_datetruncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateparts_datetrunc; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDateparts_datetrunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDateparts_datetrunc(this);
		}
	}

	[RuleVersion(0)]
	public Dateparts_datetruncContext dateparts_datetrunc() {
		Dateparts_datetruncContext _localctx = new Dateparts_datetruncContext(_ctx, State);
		EnterRule(_localctx, 1066, RULE_dateparts_datetrunc);
		try {
			State = 13671;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1723,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13664; dateparts_9();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13665; Match(DAYOFYEAR);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 13666; Match(DAYOFYEAR_ABBR);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 13667; Match(MICROSECOND);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 13668; Match(MICROSECOND_ABBR);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 13669; Match(ISO_WEEK);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 13670; Match(ISO_WEEK_ABBR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_methodContext : ParserRuleContext {
		public IToken loc_id;
		public Full_column_nameContext value_id;
		public IToken eventdata;
		public Query_methodContext query;
		public Value_callContext call;
		public Value_callContext value_call() {
			return GetRuleContext<Value_callContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public ITerminalNode EVENTDATA() { return GetToken(TSqlParser.EVENTDATA, 0); }
		public Query_methodContext query_method() {
			return GetRuleContext<Query_methodContext>(0);
		}
		public Value_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterValue_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitValue_method(this);
		}
	}

	[RuleVersion(0)]
	public Value_methodContext value_method() {
		Value_methodContext _localctx = new Value_methodContext(_ctx, State);
		EnterRule(_localctx, 1068, RULE_value_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13683;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1724,_ctx) ) {
			case 1:
				{
				State = 13673; _localctx.loc_id = Match(LOCAL_ID);
				}
				break;

			case 2:
				{
				State = 13674; _localctx.value_id = full_column_name();
				}
				break;

			case 3:
				{
				State = 13675; _localctx.eventdata = Match(EVENTDATA);
				State = 13676; Match(LR_BRACKET);
				State = 13677; Match(RR_BRACKET);
				}
				break;

			case 4:
				{
				State = 13678; _localctx.query = query_method();
				}
				break;

			case 5:
				{
				State = 13679; Match(LR_BRACKET);
				State = 13680; subquery();
				State = 13681; Match(RR_BRACKET);
				}
				break;
			}
			State = 13685; Match(DOT);
			State = 13686; _localctx.call = value_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_callContext : ParserRuleContext {
		public IToken xquery;
		public IToken sqltype;
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ITerminalNode VALUE_SQUARE_BRACKET() { return GetToken(TSqlParser.VALUE_SQUARE_BRACKET, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Value_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterValue_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitValue_call(this);
		}
	}

	[RuleVersion(0)]
	public Value_callContext value_call() {
		Value_callContext _localctx = new Value_callContext(_ctx, State);
		EnterRule(_localctx, 1070, RULE_value_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13688;
			_la = _input.La(1);
			if ( !(_la==VALUE || _la==VALUE_SQUARE_BRACKET) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 13689; Match(LR_BRACKET);
			State = 13690; _localctx.xquery = Match(STRING);
			State = 13691; Match(COMMA);
			State = 13692; _localctx.sqltype = Match(STRING);
			State = 13693; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_methodContext : ParserRuleContext {
		public IToken loc_id;
		public Full_column_nameContext value_id;
		public Query_callContext call;
		public Query_callContext query_call() {
			return GetRuleContext<Query_callContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public Query_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_method(this);
		}
	}

	[RuleVersion(0)]
	public Query_methodContext query_method() {
		Query_methodContext _localctx = new Query_methodContext(_ctx, State);
		EnterRule(_localctx, 1072, RULE_query_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13701;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1725,_ctx) ) {
			case 1:
				{
				State = 13695; _localctx.loc_id = Match(LOCAL_ID);
				}
				break;

			case 2:
				{
				State = 13696; _localctx.value_id = full_column_name();
				}
				break;

			case 3:
				{
				State = 13697; Match(LR_BRACKET);
				State = 13698; subquery();
				State = 13699; Match(RR_BRACKET);
				}
				break;
			}
			State = 13703; Match(DOT);
			State = 13704; _localctx.call = query_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_callContext : ParserRuleContext {
		public IToken xquery;
		public ITerminalNode QUERY() { return GetToken(TSqlParser.QUERY, 0); }
		public ITerminalNode QUERY_SQUARE_BRACKET() { return GetToken(TSqlParser.QUERY_SQUARE_BRACKET, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Query_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_call(this);
		}
	}

	[RuleVersion(0)]
	public Query_callContext query_call() {
		Query_callContext _localctx = new Query_callContext(_ctx, State);
		EnterRule(_localctx, 1074, RULE_query_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13706;
			_la = _input.La(1);
			if ( !(_la==QUERY || _la==QUERY_SQUARE_BRACKET) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 13707; Match(LR_BRACKET);
			State = 13708; _localctx.xquery = Match(STRING);
			State = 13709; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exist_methodContext : ParserRuleContext {
		public IToken loc_id;
		public Full_column_nameContext value_id;
		public Exist_callContext call;
		public Exist_callContext exist_call() {
			return GetRuleContext<Exist_callContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public Exist_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exist_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExist_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExist_method(this);
		}
	}

	[RuleVersion(0)]
	public Exist_methodContext exist_method() {
		Exist_methodContext _localctx = new Exist_methodContext(_ctx, State);
		EnterRule(_localctx, 1076, RULE_exist_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13717;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1726,_ctx) ) {
			case 1:
				{
				State = 13711; _localctx.loc_id = Match(LOCAL_ID);
				}
				break;

			case 2:
				{
				State = 13712; _localctx.value_id = full_column_name();
				}
				break;

			case 3:
				{
				State = 13713; Match(LR_BRACKET);
				State = 13714; subquery();
				State = 13715; Match(RR_BRACKET);
				}
				break;
			}
			State = 13719; Match(DOT);
			State = 13720; _localctx.call = exist_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exist_callContext : ParserRuleContext {
		public IToken xquery;
		public ITerminalNode EXIST() { return GetToken(TSqlParser.EXIST, 0); }
		public ITerminalNode EXIST_SQUARE_BRACKET() { return GetToken(TSqlParser.EXIST_SQUARE_BRACKET, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Exist_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exist_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExist_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExist_call(this);
		}
	}

	[RuleVersion(0)]
	public Exist_callContext exist_call() {
		Exist_callContext _localctx = new Exist_callContext(_ctx, State);
		EnterRule(_localctx, 1078, RULE_exist_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13722;
			_la = _input.La(1);
			if ( !(_la==EXIST || _la==EXIST_SQUARE_BRACKET) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 13723; Match(LR_BRACKET);
			State = 13724; _localctx.xquery = Match(STRING);
			State = 13725; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Modify_methodContext : ParserRuleContext {
		public IToken loc_id;
		public Full_column_nameContext value_id;
		public Modify_callContext call;
		public Modify_callContext modify_call() {
			return GetRuleContext<Modify_callContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public Modify_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modify_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterModify_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitModify_method(this);
		}
	}

	[RuleVersion(0)]
	public Modify_methodContext modify_method() {
		Modify_methodContext _localctx = new Modify_methodContext(_ctx, State);
		EnterRule(_localctx, 1080, RULE_modify_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13733;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1727,_ctx) ) {
			case 1:
				{
				State = 13727; _localctx.loc_id = Match(LOCAL_ID);
				}
				break;

			case 2:
				{
				State = 13728; _localctx.value_id = full_column_name();
				}
				break;

			case 3:
				{
				State = 13729; Match(LR_BRACKET);
				State = 13730; subquery();
				State = 13731; Match(RR_BRACKET);
				}
				break;
			}
			State = 13735; Match(DOT);
			State = 13736; _localctx.call = modify_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Modify_callContext : ParserRuleContext {
		public IToken xml_dml;
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode MODIFY_SQUARE_BRACKET() { return GetToken(TSqlParser.MODIFY_SQUARE_BRACKET, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Modify_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modify_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterModify_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitModify_call(this);
		}
	}

	[RuleVersion(0)]
	public Modify_callContext modify_call() {
		Modify_callContext _localctx = new Modify_callContext(_ctx, State);
		EnterRule(_localctx, 1082, RULE_modify_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13738;
			_la = _input.La(1);
			if ( !(_la==MODIFY || _la==MODIFY_SQUARE_BRACKET) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 13739; Match(LR_BRACKET);
			State = 13740; _localctx.xml_dml = Match(STRING);
			State = 13741; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hierarchyid_callContext : ParserRuleContext {
		public ExpressionContext n;
		public ExpressionContext child1;
		public ExpressionContext child2;
		public ExpressionContext parent_;
		public ExpressionContext oldroot;
		public ExpressionContext newroot;
		public ITerminalNode GETANCESTOR() { return GetToken(TSqlParser.GETANCESTOR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode GETDESCENDANT() { return GetToken(TSqlParser.GETDESCENDANT, 0); }
		public ITerminalNode GETLEVEL() { return GetToken(TSqlParser.GETLEVEL, 0); }
		public ITerminalNode ISDESCENDANTOF() { return GetToken(TSqlParser.ISDESCENDANTOF, 0); }
		public ITerminalNode GETREPARENTEDVALUE() { return GetToken(TSqlParser.GETREPARENTEDVALUE, 0); }
		public ITerminalNode TOSTRING() { return GetToken(TSqlParser.TOSTRING, 0); }
		public Hierarchyid_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hierarchyid_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterHierarchyid_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitHierarchyid_call(this);
		}
	}

	[RuleVersion(0)]
	public Hierarchyid_callContext hierarchyid_call() {
		Hierarchyid_callContext _localctx = new Hierarchyid_callContext(_ctx, State);
		EnterRule(_localctx, 1084, RULE_hierarchyid_call);
		try {
			State = 13773;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1728,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13743; Match(GETANCESTOR);
				State = 13744; Match(LR_BRACKET);
				State = 13745; _localctx.n = expression(0);
				State = 13746; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13748; Match(GETDESCENDANT);
				State = 13749; Match(LR_BRACKET);
				State = 13750; _localctx.child1 = expression(0);
				State = 13751; Match(COMMA);
				State = 13752; _localctx.child2 = expression(0);
				State = 13753; Match(RR_BRACKET);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 13755; Match(GETLEVEL);
				State = 13756; Match(LR_BRACKET);
				State = 13757; Match(RR_BRACKET);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 13758; Match(ISDESCENDANTOF);
				State = 13759; Match(LR_BRACKET);
				State = 13760; _localctx.parent_ = expression(0);
				State = 13761; Match(RR_BRACKET);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 13763; Match(GETREPARENTEDVALUE);
				State = 13764; Match(LR_BRACKET);
				State = 13765; _localctx.oldroot = expression(0);
				State = 13766; Match(COMMA);
				State = 13767; _localctx.newroot = expression(0);
				State = 13768; Match(RR_BRACKET);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 13770; Match(TOSTRING);
				State = 13771; Match(LR_BRACKET);
				State = 13772; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hierarchyid_static_methodContext : ParserRuleContext {
		public ExpressionContext input;
		public ITerminalNode HIERARCHYID() { return GetToken(TSqlParser.HIERARCHYID, 0); }
		public ITerminalNode DOUBLE_COLON() { return GetToken(TSqlParser.DOUBLE_COLON, 0); }
		public ITerminalNode GETROOT() { return GetToken(TSqlParser.GETROOT, 0); }
		public ITerminalNode PARSE() { return GetToken(TSqlParser.PARSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Hierarchyid_static_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hierarchyid_static_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterHierarchyid_static_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitHierarchyid_static_method(this);
		}
	}

	[RuleVersion(0)]
	public Hierarchyid_static_methodContext hierarchyid_static_method() {
		Hierarchyid_static_methodContext _localctx = new Hierarchyid_static_methodContext(_ctx, State);
		EnterRule(_localctx, 1086, RULE_hierarchyid_static_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13775; Match(HIERARCHYID);
			State = 13776; Match(DOUBLE_COLON);
			State = 13785;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1729,_ctx) ) {
			case 1:
				{
				State = 13777; Match(GETROOT);
				State = 13778; Match(LR_BRACKET);
				State = 13779; Match(RR_BRACKET);
				}
				break;

			case 2:
				{
				State = 13780; Match(PARSE);
				State = 13781; Match(LR_BRACKET);
				State = 13782; _localctx.input = expression(0);
				State = 13783; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nodes_methodContext : ParserRuleContext {
		public IToken loc_id;
		public Full_column_nameContext value_id;
		public IToken xquery;
		public ITerminalNode NODES() { return GetToken(TSqlParser.NODES, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public Nodes_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodes_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNodes_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNodes_method(this);
		}
	}

	[RuleVersion(0)]
	public Nodes_methodContext nodes_method() {
		Nodes_methodContext _localctx = new Nodes_methodContext(_ctx, State);
		EnterRule(_localctx, 1088, RULE_nodes_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13793;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1730,_ctx) ) {
			case 1:
				{
				State = 13787; _localctx.loc_id = Match(LOCAL_ID);
				}
				break;

			case 2:
				{
				State = 13788; _localctx.value_id = full_column_name();
				}
				break;

			case 3:
				{
				State = 13789; Match(LR_BRACKET);
				State = 13790; subquery();
				State = 13791; Match(RR_BRACKET);
				}
				break;
			}
			State = 13795; Match(DOT);
			State = 13796; Match(NODES);
			State = 13797; Match(LR_BRACKET);
			State = 13798; _localctx.xquery = Match(STRING);
			State = 13799; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_sectionContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(TSqlParser.WHEN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(TSqlParser.THEN, 0); }
		public Switch_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSwitch_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSwitch_section(this);
		}
	}

	[RuleVersion(0)]
	public Switch_sectionContext switch_section() {
		Switch_sectionContext _localctx = new Switch_sectionContext(_ctx, State);
		EnterRule(_localctx, 1090, RULE_switch_section);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13801; Match(WHEN);
			State = 13802; expression(0);
			State = 13803; Match(THEN);
			State = 13804; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_search_condition_sectionContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(TSqlParser.WHEN, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(TSqlParser.THEN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Switch_search_condition_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_search_condition_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSwitch_search_condition_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSwitch_search_condition_section(this);
		}
	}

	[RuleVersion(0)]
	public Switch_search_condition_sectionContext switch_search_condition_section() {
		Switch_search_condition_sectionContext _localctx = new Switch_search_condition_sectionContext(_ctx, State);
		EnterRule(_localctx, 1092, RULE_switch_search_condition_section);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13806; Match(WHEN);
			State = 13807; search_condition(0);
			State = 13808; Match(THEN);
			State = 13809; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_column_aliasContext : ParserRuleContext {
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public As_column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_column_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAs_column_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAs_column_alias(this);
		}
	}

	[RuleVersion(0)]
	public As_column_aliasContext as_column_alias() {
		As_column_aliasContext _localctx = new As_column_aliasContext(_ctx, State);
		EnterRule(_localctx, 1094, RULE_as_column_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13812;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1731,_ctx) ) {
			case 1:
				{
				State = 13811; Match(AS);
				}
				break;
			}
			State = 13814; column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_table_aliasContext : ParserRuleContext {
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public As_table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_table_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAs_table_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAs_table_alias(this);
		}
	}

	[RuleVersion(0)]
	public As_table_aliasContext as_table_alias() {
		As_table_aliasContext _localctx = new As_table_aliasContext(_ctx, State);
		EnterRule(_localctx, 1096, RULE_as_table_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13817;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1732,_ctx) ) {
			case 1:
				{
				State = 13816; Match(AS);
				}
				break;
			}
			State = 13819; table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_alias(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, State);
		EnterRule(_localctx, 1098, RULE_table_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13821; id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_table_hintsContext : ParserRuleContext {
		public Table_hintContext _table_hint;
		public IList<Table_hintContext> _hint = new List<Table_hintContext>();
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Table_hintContext[] table_hint() {
			return GetRuleContexts<Table_hintContext>();
		}
		public Table_hintContext table_hint(int i) {
			return GetRuleContext<Table_hintContext>(i);
		}
		public With_table_hintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_table_hints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWith_table_hints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWith_table_hints(this);
		}
	}

	[RuleVersion(0)]
	public With_table_hintsContext with_table_hints() {
		With_table_hintsContext _localctx = new With_table_hintsContext(_ctx, State);
		EnterRule(_localctx, 1100, RULE_with_table_hints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 13823; Match(WITH);
			State = 13824; Match(LR_BRACKET);
			State = 13825; _localctx._table_hint = table_hint();
			_localctx._hint.Add(_localctx._table_hint);
			State = 13832;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1734,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 13827;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1733,_ctx) ) {
					case 1:
						{
						State = 13826; Match(COMMA);
						}
						break;
					}
					State = 13829; _localctx._table_hint = table_hint();
					_localctx._hint.Add(_localctx._table_hint);
					}
					} 
				}
				State = 13834;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1734,_ctx);
			}
			State = 13835; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Deprecated_table_hintContext : ParserRuleContext {
		public Table_hintContext table_hint() {
			return GetRuleContext<Table_hintContext>(0);
		}
		public Deprecated_table_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deprecated_table_hint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeprecated_table_hint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeprecated_table_hint(this);
		}
	}

	[RuleVersion(0)]
	public Deprecated_table_hintContext deprecated_table_hint() {
		Deprecated_table_hintContext _localctx = new Deprecated_table_hintContext(_ctx, State);
		EnterRule(_localctx, 1102, RULE_deprecated_table_hint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13837; Match(LR_BRACKET);
			State = 13838; table_hint();
			State = 13839; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sybase_legacy_hintsContext : ParserRuleContext {
		public Sybase_legacy_hintContext[] sybase_legacy_hint() {
			return GetRuleContexts<Sybase_legacy_hintContext>();
		}
		public Sybase_legacy_hintContext sybase_legacy_hint(int i) {
			return GetRuleContext<Sybase_legacy_hintContext>(i);
		}
		public Sybase_legacy_hintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sybase_legacy_hints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSybase_legacy_hints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSybase_legacy_hints(this);
		}
	}

	[RuleVersion(0)]
	public Sybase_legacy_hintsContext sybase_legacy_hints() {
		Sybase_legacy_hintsContext _localctx = new Sybase_legacy_hintsContext(_ctx, State);
		EnterRule(_localctx, 1104, RULE_sybase_legacy_hints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 13842;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 13841; sybase_legacy_hint();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 13844;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1735,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sybase_legacy_hintContext : ParserRuleContext {
		public ITerminalNode HOLDLOCK() { return GetToken(TSqlParser.HOLDLOCK, 0); }
		public ITerminalNode NOHOLDLOCK() { return GetToken(TSqlParser.NOHOLDLOCK, 0); }
		public ITerminalNode READPAST() { return GetToken(TSqlParser.READPAST, 0); }
		public ITerminalNode SHARED() { return GetToken(TSqlParser.SHARED, 0); }
		public Sybase_legacy_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sybase_legacy_hint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSybase_legacy_hint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSybase_legacy_hint(this);
		}
	}

	[RuleVersion(0)]
	public Sybase_legacy_hintContext sybase_legacy_hint() {
		Sybase_legacy_hintContext _localctx = new Sybase_legacy_hintContext(_ctx, State);
		EnterRule(_localctx, 1106, RULE_sybase_legacy_hint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13846;
			_la = _input.La(1);
			if ( !(_la==HOLDLOCK || _la==NOHOLDLOCK || _la==READPAST || _la==SHARED) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_hintContext : ParserRuleContext {
		public ITerminalNode NOEXPAND() { return GetToken(TSqlParser.NOEXPAND, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Index_valueContext[] index_value() {
			return GetRuleContexts<Index_valueContext>();
		}
		public Index_valueContext index_value(int i) {
			return GetRuleContext<Index_valueContext>(i);
		}
		public ITerminalNode FORCESEEK() { return GetToken(TSqlParser.FORCESEEK, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode FORCESCAN() { return GetToken(TSqlParser.FORCESCAN, 0); }
		public ITerminalNode HOLDLOCK() { return GetToken(TSqlParser.HOLDLOCK, 0); }
		public ITerminalNode NOLOCK() { return GetToken(TSqlParser.NOLOCK, 0); }
		public ITerminalNode NOWAIT() { return GetToken(TSqlParser.NOWAIT, 0); }
		public ITerminalNode PAGLOCK() { return GetToken(TSqlParser.PAGLOCK, 0); }
		public ITerminalNode READCOMMITTED() { return GetToken(TSqlParser.READCOMMITTED, 0); }
		public ITerminalNode READCOMMITTEDLOCK() { return GetToken(TSqlParser.READCOMMITTEDLOCK, 0); }
		public ITerminalNode READPAST() { return GetToken(TSqlParser.READPAST, 0); }
		public ITerminalNode READUNCOMMITTED() { return GetToken(TSqlParser.READUNCOMMITTED, 0); }
		public ITerminalNode REPEATABLEREAD() { return GetToken(TSqlParser.REPEATABLEREAD, 0); }
		public ITerminalNode ROWLOCK() { return GetToken(TSqlParser.ROWLOCK, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(TSqlParser.SERIALIZABLE, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(TSqlParser.SNAPSHOT, 0); }
		public ITerminalNode SPATIAL_WINDOW_MAX_CELLS() { return GetToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode TABLOCK() { return GetToken(TSqlParser.TABLOCK, 0); }
		public ITerminalNode TABLOCKX() { return GetToken(TSqlParser.TABLOCKX, 0); }
		public ITerminalNode UPDLOCK() { return GetToken(TSqlParser.UPDLOCK, 0); }
		public ITerminalNode XLOCK() { return GetToken(TSqlParser.XLOCK, 0); }
		public ITerminalNode KEEPIDENTITY() { return GetToken(TSqlParser.KEEPIDENTITY, 0); }
		public ITerminalNode KEEPDEFAULTS() { return GetToken(TSqlParser.KEEPDEFAULTS, 0); }
		public ITerminalNode IGNORE_CONSTRAINTS() { return GetToken(TSqlParser.IGNORE_CONSTRAINTS, 0); }
		public ITerminalNode IGNORE_TRIGGERS() { return GetToken(TSqlParser.IGNORE_TRIGGERS, 0); }
		public Table_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_hint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_hint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_hint(this);
		}
	}

	[RuleVersion(0)]
	public Table_hintContext table_hint() {
		Table_hintContext _localctx = new Table_hintContext(_ctx, State);
		EnterRule(_localctx, 1108, RULE_table_hint);
		try {
			int _alt;
			State = 13904;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1739,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13848; Match(NOEXPAND);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13849; Match(INDEX);
				State = 13868;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1737,_ctx) ) {
				case 1:
					{
					State = 13850; Match(LR_BRACKET);
					State = 13851; index_value();
					State = 13856;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1736,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 13852; Match(COMMA);
							State = 13853; index_value();
							}
							} 
						}
						State = 13858;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1736,_ctx);
					}
					State = 13859; Match(RR_BRACKET);
					}
					break;

				case 2:
					{
					State = 13861; Match(EQUAL);
					State = 13862; Match(LR_BRACKET);
					State = 13863; index_value();
					State = 13864; Match(RR_BRACKET);
					}
					break;

				case 3:
					{
					State = 13866; Match(EQUAL);
					State = 13867; index_value();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 13870; Match(FORCESEEK);
				State = 13878;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1738,_ctx) ) {
				case 1:
					{
					State = 13871; Match(LR_BRACKET);
					State = 13872; index_value();
					State = 13873; Match(LR_BRACKET);
					State = 13874; column_name_list();
					State = 13875; Match(RR_BRACKET);
					State = 13876; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 13880; Match(FORCESCAN);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 13881; Match(HOLDLOCK);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 13882; Match(NOLOCK);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 13883; Match(NOWAIT);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 13884; Match(PAGLOCK);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 13885; Match(READCOMMITTED);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 13886; Match(READCOMMITTEDLOCK);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 13887; Match(READPAST);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 13888; Match(READUNCOMMITTED);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 13889; Match(REPEATABLEREAD);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 13890; Match(ROWLOCK);
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 13891; Match(SERIALIZABLE);
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 13892; Match(SNAPSHOT);
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 13893; Match(SPATIAL_WINDOW_MAX_CELLS);
				State = 13894; Match(EQUAL);
				State = 13895; Match(DECIMAL);
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 13896; Match(TABLOCK);
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 13897; Match(TABLOCKX);
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 13898; Match(UPDLOCK);
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 13899; Match(XLOCK);
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 13900; Match(KEEPIDENTITY);
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 13901; Match(KEEPDEFAULTS);
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 13902; Match(IGNORE_CONSTRAINTS);
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 13903; Match(IGNORE_TRIGGERS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_valueContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Index_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIndex_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIndex_value(this);
		}
	}

	[RuleVersion(0)]
	public Index_valueContext index_value() {
		Index_valueContext _localctx = new Index_valueContext(_ctx, State);
		EnterRule(_localctx, 1110, RULE_index_value);
		try {
			State = 13908;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1740,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13906; id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13907; Match(DECIMAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_alias_listContext : ParserRuleContext {
		public Column_aliasContext _column_alias;
		public IList<Column_aliasContext> _alias = new List<Column_aliasContext>();
		public Column_aliasContext[] column_alias() {
			return GetRuleContexts<Column_aliasContext>();
		}
		public Column_aliasContext column_alias(int i) {
			return GetRuleContext<Column_aliasContext>(i);
		}
		public Column_alias_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_alias_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_alias_list(this);
		}
	}

	[RuleVersion(0)]
	public Column_alias_listContext column_alias_list() {
		Column_alias_listContext _localctx = new Column_alias_listContext(_ctx, State);
		EnterRule(_localctx, 1112, RULE_column_alias_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 13910; Match(LR_BRACKET);
			State = 13911; _localctx._column_alias = column_alias();
			_localctx._alias.Add(_localctx._column_alias);
			State = 13916;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1741,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 13912; Match(COMMA);
					State = 13913; _localctx._column_alias = column_alias();
					_localctx._alias.Add(_localctx._column_alias);
					}
					} 
				}
				State = 13918;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1741,_ctx);
			}
			State = 13919; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_aliasContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_alias(this);
		}
	}

	[RuleVersion(0)]
	public Column_aliasContext column_alias() {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, State);
		EnterRule(_localctx, 1114, RULE_column_alias);
		try {
			State = 13923;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1742,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13921; id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13922; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_value_constructorContext : ParserRuleContext {
		public Expression_list_Context _expression_list_;
		public IList<Expression_list_Context> _exps = new List<Expression_list_Context>();
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Expression_list_Context[] expression_list_() {
			return GetRuleContexts<Expression_list_Context>();
		}
		public Expression_list_Context expression_list_(int i) {
			return GetRuleContext<Expression_list_Context>(i);
		}
		public Table_value_constructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_value_constructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_value_constructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_value_constructor(this);
		}
	}

	[RuleVersion(0)]
	public Table_value_constructorContext table_value_constructor() {
		Table_value_constructorContext _localctx = new Table_value_constructorContext(_ctx, State);
		EnterRule(_localctx, 1116, RULE_table_value_constructor);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 13925; Match(VALUES);
			State = 13926; Match(LR_BRACKET);
			State = 13927; _localctx._expression_list_ = expression_list_();
			_localctx._exps.Add(_localctx._expression_list_);
			State = 13928; Match(RR_BRACKET);
			State = 13936;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1743,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 13929; Match(COMMA);
					State = 13930; Match(LR_BRACKET);
					State = 13931; _localctx._expression_list_ = expression_list_();
					_localctx._exps.Add(_localctx._expression_list_);
					State = 13932; Match(RR_BRACKET);
					}
					} 
				}
				State = 13938;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1743,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_list_Context : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _exp = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Expression_list_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list_; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExpression_list_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExpression_list_(this);
		}
	}

	[RuleVersion(0)]
	public Expression_list_Context expression_list_() {
		Expression_list_Context _localctx = new Expression_list_Context(_ctx, State);
		EnterRule(_localctx, 1118, RULE_expression_list_);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 13939; _localctx._expression = expression(0);
			_localctx._exp.Add(_localctx._expression);
			State = 13944;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1744,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 13940; Match(COMMA);
					State = 13941; _localctx._expression = expression(0);
					_localctx._exp.Add(_localctx._expression);
					}
					} 
				}
				State = 13946;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1744,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ranking_windowed_functionContext : ParserRuleContext {
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ITerminalNode RANK() { return GetToken(TSqlParser.RANK, 0); }
		public ITerminalNode DENSE_RANK() { return GetToken(TSqlParser.DENSE_RANK, 0); }
		public ITerminalNode ROW_NUMBER() { return GetToken(TSqlParser.ROW_NUMBER, 0); }
		public ITerminalNode NTILE() { return GetToken(TSqlParser.NTILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Ranking_windowed_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ranking_windowed_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRanking_windowed_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRanking_windowed_function(this);
		}
	}

	[RuleVersion(0)]
	public Ranking_windowed_functionContext ranking_windowed_function() {
		Ranking_windowed_functionContext _localctx = new Ranking_windowed_functionContext(_ctx, State);
		EnterRule(_localctx, 1120, RULE_ranking_windowed_function);
		int _la;
		try {
			State = 13957;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1745,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13947;
				_la = _input.La(1);
				if ( !(_la==DENSE_RANK || _la==RANK || _la==ROW_NUMBER) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 13948; Match(LR_BRACKET);
				State = 13949; Match(RR_BRACKET);
				State = 13950; over_clause();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13951; Match(NTILE);
				State = 13952; Match(LR_BRACKET);
				State = 13953; expression(0);
				State = 13954; Match(RR_BRACKET);
				State = 13955; over_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_windowed_functionContext : ParserRuleContext {
		public IToken agg_func;
		public IToken cnt;
		public All_distinct_expressionContext all_distinct_expression() {
			return GetRuleContext<All_distinct_expressionContext>(0);
		}
		public ITerminalNode AVG() { return GetToken(TSqlParser.AVG, 0); }
		public ITerminalNode MAX() { return GetToken(TSqlParser.MAX, 0); }
		public ITerminalNode MIN() { return GetToken(TSqlParser.MIN, 0); }
		public ITerminalNode SUM() { return GetToken(TSqlParser.SUM, 0); }
		public ITerminalNode STDEV() { return GetToken(TSqlParser.STDEV, 0); }
		public ITerminalNode STDEVP() { return GetToken(TSqlParser.STDEVP, 0); }
		public ITerminalNode VAR() { return GetToken(TSqlParser.VAR, 0); }
		public ITerminalNode VARP() { return GetToken(TSqlParser.VARP, 0); }
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ITerminalNode COUNT() { return GetToken(TSqlParser.COUNT, 0); }
		public ITerminalNode COUNT_BIG() { return GetToken(TSqlParser.COUNT_BIG, 0); }
		public ITerminalNode CHECKSUM_AGG() { return GetToken(TSqlParser.CHECKSUM_AGG, 0); }
		public ITerminalNode GROUPING() { return GetToken(TSqlParser.GROUPING, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode GROUPING_ID() { return GetToken(TSqlParser.GROUPING_ID, 0); }
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public Aggregate_windowed_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_windowed_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAggregate_windowed_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAggregate_windowed_function(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_windowed_functionContext aggregate_windowed_function() {
		Aggregate_windowed_functionContext _localctx = new Aggregate_windowed_functionContext(_ctx, State);
		EnterRule(_localctx, 1122, RULE_aggregate_windowed_function);
		int _la;
		try {
			State = 13991;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1749,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13959;
				_localctx.agg_func = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==AVG || _la==MAX || _la==MIN || ((((_la - 954)) & ~0x3f) == 0 && ((1L << (_la - 954)) & ((1L << (STDEV - 954)) | (1L << (STDEVP - 954)) | (1L << (SUM - 954)))) != 0) || _la==VAR || _la==VARP) ) {
					_localctx.agg_func = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 13960; Match(LR_BRACKET);
				State = 13961; all_distinct_expression();
				State = 13962; Match(RR_BRACKET);
				State = 13964;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1746,_ctx) ) {
				case 1:
					{
					State = 13963; over_clause();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13966;
				_localctx.cnt = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==COUNT || _la==COUNT_BIG) ) {
					_localctx.cnt = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 13967; Match(LR_BRACKET);
				State = 13970;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1747,_ctx) ) {
				case 1:
					{
					State = 13968; Match(STAR);
					}
					break;

				case 2:
					{
					State = 13969; all_distinct_expression();
					}
					break;
				}
				State = 13972; Match(RR_BRACKET);
				State = 13974;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1748,_ctx) ) {
				case 1:
					{
					State = 13973; over_clause();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 13976; Match(CHECKSUM_AGG);
				State = 13977; Match(LR_BRACKET);
				State = 13978; all_distinct_expression();
				State = 13979; Match(RR_BRACKET);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 13981; Match(GROUPING);
				State = 13982; Match(LR_BRACKET);
				State = 13983; expression(0);
				State = 13984; Match(RR_BRACKET);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 13986; Match(GROUPING_ID);
				State = 13987; Match(LR_BRACKET);
				State = 13988; expression_list_();
				State = 13989; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Analytic_windowed_functionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ITerminalNode FIRST_VALUE() { return GetToken(TSqlParser.FIRST_VALUE, 0); }
		public ITerminalNode LAST_VALUE() { return GetToken(TSqlParser.LAST_VALUE, 0); }
		public ITerminalNode LAG() { return GetToken(TSqlParser.LAG, 0); }
		public ITerminalNode LEAD() { return GetToken(TSqlParser.LEAD, 0); }
		public ITerminalNode OVER() { return GetToken(TSqlParser.OVER, 0); }
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public ITerminalNode CUME_DIST() { return GetToken(TSqlParser.CUME_DIST, 0); }
		public ITerminalNode PERCENT_RANK() { return GetToken(TSqlParser.PERCENT_RANK, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public ITerminalNode WITHIN() { return GetToken(TSqlParser.WITHIN, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode PERCENTILE_CONT() { return GetToken(TSqlParser.PERCENTILE_CONT, 0); }
		public ITerminalNode PERCENTILE_DISC() { return GetToken(TSqlParser.PERCENTILE_DISC, 0); }
		public Analytic_windowed_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analytic_windowed_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAnalytic_windowed_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAnalytic_windowed_function(this);
		}
	}

	[RuleVersion(0)]
	public Analytic_windowed_functionContext analytic_windowed_function() {
		Analytic_windowed_functionContext _localctx = new Analytic_windowed_functionContext(_ctx, State);
		EnterRule(_localctx, 1124, RULE_analytic_windowed_function);
		int _la;
		try {
			State = 14044;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1754,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13993;
				_la = _input.La(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 13994; Match(LR_BRACKET);
				State = 13995; expression(0);
				State = 13996; Match(RR_BRACKET);
				State = 13997; over_clause();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13999;
				_la = _input.La(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 14000; Match(LR_BRACKET);
				State = 14001; expression(0);
				State = 14008;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1751,_ctx) ) {
				case 1:
					{
					State = 14002; Match(COMMA);
					State = 14003; expression(0);
					State = 14006;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1750,_ctx) ) {
					case 1:
						{
						State = 14004; Match(COMMA);
						State = 14005; expression(0);
						}
						break;
					}
					}
					break;
				}
				State = 14010; Match(RR_BRACKET);
				State = 14011; over_clause();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 14013;
				_la = _input.La(1);
				if ( !(_la==CUME_DIST || _la==PERCENT_RANK) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 14014; Match(LR_BRACKET);
				State = 14015; Match(RR_BRACKET);
				State = 14016; Match(OVER);
				State = 14017; Match(LR_BRACKET);
				State = 14021;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1752,_ctx) ) {
				case 1:
					{
					State = 14018; Match(PARTITION);
					State = 14019; Match(BY);
					State = 14020; expression_list_();
					}
					break;
				}
				State = 14023; order_by_clause();
				State = 14024; Match(RR_BRACKET);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 14026;
				_la = _input.La(1);
				if ( !(_la==PERCENTILE_CONT || _la==PERCENTILE_DISC) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 14027; Match(LR_BRACKET);
				State = 14028; expression(0);
				State = 14029; Match(RR_BRACKET);
				State = 14030; Match(WITHIN);
				State = 14031; Match(GROUP);
				State = 14032; Match(LR_BRACKET);
				State = 14033; order_by_clause();
				State = 14034; Match(RR_BRACKET);
				State = 14035; Match(OVER);
				State = 14036; Match(LR_BRACKET);
				State = 14040;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1753,_ctx) ) {
				case 1:
					{
					State = 14037; Match(PARTITION);
					State = 14038; Match(BY);
					State = 14039; expression_list_();
					}
					break;
				}
				State = 14042; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_distinct_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode DISTINCT() { return GetToken(TSqlParser.DISTINCT, 0); }
		public All_distinct_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_distinct_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAll_distinct_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAll_distinct_expression(this);
		}
	}

	[RuleVersion(0)]
	public All_distinct_expressionContext all_distinct_expression() {
		All_distinct_expressionContext _localctx = new All_distinct_expressionContext(_ctx, State);
		EnterRule(_localctx, 1126, RULE_all_distinct_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14047;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1755,_ctx) ) {
			case 1:
				{
				State = 14046;
				_la = _input.La(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 14049; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Over_clauseContext : ParserRuleContext {
		public ITerminalNode OVER() { return GetToken(TSqlParser.OVER, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Row_or_range_clauseContext row_or_range_clause() {
			return GetRuleContext<Row_or_range_clauseContext>(0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOver_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOver_clause(this);
		}
	}

	[RuleVersion(0)]
	public Over_clauseContext over_clause() {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, State);
		EnterRule(_localctx, 1128, RULE_over_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14051; Match(OVER);
			State = 14052; Match(LR_BRACKET);
			State = 14056;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1756,_ctx) ) {
			case 1:
				{
				State = 14053; Match(PARTITION);
				State = 14054; Match(BY);
				State = 14055; expression_list_();
				}
				break;
			}
			State = 14059;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1757,_ctx) ) {
			case 1:
				{
				State = 14058; order_by_clause();
				}
				break;
			}
			State = 14062;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1758,_ctx) ) {
			case 1:
				{
				State = 14061; row_or_range_clause();
				}
				break;
			}
			State = 14064; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_or_range_clauseContext : ParserRuleContext {
		public Window_frame_extentContext window_frame_extent() {
			return GetRuleContext<Window_frame_extentContext>(0);
		}
		public ITerminalNode ROWS() { return GetToken(TSqlParser.ROWS, 0); }
		public ITerminalNode RANGE() { return GetToken(TSqlParser.RANGE, 0); }
		public Row_or_range_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_or_range_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRow_or_range_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRow_or_range_clause(this);
		}
	}

	[RuleVersion(0)]
	public Row_or_range_clauseContext row_or_range_clause() {
		Row_or_range_clauseContext _localctx = new Row_or_range_clauseContext(_ctx, State);
		EnterRule(_localctx, 1130, RULE_row_or_range_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14066;
			_la = _input.La(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 14067; window_frame_extent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_extentContext : ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return GetRuleContext<Window_frame_precedingContext>(0);
		}
		public ITerminalNode BETWEEN() { return GetToken(TSqlParser.BETWEEN, 0); }
		public Window_frame_boundContext[] window_frame_bound() {
			return GetRuleContexts<Window_frame_boundContext>();
		}
		public Window_frame_boundContext window_frame_bound(int i) {
			return GetRuleContext<Window_frame_boundContext>(i);
		}
		public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		public Window_frame_extentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_extent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_extent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_extent(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_extentContext window_frame_extent() {
		Window_frame_extentContext _localctx = new Window_frame_extentContext(_ctx, State);
		EnterRule(_localctx, 1132, RULE_window_frame_extent);
		try {
			State = 14075;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1759,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 14069; window_frame_preceding();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 14070; Match(BETWEEN);
				State = 14071; window_frame_bound();
				State = 14072; Match(AND);
				State = 14073; window_frame_bound();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_boundContext : ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return GetRuleContext<Window_frame_precedingContext>(0);
		}
		public Window_frame_followingContext window_frame_following() {
			return GetRuleContext<Window_frame_followingContext>(0);
		}
		public Window_frame_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_bound; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_bound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_bound(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_boundContext window_frame_bound() {
		Window_frame_boundContext _localctx = new Window_frame_boundContext(_ctx, State);
		EnterRule(_localctx, 1134, RULE_window_frame_bound);
		try {
			State = 14079;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1760,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 14077; window_frame_preceding();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 14078; window_frame_following();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_precedingContext : ParserRuleContext {
		public ITerminalNode UNBOUNDED() { return GetToken(TSqlParser.UNBOUNDED, 0); }
		public ITerminalNode PRECEDING() { return GetToken(TSqlParser.PRECEDING, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode CURRENT() { return GetToken(TSqlParser.CURRENT, 0); }
		public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		public Window_frame_precedingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_preceding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_preceding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_preceding(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_precedingContext window_frame_preceding() {
		Window_frame_precedingContext _localctx = new Window_frame_precedingContext(_ctx, State);
		EnterRule(_localctx, 1136, RULE_window_frame_preceding);
		try {
			State = 14087;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1761,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 14081; Match(UNBOUNDED);
				State = 14082; Match(PRECEDING);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 14083; Match(DECIMAL);
				State = 14084; Match(PRECEDING);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 14085; Match(CURRENT);
				State = 14086; Match(ROW);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_followingContext : ParserRuleContext {
		public ITerminalNode UNBOUNDED() { return GetToken(TSqlParser.UNBOUNDED, 0); }
		public ITerminalNode FOLLOWING() { return GetToken(TSqlParser.FOLLOWING, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Window_frame_followingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_following; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_following(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_following(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_followingContext window_frame_following() {
		Window_frame_followingContext _localctx = new Window_frame_followingContext(_ctx, State);
		EnterRule(_localctx, 1138, RULE_window_frame_following);
		try {
			State = 14093;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1762,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 14089; Match(UNBOUNDED);
				State = 14090; Match(FOLLOWING);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 14091; Match(DECIMAL);
				State = 14092; Match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_database_optionContext : ParserRuleContext {
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public Database_filestream_optionContext[] database_filestream_option() {
			return GetRuleContexts<Database_filestream_optionContext>();
		}
		public Database_filestream_optionContext database_filestream_option(int i) {
			return GetRuleContext<Database_filestream_optionContext>(i);
		}
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public ITerminalNode NESTED_TRIGGERS() { return GetToken(TSqlParser.NESTED_TRIGGERS, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode TRANSFORM_NOISE_WORDS() { return GetToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public ITerminalNode TWO_DIGIT_YEAR_CUTOFF() { return GetToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode DB_CHAINING() { return GetToken(TSqlParser.DB_CHAINING, 0); }
		public ITerminalNode TRUSTWORTHY() { return GetToken(TSqlParser.TRUSTWORTHY, 0); }
		public ITerminalNode CATALOG_COLLATION() { return GetToken(TSqlParser.CATALOG_COLLATION, 0); }
		public ITerminalNode DATABASE_DEFAULT() { return GetToken(TSqlParser.DATABASE_DEFAULT, 0); }
		public ITerminalNode LEDGER() { return GetToken(TSqlParser.LEDGER, 0); }
		public Create_database_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_database_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_database_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_database_option(this);
		}
	}

	[RuleVersion(0)]
	public Create_database_optionContext create_database_option() {
		Create_database_optionContext _localctx = new Create_database_optionContext(_ctx, State);
		EnterRule(_localctx, 1140, RULE_create_database_option);
		int _la;
		try {
			int _alt;
			State = 14138;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1767,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 14095; Match(FILESTREAM);
				{
				State = 14096; database_filestream_option();
				State = 14101;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1763,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 14097; Match(COMMA);
						State = 14098; database_filestream_option();
						}
						} 
					}
					State = 14103;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1763,_ctx);
				}
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 14104; Match(DEFAULT_LANGUAGE);
				State = 14105; Match(EQUAL);
				State = 14108;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1764,_ctx) ) {
				case 1:
					{
					State = 14106; id_();
					}
					break;

				case 2:
					{
					State = 14107; Match(STRING);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 14110; Match(DEFAULT_FULLTEXT_LANGUAGE);
				State = 14111; Match(EQUAL);
				State = 14114;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1765,_ctx) ) {
				case 1:
					{
					State = 14112; id_();
					}
					break;

				case 2:
					{
					State = 14113; Match(STRING);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 14116; Match(NESTED_TRIGGERS);
				State = 14117; Match(EQUAL);
				State = 14118;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 14119; Match(TRANSFORM_NOISE_WORDS);
				State = 14120; Match(EQUAL);
				State = 14121;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 14122; Match(TWO_DIGIT_YEAR_CUTOFF);
				State = 14123; Match(EQUAL);
				State = 14124; Match(DECIMAL);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 14125; Match(DB_CHAINING);
				State = 14126;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 14127; Match(TRUSTWORTHY);
				State = 14128;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 14129; Match(CATALOG_COLLATION);
				State = 14130; Match(EQUAL);
				State = 14133;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1766,_ctx) ) {
				case 1:
					{
					State = 14131; id_();
					}
					break;

				case 2:
					{
					State = 14132; Match(DATABASE_DEFAULT);
					}
					break;
				}
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 14135; Match(LEDGER);
				State = 14136; Match(EQUAL);
				State = 14137;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_filestream_optionContext : ParserRuleContext {
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode NON_TRANSACTED_ACCESS() { return GetToken(TSqlParser.NON_TRANSACTED_ACCESS, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DIRECTORY_NAME() { return GetToken(TSqlParser.DIRECTORY_NAME, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode FULL() { return GetToken(TSqlParser.FULL, 0); }
		public Database_filestream_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_filestream_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDatabase_filestream_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDatabase_filestream_option(this);
		}
	}

	[RuleVersion(0)]
	public Database_filestream_optionContext database_filestream_option() {
		Database_filestream_optionContext _localctx = new Database_filestream_optionContext(_ctx, State);
		EnterRule(_localctx, 1142, RULE_database_filestream_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14140; Match(LR_BRACKET);
			State = 14147;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1768,_ctx) ) {
			case 1:
				{
				{
				State = 14141; Match(NON_TRANSACTED_ACCESS);
				State = 14142; Match(EQUAL);
				State = 14143;
				_la = _input.La(1);
				if ( !(_la==FULL || _la==OFF || _la==READ_ONLY) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				}
				break;

			case 2:
				{
				{
				State = 14144; Match(DIRECTORY_NAME);
				State = 14145; Match(EQUAL);
				State = 14146; Match(STRING);
				}
				}
				break;
			}
			State = 14149; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_file_specContext : ParserRuleContext {
		public File_groupContext file_group() {
			return GetRuleContext<File_groupContext>(0);
		}
		public File_specContext file_spec() {
			return GetRuleContext<File_specContext>(0);
		}
		public Database_file_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_file_spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDatabase_file_spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDatabase_file_spec(this);
		}
	}

	[RuleVersion(0)]
	public Database_file_specContext database_file_spec() {
		Database_file_specContext _localctx = new Database_file_specContext(_ctx, State);
		EnterRule(_localctx, 1144, RULE_database_file_spec);
		try {
			State = 14153;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1769,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 14151; file_group();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 14152; file_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_groupContext : ParserRuleContext {
		public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public File_specContext[] file_spec() {
			return GetRuleContexts<File_specContext>();
		}
		public File_specContext file_spec(int i) {
			return GetRuleContext<File_specContext>(i);
		}
		public ITerminalNode[] CONTAINS() { return GetTokens(TSqlParser.CONTAINS); }
		public ITerminalNode CONTAINS(int i) {
			return GetToken(TSqlParser.CONTAINS, i);
		}
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode MEMORY_OPTIMIZED_DATA() { return GetToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public File_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_group(this);
		}
	}

	[RuleVersion(0)]
	public File_groupContext file_group() {
		File_groupContext _localctx = new File_groupContext(_ctx, State);
		EnterRule(_localctx, 1146, RULE_file_group);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 14155; Match(FILEGROUP);
			State = 14156; id_();
			State = 14159;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1770,_ctx) ) {
			case 1:
				{
				State = 14157; Match(CONTAINS);
				State = 14158; Match(FILESTREAM);
				}
				break;
			}
			State = 14162;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1771,_ctx) ) {
			case 1:
				{
				State = 14161; Match(DEFAULT);
				}
				break;
			}
			State = 14166;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1772,_ctx) ) {
			case 1:
				{
				State = 14164; Match(CONTAINS);
				State = 14165; Match(MEMORY_OPTIMIZED_DATA);
				}
				break;
			}
			State = 14168; file_spec();
			State = 14173;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1773,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 14169; Match(COMMA);
					State = 14170; file_spec();
					}
					} 
				}
				State = 14175;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1773,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_specContext : ParserRuleContext {
		public IToken file;
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode FILENAME() { return GetToken(TSqlParser.FILENAME, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		public File_sizeContext[] file_size() {
			return GetRuleContexts<File_sizeContext>();
		}
		public File_sizeContext file_size(int i) {
			return GetRuleContext<File_sizeContext>(i);
		}
		public ITerminalNode MAXSIZE() { return GetToken(TSqlParser.MAXSIZE, 0); }
		public ITerminalNode FILEGROWTH() { return GetToken(TSqlParser.FILEGROWTH, 0); }
		public ITerminalNode UNLIMITED() { return GetToken(TSqlParser.UNLIMITED, 0); }
		public File_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_spec(this);
		}
	}

	[RuleVersion(0)]
	public File_specContext file_spec() {
		File_specContext _localctx = new File_specContext(_ctx, State);
		EnterRule(_localctx, 1148, RULE_file_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14176; Match(LR_BRACKET);
			State = 14177; Match(NAME);
			State = 14178; Match(EQUAL);
			State = 14181;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1774,_ctx) ) {
			case 1:
				{
				State = 14179; id_();
				}
				break;

			case 2:
				{
				State = 14180; Match(STRING);
				}
				break;
			}
			State = 14184;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1775,_ctx) ) {
			case 1:
				{
				State = 14183; Match(COMMA);
				}
				break;
			}
			State = 14186; Match(FILENAME);
			State = 14187; Match(EQUAL);
			State = 14188; _localctx.file = Match(STRING);
			State = 14190;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1776,_ctx) ) {
			case 1:
				{
				State = 14189; Match(COMMA);
				}
				break;
			}
			State = 14198;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1778,_ctx) ) {
			case 1:
				{
				State = 14192; Match(SIZE);
				State = 14193; Match(EQUAL);
				State = 14194; file_size();
				State = 14196;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1777,_ctx) ) {
				case 1:
					{
					State = 14195; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 14209;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1781,_ctx) ) {
			case 1:
				{
				State = 14200; Match(MAXSIZE);
				State = 14201; Match(EQUAL);
				State = 14204;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1779,_ctx) ) {
				case 1:
					{
					State = 14202; file_size();
					}
					break;

				case 2:
					{
					State = 14203; Match(UNLIMITED);
					}
					break;
				}
				State = 14207;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1780,_ctx) ) {
				case 1:
					{
					State = 14206; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 14217;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1783,_ctx) ) {
			case 1:
				{
				State = 14211; Match(FILEGROWTH);
				State = 14212; Match(EQUAL);
				State = 14213; file_size();
				State = 14215;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1782,_ctx) ) {
				case 1:
					{
					State = 14214; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 14219; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_nameContext : ParserRuleContext {
		public Id_Context server;
		public Id_Context database;
		public Id_Context schema;
		public Id_Context table;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Entity_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEntity_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEntity_name(this);
		}
	}

	[RuleVersion(0)]
	public Entity_nameContext entity_name() {
		Entity_nameContext _localctx = new Entity_nameContext(_ctx, State);
		EnterRule(_localctx, 1150, RULE_entity_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14238;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1785,_ctx) ) {
			case 1:
				{
				State = 14221; _localctx.server = id_();
				State = 14222; Match(DOT);
				State = 14223; _localctx.database = id_();
				State = 14224; Match(DOT);
				State = 14225; _localctx.schema = id_();
				State = 14226; Match(DOT);
				}
				break;

			case 2:
				{
				State = 14228; _localctx.database = id_();
				State = 14229; Match(DOT);
				State = 14231;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1784,_ctx) ) {
				case 1:
					{
					State = 14230; _localctx.schema = id_();
					}
					break;
				}
				State = 14233; Match(DOT);
				}
				break;

			case 3:
				{
				State = 14235; _localctx.schema = id_();
				State = 14236; Match(DOT);
				}
				break;
			}
			State = 14240; _localctx.table = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_name_for_azure_dwContext : ParserRuleContext {
		public Id_Context schema;
		public Id_Context object_name;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Entity_name_for_azure_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_name_for_azure_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEntity_name_for_azure_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEntity_name_for_azure_dw(this);
		}
	}

	[RuleVersion(0)]
	public Entity_name_for_azure_dwContext entity_name_for_azure_dw() {
		Entity_name_for_azure_dwContext _localctx = new Entity_name_for_azure_dwContext(_ctx, State);
		EnterRule(_localctx, 1152, RULE_entity_name_for_azure_dw);
		try {
			State = 14247;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1786,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 14242; _localctx.schema = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 14243; _localctx.schema = id_();
				State = 14244; Match(DOT);
				State = 14245; _localctx.object_name = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_name_for_parallel_dwContext : ParserRuleContext {
		public Id_Context schema_database;
		public Id_Context schema;
		public Id_Context object_name;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Entity_name_for_parallel_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_name_for_parallel_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEntity_name_for_parallel_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEntity_name_for_parallel_dw(this);
		}
	}

	[RuleVersion(0)]
	public Entity_name_for_parallel_dwContext entity_name_for_parallel_dw() {
		Entity_name_for_parallel_dwContext _localctx = new Entity_name_for_parallel_dwContext(_ctx, State);
		EnterRule(_localctx, 1154, RULE_entity_name_for_parallel_dw);
		try {
			State = 14254;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1787,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 14249; _localctx.schema_database = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 14250; _localctx.schema = id_();
				State = 14251; Match(DOT);
				State = 14252; _localctx.object_name = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_table_nameContext : ParserRuleContext {
		public Id_Context linkedServer;
		public Id_Context schema;
		public Id_Context server;
		public Id_Context database;
		public Id_Context table;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Full_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFull_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFull_table_name(this);
		}
	}

	[RuleVersion(0)]
	public Full_table_nameContext full_table_name() {
		Full_table_nameContext _localctx = new Full_table_nameContext(_ctx, State);
		EnterRule(_localctx, 1156, RULE_full_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14279;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1789,_ctx) ) {
			case 1:
				{
				State = 14256; _localctx.linkedServer = id_();
				State = 14257; Match(DOT);
				State = 14258; Match(DOT);
				State = 14259; _localctx.schema = id_();
				State = 14260; Match(DOT);
				}
				break;

			case 2:
				{
				State = 14262; _localctx.server = id_();
				State = 14263; Match(DOT);
				State = 14264; _localctx.database = id_();
				State = 14265; Match(DOT);
				State = 14266; _localctx.schema = id_();
				State = 14267; Match(DOT);
				}
				break;

			case 3:
				{
				State = 14269; _localctx.database = id_();
				State = 14270; Match(DOT);
				State = 14272;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1788,_ctx) ) {
				case 1:
					{
					State = 14271; _localctx.schema = id_();
					}
					break;
				}
				State = 14274; Match(DOT);
				}
				break;

			case 4:
				{
				State = 14276; _localctx.schema = id_();
				State = 14277; Match(DOT);
				}
				break;
			}
			State = 14281; _localctx.table = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_nameContext : ParserRuleContext {
		public Id_Context database;
		public Id_Context schema;
		public Id_Context table;
		public IToken blocking_hierarchy;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode BLOCKING_HIERARCHY() { return GetToken(TSqlParser.BLOCKING_HIERARCHY, 0); }
		public Table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_name(this);
		}
	}

	[RuleVersion(0)]
	public Table_nameContext table_name() {
		Table_nameContext _localctx = new Table_nameContext(_ctx, State);
		EnterRule(_localctx, 1158, RULE_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14293;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1791,_ctx) ) {
			case 1:
				{
				State = 14283; _localctx.database = id_();
				State = 14284; Match(DOT);
				State = 14286;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1790,_ctx) ) {
				case 1:
					{
					State = 14285; _localctx.schema = id_();
					}
					break;
				}
				State = 14288; Match(DOT);
				}
				break;

			case 2:
				{
				State = 14290; _localctx.schema = id_();
				State = 14291; Match(DOT);
				}
				break;
			}
			State = 14297;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1792,_ctx) ) {
			case 1:
				{
				State = 14295; _localctx.table = id_();
				}
				break;

			case 2:
				{
				State = 14296; _localctx.blocking_hierarchy = Match(BLOCKING_HIERARCHY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_nameContext : ParserRuleContext {
		public Id_Context schema;
		public Id_Context name;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Simple_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSimple_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSimple_name(this);
		}
	}

	[RuleVersion(0)]
	public Simple_nameContext simple_name() {
		Simple_nameContext _localctx = new Simple_nameContext(_ctx, State);
		EnterRule(_localctx, 1160, RULE_simple_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14302;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1793,_ctx) ) {
			case 1:
				{
				State = 14299; _localctx.schema = id_();
				State = 14300; Match(DOT);
				}
				break;
			}
			State = 14304; _localctx.name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_proc_name_schemaContext : ParserRuleContext {
		public Id_Context schema;
		public Id_Context procedure;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Func_proc_name_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_proc_name_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_proc_name_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_proc_name_schema(this);
		}
	}

	[RuleVersion(0)]
	public Func_proc_name_schemaContext func_proc_name_schema() {
		Func_proc_name_schemaContext _localctx = new Func_proc_name_schemaContext(_ctx, State);
		EnterRule(_localctx, 1162, RULE_func_proc_name_schema);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14309;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1794,_ctx) ) {
			case 1:
				{
				{
				State = 14306; _localctx.schema = id_();
				}
				State = 14307; Match(DOT);
				}
				break;
			}
			State = 14311; _localctx.procedure = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_proc_name_database_schemaContext : ParserRuleContext {
		public Id_Context database;
		public Id_Context schema;
		public Id_Context procedure;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Func_proc_name_schemaContext func_proc_name_schema() {
			return GetRuleContext<Func_proc_name_schemaContext>(0);
		}
		public Func_proc_name_database_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_proc_name_database_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_proc_name_database_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_proc_name_database_schema(this);
		}
	}

	[RuleVersion(0)]
	public Func_proc_name_database_schemaContext func_proc_name_database_schema() {
		Func_proc_name_database_schemaContext _localctx = new Func_proc_name_database_schemaContext(_ctx, State);
		EnterRule(_localctx, 1164, RULE_func_proc_name_database_schema);
		try {
			State = 14323;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1797,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 14314;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1795,_ctx) ) {
				case 1:
					{
					State = 14313; _localctx.database = id_();
					}
					break;
				}
				State = 14316; Match(DOT);
				State = 14318;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1796,_ctx) ) {
				case 1:
					{
					State = 14317; _localctx.schema = id_();
					}
					break;
				}
				State = 14320; Match(DOT);
				State = 14321; _localctx.procedure = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 14322; func_proc_name_schema();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_proc_name_server_database_schemaContext : ParserRuleContext {
		public Id_Context server;
		public Id_Context database;
		public Id_Context schema;
		public Id_Context procedure;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Func_proc_name_database_schemaContext func_proc_name_database_schema() {
			return GetRuleContext<Func_proc_name_database_schemaContext>(0);
		}
		public Func_proc_name_server_database_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_proc_name_server_database_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_proc_name_server_database_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_proc_name_server_database_schema(this);
		}
	}

	[RuleVersion(0)]
	public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
		Func_proc_name_server_database_schemaContext _localctx = new Func_proc_name_server_database_schemaContext(_ctx, State);
		EnterRule(_localctx, 1166, RULE_func_proc_name_server_database_schema);
		try {
			State = 14339;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1801,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 14326;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1798,_ctx) ) {
				case 1:
					{
					State = 14325; _localctx.server = id_();
					}
					break;
				}
				State = 14328; Match(DOT);
				State = 14330;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1799,_ctx) ) {
				case 1:
					{
					State = 14329; _localctx.database = id_();
					}
					break;
				}
				State = 14332; Match(DOT);
				State = 14334;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1800,_ctx) ) {
				case 1:
					{
					State = 14333; _localctx.schema = id_();
					}
					break;
				}
				State = 14336; Match(DOT);
				State = 14337; _localctx.procedure = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 14338; func_proc_name_database_schema();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_objectContext : ParserRuleContext {
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Ddl_objectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_object; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDdl_object(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDdl_object(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_objectContext ddl_object() {
		Ddl_objectContext _localctx = new Ddl_objectContext(_ctx, State);
		EnterRule(_localctx, 1168, RULE_ddl_object);
		try {
			State = 14343;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1802,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 14341; full_table_name();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 14342; Match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_column_nameContext : ParserRuleContext {
		public Id_Context column_name;
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode DELETED() { return GetToken(TSqlParser.DELETED, 0); }
		public ITerminalNode INSERTED() { return GetToken(TSqlParser.INSERTED, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode ROWGUID() { return GetToken(TSqlParser.ROWGUID, 0); }
		public Full_column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_column_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFull_column_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFull_column_name(this);
		}
	}

	[RuleVersion(0)]
	public Full_column_nameContext full_column_name() {
		Full_column_nameContext _localctx = new Full_column_nameContext(_ctx, State);
		EnterRule(_localctx, 1170, RULE_full_column_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14351;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1804,_ctx) ) {
			case 1:
				{
				State = 14348;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1803,_ctx) ) {
				case 1:
					{
					State = 14345; Match(DELETED);
					}
					break;

				case 2:
					{
					State = 14346; Match(INSERTED);
					}
					break;

				case 3:
					{
					State = 14347; full_table_name();
					}
					break;
				}
				State = 14350; Match(DOT);
				}
				break;
			}
			State = 14356;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1805,_ctx) ) {
			case 1:
				{
				State = 14353; _localctx.column_name = id_();
				}
				break;

			case 2:
				{
				{
				State = 14354; Match(DOLLAR);
				State = 14355;
				_la = _input.La(1);
				if ( !(_la==IDENTITY || _la==ROWGUID) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_list_with_orderContext : ParserRuleContext {
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] ASC() { return GetTokens(TSqlParser.ASC); }
		public ITerminalNode ASC(int i) {
			return GetToken(TSqlParser.ASC, i);
		}
		public ITerminalNode[] DESC() { return GetTokens(TSqlParser.DESC); }
		public ITerminalNode DESC(int i) {
			return GetToken(TSqlParser.DESC, i);
		}
		public Column_name_list_with_orderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_list_with_order; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_name_list_with_order(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_name_list_with_order(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_list_with_orderContext column_name_list_with_order() {
		Column_name_list_with_orderContext _localctx = new Column_name_list_with_orderContext(_ctx, State);
		EnterRule(_localctx, 1172, RULE_column_name_list_with_order);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 14358; id_();
			State = 14360;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1806,_ctx) ) {
			case 1:
				{
				State = 14359;
				_la = _input.La(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 14369;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1808,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 14362; Match(COMMA);
					State = 14363; id_();
					State = 14365;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1807,_ctx) ) {
					case 1:
						{
						State = 14364;
						_la = _input.La(1);
						if ( !(_la==ASC || _la==DESC) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					} 
				}
				State = 14371;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1808,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_column_name_listContext : ParserRuleContext {
		public Insert_column_idContext _insert_column_id;
		public IList<Insert_column_idContext> _col = new List<Insert_column_idContext>();
		public Insert_column_idContext[] insert_column_id() {
			return GetRuleContexts<Insert_column_idContext>();
		}
		public Insert_column_idContext insert_column_id(int i) {
			return GetRuleContext<Insert_column_idContext>(i);
		}
		public Insert_column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_column_name_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_column_name_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_column_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Insert_column_name_listContext insert_column_name_list() {
		Insert_column_name_listContext _localctx = new Insert_column_name_listContext(_ctx, State);
		EnterRule(_localctx, 1174, RULE_insert_column_name_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 14372; _localctx._insert_column_id = insert_column_id();
			_localctx._col.Add(_localctx._insert_column_id);
			State = 14377;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1809,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 14373; Match(COMMA);
					State = 14374; _localctx._insert_column_id = insert_column_id();
					_localctx._col.Add(_localctx._insert_column_id);
					}
					} 
				}
				State = 14379;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1809,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_column_idContext : ParserRuleContext {
		public Id_Context _id_;
		public IList<Id_Context> _ignore = new List<Id_Context>();
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Insert_column_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_column_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_column_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_column_id(this);
		}
	}

	[RuleVersion(0)]
	public Insert_column_idContext insert_column_id() {
		Insert_column_idContext _localctx = new Insert_column_idContext(_ctx, State);
		EnterRule(_localctx, 1176, RULE_insert_column_id);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 14386;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1811,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 14381;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1810,_ctx) ) {
					case 1:
						{
						State = 14380; _localctx._id_ = id_();
						_localctx._ignore.Add(_localctx._id_);
						}
						break;
					}
					State = 14383; Match(DOT);
					}
					} 
				}
				State = 14388;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1811,_ctx);
			}
			State = 14389; id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_listContext : ParserRuleContext {
		public Id_Context _id_;
		public IList<Id_Context> _col = new List<Id_Context>();
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_name_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_listContext column_name_list() {
		Column_name_listContext _localctx = new Column_name_listContext(_ctx, State);
		EnterRule(_localctx, 1178, RULE_column_name_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 14391; _localctx._id_ = id_();
			_localctx._col.Add(_localctx._id_);
			State = 14396;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1812,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 14392; Match(COMMA);
					State = 14393; _localctx._id_ = id_();
					_localctx._col.Add(_localctx._id_);
					}
					} 
				}
				State = 14398;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1812,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_nameContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Cursor_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCursor_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCursor_name(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_nameContext cursor_name() {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, State);
		EnterRule(_localctx, 1180, RULE_cursor_name);
		try {
			State = 14401;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1813,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 14399; id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 14400; Match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_offContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public On_offContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_off; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOn_off(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOn_off(this);
		}
	}

	[RuleVersion(0)]
	public On_offContext on_off() {
		On_offContext _localctx = new On_offContext(_ctx, State);
		EnterRule(_localctx, 1182, RULE_on_off);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14403;
			_la = _input.La(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClusteredContext : ParserRuleContext {
		public ITerminalNode CLUSTERED() { return GetToken(TSqlParser.CLUSTERED, 0); }
		public ITerminalNode NONCLUSTERED() { return GetToken(TSqlParser.NONCLUSTERED, 0); }
		public ClusteredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clustered; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClustered(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClustered(this);
		}
	}

	[RuleVersion(0)]
	public ClusteredContext clustered() {
		ClusteredContext _localctx = new ClusteredContext(_ctx, State);
		EnterRule(_localctx, 1184, RULE_clustered);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14405;
			_la = _input.La(1);
			if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_notnullContext : ParserRuleContext {
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public Null_notnullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_notnull; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNull_notnull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNull_notnull(this);
		}
	}

	[RuleVersion(0)]
	public Null_notnullContext null_notnull() {
		Null_notnullContext _localctx = new Null_notnullContext(_ctx, State);
		EnterRule(_localctx, 1186, RULE_null_notnull);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14408;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1814,_ctx) ) {
			case 1:
				{
				State = 14407; Match(NOT);
				}
				break;
			}
			State = 14410; Match(NULL_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_function_nameContext : ParserRuleContext {
		public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return GetRuleContext<Func_proc_name_server_database_schemaContext>(0);
		}
		public ITerminalNode RIGHT() { return GetToken(TSqlParser.RIGHT, 0); }
		public ITerminalNode LEFT() { return GetToken(TSqlParser.LEFT, 0); }
		public ITerminalNode BINARY_CHECKSUM() { return GetToken(TSqlParser.BINARY_CHECKSUM, 0); }
		public ITerminalNode CHECKSUM() { return GetToken(TSqlParser.CHECKSUM, 0); }
		public Scalar_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_function_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterScalar_function_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitScalar_function_name(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_function_nameContext scalar_function_name() {
		Scalar_function_nameContext _localctx = new Scalar_function_nameContext(_ctx, State);
		EnterRule(_localctx, 1188, RULE_scalar_function_name);
		try {
			State = 14417;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1815,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 14412; func_proc_name_server_database_schema();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 14413; Match(RIGHT);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 14414; Match(LEFT);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 14415; Match(BINARY_CHECKSUM);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 14416; Match(CHECKSUM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Begin_conversation_timerContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode TIMER() { return GetToken(TSqlParser.TIMER, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		public Begin_conversation_timerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_begin_conversation_timer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBegin_conversation_timer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBegin_conversation_timer(this);
		}
	}

	[RuleVersion(0)]
	public Begin_conversation_timerContext begin_conversation_timer() {
		Begin_conversation_timerContext _localctx = new Begin_conversation_timerContext(_ctx, State);
		EnterRule(_localctx, 1190, RULE_begin_conversation_timer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14419; Match(BEGIN);
			State = 14420; Match(CONVERSATION);
			State = 14421; Match(TIMER);
			State = 14422; Match(LR_BRACKET);
			State = 14423; Match(LOCAL_ID);
			State = 14424; Match(RR_BRACKET);
			State = 14425; Match(TIMEOUT);
			State = 14426; Match(EQUAL);
			State = 14427; time();
			State = 14429;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1816,_ctx) ) {
			case 1:
				{
				State = 14428; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Begin_conversation_dialogContext : ParserRuleContext {
		public IToken dialog_handle;
		public Service_nameContext initiator_service_name;
		public Service_nameContext target_service_name;
		public IToken service_broker_guid;
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode DIALOG() { return GetToken(TSqlParser.DIALOG, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode[] SERVICE() { return GetTokens(TSqlParser.SERVICE); }
		public ITerminalNode SERVICE(int i) {
			return GetToken(TSqlParser.SERVICE, i);
		}
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public Contract_nameContext contract_name() {
			return GetRuleContext<Contract_nameContext>(0);
		}
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public Service_nameContext[] service_name() {
			return GetRuleContexts<Service_nameContext>();
		}
		public Service_nameContext service_name(int i) {
			return GetRuleContext<Service_nameContext>(i);
		}
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LIFETIME() { return GetToken(TSqlParser.LIFETIME, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode RELATED_CONVERSATION() { return GetToken(TSqlParser.RELATED_CONVERSATION, 0); }
		public ITerminalNode RELATED_CONVERSATION_GROUP() { return GetToken(TSqlParser.RELATED_CONVERSATION_GROUP, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Begin_conversation_dialogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_begin_conversation_dialog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBegin_conversation_dialog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBegin_conversation_dialog(this);
		}
	}

	[RuleVersion(0)]
	public Begin_conversation_dialogContext begin_conversation_dialog() {
		Begin_conversation_dialogContext _localctx = new Begin_conversation_dialogContext(_ctx, State);
		EnterRule(_localctx, 1192, RULE_begin_conversation_dialog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14431; Match(BEGIN);
			State = 14432; Match(DIALOG);
			State = 14434;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1817,_ctx) ) {
			case 1:
				{
				State = 14433; Match(CONVERSATION);
				}
				break;
			}
			State = 14436; _localctx.dialog_handle = Match(LOCAL_ID);
			State = 14437; Match(FROM);
			State = 14438; Match(SERVICE);
			State = 14439; _localctx.initiator_service_name = service_name();
			State = 14440; Match(TO);
			State = 14441; Match(SERVICE);
			State = 14442; _localctx.target_service_name = service_name();
			State = 14445;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1818,_ctx) ) {
			case 1:
				{
				State = 14443; Match(COMMA);
				State = 14444; _localctx.service_broker_guid = Match(STRING);
				}
				break;
			}
			State = 14447; Match(ON);
			State = 14448; Match(CONTRACT);
			State = 14449; contract_name();
			State = 14472;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1824,_ctx) ) {
			case 1:
				{
				State = 14450; Match(WITH);
				State = 14457;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1820,_ctx) ) {
				case 1:
					{
					State = 14451;
					_la = _input.La(1);
					if ( !(_la==RELATED_CONVERSATION || _la==RELATED_CONVERSATION_GROUP) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 14452; Match(EQUAL);
					State = 14453; Match(LOCAL_ID);
					State = 14455;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1819,_ctx) ) {
					case 1:
						{
						State = 14454; Match(COMMA);
						}
						break;
					}
					}
					break;
				}
				State = 14465;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1822,_ctx) ) {
				case 1:
					{
					State = 14459; Match(LIFETIME);
					State = 14460; Match(EQUAL);
					State = 14461;
					_la = _input.La(1);
					if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 14463;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1821,_ctx) ) {
					case 1:
						{
						State = 14462; Match(COMMA);
						}
						break;
					}
					}
					break;
				}
				State = 14470;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1823,_ctx) ) {
				case 1:
					{
					State = 14467; Match(ENCRYPTION);
					State = 14468; Match(EQUAL);
					State = 14469; on_off();
					}
					break;
				}
				}
				break;
			}
			State = 14475;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1825,_ctx) ) {
			case 1:
				{
				State = 14474; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Contract_nameContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Contract_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contract_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterContract_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitContract_name(this);
		}
	}

	[RuleVersion(0)]
	public Contract_nameContext contract_name() {
		Contract_nameContext _localctx = new Contract_nameContext(_ctx, State);
		EnterRule(_localctx, 1194, RULE_contract_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14479;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1826,_ctx) ) {
			case 1:
				{
				State = 14477; id_();
				}
				break;

			case 2:
				{
				State = 14478; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Service_nameContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Service_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_service_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterService_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitService_name(this);
		}
	}

	[RuleVersion(0)]
	public Service_nameContext service_name() {
		Service_nameContext _localctx = new Service_nameContext(_ctx, State);
		EnterRule(_localctx, 1196, RULE_service_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14483;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1827,_ctx) ) {
			case 1:
				{
				State = 14481; id_();
				}
				break;

			case 2:
				{
				State = 14482; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_conversationContext : ParserRuleContext {
		public IToken conversation_handle;
		public IToken faliure_code;
		public IToken failure_text;
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ERROR() { return GetToken(TSqlParser.ERROR, 0); }
		public ITerminalNode DESCRIPTION() { return GetToken(TSqlParser.DESCRIPTION, 0); }
		public ITerminalNode CLEANUP() { return GetToken(TSqlParser.CLEANUP, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public End_conversationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_conversation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEnd_conversation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEnd_conversation(this);
		}
	}

	[RuleVersion(0)]
	public End_conversationContext end_conversation() {
		End_conversationContext _localctx = new End_conversationContext(_ctx, State);
		EnterRule(_localctx, 1198, RULE_end_conversation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14485; Match(END);
			State = 14486; Match(CONVERSATION);
			State = 14487; _localctx.conversation_handle = Match(LOCAL_ID);
			State = 14489;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1828,_ctx) ) {
			case 1:
				{
				State = 14488; Match(SEMI);
				}
				break;
			}
			State = 14503;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1831,_ctx) ) {
			case 1:
				{
				State = 14491; Match(WITH);
				State = 14498;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1829,_ctx) ) {
				case 1:
					{
					State = 14492; Match(ERROR);
					State = 14493; Match(EQUAL);
					State = 14494;
					_localctx.faliure_code = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						_localctx.faliure_code = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 14495; Match(DESCRIPTION);
					State = 14496; Match(EQUAL);
					State = 14497;
					_localctx.failure_text = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						_localctx.failure_text = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 14501;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1830,_ctx) ) {
				case 1:
					{
					State = 14500; Match(CLEANUP);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Waitfor_conversationContext : ParserRuleContext {
		public TimeContext timeout;
		public Get_conversationContext get_conversation() {
			return GetRuleContext<Get_conversationContext>(0);
		}
		public ITerminalNode WAITFOR() { return GetToken(TSqlParser.WAITFOR, 0); }
		public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		public Waitfor_conversationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitfor_conversation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWaitfor_conversation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWaitfor_conversation(this);
		}
	}

	[RuleVersion(0)]
	public Waitfor_conversationContext waitfor_conversation() {
		Waitfor_conversationContext _localctx = new Waitfor_conversationContext(_ctx, State);
		EnterRule(_localctx, 1200, RULE_waitfor_conversation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14506;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1832,_ctx) ) {
			case 1:
				{
				State = 14505; Match(WAITFOR);
				}
				break;
			}
			State = 14508; Match(LR_BRACKET);
			State = 14509; get_conversation();
			State = 14510; Match(RR_BRACKET);
			State = 14516;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1834,_ctx) ) {
			case 1:
				{
				State = 14512;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1833,_ctx) ) {
				case 1:
					{
					State = 14511; Match(COMMA);
					}
					break;
				}
				State = 14514; Match(TIMEOUT);
				State = 14515; _localctx.timeout = time();
				}
				break;
			}
			State = 14519;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1835,_ctx) ) {
			case 1:
				{
				State = 14518; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_conversationContext : ParserRuleContext {
		public IToken conversation_group_id;
		public Queue_idContext queue;
		public ITerminalNode GET() { return GetToken(TSqlParser.GET, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Queue_idContext queue_id() {
			return GetRuleContext<Queue_idContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Get_conversationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_conversation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGet_conversation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGet_conversation(this);
		}
	}

	[RuleVersion(0)]
	public Get_conversationContext get_conversation() {
		Get_conversationContext _localctx = new Get_conversationContext(_ctx, State);
		EnterRule(_localctx, 1202, RULE_get_conversation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14521; Match(GET);
			State = 14522; Match(CONVERSATION);
			State = 14523; Match(GROUP);
			State = 14524;
			_localctx.conversation_group_id = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
				_localctx.conversation_group_id = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 14525; Match(FROM);
			State = 14526; _localctx.queue = queue_id();
			State = 14528;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1836,_ctx) ) {
			case 1:
				{
				State = 14527; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Queue_idContext : ParserRuleContext {
		public Id_Context database_name;
		public Id_Context schema_name;
		public Id_Context name;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Queue_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queue_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQueue_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQueue_id(this);
		}
	}

	[RuleVersion(0)]
	public Queue_idContext queue_id() {
		Queue_idContext _localctx = new Queue_idContext(_ctx, State);
		EnterRule(_localctx, 1204, RULE_queue_id);
		try {
			State = 14537;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1837,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 14530; _localctx.database_name = id_();
				State = 14531; Match(DOT);
				State = 14532; _localctx.schema_name = id_();
				State = 14533; Match(DOT);
				State = 14534; _localctx.name = id_();
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 14536; id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Send_conversationContext : ParserRuleContext {
		public IToken conversation_handle;
		public ExpressionContext message_type_name;
		public IToken message_body_expression;
		public ITerminalNode SEND() { return GetToken(TSqlParser.SEND, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public Send_conversationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_send_conversation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSend_conversation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSend_conversation(this);
		}
	}

	[RuleVersion(0)]
	public Send_conversationContext send_conversation() {
		Send_conversationContext _localctx = new Send_conversationContext(_ctx, State);
		EnterRule(_localctx, 1206, RULE_send_conversation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14539; Match(SEND);
			State = 14540; Match(ON);
			State = 14541; Match(CONVERSATION);
			State = 14542;
			_localctx.conversation_handle = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
				_localctx.conversation_handle = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 14543; Match(MESSAGE);
			State = 14544; Match(TYPE);
			State = 14545; _localctx.message_type_name = expression(0);
			State = 14549;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1838,_ctx) ) {
			case 1:
				{
				State = 14546; Match(LR_BRACKET);
				State = 14547;
				_localctx.message_body_expression = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==LOCAL_ID || _la==STRING) ) {
					_localctx.message_body_expression = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 14548; Match(RR_BRACKET);
				}
				break;
			}
			State = 14552;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1839,_ctx) ) {
			case 1:
				{
				State = 14551; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_typeContext : ParserRuleContext {
		public IToken scaled;
		public Id_Context ext_type;
		public IToken scale;
		public IToken prec;
		public IToken seed;
		public IToken inc;
		public IToken double_prec;
		public Id_Context unscaled_type;
		public ITerminalNode MAX() { return GetToken(TSqlParser.MAX, 0); }
		public ITerminalNode VARCHAR() { return GetToken(TSqlParser.VARCHAR, 0); }
		public ITerminalNode NVARCHAR() { return GetToken(TSqlParser.NVARCHAR, 0); }
		public ITerminalNode BINARY_KEYWORD() { return GetToken(TSqlParser.BINARY_KEYWORD, 0); }
		public ITerminalNode VARBINARY_KEYWORD() { return GetToken(TSqlParser.VARBINARY_KEYWORD, 0); }
		public ITerminalNode SQUARE_BRACKET_ID() { return GetToken(TSqlParser.SQUARE_BRACKET_ID, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode DOUBLE() { return GetToken(TSqlParser.DOUBLE, 0); }
		public ITerminalNode PRECISION() { return GetToken(TSqlParser.PRECISION, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterData_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitData_type(this);
		}
	}

	[RuleVersion(0)]
	public Data_typeContext data_type() {
		Data_typeContext _localctx = new Data_typeContext(_ctx, State);
		EnterRule(_localctx, 1208, RULE_data_type);
		int _la;
		try {
			State = 14584;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1842,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 14554;
				_localctx.scaled = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==BINARY_KEYWORD || _la==VARBINARY_KEYWORD || ((((_la - 1168)) & ~0x3f) == 0 && ((1L << (_la - 1168)) & ((1L << (VARCHAR - 1168)) | (1L << (NVARCHAR - 1168)) | (1L << (SQUARE_BRACKET_ID - 1168)))) != 0)) ) {
					_localctx.scaled = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 14555; Match(LR_BRACKET);
				State = 14556; Match(MAX);
				State = 14557; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 14558; _localctx.ext_type = id_();
				State = 14559; Match(LR_BRACKET);
				State = 14560; _localctx.scale = Match(DECIMAL);
				State = 14561; Match(COMMA);
				State = 14562; _localctx.prec = Match(DECIMAL);
				State = 14563; Match(RR_BRACKET);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 14565; _localctx.ext_type = id_();
				State = 14566; Match(LR_BRACKET);
				State = 14567; _localctx.scale = Match(DECIMAL);
				State = 14568; Match(RR_BRACKET);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 14570; _localctx.ext_type = id_();
				State = 14571; Match(IDENTITY);
				State = 14577;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1840,_ctx) ) {
				case 1:
					{
					State = 14572; Match(LR_BRACKET);
					State = 14573; _localctx.seed = Match(DECIMAL);
					State = 14574; Match(COMMA);
					State = 14575; _localctx.inc = Match(DECIMAL);
					State = 14576; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 14579; _localctx.double_prec = Match(DOUBLE);
				State = 14581;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1841,_ctx) ) {
				case 1:
					{
					State = 14580; Match(PRECISION);
					}
					break;
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 14583; _localctx.unscaled_type = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public IToken dollar;
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode REAL() { return GetToken(TSqlParser.REAL, 0); }
		public ITerminalNode FLOAT() { return GetToken(TSqlParser.FLOAT, 0); }
		public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 1210, RULE_constant);
		int _la;
		try {
			State = 14601;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1846,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 14586; Match(STRING);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 14587; Match(BINARY);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 14589;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1843,_ctx) ) {
				case 1:
					{
					State = 14588; Match(MINUS);
					}
					break;
				}
				State = 14591;
				_la = _input.La(1);
				if ( !(((((_la - 1184)) & ~0x3f) == 0 && ((1L << (_la - 1184)) & ((1L << (DECIMAL - 1184)) | (1L << (FLOAT - 1184)) | (1L << (REAL - 1184)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 14593;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1844,_ctx) ) {
				case 1:
					{
					State = 14592; Match(MINUS);
					}
					break;
				}
				State = 14595; _localctx.dollar = Match(DOLLAR);
				State = 14597;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1845,_ctx) ) {
				case 1:
					{
					State = 14596;
					_la = _input.La(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 14599;
				_la = _input.La(1);
				if ( !(_la==DECIMAL || _la==FLOAT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 14600; parameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primitive_constantContext : ParserRuleContext {
		public IToken dollar;
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode REAL() { return GetToken(TSqlParser.REAL, 0); }
		public ITerminalNode FLOAT() { return GetToken(TSqlParser.FLOAT, 0); }
		public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		public Primitive_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrimitive_constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrimitive_constant(this);
		}
	}

	[RuleVersion(0)]
	public Primitive_constantContext primitive_constant() {
		Primitive_constantContext _localctx = new Primitive_constantContext(_ctx, State);
		EnterRule(_localctx, 1212, RULE_primitive_constant);
		int _la;
		try {
			State = 14612;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1848,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 14603; Match(STRING);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 14604; Match(BINARY);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 14605;
				_la = _input.La(1);
				if ( !(((((_la - 1184)) & ~0x3f) == 0 && ((1L << (_la - 1184)) & ((1L << (DECIMAL - 1184)) | (1L << (FLOAT - 1184)) | (1L << (REAL - 1184)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 14606; _localctx.dollar = Match(DOLLAR);
				State = 14608;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1847,_ctx) ) {
				case 1:
					{
					State = 14607;
					_la = _input.La(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 14610;
				_la = _input.La(1);
				if ( !(_la==DECIMAL || _la==FLOAT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 14611; parameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode ABORT() { return GetToken(TSqlParser.ABORT, 0); }
		public ITerminalNode ABSOLUTE() { return GetToken(TSqlParser.ABSOLUTE, 0); }
		public ITerminalNode ACCENT_SENSITIVITY() { return GetToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		public ITerminalNode ACCESS() { return GetToken(TSqlParser.ACCESS, 0); }
		public ITerminalNode ACTION() { return GetToken(TSqlParser.ACTION, 0); }
		public ITerminalNode ACTIVATION() { return GetToken(TSqlParser.ACTIVATION, 0); }
		public ITerminalNode ACTIVE() { return GetToken(TSqlParser.ACTIVE, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode ADDRESS() { return GetToken(TSqlParser.ADDRESS, 0); }
		public ITerminalNode AES_128() { return GetToken(TSqlParser.AES_128, 0); }
		public ITerminalNode AES_192() { return GetToken(TSqlParser.AES_192, 0); }
		public ITerminalNode AES_256() { return GetToken(TSqlParser.AES_256, 0); }
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode AFTER() { return GetToken(TSqlParser.AFTER, 0); }
		public ITerminalNode AGGREGATE() { return GetToken(TSqlParser.AGGREGATE, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode ALL_CONSTRAINTS() { return GetToken(TSqlParser.ALL_CONSTRAINTS, 0); }
		public ITerminalNode ALL_ERRORMSGS() { return GetToken(TSqlParser.ALL_ERRORMSGS, 0); }
		public ITerminalNode ALL_INDEXES() { return GetToken(TSqlParser.ALL_INDEXES, 0); }
		public ITerminalNode ALL_LEVELS() { return GetToken(TSqlParser.ALL_LEVELS, 0); }
		public ITerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return GetToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, 0); }
		public ITerminalNode ALLOW_PAGE_LOCKS() { return GetToken(TSqlParser.ALLOW_PAGE_LOCKS, 0); }
		public ITerminalNode ALLOW_ROW_LOCKS() { return GetToken(TSqlParser.ALLOW_ROW_LOCKS, 0); }
		public ITerminalNode ALLOW_SNAPSHOT_ISOLATION() { return GetToken(TSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		public ITerminalNode ALLOWED() { return GetToken(TSqlParser.ALLOWED, 0); }
		public ITerminalNode ALWAYS() { return GetToken(TSqlParser.ALWAYS, 0); }
		public ITerminalNode ANSI_DEFAULTS() { return GetToken(TSqlParser.ANSI_DEFAULTS, 0); }
		public ITerminalNode ANSI_NULL_DEFAULT() { return GetToken(TSqlParser.ANSI_NULL_DEFAULT, 0); }
		public ITerminalNode ANSI_NULL_DFLT_OFF() { return GetToken(TSqlParser.ANSI_NULL_DFLT_OFF, 0); }
		public ITerminalNode ANSI_NULL_DFLT_ON() { return GetToken(TSqlParser.ANSI_NULL_DFLT_ON, 0); }
		public ITerminalNode ANSI_NULLS() { return GetToken(TSqlParser.ANSI_NULLS, 0); }
		public ITerminalNode ANSI_PADDING() { return GetToken(TSqlParser.ANSI_PADDING, 0); }
		public ITerminalNode ANSI_WARNINGS() { return GetToken(TSqlParser.ANSI_WARNINGS, 0); }
		public ITerminalNode APP_NAME() { return GetToken(TSqlParser.APP_NAME, 0); }
		public ITerminalNode APPLICATION_LOG() { return GetToken(TSqlParser.APPLICATION_LOG, 0); }
		public ITerminalNode APPLOCK_MODE() { return GetToken(TSqlParser.APPLOCK_MODE, 0); }
		public ITerminalNode APPLOCK_TEST() { return GetToken(TSqlParser.APPLOCK_TEST, 0); }
		public ITerminalNode APPLY() { return GetToken(TSqlParser.APPLY, 0); }
		public ITerminalNode ARITHABORT() { return GetToken(TSqlParser.ARITHABORT, 0); }
		public ITerminalNode ARITHIGNORE() { return GetToken(TSqlParser.ARITHIGNORE, 0); }
		public ITerminalNode ASCII() { return GetToken(TSqlParser.ASCII, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode ASSEMBLYPROPERTY() { return GetToken(TSqlParser.ASSEMBLYPROPERTY, 0); }
		public ITerminalNode AT_KEYWORD() { return GetToken(TSqlParser.AT_KEYWORD, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public ITerminalNode AUDIT_GUID() { return GetToken(TSqlParser.AUDIT_GUID, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode AUTO_CLEANUP() { return GetToken(TSqlParser.AUTO_CLEANUP, 0); }
		public ITerminalNode AUTO_CLOSE() { return GetToken(TSqlParser.AUTO_CLOSE, 0); }
		public ITerminalNode AUTO_CREATE_STATISTICS() { return GetToken(TSqlParser.AUTO_CREATE_STATISTICS, 0); }
		public ITerminalNode AUTO_DROP() { return GetToken(TSqlParser.AUTO_DROP, 0); }
		public ITerminalNode AUTO_SHRINK() { return GetToken(TSqlParser.AUTO_SHRINK, 0); }
		public ITerminalNode AUTO_UPDATE_STATISTICS() { return GetToken(TSqlParser.AUTO_UPDATE_STATISTICS, 0); }
		public ITerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return GetToken(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public ITerminalNode AUTOGROW_ALL_FILES() { return GetToken(TSqlParser.AUTOGROW_ALL_FILES, 0); }
		public ITerminalNode AUTOGROW_SINGLE_FILE() { return GetToken(TSqlParser.AUTOGROW_SINGLE_FILE, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode AVG() { return GetToken(TSqlParser.AVG, 0); }
		public ITerminalNode BACKUP_CLONEDB() { return GetToken(TSqlParser.BACKUP_CLONEDB, 0); }
		public ITerminalNode BACKUP_PRIORITY() { return GetToken(TSqlParser.BACKUP_PRIORITY, 0); }
		public ITerminalNode BASE64() { return GetToken(TSqlParser.BASE64, 0); }
		public ITerminalNode BEGIN_DIALOG() { return GetToken(TSqlParser.BEGIN_DIALOG, 0); }
		public ITerminalNode BIGINT() { return GetToken(TSqlParser.BIGINT, 0); }
		public ITerminalNode BINARY_KEYWORD() { return GetToken(TSqlParser.BINARY_KEYWORD, 0); }
		public ITerminalNode BINARY_CHECKSUM() { return GetToken(TSqlParser.BINARY_CHECKSUM, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode BLOB_STORAGE() { return GetToken(TSqlParser.BLOB_STORAGE, 0); }
		public ITerminalNode BROKER() { return GetToken(TSqlParser.BROKER, 0); }
		public ITerminalNode BROKER_INSTANCE() { return GetToken(TSqlParser.BROKER_INSTANCE, 0); }
		public ITerminalNode BULK_LOGGED() { return GetToken(TSqlParser.BULK_LOGGED, 0); }
		public ITerminalNode CALLER() { return GetToken(TSqlParser.CALLER, 0); }
		public ITerminalNode CAP_CPU_PERCENT() { return GetToken(TSqlParser.CAP_CPU_PERCENT, 0); }
		public ITerminalNode CAST() { return GetToken(TSqlParser.CAST, 0); }
		public ITerminalNode TRY_CAST() { return GetToken(TSqlParser.TRY_CAST, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public ITerminalNode CATCH() { return GetToken(TSqlParser.CATCH, 0); }
		public ITerminalNode CERT_ID() { return GetToken(TSqlParser.CERT_ID, 0); }
		public ITerminalNode CERTENCODED() { return GetToken(TSqlParser.CERTENCODED, 0); }
		public ITerminalNode CERTPRIVATEKEY() { return GetToken(TSqlParser.CERTPRIVATEKEY, 0); }
		public ITerminalNode CHANGE() { return GetToken(TSqlParser.CHANGE, 0); }
		public ITerminalNode CHANGE_RETENTION() { return GetToken(TSqlParser.CHANGE_RETENTION, 0); }
		public ITerminalNode CHANGE_TRACKING() { return GetToken(TSqlParser.CHANGE_TRACKING, 0); }
		public ITerminalNode CHAR() { return GetToken(TSqlParser.CHAR, 0); }
		public ITerminalNode CHARINDEX() { return GetToken(TSqlParser.CHARINDEX, 0); }
		public ITerminalNode CHECKALLOC() { return GetToken(TSqlParser.CHECKALLOC, 0); }
		public ITerminalNode CHECKCATALOG() { return GetToken(TSqlParser.CHECKCATALOG, 0); }
		public ITerminalNode CHECKCONSTRAINTS() { return GetToken(TSqlParser.CHECKCONSTRAINTS, 0); }
		public ITerminalNode CHECKDB() { return GetToken(TSqlParser.CHECKDB, 0); }
		public ITerminalNode CHECKFILEGROUP() { return GetToken(TSqlParser.CHECKFILEGROUP, 0); }
		public ITerminalNode CHECKSUM() { return GetToken(TSqlParser.CHECKSUM, 0); }
		public ITerminalNode CHECKSUM_AGG() { return GetToken(TSqlParser.CHECKSUM_AGG, 0); }
		public ITerminalNode CHECKTABLE() { return GetToken(TSqlParser.CHECKTABLE, 0); }
		public ITerminalNode CLEANTABLE() { return GetToken(TSqlParser.CLEANTABLE, 0); }
		public ITerminalNode CLEANUP() { return GetToken(TSqlParser.CLEANUP, 0); }
		public ITerminalNode CLONEDATABASE() { return GetToken(TSqlParser.CLONEDATABASE, 0); }
		public ITerminalNode COL_LENGTH() { return GetToken(TSqlParser.COL_LENGTH, 0); }
		public ITerminalNode COL_NAME() { return GetToken(TSqlParser.COL_NAME, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public ITerminalNode COLUMN_ENCRYPTION_KEY() { return GetToken(TSqlParser.COLUMN_ENCRYPTION_KEY, 0); }
		public ITerminalNode COLUMN_MASTER_KEY() { return GetToken(TSqlParser.COLUMN_MASTER_KEY, 0); }
		public ITerminalNode COLUMNPROPERTY() { return GetToken(TSqlParser.COLUMNPROPERTY, 0); }
		public ITerminalNode COLUMNS() { return GetToken(TSqlParser.COLUMNS, 0); }
		public ITerminalNode COLUMNSTORE() { return GetToken(TSqlParser.COLUMNSTORE, 0); }
		public ITerminalNode COLUMNSTORE_ARCHIVE() { return GetToken(TSqlParser.COLUMNSTORE_ARCHIVE, 0); }
		public ITerminalNode COMMITTED() { return GetToken(TSqlParser.COMMITTED, 0); }
		public ITerminalNode COMPATIBILITY_LEVEL() { return GetToken(TSqlParser.COMPATIBILITY_LEVEL, 0); }
		public ITerminalNode COMPRESS_ALL_ROW_GROUPS() { return GetToken(TSqlParser.COMPRESS_ALL_ROW_GROUPS, 0); }
		public ITerminalNode COMPRESSION_DELAY() { return GetToken(TSqlParser.COMPRESSION_DELAY, 0); }
		public ITerminalNode CONCAT() { return GetToken(TSqlParser.CONCAT, 0); }
		public ITerminalNode CONCAT_WS() { return GetToken(TSqlParser.CONCAT_WS, 0); }
		public ITerminalNode CONCAT_NULL_YIELDS_NULL() { return GetToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		public ITerminalNode CONTROL() { return GetToken(TSqlParser.CONTROL, 0); }
		public ITerminalNode COOKIE() { return GetToken(TSqlParser.COOKIE, 0); }
		public ITerminalNode COUNT() { return GetToken(TSqlParser.COUNT, 0); }
		public ITerminalNode COUNT_BIG() { return GetToken(TSqlParser.COUNT_BIG, 0); }
		public ITerminalNode COUNTER() { return GetToken(TSqlParser.COUNTER, 0); }
		public ITerminalNode CPU() { return GetToken(TSqlParser.CPU, 0); }
		public ITerminalNode CREATE_NEW() { return GetToken(TSqlParser.CREATE_NEW, 0); }
		public ITerminalNode CREATION_DISPOSITION() { return GetToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode CUME_DIST() { return GetToken(TSqlParser.CUME_DIST, 0); }
		public ITerminalNode CURSOR_CLOSE_ON_COMMIT() { return GetToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public ITerminalNode CURSOR_DEFAULT() { return GetToken(TSqlParser.CURSOR_DEFAULT, 0); }
		public ITerminalNode CURSOR_STATUS() { return GetToken(TSqlParser.CURSOR_STATUS, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public ITerminalNode DATA_PURITY() { return GetToken(TSqlParser.DATA_PURITY, 0); }
		public ITerminalNode DATABASE_PRINCIPAL_ID() { return GetToken(TSqlParser.DATABASE_PRINCIPAL_ID, 0); }
		public ITerminalNode DATABASEPROPERTYEX() { return GetToken(TSqlParser.DATABASEPROPERTYEX, 0); }
		public ITerminalNode DATALENGTH() { return GetToken(TSqlParser.DATALENGTH, 0); }
		public ITerminalNode DATE_CORRELATION_OPTIMIZATION() { return GetToken(TSqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		public ITerminalNode DATEADD() { return GetToken(TSqlParser.DATEADD, 0); }
		public ITerminalNode DATEDIFF() { return GetToken(TSqlParser.DATEDIFF, 0); }
		public ITerminalNode DATENAME() { return GetToken(TSqlParser.DATENAME, 0); }
		public ITerminalNode DATEPART() { return GetToken(TSqlParser.DATEPART, 0); }
		public ITerminalNode DAYS() { return GetToken(TSqlParser.DAYS, 0); }
		public ITerminalNode DB_CHAINING() { return GetToken(TSqlParser.DB_CHAINING, 0); }
		public ITerminalNode DB_FAILOVER() { return GetToken(TSqlParser.DB_FAILOVER, 0); }
		public ITerminalNode DB_ID() { return GetToken(TSqlParser.DB_ID, 0); }
		public ITerminalNode DB_NAME() { return GetToken(TSqlParser.DB_NAME, 0); }
		public ITerminalNode DBCC() { return GetToken(TSqlParser.DBCC, 0); }
		public ITerminalNode DBREINDEX() { return GetToken(TSqlParser.DBREINDEX, 0); }
		public ITerminalNode DECRYPTION() { return GetToken(TSqlParser.DECRYPTION, 0); }
		public ITerminalNode DEFAULT_DOUBLE_QUOTE() { return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0); }
		public ITerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode DEFINITION() { return GetToken(TSqlParser.DEFINITION, 0); }
		public ITerminalNode DELAY() { return GetToken(TSqlParser.DELAY, 0); }
		public ITerminalNode DELAYED_DURABILITY() { return GetToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public ITerminalNode DELETED() { return GetToken(TSqlParser.DELETED, 0); }
		public ITerminalNode DENSE_RANK() { return GetToken(TSqlParser.DENSE_RANK, 0); }
		public ITerminalNode DEPENDENTS() { return GetToken(TSqlParser.DEPENDENTS, 0); }
		public ITerminalNode DES() { return GetToken(TSqlParser.DES, 0); }
		public ITerminalNode DESCRIPTION() { return GetToken(TSqlParser.DESCRIPTION, 0); }
		public ITerminalNode DESX() { return GetToken(TSqlParser.DESX, 0); }
		public ITerminalNode DETERMINISTIC() { return GetToken(TSqlParser.DETERMINISTIC, 0); }
		public ITerminalNode DHCP() { return GetToken(TSqlParser.DHCP, 0); }
		public ITerminalNode DIALOG() { return GetToken(TSqlParser.DIALOG, 0); }
		public ITerminalNode DIFFERENCE() { return GetToken(TSqlParser.DIFFERENCE, 0); }
		public ITerminalNode DIRECTORY_NAME() { return GetToken(TSqlParser.DIRECTORY_NAME, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode DISABLE_BROKER() { return GetToken(TSqlParser.DISABLE_BROKER, 0); }
		public ITerminalNode DISABLED() { return GetToken(TSqlParser.DISABLED, 0); }
		public ITerminalNode DOCUMENT() { return GetToken(TSqlParser.DOCUMENT, 0); }
		public ITerminalNode DROP_EXISTING() { return GetToken(TSqlParser.DROP_EXISTING, 0); }
		public ITerminalNode DROPCLEANBUFFERS() { return GetToken(TSqlParser.DROPCLEANBUFFERS, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(TSqlParser.DYNAMIC, 0); }
		public ITerminalNode ELEMENTS() { return GetToken(TSqlParser.ELEMENTS, 0); }
		public ITerminalNode EMERGENCY() { return GetToken(TSqlParser.EMERGENCY, 0); }
		public ITerminalNode EMPTY() { return GetToken(TSqlParser.EMPTY, 0); }
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode ENABLE_BROKER() { return GetToken(TSqlParser.ENABLE_BROKER, 0); }
		public ITerminalNode ENCRYPTED() { return GetToken(TSqlParser.ENCRYPTED, 0); }
		public ITerminalNode ENCRYPTED_VALUE() { return GetToken(TSqlParser.ENCRYPTED_VALUE, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode ENCRYPTION_TYPE() { return GetToken(TSqlParser.ENCRYPTION_TYPE, 0); }
		public ITerminalNode ENDPOINT_URL() { return GetToken(TSqlParser.ENDPOINT_URL, 0); }
		public ITerminalNode ERROR_BROKER_CONVERSATIONS() { return GetToken(TSqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
		public ITerminalNode ESTIMATEONLY() { return GetToken(TSqlParser.ESTIMATEONLY, 0); }
		public ITerminalNode EXCLUSIVE() { return GetToken(TSqlParser.EXCLUSIVE, 0); }
		public ITerminalNode EXECUTABLE() { return GetToken(TSqlParser.EXECUTABLE, 0); }
		public ITerminalNode EXIST() { return GetToken(TSqlParser.EXIST, 0); }
		public ITerminalNode EXIST_SQUARE_BRACKET() { return GetToken(TSqlParser.EXIST_SQUARE_BRACKET, 0); }
		public ITerminalNode EXPAND() { return GetToken(TSqlParser.EXPAND, 0); }
		public ITerminalNode EXPIRY_DATE() { return GetToken(TSqlParser.EXPIRY_DATE, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(TSqlParser.EXPLICIT, 0); }
		public ITerminalNode EXTENDED_LOGICAL_CHECKS() { return GetToken(TSqlParser.EXTENDED_LOGICAL_CHECKS, 0); }
		public ITerminalNode FAIL_OPERATION() { return GetToken(TSqlParser.FAIL_OPERATION, 0); }
		public ITerminalNode FAILOVER_MODE() { return GetToken(TSqlParser.FAILOVER_MODE, 0); }
		public ITerminalNode FAILURE() { return GetToken(TSqlParser.FAILURE, 0); }
		public ITerminalNode FAILURE_CONDITION_LEVEL() { return GetToken(TSqlParser.FAILURE_CONDITION_LEVEL, 0); }
		public ITerminalNode FAST() { return GetToken(TSqlParser.FAST, 0); }
		public ITerminalNode FAST_FORWARD() { return GetToken(TSqlParser.FAST_FORWARD, 0); }
		public ITerminalNode FILE_ID() { return GetToken(TSqlParser.FILE_ID, 0); }
		public ITerminalNode FILE_IDEX() { return GetToken(TSqlParser.FILE_IDEX, 0); }
		public ITerminalNode FILE_NAME() { return GetToken(TSqlParser.FILE_NAME, 0); }
		public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		public ITerminalNode FILEGROUP_ID() { return GetToken(TSqlParser.FILEGROUP_ID, 0); }
		public ITerminalNode FILEGROUP_NAME() { return GetToken(TSqlParser.FILEGROUP_NAME, 0); }
		public ITerminalNode FILEGROUPPROPERTY() { return GetToken(TSqlParser.FILEGROUPPROPERTY, 0); }
		public ITerminalNode FILEGROWTH() { return GetToken(TSqlParser.FILEGROWTH, 0); }
		public ITerminalNode FILENAME() { return GetToken(TSqlParser.FILENAME, 0); }
		public ITerminalNode FILEPATH() { return GetToken(TSqlParser.FILEPATH, 0); }
		public ITerminalNode FILEPROPERTY() { return GetToken(TSqlParser.FILEPROPERTY, 0); }
		public ITerminalNode FILEPROPERTYEX() { return GetToken(TSqlParser.FILEPROPERTYEX, 0); }
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public ITerminalNode FILTER() { return GetToken(TSqlParser.FILTER, 0); }
		public ITerminalNode FIRST() { return GetToken(TSqlParser.FIRST, 0); }
		public ITerminalNode FIRST_VALUE() { return GetToken(TSqlParser.FIRST_VALUE, 0); }
		public ITerminalNode FMTONLY() { return GetToken(TSqlParser.FMTONLY, 0); }
		public ITerminalNode FOLLOWING() { return GetToken(TSqlParser.FOLLOWING, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public ITerminalNode FORCE_FAILOVER_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode FORCED() { return GetToken(TSqlParser.FORCED, 0); }
		public ITerminalNode FORCEPLAN() { return GetToken(TSqlParser.FORCEPLAN, 0); }
		public ITerminalNode FORCESCAN() { return GetToken(TSqlParser.FORCESCAN, 0); }
		public ITerminalNode FORMAT() { return GetToken(TSqlParser.FORMAT, 0); }
		public ITerminalNode FORWARD_ONLY() { return GetToken(TSqlParser.FORWARD_ONLY, 0); }
		public ITerminalNode FREE() { return GetToken(TSqlParser.FREE, 0); }
		public ITerminalNode FULLSCAN() { return GetToken(TSqlParser.FULLSCAN, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode FULLTEXTCATALOGPROPERTY() { return GetToken(TSqlParser.FULLTEXTCATALOGPROPERTY, 0); }
		public ITerminalNode FULLTEXTSERVICEPROPERTY() { return GetToken(TSqlParser.FULLTEXTSERVICEPROPERTY, 0); }
		public ITerminalNode GB() { return GetToken(TSqlParser.GB, 0); }
		public ITerminalNode GENERATED() { return GetToken(TSqlParser.GENERATED, 0); }
		public ITerminalNode GETDATE() { return GetToken(TSqlParser.GETDATE, 0); }
		public ITerminalNode GETUTCDATE() { return GetToken(TSqlParser.GETUTCDATE, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public ITerminalNode GO() { return GetToken(TSqlParser.GO, 0); }
		public ITerminalNode GREATEST() { return GetToken(TSqlParser.GREATEST, 0); }
		public ITerminalNode GROUP_MAX_REQUESTS() { return GetToken(TSqlParser.GROUP_MAX_REQUESTS, 0); }
		public ITerminalNode GROUPING() { return GetToken(TSqlParser.GROUPING, 0); }
		public ITerminalNode GROUPING_ID() { return GetToken(TSqlParser.GROUPING_ID, 0); }
		public ITerminalNode HADR() { return GetToken(TSqlParser.HADR, 0); }
		public ITerminalNode HAS_DBACCESS() { return GetToken(TSqlParser.HAS_DBACCESS, 0); }
		public ITerminalNode HAS_PERMS_BY_NAME() { return GetToken(TSqlParser.HAS_PERMS_BY_NAME, 0); }
		public ITerminalNode HASH() { return GetToken(TSqlParser.HASH, 0); }
		public ITerminalNode HEALTH_CHECK_TIMEOUT() { return GetToken(TSqlParser.HEALTH_CHECK_TIMEOUT, 0); }
		public ITerminalNode HIDDEN_KEYWORD() { return GetToken(TSqlParser.HIDDEN_KEYWORD, 0); }
		public ITerminalNode HIGH() { return GetToken(TSqlParser.HIGH, 0); }
		public ITerminalNode HONOR_BROKER_PRIORITY() { return GetToken(TSqlParser.HONOR_BROKER_PRIORITY, 0); }
		public ITerminalNode HOURS() { return GetToken(TSqlParser.HOURS, 0); }
		public ITerminalNode IDENT_CURRENT() { return GetToken(TSqlParser.IDENT_CURRENT, 0); }
		public ITerminalNode IDENT_INCR() { return GetToken(TSqlParser.IDENT_INCR, 0); }
		public ITerminalNode IDENT_SEED() { return GetToken(TSqlParser.IDENT_SEED, 0); }
		public ITerminalNode IDENTITY_VALUE() { return GetToken(TSqlParser.IDENTITY_VALUE, 0); }
		public ITerminalNode IGNORE_CONSTRAINTS() { return GetToken(TSqlParser.IGNORE_CONSTRAINTS, 0); }
		public ITerminalNode IGNORE_DUP_KEY() { return GetToken(TSqlParser.IGNORE_DUP_KEY, 0); }
		public ITerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return GetToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public ITerminalNode IGNORE_REPLICATED_TABLE_CACHE() { return GetToken(TSqlParser.IGNORE_REPLICATED_TABLE_CACHE, 0); }
		public ITerminalNode IGNORE_TRIGGERS() { return GetToken(TSqlParser.IGNORE_TRIGGERS, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(TSqlParser.IMMEDIATE, 0); }
		public ITerminalNode IMPERSONATE() { return GetToken(TSqlParser.IMPERSONATE, 0); }
		public ITerminalNode IMPLICIT_TRANSACTIONS() { return GetToken(TSqlParser.IMPLICIT_TRANSACTIONS, 0); }
		public ITerminalNode IMPORTANCE() { return GetToken(TSqlParser.IMPORTANCE, 0); }
		public ITerminalNode INCLUDE_NULL_VALUES() { return GetToken(TSqlParser.INCLUDE_NULL_VALUES, 0); }
		public ITerminalNode INCREMENTAL() { return GetToken(TSqlParser.INCREMENTAL, 0); }
		public ITerminalNode INDEX_COL() { return GetToken(TSqlParser.INDEX_COL, 0); }
		public ITerminalNode INDEXKEY_PROPERTY() { return GetToken(TSqlParser.INDEXKEY_PROPERTY, 0); }
		public ITerminalNode INDEXPROPERTY() { return GetToken(TSqlParser.INDEXPROPERTY, 0); }
		public ITerminalNode INITIATOR() { return GetToken(TSqlParser.INITIATOR, 0); }
		public ITerminalNode INPUT() { return GetToken(TSqlParser.INPUT, 0); }
		public ITerminalNode INSENSITIVE() { return GetToken(TSqlParser.INSENSITIVE, 0); }
		public ITerminalNode INSERTED() { return GetToken(TSqlParser.INSERTED, 0); }
		public ITerminalNode INT() { return GetToken(TSqlParser.INT, 0); }
		public ITerminalNode IP() { return GetToken(TSqlParser.IP, 0); }
		public ITerminalNode IS_MEMBER() { return GetToken(TSqlParser.IS_MEMBER, 0); }
		public ITerminalNode IS_ROLEMEMBER() { return GetToken(TSqlParser.IS_ROLEMEMBER, 0); }
		public ITerminalNode IS_SRVROLEMEMBER() { return GetToken(TSqlParser.IS_SRVROLEMEMBER, 0); }
		public ITerminalNode ISJSON() { return GetToken(TSqlParser.ISJSON, 0); }
		public ITerminalNode ISOLATION() { return GetToken(TSqlParser.ISOLATION, 0); }
		public ITerminalNode JOB() { return GetToken(TSqlParser.JOB, 0); }
		public ITerminalNode JSON() { return GetToken(TSqlParser.JSON, 0); }
		public ITerminalNode JSON_OBJECT() { return GetToken(TSqlParser.JSON_OBJECT, 0); }
		public ITerminalNode JSON_ARRAY() { return GetToken(TSqlParser.JSON_ARRAY, 0); }
		public ITerminalNode JSON_VALUE() { return GetToken(TSqlParser.JSON_VALUE, 0); }
		public ITerminalNode JSON_QUERY() { return GetToken(TSqlParser.JSON_QUERY, 0); }
		public ITerminalNode JSON_MODIFY() { return GetToken(TSqlParser.JSON_MODIFY, 0); }
		public ITerminalNode JSON_PATH_EXISTS() { return GetToken(TSqlParser.JSON_PATH_EXISTS, 0); }
		public ITerminalNode KB() { return GetToken(TSqlParser.KB, 0); }
		public ITerminalNode KEEP() { return GetToken(TSqlParser.KEEP, 0); }
		public ITerminalNode KEEPDEFAULTS() { return GetToken(TSqlParser.KEEPDEFAULTS, 0); }
		public ITerminalNode KEEPFIXED() { return GetToken(TSqlParser.KEEPFIXED, 0); }
		public ITerminalNode KEEPIDENTITY() { return GetToken(TSqlParser.KEEPIDENTITY, 0); }
		public ITerminalNode KEY_SOURCE() { return GetToken(TSqlParser.KEY_SOURCE, 0); }
		public ITerminalNode KEYS() { return GetToken(TSqlParser.KEYS, 0); }
		public ITerminalNode KEYSET() { return GetToken(TSqlParser.KEYSET, 0); }
		public ITerminalNode LAG() { return GetToken(TSqlParser.LAG, 0); }
		public ITerminalNode LAST() { return GetToken(TSqlParser.LAST, 0); }
		public ITerminalNode LAST_VALUE() { return GetToken(TSqlParser.LAST_VALUE, 0); }
		public ITerminalNode LEAD() { return GetToken(TSqlParser.LEAD, 0); }
		public ITerminalNode LEAST() { return GetToken(TSqlParser.LEAST, 0); }
		public ITerminalNode LEN() { return GetToken(TSqlParser.LEN, 0); }
		public ITerminalNode LEVEL() { return GetToken(TSqlParser.LEVEL, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public ITerminalNode LISTENER() { return GetToken(TSqlParser.LISTENER, 0); }
		public ITerminalNode LISTENER_URL() { return GetToken(TSqlParser.LISTENER_URL, 0); }
		public ITerminalNode LOB_COMPACTION() { return GetToken(TSqlParser.LOB_COMPACTION, 0); }
		public ITerminalNode LOCAL() { return GetToken(TSqlParser.LOCAL, 0); }
		public ITerminalNode LOCATION() { return GetToken(TSqlParser.LOCATION, 0); }
		public ITerminalNode LOCK() { return GetToken(TSqlParser.LOCK, 0); }
		public ITerminalNode LOCK_ESCALATION() { return GetToken(TSqlParser.LOCK_ESCALATION, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode LOGINPROPERTY() { return GetToken(TSqlParser.LOGINPROPERTY, 0); }
		public ITerminalNode LOOP() { return GetToken(TSqlParser.LOOP, 0); }
		public ITerminalNode LOW() { return GetToken(TSqlParser.LOW, 0); }
		public ITerminalNode LOWER() { return GetToken(TSqlParser.LOWER, 0); }
		public ITerminalNode LTRIM() { return GetToken(TSqlParser.LTRIM, 0); }
		public ITerminalNode MANUAL() { return GetToken(TSqlParser.MANUAL, 0); }
		public ITerminalNode MARK() { return GetToken(TSqlParser.MARK, 0); }
		public ITerminalNode MASKED() { return GetToken(TSqlParser.MASKED, 0); }
		public ITerminalNode MATERIALIZED() { return GetToken(TSqlParser.MATERIALIZED, 0); }
		public ITerminalNode MAX() { return GetToken(TSqlParser.MAX, 0); }
		public ITerminalNode MAX_CPU_PERCENT() { return GetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public ITerminalNode MAX_DOP() { return GetToken(TSqlParser.MAX_DOP, 0); }
		public ITerminalNode MAX_FILES() { return GetToken(TSqlParser.MAX_FILES, 0); }
		public ITerminalNode MAX_IOPS_PER_VOLUME() { return GetToken(TSqlParser.MAX_IOPS_PER_VOLUME, 0); }
		public ITerminalNode MAX_MEMORY_PERCENT() { return GetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public ITerminalNode MAX_PROCESSES() { return GetToken(TSqlParser.MAX_PROCESSES, 0); }
		public ITerminalNode MAX_QUEUE_READERS() { return GetToken(TSqlParser.MAX_QUEUE_READERS, 0); }
		public ITerminalNode MAX_ROLLOVER_FILES() { return GetToken(TSqlParser.MAX_ROLLOVER_FILES, 0); }
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode MAXRECURSION() { return GetToken(TSqlParser.MAXRECURSION, 0); }
		public ITerminalNode MAXSIZE() { return GetToken(TSqlParser.MAXSIZE, 0); }
		public ITerminalNode MB() { return GetToken(TSqlParser.MB, 0); }
		public ITerminalNode MEDIUM() { return GetToken(TSqlParser.MEDIUM, 0); }
		public ITerminalNode MEMORY_OPTIMIZED_DATA() { return GetToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode MIN() { return GetToken(TSqlParser.MIN, 0); }
		public ITerminalNode MIN_ACTIVE_ROWVERSION() { return GetToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		public ITerminalNode MIN_CPU_PERCENT() { return GetToken(TSqlParser.MIN_CPU_PERCENT, 0); }
		public ITerminalNode MIN_IOPS_PER_VOLUME() { return GetToken(TSqlParser.MIN_IOPS_PER_VOLUME, 0); }
		public ITerminalNode MIN_MEMORY_PERCENT() { return GetToken(TSqlParser.MIN_MEMORY_PERCENT, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public ITerminalNode MIRROR_ADDRESS() { return GetToken(TSqlParser.MIRROR_ADDRESS, 0); }
		public ITerminalNode MIXED_PAGE_ALLOCATION() { return GetToken(TSqlParser.MIXED_PAGE_ALLOCATION, 0); }
		public ITerminalNode MODE() { return GetToken(TSqlParser.MODE, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode MODIFY_SQUARE_BRACKET() { return GetToken(TSqlParser.MODIFY_SQUARE_BRACKET, 0); }
		public ITerminalNode MOVE() { return GetToken(TSqlParser.MOVE, 0); }
		public ITerminalNode MULTI_USER() { return GetToken(TSqlParser.MULTI_USER, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode NCHAR() { return GetToken(TSqlParser.NCHAR, 0); }
		public ITerminalNode NESTED_TRIGGERS() { return GetToken(TSqlParser.NESTED_TRIGGERS, 0); }
		public ITerminalNode NEW_ACCOUNT() { return GetToken(TSqlParser.NEW_ACCOUNT, 0); }
		public ITerminalNode NEW_BROKER() { return GetToken(TSqlParser.NEW_BROKER, 0); }
		public ITerminalNode NEW_PASSWORD() { return GetToken(TSqlParser.NEW_PASSWORD, 0); }
		public ITerminalNode NEWNAME() { return GetToken(TSqlParser.NEWNAME, 0); }
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public ITerminalNode NO_QUERYSTORE() { return GetToken(TSqlParser.NO_QUERYSTORE, 0); }
		public ITerminalNode NO_STATISTICS() { return GetToken(TSqlParser.NO_STATISTICS, 0); }
		public ITerminalNode NO_TRUNCATE() { return GetToken(TSqlParser.NO_TRUNCATE, 0); }
		public ITerminalNode NO_WAIT() { return GetToken(TSqlParser.NO_WAIT, 0); }
		public ITerminalNode NOCOUNT() { return GetToken(TSqlParser.NOCOUNT, 0); }
		public ITerminalNode NODES() { return GetToken(TSqlParser.NODES, 0); }
		public ITerminalNode NOEXEC() { return GetToken(TSqlParser.NOEXEC, 0); }
		public ITerminalNode NOEXPAND() { return GetToken(TSqlParser.NOEXPAND, 0); }
		public ITerminalNode NOINDEX() { return GetToken(TSqlParser.NOINDEX, 0); }
		public ITerminalNode NOLOCK() { return GetToken(TSqlParser.NOLOCK, 0); }
		public ITerminalNode NON_TRANSACTED_ACCESS() { return GetToken(TSqlParser.NON_TRANSACTED_ACCESS, 0); }
		public ITerminalNode NORECOMPUTE() { return GetToken(TSqlParser.NORECOMPUTE, 0); }
		public ITerminalNode NORECOVERY() { return GetToken(TSqlParser.NORECOVERY, 0); }
		public ITerminalNode NOTIFICATIONS() { return GetToken(TSqlParser.NOTIFICATIONS, 0); }
		public ITerminalNode NOWAIT() { return GetToken(TSqlParser.NOWAIT, 0); }
		public ITerminalNode NTILE() { return GetToken(TSqlParser.NTILE, 0); }
		public ITerminalNode NULL_DOUBLE_QUOTE() { return GetToken(TSqlParser.NULL_DOUBLE_QUOTE, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public ITerminalNode NUMBER() { return GetToken(TSqlParser.NUMBER, 0); }
		public ITerminalNode NUMERIC_ROUNDABORT() { return GetToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode OBJECT_DEFINITION() { return GetToken(TSqlParser.OBJECT_DEFINITION, 0); }
		public ITerminalNode OBJECT_ID() { return GetToken(TSqlParser.OBJECT_ID, 0); }
		public ITerminalNode OBJECT_NAME() { return GetToken(TSqlParser.OBJECT_NAME, 0); }
		public ITerminalNode OBJECT_SCHEMA_NAME() { return GetToken(TSqlParser.OBJECT_SCHEMA_NAME, 0); }
		public ITerminalNode OBJECTPROPERTY() { return GetToken(TSqlParser.OBJECTPROPERTY, 0); }
		public ITerminalNode OBJECTPROPERTYEX() { return GetToken(TSqlParser.OBJECTPROPERTYEX, 0); }
		public ITerminalNode OFFLINE() { return GetToken(TSqlParser.OFFLINE, 0); }
		public ITerminalNode OFFSET() { return GetToken(TSqlParser.OFFSET, 0); }
		public ITerminalNode OLD_ACCOUNT() { return GetToken(TSqlParser.OLD_ACCOUNT, 0); }
		public ITerminalNode ONLINE() { return GetToken(TSqlParser.ONLINE, 0); }
		public ITerminalNode ONLY() { return GetToken(TSqlParser.ONLY, 0); }
		public ITerminalNode OPEN_EXISTING() { return GetToken(TSqlParser.OPEN_EXISTING, 0); }
		public ITerminalNode OPENJSON() { return GetToken(TSqlParser.OPENJSON, 0); }
		public ITerminalNode OPTIMISTIC() { return GetToken(TSqlParser.OPTIMISTIC, 0); }
		public ITerminalNode OPTIMIZE() { return GetToken(TSqlParser.OPTIMIZE, 0); }
		public ITerminalNode OPTIMIZE_FOR_SEQUENTIAL_KEY() { return GetToken(TSqlParser.OPTIMIZE_FOR_SEQUENTIAL_KEY, 0); }
		public ITerminalNode ORIGINAL_DB_NAME() { return GetToken(TSqlParser.ORIGINAL_DB_NAME, 0); }
		public ITerminalNode ORIGINAL_LOGIN() { return GetToken(TSqlParser.ORIGINAL_LOGIN, 0); }
		public ITerminalNode OUT() { return GetToken(TSqlParser.OUT, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(TSqlParser.OVERRIDE, 0); }
		public ITerminalNode OWNER() { return GetToken(TSqlParser.OWNER, 0); }
		public ITerminalNode OWNERSHIP() { return GetToken(TSqlParser.OWNERSHIP, 0); }
		public ITerminalNode PAD_INDEX() { return GetToken(TSqlParser.PAD_INDEX, 0); }
		public ITerminalNode PAGE_VERIFY() { return GetToken(TSqlParser.PAGE_VERIFY, 0); }
		public ITerminalNode PAGECOUNT() { return GetToken(TSqlParser.PAGECOUNT, 0); }
		public ITerminalNode PAGLOCK() { return GetToken(TSqlParser.PAGLOCK, 0); }
		public ITerminalNode PARAMETERIZATION() { return GetToken(TSqlParser.PARAMETERIZATION, 0); }
		public ITerminalNode PARSENAME() { return GetToken(TSqlParser.PARSENAME, 0); }
		public ITerminalNode PARSEONLY() { return GetToken(TSqlParser.PARSEONLY, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode PARTITIONS() { return GetToken(TSqlParser.PARTITIONS, 0); }
		public ITerminalNode PARTNER() { return GetToken(TSqlParser.PARTNER, 0); }
		public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		public ITerminalNode PATINDEX() { return GetToken(TSqlParser.PATINDEX, 0); }
		public ITerminalNode PAUSE() { return GetToken(TSqlParser.PAUSE, 0); }
		public ITerminalNode PDW_SHOWSPACEUSED() { return GetToken(TSqlParser.PDW_SHOWSPACEUSED, 0); }
		public ITerminalNode PERCENT_RANK() { return GetToken(TSqlParser.PERCENT_RANK, 0); }
		public ITerminalNode PERCENTILE_CONT() { return GetToken(TSqlParser.PERCENTILE_CONT, 0); }
		public ITerminalNode PERCENTILE_DISC() { return GetToken(TSqlParser.PERCENTILE_DISC, 0); }
		public ITerminalNode PERMISSIONS() { return GetToken(TSqlParser.PERMISSIONS, 0); }
		public ITerminalNode PERSIST_SAMPLE_PERCENT() { return GetToken(TSqlParser.PERSIST_SAMPLE_PERCENT, 0); }
		public ITerminalNode PHYSICAL_ONLY() { return GetToken(TSqlParser.PHYSICAL_ONLY, 0); }
		public ITerminalNode POISON_MESSAGE_HANDLING() { return GetToken(TSqlParser.POISON_MESSAGE_HANDLING, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public ITerminalNode PORT() { return GetToken(TSqlParser.PORT, 0); }
		public ITerminalNode PRECEDING() { return GetToken(TSqlParser.PRECEDING, 0); }
		public ITerminalNode PRIMARY_ROLE() { return GetToken(TSqlParser.PRIMARY_ROLE, 0); }
		public ITerminalNode PRIOR() { return GetToken(TSqlParser.PRIOR, 0); }
		public ITerminalNode PRIORITY() { return GetToken(TSqlParser.PRIORITY, 0); }
		public ITerminalNode PRIORITY_LEVEL() { return GetToken(TSqlParser.PRIORITY_LEVEL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode PRIVATE_KEY() { return GetToken(TSqlParser.PRIVATE_KEY, 0); }
		public ITerminalNode PRIVILEGES() { return GetToken(TSqlParser.PRIVILEGES, 0); }
		public ITerminalNode PROCCACHE() { return GetToken(TSqlParser.PROCCACHE, 0); }
		public ITerminalNode PROCEDURE_NAME() { return GetToken(TSqlParser.PROCEDURE_NAME, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode PROVIDER_KEY_NAME() { return GetToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public ITerminalNode PWDCOMPARE() { return GetToken(TSqlParser.PWDCOMPARE, 0); }
		public ITerminalNode PWDENCRYPT() { return GetToken(TSqlParser.PWDENCRYPT, 0); }
		public ITerminalNode QUERY() { return GetToken(TSqlParser.QUERY, 0); }
		public ITerminalNode QUERY_SQUARE_BRACKET() { return GetToken(TSqlParser.QUERY_SQUARE_BRACKET, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public ITerminalNode QUEUE_DELAY() { return GetToken(TSqlParser.QUEUE_DELAY, 0); }
		public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public ITerminalNode QUOTENAME() { return GetToken(TSqlParser.QUOTENAME, 0); }
		public ITerminalNode RANDOMIZED() { return GetToken(TSqlParser.RANDOMIZED, 0); }
		public ITerminalNode RANGE() { return GetToken(TSqlParser.RANGE, 0); }
		public ITerminalNode RANK() { return GetToken(TSqlParser.RANK, 0); }
		public ITerminalNode RC2() { return GetToken(TSqlParser.RC2, 0); }
		public ITerminalNode RC4() { return GetToken(TSqlParser.RC4, 0); }
		public ITerminalNode RC4_128() { return GetToken(TSqlParser.RC4_128, 0); }
		public ITerminalNode READ_COMMITTED_SNAPSHOT() { return GetToken(TSqlParser.READ_COMMITTED_SNAPSHOT, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode READ_ONLY_ROUTING_LIST() { return GetToken(TSqlParser.READ_ONLY_ROUTING_LIST, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(TSqlParser.READ_WRITE, 0); }
		public ITerminalNode READCOMMITTED() { return GetToken(TSqlParser.READCOMMITTED, 0); }
		public ITerminalNode READCOMMITTEDLOCK() { return GetToken(TSqlParser.READCOMMITTEDLOCK, 0); }
		public ITerminalNode READONLY() { return GetToken(TSqlParser.READONLY, 0); }
		public ITerminalNode READPAST() { return GetToken(TSqlParser.READPAST, 0); }
		public ITerminalNode READUNCOMMITTED() { return GetToken(TSqlParser.READUNCOMMITTED, 0); }
		public ITerminalNode READWRITE() { return GetToken(TSqlParser.READWRITE, 0); }
		public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		public ITerminalNode RECEIVE() { return GetToken(TSqlParser.RECEIVE, 0); }
		public ITerminalNode RECOMPILE() { return GetToken(TSqlParser.RECOMPILE, 0); }
		public ITerminalNode RECOVERY() { return GetToken(TSqlParser.RECOVERY, 0); }
		public ITerminalNode RECURSIVE_TRIGGERS() { return GetToken(TSqlParser.RECURSIVE_TRIGGERS, 0); }
		public ITerminalNode RELATIVE() { return GetToken(TSqlParser.RELATIVE, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode REMOTE_PROC_TRANSACTIONS() { return GetToken(TSqlParser.REMOTE_PROC_TRANSACTIONS, 0); }
		public ITerminalNode REMOTE_SERVICE_NAME() { return GetToken(TSqlParser.REMOTE_SERVICE_NAME, 0); }
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode REORGANIZE() { return GetToken(TSqlParser.REORGANIZE, 0); }
		public ITerminalNode REPAIR_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.REPAIR_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode REPAIR_FAST() { return GetToken(TSqlParser.REPAIR_FAST, 0); }
		public ITerminalNode REPAIR_REBUILD() { return GetToken(TSqlParser.REPAIR_REBUILD, 0); }
		public ITerminalNode REPEATABLE() { return GetToken(TSqlParser.REPEATABLE, 0); }
		public ITerminalNode REPEATABLEREAD() { return GetToken(TSqlParser.REPEATABLEREAD, 0); }
		public ITerminalNode REPLACE() { return GetToken(TSqlParser.REPLACE, 0); }
		public ITerminalNode REPLICA() { return GetToken(TSqlParser.REPLICA, 0); }
		public ITerminalNode REPLICATE() { return GetToken(TSqlParser.REPLICATE, 0); }
		public ITerminalNode REQUEST_MAX_CPU_TIME_SEC() { return GetToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, 0); }
		public ITerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT() { return GetToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, 0); }
		public ITerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return GetToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, 0); }
		public ITerminalNode REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT() { return GetToken(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0); }
		public ITerminalNode RESAMPLE() { return GetToken(TSqlParser.RESAMPLE, 0); }
		public ITerminalNode RESERVE_DISK_SPACE() { return GetToken(TSqlParser.RESERVE_DISK_SPACE, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode RESOURCE_MANAGER_LOCATION() { return GetToken(TSqlParser.RESOURCE_MANAGER_LOCATION, 0); }
		public ITerminalNode RESTRICTED_USER() { return GetToken(TSqlParser.RESTRICTED_USER, 0); }
		public ITerminalNode RESUMABLE() { return GetToken(TSqlParser.RESUMABLE, 0); }
		public ITerminalNode RETENTION() { return GetToken(TSqlParser.RETENTION, 0); }
		public ITerminalNode REVERSE() { return GetToken(TSqlParser.REVERSE, 0); }
		public ITerminalNode ROBUST() { return GetToken(TSqlParser.ROBUST, 0); }
		public ITerminalNode ROOT() { return GetToken(TSqlParser.ROOT, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		public ITerminalNode ROW_NUMBER() { return GetToken(TSqlParser.ROW_NUMBER, 0); }
		public ITerminalNode ROWGUID() { return GetToken(TSqlParser.ROWGUID, 0); }
		public ITerminalNode ROWLOCK() { return GetToken(TSqlParser.ROWLOCK, 0); }
		public ITerminalNode ROWS() { return GetToken(TSqlParser.ROWS, 0); }
		public ITerminalNode RTRIM() { return GetToken(TSqlParser.RTRIM, 0); }
		public ITerminalNode SAMPLE() { return GetToken(TSqlParser.SAMPLE, 0); }
		public ITerminalNode SCHEMA_ID() { return GetToken(TSqlParser.SCHEMA_ID, 0); }
		public ITerminalNode SCHEMA_NAME() { return GetToken(TSqlParser.SCHEMA_NAME, 0); }
		public ITerminalNode SCHEMABINDING() { return GetToken(TSqlParser.SCHEMABINDING, 0); }
		public ITerminalNode SCOPE_IDENTITY() { return GetToken(TSqlParser.SCOPE_IDENTITY, 0); }
		public ITerminalNode SCOPED() { return GetToken(TSqlParser.SCOPED, 0); }
		public ITerminalNode SCROLL() { return GetToken(TSqlParser.SCROLL, 0); }
		public ITerminalNode SCROLL_LOCKS() { return GetToken(TSqlParser.SCROLL_LOCKS, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode SECONDARY() { return GetToken(TSqlParser.SECONDARY, 0); }
		public ITerminalNode SECONDARY_ONLY() { return GetToken(TSqlParser.SECONDARY_ONLY, 0); }
		public ITerminalNode SECONDARY_ROLE() { return GetToken(TSqlParser.SECONDARY_ROLE, 0); }
		public ITerminalNode SECONDS() { return GetToken(TSqlParser.SECONDS, 0); }
		public ITerminalNode SECRET() { return GetToken(TSqlParser.SECRET, 0); }
		public ITerminalNode SECURABLES() { return GetToken(TSqlParser.SECURABLES, 0); }
		public ITerminalNode SECURITY() { return GetToken(TSqlParser.SECURITY, 0); }
		public ITerminalNode SECURITY_LOG() { return GetToken(TSqlParser.SECURITY_LOG, 0); }
		public ITerminalNode SEEDING_MODE() { return GetToken(TSqlParser.SEEDING_MODE, 0); }
		public ITerminalNode SELF() { return GetToken(TSqlParser.SELF, 0); }
		public ITerminalNode SEMI_SENSITIVE() { return GetToken(TSqlParser.SEMI_SENSITIVE, 0); }
		public ITerminalNode SEND() { return GetToken(TSqlParser.SEND, 0); }
		public ITerminalNode SENT() { return GetToken(TSqlParser.SENT, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		public ITerminalNode SEQUENCE_NUMBER() { return GetToken(TSqlParser.SEQUENCE_NUMBER, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(TSqlParser.SERIALIZABLE, 0); }
		public ITerminalNode SERVERPROPERTY() { return GetToken(TSqlParser.SERVERPROPERTY, 0); }
		public ITerminalNode SERVICEBROKER() { return GetToken(TSqlParser.SERVICEBROKER, 0); }
		public ITerminalNode SESSIONPROPERTY() { return GetToken(TSqlParser.SESSIONPROPERTY, 0); }
		public ITerminalNode SESSION_TIMEOUT() { return GetToken(TSqlParser.SESSION_TIMEOUT, 0); }
		public ITerminalNode SETERROR() { return GetToken(TSqlParser.SETERROR, 0); }
		public ITerminalNode SHARE() { return GetToken(TSqlParser.SHARE, 0); }
		public ITerminalNode SHARED() { return GetToken(TSqlParser.SHARED, 0); }
		public ITerminalNode SHOWCONTIG() { return GetToken(TSqlParser.SHOWCONTIG, 0); }
		public ITerminalNode SHOWPLAN() { return GetToken(TSqlParser.SHOWPLAN, 0); }
		public ITerminalNode SHOWPLAN_ALL() { return GetToken(TSqlParser.SHOWPLAN_ALL, 0); }
		public ITerminalNode SHOWPLAN_TEXT() { return GetToken(TSqlParser.SHOWPLAN_TEXT, 0); }
		public ITerminalNode SHOWPLAN_XML() { return GetToken(TSqlParser.SHOWPLAN_XML, 0); }
		public ITerminalNode SIGNATURE() { return GetToken(TSqlParser.SIGNATURE, 0); }
		public ITerminalNode SIMPLE() { return GetToken(TSqlParser.SIMPLE, 0); }
		public ITerminalNode SINGLE_USER() { return GetToken(TSqlParser.SINGLE_USER, 0); }
		public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		public ITerminalNode SMALLINT() { return GetToken(TSqlParser.SMALLINT, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(TSqlParser.SNAPSHOT, 0); }
		public ITerminalNode SORT_IN_TEMPDB() { return GetToken(TSqlParser.SORT_IN_TEMPDB, 0); }
		public ITerminalNode SOUNDEX() { return GetToken(TSqlParser.SOUNDEX, 0); }
		public ITerminalNode SPACE_KEYWORD() { return GetToken(TSqlParser.SPACE_KEYWORD, 0); }
		public ITerminalNode SPARSE() { return GetToken(TSqlParser.SPARSE, 0); }
		public ITerminalNode SPATIAL_WINDOW_MAX_CELLS() { return GetToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public ITerminalNode SQL_VARIANT_PROPERTY() { return GetToken(TSqlParser.SQL_VARIANT_PROPERTY, 0); }
		public ITerminalNode STANDBY() { return GetToken(TSqlParser.STANDBY, 0); }
		public ITerminalNode START_DATE() { return GetToken(TSqlParser.START_DATE, 0); }
		public ITerminalNode STATIC() { return GetToken(TSqlParser.STATIC, 0); }
		public ITerminalNode STATISTICS_INCREMENTAL() { return GetToken(TSqlParser.STATISTICS_INCREMENTAL, 0); }
		public ITerminalNode STATISTICS_NORECOMPUTE() { return GetToken(TSqlParser.STATISTICS_NORECOMPUTE, 0); }
		public ITerminalNode STATS_DATE() { return GetToken(TSqlParser.STATS_DATE, 0); }
		public ITerminalNode STATS_STREAM() { return GetToken(TSqlParser.STATS_STREAM, 0); }
		public ITerminalNode STATUS() { return GetToken(TSqlParser.STATUS, 0); }
		public ITerminalNode STATUSONLY() { return GetToken(TSqlParser.STATUSONLY, 0); }
		public ITerminalNode STDEV() { return GetToken(TSqlParser.STDEV, 0); }
		public ITerminalNode STDEVP() { return GetToken(TSqlParser.STDEVP, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public ITerminalNode STR() { return GetToken(TSqlParser.STR, 0); }
		public ITerminalNode STRING_AGG() { return GetToken(TSqlParser.STRING_AGG, 0); }
		public ITerminalNode STRING_ESCAPE() { return GetToken(TSqlParser.STRING_ESCAPE, 0); }
		public ITerminalNode STUFF() { return GetToken(TSqlParser.STUFF, 0); }
		public ITerminalNode SUBJECT() { return GetToken(TSqlParser.SUBJECT, 0); }
		public ITerminalNode SUBSCRIBE() { return GetToken(TSqlParser.SUBSCRIBE, 0); }
		public ITerminalNode SUBSCRIPTION() { return GetToken(TSqlParser.SUBSCRIPTION, 0); }
		public ITerminalNode SUBSTRING() { return GetToken(TSqlParser.SUBSTRING, 0); }
		public ITerminalNode SUM() { return GetToken(TSqlParser.SUM, 0); }
		public ITerminalNode SUSER_ID() { return GetToken(TSqlParser.SUSER_ID, 0); }
		public ITerminalNode SUSER_NAME() { return GetToken(TSqlParser.SUSER_NAME, 0); }
		public ITerminalNode SUSER_SID() { return GetToken(TSqlParser.SUSER_SID, 0); }
		public ITerminalNode SUSER_SNAME() { return GetToken(TSqlParser.SUSER_SNAME, 0); }
		public ITerminalNode SUSPEND() { return GetToken(TSqlParser.SUSPEND, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode SYNCHRONOUS_COMMIT() { return GetToken(TSqlParser.SYNCHRONOUS_COMMIT, 0); }
		public ITerminalNode SYNONYM() { return GetToken(TSqlParser.SYNONYM, 0); }
		public ITerminalNode SYSTEM() { return GetToken(TSqlParser.SYSTEM, 0); }
		public ITerminalNode TABLERESULTS() { return GetToken(TSqlParser.TABLERESULTS, 0); }
		public ITerminalNode TABLOCK() { return GetToken(TSqlParser.TABLOCK, 0); }
		public ITerminalNode TABLOCKX() { return GetToken(TSqlParser.TABLOCKX, 0); }
		public ITerminalNode TAKE() { return GetToken(TSqlParser.TAKE, 0); }
		public ITerminalNode TARGET_RECOVERY_TIME() { return GetToken(TSqlParser.TARGET_RECOVERY_TIME, 0); }
		public ITerminalNode TB() { return GetToken(TSqlParser.TB, 0); }
		public ITerminalNode TEXTIMAGE_ON() { return GetToken(TSqlParser.TEXTIMAGE_ON, 0); }
		public ITerminalNode THROW() { return GetToken(TSqlParser.THROW, 0); }
		public ITerminalNode TIES() { return GetToken(TSqlParser.TIES, 0); }
		public ITerminalNode TIME() { return GetToken(TSqlParser.TIME, 0); }
		public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public ITerminalNode TIMER() { return GetToken(TSqlParser.TIMER, 0); }
		public ITerminalNode TINYINT() { return GetToken(TSqlParser.TINYINT, 0); }
		public ITerminalNode TORN_PAGE_DETECTION() { return GetToken(TSqlParser.TORN_PAGE_DETECTION, 0); }
		public ITerminalNode TRACKING() { return GetToken(TSqlParser.TRACKING, 0); }
		public ITerminalNode TRANSACTION_ID() { return GetToken(TSqlParser.TRANSACTION_ID, 0); }
		public ITerminalNode TRANSFORM_NOISE_WORDS() { return GetToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public ITerminalNode TRANSLATE() { return GetToken(TSqlParser.TRANSLATE, 0); }
		public ITerminalNode TRIM() { return GetToken(TSqlParser.TRIM, 0); }
		public ITerminalNode TRIPLE_DES() { return GetToken(TSqlParser.TRIPLE_DES, 0); }
		public ITerminalNode TRIPLE_DES_3KEY() { return GetToken(TSqlParser.TRIPLE_DES_3KEY, 0); }
		public ITerminalNode TRUSTWORTHY() { return GetToken(TSqlParser.TRUSTWORTHY, 0); }
		public ITerminalNode TRY() { return GetToken(TSqlParser.TRY, 0); }
		public ITerminalNode TSQL() { return GetToken(TSqlParser.TSQL, 0); }
		public ITerminalNode TWO_DIGIT_YEAR_CUTOFF() { return GetToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode TYPE_ID() { return GetToken(TSqlParser.TYPE_ID, 0); }
		public ITerminalNode TYPE_NAME() { return GetToken(TSqlParser.TYPE_NAME, 0); }
		public ITerminalNode TYPE_WARNING() { return GetToken(TSqlParser.TYPE_WARNING, 0); }
		public ITerminalNode TYPEPROPERTY() { return GetToken(TSqlParser.TYPEPROPERTY, 0); }
		public ITerminalNode UNBOUNDED() { return GetToken(TSqlParser.UNBOUNDED, 0); }
		public ITerminalNode UNCOMMITTED() { return GetToken(TSqlParser.UNCOMMITTED, 0); }
		public ITerminalNode UNICODE() { return GetToken(TSqlParser.UNICODE, 0); }
		public ITerminalNode UNKNOWN() { return GetToken(TSqlParser.UNKNOWN, 0); }
		public ITerminalNode UNLIMITED() { return GetToken(TSqlParser.UNLIMITED, 0); }
		public ITerminalNode UNMASK() { return GetToken(TSqlParser.UNMASK, 0); }
		public ITerminalNode UOW() { return GetToken(TSqlParser.UOW, 0); }
		public ITerminalNode UPDLOCK() { return GetToken(TSqlParser.UPDLOCK, 0); }
		public ITerminalNode UPPER() { return GetToken(TSqlParser.UPPER, 0); }
		public ITerminalNode USER_ID() { return GetToken(TSqlParser.USER_ID, 0); }
		public ITerminalNode USER_NAME() { return GetToken(TSqlParser.USER_NAME, 0); }
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public ITerminalNode VALID_XML() { return GetToken(TSqlParser.VALID_XML, 0); }
		public ITerminalNode VALIDATION() { return GetToken(TSqlParser.VALIDATION, 0); }
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ITerminalNode VALUE_SQUARE_BRACKET() { return GetToken(TSqlParser.VALUE_SQUARE_BRACKET, 0); }
		public ITerminalNode VAR() { return GetToken(TSqlParser.VAR, 0); }
		public ITerminalNode VARBINARY_KEYWORD() { return GetToken(TSqlParser.VARBINARY_KEYWORD, 0); }
		public ITerminalNode VARP() { return GetToken(TSqlParser.VARP, 0); }
		public ITerminalNode VERIFY_CLONEDB() { return GetToken(TSqlParser.VERIFY_CLONEDB, 0); }
		public ITerminalNode VERSION() { return GetToken(TSqlParser.VERSION, 0); }
		public ITerminalNode VIEW_METADATA() { return GetToken(TSqlParser.VIEW_METADATA, 0); }
		public ITerminalNode VIEWS() { return GetToken(TSqlParser.VIEWS, 0); }
		public ITerminalNode WAIT() { return GetToken(TSqlParser.WAIT, 0); }
		public ITerminalNode WELL_FORMED_XML() { return GetToken(TSqlParser.WELL_FORMED_XML, 0); }
		public ITerminalNode WITHOUT_ARRAY_WRAPPER() { return GetToken(TSqlParser.WITHOUT_ARRAY_WRAPPER, 0); }
		public ITerminalNode WORK() { return GetToken(TSqlParser.WORK, 0); }
		public ITerminalNode WORKLOAD() { return GetToken(TSqlParser.WORKLOAD, 0); }
		public ITerminalNode XLOCK() { return GetToken(TSqlParser.XLOCK, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode XML_COMPRESSION() { return GetToken(TSqlParser.XML_COMPRESSION, 0); }
		public ITerminalNode XMLDATA() { return GetToken(TSqlParser.XMLDATA, 0); }
		public ITerminalNode XMLNAMESPACES() { return GetToken(TSqlParser.XMLNAMESPACES, 0); }
		public ITerminalNode XMLSCHEMA() { return GetToken(TSqlParser.XMLSCHEMA, 0); }
		public ITerminalNode XSINIL() { return GetToken(TSqlParser.XSINIL, 0); }
		public ITerminalNode ZONE() { return GetToken(TSqlParser.ZONE, 0); }
		public ITerminalNode ABORT_AFTER_WAIT() { return GetToken(TSqlParser.ABORT_AFTER_WAIT, 0); }
		public ITerminalNode ABSENT() { return GetToken(TSqlParser.ABSENT, 0); }
		public ITerminalNode ADMINISTER() { return GetToken(TSqlParser.ADMINISTER, 0); }
		public ITerminalNode AES() { return GetToken(TSqlParser.AES, 0); }
		public ITerminalNode ALLOW_CONNECTIONS() { return GetToken(TSqlParser.ALLOW_CONNECTIONS, 0); }
		public ITerminalNode ALLOW_MULTIPLE_EVENT_LOSS() { return GetToken(TSqlParser.ALLOW_MULTIPLE_EVENT_LOSS, 0); }
		public ITerminalNode ALLOW_SINGLE_EVENT_LOSS() { return GetToken(TSqlParser.ALLOW_SINGLE_EVENT_LOSS, 0); }
		public ITerminalNode ANONYMOUS() { return GetToken(TSqlParser.ANONYMOUS, 0); }
		public ITerminalNode APPEND() { return GetToken(TSqlParser.APPEND, 0); }
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode ASYNCHRONOUS_COMMIT() { return GetToken(TSqlParser.ASYNCHRONOUS_COMMIT, 0); }
		public ITerminalNode AUTHENTICATE() { return GetToken(TSqlParser.AUTHENTICATE, 0); }
		public ITerminalNode AUTHENTICATION() { return GetToken(TSqlParser.AUTHENTICATION, 0); }
		public ITerminalNode AUTOMATED_BACKUP_PREFERENCE() { return GetToken(TSqlParser.AUTOMATED_BACKUP_PREFERENCE, 0); }
		public ITerminalNode AUTOMATIC() { return GetToken(TSqlParser.AUTOMATIC, 0); }
		public ITerminalNode AVAILABILITY_MODE() { return GetToken(TSqlParser.AVAILABILITY_MODE, 0); }
		public ITerminalNode BEFORE() { return GetToken(TSqlParser.BEFORE, 0); }
		public ITerminalNode BLOCK() { return GetToken(TSqlParser.BLOCK, 0); }
		public ITerminalNode BLOCKERS() { return GetToken(TSqlParser.BLOCKERS, 0); }
		public ITerminalNode BLOCKSIZE() { return GetToken(TSqlParser.BLOCKSIZE, 0); }
		public ITerminalNode BLOCKING_HIERARCHY() { return GetToken(TSqlParser.BLOCKING_HIERARCHY, 0); }
		public ITerminalNode BUFFER() { return GetToken(TSqlParser.BUFFER, 0); }
		public ITerminalNode BUFFERCOUNT() { return GetToken(TSqlParser.BUFFERCOUNT, 0); }
		public ITerminalNode CACHE() { return GetToken(TSqlParser.CACHE, 0); }
		public ITerminalNode CALLED() { return GetToken(TSqlParser.CALLED, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode CHANGETABLE() { return GetToken(TSqlParser.CHANGETABLE, 0); }
		public ITerminalNode CHANGES() { return GetToken(TSqlParser.CHANGES, 0); }
		public ITerminalNode CHECK_POLICY() { return GetToken(TSqlParser.CHECK_POLICY, 0); }
		public ITerminalNode CHECK_EXPIRATION() { return GetToken(TSqlParser.CHECK_EXPIRATION, 0); }
		public ITerminalNode CLASSIFIER_FUNCTION() { return GetToken(TSqlParser.CLASSIFIER_FUNCTION, 0); }
		public ITerminalNode CLUSTER() { return GetToken(TSqlParser.CLUSTER, 0); }
		public ITerminalNode COMPRESS() { return GetToken(TSqlParser.COMPRESS, 0); }
		public ITerminalNode COMPRESSION() { return GetToken(TSqlParser.COMPRESSION, 0); }
		public ITerminalNode CONNECT() { return GetToken(TSqlParser.CONNECT, 0); }
		public ITerminalNode CONNECTION() { return GetToken(TSqlParser.CONNECTION, 0); }
		public ITerminalNode CONFIGURATION() { return GetToken(TSqlParser.CONFIGURATION, 0); }
		public ITerminalNode CONNECTIONPROPERTY() { return GetToken(TSqlParser.CONNECTIONPROPERTY, 0); }
		public ITerminalNode CONTAINMENT() { return GetToken(TSqlParser.CONTAINMENT, 0); }
		public ITerminalNode CONTEXT() { return GetToken(TSqlParser.CONTEXT, 0); }
		public ITerminalNode CONTEXT_INFO() { return GetToken(TSqlParser.CONTEXT_INFO, 0); }
		public ITerminalNode CONTINUE_AFTER_ERROR() { return GetToken(TSqlParser.CONTINUE_AFTER_ERROR, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public ITerminalNode CONTRACT_NAME() { return GetToken(TSqlParser.CONTRACT_NAME, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode COPY_ONLY() { return GetToken(TSqlParser.COPY_ONLY, 0); }
		public ITerminalNode CURRENT_REQUEST_ID() { return GetToken(TSqlParser.CURRENT_REQUEST_ID, 0); }
		public ITerminalNode CURRENT_TRANSACTION_ID() { return GetToken(TSqlParser.CURRENT_TRANSACTION_ID, 0); }
		public ITerminalNode CYCLE() { return GetToken(TSqlParser.CYCLE, 0); }
		public ITerminalNode DATA_COMPRESSION() { return GetToken(TSqlParser.DATA_COMPRESSION, 0); }
		public ITerminalNode DATA_SOURCE() { return GetToken(TSqlParser.DATA_SOURCE, 0); }
		public ITerminalNode DATABASE_MIRRORING() { return GetToken(TSqlParser.DATABASE_MIRRORING, 0); }
		public ITerminalNode DATASPACE() { return GetToken(TSqlParser.DATASPACE, 0); }
		public ITerminalNode DDL() { return GetToken(TSqlParser.DDL, 0); }
		public ITerminalNode DECOMPRESS() { return GetToken(TSqlParser.DECOMPRESS, 0); }
		public ITerminalNode DEFAULT_DATABASE() { return GetToken(TSqlParser.DEFAULT_DATABASE, 0); }
		public ITerminalNode DEFAULT_SCHEMA() { return GetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public ITerminalNode DIAGNOSTICS() { return GetToken(TSqlParser.DIAGNOSTICS, 0); }
		public ITerminalNode DIFFERENTIAL() { return GetToken(TSqlParser.DIFFERENTIAL, 0); }
		public ITerminalNode DISTRIBUTION() { return GetToken(TSqlParser.DISTRIBUTION, 0); }
		public ITerminalNode DTC_SUPPORT() { return GetToken(TSqlParser.DTC_SUPPORT, 0); }
		public ITerminalNode ENABLED() { return GetToken(TSqlParser.ENABLED, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public ITerminalNode ERROR() { return GetToken(TSqlParser.ERROR, 0); }
		public ITerminalNode ERROR_LINE() { return GetToken(TSqlParser.ERROR_LINE, 0); }
		public ITerminalNode ERROR_MESSAGE() { return GetToken(TSqlParser.ERROR_MESSAGE, 0); }
		public ITerminalNode ERROR_NUMBER() { return GetToken(TSqlParser.ERROR_NUMBER, 0); }
		public ITerminalNode ERROR_PROCEDURE() { return GetToken(TSqlParser.ERROR_PROCEDURE, 0); }
		public ITerminalNode ERROR_SEVERITY() { return GetToken(TSqlParser.ERROR_SEVERITY, 0); }
		public ITerminalNode ERROR_STATE() { return GetToken(TSqlParser.ERROR_STATE, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode EVENTDATA() { return GetToken(TSqlParser.EVENTDATA, 0); }
		public ITerminalNode EVENT_RETENTION_MODE() { return GetToken(TSqlParser.EVENT_RETENTION_MODE, 0); }
		public ITerminalNode EXECUTABLE_FILE() { return GetToken(TSqlParser.EXECUTABLE_FILE, 0); }
		public ITerminalNode EXPIREDATE() { return GetToken(TSqlParser.EXPIREDATE, 0); }
		public ITerminalNode EXTENSION() { return GetToken(TSqlParser.EXTENSION, 0); }
		public ITerminalNode EXTERNAL_ACCESS() { return GetToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		public ITerminalNode FAILOVER() { return GetToken(TSqlParser.FAILOVER, 0); }
		public ITerminalNode FAILURECONDITIONLEVEL() { return GetToken(TSqlParser.FAILURECONDITIONLEVEL, 0); }
		public ITerminalNode FAN_IN() { return GetToken(TSqlParser.FAN_IN, 0); }
		public ITerminalNode FILE_SNAPSHOT() { return GetToken(TSqlParser.FILE_SNAPSHOT, 0); }
		public ITerminalNode FORCESEEK() { return GetToken(TSqlParser.FORCESEEK, 0); }
		public ITerminalNode FORCE_SERVICE_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode FORMATMESSAGE() { return GetToken(TSqlParser.FORMATMESSAGE, 0); }
		public ITerminalNode GET() { return GetToken(TSqlParser.GET, 0); }
		public ITerminalNode GET_FILESTREAM_TRANSACTION_CONTEXT() { return GetToken(TSqlParser.GET_FILESTREAM_TRANSACTION_CONTEXT, 0); }
		public ITerminalNode GETANCESTOR() { return GetToken(TSqlParser.GETANCESTOR, 0); }
		public ITerminalNode GETANSINULL() { return GetToken(TSqlParser.GETANSINULL, 0); }
		public ITerminalNode GETDESCENDANT() { return GetToken(TSqlParser.GETDESCENDANT, 0); }
		public ITerminalNode GETLEVEL() { return GetToken(TSqlParser.GETLEVEL, 0); }
		public ITerminalNode GETREPARENTEDVALUE() { return GetToken(TSqlParser.GETREPARENTEDVALUE, 0); }
		public ITerminalNode GETROOT() { return GetToken(TSqlParser.GETROOT, 0); }
		public ITerminalNode GOVERNOR() { return GetToken(TSqlParser.GOVERNOR, 0); }
		public ITerminalNode HASHED() { return GetToken(TSqlParser.HASHED, 0); }
		public ITerminalNode HEALTHCHECKTIMEOUT() { return GetToken(TSqlParser.HEALTHCHECKTIMEOUT, 0); }
		public ITerminalNode HEAP() { return GetToken(TSqlParser.HEAP, 0); }
		public ITerminalNode HIERARCHYID() { return GetToken(TSqlParser.HIERARCHYID, 0); }
		public ITerminalNode HOST_ID() { return GetToken(TSqlParser.HOST_ID, 0); }
		public ITerminalNode HOST_NAME() { return GetToken(TSqlParser.HOST_NAME, 0); }
		public ITerminalNode IIF() { return GetToken(TSqlParser.IIF, 0); }
		public ITerminalNode IO() { return GetToken(TSqlParser.IO, 0); }
		public ITerminalNode INCLUDE() { return GetToken(TSqlParser.INCLUDE, 0); }
		public ITerminalNode INCREMENT() { return GetToken(TSqlParser.INCREMENT, 0); }
		public ITerminalNode INFINITE() { return GetToken(TSqlParser.INFINITE, 0); }
		public ITerminalNode INIT() { return GetToken(TSqlParser.INIT, 0); }
		public ITerminalNode INSTEAD() { return GetToken(TSqlParser.INSTEAD, 0); }
		public ITerminalNode ISDESCENDANTOF() { return GetToken(TSqlParser.ISDESCENDANTOF, 0); }
		public ITerminalNode ISNULL() { return GetToken(TSqlParser.ISNULL, 0); }
		public ITerminalNode ISNUMERIC() { return GetToken(TSqlParser.ISNUMERIC, 0); }
		public ITerminalNode KERBEROS() { return GetToken(TSqlParser.KERBEROS, 0); }
		public ITerminalNode KEY_PATH() { return GetToken(TSqlParser.KEY_PATH, 0); }
		public ITerminalNode KEY_STORE_PROVIDER_NAME() { return GetToken(TSqlParser.KEY_STORE_PROVIDER_NAME, 0); }
		public ITerminalNode LANGUAGE() { return GetToken(TSqlParser.LANGUAGE, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public ITerminalNode LIFETIME() { return GetToken(TSqlParser.LIFETIME, 0); }
		public ITerminalNode LINKED() { return GetToken(TSqlParser.LINKED, 0); }
		public ITerminalNode LINUX() { return GetToken(TSqlParser.LINUX, 0); }
		public ITerminalNode LISTENER_IP() { return GetToken(TSqlParser.LISTENER_IP, 0); }
		public ITerminalNode LISTENER_PORT() { return GetToken(TSqlParser.LISTENER_PORT, 0); }
		public ITerminalNode LOCAL_SERVICE_NAME() { return GetToken(TSqlParser.LOCAL_SERVICE_NAME, 0); }
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode MASK() { return GetToken(TSqlParser.MASK, 0); }
		public ITerminalNode MATCHED() { return GetToken(TSqlParser.MATCHED, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode MAX_MEMORY() { return GetToken(TSqlParser.MAX_MEMORY, 0); }
		public ITerminalNode MAXTRANSFER() { return GetToken(TSqlParser.MAXTRANSFER, 0); }
		public ITerminalNode MAXVALUE() { return GetToken(TSqlParser.MAXVALUE, 0); }
		public ITerminalNode MAX_DISPATCH_LATENCY() { return GetToken(TSqlParser.MAX_DISPATCH_LATENCY, 0); }
		public ITerminalNode MAX_DURATION() { return GetToken(TSqlParser.MAX_DURATION, 0); }
		public ITerminalNode MAX_EVENT_SIZE() { return GetToken(TSqlParser.MAX_EVENT_SIZE, 0); }
		public ITerminalNode MAX_SIZE() { return GetToken(TSqlParser.MAX_SIZE, 0); }
		public ITerminalNode MAX_OUTSTANDING_IO_PER_VOLUME() { return GetToken(TSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME, 0); }
		public ITerminalNode MEDIADESCRIPTION() { return GetToken(TSqlParser.MEDIADESCRIPTION, 0); }
		public ITerminalNode MEDIANAME() { return GetToken(TSqlParser.MEDIANAME, 0); }
		public ITerminalNode MEMBER() { return GetToken(TSqlParser.MEMBER, 0); }
		public ITerminalNode MEMORY_PARTITION_MODE() { return GetToken(TSqlParser.MEMORY_PARTITION_MODE, 0); }
		public ITerminalNode MESSAGE_FORWARDING() { return GetToken(TSqlParser.MESSAGE_FORWARDING, 0); }
		public ITerminalNode MESSAGE_FORWARD_SIZE() { return GetToken(TSqlParser.MESSAGE_FORWARD_SIZE, 0); }
		public ITerminalNode MINVALUE() { return GetToken(TSqlParser.MINVALUE, 0); }
		public ITerminalNode MIRROR() { return GetToken(TSqlParser.MIRROR, 0); }
		public ITerminalNode MUST_CHANGE() { return GetToken(TSqlParser.MUST_CHANGE, 0); }
		public ITerminalNode NEWID() { return GetToken(TSqlParser.NEWID, 0); }
		public ITerminalNode NEWSEQUENTIALID() { return GetToken(TSqlParser.NEWSEQUENTIALID, 0); }
		public ITerminalNode NOFORMAT() { return GetToken(TSqlParser.NOFORMAT, 0); }
		public ITerminalNode NOINIT() { return GetToken(TSqlParser.NOINIT, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode NOREWIND() { return GetToken(TSqlParser.NOREWIND, 0); }
		public ITerminalNode NOSKIP() { return GetToken(TSqlParser.NOSKIP, 0); }
		public ITerminalNode NOUNLOAD() { return GetToken(TSqlParser.NOUNLOAD, 0); }
		public ITerminalNode NO_CHECKSUM() { return GetToken(TSqlParser.NO_CHECKSUM, 0); }
		public ITerminalNode NO_COMPRESSION() { return GetToken(TSqlParser.NO_COMPRESSION, 0); }
		public ITerminalNode NO_EVENT_LOSS() { return GetToken(TSqlParser.NO_EVENT_LOSS, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode NTLM() { return GetToken(TSqlParser.NTLM, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public ITerminalNode ON_FAILURE() { return GetToken(TSqlParser.ON_FAILURE, 0); }
		public ITerminalNode OPERATIONS() { return GetToken(TSqlParser.OPERATIONS, 0); }
		public ITerminalNode PAGE() { return GetToken(TSqlParser.PAGE, 0); }
		public ITerminalNode PARAM_NODE() { return GetToken(TSqlParser.PARAM_NODE, 0); }
		public ITerminalNode PARTIAL() { return GetToken(TSqlParser.PARTIAL, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode PERMISSION_SET() { return GetToken(TSqlParser.PERMISSION_SET, 0); }
		public ITerminalNode PER_CPU() { return GetToken(TSqlParser.PER_CPU, 0); }
		public ITerminalNode PER_DB() { return GetToken(TSqlParser.PER_DB, 0); }
		public ITerminalNode PER_NODE() { return GetToken(TSqlParser.PER_NODE, 0); }
		public ITerminalNode PERSISTED() { return GetToken(TSqlParser.PERSISTED, 0); }
		public ITerminalNode PLATFORM() { return GetToken(TSqlParser.PLATFORM, 0); }
		public ITerminalNode POLICY() { return GetToken(TSqlParser.POLICY, 0); }
		public ITerminalNode PREDICATE() { return GetToken(TSqlParser.PREDICATE, 0); }
		public ITerminalNode PROCESS() { return GetToken(TSqlParser.PROCESS, 0); }
		public ITerminalNode PROFILE() { return GetToken(TSqlParser.PROFILE, 0); }
		public ITerminalNode PYTHON() { return GetToken(TSqlParser.PYTHON, 0); }
		public ITerminalNode R() { return GetToken(TSqlParser.R, 0); }
		public ITerminalNode READ_WRITE_FILEGROUPS() { return GetToken(TSqlParser.READ_WRITE_FILEGROUPS, 0); }
		public ITerminalNode REGENERATE() { return GetToken(TSqlParser.REGENERATE, 0); }
		public ITerminalNode RELATED_CONVERSATION() { return GetToken(TSqlParser.RELATED_CONVERSATION, 0); }
		public ITerminalNode RELATED_CONVERSATION_GROUP() { return GetToken(TSqlParser.RELATED_CONVERSATION_GROUP, 0); }
		public ITerminalNode REQUIRED() { return GetToken(TSqlParser.REQUIRED, 0); }
		public ITerminalNode RESET() { return GetToken(TSqlParser.RESET, 0); }
		public ITerminalNode RESOURCES() { return GetToken(TSqlParser.RESOURCES, 0); }
		public ITerminalNode RESTART() { return GetToken(TSqlParser.RESTART, 0); }
		public ITerminalNode RESUME() { return GetToken(TSqlParser.RESUME, 0); }
		public ITerminalNode RETAINDAYS() { return GetToken(TSqlParser.RETAINDAYS, 0); }
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public ITerminalNode REWIND() { return GetToken(TSqlParser.REWIND, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode ROUND_ROBIN() { return GetToken(TSqlParser.ROUND_ROBIN, 0); }
		public ITerminalNode ROWCOUNT_BIG() { return GetToken(TSqlParser.ROWCOUNT_BIG, 0); }
		public ITerminalNode RSA_512() { return GetToken(TSqlParser.RSA_512, 0); }
		public ITerminalNode RSA_1024() { return GetToken(TSqlParser.RSA_1024, 0); }
		public ITerminalNode RSA_2048() { return GetToken(TSqlParser.RSA_2048, 0); }
		public ITerminalNode RSA_3072() { return GetToken(TSqlParser.RSA_3072, 0); }
		public ITerminalNode RSA_4096() { return GetToken(TSqlParser.RSA_4096, 0); }
		public ITerminalNode SAFETY() { return GetToken(TSqlParser.SAFETY, 0); }
		public ITerminalNode SAFE() { return GetToken(TSqlParser.SAFE, 0); }
		public ITerminalNode SCHEDULER() { return GetToken(TSqlParser.SCHEDULER, 0); }
		public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		public ITerminalNode SCRIPT() { return GetToken(TSqlParser.SCRIPT, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode SERVICE_BROKER() { return GetToken(TSqlParser.SERVICE_BROKER, 0); }
		public ITerminalNode SERVICE_NAME() { return GetToken(TSqlParser.SERVICE_NAME, 0); }
		public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		public ITerminalNode SESSION_CONTEXT() { return GetToken(TSqlParser.SESSION_CONTEXT, 0); }
		public ITerminalNode SETTINGS() { return GetToken(TSqlParser.SETTINGS, 0); }
		public ITerminalNode SHRINKLOG() { return GetToken(TSqlParser.SHRINKLOG, 0); }
		public ITerminalNode SID() { return GetToken(TSqlParser.SID, 0); }
		public ITerminalNode SKIP_KEYWORD() { return GetToken(TSqlParser.SKIP_KEYWORD, 0); }
		public ITerminalNode SOFTNUMA() { return GetToken(TSqlParser.SOFTNUMA, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public ITerminalNode SPLIT() { return GetToken(TSqlParser.SPLIT, 0); }
		public ITerminalNode SQL() { return GetToken(TSqlParser.SQL, 0); }
		public ITerminalNode SQLDUMPERFLAGS() { return GetToken(TSqlParser.SQLDUMPERFLAGS, 0); }
		public ITerminalNode SQLDUMPERPATH() { return GetToken(TSqlParser.SQLDUMPERPATH, 0); }
		public ITerminalNode SQLDUMPERTIMEOUT() { return GetToken(TSqlParser.SQLDUMPERTIMEOUT, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode STATS() { return GetToken(TSqlParser.STATS, 0); }
		public ITerminalNode START() { return GetToken(TSqlParser.START, 0); }
		public ITerminalNode STARTED() { return GetToken(TSqlParser.STARTED, 0); }
		public ITerminalNode STARTUP_STATE() { return GetToken(TSqlParser.STARTUP_STATE, 0); }
		public ITerminalNode STOP() { return GetToken(TSqlParser.STOP, 0); }
		public ITerminalNode STOPPED() { return GetToken(TSqlParser.STOPPED, 0); }
		public ITerminalNode STOP_ON_ERROR() { return GetToken(TSqlParser.STOP_ON_ERROR, 0); }
		public ITerminalNode SUPPORTED() { return GetToken(TSqlParser.SUPPORTED, 0); }
		public ITerminalNode SWITCH() { return GetToken(TSqlParser.SWITCH, 0); }
		public ITerminalNode TAPE() { return GetToken(TSqlParser.TAPE, 0); }
		public ITerminalNode TARGET() { return GetToken(TSqlParser.TARGET, 0); }
		public ITerminalNode TCP() { return GetToken(TSqlParser.TCP, 0); }
		public ITerminalNode TOSTRING() { return GetToken(TSqlParser.TOSTRING, 0); }
		public ITerminalNode TRACE() { return GetToken(TSqlParser.TRACE, 0); }
		public ITerminalNode TRACK_CAUSALITY() { return GetToken(TSqlParser.TRACK_CAUSALITY, 0); }
		public ITerminalNode TRANSFER() { return GetToken(TSqlParser.TRANSFER, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(TSqlParser.UNCHECKED, 0); }
		public ITerminalNode UNLOCK() { return GetToken(TSqlParser.UNLOCK, 0); }
		public ITerminalNode UNSAFE() { return GetToken(TSqlParser.UNSAFE, 0); }
		public ITerminalNode URL() { return GetToken(TSqlParser.URL, 0); }
		public ITerminalNode USED() { return GetToken(TSqlParser.USED, 0); }
		public ITerminalNode VERBOSELOGGING() { return GetToken(TSqlParser.VERBOSELOGGING, 0); }
		public ITerminalNode VISIBILITY() { return GetToken(TSqlParser.VISIBILITY, 0); }
		public ITerminalNode WAIT_AT_LOW_PRIORITY() { return GetToken(TSqlParser.WAIT_AT_LOW_PRIORITY, 0); }
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode WITHOUT() { return GetToken(TSqlParser.WITHOUT, 0); }
		public ITerminalNode WITNESS() { return GetToken(TSqlParser.WITNESS, 0); }
		public ITerminalNode XACT_ABORT() { return GetToken(TSqlParser.XACT_ABORT, 0); }
		public ITerminalNode XACT_STATE() { return GetToken(TSqlParser.XACT_STATE, 0); }
		public ITerminalNode ABS() { return GetToken(TSqlParser.ABS, 0); }
		public ITerminalNode ACOS() { return GetToken(TSqlParser.ACOS, 0); }
		public ITerminalNode ASIN() { return GetToken(TSqlParser.ASIN, 0); }
		public ITerminalNode ATAN() { return GetToken(TSqlParser.ATAN, 0); }
		public ITerminalNode ATN2() { return GetToken(TSqlParser.ATN2, 0); }
		public ITerminalNode CEILING() { return GetToken(TSqlParser.CEILING, 0); }
		public ITerminalNode COS() { return GetToken(TSqlParser.COS, 0); }
		public ITerminalNode COT() { return GetToken(TSqlParser.COT, 0); }
		public ITerminalNode DEGREES() { return GetToken(TSqlParser.DEGREES, 0); }
		public ITerminalNode EXP() { return GetToken(TSqlParser.EXP, 0); }
		public ITerminalNode FLOOR() { return GetToken(TSqlParser.FLOOR, 0); }
		public ITerminalNode LOG10() { return GetToken(TSqlParser.LOG10, 0); }
		public ITerminalNode PI() { return GetToken(TSqlParser.PI, 0); }
		public ITerminalNode POWER() { return GetToken(TSqlParser.POWER, 0); }
		public ITerminalNode RADIANS() { return GetToken(TSqlParser.RADIANS, 0); }
		public ITerminalNode RAND() { return GetToken(TSqlParser.RAND, 0); }
		public ITerminalNode ROUND() { return GetToken(TSqlParser.ROUND, 0); }
		public ITerminalNode SIGN() { return GetToken(TSqlParser.SIGN, 0); }
		public ITerminalNode SIN() { return GetToken(TSqlParser.SIN, 0); }
		public ITerminalNode SQRT() { return GetToken(TSqlParser.SQRT, 0); }
		public ITerminalNode SQUARE() { return GetToken(TSqlParser.SQUARE, 0); }
		public ITerminalNode TAN() { return GetToken(TSqlParser.TAN, 0); }
		public ITerminalNode CURRENT_TIMEZONE() { return GetToken(TSqlParser.CURRENT_TIMEZONE, 0); }
		public ITerminalNode CURRENT_TIMEZONE_ID() { return GetToken(TSqlParser.CURRENT_TIMEZONE_ID, 0); }
		public ITerminalNode DATE_BUCKET() { return GetToken(TSqlParser.DATE_BUCKET, 0); }
		public ITerminalNode DATEDIFF_BIG() { return GetToken(TSqlParser.DATEDIFF_BIG, 0); }
		public ITerminalNode DATEFROMPARTS() { return GetToken(TSqlParser.DATEFROMPARTS, 0); }
		public ITerminalNode DATETIME2FROMPARTS() { return GetToken(TSqlParser.DATETIME2FROMPARTS, 0); }
		public ITerminalNode DATETIMEFROMPARTS() { return GetToken(TSqlParser.DATETIMEFROMPARTS, 0); }
		public ITerminalNode DATETIMEOFFSETFROMPARTS() { return GetToken(TSqlParser.DATETIMEOFFSETFROMPARTS, 0); }
		public ITerminalNode DATETRUNC() { return GetToken(TSqlParser.DATETRUNC, 0); }
		public ITerminalNode DAY() { return GetToken(TSqlParser.DAY, 0); }
		public ITerminalNode EOMONTH() { return GetToken(TSqlParser.EOMONTH, 0); }
		public ITerminalNode ISDATE() { return GetToken(TSqlParser.ISDATE, 0); }
		public ITerminalNode MONTH() { return GetToken(TSqlParser.MONTH, 0); }
		public ITerminalNode SMALLDATETIMEFROMPARTS() { return GetToken(TSqlParser.SMALLDATETIMEFROMPARTS, 0); }
		public ITerminalNode SWITCHOFFSET() { return GetToken(TSqlParser.SWITCHOFFSET, 0); }
		public ITerminalNode SYSDATETIME() { return GetToken(TSqlParser.SYSDATETIME, 0); }
		public ITerminalNode SYSDATETIMEOFFSET() { return GetToken(TSqlParser.SYSDATETIMEOFFSET, 0); }
		public ITerminalNode SYSUTCDATETIME() { return GetToken(TSqlParser.SYSUTCDATETIME, 0); }
		public ITerminalNode TIMEFROMPARTS() { return GetToken(TSqlParser.TIMEFROMPARTS, 0); }
		public ITerminalNode TODATETIMEOFFSET() { return GetToken(TSqlParser.TODATETIMEOFFSET, 0); }
		public ITerminalNode YEAR() { return GetToken(TSqlParser.YEAR, 0); }
		public ITerminalNode QUARTER() { return GetToken(TSqlParser.QUARTER, 0); }
		public ITerminalNode DAYOFYEAR() { return GetToken(TSqlParser.DAYOFYEAR, 0); }
		public ITerminalNode WEEK() { return GetToken(TSqlParser.WEEK, 0); }
		public ITerminalNode HOUR() { return GetToken(TSqlParser.HOUR, 0); }
		public ITerminalNode MINUTE() { return GetToken(TSqlParser.MINUTE, 0); }
		public ITerminalNode SECOND() { return GetToken(TSqlParser.SECOND, 0); }
		public ITerminalNode MILLISECOND() { return GetToken(TSqlParser.MILLISECOND, 0); }
		public ITerminalNode MICROSECOND() { return GetToken(TSqlParser.MICROSECOND, 0); }
		public ITerminalNode NANOSECOND() { return GetToken(TSqlParser.NANOSECOND, 0); }
		public ITerminalNode TZOFFSET() { return GetToken(TSqlParser.TZOFFSET, 0); }
		public ITerminalNode ISO_WEEK() { return GetToken(TSqlParser.ISO_WEEK, 0); }
		public ITerminalNode WEEKDAY() { return GetToken(TSqlParser.WEEKDAY, 0); }
		public ITerminalNode YEAR_ABBR() { return GetToken(TSqlParser.YEAR_ABBR, 0); }
		public ITerminalNode QUARTER_ABBR() { return GetToken(TSqlParser.QUARTER_ABBR, 0); }
		public ITerminalNode MONTH_ABBR() { return GetToken(TSqlParser.MONTH_ABBR, 0); }
		public ITerminalNode DAYOFYEAR_ABBR() { return GetToken(TSqlParser.DAYOFYEAR_ABBR, 0); }
		public ITerminalNode DAY_ABBR() { return GetToken(TSqlParser.DAY_ABBR, 0); }
		public ITerminalNode WEEK_ABBR() { return GetToken(TSqlParser.WEEK_ABBR, 0); }
		public ITerminalNode HOUR_ABBR() { return GetToken(TSqlParser.HOUR_ABBR, 0); }
		public ITerminalNode MINUTE_ABBR() { return GetToken(TSqlParser.MINUTE_ABBR, 0); }
		public ITerminalNode SECOND_ABBR() { return GetToken(TSqlParser.SECOND_ABBR, 0); }
		public ITerminalNode MILLISECOND_ABBR() { return GetToken(TSqlParser.MILLISECOND_ABBR, 0); }
		public ITerminalNode MICROSECOND_ABBR() { return GetToken(TSqlParser.MICROSECOND_ABBR, 0); }
		public ITerminalNode NANOSECOND_ABBR() { return GetToken(TSqlParser.NANOSECOND_ABBR, 0); }
		public ITerminalNode TZOFFSET_ABBR() { return GetToken(TSqlParser.TZOFFSET_ABBR, 0); }
		public ITerminalNode ISO_WEEK_ABBR() { return GetToken(TSqlParser.ISO_WEEK_ABBR, 0); }
		public ITerminalNode WEEKDAY_ABBR() { return GetToken(TSqlParser.WEEKDAY_ABBR, 0); }
		public ITerminalNode SP_EXECUTESQL() { return GetToken(TSqlParser.SP_EXECUTESQL, 0); }
		public ITerminalNode VARCHAR() { return GetToken(TSqlParser.VARCHAR, 0); }
		public ITerminalNode NVARCHAR() { return GetToken(TSqlParser.NVARCHAR, 0); }
		public ITerminalNode PRECISION() { return GetToken(TSqlParser.PRECISION, 0); }
		public ITerminalNode FILESTREAM_ON() { return GetToken(TSqlParser.FILESTREAM_ON, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(_ctx, State);
		EnterRule(_localctx, 1214, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14614;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABORT_AFTER_WAIT) | (1L << ABSENT) | (1L << ABSOLUTE) | (1L << ACCENT_SENSITIVITY) | (1L << ACCESS) | (1L << ACTION) | (1L << ACTIVATION) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDRESS) | (1L << ADMINISTER) | (1L << AES) | (1L << AES_128) | (1L << AES_192) | (1L << AES_256) | (1L << AFFINITY) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALGORITHM) | (1L << ALLOWED) | (1L << ALLOW_CONNECTIONS) | (1L << ALLOW_ENCRYPTED_VALUE_MODIFICATIONS) | (1L << ALLOW_MULTIPLE_EVENT_LOSS) | (1L << ALLOW_PAGE_LOCKS) | (1L << ALLOW_ROW_LOCKS) | (1L << ALLOW_SINGLE_EVENT_LOSS) | (1L << ALLOW_SNAPSHOT_ISOLATION) | (1L << ALL_CONSTRAINTS) | (1L << ALL_ERRORMSGS) | (1L << ALL_INDEXES) | (1L << ALL_LEVELS) | (1L << ALWAYS) | (1L << ANONYMOUS) | (1L << ANSI_DEFAULTS) | (1L << ANSI_NULLS) | (1L << ANSI_NULL_DEFAULT) | (1L << ANSI_NULL_DFLT_OFF) | (1L << ANSI_NULL_DFLT_ON) | (1L << ANSI_PADDING) | (1L << ANSI_WARNINGS) | (1L << APPEND) | (1L << APPLICATION) | (1L << APPLICATION_LOG) | (1L << APPLOCK_MODE) | (1L << APPLOCK_TEST) | (1L << APPLY) | (1L << APP_NAME) | (1L << ARITHABORT) | (1L << ARITHIGNORE) | (1L << ASCII) | (1L << ASSEMBLY) | (1L << ASSEMBLYPROPERTY) | (1L << ASYMMETRIC) | (1L << ASYNCHRONOUS_COMMIT) | (1L << AT_KEYWORD))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUDIT - 64)) | (1L << (AUDIT_GUID - 64)) | (1L << (AUTHENTICATE - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTO - 64)) | (1L << (AUTOGROW_ALL_FILES - 64)) | (1L << (AUTOGROW_SINGLE_FILE - 64)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 64)) | (1L << (AUTOMATIC - 64)) | (1L << (AUTO_CLEANUP - 64)) | (1L << (AUTO_CLOSE - 64)) | (1L << (AUTO_CREATE_STATISTICS - 64)) | (1L << (AUTO_DROP - 64)) | (1L << (AUTO_SHRINK - 64)) | (1L << (AUTO_UPDATE_STATISTICS - 64)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 64)) | (1L << (AVAILABILITY - 64)) | (1L << (AVAILABILITY_MODE - 64)) | (1L << (AVG - 64)) | (1L << (BACKUP_CLONEDB - 64)) | (1L << (BACKUP_PRIORITY - 64)) | (1L << (BASE64 - 64)) | (1L << (BEFORE - 64)) | (1L << (BEGIN_DIALOG - 64)) | (1L << (BIGINT - 64)) | (1L << (BINARY_CHECKSUM - 64)) | (1L << (BINARY_KEYWORD - 64)) | (1L << (BINDING - 64)) | (1L << (BLOB_STORAGE - 64)) | (1L << (BLOCK - 64)) | (1L << (BLOCKERS - 64)) | (1L << (BLOCKING_HIERARCHY - 64)) | (1L << (BLOCKSIZE - 64)) | (1L << (BROKER - 64)) | (1L << (BROKER_INSTANCE - 64)) | (1L << (BUFFER - 64)) | (1L << (BUFFERCOUNT - 64)) | (1L << (BULK_LOGGED - 64)) | (1L << (CACHE - 64)) | (1L << (CALLED - 64)) | (1L << (CALLER - 64)) | (1L << (CAP_CPU_PERCENT - 64)) | (1L << (CAST - 64)) | (1L << (CATALOG - 64)) | (1L << (CATCH - 64)) | (1L << (CERTENCODED - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CERTPRIVATEKEY - 64)) | (1L << (CERT_ID - 64)) | (1L << (CHANGE - 64)) | (1L << (CHANGES - 64)) | (1L << (CHANGETABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CHANGE_RETENTION - 128)) | (1L << (CHANGE_TRACKING - 128)) | (1L << (CHAR - 128)) | (1L << (CHARINDEX - 128)) | (1L << (CHECKALLOC - 128)) | (1L << (CHECKCATALOG - 128)) | (1L << (CHECKCONSTRAINTS - 128)) | (1L << (CHECKDB - 128)) | (1L << (CHECKFILEGROUP - 128)) | (1L << (CHECKSUM - 128)) | (1L << (CHECKSUM_AGG - 128)) | (1L << (CHECKTABLE - 128)) | (1L << (CHECK_EXPIRATION - 128)) | (1L << (CHECK_POLICY - 128)) | (1L << (CLASSIFIER_FUNCTION - 128)) | (1L << (CLEANTABLE - 128)) | (1L << (CLEANUP - 128)) | (1L << (CLONEDATABASE - 128)) | (1L << (CLUSTER - 128)) | (1L << (COLLECTION - 128)) | (1L << (COLUMNPROPERTY - 128)) | (1L << (COLUMNS - 128)) | (1L << (COLUMNSTORE - 128)) | (1L << (COLUMNSTORE_ARCHIVE - 128)) | (1L << (COLUMN_ENCRYPTION_KEY - 128)) | (1L << (COLUMN_MASTER_KEY - 128)) | (1L << (COL_LENGTH - 128)) | (1L << (COL_NAME - 128)) | (1L << (COMMITTED - 128)) | (1L << (COMPATIBILITY_LEVEL - 128)) | (1L << (COMPRESS - 128)) | (1L << (COMPRESSION - 128)) | (1L << (COMPRESSION_DELAY - 128)) | (1L << (COMPRESS_ALL_ROW_GROUPS - 128)) | (1L << (CONCAT - 128)) | (1L << (CONCAT_NULL_YIELDS_NULL - 128)) | (1L << (CONCAT_WS - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONNECT - 128)) | (1L << (CONNECTION - 128)) | (1L << (CONNECTIONPROPERTY - 128)) | (1L << (CONTAINMENT - 128)) | (1L << (CONTENT - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTEXT_INFO - 128)) | (1L << (CONTINUE_AFTER_ERROR - 128)) | (1L << (CONTRACT - 128)) | (1L << (CONTRACT_NAME - 128)) | (1L << (CONTROL - 128)) | (1L << (CONVERSATION - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (COOKIE - 193)) | (1L << (COPY_ONLY - 193)) | (1L << (COUNT - 193)) | (1L << (COUNTER - 193)) | (1L << (COUNT_BIG - 193)) | (1L << (CPU - 193)) | (1L << (CREATE_NEW - 193)) | (1L << (CREATION_DISPOSITION - 193)) | (1L << (CREDENTIAL - 193)) | (1L << (CRYPTOGRAPHIC - 193)) | (1L << (CUME_DIST - 193)) | (1L << (CURRENT_REQUEST_ID - 193)) | (1L << (CURRENT_TRANSACTION_ID - 193)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 193)) | (1L << (CURSOR_DEFAULT - 193)) | (1L << (CURSOR_STATUS - 193)) | (1L << (CYCLE - 193)) | (1L << (DATA - 193)) | (1L << (DATABASEPROPERTYEX - 193)) | (1L << (DATABASE_MIRRORING - 193)) | (1L << (DATABASE_PRINCIPAL_ID - 193)) | (1L << (DATALENGTH - 193)) | (1L << (DATASPACE - 193)) | (1L << (DATA_COMPRESSION - 193)) | (1L << (DATA_PURITY - 193)) | (1L << (DATA_SOURCE - 193)) | (1L << (DATEADD - 193)) | (1L << (DATEDIFF - 193)) | (1L << (DATENAME - 193)) | (1L << (DATEPART - 193)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 193)) | (1L << (DAYS - 193)) | (1L << (DBCC - 193)) | (1L << (DBREINDEX - 193)) | (1L << (DB_CHAINING - 193)) | (1L << (DB_FAILOVER - 193)) | (1L << (DB_ID - 193)) | (1L << (DB_NAME - 193)) | (1L << (DDL - 193)) | (1L << (DECOMPRESS - 193)) | (1L << (DECRYPTION - 193)) | (1L << (DEFAULT_DATABASE - 193)) | (1L << (DEFAULT_DOUBLE_QUOTE - 193)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 193)) | (1L << (DEFAULT_LANGUAGE - 193)) | (1L << (DEFAULT_SCHEMA - 193)) | (1L << (DEFINITION - 193)) | (1L << (DELAY - 193)) | (1L << (DELAYED_DURABILITY - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (DELETED - 257)) | (1L << (DENSE_RANK - 257)) | (1L << (DEPENDENTS - 257)) | (1L << (DES - 257)) | (1L << (DESCRIPTION - 257)) | (1L << (DESX - 257)) | (1L << (DETERMINISTIC - 257)) | (1L << (DHCP - 257)) | (1L << (DIAGNOSTICS - 257)) | (1L << (DIALOG - 257)) | (1L << (DIFFERENCE - 257)) | (1L << (DIFFERENTIAL - 257)) | (1L << (DIRECTORY_NAME - 257)) | (1L << (DISABLE - 257)) | (1L << (DISABLED - 257)) | (1L << (DISABLE_BROKER - 257)) | (1L << (DISTRIBUTION - 257)) | (1L << (DOCUMENT - 257)) | (1L << (DROPCLEANBUFFERS - 257)) | (1L << (DROP_EXISTING - 257)) | (1L << (DTC_SUPPORT - 257)) | (1L << (DYNAMIC - 257)) | (1L << (ELEMENTS - 257)) | (1L << (EMERGENCY - 257)) | (1L << (EMPTY - 257)) | (1L << (ENABLE - 257)) | (1L << (ENABLED - 257)) | (1L << (ENABLE_BROKER - 257)) | (1L << (ENCRYPTED - 257)) | (1L << (ENCRYPTED_VALUE - 257)) | (1L << (ENCRYPTION - 257)) | (1L << (ENCRYPTION_TYPE - 257)) | (1L << (ENDPOINT - 257)) | (1L << (ENDPOINT_URL - 257)) | (1L << (ERROR - 257)) | (1L << (ERROR_BROKER_CONVERSATIONS - 257)) | (1L << (ERROR_LINE - 257)) | (1L << (ERROR_MESSAGE - 257)) | (1L << (ERROR_NUMBER - 257)) | (1L << (ERROR_PROCEDURE - 257)) | (1L << (ERROR_SEVERITY - 257)) | (1L << (ERROR_STATE - 257)) | (1L << (ESTIMATEONLY - 257)) | (1L << (EVENT - 257)) | (1L << (EVENTDATA - 257)) | (1L << (EVENT_RETENTION_MODE - 257)) | (1L << (EXCLUSIVE - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (EXECUTABLE - 321)) | (1L << (EXECUTABLE_FILE - 321)) | (1L << (EXIST - 321)) | (1L << (EXIST_SQUARE_BRACKET - 321)) | (1L << (EXPAND - 321)) | (1L << (EXPIREDATE - 321)) | (1L << (EXPIRY_DATE - 321)) | (1L << (EXPLICIT - 321)) | (1L << (EXTENDED_LOGICAL_CHECKS - 321)) | (1L << (EXTENSION - 321)) | (1L << (EXTERNAL_ACCESS - 321)) | (1L << (FAILOVER - 321)) | (1L << (FAILOVER_MODE - 321)) | (1L << (FAILURE - 321)) | (1L << (FAILURECONDITIONLEVEL - 321)) | (1L << (FAILURE_CONDITION_LEVEL - 321)) | (1L << (FAIL_OPERATION - 321)) | (1L << (FAN_IN - 321)) | (1L << (FAST - 321)) | (1L << (FAST_FORWARD - 321)) | (1L << (FILEGROUP - 321)) | (1L << (FILEGROUPPROPERTY - 321)) | (1L << (FILEGROUP_ID - 321)) | (1L << (FILEGROUP_NAME - 321)) | (1L << (FILEGROWTH - 321)) | (1L << (FILENAME - 321)) | (1L << (FILEPATH - 321)) | (1L << (FILEPROPERTY - 321)) | (1L << (FILEPROPERTYEX - 321)) | (1L << (FILESTREAM - 321)) | (1L << (FILESTREAM_ON - 321)) | (1L << (FILE_ID - 321)) | (1L << (FILE_IDEX - 321)) | (1L << (FILE_NAME - 321)) | (1L << (FILE_SNAPSHOT - 321)) | (1L << (FILTER - 321)) | (1L << (FIRST - 321)) | (1L << (FIRST_VALUE - 321)) | (1L << (FMTONLY - 321)) | (1L << (FOLLOWING - 321)) | (1L << (FORCE - 321)) | (1L << (FORCED - 321)) | (1L << (FORCEPLAN - 321)) | (1L << (FORCESCAN - 321)) | (1L << (FORCESEEK - 321)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 321)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 321)) | (1L << (FORMAT - 321)) | (1L << (FORMATMESSAGE - 321)) | (1L << (FORWARD_ONLY - 321)) | (1L << (FREE - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (FULLSCAN - 385)) | (1L << (FULLTEXT - 385)) | (1L << (FULLTEXTCATALOGPROPERTY - 385)) | (1L << (FULLTEXTSERVICEPROPERTY - 385)) | (1L << (GB - 385)) | (1L << (GENERATED - 385)) | (1L << (GET - 385)) | (1L << (GETANCESTOR - 385)) | (1L << (GETANSINULL - 385)) | (1L << (GETDATE - 385)) | (1L << (GETDESCENDANT - 385)) | (1L << (GETLEVEL - 385)) | (1L << (GETREPARENTEDVALUE - 385)) | (1L << (GETROOT - 385)) | (1L << (GETUTCDATE - 385)) | (1L << (GET_FILESTREAM_TRANSACTION_CONTEXT - 385)) | (1L << (GLOBAL - 385)) | (1L << (GO - 385)) | (1L << (GOVERNOR - 385)) | (1L << (GREATEST - 385)) | (1L << (GROUPING - 385)) | (1L << (GROUPING_ID - 385)) | (1L << (GROUP_MAX_REQUESTS - 385)) | (1L << (HADR - 385)) | (1L << (HASH - 385)) | (1L << (HASHED - 385)) | (1L << (HAS_DBACCESS - 385)) | (1L << (HAS_PERMS_BY_NAME - 385)) | (1L << (HEALTHCHECKTIMEOUT - 385)) | (1L << (HEALTH_CHECK_TIMEOUT - 385)) | (1L << (HEAP - 385)) | (1L << (HIDDEN_KEYWORD - 385)) | (1L << (HIERARCHYID - 385)) | (1L << (HIGH - 385)) | (1L << (HONOR_BROKER_PRIORITY - 385)) | (1L << (HOST_ID - 385)) | (1L << (HOST_NAME - 385)) | (1L << (HOURS - 385)) | (1L << (IDENTITY_VALUE - 385)) | (1L << (IDENT_CURRENT - 385)) | (1L << (IDENT_INCR - 385)) | (1L << (IDENT_SEED - 385)) | (1L << (IGNORE_CONSTRAINTS - 385)) | (1L << (IGNORE_DUP_KEY - 385)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 385)) | (1L << (IGNORE_REPLICATED_TABLE_CACHE - 385)) | (1L << (IGNORE_TRIGGERS - 385)) | (1L << (IIF - 385)) | (1L << (IMMEDIATE - 385)) | (1L << (IMPERSONATE - 385)) | (1L << (IMPLICIT_TRANSACTIONS - 385)) | (1L << (IMPORTANCE - 385)) | (1L << (INCLUDE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (INCLUDE_NULL_VALUES - 449)) | (1L << (INCREMENT - 449)) | (1L << (INCREMENTAL - 449)) | (1L << (INDEXKEY_PROPERTY - 449)) | (1L << (INDEXPROPERTY - 449)) | (1L << (INDEX_COL - 449)) | (1L << (INFINITE - 449)) | (1L << (INIT - 449)) | (1L << (INITIATOR - 449)) | (1L << (INPUT - 449)) | (1L << (INSENSITIVE - 449)) | (1L << (INSERTED - 449)) | (1L << (INSTEAD - 449)) | (1L << (INT - 449)) | (1L << (IO - 449)) | (1L << (IP - 449)) | (1L << (ISDESCENDANTOF - 449)) | (1L << (ISJSON - 449)) | (1L << (ISNULL - 449)) | (1L << (ISNUMERIC - 449)) | (1L << (ISOLATION - 449)) | (1L << (IS_MEMBER - 449)) | (1L << (IS_ROLEMEMBER - 449)) | (1L << (IS_SRVROLEMEMBER - 449)) | (1L << (JOB - 449)) | (1L << (JSON - 449)) | (1L << (JSON_ARRAY - 449)) | (1L << (JSON_MODIFY - 449)) | (1L << (JSON_OBJECT - 449)) | (1L << (JSON_PATH_EXISTS - 449)) | (1L << (JSON_QUERY - 449)) | (1L << (JSON_VALUE - 449)) | (1L << (KB - 449)) | (1L << (KEEP - 449)) | (1L << (KEEPDEFAULTS - 449)) | (1L << (KEEPFIXED - 449)) | (1L << (KEEPIDENTITY - 449)) | (1L << (KERBEROS - 449)) | (1L << (KEYS - 449)) | (1L << (KEYSET - 449)) | (1L << (KEY_PATH - 449)) | (1L << (KEY_SOURCE - 449)) | (1L << (KEY_STORE_PROVIDER_NAME - 449)) | (1L << (LAG - 449)) | (1L << (LANGUAGE - 449)) | (1L << (LAST - 449)) | (1L << (LAST_VALUE - 449)) | (1L << (LEAD - 449)) | (1L << (LEAST - 449)) | (1L << (LEN - 449)) | (1L << (LEVEL - 449)) | (1L << (LIBRARY - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LIFETIME - 513)) | (1L << (LINKED - 513)) | (1L << (LINUX - 513)) | (1L << (LIST - 513)) | (1L << (LISTENER - 513)) | (1L << (LISTENER_IP - 513)) | (1L << (LISTENER_PORT - 513)) | (1L << (LISTENER_URL - 513)) | (1L << (LOB_COMPACTION - 513)) | (1L << (LOCAL - 513)) | (1L << (LOCAL_SERVICE_NAME - 513)) | (1L << (LOCATION - 513)) | (1L << (LOCK - 513)) | (1L << (LOCK_ESCALATION - 513)) | (1L << (LOG - 513)) | (1L << (LOGIN - 513)) | (1L << (LOGINPROPERTY - 513)) | (1L << (LOOP - 513)) | (1L << (LOW - 513)) | (1L << (LOWER - 513)) | (1L << (LTRIM - 513)) | (1L << (MANUAL - 513)) | (1L << (MARK - 513)) | (1L << (MASK - 513)) | (1L << (MASKED - 513)) | (1L << (MASTER - 513)) | (1L << (MATCHED - 513)) | (1L << (MATERIALIZED - 513)) | (1L << (MAX - 513)) | (1L << (MAXDOP - 513)) | (1L << (MAXRECURSION - 513)) | (1L << (MAXSIZE - 513)) | (1L << (MAXTRANSFER - 513)) | (1L << (MAXVALUE - 513)) | (1L << (MAX_CPU_PERCENT - 513)) | (1L << (MAX_DISPATCH_LATENCY - 513)) | (1L << (MAX_DOP - 513)) | (1L << (MAX_DURATION - 513)) | (1L << (MAX_EVENT_SIZE - 513)) | (1L << (MAX_FILES - 513)) | (1L << (MAX_IOPS_PER_VOLUME - 513)) | (1L << (MAX_MEMORY - 513)) | (1L << (MAX_MEMORY_PERCENT - 513)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 513)) | (1L << (MAX_PROCESSES - 513)) | (1L << (MAX_QUEUE_READERS - 513)) | (1L << (MAX_ROLLOVER_FILES - 513)) | (1L << (MAX_SIZE - 513)) | (1L << (MB - 513)) | (1L << (MEDIADESCRIPTION - 513)) | (1L << (MEDIANAME - 513)) | (1L << (MEDIUM - 513)) | (1L << (MEMBER - 513)) | (1L << (MEMORY_OPTIMIZED_DATA - 513)) | (1L << (MEMORY_PARTITION_MODE - 513)) | (1L << (MESSAGE - 513)) | (1L << (MESSAGE_FORWARDING - 513)) | (1L << (MESSAGE_FORWARD_SIZE - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (MIN - 577)) | (1L << (MINUTES - 577)) | (1L << (MINVALUE - 577)) | (1L << (MIN_ACTIVE_ROWVERSION - 577)) | (1L << (MIN_CPU_PERCENT - 577)) | (1L << (MIN_IOPS_PER_VOLUME - 577)) | (1L << (MIN_MEMORY_PERCENT - 577)) | (1L << (MIRROR - 577)) | (1L << (MIRROR_ADDRESS - 577)) | (1L << (MIXED_PAGE_ALLOCATION - 577)) | (1L << (MODE - 577)) | (1L << (MODIFY - 577)) | (1L << (MODIFY_SQUARE_BRACKET - 577)) | (1L << (MOVE - 577)) | (1L << (MULTI_USER - 577)) | (1L << (MUST_CHANGE - 577)) | (1L << (NAME - 577)) | (1L << (NCHAR - 577)) | (1L << (NESTED_TRIGGERS - 577)) | (1L << (NEWID - 577)) | (1L << (NEWNAME - 577)) | (1L << (NEWSEQUENTIALID - 577)) | (1L << (NEW_ACCOUNT - 577)) | (1L << (NEW_BROKER - 577)) | (1L << (NEW_PASSWORD - 577)) | (1L << (NEXT - 577)) | (1L << (NO - 577)) | (1L << (NOCOUNT - 577)) | (1L << (NODES - 577)) | (1L << (NOEXEC - 577)) | (1L << (NOEXPAND - 577)) | (1L << (NOFORMAT - 577)) | (1L << (NOINDEX - 577)) | (1L << (NOINIT - 577)) | (1L << (NOLOCK - 577)) | (1L << (NONE - 577)) | (1L << (NON_TRANSACTED_ACCESS - 577)) | (1L << (NORECOMPUTE - 577)) | (1L << (NORECOVERY - 577)) | (1L << (NOREWIND - 577)) | (1L << (NOSKIP - 577)) | (1L << (NOTIFICATION - 577)) | (1L << (NOTIFICATIONS - 577)) | (1L << (NOUNLOAD - 577)) | (1L << (NOWAIT - 577)) | (1L << (NO_CHECKSUM - 577)) | (1L << (NO_COMPRESSION - 577)) | (1L << (NO_EVENT_LOSS - 577)) | (1L << (NO_INFOMSGS - 577)) | (1L << (NO_QUERYSTORE - 577)) | (1L << (NO_STATISTICS - 577)) | (1L << (NO_TRUNCATE - 577)) | (1L << (NO_WAIT - 577)) | (1L << (NTILE - 577)) | (1L << (NTLM - 577)) | (1L << (NULL_DOUBLE_QUOTE - 577)))) != 0) || ((((_la - 641)) & ~0x3f) == 0 && ((1L << (_la - 641)) & ((1L << (NUMANODE - 641)) | (1L << (NUMBER - 641)) | (1L << (NUMERIC_ROUNDABORT - 641)) | (1L << (OBJECT - 641)) | (1L << (OBJECTPROPERTY - 641)) | (1L << (OBJECTPROPERTYEX - 641)) | (1L << (OBJECT_DEFINITION - 641)) | (1L << (OBJECT_ID - 641)) | (1L << (OBJECT_NAME - 641)) | (1L << (OBJECT_SCHEMA_NAME - 641)) | (1L << (OFFLINE - 641)) | (1L << (OFFSET - 641)) | (1L << (OLD_ACCOUNT - 641)) | (1L << (OLD_PASSWORD - 641)) | (1L << (ONLINE - 641)) | (1L << (ONLY - 641)) | (1L << (ON_FAILURE - 641)) | (1L << (OPENJSON - 641)) | (1L << (OPEN_EXISTING - 641)) | (1L << (OPERATIONS - 641)) | (1L << (OPTIMISTIC - 641)) | (1L << (OPTIMIZE - 641)) | (1L << (OPTIMIZE_FOR_SEQUENTIAL_KEY - 641)) | (1L << (ORIGINAL_DB_NAME - 641)) | (1L << (ORIGINAL_LOGIN - 641)) | (1L << (OUT - 641)) | (1L << (OUTPUT - 641)) | (1L << (OVERRIDE - 641)) | (1L << (OWNER - 641)) | (1L << (OWNERSHIP - 641)) | (1L << (PAD_INDEX - 641)) | (1L << (PAGE - 641)) | (1L << (PAGECOUNT - 641)) | (1L << (PAGE_VERIFY - 641)) | (1L << (PAGLOCK - 641)) | (1L << (PARAMETERIZATION - 641)) | (1L << (PARAM_NODE - 641)) | (1L << (PARSENAME - 641)) | (1L << (PARSEONLY - 641)) | (1L << (PARTIAL - 641)) | (1L << (PARTITION - 641)) | (1L << (PARTITIONS - 641)) | (1L << (PARTNER - 641)) | (1L << (PASSWORD - 641)) | (1L << (PATH - 641)) | (1L << (PATINDEX - 641)) | (1L << (PAUSE - 641)) | (1L << (PDW_SHOWSPACEUSED - 641)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (PERCENTILE_CONT - 706)) | (1L << (PERCENTILE_DISC - 706)) | (1L << (PERCENT_RANK - 706)) | (1L << (PERMISSIONS - 706)) | (1L << (PERMISSION_SET - 706)) | (1L << (PERSISTED - 706)) | (1L << (PERSIST_SAMPLE_PERCENT - 706)) | (1L << (PER_CPU - 706)) | (1L << (PER_DB - 706)) | (1L << (PER_NODE - 706)) | (1L << (PHYSICAL_ONLY - 706)) | (1L << (PLATFORM - 706)) | (1L << (POISON_MESSAGE_HANDLING - 706)) | (1L << (POLICY - 706)) | (1L << (POOL - 706)) | (1L << (PORT - 706)) | (1L << (PRECEDING - 706)) | (1L << (PRECISION - 706)) | (1L << (PREDICATE - 706)) | (1L << (PRIMARY_ROLE - 706)) | (1L << (PRIOR - 706)) | (1L << (PRIORITY - 706)) | (1L << (PRIORITY_LEVEL - 706)) | (1L << (PRIVATE - 706)) | (1L << (PRIVATE_KEY - 706)) | (1L << (PRIVILEGES - 706)) | (1L << (PROCCACHE - 706)) | (1L << (PROCEDURE_NAME - 706)) | (1L << (PROCESS - 706)) | (1L << (PROFILE - 706)) | (1L << (PROPERTY - 706)) | (1L << (PROVIDER - 706)) | (1L << (PROVIDER_KEY_NAME - 706)) | (1L << (PWDCOMPARE - 706)) | (1L << (PWDENCRYPT - 706)) | (1L << (PYTHON - 706)) | (1L << (QUERY - 706)) | (1L << (QUERY_SQUARE_BRACKET - 706)) | (1L << (QUEUE - 706)) | (1L << (QUEUE_DELAY - 706)) | (1L << (QUOTED_IDENTIFIER - 706)) | (1L << (QUOTENAME - 706)) | (1L << (R - 706)) | (1L << (RANDOMIZED - 706)) | (1L << (RANGE - 706)) | (1L << (RANK - 706)) | (1L << (RC2 - 706)) | (1L << (RC4 - 706)) | (1L << (RC4_128 - 706)) | (1L << (READCOMMITTED - 706)) | (1L << (READCOMMITTEDLOCK - 706)) | (1L << (READONLY - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (READPAST - 770)) | (1L << (READUNCOMMITTED - 770)) | (1L << (READWRITE - 770)) | (1L << (READ_COMMITTED_SNAPSHOT - 770)) | (1L << (READ_ONLY - 770)) | (1L << (READ_ONLY_ROUTING_LIST - 770)) | (1L << (READ_WRITE - 770)) | (1L << (READ_WRITE_FILEGROUPS - 770)) | (1L << (REBUILD - 770)) | (1L << (RECEIVE - 770)) | (1L << (RECOMPILE - 770)) | (1L << (RECOVERY - 770)) | (1L << (RECURSIVE_TRIGGERS - 770)) | (1L << (REGENERATE - 770)) | (1L << (RELATED_CONVERSATION - 770)) | (1L << (RELATED_CONVERSATION_GROUP - 770)) | (1L << (RELATIVE - 770)) | (1L << (REMOTE - 770)) | (1L << (REMOTE_PROC_TRANSACTIONS - 770)) | (1L << (REMOTE_SERVICE_NAME - 770)) | (1L << (REMOVE - 770)) | (1L << (REORGANIZE - 770)) | (1L << (REPAIR_ALLOW_DATA_LOSS - 770)) | (1L << (REPAIR_FAST - 770)) | (1L << (REPAIR_REBUILD - 770)) | (1L << (REPEATABLE - 770)) | (1L << (REPEATABLEREAD - 770)) | (1L << (REPLACE - 770)) | (1L << (REPLICA - 770)) | (1L << (REPLICATE - 770)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 770)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 770)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 770)) | (1L << (REQUIRED - 770)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 770)) | (1L << (RESAMPLE - 770)) | (1L << (RESERVE_DISK_SPACE - 770)) | (1L << (RESET - 770)) | (1L << (RESOURCE - 770)) | (1L << (RESOURCES - 770)) | (1L << (RESOURCE_MANAGER_LOCATION - 770)) | (1L << (RESTART - 770)) | (1L << (RESTRICTED_USER - 770)) | (1L << (RESUMABLE - 770)) | (1L << (RESUME - 770)) | (1L << (RETAINDAYS - 770)) | (1L << (RETENTION - 770)) | (1L << (RETURNS - 770)) | (1L << (REVERSE - 770)) | (1L << (REWIND - 770)) | (1L << (ROBUST - 770)) | (1L << (ROLE - 770)) | (1L << (ROOT - 770)))) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (ROUND_ROBIN - 834)) | (1L << (ROUTE - 834)) | (1L << (ROW - 834)) | (1L << (ROWCOUNT_BIG - 834)) | (1L << (ROWGUID - 834)) | (1L << (ROWLOCK - 834)) | (1L << (ROWS - 834)) | (1L << (ROW_NUMBER - 834)) | (1L << (RSA_1024 - 834)) | (1L << (RSA_2048 - 834)) | (1L << (RSA_3072 - 834)) | (1L << (RSA_4096 - 834)) | (1L << (RSA_512 - 834)) | (1L << (RTRIM - 834)) | (1L << (SAFE - 834)) | (1L << (SAFETY - 834)) | (1L << (SAMPLE - 834)) | (1L << (SCHEDULER - 834)) | (1L << (SCHEMABINDING - 834)) | (1L << (SCHEMA_ID - 834)) | (1L << (SCHEMA_NAME - 834)) | (1L << (SCHEME - 834)) | (1L << (SCOPED - 834)) | (1L << (SCOPE_IDENTITY - 834)) | (1L << (SCRIPT - 834)) | (1L << (SCROLL - 834)) | (1L << (SCROLL_LOCKS - 834)) | (1L << (SEARCH - 834)) | (1L << (SECONDARY - 834)) | (1L << (SECONDARY_ONLY - 834)) | (1L << (SECONDARY_ROLE - 834)) | (1L << (SECONDS - 834)) | (1L << (SECRET - 834)) | (1L << (SECURABLES - 834)) | (1L << (SECURITY - 834)) | (1L << (SECURITY_LOG - 834)) | (1L << (SEEDING_MODE - 834)) | (1L << (SELF - 834)) | (1L << (SEMI_SENSITIVE - 834)) | (1L << (SEND - 834)) | (1L << (SENT - 834)) | (1L << (SEQUENCE - 834)) | (1L << (SEQUENCE_NUMBER - 834)) | (1L << (SERIALIZABLE - 834)) | (1L << (SERVER - 834)) | (1L << (SERVERPROPERTY - 834)) | (1L << (SERVICE - 834)) | (1L << (SERVICEBROKER - 834)) | (1L << (SERVICE_BROKER - 834)) | (1L << (SERVICE_NAME - 834)) | (1L << (SESSION - 834)) | (1L << (SESSIONPROPERTY - 834)) | (1L << (SESSION_CONTEXT - 834)))) != 0) || ((((_la - 898)) & ~0x3f) == 0 && ((1L << (_la - 898)) & ((1L << (SESSION_TIMEOUT - 898)) | (1L << (SETERROR - 898)) | (1L << (SETTINGS - 898)) | (1L << (SHARE - 898)) | (1L << (SHARED - 898)) | (1L << (SHOWCONTIG - 898)) | (1L << (SHOWPLAN - 898)) | (1L << (SHOWPLAN_ALL - 898)) | (1L << (SHOWPLAN_TEXT - 898)) | (1L << (SHOWPLAN_XML - 898)) | (1L << (SHRINKLOG - 898)) | (1L << (SID - 898)) | (1L << (SIGNATURE - 898)) | (1L << (SIMPLE - 898)) | (1L << (SINGLE_USER - 898)) | (1L << (SIZE - 898)) | (1L << (SKIP_KEYWORD - 898)) | (1L << (SMALLINT - 898)) | (1L << (SNAPSHOT - 898)) | (1L << (SOFTNUMA - 898)) | (1L << (SORT_IN_TEMPDB - 898)) | (1L << (SOUNDEX - 898)) | (1L << (SOURCE - 898)) | (1L << (SPACE_KEYWORD - 898)) | (1L << (SPARSE - 898)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 898)) | (1L << (SPECIFICATION - 898)) | (1L << (SPLIT - 898)) | (1L << (SQL - 898)) | (1L << (SQLDUMPERFLAGS - 898)) | (1L << (SQLDUMPERPATH - 898)) | (1L << (SQLDUMPERTIMEOUT - 898)) | (1L << (SQL_VARIANT_PROPERTY - 898)) | (1L << (STANDBY - 898)) | (1L << (START - 898)) | (1L << (STARTED - 898)) | (1L << (STARTUP_STATE - 898)) | (1L << (START_DATE - 898)) | (1L << (STATE - 898)) | (1L << (STATIC - 898)) | (1L << (STATISTICS_INCREMENTAL - 898)) | (1L << (STATISTICS_NORECOMPUTE - 898)) | (1L << (STATS - 898)) | (1L << (STATS_DATE - 898)) | (1L << (STATS_STREAM - 898)) | (1L << (STATUS - 898)) | (1L << (STATUSONLY - 898)) | (1L << (STDEV - 898)) | (1L << (STDEVP - 898)) | (1L << (STOP - 898)) | (1L << (STOPLIST - 898)) | (1L << (STOPPED - 898)) | (1L << (STOP_ON_ERROR - 898)) | (1L << (STR - 898)) | (1L << (STRING_AGG - 898)))) != 0) || ((((_la - 962)) & ~0x3f) == 0 && ((1L << (_la - 962)) & ((1L << (STRING_ESCAPE - 962)) | (1L << (STUFF - 962)) | (1L << (SUBJECT - 962)) | (1L << (SUBSCRIBE - 962)) | (1L << (SUBSCRIPTION - 962)) | (1L << (SUBSTRING - 962)) | (1L << (SUM - 962)) | (1L << (SUPPORTED - 962)) | (1L << (SUSER_ID - 962)) | (1L << (SUSER_NAME - 962)) | (1L << (SUSER_SID - 962)) | (1L << (SUSER_SNAME - 962)) | (1L << (SUSPEND - 962)) | (1L << (SWITCH - 962)) | (1L << (SYMMETRIC - 962)) | (1L << (SYNCHRONOUS_COMMIT - 962)) | (1L << (SYNONYM - 962)) | (1L << (SYSTEM - 962)) | (1L << (TABLERESULTS - 962)) | (1L << (TABLOCK - 962)) | (1L << (TABLOCKX - 962)) | (1L << (TAKE - 962)) | (1L << (TAPE - 962)) | (1L << (TARGET - 962)) | (1L << (TARGET_RECOVERY_TIME - 962)) | (1L << (TB - 962)) | (1L << (TCP - 962)) | (1L << (TEXTIMAGE_ON - 962)) | (1L << (THROW - 962)) | (1L << (TIES - 962)) | (1L << (TIME - 962)) | (1L << (TIMEOUT - 962)) | (1L << (TIMER - 962)) | (1L << (TINYINT - 962)) | (1L << (TORN_PAGE_DETECTION - 962)) | (1L << (TOSTRING - 962)) | (1L << (TRACE - 962)) | (1L << (TRACKING - 962)) | (1L << (TRACK_CAUSALITY - 962)) | (1L << (TRANSACTION_ID - 962)) | (1L << (TRANSFER - 962)) | (1L << (TRANSFORM_NOISE_WORDS - 962)) | (1L << (TRANSLATE - 962)) | (1L << (TRIM - 962)) | (1L << (TRIPLE_DES - 962)) | (1L << (TRIPLE_DES_3KEY - 962)) | (1L << (TRUSTWORTHY - 962)) | (1L << (TRY - 962)) | (1L << (TRY_CAST - 962)) | (1L << (TSQL - 962)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 962)) | (1L << (TYPE - 962)))) != 0) || ((((_la - 1026)) & ~0x3f) == 0 && ((1L << (_la - 1026)) & ((1L << (TYPEPROPERTY - 1026)) | (1L << (TYPE_ID - 1026)) | (1L << (TYPE_NAME - 1026)) | (1L << (TYPE_WARNING - 1026)) | (1L << (UNBOUNDED - 1026)) | (1L << (UNCHECKED - 1026)) | (1L << (UNCOMMITTED - 1026)) | (1L << (UNICODE - 1026)) | (1L << (UNKNOWN - 1026)) | (1L << (UNLIMITED - 1026)) | (1L << (UNLOCK - 1026)) | (1L << (UNMASK - 1026)) | (1L << (UNSAFE - 1026)) | (1L << (UOW - 1026)) | (1L << (UPDLOCK - 1026)) | (1L << (UPPER - 1026)) | (1L << (URL - 1026)) | (1L << (USED - 1026)) | (1L << (USER_ID - 1026)) | (1L << (USER_NAME - 1026)) | (1L << (USING - 1026)) | (1L << (VALIDATION - 1026)) | (1L << (VALID_XML - 1026)) | (1L << (VALUE - 1026)) | (1L << (VALUE_SQUARE_BRACKET - 1026)) | (1L << (VAR - 1026)) | (1L << (VARBINARY_KEYWORD - 1026)) | (1L << (VARP - 1026)) | (1L << (VERBOSELOGGING - 1026)) | (1L << (VERIFY_CLONEDB - 1026)) | (1L << (VERSION - 1026)) | (1L << (VIEWS - 1026)) | (1L << (VIEW_METADATA - 1026)) | (1L << (VISIBILITY - 1026)) | (1L << (WAIT - 1026)) | (1L << (WAIT_AT_LOW_PRIORITY - 1026)) | (1L << (WELL_FORMED_XML - 1026)) | (1L << (WINDOWS - 1026)) | (1L << (WITHOUT - 1026)) | (1L << (WITHOUT_ARRAY_WRAPPER - 1026)) | (1L << (WITNESS - 1026)) | (1L << (WORK - 1026)) | (1L << (WORKLOAD - 1026)) | (1L << (XACT_ABORT - 1026)) | (1L << (XACT_STATE - 1026)) | (1L << (XLOCK - 1026)))) != 0) || ((((_la - 1090)) & ~0x3f) == 0 && ((1L << (_la - 1090)) & ((1L << (XML - 1090)) | (1L << (XMLDATA - 1090)) | (1L << (XMLNAMESPACES - 1090)) | (1L << (XMLSCHEMA - 1090)) | (1L << (XML_COMPRESSION - 1090)) | (1L << (XSINIL - 1090)) | (1L << (ZONE - 1090)) | (1L << (ABS - 1090)) | (1L << (ACOS - 1090)) | (1L << (ASIN - 1090)) | (1L << (ATAN - 1090)) | (1L << (ATN2 - 1090)) | (1L << (CEILING - 1090)) | (1L << (COS - 1090)) | (1L << (COT - 1090)) | (1L << (DEGREES - 1090)) | (1L << (EXP - 1090)) | (1L << (FLOOR - 1090)) | (1L << (LOG10 - 1090)) | (1L << (PI - 1090)) | (1L << (POWER - 1090)) | (1L << (RADIANS - 1090)) | (1L << (RAND - 1090)) | (1L << (ROUND - 1090)) | (1L << (SIGN - 1090)) | (1L << (SIN - 1090)) | (1L << (SQRT - 1090)) | (1L << (SQUARE - 1090)) | (1L << (TAN - 1090)) | (1L << (CURRENT_TIMEZONE - 1090)) | (1L << (CURRENT_TIMEZONE_ID - 1090)) | (1L << (DATE_BUCKET - 1090)) | (1L << (DATEDIFF_BIG - 1090)) | (1L << (DATEFROMPARTS - 1090)) | (1L << (DATETIME2FROMPARTS - 1090)) | (1L << (DATETIMEFROMPARTS - 1090)) | (1L << (DATETIMEOFFSETFROMPARTS - 1090)) | (1L << (DATETRUNC - 1090)) | (1L << (DAY - 1090)) | (1L << (EOMONTH - 1090)) | (1L << (ISDATE - 1090)) | (1L << (MONTH - 1090)) | (1L << (SMALLDATETIMEFROMPARTS - 1090)) | (1L << (SWITCHOFFSET - 1090)) | (1L << (SYSDATETIME - 1090)) | (1L << (SYSDATETIMEOFFSET - 1090)) | (1L << (SYSUTCDATETIME - 1090)) | (1L << (TIMEFROMPARTS - 1090)) | (1L << (TODATETIMEOFFSET - 1090)) | (1L << (YEAR - 1090)) | (1L << (QUARTER - 1090)) | (1L << (DAYOFYEAR - 1090)) | (1L << (WEEK - 1090)) | (1L << (HOUR - 1090)) | (1L << (MINUTE - 1090)) | (1L << (SECOND - 1090)) | (1L << (MILLISECOND - 1090)) | (1L << (MICROSECOND - 1090)) | (1L << (NANOSECOND - 1090)) | (1L << (TZOFFSET - 1090)) | (1L << (ISO_WEEK - 1090)) | (1L << (WEEKDAY - 1090)) | (1L << (YEAR_ABBR - 1090)) | (1L << (QUARTER_ABBR - 1090)))) != 0) || ((((_la - 1154)) & ~0x3f) == 0 && ((1L << (_la - 1154)) & ((1L << (MONTH_ABBR - 1154)) | (1L << (DAYOFYEAR_ABBR - 1154)) | (1L << (DAY_ABBR - 1154)) | (1L << (WEEK_ABBR - 1154)) | (1L << (HOUR_ABBR - 1154)) | (1L << (MINUTE_ABBR - 1154)) | (1L << (SECOND_ABBR - 1154)) | (1L << (MILLISECOND_ABBR - 1154)) | (1L << (MICROSECOND_ABBR - 1154)) | (1L << (NANOSECOND_ABBR - 1154)) | (1L << (TZOFFSET_ABBR - 1154)) | (1L << (ISO_WEEK_ABBR - 1154)) | (1L << (WEEKDAY_ABBR - 1154)) | (1L << (SP_EXECUTESQL - 1154)) | (1L << (VARCHAR - 1154)) | (1L << (NVARCHAR - 1154)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_Context : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ITerminalNode TEMP_ID() { return GetToken(TSqlParser.TEMP_ID, 0); }
		public ITerminalNode DOUBLE_QUOTE_ID() { return GetToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public ITerminalNode DOUBLE_QUOTE_BLANK() { return GetToken(TSqlParser.DOUBLE_QUOTE_BLANK, 0); }
		public ITerminalNode SQUARE_BRACKET_ID() { return GetToken(TSqlParser.SQUARE_BRACKET_ID, 0); }
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public ITerminalNode RAW() { return GetToken(TSqlParser.RAW, 0); }
		public Id_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterId_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitId_(this);
		}
	}

	[RuleVersion(0)]
	public Id_Context id_() {
		Id_Context _localctx = new Id_Context(_ctx, State);
		EnterRule(_localctx, 1216, RULE_id_);
		try {
			State = 14623;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1849,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 14616; Match(ID);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 14617; Match(TEMP_ID);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 14618; Match(DOUBLE_QUOTE_ID);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 14619; Match(DOUBLE_QUOTE_BLANK);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 14620; Match(SQUARE_BRACKET_ID);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 14621; keyword();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 14622; Match(RAW);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_idContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public Simple_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSimple_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSimple_id(this);
		}
	}

	[RuleVersion(0)]
	public Simple_idContext simple_id() {
		Simple_idContext _localctx = new Simple_idContext(_ctx, State);
		EnterRule(_localctx, 1218, RULE_simple_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14625; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_or_stringContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Id_or_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_or_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterId_or_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitId_or_string(this);
		}
	}

	[RuleVersion(0)]
	public Id_or_stringContext id_or_string() {
		Id_or_stringContext _localctx = new Id_or_stringContext(_ctx, State);
		EnterRule(_localctx, 1220, RULE_id_or_string);
		try {
			State = 14629;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1850,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 14627; id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 14628; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_operatorContext : ParserRuleContext {
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterComparison_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitComparison_operator(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_operatorContext comparison_operator() {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(_ctx, State);
		EnterRule(_localctx, 1222, RULE_comparison_operator);
		try {
			State = 14646;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1851,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 14631; Match(EQUAL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 14632; Match(GREATER);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 14633; Match(LESS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 14634; Match(LESS);
				State = 14635; Match(EQUAL);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 14636; Match(GREATER);
				State = 14637; Match(EQUAL);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 14638; Match(LESS);
				State = 14639; Match(GREATER);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 14640; Match(EXCLAMATION);
				State = 14641; Match(EQUAL);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 14642; Match(EXCLAMATION);
				State = 14643; Match(GREATER);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 14644; Match(EXCLAMATION);
				State = 14645; Match(LESS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(_ctx, State);
		EnterRule(_localctx, 1224, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14648;
			_la = _input.La(1);
			if ( !(((((_la - 1194)) & ~0x3f) == 0 && ((1L << (_la - 1194)) & ((1L << (PLUS_ASSIGN - 1194)) | (1L << (MINUS_ASSIGN - 1194)) | (1L << (MULT_ASSIGN - 1194)) | (1L << (DIV_ASSIGN - 1194)) | (1L << (MOD_ASSIGN - 1194)) | (1L << (AND_ASSIGN - 1194)) | (1L << (XOR_ASSIGN - 1194)) | (1L << (OR_ASSIGN - 1194)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_sizeContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode KB() { return GetToken(TSqlParser.KB, 0); }
		public ITerminalNode MB() { return GetToken(TSqlParser.MB, 0); }
		public ITerminalNode GB() { return GetToken(TSqlParser.GB, 0); }
		public ITerminalNode TB() { return GetToken(TSqlParser.TB, 0); }
		public File_sizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_size; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_size(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_size(this);
		}
	}

	[RuleVersion(0)]
	public File_sizeContext file_size() {
		File_sizeContext _localctx = new File_sizeContext(_ctx, State);
		EnterRule(_localctx, 1226, RULE_file_size);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14650; Match(DECIMAL);
			State = 14652;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1852,_ctx) ) {
			case 1:
				{
				State = 14651;
				_la = _input.La(1);
				if ( !(_la==GB || _la==KB || _la==MB || _la==TB || _la==MODULE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 47: return assembly_option_sempred((Assembly_optionContext)_localctx, predIndex);

		case 461: return expression_sempred((ExpressionContext)_localctx, predIndex);

		case 473: return search_condition_sempred((Search_conditionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool assembly_option_sempred(Assembly_optionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(_ctx, 5);

		case 2: return Precpred(_ctx, 4);

		case 3: return Precpred(_ctx, 12);

		case 4: return Precpred(_ctx, 11);

		case 5: return Precpred(_ctx, 10);

		case 6: return Precpred(_ctx, 3);
		}
		return true;
	}
	private bool search_condition_sempred(Search_conditionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(_ctx, 2);

		case 8: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x4CA\x3941\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9"+
		"\t\xB9\x4\xBA\t\xBA\x4\xBB\t\xBB\x4\xBC\t\xBC\x4\xBD\t\xBD\x4\xBE\t\xBE"+
		"\x4\xBF\t\xBF\x4\xC0\t\xC0\x4\xC1\t\xC1\x4\xC2\t\xC2\x4\xC3\t\xC3\x4\xC4"+
		"\t\xC4\x4\xC5\t\xC5\x4\xC6\t\xC6\x4\xC7\t\xC7\x4\xC8\t\xC8\x4\xC9\t\xC9"+
		"\x4\xCA\t\xCA\x4\xCB\t\xCB\x4\xCC\t\xCC\x4\xCD\t\xCD\x4\xCE\t\xCE\x4\xCF"+
		"\t\xCF\x4\xD0\t\xD0\x4\xD1\t\xD1\x4\xD2\t\xD2\x4\xD3\t\xD3\x4\xD4\t\xD4"+
		"\x4\xD5\t\xD5\x4\xD6\t\xD6\x4\xD7\t\xD7\x4\xD8\t\xD8\x4\xD9\t\xD9\x4\xDA"+
		"\t\xDA\x4\xDB\t\xDB\x4\xDC\t\xDC\x4\xDD\t\xDD\x4\xDE\t\xDE\x4\xDF\t\xDF"+
		"\x4\xE0\t\xE0\x4\xE1\t\xE1\x4\xE2\t\xE2\x4\xE3\t\xE3\x4\xE4\t\xE4\x4\xE5"+
		"\t\xE5\x4\xE6\t\xE6\x4\xE7\t\xE7\x4\xE8\t\xE8\x4\xE9\t\xE9\x4\xEA\t\xEA"+
		"\x4\xEB\t\xEB\x4\xEC\t\xEC\x4\xED\t\xED\x4\xEE\t\xEE\x4\xEF\t\xEF\x4\xF0"+
		"\t\xF0\x4\xF1\t\xF1\x4\xF2\t\xF2\x4\xF3\t\xF3\x4\xF4\t\xF4\x4\xF5\t\xF5"+
		"\x4\xF6\t\xF6\x4\xF7\t\xF7\x4\xF8\t\xF8\x4\xF9\t\xF9\x4\xFA\t\xFA\x4\xFB"+
		"\t\xFB\x4\xFC\t\xFC\x4\xFD\t\xFD\x4\xFE\t\xFE\x4\xFF\t\xFF\x4\x100\t\x100"+
		"\x4\x101\t\x101\x4\x102\t\x102\x4\x103\t\x103\x4\x104\t\x104\x4\x105\t"+
		"\x105\x4\x106\t\x106\x4\x107\t\x107\x4\x108\t\x108\x4\x109\t\x109\x4\x10A"+
		"\t\x10A\x4\x10B\t\x10B\x4\x10C\t\x10C\x4\x10D\t\x10D\x4\x10E\t\x10E\x4"+
		"\x10F\t\x10F\x4\x110\t\x110\x4\x111\t\x111\x4\x112\t\x112\x4\x113\t\x113"+
		"\x4\x114\t\x114\x4\x115\t\x115\x4\x116\t\x116\x4\x117\t\x117\x4\x118\t"+
		"\x118\x4\x119\t\x119\x4\x11A\t\x11A\x4\x11B\t\x11B\x4\x11C\t\x11C\x4\x11D"+
		"\t\x11D\x4\x11E\t\x11E\x4\x11F\t\x11F\x4\x120\t\x120\x4\x121\t\x121\x4"+
		"\x122\t\x122\x4\x123\t\x123\x4\x124\t\x124\x4\x125\t\x125\x4\x126\t\x126"+
		"\x4\x127\t\x127\x4\x128\t\x128\x4\x129\t\x129\x4\x12A\t\x12A\x4\x12B\t"+
		"\x12B\x4\x12C\t\x12C\x4\x12D\t\x12D\x4\x12E\t\x12E\x4\x12F\t\x12F\x4\x130"+
		"\t\x130\x4\x131\t\x131\x4\x132\t\x132\x4\x133\t\x133\x4\x134\t\x134\x4"+
		"\x135\t\x135\x4\x136\t\x136\x4\x137\t\x137\x4\x138\t\x138\x4\x139\t\x139"+
		"\x4\x13A\t\x13A\x4\x13B\t\x13B\x4\x13C\t\x13C\x4\x13D\t\x13D\x4\x13E\t"+
		"\x13E\x4\x13F\t\x13F\x4\x140\t\x140\x4\x141\t\x141\x4\x142\t\x142\x4\x143"+
		"\t\x143\x4\x144\t\x144\x4\x145\t\x145\x4\x146\t\x146\x4\x147\t\x147\x4"+
		"\x148\t\x148\x4\x149\t\x149\x4\x14A\t\x14A\x4\x14B\t\x14B\x4\x14C\t\x14C"+
		"\x4\x14D\t\x14D\x4\x14E\t\x14E\x4\x14F\t\x14F\x4\x150\t\x150\x4\x151\t"+
		"\x151\x4\x152\t\x152\x4\x153\t\x153\x4\x154\t\x154\x4\x155\t\x155\x4\x156"+
		"\t\x156\x4\x157\t\x157\x4\x158\t\x158\x4\x159\t\x159\x4\x15A\t\x15A\x4"+
		"\x15B\t\x15B\x4\x15C\t\x15C\x4\x15D\t\x15D\x4\x15E\t\x15E\x4\x15F\t\x15F"+
		"\x4\x160\t\x160\x4\x161\t\x161\x4\x162\t\x162\x4\x163\t\x163\x4\x164\t"+
		"\x164\x4\x165\t\x165\x4\x166\t\x166\x4\x167\t\x167\x4\x168\t\x168\x4\x169"+
		"\t\x169\x4\x16A\t\x16A\x4\x16B\t\x16B\x4\x16C\t\x16C\x4\x16D\t\x16D\x4"+
		"\x16E\t\x16E\x4\x16F\t\x16F\x4\x170\t\x170\x4\x171\t\x171\x4\x172\t\x172"+
		"\x4\x173\t\x173\x4\x174\t\x174\x4\x175\t\x175\x4\x176\t\x176\x4\x177\t"+
		"\x177\x4\x178\t\x178\x4\x179\t\x179\x4\x17A\t\x17A\x4\x17B\t\x17B\x4\x17C"+
		"\t\x17C\x4\x17D\t\x17D\x4\x17E\t\x17E\x4\x17F\t\x17F\x4\x180\t\x180\x4"+
		"\x181\t\x181\x4\x182\t\x182\x4\x183\t\x183\x4\x184\t\x184\x4\x185\t\x185"+
		"\x4\x186\t\x186\x4\x187\t\x187\x4\x188\t\x188\x4\x189\t\x189\x4\x18A\t"+
		"\x18A\x4\x18B\t\x18B\x4\x18C\t\x18C\x4\x18D\t\x18D\x4\x18E\t\x18E\x4\x18F"+
		"\t\x18F\x4\x190\t\x190\x4\x191\t\x191\x4\x192\t\x192\x4\x193\t\x193\x4"+
		"\x194\t\x194\x4\x195\t\x195\x4\x196\t\x196\x4\x197\t\x197\x4\x198\t\x198"+
		"\x4\x199\t\x199\x4\x19A\t\x19A\x4\x19B\t\x19B\x4\x19C\t\x19C\x4\x19D\t"+
		"\x19D\x4\x19E\t\x19E\x4\x19F\t\x19F\x4\x1A0\t\x1A0\x4\x1A1\t\x1A1\x4\x1A2"+
		"\t\x1A2\x4\x1A3\t\x1A3\x4\x1A4\t\x1A4\x4\x1A5\t\x1A5\x4\x1A6\t\x1A6\x4"+
		"\x1A7\t\x1A7\x4\x1A8\t\x1A8\x4\x1A9\t\x1A9\x4\x1AA\t\x1AA\x4\x1AB\t\x1AB"+
		"\x4\x1AC\t\x1AC\x4\x1AD\t\x1AD\x4\x1AE\t\x1AE\x4\x1AF\t\x1AF\x4\x1B0\t"+
		"\x1B0\x4\x1B1\t\x1B1\x4\x1B2\t\x1B2\x4\x1B3\t\x1B3\x4\x1B4\t\x1B4\x4\x1B5"+
		"\t\x1B5\x4\x1B6\t\x1B6\x4\x1B7\t\x1B7\x4\x1B8\t\x1B8\x4\x1B9\t\x1B9\x4"+
		"\x1BA\t\x1BA\x4\x1BB\t\x1BB\x4\x1BC\t\x1BC\x4\x1BD\t\x1BD\x4\x1BE\t\x1BE"+
		"\x4\x1BF\t\x1BF\x4\x1C0\t\x1C0\x4\x1C1\t\x1C1\x4\x1C2\t\x1C2\x4\x1C3\t"+
		"\x1C3\x4\x1C4\t\x1C4\x4\x1C5\t\x1C5\x4\x1C6\t\x1C6\x4\x1C7\t\x1C7\x4\x1C8"+
		"\t\x1C8\x4\x1C9\t\x1C9\x4\x1CA\t\x1CA\x4\x1CB\t\x1CB\x4\x1CC\t\x1CC\x4"+
		"\x1CD\t\x1CD\x4\x1CE\t\x1CE\x4\x1CF\t\x1CF\x4\x1D0\t\x1D0\x4\x1D1\t\x1D1"+
		"\x4\x1D2\t\x1D2\x4\x1D3\t\x1D3\x4\x1D4\t\x1D4\x4\x1D5\t\x1D5\x4\x1D6\t"+
		"\x1D6\x4\x1D7\t\x1D7\x4\x1D8\t\x1D8\x4\x1D9\t\x1D9\x4\x1DA\t\x1DA\x4\x1DB"+
		"\t\x1DB\x4\x1DC\t\x1DC\x4\x1DD\t\x1DD\x4\x1DE\t\x1DE\x4\x1DF\t\x1DF\x4"+
		"\x1E0\t\x1E0\x4\x1E1\t\x1E1\x4\x1E2\t\x1E2\x4\x1E3\t\x1E3\x4\x1E4\t\x1E4"+
		"\x4\x1E5\t\x1E5\x4\x1E6\t\x1E6\x4\x1E7\t\x1E7\x4\x1E8\t\x1E8\x4\x1E9\t"+
		"\x1E9\x4\x1EA\t\x1EA\x4\x1EB\t\x1EB\x4\x1EC\t\x1EC\x4\x1ED\t\x1ED\x4\x1EE"+
		"\t\x1EE\x4\x1EF\t\x1EF\x4\x1F0\t\x1F0\x4\x1F1\t\x1F1\x4\x1F2\t\x1F2\x4"+
		"\x1F3\t\x1F3\x4\x1F4\t\x1F4\x4\x1F5\t\x1F5\x4\x1F6\t\x1F6\x4\x1F7\t\x1F7"+
		"\x4\x1F8\t\x1F8\x4\x1F9\t\x1F9\x4\x1FA\t\x1FA\x4\x1FB\t\x1FB\x4\x1FC\t"+
		"\x1FC\x4\x1FD\t\x1FD\x4\x1FE\t\x1FE\x4\x1FF\t\x1FF\x4\x200\t\x200\x4\x201"+
		"\t\x201\x4\x202\t\x202\x4\x203\t\x203\x4\x204\t\x204\x4\x205\t\x205\x4"+
		"\x206\t\x206\x4\x207\t\x207\x4\x208\t\x208\x4\x209\t\x209\x4\x20A\t\x20A"+
		"\x4\x20B\t\x20B\x4\x20C\t\x20C\x4\x20D\t\x20D\x4\x20E\t\x20E\x4\x20F\t"+
		"\x20F\x4\x210\t\x210\x4\x211\t\x211\x4\x212\t\x212\x4\x213\t\x213\x4\x214"+
		"\t\x214\x4\x215\t\x215\x4\x216\t\x216\x4\x217\t\x217\x4\x218\t\x218\x4"+
		"\x219\t\x219\x4\x21A\t\x21A\x4\x21B\t\x21B\x4\x21C\t\x21C\x4\x21D\t\x21D"+
		"\x4\x21E\t\x21E\x4\x21F\t\x21F\x4\x220\t\x220\x4\x221\t\x221\x4\x222\t"+
		"\x222\x4\x223\t\x223\x4\x224\t\x224\x4\x225\t\x225\x4\x226\t\x226\x4\x227"+
		"\t\x227\x4\x228\t\x228\x4\x229\t\x229\x4\x22A\t\x22A\x4\x22B\t\x22B\x4"+
		"\x22C\t\x22C\x4\x22D\t\x22D\x4\x22E\t\x22E\x4\x22F\t\x22F\x4\x230\t\x230"+
		"\x4\x231\t\x231\x4\x232\t\x232\x4\x233\t\x233\x4\x234\t\x234\x4\x235\t"+
		"\x235\x4\x236\t\x236\x4\x237\t\x237\x4\x238\t\x238\x4\x239\t\x239\x4\x23A"+
		"\t\x23A\x4\x23B\t\x23B\x4\x23C\t\x23C\x4\x23D\t\x23D\x4\x23E\t\x23E\x4"+
		"\x23F\t\x23F\x4\x240\t\x240\x4\x241\t\x241\x4\x242\t\x242\x4\x243\t\x243"+
		"\x4\x244\t\x244\x4\x245\t\x245\x4\x246\t\x246\x4\x247\t\x247\x4\x248\t"+
		"\x248\x4\x249\t\x249\x4\x24A\t\x24A\x4\x24B\t\x24B\x4\x24C\t\x24C\x4\x24D"+
		"\t\x24D\x4\x24E\t\x24E\x4\x24F\t\x24F\x4\x250\t\x250\x4\x251\t\x251\x4"+
		"\x252\t\x252\x4\x253\t\x253\x4\x254\t\x254\x4\x255\t\x255\x4\x256\t\x256"+
		"\x4\x257\t\x257\x4\x258\t\x258\x4\x259\t\x259\x4\x25A\t\x25A\x4\x25B\t"+
		"\x25B\x4\x25C\t\x25C\x4\x25D\t\x25D\x4\x25E\t\x25E\x4\x25F\t\x25F\x4\x260"+
		"\t\x260\x4\x261\t\x261\x4\x262\t\x262\x4\x263\t\x263\x4\x264\t\x264\x4"+
		"\x265\t\x265\x4\x266\t\x266\x4\x267\t\x267\x3\x2\a\x2\x4D0\n\x2\f\x2\xE"+
		"\x2\x4D3\v\x2\x3\x2\x3\x2\x3\x2\a\x2\x4D8\n\x2\f\x2\xE\x2\x4DB\v\x2\x3"+
		"\x2\x3\x2\x5\x2\x4DF\n\x2\x3\x3\x3\x3\x5\x3\x4E3\n\x3\x3\x3\x3\x3\x6\x3"+
		"\x4E7\n\x3\r\x3\xE\x3\x4E8\x5\x3\x4EB\n\x3\x3\x3\a\x3\x4EE\n\x3\f\x3\xE"+
		"\x3\x4F1\v\x3\x3\x3\x3\x3\a\x3\x4F5\n\x3\f\x3\xE\x3\x4F8\v\x3\x5\x3\x4FA"+
		"\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x500\n\x4\x3\x5\x3\x5\x5\x5\x504\n"+
		"\x5\x3\x5\x3\x5\x5\x5\x508\n\x5\x3\x5\x3\x5\x5\x5\x50C\n\x5\x3\x5\x3\x5"+
		"\x5\x5\x510\n\x5\x3\x5\x3\x5\x5\x5\x514\n\x5\x3\x5\x3\x5\x5\x5\x518\n"+
		"\x5\x3\x5\x5\x5\x51B\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x522\n\x6"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x5CA"+
		"\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x5D1\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x5DF\n\t\x3\n\x3\n\x5\n\x5E3\n\n"+
		"\x3\n\a\n\x5E6\n\n\f\n\xE\n\x5E9\v\n\x3\n\x3\n\x5\n\x5ED\n\n\x3\v\x3\v"+
		"\x5\v\x5F1\n\v\x3\f\x3\f\x5\f\x5F5\n\f\x3\r\x3\r\x3\r\x5\r\x5FA\n\r\x3"+
		"\r\x3\r\x3\r\x5\r\x5FF\n\r\x5\r\x601\n\r\x3\xE\x3\xE\x5\xE\x605\n\xE\x3"+
		"\xE\x5\xE\x608\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x60F\n\xF\x3\xF"+
		"\x5\xF\x612\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10"+
		"\x61B\n\x10\x3\x10\x5\x10\x61E\n\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13"+
		"\x3\x13\x3\x14\x3\x14\x3\x14\x5\x14\x629\n\x14\x3\x14\x6\x14\x62C\n\x14"+
		"\r\x14\xE\x14\x62D\x3\x14\x3\x14\x3\x14\x5\x14\x633\n\x14\x3\x14\x3\x14"+
		"\x3\x14\x5\x14\x638\n\x14\x3\x14\a\x14\x63B\n\x14\f\x14\xE\x14\x63E\v"+
		"\x14\x3\x14\x3\x14\x3\x14\x5\x14\x643\n\x14\x3\x15\x3\x15\x5\x15\x647"+
		"\n\x15\x3\x15\x5\x15\x64A\n\x15\x3\x15\x3\x15\x5\x15\x64E\n\x15\x3\x15"+
		"\x5\x15\x651\n\x15\x3\x15\x5\x15\x654\n\x15\x3\x16\x3\x16\x3\x16\x3\x16"+
		"\x3\x16\x5\x16\x65B\n\x16\x3\x16\x3\x16\x5\x16\x65F\n\x16\x5\x16\x661"+
		"\n\x16\x3\x17\x3\x17\x3\x17\x5\x17\x666\n\x17\x3\x17\x3\x17\a\x17\x66A"+
		"\n\x17\f\x17\xE\x17\x66D\v\x17\x3\x17\x5\x17\x670\n\x17\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x67C\n"+
		"\x18\a\x18\x67E\n\x18\f\x18\xE\x18\x681\v\x18\x3\x18\x3\x18\x3\x18\x5"+
		"\x18\x686\n\x18\x3\x18\x5\x18\x689\n\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\a\x18\x690\n\x18\f\x18\xE\x18\x693\v\x18\x5\x18\x695\n\x18\x3\x19"+
		"\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x6AA\n"+
		"\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x6B2\n\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x5\x1B\x6B7\n\x1B\x3\x1B\x5\x1B\x6BA\n\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x5\x1B\x6BF\n\x1B\x3\x1B\x5\x1B\x6C2\n\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x5\x1B\x6C7\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5"+
		"\x1C\x6D0\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D"+
		"\x3\x1D\x3\x1D\x5\x1D\x6DC\n\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x6E1\n\x1D"+
		"\x3\x1D\x5\x1D\x6E4\n\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x6E9\n\x1D\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x6EF\n\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x6F4"+
		"\n\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3"+
		" \x3!\x3!\x3!\x3\"\x5\"\x705\n\"\x3\"\x5\"\x708\n\"\x3\"\x5\"\x70B\n\""+
		"\x3\"\x5\"\x70E\n\"\x3#\x3#\x3#\x5#\x713\n#\x3$\x3$\x3%\x3%\x3%\x3&\x3"+
		"&\x5&\x71C\n&\x3\'\x3\'\x3(\x3(\x3(\x3)\x3)\x3)\x3)\x3*\x3*\x3*\x3*\x5"+
		"*\x72B\n*\x3+\x3+\x3,\x3,\x3,\x3-\x3-\x3.\x3.\x3.\x3/\x3/\x3\x30\x3\x30"+
		"\x3\x30\x5\x30\x73C\n\x30\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3"+
		"\x31\x3\x31\x3\x31\x5\x31\x747\n\x31\x3\x31\x3\x31\a\x31\x74B\n\x31\f"+
		"\x31\xE\x31\x74E\v\x31\x3\x32\x3\x32\x3\x32\x3\x32\x3\x33\x3\x33\x3\x34"+
		"\x3\x34\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x75C\n\x35\x3\x36\x3\x36\x3"+
		"\x37\x3\x37\x3\x37\x3\x38\x3\x38\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3"+
		"\x39\x5\x39\x76B\n\x39\x3:\x3:\x3;\x3;\x3;\x3;\x3;\x5;\x774\n;\x3;\x3"+
		";\x5;\x778\n;\x3;\x6;\x77B\n;\r;\xE;\x77C\x3;\x3;\x3;\x3;\x5;\x783\n;"+
		"\x3<\x3<\x3<\x3<\x5<\x789\n<\x3<\x5<\x78C\n<\x3<\x6<\x78F\n<\r<\xE<\x790"+
		"\x3<\x3<\x3<\x5<\x796\n<\x3=\x3=\x3=\x3=\x3=\x3=\x5=\x79E\n=\x3>\x3>\x3"+
		">\x3>\x3?\x3?\x3?\x3?\x5?\x7A8\n?\x3?\x3?\x3@\x3@\x3@\x3@\x3@\x3\x41\x3"+
		"\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x7BB"+
		"\n\x41\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x7C3\n\x42\x3"+
		"\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3"+
		"\x42\x5\x42\x7D0\n\x42\x5\x42\x7D2\n\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3"+
		"\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x7DE\n\x42\x5\x42\x7E0"+
		"\n\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x7E7\n\x42\x3\x43\x3"+
		"\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x5\x43\x7F0\n\x43\x3\x44\x3\x44"+
		"\x3\x44\x3\x44\x5\x44\x7F6\n\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x45\x3"+
		"\x45\x3\x45\x5\x45\x7FF\n\x45\x3\x46\x3\x46\x3G\x3G\x3H\x3H\x3H\x3H\x3"+
		"I\x3I\x3I\x3I\x5I\x80D\nI\x3I\x3I\x3I\x3I\x3J\x3J\x3J\x3J\x5J\x817\nJ"+
		"\x3J\x3J\x3J\x3J\x3K\x3K\x3K\x3K\x5K\x821\nK\x3K\x3K\x3K\x3K\x3L\x3L\x3"+
		"L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L"+
		"\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x5L\x849\nL\x3"+
		"M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M"+
		"\x3M\x3M\x3M\x5M\x860\nM\x3N\x3N\x3O\x3O\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3"+
		"P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P"+
		"\x3P\x3P\x3P\x3P\x3P\x5P\x884\nP\x5P\x886\nP\x3P\x3P\x3P\x3P\x3P\x3P\x3"+
		"P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x5P\x898\nP\x3P\x3P\x3P\x3P\x3P"+
		"\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x5"+
		"P\x8B0\nP\x3P\x5P\x8B3\nP\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P"+
		"\x3P\x5P\x8C1\nP\x3Q\x3Q\x3Q\x3Q\x3Q\x3R\x3R\x3R\x3S\x3S\x3S\x3S\x3S\x3"+
		"T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x5T"+
		"\x8E1\nT\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3"+
		"T\x5T\x8F3\nT\x3T\x5T\x8F6\nT\x3T\x3T\x3T\x5T\x8FB\nT\x3T\x5T\x8FE\nT"+
		"\x3T\x3T\x3T\x5T\x903\nT\x3T\x5T\x906\nT\x3T\x3T\x3T\x5T\x90B\nT\x3T\x5"+
		"T\x90E\nT\x3T\x3T\x3T\x5T\x913\nT\x3T\x5T\x916\nT\x3T\x3T\x3T\x3T\x3T"+
		"\x3T\x5T\x91E\nT\x3T\x5T\x921\nT\x3T\x3T\x3T\x3T\x3T\x3T\x5T\x929\nT\x3"+
		"T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x5T\x936\nT\x3T\x3T\x3T\x3T"+
		"\x3T\x3T\x3T\x3T\x3T\x5T\x941\nT\x3T\aT\x944\nT\fT\xET\x947\vT\x3T\x5"+
		"T\x94A\nT\x3T\x3T\x3T\x3T\x5T\x950\nT\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T"+
		"\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x5T\x967\nT\x3T\x3"+
		"T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x5T\x973\nT\x3T\x3T\x3T\x3T\x3T\x3T"+
		"\x3T\x3T\x3T\x5T\x97E\nT\x3T\aT\x981\nT\fT\xET\x984\vT\x3T\x5T\x987\n"+
		"T\x3T\x3T\x3T\x3T\x5T\x98D\nT\x5T\x98F\nT\x3T\x3T\x3T\x3T\x3T\x3T\x3T"+
		"\x3T\x3T\x3T\x3T\x5T\x99C\nT\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3"+
		"T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x6T\x9B1\nT\rT\xET\x9B2\x3T\x3T\x3T"+
		"\x3T\x3T\x5T\x9BA\nT\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x5T\x9C3\nT\x3T\x3T\x3"+
		"T\x5T\x9C8\nT\x3T\x5T\x9CB\nT\x3T\x3T\x3T\x5T\x9D0\nT\x3T\x5T\x9D3\nT"+
		"\x3T\x3T\x3T\x5T\x9D8\nT\x3T\x6T\x9DB\nT\rT\xET\x9DC\x3T\x3T\x3T\x3T\x3"+
		"T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T"+
		"\x3T\x3T\x3T\x3T\x5T\x9F9\nT\x3T\x3T\x3T\x3T\x3T\x3T\x5T\xA01\nT\x3T\x3"+
		"T\x6T\xA05\nT\rT\xET\xA06\x3T\x3T\x3T\x3T\x3T\x5T\xA0E\nT\x5T\xA10\nT"+
		"\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x5T\xA1D\nT\x3T\x3T\x3T\x3"+
		"T\x3T\x5T\xA24\nT\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T"+
		"\x5T\xA33\nT\x3U\x3U\x3V\x3V\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3"+
		"W\x3W\x5W\xA45\nW\x3W\x5W\xA48\nW\x5W\xA4A\nW\x3W\x3W\x3W\x5W\xA4F\nW"+
		"\x3W\x3W\x5W\xA53\nW\x3W\x5W\xA56\nW\x5W\xA58\nW\x3W\x3W\x3W\x3W\x5W\xA5E"+
		"\nW\x3W\x5W\xA61\nW\x5W\xA63\nW\x3W\x3W\x3W\x3W\x5W\xA69\nW\x5W\xA6B\n"+
		"W\x3W\x3W\x3X\x3X\x3X\x3X\x3X\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y"+
		"\x3Y\x3Y\x3Y\x5Y\xA81\nY\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x5Y\xA89\nY\x3Y\x3Y\x3"+
		"Y\x3Y\x3Y\x3Y\x5Y\xA91\nY\x6Y\xA93\nY\rY\xEY\xA94\x3Y\x3Y\x3Y\x3Y\x3Y"+
		"\x3Y\x3Y\x5Y\xA9E\nY\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3"+
		"Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x5Z\xAB3\nZ\x3Z\x3Z\x3[\x3[\x3[\x3[\x3[\x3["+
		"\x3[\x3[\x3[\x5[\xAC0\n[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3"+
		"[\x3[\x5[\xACF\n[\x6[\xAD1\n[\r[\xE[\xAD2\x3\\\x3\\\x3\\\x3\\\x3]\x3]"+
		"\x3]\x3]\x3]\x3]\x3^\x3^\x3^\x3^\x3^\x3^\x3_\x3_\x3_\x3_\x3`\x3`\x3`\x3"+
		"`\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3\x62\x3\x62\x3\x62\x3\x62\x5\x62"+
		"\xAF6\n\x62\x3\x62\x5\x62\xAF9\n\x62\x3\x62\x6\x62\xAFC\n\x62\r\x62\xE"+
		"\x62\xAFD\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x64\x3\x64\x3\x64"+
		"\x3\x64\x3\x64\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x66\x3\x66"+
		"\x3\x66\x3\x66\x5\x66\xB15\n\x66\x3\x66\x5\x66\xB18\n\x66\x3\x66\x3\x66"+
		"\x3\x66\x5\x66\xB1D\n\x66\x3\x66\x3\x66\x3g\x3g\x3g\x3g\x3h\x3h\x3h\x3"+
		"h\x3h\x3h\x3i\x3i\x3i\x3i\x3i\x3i\x3j\x3j\x3j\x3j\x3j\x3j\x5j\xB37\nj"+
		"\x3k\x3k\x3k\x3k\x3k\x3k\x3l\x3l\x3l\x3l\x3l\x3l\x5l\xB45\nl\x3l\x3l\x3"+
		"l\x5l\xB4A\nl\x3l\x3l\x3m\x3m\x3m\x3m\x5m\xB52\nm\x3m\x6m\xB55\nm\rm\xE"+
		"m\xB56\x3m\x3m\x3m\x3m\x3m\x5m\xB5E\nm\x3n\x3n\x3n\x3n\x3n\x3n\x3n\x3"+
		"o\x3o\x3o\x3o\x3o\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x5p\xB73\np\x3p\x3p\x3q"+
		"\x3q\x3q\x3q\x3q\x3r\x3r\x3r\x3r\x3s\x3s\x3s\x3s\x3t\x3t\x3t\x3t\x3t\x3"+
		"u\x3u\x3u\x3u\x3u\x3v\x3v\x3v\x3v\x3v\x3w\x3w\x3w\x3w\x3w\x5w\xB98\nw"+
		"\x3w\x3w\x3w\x5w\xB9D\nw\x3w\x3w\x3x\x3x\x3x\x3x\x3x\x3x\x3y\x3y\x3y\x3"+
		"y\x3y\x3z\x3z\x3z\x3z\x5z\xBB0\nz\x3z\x3z\x3{\x3{\x3{\x3{\x3|\x3|\x3|"+
		"\x3|\x5|\xBBC\n|\x3|\x5|\xBBF\n|\x3|\x3|\x3|\x5|\xBC4\n|\x3|\x5|\xBC7"+
		"\n|\x3}\x3}\x3}\x3}\x5}\xBCD\n}\x3}\x3}\x3~\x3~\x3~\x3~\x3~\x3~\x3\x7F"+
		"\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x5\x7F\xBDC\n\x7F\x3\x7F\x3\x7F\x3\x7F\x5"+
		"\x7F\xBE1\n\x7F\x3\x7F\x3\x7F\x3\x80\x3\x80\x3\x80\x3\x80\x5\x80\xBE9"+
		"\n\x80\x3\x80\x5\x80\xBEC\n\x80\x3\x80\x3\x80\x3\x80\x5\x80\xBF1\n\x80"+
		"\x3\x80\x3\x80\x3\x80\x5\x80\xBF6\n\x80\x3\x80\x5\x80\xBF9\n\x80\x3\x81"+
		"\x3\x81\x3\x81\x3\x81\x3\x81\x3\x82\x3\x82\x3\x82\x3\x82\x3\x82\x3\x82"+
		"\x3\x83\x3\x83\x3\x83\x3\x83\x3\x83\x3\x84\x3\x84\x3\x84\x3\x84\x3\x85"+
		"\x3\x85\x5\x85\xC11\n\x85\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85\x5\x85\xC18"+
		"\n\x85\x3\x85\x3\x85\x3\x85\x5\x85\xC1D\n\x85\x3\x85\x3\x85\x3\x85\x5"+
		"\x85\xC22\n\x85\x3\x85\x3\x85\x3\x85\x6\x85\xC27\n\x85\r\x85\xE\x85\xC28"+
		"\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86\x5\x86\xC30\n\x86\x3\x86\x3\x86\x3"+
		"\x86\x3\x86\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x5\x87\xC3D"+
		"\n\x87\x3\x88\x3\x88\x3\x88\x3\x88\x5\x88\xC43\n\x88\x3\x88\x3\x88\x3"+
		"\x88\x5\x88\xC48\n\x88\x3\x88\x3\x88\x3\x89\x3\x89\x3\x89\x3\x89\x5\x89"+
		"\xC50\n\x89\x3\x89\x3\x89\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8B\x3"+
		"\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x5\x8B\xC60\n\x8B\x3\x8B\x3\x8B"+
		"\x3\x8C\x3\x8C\x3\x8C\x5\x8C\xC67\n\x8C\x3\x8C\x3\x8C\x3\x8C\x5\x8C\xC6C"+
		"\n\x8C\x3\x8C\x6\x8C\xC6F\n\x8C\r\x8C\xE\x8C\xC70\x3\x8C\x5\x8C\xC74\n"+
		"\x8C\x3\x8C\x3\x8C\x3\x8C\x3\x8C\x5\x8C\xC7A\n\x8C\x3\x8C\x3\x8C\x3\x8C"+
		"\x3\x8C\x5\x8C\xC80\n\x8C\x3\x8D\x3\x8D\x3\x8D\x5\x8D\xC85\n\x8D\x3\x8D"+
		"\x3\x8D\x3\x8D\x5\x8D\xC8A\n\x8D\x3\x8D\x6\x8D\xC8D\n\x8D\r\x8D\xE\x8D"+
		"\xC8E\x3\x8D\x5\x8D\xC92\n\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x5\x8D\xC98"+
		"\n\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x5\x8D\xC9E\n\x8D\x3\x8E\x3\x8E\x3"+
		"\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x5\x8E\xCA9\n\x8E\x3\x8E"+
		"\x5\x8E\xCAC\n\x8E\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3"+
		"\x8F\x5\x8F\xCB6\n\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x5\x8F\xCBC\n\x8F\x6"+
		"\x8F\xCBE\n\x8F\r\x8F\xE\x8F\xCBF\x3\x8F\x3\x8F\x5\x8F\xCC4\n\x8F\x3\x90"+
		"\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90"+
		"\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91"+
		"\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x5\x91\xCE1\n\x91\x3\x92\x3"+
		"\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x5"+
		"\x92\xCEE\n\x92\x3\x92\x3\x92\x3\x92\x3\x92\x5\x92\xCF4\n\x92\x3\x93\x3"+
		"\x93\x3\x93\x3\x93\x3\x93\x3\x93\x3\x93\x3\x93\x5\x93\xCFE\n\x93\x3\x93"+
		"\x5\x93\xD01\n\x93\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94\x3"+
		"\x94\x3\x94\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x5\x95\xD11\n\x95\x3\x95"+
		"\x3\x95\x3\x95\x5\x95\xD16\n\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3"+
		"\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x5\x95\xD26"+
		"\n\x95\x3\x95\x5\x95\xD29\n\x95\x3\x95\x5\x95\xD2C\n\x95\x3\x95\x3\x95"+
		"\x3\x95\x5\x95\xD31\n\x95\x3\x95\x5\x95\xD34\n\x95\x3\x95\x3\x95\x3\x95"+
		"\x5\x95\xD39\n\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x5"+
		"\x95\xD42\n\x95\x3\x95\x5\x95\xD45\n\x95\x3\x95\x5\x95\xD48\n\x95\x3\x95"+
		"\x3\x95\x3\x95\x3\x95\x3\x95\x5\x95\xD4F\n\x95\x3\x96\x3\x96\x3\x96\x3"+
		"\x96\x3\x96\x3\x96\x5\x96\xD57\n\x96\x3\x96\x3\x96\x5\x96\xD5B\n\x96\x5"+
		"\x96\xD5D\n\x96\x5\x96\xD5F\n\x96\x3\x97\x3\x97\x3\x97\x3\x97\x5\x97\xD65"+
		"\n\x97\x3\x97\x3\x97\x5\x97\xD69\n\x97\x3\x97\x3\x97\x3\x97\x5\x97\xD6E"+
		"\n\x97\x3\x97\x5\x97\xD71\n\x97\x5\x97\xD73\n\x97\x3\x98\x3\x98\x3\x98"+
		"\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x5\x98\xD7F\n\x98\x3"+
		"\x98\x5\x98\xD82\n\x98\x5\x98\xD84\n\x98\x3\x99\x3\x99\x3\x99\x3\x99\x3"+
		"\x99\x3\x99\x3\x99\x3\x99\x3\x99\x5\x99\xD8F\n\x99\x3\x99\x3\x99\x5\x99"+
		"\xD93\n\x99\x3\x99\x3\x99\x5\x99\xD97\n\x99\x3\x99\x6\x99\xD9A\n\x99\r"+
		"\x99\xE\x99\xD9B\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x3\x9A\x3\x9A"+
		"\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xDAB\n\x9A\x3\x9A\x3\x9A\x3"+
		"\x9A\x3\x9A\x3\x9A\x5\x9A\xDB2\n\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A"+
		"\x3\x9A\x3\x9A\x5\x9A\xDBB\n\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\a\x9A\xDC1"+
		"\n\x9A\f\x9A\xE\x9A\xDC4\v\x9A\x5\x9A\xDC6\n\x9A\x3\x9A\x3\x9A\x3\x9A"+
		"\x5\x9A\xDCB\n\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xDD0\n\x9A\x3\x9A\x3\x9A"+
		"\x3\x9A\x3\x9A\x6\x9A\xDD6\n\x9A\r\x9A\xE\x9A\xDD7\x3\x9A\x3\x9A\x6\x9A"+
		"\xDDC\n\x9A\r\x9A\xE\x9A\xDDD\x3\x9A\x3\x9A\x5\x9A\xDE2\n\x9A\x3\x9A\x3"+
		"\x9A\a\x9A\xDE6\n\x9A\f\x9A\xE\x9A\xDE9\v\x9A\a\x9A\xDEB\n\x9A\f\x9A\xE"+
		"\x9A\xDEE\v\x9A\x3\x9A\x5\x9A\xDF1\n\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3"+
		"\x9A\x5\x9A\xDF8\n\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\a\x9A\xDFE\n\x9A\f"+
		"\x9A\xE\x9A\xE01\v\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xE08"+
		"\n\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xE11\n"+
		"\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xE16\n\x9A\x3\x9A\x3\x9A\x5\x9A\xE1A"+
		"\n\x9A\x3\x9A\x5\x9A\xE1D\n\x9A\x6\x9A\xE1F\n\x9A\r\x9A\xE\x9A\xE20\x3"+
		"\x9A\x3\x9A\a\x9A\xE25\n\x9A\f\x9A\xE\x9A\xE28\v\x9A\a\x9A\xE2A\n\x9A"+
		"\f\x9A\xE\x9A\xE2D\v\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xE34"+
		"\n\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\a\x9A\xE3A\n\x9A\f\x9A\xE\x9A\xE3D"+
		"\v\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xE42\n\x9A\x3\x9A\x3\x9A\x3\x9A\x3"+
		"\x9A\x5\x9A\xE48\n\x9A\x3\x9A\x5\x9A\xE4B\n\x9A\x3\x9A\x3\x9A\x3\x9A\x5"+
		"\x9A\xE50\n\x9A\x3\x9A\x5\x9A\xE53\n\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3"+
		"\x9A\x5\x9A\xE5A\n\x9A\x5\x9A\xE5C\n\x9A\x3\x9A\x5\x9A\xE5F\n\x9A\x3\x9A"+
		"\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xE65\n\x9A\x3\x9A\x5\x9A\xE68\n\x9A\x3\x9A"+
		"\x3\x9A\x3\x9A\x5\x9A\xE6D\n\x9A\x3\x9A\x5\x9A\xE70\n\x9A\x3\x9A\x3\x9A"+
		"\x3\x9A\x5\x9A\xE75\n\x9A\x3\x9A\x5\x9A\xE78\n\x9A\x3\x9A\x3\x9A\x3\x9A"+
		"\x5\x9A\xE7D\n\x9A\x3\x9A\x5\x9A\xE80\n\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A"+
		"\xE85\n\x9A\x3\x9B\x5\x9B\xE88\n\x9B\x3\x9B\x5\x9B\xE8B\n\x9B\x3\x9B\x5"+
		"\x9B\xE8E\n\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x5\x9B\xE95\n\x9B\x6"+
		"\x9B\xE97\n\x9B\r\x9B\xE\x9B\xE98\x3\x9C\x3\x9C\x3\x9C\x3\x9C\x3\x9C\x5"+
		"\x9C\xEA0\n\x9C\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x5\x9D\xEA7\n\x9D\x3"+
		"\x9D\x3\x9D\x3\x9D\x3\x9D\x5\x9D\xEAD\n\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D"+
		"\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x5\x9D\xEBA\n\x9D\x3"+
		"\x9D\x3\x9D\x5\x9D\xEBE\n\x9D\x3\x9D\x3\x9D\x3\x9D\x5\x9D\xEC3\n\x9D\x3"+
		"\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x5\x9D\xECD\n\x9D"+
		"\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x5\x9D\xED6\n\x9D\x3"+
		"\x9D\x3\x9D\x5\x9D\xEDA\n\x9D\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E"+
		"\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x5\x9E\xEE6\n\x9E\x3\x9E\x3\x9E\x3\x9E\x3"+
		"\x9E\x5\x9E\xEEC\n\x9E\x3\x9E\x3\x9E\x3\x9E\x6\x9E\xEF1\n\x9E\r\x9E\xE"+
		"\x9E\xEF2\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E"+
		"\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x5\x9E"+
		"\xF07\n\x9E\x3\x9E\x3\x9E\x5\x9E\xF0B\n\x9E\x3\x9F\x3\x9F\x3\x9F\x3\x9F"+
		"\x3\x9F\x3\x9F\x5\x9F\xF13\n\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3"+
		"\x9F\x3\x9F\x5\x9F\xF1C\n\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x5\x9F\xF22"+
		"\n\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x5\x9F\xF28\n\x9F\x3\x9F\x3\x9F\x3"+
		"\x9F\x3\x9F\x3\x9F\x3\x9F\x6\x9F\xF30\n\x9F\r\x9F\xE\x9F\xF31\x3\x9F\x3"+
		"\x9F\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x5\xA0\xF3C\n\xA0\x3\xA0"+
		"\x3\xA0\x5\xA0\xF40\n\xA0\x3\xA0\x5\xA0\xF43\n\xA0\x3\xA0\x3\xA0\x5\xA0"+
		"\xF47\n\xA0\x3\xA0\x3\xA0\x3\xA0\x5\xA0\xF4C\n\xA0\x3\xA0\x3\xA0\x3\xA0"+
		"\x3\xA0\x5\xA0\xF52\n\xA0\x3\xA0\x5\xA0\xF55\n\xA0\x3\xA0\x3\xA0\x5\xA0"+
		"\xF59\n\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x6\xA0\xF61\n\xA0"+
		"\r\xA0\xE\xA0\xF62\x3\xA0\x5\xA0\xF66\n\xA0\x3\xA1\x3\xA1\x3\xA1\x3\xA1"+
		"\x3\xA1\x3\xA1\x5\xA1\xF6E\n\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3"+
		"\xA1\x5\xA1\xF76\n\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x5\xA1\xF7D"+
		"\n\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x6\xA1\xF84\n\xA1\r\xA1\xE\xA1"+
		"\xF85\x5\xA1\xF88\n\xA1\x3\xA1\x3\xA1\x3\xA1\x5\xA1\xF8D\n\xA1\x3\xA1"+
		"\x3\xA1\x3\xA1\x3\xA1\x5\xA1\xF93\n\xA1\x3\xA1\x6\xA1\xF96\n\xA1\r\xA1"+
		"\xE\xA1\xF97\x5\xA1\xF9A\n\xA1\x3\xA1\x5\xA1\xF9D\n\xA1\x3\xA1\x3\xA1"+
		"\x3\xA1\x5\xA1\xFA2\n\xA1\x3\xA1\x5\xA1\xFA5\n\xA1\x3\xA1\x3\xA1\x3\xA1"+
		"\x5\xA1\xFAA\n\xA1\x3\xA1\x3\xA1\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3"+
		"\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x5\xA2\xFB9\n\xA2\x3\xA2\x3\xA2"+
		"\x3\xA2\x3\xA2\x3\xA2\x5\xA2\xFC0\n\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3"+
		"\xA2\x6\xA2\xFC7\n\xA2\r\xA2\xE\xA2\xFC8\x5\xA2\xFCB\n\xA2\x3\xA2\x3\xA2"+
		"\x3\xA2\x5\xA2\xFD0\n\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x5\xA2\xFD6\n\xA2"+
		"\x3\xA2\x6\xA2\xFD9\n\xA2\r\xA2\xE\xA2\xFDA\x5\xA2\xFDD\n\xA2\x3\xA2\x5"+
		"\xA2\xFE0\n\xA2\x3\xA2\x3\xA2\x3\xA2\x5\xA2\xFE5\n\xA2\x3\xA2\x5\xA2\xFE8"+
		"\n\xA2\x3\xA2\x3\xA2\x3\xA2\x5\xA2\xFED\n\xA2\x3\xA2\x3\xA2\x3\xA3\x3"+
		"\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x5\xA3\xFFA\n\xA3"+
		"\x3\xA3\x3\xA3\x3\xA3\x5\xA3\xFFF\n\xA3\x3\xA4\x3\xA4\x3\xA4\x3\xA4\x3"+
		"\xA4\x3\xA4\x3\xA4\x5\xA4\x1008\n\xA4\x3\xA4\x3\xA4\x3\xA4\x5\xA4\x100D"+
		"\n\xA4\x3\xA4\x3\xA4\x3\xA4\x3\xA4\x5\xA4\x1013\n\xA4\x3\xA4\x3\xA4\x5"+
		"\xA4\x1017\n\xA4\x3\xA4\x3\xA4\x5\xA4\x101B\n\xA4\x3\xA5\x3\xA5\x3\xA5"+
		"\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5"+
		"\x3\xA5\x3\xA5\x5\xA5\x102C\n\xA5\x5\xA5\x102E\n\xA5\x3\xA6\x3\xA6\x3"+
		"\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x5\xA6\x1038\n\xA6\x3\xA6\x3\xA6"+
		"\x3\xA6\x5\xA6\x103D\n\xA6\x5\xA6\x103F\n\xA6\x3\xA6\x3\xA6\x5\xA6\x1043"+
		"\n\xA6\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x5\xA7\x1049\n\xA7\x3\xA7\x3\xA7\x3"+
		"\xA7\x3\xA7\x3\xA7\x3\xA7\x5\xA7\x1051\n\xA7\x3\xA7\a\xA7\x1054\n\xA7"+
		"\f\xA7\xE\xA7\x1057\v\xA7\x5\xA7\x1059\n\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA7"+
		"\a\xA7\x105F\n\xA7\f\xA7\xE\xA7\x1062\v\xA7\x5\xA7\x1064\n\xA7\x3\xA7"+
		"\x3\xA7\x3\xA7\x5\xA7\x1069\n\xA7\x3\xA7\x3\xA7\x3\xA7\x5\xA7\x106E\n"+
		"\xA7\x3\xA7\x3\xA7\x3\xA7\x5\xA7\x1073\n\xA7\x3\xA7\x3\xA7\x3\xA7\x5\xA7"+
		"\x1078\n\xA7\x3\xA7\x3\xA7\x3\xA7\x5\xA7\x107D\n\xA7\x3\xA7\x3\xA7\x3"+
		"\xA7\x5\xA7\x1082\n\xA7\x3\xA7\x3\xA7\x5\xA7\x1086\n\xA7\x3\xA7\x3\xA7"+
		"\x3\xA7\x5\xA7\x108B\n\xA7\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3"+
		"\xA8\x3\xA8\x3\xA8\x5\xA8\x1096\n\xA8\x3\xA8\a\xA8\x1099\n\xA8\f\xA8\xE"+
		"\xA8\x109C\v\xA8\x5\xA8\x109E\n\xA8\x3\xA8\x5\xA8\x10A1\n\xA8\x3\xA8\x3"+
		"\xA8\x3\xA8\x5\xA8\x10A6\n\xA8\x3\xA8\x5\xA8\x10A9\n\xA8\x3\xA8\x3\xA8"+
		"\x3\xA8\x5\xA8\x10AE\n\xA8\x3\xA8\x5\xA8\x10B1\n\xA8\x3\xA8\x3\xA8\x3"+
		"\xA8\x5\xA8\x10B6\n\xA8\x3\xA8\x5\xA8\x10B9\n\xA8\x3\xA8\x3\xA8\x3\xA8"+
		"\x5\xA8\x10BE\n\xA8\x3\xA8\x5\xA8\x10C1\n\xA8\x3\xA8\x3\xA8\x3\xA8\x5"+
		"\xA8\x10C6\n\xA8\x3\xA8\x5\xA8\x10C9\n\xA8\x3\xA8\x3\xA8\x3\xA8\x5\xA8"+
		"\x10CE\n\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x5\xA8\x10D4\n\xA8\x3\xA8\x3"+
		"\xA8\x3\xA8\x5\xA8\x10D9\n\xA8\x3\xA8\x5\xA8\x10DC\n\xA8\x3\xA8\x3\xA8"+
		"\x3\xA8\x5\xA8\x10E1\n\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x5\xA8\x10E8"+
		"\n\xA8\x5\xA8\x10EA\n\xA8\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x5\xA9\x10F0\n\xA9"+
		"\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x5\xA9\x10F9\n\xA9\x3"+
		"\xA9\x3\xA9\x3\xA9\x5\xA9\x10FE\n\xA9\x5\xA9\x1100\n\xA9\x3\xAA\x3\xAA"+
		"\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x5\xAA\x110C"+
		"\n\xAA\x3\xAB\x3\xAB\x3\xAB\x3\xAB\x5\xAB\x1112\n\xAB\x3\xAB\x3\xAB\x3"+
		"\xAB\x3\xAB\x3\xAB\x3\xAB\x3\xAB\x3\xAB\a\xAB\x111C\n\xAB\f\xAB\xE\xAB"+
		"\x111F\v\xAB\x5\xAB\x1121\n\xAB\x3\xAB\x3\xAB\x3\xAB\x5\xAB\x1126\n\xAB"+
		"\x5\xAB\x1128\n\xAB\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3"+
		"\xAC\x5\xAC\x1132\n\xAC\x3\xAC\x3\xAC\x3\xAC\x5\xAC\x1137\n\xAC\x5\xAC"+
		"\x1139\n\xAC\x3\xAC\x3\xAC\x5\xAC\x113D\n\xAC\x3\xAD\x3\xAD\x3\xAD\x3"+
		"\xAD\x5\xAD\x1143\n\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD"+
		"\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x5\xAD"+
		"\x1155\n\xAD\x5\xAD\x1157\n\xAD\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3"+
		"\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x5\xAF\x1166\n\xAF"+
		"\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF"+
		"\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x5\xAF\x1178\n\xAF\x3\xAF\x3"+
		"\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x5\xAF\x1180\n\xAF\x3\xB0\x3\xB0\x3\xB0"+
		"\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x5\xB0\x118A\n\xB0\x3\xB1\x3\xB1\x3"+
		"\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3"+
		"\xB1\x3\xB1\x5\xB1\x119A\n\xB1\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2"+
		"\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB3\x3\xB3\x3\xB3\x3\xB3"+
		"\x3\xB3\x3\xB3\x3\xB3\x5\xB3\x11AF\n\xB3\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x3"+
		"\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x5\xB4\x11BA\n\xB4\x3\xB4\x3\xB4\x3\xB4"+
		"\x3\xB4\x5\xB4\x11C0\n\xB4\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3"+
		"\xB5\x5\xB5\x11C9\n\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5"+
		"\x5\xB5\x11D2\n\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x5\xB5\x11D8\n\xB5\x3"+
		"\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6\x11E1\n\xB6\x3\xB6"+
		"\x3\xB6\x3\xB6\x5\xB6\x11E6\n\xB6\x3\xB6\x5\xB6\x11E9\n\xB6\x3\xB6\x3"+
		"\xB6\x3\xB6\x5\xB6\x11EE\n\xB6\x3\xB6\x5\xB6\x11F1\n\xB6\x3\xB6\x3\xB6"+
		"\x3\xB6\x5\xB6\x11F6\n\xB6\x3\xB6\x5\xB6\x11F9\n\xB6\x3\xB6\x3\xB6\x3"+
		"\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6\x1201\n\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6"+
		"\x5\xB6\x1207\n\xB6\x6\xB6\x1209\n\xB6\r\xB6\xE\xB6\x120A\x3\xB6\x3\xB6"+
		"\x3\xB6\x3\xB6\x3\xB6\x5\xB6\x1212\n\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x5"+
		"\xB6\x1218\n\xB6\x6\xB6\x121A\n\xB6\r\xB6\xE\xB6\x121B\x3\xB6\x5\xB6\x121F"+
		"\n\xB6\x5\xB6\x1221\n\xB6\x3\xB6\x5\xB6\x1224\n\xB6\x3\xB6\x3\xB6\x3\xB6"+
		"\x5\xB6\x1229\n\xB6\x3\xB6\x5\xB6\x122C\n\xB6\x3\xB6\x3\xB6\x3\xB6\x5"+
		"\xB6\x1231\n\xB6\x3\xB6\x5\xB6\x1234\n\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6"+
		"\x1239\n\xB6\x3\xB6\x5\xB6\x123C\n\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6\x1241"+
		"\n\xB6\x3\xB6\x5\xB6\x1244\n\xB6\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3"+
		"\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x5\xB7\x1253\n\xB7"+
		"\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x5\xB7"+
		"\x125E\n\xB7\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3"+
		"\xB8\x5\xB8\x1269\n\xB8\x3\xB8\x3\xB8\x3\xB8\a\xB8\x126E\n\xB8\f\xB8\xE"+
		"\xB8\x1271\v\xB8\x5\xB8\x1273\n\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8"+
		"\x3\xB8\x5\xB8\x127B\n\xB8\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x5\xB9\x1281\n"+
		"\xB9\x3\xB9\x3\xB9\x3\xBA\x3\xBA\x3\xBA\a\xBA\x1288\n\xBA\f\xBA\xE\xBA"+
		"\x128B\v\xBA\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x5\xBA\x1291\n\xBA\x3\xBA\x3"+
		"\xBA\x3\xBA\x3\xBA\x3\xBA\a\xBA\x1298\n\xBA\f\xBA\xE\xBA\x129B\v\xBA\x3"+
		"\xBB\x3\xBB\x3\xBC\x3\xBC\x3\xBD\x3\xBD\x3\xBD\x5\xBD\x12A4\n\xBD\x3\xBD"+
		"\x3\xBD\x3\xBD\x5\xBD\x12A9\n\xBD\x3\xBD\x3\xBD\x3\xBE\x3\xBE\x3\xBE\x3"+
		"\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x5\xBE\x12B7\n\xBE\x3\xBF"+
		"\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x5\xBF\x12C2"+
		"\n\xBF\x3\xBF\x3\xBF\x3\xBF\a\xBF\x12C7\n\xBF\f\xBF\xE\xBF\x12CA\v\xBF"+
		"\x5\xBF\x12CC\n\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x5\xBF\x12D4"+
		"\n\xBF\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x5\xC0\x12DB\n\xC0\x3\xC1\x3"+
		"\xC1\x3\xC1\x3\xC1\x3\xC1\x5\xC1\x12E2\n\xC1\x3\xC1\x3\xC1\x5\xC1\x12E6"+
		"\n\xC1\x3\xC1\x3\xC1\x3\xC1\x5\xC1\x12EB\n\xC1\x3\xC1\x5\xC1\x12EE\n\xC1"+
		"\x3\xC1\x3\xC1\x3\xC1\x5\xC1\x12F3\n\xC1\x3\xC1\x5\xC1\x12F6\n\xC1\x3"+
		"\xC1\x3\xC1\x3\xC1\x5\xC1\x12FB\n\xC1\x3\xC1\x5\xC1\x12FE\n\xC1\x3\xC1"+
		"\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x5\xC1\x1307\n\xC1\x3\xC2\x3"+
		"\xC2\x3\xC2\x3\xC2\x3\xC2\x5\xC2\x130E\n\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2"+
		"\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x5\xC3"+
		"\x131D\n\xC3\x3\xC3\x5\xC3\x1320\n\xC3\x3\xC3\x3\xC3\x3\xC3\x5\xC3\x1325"+
		"\n\xC3\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4"+
		"\x5\xC4\x1330\n\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x5"+
		"\xC4\x1339\n\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4"+
		"\x3\xC4\x5\xC4\x1344\n\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\a\xC4\x134A\n\xC4"+
		"\f\xC4\xE\xC4\x134D\v\xC4\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x5\xC5\x1354"+
		"\n\xC5\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x135C\n\xC6\x3"+
		"\xC6\x3\xC6\x3\xC6\x5\xC6\x1361\n\xC6\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x3\xC7"+
		"\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x5\xC7\x136C\n\xC7\x3\xC7\x5\xC7\x136F\n"+
		"\xC7\x3\xC7\x3\xC7\x5\xC7\x1373\n\xC7\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8"+
		"\x3\xC8\x5\xC8\x137B\n\xC8\x3\xC8\x3\xC8\x5\xC8\x137F\n\xC8\x3\xC8\x3"+
		"\xC8\x5\xC8\x1383\n\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8"+
		"\x138B\n\xC8\x3\xC8\x6\xC8\x138E\n\xC8\r\xC8\xE\xC8\x138F\x3\xC8\x3\xC8"+
		"\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x1398\n\xC8\x3\xC8\x3\xC8\x3\xC8\x5"+
		"\xC8\x139D\n\xC8\x3\xC8\x3\xC8\a\xC8\x13A1\n\xC8\f\xC8\xE\xC8\x13A4\v"+
		"\xC8\x6\xC8\x13A6\n\xC8\r\xC8\xE\xC8\x13A7\x3\xC8\x3\xC8\x3\xC8\x3\xC8"+
		"\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x13B1\n\xC8\x3\xC8\x5\xC8\x13B4\n\xC8\x3"+
		"\xC8\x3\xC8\x3\xC8\x5\xC8\x13B9\n\xC8\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9"+
		"\x5\xC9\x13C0\n\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x5\xC9\x13C6\n\xC9\x5"+
		"\xC9\x13C8\n\xC9\x3\xC9\x3\xC9\x3\xC9\x5\xC9\x13CD\n\xC9\x3\xC9\x3\xC9"+
		"\x3\xC9\x3\xC9\x5\xC9\x13D3\n\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x5\xC9\x13D9"+
		"\n\xC9\x3\xC9\x3\xC9\x3\xC9\x5\xC9\x13DE\n\xC9\x3\xC9\x3\xC9\x3\xC9\x3"+
		"\xC9\x5\xC9\x13E4\n\xC9\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA\x13EB"+
		"\n\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA\x13F0\n\xCA\x3\xCA\x3\xCA\x3\xCA\x5"+
		"\xCA\x13F5\n\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA\x13FA\n\xCA\x3\xCA\x5\xCA"+
		"\x13FD\n\xCA\x3\xCA\x3\xCA\x5\xCA\x1401\n\xCA\x3\xCA\x5\xCA\x1404\n\xCA"+
		"\x3\xCA\x3\xCA\x5\xCA\x1408\n\xCA\x3\xCA\x3\xCA\x5\xCA\x140C\n\xCA\x3"+
		"\xCA\x5\xCA\x140F\n\xCA\x3\xCA\x3\xCA\x5\xCA\x1413\n\xCA\x3\xCA\x3\xCA"+
		"\x3\xCA\x5\xCA\x1418\n\xCA\x3\xCA\x3\xCA\x5\xCA\x141C\n\xCA\x3\xCA\x3"+
		"\xCA\x5\xCA\x1420\n\xCA\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB"+
		"\x3\xCB\x5\xCB\x142A\n\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x1430\n"+
		"\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x1437\n\xCB\x3\xCB\x5\xCB"+
		"\x143A\n\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x1440\n\xCB\x3\xCB\x3"+
		"\xCB\x3\xCB\x3\xCB\x5\xCB\x1446\n\xCB\x3\xCB\x3\xCB\x3\xCB\a\xCB\x144B"+
		"\n\xCB\f\xCB\xE\xCB\x144E\v\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x1453\n\xCB"+
		"\x5\xCB\x1455\n\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x145A\n\xCB\x3\xCB\x3"+
		"\xCB\x3\xCB\x3\xCB\x5\xCB\x1460\n\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB"+
		"\x1466\n\xCB\x3\xCB\x3\xCB\x3\xCB\a\xCB\x146B\n\xCB\f\xCB\xE\xCB\x146E"+
		"\v\xCB\x3\xCB\x5\xCB\x1471\n\xCB\x3\xCB\x3\xCB\x5\xCB\x1475\n\xCB\x3\xCB"+
		"\x5\xCB\x1478\n\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3"+
		"\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x1486\n\xCB\x3\xCB\x3\xCB\x3\xCB"+
		"\x5\xCB\x148B\n\xCB\x3\xCB\x3\xCB\x5\xCB\x148F\n\xCB\x3\xCB\x3\xCB\x3"+
		"\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x149C"+
		"\n\xCB\x3\xCB\x5\xCB\x149F\n\xCB\x5\xCB\x14A1\n\xCB\x3\xCB\x3\xCB\x3\xCB"+
		"\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x14A9\n\xCB\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3"+
		"\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x14B3\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC"+
		"\x5\xCC\x14B9\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x14C0\n"+
		"\xCC\x3\xCC\x5\xCC\x14C3\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x14C9"+
		"\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x14CF\n\xCC\x3\xCC\x3\xCC\x3"+
		"\xCC\a\xCC\x14D4\n\xCC\f\xCC\xE\xCC\x14D7\v\xCC\x3\xCC\x3\xCC\x3\xCC\x5"+
		"\xCC\x14DC\n\xCC\x5\xCC\x14DE\n\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x14E3"+
		"\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x14E9\n\xCC\x3\xCC\x3\xCC\x3"+
		"\xCC\x3\xCC\x5\xCC\x14EF\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x14F5"+
		"\n\xCC\x3\xCC\x3\xCC\x3\xCC\a\xCC\x14FA\n\xCC\f\xCC\xE\xCC\x14FD\v\xCC"+
		"\x3\xCC\x5\xCC\x1500\n\xCC\x3\xCC\x3\xCC\x5\xCC\x1504\n\xCC\x3\xCC\x5"+
		"\xCC\x1507\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC"+
		"\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x1515\n\xCC\x3\xCC\x3\xCC\x3\xCC\x5"+
		"\xCC\x151A\n\xCC\x3\xCC\x3\xCC\x5\xCC\x151E\n\xCC\x3\xCC\x3\xCC\x3\xCC"+
		"\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x152B"+
		"\n\xCC\x3\xCC\x5\xCC\x152E\n\xCC\x5\xCC\x1530\n\xCC\x3\xCC\x3\xCC\x3\xCC"+
		"\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x1538\n\xCC\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3"+
		"\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x5\xCD\x1543\n\xCD\x3\xCD\x3\xCD\x3\xCD"+
		"\x3\xCD\x3\xCD\a\xCD\x154A\n\xCD\f\xCD\xE\xCD\x154D\v\xCD\x3\xCD\x3\xCD"+
		"\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x5\xCD\x1555\n\xCD\x3\xCE\x3\xCE\x3\xCE\x3"+
		"\xCE\x3\xCE\x3\xCE\x3\xCE\x3\xCE\x3\xCE\x5\xCE\x1560\n\xCE\x3\xCE\x3\xCE"+
		"\x3\xCE\x3\xCE\x3\xCE\a\xCE\x1567\n\xCE\f\xCE\xE\xCE\x156A\v\xCE\x3\xCE"+
		"\x3\xCE\x3\xCE\x3\xCE\x3\xCE\x3\xCE\x5\xCE\x1572\n\xCE\x3\xCF\x3\xCF\x3"+
		"\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x5\xCF\x157E\n\xCF"+
		"\x3\xCF\x3\xCF\x5\xCF\x1582\n\xCF\x3\xCF\x3\xCF\x3\xCF\x6\xCF\x1587\n"+
		"\xCF\r\xCF\xE\xCF\x1588\x5\xCF\x158B\n\xCF\x3\xCF\x3\xCF\x3\xCF\x5\xCF"+
		"\x1590\n\xCF\x3\xCF\x3\xCF\x5\xCF\x1594\n\xCF\x3\xCF\x3\xCF\x3\xCF\x6"+
		"\xCF\x1599\n\xCF\r\xCF\xE\xCF\x159A\x5\xCF\x159D\n\xCF\x3\xCF\x3\xCF\x3"+
		"\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x5"+
		"\xCF\x15AB\n\xCF\x3\xCF\x3\xCF\x3\xCF\x5\xCF\x15B0\n\xCF\x3\xCF\x3\xCF"+
		"\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF"+
		"\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x5\xCF\x15C6"+
		"\n\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF"+
		"\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF"+
		"\x3\xCF\x5\xCF\x15DC\n\xCF\x3\xCF\x3\xCF\x3\xCF\x5\xCF\x15E1\n\xCF\x3"+
		"\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3"+
		"\xD0\x5\xD0\x15EE\n\xD0\x3\xD1\x3\xD1\x3\xD1\x3\xD1\x3\xD1\x3\xD1\x5\xD1"+
		"\x15F6\n\xD1\x3\xD2\x3\xD2\x3\xD2\x3\xD2\x3\xD2\x3\xD2\x3\xD2\x3\xD2\x3"+
		"\xD3\x3\xD3\x3\xD3\x3\xD3\x3\xD3\x3\xD3\x3\xD3\x3\xD3\x5\xD3\x1608\n\xD3"+
		"\x3\xD3\x5\xD3\x160B\n\xD3\x3\xD3\x3\xD3\x3\xD3\x3\xD3\a\xD3\x1611\n\xD3"+
		"\f\xD3\xE\xD3\x1614\v\xD3\x3\xD3\x3\xD3\x5\xD3\x1618\n\xD3\x3\xD4\x3\xD4"+
		"\x3\xD4\x3\xD4\x3\xD5\x3\xD5\x3\xD5\x3\xD5\x3\xD5\x5\xD5\x1623\n\xD5\x3"+
		"\xD5\x3\xD5\x3\xD5\x3\xD5\x3\xD5\x5\xD5\x162A\n\xD5\x3\xD5\x3\xD5\x3\xD5"+
		"\x5\xD5\x162F\n\xD5\x3\xD5\x3\xD5\x5\xD5\x1633\n\xD5\x6\xD5\x1635\n\xD5"+
		"\r\xD5\xE\xD5\x1636\x3\xD5\x5\xD5\x163A\n\xD5\x3\xD6\x3\xD6\x3\xD6\x3"+
		"\xD6\x3\xD6\x5\xD6\x1641\n\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6"+
		"\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6"+
		"\x5\xD6\x1653\n\xD6\x5\xD6\x1655\n\xD6\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x3"+
		"\xD7\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x3"+
		"\xD7\x3\xD7\x3\xD7\x3\xD7\x5\xD7\x1669\n\xD7\x3\xD8\x3\xD8\x3\xD8\x3\xD8"+
		"\x3\xD8\x5\xD8\x1670\n\xD8\x3\xD8\x3\xD8\x3\xD8\x3\xD8\x3\xD8\x5\xD8\x1677"+
		"\n\xD8\x3\xD8\x3\xD8\x3\xD8\x5\xD8\x167C\n\xD8\x3\xD8\x3\xD8\x3\xD8\x5"+
		"\xD8\x1681\n\xD8\x3\xD8\x3\xD8\x3\xD8\x3\xD8\x5\xD8\x1687\n\xD8\x3\xD8"+
		"\x3\xD8\x3\xD8\x5\xD8\x168C\n\xD8\x5\xD8\x168E\n\xD8\x3\xD9\x3\xD9\x3"+
		"\xD9\x3\xD9\x3\xD9\x5\xD9\x1695\n\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x5\xD9"+
		"\x169B\n\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x5\xD9\x16A1\n\xD9\x3\xD9\x5"+
		"\xD9\x16A4\n\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x5\xD9\x16AA\n\xD9\x3\xD9"+
		"\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x6\xD9\x16B2\n\xD9\r\xD9\xE\xD9\x16B3"+
		"\x3\xD9\x5\xD9\x16B7\n\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x5\xD9\x16BE"+
		"\n\xD9\x3\xD9\x5\xD9\x16C1\n\xD9\x3\xD9\x3\xD9\x3\xD9\x6\xD9\x16C6\n\xD9"+
		"\r\xD9\xE\xD9\x16C7\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x16D0"+
		"\n\xDA\x3\xDA\x3\xDA\x5\xDA\x16D4\n\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5"+
		"\xDA\x16DA\n\xDA\x3\xDA\x3\xDA\x3\xDA\a\xDA\x16DF\n\xDA\f\xDA\xE\xDA\x16E2"+
		"\v\xDA\x5\xDA\x16E4\n\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x16EB"+
		"\n\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x16F1\n\xDA\x3\xDA\x3\xDA\x3"+
		"\xDA\x3\xDA\x3\xDA\x5\xDA\x16F8\n\xDA\x3\xDA\x5\xDA\x16FB\n\xDA\x3\xDA"+
		"\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x1701\n\xDA\x3\xDA\x3\xDA\x3\xDA\a\xDA\x1706"+
		"\n\xDA\f\xDA\xE\xDA\x1709\v\xDA\x5\xDA\x170B\n\xDA\x3\xDA\x3\xDA\x3\xDA"+
		"\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x1713\n\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5"+
		"\xDA\x1719\n\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x1720\n\xDA"+
		"\x3\xDA\x5\xDA\x1723\n\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x1729\n"+
		"\xDA\x3\xDA\x3\xDA\x3\xDA\a\xDA\x172E\n\xDA\f\xDA\xE\xDA\x1731\v\xDA\x3"+
		"\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x1738\n\xDA\x3\xDA\x3\xDA\x3\xDA"+
		"\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x1740\n\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5"+
		"\xDA\x1746\n\xDA\x3\xDA\x3\xDA\x3\xDA\a\xDA\x174B\n\xDA\f\xDA\xE\xDA\x174E"+
		"\v\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x1757\n"+
		"\xDA\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x175C\n\xDA\x3\xDB\x3\xDB\x3\xDB\x3\xDB"+
		"\x3\xDB\x3\xDB\x3\xDB\x3\xDB\x5\xDB\x1766\n\xDB\x3\xDB\x3\xDB\x3\xDB\x3"+
		"\xDB\x5\xDB\x176C\n\xDB\x3\xDB\x3\xDB\x3\xDB\x3\xDB\x3\xDB\x3\xDB\x3\xDB"+
		"\x3\xDB\x3\xDB\x3\xDB\x5\xDB\x1778\n\xDB\x5\xDB\x177A\n\xDB\x3\xDC\x3"+
		"\xDC\x3\xDC\x3\xDC\x3\xDC\x5\xDC\x1781\n\xDC\x3\xDC\x3\xDC\x3\xDC\x3\xDC"+
		"\x5\xDC\x1787\n\xDC\x3\xDC\x3\xDC\x3\xDC\x3\xDC\x5\xDC\x178D\n\xDC\x3"+
		"\xDC\x3\xDC\x3\xDC\x3\xDC\x5\xDC\x1793\n\xDC\x3\xDC\x3\xDC\x3\xDC\x6\xDC"+
		"\x1798\n\xDC\r\xDC\xE\xDC\x1799\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x5"+
		"\xDD\x17A1\n\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x5\xDD\x17A9"+
		"\n\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x5\xDD\x17AF\n\xDD\x3\xDD\x3\xDD\x3"+
		"\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x6"+
		"\xDD\x17BD\n\xDD\r\xDD\xE\xDD\x17BE\x3\xDD\x5\xDD\x17C2\n\xDD\x3\xDD\x3"+
		"\xDD\x3\xDD\x5\xDD\x17C7\n\xDD\x5\xDD\x17C9\n\xDD\x3\xDE\x3\xDE\x3\xDE"+
		"\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x5\xDE\x17D5\n\xDE\x3"+
		"\xDE\x3\xDE\x3\xDE\x3\xDE\x5\xDE\x17DB\n\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE"+
		"\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x6\xDE\x17E9"+
		"\n\xDE\r\xDE\xE\xDE\x17EA\x3\xDE\x5\xDE\x17EE\n\xDE\x3\xDE\x3\xDE\x3\xDE"+
		"\x5\xDE\x17F3\n\xDE\x3\xDE\x5\xDE\x17F6\n\xDE\x3\xDE\x3\xDE\x3\xDE\x5"+
		"\xDE\x17FB\n\xDE\x5\xDE\x17FD\n\xDE\x3\xDF\x3\xDF\x3\xDF\x3\xDF\x3\xDF"+
		"\x3\xDF\x3\xDF\x5\xDF\x1806\n\xDF\x3\xDF\x3\xDF\x3\xDF\x3\xDF\x3\xDF\x5"+
		"\xDF\x180D\n\xDF\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0"+
		"\x3\xE0\x3\xE0\x5\xE0\x1819\n\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3"+
		"\xE0\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x5\xE1\x1829"+
		"\n\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\a\xE1\x1830\n\xE1\f\xE1\xE\xE1"+
		"\x1833\v\xE1\x3\xE1\x3\xE1\x3\xE2\x3\xE2\x3\xE2\x3\xE2\x5\xE2\x183B\n"+
		"\xE2\x3\xE2\x5\xE2\x183E\n\xE2\x3\xE2\x3\xE2\x3\xE2\x5\xE2\x1843\n\xE2"+
		"\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x5\xE3\x184A\n\xE3\x5\xE3\x184C\n"+
		"\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x5\xE3\x1852\n\xE3\x5\xE3\x1854\n\xE3"+
		"\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x5\xE3\x185C\n\xE3\x5\xE3\x185E"+
		"\n\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x5\xE3\x1864\n\xE3\x5\xE3\x1866\n\xE3"+
		"\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x5\xE3\x186C\n\xE3\x5\xE3\x186E\n\xE3\x3"+
		"\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x5\xE3\x1875\n\xE3\x3\xE3\x5\xE3\x1878"+
		"\n\xE3\x5\xE3\x187A\n\xE3\x3\xE3\x5\xE3\x187D\n\xE3\x3\xE3\x3\xE3\x5\xE3"+
		"\x1881\n\xE3\x5\xE3\x1883\n\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x3"+
		"\xE3\x3\xE3\x3\xE3\x5\xE3\x188D\n\xE3\x3\xE4\x3\xE4\x3\xE4\x3\xE4\x5\xE4"+
		"\x1893\n\xE4\x3\xE4\x3\xE4\x5\xE4\x1897\n\xE4\x3\xE5\x3\xE5\x3\xE5\x3"+
		"\xE5\x3\xE5\x3\xE5\x5\xE5\x189F\n\xE5\x3\xE5\x3\xE5\x3\xE5\x3\xE5\x3\xE5"+
		"\x5\xE5\x18A6\n\xE5\x3\xE5\x3\xE5\x3\xE5\x3\xE5\x5\xE5\x18AC\n\xE5\x5"+
		"\xE5\x18AE\n\xE5\x3\xE6\x3\xE6\x3\xE6\x3\xE6\x3\xE7\x3\xE7\x3\xE7\x3\xE7"+
		"\x3\xE7\x5\xE7\x18B9\n\xE7\x3\xE7\x3\xE7\x3\xE7\x5\xE7\x18BE\n\xE7\x3"+
		"\xE7\x3\xE7\x3\xE7\x3\xE7\x5\xE7\x18C4\n\xE7\x6\xE7\x18C6\n\xE7\r\xE7"+
		"\xE\xE7\x18C7\x3\xE7\x3\xE7\x3\xE8\x3\xE8\x3\xE8\x3\xE8\x3\xE8\x3\xE8"+
		"\x5\xE8\x18D2\n\xE8\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x5\xE9\x18DA"+
		"\n\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9"+
		"\x3\xE9\x5\xE9\x18E6\n\xE9\x3\xEA\x5\xEA\x18E9\n\xEA\x3\xEA\x3\xEA\x3"+
		"\xEA\x3\xEA\x3\xEA\x3\xEA\x5\xEA\x18F1\n\xEA\x5\xEA\x18F3\n\xEA\x3\xEA"+
		"\x5\xEA\x18F6\n\xEA\x3\xEA\x3\xEA\x5\xEA\x18FA\n\xEA\x3\xEA\x5\xEA\x18FD"+
		"\n\xEA\x3\xEA\x3\xEA\x3\xEA\x3\xEA\x3\xEA\x6\xEA\x1904\n\xEA\r\xEA\xE"+
		"\xEA\x1905\x3\xEA\x5\xEA\x1909\n\xEA\x3\xEA\x5\xEA\x190C\n\xEA\x3\xEA"+
		"\x3\xEA\x3\xEB\x3\xEB\x3\xEB\x3\xEB\x5\xEB\x1914\n\xEB\x3\xEB\x3\xEB\x6"+
		"\xEB\x1918\n\xEB\r\xEB\xE\xEB\x1919\x3\xEB\x3\xEB\x3\xEB\x3\xEB\x3\xEB"+
		"\x5\xEB\x1921\n\xEB\x3\xEB\x3\xEB\x5\xEB\x1925\n\xEB\x3\xEB\x3\xEB\x3"+
		"\xEB\x3\xEB\x3\xEB\x3\xEB\x3\xEB\x3\xEB\x3\xEB\x5\xEB\x1930\n\xEB\x3\xEB"+
		"\x3\xEB\x6\xEB\x1934\n\xEB\r\xEB\xE\xEB\x1935\x5\xEB\x1938\n\xEB\x3\xEC"+
		"\x3\xEC\x3\xEC\x3\xEC\x3\xEC\a\xEC\x193F\n\xEC\f\xEC\xE\xEC\x1942\v\xEC"+
		"\x3\xEC\x5\xEC\x1945\n\xEC\x3\xED\x3\xED\x3\xED\x3\xED\x3\xED\x5\xED\x194C"+
		"\n\xED\x3\xED\x3\xED\x3\xED\x5\xED\x1951\n\xED\x3\xEE\x5\xEE\x1954\n\xEE"+
		"\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x5\xEE\x195C\n\xEE\x3\xEE\x3"+
		"\xEE\x5\xEE\x1960\n\xEE\x3\xEE\x5\xEE\x1963\n\xEE\x3\xEE\x3\xEE\x5\xEE"+
		"\x1967\n\xEE\x3\xEE\x5\xEE\x196A\n\xEE\x3\xEE\x3\xEE\x5\xEE\x196E\n\xEE"+
		"\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x5\xEE\x1975\n\xEE\x3\xEE\x3\xEE\x5"+
		"\xEE\x1979\n\xEE\x5\xEE\x197B\n\xEE\x5\xEE\x197D\n\xEE\x3\xEE\x5\xEE\x1980"+
		"\n\xEE\x3\xEE\x5\xEE\x1983\n\xEE\x3\xEE\x5\xEE\x1986\n\xEE\x3\xEF\x3\xEF"+
		"\x3\xEF\x5\xEF\x198B\n\xEF\x3\xF0\x5\xF0\x198E\n\xF0\x3\xF0\x3\xF0\x3"+
		"\xF0\x3\xF0\x3\xF0\x3\xF0\x5\xF0\x1996\n\xF0\x5\xF0\x1998\n\xF0\x3\xF0"+
		"\x5\xF0\x199B\n\xF0\x3\xF0\x3\xF0\x5\xF0\x199F\n\xF0\x3\xF0\x5\xF0\x19A2"+
		"\n\xF0\x3\xF0\x3\xF0\x3\xF0\x3\xF0\x5\xF0\x19A8\n\xF0\x3\xF0\x5\xF0\x19AB"+
		"\n\xF0\x3\xF0\x3\xF0\x5\xF0\x19AF\n\xF0\x3\xF0\x5\xF0\x19B2\n\xF0\x3\xF0"+
		"\x5\xF0\x19B5\n\xF0\x3\xF1\x3\xF1\x3\xF1\x3\xF1\x3\xF1\x5\xF1\x19BC\n"+
		"\xF1\x3\xF2\x5\xF2\x19BF\n\xF2\x3\xF2\x3\xF2\x3\xF2\x3\xF2\x3\xF2\x5\xF2"+
		"\x19C6\n\xF2\x3\xF2\x3\xF2\x3\xF2\x3\xF2\x5\xF2\x19CC\n\xF2\a\xF2\x19CE"+
		"\n\xF2\f\xF2\xE\xF2\x19D1\v\xF2\x3\xF2\x3\xF2\x3\xF2\x3\xF2\x3\xF2\x3"+
		"\xF2\x3\xF2\x5\xF2\x19DA\n\xF2\x3\xF2\x5\xF2\x19DD\n\xF2\x3\xF3\x5\xF3"+
		"\x19E0\n\xF3\x3\xF3\x3\xF3\x3\xF4\x3\xF4\x5\xF4\x19E6\n\xF4\x3\xF4\x5"+
		"\xF4\x19E9\n\xF4\x3\xF4\x5\xF4\x19EC\n\xF4\x3\xF4\x5\xF4\x19EF\n\xF4\x3"+
		"\xF5\x3\xF5\x5\xF5\x19F3\n\xF5\x3\xF6\x5\xF6\x19F6\n\xF6\x3\xF6\x3\xF6"+
		"\x3\xF6\x3\xF6\x3\xF6\x3\xF6\x5\xF6\x19FE\n\xF6\x5\xF6\x1A00\n\xF6\x3"+
		"\xF6\x3\xF6\x5\xF6\x1A04\n\xF6\x3\xF6\x5\xF6\x1A07\n\xF6\x3\xF6\x3\xF6"+
		"\x3\xF6\x3\xF6\a\xF6\x1A0D\n\xF6\f\xF6\xE\xF6\x1A10\v\xF6\x3\xF6\x5\xF6"+
		"\x1A13\n\xF6\x3\xF6\x3\xF6\x5\xF6\x1A17\n\xF6\x3\xF6\x3\xF6\x3\xF6\x3"+
		"\xF6\x3\xF6\x5\xF6\x1A1E\n\xF6\x3\xF6\x3\xF6\x5\xF6\x1A22\n\xF6\x5\xF6"+
		"\x1A24\n\xF6\x5\xF6\x1A26\n\xF6\x3\xF6\x5\xF6\x1A29\n\xF6\x3\xF6\x5\xF6"+
		"\x1A2C\n\xF6\x3\xF6\x5\xF6\x1A2F\n\xF6\x3\xF7\x3\xF7\x3\xF7\x3\xF7\a\xF7"+
		"\x1A35\n\xF7\f\xF7\xE\xF7\x1A38\v\xF7\x3\xF7\x3\xF7\x3\xF7\x5\xF7\x1A3D"+
		"\n\xF7\x3\xF7\x3\xF7\x3\xF7\x3\xF7\x5\xF7\x1A43\n\xF7\x5\xF7\x1A45\n\xF7"+
		"\x3\xF8\x3\xF8\x5\xF8\x1A49\n\xF8\x3\xF8\x5\xF8\x1A4C\n\xF8\x3\xF9\x3"+
		"\xF9\x3\xF9\x3\xF9\x3\xF9\x3\xF9\x5\xF9\x1A54\n\xF9\x3\xF9\x3\xF9\x5\xF9"+
		"\x1A58\n\xF9\x3\xF9\x3\xF9\x3\xF9\a\xF9\x1A5D\n\xF9\f\xF9\xE\xF9\x1A60"+
		"\v\xF9\x5\xF9\x1A62\n\xF9\x3\xF9\x3\xF9\x3\xF9\x3\xF9\x3\xF9\a\xF9\x1A69"+
		"\n\xF9\f\xF9\xE\xF9\x1A6C\v\xF9\x5\xF9\x1A6E\n\xF9\x3\xF9\x3\xF9\x5\xF9"+
		"\x1A72\n\xF9\x3\xF9\x3\xF9\x3\xF9\x3\xF9\a\xF9\x1A78\n\xF9\f\xF9\xE\xF9"+
		"\x1A7B\v\xF9\x5\xF9\x1A7D\n\xF9\x3\xFA\x3\xFA\x3\xFA\x3\xFA\x3\xFA\x3"+
		"\xFA\x5\xFA\x1A85\n\xFA\x3\xFA\x3\xFA\x5\xFA\x1A89\n\xFA\x3\xFA\x3\xFA"+
		"\x3\xFA\a\xFA\x1A8E\n\xFA\f\xFA\xE\xFA\x1A91\v\xFA\x5\xFA\x1A93\n\xFA"+
		"\x3\xFA\x3\xFA\x3\xFA\x3\xFA\a\xFA\x1A99\n\xFA\f\xFA\xE\xFA\x1A9C\v\xFA"+
		"\x3\xFA\x3\xFA\x5\xFA\x1AA0\n\xFA\x3\xFA\x3\xFA\x3\xFA\x3\xFA\x3\xFA\a"+
		"\xFA\x1AA7\n\xFA\f\xFA\xE\xFA\x1AAA\v\xFA\x5\xFA\x1AAC\n\xFA\x3\xFA\x3"+
		"\xFA\x5\xFA\x1AB0\n\xFA\x3\xFA\x3\xFA\x3\xFA\x3\xFA\a\xFA\x1AB6\n\xFA"+
		"\f\xFA\xE\xFA\x1AB9\v\xFA\x5\xFA\x1ABB\n\xFA\x3\xFB\x3\xFB\x3\xFB\x3\xFB"+
		"\x3\xFB\x3\xFB\x3\xFB\x3\xFB\x3\xFB\x3\xFB\x5\xFB\x1AC7\n\xFB\x3\xFC\x3"+
		"\xFC\x5\xFC\x1ACB\n\xFC\x3\xFC\x5\xFC\x1ACE\n\xFC\x3\xFC\x3\xFC\x3\xFC"+
		"\x3\xFC\x3\xFC\x3\xFC\x3\xFC\x3\xFC\x3\xFC\x3\xFC\x3\xFC\x3\xFC\x5\xFC"+
		"\x1ADC\n\xFC\x3\xFC\x3\xFC\x5\xFC\x1AE0\n\xFC\x3\xFC\x5\xFC\x1AE3\n\xFC"+
		"\x3\xFC\x3\xFC\x5\xFC\x1AE7\n\xFC\x3\xFC\x5\xFC\x1AEA\n\xFC\x3\xFD\x3"+
		"\xFD\x3\xFD\x3\xFD\x3\xFD\a\xFD\x1AF1\n\xFD\f\xFD\xE\xFD\x1AF4\v\xFD\x3"+
		"\xFD\x3\xFD\x3\xFE\x3\xFE\x3\xFE\x3\xFE\x3\xFE\x3\xFE\x3\xFE\x5\xFE\x1AFF"+
		"\n\xFE\x3\xFF\x3\xFF\x3\xFF\x3\xFF\x5\xFF\x1B05\n\xFF\x3\xFF\x3\xFF\x3"+
		"\xFF\x3\xFF\x3\xFF\x3\xFF\x3\xFF\x5\xFF\x1B0E\n\xFF\x3\xFF\x3\xFF\x3\xFF"+
		"\x5\xFF\x1B13\n\xFF\x3\x100\x3\x100\x3\x100\x3\x100\x3\x100\a\x100\x1B1A"+
		"\n\x100\f\x100\xE\x100\x1B1D\v\x100\x3\x100\x3\x100\x3\x101\x3\x101\x3"+
		"\x101\x3\x101\x3\x101\x3\x101\x3\x101\x5\x101\x1B28\n\x101\x3\x101\x5"+
		"\x101\x1B2B\n\x101\x3\x102\x3\x102\x3\x102\x3\x102\x5\x102\x1B31\n\x102"+
		"\x3\x102\x5\x102\x1B34\n\x102\x3\x103\x3\x103\x3\x103\x3\x103\x3\x103"+
		"\a\x103\x1B3B\n\x103\f\x103\xE\x103\x1B3E\v\x103\x3\x103\x3\x103\x3\x104"+
		"\x3\x104\x3\x104\x3\x104\x3\x104\x3\x104\x5\x104\x1B48\n\x104\x3\x105"+
		"\x3\x105\x3\x105\x3\x105\x3\x105\a\x105\x1B4F\n\x105\f\x105\xE\x105\x1B52"+
		"\v\x105\x3\x105\x3\x105\x3\x106\x3\x106\x3\x106\x3\x106\x3\x106\x3\x106"+
		"\x3\x106\x3\x106\x3\x106\x3\x106\x3\x106\x3\x106\x3\x106\x3\x106\x3\x106"+
		"\x3\x106\x3\x106\x3\x106\x3\x106\x5\x106\x1B69\n\x106\x5\x106\x1B6B\n"+
		"\x106\x3\x107\x3\x107\x3\x107\x3\x107\x5\x107\x1B71\n\x107\x3\x107\x5"+
		"\x107\x1B74\n\x107\x3\x107\x3\x107\x3\x107\x3\x107\x3\x107\x5\x107\x1B7B"+
		"\n\x107\x5\x107\x1B7D\n\x107\x3\x108\x3\x108\x3\x108\x3\x108\x3\x108\a"+
		"\x108\x1B84\n\x108\f\x108\xE\x108\x1B87\v\x108\x3\x108\x3\x108\x3\x109"+
		"\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109"+
		"\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109"+
		"\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109\x5\x109\x1BA4\n\x109"+
		"\x3\x109\x5\x109\x1BA7\n\x109\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109"+
		"\x3\x109\x3\x109\x5\x109\x1BB0\n\x109\x3\x109\x3\x109\x3\x109\x3\x109"+
		"\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109"+
		"\x5\x109\x1BBF\n\x109\x3\x109\x3\x109\x3\x109\x3\x109\x5\x109\x1BC5\n"+
		"\x109\x5\x109\x1BC7\n\x109\x3\x10A\x3\x10A\x3\x10A\x3\x10A\x3\x10A\a\x10A"+
		"\x1BCE\n\x10A\f\x10A\xE\x10A\x1BD1\v\x10A\x3\x10A\x3\x10A\x3\x10B\x3\x10B"+
		"\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B"+
		"\x3\x10B\x3\x10B\x5\x10B\x1BE2\n\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B"+
		"\x5\x10B\x1BE8\n\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B"+
		"\x3\x10B\x5\x10B\x1BF1\n\x10B\x3\x10B\x5\x10B\x1BF4\n\x10B\x5\x10B\x1BF6"+
		"\n\x10B\x3\x10C\x3\x10C\x3\x10C\x3\x10C\x3\x10C\x3\x10C\x5\x10C\x1BFE"+
		"\n\x10C\x3\x10C\x3\x10C\x3\x10C\x3\x10C\x5\x10C\x1C04\n\x10C\a\x10C\x1C06"+
		"\n\x10C\f\x10C\xE\x10C\x1C09\v\x10C\x3\x10C\x3\x10C\x3\x10D\x3\x10D\x3"+
		"\x10D\x3\x10D\x3\x10D\x3\x10D\x3\x10D\x3\x10D\x5\x10D\x1C15\n\x10D\x3"+
		"\x10D\x3\x10D\x5\x10D\x1C19\n\x10D\x3\x10D\x5\x10D\x1C1C\n\x10D\x3\x10E"+
		"\x3\x10E\x3\x10E\x3\x10E\x3\x10E\a\x10E\x1C23\n\x10E\f\x10E\xE\x10E\x1C26"+
		"\v\x10E\x3\x10E\x3\x10E\x3\x10F\x3\x10F\x3\x10F\x3\x10F\x3\x10F\x3\x10F"+
		"\x3\x10F\x3\x10F\x3\x10F\x3\x10F\x3\x10F\x3\x10F\x3\x10F\x5\x10F\x1C37"+
		"\n\x10F\x3\x10F\x3\x10F\x3\x10F\x3\x10F\x5\x10F\x1C3D\n\x10F\x5\x10F\x1C3F"+
		"\n\x10F\x3\x110\x3\x110\x5\x110\x1C43\n\x110\x3\x110\x3\x110\x3\x110\x3"+
		"\x110\x3\x110\x3\x110\x3\x110\x3\x110\x3\x110\x3\x110\x5\x110\x1C4F\n"+
		"\x110\x3\x110\x5\x110\x1C52\n\x110\x3\x110\x3\x110\x5\x110\x1C56\n\x110"+
		"\x3\x110\x5\x110\x1C59\n\x110\x3\x111\x3\x111\x5\x111\x1C5D\n\x111\x3"+
		"\x111\x3\x111\x3\x111\x3\x111\x3\x111\x3\x111\x3\x111\x3\x111\x3\x111"+
		"\x3\x111\x3\x111\x3\x111\x3\x111\x3\x111\x5\x111\x1C6D\n\x111\x5\x111"+
		"\x1C6F\n\x111\x5\x111\x1C71\n\x111\x3\x111\x5\x111\x1C74\n\x111\x3\x111"+
		"\x5\x111\x1C77\n\x111\x3\x112\x3\x112\x3\x112\x3\x112\x3\x112\a\x112\x1C7E"+
		"\n\x112\f\x112\xE\x112\x1C81\v\x112\x3\x112\x3\x112\x3\x113\x3\x113\x3"+
		"\x113\x3\x113\x3\x113\x3\x113\x3\x113\x3\x113\x3\x113\x3\x113\x3\x113"+
		"\x3\x113\x3\x113\x3\x113\x3\x113\x3\x113\x3\x113\x3\x113\x3\x113\x3\x113"+
		"\x3\x113\x3\x113\x5\x113\x1C9B\n\x113\x3\x113\x5\x113\x1C9E\n\x113\x3"+
		"\x113\x3\x113\x3\x113\x3\x113\x3\x113\x3\x113\x3\x113\x3\x113\x3\x113"+
		"\x3\x113\x3\x113\x3\x113\x5\x113\x1CAC\n\x113\x3\x114\x3\x114\x3\x114"+
		"\x5\x114\x1CB1\n\x114\x3\x114\x5\x114\x1CB4\n\x114\x3\x114\x3\x114\x3"+
		"\x114\x3\x114\x5\x114\x1CBA\n\x114\x3\x114\x5\x114\x1CBD\n\x114\x3\x114"+
		"\x3\x114\x3\x114\a\x114\x1CC2\n\x114\f\x114\xE\x114\x1CC5\v\x114\x3\x114"+
		"\x5\x114\x1CC8\n\x114\x5\x114\x1CCA\n\x114\x3\x114\x3\x114\x3\x114\x3"+
		"\x114\a\x114\x1CD0\n\x114\f\x114\xE\x114\x1CD3\v\x114\x5\x114\x1CD5\n"+
		"\x114\x3\x114\x3\x114\x5\x114\x1CD9\n\x114\x3\x114\x3\x114\x3\x114\a\x114"+
		"\x1CDE\n\x114\f\x114\xE\x114\x1CE1\v\x114\x5\x114\x1CE3\n\x114\x3\x115"+
		"\x3\x115\x3\x115\x3\x115\x3\x115\x3\x115\x3\x115\x3\x115\x3\x116\x3\x116"+
		"\x5\x116\x1CEF\n\x116\x3\x117\x3\x117\x3\x117\x5\x117\x1CF4\n\x117\x3"+
		"\x117\x5\x117\x1CF7\n\x117\x3\x117\x3\x117\x3\x117\x3\x117\x3\x117\x3"+
		"\x117\x3\x117\x3\x117\a\x117\x1D01\n\x117\f\x117\xE\x117\x1D04\v\x117"+
		"\x5\x117\x1D06\n\x117\x3\x117\x3\x117\x3\x117\x3\x117\x5\x117\x1D0C\n"+
		"\x117\x3\x117\x3\x117\x3\x117\a\x117\x1D11\n\x117\f\x117\xE\x117\x1D14"+
		"\v\x117\x3\x117\x3\x117\x5\x117\x1D18\n\x117\x3\x117\x3\x117\x3\x117\x5"+
		"\x117\x1D1D\n\x117\x3\x117\x3\x117\x6\x117\x1D21\n\x117\r\x117\xE\x117"+
		"\x1D22\x3\x118\x3\x118\x5\x118\x1D27\n\x118\x3\x119\x3\x119\x3\x11A\x3"+
		"\x11A\x3\x11A\x5\x11A\x1D2E\n\x11A\x3\x11A\x5\x11A\x1D31\n\x11A\x3\x11A"+
		"\x3\x11A\x3\x11A\x3\x11A\x3\x11A\x3\x11A\x5\x11A\x1D39\n\x11A\x3\x11A"+
		"\x3\x11A\x3\x11A\x3\x11A\a\x11A\x1D3F\n\x11A\f\x11A\xE\x11A\x1D42\v\x11A"+
		"\x5\x11A\x1D44\n\x11A\x3\x11A\x3\x11A\x3\x11A\x3\x11A\a\x11A\x1D4A\n\x11A"+
		"\f\x11A\xE\x11A\x1D4D\v\x11A\x3\x11A\x3\x11A\x6\x11A\x1D51\n\x11A\r\x11A"+
		"\xE\x11A\x1D52\x3\x11B\x3\x11B\x3\x11C\x3\x11C\x3\x11C\x5\x11C\x1D5A\n"+
		"\x11C\x3\x11C\x5\x11C\x1D5D\n\x11C\x3\x11C\x3\x11C\x3\x11C\x3\x11C\x3"+
		"\x11C\x3\x11C\a\x11C\x1D65\n\x11C\f\x11C\xE\x11C\x1D68\v\x11C\x3\x11C"+
		"\x3\x11C\x3\x11C\x3\x11C\x5\x11C\x1D6E\n\x11C\x3\x11C\x3\x11C\x3\x11C"+
		"\x5\x11C\x1D73\n\x11C\x3\x11C\x5\x11C\x1D76\n\x11C\x3\x11D\x3\x11D\x3"+
		"\x11D\x3\x11D\x3\x11D\x3\x11D\a\x11D\x1D7E\n\x11D\f\x11D\xE\x11D\x1D81"+
		"\v\x11D\x5\x11D\x1D83\n\x11D\x3\x11D\x5\x11D\x1D86\n\x11D\x3\x11D\x3\x11D"+
		"\x3\x11D\x3\x11D\x3\x11D\x3\x11D\x3\x11D\x5\x11D\x1D8F\n\x11D\x5\x11D"+
		"\x1D91\n\x11D\x3\x11E\x3\x11E\x3\x11E\x3\x11E\x3\x11E\x3\x11E\x3\x11E"+
		"\a\x11E\x1D9A\n\x11E\f\x11E\xE\x11E\x1D9D\v\x11E\x5\x11E\x1D9F\n\x11E"+
		"\x3\x11E\x5\x11E\x1DA2\n\x11E\x3\x11E\x3\x11E\x3\x11E\a\x11E\x1DA7\n\x11E"+
		"\f\x11E\xE\x11E\x1DAA\v\x11E\x3\x11E\x3\x11E\x5\x11E\x1DAE\n\x11E\x3\x11E"+
		"\x3\x11E\x5\x11E\x1DB2\n\x11E\x5\x11E\x1DB4\n\x11E\x3\x11F\x3\x11F\x3"+
		"\x11F\x3\x11F\x3\x11F\x3\x11F\a\x11F\x1DBC\n\x11F\f\x11F\xE\x11F\x1DBF"+
		"\v\x11F\x5\x11F\x1DC1\n\x11F\x3\x11F\x5\x11F\x1DC4\n\x11F\x3\x11F\x3\x11F"+
		"\x3\x11F\a\x11F\x1DC9\n\x11F\f\x11F\xE\x11F\x1DCC\v\x11F\x3\x11F\x3\x11F"+
		"\x3\x11F\x5\x11F\x1DD1\n\x11F\x3\x11F\x3\x11F\x5\x11F\x1DD5\n\x11F\x3"+
		"\x120\x3\x120\x3\x120\x3\x120\x5\x120\x1DDB\n\x120\x3\x121\x3\x121\x5"+
		"\x121\x1DDF\n\x121\x3\x121\x3\x121\x3\x121\x5\x121\x1DE4\n\x121\x3\x121"+
		"\x3\x121\x5\x121\x1DE8\n\x121\x3\x121\x3\x121\x5\x121\x1DEC\n\x121\x3"+
		"\x121\x5\x121\x1DEF\n\x121\x3\x122\x3\x122\x3\x122\x5\x122\x1DF4\n\x122"+
		"\x3\x123\x3\x123\x3\x123\x3\x123\x3\x123\x3\x123\x3\x123\x3\x123\x3\x123"+
		"\x3\x123\x3\x123\x3\x123\x5\x123\x1E02\n\x123\x3\x124\x3\x124\x3\x124"+
		"\x3\x124\x3\x124\x3\x124\x3\x124\x3\x124\x3\x124\x3\x124\x3\x124\x3\x124"+
		"\x3\x124\x3\x124\x5\x124\x1E12\n\x124\x3\x124\x3\x124\x5\x124\x1E16\n"+
		"\x124\x3\x124\x3\x124\x3\x124\x3\x124\x5\x124\x1E1C\n\x124\x5\x124\x1E1E"+
		"\n\x124\x3\x124\x5\x124\x1E21\n\x124\x3\x125\x3\x125\x3\x125\x3\x125\x3"+
		"\x125\x3\x125\x3\x125\x3\x125\a\x125\x1E2B\n\x125\f\x125\xE\x125\x1E2E"+
		"\v\x125\x3\x125\x3\x125\x5\x125\x1E32\n\x125\x3\x125\x5\x125\x1E35\n\x125"+
		"\x3\x126\x3\x126\x3\x126\x3\x126\a\x126\x1E3B\n\x126\f\x126\xE\x126\x1E3E"+
		"\v\x126\x3\x127\x3\x127\x5\x127\x1E42\n\x127\x3\x127\x3\x127\x3\x127\x5"+
		"\x127\x1E47\n\x127\x3\x127\x3\x127\x3\x127\x3\x127\x5\x127\x1E4D\n\x127"+
		"\x3\x127\x3\x127\x3\x127\x5\x127\x1E52\n\x127\x3\x127\x3\x127\x5\x127"+
		"\x1E56\n\x127\x3\x127\x3\x127\x3\x127\x3\x127\x3\x127\x3\x127\x3\x127"+
		"\x3\x127\x3\x127\x3\x127\x3\x127\x3\x127\x3\x127\x3\x127\x3\x127\x3\x127"+
		"\x3\x127\x3\x127\x3\x127\x3\x127\x3\x127\x3\x127\x5\x127\x1E6E\n\x127"+
		"\x3\x128\x3\x128\x3\x128\x3\x128\x3\x128\x3\x128\x5\x128\x1E76\n\x128"+
		"\x3\x128\a\x128\x1E79\n\x128\f\x128\xE\x128\x1E7C\v\x128\x3\x128\x5\x128"+
		"\x1E7F\n\x128\x3\x128\x3\x128\x3\x128\x5\x128\x1E84\n\x128\x3\x128\a\x128"+
		"\x1E87\n\x128\f\x128\xE\x128\x1E8A\v\x128\x3\x128\x3\x128\x3\x128\x3\x128"+
		"\x5\x128\x1E90\n\x128\x3\x128\x3\x128\x3\x128\x5\x128\x1E95\n\x128\x3"+
		"\x128\x5\x128\x1E98\n\x128\x3\x129\x3\x129\x3\x129\x5\x129\x1E9D\n\x129"+
		"\x3\x129\x5\x129\x1EA0\n\x129\x3\x129\x3\x129\x3\x129\x3\x129\x3\x129"+
		"\x3\x129\x3\x129\x3\x129\x3\x129\x3\x129\x3\x129\x3\x129\x5\x129\x1EAE"+
		"\n\x129\x3\x129\x3\x129\x3\x129\x3\x129\x3\x129\x5\x129\x1EB5\n\x129\x3"+
		"\x129\x3\x129\x5\x129\x1EB9\n\x129\x5\x129\x1EBB\n\x129\x3\x12A\x3\x12A"+
		"\x3\x12A\x3\x12A\x3\x12A\a\x12A\x1EC2\n\x12A\f\x12A\xE\x12A\x1EC5\v\x12A"+
		"\x3\x12A\x3\x12A\x3\x12A\x3\x12A\x3\x12A\a\x12A\x1ECC\n\x12A\f\x12A\xE"+
		"\x12A\x1ECF\v\x12A\x5\x12A\x1ED1\n\x12A\x3\x12B\x3\x12B\x5\x12B\x1ED5"+
		"\n\x12B\x3\x12B\x3\x12B\x3\x12B\x3\x12B\x3\x12B\x5\x12B\x1EDC\n\x12B\x3"+
		"\x12B\x3\x12B\x3\x12B\x3\x12B\x3\x12B\x3\x12B\x3\x12B\x3\x12B\x3\x12B"+
		"\x3\x12B\x3\x12B\x3\x12B\x3\x12B\x3\x12B\x3\x12B\x3\x12B\x3\x12B\x3\x12B"+
		"\x3\x12B\x5\x12B\x1EF1\n\x12B\x3\x12B\x3\x12B\x3\x12B\x5\x12B\x1EF6\n"+
		"\x12B\a\x12B\x1EF8\n\x12B\f\x12B\xE\x12B\x1EFB\v\x12B\x3\x12B\x3\x12B"+
		"\x3\x12B\x3\x12B\x3\x12B\x3\x12B\x5\x12B\x1F03\n\x12B\x3\x12B\x3\x12B"+
		"\x3\x12B\x3\x12B\x5\x12B\x1F09\n\x12B\x5\x12B\x1F0B\n\x12B\x3\x12C\x3"+
		"\x12C\x3\x12C\x3\x12C\x3\x12C\a\x12C\x1F12\n\x12C\f\x12C\xE\x12C\x1F15"+
		"\v\x12C\x3\x12C\x3\x12C\x3\x12D\x3\x12D\x3\x12D\x3\x12D\x3\x12D\x3\x12D"+
		"\x3\x12D\x3\x12D\x3\x12D\x3\x12D\x3\x12D\x3\x12D\x3\x12D\x3\x12D\x3\x12D"+
		"\x3\x12D\x3\x12D\x3\x12D\x3\x12D\x3\x12D\x3\x12D\x3\x12D\x3\x12D\x3\x12D"+
		"\x3\x12D\x3\x12D\x3\x12D\x3\x12D\x5\x12D\x1F35\n\x12D\x3\x12D\x3\x12D"+
		"\x3\x12D\x3\x12D\x5\x12D\x1F3B\n\x12D\x5\x12D\x1F3D\n\x12D\x3\x12E\x3"+
		"\x12E\x3\x12E\x5\x12E\x1F42\n\x12E\x3\x12E\x5\x12E\x1F45\n\x12E\x3\x12E"+
		"\x3\x12E\x3\x12E\x3\x12E\x3\x12E\x3\x12E\x5\x12E\x1F4D\n\x12E\x3\x12E"+
		"\x3\x12E\x3\x12E\x3\x12E\a\x12E\x1F53\n\x12E\f\x12E\xE\x12E\x1F56\v\x12E"+
		"\x5\x12E\x1F58\n\x12E\x3\x12E\x3\x12E\x3\x12E\x3\x12E\x3\x12E\x5\x12E"+
		"\x1F5F\n\x12E\x3\x12E\x5\x12E\x1F62\n\x12E\x3\x12F\x3\x12F\x3\x130\x3"+
		"\x130\x3\x130\x3\x130\x3\x130\x3\x130\x3\x130\x3\x130\x3\x130\x3\x130"+
		"\x3\x130\x3\x130\x3\x130\x3\x130\x3\x130\x5\x130\x1F75\n\x130\x3\x130"+
		"\x3\x130\x3\x130\x3\x130\x3\x130\a\x130\x1F7C\n\x130\f\x130\xE\x130\x1F7F"+
		"\v\x130\x3\x130\x3\x130\x3\x130\x3\x130\x3\x130\x3\x130\x3\x130\x3\x130"+
		"\x5\x130\x1F89\n\x130\x3\x130\x3\x130\x3\x130\x3\x130\x3\x130\x3\x130"+
		"\x3\x130\x3\x130\x3\x130\x3\x130\x3\x130\x5\x130\x1F96\n\x130\x3\x130"+
		"\x3\x130\a\x130\x1F9A\n\x130\f\x130\xE\x130\x1F9D\v\x130\x3\x130\x3\x130"+
		"\x3\x130\x3\x130\x3\x130\x5\x130\x1FA4\n\x130\x3\x130\x3\x130\x3\x130"+
		"\x3\x130\x3\x130\x3\x130\x5\x130\x1FAC\n\x130\x3\x130\x3\x130\x3\x130"+
		"\x3\x130\x5\x130\x1FB2\n\x130\x3\x130\x5\x130\x1FB5\n\x130\x3\x131\x5"+
		"\x131\x1FB8\n\x131\x3\x131\x5\x131\x1FBB\n\x131\x3\x131\x3\x131\x3\x131"+
		"\x3\x131\x5\x131\x1FC1\n\x131\x3\x131\x3\x131\x5\x131\x1FC5\n\x131\x3"+
		"\x132\x3\x132\x3\x132\x3\x132\x3\x132\x3\x132\x5\x132\x1FCD\n\x132\x3"+
		"\x132\x3\x132\x3\x132\x3\x132\x3\x132\x3\x132\x3\x133\x3\x133\x3\x133"+
		"\x3\x133\x5\x133\x1FD9\n\x133\x3\x133\x3\x133\x3\x133\x3\x133\x3\x133"+
		"\x3\x133\x3\x133\x3\x133\x3\x133\x3\x133\x5\x133\x1FE5\n\x133\x3\x133"+
		"\x3\x133\x5\x133\x1FE9\n\x133\x3\x133\x5\x133\x1FEC\n\x133\x3\x134\x3"+
		"\x134\x3\x134\x3\x134\x3\x134\a\x134\x1FF3\n\x134\f\x134\xE\x134\x1FF6"+
		"\v\x134\x3\x134\x3\x134\x3\x134\x5\x134\x1FFB\n\x134\x3\x134\x3\x134\x3"+
		"\x134\x3\x134\x3\x134\x3\x134\a\x134\x2003\n\x134\f\x134\xE\x134\x2006"+
		"\v\x134\x3\x134\x3\x134\x3\x134\x3\x134\x3\x134\x3\x134\x5\x134\x200E"+
		"\n\x134\x3\x135\x3\x135\x3\x135\x3\x135\x3\x135\x3\x135\x3\x135\x3\x135"+
		"\x5\x135\x2018\n\x135\x3\x135\x3\x135\x3\x135\x3\x135\x5\x135\x201E\n"+
		"\x135\x3\x135\x3\x135\x3\x135\x3\x135\x5\x135\x2024\n\x135\x3\x135\x3"+
		"\x135\x3\x135\x3\x135\x3\x135\x5\x135\x202B\n\x135\x3\x135\x3\x135\x3"+
		"\x135\x3\x135\x5\x135\x2031\n\x135\x3\x135\x3\x135\x5\x135\x2035\n\x135"+
		"\x3\x135\x3\x135\x3\x136\x3\x136\x3\x136\x3\x136\x3\x136\x3\x136\x3\x136"+
		"\x5\x136\x2040\n\x136\x3\x136\x3\x136\x3\x136\x3\x136\x3\x136\x3\x136"+
		"\x3\x136\x3\x136\x3\x136\x3\x136\x3\x136\x3\x136\x3\x136\x5\x136\x204F"+
		"\n\x136\x5\x136\x2051\n\x136\x3\x137\x3\x137\x3\x138\x3\x138\x3\x138\x3"+
		"\x138\x3\x138\x3\x138\x3\x138\x3\x138\x3\x138\x3\x138\x3\x138\x3\x138"+
		"\x3\x138\x3\x138\x3\x138\x3\x138\x3\x138\x3\x138\x3\x138\x3\x138\x3\x138"+
		"\x3\x138\x3\x138\x3\x138\x3\x138\x5\x138\x206E\n\x138\x3\x139\x3\x139"+
		"\x3\x139\x3\x139\x3\x13A\x3\x13A\x3\x13A\x3\x13A\x3\x13A\a\x13A\x2079"+
		"\n\x13A\f\x13A\xE\x13A\x207C\v\x13A\x3\x13A\x3\x13A\x3\x13B\x3\x13B\x3"+
		"\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B"+
		"\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B"+
		"\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B"+
		"\x3\x13B\x3\x13B\x3\x13B\x5\x13B\x20A0\n\x13B\x3\x13C\x3\x13C\x3\x13C"+
		"\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x5\x13C\x20AB\n\x13C"+
		"\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x5\x13C\x20B3\n\x13C"+
		"\x3\x13D\x3\x13D\x3\x13D\x3\x13D\x3\x13D\x3\x13D\x3\x13D\x3\x13D\a\x13D"+
		"\x20BD\n\x13D\f\x13D\xE\x13D\x20C0\v\x13D\a\x13D\x20C2\n\x13D\f\x13D\xE"+
		"\x13D\x20C5\v\x13D\x3\x13D\x5\x13D\x20C8\n\x13D\x3\x13E\x3\x13E\x3\x13E"+
		"\x3\x13E\x3\x13E\x3\x13E\x3\x13E\x5\x13E\x20D1\n\x13E\x3\x13F\x3\x13F"+
		"\x3\x13F\x3\x13F\x3\x140\x3\x140\x3\x140\x3\x140\x5\x140\x20DB\n\x140"+
		"\x3\x141\x3\x141\x3\x141\x3\x141\x3\x141\x5\x141\x20E2\n\x141\x3\x141"+
		"\x3\x141\x3\x141\x5\x141\x20E7\n\x141\x3\x141\x3\x141\x3\x141\x3\x141"+
		"\x3\x141\x3\x141\x3\x141\x3\x141\x3\x141\x3\x141\x3\x141\x3\x141\x3\x141"+
		"\x3\x141\x5\x141\x20F7\n\x141\x3\x141\x5\x141\x20FA\n\x141\x3\x141\x5"+
		"\x141\x20FD\n\x141\x3\x141\x3\x141\x3\x141\x5\x141\x2102\n\x141\x3\x141"+
		"\x5\x141\x2105\n\x141\x3\x141\x3\x141\x3\x141\x5\x141\x210A\n\x141\x3"+
		"\x141\x3\x141\x3\x141\x3\x141\x3\x141\x3\x141\x3\x141\x5\x141\x2113\n"+
		"\x141\x3\x141\x5\x141\x2116\n\x141\x3\x141\x5\x141\x2119\n\x141\x3\x141"+
		"\x3\x141\x3\x141\x3\x141\x3\x141\x5\x141\x2120\n\x141\x3\x142\x3\x142"+
		"\x3\x143\x3\x143\x3\x143\x3\x143\x3\x143\x3\x143\x5\x143\x212A\n\x143"+
		"\x3\x144\x3\x144\x3\x145\x3\x145\x3\x146\x3\x146\x3\x147\x3\x147\x3\x147"+
		"\x3\x147\x3\x147\x3\x147\x3\x147\x3\x147\x3\x147\x3\x147\x3\x147\x3\x147"+
		"\x5\x147\x213E\n\x147\x3\x148\x3\x148\x3\x148\x3\x148\x5\x148\x2144\n"+
		"\x148\x3\x149\x3\x149\x3\x14A\x3\x14A\x3\x14A\x3\x14A\x3\x14A\x3\x14B"+
		"\x3\x14B\x3\x14C\x3\x14C\x3\x14C\x3\x14C\x3\x14D\x3\x14D\x3\x14E\x3\x14E"+
		"\x3\x14E\x3\x14E\x3\x14E\x3\x14E\x3\x14E\x3\x14E\x5\x14E\x215D\n\x14E"+
		"\x5\x14E\x215F\n\x14E\x3\x14F\x3\x14F\x3\x14F\x3\x150\x3\x150\x3\x150"+
		"\x3\x151\x3\x151\x3\x152\x3\x152\x3\x153\x3\x153\x3\x154\x3\x154\x3\x154"+
		"\x3\x154\x3\x155\x3\x155\x3\x155\x3\x155\x3\x155\x3\x155\x3\x155\x3\x155"+
		"\x5\x155\x2179\n\x155\x3\x155\x3\x155\x3\x155\x3\x155\x5\x155\x217F\n"+
		"\x155\x3\x155\x3\x155\x3\x155\x3\x155\x3\x155\x3\x155\x3\x155\x3\x155"+
		"\x3\x155\x5\x155\x218A\n\x155\x3\x156\x3\x156\x3\x156\x3\x156\x3\x156"+
		"\x3\x156\x5\x156\x2192\n\x156\x3\x156\x5\x156\x2195\n\x156\x3\x157\x3"+
		"\x157\x3\x157\x3\x158\x3\x158\x3\x158\x3\x159\x3\x159\x3\x159\x3\x159"+
		"\x3\x159\x3\x159\x3\x159\x3\x159\x3\x159\x5\x159\x21A6\n\x159\x3\x15A"+
		"\x3\x15A\x3\x15A\x3\x15A\x3\x15A\x3\x15A\x5\x15A\x21AE\n\x15A\x3\x15B"+
		"\x3\x15B\x3\x15B\x3\x15B\x3\x15B\x5\x15B\x21B5\n\x15B\x3\x15C\x3\x15C"+
		"\x3\x15C\x3\x15C\x3\x15C\x3\x15C\x3\x15C\x3\x15C\x3\x15C\x3\x15C\x3\x15C"+
		"\x3\x15C\x3\x15C\x3\x15C\x3\x15C\x3\x15C\x3\x15C\x3\x15C\x3\x15C\x3\x15C"+
		"\x3\x15C\x5\x15C\x21CC\n\x15C\x3\x15D\x3\x15D\x3\x15D\x3\x15D\x3\x15D"+
		"\x3\x15E\x3\x15E\x3\x15E\x3\x15E\x3\x15E\x3\x15E\x5\x15E\x21D9\n\x15E"+
		"\x3\x15F\x3\x15F\x3\x15F\x3\x15F\x5\x15F\x21DF\n\x15F\x3\x15F\x3\x15F"+
		"\x3\x15F\a\x15F\x21E4\n\x15F\f\x15F\xE\x15F\x21E7\v\x15F\x3\x15F\x3\x15F"+
		"\x3\x15F\a\x15F\x21EC\n\x15F\f\x15F\xE\x15F\x21EF\v\x15F\x5\x15F\x21F1"+
		"\n\x15F\x3\x15F\x5\x15F\x21F4\n\x15F\x3\x160\x3\x160\x3\x160\x3\x160\x3"+
		"\x161\x3\x161\x3\x161\x5\x161\x21FD\n\x161\x3\x161\x3\x161\x3\x161\x3"+
		"\x161\x3\x162\x3\x162\x3\x162\x3\x162\x5\x162\x2207\n\x162\x3\x162\x3"+
		"\x162\x3\x162\a\x162\x220C\n\x162\f\x162\xE\x162\x220F\v\x162\x3\x162"+
		"\x5\x162\x2212\n\x162\x3\x163\x3\x163\x5\x163\x2216\n\x163\x3\x164\x3"+
		"\x164\x3\x164\x3\x164\x5\x164\x221C\n\x164\x3\x164\x3\x164\x3\x164\a\x164"+
		"\x2221\n\x164\f\x164\xE\x164\x2224\v\x164\x3\x164\x5\x164\x2227\n\x164"+
		"\x3\x165\x3\x165\x3\x165\x3\x165\x5\x165\x222D\n\x165\x3\x165\x3\x165"+
		"\x3\x165\a\x165\x2232\n\x165\f\x165\xE\x165\x2235\v\x165\x3\x165\x3\x165"+
		"\x3\x165\x3\x165\x5\x165\x223B\n\x165\x3\x165\x5\x165\x223E\n\x165\x3"+
		"\x166\x3\x166\x3\x166\x3\x166\x5\x166\x2244\n\x166\x3\x166\x3\x166\x3"+
		"\x166\a\x166\x2249\n\x166\f\x166\xE\x166\x224C\v\x166\x3\x166\x5\x166"+
		"\x224F\n\x166\x3\x167\x3\x167\x3\x167\x5\x167\x2254\n\x167\x3\x167\x3"+
		"\x167\x3\x167\x5\x167\x2259\n\x167\x3\x167\x6\x167\x225C\n\x167\r\x167"+
		"\xE\x167\x225D\x3\x167\x3\x167\x3\x168\x3\x168\x3\x168\x3\x168\x5\x168"+
		"\x2266\n\x168\x3\x168\x3\x168\x3\x168\a\x168\x226B\n\x168\f\x168\xE\x168"+
		"\x226E\v\x168\x3\x168\x5\x168\x2271\n\x168\x3\x169\x3\x169\x3\x169\x3"+
		"\x169\x5\x169\x2277\n\x169\x3\x169\x3\x169\x3\x169\a\x169\x227C\n\x169"+
		"\f\x169\xE\x169\x227F\v\x169\x3\x169\x5\x169\x2282\n\x169\x3\x16A\x3\x16A"+
		"\x3\x16A\x3\x16A\x3\x16A\x3\x16A\x5\x16A\x228A\n\x16A\x5\x16A\x228C\n"+
		"\x16A\x3\x16A\x3\x16A\x3\x16A\x3\x16A\x3\x16A\x3\x16A\x5\x16A\x2294\n"+
		"\x16A\x3\x16B\x3\x16B\x3\x16B\x3\x16B\x5\x16B\x229A\n\x16B\x3\x16B\x3"+
		"\x16B\x3\x16C\x3\x16C\x5\x16C\x22A0\n\x16C\x3\x16D\x3\x16D\x3\x16D\x3"+
		"\x16D\x3\x16D\x3\x16D\x3\x16D\x3\x16E\x3\x16E\x3\x16E\x3\x16E\x3\x16E"+
		"\x3\x16E\x3\x16E\x3\x16E\x5\x16E\x22B1\n\x16E\x3\x16E\x3\x16E\x5\x16E"+
		"\x22B5\n\x16E\x3\x16E\x3\x16E\x3\x16E\x3\x16F\x3\x16F\x3\x16F\x5\x16F"+
		"\x22BD\n\x16F\x3\x16F\x3\x16F\x3\x16F\x5\x16F\x22C2\n\x16F\x3\x16F\x3"+
		"\x16F\x3\x16F\x3\x16F\a\x16F\x22C8\n\x16F\f\x16F\xE\x16F\x22CB\v\x16F"+
		"\x3\x16F\x3\x16F\x3\x16F\x5\x16F\x22D0\n\x16F\x3\x16F\x3\x16F\x3\x16F"+
		"\x3\x16F\x3\x16F\x3\x16F\x3\x16F\a\x16F\x22D9\n\x16F\f\x16F\xE\x16F\x22DC"+
		"\v\x16F\x3\x16F\x3\x16F\x5\x16F\x22E0\n\x16F\x3\x170\x3\x170\x3\x170\x3"+
		"\x170\x3\x170\x5\x170\x22E7\n\x170\x3\x171\x3\x171\x5\x171\x22EB\n\x171"+
		"\x3\x171\x3\x171\x5\x171\x22EF\n\x171\x3\x171\x3\x171\x5\x171\x22F3\n"+
		"\x171\x3\x171\x5\x171\x22F6\n\x171\x3\x171\x3\x171\x5\x171\x22FA\n\x171"+
		"\x3\x171\x3\x171\x3\x171\x3\x171\x5\x171\x2300\n\x171\x3\x171\x3\x171"+
		"\x5\x171\x2304\n\x171\x5\x171\x2306\n\x171\x3\x172\x3\x172\x3\x172\x3"+
		"\x172\x3\x172\x5\x172\x230D\n\x172\x3\x172\x3\x172\x3\x172\a\x172\x2312"+
		"\n\x172\f\x172\xE\x172\x2315\v\x172\x5\x172\x2317\n\x172\x3\x172\x5\x172"+
		"\x231A\n\x172\x3\x172\x3\x172\x3\x172\a\x172\x231F\n\x172\f\x172\xE\x172"+
		"\x2322\v\x172\x3\x172\x3\x172\x5\x172\x2326\n\x172\x3\x172\x6\x172\x2329"+
		"\n\x172\r\x172\xE\x172\x232A\x3\x172\x3\x172\x5\x172\x232F\n\x172\x3\x172"+
		"\x3\x172\x3\x172\x3\x172\x5\x172\x2335\n\x172\x6\x172\x2337\n\x172\r\x172"+
		"\xE\x172\x2338\x5\x172\x233B\n\x172\x3\x172\x3\x172\x3\x172\x5\x172\x2340"+
		"\n\x172\x3\x172\x6\x172\x2343\n\x172\r\x172\xE\x172\x2344\x6\x172\x2347"+
		"\n\x172\r\x172\xE\x172\x2348\x3\x172\x3\x172\x3\x172\x5\x172\x234E\n\x172"+
		"\x3\x172\x3\x172\x3\x172\x3\x172\x5\x172\x2354\n\x172\x6\x172\x2356\n"+
		"\x172\r\x172\xE\x172\x2357\x6\x172\x235A\n\x172\r\x172\xE\x172\x235B\x5"+
		"\x172\x235E\n\x172\x3\x172\x3\x172\x5\x172\x2362\n\x172\x3\x172\x3\x172"+
		"\x5\x172\x2366\n\x172\x3\x172\x3\x172\x5\x172\x236A\n\x172\x3\x172\x3"+
		"\x172\x5\x172\x236E\n\x172\x3\x172\x3\x172\x3\x172\x3\x172\x5\x172\x2374"+
		"\n\x172\x3\x172\x5\x172\x2377\n\x172\x3\x172\x3\x172\x3\x172\x3\x172\x5"+
		"\x172\x237D\n\x172\x3\x172\x3\x172\x5\x172\x2381\n\x172\x3\x172\x3\x172"+
		"\x5\x172\x2385\n\x172\x3\x172\x3\x172\x3\x172\x3\x172\x5\x172\x238B\n"+
		"\x172\x3\x172\x3\x172\x3\x172\x3\x172\x5\x172\x2391\n\x172\x5\x172\x2393"+
		"\n\x172\x3\x172\x5\x172\x2396\n\x172\x3\x172\x3\x172\x5\x172\x239A\n\x172"+
		"\x3\x172\x3\x172\x5\x172\x239E\n\x172\x3\x172\x3\x172\x5\x172\x23A2\n"+
		"\x172\x3\x172\x3\x172\x3\x172\x3\x172\x5\x172\x23A8\n\x172\x3\x172\x5"+
		"\x172\x23AB\n\x172\x3\x172\x3\x172\x3\x172\x3\x172\x5\x172\x23B1\n\x172"+
		"\x3\x172\x3\x172\x3\x172\x3\x172\x5\x172\x23B7\n\x172\x3\x172\x5\x172"+
		"\x23BA\n\x172\x3\x172\x3\x172\x3\x172\x3\x172\x5\x172\x23C0\n\x172\x3"+
		"\x172\x5\x172\x23C3\n\x172\x3\x172\x3\x172\x3\x172\x3\x172\x5\x172\x23C9"+
		"\n\x172\x3\x172\x5\x172\x23CC\n\x172\x3\x172\x3\x172\x5\x172\x23D0\n\x172"+
		"\x3\x172\x3\x172\x5\x172\x23D4\n\x172\x3\x172\x3\x172\x5\x172\x23D8\n"+
		"\x172\x3\x172\x3\x172\x3\x172\x5\x172\x23DD\n\x172\x3\x172\x5\x172\x23E0"+
		"\n\x172\x3\x172\x3\x172\x5\x172\x23E4\n\x172\x3\x172\x3\x172\x5\x172\x23E8"+
		"\n\x172\x3\x172\x3\x172\x3\x172\x3\x172\x3\x172\x3\x172\x3\x172\x3\x172"+
		"\x3\x172\x3\x172\x3\x172\x3\x172\x3\x172\x3\x172\x3\x172\x5\x172\x23F9"+
		"\n\x172\a\x172\x23FB\n\x172\f\x172\xE\x172\x23FE\v\x172\x5\x172\x2400"+
		"\n\x172\x3\x173\x3\x173\x3\x173\x3\x173\x3\x173\x5\x173\x2407\n\x173\x3"+
		"\x173\x6\x173\x240A\n\x173\r\x173\xE\x173\x240B\x3\x173\x3\x173\x5\x173"+
		"\x2410\n\x173\x3\x173\x3\x173\x3\x173\x3\x173\x5\x173\x2416\n\x173\x6"+
		"\x173\x2418\n\x173\r\x173\xE\x173\x2419\x5\x173\x241C\n\x173\x3\x173\x3"+
		"\x173\x3\x173\x5\x173\x2421\n\x173\x3\x173\x6\x173\x2424\n\x173\r\x173"+
		"\xE\x173\x2425\x6\x173\x2428\n\x173\r\x173\xE\x173\x2429\x3\x173\x3\x173"+
		"\x3\x173\x5\x173\x242F\n\x173\x3\x173\x3\x173\x3\x173\x3\x173\x5\x173"+
		"\x2435\n\x173\x6\x173\x2437\n\x173\r\x173\xE\x173\x2438\x6\x173\x243B"+
		"\n\x173\r\x173\xE\x173\x243C\x5\x173\x243F\n\x173\x3\x173\x3\x173\x5\x173"+
		"\x2443\n\x173\x3\x173\x3\x173\x5\x173\x2447\n\x173\x3\x173\x3\x173\x5"+
		"\x173\x244B\n\x173\x3\x173\x3\x173\x5\x173\x244F\n\x173\x3\x173\x3\x173"+
		"\x3\x173\x3\x173\x5\x173\x2455\n\x173\x3\x173\x5\x173\x2458\n\x173\x3"+
		"\x173\x3\x173\x3\x173\x3\x173\x5\x173\x245E\n\x173\x3\x173\x3\x173\x5"+
		"\x173\x2462\n\x173\x3\x173\x3\x173\x5\x173\x2466\n\x173\x3\x173\x3\x173"+
		"\x3\x173\x3\x173\x5\x173\x246C\n\x173\x3\x173\x3\x173\x3\x173\x3\x173"+
		"\x5\x173\x2472\n\x173\x5\x173\x2474\n\x173\x3\x173\x5\x173\x2477\n\x173"+
		"\x3\x173\x3\x173\x5\x173\x247B\n\x173\x3\x173\x3\x173\x5\x173\x247F\n"+
		"\x173\x3\x173\x3\x173\x5\x173\x2483\n\x173\x3\x173\x3\x173\x3\x173\x3"+
		"\x173\x5\x173\x2489\n\x173\x3\x173\x5\x173\x248C\n\x173\x3\x173\x3\x173"+
		"\x3\x173\x3\x173\x5\x173\x2492\n\x173\x3\x173\x3\x173\x3\x173\x3\x173"+
		"\x5\x173\x2498\n\x173\x3\x173\x5\x173\x249B\n\x173\x3\x173\x3\x173\x3"+
		"\x173\x3\x173\x5\x173\x24A1\n\x173\x3\x173\x5\x173\x24A4\n\x173\x3\x173"+
		"\x3\x173\x3\x173\x3\x173\x5\x173\x24AA\n\x173\x3\x173\x5\x173\x24AD\n"+
		"\x173\x3\x173\x3\x173\x5\x173\x24B1\n\x173\x3\x173\x3\x173\x5\x173\x24B5"+
		"\n\x173\x3\x173\x3\x173\x5\x173\x24B9\n\x173\x3\x173\x3\x173\x3\x173\x5"+
		"\x173\x24BE\n\x173\x3\x173\x5\x173\x24C1\n\x173\x3\x173\x3\x173\x5\x173"+
		"\x24C5\n\x173\x3\x173\x3\x173\x5\x173\x24C9\n\x173\x3\x173\x3\x173\x3"+
		"\x173\x3\x173\x5\x173\x24CF\n\x173\x3\x173\x5\x173\x24D2\n\x173\x3\x173"+
		"\x3\x173\x5\x173\x24D6\n\x173\x3\x173\x3\x173\x3\x173\x3\x173\x3\x173"+
		"\x3\x173\x3\x173\x3\x173\x3\x173\x3\x173\x3\x173\x3\x173\x3\x173\x3\x173"+
		"\x3\x173\x5\x173\x24E7\n\x173\a\x173\x24E9\n\x173\f\x173\xE\x173\x24EC"+
		"\v\x173\x5\x173\x24EE\n\x173\x3\x174\x3\x174\x3\x174\x3\x174\x3\x174\x3"+
		"\x174\x3\x174\x3\x174\x3\x174\x3\x174\x3\x174\x3\x174\x5\x174\x24FC\n"+
		"\x174\x3\x174\x3\x174\x3\x174\x3\x174\x5\x174\x2502\n\x174\x3\x174\x3"+
		"\x174\x3\x174\x3\x174\x3\x174\x3\x174\x5\x174\x250A\n\x174\x3\x174\x3"+
		"\x174\x3\x174\x3\x174\x3\x174\x6\x174\x2511\n\x174\r\x174\xE\x174\x2512"+
		"\x3\x174\x5\x174\x2516\n\x174\x3\x175\x3\x175\x3\x175\x3\x175\x3\x175"+
		"\x3\x175\x3\x175\x3\x175\x3\x175\x3\x175\x3\x175\x3\x175\x3\x175\x3\x176"+
		"\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176"+
		"\x3\x176\x3\x176\x3\x176\x3\x176\x3\x177\x3\x177\x3\x177\x3\x177\x5\x177"+
		"\x2537\n\x177\x3\x178\x3\x178\x5\x178\x253B\n\x178\x3\x178\x3\x178\x5"+
		"\x178\x253F\n\x178\x3\x179\x3\x179\x3\x179\x3\x179\x3\x179\x5\x179\x2546"+
		"\n\x179\x3\x17A\x3\x17A\x3\x17A\x3\x17A\x3\x17B\x3\x17B\x3\x17B\x5\x17B"+
		"\x254F\n\x17B\x3\x17C\x3\x17C\x3\x17C\x3\x17C\a\x17C\x2555\n\x17C\f\x17C"+
		"\xE\x17C\x2558\v\x17C\x5\x17C\x255A\n\x17C\x3\x17C\x5\x17C\x255D\n\x17C"+
		"\x3\x17D\x3\x17D\x5\x17D\x2561\n\x17D\x3\x17D\x3\x17D\x5\x17D\x2565\n"+
		"\x17D\x3\x17D\x5\x17D\x2568\n\x17D\x3\x17D\x3\x17D\x3\x17D\x3\x17D\a\x17D"+
		"\x256E\n\x17D\f\x17D\xE\x17D\x2571\v\x17D\x3\x17D\x3\x17D\x3\x17D\x3\x17D"+
		"\x3\x17D\x5\x17D\x2578\n\x17D\x3\x17D\x3\x17D\x5\x17D\x257C\n\x17D\x3"+
		"\x17D\x3\x17D\x3\x17D\x3\x17D\x3\x17D\x5\x17D\x2583\n\x17D\x5\x17D\x2585"+
		"\n\x17D\x3\x17E\x3\x17E\x3\x17E\a\x17E\x258A\n\x17E\f\x17E\xE\x17E\x258D"+
		"\v\x17E\x3\x17E\x3\x17E\x3\x17E\a\x17E\x2592\n\x17E\f\x17E\xE\x17E\x2595"+
		"\v\x17E\x5\x17E\x2597\n\x17E\x3\x17F\x3\x17F\x3\x17F\x3\x17F\x3\x180\x3"+
		"\x180\x3\x181\x3\x181\x3\x181\x5\x181\x25A2\n\x181\x3\x181\x3\x181\x3"+
		"\x181\x5\x181\x25A7\n\x181\x3\x182\x3\x182\x5\x182\x25AB\n\x182\x3\x182"+
		"\x5\x182\x25AE\n\x182\x3\x182\x3\x182\x5\x182\x25B2\n\x182\x3\x183\x3"+
		"\x183\x5\x183\x25B6\n\x183\x3\x183\x3\x183\x3\x183\x5\x183\x25BB\n\x183"+
		"\x3\x183\x3\x183\x3\x183\x3\x183\x3\x183\x5\x183\x25C2\n\x183\x5\x183"+
		"\x25C4\n\x183\x3\x183\x3\x183\x3\x183\x3\x183\x5\x183\x25CA\n\x183\x3"+
		"\x183\x5\x183\x25CD\n\x183\x3\x183\x3\x183\x3\x183\x3\x183\a\x183\x25D3"+
		"\n\x183\f\x183\xE\x183\x25D6\v\x183\x3\x183\x3\x183\x3\x183\x5\x183\x25DB"+
		"\n\x183\x3\x183\x3\x183\x5\x183\x25DF\n\x183\x3\x183\x5\x183\x25E2\n\x183"+
		"\x3\x183\x3\x183\x3\x183\x3\x183\x3\x183\x5\x183\x25E9\n\x183\x3\x183"+
		"\x5\x183\x25EC\n\x183\x3\x183\x3\x183\x3\x183\x3\x183\x5\x183\x25F2\n"+
		"\x183\x3\x184\x3\x184\x5\x184\x25F6\n\x184\x3\x185\x3\x185\x3\x185\x3"+
		"\x185\x3\x185\x5\x185\x25FD\n\x185\x3\x185\x3\x185\x3\x185\x5\x185\x2602"+
		"\n\x185\x3\x185\x3\x185\x3\x185\x3\x185\x3\x185\x3\x185\x5\x185\x260A"+
		"\n\x185\x3\x186\x3\x186\x3\x186\x5\x186\x260F\n\x186\x3\x186\x3\x186\x3"+
		"\x186\x3\x186\x3\x186\x3\x186\x3\x186\x3\x186\x3\x186\x3\x186\x5\x186"+
		"\x261B\n\x186\x5\x186\x261D\n\x186\x3\x187\x3\x187\x3\x187\x3\x187\x3"+
		"\x187\x3\x187\x3\x187\x3\x187\x3\x187\x5\x187\x2628\n\x187\x3\x188\x3"+
		"\x188\x3\x188\x3\x188\x3\x188\x5\x188\x262F\n\x188\x3\x188\x3\x188\x3"+
		"\x188\x3\x188\x3\x188\x3\x188\a\x188\x2637\n\x188\f\x188\xE\x188\x263A"+
		"\v\x188\x3\x189\x3\x189\x3\x189\x3\x189\x3\x18A\x3\x18A\x3\x18A\x3\x18A"+
		"\x3\x18A\x3\x18A\x3\x18A\x3\x18A\x3\x18A\x3\x18A\x3\x18A\x3\x18A\x3\x18A"+
		"\x3\x18A\x3\x18A\x3\x18A\x5\x18A\x2650\n\x18A\x3\x18B\x3\x18B\x3\x18B"+
		"\x3\x18B\x3\x18B\x3\x18B\x3\x18B\x3\x18B\x3\x18B\x3\x18B\x3\x18B\x5\x18B"+
		"\x265D\n\x18B\x3\x18C\x3\x18C\x3\x18C\x3\x18C\x3\x18C\x3\x18C\x3\x18C"+
		"\x3\x18C\x3\x18C\x3\x18C\x3\x18C\x3\x18C\x3\x18C\x3\x18C\x5\x18C\x266D"+
		"\n\x18C\x3\x18C\x3\x18C\x3\x18C\x5\x18C\x2672\n\x18C\x3\x18C\x3\x18C\x3"+
		"\x18C\x3\x18C\x3\x18C\x5\x18C\x2679\n\x18C\x3\x18C\x5\x18C\x267C\n\x18C"+
		"\x6\x18C\x267E\n\x18C\r\x18C\xE\x18C\x267F\x5\x18C\x2682\n\x18C\x3\x18D"+
		"\x3\x18D\x3\x18D\x3\x18D\x3\x18D\x3\x18D\x3\x18D\x3\x18D\x3\x18D\x3\x18D"+
		"\x3\x18D\x3\x18D\x3\x18D\x3\x18D\x3\x18D\x5\x18D\x2693\n\x18D\x3\x18E"+
		"\x3\x18E\x3\x18F\x3\x18F\x3\x18F\x3\x18F\x3\x18F\x3\x18F\x3\x18F\x3\x18F"+
		"\x3\x18F\x3\x18F\x3\x18F\x5\x18F\x26A2\n\x18F\x3\x190\x3\x190\x3\x190"+
		"\x3\x190\x3\x190\x3\x190\x5\x190\x26AA\n\x190\x3\x190\x3\x190\x3\x190"+
		"\x3\x190\x3\x190\x3\x190\x3\x190\x5\x190\x26B3\n\x190\x3\x190\x3\x190"+
		"\x3\x190\x3\x190\x3\x190\x3\x190\x5\x190\x26BB\n\x190\x3\x191\x3\x191"+
		"\x3\x191\x3\x191\x3\x191\x3\x191\x5\x191\x26C3\n\x191\x3\x191\x3\x191"+
		"\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191"+
		"\x3\x191\x3\x191\x3\x191\x3\x191\x5\x191\x26D4\n\x191\x3\x191\x3\x191"+
		"\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191"+
		"\x5\x191\x26E1\n\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191"+
		"\x3\x191\x3\x191\x3\x191\x3\x191\x5\x191\x26ED\n\x191\x3\x191\x3\x191"+
		"\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191"+
		"\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191"+
		"\x3\x191\x3\x191\x5\x191\x2705\n\x191\x3\x191\x3\x191\x3\x191\x3\x191"+
		"\x3\x191\x5\x191\x270C\n\x191\x3\x191\x3\x191\x5\x191\x2710\n\x191\x3"+
		"\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x5\x191"+
		"\x271A\n\x191\x3\x191\x3\x191\x5\x191\x271E\n\x191\x3\x191\x3\x191\x3"+
		"\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191"+
		"\x3\x191\x3\x191\x3\x191\x3\x191\x5\x191\x272F\n\x191\x3\x191\x3\x191"+
		"\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191"+
		"\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191"+
		"\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191"+
		"\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x5\x191"+
		"\x2756\n\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x5\x191\x275D\n"+
		"\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x5\x191\x2765\n"+
		"\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191"+
		"\x3\x191\x3\x191\x5\x191\x2771\n\x191\x3\x191\x3\x191\x3\x191\x3\x191"+
		"\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191"+
		"\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x5\x191\x2787"+
		"\n\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x5\x191"+
		"\x2790\n\x191\x5\x191\x2792\n\x191\x3\x192\x3\x192\x3\x192\x3\x192\x5"+
		"\x192\x2798\n\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3"+
		"\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192"+
		"\x3\x192\x3\x192\x3\x192\x5\x192\x27AC\n\x192\x5\x192\x27AE\n\x192\x5"+
		"\x192\x27B0\n\x192\x3\x192\x5\x192\x27B3\n\x192\x3\x193\x3\x193\x3\x193"+
		"\x3\x193\x3\x193\x5\x193\x27BA\n\x193\x3\x193\x3\x193\x3\x193\x3\x193"+
		"\x5\x193\x27C0\n\x193\x3\x193\x3\x193\x3\x193\x5\x193\x27C5\n\x193\x5"+
		"\x193\x27C7\n\x193\x3\x193\x3\x193\x3\x193\x3\x193\x5\x193\x27CD\n\x193"+
		"\x3\x193\x3\x193\x3\x193\x3\x193\x3\x193\x3\x193\x5\x193\x27D5\n\x193"+
		"\x5\x193\x27D7\n\x193\x3\x193\x3\x193\x5\x193\x27DB\n\x193\x3\x193\x3"+
		"\x193\x3\x193\x3\x193\x3\x193\x3\x193\x3\x193\x3\x193\x5\x193\x27E5\n"+
		"\x193\x3\x193\x3\x193\x5\x193\x27E9\n\x193\x3\x193\x3\x193\x3\x193\x3"+
		"\x193\x5\x193\x27EF\n\x193\x5\x193\x27F1\n\x193\x3\x194\x3\x194\x5\x194"+
		"\x27F5\n\x194\x3\x195\x3\x195\x3\x195\x3\x196\x3\x196\x5\x196\x27FC\n"+
		"\x196\x3\x197\x3\x197\x3\x197\x5\x197\x2801\n\x197\x3\x198\x3\x198\x3"+
		"\x198\x5\x198\x2806\n\x198\x3\x199\x3\x199\x5\x199\x280A\n\x199\x3\x19A"+
		"\x3\x19A\x3\x19B\x3\x19B\x3\x19B\x3\x19B\x3\x19B\x5\x19B\x2813\n\x19B"+
		"\x3\x19B\x3\x19B\x3\x19B\x3\x19B\x5\x19B\x2819\n\x19B\x3\x19B\x3\x19B"+
		"\x3\x19B\x3\x19B\x3\x19B\a\x19B\x2820\n\x19B\f\x19B\xE\x19B\x2823\v\x19B"+
		"\x5\x19B\x2825\n\x19B\x5\x19B\x2827\n\x19B\x3\x19C\x3\x19C\x3\x19C\x3"+
		"\x19C\x3\x19C\x5\x19C\x282E\n\x19C\x3\x19C\x5\x19C\x2831\n\x19C\x3\x19C"+
		"\x3\x19C\x5\x19C\x2835\n\x19C\x3\x19D\x3\x19D\x3\x19E\x3\x19E\x3\x19E"+
		"\x3\x19E\x5\x19E\x283D\n\x19E\x3\x19E\x5\x19E\x2840\n\x19E\x3\x19E\x3"+
		"\x19E\x3\x19E\x3\x19E\a\x19E\x2846\n\x19E\f\x19E\xE\x19E\x2849\v\x19E"+
		"\x5\x19E\x284B\n\x19E\x3\x19F\x3\x19F\x3\x19F\x3\x19F\x3\x19F\x3\x19F"+
		"\x3\x19F\x3\x19F\x3\x19F\x3\x19F\x5\x19F\x2857\n\x19F\x3\x1A0\x3\x1A0"+
		"\x3\x1A0\x3\x1A0\x3\x1A0\x5\x1A0\x285E\n\x1A0\x3\x1A0\x3\x1A0\x5\x1A0"+
		"\x2862\n\x1A0\x3\x1A0\x5\x1A0\x2865\n\x1A0\x3\x1A0\x3\x1A0\x3\x1A0\x3"+
		"\x1A0\a\x1A0\x286B\n\x1A0\f\x1A0\xE\x1A0\x286E\v\x1A0\x5\x1A0\x2870\n"+
		"\x1A0\x3\x1A1\x3\x1A1\x3\x1A1\x3\x1A1\x3\x1A1\x3\x1A1\x3\x1A1\x3\x1A1"+
		"\x5\x1A1\x287A\n\x1A1\x3\x1A2\x3\x1A2\x3\x1A2\x3\x1A2\x5\x1A2\x2880\n"+
		"\x1A2\x3\x1A2\x3\x1A2\x5\x1A2\x2884\n\x1A2\x3\x1A2\x5\x1A2\x2887\n\x1A2"+
		"\x3\x1A2\x3\x1A2\x3\x1A2\x3\x1A2\a\x1A2\x288D\n\x1A2\f\x1A2\xE\x1A2\x2890"+
		"\v\x1A2\x5\x1A2\x2892\n\x1A2\x3\x1A3\x3\x1A3\x3\x1A3\x3\x1A3\x3\x1A3\x3"+
		"\x1A3\x3\x1A3\x3\x1A3\x3\x1A3\x5\x1A3\x289D\n\x1A3\x5\x1A3\x289F\n\x1A3"+
		"\x3\x1A3\x3\x1A3\x3\x1A3\x3\x1A3\x3\x1A3\a\x1A3\x28A6\n\x1A3\f\x1A3\xE"+
		"\x1A3\x28A9\v\x1A3\x5\x1A3\x28AB\n\x1A3\x3\x1A4\x3\x1A4\x3\x1A4\x3\x1A4"+
		"\x3\x1A4\x5\x1A4\x28B2\n\x1A4\x3\x1A4\x3\x1A4\x3\x1A4\x5\x1A4\x28B7\n"+
		"\x1A4\x3\x1A4\x3\x1A4\x5\x1A4\x28BB\n\x1A4\x3\x1A4\x3\x1A4\x3\x1A4\x5"+
		"\x1A4\x28C0\n\x1A4\x3\x1A5\x3\x1A5\x3\x1A6\x3\x1A6\x3\x1A6\x3\x1A6\x3"+
		"\x1A6\x3\x1A6\x3\x1A6\x3\x1A6\x3\x1A6\x3\x1A6\a\x1A6\x28CE\n\x1A6\f\x1A6"+
		"\xE\x1A6\x28D1\v\x1A6\x5\x1A6\x28D3\n\x1A6\x3\x1A7\x3\x1A7\x3\x1A7\x3"+
		"\x1A7\x3\x1A7\x5\x1A7\x28DA\n\x1A7\x3\x1A7\x3\x1A7\x5\x1A7\x28DE\n\x1A7"+
		"\x3\x1A8\x3\x1A8\x3\x1A8\x5\x1A8\x28E3\n\x1A8\x3\x1A9\x3\x1A9\x3\x1AA"+
		"\x3\x1AA\x3\x1AA\x3\x1AA\x3\x1AA\x5\x1AA\x28EC\n\x1AA\x3\x1AA\x3\x1AA"+
		"\x5\x1AA\x28F0\n\x1AA\x3\x1AA\x3\x1AA\x3\x1AA\x3\x1AA\a\x1AA\x28F6\n\x1AA"+
		"\f\x1AA\xE\x1AA\x28F9\v\x1AA\x5\x1AA\x28FB\n\x1AA\x3\x1AB\x3\x1AB\x3\x1AB"+
		"\x3\x1AB\x3\x1AB\x3\x1AB\x3\x1AB\x5\x1AB\x2904\n\x1AB\x3\x1AB\x5\x1AB"+
		"\x2907\n\x1AB\x3\x1AB\x3\x1AB\x5\x1AB\x290B\n\x1AB\x3\x1AC\x3\x1AC\x3"+
		"\x1AC\x3\x1AC\x3\x1AC\x3\x1AC\x3\x1AC\x5\x1AC\x2914\n\x1AC\x5\x1AC\x2916"+
		"\n\x1AC\x3\x1AC\x3\x1AC\x3\x1AC\x5\x1AC\x291B\n\x1AC\x3\x1AD\x3\x1AD\x3"+
		"\x1AD\x3\x1AD\x3\x1AD\x3\x1AD\x5\x1AD\x2923\n\x1AD\x3\x1AE\x3\x1AE\x3"+
		"\x1AE\x3\x1AE\x3\x1AE\x5\x1AE\x292A\n\x1AE\x3\x1AE\x3\x1AE\x5\x1AE\x292E"+
		"\n\x1AE\x3\x1AF\x3\x1AF\x3\x1AF\x3\x1AF\x3\x1AF\x3\x1AF\x3\x1AF\x3\x1AF"+
		"\x3\x1AF\x3\x1AF\x3\x1AF\x3\x1AF\x3\x1AF\x3\x1AF\x3\x1AF\x3\x1AF\x5\x1AF"+
		"\x2940\n\x1AF\x3\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x3\x1B1\x3\x1B1\x5\x1B1"+
		"\x2948\n\x1B1\x3\x1B1\x3\x1B1\x3\x1B1\x5\x1B1\x294D\n\x1B1\x3\x1B2\x3"+
		"\x1B2\x3\x1B2\x3\x1B2\x5\x1B2\x2953\n\x1B2\x3\x1B2\a\x1B2\x2956\n\x1B2"+
		"\f\x1B2\xE\x1B2\x2959\v\x1B2\x3\x1B2\x3\x1B2\x3\x1B3\x3\x1B3\x3\x1B3\x3"+
		"\x1B3\x5\x1B3\x2961\n\x1B3\x3\x1B3\x5\x1B3\x2964\n\x1B3\x3\x1B3\x5\x1B3"+
		"\x2967\n\x1B3\x3\x1B3\x3\x1B3\x3\x1B3\x3\x1B3\x3\x1B3\x3\x1B3\x3\x1B3"+
		"\x3\x1B3\x3\x1B3\x5\x1B3\x2972\n\x1B3\x3\x1B4\x3\x1B4\x3\x1B4\x5\x1B4"+
		"\x2977\n\x1B4\x3\x1B4\x3\x1B4\x3\x1B4\x3\x1B5\x3\x1B5\x3\x1B5\x3\x1B5"+
		"\x3\x1B6\x3\x1B6\x5\x1B6\x2982\n\x1B6\x3\x1B6\a\x1B6\x2985\n\x1B6\f\x1B6"+
		"\xE\x1B6\x2988\v\x1B6\x3\x1B7\x3\x1B7\x3\x1B7\x5\x1B7\x298D\n\x1B7\x3"+
		"\x1B8\x3\x1B8\x3\x1B8\x3\x1B8\x3\x1B8\x5\x1B8\x2994\n\x1B8\x5\x1B8\x2996"+
		"\n\x1B8\x3\x1B8\a\x1B8\x2999\n\x1B8\f\x1B8\xE\x1B8\x299C\v\x1B8\x3\x1B8"+
		"\x5\x1B8\x299F\n\x1B8\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x5\x1B9\x29A5\n"+
		"\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9"+
		"\x3\x1B9\x3\x1B9\x5\x1B9\x29B1\n\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9"+
		"\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x5\x1B9\x29BB\n\x1B9\x3\x1B9\x3\x1B9"+
		"\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x5\x1B9\x29C6"+
		"\n\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9"+
		"\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9"+
		"\x5\x1B9\x29D9\n\x1B9\x3\x1BA\x3\x1BA\x3\x1BA\x3\x1BA\x3\x1BA\x3\x1BA"+
		"\x3\x1BA\x3\x1BA\x3\x1BA\x3\x1BA\x3\x1BA\x3\x1BA\x3\x1BA\x3\x1BA\x3\x1BA"+
		"\x3\x1BA\x3\x1BA\x3\x1BA\x3\x1BA\x5\x1BA\x29EE\n\x1BA\x5\x1BA\x29F0\n"+
		"\x1BA\x5\x1BA\x29F2\n\x1BA\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3"+
		"\x1BB\x5\x1BB\x29FA\n\x1BB\x3\x1BC\x3\x1BC\x5\x1BC\x29FE\n\x1BC\x3\x1BC"+
		"\x3\x1BC\x3\x1BC\x3\x1BC\x5\x1BC\x2A04\n\x1BC\x3\x1BC\x5\x1BC\x2A07\n"+
		"\x1BC\x3\x1BC\x3\x1BC\x3\x1BC\x5\x1BC\x2A0C\n\x1BC\x3\x1BC\x3\x1BC\x5"+
		"\x1BC\x2A10\n\x1BC\x3\x1BD\x3\x1BD\x3\x1BD\x5\x1BD\x2A15\n\x1BD\x3\x1BD"+
		"\x5\x1BD\x2A18\n\x1BD\x3\x1BD\x5\x1BD\x2A1B\n\x1BD\x3\x1BD\x3\x1BD\x3"+
		"\x1BD\x5\x1BD\x2A20\n\x1BD\x5\x1BD\x2A22\n\x1BD\x3\x1BE\x3\x1BE\x3\x1BE"+
		"\x3\x1BE\x3\x1BE\x3\x1BE\x3\x1BE\x3\x1BE\x5\x1BE\x2A2C\n\x1BE\x3\x1BF"+
		"\x3\x1BF\x5\x1BF\x2A30\n\x1BF\x3\x1BF\x3\x1BF\x3\x1BF\x5\x1BF\x2A35\n"+
		"\x1BF\x3\x1BF\x5\x1BF\x2A38\n\x1BF\x3\x1BF\x3\x1BF\x3\x1BF\x3\x1BF\x3"+
		"\x1BF\x3\x1BF\x3\x1BF\x3\x1BF\x3\x1BF\x3\x1BF\x3\x1BF\x3\x1BF\x3\x1BF"+
		"\x3\x1BF\x3\x1BF\x3\x1BF\x3\x1BF\a\x1BF\x2A4B\n\x1BF\f\x1BF\xE\x1BF\x2A4E"+
		"\v\x1BF\x3\x1BF\x3\x1BF\x3\x1BF\x3\x1BF\x3\x1BF\x3\x1BF\x3\x1BF\x3\x1BF"+
		"\x5\x1BF\x2A58\n\x1BF\x3\x1BF\x5\x1BF\x2A5B\n\x1BF\x3\x1C0\x3\x1C0\x3"+
		"\x1C0\x3\x1C0\x3\x1C1\x3\x1C1\x3\x1C1\x3\x1C1\x5\x1C1\x2A65\n\x1C1\x3"+
		"\x1C1\x5\x1C1\x2A68\n\x1C1\x3\x1C1\x5\x1C1\x2A6B\n\x1C1\x3\x1C2\x3\x1C2"+
		"\x3\x1C2\x3\x1C2\x3\x1C2\x3\x1C2\x3\x1C2\a\x1C2\x2A74\n\x1C2\f\x1C2\xE"+
		"\x1C2\x2A77\v\x1C2\x3\x1C2\x3\x1C2\x3\x1C2\x5\x1C2\x2A7C\n\x1C2\x3\x1C3"+
		"\x3\x1C3\x3\x1C3\x3\x1C3\x5\x1C3\x2A82\n\x1C3\x3\x1C3\x3\x1C3\x3\x1C3"+
		"\x3\x1C3\x3\x1C4\x3\x1C4\x3\x1C4\x3\x1C4\x3\x1C4\x3\x1C4\x3\x1C4\x3\x1C4"+
		"\x3\x1C4\x5\x1C4\x2A91\n\x1C4\x3\x1C5\x3\x1C5\x3\x1C5\x3\x1C5\x3\x1C5"+
		"\x3\x1C5\x3\x1C5\x3\x1C5\x3\x1C5\x5\x1C5\x2A9C\n\x1C5\x3\x1C6\x3\x1C6"+
		"\x3\x1C6\x3\x1C6\x3\x1C6\a\x1C6\x2AA3\n\x1C6\f\x1C6\xE\x1C6\x2AA6\v\x1C6"+
		"\x3\x1C6\x3\x1C6\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7"+
		"\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7"+
		"\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7"+
		"\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x5\x1C7\x2AC9\n\x1C7"+
		"\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x5\x1C7\x2ACF\n\x1C7\x3\x1C7\x3\x1C7"+
		"\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7"+
		"\x3\x1C7\x5\x1C7\x2ADD\n\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x5\x1C7\x2AE2\n"+
		"\x1C7\a\x1C7\x2AE4\n\x1C7\f\x1C7\xE\x1C7\x2AE7\v\x1C7\x3\x1C7\x3\x1C7"+
		"\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x5\x1C7\x2AF2"+
		"\n\x1C7\x3\x1C7\x5\x1C7\x2AF5\n\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3"+
		"\x1C7\x3\x1C7\x3\x1C7\x5\x1C7\x2AFE\n\x1C7\x5\x1C7\x2B00\n\x1C7\x3\x1C8"+
		"\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x5\x1C8\x2B0A"+
		"\n\x1C8\x5\x1C8\x2B0C\n\x1C8\x5\x1C8\x2B0E\n\x1C8\x3\x1C8\x5\x1C8\x2B11"+
		"\n\x1C8\x3\x1C8\x5\x1C8\x2B14\n\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3"+
		"\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x5\x1C8\x2B1F\n\x1C8\x5\x1C8\x2B21"+
		"\n\x1C8\x5\x1C8\x2B23\n\x1C8\x3\x1C8\x5\x1C8\x2B26\n\x1C8\x3\x1C9\a\x1C9"+
		"\x2B29\n\x1C9\f\x1C9\xE\x1C9\x2B2C\v\x1C9\x3\x1C9\x3\x1C9\x3\x1C9\x3\x1CA"+
		"\x3\x1CA\x3\x1CA\x3\x1CA\x3\x1CA\x5\x1CA\x2B36\n\x1CA\x3\x1CB\x3\x1CB"+
		"\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB\x5\x1CB\x2B3F\n\x1CB\x3\x1CB"+
		"\x5\x1CB\x2B42\n\x1CB\x3\x1CB\x5\x1CB\x2B45\n\x1CB\x3\x1CB\x3\x1CB\x3"+
		"\x1CB\x3\x1CB\x3\x1CB\a\x1CB\x2B4C\n\x1CB\f\x1CB\xE\x1CB\x2B4F\v\x1CB"+
		"\x5\x1CB\x2B51\n\x1CB\x3\x1CB\x5\x1CB\x2B54\n\x1CB\x3\x1CC\x3\x1CC\x3"+
		"\x1CC\x3\x1CC\x3\x1CC\x5\x1CC\x2B5B\n\x1CC\x3\x1CC\x5\x1CC\x2B5E\n\x1CC"+
		"\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x5\x1CC\x2B65\n\x1CC\x3\x1CC"+
		"\x3\x1CC\x3\x1CC\x3\x1CC\x5\x1CC\x2B6B\n\x1CC\x3\x1CC\x3\x1CC\x3\x1CC"+
		"\x3\x1CC\x5\x1CC\x2B71\n\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC"+
		"\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x5\x1CC"+
		"\x2B80\n\x1CC\x3\x1CC\x5\x1CC\x2B83\n\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3"+
		"\x1CC\x3\x1CC\x5\x1CC\x2B8A\n\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\a\x1CC"+
		"\x2B90\n\x1CC\f\x1CC\xE\x1CC\x2B93\v\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC"+
		"\x5\x1CC\x2B99\n\x1CC\x3\x1CD\x3\x1CD\x3\x1CE\x3\x1CE\x5\x1CE\x2B9F\n"+
		"\x1CE\x3\x1CF\x3\x1CF\x3\x1CF\x3\x1CF\x3\x1CF\x3\x1CF\x3\x1CF\x3\x1CF"+
		"\x3\x1CF\x5\x1CF\x2BAA\n\x1CF\x3\x1CF\x3\x1CF\x3\x1CF\x3\x1CF\x3\x1CF"+
		"\x3\x1CF\x3\x1CF\x3\x1CF\x3\x1CF\x3\x1CF\x3\x1CF\x3\x1CF\x5\x1CF\x2BB8"+
		"\n\x1CF\x3\x1CF\x3\x1CF\x3\x1CF\x3\x1CF\x3\x1CF\x3\x1CF\x3\x1CF\x3\x1CF"+
		"\a\x1CF\x2BC2\n\x1CF\f\x1CF\xE\x1CF\x2BC5\v\x1CF\x3\x1D0\x3\x1D0\x3\x1D1"+
		"\x3\x1D1\x3\x1D1\x3\x1D1\x3\x1D1\x3\x1D2\x3\x1D2\x3\x1D2\x3\x1D2\x5\x1D2"+
		"\x2BD2\n\x1D2\x3\x1D3\x3\x1D3\x3\x1D3\x6\x1D3\x2BD7\n\x1D3\r\x1D3\xE\x1D3"+
		"\x2BD8\x3\x1D3\x3\x1D3\x5\x1D3\x2BDD\n\x1D3\x3\x1D3\x3\x1D3\x3\x1D3\x3"+
		"\x1D3\x6\x1D3\x2BE3\n\x1D3\r\x1D3\xE\x1D3\x2BE4\x3\x1D3\x3\x1D3\x5\x1D3"+
		"\x2BE9\n\x1D3\x3\x1D3\x3\x1D3\x5\x1D3\x2BED\n\x1D3\x3\x1D4\x3\x1D4\x3"+
		"\x1D4\x3\x1D4\x5\x1D4\x2BF3\n\x1D4\x3\x1D5\x3\x1D5\x3\x1D5\x3\x1D5\x3"+
		"\x1D5\x3\x1D5\x3\x1D5\x3\x1D5\x5\x1D5\x2BFD\n\x1D5\x3\x1D6\x3\x1D6\x3"+
		"\x1D7\x3\x1D7\x3\x1D7\x3\x1D7\a\x1D7\x2C05\n\x1D7\f\x1D7\xE\x1D7\x2C08"+
		"\v\x1D7\x3\x1D8\x3\x1D8\x3\x1D8\x3\x1D8\x3\x1D8\x5\x1D8\x2C0F\n\x1D8\x3"+
		"\x1D8\x3\x1D8\x3\x1D8\x3\x1D8\x3\x1D8\x3\x1D9\x3\x1D9\x3\x1D9\x3\x1D9"+
		"\x3\x1D9\x5\x1D9\x2C1B\n\x1D9\x3\x1D9\x3\x1D9\x3\x1D9\x3\x1D9\x5\x1D9"+
		"\x2C21\n\x1D9\x3\x1D9\x3\x1D9\x5\x1D9\x2C25\n\x1D9\x3\x1D9\x3\x1D9\x3"+
		"\x1D9\x3\x1D9\x3\x1D9\x3\x1D9\x3\x1D9\x3\x1D9\x5\x1D9\x2C2F\n\x1D9\x3"+
		"\x1DA\x3\x1DA\x5\x1DA\x2C33\n\x1DA\x3\x1DA\x3\x1DA\x5\x1DA\x2C37\n\x1DA"+
		"\x3\x1DA\x3\x1DA\x3\x1DA\x3\x1DA\x3\x1DA\x3\x1DA\x3\x1DA\x3\x1DA\x5\x1DA"+
		"\x2C41\n\x1DA\x3\x1DB\x3\x1DB\a\x1DB\x2C45\n\x1DB\f\x1DB\xE\x1DB\x2C48"+
		"\v\x1DB\x3\x1DB\x3\x1DB\x3\x1DB\x3\x1DB\x3\x1DB\x5\x1DB\x2C4F\n\x1DB\x3"+
		"\x1DB\x3\x1DB\x3\x1DB\x3\x1DB\x3\x1DB\x3\x1DB\a\x1DB\x2C57\n\x1DB\f\x1DB"+
		"\xE\x1DB\x2C5A\v\x1DB\x3\x1DC\x3\x1DC\x3\x1DC\x3\x1DC\x3\x1DC\x3\x1DC"+
		"\x3\x1DC\x3\x1DC\x3\x1DC\x3\x1DC\x3\x1DC\x3\x1DC\x3\x1DC\x3\x1DC\x3\x1DC"+
		"\x3\x1DC\x3\x1DC\x3\x1DC\x3\x1DC\x3\x1DC\x3\x1DC\x3\x1DC\x3\x1DC\a\x1DC"+
		"\x2C73\n\x1DC\f\x1DC\xE\x1DC\x2C76\v\x1DC\x3\x1DC\x3\x1DC\x3\x1DC\x3\x1DC"+
		"\x3\x1DC\x3\x1DC\x3\x1DC\a\x1DC\x2C7F\n\x1DC\f\x1DC\xE\x1DC\x2C82\v\x1DC"+
		"\x3\x1DC\x3\x1DC\x3\x1DC\x3\x1DC\x5\x1DC\x2C88\n\x1DC\x3\x1DC\x3\x1DC"+
		"\x3\x1DC\x3\x1DC\a\x1DC\x2C8E\n\x1DC\f\x1DC\xE\x1DC\x2C91\v\x1DC\x3\x1DC"+
		"\x3\x1DC\x3\x1DC\x3\x1DC\x5\x1DC\x2C97\n\x1DC\x3\x1DC\x3\x1DC\x3\x1DC"+
		"\x3\x1DC\x5\x1DC\x2C9D\n\x1DC\x3\x1DD\x3\x1DD\x5\x1DD\x2CA1\n\x1DD\x3"+
		"\x1DD\a\x1DD\x2CA4\n\x1DD\f\x1DD\xE\x1DD\x2CA7\v\x1DD\x3\x1DD\x3\x1DD"+
		"\x3\x1DD\x3\x1DD\x3\x1DD\x5\x1DD\x2CAE\n\x1DD\x3\x1DD\x5\x1DD\x2CB1\n"+
		"\x1DD\x5\x1DD\x2CB3\n\x1DD\x3\x1DE\x3\x1DE\x5\x1DE\x2CB7\n\x1DE\x3\x1DE"+
		"\x3\x1DE\x5\x1DE\x2CBB\n\x1DE\x3\x1DE\x3\x1DE\x3\x1DE\x3\x1DE\x3\x1DE"+
		"\x5\x1DE\x2CC2\n\x1DE\x3\x1DF\x3\x1DF\x5\x1DF\x2CC6\n\x1DF\x3\x1DF\x5"+
		"\x1DF\x2CC9\n\x1DF\x3\x1DF\x3\x1DF\x3\x1DF\x5\x1DF\x2CCE\n\x1DF\x3\x1DF"+
		"\x3\x1DF\x5\x1DF\x2CD2\n\x1DF\x3\x1DF\x3\x1DF\x5\x1DF\x2CD6\n\x1DF\x3"+
		"\x1DF\x3\x1DF\x3\x1DF\x5\x1DF\x2CDB\n\x1DF\x3\x1DF\x3\x1DF\x3\x1DF\a\x1DF"+
		"\x2CE0\n\x1DF\f\x1DF\xE\x1DF\x2CE3\v\x1DF\x3\x1DF\x3\x1DF\x3\x1DF\x3\x1DF"+
		"\x3\x1DF\x3\x1DF\a\x1DF\x2CEB\n\x1DF\f\x1DF\xE\x1DF\x2CEE\v\x1DF\x3\x1DF"+
		"\x3\x1DF\x5\x1DF\x2CF2\n\x1DF\x5\x1DF\x2CF4\n\x1DF\x3\x1DF\x3\x1DF\x5"+
		"\x1DF\x2CF8\n\x1DF\x3\x1E0\x3\x1E0\x3\x1E0\x5\x1E0\x2CFD\n\x1E0\x3\x1E0"+
		"\x3\x1E0\x5\x1E0\x2D01\n\x1E0\x3\x1E1\x3\x1E1\x3\x1E1\x3\x1E1\x3\x1E1"+
		"\x3\x1E1\x3\x1E1\x5\x1E1\x2D0A\n\x1E1\x3\x1E2\x3\x1E2\x3\x1E2\x3\x1E2"+
		"\x3\x1E2\x5\x1E2\x2D11\n\x1E2\x3\x1E3\x3\x1E3\x3\x1E3\x3\x1E3\x3\x1E3"+
		"\a\x1E3\x2D18\n\x1E3\f\x1E3\xE\x1E3\x2D1B\v\x1E3\x3\x1E4\x3\x1E4\x3\x1E4"+
		"\x3\x1E4\x3\x1E4\x3\x1E4\x3\x1E4\x3\x1E4\x3\x1E4\x3\x1E4\x5\x1E4\x2D27"+
		"\n\x1E4\x5\x1E4\x2D29\n\x1E4\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x3"+
		"\x1E5\x3\x1E5\x3\x1E5\x5\x1E5\x2D33\n\x1E5\x3\x1E5\x5\x1E5\x2D36\n\x1E5"+
		"\x3\x1E5\a\x1E5\x2D39\n\x1E5\f\x1E5\xE\x1E5\x2D3C\v\x1E5\x3\x1E5\x3\x1E5"+
		"\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x5\x1E5\x2D44\n\x1E5\x5\x1E5\x2D46\n"+
		"\x1E5\x5\x1E5\x2D48\n\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x5\x1E5\x2D4D\n\x1E5"+
		"\x5\x1E5\x2D4F\n\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\a\x1E5\x2D55\n\x1E5"+
		"\f\x1E5\xE\x1E5\x2D58\v\x1E5\x3\x1E5\x3\x1E5\x5\x1E5\x2D5C\n\x1E5\x3\x1E5"+
		"\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x5\x1E5\x2D64\n\x1E5\x3\x1E5"+
		"\a\x1E5\x2D67\n\x1E5\f\x1E5\xE\x1E5\x2D6A\v\x1E5\x3\x1E5\x3\x1E5\x3\x1E5"+
		"\x5\x1E5\x2D6F\n\x1E5\x5\x1E5\x2D71\n\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x3"+
		"\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x5\x1E5\x2D7D\n"+
		"\x1E5\a\x1E5\x2D7F\n\x1E5\f\x1E5\xE\x1E5\x2D82\v\x1E5\x5\x1E5\x2D84\n"+
		"\x1E5\x3\x1E6\x3\x1E6\x3\x1E6\x3\x1E6\x3\x1E6\x3\x1E6\x3\x1E6\x3\x1E6"+
		"\x5\x1E6\x2D8E\n\x1E6\x5\x1E6\x2D90\n\x1E6\x3\x1E7\x3\x1E7\x3\x1E7\x5"+
		"\x1E7\x2D95\n\x1E7\x3\x1E8\x5\x1E8\x2D98\n\x1E8\x3\x1E8\x3\x1E8\x3\x1E8"+
		"\a\x1E8\x2D9D\n\x1E8\f\x1E8\xE\x1E8\x2DA0\v\x1E8\x3\x1E8\x5\x1E8\x2DA3"+
		"\n\x1E8\x3\x1E8\x3\x1E8\x5\x1E8\x2DA7\n\x1E8\x3\x1E9\x3\x1E9\x3\x1EA\x3"+
		"\x1EA\x3\x1EA\x3\x1EA\x3\x1EA\a\x1EA\x2DB0\n\x1EA\f\x1EA\xE\x1EA\x2DB3"+
		"\v\x1EA\x3\x1EA\x3\x1EA\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB"+
		"\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB"+
		"\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB"+
		"\x3\x1EB\x3\x1EB\x3\x1EB\a\x1EB\x2DD2\n\x1EB\f\x1EB\xE\x1EB\x2DD5\v\x1EB"+
		"\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB"+
		"\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x5\x1EB\x2DE6\n\x1EB"+
		"\x3\x1EC\x3\x1EC\x3\x1EC\x3\x1EC\x3\x1EC\x5\x1EC\x2DED\n\x1EC\x5\x1EC"+
		"\x2DEF\n\x1EC\x3\x1ED\x3\x1ED\x3\x1ED\a\x1ED\x2DF4\n\x1ED\f\x1ED\xE\x1ED"+
		"\x2DF7\v\x1ED\x3\x1EE\x3\x1EE\x3\x1EE\x3\x1EE\a\x1EE\x2DFD\n\x1EE\f\x1EE"+
		"\xE\x1EE\x2E00\v\x1EE\x3\x1EE\x3\x1EE\x3\x1EF\x3\x1EF\x3\x1EF\x5\x1EF"+
		"\x2E07\n\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x5\x1EF\x2E0D\n\x1EF\x3"+
		"\x1F0\x3\x1F0\x3\x1F0\x3\x1F0\x3\x1F0\x5\x1F0\x2E14\n\x1F0\x3\x1F0\x3"+
		"\x1F0\x3\x1F0\x3\x1F0\x5\x1F0\x2E1A\n\x1F0\x3\x1F0\x5\x1F0\x2E1D\n\x1F0"+
		"\x5\x1F0\x2E1F\n\x1F0\x3\x1F1\x3\x1F1\x3\x1F1\x3\x1F1\x3\x1F1\x3\x1F1"+
		"\x5\x1F1\x2E27\n\x1F1\x5\x1F1\x2E29\n\x1F1\x3\x1F2\x3\x1F2\x3\x1F2\x3"+
		"\x1F2\x3\x1F2\x5\x1F2\x2E30\n\x1F2\x3\x1F2\x3\x1F2\x5\x1F2\x2E34\n\x1F2"+
		"\x3\x1F3\x3\x1F3\x3\x1F3\x3\x1F3\a\x1F3\x2E3A\n\x1F3\f\x1F3\xE\x1F3\x2E3D"+
		"\v\x1F3\x5\x1F3\x2E3F\n\x1F3\x3\x1F4\x3\x1F4\x3\x1F4\x6\x1F4\x2E44\n\x1F4"+
		"\r\x1F4\xE\x1F4\x2E45\x3\x1F5\x3\x1F5\a\x1F5\x2E4A\n\x1F5\f\x1F5\xE\x1F5"+
		"\x2E4D\v\x1F5\x3\x1F6\x3\x1F6\x3\x1F6\x3\x1F6\x3\x1F6\x3\x1F6\x5\x1F6"+
		"\x2E55\n\x1F6\x3\x1F6\x3\x1F6\x3\x1F6\x5\x1F6\x2E5A\n\x1F6\x3\x1F6\x3"+
		"\x1F6\x5\x1F6\x2E5E\n\x1F6\x3\x1F6\x3\x1F6\x3\x1F6\x3\x1F6\x3\x1F6\x5"+
		"\x1F6\x2E65\n\x1F6\x5\x1F6\x2E67\n\x1F6\x3\x1F6\x3\x1F6\x5\x1F6\x2E6B"+
		"\n\x1F6\x3\x1F6\x3\x1F6\x3\x1F6\x5\x1F6\x2E70\n\x1F6\x5\x1F6\x2E72\n\x1F6"+
		"\x3\x1F6\x3\x1F6\x3\x1F6\x5\x1F6\x2E77\n\x1F6\x5\x1F6\x2E79\n\x1F6\x3"+
		"\x1F6\x3\x1F6\x5\x1F6\x2E7D\n\x1F6\x3\x1F6\x3\x1F6\x3\x1F6\x3\x1F6\x3"+
		"\x1F6\x5\x1F6\x2E84\n\x1F6\x5\x1F6\x2E86\n\x1F6\x3\x1F6\x3\x1F6\x3\x1F6"+
		"\x3\x1F6\x3\x1F6\x5\x1F6\x2E8D\n\x1F6\x3\x1F6\x3\x1F6\x3\x1F6\x3\x1F6"+
		"\x5\x1F6\x2E93\n\x1F6\x3\x1F7\x3\x1F7\x3\x1F7\x3\x1F7\x3\x1F7\x3\x1F7"+
		"\x3\x1F7\x5\x1F7\x2E9C\n\x1F7\x3\x1F7\x3\x1F7\x3\x1F7\x3\x1F7\x3\x1F7"+
		"\x3\x1F7\x5\x1F7\x2EA4\n\x1F7\x3\x1F7\x5\x1F7\x2EA7\n\x1F7\x3\x1F8\x3"+
		"\x1F8\x3\x1F8\x3\x1F8\x3\x1F8\x5\x1F8\x2EAE\n\x1F8\x3\x1F8\x3\x1F8\x3"+
		"\x1F8\x3\x1F8\x3\x1F8\x3\x1F8\x5\x1F8\x2EB6\n\x1F8\x3\x1F8\x5\x1F8\x2EB9"+
		"\n\x1F8\x3\x1F9\x3\x1F9\x3\x1F9\a\x1F9\x2EBE\n\x1F9\f\x1F9\xE\x1F9\x2EC1"+
		"\v\x1F9\x3\x1FA\x3\x1FA\x3\x1FA\x5\x1FA\x2EC6\n\x1FA\x3\x1FB\x3\x1FB\x3"+
		"\x1FB\a\x1FB\x2ECB\n\x1FB\f\x1FB\xE\x1FB\x2ECE\v\x1FB\x3\x1FC\x3\x1FC"+
		"\x3\x1FC\x5\x1FC\x2ED3\n\x1FC\x3\x1FD\x3\x1FD\x5\x1FD\x2ED7\n\x1FD\x3"+
		"\x1FE\x3\x1FE\x3\x1FE\x3\x1FE\x3\x1FE\x3\x1FE\x3\x1FE\x3\x1FE\x3\x1FF"+
		"\x3\x1FF\x3\x1FF\x3\x1FF\x3\x1FF\x3\x1FF\x3\x1FF\x3\x1FF\x3\x1FF\x3\x1FF"+
		"\x3\x200\x3\x200\x3\x200\x3\x200\x3\x200\x5\x200\x2EF0\n\x200\x3\x201"+
		"\x5\x201\x2EF3\n\x201\x3\x201\x3\x201\x5\x201\x2EF7\n\x201\x5\x201\x2EF9"+
		"\n\x201\x3\x201\x5\x201\x2EFC\n\x201\x3\x201\x3\x201\x3\x201\x3\x201\x3"+
		"\x201\x3\x202\x3\x202\x3\x202\x3\x202\x3\x203\x3\x203\x3\x203\x3\x203"+
		"\x3\x204\x3\x204\x3\x204\x3\x204\x3\x205\x3\x205\x3\x205\x3\x205\x3\x206"+
		"\x3\x206\x3\x206\x3\x206\x3\x206\x3\x206\x3\x206\x3\x206\x3\x207\x3\x207"+
		"\x3\x207\x3\x207\x3\x207\x3\x207\x3\x207\x3\x207\x3\x207\x3\x207\x3\x208"+
		"\x3\x208\x3\x208\a\x208\x2F28\n\x208\f\x208\xE\x208\x2F2B\v\x208\x3\x209"+
		"\x3\x209\x3\x209\x3\x209\x3\x209\x3\x209\x3\x209\x3\x209\x3\x209\x3\x209"+
		"\x3\x209\x3\x209\x3\x209\x3\x209\x3\x209\x3\x209\a\x209\x2F3D\n\x209\f"+
		"\x209\xE\x209\x2F40\v\x209\x3\x209\x5\x209\x2F43\n\x209\x3\x209\x3\x209"+
		"\x5\x209\x2F47\n\x209\x3\x20A\x3\x20A\x3\x20A\x3\x20A\x3\x20B\x3\x20B"+
		"\x3\x20B\x3\x20B\x3\x20B\x3\x20B\a\x20B\x2F53\n\x20B\f\x20B\xE\x20B\x2F56"+
		"\v\x20B\x3\x20B\x3\x20B\x3\x20B\x3\x20B\x3\x20B\x3\x20B\x3\x20B\x5\x20B"+
		"\x2F5F\n\x20B\x3\x20C\x3\x20C\x3\x20C\x3\x20C\x3\x20C\x3\x20C\x3\x20C"+
		"\x5\x20C\x2F68\n\x20C\x3\x20C\x3\x20C\x3\x20C\x3\x20C\x3\x20C\x5\x20C"+
		"\x2F6F\n\x20C\x3\x20D\x3\x20D\x3\x20D\x5\x20D\x2F74\n\x20D\x3\x20D\x3"+
		"\x20D\x3\x20D\x3\x20D\x3\x20D\x3\x20D\x3\x20D\x3\x20E\x3\x20E\x3\x20E"+
		"\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E\a\x20E\x2F86\n\x20E\f"+
		"\x20E\xE\x20E\x2F89\v\x20E\x3\x20E\x3\x20E\x3\x20E\x5\x20E\x2F8E\n\x20E"+
		"\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x5\x20E\x2F95\n\x20E\x3\x20E"+
		"\x3\x20E\x5\x20E\x2F99\n\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E"+
		"\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E\a\x20E\x2FA6\n\x20E\f"+
		"\x20E\xE\x20E\x2FA9\v\x20E\x3\x20E\x3\x20E\x3\x20E\x5\x20E\x2FAE\n\x20E"+
		"\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E"+
		"\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x5\x20E"+
		"\x2FC1\n\x20E\x3\x20F\x3\x20F\x3\x20F\x3\x20F\x3\x20F\x3\x20F\x3\x20F"+
		"\a\x20F\x2FCA\n\x20F\f\x20F\xE\x20F\x2FCD\v\x20F\x3\x20F\x3\x20F\x3\x20F"+
		"\x3\x20F\x3\x20F\x3\x20F\x3\x20F\x3\x20F\x3\x20F\x3\x20F\x5\x20F\x2FD9"+
		"\n\x20F\x3\x20F\x3\x20F\x3\x20F\x3\x20F\x3\x20F\x3\x20F\x3\x20F\x3\x20F"+
		"\x3\x20F\x3\x20F\x3\x20F\x3\x20F\x3\x20F\a\x20F\x2FE8\n\x20F\f\x20F\xE"+
		"\x20F\x2FEB\v\x20F\x3\x20F\x3\x20F\x3\x20F\x5\x20F\x2FF0\n\x20F\x3\x20F"+
		"\x3\x20F\x3\x20F\x3\x20F\x3\x20F\x5\x20F\x2FF7\n\x20F\x3\x20F\x3\x20F"+
		"\x5\x20F\x2FFB\n\x20F\x3\x210\x3\x210\x3\x210\x3\x210\x3\x211\x3\x211"+
		"\x3\x211\x3\x211\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x5\x212\x3044\n\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x5\x212\x304A\n\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x5\x212\x30AD\n\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x5\x212\x30B9\n\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x5\x212\x30C2\n\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x5\x212\x30CB"+
		"\n\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x5\x212\x30EA\n\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x5\x212\x30F0\n\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x5\x212\x3124\n\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\a\x212\x312F\n\x212\f\x212\xE\x212\x3132\v\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\a\x212\x313F\n\x212\f\x212\xE\x212\x3142\v\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x5\x212\x3154\n\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x5\x212\x317F\n\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x5\x212\x31B5\n\x212"+
		"\x5\x212\x31B7\n\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x5\x212"+
		"\x31C7\n\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x5\x212\x31F2"+
		"\n\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\a\x212\x3207\n\x212\f\x212\xE\x212\x320A\v\x212\x5\x212"+
		"\x320C\n\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\a\x212\x3215\n\x212\f\x212\xE\x212\x3218\v\x212\x5\x212\x321A\n\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x5\x212\x324B\n\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\a\x212\x3251\n\x212\f\x212\xE\x212\x3254\v\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x5\x212\x325E\n\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x5\x212\x329B\n\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x5\x212\x32CD\n\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x5\x212\x32EB\n\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x5\x212\x336D\n\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x5\x212\x33BC\n\x212\x3\x212\x3\x212\x5\x212\x33C0\n\x212\x3\x212\x3"+
		"\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x5\x212\x33D5\n\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x5\x212\x33E8\n\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\a\x212\x33F1\n\x212\f\x212\xE\x212\x33F4\v\x212"+
		"\x5\x212\x33F6\n\x212\x3\x212\x5\x212\x33F9\n\x212\x3\x212\x3\x212\x3"+
		"\x212\x3\x212\x5\x212\x33FF\n\x212\x3\x212\x5\x212\x3402\n\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x5\x212\x3411\n\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x5\x212\x3463\n\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x5\x212\x347E\n\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x5\x212"+
		"\x3488\n\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x5\x212\x34BB\n\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x5\x212\x34C3\n\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x5\x212"+
		"\x34D6\n\x212\x5\x212\x34D8\n\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3"+
		"\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x5\x212"+
		"\x34E6\n\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x5\x212\x34EF\n\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x5\x212\x3502\n\x212\x5\x212\x3504\n\x212\x3\x212\x3"+
		"\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x5\x212\x3513\n\x212\x3\x212\x3\x212\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x5\x212"+
		"\x3520\n\x212\x3\x212\x3\x212\x3\x212\x3\x212\x5\x212\x3526\n\x212\x3"+
		"\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x5\x212\x352E\n\x212\x5"+
		"\x212\x3530\n\x212\x3\x212\x3\x212\x3\x212\x3\x212\x5\x212\x3536\n\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x5\x212\x353E\n\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x5\x212\x3544\n\x212\x3\x212\x5\x212"+
		"\x3547\n\x212\x3\x213\x3\x213\x3\x213\x3\x213\x5\x213\x354D\n\x213\x3"+
		"\x214\x3\x214\x3\x215\x3\x215\x3\x215\x3\x215\x3\x215\x3\x215\x3\x215"+
		"\x5\x215\x3558\n\x215\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216"+
		"\x3\x216\x5\x216\x3561\n\x216\x3\x217\x3\x217\x3\x217\x3\x217\x3\x217"+
		"\x3\x217\x3\x217\x5\x217\x356A\n\x217\x3\x218\x3\x218\x3\x218\x3\x218"+
		"\x3\x218\x3\x218\x3\x218\x3\x218\x3\x218\x3\x218\x5\x218\x3576\n\x218"+
		"\x3\x218\x3\x218\x3\x218\x3\x219\x3\x219\x3\x219\x3\x219\x3\x219\x3\x219"+
		"\x3\x219\x3\x21A\x3\x21A\x3\x21A\x3\x21A\x3\x21A\x3\x21A\x5\x21A\x3588"+
		"\n\x21A\x3\x21A\x3\x21A\x3\x21A\x3\x21B\x3\x21B\x3\x21B\x3\x21B\x3\x21B"+
		"\x3\x21C\x3\x21C\x3\x21C\x3\x21C\x3\x21C\x3\x21C\x5\x21C\x3598\n\x21C"+
		"\x3\x21C\x3\x21C\x3\x21C\x3\x21D\x3\x21D\x3\x21D\x3\x21D\x3\x21D\x3\x21E"+
		"\x3\x21E\x3\x21E\x3\x21E\x3\x21E\x3\x21E\x5\x21E\x35A8\n\x21E\x3\x21E"+
		"\x3\x21E\x3\x21E\x3\x21F\x3\x21F\x3\x21F\x3\x21F\x3\x21F\x3\x220\x3\x220"+
		"\x3\x220\x3\x220\x3\x220\x3\x220\x3\x220\x3\x220\x3\x220\x3\x220\x3\x220"+
		"\x3\x220\x3\x220\x3\x220\x3\x220\x3\x220\x3\x220\x3\x220\x3\x220\x3\x220"+
		"\x3\x220\x3\x220\x3\x220\x3\x220\x3\x220\x3\x220\x3\x220\x3\x220\x3\x220"+
		"\x3\x220\x5\x220\x35D0\n\x220\x3\x221\x3\x221\x3\x221\x3\x221\x3\x221"+
		"\x3\x221\x3\x221\x3\x221\x3\x221\x3\x221\x5\x221\x35DC\n\x221\x3\x222"+
		"\x3\x222\x3\x222\x3\x222\x3\x222\x3\x222\x5\x222\x35E4\n\x222\x3\x222"+
		"\x3\x222\x3\x222\x3\x222\x3\x222\x3\x222\x3\x223\x3\x223\x3\x223\x3\x223"+
		"\x3\x223\x3\x224\x3\x224\x3\x224\x3\x224\x3\x224\x3\x225\x5\x225\x35F7"+
		"\n\x225\x3\x225\x3\x225\x3\x226\x5\x226\x35FC\n\x226\x3\x226\x3\x226\x3"+
		"\x227\x3\x227\x3\x228\x3\x228\x3\x228\x3\x228\x5\x228\x3606\n\x228\x3"+
		"\x228\a\x228\x3609\n\x228\f\x228\xE\x228\x360C\v\x228\x3\x228\x3\x228"+
		"\x3\x229\x3\x229\x3\x229\x3\x229\x3\x22A\x6\x22A\x3615\n\x22A\r\x22A\xE"+
		"\x22A\x3616\x3\x22B\x3\x22B\x3\x22C\x3\x22C\x3\x22C\x3\x22C\x3\x22C\x3"+
		"\x22C\a\x22C\x3621\n\x22C\f\x22C\xE\x22C\x3624\v\x22C\x3\x22C\x3\x22C"+
		"\x3\x22C\x3\x22C\x3\x22C\x3\x22C\x3\x22C\x3\x22C\x3\x22C\x5\x22C\x362F"+
		"\n\x22C\x3\x22C\x3\x22C\x3\x22C\x3\x22C\x3\x22C\x3\x22C\x3\x22C\x3\x22C"+
		"\x5\x22C\x3639\n\x22C\x3\x22C\x3\x22C\x3\x22C\x3\x22C\x3\x22C\x3\x22C"+
		"\x3\x22C\x3\x22C\x3\x22C\x3\x22C\x3\x22C\x3\x22C\x3\x22C\x3\x22C\x3\x22C"+
		"\x3\x22C\x3\x22C\x3\x22C\x3\x22C\x3\x22C\x3\x22C\x3\x22C\x3\x22C\x3\x22C"+
		"\x5\x22C\x3653\n\x22C\x3\x22D\x3\x22D\x5\x22D\x3657\n\x22D\x3\x22E\x3"+
		"\x22E\x3\x22E\x3\x22E\a\x22E\x365D\n\x22E\f\x22E\xE\x22E\x3660\v\x22E"+
		"\x3\x22E\x3\x22E\x3\x22F\x3\x22F\x5\x22F\x3666\n\x22F\x3\x230\x3\x230"+
		"\x3\x230\x3\x230\x3\x230\x3\x230\x3\x230\x3\x230\x3\x230\a\x230\x3671"+
		"\n\x230\f\x230\xE\x230\x3674\v\x230\x3\x231\x3\x231\x3\x231\a\x231\x3679"+
		"\n\x231\f\x231\xE\x231\x367C\v\x231\x3\x232\x3\x232\x3\x232\x3\x232\x3"+
		"\x232\x3\x232\x3\x232\x3\x232\x3\x232\x3\x232\x5\x232\x3688\n\x232\x3"+
		"\x233\x3\x233\x3\x233\x3\x233\x3\x233\x5\x233\x368F\n\x233\x3\x233\x3"+
		"\x233\x3\x233\x3\x233\x5\x233\x3695\n\x233\x3\x233\x3\x233\x5\x233\x3699"+
		"\n\x233\x3\x233\x3\x233\x3\x233\x3\x233\x3\x233\x3\x233\x3\x233\x3\x233"+
		"\x3\x233\x3\x233\x3\x233\x3\x233\x3\x233\x3\x233\x3\x233\x5\x233\x36AA"+
		"\n\x233\x3\x234\x3\x234\x3\x234\x3\x234\x3\x234\x3\x234\x3\x234\x3\x234"+
		"\x3\x234\x3\x234\x3\x234\x3\x234\x3\x234\x5\x234\x36B9\n\x234\x5\x234"+
		"\x36BB\n\x234\x3\x234\x3\x234\x3\x234\x3\x234\x3\x234\x3\x234\x3\x234"+
		"\x3\x234\x3\x234\x3\x234\x3\x234\x5\x234\x36C8\n\x234\x3\x234\x3\x234"+
		"\x3\x234\x3\x234\x3\x234\x3\x234\x3\x234\x3\x234\x3\x234\x3\x234\x3\x234"+
		"\x3\x234\x3\x234\x3\x234\x3\x234\x3\x234\x3\x234\x5\x234\x36DB\n\x234"+
		"\x3\x234\x3\x234\x5\x234\x36DF\n\x234\x3\x235\x5\x235\x36E2\n\x235\x3"+
		"\x235\x3\x235\x3\x236\x3\x236\x3\x236\x3\x236\x3\x236\x5\x236\x36EB\n"+
		"\x236\x3\x236\x5\x236\x36EE\n\x236\x3\x236\x5\x236\x36F1\n\x236\x3\x236"+
		"\x3\x236\x3\x237\x3\x237\x3\x237\x3\x238\x3\x238\x3\x238\x3\x238\x3\x238"+
		"\x3\x238\x5\x238\x36FE\n\x238\x3\x239\x3\x239\x5\x239\x3702\n\x239\x3"+
		"\x23A\x3\x23A\x3\x23A\x3\x23A\x3\x23A\x3\x23A\x5\x23A\x370A\n\x23A\x3"+
		"\x23B\x3\x23B\x3\x23B\x3\x23B\x5\x23B\x3710\n\x23B\x3\x23C\x3\x23C\x3"+
		"\x23C\x3\x23C\a\x23C\x3716\n\x23C\f\x23C\xE\x23C\x3719\v\x23C\x3\x23C"+
		"\x3\x23C\x3\x23C\x3\x23C\x5\x23C\x371F\n\x23C\x3\x23C\x3\x23C\x3\x23C"+
		"\x3\x23C\x5\x23C\x3725\n\x23C\x3\x23C\x3\x23C\x3\x23C\x3\x23C\x3\x23C"+
		"\x3\x23C\x3\x23C\x3\x23C\x3\x23C\x3\x23C\x3\x23C\x3\x23C\x3\x23C\x3\x23C"+
		"\x3\x23C\x3\x23C\x3\x23C\x5\x23C\x3738\n\x23C\x3\x23C\x3\x23C\x3\x23C"+
		"\x5\x23C\x373D\n\x23C\x3\x23D\x3\x23D\x3\x23D\x3\x23D\x3\x23D\x3\x23D"+
		"\x3\x23D\x5\x23D\x3746\n\x23D\x3\x23D\x3\x23D\x3\x23E\x3\x23E\x5\x23E"+
		"\x374C\n\x23E\x3\x23F\x3\x23F\x3\x23F\x3\x23F\x5\x23F\x3752\n\x23F\x3"+
		"\x23F\x5\x23F\x3755\n\x23F\x3\x23F\x3\x23F\x5\x23F\x3759\n\x23F\x3\x23F"+
		"\x3\x23F\x3\x23F\a\x23F\x375E\n\x23F\f\x23F\xE\x23F\x3761\v\x23F\x3\x240"+
		"\x3\x240\x3\x240\x3\x240\x3\x240\x5\x240\x3768\n\x240\x3\x240\x5\x240"+
		"\x376B\n\x240\x3\x240\x3\x240\x3\x240\x3\x240\x5\x240\x3771\n\x240\x3"+
		"\x240\x3\x240\x3\x240\x3\x240\x5\x240\x3777\n\x240\x5\x240\x3779\n\x240"+
		"\x3\x240\x3\x240\x3\x240\x3\x240\x5\x240\x377F\n\x240\x3\x240\x5\x240"+
		"\x3782\n\x240\x5\x240\x3784\n\x240\x3\x240\x3\x240\x3\x240\x3\x240\x5"+
		"\x240\x378A\n\x240\x5\x240\x378C\n\x240\x3\x240\x3\x240\x3\x241\x3\x241"+
		"\x3\x241\x3\x241\x3\x241\x3\x241\x3\x241\x3\x241\x3\x241\x3\x241\x5\x241"+
		"\x379A\n\x241\x3\x241\x3\x241\x3\x241\x3\x241\x3\x241\x5\x241\x37A1\n"+
		"\x241\x3\x241\x3\x241\x3\x242\x3\x242\x3\x242\x3\x242\x3\x242\x5\x242"+
		"\x37AA\n\x242\x3\x243\x3\x243\x3\x243\x3\x243\x3\x243\x5\x243\x37B1\n"+
		"\x243\x3\x244\x3\x244\x3\x244\x3\x244\x3\x244\x3\x244\x3\x244\x3\x244"+
		"\x3\x244\x3\x244\x3\x244\x3\x244\x3\x244\x3\x244\x3\x244\x3\x244\x5\x244"+
		"\x37C3\n\x244\x3\x244\x3\x244\x3\x244\x3\x244\x3\x244\x5\x244\x37CA\n"+
		"\x244\x3\x244\x3\x244\x3\x245\x3\x245\x3\x245\x5\x245\x37D1\n\x245\x3"+
		"\x245\x3\x245\x3\x245\x3\x245\x3\x245\x5\x245\x37D8\n\x245\x3\x245\x3"+
		"\x245\x5\x245\x37DC\n\x245\x3\x246\x3\x246\x3\x246\x5\x246\x37E1\n\x246"+
		"\x3\x246\x3\x246\x3\x247\x3\x247\x3\x247\x5\x247\x37E8\n\x247\x3\x247"+
		"\x3\x247\x3\x248\x5\x248\x37ED\n\x248\x3\x248\x3\x248\x5\x248\x37F1\n"+
		"\x248\x3\x248\x3\x248\x3\x248\x5\x248\x37F6\n\x248\x3\x249\x5\x249\x37F9"+
		"\n\x249\x3\x249\x3\x249\x5\x249\x37FD\n\x249\x3\x249\x3\x249\x5\x249\x3801"+
		"\n\x249\x3\x249\x3\x249\x3\x249\x5\x249\x3806\n\x249\x3\x24A\x3\x24A\x5"+
		"\x24A\x380A\n\x24A\x3\x24B\x3\x24B\x3\x24B\x5\x24B\x380F\n\x24B\x3\x24B"+
		"\x5\x24B\x3812\n\x24B\x3\x24B\x3\x24B\x3\x24B\x5\x24B\x3817\n\x24B\x3"+
		"\x24C\x3\x24C\x5\x24C\x381B\n\x24C\x3\x24C\x3\x24C\x3\x24C\x5\x24C\x3820"+
		"\n\x24C\a\x24C\x3822\n\x24C\f\x24C\xE\x24C\x3825\v\x24C\x3\x24D\x3\x24D"+
		"\x3\x24D\a\x24D\x382A\n\x24D\f\x24D\xE\x24D\x382D\v\x24D\x3\x24E\x5\x24E"+
		"\x3830\n\x24E\x3\x24E\a\x24E\x3833\n\x24E\f\x24E\xE\x24E\x3836\v\x24E"+
		"\x3\x24E\x3\x24E\x3\x24F\x3\x24F\x3\x24F\a\x24F\x383D\n\x24F\f\x24F\xE"+
		"\x24F\x3840\v\x24F\x3\x250\x3\x250\x5\x250\x3844\n\x250\x3\x251\x3\x251"+
		"\x3\x252\x3\x252\x3\x253\x5\x253\x384B\n\x253\x3\x253\x3\x253\x3\x254"+
		"\x3\x254\x3\x254\x3\x254\x3\x254\x5\x254\x3854\n\x254\x3\x255\x3\x255"+
		"\x3\x255\x3\x255\x3\x255\x3\x255\x3\x255\x3\x255\x3\x255\x3\x255\x5\x255"+
		"\x3860\n\x255\x3\x256\x3\x256\x3\x256\x5\x256\x3865\n\x256\x3\x256\x3"+
		"\x256\x3\x256\x3\x256\x3\x256\x3\x256\x3\x256\x3\x256\x3\x256\x5\x256"+
		"\x3870\n\x256\x3\x256\x3\x256\x3\x256\x3\x256\x3\x256\x3\x256\x3\x256"+
		"\x3\x256\x5\x256\x387A\n\x256\x5\x256\x387C\n\x256\x3\x256\x3\x256\x3"+
		"\x256\x3\x256\x5\x256\x3882\n\x256\x5\x256\x3884\n\x256\x3\x256\x3\x256"+
		"\x3\x256\x5\x256\x3889\n\x256\x5\x256\x388B\n\x256\x3\x256\x5\x256\x388E"+
		"\n\x256\x3\x257\x3\x257\x5\x257\x3892\n\x257\x3\x258\x3\x258\x5\x258\x3896"+
		"\n\x258\x3\x259\x3\x259\x3\x259\x3\x259\x5\x259\x389C\n\x259\x3\x259\x3"+
		"\x259\x3\x259\x3\x259\x3\x259\x3\x259\x3\x259\x5\x259\x38A5\n\x259\x3"+
		"\x259\x5\x259\x38A8\n\x259\x5\x259\x38AA\n\x259\x3\x25A\x5\x25A\x38AD"+
		"\n\x25A\x3\x25A\x3\x25A\x3\x25A\x3\x25A\x5\x25A\x38B3\n\x25A\x3\x25A\x3"+
		"\x25A\x5\x25A\x38B7\n\x25A\x3\x25A\x5\x25A\x38BA\n\x25A\x3\x25B\x3\x25B"+
		"\x3\x25B\x3\x25B\x3\x25B\x3\x25B\x3\x25B\x5\x25B\x38C3\n\x25B\x3\x25C"+
		"\x3\x25C\x3\x25C\x3\x25C\x3\x25C\x3\x25C\x3\x25C\x5\x25C\x38CC\n\x25C"+
		"\x3\x25D\x3\x25D\x3\x25D\x3\x25D\x3\x25D\x3\x25D\x3\x25D\x3\x25D\x3\x25D"+
		"\x3\x25D\x5\x25D\x38D8\n\x25D\x3\x25D\x5\x25D\x38DB\n\x25D\x3\x25E\x3"+
		"\x25E\x3\x25E\x3\x25E\x3\x25E\x3\x25E\x3\x25E\x3\x25E\x3\x25E\x3\x25E"+
		"\x3\x25E\x3\x25E\x3\x25E\x3\x25E\x3\x25E\x3\x25E\x3\x25E\x3\x25E\x3\x25E"+
		"\x3\x25E\x3\x25E\x3\x25E\x3\x25E\x5\x25E\x38F4\n\x25E\x3\x25E\x3\x25E"+
		"\x5\x25E\x38F8\n\x25E\x3\x25E\x5\x25E\x38FB\n\x25E\x3\x25F\x3\x25F\x3"+
		"\x25F\x5\x25F\x3900\n\x25F\x3\x25F\x3\x25F\x5\x25F\x3904\n\x25F\x3\x25F"+
		"\x3\x25F\x5\x25F\x3908\n\x25F\x3\x25F\x3\x25F\x5\x25F\x390C\n\x25F\x3"+
		"\x260\x3\x260\x3\x260\x3\x260\x3\x260\x5\x260\x3913\n\x260\x3\x260\x3"+
		"\x260\x5\x260\x3917\n\x260\x3\x261\x3\x261\x3\x262\x3\x262\x3\x262\x3"+
		"\x262\x3\x262\x3\x262\x3\x262\x5\x262\x3922\n\x262\x3\x263\x3\x263\x3"+
		"\x264\x3\x264\x5\x264\x3928\n\x264\x3\x265\x3\x265\x3\x265\x3\x265\x3"+
		"\x265\x3\x265\x3\x265\x3\x265\x3\x265\x3\x265\x3\x265\x3\x265\x3\x265"+
		"\x3\x265\x3\x265\x5\x265\x3939\n\x265\x3\x266\x3\x266\x3\x267\x3\x267"+
		"\x5\x267\x393F\n\x267\x3\x267\x2\x2\x5`\x39C\x3B4\x268\x2\x2\x4\x2\x6"+
		"\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C"+
		"\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2"+
		"\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T"+
		"\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2"+
		"r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2"+
		"\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2"+
		"\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2"+
		"\xB4\x2\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2"+
		"\xC8\x2\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2"+
		"\xDC\x2\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2"+
		"\xF0\x2\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102"+
		"\x2\x104\x2\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112\x2\x114"+
		"\x2\x116\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120\x2\x122\x2\x124\x2\x126"+
		"\x2\x128\x2\x12A\x2\x12C\x2\x12E\x2\x130\x2\x132\x2\x134\x2\x136\x2\x138"+
		"\x2\x13A\x2\x13C\x2\x13E\x2\x140\x2\x142\x2\x144\x2\x146\x2\x148\x2\x14A"+
		"\x2\x14C\x2\x14E\x2\x150\x2\x152\x2\x154\x2\x156\x2\x158\x2\x15A\x2\x15C"+
		"\x2\x15E\x2\x160\x2\x162\x2\x164\x2\x166\x2\x168\x2\x16A\x2\x16C\x2\x16E"+
		"\x2\x170\x2\x172\x2\x174\x2\x176\x2\x178\x2\x17A\x2\x17C\x2\x17E\x2\x180"+
		"\x2\x182\x2\x184\x2\x186\x2\x188\x2\x18A\x2\x18C\x2\x18E\x2\x190\x2\x192"+
		"\x2\x194\x2\x196\x2\x198\x2\x19A\x2\x19C\x2\x19E\x2\x1A0\x2\x1A2\x2\x1A4"+
		"\x2\x1A6\x2\x1A8\x2\x1AA\x2\x1AC\x2\x1AE\x2\x1B0\x2\x1B2\x2\x1B4\x2\x1B6"+
		"\x2\x1B8\x2\x1BA\x2\x1BC\x2\x1BE\x2\x1C0\x2\x1C2\x2\x1C4\x2\x1C6\x2\x1C8"+
		"\x2\x1CA\x2\x1CC\x2\x1CE\x2\x1D0\x2\x1D2\x2\x1D4\x2\x1D6\x2\x1D8\x2\x1DA"+
		"\x2\x1DC\x2\x1DE\x2\x1E0\x2\x1E2\x2\x1E4\x2\x1E6\x2\x1E8\x2\x1EA\x2\x1EC"+
		"\x2\x1EE\x2\x1F0\x2\x1F2\x2\x1F4\x2\x1F6\x2\x1F8\x2\x1FA\x2\x1FC\x2\x1FE"+
		"\x2\x200\x2\x202\x2\x204\x2\x206\x2\x208\x2\x20A\x2\x20C\x2\x20E\x2\x210"+
		"\x2\x212\x2\x214\x2\x216\x2\x218\x2\x21A\x2\x21C\x2\x21E\x2\x220\x2\x222"+
		"\x2\x224\x2\x226\x2\x228\x2\x22A\x2\x22C\x2\x22E\x2\x230\x2\x232\x2\x234"+
		"\x2\x236\x2\x238\x2\x23A\x2\x23C\x2\x23E\x2\x240\x2\x242\x2\x244\x2\x246"+
		"\x2\x248\x2\x24A\x2\x24C\x2\x24E\x2\x250\x2\x252\x2\x254\x2\x256\x2\x258"+
		"\x2\x25A\x2\x25C\x2\x25E\x2\x260\x2\x262\x2\x264\x2\x266\x2\x268\x2\x26A"+
		"\x2\x26C\x2\x26E\x2\x270\x2\x272\x2\x274\x2\x276\x2\x278\x2\x27A\x2\x27C"+
		"\x2\x27E\x2\x280\x2\x282\x2\x284\x2\x286\x2\x288\x2\x28A\x2\x28C\x2\x28E"+
		"\x2\x290\x2\x292\x2\x294\x2\x296\x2\x298\x2\x29A\x2\x29C\x2\x29E\x2\x2A0"+
		"\x2\x2A2\x2\x2A4\x2\x2A6\x2\x2A8\x2\x2AA\x2\x2AC\x2\x2AE\x2\x2B0\x2\x2B2"+
		"\x2\x2B4\x2\x2B6\x2\x2B8\x2\x2BA\x2\x2BC\x2\x2BE\x2\x2C0\x2\x2C2\x2\x2C4"+
		"\x2\x2C6\x2\x2C8\x2\x2CA\x2\x2CC\x2\x2CE\x2\x2D0\x2\x2D2\x2\x2D4\x2\x2D6"+
		"\x2\x2D8\x2\x2DA\x2\x2DC\x2\x2DE\x2\x2E0\x2\x2E2\x2\x2E4\x2\x2E6\x2\x2E8"+
		"\x2\x2EA\x2\x2EC\x2\x2EE\x2\x2F0\x2\x2F2\x2\x2F4\x2\x2F6\x2\x2F8\x2\x2FA"+
		"\x2\x2FC\x2\x2FE\x2\x300\x2\x302\x2\x304\x2\x306\x2\x308\x2\x30A\x2\x30C"+
		"\x2\x30E\x2\x310\x2\x312\x2\x314\x2\x316\x2\x318\x2\x31A\x2\x31C\x2\x31E"+
		"\x2\x320\x2\x322\x2\x324\x2\x326\x2\x328\x2\x32A\x2\x32C\x2\x32E\x2\x330"+
		"\x2\x332\x2\x334\x2\x336\x2\x338\x2\x33A\x2\x33C\x2\x33E\x2\x340\x2\x342"+
		"\x2\x344\x2\x346\x2\x348\x2\x34A\x2\x34C\x2\x34E\x2\x350\x2\x352\x2\x354"+
		"\x2\x356\x2\x358\x2\x35A\x2\x35C\x2\x35E\x2\x360\x2\x362\x2\x364\x2\x366"+
		"\x2\x368\x2\x36A\x2\x36C\x2\x36E\x2\x370\x2\x372\x2\x374\x2\x376\x2\x378"+
		"\x2\x37A\x2\x37C\x2\x37E\x2\x380\x2\x382\x2\x384\x2\x386\x2\x388\x2\x38A"+
		"\x2\x38C\x2\x38E\x2\x390\x2\x392\x2\x394\x2\x396\x2\x398\x2\x39A\x2\x39C"+
		"\x2\x39E\x2\x3A0\x2\x3A2\x2\x3A4\x2\x3A6\x2\x3A8\x2\x3AA\x2\x3AC\x2\x3AE"+
		"\x2\x3B0\x2\x3B2\x2\x3B4\x2\x3B6\x2\x3B8\x2\x3BA\x2\x3BC\x2\x3BE\x2\x3C0"+
		"\x2\x3C2\x2\x3C4\x2\x3C6\x2\x3C8\x2\x3CA\x2\x3CC\x2\x3CE\x2\x3D0\x2\x3D2"+
		"\x2\x3D4\x2\x3D6\x2\x3D8\x2\x3DA\x2\x3DC\x2\x3DE\x2\x3E0\x2\x3E2\x2\x3E4"+
		"\x2\x3E6\x2\x3E8\x2\x3EA\x2\x3EC\x2\x3EE\x2\x3F0\x2\x3F2\x2\x3F4\x2\x3F6"+
		"\x2\x3F8\x2\x3FA\x2\x3FC\x2\x3FE\x2\x400\x2\x402\x2\x404\x2\x406\x2\x408"+
		"\x2\x40A\x2\x40C\x2\x40E\x2\x410\x2\x412\x2\x414\x2\x416\x2\x418\x2\x41A"+
		"\x2\x41C\x2\x41E\x2\x420\x2\x422\x2\x424\x2\x426\x2\x428\x2\x42A\x2\x42C"+
		"\x2\x42E\x2\x430\x2\x432\x2\x434\x2\x436\x2\x438\x2\x43A\x2\x43C\x2\x43E"+
		"\x2\x440\x2\x442\x2\x444\x2\x446\x2\x448\x2\x44A\x2\x44C\x2\x44E\x2\x450"+
		"\x2\x452\x2\x454\x2\x456\x2\x458\x2\x45A\x2\x45C\x2\x45E\x2\x460\x2\x462"+
		"\x2\x464\x2\x466\x2\x468\x2\x46A\x2\x46C\x2\x46E\x2\x470\x2\x472\x2\x474"+
		"\x2\x476\x2\x478\x2\x47A\x2\x47C\x2\x47E\x2\x480\x2\x482\x2\x484\x2\x486"+
		"\x2\x488\x2\x48A\x2\x48C\x2\x48E\x2\x490\x2\x492\x2\x494\x2\x496\x2\x498"+
		"\x2\x49A\x2\x49C\x2\x49E\x2\x4A0\x2\x4A2\x2\x4A4\x2\x4A6\x2\x4A8\x2\x4AA"+
		"\x2\x4AC\x2\x4AE\x2\x4B0\x2\x4B2\x2\x4B4\x2\x4B6\x2\x4B8\x2\x4BA\x2\x4BC"+
		"\x2\x4BE\x2\x4C0\x2\x4C2\x2\x4C4\x2\x4C6\x2\x4C8\x2\x4CA\x2\x4CC\x2\x2"+
		"\xB2\x4\x2\x4A0\x4A0\x4A2\x4A2\x4\x2\x4A0\x4A0\x4A4\x4A4\x4\x2\x100\x100"+
		"\x3E7\x3E8\x5\x2\x4A0\x4A0\x4A2\x4A2\x4A4\x4A4\x5\x2\x214\x214\x275\x275"+
		"\x387\x387\x5\x2\x49C\x49C\x4A0\x4A0\x4A4\x4A4\x5\x2\x151\x151\x355\x355"+
		"\x413\x413\x3\x2\x4A4\x4A5\x3\x2\x34E\x352\x4\x2\xCA\xCA\x29E\x29E\x4"+
		"\x2\x286\x286\x35A\x35A\x5\x2\xDD\xDD\x286\x286\x35A\x35A\x4\x2\x12E\x12E"+
		"\x21F\x21F\x5\x2\xDD\xDD\x286\x286\x37A\x37A\x4\x2\x187\x187\x35E\x35E"+
		"\x4\x2\xDD\xDD\x37A\x37A\x5\x2\x26B\x26B\x2D9\x2D9\x365\x366\x4\x2\x28E"+
		"\x28E\x294\x294\x4\x2@@\x3D3\x3D3\x4\x2KK\x21B\x21B\x4\x2\x18\x18\x30B"+
		"\x30B\x5\x2\x18\x18\x25F\x25F\x309\x309\x4\x2%%\xC9\xC9\x4\x2\r\r\x11E"+
		"\x11E\x4\x2\x142\x142\x38B\x38B\x4\x2\x112\x112\x129\x129\x5\x2\x113\x113"+
		"\x3AF\x3AF\x3C0\x3C0\x4\x2\x113\x113\x12A\x12A\x5\x2\x18\x18\x2BD\x2BD"+
		"\x43D\x43D\x5\x2\x113\x113\x329\x329\x3CB\x3CB\x5\x2\x1F0\x1F0\x256\x256"+
		"\x27F\x27F\x4\x2\x4A2\x4A2\x4A4\x4A4\x4\x2\x1EB\x1EB\x238\x238\x5\x2\x1C"+
		"\x1C\x1F\x1F\x278\x278\x5\x2\x26B\x26B\x2CB\x2CB\x2CD\x2CD\x4\x2\x3AE"+
		"\x3AE\x3BE\x3BE\x4\x2\'\'\x2A5\x2A5\x4\x2\r\r\x386\x386\x4\x2\x207\x207"+
		"\x438\x438\x4\x2\x2EE\x2EE\x2F7\x2F7\x4\x2\x4A2\x4A2\x4A4\x4A5\x4\x2\x252"+
		"\x252\x410\x410\x4\x2\x23F\x23F\x3A6\x3A6\x4\x2\x112\x112\x310\x310\t"+
		"\x2\x102\x102\x145\x145\x1D0\x1D0\x30E\x30E\x313\x313\x36F\x36F\x415\x415"+
		"\x5\x2\x286\x286\x35A\x35A\x3D7\x3D7\x4\x2\x105\x105\x198\x198\x6\x2\x102"+
		"\x102\x1D0\x1D0\x36F\x36F\x415\x415\x4\x2\x64\x64\x16D\x16D\x4\x2\x1D0"+
		"\x1D0\x415\x415\x4\x2\x102\x102\x415\x415\x5\x2\x188\x188\x238\x238\x3E0"+
		"\x3E0\x4\x2\x40F\x40F\x4A2\x4A2\x5\x2\xBC\xBC\x157\x157\x393\x393\x4\x2"+
		"\xF9\xF9\x4A4\x4A4\x4\x2\xF9\xF9\x4A2\x4A2\x4\x2\x20F\x20F\x4A4\x4A4\x5"+
		"\x2\x188\x188\x1EB\x1EB\x238\x238\x4\x2\x172\x172\x181\x181\x5\x2\x1A9"+
		"\x1A9\x218\x218\x23B\x23B\x4\x2\x1FF\x1FF\x33F\x33F\x5\x2\x30\x30\x1CC"+
		"\x1CC\x3DE\x3DE\x4\x2\x26B\x26B\x2BA\x2BA\x4\x2\x188\x188\x238\x238\x6"+
		"\x2\xA0\xA1\x26B\x26B\x2B1\x2B1\x346\x346\x3\x2\xA0\xA1\x5\x2\x2BF\x2BF"+
		"\x2E8\x2E8\x422\x422\x4\x2%%\x322\x322\x4\x2\x2E2\x2E2\x2E4\x2E4\x5\x2"+
		"\x102\x102\x1D0\x1D0\x415\x415\x4\x2\x15\x15\x172\x172\x5\x2\x2A9\x2A9"+
		"\x2AB\x2AB\x303\x303\x4\x2\x2C3\x2C3\x34C\x34C\x4\x2;;\x108\x108\x5\x2"+
		"\x26B\x26B\x2B1\x2B1\x346\x346\x5\x2\x12E\x12E\x35B\x35B\x42E\x42E\x5"+
		"\x2GG\x112\x112\x3D7\x3D7\x4\x2\x86\x86\x260\x260\x5\x2\x65\x65\x26B\x26B"+
		"\x370\x370\x6\x2\x303\x303\x307\x307\x309\x309\x30B\x30B\x5\x2\xED\xED"+
		"\x1AE\x1AE\x244\x244\x4\x2\x194\x194\x20F\x20F\x4\x2\x182\x182\x28E\x28E"+
		"\x5\x2\x127\x127\x28F\x28F\x295\x295\x4\x2\x309\x309\x30B\x30B\x5\x2\x251"+
		"\x251\x334\x334\x397\x397\x5\x2\x19\x19\x113\x113\x174\x174\x4\x2\x336"+
		"\x336\x3D0\x3D0\x4\x2\x174\x174\x396\x396\x5\x2oo\x182\x182\x396\x396"+
		"\x5\x2\x8D\x8D\x26B\x26B\x3ED\x3ED\x4\x2\x244\x244\x368\x368\x3\x2\x15C"+
		"\x15D\x5\x2\x115\x115\x3DD\x3DD\x419\x419\x4\x2\xAA\xAA\x277\x277\x4\x2"+
		"\x1CB\x1CB\x268\x268\x4\x2\x270\x270\x39A\x39A\x4\x2\x17B\x17B\x265\x265"+
		"\x4\x2\x8D\x8D\x276\x276\x4\x2\xBD\xBD\x3C1\x3C1\x4\x2\x26F\x26F\x33E"+
		"\x33E\x4\x2\x20D\x20D\x274\x274\x4\x2\x11\x13\x3FB\x3FB\x4\x2\x215\x215"+
		"\x41C\x41C\x4\x2\x2A9\x2A9\x2AB\x2AB\x4\x2\x15C\x15C\x4A5\x4A5\x4\x2\xF8"+
		"\xF8\x12E\x12E\x4\x2\x14C\x14C\x3B1\x3B1\a\x2\x11\x13\x107\x107\x10A\x10A"+
		"\x2FD\x2FF\x3FA\x3FB\x4\x2\x272\x272\x381\x381\x4\x2\x42\x42\x341\x341"+
		"\x4\x2\xDD\xDD\x214\x214\x3\x2\x3F2\x3F3\x6\x2\"\"\x13D\x13D\x279\x279"+
		"\x3DA\x3DA\x3\x2\x31D\x31F\x4\x2!\"\x279\x279\x4\x2\x267\x267\x31D\x31F"+
		"\x6\x2XX\x27A\x27B\x37D\x37D\x42A\x42A\x6\x2#$\x159\x159\x279\x279\x3D8"+
		"\x3D8\x6\x2ss\x2AE\x2AE\x370\x370\x4A4\x4A4\x4\x2\x99\x99\x26A\x26A\x4"+
		"\x2\xB9\xB9\x119\x119\x5\x2\x346\x346\x378\x378\x3F4\x3F4\x4\x2\x130\x130"+
		"\x3AE\x3AE\x4\x2\x10B\x10B\x2F9\x2F9\x4\x2::\xAD\xAD\x4\x2\x1CF\x1CF\x374"+
		"\x374\x4\x2\x17D\x17D\x362\x362\x6\x2\x123\x123\x15A\x15A\x1F3\x1F3\x3B3"+
		"\x3B3\x5\x2\x2A1\x2A1\x309\x309\x363\x363\x4\x2\x6\x6\x317\x317\x6\x2"+
		"\x1D7\x1D7\x2E7\x2E7\x3E7\x3E7\x444\x444\x12\x2)*,/\x38\x39\xAF\xAF\xD8"+
		"\xD8\x170\x170\x175\x175\x1BF\x1BF\x261\x261\x263\x263\x285\x285\x2B9"+
		"\x2B9\x2F5\x2F5\x319\x319\x38F\x391\x441\x441\x3\x2\x4C0\x4C2\x5\x2\x4B4"+
		"\x4B4\x4C3\x4C4\x4C6\x4C8\x3\x2\x4C3\x4C4\x5\x2\x18\x18\x30\x30\x39E\x39E"+
		"\x4\x2\x18\x18\x116\x116\x4\x2\x4A2\x4A2\x4A6\x4A7\x4\x2\x346\x346\x34C"+
		"\x34C\x4\x2\x16E\x16E\x25E\x25E\x4\x2\x5\x5\x449\x449\x4\x2GG\x2BF\x2BF"+
		"\x4\x2\x19F\x19F\x2A6\x2A6\x5\x2\xAE\xAE\x19F\x19F\x23F\x23F\x5\x2\x19F"+
		"\x19F\x217\x217\x23F\x23F\x4\x2\x103\x103\x1D1\x1D1\x5\x2\x281\x281\x4A0"+
		"\x4A0\x4A2\x4A2\x5\x2\x182\x182\x1FF\x1FF\x33F\x33F\x6\x2\x19F\x19F\x217"+
		"\x217\x23F\x23F\x318\x318\x4\x2\xCD\xCD\x2AA\x2AA\x4\x2\xB8\xB8\x180\x180"+
		"\x4\x2\x371\x371\x373\x373\x4\x2\x5\x5\x281\x281\b\x2\x46A\x46A\x46D\x46D"+
		"\x475\x476\x478\x47C\x482\x484\x486\x48B\x4\x2\x422\x422\x424\x424\x4"+
		"\x2\x2EF\x2EF\x2F1\x2F1\x4\x2\x146\x146\x148\x148\x3\x2\x24E\x24F\x6\x2"+
		"\x1AA\x1AA\x266\x266\x304\x304\x38C\x38C\x5\x2\x104\x104\x2FB\x2FB\x34D"+
		"\x34D\t\x2UU\x222\x222\x243\x243\x3BC\x3BD\x3CA\x3CA\x425\x425\x427\x427"+
		"\x4\x2\xC5\xC5\xC7\xC7\x4\x2\x16F\x16F\x1FB\x1FB\x4\x2\x1F8\x1F8\x1FC"+
		"\x1FC\x4\x2\xCF\xCF\x2C6\x2C6\x3\x2\x2C4\x2C5\x4\x2\x2FA\x2FA\x34C\x34C"+
		"\x5\x2\x182\x182\x28E\x28E\x309\x309\x4\x2\x1AF\x1AF\x349\x349\x3\x2\x315"+
		"\x316\x6\x2\x61\x61\x426\x426\x492\x493\x49F\x49F\x4\x2\x4A2\x4A2\x4A6"+
		"\x4A6\xA0\x2\x3\x6\b\x17\x19$&&(/\x31\x39<\x45GUX[]]_gijlmooqtwxz\x85"+
		"\x87\x8B\x8D\x94\x96\x96\x98\x98\x9C\x9C\x9E\xA5\xA7\xAC\xAE\xB4\xB6\xB6"+
		"\xB9\xBB\xBD\xC1\xC3\xC8\xCA\xCC\xCE\xCF\xD2\xD2\xD5\xD5\xD8\xDC\xDE\xDE"+
		"\xE0\xE4\xE6\xF4\xF7\xF8\xFA\x101\x103\x104\x106\x107\x109\x114\x118\x119"+
		"\x11F\x121\x123\x123\x125\x125\x127\x12F\x131\x132\x134\x13B\x13D\x140"+
		"\x142\x144\x146\x146\x148\x148\x14A\x14F\x151\x15A\x15D\x16B\x16D\x171"+
		"\x173\x179\x17B\x17E\x183\x186\x188\x195\x197\x197\x199\x199\x19B\x1A2"+
		"\x1A4\x1A9\x1AB\x1AE\x1B2\x1B5\x1B7\x1C0\x1C2\x1C5\x1C7\x1CC\x1CE\x1CF"+
		"\x1D1\x1D3\x1D7\x1D8\x1DA\x1E2\x1E4\x1F0\x1F2\x1F6\x1F8\x1FD\x200\x203"+
		"\x206\x20C\x20E\x231\x233\x236\x238\x23E\x240\x253\x255\x255\x257\x25F"+
		"\x261\x265\x267\x269\x26B\x270\x272\x27F\x282\x28C\x28F\x290\x292\x293"+
		"\x295\x297\x29A\x29A\x29E\x29F\x2A1\x2A3\x2A7\x2A9\x2AB\x2AB\x2AD\x2B6"+
		"\x2B8\x2C2\x2C4\x2CE\x2D1\x2D8\x2DA\x2DA\x2DC\x2E1\x2E3\x2E3\x2E5\x2EA"+
		"\x2EC\x2EF\x2F1\x2F1\x2F3\x2F7\x2F9\x2FB\x2FD\x2FF\x301\x304\x306\x30F"+
		"\x311\x312\x314\x324\x326\x331\x334\x338\x33A\x33B\x33E\x33E\x340\x341"+
		"\x343\x346\x348\x349\x34B\x353\x355\x357\x359\x359\x35B\x36B\x36D\x36E"+
		"\x370\x370\x374\x37F\x381\x384\x387\x387\x389\x389\x38B\x392\x394\x398"+
		"\x39A\x39D\x39F\x3AB\x3AD\x3B3\x3B5\x3D5\x3D8\x3D8\x3DA\x3E2\x3E5\x3EA"+
		"\x3ED\x3F1\x3F4\x3F7\x3F9\x3FB\x3FD\x3FF\x401\x40B\x40E\x411\x413\x414"+
		"\x417\x419\x41B\x41B\x41D\x422\x424\x427\x429\x42B\x42D\x430\x432\x433"+
		"\x438\x438\x43B\x43F\x441\x493\x3\x2\x4AC\x4B3\a\x2\x188\x188\x1EB\x1EB"+
		"\x238\x238\x3E0\x3E0\x4C2\x4C2\x42F2\x2\x4DE\x3\x2\x2\x2\x4\x4F9\x3\x2"+
		"\x2\x2\x6\x4FF\x3\x2\x2\x2\b\x51A\x3\x2\x2\x2\n\x521\x3\x2\x2\x2\f\x5C9"+
		"\x3\x2\x2\x2\xE\x5D0\x3\x2\x2\x2\x10\x5DE\x3\x2\x2\x2\x12\x5E0\x3\x2\x2"+
		"\x2\x14\x5EE\x3\x2\x2\x2\x16\x5F2\x3\x2\x2\x2\x18\x600\x3\x2\x2\x2\x1A"+
		"\x602\x3\x2\x2\x2\x1C\x609\x3\x2\x2\x2\x1E\x613\x3\x2\x2\x2 \x61F\x3\x2"+
		"\x2\x2\"\x621\x3\x2\x2\x2$\x623\x3\x2\x2\x2&\x625\x3\x2\x2\x2(\x644\x3"+
		"\x2\x2\x2*\x655\x3\x2\x2\x2,\x662\x3\x2\x2\x2.\x694\x3\x2\x2\x2\x30\x696"+
		"\x3\x2\x2\x2\x32\x6A9\x3\x2\x2\x2\x34\x6AB\x3\x2\x2\x2\x36\x6C8\x3\x2"+
		"\x2\x2\x38\x6D5\x3\x2\x2\x2:\x6EA\x3\x2\x2\x2<\x6F7\x3\x2\x2\x2>\x6FC"+
		"\x3\x2\x2\x2@\x700\x3\x2\x2\x2\x42\x704\x3\x2\x2\x2\x44\x70F\x3\x2\x2"+
		"\x2\x46\x714\x3\x2\x2\x2H\x716\x3\x2\x2\x2J\x71B\x3\x2\x2\x2L\x71D\x3"+
		"\x2\x2\x2N\x71F\x3\x2\x2\x2P\x722\x3\x2\x2\x2R\x726\x3\x2\x2\x2T\x72C"+
		"\x3\x2\x2\x2V\x72E\x3\x2\x2\x2X\x731\x3\x2\x2\x2Z\x733\x3\x2\x2\x2\\\x736"+
		"\x3\x2\x2\x2^\x73B\x3\x2\x2\x2`\x746\x3\x2\x2\x2\x62\x74F\x3\x2\x2\x2"+
		"\x64\x753\x3\x2\x2\x2\x66\x755\x3\x2\x2\x2h\x75B\x3\x2\x2\x2j\x75D\x3"+
		"\x2\x2\x2l\x75F\x3\x2\x2\x2n\x762\x3\x2\x2\x2p\x76A\x3\x2\x2\x2r\x76C"+
		"\x3\x2\x2\x2t\x76E\x3\x2\x2\x2v\x784\x3\x2\x2\x2x\x797\x3\x2\x2\x2z\x79F"+
		"\x3\x2\x2\x2|\x7A3\x3\x2\x2\x2~\x7AB\x3\x2\x2\x2\x80\x7BA\x3\x2\x2\x2"+
		"\x82\x7BC\x3\x2\x2\x2\x84\x7E8\x3\x2\x2\x2\x86\x7F1\x3\x2\x2\x2\x88\x7FE"+
		"\x3\x2\x2\x2\x8A\x800\x3\x2\x2\x2\x8C\x802\x3\x2\x2\x2\x8E\x804\x3\x2"+
		"\x2\x2\x90\x808\x3\x2\x2\x2\x92\x812\x3\x2\x2\x2\x94\x81C\x3\x2\x2\x2"+
		"\x96\x848\x3\x2\x2\x2\x98\x85F\x3\x2\x2\x2\x9A\x861\x3\x2\x2\x2\x9C\x863"+
		"\x3\x2\x2\x2\x9E\x8C0\x3\x2\x2\x2\xA0\x8C2\x3\x2\x2\x2\xA2\x8C7\x3\x2"+
		"\x2\x2\xA4\x8CA\x3\x2\x2\x2\xA6\xA32\x3\x2\x2\x2\xA8\xA34\x3\x2\x2\x2"+
		"\xAA\xA36\x3\x2\x2\x2\xAC\xA38\x3\x2\x2\x2\xAE\xA6E\x3\x2\x2\x2\xB0\xA73"+
		"\x3\x2\x2\x2\xB2\xA9F\x3\x2\x2\x2\xB4\xAB6\x3\x2\x2\x2\xB6\xAD4\x3\x2"+
		"\x2\x2\xB8\xAD8\x3\x2\x2\x2\xBA\xADE\x3\x2\x2\x2\xBC\xAE4\x3\x2\x2\x2"+
		"\xBE\xAE8\x3\x2\x2\x2\xC0\xAEC\x3\x2\x2\x2\xC2\xAF1\x3\x2\x2\x2\xC4\xAFF"+
		"\x3\x2\x2\x2\xC6\xB05\x3\x2\x2\x2\xC8\xB0A\x3\x2\x2\x2\xCA\xB10\x3\x2"+
		"\x2\x2\xCC\xB20\x3\x2\x2\x2\xCE\xB24\x3\x2\x2\x2\xD0\xB2A\x3\x2\x2\x2"+
		"\xD2\xB30\x3\x2\x2\x2\xD4\xB38\x3\x2\x2\x2\xD6\xB3E\x3\x2\x2\x2\xD8\xB4D"+
		"\x3\x2\x2\x2\xDA\xB5F\x3\x2\x2\x2\xDC\xB66\x3\x2\x2\x2\xDE\xB6B\x3\x2"+
		"\x2\x2\xE0\xB76\x3\x2\x2\x2\xE2\xB7B\x3\x2\x2\x2\xE4\xB7F\x3\x2\x2\x2"+
		"\xE6\xB83\x3\x2\x2\x2\xE8\xB88\x3\x2\x2\x2\xEA\xB8D\x3\x2\x2\x2\xEC\xB92"+
		"\x3\x2\x2\x2\xEE\xBA0\x3\x2\x2\x2\xF0\xBA6\x3\x2\x2\x2\xF2\xBAB\x3\x2"+
		"\x2\x2\xF4\xBB3\x3\x2\x2\x2\xF6\xBB7\x3\x2\x2\x2\xF8\xBC8\x3\x2\x2\x2"+
		"\xFA\xBD0\x3\x2\x2\x2\xFC\xBD6\x3\x2\x2\x2\xFE\xBE4\x3\x2\x2\x2\x100\xBFA"+
		"\x3\x2\x2\x2\x102\xBFF\x3\x2\x2\x2\x104\xC05\x3\x2\x2\x2\x106\xC0A\x3"+
		"\x2\x2\x2\x108\xC0E\x3\x2\x2\x2\x10A\xC2A\x3\x2\x2\x2\x10C\xC35\x3\x2"+
		"\x2\x2\x10E\xC3E\x3\x2\x2\x2\x110\xC4B\x3\x2\x2\x2\x112\xC53\x3\x2\x2"+
		"\x2\x114\xC58\x3\x2\x2\x2\x116\xC63\x3\x2\x2\x2\x118\xC81\x3\x2\x2\x2"+
		"\x11A\xC9F\x3\x2\x2\x2\x11C\xCAD\x3\x2\x2\x2\x11E\xCC5\x3\x2\x2\x2\x120"+
		"\xCD5\x3\x2\x2\x2\x122\xCE2\x3\x2\x2\x2\x124\xCF5\x3\x2\x2\x2\x126\xD02"+
		"\x3\x2\x2\x2\x128\xD0B\x3\x2\x2\x2\x12A\xD50\x3\x2\x2\x2\x12C\xD60\x3"+
		"\x2\x2\x2\x12E\xD74\x3\x2\x2\x2\x130\xD85\x3\x2\x2\x2\x132\xDA3\x3\x2"+
		"\x2\x2\x134\xE96\x3\x2\x2\x2\x136\xE9F\x3\x2\x2\x2\x138\xED9\x3\x2\x2"+
		"\x2\x13A\xF0A\x3\x2\x2\x2\x13C\xF0C\x3\x2\x2\x2\x13E\xF35\x3\x2\x2\x2"+
		"\x140\xF67\x3\x2\x2\x2\x142\xFAD\x3\x2\x2\x2\x144\xFF0\x3\x2\x2\x2\x146"+
		"\x1000\x3\x2\x2\x2\x148\x101C\x3\x2\x2\x2\x14A\x102F\x3\x2\x2\x2\x14C"+
		"\x1044\x3\x2\x2\x2\x14E\x108C\x3\x2\x2\x2\x150\x10EB\x3\x2\x2\x2\x152"+
		"\x1101\x3\x2\x2\x2\x154\x110D\x3\x2\x2\x2\x156\x1129\x3\x2\x2\x2\x158"+
		"\x113E\x3\x2\x2\x2\x15A\x1158\x3\x2\x2\x2\x15C\x1161\x3\x2\x2\x2\x15E"+
		"\x1181\x3\x2\x2\x2\x160\x118B\x3\x2\x2\x2\x162\x119B\x3\x2\x2\x2\x164"+
		"\x11A7\x3\x2\x2\x2\x166\x11B0\x3\x2\x2\x2\x168\x11C1\x3\x2\x2\x2\x16A"+
		"\x11D9\x3\x2\x2\x2\x16C\x1245\x3\x2\x2\x2\x16E\x125F\x3\x2\x2\x2\x170"+
		"\x127C\x3\x2\x2\x2\x172\x1284\x3\x2\x2\x2\x174\x129C\x3\x2\x2\x2\x176"+
		"\x129E\x3\x2\x2\x2\x178\x12A8\x3\x2\x2\x2\x17A\x12AC\x3\x2\x2\x2\x17C"+
		"\x12B8\x3\x2\x2\x2\x17E\x12D5\x3\x2\x2\x2\x180\x12DC\x3\x2\x2\x2\x182"+
		"\x1308\x3\x2\x2\x2\x184\x1313\x3\x2\x2\x2\x186\x1326\x3\x2\x2\x2\x188"+
		"\x134E\x3\x2\x2\x2\x18A\x1355\x3\x2\x2\x2\x18C\x1362\x3\x2\x2\x2\x18E"+
		"\x1374\x3\x2\x2\x2\x190\x13BA\x3\x2\x2\x2\x192\x13E5\x3\x2\x2\x2\x194"+
		"\x1421\x3\x2\x2\x2\x196\x14AA\x3\x2\x2\x2\x198\x1539\x3\x2\x2\x2\x19A"+
		"\x1556\x3\x2\x2\x2\x19C\x1573\x3\x2\x2\x2\x19E\x15E2\x3\x2\x2\x2\x1A0"+
		"\x15EF\x3\x2\x2\x2\x1A2\x15F7\x3\x2\x2\x2\x1A4\x15FF\x3\x2\x2\x2\x1A6"+
		"\x1619\x3\x2\x2\x2\x1A8\x161D\x3\x2\x2\x2\x1AA\x163B\x3\x2\x2\x2\x1AC"+
		"\x1656\x3\x2\x2\x2\x1AE\x166A\x3\x2\x2\x2\x1B0\x168F\x3\x2\x2\x2\x1B2"+
		"\x175B\x3\x2\x2\x2\x1B4\x1779\x3\x2\x2\x2\x1B6\x177B\x3\x2\x2\x2\x1B8"+
		"\x179B\x3\x2\x2\x2\x1BA\x17CA\x3\x2\x2\x2\x1BC\x17FE\x3\x2\x2\x2\x1BE"+
		"\x180E\x3\x2\x2\x2\x1C0\x1820\x3\x2\x2\x2\x1C2\x1836\x3\x2\x2\x2\x1C4"+
		"\x1844\x3\x2\x2\x2\x1C6\x188E\x3\x2\x2\x2\x1C8\x18AD\x3\x2\x2\x2\x1CA"+
		"\x18AF\x3\x2\x2\x2\x1CC\x18B3\x3\x2\x2\x2\x1CE\x18D1\x3\x2\x2\x2\x1D0"+
		"\x18D3\x3\x2\x2\x2\x1D2\x18E8\x3\x2\x2\x2\x1D4\x1937\x3\x2\x2\x2\x1D6"+
		"\x1944\x3\x2\x2\x2\x1D8\x1946\x3\x2\x2\x2\x1DA\x1953\x3\x2\x2\x2\x1DC"+
		"\x198A\x3\x2\x2\x2\x1DE\x198D\x3\x2\x2\x2\x1E0\x19BB\x3\x2\x2\x2\x1E2"+
		"\x19BE\x3\x2\x2\x2\x1E4\x19DF\x3\x2\x2\x2\x1E6\x19E3\x3\x2\x2\x2\x1E8"+
		"\x19F2\x3\x2\x2\x2\x1EA\x19F5\x3\x2\x2\x2\x1EC\x1A30\x3\x2\x2\x2\x1EE"+
		"\x1A48\x3\x2\x2\x2\x1F0\x1A4D\x3\x2\x2\x2\x1F2\x1A7E\x3\x2\x2\x2\x1F4"+
		"\x1AC6\x3\x2\x2\x2\x1F6\x1AC8\x3\x2\x2\x2\x1F8\x1AEB\x3\x2\x2\x2\x1FA"+
		"\x1AFE\x3\x2\x2\x2\x1FC\x1B00\x3\x2\x2\x2\x1FE\x1B14\x3\x2\x2\x2\x200"+
		"\x1B2A\x3\x2\x2\x2\x202\x1B2C\x3\x2\x2\x2\x204\x1B35\x3\x2\x2\x2\x206"+
		"\x1B47\x3\x2\x2\x2\x208\x1B49\x3\x2\x2\x2\x20A\x1B6A\x3\x2\x2\x2\x20C"+
		"\x1B7C\x3\x2\x2\x2\x20E\x1B7E\x3\x2\x2\x2\x210\x1BC6\x3\x2\x2\x2\x212"+
		"\x1BC8\x3\x2\x2\x2\x214\x1BF5\x3\x2\x2\x2\x216\x1BF7\x3\x2\x2\x2\x218"+
		"\x1C0C\x3\x2\x2\x2\x21A\x1C1D\x3\x2\x2\x2\x21C\x1C3E\x3\x2\x2\x2\x21E"+
		"\x1C40\x3\x2\x2\x2\x220\x1C5A\x3\x2\x2\x2\x222\x1C78\x3\x2\x2\x2\x224"+
		"\x1CAB\x3\x2\x2\x2\x226\x1CB3\x3\x2\x2\x2\x228\x1CE4\x3\x2\x2\x2\x22A"+
		"\x1CEE\x3\x2\x2\x2\x22C\x1CF6\x3\x2\x2\x2\x22E\x1D26\x3\x2\x2\x2\x230"+
		"\x1D28\x3\x2\x2\x2\x232\x1D30\x3\x2\x2\x2\x234\x1D54\x3\x2\x2\x2\x236"+
		"\x1D5C\x3\x2\x2\x2\x238\x1D77\x3\x2\x2\x2\x23A\x1D92\x3\x2\x2\x2\x23C"+
		"\x1DB5\x3\x2\x2\x2\x23E\x1DDA\x3\x2\x2\x2\x240\x1DDC\x3\x2\x2\x2\x242"+
		"\x1DF3\x3\x2\x2\x2\x244\x1E01\x3\x2\x2\x2\x246\x1E03\x3\x2\x2\x2\x248"+
		"\x1E22\x3\x2\x2\x2\x24A\x1E36\x3\x2\x2\x2\x24C\x1E6D\x3\x2\x2\x2\x24E"+
		"\x1E6F\x3\x2\x2\x2\x250\x1EBA\x3\x2\x2\x2\x252\x1EBC\x3\x2\x2\x2\x254"+
		"\x1F0A\x3\x2\x2\x2\x256\x1F0C\x3\x2\x2\x2\x258\x1F3C\x3\x2\x2\x2\x25A"+
		"\x1F44\x3\x2\x2\x2\x25C\x1F63\x3\x2\x2\x2\x25E\x1F65\x3\x2\x2\x2\x260"+
		"\x1FBA\x3\x2\x2\x2\x262\x1FC6\x3\x2\x2\x2\x264\x1FD4\x3\x2\x2\x2\x266"+
		"\x200D\x3\x2\x2\x2\x268\x200F\x3\x2\x2\x2\x26A\x2050\x3\x2\x2\x2\x26C"+
		"\x2052\x3\x2\x2\x2\x26E\x206D\x3\x2\x2\x2\x270\x206F\x3\x2\x2\x2\x272"+
		"\x2073\x3\x2\x2\x2\x274\x209F\x3\x2\x2\x2\x276\x20B2\x3\x2\x2\x2\x278"+
		"\x20B4\x3\x2\x2\x2\x27A\x20D0\x3\x2\x2\x2\x27C\x20D2\x3\x2\x2\x2\x27E"+
		"\x20DA\x3\x2\x2\x2\x280\x20DC\x3\x2\x2\x2\x282\x2121\x3\x2\x2\x2\x284"+
		"\x2129\x3\x2\x2\x2\x286\x212B\x3\x2\x2\x2\x288\x212D\x3\x2\x2\x2\x28A"+
		"\x212F\x3\x2\x2\x2\x28C\x213D\x3\x2\x2\x2\x28E\x2143\x3\x2\x2\x2\x290"+
		"\x2145\x3\x2\x2\x2\x292\x2147\x3\x2\x2\x2\x294\x214C\x3\x2\x2\x2\x296"+
		"\x214E\x3\x2\x2\x2\x298\x2152\x3\x2\x2\x2\x29A\x215E\x3\x2\x2\x2\x29C"+
		"\x2160\x3\x2\x2\x2\x29E\x2163\x3\x2\x2\x2\x2A0\x2166\x3\x2\x2\x2\x2A2"+
		"\x2168\x3\x2\x2\x2\x2A4\x216A\x3\x2\x2\x2\x2A6\x216C\x3\x2\x2\x2\x2A8"+
		"\x2189\x3\x2\x2\x2\x2AA\x218B\x3\x2\x2\x2\x2AC\x2196\x3\x2\x2\x2\x2AE"+
		"\x2199\x3\x2\x2\x2\x2B0\x21A5\x3\x2\x2\x2\x2B2\x21AD\x3\x2\x2\x2\x2B4"+
		"\x21B4\x3\x2\x2\x2\x2B6\x21CB\x3\x2\x2\x2\x2B8\x21CD\x3\x2\x2\x2\x2BA"+
		"\x21D8\x3\x2\x2\x2\x2BC\x21DA\x3\x2\x2\x2\x2BE\x21F5\x3\x2\x2\x2\x2C0"+
		"\x21FC\x3\x2\x2\x2\x2C2\x2202\x3\x2\x2\x2\x2C4\x2215\x3\x2\x2\x2\x2C6"+
		"\x2217\x3\x2\x2\x2\x2C8\x2228\x3\x2\x2\x2\x2CA\x223F\x3\x2\x2\x2\x2CC"+
		"\x2250\x3\x2\x2\x2\x2CE\x2261\x3\x2\x2\x2\x2D0\x2272\x3\x2\x2\x2\x2D2"+
		"\x2283\x3\x2\x2\x2\x2D4\x2295\x3\x2\x2\x2\x2D6\x229F\x3\x2\x2\x2\x2D8"+
		"\x22A1\x3\x2\x2\x2\x2DA\x22A8\x3\x2\x2\x2\x2DC\x22DF\x3\x2\x2\x2\x2DE"+
		"\x22E6\x3\x2\x2\x2\x2E0\x2305\x3\x2\x2\x2\x2E2\x2307\x3\x2\x2\x2\x2E4"+
		"\x2401\x3\x2\x2\x2\x2E6\x24EF\x3\x2\x2\x2\x2E8\x2517\x3\x2\x2\x2\x2EA"+
		"\x2524\x3\x2\x2\x2\x2EC\x2532\x3\x2\x2\x2\x2EE\x253A\x3\x2\x2\x2\x2F0"+
		"\x2540\x3\x2\x2\x2\x2F2\x2547\x3\x2\x2\x2\x2F4\x254B\x3\x2\x2\x2\x2F6"+
		"\x2550\x3\x2\x2\x2\x2F8\x2584\x3\x2\x2\x2\x2FA\x2596\x3\x2\x2\x2\x2FC"+
		"\x2598\x3\x2\x2\x2\x2FE\x259C\x3\x2\x2\x2\x300\x25A6\x3\x2\x2\x2\x302"+
		"\x25AD\x3\x2\x2\x2\x304\x25F1\x3\x2\x2\x2\x306\x25F5\x3\x2\x2\x2\x308"+
		"\x25F7\x3\x2\x2\x2\x30A\x261C\x3\x2\x2\x2\x30C\x261E\x3\x2\x2\x2\x30E"+
		"\x262E\x3\x2\x2\x2\x310\x263B\x3\x2\x2\x2\x312\x264F\x3\x2\x2\x2\x314"+
		"\x265C\x3\x2\x2\x2\x316\x2681\x3\x2\x2\x2\x318\x2692\x3\x2\x2\x2\x31A"+
		"\x2694\x3\x2\x2\x2\x31C\x26A1\x3\x2\x2\x2\x31E\x26BA\x3\x2\x2\x2\x320"+
		"\x2791\x3\x2\x2\x2\x322\x27B2\x3\x2\x2\x2\x324\x27F0\x3\x2\x2\x2\x326"+
		"\x27F2\x3\x2\x2\x2\x328\x27F6\x3\x2\x2\x2\x32A\x27F9\x3\x2\x2\x2\x32C"+
		"\x27FD\x3\x2\x2\x2\x32E\x2802\x3\x2\x2\x2\x330\x2807\x3\x2\x2\x2\x332"+
		"\x280B\x3\x2\x2\x2\x334\x280D\x3\x2\x2\x2\x336\x2828\x3\x2\x2\x2\x338"+
		"\x2836\x3\x2\x2\x2\x33A\x2838\x3\x2\x2\x2\x33C\x2856\x3\x2\x2\x2\x33E"+
		"\x2858\x3\x2\x2\x2\x340\x2879\x3\x2\x2\x2\x342\x287B\x3\x2\x2\x2\x344"+
		"\x2893\x3\x2\x2\x2\x346\x28AC\x3\x2\x2\x2\x348\x28C1\x3\x2\x2\x2\x34A"+
		"\x28C3\x3\x2\x2\x2\x34C\x28D4\x3\x2\x2\x2\x34E\x28DF\x3\x2\x2\x2\x350"+
		"\x28E4\x3\x2\x2\x2\x352\x28E6\x3\x2\x2\x2\x354\x28FC\x3\x2\x2\x2\x356"+
		"\x290C\x3\x2\x2\x2\x358\x291C\x3\x2\x2\x2\x35A\x2924\x3\x2\x2\x2\x35C"+
		"\x292F\x3\x2\x2\x2\x35E\x2941\x3\x2\x2\x2\x360\x2945\x3\x2\x2\x2\x362"+
		"\x294E\x3\x2\x2\x2\x364\x2971\x3\x2\x2\x2\x366\x2973\x3\x2\x2\x2\x368"+
		"\x297B\x3\x2\x2\x2\x36A\x297F\x3\x2\x2\x2\x36C\x298C\x3\x2\x2\x2\x36E"+
		"\x298E\x3\x2\x2\x2\x370\x29D8\x3\x2\x2\x2\x372\x29DA\x3\x2\x2\x2\x374"+
		"\x29F3\x3\x2\x2\x2\x376\x29FD\x3\x2\x2\x2\x378\x2A11\x3\x2\x2\x2\x37A"+
		"\x2A23\x3\x2\x2\x2\x37C\x2A2F\x3\x2\x2\x2\x37E\x2A5C\x3\x2\x2\x2\x380"+
		"\x2A64\x3\x2\x2\x2\x382\x2A6C\x3\x2\x2\x2\x384\x2A7D\x3\x2\x2\x2\x386"+
		"\x2A87\x3\x2\x2\x2\x388\x2A92\x3\x2\x2\x2\x38A\x2A9D\x3\x2\x2\x2\x38C"+
		"\x2AFF\x3\x2\x2\x2\x38E\x2B01\x3\x2\x2\x2\x390\x2B2A\x3\x2\x2\x2\x392"+
		"\x2B35\x3\x2\x2\x2\x394\x2B37\x3\x2\x2\x2\x396\x2B98\x3\x2\x2\x2\x398"+
		"\x2B9A\x3\x2\x2\x2\x39A\x2B9E\x3\x2\x2\x2\x39C\x2BA9\x3\x2\x2\x2\x39E"+
		"\x2BC6\x3\x2\x2\x2\x3A0\x2BC8\x3\x2\x2\x2\x3A2\x2BD1\x3\x2\x2\x2\x3A4"+
		"\x2BEC\x3\x2\x2\x2\x3A6\x2BF2\x3\x2\x2\x2\x3A8\x2BFC\x3\x2\x2\x2\x3AA"+
		"\x2BFE\x3\x2\x2\x2\x3AC\x2C00\x3\x2\x2\x2\x3AE\x2C09\x3\x2\x2\x2\x3B0"+
		"\x2C2E\x3\x2\x2\x2\x3B2\x2C40\x3\x2\x2\x2\x3B4\x2C42\x3\x2\x2\x2\x3B6"+
		"\x2C9C\x3\x2\x2\x2\x3B8\x2CB2\x3\x2\x2\x2\x3BA\x2CBA\x3\x2\x2\x2\x3BC"+
		"\x2CC3\x3\x2\x2\x2\x3BE\x2CF9\x3\x2\x2\x2\x3C0\x2D09\x3\x2\x2\x2\x3C2"+
		"\x2D10\x3\x2\x2\x2\x3C4\x2D12\x3\x2\x2\x2\x3C6\x2D1C\x3\x2\x2\x2\x3C8"+
		"\x2D83\x3\x2\x2\x2\x3CA\x2D85\x3\x2\x2\x2\x3CC\x2D91\x3\x2\x2\x2\x3CE"+
		"\x2DA6\x3\x2\x2\x2\x3D0\x2DA8\x3\x2\x2\x2\x3D2\x2DAA\x3\x2\x2\x2\x3D4"+
		"\x2DE5\x3\x2\x2\x2\x3D6\x2DE7\x3\x2\x2\x2\x3D8\x2DF0\x3\x2\x2\x2\x3DA"+
		"\x2DF8\x3\x2\x2\x2\x3DC\x2E0C\x3\x2\x2\x2\x3DE\x2E1E\x3\x2\x2\x2\x3E0"+
		"\x2E28\x3\x2\x2\x2\x3E2\x2E33\x3\x2\x2\x2\x3E4\x2E3E\x3\x2\x2\x2\x3E6"+
		"\x2E40\x3\x2\x2\x2\x3E8\x2E47\x3\x2\x2\x2\x3EA\x2E92\x3\x2\x2\x2\x3EC"+
		"\x2E94\x3\x2\x2\x2\x3EE\x2EA8\x3\x2\x2\x2\x3F0\x2EBA\x3\x2\x2\x2\x3F2"+
		"\x2EC2\x3\x2\x2\x2\x3F4\x2EC7\x3\x2\x2\x2\x3F6\x2ECF\x3\x2\x2\x2\x3F8"+
		"\x2ED6\x3\x2\x2\x2\x3FA\x2ED8\x3\x2\x2\x2\x3FC\x2EE0\x3\x2\x2\x2\x3FE"+
		"\x2EEF\x3\x2\x2\x2\x400\x2EF8\x3\x2\x2\x2\x402\x2F02\x3\x2\x2\x2\x404"+
		"\x2F06\x3\x2\x2\x2\x406\x2F0A\x3\x2\x2\x2\x408\x2F0E\x3\x2\x2\x2\x40A"+
		"\x2F12\x3\x2\x2\x2\x40C\x2F1A\x3\x2\x2\x2\x40E\x2F24\x3\x2\x2\x2\x410"+
		"\x2F46\x3\x2\x2\x2\x412\x2F48\x3\x2\x2\x2\x414\x2F5E\x3\x2\x2\x2\x416"+
		"\x2F6E\x3\x2\x2\x2\x418\x2F73\x3\x2\x2\x2\x41A\x2FC0\x3\x2\x2\x2\x41C"+
		"\x2FFA\x3\x2\x2\x2\x41E\x2FFC\x3\x2\x2\x2\x420\x3000\x3\x2\x2\x2\x422"+
		"\x3546\x3\x2\x2\x2\x424\x354C\x3\x2\x2\x2\x426\x354E\x3\x2\x2\x2\x428"+
		"\x3557\x3\x2\x2\x2\x42A\x3560\x3\x2\x2\x2\x42C\x3569\x3\x2\x2\x2\x42E"+
		"\x3575\x3\x2\x2\x2\x430\x357A\x3\x2\x2\x2\x432\x3587\x3\x2\x2\x2\x434"+
		"\x358C\x3\x2\x2\x2\x436\x3597\x3\x2\x2\x2\x438\x359C\x3\x2\x2\x2\x43A"+
		"\x35A7\x3\x2\x2\x2\x43C\x35AC\x3\x2\x2\x2\x43E\x35CF\x3\x2\x2\x2\x440"+
		"\x35D1\x3\x2\x2\x2\x442\x35E3\x3\x2\x2\x2\x444\x35EB\x3\x2\x2\x2\x446"+
		"\x35F0\x3\x2\x2\x2\x448\x35F6\x3\x2\x2\x2\x44A\x35FB\x3\x2\x2\x2\x44C"+
		"\x35FF\x3\x2\x2\x2\x44E\x3601\x3\x2\x2\x2\x450\x360F\x3\x2\x2\x2\x452"+
		"\x3614\x3\x2\x2\x2\x454\x3618\x3\x2\x2\x2\x456\x3652\x3\x2\x2\x2\x458"+
		"\x3656\x3\x2\x2\x2\x45A\x3658\x3\x2\x2\x2\x45C\x3665\x3\x2\x2\x2\x45E"+
		"\x3667\x3\x2\x2\x2\x460\x3675\x3\x2\x2\x2\x462\x3687\x3\x2\x2\x2\x464"+
		"\x36A9\x3\x2\x2\x2\x466\x36DE\x3\x2\x2\x2\x468\x36E1\x3\x2\x2\x2\x46A"+
		"\x36E5\x3\x2\x2\x2\x46C\x36F4\x3\x2\x2\x2\x46E\x36FD\x3\x2\x2\x2\x470"+
		"\x3701\x3\x2\x2\x2\x472\x3709\x3\x2\x2\x2\x474\x370F\x3\x2\x2\x2\x476"+
		"\x373C\x3\x2\x2\x2\x478\x373E\x3\x2\x2\x2\x47A\x374B\x3\x2\x2\x2\x47C"+
		"\x374D\x3\x2\x2\x2\x47E\x3762\x3\x2\x2\x2\x480\x37A0\x3\x2\x2\x2\x482"+
		"\x37A9\x3\x2\x2\x2\x484\x37B0\x3\x2\x2\x2\x486\x37C9\x3\x2\x2\x2\x488"+
		"\x37D7\x3\x2\x2\x2\x48A\x37E0\x3\x2\x2\x2\x48C\x37E7\x3\x2\x2\x2\x48E"+
		"\x37F5\x3\x2\x2\x2\x490\x3805\x3\x2\x2\x2\x492\x3809\x3\x2\x2\x2\x494"+
		"\x3811\x3\x2\x2\x2\x496\x3818\x3\x2\x2\x2\x498\x3826\x3\x2\x2\x2\x49A"+
		"\x3834\x3\x2\x2\x2\x49C\x3839\x3\x2\x2\x2\x49E\x3843\x3\x2\x2\x2\x4A0"+
		"\x3845\x3\x2\x2\x2\x4A2\x3847\x3\x2\x2\x2\x4A4\x384A\x3\x2\x2\x2\x4A6"+
		"\x3853\x3\x2\x2\x2\x4A8\x3855\x3\x2\x2\x2\x4AA\x3861\x3\x2\x2\x2\x4AC"+
		"\x3891\x3\x2\x2\x2\x4AE\x3895\x3\x2\x2\x2\x4B0\x3897\x3\x2\x2\x2\x4B2"+
		"\x38AC\x3\x2\x2\x2\x4B4\x38BB\x3\x2\x2\x2\x4B6\x38CB\x3\x2\x2\x2\x4B8"+
		"\x38CD\x3\x2\x2\x2\x4BA\x38FA\x3\x2\x2\x2\x4BC\x390B\x3\x2\x2\x2\x4BE"+
		"\x3916\x3\x2\x2\x2\x4C0\x3918\x3\x2\x2\x2\x4C2\x3921\x3\x2\x2\x2\x4C4"+
		"\x3923\x3\x2\x2\x2\x4C6\x3927\x3\x2\x2\x2\x4C8\x3938\x3\x2\x2\x2\x4CA"+
		"\x393A\x3\x2\x2\x2\x4CC\x393C\x3\x2\x2\x2\x4CE\x4D0\x5\x4\x3\x2\x4CF\x4CE"+
		"\x3\x2\x2\x2\x4D0\x4D3\x3\x2\x2\x2\x4D1\x4CF\x3\x2\x2\x2\x4D1\x4D2\x3"+
		"\x2\x2\x2\x4D2\x4D4\x3\x2\x2\x2\x4D3\x4D1\x3\x2\x2\x2\x4D4\x4DF\a\x2\x2"+
		"\x3\x4D5\x4D9\x5\x2F6\x17C\x2\x4D6\x4D8\x5\x326\x194\x2\x4D7\x4D6\x3\x2"+
		"\x2\x2\x4D8\x4DB\x3\x2\x2\x2\x4D9\x4D7\x3\x2\x2\x2\x4D9\x4DA\x3\x2\x2"+
		"\x2\x4DA\x4DC\x3\x2\x2\x2\x4DB\x4D9\x3\x2\x2\x2\x4DC\x4DD\a\x2\x2\x3\x4DD"+
		"\x4DF\x3\x2\x2\x2\x4DE\x4D1\x3\x2\x2\x2\x4DE\x4D5\x3\x2\x2\x2\x4DF\x3"+
		"\x3\x2\x2\x2\x4E0\x4FA\x5\x326\x194\x2\x4E1\x4E3\x5\x2F6\x17C\x2\x4E2"+
		"\x4E1\x3\x2\x2\x2\x4E2\x4E3\x3\x2\x2\x2\x4E3\x4EA\x3\x2\x2\x2\x4E4\x4EB"+
		"\x5\x326\x194\x2\x4E5\x4E7\x5\b\x5\x2\x4E6\x4E5\x3\x2\x2\x2\x4E7\x4E8"+
		"\x3\x2\x2\x2\x4E8\x4E6\x3\x2\x2\x2\x4E8\x4E9\x3\x2\x2\x2\x4E9\x4EB\x3"+
		"\x2\x2\x2\x4EA\x4E4\x3\x2\x2\x2\x4EA\x4E6\x3\x2\x2\x2\x4EB\x4EF\x3\x2"+
		"\x2\x2\x4EC\x4EE\x5\x326\x194\x2\x4ED\x4EC\x3\x2\x2\x2\x4EE\x4F1\x3\x2"+
		"\x2\x2\x4EF\x4ED\x3\x2\x2\x2\x4EF\x4F0\x3\x2\x2\x2\x4F0\x4FA\x3\x2\x2"+
		"\x2\x4F1\x4EF\x3\x2\x2\x2\x4F2\x4F6\x5\x6\x4\x2\x4F3\x4F5\x5\x326\x194"+
		"\x2\x4F4\x4F3\x3\x2\x2\x2\x4F5\x4F8\x3\x2\x2\x2\x4F6\x4F4\x3\x2\x2\x2"+
		"\x4F6\x4F7\x3\x2\x2\x2\x4F7\x4FA\x3\x2\x2\x2\x4F8\x4F6\x3\x2\x2\x2\x4F9"+
		"\x4E0\x3\x2\x2\x2\x4F9\x4E2\x3\x2\x2\x2\x4F9\x4F2\x3\x2\x2\x2\x4FA\x5"+
		"\x3\x2\x2\x2\x4FB\x500\x5\x236\x11C\x2\x4FC\x500\x5\x226\x114\x2\x4FD"+
		"\x500\x5\x22A\x116\x2\x4FE\x500\x5\x25A\x12E\x2\x4FF\x4FB\x3\x2\x2\x2"+
		"\x4FF\x4FC\x3\x2\x2\x2\x4FF\x4FD\x3\x2\x2\x2\x4FF\x4FE\x3\x2\x2\x2\x500"+
		"\a\x3\x2\x2\x2\x501\x503\x5\n\x6\x2\x502\x504\a\x4BD\x2\x2\x503\x502\x3"+
		"\x2\x2\x2\x503\x504\x3\x2\x2\x2\x504\x51B\x3\x2\x2\x2\x505\x507\x5\x10"+
		"\t\x2\x506\x508\a\x4BD\x2\x2\x507\x506\x3\x2\x2\x2\x507\x508\x3\x2\x2"+
		"\x2\x508\x51B\x3\x2\x2\x2\x509\x50B\x5\x32\x1A\x2\x50A\x50C\a\x4BD\x2"+
		"\x2\x50B\x50A\x3\x2\x2\x2\x50B\x50C\x3\x2\x2\x2\x50C\x51B\x3\x2\x2\x2"+
		"\x50D\x50F\x5\f\a\x2\x50E\x510\a\x4BD\x2\x2\x50F\x50E\x3\x2\x2\x2\x50F"+
		"\x510\x3\x2\x2\x2\x510\x51B\x3\x2\x2\x2\x511\x513\x5\x35C\x1AF\x2\x512"+
		"\x514\a\x4BD\x2\x2\x513\x512\x3\x2\x2\x2\x513\x514\x3\x2\x2\x2\x514\x51B"+
		"\x3\x2\x2\x2\x515\x517\x5\xE\b\x2\x516\x518\a\x4BD\x2\x2\x517\x516\x3"+
		"\x2\x2\x2\x517\x518\x3\x2\x2\x2\x518\x51B\x3\x2\x2\x2\x519\x51B\a\x4BD"+
		"\x2\x2\x51A\x501\x3\x2\x2\x2\x51A\x505\x3\x2\x2\x2\x51A\x509\x3\x2\x2"+
		"\x2\x51A\x50D\x3\x2\x2\x2\x51A\x511\x3\x2\x2\x2\x51A\x515\x3\x2\x2\x2"+
		"\x51A\x519\x3\x2\x2\x2\x51B\t\x3\x2\x2\x2\x51C\x522\x5\x1D2\xEA\x2\x51D"+
		"\x522\x5\x1DA\xEE\x2\x51E\x522\x5\x1DE\xF0\x2\x51F\x522\x5\x1E4\xF3\x2"+
		"\x520\x522\x5\x1EA\xF6\x2\x521\x51C\x3\x2\x2\x2\x521\x51D\x3\x2\x2\x2"+
		"\x521\x51E\x3\x2\x2\x2\x521\x51F\x3\x2\x2\x2\x521\x520\x3\x2\x2\x2\x522"+
		"\v\x3\x2\x2\x2\x523\x5CA\x5\x34\x1B\x2\x524\x5CA\x5> \x2\x525\x5CA\x5"+
		"x=\x2\x526\x5CA\x5\x86\x44\x2\x527\x5CA\x5\x92J\x2\x528\x5CA\x5\x94K\x2"+
		"\x529\x5CA\x5\x90I\x2\x52A\x5CA\x5\xA2R\x2\x52B\x5CA\x5\xB0Y\x2\x52C\x5CA"+
		"\x5\xB2Z\x2\x52D\x5CA\x5\x120\x91\x2\x52E\x5CA\x5\x124\x93\x2\x52F\x5CA"+
		"\x5\x264\x133\x2\x530\x5CA\x5\x16E\xB8\x2\x531\x5CA\x5\x17A\xBE\x2\x532"+
		"\x5CA\x5\x280\x141\x2\x533\x5CA\x5\x13A\x9E\x2\x534\x5CA\x5\x13C\x9F\x2"+
		"\x535\x5CA\x5\x140\xA1\x2\x536\x5CA\x5\x144\xA3\x2\x537\x5CA\x5\x148\xA5"+
		"\x2\x538\x5CA\x5\x1FC\xFF\x2\x539\x5CA\x5\x150\xA9\x2\x53A\x5CA\x5\x154"+
		"\xAB\x2\x53B\x5CA\x5\x14C\xA7\x2\x53C\x5CA\x5\x15C\xAF\x2\x53D\x5CA\x5"+
		"\x158\xAD\x2\x53E\x5CA\x5\x160\xB1\x2\x53F\x5CA\x5\x162\xB2\x2\x540\x5CA"+
		"\x5\x164\xB3\x2\x541\x5CA\x5\x166\xB4\x2\x542\x5CA\x5\x16C\xB7\x2\x543"+
		"\x5CA\x5\x18A\xC6\x2\x544\x5CA\x5\x184\xC3\x2\x545\x5CA\x5\x190\xC9\x2"+
		"\x546\x5CA\x5\x194\xCB\x2\x547\x5CA\x5\x198\xCD\x2\x548\x5CA\x5\x19C\xCF"+
		"\x2\x549\x5CA\x5\x19E\xD0\x2\x54A\x5CA\x5\x1A2\xD2\x2\x54B\x5CA\x5\x1A4"+
		"\xD3\x2\x54C\x5CA\x5\x1AA\xD6\x2\x54D\x5CA\x5\x1AC\xD7\x2\x54E\x5CA\x5"+
		"\x25E\x130\x2\x54F\x5CA\x5\x1B0\xD9\x2\x550\x5CA\x5\x1B6\xDC\x2\x551\x5CA"+
		"\x5\x1B8\xDD\x2\x552\x5CA\x5\x36\x1C\x2\x553\x5CA\x5\x38\x1D\x2\x554\x5CA"+
		"\x5t;\x2\x555\x5CA\x5\x82\x42\x2\x556\x5CA\x5\xB4[\x2\x557\x5CA\x5\x11E"+
		"\x90\x2\x558\x5CA\x5\x218\x10D\x2\x559\x5CA\x5\x122\x92\x2\x55A\x5CA\x5"+
		"\x126\x94\x2\x55B\x5CA\x5\x1F0\xF9\x2\x55C\x5CA\x5\x1F2\xFA\x2\x55D\x5CA"+
		"\x5\x17C\xBF\x2\x55E\x5CA\x5\x17E\xC0\x2\x55F\x5CA\x5\x128\x95\x2\x560"+
		"\x5CA\x5\x130\x99\x2\x561\x5CA\x5\x13E\xA0\x2\x562\x5CA\x5\x142\xA2\x2"+
		"\x563\x5CA\x5\x146\xA4\x2\x564\x5CA\x5\x14A\xA6\x2\x565\x5CA\x5\x1F6\xFC"+
		"\x2\x566\x5CA\x5\x152\xAA\x2\x567\x5CA\x5\x156\xAC\x2\x568\x5CA\x5\x14E"+
		"\xA8\x2\x569\x5CA\x5\x15E\xB0\x2\x56A\x5CA\x5\x15A\xAE\x2\x56B\x5CA\x5"+
		"\x21E\x110\x2\x56C\x5CA\x5\xACW\x2\x56D\x5CA\x5\x132\x9A\x2\x56E\x5CA"+
		"\x5\x1BE\xE0\x2\x56F\x5CA\x5\x1C0\xE1\x2\x570\x5CA\x5\x168\xB5\x2\x571"+
		"\x5CA\x5\x16A\xB6\x2\x572\x5CA\x5\x180\xC1\x2\x573\x5CA\x5\x182\xC2\x2"+
		"\x574\x5CA\x5\x186\xC4\x2\x575\x5CA\x5\x188\xC5\x2\x576\x5CA\x5\x18C\xC7"+
		"\x2\x577\x5CA\x5\x18E\xC8\x2\x578\x5CA\x5\x192\xCA\x2\x579\x5CA\x5\x196"+
		"\xCC\x2\x57A\x5CA\x5\x19A\xCE\x2\x57B\x5CA\x5\x1A0\xD1\x2\x57C\x5CA\x5"+
		"\x1A8\xD5\x2\x57D\x5CA\x5\x246\x124\x2\x57E\x5CA\x5\x1AE\xD8\x2\x57F\x5CA"+
		"\x5\x24E\x128\x2\x580\x5CA\x5\x2D2\x16A\x2\x581\x5CA\x5\x1B2\xDA\x2\x582"+
		"\x5CA\x5\x1B4\xDB\x2\x583\x5CA\x5\x1BA\xDE\x2\x584\x5CA\x5\x220\x111\x2"+
		"\x585\x5CA\x5\x1BC\xDF\x2\x586\x5CA\x5\x116\x8C\x2\x587\x5CA\x5:\x1E\x2"+
		"\x588\x5CA\x5<\x1F\x2\x589\x5CA\x5v<\x2\x58A\x5CA\x5\x84\x43\x2\x58B\x5CA"+
		"\x5\xA0Q\x2\x58C\x5CA\x5\xAEX\x2\x58D\x5CA\x5\xB6\\\x2\x58E\x5CA\x5\xB8"+
		"]\x2\x58F\x5CA\x5\xBA^\x2\x590\x5CA\x5\xBC_\x2\x591\x5CA\x5\xBE`\x2\x592"+
		"\x5CA\x5\xC0\x61\x2\x593\x5CA\x5\xC2\x62\x2\x594\x5CA\x5\xC4\x63\x2\x595"+
		"\x5CA\x5\xC6\x64\x2\x596\x5CA\x5\xC8\x65\x2\x597\x5CA\x5\xF2z\x2\x598"+
		"\x5CA\x5\xCA\x66\x2\x599\x5CA\x5\xCCg\x2\x59A\x5CA\x5\xD8m\x2\x59B\x5CA"+
		"\x5\xDAn\x2\x59C\x5CA\x5\xCEh\x2\x59D\x5CA\x5\xD0i\x2\x59E\x5CA\x5\xD2"+
		"j\x2\x59F\x5CA\x5\xD4k\x2\x5A0\x5CA\x5\xD6l\x2\x5A1\x5CA\x5\xDCo\x2\x5A2"+
		"\x5CA\x5\xDEp\x2\x5A3\x5CA\x5\xE0q\x2\x5A4\x5CA\x5\x2CA\x166\x2\x5A5\x5CA"+
		"\x5\x2BC\x15F\x2\x5A6\x5CA\x5\xE2r\x2\x5A7\x5CA\x5\xE4s\x2\x5A8\x5CA\x5"+
		"\xE6t\x2\x5A9\x5CA\x5\xE8u\x2\x5AA\x5CA\x5\xEAv\x2\x5AB\x5CA\x5\x2C2\x162"+
		"\x2\x5AC\x5CA\x5\xECw\x2\x5AD\x5CA\x5\xEEx\x2\x5AE\x5CA\x5\xF0y\x2\x5AF"+
		"\x5CA\x5\xF4{\x2\x5B0\x5CA\x5\xF6|\x2\x5B1\x5CA\x5\xF8}\x2\x5B2\x5CA\x5"+
		"\xFA~\x2\x5B3\x5CA\x5\xFC\x7F\x2\x5B4\x5CA\x5\xFE\x80\x2\x5B5\x5CA\x5"+
		"\x100\x81\x2\x5B6\x5CA\x5\x102\x82\x2\x5B7\x5CA\x5\x104\x83\x2\x5B8\x5CA"+
		"\x5\x106\x84\x2\x5B9\x5CA\x5\x108\x85\x2\x5BA\x5CA\x5\x2CC\x167\x2\x5BB"+
		"\x5CA\x5\x10A\x86\x2\x5BC\x5CA\x5\x10C\x87\x2\x5BD\x5CA\x5\x10E\x88\x2"+
		"\x5BE\x5CA\x5\x2CE\x168\x2\x5BF\x5CA\x5\x2C4\x163\x2\x5C0\x5CA\x5\x2D4"+
		"\x16B\x2\x5C1\x5CA\x5\x110\x89\x2\x5C2\x5CA\x5\x2D0\x169\x2\x5C3\x5CA"+
		"\x5\x112\x8A\x2\x5C4\x5CA\x5\x114\x8B\x2\x5C5\x5CA\x5\x118\x8D\x2\x5C6"+
		"\x5CA\x5\x11A\x8E\x2\x5C7\x5CA\x5\x11C\x8F\x2\x5C8\x5CA\x5\x248\x125\x2"+
		"\x5C9\x523\x3\x2\x2\x2\x5C9\x524\x3\x2\x2\x2\x5C9\x525\x3\x2\x2\x2\x5C9"+
		"\x526\x3\x2\x2\x2\x5C9\x527\x3\x2\x2\x2\x5C9\x528\x3\x2\x2\x2\x5C9\x529"+
		"\x3\x2\x2\x2\x5C9\x52A\x3\x2\x2\x2\x5C9\x52B\x3\x2\x2\x2\x5C9\x52C\x3"+
		"\x2\x2\x2\x5C9\x52D\x3\x2\x2\x2\x5C9\x52E\x3\x2\x2\x2\x5C9\x52F\x3\x2"+
		"\x2\x2\x5C9\x530\x3\x2\x2\x2\x5C9\x531\x3\x2\x2\x2\x5C9\x532\x3\x2\x2"+
		"\x2\x5C9\x533\x3\x2\x2\x2\x5C9\x534\x3\x2\x2\x2\x5C9\x535\x3\x2\x2\x2"+
		"\x5C9\x536\x3\x2\x2\x2\x5C9\x537\x3\x2\x2\x2\x5C9\x538\x3\x2\x2\x2\x5C9"+
		"\x539\x3\x2\x2\x2\x5C9\x53A\x3\x2\x2\x2\x5C9\x53B\x3\x2\x2\x2\x5C9\x53C"+
		"\x3\x2\x2\x2\x5C9\x53D\x3\x2\x2\x2\x5C9\x53E\x3\x2\x2\x2\x5C9\x53F\x3"+
		"\x2\x2\x2\x5C9\x540\x3\x2\x2\x2\x5C9\x541\x3\x2\x2\x2\x5C9\x542\x3\x2"+
		"\x2\x2\x5C9\x543\x3\x2\x2\x2\x5C9\x544\x3\x2\x2\x2\x5C9\x545\x3\x2\x2"+
		"\x2\x5C9\x546\x3\x2\x2\x2\x5C9\x547\x3\x2\x2\x2\x5C9\x548\x3\x2\x2\x2"+
		"\x5C9\x549\x3\x2\x2\x2\x5C9\x54A\x3\x2\x2\x2\x5C9\x54B\x3\x2\x2\x2\x5C9"+
		"\x54C\x3\x2\x2\x2\x5C9\x54D\x3\x2\x2\x2\x5C9\x54E\x3\x2\x2\x2\x5C9\x54F"+
		"\x3\x2\x2\x2\x5C9\x550\x3\x2\x2\x2\x5C9\x551\x3\x2\x2\x2\x5C9\x552\x3"+
		"\x2\x2\x2\x5C9\x553\x3\x2\x2\x2\x5C9\x554\x3\x2\x2\x2\x5C9\x555\x3\x2"+
		"\x2\x2\x5C9\x556\x3\x2\x2\x2\x5C9\x557\x3\x2\x2\x2\x5C9\x558\x3\x2\x2"+
		"\x2\x5C9\x559\x3\x2\x2\x2\x5C9\x55A\x3\x2\x2\x2\x5C9\x55B\x3\x2\x2\x2"+
		"\x5C9\x55C\x3\x2\x2\x2\x5C9\x55D\x3\x2\x2\x2\x5C9\x55E\x3\x2\x2\x2\x5C9"+
		"\x55F\x3\x2\x2\x2\x5C9\x560\x3\x2\x2\x2\x5C9\x561\x3\x2\x2\x2\x5C9\x562"+
		"\x3\x2\x2\x2\x5C9\x563\x3\x2\x2\x2\x5C9\x564\x3\x2\x2\x2\x5C9\x565\x3"+
		"\x2\x2\x2\x5C9\x566\x3\x2\x2\x2\x5C9\x567\x3\x2\x2\x2\x5C9\x568\x3\x2"+
		"\x2\x2\x5C9\x569\x3\x2\x2\x2\x5C9\x56A\x3\x2\x2\x2\x5C9\x56B\x3\x2\x2"+
		"\x2\x5C9\x56C\x3\x2\x2\x2\x5C9\x56D\x3\x2\x2\x2\x5C9\x56E\x3\x2\x2\x2"+
		"\x5C9\x56F\x3\x2\x2\x2\x5C9\x570\x3\x2\x2\x2\x5C9\x571\x3\x2\x2\x2\x5C9"+
		"\x572\x3\x2\x2\x2\x5C9\x573\x3\x2\x2\x2\x5C9\x574\x3\x2\x2\x2\x5C9\x575"+
		"\x3\x2\x2\x2\x5C9\x576\x3\x2\x2\x2\x5C9\x577\x3\x2\x2\x2\x5C9\x578\x3"+
		"\x2\x2\x2\x5C9\x579\x3\x2\x2\x2\x5C9\x57A\x3\x2\x2\x2\x5C9\x57B\x3\x2"+
		"\x2\x2\x5C9\x57C\x3\x2\x2\x2\x5C9\x57D\x3\x2\x2\x2\x5C9\x57E\x3\x2\x2"+
		"\x2\x5C9\x57F\x3\x2\x2\x2\x5C9\x580\x3\x2\x2\x2\x5C9\x581\x3\x2\x2\x2"+
		"\x5C9\x582\x3\x2\x2\x2\x5C9\x583\x3\x2\x2\x2\x5C9\x584\x3\x2\x2\x2\x5C9"+
		"\x585\x3\x2\x2\x2\x5C9\x586\x3\x2\x2\x2\x5C9\x587\x3\x2\x2\x2\x5C9\x588"+
		"\x3\x2\x2\x2\x5C9\x589\x3\x2\x2\x2\x5C9\x58A\x3\x2\x2\x2\x5C9\x58B\x3"+
		"\x2\x2\x2\x5C9\x58C\x3\x2\x2\x2\x5C9\x58D\x3\x2\x2\x2\x5C9\x58E\x3\x2"+
		"\x2\x2\x5C9\x58F\x3\x2\x2\x2\x5C9\x590\x3\x2\x2\x2\x5C9\x591\x3\x2\x2"+
		"\x2\x5C9\x592\x3\x2\x2\x2\x5C9\x593\x3\x2\x2\x2\x5C9\x594\x3\x2\x2\x2"+
		"\x5C9\x595\x3\x2\x2\x2\x5C9\x596\x3\x2\x2\x2\x5C9\x597\x3\x2\x2\x2\x5C9"+
		"\x598\x3\x2\x2\x2\x5C9\x599\x3\x2\x2\x2\x5C9\x59A\x3\x2\x2\x2\x5C9\x59B"+
		"\x3\x2\x2\x2\x5C9\x59C\x3\x2\x2\x2\x5C9\x59D\x3\x2\x2\x2\x5C9\x59E\x3"+
		"\x2\x2\x2\x5C9\x59F\x3\x2\x2\x2\x5C9\x5A0\x3\x2\x2\x2\x5C9\x5A1\x3\x2"+
		"\x2\x2\x5C9\x5A2\x3\x2\x2\x2\x5C9\x5A3\x3\x2\x2\x2\x5C9\x5A4\x3\x2\x2"+
		"\x2\x5C9\x5A5\x3\x2\x2\x2\x5C9\x5A6\x3\x2\x2\x2\x5C9\x5A7\x3\x2\x2\x2"+
		"\x5C9\x5A8\x3\x2\x2\x2\x5C9\x5A9\x3\x2\x2\x2\x5C9\x5AA\x3\x2\x2\x2\x5C9"+
		"\x5AB\x3\x2\x2\x2\x5C9\x5AC\x3\x2\x2\x2\x5C9\x5AD\x3\x2\x2\x2\x5C9\x5AE"+
		"\x3\x2\x2\x2\x5C9\x5AF\x3\x2\x2\x2\x5C9\x5B0\x3\x2\x2\x2\x5C9\x5B1\x3"+
		"\x2\x2\x2\x5C9\x5B2\x3\x2\x2\x2\x5C9\x5B3\x3\x2\x2\x2\x5C9\x5B4\x3\x2"+
		"\x2\x2\x5C9\x5B5\x3\x2\x2\x2\x5C9\x5B6\x3\x2\x2\x2\x5C9\x5B7\x3\x2\x2"+
		"\x2\x5C9\x5B8\x3\x2\x2\x2\x5C9\x5B9\x3\x2\x2\x2\x5C9\x5BA\x3\x2\x2\x2"+
		"\x5C9\x5BB\x3\x2\x2\x2\x5C9\x5BC\x3\x2\x2\x2\x5C9\x5BD\x3\x2\x2\x2\x5C9"+
		"\x5BE\x3\x2\x2\x2\x5C9\x5BF\x3\x2\x2\x2\x5C9\x5C0\x3\x2\x2\x2\x5C9\x5C1"+
		"\x3\x2\x2\x2\x5C9\x5C2\x3\x2\x2\x2\x5C9\x5C3\x3\x2\x2\x2\x5C9\x5C4\x3"+
		"\x2\x2\x2\x5C9\x5C5\x3\x2\x2\x2\x5C9\x5C6\x3\x2\x2\x2\x5C9\x5C7\x3\x2"+
		"\x2\x2\x5C9\x5C8\x3\x2\x2\x2\x5CA\r\x3\x2\x2\x2\x5CB\x5D1\x5\x2E2\x172"+
		"\x2\x5CC\x5D1\x5\x2E4\x173\x2\x5CD\x5D1\x5\x2E6\x174\x2\x5CE\x5D1\x5\x2E8"+
		"\x175\x2\x5CF\x5D1\x5\x2EA\x176\x2\x5D0\x5CB\x3\x2\x2\x2\x5D0\x5CC\x3"+
		"\x2\x2\x2\x5D0\x5CD\x3\x2\x2\x2\x5D0\x5CE\x3\x2\x2\x2\x5D0\x5CF\x3\x2"+
		"\x2\x2\x5D1\xF\x3\x2\x2\x2\x5D2\x5DF\x5\x12\n\x2\x5D3\x5DF\x5\x14\v\x2"+
		"\x5D4\x5DF\x5\x16\f\x2\x5D5\x5DF\x5\x18\r\x2\x5D6\x5DF\x5\x1C\xF\x2\x5D7"+
		"\x5DF\x5,\x17\x2\x5D8\x5DF\x5.\x18\x2\x5D9\x5DF\x5\x1A\xE\x2\x5DA\x5DF"+
		"\x5\x1E\x10\x2\x5DB\x5DF\x5&\x14\x2\x5DC\x5DF\x5(\x15\x2\x5DD\x5DF\x5"+
		"*\x16\x2\x5DE\x5D2\x3\x2\x2\x2\x5DE\x5D3\x3\x2\x2\x2\x5DE\x5D4\x3\x2\x2"+
		"\x2\x5DE\x5D5\x3\x2\x2\x2\x5DE\x5D6\x3\x2\x2\x2\x5DE\x5D7\x3\x2\x2\x2"+
		"\x5DE\x5D8\x3\x2\x2\x2\x5DE\x5D9\x3\x2\x2\x2\x5DE\x5DA\x3\x2\x2\x2\x5DE"+
		"\x5DB\x3\x2\x2\x2\x5DE\x5DC\x3\x2\x2\x2\x5DE\x5DD\x3\x2\x2\x2\x5DF\x11"+
		"\x3\x2\x2\x2\x5E0\x5E2\a\\\x2\x2\x5E1\x5E3\a\x4BD\x2\x2\x5E2\x5E1\x3\x2"+
		"\x2\x2\x5E2\x5E3\x3\x2\x2\x2\x5E3\x5E7\x3\x2\x2\x2\x5E4\x5E6\x5\b\x5\x2"+
		"\x5E5\x5E4\x3\x2\x2\x2\x5E6\x5E9\x3\x2\x2\x2\x5E7\x5E5\x3\x2\x2\x2\x5E7"+
		"\x5E8\x3\x2\x2\x2\x5E8\x5EA\x3\x2\x2\x2\x5E9\x5E7\x3\x2\x2\x2\x5EA\x5EC"+
		"\a\x130\x2\x2\x5EB\x5ED\a\x4BD\x2\x2\x5EC\x5EB\x3\x2\x2\x2\x5EC\x5ED\x3"+
		"\x2\x2\x2\x5ED\x13\x3\x2\x2\x2\x5EE\x5F0\ah\x2\x2\x5EF\x5F1\a\x4BD\x2"+
		"\x2\x5F0\x5EF\x3\x2\x2\x2\x5F0\x5F1\x3\x2\x2\x2\x5F1\x15\x3\x2\x2\x2\x5F2"+
		"\x5F4\a\xBC\x2\x2\x5F3\x5F5\a\x4BD\x2\x2\x5F4\x5F3\x3\x2\x2\x2\x5F4\x5F5"+
		"\x3\x2\x2\x2\x5F5\x17\x3\x2\x2\x2\x5F6\x5F7\a\x196\x2\x2\x5F7\x5F9\x5"+
		"\x4C2\x262\x2\x5F8\x5FA\a\x4BD\x2\x2\x5F9\x5F8\x3\x2\x2\x2\x5F9\x5FA\x3"+
		"\x2\x2\x2\x5FA\x601\x3\x2\x2\x2\x5FB\x5FC\x5\x4C2\x262\x2\x5FC\x5FE\a"+
		"\x4BE\x2\x2\x5FD\x5FF\a\x4BD\x2\x2\x5FE\x5FD\x3\x2\x2\x2\x5FE\x5FF\x3"+
		"\x2\x2\x2\x5FF\x601\x3\x2\x2\x2\x600\x5F6\x3\x2\x2\x2\x600\x5FB\x3\x2"+
		"\x2\x2\x601\x19\x3\x2\x2\x2\x602\x604\a\x339\x2\x2\x603\x605\x5\x39C\x1CF"+
		"\x2\x604\x603\x3\x2\x2\x2\x604\x605\x3\x2\x2\x2\x605\x607\x3\x2\x2\x2"+
		"\x606\x608\a\x4BD\x2\x2\x607\x606\x3\x2\x2\x2\x607\x608\x3\x2\x2\x2\x608"+
		"\x1B\x3\x2\x2\x2\x609\x60A\a\x1B6\x2\x2\x60A\x60B\x5\x3B4\x1DB\x2\x60B"+
		"\x60E\x5\b\x5\x2\x60C\x60D\a\x126\x2\x2\x60D\x60F\x5\b\x5\x2\x60E\x60C"+
		"\x3\x2\x2\x2\x60E\x60F\x3\x2\x2\x2\x60F\x611\x3\x2\x2\x2\x610\x612\a\x4BD"+
		"\x2\x2\x611\x610\x3\x2\x2\x2\x611\x612\x3\x2\x2\x2\x612\x1D\x3\x2\x2\x2"+
		"\x613\x61A\a\x3E5\x2\x2\x614\x615\x5 \x11\x2\x615\x616\a\x4BC\x2\x2\x616"+
		"\x617\x5\"\x12\x2\x617\x618\a\x4BC\x2\x2\x618\x619\x5$\x13\x2\x619\x61B"+
		"\x3\x2\x2\x2\x61A\x614\x3\x2\x2\x2\x61A\x61B\x3\x2\x2\x2\x61B\x61D\x3"+
		"\x2\x2\x2\x61C\x61E\a\x4BD\x2\x2\x61D\x61C\x3\x2\x2\x2\x61D\x61E\x3\x2"+
		"\x2\x2\x61E\x1F\x3\x2\x2\x2\x61F\x620\t\x2\x2\x2\x620!\x3\x2\x2\x2\x621"+
		"\x622\t\x3\x2\x2\x622#\x3\x2\x2\x2\x623\x624\t\x2\x2\x2\x624%\x3\x2\x2"+
		"\x2\x625\x626\a\\\x2\x2\x626\x628\a\x3FE\x2\x2\x627\x629\a\x4BD\x2\x2"+
		"\x628\x627\x3\x2\x2\x2\x628\x629\x3\x2\x2\x2\x629\x62B\x3\x2\x2\x2\x62A"+
		"\x62C\x5\b\x5\x2\x62B\x62A\x3\x2\x2\x2\x62C\x62D\x3\x2\x2\x2\x62D\x62B"+
		"\x3\x2\x2\x2\x62D\x62E\x3\x2\x2\x2\x62E\x62F\x3\x2\x2\x2\x62F\x630\a\x130"+
		"\x2\x2\x630\x632\a\x3FE\x2\x2\x631\x633\a\x4BD\x2\x2\x632\x631\x3\x2\x2"+
		"\x2\x632\x633\x3\x2\x2\x2\x633\x634\x3\x2\x2\x2\x634\x635\a\\\x2\x2\x635"+
		"\x637\az\x2\x2\x636\x638\a\x4BD\x2\x2\x637\x636\x3\x2\x2\x2\x637\x638"+
		"\x3\x2\x2\x2\x638\x63C\x3\x2\x2\x2\x639\x63B\x5\b\x5\x2\x63A\x639\x3\x2"+
		"\x2\x2\x63B\x63E\x3\x2\x2\x2\x63C\x63A\x3\x2\x2\x2\x63C\x63D\x3\x2\x2"+
		"\x2\x63D\x63F\x3\x2\x2\x2\x63E\x63C\x3\x2\x2\x2\x63F\x640\a\x130\x2\x2"+
		"\x640\x642\az\x2\x2\x641\x643\a\x4BD\x2\x2\x642\x641\x3\x2\x2\x2\x642"+
		"\x643\x3\x2\x2\x2\x643\'\x3\x2\x2\x2\x644\x646\a\x431\x2\x2\x645\x647"+
		"\x5\x1E2\xF2\x2\x646\x645\x3\x2\x2\x2\x646\x647\x3\x2\x2\x2\x647\x649"+
		"\x3\x2\x2\x2\x648\x64A\a\x4BC\x2\x2\x649\x648\x3\x2\x2\x2\x649\x64A\x3"+
		"\x2\x2\x2\x64A\x64D\x3\x2\x2\x2\x64B\x64C\t\x4\x2\x2\x64C\x64E\x5\x1E8"+
		"\xF5\x2\x64D\x64B\x3\x2\x2\x2\x64D\x64E\x3\x2\x2\x2\x64E\x650\x3\x2\x2"+
		"\x2\x64F\x651\x5\x39C\x1CF\x2\x650\x64F\x3\x2\x2\x2\x650\x651\x3\x2\x2"+
		"\x2\x651\x653\x3\x2\x2\x2\x652\x654\a\x4BD\x2\x2\x653\x652\x3\x2\x2\x2"+
		"\x653\x654\x3\x2\x2\x2\x654)\x3\x2\x2\x2\x655\x656\a\x437\x2\x2\x656\x660"+
		"\x5\x3B4\x1DB\x2\x657\x661\x5\b\x5\x2\x658\x65A\ah\x2\x2\x659\x65B\a\x4BD"+
		"\x2\x2\x65A\x659\x3\x2\x2\x2\x65A\x65B\x3\x2\x2\x2\x65B\x661\x3\x2\x2"+
		"\x2\x65C\x65E\a\xBC\x2\x2\x65D\x65F\a\x4BD\x2\x2\x65E\x65D\x3\x2\x2\x2"+
		"\x65E\x65F\x3\x2\x2\x2\x65F\x661\x3\x2\x2\x2\x660\x657\x3\x2\x2\x2\x660"+
		"\x658\x3\x2\x2\x2\x660\x65C\x3\x2\x2\x2\x661+\x3\x2\x2\x2\x662\x665\a"+
		"\x2DB\x2\x2\x663\x666\x5\x39C\x1CF\x2\x664\x666\a\x49C\x2\x2\x665\x663"+
		"\x3\x2\x2\x2\x665\x664\x3\x2\x2\x2\x666\x66B\x3\x2\x2\x2\x667\x668\a\x4BC"+
		"\x2\x2\x668\x66A\a\x4A0\x2\x2\x669\x667\x3\x2\x2\x2\x66A\x66D\x3\x2\x2"+
		"\x2\x66B\x669\x3\x2\x2\x2\x66B\x66C\x3\x2\x2\x2\x66C\x66F\x3\x2\x2\x2"+
		"\x66D\x66B\x3\x2\x2\x2\x66E\x670\a\x4BD\x2\x2\x66F\x66E\x3\x2\x2\x2\x66F"+
		"\x670\x3\x2\x2\x2\x670-\x3\x2\x2\x2\x671\x672\a\x2F8\x2\x2\x672\x673\a"+
		"\x4BA\x2\x2\x673\x674\t\x5\x2\x2\x674\x675\a\x4BC\x2\x2\x675\x676\x5\x39A"+
		"\x1CE\x2\x676\x677\a\x4BC\x2\x2\x677\x67F\x5\x39A\x1CE\x2\x678\x67B\a"+
		"\x4BC\x2\x2\x679\x67C\x5\x39A\x1CE\x2\x67A\x67C\a\x281\x2\x2\x67B\x679"+
		"\x3\x2\x2\x2\x67B\x67A\x3\x2\x2\x2\x67C\x67E\x3\x2\x2\x2\x67D\x678\x3"+
		"\x2\x2\x2\x67E\x681\x3\x2\x2\x2\x67F\x67D\x3\x2\x2\x2\x67F\x680\x3\x2"+
		"\x2\x2\x680\x682\x3\x2\x2\x2\x681\x67F\x3\x2\x2\x2\x682\x685\a\x4BB\x2"+
		"\x2\x683\x684\a\x439\x2\x2\x684\x686\t\x6\x2\x2\x685\x683\x3\x2\x2\x2"+
		"\x685\x686\x3\x2\x2\x2\x686\x688\x3\x2\x2\x2\x687\x689\a\x4BD\x2\x2\x688"+
		"\x687\x3\x2\x2\x2\x688\x689\x3\x2\x2\x2\x689\x695\x3\x2\x2\x2\x68A\x68B"+
		"\a\x2F8\x2\x2\x68B\x68C\a\x4A2\x2\x2\x68C\x691\t\a\x2\x2\x68D\x68E\a\x4BC"+
		"\x2\x2\x68E\x690\t\x5\x2\x2\x68F\x68D\x3\x2\x2\x2\x690\x693\x3\x2\x2\x2"+
		"\x691\x68F\x3\x2\x2\x2\x691\x692\x3\x2\x2\x2\x692\x695\x3\x2\x2\x2\x693"+
		"\x691\x3\x2\x2\x2\x694\x671\x3\x2\x2\x2\x694\x68A\x3\x2\x2\x2\x695/\x3"+
		"\x2\x2\x2\x696\x697\a\x4BD\x2\x2\x697\x31\x3\x2\x2\x2\x698\x6AA\x5\x1C6"+
		"\xE4\x2\x699\x6AA\x5\x330\x199\x2\x69A\x6AA\x5\x1CE\xE8\x2\x69B\x6AA\x5"+
		"\x1CC\xE7\x2\x69C\x6AA\x5\x1C2\xE2\x2\x69D\x6AA\x5\x2E0\x171\x2\x69E\x6AA"+
		"\x5\x2DC\x16F\x2\x69F\x6AA\x5\x2F4\x17B\x2\x6A0\x6AA\x5\x2EC\x177\x2\x6A1"+
		"\x6AA\x5\x1D0\xE9\x2\x6A2\x6AA\x5\x32C\x197\x2\x6A3\x6AA\x5\x304\x183"+
		"\x2\x6A4\x6AA\x5\x322\x192\x2\x6A5\x6AA\x5\x32A\x196\x2\x6A6\x6AA\x5\x32E"+
		"\x198\x2\x6A7\x6AA\x5\x324\x193\x2\x6A8\x6AA\x5\x328\x195\x2\x6A9\x698"+
		"\x3\x2\x2\x2\x6A9\x699\x3\x2\x2\x2\x6A9\x69A\x3\x2\x2\x2\x6A9\x69B\x3"+
		"\x2\x2\x2\x6A9\x69C\x3\x2\x2\x2\x6A9\x69D\x3\x2\x2\x2\x6A9\x69E\x3\x2"+
		"\x2\x2\x6A9\x69F\x3\x2\x2\x2\x6A9\x6A0\x3\x2\x2\x2\x6A9\x6A1\x3\x2\x2"+
		"\x2\x6A9\x6A2\x3\x2\x2\x2\x6A9\x6A3\x3\x2\x2\x2\x6A9\x6A4\x3\x2\x2\x2"+
		"\x6A9\x6A5\x3\x2\x2\x2\x6A9\x6A6\x3\x2\x2\x2\x6A9\x6A7\x3\x2\x2\x2\x6A9"+
		"\x6A8\x3\x2\x2\x2\x6AA\x33\x3\x2\x2\x2\x6AB\x6AC\a%\x2\x2\x6AC\x6AD\a"+
		"\x32\x2\x2\x6AD\x6AE\a\x341\x2\x2\x6AE\x6AF\x5\x4C2\x262\x2\x6AF\x6B6"+
		"\a\x439\x2\x2\x6B0\x6B2\a\x4BC\x2\x2\x6B1\x6B0\x3\x2\x2\x2\x6B1\x6B2\x3"+
		"\x2\x2\x2\x6B2\x6B3\x3\x2\x2\x2\x6B3\x6B4\a\x253\x2\x2\x6B4\x6B5\a\x4A8"+
		"\x2\x2\x6B5\x6B7\x5\x4C2\x262\x2\x6B6\x6B1\x3\x2\x2\x2\x6B6\x6B7\x3\x2"+
		"\x2\x2\x6B7\x6BE\x3\x2\x2\x2\x6B8\x6BA\a\x4BC\x2\x2\x6B9\x6B8\x3\x2\x2"+
		"\x2\x6B9\x6BA\x3\x2\x2\x2\x6BA\x6BB\x3\x2\x2\x2\x6BB\x6BC\a\x2BE\x2\x2"+
		"\x6BC\x6BD\a\x4A8\x2\x2\x6BD\x6BF\a\x4A4\x2\x2\x6BE\x6B9\x3\x2\x2\x2\x6BE"+
		"\x6BF\x3\x2\x2\x2\x6BF\x6C6\x3\x2\x2\x2\x6C0\x6C2\a\x4BC\x2\x2\x6C1\x6C0"+
		"\x3\x2\x2\x2\x6C1\x6C2\x3\x2\x2\x2\x6C2\x6C3\x3\x2\x2\x2\x6C3\x6C4\a\xFE"+
		"\x2\x2\x6C4\x6C5\a\x4A8\x2\x2\x6C5\x6C7\x5\x4C2\x262\x2\x6C6\x6C1\x3\x2"+
		"\x2\x2\x6C6\x6C7\x3\x2\x2\x2\x6C7\x35\x3\x2\x2\x2\x6C8\x6C9\a%\x2\x2\x6C9"+
		"\x6CA\a\x444\x2\x2\x6CA\x6CB\a\x35A\x2\x2\x6CB\x6CF\a\x9C\x2\x2\x6CC\x6CD"+
		"\x5\x4C2\x262\x2\x6CD\x6CE\a\x4B5\x2\x2\x6CE\x6D0\x3\x2\x2\x2\x6CF\x6CC"+
		"\x3\x2\x2\x2\x6CF\x6D0\x3\x2\x2\x2\x6D0\x6D1\x3\x2\x2\x2\x6D1\x6D2\x5"+
		"\x4C2\x262\x2\x6D2\x6D3\a\r\x2\x2\x6D3\x6D4\a\x4A4\x2\x2\x6D4\x37\x3\x2"+
		"\x2\x2\x6D5\x6D6\a\xC9\x2\x2\x6D6\x6D7\a\x32\x2\x2\x6D7\x6D8\a\x341\x2"+
		"\x2\x6D8\x6D9\x5\x4C2\x262\x2\x6D9\x6E0\a\x439\x2\x2\x6DA\x6DC\a\x4BC"+
		"\x2\x2\x6DB\x6DA\x3\x2\x2\x2\x6DB\x6DC\x3\x2\x2\x2\x6DC\x6DD\x3\x2\x2"+
		"\x2\x6DD\x6DE\a\x2BE\x2\x2\x6DE\x6DF\a\x4A8\x2\x2\x6DF\x6E1\a\x4A4\x2"+
		"\x2\x6E0\x6DB\x3\x2\x2\x2\x6E0\x6E1\x3\x2\x2\x2\x6E1\x6E8\x3\x2\x2\x2"+
		"\x6E2\x6E4\a\x4BC\x2\x2\x6E3\x6E2\x3\x2\x2\x2\x6E3\x6E4\x3\x2\x2\x2\x6E4"+
		"\x6E5\x3\x2\x2\x2\x6E5\x6E6\a\xFE\x2\x2\x6E6\x6E7\a\x4A8\x2\x2\x6E7\x6E9"+
		"\x5\x4C2\x262\x2\x6E8\x6E3\x3\x2\x2\x2\x6E8\x6E9\x3\x2\x2\x2\x6E9\x39"+
		"\x3\x2\x2\x2\x6EA\x6EB\a\x11E\x2\x2\x6EB\x6EE\a\x16\x2\x2\x6EC\x6ED\a"+
		"\x1B6\x2\x2\x6ED\x6EF\a\x147\x2\x2\x6EE\x6EC\x3\x2\x2\x2\x6EE\x6EF\x3"+
		"\x2\x2\x2\x6EF\x6F3\x3\x2\x2\x2\x6F0\x6F1\x5\x4C2\x262\x2\x6F1\x6F2\a"+
		"\x4B5\x2\x2\x6F2\x6F4\x3\x2\x2\x2\x6F3\x6F0\x3\x2\x2\x2\x6F3\x6F4\x3\x2"+
		"\x2\x2\x6F4\x6F5\x3\x2\x2\x2\x6F5\x6F6\x5\x4C2\x262\x2\x6F6;\x3\x2\x2"+
		"\x2\x6F7\x6F8\a\x11E\x2\x2\x6F8\x6F9\a\x32\x2\x2\x6F9\x6FA\a\x341\x2\x2"+
		"\x6FA\x6FB\x5\x4C2\x262\x2\x6FB=\x3\x2\x2\x2\x6FC\x6FD\x5@!\x2\x6FD\x6FE"+
		"\x5\x4C2\x262\x2\x6FE\x6FF\x5\x42\"\x2\x6FF?\x3\x2\x2\x2\x700\x701\a%"+
		"\x2\x2\x701\x702\a=\x2\x2\x702\x41\x3\x2\x2\x2\x703\x705\x5\x44#\x2\x704"+
		"\x703\x3\x2\x2\x2\x704\x705\x3\x2\x2\x2\x705\x707\x3\x2\x2\x2\x706\x708"+
		"\x5Z.\x2\x707\x706\x3\x2\x2\x2\x707\x708\x3\x2\x2\x2\x708\x70A\x3\x2\x2"+
		"\x2\x709\x70B\x5H%\x2\x70A\x709\x3\x2\x2\x2\x70A\x70B\x3\x2\x2\x2\x70B"+
		"\x70D\x3\x2\x2\x2\x70C\x70E\x5N(\x2\x70D\x70C\x3\x2\x2\x2\x70D\x70E\x3"+
		"\x2\x2\x2\x70E\x43\x3\x2\x2\x2\x70F\x712\x5\x46$\x2\x710\x713\x5^\x30"+
		"\x2\x711\x713\x5V,\x2\x712\x710\x3\x2\x2\x2\x712\x711\x3\x2\x2\x2\x713"+
		"\x45\x3\x2\x2\x2\x714\x715\a\x181\x2\x2\x715G\x3\x2\x2\x2\x716\x717\x5"+
		"L\'\x2\x717\x718\x5J&\x2\x718I\x3\x2\x2\x2\x719\x71C\a\x18\x2\x2\x71A"+
		"\x71C\x5p\x39\x2\x71B\x719\x3\x2\x2\x2\x71B\x71A\x3\x2\x2\x2\x71CK\x3"+
		"\x2\x2\x2\x71D\x71E\a\x11E\x2\x2\x71EM\x3\x2\x2\x2\x71F\x720\x5P)\x2\x720"+
		"\x721\x5R*\x2\x721O\x3\x2\x2\x2\x722\x723\a\r\x2\x2\x723\x724\a\x15C\x2"+
		"\x2\x724\x725\a\x181\x2\x2\x725Q\x3\x2\x2\x2\x726\x72A\x5T+\x2\x727\x728"+
		"\x5X-\x2\x728\x729\x5\x4C2\x262\x2\x729\x72B\x3\x2\x2\x2\x72A\x727\x3"+
		"\x2\x2\x2\x72A\x72B\x3\x2\x2\x2\x72BS\x3\x2\x2\x2\x72C\x72D\a\x4A4\x2"+
		"\x2\x72DU\x3\x2\x2\x2\x72E\x72F\x5X-\x2\x72F\x730\x5\x4C2\x262\x2\x730"+
		"W\x3\x2\x2\x2\x731\x732\a:\x2\x2\x732Y\x3\x2\x2\x2\x733\x734\x5\\/\x2"+
		"\x734\x735\x5`\x31\x2\x735[\x3\x2\x2\x2\x736\x737\a\x439\x2\x2\x737]\x3"+
		"\x2\x2\x2\x738\x73C\x5\x62\x32\x2\x739\x73C\x5l\x37\x2\x73A\x73C\a\x4A4"+
		"\x2\x2\x73B\x738\x3\x2\x2\x2\x73B\x739\x3\x2\x2\x2\x73B\x73A\x3\x2\x2"+
		"\x2\x73C_\x3\x2\x2\x2\x73D\x73E\b\x31\x1\x2\x73E\x73F\a\x2C8\x2\x2\x73F"+
		"\x740\a\x4A8\x2\x2\x740\x747\t\b\x2\x2\x741\x742\a\x42F\x2\x2\x742\x743"+
		"\a\x4A8\x2\x2\x743\x747\x5\x4A0\x251\x2\x744\x745\a\x409\x2\x2\x745\x747"+
		"\a\xDC\x2\x2\x746\x73D\x3\x2\x2\x2\x746\x741\x3\x2\x2\x2\x746\x744\x3"+
		"\x2\x2\x2\x747\x74C\x3\x2\x2\x2\x748\x749\f\x3\x2\x2\x749\x74B\a\x4BC"+
		"\x2\x2\x74A\x748\x3\x2\x2\x2\x74B\x74E\x3\x2\x2\x2\x74C\x74A\x3\x2\x2"+
		"\x2\x74C\x74D\x3\x2\x2\x2\x74D\x61\x3\x2\x2\x2\x74E\x74C\x3\x2\x2\x2\x74F"+
		"\x750\x5\x66\x34\x2\x750\x751\x5\x64\x33\x2\x751\x752\x5h\x35\x2\x752"+
		"\x63\x3\x2\x2\x2\x753\x754\x5\x4C2\x262\x2\x754\x65\x3\x2\x2\x2\x755\x756"+
		"\a\x11C\x2\x2\x756g\x3\x2\x2\x2\x757\x758\x5j\x36\x2\x758\x759\x5h\x35"+
		"\x2\x759\x75C\x3\x2\x2\x2\x75A\x75C\x5\x4C2\x262\x2\x75B\x757\x3\x2\x2"+
		"\x2\x75B\x75A\x3\x2\x2\x2\x75Ci\x3\x2\x2\x2\x75D\x75E\aV\x2\x2\x75Ek\x3"+
		"\x2\x2\x2\x75F\x760\x5n\x38\x2\x760\x761\x5h\x35\x2\x761m\x3\x2\x2\x2"+
		"\x762\x763\a\x494\x2\x2\x763o\x3\x2\x2\x2\x764\x765\x5r:\x2\x765\x766"+
		"\x5l\x37\x2\x766\x767\a\x49E\x2\x2\x767\x768\a\x4BC\x2\x2\x768\x76B\x3"+
		"\x2\x2\x2\x769\x76B\x5l\x37\x2\x76A\x764\x3\x2\x2\x2\x76A\x769\x3\x2\x2"+
		"\x2\x76Bq\x3\x2\x2\x2\x76C\x76D\a\x49E\x2\x2\x76Ds\x3\x2\x2\x2\x76E\x76F"+
		"\a\xC9\x2\x2\x76F\x770\a=\x2\x2\x770\x773\x5\x4C2\x262\x2\x771\x772\a"+
		"\x46\x2\x2\x772\x774\x5\x4C2\x262\x2\x773\x771\x3\x2\x2\x2\x773\x774\x3"+
		"\x2\x2\x2\x774\x775\x3\x2\x2\x2\x775\x77A\a\x181\x2\x2\x776\x778\a\x4BC"+
		"\x2\x2\x777\x776\x3\x2\x2\x2\x777\x778\x3\x2\x2\x2\x778\x779\x3\x2\x2"+
		"\x2\x779\x77B\t\t\x2\x2\x77A\x777\x3\x2\x2\x2\x77B\x77C\x3\x2\x2\x2\x77C"+
		"\x77A\x3\x2\x2\x2\x77C\x77D\x3\x2\x2\x2\x77D\x782\x3\x2\x2\x2\x77E\x77F"+
		"\a\x439\x2\x2\x77F\x780\a\x2C8\x2\x2\x780\x781\a\x4A8\x2\x2\x781\x783"+
		"\t\b\x2\x2\x782\x77E\x3\x2\x2\x2\x782\x783\x3\x2\x2\x2\x783u\x3\x2\x2"+
		"\x2\x784\x785\a\x11E\x2\x2\x785\x788\a=\x2\x2\x786\x787\a\x1B6\x2\x2\x787"+
		"\x789\a\x147\x2\x2\x788\x786\x3\x2\x2\x2\x788\x789\x3\x2\x2\x2\x789\x78E"+
		"\x3\x2\x2\x2\x78A\x78C\a\x4BC\x2\x2\x78B\x78A\x3\x2\x2\x2\x78B\x78C\x3"+
		"\x2\x2\x2\x78C\x78D\x3\x2\x2\x2\x78D\x78F\x5\x4C2\x262\x2\x78E\x78B\x3"+
		"\x2\x2\x2\x78F\x790\x3\x2\x2\x2\x790\x78E\x3\x2\x2\x2\x790\x791\x3\x2"+
		"\x2\x2\x791\x795\x3\x2\x2\x2\x792\x793\a\x439\x2\x2\x793\x794\a\x25F\x2"+
		"\x2\x794\x796\a\x106\x2\x2\x795\x792\x3\x2\x2\x2\x795\x796\x3\x2\x2\x2"+
		"\x796w\x3\x2\x2\x2\x797\x798\x5z>\x2\x798\x79D\x5\x4C2\x262\x2\x799\x79E"+
		"\x5|?\x2\x79A\x79B\a\x31B\x2\x2\x79B\x79C\a\x2DF\x2\x2\x79C\x79E\a\x1F1"+
		"\x2\x2\x79D\x799\x3\x2\x2\x2\x79D\x79A\x3\x2\x2\x2\x79Ey\x3\x2\x2\x2\x79F"+
		"\x7A0\a%\x2\x2\x7A0\x7A1\a?\x2\x2\x7A1\x7A2\a\x1F1\x2\x2\x7A2{\x3\x2\x2"+
		"\x2\x7A3\x7A4\x5~@\x2\x7A4\x7A7\x5\x80\x41\x2\x7A5\x7A6\a\x4BC\x2\x2\x7A6"+
		"\x7A8\x5\x80\x41\x2\x7A7\x7A5\x3\x2\x2\x2\x7A7\x7A8\x3\x2\x2\x2\x7A8\x7A9"+
		"\x3\x2\x2\x2\x7A9\x7AA\a\x4BB\x2\x2\x7AA}\x3\x2\x2\x2\x7AB\x7AC\a\x439"+
		"\x2\x2\x7AC\x7AD\a\x2DF\x2\x2\x7AD\x7AE\a\x1F1\x2\x2\x7AE\x7AF\a\x4BA"+
		"\x2\x2\x7AF\x7F\x3\x2\x2\x2\x7B0\x7B1\a\xF8\x2\x2\x7B1\x7B2\ap\x2\x2\x7B2"+
		"\x7B3\a\x2BE\x2\x2\x7B3\x7B4\a\x4A8\x2\x2\x7B4\x7BB\a\x4A4\x2\x2\x7B5"+
		"\x7B6\a\x12E\x2\x2\x7B6\x7B7\ap\x2\x2\x7B7\x7B8\a\x2BE\x2\x2\x7B8\x7B9"+
		"\a\x4A8\x2\x2\x7B9\x7BB\a\x4A4\x2\x2\x7BA\x7B0\x3\x2\x2\x2\x7BA\x7B5\x3"+
		"\x2\x2\x2\x7BB\x81\x3\x2\x2\x2\x7BC\x7BD\a\xC9\x2\x2\x7BD\x7BE\a?\x2\x2"+
		"\x7BE\x7BF\a\x1F1\x2\x2\x7BF\x7C2\x5\x4C2\x262\x2\x7C0\x7C1\a\x46\x2\x2"+
		"\x7C1\x7C3\x5\x4C2\x262\x2\x7C2\x7C0\x3\x2\x2\x2\x7C2\x7C3\x3\x2\x2\x2"+
		"\x7C3\x7D1\x3\x2\x2\x2\x7C4\x7CF\a\x181\x2\x2\x7C5\x7C6\a\x15C\x2\x2\x7C6"+
		"\x7C7\a\x4A8\x2\x2\x7C7\x7D0\a\x4A4\x2\x2\x7C8\x7C9\a\x144\x2\x2\x7C9"+
		"\x7CA\a\x4A8\x2\x2\x7CA\x7D0\a\x4A4\x2\x2\x7CB\x7CC\a=\x2\x2\x7CC\x7D0"+
		"\x5\x4C2\x262\x2\x7CD\x7CE\a\x2E9\x2\x2\x7CE\x7D0\x5\x4C2\x262\x2\x7CF"+
		"\x7C5\x3\x2\x2\x2\x7CF\x7C8\x3\x2\x2\x2\x7CF\x7CB\x3\x2\x2\x2\x7CF\x7CD"+
		"\x3\x2\x2\x2\x7D0\x7D2\x3\x2\x2\x2\x7D1\x7C4\x3\x2\x2\x2\x7D1\x7D2\x3"+
		"\x2\x2\x2\x7D2\x7DF\x3\x2\x2\x2\x7D3\x7DD\a\x439\x2\x2\x7D4\x7D5\a\x17"+
		"\x2\x2\x7D5\x7D6\a\x4A8\x2\x2\x7D6\x7DE\t\n\x2\x2\x7D7\x7D8\a\x2EA\x2"+
		"\x2\x7D8\x7D9\a\x4A8\x2\x2\x7D9\x7DE\a\x4A4\x2\x2\x7DA\x7DB\a\xCB\x2\x2"+
		"\x7DB\x7DC\a\x4A8\x2\x2\x7DC\x7DE\t\v\x2\x2\x7DD\x7D4\x3\x2\x2\x2\x7DD"+
		"\x7D7\x3\x2\x2\x2\x7DD\x7DA\x3\x2\x2\x2\x7DE\x7E0\x3\x2\x2\x2\x7DF\x7D3"+
		"\x3\x2\x2\x2\x7DF\x7E0\x3\x2\x2\x2\x7E0\x7E6\x3\x2\x2\x2\x7E1\x7E2\a\x12E"+
		"\x2\x2\x7E2\x7E3\ap\x2\x2\x7E3\x7E4\a\x2BE\x2\x2\x7E4\x7E5\a\x4A8\x2\x2"+
		"\x7E5\x7E7\a\x4A4\x2\x2\x7E6\x7E1\x3\x2\x2\x2\x7E6\x7E7\x3\x2\x2\x2\x7E7"+
		"\x83\x3\x2\x2\x2\x7E8\x7E9\a\x11E\x2\x2\x7E9\x7EA\a?\x2\x2\x7EA\x7EB\a"+
		"\x1F1\x2\x2\x7EB\x7EF\x5\x4C2\x262\x2\x7EC\x7ED\a\x31B\x2\x2\x7ED\x7EE"+
		"\a\x2E9\x2\x2\x7EE\x7F0\a\x1F1\x2\x2\x7EF\x7EC\x3\x2\x2\x2\x7EF\x7F0\x3"+
		"\x2\x2\x2\x7F0\x85\x3\x2\x2\x2\x7F1\x7F5\x5\x8EH\x2\x7F2\x7F3\x5\x96L"+
		"\x2\x7F3\x7F4\x5\x8CG\x2\x7F4\x7F6\x3\x2\x2\x2\x7F5\x7F2\x3\x2\x2\x2\x7F5"+
		"\x7F6\x3\x2\x2\x2\x7F6\x7F7\x3\x2\x2\x2\x7F7\x7F8\x5\x480\x241\x2\x7F8"+
		"\x7F9\x5\x8A\x46\x2\x7F9\x7FA\x5\x88\x45\x2\x7FA\x87\x3\x2\x2\x2\x7FB"+
		"\x7FF\x5\x4C2\x262\x2\x7FC\x7FD\a\x35A\x2\x2\x7FD\x7FF\a\x2AE\x2\x2\x7FE"+
		"\x7FB\x3\x2\x2\x2\x7FE\x7FC\x3\x2\x2\x2\x7FF\x89\x3\x2\x2\x2\x800\x801"+
		"\a\x3EB\x2\x2\x801\x8B\x3\x2\x2\x2\x802\x803\a\x4BF\x2\x2\x803\x8D\x3"+
		"\x2\x2\x2\x804\x805\a%\x2\x2\x805\x806\a\x46\x2\x2\x806\x807\a\x294\x2"+
		"\x2\x807\x8F\x3\x2\x2\x2\x808\x80C\x5\x8EH\x2\x809\x80A\x5\x98M\x2\x80A"+
		"\x80B\x5\x8CG\x2\x80B\x80D\x3\x2\x2\x2\x80C\x809\x3\x2\x2\x2\x80C\x80D"+
		"\x3\x2\x2\x2\x80D\x80E\x3\x2\x2\x2\x80E\x80F\x5\x480\x241\x2\x80F\x810"+
		"\x5\x8A\x46\x2\x810\x811\x5\x88\x45\x2\x811\x91\x3\x2\x2\x2\x812\x816"+
		"\x5\x8EH\x2\x813\x814\x5\x9AN\x2\x814\x815\x5\x8CG\x2\x815\x817\x3\x2"+
		"\x2\x2\x816\x813\x3\x2\x2\x2\x816\x817\x3\x2\x2\x2\x817\x818\x3\x2\x2"+
		"\x2\x818\x819\x5\x482\x242\x2\x819\x81A\x5\x8A\x46\x2\x81A\x81B\x5\x88"+
		"\x45\x2\x81B\x93\x3\x2\x2\x2\x81C\x820\x5\x8EH\x2\x81D\x81E\x5\x9CO\x2"+
		"\x81E\x81F\x5\x8CG\x2\x81F\x821\x3\x2\x2\x2\x820\x81D\x3\x2\x2\x2\x820"+
		"\x821\x3\x2\x2\x2\x821\x822\x3\x2\x2\x2\x822\x823\x5\x484\x243\x2\x823"+
		"\x824\x5\x8A\x46\x2\x824\x825\x5\x88\x45\x2\x825\x95\x3\x2\x2\x2\x826"+
		"\x849\a\x286\x2\x2\x827\x849\a=\x2\x2\x828\x829\a?\x2\x2\x829\x849\a\x1F1"+
		"\x2\x2\x82A\x82B\aS\x2\x2\x82B\x849\a\x19A\x2\x2\x82C\x849\a|\x2\x2\x82D"+
		"\x849\a\xBE\x2\x2\x82E\x849\a\x403\x2\x2\x82F\x849\a\xDD\x2\x2\x830\x849"+
		"\a\x131\x2\x2\x831\x832\a\x184\x2\x2\x832\x849\ax\x2\x2\x833\x834\a\x184"+
		"\x2\x2\x834\x849\a\x3BF\x2\x2\x835\x836\a\x240\x2\x2\x836\x849\a\x403"+
		"\x2\x2\x837\x838\a\x318\x2\x2\x838\x839\a\x37C\x2\x2\x839\x849\a\x62\x2"+
		"\x2\x83A\x849\a\x341\x2\x2\x83B\x849\a\x345\x2\x2\x83C\x849\a\x35A\x2"+
		"\x2\x83D\x83E\a\x364\x2\x2\x83E\x83F\a\x2E8\x2\x2\x83F\x849\a\x208\x2"+
		"\x2\x840\x841\a\x37A\x2\x2\x841\x849\a\x341\x2\x2\x842\x849\a\x37C\x2"+
		"\x2\x843\x844\a\x3D2\x2\x2\x844\x849\a\x1F1\x2\x2\x845\x846\a\x444\x2"+
		"\x2\x846\x847\a\x35A\x2\x2\x847\x849\a\x9C\x2\x2\x848\x826\x3\x2\x2\x2"+
		"\x848\x827\x3\x2\x2\x2\x848\x828\x3\x2\x2\x2\x848\x82A\x3\x2\x2\x2\x848"+
		"\x82C\x3\x2\x2\x2\x848\x82D\x3\x2\x2\x2\x848\x82E\x3\x2\x2\x2\x848\x82F"+
		"\x3\x2\x2\x2\x848\x830\x3\x2\x2\x2\x848\x831\x3\x2\x2\x2\x848\x833\x3"+
		"\x2\x2\x2\x848\x835\x3\x2\x2\x2\x848\x837\x3\x2\x2\x2\x848\x83A\x3\x2"+
		"\x2\x2\x848\x83B\x3\x2\x2\x2\x848\x83C\x3\x2\x2\x2\x848\x83D\x3\x2\x2"+
		"\x2\x848\x840\x3\x2\x2\x2\x848\x842\x3\x2\x2\x2\x848\x843\x3\x2\x2\x2"+
		"\x848\x845\x3\x2\x2\x2\x849\x97\x3\x2\x2\x2\x84A\x860\a\x286\x2\x2\x84B"+
		"\x860\a=\x2\x2\x84C\x84D\a?\x2\x2\x84D\x860\a\x1F1\x2\x2\x84E\x860\a|"+
		"\x2\x2\x84F\x860\a\x403\x2\x2\x850\x860\a\xDD\x2\x2\x851\x852\a\x184\x2"+
		"\x2\x852\x860\ax\x2\x2\x853\x854\a\x184\x2\x2\x854\x860\a\x3BF\x2\x2\x855"+
		"\x860\a\x341\x2\x2\x856\x860\a\x35A\x2\x2\x857\x858\a\x364\x2\x2\x858"+
		"\x859\a\x2E8\x2\x2\x859\x860\a\x208\x2\x2\x85A\x85B\a\x3D2\x2\x2\x85B"+
		"\x860\a\x1F1\x2\x2\x85C\x85D\a\x444\x2\x2\x85D\x85E\a\x35A\x2\x2\x85E"+
		"\x860\a\x9C\x2\x2\x85F\x84A\x3\x2\x2\x2\x85F\x84B\x3\x2\x2\x2\x85F\x84C"+
		"\x3\x2\x2\x2\x85F\x84E\x3\x2\x2\x2\x85F\x84F\x3\x2\x2\x2\x85F\x850\x3"+
		"\x2\x2\x2\x85F\x851\x3\x2\x2\x2\x85F\x853\x3\x2\x2\x2\x85F\x855\x3\x2"+
		"\x2\x2\x85F\x856\x3\x2\x2\x2\x85F\x857\x3\x2\x2\x2\x85F\x85A\x3\x2\x2"+
		"\x2\x85F\x85C\x3\x2\x2\x2\x860\x99\x3\x2\x2\x2\x861\x862\t\f\x2\x2\x862"+
		"\x9B\x3\x2\x2\x2\x863\x864\t\r\x2\x2\x864\x9D\x3\x2\x2\x2\x865\x866\a"+
		"\x32\x2\x2\x866\x8C1\a\x341\x2\x2\x867\x8C1\a=\x2\x2\x868\x869\a?\x2\x2"+
		"\x869\x8C1\a\x1F1\x2\x2\x86A\x8C1\a\x42\x2\x2\x86B\x86C\aS\x2\x2\x86C"+
		"\x8C1\a\x19A\x2\x2\x86D\x86E\ai\x2\x2\x86E\x8C1\a\x2DD\x2\x2\x86F\x8C1"+
		"\a|\x2\x2\x870\x871\a\x9D\x2\x2\x871\x872\t\xE\x2\x2\x872\x8C1\a\x1F1"+
		"\x2\x2\x873\x8C1\a\xBE\x2\x2\x874\x8C1\a\xCC\x2\x2\x875\x876\a\xCE\x2"+
		"\x2\x876\x8C1\a\x2E9\x2\x2\x877\x885\a\xDD\x2\x2\x878\x879\a\x42\x2\x2"+
		"\x879\x886\a\x3A5\x2\x2\x87A\x87B\a\x12E\x2\x2\x87B\x886\a\x1F1\x2\x2"+
		"\x87C\x87D\a\x13E\x2\x2\x87D\x886\a\x381\x2\x2\x87E\x883\a\x35F\x2\x2"+
		"\x87F\x884\a\xB1\x2\x2\x880\x884\a\xCC\x2\x2\x881\x882\a\x32E\x2\x2\x882"+
		"\x884\a\x197\x2\x2\x883\x87F\x3\x2\x2\x2\x883\x880\x3\x2\x2\x2\x883\x881"+
		"\x3\x2\x2\x2\x884\x886\x3\x2\x2\x2\x885\x878\x3\x2\x2\x2\x885\x87A\x3"+
		"\x2\x2\x2\x885\x87C\x3\x2\x2\x2\x885\x87E\x3\x2\x2\x2\x885\x886\x3\x2"+
		"\x2\x2\x886\x8C1\x3\x2\x2\x2\x887\x8C1\a\x131\x2\x2\x888\x889\a\x13E\x2"+
		"\x2\x889\x8C1\a\x381\x2\x2\x88A\x88B\a\x272\x2\x2\x88B\x8C1\t\xF\x2\x2"+
		"\x88C\x897\a\x150\x2\x2\x88D\x88E\a\xDC\x2\x2\x88E\x898\a\x3A1\x2\x2\x88F"+
		"\x890\a\x15C\x2\x2\x890\x898\a\x17B\x2\x2\x891\x898\a\x202\x2\x2\x892"+
		"\x893\a\x32E\x2\x2\x893\x898\a\x2D4\x2\x2\x894\x898\a\x3D7\x2\x2\x895"+
		"\x898\ax\x2\x2\x896\x898\a\x3BF\x2\x2\x897\x88D\x3\x2\x2\x2\x897\x88F"+
		"\x3\x2\x2\x2\x897\x891\x3\x2\x2\x2\x897\x892\x3\x2\x2\x2\x897\x894\x3"+
		"\x2\x2\x2\x897\x895\x3\x2\x2\x2\x897\x896\x3\x2\x2\x2\x898\x8C1\x3\x2"+
		"\x2\x2\x899\x8C1\a\x215\x2\x2\x89A\x89B\a\x21F\x2\x2\x89B\x8C1\a\x1F1"+
		"\x2\x2\x89C\x89D\a\x240\x2\x2\x89D\x8C1\a\x403\x2\x2\x89E\x8C1\a\x286"+
		"\x2\x2\x89F\x8A0\a\x2BB\x2\x2\x8A0\x8C1\t\x10\x2\x2\x8A1\x8A2\a\x318\x2"+
		"\x2\x8A2\x8A3\a\x37C\x2\x2\x8A3\x8C1\a\x62\x2\x2\x8A4\x8A5\a\x32E\x2\x2"+
		"\x8A5\x8C1\a\x197\x2\x2\x8A6\x8C1\a\x341\x2\x2\x8A7\x8C1\a\x345\x2\x2"+
		"\x8A8\x8C1\a\x35A\x2\x2\x8A9\x8AA\a\x364\x2\x2\x8AA\x8AB\a\x2E8\x2\x2"+
		"\x8AB\x8C1\a\x208\x2\x2\x8AC\x8B2\a\x37A\x2\x2\x8AD\x8AF\a\x42\x2\x2\x8AE"+
		"\x8B0\a\x3A5\x2\x2\x8AF\x8AE\x3\x2\x2\x2\x8AF\x8B0\x3\x2\x2\x2\x8B0\x8B3"+
		"\x3\x2\x2\x2\x8B1\x8B3\a\x341\x2\x2\x8B2\x8AD\x3\x2\x2\x2\x8B2\x8B1\x3"+
		"\x2\x2\x2\x8B2\x8B3\x3\x2\x2\x2\x8B3\x8C1\x3\x2\x2\x2\x8B4\x8C1\a\x37C"+
		"\x2\x2\x8B5\x8B6\a\x3A7\x2\x2\x8B6\x8C1\a\x215\x2\x2\x8B7\x8B8\a\x3D2"+
		"\x2\x2\x8B8\x8C1\a\x1F1\x2\x2\x8B9\x8BA\a\x3F8\x2\x2\x8BA\x8C1\t\x11\x2"+
		"\x2\x8BB\x8C1\a\x403\x2\x2\x8BC\x8C1\a\x41C\x2\x2\x8BD\x8BE\a\x444\x2"+
		"\x2\x8BE\x8BF\a\x35A\x2\x2\x8BF\x8C1\a\x9C\x2\x2\x8C0\x865\x3\x2\x2\x2"+
		"\x8C0\x867\x3\x2\x2\x2\x8C0\x868\x3\x2\x2\x2\x8C0\x86A\x3\x2\x2\x2\x8C0"+
		"\x86B\x3\x2\x2\x2\x8C0\x86D\x3\x2\x2\x2\x8C0\x86F\x3\x2\x2\x2\x8C0\x870"+
		"\x3\x2\x2\x2\x8C0\x873\x3\x2\x2\x2\x8C0\x874\x3\x2\x2\x2\x8C0\x875\x3"+
		"\x2\x2\x2\x8C0\x877\x3\x2\x2\x2\x8C0\x887\x3\x2\x2\x2\x8C0\x888\x3\x2"+
		"\x2\x2\x8C0\x88A\x3\x2\x2\x2\x8C0\x88C\x3\x2\x2\x2\x8C0\x899\x3\x2\x2"+
		"\x2\x8C0\x89A\x3\x2\x2\x2\x8C0\x89C\x3\x2\x2\x2\x8C0\x89E\x3\x2\x2\x2"+
		"\x8C0\x89F\x3\x2\x2\x2\x8C0\x8A1\x3\x2\x2\x2\x8C0\x8A4\x3\x2\x2\x2\x8C0"+
		"\x8A6\x3\x2\x2\x2\x8C0\x8A7\x3\x2\x2\x2\x8C0\x8A8\x3\x2\x2\x2\x8C0\x8A9"+
		"\x3\x2\x2\x2\x8C0\x8AC\x3\x2\x2\x2\x8C0\x8B4\x3\x2\x2\x2\x8C0\x8B5\x3"+
		"\x2\x2\x2\x8C0\x8B7\x3\x2\x2\x2\x8C0\x8B9\x3\x2\x2\x2\x8C0\x8BB\x3\x2"+
		"\x2\x2\x8C0\x8BC\x3\x2\x2\x2\x8C0\x8BD\x3\x2\x2\x2\x8C1\x9F\x3\x2\x2\x2"+
		"\x8C2\x8C3\a\x11E\x2\x2\x8C3\x8C4\aS\x2\x2\x8C4\x8C5\a\x19A\x2\x2\x8C5"+
		"\x8C6\x5\x4C2\x262\x2\x8C6\xA1\x3\x2\x2\x2\x8C7\x8C8\x5\xA4S\x2\x8C8\x8C9"+
		"\x5\xA6T\x2\x8C9\xA3\x3\x2\x2\x2\x8CA\x8CB\a%\x2\x2\x8CB\x8CC\aS\x2\x2"+
		"\x8CC\x8CD\a\x19A\x2\x2\x8CD\x8CE\x5\x4C2\x262\x2\x8CE\xA5\x3\x2\x2\x2"+
		"\x8CF\x8D0\a\x386\x2\x2\x8D0\x8E0\a\x4BA\x2\x2\x8D1\x8D2\aJ\x2\x2\x8D2"+
		"\x8D3\a\x4A8\x2\x2\x8D3\x8E1\t\x12\x2\x2\x8D4\x8D5\a\x156\x2\x2\x8D5\x8D6"+
		"\a\x4A8\x2\x2\x8D6\x8E1\a\x4A2\x2\x2\x8D7\x8D8\a\x1A5\x2\x2\x8D8\x8D9"+
		"\a\x4A8\x2\x2\x8D9\x8E1\a\x4A2\x2\x2\x8DA\x8DB\a\xF1\x2\x2\x8DB\x8DC\a"+
		"\x4A8\x2\x2\x8DC\x8E1\t\x13\x2\x2\x8DD\x8DE\a\x32A\x2\x2\x8DE\x8DF\a\x4A8"+
		"\x2\x2\x8DF\x8E1\a\x4A2\x2\x2\x8E0\x8D1\x3\x2\x2\x2\x8E0\x8D4\x3\x2\x2"+
		"\x2\x8E0\x8D7\x3\x2\x2\x2\x8E0\x8DA\x3\x2\x2\x2\x8E0\x8DD\x3\x2\x2\x2"+
		"\x8E1\x8E2\x3\x2\x2\x2\x8E2\xA33\a\x4BB\x2\x2\x8E3\x8E4\a\r\x2\x2\x8E4"+
		"\x8E5\a\xDD\x2\x2\x8E5\xA33\x5\x4C2\x262\x2\x8E6\x8E7\a\x31B\x2\x2\x8E7"+
		"\x8E8\a\xDD\x2\x2\x8E8\xA33\x5\x4C2\x262\x2\x8E9\x8EA\a\r\x2\x2\x8EA\x8EB"+
		"\a\x323\x2\x2\x8EB\x8EC\a\x294\x2\x2\x8EC\x8ED\a\x4A4\x2\x2\x8ED\x8EE"+
		"\a\x439\x2\x2\x8EE\x8F2\a\x4BA\x2\x2\x8EF\x8F0\a\x132\x2\x2\x8F0\x8F1"+
		"\a\x4A8\x2\x2\x8F1\x8F3\a\x4A4\x2\x2\x8F2\x8EF\x3\x2\x2\x2\x8F2\x8F3\x3"+
		"\x2\x2\x2\x8F3\x8FA\x3\x2\x2\x2\x8F4\x8F6\a\x4BC\x2\x2\x8F5\x8F4\x3\x2"+
		"\x2\x2\x8F5\x8F6\x3\x2\x2\x2\x8F6\x8F7\x3\x2\x2\x2\x8F7\x8F8\aT\x2\x2"+
		"\x8F8\x8F9\a\x4A8\x2\x2\x8F9\x8FB\t\x14\x2\x2\x8FA\x8F5\x3\x2\x2\x2\x8FA"+
		"\x8FB\x3\x2\x2\x2\x8FB\x902\x3\x2\x2\x2\x8FC\x8FE\a\x4BC\x2\x2\x8FD\x8FC"+
		"\x3\x2\x2\x2\x8FD\x8FE\x3\x2\x2\x2\x8FE\x8FF\x3\x2\x2\x2\x8FF\x900\a\x153"+
		"\x2\x2\x900\x901\a\x4A8\x2\x2\x901\x903\t\x15\x2\x2\x902\x8FD\x3\x2\x2"+
		"\x2\x902\x903\x3\x2\x2\x2\x903\x90A\x3\x2\x2\x2\x904\x906\a\x4BC\x2\x2"+
		"\x905\x904\x3\x2\x2\x2\x905\x906\x3\x2\x2\x2\x906\x907\x3\x2\x2\x2\x907"+
		"\x908\a\x36E\x2\x2\x908\x909\a\x4A8\x2\x2\x909\x90B\t\x15\x2\x2\x90A\x905"+
		"\x3\x2\x2\x2\x90A\x90B\x3\x2\x2\x2\x90B\x912\x3\x2\x2\x2\x90C\x90E\a\x4BC"+
		"\x2\x2\x90D\x90C\x3\x2\x2\x2\x90D\x90E\x3\x2\x2\x2\x90E\x90F\x3\x2\x2"+
		"\x2\x90F\x910\aY\x2\x2\x910\x911\a\x4A8\x2\x2\x911\x913\a\x4A2\x2\x2\x912"+
		"\x90D\x3\x2\x2\x2\x912\x913\x3\x2\x2\x2\x913\x91D\x3\x2\x2\x2\x914\x916"+
		"\a\x4BC\x2\x2\x915\x914\x3\x2\x2\x2\x915\x916\x3\x2\x2\x2\x916\x917\x3"+
		"\x2\x2\x2\x917\x918\a\x2DA\x2\x2\x918\x919\a\x4BA\x2\x2\x919\x91A\a\x1A"+
		"\x2\x2\x91A\x91B\a\x4A8\x2\x2\x91B\x91C\t\x16\x2\x2\x91C\x91E\a\x4BB\x2"+
		"\x2\x91D\x915\x3\x2\x2\x2\x91D\x91E\x3\x2\x2\x2\x91E\x928\x3\x2\x2\x2"+
		"\x91F\x921\a\x4BC\x2\x2\x920\x91F\x3\x2\x2\x2\x920\x921\x3\x2\x2\x2\x921"+
		"\x922\x3\x2\x2\x2\x922\x923\a\x367\x2\x2\x923\x924\a\x4BA\x2\x2\x924\x925"+
		"\a\x1A\x2\x2\x925\x926\a\x4A8\x2\x2\x926\x927\a\x309\x2\x2\x927\x929\a"+
		"\x4BB\x2\x2\x928\x920\x3\x2\x2\x2\x928\x929\x3\x2\x2\x2\x929\x92A\x3\x2"+
		"\x2\x2\x92A\xA33\a\x4BB\x2\x2\x92B\x92C\a\x367\x2\x2\x92C\x935\a\x4BA"+
		"\x2\x2\x92D\x92E\a\x1A\x2\x2\x92E\x92F\a\x4A8\x2\x2\x92F\x936\t\x17\x2"+
		"\x2\x930\x931\a\x30A\x2\x2\x931\x932\a\x4A8\x2\x2\x932\x933\a\x4BA\x2"+
		"\x2\x933\x934\a\x4A4\x2\x2\x934\x936\a\x4BB\x2\x2\x935\x92D\x3\x2\x2\x2"+
		"\x935\x930\x3\x2\x2\x2\x936\xA33\x3\x2\x2\x2\x937\x938\a\x2DA\x2\x2\x938"+
		"\x94F\a\x4BA\x2\x2\x939\x93A\a\x1A\x2\x2\x93A\x93B\a\x4A8\x2\x2\x93B\x950"+
		"\t\x17\x2\x2\x93C\x93D\a\x30A\x2\x2\x93D\x93E\a\x4A8\x2\x2\x93E\x949\a"+
		"\x4BA\x2\x2\x93F\x941\a\x4BC\x2\x2\x940\x93F\x3\x2\x2\x2\x940\x941\x3"+
		"\x2\x2\x2\x941\x942\x3\x2\x2\x2\x942\x944\a\x4A4\x2\x2\x943\x940\x3\x2"+
		"\x2\x2\x944\x947\x3\x2\x2\x2\x945\x943\x3\x2\x2\x2\x945\x946\x3\x2\x2"+
		"\x2\x946\x94A\x3\x2\x2\x2\x947\x945\x3\x2\x2\x2\x948\x94A\a\x26B\x2\x2"+
		"\x949\x945\x3\x2\x2\x2\x949\x948\x3\x2\x2\x2\x94A\x94B\x3\x2\x2\x2\x94B"+
		"\x950\a\x4BB\x2\x2\x94C\x94D\a\x384\x2\x2\x94D\x94E\a\x4A8\x2\x2\x94E"+
		"\x950\a\x4A2\x2\x2\x94F\x939\x3\x2\x2\x2\x94F\x93C\x3\x2\x2\x2\x94F\x94C"+
		"\x3\x2\x2\x2\x950\xA33\x3\x2\x2\x2\x951\x952\a\x24E\x2\x2\x952\x953\a"+
		"\x323\x2\x2\x953\x954\a\x294\x2\x2\x954\x98E\a\x4A4\x2\x2\x955\x956\a"+
		"\x439\x2\x2\x956\x966\a\x4BA\x2\x2\x957\x958\a\x132\x2\x2\x958\x959\a"+
		"\x4A8\x2\x2\x959\x967\a\x4A4\x2\x2\x95A\x95B\aT\x2\x2\x95B\x95C\a\x4A8"+
		"\x2\x2\x95C\x967\t\x14\x2\x2\x95D\x95E\a\x153\x2\x2\x95E\x95F\a\x4A8\x2"+
		"\x2\x95F\x967\t\x15\x2\x2\x960\x961\a\x36E\x2\x2\x961\x962\a\x4A8\x2\x2"+
		"\x962\x967\t\x15\x2\x2\x963\x964\aY\x2\x2\x964\x965\a\x4A8\x2\x2\x965"+
		"\x967\a\x4A2\x2\x2\x966\x957\x3\x2\x2\x2\x966\x95A\x3\x2\x2\x2\x966\x95D"+
		"\x3\x2\x2\x2\x966\x960\x3\x2\x2\x2\x966\x963\x3\x2\x2\x2\x967\x98F\x3"+
		"\x2\x2\x2\x968\x969\a\x367\x2\x2\x969\x972\a\x4BA\x2\x2\x96A\x96B\a\x1A"+
		"\x2\x2\x96B\x96C\a\x4A8\x2\x2\x96C\x973\t\x17\x2\x2\x96D\x96E\a\x30A\x2"+
		"\x2\x96E\x96F\a\x4A8\x2\x2\x96F\x970\a\x4BA\x2\x2\x970\x971\a\x4A4\x2"+
		"\x2\x971\x973\a\x4BB\x2\x2\x972\x96A\x3\x2\x2\x2\x972\x96D\x3\x2\x2\x2"+
		"\x973\x98F\x3\x2\x2\x2\x974\x975\a\x2DA\x2\x2\x975\x98C\a\x4BA\x2\x2\x976"+
		"\x977\a\x1A\x2\x2\x977\x978\a\x4A8\x2\x2\x978\x98D\t\x17\x2\x2\x979\x97A"+
		"\a\x30A\x2\x2\x97A\x97B\a\x4A8\x2\x2\x97B\x986\a\x4BA\x2\x2\x97C\x97E"+
		"\a\x4BC\x2\x2\x97D\x97C\x3\x2\x2\x2\x97D\x97E\x3\x2\x2\x2\x97E\x97F\x3"+
		"\x2\x2\x2\x97F\x981\a\x4A4\x2\x2\x980\x97D\x3\x2\x2\x2\x981\x984\x3\x2"+
		"\x2\x2\x982\x980\x3\x2\x2\x2\x982\x983\x3\x2\x2\x2\x983\x987\x3\x2\x2"+
		"\x2\x984\x982\x3\x2\x2\x2\x985\x987\a\x26B\x2\x2\x986\x982\x3\x2\x2\x2"+
		"\x986\x985\x3\x2\x2\x2\x987\x988\x3\x2\x2\x2\x988\x98D\a\x4BB\x2\x2\x989"+
		"\x98A\a\x384\x2\x2\x98A\x98B\a\x4A8\x2\x2\x98B\x98D\a\x4A2\x2\x2\x98C"+
		"\x976\x3\x2\x2\x2\x98C\x979\x3\x2\x2\x2\x98C\x989\x3\x2\x2\x2\x98D\x98F"+
		"\x3\x2\x2\x2\x98E\x955\x3\x2\x2\x2\x98E\x968\x3\x2\x2\x2\x98E\x974\x3"+
		"\x2\x2\x2\x98F\x990\x3\x2\x2\x2\x990\xA33\a\x4BB\x2\x2\x991\x992\a\x31B"+
		"\x2\x2\x992\x993\a\x323\x2\x2\x993\x994\a\x294\x2\x2\x994\xA33\a\x4A4"+
		"\x2\x2\x995\xA33\a\x1E3\x2\x2\x996\x997\a\x1E3\x2\x2\x997\x998\aS\x2\x2"+
		"\x998\x999\a\x19A\x2\x2\x999\x9B0\a\x294\x2\x2\x99A\x99C\a\x4BC\x2\x2"+
		"\x99B\x99A\x3\x2\x2\x2\x99B\x99C\x3\x2\x2\x2\x99C\x99D\x3\x2\x2\x2\x99D"+
		"\x99E\a\x4A4\x2\x2\x99E\x99F\a\x439\x2\x2\x99F\x9A0\a\x4BA\x2\x2\x9A0"+
		"\x9A1\a\x20C\x2\x2\x9A1\x9A2\a\x4A8\x2\x2\x9A2\x9A3\a\x4A4\x2\x2\x9A3"+
		"\x9A4\a\x4BC\x2\x2\x9A4\x9A5\aT\x2\x2\x9A5\x9A6\a\x4A8\x2\x2\x9A6\x9A7"+
		"\t\x14\x2\x2\x9A7\x9A8\a\x4BC\x2\x2\x9A8\x9A9\a\x153\x2\x2\x9A9\x9AA\a"+
		"\x4A8\x2\x2\x9AA\x9AB\a\x21B\x2\x2\x9AB\x9AC\a\x4BC\x2\x2\x9AC\x9AD\a"+
		"\x36E\x2\x2\x9AD\x9AE\a\x4A8\x2\x2\x9AE\x9AF\t\x15\x2\x2\x9AF\x9B1\a\x4BB"+
		"\x2\x2\x9B0\x99B\x3\x2\x2\x2\x9B1\x9B2\x3\x2\x2\x2\x9B2\x9B0\x3\x2\x2"+
		"\x2\x9B2\x9B3\x3\x2\x2\x2\x9B3\xA33\x3\x2\x2\x2\x9B4\x9B5\a\x24E\x2\x2"+
		"\x9B5\x9B6\aS\x2\x2\x9B6\x9B7\a\x19A\x2\x2\x9B7\x9DA\a\x294\x2\x2\x9B8"+
		"\x9BA\a\x4BC\x2\x2\x9B9\x9B8\x3\x2\x2\x2\x9B9\x9BA\x3\x2\x2\x2\x9BA\x9BB"+
		"\x3\x2\x2\x2\x9BB\x9BC\a\x4A4\x2\x2\x9BC\x9BD\a\x439\x2\x2\x9BD\x9BE\a"+
		"\x4BA\x2\x2\x9BE\x9BF\a\x20C\x2\x2\x9BF\x9C0\a\x4A8\x2\x2\x9C0\x9C7\a"+
		"\x4A4\x2\x2\x9C1\x9C3\a\x4BC\x2\x2\x9C2\x9C1\x3\x2\x2\x2\x9C2\x9C3\x3"+
		"\x2\x2\x2\x9C3\x9C4\x3\x2\x2\x2\x9C4\x9C5\aT\x2\x2\x9C5\x9C6\a\x4A8\x2"+
		"\x2\x9C6\x9C8\t\x14\x2\x2\x9C7\x9C2\x3\x2\x2\x2\x9C7\x9C8\x3\x2\x2\x2"+
		"\x9C8\x9CF\x3\x2\x2\x2\x9C9\x9CB\a\x4BC\x2\x2\x9CA\x9C9\x3\x2\x2\x2\x9CA"+
		"\x9CB\x3\x2\x2\x2\x9CB\x9CC\x3\x2\x2\x2\x9CC\x9CD\a\x153\x2\x2\x9CD\x9CE"+
		"\a\x4A8\x2\x2\x9CE\x9D0\a\x21B\x2\x2\x9CF\x9CA\x3\x2\x2\x2\x9CF\x9D0\x3"+
		"\x2\x2\x2\x9D0\x9D7\x3\x2\x2\x2\x9D1\x9D3\a\x4BC\x2\x2\x9D2\x9D1\x3\x2"+
		"\x2\x2\x9D2\x9D3\x3\x2\x2\x2\x9D3\x9D4\x3\x2\x2\x2\x9D4\x9D5\a\x36E\x2"+
		"\x2\x9D5\x9D6\a\x4A8\x2\x2\x9D6\x9D8\t\x15\x2\x2\x9D7\x9D2\x3\x2\x2\x2"+
		"\x9D7\x9D8\x3\x2\x2\x2\x9D8\x9D9\x3\x2\x2\x2\x9D9\x9DB\a\x4BB\x2\x2\x9DA"+
		"\x9B9\x3\x2\x2\x2\x9DB\x9DC\x3\x2\x2\x2\x9DC\x9DA\x3\x2\x2\x2\x9DC\x9DD"+
		"\x3\x2\x2\x2\x9DD\xA33\x3\x2\x2\x2\x9DE\x9DF\a\x198\x2\x2\x9DF\x9E0\a"+
		"\xC9\x2\x2\x9E0\x9E1\a\x30\x2\x2\x9E1\xA33\a\xDD\x2\x2\x9E2\x9E3\a\x105"+
		"\x2\x2\x9E3\x9E4\a\xC9\x2\x2\x9E4\x9E5\a\x30\x2\x2\x9E5\xA33\a\xDD\x2"+
		"\x2\x9E6\xA33\a\x152\x2\x2\x9E7\xA33\a\x178\x2\x2\x9E8\x9E9\a\r\x2\x2"+
		"\x9E9\x9EA\a\x209\x2\x2\x9EA\x9EB\a\x4A4\x2\x2\x9EB\xA0F\a\x4BA\x2\x2"+
		"\x9EC\x9ED\a\x439\x2\x2\x9ED\x9EE\a\x10C\x2\x2\x9EE\x9EF\a\x294\x2\x2"+
		"\x9EF\x9F0\a\x4BA\x2\x2\x9F0\x9F1\x5\xA8U\x2\x9F1\x9F2\x5\xA8U\x2\x9F2"+
		"\x9F3\a\x4BB\x2\x2\x9F3\xA10\x3\x2\x2\x2\x9F4\x9F5\a\x439\x2\x2\x9F5\x9F6"+
		"\a\x1D8\x2\x2\x9F6\xA04\a\x4BA\x2\x2\x9F7\x9F9\a\x4BC\x2\x2\x9F8\x9F7"+
		"\x3\x2\x2\x2\x9F8\x9F9\x3\x2\x2\x2\x9F9\x9FA\x3\x2\x2\x2\x9FA\xA00\a\x4BA"+
		"\x2\x2\x9FB\x9FC\x5\xA8U\x2\x9FC\x9FD\a\x4BC\x2\x2\x9FD\x9FE\x5\xA8U\x2"+
		"\x9FE\xA01\x3\x2\x2\x2\x9FF\xA01\x5\xAAV\x2\xA00\x9FB\x3\x2\x2\x2\xA00"+
		"\x9FF\x3\x2\x2\x2\xA01\xA02\x3\x2\x2\x2\xA02\xA03\a\x4BB\x2\x2\xA03\xA05"+
		"\x3\x2\x2\x2\xA04\x9F8\x3\x2\x2\x2\xA05\xA06\x3\x2\x2\x2\xA06\xA04\x3"+
		"\x2\x2\x2\xA06\xA07\x3\x2\x2\x2\xA07\xA08\x3\x2\x2\x2\xA08\xA0D\a\x4BB"+
		"\x2\x2\xA09\xA0A\a\x4BC\x2\x2\xA0A\xA0B\a\x2D5\x2\x2\xA0B\xA0C\a\x4A8"+
		"\x2\x2\xA0C\xA0E\a\x4A2\x2\x2\xA0D\xA09\x3\x2\x2\x2\xA0D\xA0E\x3\x2\x2"+
		"\x2\xA0E\xA10\x3\x2\x2\x2\xA0F\x9EC\x3\x2\x2\x2\xA0F\x9F4\x3\x2\x2\x2"+
		"\xA10\xA11\x3\x2\x2\x2\xA11\xA12\a\x4BB\x2\x2\xA12\xA33\x3\x2\x2\x2\xA13"+
		"\xA14\a\x24E\x2\x2\xA14\xA23\a\x209\x2\x2\xA15\xA16\a\r\x2\x2\xA16\xA17"+
		"\a\x1D8\x2\x2\xA17\xA1C\a\x4BA\x2\x2\xA18\xA19\x5\xA8U\x2\xA19\xA1A\x5"+
		"\xA8U\x2\xA1A\xA1D\x3\x2\x2\x2\xA1B\xA1D\x5\xAAV\x2\xA1C\xA18\x3\x2\x2"+
		"\x2\xA1C\xA1B\x3\x2\x2\x2\xA1D\xA1E\x3\x2\x2\x2\xA1E\xA1F\a\x4BB\x2\x2"+
		"\xA1F\xA24\x3\x2\x2\x2\xA20\xA21\a\x2D5\x2\x2\xA21\xA22\a\x4A8\x2\x2\xA22"+
		"\xA24\a\x4A2\x2\x2\xA23\xA15\x3\x2\x2\x2\xA23\xA20\x3\x2\x2\x2\xA24\xA33"+
		"\x3\x2\x2\x2\xA25\xA26\a\x331\x2\x2\xA26\xA27\a\x209\x2\x2\xA27\xA33\a"+
		"\x4A4\x2\x2\xA28\xA29\a\x31B\x2\x2\xA29\xA2A\a\x209\x2\x2\xA2A\xA33\a"+
		"\x4A4\x2\x2\xA2B\xA33\a\x28F\x2\x2\xA2C\xA2D\a\x439\x2\x2\xA2D\xA2E\a"+
		"\x4BA\x2\x2\xA2E\xA2F\a\x121\x2\x2\xA2F\xA30\a\x4A8\x2\x2\xA30\xA31\a"+
		"\x2CC\x2\x2\xA31\xA33\a\x4BB\x2\x2\xA32\x8CF\x3\x2\x2\x2\xA32\x8E3\x3"+
		"\x2\x2\x2\xA32\x8E6\x3\x2\x2\x2\xA32\x8E9\x3\x2\x2\x2\xA32\x92B\x3\x2"+
		"\x2\x2\xA32\x937\x3\x2\x2\x2\xA32\x951\x3\x2\x2\x2\xA32\x991\x3\x2\x2"+
		"\x2\xA32\x995\x3\x2\x2\x2\xA32\x996\x3\x2\x2\x2\xA32\x9B4\x3\x2\x2\x2"+
		"\xA32\x9DE\x3\x2\x2\x2\xA32\x9E2\x3\x2\x2\x2\xA32\x9E6\x3\x2\x2\x2\xA32"+
		"\x9E7\x3\x2\x2\x2\xA32\x9E8\x3\x2\x2\x2\xA32\xA13\x3\x2\x2\x2\xA32\xA25"+
		"\x3\x2\x2\x2\xA32\xA28\x3\x2\x2\x2\xA32\xA2B\x3\x2\x2\x2\xA32\xA2C\x3"+
		"\x2\x2\x2\xA33\xA7\x3\x2\x2\x2\xA34\xA35\a\x4A4\x2\x2\xA35\xA9\x3\x2\x2"+
		"\x2\xA36\xA37\a\x4A4\x2\x2\xA37\xAB\x3\x2\x2\x2\xA38\xA39\t\x18\x2\x2"+
		"\xA39\xA3A\ai\x2\x2\xA3A\xA3B\a\x2DD\x2\x2\xA3B\xA3C\x5\x4C2\x262\x2\xA3C"+
		"\xA3D\a\x172\x2\x2\xA3D\xA3E\a\xC1\x2\x2\xA3E\xA3F\a\x386\x2\x2\xA3F\xA49"+
		"\a\x4BA\x2\x2\xA40\xA41\a\xBF\x2\x2\xA41\xA44\a\x4A8\x2\x2\xA42\xA45\x5"+
		"\x4C2\x262\x2\xA43\xA45\a\x30\x2\x2\xA44\xA42\x3\x2\x2\x2\xA44\xA43\x3"+
		"\x2\x2\x2\xA45\xA47\x3\x2\x2\x2\xA46\xA48\a\x4BC\x2\x2\xA47\xA46\x3\x2"+
		"\x2\x2\xA47\xA48\x3\x2\x2\x2\xA48\xA4A\x3\x2\x2\x2\xA49\xA40\x3\x2\x2"+
		"\x2\xA49\xA4A\x3\x2\x2\x2\xA4A\xA57\x3\x2\x2\x2\xA4B\xA4C\a\x210\x2\x2"+
		"\xA4C\xA52\a\x4A8\x2\x2\xA4D\xA4F\a\x11D\x2\x2\xA4E\xA4D\x3\x2\x2\x2\xA4E"+
		"\xA4F\x3\x2\x2\x2\xA4F\xA50\x3\x2\x2\x2\xA50\xA53\x5\x4C2\x262\x2\xA51"+
		"\xA53\a\x30\x2\x2\xA52\xA4E\x3\x2\x2\x2\xA52\xA51\x3\x2\x2\x2\xA53\xA55"+
		"\x3\x2\x2\x2\xA54\xA56\a\x4BC\x2\x2\xA55\xA54\x3\x2\x2\x2\xA55\xA56\x3"+
		"\x2\x2\x2\xA56\xA58\x3\x2\x2\x2\xA57\xA4B\x3\x2\x2\x2\xA57\xA58\x3\x2"+
		"\x2\x2\xA58\xA62\x3\x2\x2\x2\xA59\xA5A\a\x31A\x2\x2\xA5A\xA5D\a\x4A8\x2"+
		"\x2\xA5B\xA5E\a\x4A4\x2\x2\xA5C\xA5E\a\x30\x2\x2\xA5D\xA5B\x3\x2\x2\x2"+
		"\xA5D\xA5C\x3\x2\x2\x2\xA5E\xA60\x3\x2\x2\x2\xA5F\xA61\a\x4BC\x2\x2\xA60"+
		"\xA5F\x3\x2\x2\x2\xA60\xA61\x3\x2\x2\x2\xA61\xA63\x3\x2\x2\x2\xA62\xA59"+
		"\x3\x2\x2\x2\xA62\xA63\x3\x2\x2\x2\xA63\xA6A\x3\x2\x2\x2\xA64\xA65\a\x2DE"+
		"\x2\x2\xA65\xA68\a\x4A8\x2\x2\xA66\xA69\a\x4A2\x2\x2\xA67\xA69\a\xF9\x2"+
		"\x2\xA68\xA66\x3\x2\x2\x2\xA68\xA67\x3\x2\x2\x2\xA69\xA6B\x3\x2\x2\x2"+
		"\xA6A\xA64\x3\x2\x2\x2\xA6A\xA6B\x3\x2\x2\x2\xA6B\xA6C\x3\x2\x2\x2\xA6C"+
		"\xA6D\a\x4BB\x2\x2\xA6D\xAD\x3\x2\x2\x2\xA6E\xA6F\a\x11E\x2\x2\xA6F\xA70"+
		"\ai\x2\x2\xA70\xA71\a\x2DD\x2\x2\xA71\xA72\x5\x4C2\x262\x2\xA72\xAF\x3"+
		"\x2\x2\x2\xA73\xA74\a%\x2\x2\xA74\xA75\a|\x2\x2\xA75\xA9D\x5\x4C2\x262"+
		"\x2\xA76\xA77\a\x31B\x2\x2\xA77\xA9E\a\x2E0\x2\x2\xA78\xA79\a\x439\x2"+
		"\x2\xA79\xA7A\a\x2DF\x2\x2\xA7A\xA7B\a\x1F1\x2\x2\xA7B\xA92\a\x4BA\x2"+
		"\x2\xA7C\xA7D\a\x15C\x2\x2\xA7D\xA7E\a\x4A8\x2\x2\xA7E\xA80\a\x4A4\x2"+
		"\x2\xA7F\xA81\a\x4BC\x2\x2\xA80\xA7F\x3\x2\x2\x2\xA80\xA81\x3\x2\x2\x2"+
		"\xA81\xA93\x3\x2\x2\x2\xA82\xA83\a\xF8\x2\x2\xA83\xA84\ap\x2\x2\xA84\xA85"+
		"\a\x2BE\x2\x2\xA85\xA86\a\x4A8\x2\x2\xA86\xA88\a\x4A4\x2\x2\xA87\xA89"+
		"\a\x4BC\x2\x2\xA88\xA87\x3\x2\x2\x2\xA88\xA89\x3\x2\x2\x2\xA89\xA93\x3"+
		"\x2\x2\x2\xA8A\xA8B\a\x12E\x2\x2\xA8B\xA8C\ap\x2\x2\xA8C\xA8D\a\x2BE\x2"+
		"\x2\xA8D\xA8E\a\x4A8\x2\x2\xA8E\xA90\a\x4A4\x2\x2\xA8F\xA91\a\x4BC\x2"+
		"\x2\xA90\xA8F\x3\x2\x2\x2\xA90\xA91\x3\x2\x2\x2\xA91\xA93\x3\x2\x2\x2"+
		"\xA92\xA7C\x3\x2\x2\x2\xA92\xA82\x3\x2\x2\x2\xA92\xA8A\x3\x2\x2\x2\xA93"+
		"\xA94\x3\x2\x2\x2\xA94\xA92\x3\x2\x2\x2\xA94\xA95\x3\x2\x2\x2\xA95\xA96"+
		"\x3\x2\x2\x2\xA96\xA9E\a\x4BB\x2\x2\xA97\xA98\a\x439\x2\x2\xA98\xA99\a"+
		"\f\x2\x2\xA99\xA9A\a\x172\x2\x2\xA9A\xA9B\a]\x2\x2\xA9B\xA9C\a\x4A8\x2"+
		"\x2\xA9C\xA9E\t\x13\x2\x2\xA9D\xA76\x3\x2\x2\x2\xA9D\xA78\x3\x2\x2\x2"+
		"\xA9D\xA97\x3\x2\x2\x2\xA9E\xB1\x3\x2\x2\x2\xA9F\xAA0\a%\x2\x2\xAA0\xAA1"+
		"\a\x9D\x2\x2\xAA1\xAA2\a\x12E\x2\x2\xAA2\xAA3\a\x1F1\x2\x2\xAA3\xAA4\x5"+
		"\x4C2\x262\x2\xAA4\xAA5\t\x19\x2\x2\xAA5\xAA6\a\x422\x2\x2\xAA6\xAA7\a"+
		"\x4BA\x2\x2\xAA7\xAA8\a\xA3\x2\x2\xAA8\xAA9\a\x4A8\x2\x2\xAA9\xAB2\x5"+
		"\x4C2\x262\x2\xAAA\xAAB\a\x4BC\x2\x2\xAAB\xAAC\a\x17\x2\x2\xAAC\xAAD\a"+
		"\x4A8\x2\x2\xAAD\xAAE\a\x4A4\x2\x2\xAAE\xAAF\a\x4BC\x2\x2\xAAF\xAB0\a"+
		"\x12D\x2\x2\xAB0\xAB1\a\x4A8\x2\x2\xAB1\xAB3\a\x4A5\x2\x2\xAB2\xAAA\x3"+
		"\x2\x2\x2\xAB2\xAB3\x3\x2\x2\x2\xAB3\xAB4\x3\x2\x2\x2\xAB4\xAB5\a\x4BB"+
		"\x2\x2\xAB5\xB3\x3\x2\x2\x2\xAB6\xAB7\a\xC9\x2\x2\xAB7\xAB8\a\x9D\x2\x2"+
		"\xAB8\xAB9\a\x12E\x2\x2\xAB9\xABA\a\x1F1\x2\x2\xABA\xABB\x5\x4C2\x262"+
		"\x2\xABB\xABC\a\x439\x2\x2\xABC\xAD0\a\x423\x2\x2\xABD\xABF\a\x4BA\x2"+
		"\x2\xABE\xAC0\a\x4BC\x2\x2\xABF\xABE\x3\x2\x2\x2\xABF\xAC0\x3\x2\x2\x2"+
		"\xAC0\xAC1\x3\x2\x2\x2\xAC1\xAC2\a\xA3\x2\x2\xAC2\xAC3\a\x4A8\x2\x2\xAC3"+
		"\xAC4\x5\x4C2\x262\x2\xAC4\xAC5\a\x4BC\x2\x2\xAC5\xAC6\a\x17\x2\x2\xAC6"+
		"\xAC7\a\x4A8\x2\x2\xAC7\xAC8\a\x4A4\x2\x2\xAC8\xAC9\a\x4BC\x2\x2\xAC9"+
		"\xACA\a\x12D\x2\x2\xACA\xACB\a\x4A8\x2\x2\xACB\xACC\a\x4A5\x2\x2\xACC"+
		"\xACE\a\x4BB\x2\x2\xACD\xACF\a\x4BC\x2\x2\xACE\xACD\x3\x2\x2\x2\xACE\xACF"+
		"\x3\x2\x2\x2\xACF\xAD1\x3\x2\x2\x2\xAD0\xABD\x3\x2\x2\x2\xAD1\xAD2\x3"+
		"\x2\x2\x2\xAD2\xAD0\x3\x2\x2\x2\xAD2\xAD3\x3\x2\x2\x2\xAD3\xB5\x3\x2\x2"+
		"\x2\xAD4\xAD5\a\x11E\x2\x2\xAD5\xAD6\a|\x2\x2\xAD6\xAD7\x5\x4C2\x262\x2"+
		"\xAD7\xB7\x3\x2\x2\x2\xAD8\xAD9\a\x11E\x2\x2\xAD9\xADA\a\x9D\x2\x2\xADA"+
		"\xADB\a\x12E\x2\x2\xADB\xADC\a\x1F1\x2\x2\xADC\xADD\x5\x4C2\x262\x2\xADD"+
		"\xB9\x3\x2\x2\x2\xADE\xADF\a\x11E\x2\x2\xADF\xAE0\a\x9D\x2\x2\xAE0\xAE1"+
		"\a\x21F\x2\x2\xAE1\xAE2\a\x1F1\x2\x2\xAE2\xAE3\x5\x4C2\x262\x2\xAE3\xBB"+
		"\x3\x2\x2\x2\xAE4\xAE5\a\x11E\x2\x2\xAE5\xAE6\a\xBE\x2\x2\xAE6\xAE7\x5"+
		"\x4C2\x262\x2\xAE7\xBD\x3\x2\x2\x2\xAE8\xAE9\a\x11E\x2\x2\xAE9\xAEA\a"+
		"\xCC\x2\x2\xAEA\xAEB\x5\x4C2\x262\x2\xAEB\xBF\x3\x2\x2\x2\xAEC\xAED\a"+
		"\x11E\x2\x2\xAED\xAEE\a\xCE\x2\x2\xAEE\xAEF\a\x2E9\x2\x2\xAEF\xAF0\x5"+
		"\x4C2\x262\x2\xAF0\xC1\x3\x2\x2\x2\xAF1\xAF2\a\x11E\x2\x2\xAF2\xAF5\a"+
		"\xDD\x2\x2\xAF3\xAF4\a\x1B6\x2\x2\xAF4\xAF6\a\x147\x2\x2\xAF5\xAF3\x3"+
		"\x2\x2\x2\xAF5\xAF6\x3\x2\x2\x2\xAF6\xAFB\x3\x2\x2\x2\xAF7\xAF9\a\x4BC"+
		"\x2\x2\xAF8\xAF7\x3\x2\x2\x2\xAF8\xAF9\x3\x2\x2\x2\xAF9\xAFA\x3\x2\x2"+
		"\x2\xAFA\xAFC\x5\x4C2\x262\x2\xAFB\xAF8\x3\x2\x2\x2\xAFC\xAFD\x3\x2\x2"+
		"\x2\xAFD\xAFB\x3\x2\x2\x2\xAFD\xAFE\x3\x2\x2\x2\xAFE\xC3\x3\x2\x2\x2\xAFF"+
		"\xB00\a\x11E\x2\x2\xB00\xB01\a\xDD\x2\x2\xB01\xB02\a\x42\x2\x2\xB02\xB03"+
		"\a\x3A5\x2\x2\xB03\xB04\x5\x4C2\x262\x2\xB04\xC5\x3\x2\x2\x2\xB05\xB06"+
		"\a\x11E\x2\x2\xB06\xB07\a\xDD\x2\x2\xB07\xB08\a\x12E\x2\x2\xB08\xB09\a"+
		"\x1F1\x2\x2\xB09\xC7\x3\x2\x2\x2\xB0A\xB0B\a\x11E\x2\x2\xB0B\xB0C\a\xDD"+
		"\x2\x2\xB0C\xB0D\a\x35F\x2\x2\xB0D\xB0E\a\xCC\x2\x2\xB0E\xB0F\x5\x4C2"+
		"\x262\x2\xB0F\xC9\x3\x2\x2\x2\xB10\xB11\a\x11E\x2\x2\xB11\xB14\a\xF9\x2"+
		"\x2\xB12\xB13\a\x1B6\x2\x2\xB13\xB15\a\x147\x2\x2\xB14\xB12\x3\x2\x2\x2"+
		"\xB14\xB15\x3\x2\x2\x2\xB15\xB17\x3\x2\x2\x2\xB16\xB18\a\x4BC\x2\x2\xB17"+
		"\xB16\x3\x2\x2\x2\xB17\xB18\x3\x2\x2\x2\xB18\xB1C\x3\x2\x2\x2\xB19\xB1A"+
		"\x5\x4C2\x262\x2\xB1A\xB1B\a\x4B5\x2\x2\xB1B\xB1D\x3\x2\x2\x2\xB1C\xB19"+
		"\x3\x2\x2\x2\xB1C\xB1D\x3\x2\x2\x2\xB1D\xB1E\x3\x2\x2\x2\xB1E\xB1F\x5"+
		"\x4C2\x262\x2\xB1F\xCB\x3\x2\x2\x2\xB20\xB21\a\x11E\x2\x2\xB21\xB22\a"+
		"\x131\x2\x2\xB22\xB23\x5\x4C2\x262\x2\xB23\xCD\x3\x2\x2\x2\xB24\xB25\a"+
		"\x11E\x2\x2\xB25\xB26\a\x150\x2\x2\xB26\xB27\a\xDC\x2\x2\xB27\xB28\a\x3A1"+
		"\x2\x2\xB28\xB29\x5\x4C2\x262\x2\xB29\xCF\x3\x2\x2\x2\xB2A\xB2B\a\x11E"+
		"\x2\x2\xB2B\xB2C\a\x150\x2\x2\xB2C\xB2D\a\x15C\x2\x2\xB2D\xB2E\a\x17B"+
		"\x2\x2\xB2E\xB2F\x5\x4C2\x262\x2\xB2F\xD1\x3\x2\x2\x2\xB30\xB31\a\x11E"+
		"\x2\x2\xB31\xB32\a\x150\x2\x2\xB32\xB33\a\x202\x2\x2\xB33\xB36\x5\x4C2"+
		"\x262\x2\xB34\xB35\a\x46\x2\x2\xB35\xB37\x5\x4C2\x262\x2\xB36\xB34\x3"+
		"\x2\x2\x2\xB36\xB37\x3\x2\x2\x2\xB37\xD3\x3\x2\x2\x2\xB38\xB39\a\x11E"+
		"\x2\x2\xB39\xB3A\a\x150\x2\x2\xB3A\xB3B\a\x32E\x2\x2\xB3B\xB3C\a\x2D4"+
		"\x2\x2\xB3C\xB3D\x5\x4C2\x262\x2\xB3D\xD5\x3\x2\x2\x2\xB3E\xB3F\a\x11E"+
		"\x2\x2\xB3F\xB40\a\x150\x2\x2\xB40\xB44\a\x3D7\x2\x2\xB41\xB42\x5\x4C2"+
		"\x262\x2\xB42\xB43\a\x4B5\x2\x2\xB43\xB45\x3\x2\x2\x2\xB44\xB41\x3\x2"+
		"\x2\x2\xB44\xB45\x3\x2\x2\x2\xB45\xB49\x3\x2\x2\x2\xB46\xB47\x5\x4C2\x262"+
		"\x2\xB47\xB48\a\x4B5\x2\x2\xB48\xB4A\x3\x2\x2\x2\xB49\xB46\x3\x2\x2\x2"+
		"\xB49\xB4A\x3\x2\x2\x2\xB4A\xB4B\x3\x2\x2\x2\xB4B\xB4C\x5\x4C2\x262\x2"+
		"\xB4C\xD7\x3\x2\x2\x2\xB4D\xB4E\a\x11E\x2\x2\xB4E\xB4F\a\x13E\x2\x2\xB4F"+
		"\xB54\a\x272\x2\x2\xB50\xB52\a\x4BC\x2\x2\xB51\xB50\x3\x2\x2\x2\xB51\xB52"+
		"\x3\x2\x2\x2\xB52\xB53\x3\x2\x2\x2\xB53\xB55\x5\x4C2\x262\x2\xB54\xB51"+
		"\x3\x2\x2\x2\xB55\xB56\x3\x2\x2\x2\xB56\xB54\x3\x2\x2\x2\xB56\xB57\x3"+
		"\x2\x2\x2\xB57\xB58\x3\x2\x2\x2\xB58\xB5D\a\x294\x2\x2\xB59\xB5E\a\x37A"+
		"\x2\x2\xB5A\xB5E\a\xDD\x2\x2\xB5B\xB5C\a\x2F3\x2\x2\xB5C\xB5E\x5\x4C2"+
		"\x262\x2\xB5D\xB59\x3\x2\x2\x2\xB5D\xB5A\x3\x2\x2\x2\xB5D\xB5B\x3\x2\x2"+
		"\x2\xB5E\xD9\x3\x2\x2\x2\xB5F\xB60\a\x11E\x2\x2\xB60\xB61\a\x13E\x2\x2"+
		"\xB61\xB62\a\x381\x2\x2\xB62\xB63\x5\x4C2\x262\x2\xB63\xB64\a\x294\x2"+
		"\x2\xB64\xB65\a\x37A\x2\x2\xB65\xDB\x3\x2\x2\x2\xB66\xB67\a\x11E\x2\x2"+
		"\xB67\xB68\a\x184\x2\x2\xB68\xB69\ax\x2\x2\xB69\xB6A\x5\x4C2\x262\x2\xB6A"+
		"\xDD\x3\x2\x2\x2\xB6B\xB6C\a\x11E\x2\x2\xB6C\xB6D\a\x184\x2\x2\xB6D\xB6E"+
		"\a\x1C6\x2\x2\xB6E\xB72\a\x294\x2\x2\xB6F\xB70\x5\x4C2\x262\x2\xB70\xB71"+
		"\a\x4B5\x2\x2\xB71\xB73\x3\x2\x2\x2\xB72\xB6F\x3\x2\x2\x2\xB72\xB73\x3"+
		"\x2\x2\x2\xB73\xB74\x3\x2\x2\x2\xB74\xB75\x5\x4C2\x262\x2\xB75\xDF\x3"+
		"\x2\x2\x2\xB76\xB77\a\x11E\x2\x2\xB77\xB78\a\x184\x2\x2\xB78\xB79\a\x3BF"+
		"\x2\x2\xB79\xB7A\x5\x4C2\x262\x2\xB7A\xE1\x3\x2\x2\x2\xB7B\xB7C\a\x11E"+
		"\x2\x2\xB7C\xB7D\a\x215\x2\x2\xB7D\xB7E\x5\x4C2\x262\x2\xB7E\xE3\x3\x2"+
		"\x2\x2\xB7F\xB80\a\x11E\x2\x2\xB80\xB81\a\x21F\x2\x2\xB81\xB82\a\x1F1"+
		"\x2\x2\xB82\xE5\x3\x2\x2\x2\xB83\xB84\a\x11E\x2\x2\xB84\xB85\a\x240\x2"+
		"\x2\xB85\xB86\a\x403\x2\x2\xB86\xB87\x5\x4C2\x262\x2\xB87\xE7\x3\x2\x2"+
		"\x2\xB88\xB89\a\x11E\x2\x2\xB89\xB8A\a\x2BB\x2\x2\xB8A\xB8B\a\x187\x2"+
		"\x2\xB8B\xB8C\x5\x4C2\x262\x2\xB8C\xE9\x3\x2\x2\x2\xB8D\xB8E\a\x11E\x2"+
		"\x2\xB8E\xB8F\a\x2BB\x2\x2\xB8F\xB90\a\x35E\x2\x2\xB90\xB91\x5\x4C2\x262"+
		"\x2\xB91\xEB\x3\x2\x2\x2\xB92\xB93\a\x11E\x2\x2\xB93\xB97\a\x2F3\x2\x2"+
		"\xB94\xB95\x5\x4C2\x262\x2\xB95\xB96\a\x4B5\x2\x2\xB96\xB98\x3\x2\x2\x2"+
		"\xB97\xB94\x3\x2\x2\x2\xB97\xB98\x3\x2\x2\x2\xB98\xB9C\x3\x2\x2\x2\xB99"+
		"\xB9A\x5\x4C2\x262\x2\xB9A\xB9B\a\x4B5\x2\x2\xB9B\xB9D\x3\x2\x2\x2\xB9C"+
		"\xB99\x3\x2\x2\x2\xB9C\xB9D\x3\x2\x2\x2\xB9D\xB9E\x3\x2\x2\x2\xB9E\xB9F"+
		"\x5\x4C2\x262\x2\xB9F\xED\x3\x2\x2\x2\xBA0\xBA1\a\x11E\x2\x2\xBA1\xBA2"+
		"\a\x318\x2\x2\xBA2\xBA3\a\x37C\x2\x2\xBA3\xBA4\a\x62\x2\x2\xBA4\xBA5\x5"+
		"\x4C2\x262\x2\xBA5\xEF\x3\x2\x2\x2\xBA6\xBA7\a\x11E\x2\x2\xBA7\xBA8\a"+
		"\x32E\x2\x2\xBA8\xBA9\a\x2D4\x2\x2\xBA9\xBAA\x5\x4C2\x262\x2\xBAA\xF1"+
		"\x3\x2\x2\x2\xBAB\xBAC\a\x11E\x2\x2\xBAC\xBAF\a\x341\x2\x2\xBAD\xBAE\a"+
		"\x1B6\x2\x2\xBAE\xBB0\a\x147\x2\x2\xBAF\xBAD\x3\x2\x2\x2\xBAF\xBB0\x3"+
		"\x2\x2\x2\xBB0\xBB1\x3\x2\x2\x2\xBB1\xBB2\x5\x4C2\x262\x2\xBB2\xF3\x3"+
		"\x2\x2\x2\xBB3\xBB4\a\x11E\x2\x2\xBB4\xBB5\a\x345\x2\x2\xBB5\xBB6\x5\x4C2"+
		"\x262\x2\xBB6\xF5\x3\x2\x2\x2\xBB7\xBB8\a\x11E\x2\x2\xBB8\xBBB\a\x354"+
		"\x2\x2\xBB9\xBBA\a\x1B6\x2\x2\xBBA\xBBC\a\x147\x2\x2\xBBB\xBB9\x3\x2\x2"+
		"\x2\xBBB\xBBC\x3\x2\x2\x2\xBBC\xBC6\x3\x2\x2\x2\xBBD\xBBF\a\x4BC\x2\x2"+
		"\xBBE\xBBD\x3\x2\x2\x2\xBBE\xBBF\x3\x2\x2\x2\xBBF\xBC3\x3\x2\x2\x2\xBC0"+
		"\xBC1\x5\x4C2\x262\x2\xBC1\xBC2\a\x4B5\x2\x2\xBC2\xBC4\x3\x2\x2\x2\xBC3"+
		"\xBC0\x3\x2\x2\x2\xBC3\xBC4\x3\x2\x2\x2\xBC4\xBC5\x3\x2\x2\x2\xBC5\xBC7"+
		"\x5\x4C2\x262\x2\xBC6\xBBE\x3\x2\x2\x2\xBC6\xBC7\x3\x2\x2\x2\xBC7\xF7"+
		"\x3\x2\x2\x2\xBC8\xBC9\a\x11E\x2\x2\xBC9\xBCC\a\x35A\x2\x2\xBCA\xBCB\a"+
		"\x1B6\x2\x2\xBCB\xBCD\a\x147\x2\x2\xBCC\xBCA\x3\x2\x2\x2\xBCC\xBCD\x3"+
		"\x2\x2\x2\xBCD\xBCE\x3\x2\x2\x2\xBCE\xBCF\x5\x4C2\x262\x2\xBCF\xF9\x3"+
		"\x2\x2\x2\xBD0\xBD1\a\x11E\x2\x2\xBD1\xBD2\a\x364\x2\x2\xBD2\xBD3\a\x2E8"+
		"\x2\x2\xBD3\xBD4\a\x208\x2\x2\xBD4\xBD5\x5\x4C2\x262\x2\xBD5\xFB\x3\x2"+
		"\x2\x2\xBD6\xBD7\a\x11E\x2\x2\xBD7\xBD8\a\x36B\x2\x2\xBD8\xBDB\a\x2D3"+
		"\x2\x2\xBD9\xBDA\a\x1B6\x2\x2\xBDA\xBDC\a\x147\x2\x2\xBDB\xBD9\x3\x2\x2"+
		"\x2\xBDB\xBDC\x3\x2\x2\x2\xBDC\xBE0\x3\x2\x2\x2\xBDD\xBDE\x5\x4C2\x262"+
		"\x2\xBDE\xBDF\a\x4B5\x2\x2\xBDF\xBE1\x3\x2\x2\x2\xBE0\xBDD\x3\x2\x2\x2"+
		"\xBE0\xBE1\x3\x2\x2\x2\xBE1\xBE2\x3\x2\x2\x2\xBE2\xBE3\x5\x4C2\x262\x2"+
		"\xBE3\xFD\x3\x2\x2\x2\xBE4\xBE5\a\x11E\x2\x2\xBE5\xBE8\a\x377\x2\x2\xBE6"+
		"\xBE7\a\x1B6\x2\x2\xBE7\xBE9\a\x147\x2\x2\xBE8\xBE6\x3\x2\x2\x2\xBE8\xBE9"+
		"\x3\x2\x2\x2\xBE9\xBF8\x3\x2\x2\x2\xBEA\xBEC\a\x4BC\x2\x2\xBEB\xBEA\x3"+
		"\x2\x2\x2\xBEB\xBEC\x3\x2\x2\x2\xBEC\xBF0\x3\x2\x2\x2\xBED\xBEE\x5\x4C2"+
		"\x262\x2\xBEE\xBEF\a\x4B5\x2\x2\xBEF\xBF1\x3\x2\x2\x2\xBF0\xBED\x3\x2"+
		"\x2\x2\xBF0\xBF1\x3\x2\x2\x2\xBF1\xBF5\x3\x2\x2\x2\xBF2\xBF3\x5\x4C2\x262"+
		"\x2\xBF3\xBF4\a\x4B5\x2\x2\xBF4\xBF6\x3\x2\x2\x2\xBF5\xBF2\x3\x2\x2\x2"+
		"\xBF5\xBF6\x3\x2\x2\x2\xBF6\xBF7\x3\x2\x2\x2\xBF7\xBF9\x5\x4C2\x262\x2"+
		"\xBF8\xBEB\x3\x2\x2\x2\xBF8\xBF9\x3\x2\x2\x2\xBF9\xFF\x3\x2\x2\x2\xBFA"+
		"\xBFB\a\x11E\x2\x2\xBFB\xBFC\a\x37A\x2\x2\xBFC\xBFD\a\x42\x2\x2\xBFD\xBFE"+
		"\x5\x4C2\x262\x2\xBFE\x101\x3\x2\x2\x2\xBFF\xC00\a\x11E\x2\x2\xC00\xC01"+
		"\a\x37A\x2\x2\xC01\xC02\a\x42\x2\x2\xC02\xC03\a\x3A5\x2\x2\xC03\xC04\x5"+
		"\x4C2\x262\x2\xC04\x103\x3\x2\x2\x2\xC05\xC06\a\x11E\x2\x2\xC06\xC07\a"+
		"\x37A\x2\x2\xC07\xC08\a\x341\x2\x2\xC08\xC09\x5\x4C2\x262\x2\xC09\x105"+
		"\x3\x2\x2\x2\xC0A\xC0B\a\x11E\x2\x2\xC0B\xC0C\a\x37C\x2\x2\xC0C\xC0D\x5"+
		"\x4C2\x262\x2\xC0D\x107\x3\x2\x2\x2\xC0E\xC10\a\x11E\x2\x2\xC0F\xC11\a"+
		"\xC6\x2\x2\xC10\xC0F\x3\x2\x2\x2\xC10\xC11\x3\x2\x2\x2\xC11\xC12\x3\x2"+
		"\x2\x2\xC12\xC13\a\x395\x2\x2\xC13\xC17\a\x181\x2\x2\xC14\xC15\x5\x4C2"+
		"\x262\x2\xC15\xC16\a\x4B5\x2\x2\xC16\xC18\x3\x2\x2\x2\xC17\xC14\x3\x2"+
		"\x2\x2\xC17\xC18\x3\x2\x2\x2\xC18\xC19\x3\x2\x2\x2\xC19\xC1A\x5\x4C2\x262"+
		"\x2\xC1A\xC26\ap\x2\x2\xC1B\xC1D\a\x4BC\x2\x2\xC1C\xC1B\x3\x2\x2\x2\xC1C"+
		"\xC1D\x3\x2\x2\x2\xC1D\xC1E\x3\x2\x2\x2\xC1E\xC1F\a|\x2\x2\xC1F\xC27\x5"+
		"\x4C2\x262\x2\xC20\xC22\a\x4BC\x2\x2\xC21\xC20\x3\x2\x2\x2\xC21\xC22\x3"+
		"\x2\x2\x2\xC22\xC23\x3\x2\x2\x2\xC23\xC24\a?\x2\x2\xC24\xC25\a\x1F1\x2"+
		"\x2\xC25\xC27\x5\x4C2\x262\x2\xC26\xC1C\x3\x2\x2\x2\xC26\xC21\x3\x2\x2"+
		"\x2\xC27\xC28\x3\x2\x2\x2\xC28\xC26\x3\x2\x2\x2\xC28\xC29\x3\x2\x2\x2"+
		"\xC29\x109\x3\x2\x2\x2\xC2A\xC2B\a\x11E\x2\x2\xC2B\xC2F\a\x3B4\x2\x2\xC2C"+
		"\xC2D\x5\x4C2\x262\x2\xC2D\xC2E\a\x4B5\x2\x2\xC2E\xC30\x3\x2\x2\x2\xC2F"+
		"\xC2C\x3\x2\x2\x2\xC2F\xC30\x3\x2\x2\x2\xC30\xC31\x3\x2\x2\x2\xC31\xC32"+
		"\x5\x4C2\x262\x2\xC32\xC33\a\x4B5\x2\x2\xC33\xC34\x5\x4C2\x262\x2\xC34"+
		"\x10B\x3\x2\x2\x2\xC35\xC36\a\x11E\x2\x2\xC36\xC37\a\x3D2\x2\x2\xC37\xC38"+
		"\a\x1F1\x2\x2\xC38\xC3C\x5\x4C2\x262\x2\xC39\xC3A\a\x31B\x2\x2\xC3A\xC3B"+
		"\a\x2E9\x2\x2\xC3B\xC3D\a\x1F1\x2\x2\xC3C\xC39\x3\x2\x2\x2\xC3C\xC3D\x3"+
		"\x2\x2\x2\xC3D\x10D\x3\x2\x2\x2\xC3E\xC3F\a\x11E\x2\x2\xC3F\xC42\a\x3D4"+
		"\x2\x2\xC40\xC41\a\x1B6\x2\x2\xC41\xC43\a\x147\x2\x2\xC42\xC40\x3\x2\x2"+
		"\x2\xC42\xC43\x3\x2\x2\x2\xC43\xC47\x3\x2\x2\x2\xC44\xC45\x5\x4C2\x262"+
		"\x2\xC45\xC46\a\x4B5\x2\x2\xC46\xC48\x3\x2\x2\x2\xC47\xC44\x3\x2\x2\x2"+
		"\xC47\xC48\x3\x2\x2\x2\xC48\xC49\x3\x2\x2\x2\xC49\xC4A\x5\x4C2\x262\x2"+
		"\xC4A\x10F\x3\x2\x2\x2\xC4B\xC4C\a\x11E\x2\x2\xC4C\xC4F\a\x41C\x2\x2\xC4D"+
		"\xC4E\a\x1B6\x2\x2\xC4E\xC50\a\x147\x2\x2\xC4F\xC4D\x3\x2\x2\x2\xC4F\xC50"+
		"\x3\x2\x2\x2\xC50\xC51\x3\x2\x2\x2\xC51\xC52\x5\x4C2\x262\x2\xC52\x111"+
		"\x3\x2\x2\x2\xC53\xC54\a\x11E\x2\x2\xC54\xC55\a\x43F\x2\x2\xC55\xC56\a"+
		"\x19A\x2\x2\xC56\xC57\x5\x4C2\x262\x2\xC57\x113\x3\x2\x2\x2\xC58\xC59"+
		"\a\x11E\x2\x2\xC59\xC5A\a\x444\x2\x2\xC5A\xC5B\a\x35A\x2\x2\xC5B\xC5F"+
		"\a\x9C\x2\x2\xC5C\xC5D\x5\x4C2\x262\x2\xC5D\xC5E\a\x4B5\x2\x2\xC5E\xC60"+
		"\x3\x2\x2\x2\xC5F\xC5C\x3\x2\x2\x2\xC5F\xC60\x3\x2\x2\x2\xC60\xC61\x3"+
		"\x2\x2\x2\xC61\xC62\x5\x4C2\x262\x2\xC62\x115\x3\x2\x2\x2\xC63\xC64\a"+
		"\x112\x2\x2\xC64\xC73\a\x3F8\x2\x2\xC65\xC67\a\x4BC\x2\x2\xC66\xC65\x3"+
		"\x2\x2\x2\xC66\xC67\x3\x2\x2\x2\xC67\xC6B\x3\x2\x2\x2\xC68\xC69\x5\x4C2"+
		"\x262\x2\xC69\xC6A\a\x4B5\x2\x2\xC6A\xC6C\x3\x2\x2\x2\xC6B\xC68\x3\x2"+
		"\x2\x2\xC6B\xC6C\x3\x2\x2\x2\xC6C\xC6D\x3\x2\x2\x2\xC6D\xC6F\x5\x4C2\x262"+
		"\x2\xC6E\xC66\x3\x2\x2\x2\xC6F\xC70\x3\x2\x2\x2\xC70\xC6E\x3\x2\x2\x2"+
		"\xC70\xC71\x3\x2\x2\x2\xC71\xC74\x3\x2\x2\x2\xC72\xC74\a\x18\x2\x2\xC73"+
		"\xC6E\x3\x2\x2\x2\xC73\xC72\x3\x2\x2\x2\xC74\xC75\x3\x2\x2\x2\xC75\xC7F"+
		"\a\x294\x2\x2\xC76\xC77\x5\x4C2\x262\x2\xC77\xC78\a\x4B5\x2\x2\xC78\xC7A"+
		"\x3\x2\x2\x2\xC79\xC76\x3\x2\x2\x2\xC79\xC7A\x3\x2\x2\x2\xC7A\xC7B\x3"+
		"\x2\x2\x2\xC7B\xC80\x5\x4C2\x262\x2\xC7C\xC80\a\xDD\x2\x2\xC7D\xC7E\a"+
		"\x18\x2\x2\xC7E\xC80\a\x37A\x2\x2\xC7F\xC79\x3\x2\x2\x2\xC7F\xC7C\x3\x2"+
		"\x2\x2\xC7F\xC7D\x3\x2\x2\x2\xC80\x117\x3\x2\x2\x2\xC81\xC82\a\x129\x2"+
		"\x2\xC82\xC91\a\x3F8\x2\x2\xC83\xC85\a\x4BC\x2\x2\xC84\xC83\x3\x2\x2\x2"+
		"\xC84\xC85\x3\x2\x2\x2\xC85\xC89\x3\x2\x2\x2\xC86\xC87\x5\x4C2\x262\x2"+
		"\xC87\xC88\a\x4B5\x2\x2\xC88\xC8A\x3\x2\x2\x2\xC89\xC86\x3\x2\x2\x2\xC89"+
		"\xC8A\x3\x2\x2\x2\xC8A\xC8B\x3\x2\x2\x2\xC8B\xC8D\x5\x4C2\x262\x2\xC8C"+
		"\xC84\x3\x2\x2\x2\xC8D\xC8E\x3\x2\x2\x2\xC8E\xC8C\x3\x2\x2\x2\xC8E\xC8F"+
		"\x3\x2\x2\x2\xC8F\xC92\x3\x2\x2\x2\xC90\xC92\a\x18\x2\x2\xC91\xC8C\x3"+
		"\x2\x2\x2\xC91\xC90\x3\x2\x2\x2\xC92\xC93\x3\x2\x2\x2\xC93\xC9D\a\x294"+
		"\x2\x2\xC94\xC95\x5\x4C2\x262\x2\xC95\xC96\a\x4B5\x2\x2\xC96\xC98\x3\x2"+
		"\x2\x2\xC97\xC94\x3\x2\x2\x2\xC97\xC98\x3\x2\x2\x2\xC98\xC99\x3\x2\x2"+
		"\x2\xC99\xC9E\x5\x4C2\x262\x2\xC9A\xC9E\a\xDD\x2\x2\xC9B\xC9C\a\x18\x2"+
		"\x2\xC9C\xC9E\a\x37A\x2\x2\xC9D\xC97\x3\x2\x2\x2\xC9D\xC9A\x3\x2\x2\x2"+
		"\xC9D\xC9B\x3\x2\x2\x2\xC9E\x119\x3\x2\x2\x2\xC9F\xCA0\a\x212\x2\x2\xCA0"+
		"\xCA1\a\x3D7\x2\x2\xCA1\xCA2\x5\x488\x245\x2\xCA2\xCA3\a\x1C1\x2\x2\xCA3"+
		"\xCA4\t\x1A\x2\x2\xCA4\xCA8\a\x24D\x2\x2\xCA5\xCA6\a\x430\x2\x2\xCA6\xCA9"+
		"\a\x4A2\x2\x2\xCA7\xCA9\a\x275\x2\x2\xCA8\xCA5\x3\x2\x2\x2\xCA8\xCA7\x3"+
		"\x2\x2\x2\xCA8\xCA9\x3\x2\x2\x2\xCA9\xCAB\x3\x2\x2\x2\xCAA\xCAC\a\x4BD"+
		"\x2\x2\xCAB\xCAA\x3\x2\x2\x2\xCAB\xCAC\x3\x2\x2\x2\xCAC\x11B\x3\x2\x2"+
		"\x2\xCAD\xCAE\a\x3FC\x2\x2\xCAE\xCAF\a\x3D7\x2\x2\xCAF\xCC3\x5\x488\x245"+
		"\x2\xCB0\xCB1\a\x439\x2\x2\xCB1\xCB2\a\x4BA\x2\x2\xCB2\xCB3\a\x2BC\x2"+
		"\x2\xCB3\xCBD\a\x4BA\x2\x2\xCB4\xCB6\a\x4BC\x2\x2\xCB5\xCB4\x3\x2\x2\x2"+
		"\xCB5\xCB6\x3\x2\x2\x2\xCB6\xCBB\x3\x2\x2\x2\xCB7\xCBC\a\x4A2\x2\x2\xCB8"+
		"\xCB9\a\x4A2\x2\x2\xCB9\xCBA\a\x3EB\x2\x2\xCBA\xCBC\a\x4A2\x2\x2\xCBB"+
		"\xCB7\x3\x2\x2\x2\xCBB\xCB8\x3\x2\x2\x2\xCBC\xCBE\x3\x2\x2\x2\xCBD\xCB5"+
		"\x3\x2\x2\x2\xCBE\xCBF\x3\x2\x2\x2\xCBF\xCBD\x3\x2\x2\x2\xCBF\xCC0\x3"+
		"\x2\x2\x2\xCC0\xCC1\x3\x2\x2\x2\xCC1\xCC2\a\x4BB\x2\x2\xCC2\xCC4\a\x4BB"+
		"\x2\x2\xCC3\xCB0\x3\x2\x2\x2\xCC3\xCC4\x3\x2\x2\x2\xCC4\x11D\x3\x2\x2"+
		"\x2\xCC5\xCC6\a\xC9\x2\x2\xCC6\xCC7\a\x9D\x2\x2\xCC7\xCC8\a\x21F\x2\x2"+
		"\xCC8\xCC9\a\x1F1\x2\x2\xCC9\xCCA\x5\x4C2\x262\x2\xCCA\xCCB\a\x439\x2"+
		"\x2\xCCB\xCCC\a\x4BA\x2\x2\xCCC\xCCD\a\x1F6\x2\x2\xCCD\xCCE\a\x4A8\x2"+
		"\x2\xCCE\xCCF\a\x4A4\x2\x2\xCCF\xCD0\a\x4BC\x2\x2\xCD0\xCD1\a\x1F4\x2"+
		"\x2\xCD1\xCD2\a\x4A8\x2\x2\xCD2\xCD3\a\x4A4\x2\x2\xCD3\xCD4\a\x4BB\x2"+
		"\x2\xCD4\x11F\x3\x2\x2\x2\xCD5\xCD6\a%\x2\x2\xCD6\xCD7\a\xCC\x2\x2\xCD7"+
		"\xCD8\x5\x4C2\x262\x2\xCD8\xCD9\a\x439\x2\x2\xCD9\xCDA\a\x1AF\x2\x2\xCDA"+
		"\xCDB\a\x4A8\x2\x2\xCDB\xCE0\a\x4A4\x2\x2\xCDC\xCDD\a\x4BC\x2\x2\xCDD"+
		"\xCDE\a\x369\x2\x2\xCDE\xCDF\a\x4A8\x2\x2\xCDF\xCE1\a\x4A4\x2\x2\xCE0"+
		"\xCDC\x3\x2\x2\x2\xCE0\xCE1\x3\x2\x2\x2\xCE1\x121\x3\x2\x2\x2\xCE2\xCE3"+
		"\a\xC9\x2\x2\xCE3\xCE4\a\xCC\x2\x2\xCE4\xCE5\x5\x4C2\x262\x2\xCE5\xCE6"+
		"\a\x439\x2\x2\xCE6\xCE7\a\x1AF\x2\x2\xCE7\xCE8\a\x4A8\x2\x2\xCE8\xCED"+
		"\a\x4A4\x2\x2\xCE9\xCEA\a\x4BC\x2\x2\xCEA\xCEB\a\x369\x2\x2\xCEB\xCEC"+
		"\a\x4A8\x2\x2\xCEC\xCEE\a\x4A4\x2\x2\xCED\xCE9\x3\x2\x2\x2\xCED\xCEE\x3"+
		"\x2\x2\x2\xCEE\xCF3\x3\x2\x2\x2\xCEF\xCF0\a\x172\x2\x2\xCF0\xCF1\a\xCE"+
		"\x2\x2\xCF1\xCF2\a\x2E9\x2\x2\xCF2\xCF4\x5\x4C2\x262\x2\xCF3\xCEF\x3\x2"+
		"\x2\x2\xCF3\xCF4\x3\x2\x2\x2\xCF4\x123\x3\x2\x2\x2\xCF5\xCF6\a%\x2\x2"+
		"\xCF6\xCF7\a\xCE\x2\x2\xCF7\xCF8\a\x2E9\x2\x2\xCF8\xCFD\x5\x4C2\x262\x2"+
		"\xCF9\xCFA\a\x181\x2\x2\xCFA\xCFB\a\x15C\x2\x2\xCFB\xCFC\a\x4A8\x2\x2"+
		"\xCFC\xCFE\a\x4A4\x2\x2\xCFD\xCF9\x3\x2\x2\x2\xCFD\xCFE\x3\x2\x2\x2\xCFE"+
		"\xD00\x3\x2\x2\x2\xCFF\xD01\t\x1B\x2\x2\xD00\xCFF\x3\x2\x2\x2\xD00\xD01"+
		"\x3\x2\x2\x2\xD01\x125\x3\x2\x2\x2\xD02\xD03\a\xC9\x2\x2\xD03\xD04\a\xCE"+
		"\x2\x2\xD04\xD05\a\x2E9\x2\x2\xD05\xD06\x5\x4C2\x262\x2\xD06\xD07\a\x181"+
		"\x2\x2\xD07\xD08\a\x15C\x2\x2\xD08\xD09\a\x4A8\x2\x2\xD09\xD0A\a\x4A4"+
		"\x2\x2\xD0A\x127\x3\x2\x2\x2\xD0B\xD0C\a\xC9\x2\x2\xD0C\xD0D\a\x131\x2"+
		"\x2\xD0D\xD10\x5\x4C2\x262\x2\xD0E\xD0F\a\x46\x2\x2\xD0F\xD11\x5\x4C2"+
		"\x262\x2\xD10\xD0E\x3\x2\x2\x2\xD10\xD11\x3\x2\x2\x2\xD11\xD15\x3\x2\x2"+
		"\x2\xD12\xD13\a\x3B2\x2\x2\xD13\xD14\a\x4A8\x2\x2\xD14\xD16\t\x1C\x2\x2"+
		"\xD15\xD12\x3\x2\x2\x2\xD15\xD16\x3\x2\x2\x2\xD16\xD17\x3\x2\x2\x2\xD17"+
		"\xD18\a:\x2\x2\xD18\xD19\a\x3E1\x2\x2\xD19\xD1A\a\x4BA\x2\x2\xD1A\xD1B"+
		"\x5\x12E\x98\x2\xD1B\xD4E\a\x4BB\x2\x2\xD1C\xD1D\a\x172\x2\x2\xD1D\xD1E"+
		"\a\x401\x2\x2\xD1E\xD1F\a\x4BA\x2\x2\xD1F\xD4F\a\x4BB\x2\x2\xD20\xD21"+
		"\a\x172\x2\x2\xD21\xD22\a\x37E\x2\x2\xD22\xD23\a\x4BA\x2\x2\xD23\xD28"+
		"\x5\x12C\x97\x2\xD24\xD26\a\x4BC\x2\x2\xD25\xD24\x3\x2\x2\x2\xD25\xD26"+
		"\x3\x2\x2\x2\xD26\xD27\x3\x2\x2\x2\xD27\xD29\x5\x12A\x96\x2\xD28\xD25"+
		"\x3\x2\x2\x2\xD28\xD29\x3\x2\x2\x2\xD29\xD30\x3\x2\x2\x2\xD2A\xD2C\a\x4BC"+
		"\x2\x2\xD2B\xD2A\x3\x2\x2\x2\xD2B\xD2C\x3\x2\x2\x2\xD2C\xD2D\x3\x2\x2"+
		"\x2\xD2D\xD2E\a\x241\x2\x2\xD2E\xD2F\a\x4A8\x2\x2\xD2F\xD31\t\x1D\x2\x2"+
		"\xD30\xD2B\x3\x2\x2\x2\xD30\xD31\x3\x2\x2\x2\xD31\xD38\x3\x2\x2\x2\xD32"+
		"\xD34\a\x4BC\x2\x2\xD33\xD32\x3\x2\x2\x2\xD33\xD34\x3\x2\x2\x2\xD34\xD35"+
		"\x3\x2\x2\x2\xD35\xD36\a\x242\x2\x2\xD36\xD37\a\x4A8\x2\x2\xD37\xD39\a"+
		"\x4A2\x2\x2\xD38\xD33\x3\x2\x2\x2\xD38\xD39\x3\x2\x2\x2\xD39\xD3A\x3\x2"+
		"\x2\x2\xD3A\xD3B\a\x4BB\x2\x2\xD3B\xD4F\x3\x2\x2\x2\xD3C\xD3D\a\x172\x2"+
		"\x2\xD3D\xD3E\a\xE0\x2\x2\xD3E\xD3F\a\x4BA\x2\x2\xD3F\xD44\x5\x12C\x97"+
		"\x2\xD40\xD42\a\x4BC\x2\x2\xD41\xD40\x3\x2\x2\x2\xD41\xD42\x3\x2\x2\x2"+
		"\xD42\xD43\x3\x2\x2\x2\xD43\xD45\x5\x12A\x96\x2\xD44\xD41\x3\x2\x2\x2"+
		"\xD44\xD45\x3\x2\x2\x2\xD45\xD47\x3\x2\x2\x2\xD46\xD48\a\x4BC\x2\x2\xD47"+
		"\xD46\x3\x2\x2\x2\xD47\xD48\x3\x2\x2\x2\xD48\xD49\x3\x2\x2\x2\xD49\xD4A"+
		"\a\x341\x2\x2\xD4A\xD4B\a\x4A8\x2\x2\xD4B\xD4C\t\x1E\x2\x2\xD4C\xD4D\a"+
		"\x4BB\x2\x2\xD4D\xD4F\x3\x2\x2\x2\xD4E\xD1C\x3\x2\x2\x2\xD4E\xD20\x3\x2"+
		"\x2\x2\xD4E\xD3C\x3\x2\x2\x2\xD4F\x129\x3\x2\x2\x2\xD50\xD51\a\x12E\x2"+
		"\x2\xD51\xD52\a\x4A8\x2\x2\xD52\xD5E\t\x1F\x2\x2\xD53\xD5C\a\x17\x2\x2"+
		"\xD54\xD56\a\x10\x2\x2\xD55\xD57\a\x2FE\x2\x2\xD56\xD55\x3\x2\x2\x2\xD56"+
		"\xD57\x3\x2\x2\x2\xD57\xD5D\x3\x2\x2\x2\xD58\xD5A\a\x2FE\x2\x2\xD59\xD5B"+
		"\a\x10\x2\x2\xD5A\xD59\x3\x2\x2\x2\xD5A\xD5B\x3\x2\x2\x2\xD5B\xD5D\x3"+
		"\x2\x2\x2\xD5C\xD54\x3\x2\x2\x2\xD5C\xD58\x3\x2\x2\x2\xD5D\xD5F\x3\x2"+
		"\x2\x2\xD5E\xD53\x3\x2\x2\x2\xD5E\xD5F\x3\x2\x2\x2\xD5F\x12B\x3\x2\x2"+
		"\x2\xD60\xD61\a\x45\x2\x2\xD61\xD72\a\x4A8\x2\x2\xD62\xD64\a\x438\x2\x2"+
		"\xD63\xD65\t \x2\x2\xD64\xD63\x3\x2\x2\x2\xD64\xD65\x3\x2\x2\x2\xD65\xD68"+
		"\x3\x2\x2\x2\xD66\xD67\a|\x2\x2\xD67\xD69\x5\x4C2\x262\x2\xD68\xD66\x3"+
		"\x2\x2\x2\xD68\xD69\x3\x2\x2\x2\xD69\xD73\x3\x2\x2\x2\xD6A\xD6B\a|\x2"+
		"\x2\xD6B\xD6D\x5\x4C2\x262\x2\xD6C\xD6E\a\x438\x2\x2\xD6D\xD6C\x3\x2\x2"+
		"\x2\xD6D\xD6E\x3\x2\x2\x2\xD6E\xD70\x3\x2\x2\x2\xD6F\xD71\t \x2\x2\xD70"+
		"\xD6F\x3\x2\x2\x2\xD70\xD71\x3\x2\x2\x2\xD71\xD73\x3\x2\x2\x2\xD72\xD62"+
		"\x3\x2\x2\x2\xD72\xD6A\x3\x2\x2\x2\xD73\x12D\x3\x2\x2\x2\xD74\xD75\a\x20B"+
		"\x2\x2\xD75\xD76\a\x4A8\x2\x2\xD76\xD83\a\x4A2\x2\x2\xD77\xD78\a\x4BC"+
		"\x2\x2\xD78\xD79\a\x20A\x2\x2\xD79\xD81\a\x4A8\x2\x2\xD7A\xD82\a\x18\x2"+
		"\x2\xD7B\xD7E\a\x4BA\x2\x2\xD7C\xD7F\a\x498\x2\x2\xD7D\xD7F\a\x4A4\x2"+
		"\x2\xD7E\xD7C\x3\x2\x2\x2\xD7E\xD7D\x3\x2\x2\x2\xD7F\xD80\x3\x2\x2\x2"+
		"\xD80\xD82\a\x4BB\x2\x2\xD81\xD7A\x3\x2\x2\x2\xD81\xD7B\x3\x2\x2\x2\xD82"+
		"\xD84\x3\x2\x2\x2\xD83\xD77\x3\x2\x2\x2\xD83\xD84\x3\x2\x2\x2\xD84\x12F"+
		"\x3\x2\x2\x2\xD85\xD86\a\xC9\x2\x2\xD86\xD87\a\x13E\x2\x2\xD87\xD88\a"+
		"\x272\x2\x2\xD88\xD89\x5\x4C2\x262\x2\xD89\xD8E\a\x294\x2\x2\xD8A\xD8F"+
		"\a\x37A\x2\x2\xD8B\xD8F\a\xDD\x2\x2\xD8C\xD8D\a\x2F3\x2\x2\xD8D\xD8F\x5"+
		"\x4C2\x262\x2\xD8E\xD8A\x3\x2\x2\x2\xD8E\xD8B\x3\x2\x2\x2\xD8E\xD8C\x3"+
		"\x2\x2\x2\xD8F\xD92\x3\x2\x2\x2\xD90\xD91\a\x439\x2\x2\xD91\xD93\a\x158"+
		"\x2\x2\xD92\xD90\x3\x2\x2\x2\xD92\xD93\x3\x2\x2\x2\xD93\xD94\x3\x2\x2"+
		"\x2\xD94\xD99\a\x172\x2\x2\xD95\xD97\a\x4BC\x2\x2\xD96\xD95\x3\x2\x2\x2"+
		"\xD96\xD97\x3\x2\x2\x2\xD97\xD98\x3\x2\x2\x2\xD98\xD9A\x5\x4C2\x262\x2"+
		"\xD99\xD96\x3\x2\x2\x2\xD9A\xD9B\x3\x2\x2\x2\xD9B\xD99\x3\x2\x2\x2\xD9B"+
		"\xD9C\x3\x2\x2\x2\xD9C\xD9D\x3\x2\x2\x2\xD9D\xD9E\a\x3EB\x2\x2\xD9E\xD9F"+
		"\a\x37C\x2\x2\xD9F\xDA0\a\x4A4\x2\x2\xDA0\xDA1\a\x4BC\x2\x2\xDA1\xDA2"+
		"\a\x4A4\x2\x2\xDA2\x131\x3\x2\x2\x2\xDA3\xDA4\t\x18\x2\x2\xDA4\xDA5\a"+
		"\x13E\x2\x2\xDA5\xDA6\a\x381\x2\x2\xDA6\xDA7\x5\x4C2\x262\x2\xDA7\xDA8"+
		"\a\x294\x2\x2\xDA8\xDEC\a\x37A\x2\x2\xDA9\xDAB\a\x4BC\x2\x2\xDAA\xDA9"+
		"\x3\x2\x2\x2\xDAA\xDAB\x3\x2\x2\x2\xDAB\xDAC\x3\x2\x2\x2\xDAC\xDAD\a\r"+
		"\x2\x2\xDAD\xDB1\a\x13E\x2\x2\xDAE\xDAF\x5\x4C2\x262\x2\xDAF\xDB0\a\x4B5"+
		"\x2\x2\xDB0\xDB2\x3\x2\x2\x2\xDB1\xDAE\x3\x2\x2\x2\xDB1\xDB2\x3\x2\x2"+
		"\x2\xDB2\xDB3\x3\x2\x2\x2\xDB3\xDB4\x5\x4C2\x262\x2\xDB4\xDB5\a\x4B5\x2"+
		"\x2\xDB5\xDB6\x5\x4C2\x262\x2\xDB6\xDE7\x3\x2\x2\x2\xDB7\xDC5\a\x4BA\x2"+
		"\x2\xDB8\xDC2\a\x386\x2\x2\xDB9\xDBB\a\x4BC\x2\x2\xDBA\xDB9\x3\x2\x2\x2"+
		"\xDBA\xDBB\x3\x2\x2\x2\xDBB\xDBC\x3\x2\x2\x2\xDBC\xDBD\x5\x4C2\x262\x2"+
		"\xDBD\xDBE\a\x4A8\x2\x2\xDBE\xDBF\t!\x2\x2\xDBF\xDC1\x3\x2\x2\x2\xDC0"+
		"\xDBA\x3\x2\x2\x2\xDC1\xDC4\x3\x2\x2\x2\xDC2\xDC0\x3\x2\x2\x2\xDC2\xDC3"+
		"\x3\x2\x2\x2\xDC3\xDC6\x3\x2\x2\x2\xDC4\xDC2\x3\x2\x2\x2\xDC5\xDB8\x3"+
		"\x2\x2\x2\xDC5\xDC6\x3\x2\x2\x2\xDC6\xDDB\x3\x2\x2\x2\xDC7\xDC8\a\n\x2"+
		"\x2\xDC8\xDD5\a\x4BA\x2\x2\xDC9\xDCB\a\x4BC\x2\x2\xDCA\xDC9\x3\x2\x2\x2"+
		"\xDCA\xDCB\x3\x2\x2\x2\xDCB\xDCF\x3\x2\x2\x2\xDCC\xDCD\x5\x4C2\x262\x2"+
		"\xDCD\xDCE\a\x4B5\x2\x2\xDCE\xDD0\x3\x2\x2\x2\xDCF\xDCC\x3\x2\x2\x2\xDCF"+
		"\xDD0\x3\x2\x2\x2\xDD0\xDD1\x3\x2\x2\x2\xDD1\xDD2\x5\x4C2\x262\x2\xDD2"+
		"\xDD3\a\x4B5\x2\x2\xDD3\xDD4\x5\x4C2\x262\x2\xDD4\xDD6\x3\x2\x2\x2\xDD5"+
		"\xDCA\x3\x2\x2\x2\xDD6\xDD7\x3\x2\x2\x2\xDD7\xDD5\x3\x2\x2\x2\xDD7\xDD8"+
		"\x3\x2\x2\x2\xDD8\xDD9\x3\x2\x2\x2\xDD9\xDDA\a\x4BB\x2\x2\xDDA\xDDC\x3"+
		"\x2\x2\x2\xDDB\xDC7\x3\x2\x2\x2\xDDC\xDDD\x3\x2\x2\x2\xDDD\xDDB\x3\x2"+
		"\x2\x2\xDDD\xDDE\x3\x2\x2\x2\xDDE\xDE1\x3\x2\x2\x2\xDDF\xDE0\a\x436\x2"+
		"\x2\xDE0\xDE2\x5\x134\x9B\x2\xDE1\xDDF\x3\x2\x2\x2\xDE1\xDE2\x3\x2\x2"+
		"\x2\xDE2\xDE3\x3\x2\x2\x2\xDE3\xDE4\a\x4BB\x2\x2\xDE4\xDE6\x3\x2\x2\x2"+
		"\xDE5\xDB7\x3\x2\x2\x2\xDE6\xDE9\x3\x2\x2\x2\xDE7\xDE5\x3\x2\x2\x2\xDE7"+
		"\xDE8\x3\x2\x2\x2\xDE8\xDEB\x3\x2\x2\x2\xDE9\xDE7\x3\x2\x2\x2\xDEA\xDAA"+
		"\x3\x2\x2\x2\xDEB\xDEE\x3\x2\x2\x2\xDEC\xDEA\x3\x2\x2\x2\xDEC\xDED\x3"+
		"\x2\x2\x2\xDED\xDFF\x3\x2\x2\x2\xDEE\xDEC\x3\x2\x2\x2\xDEF\xDF1\a\x4BC"+
		"\x2\x2\xDF0\xDEF\x3\x2\x2\x2\xDF0\xDF1\x3\x2\x2\x2\xDF1\xDF2\x3\x2\x2"+
		"\x2\xDF2\xDF3\a\x11E\x2\x2\xDF3\xDF7\a\x13E\x2\x2\xDF4\xDF5\x5\x4C2\x262"+
		"\x2\xDF5\xDF6\a\x4B5\x2\x2\xDF6\xDF8\x3\x2\x2\x2\xDF7\xDF4\x3\x2\x2\x2"+
		"\xDF7\xDF8\x3\x2\x2\x2\xDF8\xDF9\x3\x2\x2\x2\xDF9\xDFA\x5\x4C2\x262\x2"+
		"\xDFA\xDFB\a\x4B5\x2\x2\xDFB\xDFC\x5\x4C2\x262\x2\xDFC\xDFE\x3\x2\x2\x2"+
		"\xDFD\xDF0\x3\x2\x2\x2\xDFE\xE01\x3\x2\x2\x2\xDFF\xDFD\x3\x2\x2\x2\xDFF"+
		"\xE00\x3\x2\x2\x2\xE00\xE2B\x3\x2\x2\x2\xE01\xDFF\x3\x2\x2\x2\xE02\xE03"+
		"\a\r\x2\x2\xE03\xE07\a\x3DE\x2\x2\xE04\xE05\x5\x4C2\x262\x2\xE05\xE06"+
		"\a\x4B5\x2\x2\xE06\xE08\x3\x2\x2\x2\xE07\xE04\x3\x2\x2\x2\xE07\xE08\x3"+
		"\x2\x2\x2\xE08\xE09\x3\x2\x2\x2\xE09\xE0A\x5\x4C2\x262\x2\xE0A\xE0B\a"+
		"\x4B5\x2\x2\xE0B\xE0C\x5\x4C2\x262\x2\xE0C\xE26\x3\x2\x2\x2\xE0D\xE0E"+
		"\a\x4BA\x2\x2\xE0E\xE1E\a\x386\x2\x2\xE0F\xE11\a\x4BC\x2\x2\xE10\xE0F"+
		"\x3\x2\x2\x2\xE10\xE11\x3\x2\x2\x2\xE11\xE12\x3\x2\x2\x2\xE12\xE13\x5"+
		"\x4C2\x262\x2\xE13\xE1C\a\x4A8\x2\x2\xE14\xE16\a\x4BA\x2\x2\xE15\xE14"+
		"\x3\x2\x2\x2\xE15\xE16\x3\x2\x2\x2\xE16\xE17\x3\x2\x2\x2\xE17\xE19\a\x4A2"+
		"\x2\x2\xE18\xE1A\a\x4BB\x2\x2\xE19\xE18\x3\x2\x2\x2\xE19\xE1A\x3\x2\x2"+
		"\x2\xE1A\xE1D\x3\x2\x2\x2\xE1B\xE1D\a\x4A4\x2\x2\xE1C\xE15\x3\x2\x2\x2"+
		"\xE1C\xE1B\x3\x2\x2\x2\xE1D\xE1F\x3\x2\x2\x2\xE1E\xE10\x3\x2\x2\x2\xE1F"+
		"\xE20\x3\x2\x2\x2\xE20\xE1E\x3\x2\x2\x2\xE20\xE21\x3\x2\x2\x2\xE21\xE22"+
		"\x3\x2\x2\x2\xE22\xE23\a\x4BB\x2\x2\xE23\xE25\x3\x2\x2\x2\xE24\xE0D\x3"+
		"\x2\x2\x2\xE25\xE28\x3\x2\x2\x2\xE26\xE24\x3\x2\x2\x2\xE26\xE27\x3\x2"+
		"\x2\x2\xE27\xE2A\x3\x2\x2\x2\xE28\xE26\x3\x2\x2\x2\xE29\xE02\x3\x2\x2"+
		"\x2\xE2A\xE2D\x3\x2\x2\x2\xE2B\xE29\x3\x2\x2\x2\xE2B\xE2C\x3\x2\x2\x2"+
		"\xE2C\xE3B\x3\x2\x2\x2\xE2D\xE2B\x3\x2\x2\x2\xE2E\xE2F\a\x11E\x2\x2\xE2F"+
		"\xE33\a\x3DE\x2\x2\xE30\xE31\x5\x4C2\x262\x2\xE31\xE32\a\x4B5\x2\x2\xE32"+
		"\xE34\x3\x2\x2\x2\xE33\xE30\x3\x2\x2\x2\xE33\xE34\x3\x2\x2\x2\xE34\xE35"+
		"\x3\x2\x2\x2\xE35\xE36\x5\x4C2\x262\x2\xE36\xE37\a\x4B5\x2\x2\xE37\xE38"+
		"\x5\x4C2\x262\x2\xE38\xE3A\x3\x2\x2\x2\xE39\xE2E\x3\x2\x2\x2\xE3A\xE3D"+
		"\x3\x2\x2\x2\xE3B\xE39\x3\x2\x2\x2\xE3B\xE3C\x3\x2\x2\x2\xE3C\xE7F\x3"+
		"\x2\x2\x2\xE3D\xE3B\x3\x2\x2\x2\xE3E\xE3F\a\x439\x2\x2\xE3F\xE47\a\x4BA"+
		"\x2\x2\xE40\xE42\a\x4BC\x2\x2\xE41\xE40\x3\x2\x2\x2\xE41\xE42\x3\x2\x2"+
		"\x2\xE42\xE43\x3\x2\x2\x2\xE43\xE44\a\x22F\x2\x2\xE44\xE45\a\x4A8\x2\x2"+
		"\xE45\xE46\a\x4A2\x2\x2\xE46\xE48\t\"\x2\x2\xE47\xE41\x3\x2\x2\x2\xE47"+
		"\xE48\x3\x2\x2\x2\xE48\xE4F\x3\x2\x2\x2\xE49\xE4B\a\x4BC\x2\x2\xE4A\xE49"+
		"\x3\x2\x2\x2\xE4A\xE4B\x3\x2\x2\x2\xE4B\xE4C\x3\x2\x2\x2\xE4C\xE4D\a\x140"+
		"\x2\x2\xE4D\xE4E\a\x4A8\x2\x2\xE4E\xE50\t#\x2\x2\xE4F\xE4A\x3\x2\x2\x2"+
		"\xE4F\xE50\x3\x2\x2\x2\xE50\xE5B\x3\x2\x2\x2\xE51\xE53\a\x4BC\x2\x2\xE52"+
		"\xE51\x3\x2\x2\x2\xE52\xE53\x3\x2\x2\x2\xE53\xE54\x3\x2\x2\x2\xE54\xE55"+
		"\a\x229\x2\x2\xE55\xE59\a\x4A8\x2\x2\xE56\xE57\a\x4A2\x2\x2\xE57\xE5A"+
		"\a\x368\x2\x2\xE58\xE5A\a\x1CA\x2\x2\xE59\xE56\x3\x2\x2\x2\xE59\xE58\x3"+
		"\x2\x2\x2\xE5A\xE5C\x3\x2\x2\x2\xE5B\xE52\x3\x2\x2\x2\xE5B\xE5C\x3\x2"+
		"\x2\x2\xE5C\xE64\x3\x2\x2\x2\xE5D\xE5F\a\x4BC\x2\x2\xE5E\xE5D\x3\x2\x2"+
		"\x2\xE5E\xE5F\x3\x2\x2\x2\xE5F\xE60\x3\x2\x2\x2\xE60\xE61\a\x22C\x2\x2"+
		"\xE61\xE62\a\x4A8\x2\x2\xE62\xE63\a\x4A2\x2\x2\xE63\xE65\t\"\x2\x2\xE64"+
		"\xE5E\x3\x2\x2\x2\xE64\xE65\x3\x2\x2\x2\xE65\xE6C\x3\x2\x2\x2\xE66\xE68"+
		"\a\x4BC\x2\x2\xE67\xE66\x3\x2\x2\x2\xE67\xE68\x3\x2\x2\x2\xE68\xE69\x3"+
		"\x2\x2\x2\xE69\xE6A\a\x23E\x2\x2\xE6A\xE6B\a\x4A8\x2\x2\xE6B\xE6D\t$\x2"+
		"\x2\xE6C\xE67\x3\x2\x2\x2\xE6C\xE6D\x3\x2\x2\x2\xE6D\xE74\x3\x2\x2\x2"+
		"\xE6E\xE70\a\x4BC\x2\x2\xE6F\xE6E\x3\x2\x2\x2\xE6F\xE70\x3\x2\x2\x2\xE70"+
		"\xE71\x3\x2\x2\x2\xE71\xE72\a\x3F1\x2\x2\xE72\xE73\a\x4A8\x2\x2\xE73\xE75"+
		"\t\x13\x2\x2\xE74\xE6F\x3\x2\x2\x2\xE74\xE75\x3\x2\x2\x2\xE75\xE7C\x3"+
		"\x2\x2\x2\xE76\xE78\a\x4BC\x2\x2\xE77\xE76\x3\x2\x2\x2\xE77\xE78\x3\x2"+
		"\x2\x2\xE78\xE79\x3\x2\x2\x2\xE79\xE7A\a\x3B0\x2\x2\xE7A\xE7B\a\x4A8\x2"+
		"\x2\xE7B\xE7D\t\x13\x2\x2\xE7C\xE77\x3\x2\x2\x2\xE7C\xE7D\x3\x2\x2\x2"+
		"\xE7D\xE7E\x3\x2\x2\x2\xE7E\xE80\a\x4BB\x2\x2\xE7F\xE3E\x3\x2\x2\x2\xE7F"+
		"\xE80\x3\x2\x2\x2\xE80\xE84\x3\x2\x2\x2\xE81\xE82\a\x3B2\x2\x2\xE82\xE83"+
		"\a\x4A8\x2\x2\xE83\xE85\t%\x2\x2\xE84\xE81\x3\x2\x2\x2\xE84\xE85\x3\x2"+
		"\x2\x2\xE85\x133\x3\x2\x2\x2\xE86\xE88\a\x4BC\x2\x2\xE87\xE86\x3\x2\x2"+
		"\x2\xE87\xE88\x3\x2\x2\x2\xE88\xE8A\x3\x2\x2\x2\xE89\xE8B\t&\x2\x2\xE8A"+
		"\xE89\x3\x2\x2\x2\xE8A\xE8B\x3\x2\x2\x2\xE8B\xE8D\x3\x2\x2\x2\xE8C\xE8E"+
		"\a\x271\x2\x2\xE8D\xE8C\x3\x2\x2\x2\xE8D\xE8E\x3\x2\x2\x2\xE8E\xE94\x3"+
		"\x2\x2\x2\xE8F\xE95\x5\x136\x9C\x2\xE90\xE91\a\x4BA\x2\x2\xE91\xE92\x5"+
		"\x134\x9B\x2\xE92\xE93\a\x4BB\x2\x2\xE93\xE95\x3\x2\x2\x2\xE94\xE8F\x3"+
		"\x2\x2\x2\xE94\xE90\x3\x2\x2\x2\xE95\xE97\x3\x2\x2\x2\xE96\xE87\x3\x2"+
		"\x2\x2\xE97\xE98\x3\x2\x2\x2\xE98\xE96\x3\x2\x2\x2\xE98\xE99\x3\x2\x2"+
		"\x2\xE99\x135\x3\x2\x2\x2\xE9A\xEA0\x5\x138\x9D\x2\xE9B\xE9C\a\x4BA\x2"+
		"\x2\xE9C\xE9D\x5\x134\x9B\x2\xE9D\xE9E\a\x4BB\x2\x2\xE9E\xEA0\x3\x2\x2"+
		"\x2\xE9F\xE9A\x3\x2\x2\x2\xE9F\xE9B\x3\x2\x2\x2\xEA0\x137\x3\x2\x2\x2"+
		"\xEA1\xEBE\x5\x4C2\x262\x2\xEA2\xEAD\x5\x4C2\x262\x2\xEA3\xEA4\x5\x4C2"+
		"\x262\x2\xEA4\xEA5\a\x4B5\x2\x2\xEA5\xEA7\x3\x2\x2\x2\xEA6\xEA3\x3\x2"+
		"\x2\x2\xEA6\xEA7\x3\x2\x2\x2\xEA7\xEA8\x3\x2\x2\x2\xEA8\xEA9\x5\x4C2\x262"+
		"\x2\xEA9\xEAA\a\x4B5\x2\x2\xEAA\xEAB\x5\x4C2\x262\x2\xEAB\xEAD\x3\x2\x2"+
		"\x2\xEAC\xEA2\x3\x2\x2\x2\xEAC\xEA6\x3\x2\x2\x2\xEAD\xEB9\x3\x2\x2\x2"+
		"\xEAE\xEBA\a\x4A8\x2\x2\xEAF\xEB0\a\x4AA\x2\x2\xEB0\xEBA\a\x4A9\x2\x2"+
		"\xEB1\xEB2\a\x4AB\x2\x2\xEB2\xEBA\a\x4A8\x2\x2\xEB3\xEBA\a\x4A9\x2\x2"+
		"\xEB4\xEB5\a\x4A9\x2\x2\xEB5\xEBA\a\x4A8\x2\x2\xEB6\xEBA\a\x4AA\x2\x2"+
		"\xEB7\xEB8\a\x4AA\x2\x2\xEB8\xEBA\a\x4A8\x2\x2\xEB9\xEAE\x3\x2\x2\x2\xEB9"+
		"\xEAF\x3\x2\x2\x2\xEB9\xEB1\x3\x2\x2\x2\xEB9\xEB3\x3\x2\x2\x2\xEB9\xEB4"+
		"\x3\x2\x2\x2\xEB9\xEB6\x3\x2\x2\x2\xEB9\xEB7\x3\x2\x2\x2\xEBA\xEBB\x3"+
		"\x2\x2\x2\xEBB\xEBC\t!\x2\x2\xEBC\xEBE\x3\x2\x2\x2\xEBD\xEA1\x3\x2\x2"+
		"\x2\xEBD\xEAC\x3\x2\x2\x2\xEBE\xEDA\x3\x2\x2\x2\xEBF\xEC0\x5\x4C2\x262"+
		"\x2\xEC0\xEC1\a\x4B5\x2\x2\xEC1\xEC3\x3\x2\x2\x2\xEC2\xEBF\x3\x2\x2\x2"+
		"\xEC2\xEC3\x3\x2\x2\x2\xEC3\xEC4\x3\x2\x2\x2\xEC4\xEC5\x5\x4C2\x262\x2"+
		"\xEC5\xEC6\a\x4B5\x2\x2\xEC6\xEC7\x5\x4C2\x262\x2\xEC7\xED5\a\x4BA\x2"+
		"\x2\xEC8\xED6\x5\x4C2\x262\x2\xEC9\xECA\x5\x4C2\x262\x2\xECA\xECB\a\x4B5"+
		"\x2\x2\xECB\xECD\x3\x2\x2\x2\xECC\xEC9\x3\x2\x2\x2\xECC\xECD\x3\x2\x2"+
		"\x2\xECD\xECE\x3\x2\x2\x2\xECE\xECF\x5\x4C2\x262\x2\xECF\xED0\a\x4B5\x2"+
		"\x2\xED0\xED1\x5\x4C2\x262\x2\xED1\xED2\x3\x2\x2\x2\xED2\xED3\a\x4BC\x2"+
		"\x2\xED3\xED4\t!\x2\x2\xED4\xED6\x3\x2\x2\x2\xED5\xEC8\x3\x2\x2\x2\xED5"+
		"\xECC\x3\x2\x2\x2\xED6\xED7\x3\x2\x2\x2\xED7\xED8\a\x4BB\x2\x2\xED8\xEDA"+
		"\x3\x2\x2\x2\xED9\xEBD\x3\x2\x2\x2\xED9\xEC2\x3\x2\x2\x2\xEDA\x139\x3"+
		"\x2\x2\x2\xEDB\xEDC\a%\x2\x2\xEDC\xEDD\a\x150\x2\x2\xEDD\xEDE\a\xDC\x2"+
		"\x2\xEDE\xEDF\a\x3A1\x2\x2\xEDF\xEE0\x5\x4C2\x262\x2\xEE0\xEF0\a\x386"+
		"\x2\x2\xEE1\xEE2\a\x211\x2\x2\xEE2\xEE3\a\x4A8\x2\x2\xEE3\xEE5\a\x4A4"+
		"\x2\x2\xEE4\xEE6\a\x4BC\x2\x2\xEE5\xEE4\x3\x2\x2\x2\xEE5\xEE6\x3\x2\x2"+
		"\x2\xEE6\xEF1\x3\x2\x2\x2\xEE7\xEE8\a\x330\x2\x2\xEE8\xEE9\a\x4A8\x2\x2"+
		"\xEE9\xEEB\a\x4A4\x2\x2\xEEA\xEEC\a\x4BC\x2\x2\xEEB\xEEA\x3\x2\x2\x2\xEEB"+
		"\xEEC\x3\x2\x2\x2\xEEC\xEF1\x3\x2\x2\x2\xEED\xEEE\a\xCC\x2\x2\xEEE\xEEF"+
		"\a\x4A8\x2\x2\xEEF\xEF1\x5\x4C2\x262\x2\xEF0\xEE1\x3\x2\x2\x2\xEF0\xEE7"+
		"\x3\x2\x2\x2\xEF0\xEED\x3\x2\x2\x2\xEF1\xEF2\x3\x2\x2\x2\xEF2\xEF0\x3"+
		"\x2\x2\x2\xEF2\xEF3\x3\x2\x2\x2\xEF3\xF0B\x3\x2\x2\x2\xEF4\xEF5\a%\x2"+
		"\x2\xEF5\xEF6\a\x150\x2\x2\xEF6\xEF7\a\xDC\x2\x2\xEF7\xEF8\a\x3A1\x2\x2"+
		"\xEF8\xEF9\x5\x4C2\x262\x2\xEF9\xEFA\a\x439\x2\x2\xEFA\xEFB\a\x4BA\x2"+
		"\x2\xEFB\xEFC\a\x403\x2\x2\xEFC\xEFD\a\x4A8\x2\x2\xEFD\xEFE\a\x63\x2\x2"+
		"\xEFE\xEFF\a\x4BC\x2\x2\xEFF\xF00\a\x211\x2\x2\xF00\xF01\a\x4A8\x2\x2"+
		"\xF01\xF06\a\x4A4\x2\x2\xF02\xF03\a\x4BC\x2\x2\xF03\xF04\a\xCC\x2\x2\xF04"+
		"\xF05\a\x4A8\x2\x2\xF05\xF07\x5\x4C2\x262\x2\xF06\xF02\x3\x2\x2\x2\xF06"+
		"\xF07\x3\x2\x2\x2\xF07\xF08\x3\x2\x2\x2\xF08\xF09\a\x4BB\x2\x2\xF09\xF0B"+
		"\x3\x2\x2\x2\xF0A\xEDB\x3\x2\x2\x2\xF0A\xEF4\x3\x2\x2\x2\xF0B\x13B\x3"+
		"\x2\x2\x2\xF0C\xF0D\a%\x2\x2\xF0D\xF0E\a\x150\x2\x2\xF0E\xF0F\a\x202\x2"+
		"\x2\xF0F\xF12\x5\x4C2\x262\x2\xF10\xF11\a\x46\x2\x2\xF11\xF13\x5\x4C2"+
		"\x262\x2\xF12\xF10\x3\x2\x2\x2\xF12\xF13\x3\x2\x2\x2\xF13\xF14\x3\x2\x2"+
		"\x2\xF14\xF15\t\'\x2\x2\xF15\xF16\a\x4BA\x2\x2\xF16\xF17\a\xB9\x2\x2\xF17"+
		"\xF1B\a\x4A8\x2\x2\xF18\xF1C\a\x4A4\x2\x2\xF19\xF1C\a\x4A5\x2\x2\xF1A"+
		"\xF1C\a\x26B\x2\x2\xF1B\xF18\x3\x2\x2\x2\xF1B\xF19\x3\x2\x2\x2\xF1B\xF1A"+
		"\x3\x2\x2\x2\xF1C\xF1D\x3\x2\x2\x2\xF1D\xF1E\a\x4BC\x2\x2\xF1E\xF1F\a"+
		"\x2D1\x2\x2\xF1F\xF21\a\x4A8\x2\x2\xF20\xF22\t(\x2\x2\xF21\xF20\x3\x2"+
		"\x2\x2\xF21\xF22\x3\x2\x2\x2\xF22\xF23\x3\x2\x2\x2\xF23\xF24\a\x4BB\x2"+
		"\x2\xF24\xF25\x3\x2\x2\x2\xF25\xF2F\a\x439\x2\x2\xF26\xF28\a\x4BC\x2\x2"+
		"\xF27\xF26\x3\x2\x2\x2\xF27\xF28\x3\x2\x2\x2\xF28\xF29\x3\x2\x2\x2\xF29"+
		"\xF2A\a\x1F9\x2\x2\xF2A\xF2B\a\x4A8\x2\x2\xF2B\xF30\t)\x2\x2\xF2C\xF2D"+
		"\a\xE7\x2\x2\xF2D\xF2E\a\x4A8\x2\x2\xF2E\xF30\x5\x4C2\x262\x2\xF2F\xF27"+
		"\x3\x2\x2\x2\xF2F\xF2C\x3\x2\x2\x2\xF30\xF31\x3\x2\x2\x2\xF31\xF2F\x3"+
		"\x2\x2\x2\xF31\xF32\x3\x2\x2\x2\xF32\xF33\x3\x2\x2\x2\xF33\xF34\a\x4BB"+
		"\x2\x2\xF34\x13D\x3\x2\x2\x2\xF35\xF36\a\xC9\x2\x2\xF36\xF37\a\x150\x2"+
		"\x2\xF37\xF38\a\x202\x2\x2\xF38\xF3B\x5\x4C2\x262\x2\xF39\xF3A\a\x46\x2"+
		"\x2\xF3A\xF3C\x5\x4C2\x262\x2\xF3B\xF39\x3\x2\x2\x2\xF3B\xF3C\x3\x2\x2"+
		"\x2\xF3C\xF3D\x3\x2\x2\x2\xF3D\xF3F\a\x181\x2\x2\xF3E\xF40\a\x4BC\x2\x2"+
		"\xF3F\xF3E\x3\x2\x2\x2\xF3F\xF40\x3\x2\x2\x2\xF40\xF42\x3\x2\x2\x2\xF41"+
		"\xF43\a\x4BA\x2\x2\xF42\xF41\x3\x2\x2\x2\xF42\xF43\x3\x2\x2\x2\xF43\xF46"+
		"\x3\x2\x2\x2\xF44\xF45\a\xB9\x2\x2\xF45\xF47\a\x4A8\x2\x2\xF46\xF44\x3"+
		"\x2\x2\x2\xF46\xF47\x3\x2\x2\x2\xF47\xF4B\x3\x2\x2\x2\xF48\xF4C\a\x4A4"+
		"\x2\x2\xF49\xF4C\a\x4A5\x2\x2\xF4A\xF4C\a\x26B\x2\x2\xF4B\xF48\x3\x2\x2"+
		"\x2\xF4B\xF49\x3\x2\x2\x2\xF4B\xF4A\x3\x2\x2\x2\xF4C\xF54\x3\x2\x2\x2"+
		"\xF4D\xF4E\a\x4BC\x2\x2\xF4E\xF4F\a\x2D1\x2\x2\xF4F\xF51\a\x4A8\x2\x2"+
		"\xF50\xF52\t(\x2\x2\xF51\xF50\x3\x2\x2\x2\xF51\xF52\x3\x2\x2\x2\xF52\xF53"+
		"\x3\x2\x2\x2\xF53\xF55\a\x4BB\x2\x2\xF54\xF4D\x3\x2\x2\x2\xF54\xF55\x3"+
		"\x2\x2\x2\xF55\xF65\x3\x2\x2\x2\xF56\xF60\a\x439\x2\x2\xF57\xF59\a\x4BC"+
		"\x2\x2\xF58\xF57\x3\x2\x2\x2\xF58\xF59\x3\x2\x2\x2\xF59\xF5A\x3\x2\x2"+
		"\x2\xF5A\xF5B\a\x1F9\x2\x2\xF5B\xF5C\a\x4A8\x2\x2\xF5C\xF61\t)\x2\x2\xF5D"+
		"\xF5E\a\xE7\x2\x2\xF5E\xF5F\a\x4A8\x2\x2\xF5F\xF61\x5\x4C2\x262\x2\xF60"+
		"\xF58\x3\x2\x2\x2\xF60\xF5D\x3\x2\x2\x2\xF61\xF62\x3\x2\x2\x2\xF62\xF60"+
		"\x3\x2\x2\x2\xF62\xF63\x3\x2\x2\x2\xF63\xF64\x3\x2\x2\x2\xF64\xF66\a\x4BB"+
		"\x2\x2\xF65\xF56\x3\x2\x2\x2\xF65\xF66\x3\x2\x2\x2\xF66\x13F\x3\x2\x2"+
		"\x2\xF67\xF68\a%\x2\x2\xF68\xF69\a\x150\x2\x2\xF69\xF6A\a\x32E\x2\x2\xF6A"+
		"\xF6D\a\x2D4\x2\x2\xF6B\xF6E\x5\x4C2\x262\x2\xF6C\xF6E\a\xFB\x2\x2\xF6D"+
		"\xF6B\x3\x2\x2\x2\xF6D\xF6C\x3\x2\x2\x2\xF6E\xF6F\x3\x2\x2\x2\xF6F\xF70"+
		"\a\x439\x2\x2\xF70\xF71\a\x4BA\x2\x2\xF71\xF72\a\x228\x2\x2\xF72\xF73"+
		"\a\x4A8\x2\x2\xF73\xF99\a\x4A2\x2\x2\xF74\xF76\a\x4BC\x2\x2\xF75\xF74"+
		"\x3\x2\x2\x2\xF75\xF76\x3\x2\x2\x2\xF76\xF77\x3\x2\x2\x2\xF77\xF78\a\x14"+
		"\x2\x2\xF78\xF79\a\xC8\x2\x2\xF79\xF87\a\x4A8\x2\x2\xF7A\xF88\aG\x2\x2"+
		"\xF7B\xF7D\a\x4BC\x2\x2\xF7C\xF7B\x3\x2\x2\x2\xF7C\xF7D\x3\x2\x2\x2\xF7D"+
		"\xF7E\x3\x2\x2\x2\xF7E\xF7F\a\x4A2\x2\x2\xF7F\xF80\a\x3EB\x2\x2\xF80\xF84"+
		"\a\x4A2\x2\x2\xF81\xF82\a\x4BC\x2\x2\xF82\xF84\a\x4A2\x2\x2\xF83\xF7C"+
		"\x3\x2\x2\x2\xF83\xF81\x3\x2\x2\x2\xF84\xF85\x3\x2\x2\x2\xF85\xF83\x3"+
		"\x2\x2\x2\xF85\xF86\x3\x2\x2\x2\xF86\xF88\x3\x2\x2\x2\xF87\xF7A\x3\x2"+
		"\x2\x2\xF87\xF83\x3\x2\x2\x2\xF88\xF9A\x3\x2\x2\x2\xF89\xF8A\a\x283\x2"+
		"\x2\xF8A\xF95\a\x4A8\x2\x2\xF8B\xF8D\a\x4BC\x2\x2\xF8C\xF8B\x3\x2\x2\x2"+
		"\xF8C\xF8D\x3\x2\x2\x2\xF8D\xF8E\x3\x2\x2\x2\xF8E\xF8F\a\x4A2\x2\x2\xF8F"+
		"\xF90\a\x3EB\x2\x2\xF90\xF96\a\x4A2\x2\x2\xF91\xF93\a\x4BC\x2\x2\xF92"+
		"\xF91\x3\x2\x2\x2\xF92\xF93\x3\x2\x2\x2\xF93\xF94\x3\x2\x2\x2\xF94\xF96"+
		"\a\x4A2\x2\x2\xF95\xF8C\x3\x2\x2\x2\xF95\xF92\x3\x2\x2\x2\xF96\xF97\x3"+
		"\x2\x2\x2\xF97\xF95\x3\x2\x2\x2\xF97\xF98\x3\x2\x2\x2\xF98\xF9A\x3\x2"+
		"\x2\x2\xF99\xF75\x3\x2\x2\x2\xF99\xF89\x3\x2\x2\x2\xF9A\xFA1\x3\x2\x2"+
		"\x2\xF9B\xF9D\a\x4BC\x2\x2\xF9C\xF9B\x3\x2\x2\x2\xF9C\xF9D\x3\x2\x2\x2"+
		"\xF9D\xF9E\x3\x2\x2\x2\xF9E\xF9F\a\x230\x2\x2\xF9F\xFA0\a\x4A8\x2\x2\xFA0"+
		"\xFA2\a\x4A2\x2\x2\xFA1\xF9C\x3\x2\x2\x2\xFA1\xFA2\x3\x2\x2\x2\xFA2\xFA9"+
		"\x3\x2\x2\x2\xFA3\xFA5\a\x4BC\x2\x2\xFA4\xFA3\x3\x2\x2\x2\xFA4\xFA5\x3"+
		"\x2\x2\x2\xFA5\xFA6\x3\x2\x2\x2\xFA6\xFA7\a\x233\x2\x2\xFA7\xFA8\a\x4A8"+
		"\x2\x2\xFA8\xFAA\a\x4A2\x2\x2\xFA9\xFA4\x3\x2\x2\x2\xFA9\xFAA\x3\x2\x2"+
		"\x2\xFAA\xFAB\x3\x2\x2\x2\xFAB\xFAC\a\x4BB\x2\x2\xFAC\x141\x3\x2\x2\x2"+
		"\xFAD\xFAE\a\xC9\x2\x2\xFAE\xFAF\a\x150\x2\x2\xFAF\xFB0\a\x32E\x2\x2\xFB0"+
		"\xFB1\a\x2D4\x2\x2\xFB1\xFB2\x5\x4C2\x262\x2\xFB2\xFB3\a\x439\x2\x2\xFB3"+
		"\xFB4\a\x4BA\x2\x2\xFB4\xFB5\a\x228\x2\x2\xFB5\xFB6\a\x4A8\x2\x2\xFB6"+
		"\xFDC\a\x4A2\x2\x2\xFB7\xFB9\a\x4BC\x2\x2\xFB8\xFB7\x3\x2\x2\x2\xFB8\xFB9"+
		"\x3\x2\x2\x2\xFB9\xFBA\x3\x2\x2\x2\xFBA\xFBB\a\x14\x2\x2\xFBB\xFBC\a\xC8"+
		"\x2\x2\xFBC\xFCA\a\x4A8\x2\x2\xFBD\xFCB\aG\x2\x2\xFBE\xFC0\a\x4BC\x2\x2"+
		"\xFBF\xFBE\x3\x2\x2\x2\xFBF\xFC0\x3\x2\x2\x2\xFC0\xFC1\x3\x2\x2\x2\xFC1"+
		"\xFC2\a\x4A2\x2\x2\xFC2\xFC3\a\x3EB\x2\x2\xFC3\xFC7\a\x4A2\x2\x2\xFC4"+
		"\xFC5\a\x4BC\x2\x2\xFC5\xFC7\a\x4A2\x2\x2\xFC6\xFBF\x3\x2\x2\x2\xFC6\xFC4"+
		"\x3\x2\x2\x2\xFC7\xFC8\x3\x2\x2\x2\xFC8\xFC6\x3\x2\x2\x2\xFC8\xFC9\x3"+
		"\x2\x2\x2\xFC9\xFCB\x3\x2\x2\x2\xFCA\xFBD\x3\x2\x2\x2\xFCA\xFC6\x3\x2"+
		"\x2\x2\xFCB\xFDD\x3\x2\x2\x2\xFCC\xFCD\a\x283\x2\x2\xFCD\xFD8\a\x4A8\x2"+
		"\x2\xFCE\xFD0\a\x4BC\x2\x2\xFCF\xFCE\x3\x2\x2\x2\xFCF\xFD0\x3\x2\x2\x2"+
		"\xFD0\xFD1\x3\x2\x2\x2\xFD1\xFD2\a\x4A2\x2\x2\xFD2\xFD3\a\x3EB\x2\x2\xFD3"+
		"\xFD9\a\x4A2\x2\x2\xFD4\xFD6\a\x4BC\x2\x2\xFD5\xFD4\x3\x2\x2\x2\xFD5\xFD6"+
		"\x3\x2\x2\x2\xFD6\xFD7\x3\x2\x2\x2\xFD7\xFD9\a\x4A2\x2\x2\xFD8\xFCF\x3"+
		"\x2\x2\x2\xFD8\xFD5\x3\x2\x2\x2\xFD9\xFDA\x3\x2\x2\x2\xFDA\xFD8\x3\x2"+
		"\x2\x2\xFDA\xFDB\x3\x2\x2\x2\xFDB\xFDD\x3\x2\x2\x2\xFDC\xFB8\x3\x2\x2"+
		"\x2\xFDC\xFCC\x3\x2\x2\x2\xFDD\xFE4\x3\x2\x2\x2\xFDE\xFE0\a\x4BC\x2\x2"+
		"\xFDF\xFDE\x3\x2\x2\x2\xFDF\xFE0\x3\x2\x2\x2\xFE0\xFE1\x3\x2\x2\x2\xFE1"+
		"\xFE2\a\x230\x2\x2\xFE2\xFE3\a\x4A8\x2\x2\xFE3\xFE5\a\x4A2\x2\x2\xFE4"+
		"\xFDF\x3\x2\x2\x2\xFE4\xFE5\x3\x2\x2\x2\xFE5\xFEC\x3\x2\x2\x2\xFE6\xFE8"+
		"\a\x4BC\x2\x2\xFE7\xFE6\x3\x2\x2\x2\xFE7\xFE8\x3\x2\x2\x2\xFE8\xFE9\x3"+
		"\x2\x2\x2\xFE9\xFEA\a\x233\x2\x2\xFEA\xFEB\a\x4A8\x2\x2\xFEB\xFED\a\x4A2"+
		"\x2\x2\xFEC\xFE7\x3\x2\x2\x2\xFEC\xFED\x3\x2\x2\x2\xFED\xFEE\x3\x2\x2"+
		"\x2\xFEE\xFEF\a\x4BB\x2\x2\xFEF\x143\x3\x2\x2\x2\xFF0\xFF1\a%\x2\x2\xFF1"+
		"\xFF2\a\x184\x2\x2\xFF2\xFF3\ax\x2\x2\xFF3\xFFE\x5\x4C2\x262\x2\xFF4\xFF9"+
		"\a\x30D\x2\x2\xFF5\xFF6\a\x439\x2\x2\xFF6\xFF7\a\b\x2\x2\xFF7\xFF8\a\x4A8"+
		"\x2\x2\xFF8\xFFA\t\x13\x2\x2\xFF9\xFF5\x3\x2\x2\x2\xFF9\xFFA\x3\x2\x2"+
		"\x2\xFFA\xFFF\x3\x2\x2\x2\xFFB\xFFF\a\x31C\x2\x2\xFFC\xFFD\a:\x2\x2\xFFD"+
		"\xFFF\a\xF9\x2\x2\xFFE\xFF4\x3\x2\x2\x2\xFFE\xFFB\x3\x2\x2\x2\xFFE\xFFC"+
		"\x3\x2\x2\x2\xFFF\x145\x3\x2\x2\x2\x1000\x1001\a\xC9\x2\x2\x1001\x1002"+
		"\a\x184\x2\x2\x1002\x1003\ax\x2\x2\x1003\x1007\x5\x4C2\x262\x2\x1004\x1005"+
		"\a\x294\x2\x2\x1005\x1006\a\x15D\x2\x2\x1006\x1008\x5\x4C2\x262\x2\x1007"+
		"\x1004\x3\x2\x2\x2\x1007\x1008\x3\x2\x2\x2\x1008\x100C\x3\x2\x2\x2\x1009"+
		"\x100A\a\x1C1\x2\x2\x100A\x100B\a\x2BF\x2\x2\x100B\x100D\a\x4A4\x2\x2"+
		"\x100C\x1009\x3\x2\x2\x2\x100C\x100D\x3\x2\x2\x2\x100D\x1012\x3\x2\x2"+
		"\x2\x100E\x100F\a\x439\x2\x2\x100F\x1010\a\b\x2\x2\x1010\x1011\a\x4A8"+
		"\x2\x2\x1011\x1013\t\x13\x2\x2\x1012\x100E\x3\x2\x2\x2\x1012\x1013\x3"+
		"\x2\x2\x2\x1013\x1016\x3\x2\x2\x2\x1014\x1015\a:\x2\x2\x1015\x1017\a\xF9"+
		"\x2\x2\x1016\x1014\x3\x2\x2\x2\x1016\x1017\x3\x2\x2\x2\x1017\x101A\x3"+
		"\x2\x2\x2\x1018\x1019\a\x46\x2\x2\x1019\x101B\x5\x4C2\x262\x2\x101A\x1018"+
		"\x3\x2\x2\x2\x101A\x101B\x3\x2\x2\x2\x101B\x147\x3\x2\x2\x2\x101C\x101D"+
		"\a%\x2\x2\x101D\x101E\a\x184\x2\x2\x101E\x101F\a\x3BF\x2\x2\x101F\x102D"+
		"\x5\x4C2\x262\x2\x1020\x1021\a\r\x2\x2\x1021\x1022\a\x4A4\x2\x2\x1022"+
		"\x1023\a\x1F9\x2\x2\x1023\x102E\t*\x2\x2\x1024\x102B\a\x11E\x2\x2\x1025"+
		"\x1026\a\x4A4\x2\x2\x1026\x1027\a\x1F9\x2\x2\x1027\x102C\t*\x2\x2\x1028"+
		"\x1029\a\x18\x2\x2\x1029\x102C\t*\x2\x2\x102A\x102C\a\x18\x2\x2\x102B"+
		"\x1025\x3\x2\x2\x2\x102B\x1028\x3\x2\x2\x2\x102B\x102A\x3\x2\x2\x2\x102C"+
		"\x102E\x3\x2\x2\x2\x102D\x1020\x3\x2\x2\x2\x102D\x1024\x3\x2\x2\x2\x102E"+
		"\x149\x3\x2\x2\x2\x102F\x1030\a\xC9\x2\x2\x1030\x1031\a\x184\x2\x2\x1031"+
		"\x1032\a\x3BF\x2\x2\x1032\x103E\x5\x4C2\x262\x2\x1033\x103C\a\x181\x2"+
		"\x2\x1034\x1035\x5\x4C2\x262\x2\x1035\x1036\a\x4B5\x2\x2\x1036\x1038\x3"+
		"\x2\x2\x2\x1037\x1034\x3\x2\x2\x2\x1037\x1038\x3\x2\x2\x2\x1038\x1039"+
		"\x3\x2\x2\x2\x1039\x103D\x5\x4C2\x262\x2\x103A\x103B\a\x3D5\x2\x2\x103B"+
		"\x103D\a\x3BF\x2\x2\x103C\x1037\x3\x2\x2\x2\x103C\x103A\x3\x2\x2\x2\x103D"+
		"\x103F\x3\x2\x2\x2\x103E\x1033\x3\x2\x2\x2\x103E\x103F\x3\x2\x2\x2\x103F"+
		"\x1042\x3\x2\x2\x2\x1040\x1041\a\x46\x2\x2\x1041\x1043\x5\x4C2\x262\x2"+
		"\x1042\x1040\x3\x2\x2\x2\x1042\x1043\x3\x2\x2\x2\x1043\x14B\x3\x2\x2\x2"+
		"\x1044\x1045\a%\x2\x2\x1045\x1046\a\x215\x2\x2\x1046\x108A\x5\x4C2\x262"+
		"\x2\x1047\x1049\t\x1B\x2\x2\x1048\x1047\x3\x2\x2\x2\x1048\x1049\x3\x2"+
		"\x2\x2\x1049\x108B\x3\x2\x2\x2\x104A\x1058\a\x439\x2\x2\x104B\x104C\a"+
		"\x2BE\x2\x2\x104C\x1050\a\x4A8\x2\x2\x104D\x1051\a\x4A4\x2\x2\x104E\x104F"+
		"\a\x4A5\x2\x2\x104F\x1051\a\x1A0\x2\x2\x1050\x104D\x3\x2\x2\x2\x1050\x104E"+
		"\x3\x2\x2\x2\x1051\x1055\x3\x2\x2\x2\x1052\x1054\t+\x2\x2\x1053\x1052"+
		"\x3\x2\x2\x2\x1054\x1057\x3\x2\x2\x2\x1055\x1053\x3\x2\x2\x2\x1055\x1056"+
		"\x3\x2\x2\x2\x1056\x1059\x3\x2\x2\x2\x1057\x1055\x3\x2\x2\x2\x1058\x104B"+
		"\x3\x2\x2\x2\x1058\x1059\x3\x2\x2\x2\x1059\x1063\x3\x2\x2\x2\x105A\x105B"+
		"\a\x293\x2\x2\x105B\x105C\a\x4A8\x2\x2\x105C\x1060\a\x4A4\x2\x2\x105D"+
		"\x105F\t+\x2\x2\x105E\x105D\x3\x2\x2\x2\x105F\x1062\x3\x2\x2\x2\x1060"+
		"\x105E\x3\x2\x2\x2\x1060\x1061\x3\x2\x2\x2\x1061\x1064\x3\x2\x2\x2\x1062"+
		"\x1060\x3\x2\x2\x2\x1063\x105A\x3\x2\x2\x2\x1063\x1064\x3\x2\x2\x2\x1064"+
		"\x1068\x3\x2\x2\x2\x1065\x1066\a\xFA\x2\x2\x1066\x1067\a\x4A8\x2\x2\x1067"+
		"\x1069\x5\x4C2\x262\x2\x1068\x1065\x3\x2\x2\x2\x1068\x1069\x3\x2\x2\x2"+
		"\x1069\x106D\x3\x2\x2\x2\x106A\x106B\a\xFD\x2\x2\x106B\x106C\a\x4A8\x2"+
		"\x2\x106C\x106E\x5\x4C2\x262\x2\x106D\x106A\x3\x2\x2\x2\x106D\x106E\x3"+
		"\x2\x2\x2\x106E\x1072\x3\x2\x2\x2\x106F\x1070\a\x253\x2\x2\x1070\x1071"+
		"\a\x4A8\x2\x2\x1071\x1073\x5\x4C2\x262\x2\x1072\x106F\x3\x2\x2\x2\x1072"+
		"\x1073\x3\x2\x2\x2\x1073\x1077\x3\x2\x2\x2\x1074\x1075\a\x91\x2\x2\x1075"+
		"\x1076\a\x4A8\x2\x2\x1076\x1078\t\x13\x2\x2\x1077\x1074\x3\x2\x2\x2\x1077"+
		"\x1078\x3\x2\x2\x2\x1078\x107C\x3\x2\x2\x2\x1079\x107A\a\x90\x2\x2\x107A"+
		"\x107B\a\x4A8\x2\x2\x107B\x107D\t\x13\x2\x2\x107C\x1079\x3\x2\x2\x2\x107C"+
		"\x107D\x3\x2\x2\x2\x107D\x1081\x3\x2\x2\x2\x107E\x107F\a\xCC\x2\x2\x107F"+
		"\x1080\a\x4A8\x2\x2\x1080\x1082\x5\x4C2\x262\x2\x1081\x107E\x3\x2\x2\x2"+
		"\x1081\x1082\x3\x2\x2\x2\x1082\x1085\x3\x2\x2\x2\x1083\x1084\a\x25F\x2"+
		"\x2\x1084\x1086\a\xCC\x2\x2\x1085\x1083\x3\x2\x2\x2\x1085\x1086\x3\x2"+
		"\x2\x2\x1086\x108B\x3\x2\x2\x2\x1087\x1088\t\x19\x2\x2\x1088\x1089\a\xCC"+
		"\x2\x2\x1089\x108B\x5\x4C2\x262\x2\x108A\x1048\x3\x2\x2\x2\x108A\x104A"+
		"\x3\x2\x2\x2\x108A\x1087\x3\x2\x2\x2\x108B\x14D\x3\x2\x2\x2\x108C\x108D"+
		"\a\xC9\x2\x2\x108D\x108E\a\x215\x2\x2\x108E\x10E9\x5\x4C2\x262\x2\x108F"+
		"\x109D\a\x439\x2\x2\x1090\x1091\a\x2BE\x2\x2\x1091\x1095\a\x4A8\x2\x2"+
		"\x1092\x1096\a\x4A4\x2\x2\x1093\x1094\a\x4A5\x2\x2\x1094\x1096\a\x1A0"+
		"\x2\x2\x1095\x1092\x3\x2\x2\x2\x1095\x1093\x3\x2\x2\x2\x1096\x109A\x3"+
		"\x2\x2\x2\x1097\x1099\t+\x2\x2\x1098\x1097\x3\x2\x2\x2\x1099\x109C\x3"+
		"\x2\x2\x2\x109A\x1098\x3\x2\x2\x2\x109A\x109B\x3\x2\x2\x2\x109B\x109E"+
		"\x3\x2\x2\x2\x109C\x109A\x3\x2\x2\x2\x109D\x1090\x3\x2\x2\x2\x109D\x109E"+
		"\x3\x2\x2\x2\x109E\x10A5\x3\x2\x2\x2\x109F\x10A1\a\x4BC\x2\x2\x10A0\x109F"+
		"\x3\x2\x2\x2\x10A0\x10A1\x3\x2\x2\x2\x10A1\x10A2\x3\x2\x2\x2\x10A2\x10A3"+
		"\a\x394\x2\x2\x10A3\x10A4\a\x4A8\x2\x2\x10A4\x10A6\a\x4A5\x2\x2\x10A5"+
		"\x10A0\x3\x2\x2\x2\x10A5\x10A6\x3\x2\x2\x2\x10A6\x10AD\x3\x2\x2\x2\x10A7"+
		"\x10A9\a\x4BC\x2\x2\x10A8\x10A7\x3\x2\x2\x2\x10A8\x10A9\x3\x2\x2\x2\x10A9"+
		"\x10AA\x3\x2\x2\x2\x10AA\x10AB\a\xFA\x2\x2\x10AB\x10AC\a\x4A8\x2\x2\x10AC"+
		"\x10AE\x5\x4C2\x262\x2\x10AD\x10A8\x3\x2\x2\x2\x10AD\x10AE\x3\x2\x2\x2"+
		"\x10AE\x10B5\x3\x2\x2\x2\x10AF\x10B1\a\x4BC\x2\x2\x10B0\x10AF\x3\x2\x2"+
		"\x2\x10B0\x10B1\x3\x2\x2\x2\x10B1\x10B2\x3\x2\x2\x2\x10B2\x10B3\a\xFD"+
		"\x2\x2\x10B3\x10B4\a\x4A8\x2\x2\x10B4\x10B6\x5\x4C2\x262\x2\x10B5\x10B0"+
		"\x3\x2\x2\x2\x10B5\x10B6\x3\x2\x2\x2\x10B6\x10BD\x3\x2\x2\x2\x10B7\x10B9"+
		"\a\x4BC\x2\x2\x10B8\x10B7\x3\x2\x2\x2\x10B8\x10B9\x3\x2\x2\x2\x10B9\x10BA"+
		"\x3\x2\x2\x2\x10BA\x10BB\a\x90\x2\x2\x10BB\x10BC\a\x4A8\x2\x2\x10BC\x10BE"+
		"\t\x13\x2\x2\x10BD\x10B8\x3\x2\x2\x2\x10BD\x10BE\x3\x2\x2\x2\x10BE\x10C5"+
		"\x3\x2\x2\x2\x10BF\x10C1\a\x4BC\x2\x2\x10C0\x10BF\x3\x2\x2\x2\x10C0\x10C1"+
		"\x3\x2\x2\x2\x10C1\x10C2\x3\x2\x2\x2\x10C2\x10C3\a\x91\x2\x2\x10C3\x10C4"+
		"\a\x4A8\x2\x2\x10C4\x10C6\t\x13\x2\x2\x10C5\x10C0\x3\x2\x2\x2\x10C5\x10C6"+
		"\x3\x2\x2\x2\x10C6\x10CD\x3\x2\x2\x2\x10C7\x10C9\a\x4BC\x2\x2\x10C8\x10C7"+
		"\x3\x2\x2\x2\x10C8\x10C9\x3\x2\x2\x2\x10C9\x10CA\x3\x2\x2\x2\x10CA\x10CB"+
		"\a\xCC\x2\x2\x10CB\x10CC\a\x4A8\x2\x2\x10CC\x10CE\x5\x4C2\x262\x2\x10CD"+
		"\x10C8\x3\x2\x2\x2\x10CD\x10CE\x3\x2\x2\x2\x10CE\x10EA\x3\x2\x2\x2\x10CF"+
		"\x10E7\a\x181\x2\x2\x10D0\x10D1\a\x438\x2\x2\x10D1\x10D8\a\x439\x2\x2"+
		"\x10D2\x10D4\a\x4BC\x2\x2\x10D3\x10D2\x3\x2\x2\x2\x10D3\x10D4\x3\x2\x2"+
		"\x2\x10D4\x10D5\x3\x2\x2\x2\x10D5\x10D6\a\xFA\x2\x2\x10D6\x10D7\a\x4A8"+
		"\x2\x2\x10D7\x10D9\x5\x4C2\x262\x2\x10D8\x10D3\x3\x2\x2\x2\x10D8\x10D9"+
		"\x3\x2\x2\x2\x10D9\x10E0\x3\x2\x2\x2\x10DA\x10DC\a\x4BC\x2\x2\x10DB\x10DA"+
		"\x3\x2\x2\x2\x10DB\x10DC\x3\x2\x2\x2\x10DC\x10DD\x3\x2\x2\x2\x10DD\x10DE"+
		"\a\xFD\x2\x2\x10DE\x10DF\a\x4A8\x2\x2\x10DF\x10E1\a\x4A4\x2\x2\x10E0\x10DB"+
		"\x3\x2\x2\x2\x10E0\x10E1\x3\x2\x2\x2\x10E1\x10E8\x3\x2\x2\x2\x10E2\x10E3"+
		"\a|\x2\x2\x10E3\x10E8\x5\x4C2\x262\x2\x10E4\x10E5\a?\x2\x2\x10E5\x10E6"+
		"\a\x1F1\x2\x2\x10E6\x10E8\x5\x4C2\x262\x2\x10E7\x10D0\x3\x2\x2\x2\x10E7"+
		"\x10E2\x3\x2\x2\x2\x10E7\x10E4\x3\x2\x2\x2\x10E8\x10EA\x3\x2\x2\x2\x10E9"+
		"\x108F\x3\x2\x2\x2\x10E9\x10CF\x3\x2\x2\x2\x10EA\x14F\x3\x2\x2\x2\x10EB"+
		"\x10EC\a%\x2\x2\x10EC\x10ED\a\x215\x2\x2\x10ED\x10FF\x5\x4C2\x262\x2\x10EE"+
		"\x10F0\t\x1B\x2\x2\x10EF\x10EE\x3\x2\x2\x2\x10EF\x10F0\x3\x2\x2\x2\x10F0"+
		"\x1100\x3\x2\x2\x2\x10F1\x10FD\a\x439\x2\x2\x10F2\x10F3\a\x2BE\x2\x2\x10F3"+
		"\x10F4\a\x4A8\x2\x2\x10F4\x10F8\a\x4A4\x2\x2\x10F5\x10F6\a\x293\x2\x2"+
		"\x10F6\x10F7\a\x4A8\x2\x2\x10F7\x10F9\a\x4A4\x2\x2\x10F8\x10F5\x3\x2\x2"+
		"\x2\x10F8\x10F9\x3\x2\x2\x2\x10F9\x10FE\x3\x2\x2\x2\x10FA\x10FB\a\x253"+
		"\x2\x2\x10FB\x10FC\a\x4A8\x2\x2\x10FC\x10FE\x5\x4C2\x262\x2\x10FD\x10F2"+
		"\x3\x2\x2\x2\x10FD\x10FA\x3\x2\x2\x2\x10FE\x1100\x3\x2\x2\x2\x10FF\x10EF"+
		"\x3\x2\x2\x2\x10FF\x10F1\x3\x2\x2\x2\x1100\x151\x3\x2\x2\x2\x1101\x1102"+
		"\a\xC9\x2\x2\x1102\x1103\a\x215\x2\x2\x1103\x1104\x5\x4C2\x262\x2\x1104"+
		"\x1105\a\x439\x2\x2\x1105\x1106\a\x2BE\x2\x2\x1106\x1107\a\x4A8\x2\x2"+
		"\x1107\x110B\a\x4A4\x2\x2\x1108\x1109\a\x394\x2\x2\x1109\x110A\a\x4A8"+
		"\x2\x2\x110A\x110C\a\x4A5\x2\x2\x110B\x1108\x3\x2\x2\x2\x110B\x110C\x3"+
		"\x2\x2\x2\x110C\x153\x3\x2\x2\x2\x110D\x110E\a%\x2\x2\x110E\x110F\a\x215"+
		"\x2\x2\x110F\x1127\x5\x4C2\x262\x2\x1110\x1112\t\x1B\x2\x2\x1111\x1110"+
		"\x3\x2\x2\x2\x1111\x1112\x3\x2\x2\x2\x1112\x1128\x3\x2\x2\x2\x1113\x1125"+
		"\a\x439\x2\x2\x1114\x1115\a\x2BE\x2\x2\x1115\x1116\a\x4A8\x2\x2\x1116"+
		"\x1120\a\x4A4\x2\x2\x1117\x1118\a\x293\x2\x2\x1118\x1119\a\x4A8\x2\x2"+
		"\x1119\x111D\a\x4A4\x2\x2\x111A\x111C\t+\x2\x2\x111B\x111A\x3\x2\x2\x2"+
		"\x111C\x111F\x3\x2\x2\x2\x111D\x111B\x3\x2\x2\x2\x111D\x111E\x3\x2\x2"+
		"\x2\x111E\x1121\x3\x2\x2\x2\x111F\x111D\x3\x2\x2\x2\x1120\x1117\x3\x2"+
		"\x2\x2\x1120\x1121\x3\x2\x2\x2\x1121\x1126\x3\x2\x2\x2\x1122\x1123\a\x253"+
		"\x2\x2\x1123\x1124\a\x4A8\x2\x2\x1124\x1126\x5\x4C2\x262\x2\x1125\x1114"+
		"\x3\x2\x2\x2\x1125\x1122\x3\x2\x2\x2\x1126\x1128\x3\x2\x2\x2\x1127\x1111"+
		"\x3\x2\x2\x2\x1127\x1113\x3\x2\x2\x2\x1128\x155\x3\x2\x2\x2\x1129\x112A"+
		"\a\xC9\x2\x2\x112A\x112B\a\x215\x2\x2\x112B\x113C\x5\x4C2\x262\x2\x112C"+
		"\x112D\a\x439\x2\x2\x112D\x112E\a\x2BE\x2\x2\x112E\x112F\a\x4A8\x2\x2"+
		"\x112F\x1131\a\x4A4\x2\x2\x1130\x1132\a\x252\x2\x2\x1131\x1130\x3\x2\x2"+
		"\x2\x1131\x1132\x3\x2\x2\x2\x1132\x1138\x3\x2\x2\x2\x1133\x1134\a\x91"+
		"\x2\x2\x1134\x1136\a\x4A8\x2\x2\x1135\x1137\t\x13\x2\x2\x1136\x1135\x3"+
		"\x2\x2\x2\x1136\x1137\x3\x2\x2\x2\x1137\x1139\x3\x2\x2\x2\x1138\x1133"+
		"\x3\x2\x2\x2\x1138\x1139\x3\x2\x2\x2\x1139\x113D\x3\x2\x2\x2\x113A\x113B"+
		"\a\x181\x2\x2\x113B\x113D\a\x438\x2\x2\x113C\x112C\x3\x2\x2\x2\x113C\x113A"+
		"\x3\x2\x2\x2\x113D\x157\x3\x2\x2\x2\x113E\x113F\a%\x2\x2\x113F\x1140\a"+
		"\x21F\x2\x2\x1140\x1156\a\x1F1\x2\x2\x1141\x1143\a\x173\x2\x2\x1142\x1141"+
		"\x3\x2\x2\x2\x1142\x1143\x3\x2\x2\x2\x1143\x1144\x3\x2\x2\x2\x1144\x1145"+
		"\a\x314\x2\x2\x1145\x1146\a\x439\x2\x2\x1146\x1147\a\x12E\x2\x2\x1147"+
		"\x1148\ap\x2\x2\x1148\x1149\a\x2BE\x2\x2\x1149\x114A\a\x4A8\x2\x2\x114A"+
		"\x1157\a\x4A4\x2\x2\x114B\x114C\t\x19\x2\x2\x114C\x114D\a\x12E\x2\x2\x114D"+
		"\x1154\ap\x2\x2\x114E\x114F\a\x37C\x2\x2\x114F\x1150\a\x21F\x2\x2\x1150"+
		"\x1155\a\x1F1\x2\x2\x1151\x1152\a\x2BE\x2\x2\x1152\x1153\a\x4A8\x2\x2"+
		"\x1153\x1155\a\x4A4\x2\x2\x1154\x114E\x3\x2\x2\x2\x1154\x1151\x3\x2\x2"+
		"\x2\x1155\x1157\x3\x2\x2\x2\x1156\x1142\x3\x2\x2\x2\x1156\x114B\x3\x2"+
		"\x2\x2\x1157\x159\x3\x2\x2\x2\x1158\x1159\a\xC9\x2\x2\x1159\x115A\a\x21F"+
		"\x2\x2\x115A\x115B\a\x1F1\x2\x2\x115B\x115C\a\x12E\x2\x2\x115C\x115D\a"+
		"p\x2\x2\x115D\x115E\a\x2BE\x2\x2\x115E\x115F\a\x4A8\x2\x2\x115F\x1160"+
		"\a\x4A4\x2\x2\x1160\x15B\x3\x2\x2\x2\x1161\x1162\a%\x2\x2\x1162\x1163"+
		"\a\x21F\x2\x2\x1163\x117F\a\x1F1\x2\x2\x1164\x1166\a\x173\x2\x2\x1165"+
		"\x1164\x3\x2\x2\x2\x1165\x1166\x3\x2\x2\x2\x1166\x1167\x3\x2\x2\x2\x1167"+
		"\x1168\a\x314\x2\x2\x1168\x1169\a\x439\x2\x2\x1169\x116A\a\x12E\x2\x2"+
		"\x116A\x116B\ap\x2\x2\x116B\x116C\a\x2BE\x2\x2\x116C\x116D\a\x4A8\x2\x2"+
		"\x116D\x1180\a\x4A4\x2\x2\x116E\x116F\a\r\x2\x2\x116F\x1170\a\x12E\x2"+
		"\x2\x1170\x1177\ap\x2\x2\x1171\x1172\a\x37C\x2\x2\x1172\x1173\a\x21F\x2"+
		"\x2\x1173\x1178\a\x1F1\x2\x2\x1174\x1175\a\x2BE\x2\x2\x1175\x1176\a\x4A8"+
		"\x2\x2\x1176\x1178\a\x4A4\x2\x2\x1177\x1171\x3\x2\x2\x2\x1177\x1174\x3"+
		"\x2\x2\x2\x1178\x1180\x3\x2\x2\x2\x1179\x117A\a\x11E\x2\x2\x117A\x117B"+
		"\a\x12E\x2\x2\x117B\x117C\ap\x2\x2\x117C\x117D\a\x2BE\x2\x2\x117D\x117E"+
		"\a\x4A8\x2\x2\x117E\x1180\a\x4A4\x2\x2\x117F\x1165\x3\x2\x2\x2\x117F\x116E"+
		"\x3\x2\x2\x2\x117F\x1179\x3\x2\x2\x2\x1180\x15D\x3\x2\x2\x2\x1181\x1182"+
		"\a\xC9\x2\x2\x1182\x1183\a\x21F\x2\x2\x1183\x1189\a\x1F1\x2\x2\x1184\x1185"+
		"\a\x12E\x2\x2\x1185\x1186\ap\x2\x2\x1186\x1187\a\x2BE\x2\x2\x1187\x1188"+
		"\a\x4A8\x2\x2\x1188\x118A\a\x4A4\x2\x2\x1189\x1184\x3\x2\x2\x2\x1189\x118A"+
		"\x3\x2\x2\x2\x118A\x15F\x3\x2\x2\x2\x118B\x118C\a%\x2\x2\x118C\x118D\a"+
		"\x240\x2\x2\x118D\x118E\a\x403\x2\x2\x118E\x118F\x5\x4C2\x262\x2\x118F"+
		"\x1190\a\x420\x2\x2\x1190\x1199\a\x4A8\x2\x2\x1191\x119A\a\x26B\x2\x2"+
		"\x1192\x119A\a\x128\x2\x2\x1193\x119A\a\x433\x2\x2\x1194\x1195\a\x421"+
		"\x2\x2\x1195\x1196\a\x439\x2\x2\x1196\x1197\a\x35A\x2\x2\x1197\x1198\a"+
		"\x9C\x2\x2\x1198\x119A\x5\x4C2\x262\x2\x1199\x1191\x3\x2\x2\x2\x1199\x1192"+
		"\x3\x2\x2\x2\x1199\x1193\x3\x2\x2\x2\x1199\x1194\x3\x2\x2\x2\x119A\x161"+
		"\x3\x2\x2\x2\x119B\x119C\a%\x2\x2\x119C\x119D\a\x2BB\x2\x2\x119D\x119E"+
		"\a\x187\x2\x2\x119E\x119F\x5\x4C2\x262\x2\x119F\x11A0\a\x4BA\x2\x2\x11A0"+
		"\x11A1\a\x4BB\x2\x2\x11A1\x11A2\t,\x2\x2\x11A2\x11A3\a\x2FA\x2\x2\x11A3"+
		"\x11A4\a\x4BA\x2\x2\x11A4\x11A5\a\x4A2\x2\x2\x11A5\x11A6\a\x4BB\x2\x2"+
		"\x11A6\x163\x3\x2\x2\x2\x11A7\x11A8\a%\x2\x2\x11A8\x11A9\a\x2BB\x2\x2"+
		"\x11A9\x11AA\a\x35E\x2\x2\x11AA\x11AB\x5\x4C2\x262\x2\x11AB\x11AC\a\x25E"+
		"\x2\x2\x11AC\x11AE\a\x41B\x2\x2\x11AD\x11AF\x5\x4C2\x262\x2\x11AE\x11AD"+
		"\x3\x2\x2\x2\x11AE\x11AF\x3\x2\x2\x2\x11AF\x165\x3\x2\x2\x2\x11B0\x11B1"+
		"\a%\x2\x2\x11B1\x11B2\a\x318\x2\x2\x11B2\x11B3\a\x37C\x2\x2\x11B3\x11B4"+
		"\a\x62\x2\x2\x11B4\x11B5\x5\x4C2\x262\x2\x11B5\x11B9\a\x439\x2\x2\x11B6"+
		"\x11B7\a\x41C\x2\x2\x11B7\x11B8\a\x4A8\x2\x2\x11B8\x11BA\x5\x4C2\x262"+
		"\x2\x11B9\x11B6\x3\x2\x2\x2\x11B9\x11BA\x3\x2\x2\x2\x11BA\x11BF\x3\x2"+
		"\x2\x2\x11BB\x11BC\a\x4BC\x2\x2\x11BC\x11BD\a(\x2\x2\x11BD\x11BE\a\x4A8"+
		"\x2\x2\x11BE\x11C0\t\x13\x2\x2\x11BF\x11BB\x3\x2\x2\x2\x11BF\x11C0\x3"+
		"\x2\x2\x2\x11C0\x167\x3\x2\x2\x2\x11C1\x11C2\a\xC9\x2\x2\x11C2\x11C3\a"+
		"\x318\x2\x2\x11C3\x11C4\a\x37C\x2\x2\x11C4\x11C5\a\x62\x2\x2\x11C5\x11C8"+
		"\x5\x4C2\x262\x2\x11C6\x11C7\a\x46\x2\x2\x11C7\x11C9\x5\x4C2\x262\x2\x11C8"+
		"\x11C6\x3\x2\x2\x2\x11C8\x11C9\x3\x2\x2\x2\x11C9\x11CA\x3\x2\x2\x2\x11CA"+
		"\x11CB\a\x3EB\x2\x2\x11CB\x11CC\a\x37C\x2\x2\x11CC\x11CD\a\x4A4\x2\x2"+
		"\x11CD\x11D1\a\x439\x2\x2\x11CE\x11CF\a\x41C\x2\x2\x11CF\x11D0\a\x4A8"+
		"\x2\x2\x11D0\x11D2\x5\x4C2\x262\x2\x11D1\x11CE\x3\x2\x2\x2\x11D1\x11D2"+
		"\x3\x2\x2\x2\x11D2\x11D7\x3\x2\x2\x2\x11D3\x11D4\a\x4BC\x2\x2\x11D4\x11D5"+
		"\a(\x2\x2\x11D5\x11D6\a\x4A8\x2\x2\x11D6\x11D8\t\x13\x2\x2\x11D7\x11D3"+
		"\x3\x2\x2\x2\x11D7\x11D8\x3\x2\x2\x2\x11D8\x169\x3\x2\x2\x2\x11D9\x11DA"+
		"\a\xC9\x2\x2\x11DA\x11DB\a\x32E\x2\x2\x11DB\x11DC\a\x2D4\x2\x2\x11DC\x1243"+
		"\x5\x4C2\x262\x2\x11DD\x11DE\a\x439\x2\x2\x11DE\x11E5\a\x4BA\x2\x2\x11DF"+
		"\x11E1\a\x4BC\x2\x2\x11E0\x11DF\x3\x2\x2\x2\x11E0\x11E1\x3\x2\x2\x2\x11E1"+
		"\x11E2\x3\x2\x2\x2\x11E2\x11E3\a\x247\x2\x2\x11E3\x11E4\a\x4A8\x2\x2\x11E4"+
		"\x11E6\a\x4A2\x2\x2\x11E5\x11E0\x3\x2\x2\x2\x11E5\x11E6\x3\x2\x2\x2\x11E6"+
		"\x11ED\x3\x2\x2\x2\x11E7\x11E9\a\x4BC\x2\x2\x11E8\x11E7\x3\x2\x2\x2\x11E8"+
		"\x11E9\x3\x2\x2\x2\x11E9\x11EA\x3\x2\x2\x2\x11EA\x11EB\a\x228\x2\x2\x11EB"+
		"\x11EC\a\x4A8\x2\x2\x11EC\x11EE\a\x4A2\x2\x2\x11ED\x11E8\x3\x2\x2\x2\x11ED"+
		"\x11EE\x3\x2\x2\x2\x11EE\x11F5\x3\x2\x2\x2\x11EF\x11F1\a\x4BC\x2\x2\x11F0"+
		"\x11EF\x3\x2\x2\x2\x11F0\x11F1\x3\x2\x2\x2\x11F1\x11F2\x3\x2\x2\x2\x11F2"+
		"\x11F3\at\x2\x2\x11F3\x11F4\a\x4A8\x2\x2\x11F4\x11F6\a\x4A2\x2\x2\x11F5"+
		"\x11F0\x3\x2\x2\x2\x11F5\x11F6\x3\x2\x2\x2\x11F6\x1220\x3\x2\x2\x2\x11F7"+
		"\x11F9\a\x4BC\x2\x2\x11F8\x11F7\x3\x2\x2\x2\x11F8\x11F9\x3\x2\x2\x2\x11F9"+
		"\x11FA\x3\x2\x2\x2\x11FA\x11FB\a\x14\x2\x2\x11FB\x11FC\a\x359\x2\x2\x11FC"+
		"\x121E\a\x4A8\x2\x2\x11FD\x121F\aG\x2\x2\x11FE\x1208\a\x4BA\x2\x2\x11FF"+
		"\x1201\a\x4BC\x2\x2\x1200\x11FF\x3\x2\x2\x2\x1200\x1201\x3\x2\x2\x2\x1201"+
		"\x1206\x3\x2\x2\x2\x1202\x1207\a\x4A2\x2\x2\x1203\x1204\a\x4A2\x2\x2\x1204"+
		"\x1205\a\x3EB\x2\x2\x1205\x1207\a\x4A2\x2\x2\x1206\x1202\x3\x2\x2\x2\x1206"+
		"\x1203\x3\x2\x2\x2\x1207\x1209\x3\x2\x2\x2\x1208\x1200\x3\x2\x2\x2\x1209"+
		"\x120A\x3\x2\x2\x2\x120A\x1208\x3\x2\x2\x2\x120A\x120B\x3\x2\x2\x2\x120B"+
		"\x120C\x3\x2\x2\x2\x120C\x121F\a\x4BB\x2\x2\x120D\x120E\a\x283\x2\x2\x120E"+
		"\x120F\a\x4A8\x2\x2\x120F\x1219\a\x4BA\x2\x2\x1210\x1212\a\x4BC\x2\x2"+
		"\x1211\x1210\x3\x2\x2\x2\x1211\x1212\x3\x2\x2\x2\x1212\x1217\x3\x2\x2"+
		"\x2\x1213\x1218\a\x4A2\x2\x2\x1214\x1215\a\x4A2\x2\x2\x1215\x1216\a\x3EB"+
		"\x2\x2\x1216\x1218\a\x4A2\x2\x2\x1217\x1213\x3\x2\x2\x2\x1217\x1214\x3"+
		"\x2\x2\x2\x1218\x121A\x3\x2\x2\x2\x1219\x1211\x3\x2\x2\x2\x121A\x121B"+
		"\x3\x2\x2\x2\x121B\x1219\x3\x2\x2\x2\x121B\x121C\x3\x2\x2\x2\x121C\x121D"+
		"\x3\x2\x2\x2\x121D\x121F\a\x4BB\x2\x2\x121E\x11FD\x3\x2\x2\x2\x121E\x11FE"+
		"\x3\x2\x2\x2\x121E\x120D\x3\x2\x2\x2\x121F\x1221\x3\x2\x2\x2\x1220\x11F8"+
		"\x3\x2\x2\x2\x1220\x1221\x3\x2\x2\x2\x1221\x1228\x3\x2\x2\x2\x1222\x1224"+
		"\a\x4BC\x2\x2\x1223\x1222\x3\x2\x2\x2\x1223\x1224\x3\x2\x2\x2\x1224\x1225"+
		"\x3\x2\x2\x2\x1225\x1226\a\x249\x2\x2\x1226\x1227\a\x4A8\x2\x2\x1227\x1229"+
		"\a\x4A2\x2\x2\x1228\x1223\x3\x2\x2\x2\x1228\x1229\x3\x2\x2\x2\x1229\x1230"+
		"\x3\x2\x2\x2\x122A\x122C\a\x4BC\x2\x2\x122B\x122A\x3\x2\x2\x2\x122B\x122C"+
		"\x3\x2\x2\x2\x122C\x122D\x3\x2\x2\x2\x122D\x122E\a\x230\x2\x2\x122E\x122F"+
		"\a\x4A8\x2\x2\x122F\x1231\a\x4A2\x2\x2\x1230\x122B\x3\x2\x2\x2\x1230\x1231"+
		"\x3\x2\x2\x2\x1231\x1238\x3\x2\x2\x2\x1232\x1234\a\x4BC\x2\x2\x1233\x1232"+
		"\x3\x2\x2\x2\x1233\x1234\x3\x2\x2\x2\x1234\x1235\x3\x2\x2\x2\x1235\x1236"+
		"\a\x248\x2\x2\x1236\x1237\a\x4A8\x2\x2\x1237\x1239\a\x4A2\x2\x2\x1238"+
		"\x1233\x3\x2\x2\x2\x1238\x1239\x3\x2\x2\x2\x1239\x1240\x3\x2\x2\x2\x123A"+
		"\x123C\a\x4BC\x2\x2\x123B\x123A\x3\x2\x2\x2\x123B\x123C\x3\x2\x2\x2\x123C"+
		"\x123D\x3\x2\x2\x2\x123D\x123E\a\x22E\x2\x2\x123E\x123F\a\x4A8\x2\x2\x123F"+
		"\x1241\a\x4A2\x2\x2\x1240\x123B\x3\x2\x2\x2\x1240\x1241\x3\x2\x2\x2\x1241"+
		"\x1242\x3\x2\x2\x2\x1242\x1244\a\x4BB\x2\x2\x1243\x11DD\x3\x2\x2\x2\x1243"+
		"\x1244\x3\x2\x2\x2\x1244\x16B\x3\x2\x2\x2\x1245\x1246\a%\x2\x2\x1246\x1247"+
		"\a\x32E\x2\x2\x1247\x125D\a\x197\x2\x2\x1248\x125E\t-\x2\x2\x1249\x124A"+
		"\a\x439\x2\x2\x124A\x124B\a\x4BA\x2\x2\x124B\x124C\a\x92\x2\x2\x124C\x1252"+
		"\a\x4A8\x2\x2\x124D\x124E\x5\x4C2\x262\x2\x124E\x124F\a\x4B5\x2\x2\x124F"+
		"\x1250\x5\x4C2\x262\x2\x1250\x1253\x3\x2\x2\x2\x1251\x1253\a\x281\x2\x2"+
		"\x1252\x124D\x3\x2\x2\x2\x1252\x1251\x3\x2\x2\x2\x1253\x1254\x3\x2\x2"+
		"\x2\x1254\x125E\a\x4BB\x2\x2\x1255\x1256\a\x32D\x2\x2\x1256\x125E\a\x3B4"+
		"\x2\x2\x1257\x1258\a\x439\x2\x2\x1258\x1259\a\x4BA\x2\x2\x1259\x125A\a"+
		"\x231\x2\x2\x125A\x125B\a\x4A8\x2\x2\x125B\x125C\a\x4A2\x2\x2\x125C\x125E"+
		"\a\x4BB\x2\x2\x125D\x1248\x3\x2\x2\x2\x125D\x1249\x3\x2\x2\x2\x125D\x1255"+
		"\x3\x2\x2\x2\x125D\x1257\x3\x2\x2\x2\x125E\x16D\x3\x2\x2\x2\x125F\x1260"+
		"\a%\x2\x2\x1260\x1261\a\xDD\x2\x2\x1261\x1262\a\x42\x2\x2\x1262\x1263"+
		"\a\x3A5\x2\x2\x1263\x1268\x5\x4C2\x262\x2\x1264\x1265\a\x172\x2\x2\x1265"+
		"\x1266\a\x37A\x2\x2\x1266\x1267\a\x42\x2\x2\x1267\x1269\x5\x4C2\x262\x2"+
		"\x1268\x1264\x3\x2\x2\x2\x1268\x1269\x3\x2\x2\x2\x1269\x1272\x3\x2\x2"+
		"\x2\x126A\x126F\x5\x170\xB9\x2\x126B\x126C\a\x4BC\x2\x2\x126C\x126E\x5"+
		"\x170\xB9\x2\x126D\x126B\x3\x2\x2\x2\x126E\x1271\x3\x2\x2\x2\x126F\x126D"+
		"\x3\x2\x2\x2\x126F\x1270\x3\x2\x2\x2\x1270\x1273\x3\x2\x2\x2\x1271\x126F"+
		"\x3\x2\x2\x2\x1272\x126A\x3\x2\x2\x2\x1272\x1273\x3\x2\x2\x2\x1273\x127A"+
		"\x3\x2\x2\x2\x1274\x1275\a\x439\x2\x2\x1275\x1276\a\x4BA\x2\x2\x1276\x1277"+
		"\a\x3B2\x2\x2\x1277\x1278\a\x4A8\x2\x2\x1278\x1279\t\x13\x2\x2\x1279\x127B"+
		"\a\x4BB\x2\x2\x127A\x1274\x3\x2\x2\x2\x127A\x127B\x3\x2\x2\x2\x127B\x16F"+
		"\x3\x2\x2\x2\x127C\x127D\t\x19\x2\x2\x127D\x1280\a\x4BA\x2\x2\x127E\x1281"+
		"\x5\x172\xBA\x2\x127F\x1281\x5\x4C2\x262\x2\x1280\x127E\x3\x2\x2\x2\x1280"+
		"\x127F\x3\x2\x2\x2\x1281\x1282\x3\x2\x2\x2\x1282\x1283\a\x4BB\x2\x2\x1283"+
		"\x171\x3\x2\x2\x2\x1284\x1289\x5\x174\xBB\x2\x1285\x1286\a\x4BC\x2\x2"+
		"\x1286\x1288\x5\x174\xBB\x2\x1287\x1285\x3\x2\x2\x2\x1288\x128B\x3\x2"+
		"\x2\x2\x1289\x1287\x3\x2\x2\x2\x1289\x128A\x3\x2\x2\x2\x128A\x128C\x3"+
		"\x2\x2\x2\x128B\x1289\x3\x2\x2\x2\x128C\x1290\a\x294\x2\x2\x128D\x128E"+
		"\x5\x176\xBC\x2\x128E\x128F\a\x4BF\x2\x2\x128F\x1291\x3\x2\x2\x2\x1290"+
		"\x128D\x3\x2\x2\x2\x1290\x1291\x3\x2\x2\x2\x1291\x1292\x3\x2\x2\x2\x1292"+
		"\x1293\x5\x178\xBD\x2\x1293\x1294\ap\x2\x2\x1294\x1299\x5\x306\x184\x2"+
		"\x1295\x1296\a\x4BC\x2\x2\x1296\x1298\x5\x306\x184\x2\x1297\x1295\x3\x2"+
		"\x2\x2\x1298\x129B\x3\x2\x2\x2\x1299\x1297\x3\x2\x2\x2\x1299\x129A\x3"+
		"\x2\x2\x2\x129A\x173\x3\x2\x2\x2\x129B\x1299\x3\x2\x2\x2\x129C\x129D\t"+
		".\x2\x2\x129D\x175\x3\x2\x2\x2\x129E\x129F\t/\x2\x2\x129F\x177\x3\x2\x2"+
		"\x2\x12A0\x12A1\x5\x4C2\x262\x2\x12A1\x12A2\a\x4B5\x2\x2\x12A2\x12A4\x3"+
		"\x2\x2\x2\x12A3\x12A0\x3\x2\x2\x2\x12A3\x12A4\x3\x2\x2\x2\x12A4\x12A5"+
		"\x3\x2\x2\x2\x12A5\x12A6\x5\x4C2\x262\x2\x12A6\x12A7\a\x4B5\x2\x2\x12A7"+
		"\x12A9\x3\x2\x2\x2\x12A8\x12A3\x3\x2\x2\x2\x12A8\x12A9\x3\x2\x2\x2\x12A9"+
		"\x12AA\x3\x2\x2\x2\x12AA\x12AB\x5\x4C2\x262\x2\x12AB\x179\x3\x2\x2\x2"+
		"\x12AC\x12AD\a%\x2\x2\x12AD\x12AE\a\x341\x2\x2\x12AE\x12B6\x5\x4C2\x262"+
		"\x2\x12AF\x12B0\t\x19\x2\x2\x12B0\x12B1\a\x23C\x2\x2\x12B1\x12B7\x5\x4C2"+
		"\x262\x2\x12B2\x12B3\a\x439\x2\x2\x12B3\x12B4\a\x253\x2\x2\x12B4\x12B5"+
		"\a\x4A8\x2\x2\x12B5\x12B7\x5\x4C2\x262\x2\x12B6\x12AF\x3\x2\x2\x2\x12B6"+
		"\x12B2\x3\x2\x2\x2\x12B7\x17B\x3\x2\x2\x2\x12B8\x12B9\a\xC9\x2\x2\x12B9"+
		"\x12BA\a\xDD\x2\x2\x12BA\x12BB\a\x42\x2\x2\x12BB\x12BC\a\x3A5\x2\x2\x12BC"+
		"\x12C1\x5\x4C2\x262\x2\x12BD\x12BE\a\x172\x2\x2\x12BE\x12BF\a\x37A\x2"+
		"\x2\x12BF\x12C0\a\x42\x2\x2\x12C0\x12C2\x5\x4C2\x262\x2\x12C1\x12BD\x3"+
		"\x2\x2\x2\x12C1\x12C2\x3\x2\x2\x2\x12C2\x12CB\x3\x2\x2\x2\x12C3\x12C8"+
		"\x5\x170\xB9\x2\x12C4\x12C5\a\x4BC\x2\x2\x12C5\x12C7\x5\x170\xB9\x2\x12C6"+
		"\x12C4\x3\x2\x2\x2\x12C7\x12CA\x3\x2\x2\x2\x12C8\x12C6\x3\x2\x2\x2\x12C8"+
		"\x12C9\x3\x2\x2\x2\x12C9\x12CC\x3\x2\x2\x2\x12CA\x12C8\x3\x2\x2\x2\x12CB"+
		"\x12C3\x3\x2\x2\x2\x12CB\x12CC\x3\x2\x2\x2\x12CC\x12D3\x3\x2\x2\x2\x12CD"+
		"\x12CE\a\x439\x2\x2\x12CE\x12CF\a\x4BA\x2\x2\x12CF\x12D0\a\x3B2\x2\x2"+
		"\x12D0\x12D1\a\x4A8\x2\x2\x12D1\x12D2\t\x13\x2\x2\x12D2\x12D4\a\x4BB\x2"+
		"\x2\x12D3\x12CD\x3\x2\x2\x2\x12D3\x12D4\x3\x2\x2\x2\x12D4\x17D\x3\x2\x2"+
		"\x2\x12D5\x12D6\a\xC9\x2\x2\x12D6\x12D7\a\x341\x2\x2\x12D7\x12DA\x5\x4C2"+
		"\x262\x2\x12D8\x12D9\a\x46\x2\x2\x12D9\x12DB\x5\x4C2\x262\x2\x12DA\x12D8"+
		"\x3\x2\x2\x2\x12DA\x12DB\x3\x2\x2\x2\x12DB\x17F\x3\x2\x2\x2\x12DC\x12DD"+
		"\a\xC9\x2\x2\x12DD\x12DE\a\x345\x2\x2\x12DE\x12E1\x5\x4C2\x262\x2\x12DF"+
		"\x12E0\a\x46\x2\x2\x12E0\x12E2\x5\x4C2\x262\x2\x12E1\x12DF\x3\x2\x2\x2"+
		"\x12E1\x12E2\x3\x2\x2\x2\x12E2\x12E3\x3\x2\x2\x2\x12E3\x12EA\a\x439\x2"+
		"\x2\x12E4\x12E6\a\x4BC\x2\x2\x12E5\x12E4\x3\x2\x2\x2\x12E5\x12E6\x3\x2"+
		"\x2\x2\x12E6\x12E7\x3\x2\x2\x2\x12E7\x12E8\a\x37F\x2\x2\x12E8\x12E9\a"+
		"\x4A8\x2\x2\x12E9\x12EB\a\x4A4\x2\x2\x12EA\x12E5\x3\x2\x2\x2\x12EA\x12EB"+
		"\x3\x2\x2\x2\x12EB\x12F2\x3\x2\x2\x2\x12EC\x12EE\a\x4BC\x2\x2\x12ED\x12EC"+
		"\x3\x2\x2\x2\x12ED\x12EE\x3\x2\x2\x2\x12EE\x12EF\x3\x2\x2\x2\x12EF\x12F0"+
		"\aj\x2\x2\x12F0\x12F1\a\x4A8\x2\x2\x12F1\x12F3\a\x4A4\x2\x2\x12F2\x12ED"+
		"\x3\x2\x2\x2\x12F2\x12F3\x3\x2\x2\x2\x12F3\x12FA\x3\x2\x2\x2\x12F4\x12F6"+
		"\a\x4BC\x2\x2\x12F5\x12F4\x3\x2\x2\x2\x12F5\x12F6\x3\x2\x2\x2\x12F6\x12F7"+
		"\x3\x2\x2\x2\x12F7\x12F8\a\x203\x2\x2\x12F8\x12F9\a\x4A8\x2\x2\x12F9\x12FB"+
		"\a\x4A2\x2\x2\x12FA\x12F5\x3\x2\x2\x2\x12FA\x12FB\x3\x2\x2\x2\x12FB\x12FD"+
		"\x3\x2\x2\x2\x12FC\x12FE\a\x4BC\x2\x2\x12FD\x12FC\x3\x2\x2\x2\x12FD\x12FE"+
		"\x3\x2\x2\x2\x12FE\x12FF\x3\x2\x2\x2\x12FF\x1300\a\xE\x2\x2\x1300\x1301"+
		"\a\x4A8\x2\x2\x1301\x1306\a\x4A4\x2\x2\x1302\x1303\a\x4BC\x2\x2\x1303"+
		"\x1304\a\x24B\x2\x2\x1304\x1305\a\x4A8\x2\x2\x1305\x1307\a\x4A4\x2\x2"+
		"\x1306\x1302\x3\x2\x2\x2\x1306\x1307\x3\x2\x2\x2\x1307\x181\x3\x2\x2\x2"+
		"\x1308\x1309\a\xC9\x2\x2\x1309\x130D\a\x354\x2\x2\x130A\x130B\x5\x4C2"+
		"\x262\x2\x130B\x130C\a\x4B5\x2\x2\x130C\x130E\x3\x2\x2\x2\x130D\x130A"+
		"\x3\x2\x2\x2\x130D\x130E\x3\x2\x2\x2\x130E\x130F\x3\x2\x2\x2\x130F\x1310"+
		"\x5\x4C2\x262\x2\x1310\x1311\a:\x2\x2\x1311\x1312\x5\x3B4\x1DB\x2\x1312"+
		"\x183\x3\x2\x2\x2\x1313\x1314\a%\x2\x2\x1314\x1315\a\x35A\x2\x2\x1315"+
		"\x1316\x5\x4C2\x262\x2\x1316\x131F\a\x3F5\x2\x2\x1317\x131D\a\x286\x2"+
		"\x2\x1318\x131D\a\x403\x2\x2\x1319\x131A\a\x444\x2\x2\x131A\x131B\a\x35A"+
		"\x2\x2\x131B\x131D\a\x9C\x2\x2\x131C\x1317\x3\x2\x2\x2\x131C\x1318\x3"+
		"\x2\x2\x2\x131C\x1319\x3\x2\x2\x2\x131D\x131E\x3\x2\x2\x2\x131E\x1320"+
		"\a\x4BF\x2\x2\x131F\x131C\x3\x2\x2\x2\x131F\x1320\x3\x2\x2\x2\x1320\x1321"+
		"\x3\x2\x2\x2\x1321\x1324\x5\x4C2\x262\x2\x1322\x1323\a\x4B5\x2\x2\x1323"+
		"\x1325\x5\x4C2\x262\x2\x1324\x1322\x3\x2\x2\x2\x1324\x1325\x3\x2\x2\x2"+
		"\x1325\x185\x3\x2\x2\x2\x1326\x1327\a\xC9\x2\x2\x1327\x132F\a\x35A\x2"+
		"\x2\x1328\x1330\x5\x4C2\x262\x2\x1329\x132A\a\x46\x2\x2\x132A\x1330\x5"+
		"\x4C2\x262\x2\x132B\x132C\x5\x4C2\x262\x2\x132C\x132D\a\x46\x2\x2\x132D"+
		"\x132E\x5\x4C2\x262\x2\x132E\x1330\x3\x2\x2\x2\x132F\x1328\x3\x2\x2\x2"+
		"\x132F\x1329\x3\x2\x2\x2\x132F\x132B\x3\x2\x2\x2\x1330\x134B\x3\x2\x2"+
		"\x2\x1331\x134A\x5\x24E\x128\x2\x1332\x134A\x5\x25A\x12E\x2\x1333\x1334"+
		"\t\x30\x2\x2\x1334\x1335\t\x31\x2\x2\x1335\x1338\a\x294\x2\x2\x1336\x1337"+
		"\a\x35A\x2\x2\x1337\x1339\a\x4BF\x2\x2\x1338\x1336\x3\x2\x2\x2\x1338\x1339"+
		"\x3\x2\x2\x2\x1339\x133A\x3\x2\x2\x2\x133A\x133B\x5\x4C2\x262\x2\x133B"+
		"\x133C\a\x3EB\x2\x2\x133C\x133D\x5\x4C2\x262\x2\x133D\x134A\x3\x2\x2\x2"+
		"\x133E\x133F\a\x33D\x2\x2\x133F\x1340\t\x31\x2\x2\x1340\x1343\a\x294\x2"+
		"\x2\x1341\x1342\a\x35A\x2\x2\x1342\x1344\a\x4BF\x2\x2\x1343\x1341\x3\x2"+
		"\x2\x2\x1343\x1344\x3\x2\x2\x2\x1344\x1345\x3\x2\x2\x2\x1345\x1346\x5"+
		"\x4C2\x262\x2\x1346\x1347\a\x181\x2\x2\x1347\x1348\x5\x4C2\x262\x2\x1348"+
		"\x134A\x3\x2\x2\x2\x1349\x1331\x3\x2\x2\x2\x1349\x1332\x3\x2\x2\x2\x1349"+
		"\x1333\x3\x2\x2\x2\x1349\x133E\x3\x2\x2\x2\x134A\x134D\x3\x2\x2\x2\x134B"+
		"\x1349\x3\x2\x2\x2\x134B\x134C\x3\x2\x2\x2\x134C\x187\x3\x2\x2\x2\x134D"+
		"\x134B\x3\x2\x2\x2\x134E\x134F\a\xC9\x2\x2\x134F\x1350\a\x35A\x2\x2\x1350"+
		"\x1353\x5\x4C2\x262\x2\x1351\x1352\a\x46\x2\x2\x1352\x1354\x5\x4C2\x262"+
		"\x2\x1353\x1351\x3\x2\x2\x2\x1353\x1354\x3\x2\x2\x2\x1354\x189\x3\x2\x2"+
		"\x2\x1355\x1356\a%\x2\x2\x1356\x1357\a\x35A\x2\x2\x1357\x1358\x5\x4C2"+
		"\x262\x2\x1358\x135B\a\x3F5\x2\x2\x1359\x135A\a\x286\x2\x2\x135A\x135C"+
		"\a\x4BF\x2\x2\x135B\x1359\x3\x2\x2\x2\x135B\x135C\x3\x2\x2\x2\x135C\x135D"+
		"\x3\x2\x2\x2\x135D\x1360\x5\x4C2\x262\x2\x135E\x135F\a\x4B5\x2\x2\x135F"+
		"\x1361\a\x4A3\x2\x2\x1360\x135E\x3\x2\x2\x2\x1360\x1361\x3\x2\x2\x2\x1361"+
		"\x18B\x3\x2\x2\x2\x1362\x1363\a\xC9\x2\x2\x1363\x1364\a\x364\x2\x2\x1364"+
		"\x1365\a\x2E8\x2\x2\x1365\x1366\a\x208\x2\x2\x1366\x136E\x5\x4C2\x262"+
		"\x2\x1367\x136B\a\x181\x2\x2\x1368\x1369\x5\x4C2\x262\x2\x1369\x136A\a"+
		"\x4B5\x2\x2\x136A\x136C\x3\x2\x2\x2\x136B\x1368\x3\x2\x2\x2\x136B\x136C"+
		"\x3\x2\x2\x2\x136C\x136D\x3\x2\x2\x2\x136D\x136F\x5\x4C2\x262\x2\x136E"+
		"\x1367\x3\x2\x2\x2\x136E\x136F\x3\x2\x2\x2\x136F\x1372\x3\x2\x2\x2\x1370"+
		"\x1371\a\x46\x2\x2\x1371\x1373\x5\x4C2\x262\x2\x1372\x1370\x3\x2\x2\x2"+
		"\x1372\x1373\x3\x2\x2\x2\x1373\x18D\x3\x2\x2\x2\x1374\x1375\a\xC9\x2\x2"+
		"\x1375\x1376\a\x36B\x2\x2\x1376\x137A\a\x2D3\x2\x2\x1377\x1378\x5\x4C2"+
		"\x262\x2\x1378\x1379\a\x4B5\x2\x2\x1379\x137B\x3\x2\x2\x2\x137A\x1377"+
		"\x3\x2\x2\x2\x137A\x137B\x3\x2\x2\x2\x137B\x137C\x3\x2\x2\x2\x137C\x13A5"+
		"\x5\x4C2\x262\x2\x137D\x137F\a\x4BC\x2\x2\x137E\x137D\x3\x2\x2\x2\x137E"+
		"\x137F\x3\x2\x2\x2\x137F\x1380\x3\x2\x2\x2\x1380\x1382\a\r\x2\x2\x1381"+
		"\x1383\t\x32\x2\x2\x1382\x1381\x3\x2\x2\x2\x1382\x1383\x3\x2\x2\x2\x1383"+
		"\x1384\x3\x2\x2\x2\x1384\x1385\a\x2D8\x2\x2\x1385\x1386\x5\x4C2\x262\x2"+
		"\x1386\x1387\a\x4B5\x2\x2\x1387\x1388\x5\x4C2\x262\x2\x1388\x138D\a\x4BA"+
		"\x2\x2\x1389\x138B\a\x4BC\x2\x2\x138A\x1389\x3\x2\x2\x2\x138A\x138B\x3"+
		"\x2\x2\x2\x138B\x138C\x3\x2\x2\x2\x138C\x138E\x5\x4C2\x262\x2\x138D\x138A"+
		"\x3\x2\x2\x2\x138E\x138F\x3\x2\x2\x2\x138F\x138D\x3\x2\x2\x2\x138F\x1390"+
		"\x3\x2\x2\x2\x1390\x1391\x3\x2\x2\x2\x1391\x1392\a\x4BB\x2\x2\x1392\x1393"+
		"\a\x294\x2\x2\x1393\x1394\x5\x4C2\x262\x2\x1394\x1395\a\x4B5\x2\x2\x1395"+
		"\x13A2\x5\x4C2\x262\x2\x1396\x1398\a\x4BC\x2\x2\x1397\x1396\x3\x2\x2\x2"+
		"\x1397\x1398\x3\x2\x2\x2\x1398\x1399\x3\x2\x2\x2\x1399\x139A\a\x15\x2"+
		"\x2\x139A\x13A1\t\x33\x2\x2\x139B\x139D\a\x4BC\x2\x2\x139C\x139B\x3\x2"+
		"\x2\x2\x139C\x139D\x3\x2\x2\x2\x139D\x139E\x3\x2\x2\x2\x139E\x139F\a["+
		"\x2\x2\x139F\x13A1\t\x34\x2\x2\x13A0\x1397\x3\x2\x2\x2\x13A0\x139C\x3"+
		"\x2\x2\x2\x13A1\x13A4\x3\x2\x2\x2\x13A2\x13A0\x3\x2\x2\x2\x13A2\x13A3"+
		"\x3\x2\x2\x2\x13A3\x13A6\x3\x2\x2\x2\x13A4\x13A2\x3\x2\x2\x2\x13A5\x137E"+
		"\x3\x2\x2\x2\x13A6\x13A7\x3\x2\x2\x2\x13A7\x13A5\x3\x2\x2\x2\x13A7\x13A8"+
		"\x3\x2\x2\x2\x13A8\x13B3\x3\x2\x2\x2\x13A9\x13AA\a\x439\x2\x2\x13AA\x13AB"+
		"\a\x4BA\x2\x2\x13AB\x13AC\a\x3B2\x2\x2\x13AC\x13AD\a\x4A8\x2\x2\x13AD"+
		"\x13B0\t\x13\x2\x2\x13AE\x13AF\a\x35B\x2\x2\x13AF\x13B1\t\x13\x2\x2\x13B0"+
		"\x13AE\x3\x2\x2\x2\x13B0\x13B1\x3\x2\x2\x2\x13B1\x13B2\x3\x2\x2\x2\x13B2"+
		"\x13B4\a\x4BB\x2\x2\x13B3\x13A9\x3\x2\x2\x2\x13B3\x13B4\x3\x2\x2\x2\x13B4"+
		"\x13B8\x3\x2\x2\x2\x13B5\x13B6\a\x271\x2\x2\x13B6\x13B7\a\x172\x2\x2\x13B7"+
		"\x13B9\a\x325\x2\x2\x13B8\x13B5\x3\x2\x2\x2\x13B8\x13B9\x3\x2\x2\x2\x13B9"+
		"\x18F\x3\x2\x2\x2\x13BA\x13BB\a%\x2\x2\x13BB\x13BF\a\x377\x2\x2\x13BC"+
		"\x13BD\x5\x4C2\x262\x2\x13BD\x13BE\a\x4B5\x2\x2\x13BE\x13C0\x3\x2\x2\x2"+
		"\x13BF\x13BC\x3\x2\x2\x2\x13BF\x13C0\x3\x2\x2\x2\x13C0\x13C1\x3\x2\x2"+
		"\x2\x13C1\x13C7\x5\x4C2\x262\x2\x13C2\x13C5\a\x331\x2\x2\x13C3\x13C4\a"+
		"\x439\x2\x2\x13C4\x13C6\a\x4A2\x2\x2\x13C5\x13C3\x3\x2\x2\x2\x13C5\x13C6"+
		"\x3\x2\x2\x2\x13C6\x13C8\x3\x2\x2\x2\x13C7\x13C2\x3\x2\x2\x2\x13C7\x13C8"+
		"\x3\x2\x2\x2\x13C8\x13CC\x3\x2\x2\x2\x13C9\x13CA\a\x1C4\x2\x2\x13CA\x13CB"+
		"\ap\x2\x2\x13CB\x13CD\a\x4A2\x2\x2\x13CC\x13C9\x3\x2\x2\x2\x13CC\x13CD"+
		"\x3\x2\x2\x2\x13CD\x13D2\x3\x2\x2\x2\x13CE\x13CF\a\x245\x2\x2\x13CF\x13D3"+
		"\a\x4A2\x2\x2\x13D0\x13D1\a\x25F\x2\x2\x13D1\x13D3\a\x245\x2\x2\x13D2"+
		"\x13CE\x3\x2\x2\x2\x13D2\x13D0\x3\x2\x2\x2\x13D2\x13D3\x3\x2\x2\x2\x13D3"+
		"\x13D8\x3\x2\x2\x2\x13D4\x13D5\a\x227\x2\x2\x13D5\x13D9\a\x4A2\x2\x2\x13D6"+
		"\x13D7\a\x25F\x2\x2\x13D7\x13D9\a\x227\x2\x2\x13D8\x13D4\x3\x2\x2\x2\x13D8"+
		"\x13D6\x3\x2\x2\x2\x13D8\x13D9\x3\x2\x2\x2\x13D9\x13DD\x3\x2\x2\x2\x13DA"+
		"\x13DE\a\xDB\x2\x2\x13DB\x13DC\a\x25F\x2\x2\x13DC\x13DE\a\xDB\x2\x2\x13DD"+
		"\x13DA\x3\x2\x2\x2\x13DD\x13DB\x3\x2\x2\x2\x13DD\x13DE\x3\x2\x2\x2\x13DE"+
		"\x13E3\x3\x2\x2\x2\x13DF\x13E0\aq\x2\x2\x13E0\x13E4\a\x4A2\x2\x2\x13E1"+
		"\x13E2\a\x25F\x2\x2\x13E2\x13E4\aq\x2\x2\x13E3\x13DF\x3\x2\x2\x2\x13E3"+
		"\x13E1\x3\x2\x2\x2\x13E3\x13E4\x3\x2\x2\x2\x13E4\x191\x3\x2\x2\x2\x13E5"+
		"\x13E6\a\xC9\x2\x2\x13E6\x13EA\a\x377\x2\x2\x13E7\x13E8\x5\x4C2\x262\x2"+
		"\x13E8\x13E9\a\x4B5\x2\x2\x13E9\x13EB\x3\x2\x2\x2\x13EA\x13E7\x3\x2\x2"+
		"\x2\x13EA\x13EB\x3\x2\x2\x2\x13EB\x13EC\x3\x2\x2\x2\x13EC\x13EF\x5\x4C2"+
		"\x262\x2\x13ED\x13EE\a:\x2\x2\x13EE\x13F0\x5\x4BA\x25E\x2\x13EF\x13ED"+
		"\x3\x2\x2\x2\x13EF\x13F0\x3\x2\x2\x2\x13F0\x13F4\x3\x2\x2\x2\x13F1\x13F2"+
		"\a\x3AE\x2\x2\x13F2\x13F3\a\x439\x2\x2\x13F3\x13F5\a\x4A2\x2\x2\x13F4"+
		"\x13F1\x3\x2\x2\x2\x13F4\x13F5\x3\x2\x2\x2\x13F5\x13FC\x3\x2\x2\x2\x13F6"+
		"\x13F7\a\x1C4\x2\x2\x13F7\x13F9\ap\x2\x2\x13F8\x13FA\a\x4C4\x2\x2\x13F9"+
		"\x13F8\x3\x2\x2\x2\x13F9\x13FA\x3\x2\x2\x2\x13FA\x13FB\x3\x2\x2\x2\x13FB"+
		"\x13FD\a\x4A2\x2\x2\x13FC\x13F6\x3\x2\x2\x2\x13FC\x13FD\x3\x2\x2\x2\x13FD"+
		"\x1407\x3\x2\x2\x2\x13FE\x1403\a\x245\x2\x2\x13FF\x1401\a\x4C4\x2\x2\x1400"+
		"\x13FF\x3\x2\x2\x2\x1400\x1401\x3\x2\x2\x2\x1401\x1402\x3\x2\x2\x2\x1402"+
		"\x1404\a\x4A2\x2\x2\x1403\x1400\x3\x2\x2\x2\x1403\x1404\x3\x2\x2\x2\x1404"+
		"\x1408\x3\x2\x2\x2\x1405\x1406\a\x25F\x2\x2\x1406\x1408\a\x245\x2\x2\x1407"+
		"\x13FE\x3\x2\x2\x2\x1407\x1405\x3\x2\x2\x2\x1407\x1408\x3\x2\x2\x2\x1408"+
		"\x1412\x3\x2\x2\x2\x1409\x140E\a\x227\x2\x2\x140A\x140C\a\x4C4\x2\x2\x140B"+
		"\x140A\x3\x2\x2\x2\x140B\x140C\x3\x2\x2\x2\x140C\x140D\x3\x2\x2\x2\x140D"+
		"\x140F\a\x4A2\x2\x2\x140E\x140B\x3\x2\x2\x2\x140E\x140F\x3\x2\x2\x2\x140F"+
		"\x1413\x3\x2\x2\x2\x1410\x1411\a\x25F\x2\x2\x1411\x1413\a\x227\x2\x2\x1412"+
		"\x1409\x3\x2\x2\x2\x1412\x1410\x3\x2\x2\x2\x1412\x1413\x3\x2\x2\x2\x1413"+
		"\x1417\x3\x2\x2\x2\x1414\x1418\a\xDB\x2\x2\x1415\x1416\a\x25F\x2\x2\x1416"+
		"\x1418\a\xDB\x2\x2\x1417\x1414\x3\x2\x2\x2\x1417\x1415\x3\x2\x2\x2\x1417"+
		"\x1418\x3\x2\x2\x2\x1418\x141F\x3\x2\x2\x2\x1419\x141B\aq\x2\x2\x141A"+
		"\x141C\a\x4A2\x2\x2\x141B\x141A\x3\x2\x2\x2\x141B\x141C\x3\x2\x2\x2\x141C"+
		"\x1420\x3\x2\x2\x2\x141D\x141E\a\x25F\x2\x2\x141E\x1420\aq\x2\x2\x141F"+
		"\x1419\x3\x2\x2\x2\x141F\x141D\x3\x2\x2\x2\x141F\x1420\x3\x2\x2\x2\x1420"+
		"\x193\x3\x2\x2\x2\x1421\x1422\a%\x2\x2\x1422\x1423\a\x37A\x2\x2\x1423"+
		"\x1424\a\x42\x2\x2\x1424\x14A8\x5\x4C2\x262\x2\x1425\x1452\a\x3EB\x2\x2"+
		"\x1426\x1427\a\x15C\x2\x2\x1427\x144C\a\x4BA\x2\x2\x1428\x142A\a\x4BC"+
		"\x2\x2\x1429\x1428\x3\x2\x2\x2\x1429\x142A\x3\x2\x2\x2\x142A\x142B\x3"+
		"\x2\x2\x2\x142B\x142C\a\x163\x2\x2\x142C\x142D\a\x4A8\x2\x2\x142D\x144B"+
		"\a\x4A4\x2\x2\x142E\x1430\a\x4BC\x2\x2\x142F\x142E\x3\x2\x2\x2\x142F\x1430"+
		"\x3\x2\x2\x2\x1430\x1431\x3\x2\x2\x2\x1431\x1432\a\x225\x2\x2\x1432\x1436"+
		"\a\x4A8\x2\x2\x1433\x1434\a\x4A2\x2\x2\x1434\x1437\t\x35\x2\x2\x1435\x1437"+
		"\a\x40F\x2\x2\x1436\x1433\x3\x2\x2\x2\x1436\x1435\x3\x2\x2\x2\x1437\x144B"+
		"\x3\x2\x2\x2\x1438\x143A\a\x4BC\x2\x2\x1439\x1438\x3\x2\x2\x2\x1439\x143A"+
		"\x3\x2\x2\x2\x143A\x143B\x3\x2\x2\x2\x143B\x143C\a\x235\x2\x2\x143C\x143D"+
		"\a\x4A8\x2\x2\x143D\x144B\t\x36\x2\x2\x143E\x1440\a\x4BC\x2\x2\x143F\x143E"+
		"\x3\x2\x2\x2\x143F\x1440\x3\x2\x2\x2\x1440\x1441\x3\x2\x2\x2\x1441\x1442"+
		"\a\x22D\x2\x2\x1442\x1443\a\x4A8\x2\x2\x1443\x144B\a\x4A2\x2\x2\x1444"+
		"\x1446\a\x4BC\x2\x2\x1445\x1444\x3\x2\x2\x2\x1445\x1446\x3\x2\x2\x2\x1446"+
		"\x1447\x3\x2\x2\x2\x1447\x1448\a\x32C\x2\x2\x1448\x1449\a\x4A8\x2\x2\x1449"+
		"\x144B\t\x13\x2\x2\x144A\x1429\x3\x2\x2\x2\x144A\x142F\x3\x2\x2\x2\x144A"+
		"\x1439\x3\x2\x2\x2\x144A\x143F\x3\x2\x2\x2\x144A\x1445\x3\x2\x2\x2\x144B"+
		"\x144E\x3\x2\x2\x2\x144C\x144A\x3\x2\x2\x2\x144C\x144D\x3\x2\x2\x2\x144D"+
		"\x144F\x3\x2\x2\x2\x144E\x144C\x3\x2\x2\x2\x144F\x1453\a\x4BB\x2\x2\x1450"+
		"\x1453\a\x33\x2\x2\x1451\x1453\a\x36D\x2\x2\x1452\x1426\x3\x2\x2\x2\x1452"+
		"\x1450\x3\x2\x2\x2\x1452\x1451\x3\x2\x2\x2\x1453\x1455\x3\x2\x2\x2\x1454"+
		"\x1425\x3\x2\x2\x2\x1454\x1455\x3\x2\x2\x2\x1455\x1470\x3\x2\x2\x2\x1456"+
		"\x1457\a\x439\x2\x2\x1457\x146C\a\x4BA\x2\x2\x1458\x145A\a\x4BC\x2\x2"+
		"\x1459\x1458\x3\x2\x2\x2\x1459\x145A\x3\x2\x2\x2\x145A\x145B\x3\x2\x2"+
		"\x2\x145B\x145C\a\x2F4\x2\x2\x145C\x145D\a\x4A8\x2\x2\x145D\x146B\a\x4A2"+
		"\x2\x2\x145E\x1460\a\x4BC\x2\x2\x145F\x145E\x3\x2\x2\x2\x145F\x1460\x3"+
		"\x2\x2\x2\x1460\x1461\x3\x2\x2\x2\x1461\x1462\a\x297\x2\x2\x1462\x1463"+
		"\a\x4A8\x2\x2\x1463\x146B\t\x37\x2\x2\x1464\x1466\a\x4BC\x2\x2\x1465\x1464"+
		"\x3\x2\x2\x2\x1465\x1466\x3\x2\x2\x2\x1466\x1467\x3\x2\x2\x2\x1467\x1468"+
		"\a\x3B2\x2\x2\x1468\x1469\a\x4A8\x2\x2\x1469\x146B\t\x13\x2\x2\x146A\x1459"+
		"\x3\x2\x2\x2\x146A\x145F\x3\x2\x2\x2\x146A\x1465\x3\x2\x2\x2\x146B\x146E"+
		"\x3\x2\x2\x2\x146C\x146A\x3\x2\x2\x2\x146C\x146D\x3\x2\x2\x2\x146D\x146F"+
		"\x3\x2\x2\x2\x146E\x146C\x3\x2\x2\x2\x146F\x1471\a\x4BB\x2\x2\x1470\x1456"+
		"\x3\x2\x2\x2\x1470\x1471\x3\x2\x2\x2\x1471\x14A0\x3\x2\x2\x2\x1472\x149E"+
		"\a\x436\x2\x2\x1473\x1475\a\x4BC\x2\x2\x1474\x1473\x3\x2\x2\x2\x1474\x1475"+
		"\x3\x2\x2\x2\x1475\x1477\x3\x2\x2\x2\x1476\x1478\a\x271\x2\x2\x1477\x1476"+
		"\x3\x2\x2\x2\x1477\x1478\x3\x2\x2\x2\x1478\x1479\x3\x2\x2\x2\x1479\x1485"+
		"\x5\x4C2\x262\x2\x147A\x1486\a\x4A8\x2\x2\x147B\x147C\a\x4AA\x2\x2\x147C"+
		"\x1486\a\x4A9\x2\x2\x147D\x147E\a\x4AB\x2\x2\x147E\x1486\a\x4A8\x2\x2"+
		"\x147F\x1486\a\x4A9\x2\x2\x1480\x1481\a\x4A9\x2\x2\x1481\x1486\a\x4A8"+
		"\x2\x2\x1482\x1486\a\x4AA\x2\x2\x1483\x1484\a\x4AA\x2\x2\x1484\x1486\a"+
		"\x4A8\x2\x2\x1485\x147A\x3\x2\x2\x2\x1485\x147B\x3\x2\x2\x2\x1485\x147D"+
		"\x3\x2\x2\x2\x1485\x147F\x3\x2\x2\x2\x1485\x1480\x3\x2\x2\x2\x1485\x1482"+
		"\x3\x2\x2\x2\x1485\x1483\x3\x2\x2\x2\x1486\x1487\x3\x2\x2\x2\x1487\x1488"+
		"\t!\x2\x2\x1488\x149F\x3\x2\x2\x2\x1489\x148B\a\x4BC\x2\x2\x148A\x1489"+
		"\x3\x2\x2\x2\x148A\x148B\x3\x2\x2\x2\x148B\x148C\x3\x2\x2\x2\x148C\x148E"+
		"\t&\x2\x2\x148D\x148F\a\x271\x2\x2\x148E\x148D\x3\x2\x2\x2\x148E\x148F"+
		"\x3\x2\x2\x2\x148F\x149B\x3\x2\x2\x2\x1490\x149C\a\x4A8\x2\x2\x1491\x1492"+
		"\a\x4AA\x2\x2\x1492\x149C\a\x4A9\x2\x2\x1493\x1494\a\x4AB\x2\x2\x1494"+
		"\x149C\a\x4A8\x2\x2\x1495\x149C\a\x4A9\x2\x2\x1496\x1497\a\x4A9\x2\x2"+
		"\x1497\x149C\a\x4A8\x2\x2\x1498\x149C\a\x4AA\x2\x2\x1499\x149A\a\x4AA"+
		"\x2\x2\x149A\x149C\a\x4A8\x2\x2\x149B\x1490\x3\x2\x2\x2\x149B\x1491\x3"+
		"\x2\x2\x2\x149B\x1493\x3\x2\x2\x2\x149B\x1495\x3\x2\x2\x2\x149B\x1496"+
		"\x3\x2\x2\x2\x149B\x1498\x3\x2\x2\x2\x149B\x1499\x3\x2\x2\x2\x149C\x149D"+
		"\x3\x2\x2\x2\x149D\x149F\t!\x2\x2\x149E\x1474\x3\x2\x2\x2\x149E\x148A"+
		"\x3\x2\x2\x2\x149F\x14A1\x3\x2\x2\x2\x14A0\x1472\x3\x2\x2\x2\x14A0\x14A1"+
		"\x3\x2\x2\x2\x14A1\x14A9\x3\x2\x2\x2\x14A2\x14A3\a\x31B\x2\x2\x14A3\x14A9"+
		"\a\x436\x2\x2\x14A4\x14A5\a\x24E\x2\x2\x14A5\x14A6\a\x253\x2\x2\x14A6"+
		"\x14A7\a\x4A8\x2\x2\x14A7\x14A9\x5\x4C2\x262\x2\x14A8\x1454\x3\x2\x2\x2"+
		"\x14A8\x14A2\x3\x2\x2\x2\x14A8\x14A4\x3\x2\x2\x2\x14A9\x195\x3\x2\x2\x2"+
		"\x14AA\x14AB\a\xC9\x2\x2\x14AB\x14AC\a\x37A\x2\x2\x14AC\x14AD\a\x42\x2"+
		"\x2\x14AD\x1537\x5\x4C2\x262\x2\x14AE\x14DB\a\x3EB\x2\x2\x14AF\x14B0\a"+
		"\x15C\x2\x2\x14B0\x14D5\a\x4BA\x2\x2\x14B1\x14B3\a\x4BC\x2\x2\x14B2\x14B1"+
		"\x3\x2\x2\x2\x14B2\x14B3\x3\x2\x2\x2\x14B3\x14B4\x3\x2\x2\x2\x14B4\x14B5"+
		"\a\x163\x2\x2\x14B5\x14B6\a\x4A8\x2\x2\x14B6\x14D4\a\x4A4\x2\x2\x14B7"+
		"\x14B9\a\x4BC\x2\x2\x14B8\x14B7\x3\x2\x2\x2\x14B8\x14B9\x3\x2\x2\x2\x14B9"+
		"\x14BA\x3\x2\x2\x2\x14BA\x14BB\a\x225\x2\x2\x14BB\x14BF\a\x4A8\x2\x2\x14BC"+
		"\x14BD\a\x4A2\x2\x2\x14BD\x14C0\t\x35\x2\x2\x14BE\x14C0\a\x40F\x2\x2\x14BF"+
		"\x14BC\x3\x2\x2\x2\x14BF\x14BE\x3\x2\x2\x2\x14C0\x14D4\x3\x2\x2\x2\x14C1"+
		"\x14C3\a\x4BC\x2\x2\x14C2\x14C1\x3\x2\x2\x2\x14C2\x14C3\x3\x2\x2\x2\x14C3"+
		"\x14C4\x3\x2\x2\x2\x14C4\x14C5\a\x235\x2\x2\x14C5\x14C6\a\x4A8\x2\x2\x14C6"+
		"\x14D4\t\x36\x2\x2\x14C7\x14C9\a\x4BC\x2\x2\x14C8\x14C7\x3\x2\x2\x2\x14C8"+
		"\x14C9\x3\x2\x2\x2\x14C9\x14CA\x3\x2\x2\x2\x14CA\x14CB\a\x22D\x2\x2\x14CB"+
		"\x14CC\a\x4A8\x2\x2\x14CC\x14D4\a\x4A2\x2\x2\x14CD\x14CF\a\x4BC\x2\x2"+
		"\x14CE\x14CD\x3\x2\x2\x2\x14CE\x14CF\x3\x2\x2\x2\x14CF\x14D0\x3\x2\x2"+
		"\x2\x14D0\x14D1\a\x32C\x2\x2\x14D1\x14D2\a\x4A8\x2\x2\x14D2\x14D4\t\x13"+
		"\x2\x2\x14D3\x14B2\x3\x2\x2\x2\x14D3\x14B8\x3\x2\x2\x2\x14D3\x14C2\x3"+
		"\x2\x2\x2\x14D3\x14C8\x3\x2\x2\x2\x14D3\x14CE\x3\x2\x2\x2\x14D4\x14D7"+
		"\x3\x2\x2\x2\x14D5\x14D3\x3\x2\x2\x2\x14D5\x14D6\x3\x2\x2\x2\x14D6\x14D8"+
		"\x3\x2\x2\x2\x14D7\x14D5\x3\x2\x2\x2\x14D8\x14DC\a\x4BB\x2\x2\x14D9\x14DC"+
		"\a\x33\x2\x2\x14DA\x14DC\a\x36D\x2\x2\x14DB\x14AF\x3\x2\x2\x2\x14DB\x14D9"+
		"\x3\x2\x2\x2\x14DB\x14DA\x3\x2\x2\x2\x14DC\x14DE\x3\x2\x2\x2\x14DD\x14AE"+
		"\x3\x2\x2\x2\x14DD\x14DE\x3\x2\x2\x2\x14DE\x14FF\x3\x2\x2\x2\x14DF\x14E0"+
		"\a\x439\x2\x2\x14E0\x14FB\a\x4BA\x2\x2\x14E1\x14E3\a\x4BC\x2\x2\x14E2"+
		"\x14E1\x3\x2\x2\x2\x14E2\x14E3\x3\x2\x2\x2\x14E3\x14E4\x3\x2\x2\x2\x14E4"+
		"\x14E5\a\x2F4\x2\x2\x14E5\x14E6\a\x4A8\x2\x2\x14E6\x14FA\a\x4A2\x2\x2"+
		"\x14E7\x14E9\a\x4BC\x2\x2\x14E8\x14E7\x3\x2\x2\x2\x14E8\x14E9\x3\x2\x2"+
		"\x2\x14E9\x14EA\x3\x2\x2\x2\x14EA\x14EB\a\x297\x2\x2\x14EB\x14EC\a\x4A8"+
		"\x2\x2\x14EC\x14FA\t\x37\x2\x2\x14ED\x14EF\a\x4BC\x2\x2\x14EE\x14ED\x3"+
		"\x2\x2\x2\x14EE\x14EF\x3\x2\x2\x2\x14EF\x14F0\x3\x2\x2\x2\x14F0\x14F1"+
		"\a\x3B2\x2\x2\x14F1\x14F2\a\x4A8\x2\x2\x14F2\x14FA\t\x13\x2\x2\x14F3\x14F5"+
		"\a\x4BC\x2\x2\x14F4\x14F3\x3\x2\x2\x2\x14F4\x14F5\x3\x2\x2\x2\x14F5\x14F6"+
		"\x3\x2\x2\x2\x14F6\x14F7\a\x43\x2\x2\x14F7\x14F8\a\x4A8\x2\x2\x14F8\x14FA"+
		"\x5\x4C2\x262\x2\x14F9\x14E2\x3\x2\x2\x2\x14F9\x14E8\x3\x2\x2\x2\x14F9"+
		"\x14EE\x3\x2\x2\x2\x14F9\x14F4\x3\x2\x2\x2\x14FA\x14FD\x3\x2\x2\x2\x14FB"+
		"\x14F9\x3\x2\x2\x2\x14FB\x14FC\x3\x2\x2\x2\x14FC\x14FE\x3\x2\x2\x2\x14FD"+
		"\x14FB\x3\x2\x2\x2\x14FE\x1500\a\x4BB\x2\x2\x14FF\x14DF\x3\x2\x2\x2\x14FF"+
		"\x1500\x3\x2\x2\x2\x1500\x152F\x3\x2\x2\x2\x1501\x152D\a\x436\x2\x2\x1502"+
		"\x1504\a\x4BC\x2\x2\x1503\x1502\x3\x2\x2\x2\x1503\x1504\x3\x2\x2\x2\x1504"+
		"\x1506\x3\x2\x2\x2\x1505\x1507\a\x271\x2\x2\x1506\x1505\x3\x2\x2\x2\x1506"+
		"\x1507\x3\x2\x2\x2\x1507\x1508\x3\x2\x2\x2\x1508\x1514\x5\x4C2\x262\x2"+
		"\x1509\x1515\a\x4A8\x2\x2\x150A\x150B\a\x4AA\x2\x2\x150B\x1515\a\x4A9"+
		"\x2\x2\x150C\x150D\a\x4AB\x2\x2\x150D\x1515\a\x4A8\x2\x2\x150E\x1515\a"+
		"\x4A9\x2\x2\x150F\x1510\a\x4A9\x2\x2\x1510\x1515\a\x4A8\x2\x2\x1511\x1515"+
		"\a\x4AA\x2\x2\x1512\x1513\a\x4AA\x2\x2\x1513\x1515\a\x4A8\x2\x2\x1514"+
		"\x1509\x3\x2\x2\x2\x1514\x150A\x3\x2\x2\x2\x1514\x150C\x3\x2\x2\x2\x1514"+
		"\x150E\x3\x2\x2\x2\x1514\x150F\x3\x2\x2\x2\x1514\x1511\x3\x2\x2\x2\x1514"+
		"\x1512\x3\x2\x2\x2\x1515\x1516\x3\x2\x2\x2\x1516\x1517\t!\x2\x2\x1517"+
		"\x152E\x3\x2\x2\x2\x1518\x151A\a\x4BC\x2\x2\x1519\x1518\x3\x2\x2\x2\x1519"+
		"\x151A\x3\x2\x2\x2\x151A\x151B\x3\x2\x2\x2\x151B\x151D\t&\x2\x2\x151C"+
		"\x151E\a\x271\x2\x2\x151D\x151C\x3\x2\x2\x2\x151D\x151E\x3\x2\x2\x2\x151E"+
		"\x152A\x3\x2\x2\x2\x151F\x152B\a\x4A8\x2\x2\x1520\x1521\a\x4AA\x2\x2\x1521"+
		"\x152B\a\x4A9\x2\x2\x1522\x1523\a\x4AB\x2\x2\x1523\x152B\a\x4A8\x2\x2"+
		"\x1524\x152B\a\x4A9\x2\x2\x1525\x1526\a\x4A9\x2\x2\x1526\x152B\a\x4A8"+
		"\x2\x2\x1527\x152B\a\x4AA\x2\x2\x1528\x1529\a\x4AA\x2\x2\x1529\x152B\a"+
		"\x4A8\x2\x2\x152A\x151F\x3\x2\x2\x2\x152A\x1520\x3\x2\x2\x2\x152A\x1522"+
		"\x3\x2\x2\x2\x152A\x1524\x3\x2\x2\x2\x152A\x1525\x3\x2\x2\x2\x152A\x1527"+
		"\x3\x2\x2\x2\x152A\x1528\x3\x2\x2\x2\x152B\x152C\x3\x2\x2\x2\x152C\x152E"+
		"\t!\x2\x2\x152D\x1503\x3\x2\x2\x2\x152D\x1519\x3\x2\x2\x2\x152E\x1530"+
		"\x3\x2\x2\x2\x152F\x1501\x3\x2\x2\x2\x152F\x1530\x3\x2\x2\x2\x1530\x1538"+
		"\x3\x2\x2\x2\x1531\x1532\a\x31B\x2\x2\x1532\x1538\a\x436\x2\x2\x1533\x1534"+
		"\a\x24E\x2\x2\x1534\x1535\a\x253\x2\x2\x1535\x1536\a\x4A8\x2\x2\x1536"+
		"\x1538\x5\x4C2\x262\x2\x1537\x14DD\x3\x2\x2\x2\x1537\x1531\x3\x2\x2\x2"+
		"\x1537\x1533\x3\x2\x2\x2\x1538\x197\x3\x2\x2\x2\x1539\x153A\a%\x2\x2\x153A"+
		"\x153B\a\x37A\x2\x2\x153B\x153C\a\x42\x2\x2\x153C\x153D\a\x3A5\x2\x2\x153D"+
		"\x1542\x5\x4C2\x262\x2\x153E\x153F\a\x172\x2\x2\x153F\x1540\a\x37A\x2"+
		"\x2\x1540\x1541\a\x42\x2\x2\x1541\x1543\x5\x4C2\x262\x2\x1542\x153E\x3"+
		"\x2\x2\x2\x1542\x1543\x3\x2\x2\x2\x1543\x154B\x3\x2\x2\x2\x1544\x1545"+
		"\t\x19\x2\x2\x1545\x1546\a\x4BA\x2\x2\x1546\x1547\x5\x4C2\x262\x2\x1547"+
		"\x1548\a\x4BB\x2\x2\x1548\x154A\x3\x2\x2\x2\x1549\x1544\x3\x2\x2\x2\x154A"+
		"\x154D\x3\x2\x2\x2\x154B\x1549\x3\x2\x2\x2\x154B\x154C\x3\x2\x2\x2\x154C"+
		"\x1554\x3\x2\x2\x2\x154D\x154B\x3\x2\x2\x2\x154E\x154F\a\x439\x2\x2\x154F"+
		"\x1550\a\x4BA\x2\x2\x1550\x1551\a\x3B2\x2\x2\x1551\x1552\a\x4A8\x2\x2"+
		"\x1552\x1553\t\x13\x2\x2\x1553\x1555\a\x4BB\x2\x2\x1554\x154E\x3\x2\x2"+
		"\x2\x1554\x1555\x3\x2\x2\x2\x1555\x199\x3\x2\x2\x2\x1556\x1557\a\xC9\x2"+
		"\x2\x1557\x1558\a\x37A\x2\x2\x1558\x1559\a\x42\x2\x2\x1559\x155A\a\x3A5"+
		"\x2\x2\x155A\x155F\x5\x4C2\x262\x2\x155B\x155C\a\x172\x2\x2\x155C\x155D"+
		"\a\x37A\x2\x2\x155D\x155E\a\x42\x2\x2\x155E\x1560\x5\x4C2\x262\x2\x155F"+
		"\x155B\x3\x2\x2\x2\x155F\x1560\x3\x2\x2\x2\x1560\x1568\x3\x2\x2\x2\x1561"+
		"\x1562\a\r\x2\x2\x1562\x1563\a\x4BA\x2\x2\x1563\x1564\x5\x4C2\x262\x2"+
		"\x1564\x1565\a\x4BB\x2\x2\x1565\x1567\x3\x2\x2\x2\x1566\x1561\x3\x2\x2"+
		"\x2\x1567\x156A\x3\x2\x2\x2\x1568\x1566\x3\x2\x2\x2\x1568\x1569\x3\x2"+
		"\x2\x2\x1569\x1571\x3\x2\x2\x2\x156A\x1568\x3\x2\x2\x2\x156B\x156C\a\x439"+
		"\x2\x2\x156C\x156D\a\x4BA\x2\x2\x156D\x156E\a\x3B2\x2\x2\x156E\x156F\a"+
		"\x4A8\x2\x2\x156F\x1570\t\x13\x2\x2\x1570\x1572\a\x4BB\x2\x2\x1571\x156B"+
		"\x3\x2\x2\x2\x1571\x1572\x3\x2\x2\x2\x1572\x19B\x3\x2\x2\x2\x1573\x1574"+
		"\a%\x2\x2\x1574\x1575\a\x37A\x2\x2\x1575\x1576\a\xB1\x2\x2\x1576\x15E0"+
		"\a\x386\x2\x2\x1577\x1578\a\x2E6\x2\x2\x1578\x159C\a\x14\x2\x2\x1579\x157A"+
		"\a\xC8\x2\x2\x157A\x158A\a\x4A8\x2\x2\x157B\x158B\aG\x2\x2\x157C\x157E"+
		"\a\x4BC\x2\x2\x157D\x157C\x3\x2\x2\x2\x157D\x157E\x3\x2\x2\x2\x157E\x157F"+
		"\x3\x2\x2\x2\x157F\x1587\a\x4A2\x2\x2\x1580\x1582\a\x4BC\x2\x2\x1581\x1580"+
		"\x3\x2\x2\x2\x1581\x1582\x3\x2\x2\x2\x1582\x1583\x3\x2\x2\x2\x1583\x1584"+
		"\a\x4A2\x2\x2\x1584\x1585\a\x3EB\x2\x2\x1585\x1587\a\x4A2\x2\x2\x1586"+
		"\x157D\x3\x2\x2\x2\x1586\x1581\x3\x2\x2\x2\x1587\x1588\x3\x2\x2\x2\x1588"+
		"\x1586\x3\x2\x2\x2\x1588\x1589\x3\x2\x2\x2\x1589\x158B\x3\x2\x2\x2\x158A"+
		"\x157B\x3\x2\x2\x2\x158A\x1586\x3\x2\x2\x2\x158B\x159D\x3\x2\x2\x2\x158C"+
		"\x158D\a\x283\x2\x2\x158D\x1598\a\x4A8\x2\x2\x158E\x1590\a\x4BC\x2\x2"+
		"\x158F\x158E\x3\x2\x2\x2\x158F\x1590\x3\x2\x2\x2\x1590\x1591\x3\x2\x2"+
		"\x2\x1591\x1599\a\x4A2\x2\x2\x1592\x1594\a\x4BC\x2\x2\x1593\x1592\x3\x2"+
		"\x2\x2\x1593\x1594\x3\x2\x2\x2\x1594\x1595\x3\x2\x2\x2\x1595\x1596\a\x4A2"+
		"\x2\x2\x1596\x1597\a\x3EB\x2\x2\x1597\x1599\a\x4A2\x2\x2\x1598\x158F\x3"+
		"\x2\x2\x2\x1598\x1593\x3\x2\x2\x2\x1599\x159A\x3\x2\x2\x2\x159A\x1598"+
		"\x3\x2\x2\x2\x159A\x159B\x3\x2\x2\x2\x159B\x159D\x3\x2\x2\x2\x159C\x1579"+
		"\x3\x2\x2\x2\x159C\x158C\x3\x2\x2\x2\x159D\x15E1\x3\x2\x2\x2\x159E\x159F"+
		"\a\x10D\x2\x2\x159F\x15AF\a\x214\x2\x2\x15A0\x15B0\a\x294\x2\x2\x15A1"+
		"\x15B0\a\x28E\x2\x2\x15A2\x15A3\a\x2BF\x2\x2\x15A3\x15A4\a\x4A8\x2\x2"+
		"\x15A4\x15B0\t\x38\x2\x2\x15A5\x15A6\a\x236\x2\x2\x15A6\x15AA\a\x4A8\x2"+
		"\x2\x15A7\x15A8\a\x4A2\x2\x2\x15A8\x15AB\a\x238\x2\x2\x15A9\x15AB\a\xF9"+
		"\x2\x2\x15AA\x15A7\x3\x2\x2\x2\x15AA\x15A9\x3\x2\x2\x2\x15AB\x15B0\x3"+
		"\x2\x2\x2\x15AC\x15AD\a\x22D\x2\x2\x15AD\x15AE\a\x4A8\x2\x2\x15AE\x15B0"+
		"\t\x39\x2\x2\x15AF\x15A0\x3\x2\x2\x2\x15AF\x15A1\x3\x2\x2\x2\x15AF\x15A2"+
		"\x3\x2\x2\x2\x15AF\x15A5\x3\x2\x2\x2\x15AF\x15AC\x3\x2\x2\x2\x15B0\x15E1"+
		"\x3\x2\x2\x2\x15B1\x15B2\a\x152\x2\x2\x15B2\x15B3\a\x98\x2\x2\x15B3\x15C5"+
		"\a\x2E8\x2\x2\x15B4\x15B5\a\x429\x2\x2\x15B5\x15B6\a\x4A8\x2\x2\x15B6"+
		"\x15C6\t\x38\x2\x2\x15B7\x15B8\a\x3A8\x2\x2\x15B8\x15B9\a\x4A8\x2\x2\x15B9"+
		"\x15C6\t\x38\x2\x2\x15BA\x15BB\a\x3A9\x2\x2\x15BB\x15BC\a\x4A8\x2\x2\x15BC"+
		"\x15C6\t\x38\x2\x2\x15BD\x15BE\a\x3AA\x2\x2\x15BE\x15C6\t\x38\x2\x2\x15BF"+
		"\x15C0\a\x155\x2\x2\x15C0\x15C1\a\x4A8\x2\x2\x15C1\x15C6\t\x38\x2\x2\x15C2"+
		"\x15C3\a\x1A4\x2\x2\x15C3\x15C4\a\x4A8\x2\x2\x15C4\x15C6\t\x39\x2\x2\x15C5"+
		"\x15B4\x3\x2\x2\x2\x15C5\x15B7\x3\x2\x2\x2\x15C5\x15BA\x3\x2\x2\x2\x15C5"+
		"\x15BD\x3\x2\x2\x2\x15C5\x15BF\x3\x2\x2\x2\x15C5\x15C2\x3\x2\x2\x2\x15C6"+
		"\x15E1\x3\x2\x2\x2\x15C7\x15C8\a\x19E\x2\x2\x15C8\x15C9\a\x98\x2\x2\x15C9"+
		"\x15CA\a\xBA\x2\x2\x15CA\x15CB\a\x4A8\x2\x2\x15CB\x15E1\t:\x2\x2\x15CC"+
		"\x15CD\al\x2\x2\x15CD\x15CE\a\x2D4\x2\x2\x15CE\x15DB\a\x14F\x2\x2\x15CF"+
		"\x15D0\a\x294\x2\x2\x15D0\x15D1\a\x4BA\x2\x2\x15D1\x15D2\a\x162\x2\x2"+
		"\x15D2\x15D3\a\x4A8\x2\x2\x15D3\x15D4\a\x4A4\x2\x2\x15D4\x15D5\a\x4BC"+
		"\x2\x2\x15D5\x15D6\a\x398\x2\x2\x15D6\x15D7\a\x4A8\x2\x2\x15D7\x15D8\a"+
		"\x4A2\x2\x2\x15D8\x15D9\t;\x2\x2\x15D9\x15DC\a\x4BB\x2\x2\x15DA\x15DC"+
		"\a\x28E\x2\x2\x15DB\x15CF\x3\x2\x2\x2\x15DB\x15DA\x3\x2\x2\x2\x15DC\x15E1"+
		"\x3\x2\x2\x2\x15DD\x15DE\a\x386\x2\x2\x15DE\x15DF\a\x39D\x2\x2\x15DF\x15E1"+
		"\t\x13\x2\x2\x15E0\x1577\x3\x2\x2\x2\x15E0\x159E\x3\x2\x2\x2\x15E0\x15B1"+
		"\x3\x2\x2\x2\x15E0\x15C7\x3\x2\x2\x2\x15E0\x15CC\x3\x2\x2\x2\x15E0\x15DD"+
		"\x3\x2\x2\x2\x15E1\x19D\x3\x2\x2\x2\x15E2\x15E3\a%\x2\x2\x15E3\x15E4\a"+
		"\x37A\x2\x2\x15E4\x15E5\a\x341\x2\x2\x15E5\x15ED\x5\x4C2\x262\x2\x15E6"+
		"\x15E7\t\x19\x2\x2\x15E7\x15E8\a\x23C\x2\x2\x15E8\x15EE\x5\x4C2\x262\x2"+
		"\x15E9\x15EA\a\x439\x2\x2\x15EA\x15EB\a\x253\x2\x2\x15EB\x15EC\a\x4A8"+
		"\x2\x2\x15EC\x15EE\x5\x4C2\x262\x2\x15ED\x15E6\x3\x2\x2\x2\x15ED\x15E9"+
		"\x3\x2\x2\x2\x15EE\x19F\x3\x2\x2\x2\x15EF\x15F0\a\xC9\x2\x2\x15F0\x15F1"+
		"\a\x37A\x2\x2\x15F1\x15F2\a\x341\x2\x2\x15F2\x15F5\x5\x4C2\x262\x2\x15F3"+
		"\x15F4\a\x46\x2\x2\x15F4\x15F6\x5\x4C2\x262\x2\x15F5\x15F3\x3\x2\x2\x2"+
		"\x15F5\x15F6\x3\x2\x2\x2\x15F6\x1A1\x3\x2\x2\x2\x15F7\x15F8\a%\x2\x2\x15F8"+
		"\x15F9\a\x37A\x2\x2\x15F9\x15FA\a\x341\x2\x2\x15FA\x15FB\x5\x4C2\x262"+
		"\x2\x15FB\x15FC\t\x19\x2\x2\x15FC\x15FD\a\x23C\x2\x2\x15FD\x15FE\x5\x4C2"+
		"\x262\x2\x15FE\x1A3\x3\x2\x2\x2\x15FF\x1600\a%\x2\x2\x1600\x1601\a\x37C"+
		"\x2\x2\x1601\x160A\x5\x4C2\x262\x2\x1602\x1603\a\x294\x2\x2\x1603\x1607"+
		"\a\x2F3\x2\x2\x1604\x1605\x5\x4C2\x262\x2\x1605\x1606\a\x4B5\x2\x2\x1606"+
		"\x1608\x3\x2\x2\x2\x1607\x1604\x3\x2\x2\x2\x1607\x1608\x3\x2\x2\x2\x1608"+
		"\x1609\x3\x2\x2\x2\x1609\x160B\x5\x4C2\x262\x2\x160A\x1602\x3\x2\x2\x2"+
		"\x160A\x160B\x3\x2\x2\x2\x160B\x1617\x3\x2\x2\x2\x160C\x160D\a\x4BA\x2"+
		"\x2\x160D\x1612\x5\x1A6\xD4\x2\x160E\x160F\a\x4BC\x2\x2\x160F\x1611\x5"+
		"\x1A6\xD4\x2\x1610\x160E\x3\x2\x2\x2\x1611\x1614\x3\x2\x2\x2\x1612\x1610"+
		"\x3\x2\x2\x2\x1612\x1613\x3\x2\x2\x2\x1613\x1615\x3\x2\x2\x2\x1614\x1612"+
		"\x3\x2\x2\x2\x1615\x1616\a\x4BB\x2\x2\x1616\x1618\x3\x2\x2\x2\x1617\x160C"+
		"\x3\x2\x2\x2\x1617\x1618\x3\x2\x2\x2\x1618\x1A5\x3\x2\x2\x2\x1619\x161A"+
		"\t\x19\x2\x2\x161A\x161B\a\xBE\x2\x2\x161B\x161C\x5\x4C2\x262\x2\x161C"+
		"\x1A7\x3\x2\x2\x2\x161D\x161E\a\xC9\x2\x2\x161E\x161F\a\x37C\x2\x2\x161F"+
		"\x1622\x5\x4C2\x262\x2\x1620\x1621\a\x46\x2\x2\x1621\x1623\x5\x4C2\x262"+
		"\x2\x1622\x1620\x3\x2\x2\x2\x1622\x1623\x3\x2\x2\x2\x1623\x1624\x3\x2"+
		"\x2\x2\x1624\x1625\a\x294\x2\x2\x1625\x1629\a\x2F3\x2\x2\x1626\x1627\x5"+
		"\x4C2\x262\x2\x1627\x1628\a\x4B5\x2\x2\x1628\x162A\x3\x2\x2\x2\x1629\x1626"+
		"\x3\x2\x2\x2\x1629\x162A\x3\x2\x2\x2\x162A\x162B\x3\x2\x2\x2\x162B\x1639"+
		"\x5\x4C2\x262\x2\x162C\x1634\a\x4BA\x2\x2\x162D\x162F\a\x4BC\x2\x2\x162E"+
		"\x162D\x3\x2\x2\x2\x162E\x162F\x3\x2\x2\x2\x162F\x1632\x3\x2\x2\x2\x1630"+
		"\x1633\x5\x4C2\x262\x2\x1631\x1633\a\xF9\x2\x2\x1632\x1630\x3\x2\x2\x2"+
		"\x1632\x1631\x3\x2\x2\x2\x1633\x1635\x3\x2\x2\x2\x1634\x162E\x3\x2\x2"+
		"\x2\x1635\x1636\x3\x2\x2\x2\x1636\x1634\x3\x2\x2\x2\x1636\x1637\x3\x2"+
		"\x2\x2\x1637\x1638\x3\x2\x2\x2\x1638\x163A\a\x4BB\x2\x2\x1639\x162C\x3"+
		"\x2\x2\x2\x1639\x163A\x3\x2\x2\x2\x163A\x1A9\x3\x2\x2\x2\x163B\x163C\a"+
		"%\x2\x2\x163C\x163D\a\x37C\x2\x2\x163D\x163E\a\x21F\x2\x2\x163E\x1654"+
		"\a\x1F1\x2\x2\x163F\x1641\a\x173\x2\x2\x1640\x163F\x3\x2\x2\x2\x1640\x1641"+
		"\x3\x2\x2\x2\x1641\x1642\x3\x2\x2\x2\x1642\x1655\a\x314\x2\x2\x1643\x1652"+
		"\a\x439\x2\x2\x1644\x1645\a\x292\x2\x2\x1645\x1646\a\x4A8\x2\x2\x1646"+
		"\x1647\a\x4A4\x2\x2\x1647\x1648\a\x4BC\x2\x2\x1648\x1649\a\x293\x2\x2"+
		"\x1649\x164A\a\x4A8\x2\x2\x164A\x1653\a\x4A4\x2\x2\x164B\x164C\a\x25B"+
		"\x2\x2\x164C\x164D\a\x4A8\x2\x2\x164D\x164E\a\x4A4\x2\x2\x164E\x164F\a"+
		"\x4BC\x2\x2\x164F\x1650\a\x25D\x2\x2\x1650\x1651\a\x4A8\x2\x2\x1651\x1653"+
		"\a\x4A4\x2\x2\x1652\x1644\x3\x2\x2\x2\x1652\x164B\x3\x2\x2\x2\x1652\x1653"+
		"\x3\x2\x2\x2\x1653\x1655\x3\x2\x2\x2\x1654\x1640\x3\x2\x2\x2\x1654\x1643"+
		"\x3\x2\x2\x2\x1655\x1AB\x3\x2\x2\x2\x1656\x1657\a%\x2\x2\x1657\x1658\a"+
		"\x3D2\x2\x2\x1658\x1659\a\x1F1\x2\x2\x1659\x165A\x5\x4C2\x262\x2\x165A"+
		"\x165B\t\x19\x2\x2\x165B\x165C\a\x12E\x2\x2\x165C\x1668\ap\x2\x2\x165D"+
		"\x165E\a|\x2\x2\x165E\x1669\x5\x4C2\x262\x2\x165F\x1660\a\x2BE\x2\x2\x1660"+
		"\x1661\a\x4A8\x2\x2\x1661\x1669\a\x4A4\x2\x2\x1662\x1663\a\x3D2\x2\x2"+
		"\x1663\x1664\a\x1F1\x2\x2\x1664\x1669\x5\x4C2\x262\x2\x1665\x1666\a?\x2"+
		"\x2\x1666\x1667\a\x1F1\x2\x2\x1667\x1669\x5\x4C2\x262\x2\x1668\x165D\x3"+
		"\x2\x2\x2\x1668\x165F\x3\x2\x2\x2\x1668\x1662\x3\x2\x2\x2\x1668\x1665"+
		"\x3\x2\x2\x2\x1669\x1AD\x3\x2\x2\x2\x166A\x166B\a\xC9\x2\x2\x166B\x166F"+
		"\a\x3D4\x2\x2\x166C\x166D\x5\x4C2\x262\x2\x166D\x166E\a\x4B5\x2\x2\x166E"+
		"\x1670\x3\x2\x2\x2\x166F\x166C\x3\x2\x2\x2\x166F\x1670\x3\x2\x2\x2\x1670"+
		"\x1671\x3\x2\x2\x2\x1671\x1672\x5\x4C2\x262\x2\x1672\x168D\a\x172\x2\x2"+
		"\x1673\x1674\x5\x4C2\x262\x2\x1674\x1675\a\x4B5\x2\x2\x1675\x1677\x3\x2"+
		"\x2\x2\x1676\x1673\x3\x2\x2\x2\x1676\x1677\x3\x2\x2\x2\x1677\x167B\x3"+
		"\x2\x2\x2\x1678\x1679\x5\x4C2\x262\x2\x1679\x167A\a\x4B5\x2\x2\x167A\x167C"+
		"\x3\x2\x2\x2\x167B\x1678\x3\x2\x2\x2\x167B\x167C\x3\x2\x2\x2\x167C\x1680"+
		"\x3\x2\x2\x2\x167D\x167E\x5\x4C2\x262\x2\x167E\x167F\a\x4B5\x2\x2\x167F"+
		"\x1681\x3\x2\x2\x2\x1680\x167D\x3\x2\x2\x2\x1680\x1681\x3\x2\x2\x2\x1681"+
		"\x1682\x3\x2\x2\x2\x1682\x168E\x5\x4C2\x262\x2\x1683\x1684\x5\x4C2\x262"+
		"\x2\x1684\x1685\a\x4B5\x2\x2\x1685\x1687\x3\x2\x2\x2\x1686\x1683\x3\x2"+
		"\x2\x2\x1686\x1687\x3\x2\x2\x2\x1687\x168B\x3\x2\x2\x2\x1688\x1689\x5"+
		"\x4C2\x262\x2\x1689\x168A\a\x4B5\x2\x2\x168A\x168C\x3\x2\x2\x2\x168B\x1688"+
		"\x3\x2\x2\x2\x168B\x168C\x3\x2\x2\x2\x168C\x168E\x3\x2\x2\x2\x168D\x1676"+
		"\x3\x2\x2\x2\x168D\x1686\x3\x2\x2\x2\x168E\x1AF\x3\x2\x2\x2\x168F\x1690"+
		"\a%\x2\x2\x1690\x1691\a\x41C\x2\x2\x1691\x1692\x5\x4C2\x262\x2\x1692\x16C5"+
		"\a\x439\x2\x2\x1693\x1695\a\x4BC\x2\x2\x1694\x1693\x3\x2\x2\x2\x1694\x1695"+
		"\x3\x2\x2\x2\x1695\x1696\x3\x2\x2\x2\x1696\x1697\a\x253\x2\x2\x1697\x1698"+
		"\a\x4A8\x2\x2\x1698\x16C6\x5\x4C2\x262\x2\x1699\x169B\a\x4BC\x2\x2\x169A"+
		"\x1699\x3\x2\x2\x2\x169A\x169B\x3\x2\x2\x2\x169B\x169C\x3\x2\x2\x2\x169C"+
		"\x169D\a\xFE\x2\x2\x169D\x16A0\a\x4A8\x2\x2\x169E\x16A1\x5\x4C2\x262\x2"+
		"\x169F\x16A1\a\x281\x2\x2\x16A0\x169E\x3\x2\x2\x2\x16A0\x169F\x3\x2\x2"+
		"\x2\x16A1\x16C6\x3\x2\x2\x2\x16A2\x16A4\a\x4BC\x2\x2\x16A3\x16A2\x3\x2"+
		"\x2\x2\x16A3\x16A4\x3\x2\x2\x2\x16A4\x16A5\x3\x2\x2\x2\x16A5\x16A6\a\x215"+
		"\x2\x2\x16A6\x16A7\a\x4A8\x2\x2\x16A7\x16C6\x5\x4C2\x262\x2\x16A8\x16AA"+
		"\a\x4BC\x2\x2\x16A9\x16A8\x3\x2\x2\x2\x16A9\x16AA\x3\x2\x2\x2\x16AA\x16AB"+
		"\x3\x2\x2\x2\x16AB\x16AC\a\x2BE\x2\x2\x16AC\x16AD\a\x4A8\x2\x2\x16AD\x16B1"+
		"\a\x4A4\x2\x2\x16AE\x16AF\a\x293\x2\x2\x16AF\x16B0\a\x4A8\x2\x2\x16B0"+
		"\x16B2\a\x4A4\x2\x2\x16B1\x16AE\x3\x2\x2\x2\x16B2\x16B3\x3\x2\x2\x2\x16B3"+
		"\x16B1\x3\x2\x2\x2\x16B3\x16B4\x3\x2\x2\x2\x16B4\x16C6\x3\x2\x2\x2\x16B5"+
		"\x16B7\a\x4BC\x2\x2\x16B6\x16B5\x3\x2\x2\x2\x16B6\x16B7\x3\x2\x2\x2\x16B7"+
		"\x16B8\x3\x2\x2\x2\x16B8\x16B9\a\xFD\x2\x2\x16B9\x16BD\a\x4A8\x2\x2\x16BA"+
		"\x16BE\a\x26B\x2\x2\x16BB\x16BE\a\x4A2\x2\x2\x16BC\x16BE\x5\x4C2\x262"+
		"\x2\x16BD\x16BA\x3\x2\x2\x2\x16BD\x16BB\x3\x2\x2\x2\x16BD\x16BC\x3\x2"+
		"\x2\x2\x16BE\x16C6\x3\x2\x2\x2\x16BF\x16C1\a\x4BC\x2\x2\x16C0\x16BF\x3"+
		"\x2\x2\x2\x16C0\x16C1\x3\x2\x2\x2\x16C1\x16C2\x3\x2\x2\x2\x16C2\x16C3"+
		"\a\x1B\x2\x2\x16C3\x16C4\a\x4A8\x2\x2\x16C4\x16C6\t\x13\x2\x2\x16C5\x1694"+
		"\x3\x2\x2\x2\x16C5\x169A\x3\x2\x2\x2\x16C5\x16A3\x3\x2\x2\x2\x16C5\x16A9"+
		"\x3\x2\x2\x2\x16C5\x16B6\x3\x2\x2\x2\x16C5\x16C0\x3\x2\x2\x2\x16C6\x16C7"+
		"\x3\x2\x2\x2\x16C7\x16C5\x3\x2\x2\x2\x16C7\x16C8\x3\x2\x2\x2\x16C8\x1B1"+
		"\x3\x2\x2\x2\x16C9\x16CA\a\xC9\x2\x2\x16CA\x16CB\a\x41C\x2\x2\x16CB\x16CF"+
		"\x5\x4C2\x262\x2\x16CC\x16CD\t<\x2\x2\x16CD\x16CE\a\x215\x2\x2\x16CE\x16D0"+
		"\x5\x4C2\x262\x2\x16CF\x16CC\x3\x2\x2\x2\x16CF\x16D0\x3\x2\x2\x2\x16D0"+
		"\x16E3\x3\x2\x2\x2\x16D1\x16E0\a\x439\x2\x2\x16D2\x16D4\a\x4BC\x2\x2\x16D3"+
		"\x16D2\x3\x2\x2\x2\x16D3\x16D4\x3\x2\x2\x2\x16D4\x16D5\x3\x2\x2\x2\x16D5"+
		"\x16D6\a\xFE\x2\x2\x16D6\x16D7\a\x4A8\x2\x2\x16D7\x16DF\x5\x4C2\x262\x2"+
		"\x16D8\x16DA\a\x4BC\x2\x2\x16D9\x16D8\x3\x2\x2\x2\x16D9\x16DA\x3\x2\x2"+
		"\x2\x16DA\x16DB\x3\x2\x2\x2\x16DB\x16DC\a\x1B\x2\x2\x16DC\x16DD\a\x4A8"+
		"\x2\x2\x16DD\x16DF\t\x13\x2\x2\x16DE\x16D3\x3\x2\x2\x2\x16DE\x16D9\x3"+
		"\x2\x2\x2\x16DF\x16E2\x3\x2\x2\x2\x16E0\x16DE\x3\x2\x2\x2\x16E0\x16E1"+
		"\x3\x2\x2\x2\x16E1\x16E4\x3\x2\x2\x2\x16E2\x16E0\x3\x2\x2\x2\x16E3\x16D1"+
		"\x3\x2\x2\x2\x16E3\x16E4\x3\x2\x2\x2\x16E4\x175C\x3\x2\x2\x2\x16E5\x16E6"+
		"\a\xC9\x2\x2\x16E6\x1737\a\x41C\x2\x2\x16E7\x170A\x5\x4C2\x262\x2\x16E8"+
		"\x1707\a\x439\x2\x2\x16E9\x16EB\a\x4BC\x2\x2\x16EA\x16E9\x3\x2\x2\x2\x16EA"+
		"\x16EB\x3\x2\x2\x2\x16EB\x16EC\x3\x2\x2\x2\x16EC\x16ED\a\xFE\x2\x2\x16ED"+
		"\x16EE\a\x4A8\x2\x2\x16EE\x1706\x5\x4C2\x262\x2\x16EF\x16F1\a\x4BC\x2"+
		"\x2\x16F0\x16EF\x3\x2\x2\x2\x16F0\x16F1\x3\x2\x2\x2\x16F1\x16F2\x3\x2"+
		"\x2\x2\x16F2\x16F3\a\xFD\x2\x2\x16F3\x16F7\a\x4A8\x2\x2\x16F4\x16F8\a"+
		"\x26B\x2\x2\x16F5\x16F8\a\x4A2\x2\x2\x16F6\x16F8\x5\x4C2\x262\x2\x16F7"+
		"\x16F4\x3\x2\x2\x2\x16F7\x16F5\x3\x2\x2\x2\x16F7\x16F6\x3\x2\x2\x2\x16F8"+
		"\x1706\x3\x2\x2\x2\x16F9\x16FB\a\x4BC\x2\x2\x16FA\x16F9\x3\x2\x2\x2\x16FA"+
		"\x16FB\x3\x2\x2\x2\x16FB\x16FC\x3\x2\x2\x2\x16FC\x16FD\a\x394\x2\x2\x16FD"+
		"\x16FE\a\x4A8\x2\x2\x16FE\x1706\a\x4A5\x2\x2\x16FF\x1701\a\x4BC\x2\x2"+
		"\x1700\x16FF\x3\x2\x2\x2\x1700\x1701\x3\x2\x2\x2\x1701\x1702\x3\x2\x2"+
		"\x2\x1702\x1703\a\x1B\x2\x2\x1703\x1704\a\x4A8\x2\x2\x1704\x1706\t\x13"+
		"\x2\x2\x1705\x16EA\x3\x2\x2\x2\x1705\x16F0\x3\x2\x2\x2\x1705\x16FA\x3"+
		"\x2\x2\x2\x1705\x1700\x3\x2\x2\x2\x1706\x1709\x3\x2\x2\x2\x1707\x1705"+
		"\x3\x2\x2\x2\x1707\x1708\x3\x2\x2\x2\x1708\x170B\x3\x2\x2\x2\x1709\x1707"+
		"\x3\x2\x2\x2\x170A\x16E8\x3\x2\x2\x2\x170A\x170B\x3\x2\x2\x2\x170B\x1738"+
		"\x3\x2\x2\x2\x170C\x170D\x5\x4C2\x262\x2\x170D\x170E\a\x439\x2\x2\x170E"+
		"\x170F\a\x2BE\x2\x2\x170F\x1710\a\x4A8\x2\x2\x1710\x172F\a\x4A4\x2\x2"+
		"\x1711\x1713\a\x4BC\x2\x2\x1712\x1711\x3\x2\x2\x2\x1712\x1713\x3\x2\x2"+
		"\x2\x1713\x1714\x3\x2\x2\x2\x1714\x1715\a\xFE\x2\x2\x1715\x1716\a\x4A8"+
		"\x2\x2\x1716\x172E\x5\x4C2\x262\x2\x1717\x1719\a\x4BC\x2\x2\x1718\x1717"+
		"\x3\x2\x2\x2\x1718\x1719\x3\x2\x2\x2\x1719\x171A\x3\x2\x2\x2\x171A\x171B"+
		"\a\xFD\x2\x2\x171B\x171F\a\x4A8\x2\x2\x171C\x1720\a\x26B\x2\x2\x171D\x1720"+
		"\a\x4A2\x2\x2\x171E\x1720\x5\x4C2\x262\x2\x171F\x171C\x3\x2\x2\x2\x171F"+
		"\x171D\x3\x2\x2\x2\x171F\x171E\x3\x2\x2\x2\x1720\x172E\x3\x2\x2\x2\x1721"+
		"\x1723\a\x4BC\x2\x2\x1722\x1721\x3\x2\x2\x2\x1722\x1723\x3\x2\x2\x2\x1723"+
		"\x1724\x3\x2\x2\x2\x1724\x1725\a\x394\x2\x2\x1725\x1726\a\x4A8\x2\x2\x1726"+
		"\x172E\a\x4A5\x2\x2\x1727\x1729\a\x4BC\x2\x2\x1728\x1727\x3\x2\x2\x2\x1728"+
		"\x1729\x3\x2\x2\x2\x1729\x172A\x3\x2\x2\x2\x172A\x172B\a\x1B\x2\x2\x172B"+
		"\x172C\a\x4A8\x2\x2\x172C\x172E\t\x13\x2\x2\x172D\x1712\x3\x2\x2\x2\x172D"+
		"\x1718\x3\x2\x2\x2\x172D\x1722\x3\x2\x2\x2\x172D\x1728\x3\x2\x2\x2\x172E"+
		"\x1731\x3\x2\x2\x2\x172F\x172D\x3\x2\x2\x2\x172F\x1730\x3\x2\x2\x2\x1730"+
		"\x1738\x3\x2\x2\x2\x1731\x172F\x3\x2\x2\x2\x1732\x1733\x5\x4C2\x262\x2"+
		"\x1733\x1734\a\x181\x2\x2\x1734\x1735\a\x150\x2\x2\x1735\x1736\a\x2E9"+
		"\x2\x2\x1736\x1738\x3\x2\x2\x2\x1737\x16E7\x3\x2\x2\x2\x1737\x170C\x3"+
		"\x2\x2\x2\x1737\x1732\x3\x2\x2\x2\x1738\x175C\x3\x2\x2\x2\x1739\x173A"+
		"\a\xC9\x2\x2\x173A\x173B\a\x41C\x2\x2\x173B\x1756\x5\x4C2\x262\x2\x173C"+
		"\x173D\a\x43B\x2\x2\x173D\x174C\a\x215\x2\x2\x173E\x1740\a\x4BC\x2\x2"+
		"\x173F\x173E\x3\x2\x2\x2\x173F\x1740\x3\x2\x2\x2\x1740\x1741\x3\x2\x2"+
		"\x2\x1741\x1742\a\xFE\x2\x2\x1742\x1743\a\x4A8\x2\x2\x1743\x174B\x5\x4C2"+
		"\x262\x2\x1744\x1746\a\x4BC\x2\x2\x1745\x1744\x3\x2\x2\x2\x1745\x1746"+
		"\x3\x2\x2\x2\x1746\x1747\x3\x2\x2\x2\x1747\x1748\a\x1B\x2\x2\x1748\x1749"+
		"\a\x4A8\x2\x2\x1749\x174B\t\x13\x2\x2\x174A\x173F\x3\x2\x2\x2\x174A\x1745"+
		"\x3\x2\x2\x2\x174B\x174E\x3\x2\x2\x2\x174C\x174A\x3\x2\x2\x2\x174C\x174D"+
		"\x3\x2\x2\x2\x174D\x1757\x3\x2\x2\x2\x174E\x174C\x3\x2\x2\x2\x174F\x1750"+
		"\t<\x2\x2\x1750\x1751\a|\x2\x2\x1751\x1757\x5\x4C2\x262\x2\x1752\x1753"+
		"\t<\x2\x2\x1753\x1754\a?\x2\x2\x1754\x1755\a\x1F1\x2\x2\x1755\x1757\x5"+
		"\x4C2\x262\x2\x1756\x173C\x3\x2\x2\x2\x1756\x174F\x3\x2\x2\x2\x1756\x1752"+
		"\x3\x2\x2\x2\x1757\x175C\x3\x2\x2\x2\x1758\x1759\a\xC9\x2\x2\x1759\x175A"+
		"\a\x41C\x2\x2\x175A\x175C\x5\x4C2\x262\x2\x175B\x16C9\x3\x2\x2\x2\x175B"+
		"\x16E5\x3\x2\x2\x2\x175B\x1739\x3\x2\x2\x2\x175B\x1758\x3\x2\x2\x2\x175C"+
		"\x1B3\x3\x2\x2\x2\x175D\x175E\a\xC9\x2\x2\x175E\x175F\a\x41C\x2\x2\x175F"+
		"\x1765\x5\x4C2\x262\x2\x1760\x1761\t<\x2\x2\x1761\x1762\a\x215\x2\x2\x1762"+
		"\x1766\x5\x4C2\x262\x2\x1763\x1764\a\x43B\x2\x2\x1764\x1766\a\x215\x2"+
		"\x2\x1765\x1760\x3\x2\x2\x2\x1765\x1763\x3\x2\x2\x2\x1765\x1766\x3\x2"+
		"\x2\x2\x1766\x176B\x3\x2\x2\x2\x1767\x1768\a\x439\x2\x2\x1768\x1769\a"+
		"\xFE\x2\x2\x1769\x176A\a\x4A8\x2\x2\x176A\x176C\x5\x4C2\x262\x2\x176B"+
		"\x1767\x3\x2\x2\x2\x176B\x176C\x3\x2\x2\x2\x176C\x177A\x3\x2\x2\x2\x176D"+
		"\x176E\a\xC9\x2\x2\x176E\x176F\a\x41C\x2\x2\x176F\x1770\x5\x4C2\x262\x2"+
		"\x1770\x1771\a\x181\x2\x2\x1771\x1772\a\x150\x2\x2\x1772\x1777\a\x2E9"+
		"\x2\x2\x1773\x1774\a\x439\x2\x2\x1774\x1775\a\xFE\x2\x2\x1775\x1776\a"+
		"\x4A8\x2\x2\x1776\x1778\x5\x4C2\x262\x2\x1777\x1773\x3\x2\x2\x2\x1777"+
		"\x1778\x3\x2\x2\x2\x1778\x177A\x3\x2\x2\x2\x1779\x175D\x3\x2\x2\x2\x1779"+
		"\x176D\x3\x2\x2\x2\x177A\x1B5\x3\x2\x2\x2\x177B\x177C\a%\x2\x2\x177C\x177D"+
		"\a\x41C\x2\x2\x177D\x177E\x5\x4C2\x262\x2\x177E\x1797\a\x439\x2\x2\x177F"+
		"\x1781\a\x4BC\x2\x2\x1780\x177F\x3\x2\x2\x2\x1780\x1781\x3\x2\x2\x2\x1781"+
		"\x1782\x3\x2\x2\x2\x1782\x1783\a\x253\x2\x2\x1783\x1784\a\x4A8\x2\x2\x1784"+
		"\x1798\x5\x4C2\x262\x2\x1785\x1787\a\x4BC\x2\x2\x1786\x1785\x3\x2\x2\x2"+
		"\x1786\x1787\x3\x2\x2\x2\x1787\x1788\x3\x2\x2\x2\x1788\x1789\a\xFE\x2"+
		"\x2\x1789\x178A\a\x4A8\x2\x2\x178A\x1798\x5\x4C2\x262\x2\x178B\x178D\a"+
		"\x4BC\x2\x2\x178C\x178B\x3\x2\x2\x2\x178C\x178D\x3\x2\x2\x2\x178D\x178E"+
		"\x3\x2\x2\x2\x178E\x178F\a\x215\x2\x2\x178F\x1790\a\x4A8\x2\x2\x1790\x1798"+
		"\x5\x4C2\x262\x2\x1791\x1793\a\x4BC\x2\x2\x1792\x1791\x3\x2\x2\x2\x1792"+
		"\x1793\x3\x2\x2\x2\x1793\x1794\x3\x2\x2\x2\x1794\x1795\a\x1B\x2\x2\x1795"+
		"\x1796\a\x4A8\x2\x2\x1796\x1798\t\x13\x2\x2\x1797\x1780\x3\x2\x2\x2\x1797"+
		"\x1786\x3\x2\x2\x2\x1797\x178C\x3\x2\x2\x2\x1797\x1792\x3\x2\x2\x2\x1798"+
		"\x1799\x3\x2\x2\x2\x1799\x1797\x3\x2\x2\x2\x1799\x179A\x3\x2\x2\x2\x179A"+
		"\x1B7\x3\x2\x2\x2\x179B\x179C\a%\x2\x2\x179C\x179D\a\x43F\x2\x2\x179D"+
		"\x17A0\a\x19A\x2\x2\x179E\x17A1\x5\x4C2\x262\x2\x179F\x17A1\a\xFB\x2\x2"+
		"\x17A0\x179E\x3\x2\x2\x2\x17A0\x179F\x3\x2\x2\x2\x17A1\x17C1\x3\x2\x2"+
		"\x2\x17A2\x17A3\a\x439\x2\x2\x17A3\x17BC\a\x4BA\x2\x2\x17A4\x17A5\a\x1C0"+
		"\x2\x2\x17A5\x17A6\a\x4A8\x2\x2\x17A6\x17BD\t=\x2\x2\x17A7\x17A9\a\x4BC"+
		"\x2\x2\x17A8\x17A7\x3\x2\x2\x2\x17A8\x17A9\x3\x2\x2\x2\x17A9\x17AA\x3"+
		"\x2\x2\x2\x17AA\x17AB\a\x327\x2\x2\x17AB\x17AC\a\x4A8\x2\x2\x17AC\x17BD"+
		"\a\x4A2\x2\x2\x17AD\x17AF\a\x4BC\x2\x2\x17AE\x17AD\x3\x2\x2\x2\x17AE\x17AF"+
		"\x3\x2\x2\x2\x17AF\x17B0\x3\x2\x2\x2\x17B0\x17B1\a\x326\x2\x2\x17B1\x17B2"+
		"\a\x4A8\x2\x2\x17B2\x17BD\a\x4A2\x2\x2\x17B3\x17B4\a\x328\x2\x2\x17B4"+
		"\x17B5\a\x4A8\x2\x2\x17B5\x17BD\a\x4A2\x2\x2\x17B6\x17B7\a\x22A\x2\x2"+
		"\x17B7\x17B8\a\x4A8\x2\x2\x17B8\x17BD\a\x4A2\x2\x2\x17B9\x17BA\a\x19D"+
		"\x2\x2\x17BA\x17BB\a\x4A8\x2\x2\x17BB\x17BD\a\x4A2\x2\x2\x17BC\x17A4\x3"+
		"\x2\x2\x2\x17BC\x17A8\x3\x2\x2\x2\x17BC\x17AE\x3\x2\x2\x2\x17BC\x17B3"+
		"\x3\x2\x2\x2\x17BC\x17B6\x3\x2\x2\x2\x17BC\x17B9\x3\x2\x2\x2\x17BD\x17BE"+
		"\x3\x2\x2\x2\x17BE\x17BC\x3\x2\x2\x2\x17BE\x17BF\x3\x2\x2\x2\x17BF\x17C0"+
		"\x3\x2\x2\x2\x17C0\x17C2\a\x4BB\x2\x2\x17C1\x17A2\x3\x2\x2\x2\x17C1\x17C2"+
		"\x3\x2\x2\x2\x17C2\x17C8\x3\x2\x2\x2\x17C3\x17C6\a\x41F\x2\x2\x17C4\x17C7"+
		"\x5\x4C2\x262\x2\x17C5\x17C7\a\xFB\x2\x2\x17C6\x17C4\x3\x2\x2\x2\x17C6"+
		"\x17C5\x3\x2\x2\x2\x17C7\x17C9\x3\x2\x2\x2\x17C8\x17C3\x3\x2\x2\x2\x17C8"+
		"\x17C9\x3\x2\x2\x2\x17C9\x1B9\x3\x2\x2\x2\x17CA\x17CB\a\xC9\x2\x2\x17CB"+
		"\x17CC\a\x43F\x2\x2\x17CC\x17CD\a\x19A\x2\x2\x17CD\x17ED\x5\x4C2\x262"+
		"\x2\x17CE\x17CF\a\x439\x2\x2\x17CF\x17E8\a\x4BA\x2\x2\x17D0\x17D1\a\x1C0"+
		"\x2\x2\x17D1\x17D2\a\x4A8\x2\x2\x17D2\x17E9\t=\x2\x2\x17D3\x17D5\a\x4BC"+
		"\x2\x2\x17D4\x17D3\x3\x2\x2\x2\x17D4\x17D5\x3\x2\x2\x2\x17D5\x17D6\x3"+
		"\x2\x2\x2\x17D6\x17D7\a\x327\x2\x2\x17D7\x17D8\a\x4A8\x2\x2\x17D8\x17E9"+
		"\a\x4A2\x2\x2\x17D9\x17DB\a\x4BC\x2\x2\x17DA\x17D9\x3\x2\x2\x2\x17DA\x17DB"+
		"\x3\x2\x2\x2\x17DB\x17DC\x3\x2\x2\x2\x17DC\x17DD\a\x326\x2\x2\x17DD\x17DE"+
		"\a\x4A8\x2\x2\x17DE\x17E9\a\x4A2\x2\x2\x17DF\x17E0\a\x328\x2\x2\x17E0"+
		"\x17E1\a\x4A8\x2\x2\x17E1\x17E9\a\x4A2\x2\x2\x17E2\x17E3\a\x22A\x2\x2"+
		"\x17E3\x17E4\a\x4A8\x2\x2\x17E4\x17E9\a\x4A2\x2\x2\x17E5\x17E6\a\x19D"+
		"\x2\x2\x17E6\x17E7\a\x4A8\x2\x2\x17E7\x17E9\a\x4A2\x2\x2\x17E8\x17D0\x3"+
		"\x2\x2\x2\x17E8\x17D4\x3\x2\x2\x2\x17E8\x17DA\x3\x2\x2\x2\x17E8\x17DF"+
		"\x3\x2\x2\x2\x17E8\x17E2\x3\x2\x2\x2\x17E8\x17E5\x3\x2\x2\x2\x17E9\x17EA"+
		"\x3\x2\x2\x2\x17EA\x17E8\x3\x2\x2\x2\x17EA\x17EB\x3\x2\x2\x2\x17EB\x17EC"+
		"\x3\x2\x2\x2\x17EC\x17EE\a\x4BB\x2\x2\x17ED\x17CE\x3\x2\x2\x2\x17ED\x17EE"+
		"\x3\x2\x2\x2\x17EE\x17FC\x3\x2\x2\x2\x17EF\x17F2\a\x41F\x2\x2\x17F0\x17F3"+
		"\x5\x4C2\x262\x2\x17F1\x17F3\a\xFB\x2\x2\x17F2\x17F0\x3\x2\x2\x2\x17F2"+
		"\x17F1\x3\x2\x2\x2\x17F2\x17F3\x3\x2\x2\x2\x17F3\x17FA\x3\x2\x2\x2\x17F4"+
		"\x17F6\a\x4BC\x2\x2\x17F5\x17F4\x3\x2\x2\x2\x17F5\x17F6\x3\x2\x2\x2\x17F6"+
		"\x17F7\x3\x2\x2\x2\x17F7\x17F8\a\x150\x2\x2\x17F8\x17FB\x5\x4C2\x262\x2"+
		"\x17F9\x17FB\a\xFB\x2\x2\x17FA\x17F5\x3\x2\x2\x2\x17FA\x17F9\x3\x2\x2"+
		"\x2\x17FA\x17FB\x3\x2\x2\x2\x17FB\x17FD\x3\x2\x2\x2\x17FC\x17EF\x3\x2"+
		"\x2\x2\x17FC\x17FD\x3\x2\x2\x2\x17FD\x1BB\x3\x2\x2\x2\x17FE\x17FF\a\xC9"+
		"\x2\x2\x17FF\x1800\a\x444\x2\x2\x1800\x1801\a\x35A\x2\x2\x1801\x1805\a"+
		"\x9C\x2\x2\x1802\x1803\x5\x4C2\x262\x2\x1803\x1804\a\x4B5\x2\x2\x1804"+
		"\x1806\x3\x2\x2\x2\x1805\x1802\x3\x2\x2\x2\x1805\x1806\x3\x2\x2\x2\x1806"+
		"\x1807\x3\x2\x2\x2\x1807\x1808\x5\x4C2\x262\x2\x1808\x180C\a:\x2\x2\x1809"+
		"\x180D\a\x4A4\x2\x2\x180A\x180D\x5\x4C2\x262\x2\x180B\x180D\a\x4A0\x2"+
		"\x2\x180C\x1809\x3\x2\x2\x2\x180C\x180A\x3\x2\x2\x2\x180C\x180B\x3\x2"+
		"\x2\x2\x180D\x1BD\x3\x2\x2\x2\x180E\x180F\a\xC9\x2\x2\x180F\x1810\a\x2BB"+
		"\x2\x2\x1810\x1811\a\x187\x2\x2\x1811\x1812\x5\x4C2\x262\x2\x1812\x1813"+
		"\a\x4BA\x2\x2\x1813\x1814\x5\x4BA\x25E\x2\x1814\x1815\a\x4BB\x2\x2\x1815"+
		"\x1816\a:\x2\x2\x1816\x1818\a\x2FA\x2\x2\x1817\x1819\t>\x2\x2\x1818\x1817"+
		"\x3\x2\x2\x2\x1818\x1819\x3\x2\x2\x2\x1819\x181A\x3\x2\x2\x2\x181A\x181B"+
		"\a\x172\x2\x2\x181B\x181C\a\x423\x2\x2\x181C\x181D\a\x4BA\x2\x2\x181D"+
		"\x181E\x5\x460\x231\x2\x181E\x181F\a\x4BB\x2\x2\x181F\x1BF\x3\x2\x2\x2"+
		"\x1820\x1821\a\xC9\x2\x2\x1821\x1822\a\x2BB\x2\x2\x1822\x1823\a\x35E\x2"+
		"\x2\x1823\x1824\x5\x4C2\x262\x2\x1824\x1825\a:\x2\x2\x1825\x1826\a\x2BB"+
		"\x2\x2\x1826\x1828\x5\x4C2\x262\x2\x1827\x1829\a\x18\x2\x2\x1828\x1827"+
		"\x3\x2\x2\x2\x1828\x1829\x3\x2\x2\x2\x1829\x182A\x3\x2\x2\x2\x182A\x182B"+
		"\a\x3EB\x2\x2\x182B\x182C\a\x4BA\x2\x2\x182C\x1831\x5\x4C2\x262\x2\x182D"+
		"\x182E\a\x4BC\x2\x2\x182E\x1830\x5\x4C2\x262\x2\x182F\x182D\x3\x2\x2\x2"+
		"\x1830\x1833\x3\x2\x2\x2\x1831\x182F\x3\x2\x2\x2\x1831\x1832\x3\x2\x2"+
		"\x2\x1832\x1834\x3\x2\x2\x2\x1833\x1831\x3\x2\x2\x2\x1834\x1835\a\x4BB"+
		"\x2\x2\x1835\x1C1\x3\x2\x2\x2\x1836\x1837\a\xC9\x2\x2\x1837\x183A\a\x2F3"+
		"\x2\x2\x1838\x183B\x5\x486\x244\x2\x1839\x183B\x5\x4C2\x262\x2\x183A\x1838"+
		"\x3\x2\x2\x2\x183A\x1839\x3\x2\x2\x2\x183B\x183D\x3\x2\x2\x2\x183C\x183E"+
		"\x5\x1C4\xE3\x2\x183D\x183C\x3\x2\x2\x2\x183D\x183E\x3\x2\x2\x2\x183E"+
		"\x1842\x3\x2\x2\x2\x183F\x1840\a\x294\x2\x2\x1840\x1843\x5\x4C2\x262\x2"+
		"\x1841\x1843\a\xF9\x2\x2\x1842\x183F\x3\x2\x2\x2\x1842\x1841\x3\x2\x2"+
		"\x2\x1842\x1843\x3\x2\x2\x2\x1843\x1C3\x3\x2\x2\x2\x1844\x184B\a\x439"+
		"\x2\x2\x1845\x1846\a\x3BA\x2\x2\x1846\x1847\a\x4A8\x2\x2\x1847\x1849\x5"+
		"\x4A0\x251\x2\x1848\x184A\a\x4BC\x2\x2\x1849\x1848\x3\x2\x2\x2\x1849\x184A"+
		"\x3\x2\x2\x2\x184A\x184C\x3\x2\x2\x2\x184B\x1845\x3\x2\x2\x2\x184B\x184C"+
		"\x3\x2\x2\x2\x184C\x1853\x3\x2\x2\x2\x184D\x184E\a\x338\x2\x2\x184E\x184F"+
		"\a\x4A8\x2\x2\x184F\x1851\x5\x4A0\x251\x2\x1850\x1852\a\x4BC\x2\x2\x1851"+
		"\x1850\x3\x2\x2\x2\x1851\x1852\x3\x2\x2\x2\x1852\x1854\x3\x2\x2\x2\x1853"+
		"\x184D\x3\x2\x2\x2\x1853\x1854\x3\x2\x2\x2\x1854\x1882\x3\x2\x2\x2\x1855"+
		"\x1856\a\v\x2\x2\x1856\x187C\a\x4BA\x2\x2\x1857\x1858\a\x3BA\x2\x2\x1858"+
		"\x1859\a\x4A8\x2\x2\x1859\x185B\x5\x4A0\x251\x2\x185A\x185C\a\x4BC\x2"+
		"\x2\x185B\x185A\x3\x2\x2\x2\x185B\x185C\x3\x2\x2\x2\x185C\x185E\x3\x2"+
		"\x2\x2\x185D\x1857\x3\x2\x2\x2\x185D\x185E\x3\x2\x2\x2\x185E\x1865\x3"+
		"\x2\x2\x2\x185F\x1860\a\x2E5\x2\x2\x1860\x1861\a\x4A8\x2\x2\x1861\x1863"+
		"\x5\x48E\x248\x2\x1862\x1864\a\x4BC\x2\x2\x1863\x1862\x3\x2\x2\x2\x1863"+
		"\x1864\x3\x2\x2\x2\x1864\x1866\x3\x2\x2\x2\x1865\x185F\x3\x2\x2\x2\x1865"+
		"\x1866\x3\x2\x2\x2\x1866\x186D\x3\x2\x2\x2\x1867\x1868\a\x234\x2\x2\x1868"+
		"\x1869\a\x4A8\x2\x2\x1869\x186B\a\x4A2\x2\x2\x186A\x186C\a\x4BC\x2\x2"+
		"\x186B\x186A\x3\x2\x2\x2\x186B\x186C\x3\x2\x2\x2\x186C\x186E\x3\x2\x2"+
		"\x2\x186D\x1867\x3\x2\x2\x2\x186D\x186E\x3\x2\x2\x2\x186E\x1879\x3\x2"+
		"\x2\x2\x186F\x1870\a\x145\x2\x2\x1870\x1874\a:\x2\x2\x1871\x1875\a\x370"+
		"\x2\x2\x1872\x1875\a\x4A4\x2\x2\x1873\x1875\a\x2AE\x2\x2\x1874\x1871\x3"+
		"\x2\x2\x2\x1874\x1872\x3\x2\x2\x2\x1874\x1873\x3\x2\x2\x2\x1875\x1877"+
		"\x3\x2\x2\x2\x1876\x1878\a\x4BC\x2\x2\x1877\x1876\x3\x2\x2\x2\x1877\x1878"+
		"\x3\x2\x2\x2\x1878\x187A\x3\x2\x2\x2\x1879\x186F\x3\x2\x2\x2\x1879\x187A"+
		"\x3\x2\x2\x2\x187A\x187D\x3\x2\x2\x2\x187B\x187D\a\x11E\x2\x2\x187C\x185D"+
		"\x3\x2\x2\x2\x187C\x187B\x3\x2\x2\x2\x187D\x187E\x3\x2\x2\x2\x187E\x1880"+
		"\a\x4BB\x2\x2\x187F\x1881\a\x4BC\x2\x2\x1880\x187F\x3\x2\x2\x2\x1880\x1881"+
		"\x3\x2\x2\x2\x1881\x1883\x3\x2\x2\x2\x1882\x1855\x3\x2\x2\x2\x1882\x1883"+
		"\x3\x2\x2\x2\x1883\x188C\x3\x2\x2\x2\x1884\x1885\a\x2D2\x2\x2\x1885\x1886"+
		"\a\x4BA\x2\x2\x1886\x1887\a\x3BA\x2\x2\x1887\x1888\a\x4A8\x2\x2\x1888"+
		"\x1889\x5\x4A0\x251\x2\x1889\x188A\x3\x2\x2\x2\x188A\x188B\a\x4BB\x2\x2"+
		"\x188B\x188D\x3\x2\x2\x2\x188C\x1884\x3\x2\x2\x2\x188C\x188D\x3\x2\x2"+
		"\x2\x188D\x1C5\x3\x2\x2\x2\x188E\x188F\a%\x2\x2\x188F\x1892\a\x2F3\x2"+
		"\x2\x1890\x1893\x5\x486\x244\x2\x1891\x1893\x5\x4C2\x262\x2\x1892\x1890"+
		"\x3\x2\x2\x2\x1892\x1891\x3\x2\x2\x2\x1893\x1896\x3\x2\x2\x2\x1894\x1897"+
		"\x5\x1C4\xE3\x2\x1895\x1897\x5\x1C8\xE5\x2\x1896\x1894\x3\x2\x2\x2\x1896"+
		"\x1895\x3\x2\x2\x2\x1897\x1C7\x3\x2\x2\x2\x1898\x189E\a\x30D\x2\x2\x1899"+
		"\x189A\a\x439\x2\x2\x189A\x189B\a\x4BA\x2\x2\x189B\x189C\x5\x1CA\xE6\x2"+
		"\x189C\x189D\a\x4BB\x2\x2\x189D\x189F\x3\x2\x2\x2\x189E\x1899\x3\x2\x2"+
		"\x2\x189E\x189F\x3\x2\x2\x2\x189F\x18AE\x3\x2\x2\x2\x18A0\x18A5\a\x31C"+
		"\x2\x2\x18A1\x18A2\a\x439\x2\x2\x18A2\x18A3\a\x20E\x2\x2\x18A3\x18A4\a"+
		"\x4A8\x2\x2\x18A4\x18A6\x5\x4A0\x251\x2\x18A5\x18A1\x3\x2\x2\x2\x18A5"+
		"\x18A6\x3\x2\x2\x2\x18A6\x18AE\x3\x2\x2\x2\x18A7\x18A8\a\x250\x2\x2\x18A8"+
		"\x18AB\a\x3EB\x2\x2\x18A9\x18AC\x5\x4C2\x262\x2\x18AA\x18AC\a\xF9\x2\x2"+
		"\x18AB\x18A9\x3\x2\x2\x2\x18AB\x18AA\x3\x2\x2\x2\x18AC\x18AE\x3\x2\x2"+
		"\x2\x18AD\x1898\x3\x2\x2\x2\x18AD\x18A0\x3\x2\x2\x2\x18AD\x18A7\x3\x2"+
		"\x2\x2\x18AE\x1C9\x3\x2\x2\x2\x18AF\x18B0\a\x223\x2\x2\x18B0\x18B1\a\x4A8"+
		"\x2\x2\x18B1\x18B2\a\x4A2\x2\x2\x18B2\x1CB\x3\x2\x2\x2\x18B3\x18B4\a\xC9"+
		"\x2\x2\x18B4\x18B5\a\xBE\x2\x2\x18B5\x18B8\x5\x4AC\x257\x2\x18B6\x18B7"+
		"\a\x46\x2\x2\x18B7\x18B9\x5\x4C2\x262\x2\x18B8\x18B6\x3\x2\x2\x2\x18B8"+
		"\x18B9\x3\x2\x2\x2\x18B9\x18BA\x3\x2\x2\x2\x18BA\x18C5\a\x4BA\x2\x2\x18BB"+
		"\x18BE\x5\x4C2\x262\x2\x18BC\x18BE\a\xF9\x2\x2\x18BD\x18BB\x3\x2\x2\x2"+
		"\x18BD\x18BC\x3\x2\x2\x2\x18BE\x18BF\x3\x2\x2\x2\x18BF\x18C0\a\x376\x2"+
		"\x2\x18C0\x18C1\ap\x2\x2\x18C1\x18C3\t?\x2\x2\x18C2\x18C4\a\x4BC\x2\x2"+
		"\x18C3\x18C2\x3\x2\x2\x2\x18C3\x18C4\x3\x2\x2\x2\x18C4\x18C6\x3\x2\x2"+
		"\x2\x18C5\x18BD\x3\x2\x2\x2\x18C6\x18C7\x3\x2\x2\x2\x18C7\x18C5\x3\x2"+
		"\x2\x2\x18C7\x18C8\x3\x2\x2\x2\x18C8\x18C9\x3\x2\x2\x2\x18C9\x18CA\a\x4BB"+
		"\x2\x2\x18CA\x1CD\x3\x2\x2\x2\x18CB\x18D2\x5\x4A8\x255\x2\x18CC\x18D2"+
		"\x5\x4AA\x256\x2\x18CD\x18D2\x5\x4B0\x259\x2\x18CE\x18D2\x5\x4B4\x25B"+
		"\x2\x18CF\x18D2\x5\x4B8\x25D\x2\x18D0\x18D2\x5\x4B2\x25A\x2\x18D1\x18CB"+
		"\x3\x2\x2\x2\x18D1\x18CC\x3\x2\x2\x2\x18D1\x18CD\x3\x2\x2\x2\x18D1\x18CE"+
		"\x3\x2\x2\x2\x18D1\x18CF\x3\x2\x2\x2\x18D1\x18D0\x3\x2\x2\x2\x18D2\x1CF"+
		"\x3\x2\x2\x2\x18D3\x18D4\a\xC9\x2\x2\x18D4\x18D5\a\x240\x2\x2\x18D5\x18D6"+
		"\a\x403\x2\x2\x18D6\x18D9\x5\x4C2\x262\x2\x18D7\x18D8\a\x46\x2\x2\x18D8"+
		"\x18DA\x5\x4C2\x262\x2\x18D9\x18D7\x3\x2\x2\x2\x18D9\x18DA\x3\x2\x2\x2"+
		"\x18DA\x18DB\x3\x2\x2\x2\x18DB\x18DC\a\x420\x2\x2\x18DC\x18E5\a\x4A8\x2"+
		"\x2\x18DD\x18E6\a\x26B\x2\x2\x18DE\x18E6\a\x128\x2\x2\x18DF\x18E6\a\x433"+
		"\x2\x2\x18E0\x18E1\a\x421\x2\x2\x18E1\x18E2\a\x439\x2\x2\x18E2\x18E3\a"+
		"\x35A\x2\x2\x18E3\x18E4\a\x9C\x2\x2\x18E4\x18E6\x5\x4C2\x262\x2\x18E5"+
		"\x18DD\x3\x2\x2\x2\x18E5\x18DE\x3\x2\x2\x2\x18E5\x18DF\x3\x2\x2\x2\x18E5"+
		"\x18E0\x3\x2\x2\x2\x18E6\x1D1\x3\x2\x2\x2\x18E7\x18E9\x5\x3AC\x1D7\x2"+
		"\x18E8\x18E7\x3\x2\x2\x2\x18E8\x18E9\x3\x2\x2\x2\x18E9\x18EA\x3\x2\x2"+
		"\x2\x18EA\x18F2\a\x23F\x2\x2\x18EB\x18EC\a\x3EC\x2\x2\x18EC\x18ED\a\x4BA"+
		"\x2\x2\x18ED\x18EE\x5\x39C\x1CF\x2\x18EE\x18F0\a\x4BB\x2\x2\x18EF\x18F1"+
		"\a\x2C3\x2\x2\x18F0\x18EF\x3\x2\x2\x2\x18F0\x18F1\x3\x2\x2\x2\x18F1\x18F3"+
		"\x3\x2\x2\x2\x18F2\x18EB\x3\x2\x2\x2\x18F2\x18F3\x3\x2\x2\x2\x18F3\x18F5"+
		"\x3\x2\x2\x2\x18F4\x18F6\a\x1D6\x2\x2\x18F5\x18F4\x3\x2\x2\x2\x18F5\x18F6"+
		"\x3\x2\x2\x2\x18F6\x18F7\x3\x2\x2\x2\x18F7\x18F9\x5\x492\x24A\x2\x18F8"+
		"\x18FA\x5\x44E\x228\x2\x18F9\x18F8\x3\x2\x2\x2\x18F9\x18FA\x3\x2\x2\x2"+
		"\x18FA\x18FC\x3\x2\x2\x2\x18FB\x18FD\x5\x44A\x226\x2\x18FC\x18FB\x3\x2"+
		"\x2\x2\x18FC\x18FD\x3\x2\x2\x2\x18FD\x18FE\x3\x2\x2\x2\x18FE\x18FF\a\x41F"+
		"\x2\x2\x18FF\x1900\x5\x3E4\x1F3\x2\x1900\x1901\a\x294\x2\x2\x1901\x1903"+
		"\x5\x3B4\x1DB\x2\x1902\x1904\x5\x1D4\xEB\x2\x1903\x1902\x3\x2\x2\x2\x1904"+
		"\x1905\x3\x2\x2\x2\x1905\x1903\x3\x2\x2\x2\x1905\x1906\x3\x2\x2\x2\x1906"+
		"\x1908\x3\x2\x2\x2\x1907\x1909\x5\x1EC\xF7\x2\x1908\x1907\x3\x2\x2\x2"+
		"\x1908\x1909\x3\x2\x2\x2\x1909\x190B\x3\x2\x2\x2\x190A\x190C\x5\x3D2\x1EA"+
		"\x2\x190B\x190A\x3\x2\x2\x2\x190B\x190C\x3\x2\x2\x2\x190C\x190D\x3\x2"+
		"\x2\x2\x190D\x190E\a\x4BD\x2\x2\x190E\x1D3\x3\x2\x2\x2\x190F\x1910\a\x435"+
		"\x2\x2\x1910\x1913\a\x220\x2\x2\x1911\x1912\a\'\x2\x2\x1912\x1914\x5\x3B4"+
		"\x1DB\x2\x1913\x1911\x3\x2\x2\x2\x1913\x1914\x3\x2\x2\x2\x1914\x1915\x3"+
		"\x2\x2\x2\x1915\x1916\a\x3E4\x2\x2\x1916\x1918\x5\x1D6\xEC\x2\x1917\x190F"+
		"\x3\x2\x2\x2\x1918\x1919\x3\x2\x2\x2\x1919\x1917\x3\x2\x2\x2\x1919\x191A"+
		"\x3\x2\x2\x2\x191A\x1938\x3\x2\x2\x2\x191B\x191C\a\x435\x2\x2\x191C\x191D"+
		"\a\x271\x2\x2\x191D\x1920\a\x220\x2\x2\x191E\x191F\ap\x2\x2\x191F\x1921"+
		"\a\x3DE\x2\x2\x1920\x191E\x3\x2\x2\x2\x1920\x1921\x3\x2\x2\x2\x1921\x1924"+
		"\x3\x2\x2\x2\x1922\x1923\a\'\x2\x2\x1923\x1925\x5\x3B4\x1DB\x2\x1924\x1922"+
		"\x3\x2\x2\x2\x1924\x1925\x3\x2\x2\x2\x1925\x1926\x3\x2\x2\x2\x1926\x1927"+
		"\a\x3E4\x2\x2\x1927\x1938\x5\x1D8\xED\x2\x1928\x1929\a\x435\x2\x2\x1929"+
		"\x192A\a\x271\x2\x2\x192A\x192B\a\x220\x2\x2\x192B\x192C\ap\x2\x2\x192C"+
		"\x192F\a\x3A1\x2\x2\x192D\x192E\a\'\x2\x2\x192E\x1930\x5\x3B4\x1DB\x2"+
		"\x192F\x192D\x3\x2\x2\x2\x192F\x1930\x3\x2\x2\x2\x1930\x1931\x3\x2\x2"+
		"\x2\x1931\x1932\a\x3E4\x2\x2\x1932\x1934\x5\x1D6\xEC\x2\x1933\x1928\x3"+
		"\x2\x2\x2\x1934\x1935\x3\x2\x2\x2\x1935\x1933\x3\x2\x2\x2\x1935\x1936"+
		"\x3\x2\x2\x2\x1936\x1938\x3\x2\x2\x2\x1937\x1917\x3\x2\x2\x2\x1937\x191B"+
		"\x3\x2\x2\x2\x1937\x1933\x3\x2\x2\x2\x1938\x1D5\x3\x2\x2\x2\x1939\x193A"+
		"\a\x415\x2\x2\x193A\x193B\a\x386\x2\x2\x193B\x1940\x5\x3B2\x1DA\x2\x193C"+
		"\x193D\a\x4BC\x2\x2\x193D\x193F\x5\x3B2\x1DA\x2\x193E\x193C\x3\x2\x2\x2"+
		"\x193F\x1942\x3\x2\x2\x2\x1940\x193E\x3\x2\x2\x2\x1940\x1941\x3\x2\x2"+
		"\x2\x1941\x1945\x3\x2\x2\x2\x1942\x1940\x3\x2\x2\x2\x1943\x1945\a\x102"+
		"\x2\x2\x1944\x1939\x3\x2\x2\x2\x1944\x1943\x3\x2\x2\x2\x1945\x1D7\x3\x2"+
		"\x2\x2\x1946\x194B\a\x1D0\x2\x2\x1947\x1948\a\x4BA\x2\x2\x1948\x1949\x5"+
		"\x49C\x24F\x2\x1949\x194A\a\x4BB\x2\x2\x194A\x194C\x3\x2\x2\x2\x194B\x1947"+
		"\x3\x2\x2\x2\x194B\x194C\x3\x2\x2\x2\x194C\x1950\x3\x2\x2\x2\x194D\x1951"+
		"\x5\x45E\x230\x2\x194E\x194F\a\xF9\x2\x2\x194F\x1951\a\x423\x2\x2\x1950"+
		"\x194D\x3\x2\x2\x2\x1950\x194E\x3\x2\x2\x2\x1951\x1D9\x3\x2\x2\x2\x1952"+
		"\x1954\x5\x3AC\x1D7\x2\x1953\x1952\x3\x2\x2\x2\x1953\x1954\x3\x2\x2\x2"+
		"\x1954\x1955\x3\x2\x2\x2\x1955\x195F\a\x102\x2\x2\x1956\x1957\a\x3EC\x2"+
		"\x2\x1957\x1958\a\x4BA\x2\x2\x1958\x1959\x5\x39C\x1CF\x2\x1959\x195B\a"+
		"\x4BB\x2\x2\x195A\x195C\a\x2C3\x2\x2\x195B\x195A\x3\x2\x2\x2\x195B\x195C"+
		"\x3\x2\x2\x2\x195C\x1960\x3\x2\x2\x2\x195D\x195E\a\x3EC\x2\x2\x195E\x1960"+
		"\a\x4A2\x2\x2\x195F\x1956\x3\x2\x2\x2\x195F\x195D\x3\x2\x2\x2\x195F\x1960"+
		"\x3\x2\x2\x2\x1960\x1962\x3\x2\x2\x2\x1961\x1963\a\x181\x2\x2\x1962\x1961"+
		"\x3\x2\x2\x2\x1962\x1963\x3\x2\x2\x2\x1963\x1964\x3\x2\x2\x2\x1964\x1966"+
		"\x5\x1DC\xEF\x2\x1965\x1967\x5\x44E\x228\x2\x1966\x1965\x3\x2\x2\x2\x1966"+
		"\x1967\x3\x2\x2\x2\x1967\x1969\x3\x2\x2\x2\x1968\x196A\x5\x1EC\xF7\x2"+
		"\x1969\x1968\x3\x2\x2\x2\x1969\x196A\x3\x2\x2\x2\x196A\x196D\x3\x2\x2"+
		"\x2\x196B\x196C\a\x181\x2\x2\x196C\x196E\x5\x3E4\x1F3\x2\x196D\x196B\x3"+
		"\x2\x2\x2\x196D\x196E\x3\x2\x2\x2\x196E\x197C\x3\x2\x2\x2\x196F\x197A"+
		"\a\x436\x2\x2\x1970\x197B\x5\x3B4\x1DB\x2\x1971\x1972\a\xD0\x2\x2\x1972"+
		"\x1978\a\x28D\x2\x2\x1973\x1975\a\x194\x2\x2\x1974\x1973\x3\x2\x2\x2\x1974"+
		"\x1975\x3\x2\x2\x2\x1975\x1976\x3\x2\x2\x2\x1976\x1979\x5\x49E\x250\x2"+
		"\x1977\x1979\a\x4A0\x2\x2\x1978\x1974\x3\x2\x2\x2\x1978\x1977\x3\x2\x2"+
		"\x2\x1979\x197B\x3\x2\x2\x2\x197A\x1970\x3\x2\x2\x2\x197A\x1971\x3\x2"+
		"\x2\x2\x197B\x197D\x3\x2\x2\x2\x197C\x196F\x3\x2\x2\x2\x197C\x197D\x3"+
		"\x2\x2\x2\x197D\x197F\x3\x2\x2\x2\x197E\x1980\x5\x3C8\x1E5\x2\x197F\x197E"+
		"\x3\x2\x2\x2\x197F\x1980\x3\x2\x2\x2\x1980\x1982\x3\x2\x2\x2\x1981\x1983"+
		"\x5\x3D2\x1EA\x2\x1982\x1981\x3\x2\x2\x2\x1982\x1983\x3\x2\x2\x2\x1983"+
		"\x1985\x3\x2\x2\x2\x1984\x1986\a\x4BD\x2\x2\x1985\x1984\x3\x2\x2\x2\x1985"+
		"\x1986\x3\x2\x2\x2\x1986\x1DB\x3\x2\x2\x2\x1987\x198B\x5\x492\x24A\x2"+
		"\x1988\x198B\x5\x2D6\x16C\x2\x1989\x198B\a\x4A0\x2\x2\x198A\x1987\x3\x2"+
		"\x2\x2\x198A\x1988\x3\x2\x2\x2\x198A\x1989\x3\x2\x2\x2\x198B\x1DD\x3\x2"+
		"\x2\x2\x198C\x198E\x5\x3AC\x1D7\x2\x198D\x198C\x3\x2\x2\x2\x198D\x198E"+
		"\x3\x2\x2\x2\x198E\x198F\x3\x2\x2\x2\x198F\x1997\a\x1D0\x2\x2\x1990\x1991"+
		"\a\x3EC\x2\x2\x1991\x1992\a\x4BA\x2\x2\x1992\x1993\x5\x39C\x1CF\x2\x1993"+
		"\x1995\a\x4BB\x2\x2\x1994\x1996\a\x2C3\x2\x2\x1995\x1994\x3\x2\x2\x2\x1995"+
		"\x1996\x3\x2\x2\x2\x1996\x1998\x3\x2\x2\x2\x1997\x1990\x3\x2\x2\x2\x1997"+
		"\x1998\x3\x2\x2\x2\x1998\x199A\x3\x2\x2\x2\x1999\x199B\a\x1D6\x2\x2\x199A"+
		"\x1999\x3\x2\x2\x2\x199A\x199B\x3\x2\x2\x2\x199B\x199E\x3\x2\x2\x2\x199C"+
		"\x199F\x5\x492\x24A\x2\x199D\x199F\x5\x2D6\x16C\x2\x199E\x199C\x3\x2\x2"+
		"\x2\x199E\x199D\x3\x2\x2\x2\x199F\x19A1\x3\x2\x2\x2\x19A0\x19A2\x5\x44E"+
		"\x228\x2\x19A1\x19A0\x3\x2\x2\x2\x19A1\x19A2\x3\x2\x2\x2\x19A2\x19A7\x3"+
		"\x2\x2\x2\x19A3\x19A4\a\x4BA\x2\x2\x19A4\x19A5\x5\x498\x24D\x2\x19A5\x19A6"+
		"\a\x4BB\x2\x2\x19A6\x19A8\x3\x2\x2\x2\x19A7\x19A3\x3\x2\x2\x2\x19A7\x19A8"+
		"\x3\x2\x2\x2\x19A8\x19AA\x3\x2\x2\x2\x19A9\x19AB\x5\x1EC\xF7\x2\x19AA"+
		"\x19A9\x3\x2\x2\x2\x19AA\x19AB\x3\x2\x2\x2\x19AB\x19AC\x3\x2\x2\x2\x19AC"+
		"\x19AE\x5\x1E0\xF1\x2\x19AD\x19AF\x5\x3C8\x1E5\x2\x19AE\x19AD\x3\x2\x2"+
		"\x2\x19AE\x19AF\x3\x2\x2\x2\x19AF\x19B1\x3\x2\x2\x2\x19B0\x19B2\x5\x3D2"+
		"\x1EA\x2\x19B1\x19B0\x3\x2\x2\x2\x19B1\x19B2\x3\x2\x2\x2\x19B2\x19B4\x3"+
		"\x2\x2\x2\x19B3\x19B5\a\x4BD\x2\x2\x19B4\x19B3\x3\x2\x2\x2\x19B4\x19B5"+
		"\x3\x2\x2\x2\x19B5\x1DF\x3\x2\x2\x2\x19B6\x19BC\x5\x45E\x230\x2\x19B7"+
		"\x19BC\x5\x414\x20B\x2\x19B8\x19BC\x5\x2F4\x17B\x2\x19B9\x19BA\a\xF9\x2"+
		"\x2\x19BA\x19BC\a\x423\x2\x2\x19BB\x19B6\x3\x2\x2\x2\x19BB\x19B7\x3\x2"+
		"\x2\x2\x19BB\x19B8\x3\x2\x2\x2\x19BB\x19B9\x3\x2\x2\x2\x19BC\x1E1\x3\x2"+
		"\x2\x2\x19BD\x19BF\a\x4BA\x2\x2\x19BE\x19BD\x3\x2\x2\x2\x19BE\x19BF\x3"+
		"\x2\x2\x2\x19BF\x19C0\x3\x2\x2\x2\x19C0\x19C5\a\x30E\x2\x2\x19C1\x19C6"+
		"\a\x18\x2\x2\x19C2\x19C6\a\x116\x2\x2\x19C3\x19C6\x5\x3BE\x1E0\x2\x19C4"+
		"\x19C6\a\x4C0\x2\x2\x19C5\x19C1\x3\x2\x2\x2\x19C5\x19C2\x3\x2\x2\x2\x19C5"+
		"\x19C3\x3\x2\x2\x2\x19C5\x19C4\x3\x2\x2\x2\x19C6\x19CF\x3\x2\x2\x2\x19C7"+
		"\x19C8\a\x4A0\x2\x2\x19C8\x19C9\a\x4A8\x2\x2\x19C9\x19CB\x5\x39C\x1CF"+
		"\x2\x19CA\x19CC\a\x4BC\x2\x2\x19CB\x19CA\x3\x2\x2\x2\x19CB\x19CC\x3\x2"+
		"\x2\x2\x19CC\x19CE\x3\x2\x2\x2\x19CD\x19C7\x3\x2\x2\x2\x19CE\x19D1\x3"+
		"\x2\x2\x2\x19CF\x19CD\x3\x2\x2\x2\x19CF\x19D0\x3\x2\x2\x2\x19D0\x19D2"+
		"\x3\x2\x2\x2\x19D1\x19CF\x3\x2\x2\x2\x19D2\x19D3\a\x181\x2\x2\x19D3\x19D9"+
		"\x5\x486\x244\x2\x19D4\x19D5\a\x1D6\x2\x2\x19D5\x19D6\x5\x4C2\x262\x2"+
		"\x19D6\x19D7\a\x436\x2\x2\x19D7\x19D8\x5\x3B4\x1DB\x2\x19D8\x19DA\x3\x2"+
		"\x2\x2\x19D9\x19D4\x3\x2\x2\x2\x19D9\x19DA\x3\x2\x2\x2\x19DA\x19DC\x3"+
		"\x2\x2\x2\x19DB\x19DD\a\x4BB\x2\x2\x19DC\x19DB\x3\x2\x2\x2\x19DC\x19DD"+
		"\x3\x2\x2\x2\x19DD\x1E3\x3\x2\x2\x2\x19DE\x19E0\x5\x3AC\x1D7\x2\x19DF"+
		"\x19DE\x3\x2\x2\x2\x19DF\x19E0\x3\x2\x2\x2\x19E0\x19E1\x3\x2\x2\x2\x19E1"+
		"\x19E2\x5\x1E6\xF4\x2\x19E2\x1E5\x3\x2\x2\x2\x19E3\x19E5\x5\x3B8\x1DD"+
		"\x2\x19E4\x19E6\x5\x3C6\x1E4\x2\x19E5\x19E4\x3\x2\x2\x2\x19E5\x19E6\x3"+
		"\x2\x2\x2\x19E6\x19E8\x3\x2\x2\x2\x19E7\x19E9\x5\x3C8\x1E5\x2\x19E8\x19E7"+
		"\x3\x2\x2\x2\x19E8\x19E9\x3\x2\x2\x2\x19E9\x19EB\x3\x2\x2\x2\x19EA\x19EC"+
		"\x5\x3D2\x1EA\x2\x19EB\x19EA\x3\x2\x2\x2\x19EB\x19EC\x3\x2\x2\x2\x19EC"+
		"\x19EE\x3\x2\x2\x2\x19ED\x19EF\a\x4BD\x2\x2\x19EE\x19ED\x3\x2\x2\x2\x19EE"+
		"\x19EF\x3\x2\x2\x2\x19EF\x1E7\x3\x2\x2\x2\x19F0\x19F3\a\x4A0\x2\x2\x19F1"+
		"\x19F3\x5\x4BC\x25F\x2\x19F2\x19F0\x3\x2\x2\x2\x19F2\x19F1\x3\x2\x2\x2"+
		"\x19F3\x1E9\x3\x2\x2\x2\x19F4\x19F6\x5\x3AC\x1D7\x2\x19F5\x19F4\x3\x2"+
		"\x2\x2\x19F5\x19F6\x3\x2\x2\x2\x19F6\x19F7\x3\x2\x2\x2\x19F7\x19FF\a\x415"+
		"\x2\x2\x19F8\x19F9\a\x3EC\x2\x2\x19F9\x19FA\a\x4BA\x2\x2\x19FA\x19FB\x5"+
		"\x39C\x1CF\x2\x19FB\x19FD\a\x4BB\x2\x2\x19FC\x19FE\a\x2C3\x2\x2\x19FD"+
		"\x19FC\x3\x2\x2\x2\x19FD\x19FE\x3\x2\x2\x2\x19FE\x1A00\x3\x2\x2\x2\x19FF"+
		"\x19F8\x3\x2\x2\x2\x19FF\x1A00\x3\x2\x2\x2\x1A00\x1A03\x3\x2\x2\x2\x1A01"+
		"\x1A04\x5\x492\x24A\x2\x1A02\x1A04\x5\x2D6\x16C\x2\x1A03\x1A01\x3\x2\x2"+
		"\x2\x1A03\x1A02\x3\x2\x2\x2\x1A04\x1A06\x3\x2\x2\x2\x1A05\x1A07\x5\x44E"+
		"\x228\x2\x1A06\x1A05\x3\x2\x2\x2\x1A06\x1A07\x3\x2\x2\x2\x1A07\x1A08\x3"+
		"\x2\x2\x2\x1A08\x1A09\a\x386\x2\x2\x1A09\x1A0E\x5\x3B0\x1D9\x2\x1A0A\x1A0B"+
		"\a\x4BC\x2\x2\x1A0B\x1A0D\x5\x3B0\x1D9\x2\x1A0C\x1A0A\x3\x2\x2\x2\x1A0D"+
		"\x1A10\x3\x2\x2\x2\x1A0E\x1A0C\x3\x2\x2\x2\x1A0E\x1A0F\x3\x2\x2\x2\x1A0F"+
		"\x1A12\x3\x2\x2\x2\x1A10\x1A0E\x3\x2\x2\x2\x1A11\x1A13\x5\x1EC\xF7\x2"+
		"\x1A12\x1A11\x3\x2\x2\x2\x1A12\x1A13\x3\x2\x2\x2\x1A13\x1A16\x3\x2\x2"+
		"\x2\x1A14\x1A15\a\x181\x2\x2\x1A15\x1A17\x5\x3E4\x1F3\x2\x1A16\x1A14\x3"+
		"\x2\x2\x2\x1A16\x1A17\x3\x2\x2\x2\x1A17\x1A25\x3\x2\x2\x2\x1A18\x1A23"+
		"\a\x436\x2\x2\x1A19\x1A24\x5\x3B4\x1DB\x2\x1A1A\x1A1B\a\xD0\x2\x2\x1A1B"+
		"\x1A21\a\x28D\x2\x2\x1A1C\x1A1E\a\x194\x2\x2\x1A1D\x1A1C\x3\x2\x2\x2\x1A1D"+
		"\x1A1E\x3\x2\x2\x2\x1A1E\x1A1F\x3\x2\x2\x2\x1A1F\x1A22\x5\x49E\x250\x2"+
		"\x1A20\x1A22\a\x4A0\x2\x2\x1A21\x1A1D\x3\x2\x2\x2\x1A21\x1A20\x3\x2\x2"+
		"\x2\x1A22\x1A24\x3\x2\x2\x2\x1A23\x1A19\x3\x2\x2\x2\x1A23\x1A1A\x3\x2"+
		"\x2\x2\x1A24\x1A26\x3\x2\x2\x2\x1A25\x1A18\x3\x2\x2\x2\x1A25\x1A26\x3"+
		"\x2\x2\x2\x1A26\x1A28\x3\x2\x2\x2\x1A27\x1A29\x5\x3C8\x1E5\x2\x1A28\x1A27"+
		"\x3\x2\x2\x2\x1A28\x1A29\x3\x2\x2\x2\x1A29\x1A2B\x3\x2\x2\x2\x1A2A\x1A2C"+
		"\x5\x3D2\x1EA\x2\x1A2B\x1A2A\x3\x2\x2\x2\x1A2B\x1A2C\x3\x2\x2\x2\x1A2C"+
		"\x1A2E\x3\x2\x2\x2\x1A2D\x1A2F\a\x4BD\x2\x2\x1A2E\x1A2D\x3\x2\x2\x2\x1A2E"+
		"\x1A2F\x3\x2\x2\x2\x1A2F\x1EB\x3\x2\x2\x2\x1A30\x1A31\a\x2AB\x2\x2\x1A31"+
		"\x1A36\x5\x1EE\xF8\x2\x1A32\x1A33\a\x4BC\x2\x2\x1A33\x1A35\x5\x1EE\xF8"+
		"\x2\x1A34\x1A32\x3\x2\x2\x2\x1A35\x1A38\x3\x2\x2\x2\x1A36\x1A34\x3\x2"+
		"\x2\x2\x1A36\x1A37\x3\x2\x2\x2\x1A37\x1A44\x3\x2\x2\x2\x1A38\x1A36\x3"+
		"\x2\x2\x2\x1A39\x1A3C\a\x1D6\x2\x2\x1A3A\x1A3D\a\x4A0\x2\x2\x1A3B\x1A3D"+
		"\x5\x488\x245\x2\x1A3C\x1A3A\x3\x2\x2\x2\x1A3C\x1A3B\x3\x2\x2\x2\x1A3D"+
		"\x1A42\x3\x2\x2\x2\x1A3E\x1A3F\a\x4BA\x2\x2\x1A3F\x1A40\x5\x49C\x24F\x2"+
		"\x1A40\x1A41\a\x4BB\x2\x2\x1A41\x1A43\x3\x2\x2\x2\x1A42\x1A3E\x3\x2\x2"+
		"\x2\x1A42\x1A43\x3\x2\x2\x2\x1A43\x1A45\x3\x2\x2\x2\x1A44\x1A39\x3\x2"+
		"\x2\x2\x1A44\x1A45\x3\x2\x2\x2\x1A45\x1ED\x3\x2\x2\x2\x1A46\x1A49\x5\x39C"+
		"\x1CF\x2\x1A47\x1A49\x5\x3DC\x1EF\x2\x1A48\x1A46\x3\x2\x2\x2\x1A48\x1A47"+
		"\x3\x2\x2\x2\x1A49\x1A4B\x3\x2\x2\x2\x1A4A\x1A4C\x5\x448\x225\x2\x1A4B"+
		"\x1A4A\x3\x2\x2\x2\x1A4B\x1A4C\x3\x2\x2\x2\x1A4C\x1EF\x3\x2\x2\x2\x1A4D"+
		"\x1A4E\a\xC9\x2\x2\x1A4E\x1A4F\a\xDD\x2\x2\x1A4F\x1A53\x5\x4C2\x262\x2"+
		"\x1A50\x1A51\a\xB6\x2\x2\x1A51\x1A52\a\x4A8\x2\x2\x1A52\x1A54\t@\x2\x2"+
		"\x1A53\x1A50\x3\x2\x2\x2\x1A53\x1A54\x3\x2\x2\x2\x1A54\x1A61\x3\x2\x2"+
		"\x2\x1A55\x1A57\a\x294\x2\x2\x1A56\x1A58\a\x2D9\x2\x2\x1A57\x1A56\x3\x2"+
		"\x2\x2\x1A57\x1A58\x3\x2\x2\x2\x1A58\x1A59\x3\x2\x2\x2\x1A59\x1A5E\x5"+
		"\x47A\x23E\x2\x1A5A\x1A5B\a\x4BC\x2\x2\x1A5B\x1A5D\x5\x47A\x23E\x2\x1A5C"+
		"\x1A5A\x3\x2\x2\x2\x1A5D\x1A60\x3\x2\x2\x2\x1A5E\x1A5C\x3\x2\x2\x2\x1A5E"+
		"\x1A5F\x3\x2\x2\x2\x1A5F\x1A62\x3\x2\x2\x2\x1A60\x1A5E\x3\x2\x2\x2\x1A61"+
		"\x1A55\x3\x2\x2\x2\x1A61\x1A62\x3\x2\x2\x2\x1A62\x1A6D\x3\x2\x2\x2\x1A63"+
		"\x1A64\a\x214\x2\x2\x1A64\x1A65\a\x294\x2\x2\x1A65\x1A6A\x5\x47A\x23E"+
		"\x2\x1A66\x1A67\a\x4BC\x2\x2\x1A67\x1A69\x5\x47A\x23E\x2\x1A68\x1A66\x3"+
		"\x2\x2\x2\x1A69\x1A6C\x3\x2\x2\x2\x1A6A\x1A68\x3\x2\x2\x2\x1A6A\x1A6B"+
		"\x3\x2\x2\x2\x1A6B\x1A6E\x3\x2\x2\x2\x1A6C\x1A6A\x3\x2\x2\x2\x1A6D\x1A63"+
		"\x3\x2\x2\x2\x1A6D\x1A6E\x3\x2\x2\x2\x1A6E\x1A71\x3\x2\x2\x2\x1A6F\x1A70"+
		"\a\x9B\x2\x2\x1A70\x1A72\x5\x4C2\x262\x2\x1A71\x1A6F\x3\x2\x2\x2\x1A71"+
		"\x1A72\x3\x2\x2\x2\x1A72\x1A7C\x3\x2\x2\x2\x1A73\x1A74\a\x439\x2\x2\x1A74"+
		"\x1A79\x5\x476\x23C\x2\x1A75\x1A76\a\x4BC\x2\x2\x1A76\x1A78\x5\x476\x23C"+
		"\x2\x1A77\x1A75\x3\x2\x2\x2\x1A78\x1A7B\x3\x2\x2\x2\x1A79\x1A77\x3\x2"+
		"\x2\x2\x1A79\x1A7A\x3\x2\x2\x2\x1A7A\x1A7D\x3\x2\x2\x2\x1A7B\x1A79\x3"+
		"\x2\x2\x2\x1A7C\x1A73\x3\x2\x2\x2\x1A7C\x1A7D\x3\x2\x2\x2\x1A7D\x1F1\x3"+
		"\x2\x2\x2\x1A7E\x1A7F\a\xC9\x2\x2\x1A7F\x1A80\a\xDD\x2\x2\x1A80\x1A84"+
		"\x5\x4C2\x262\x2\x1A81\x1A82\a\xB6\x2\x2\x1A82\x1A83\a\x4A8\x2\x2\x1A83"+
		"\x1A85\t@\x2\x2\x1A84\x1A81\x3\x2\x2\x2\x1A84\x1A85\x3\x2\x2\x2\x1A85"+
		"\x1A92\x3\x2\x2\x2\x1A86\x1A88\a\x294\x2\x2\x1A87\x1A89\a\x2D9\x2\x2\x1A88"+
		"\x1A87\x3\x2\x2\x2\x1A88\x1A89\x3\x2\x2\x2\x1A89\x1A8A\x3\x2\x2\x2\x1A8A"+
		"\x1A8F\x5\x47A\x23E\x2\x1A8B\x1A8C\a\x4BC\x2\x2\x1A8C\x1A8E\x5\x47A\x23E"+
		"\x2\x1A8D\x1A8B\x3\x2\x2\x2\x1A8E\x1A91\x3\x2\x2\x2\x1A8F\x1A8D\x3\x2"+
		"\x2\x2\x1A8F\x1A90\x3\x2\x2\x2\x1A90\x1A93\x3\x2\x2\x2\x1A91\x1A8F\x3"+
		"\x2\x2\x2\x1A92\x1A86\x3\x2\x2\x2\x1A92\x1A93\x3\x2\x2\x2\x1A93\x1A9F"+
		"\x3\x2\x2\x2\x1A94\x1A95\a\x4BA\x2\x2\x1A95\x1A9A\x5\x1F4\xFB\x2\x1A96"+
		"\x1A97\a\x4BC\x2\x2\x1A97\x1A99\x5\x1F4\xFB\x2\x1A98\x1A96\x3\x2\x2\x2"+
		"\x1A99\x1A9C\x3\x2\x2\x2\x1A9A\x1A98\x3\x2\x2\x2\x1A9A\x1A9B\x3\x2\x2"+
		"\x2\x1A9B\x1A9D\x3\x2\x2\x2\x1A9C\x1A9A\x3\x2\x2\x2\x1A9D\x1A9E\a\x4BB"+
		"\x2\x2\x1A9E\x1AA0\x3\x2\x2\x2\x1A9F\x1A94\x3\x2\x2\x2\x1A9F\x1AA0\x3"+
		"\x2\x2\x2\x1AA0\x1AAB\x3\x2\x2\x2\x1AA1\x1AA2\a\x214\x2\x2\x1AA2\x1AA3"+
		"\a\x294\x2\x2\x1AA3\x1AA8\x5\x47A\x23E\x2\x1AA4\x1AA5\a\x4BC\x2\x2\x1AA5"+
		"\x1AA7\x5\x47A\x23E\x2\x1AA6\x1AA4\x3\x2\x2\x2\x1AA7\x1AAA\x3\x2\x2\x2"+
		"\x1AA8\x1AA6\x3\x2\x2\x2\x1AA8\x1AA9\x3\x2\x2\x2\x1AA9\x1AAC\x3\x2\x2"+
		"\x2\x1AAA\x1AA8\x3\x2\x2\x2\x1AAB\x1AA1\x3\x2\x2\x2\x1AAB\x1AAC\x3\x2"+
		"\x2\x2\x1AAC\x1AAF\x3\x2\x2\x2\x1AAD\x1AAE\a\x9B\x2\x2\x1AAE\x1AB0\x5"+
		"\x4C2\x262\x2\x1AAF\x1AAD\x3\x2\x2\x2\x1AAF\x1AB0\x3\x2\x2\x2\x1AB0\x1ABA"+
		"\x3\x2\x2\x2\x1AB1\x1AB2\a\x439\x2\x2\x1AB2\x1AB7\x5\x476\x23C\x2\x1AB3"+
		"\x1AB4\a\x4BC\x2\x2\x1AB4\x1AB6\x5\x476\x23C\x2\x1AB5\x1AB3\x3\x2\x2\x2"+
		"\x1AB6\x1AB9\x3\x2\x2\x2\x1AB7\x1AB5\x3\x2\x2\x2\x1AB7\x1AB8\x3\x2\x2"+
		"\x2\x1AB8\x1ABB\x3\x2\x2\x2\x1AB9\x1AB7\x3\x2\x2\x2\x1ABA\x1AB1\x3\x2"+
		"\x2\x2\x1ABA\x1ABB\x3\x2\x2\x2\x1ABB\x1F3\x3\x2\x2\x2\x1ABC\x1ABD\a\x225"+
		"\x2\x2\x1ABD\x1ABE\a\x4A8\x2\x2\x1ABE\x1ABF\a\x4A2\x2\x2\x1ABF\x1AC7\t"+
		"\x41\x2\x2\x1AC0\x1AC1\a\x380\x2\x2\x1AC1\x1AC2\a\x4A8\x2\x2\x1AC2\x1AC7"+
		"\a\x4A4\x2\x2\x1AC3\x1AC4\a\x124\x2\x2\x1AC4\x1AC5\a\x4A8\x2\x2\x1AC5"+
		"\x1AC7\a\x4A4\x2\x2\x1AC6\x1ABC\x3\x2\x2\x2\x1AC6\x1AC0\x3\x2\x2\x2\x1AC6"+
		"\x1AC3\x3\x2\x2\x2\x1AC7\x1F5\x3\x2\x2\x2\x1AC8\x1ACA\a\xC9\x2\x2\x1AC9"+
		"\x1ACB\a\x40D\x2\x2\x1ACA\x1AC9\x3\x2\x2\x2\x1ACA\x1ACB\x3\x2\x2\x2\x1ACB"+
		"\x1ACD\x3\x2\x2\x2\x1ACC\x1ACE\x5\x4A2\x252\x2\x1ACD\x1ACC\x3\x2\x2\x2"+
		"\x1ACD\x1ACE\x3\x2\x2\x2\x1ACE\x1ACF\x3\x2\x2\x2\x1ACF\x1AD0\a\x1C6\x2"+
		"\x2\x1AD0\x1AD1\x5\x4C2\x262\x2\x1AD1\x1AD2\a\x294\x2\x2\x1AD2\x1AD3\x5"+
		"\x488\x245\x2\x1AD3\x1AD4\a\x4BA\x2\x2\x1AD4\x1AD5\x5\x496\x24C\x2\x1AD5"+
		"\x1ADB\a\x4BB\x2\x2\x1AD6\x1AD7\a\x1C2\x2\x2\x1AD7\x1AD8\a\x4BA\x2\x2"+
		"\x1AD8\x1AD9\x5\x49C\x24F\x2\x1AD9\x1ADA\a\x4BB\x2\x2\x1ADA\x1ADC\x3\x2"+
		"\x2\x2\x1ADB\x1AD6\x3\x2\x2\x2\x1ADB\x1ADC\x3\x2\x2\x2\x1ADC\x1ADF\x3"+
		"\x2\x2\x2\x1ADD\x1ADE\a\x436\x2\x2\x1ADE\x1AE0\x5\x3B4\x1DB\x2\x1ADF\x1ADD"+
		"\x3\x2\x2\x2\x1ADF\x1AE0\x3\x2\x2\x2\x1AE0\x1AE2\x3\x2\x2\x2\x1AE1\x1AE3"+
		"\x5\x1F8\xFD\x2\x1AE2\x1AE1\x3\x2\x2\x2\x1AE2\x1AE3\x3\x2\x2\x2\x1AE3"+
		"\x1AE6\x3\x2\x2\x2\x1AE4\x1AE5\a\x294\x2\x2\x1AE5\x1AE7\x5\x4C2\x262\x2"+
		"\x1AE6\x1AE4\x3\x2\x2\x2\x1AE6\x1AE7\x3\x2\x2\x2\x1AE7\x1AE9\x3\x2\x2"+
		"\x2\x1AE8\x1AEA\a\x4BD\x2\x2\x1AE9\x1AE8\x3\x2\x2\x2\x1AE9\x1AEA\x3\x2"+
		"\x2\x2\x1AEA\x1F7\x3\x2\x2\x2\x1AEB\x1AEC\a\x439\x2\x2\x1AEC\x1AED\a\x4BA"+
		"\x2\x2\x1AED\x1AF2\x5\x1FA\xFE\x2\x1AEE\x1AEF\a\x4BC\x2\x2\x1AEF\x1AF1"+
		"\x5\x1FA\xFE\x2\x1AF0\x1AEE\x3\x2\x2\x2\x1AF1\x1AF4\x3\x2\x2\x2\x1AF2"+
		"\x1AF0\x3\x2\x2\x2\x1AF2\x1AF3\x3\x2\x2\x2\x1AF3\x1AF5\x3\x2\x2\x2\x1AF4"+
		"\x1AF2\x3\x2\x2\x2\x1AF5\x1AF6\a\x4BB\x2\x2\x1AF6\x1F9\x3\x2\x2\x2\x1AF7"+
		"\x1AFF\x5\x210\x109\x2\x1AF8\x1AF9\a\x120\x2\x2\x1AF9\x1AFA\a\x4A8\x2"+
		"\x2\x1AFA\x1AFF\x5\x4A0\x251\x2\x1AFB\x1AFC\a\x2A3\x2\x2\x1AFC\x1AFD\a"+
		"\x4A8\x2\x2\x1AFD\x1AFF\x5\x4A0\x251\x2\x1AFE\x1AF7\x3\x2\x2\x2\x1AFE"+
		"\x1AF8\x3\x2\x2\x2\x1AFE\x1AFB\x3\x2\x2\x2\x1AFF\x1FB\x3\x2\x2\x2\x1B00"+
		"\x1B01\a%\x2\x2\x1B01\x1B04\a\x1C6\x2\x2\x1B02\x1B05\x5\x4C2\x262\x2\x1B03"+
		"\x1B05\a\x18\x2\x2\x1B04\x1B02\x3\x2\x2\x2\x1B04\x1B03\x3\x2\x2\x2\x1B05"+
		"\x1B06\x3\x2\x2\x2\x1B06\x1B07\a\x294\x2\x2\x1B07\x1B12\x5\x488\x245\x2"+
		"\x1B08\x1B13\a\x112\x2\x2\x1B09\x1B13\a\x2C1\x2\x2\x1B0A\x1B13\a\x3\x2"+
		"\x2\x1B0B\x1B0D\a\x336\x2\x2\x1B0C\x1B0E\x5\x1FE\x100\x2\x1B0D\x1B0C\x3"+
		"\x2\x2\x2\x1B0D\x1B0E\x3\x2\x2\x2\x1B0E\x1B13\x3\x2\x2\x2\x1B0F\x1B13"+
		"\x5\x202\x102\x2\x1B10\x1B13\x5\x208\x105\x2\x1B11\x1B13\x5\x20C\x107"+
		"\x2\x1B12\x1B08\x3\x2\x2\x2\x1B12\x1B09\x3\x2\x2\x2\x1B12\x1B0A\x3\x2"+
		"\x2\x2\x1B12\x1B0B\x3\x2\x2\x2\x1B12\x1B0F\x3\x2\x2\x2\x1B12\x1B10\x3"+
		"\x2\x2\x2\x1B12\x1B11\x3\x2\x2\x2\x1B13\x1FD\x3\x2\x2\x2\x1B14\x1B15\a"+
		"\x439\x2\x2\x1B15\x1B16\a\x4BA\x2\x2\x1B16\x1B1B\x5\x200\x101\x2\x1B17"+
		"\x1B18\a\x4BC\x2\x2\x1B18\x1B1A\x5\x200\x101\x2\x1B19\x1B17\x3\x2\x2\x2"+
		"\x1B1A\x1B1D\x3\x2\x2\x2\x1B1B\x1B19\x3\x2\x2\x2\x1B1B\x1B1C\x3\x2\x2"+
		"\x2\x1B1C\x1B1E\x3\x2\x2\x2\x1B1D\x1B1B\x3\x2\x2\x2\x1B1E\x1B1F\a\x4BB"+
		"\x2\x2\x1B1F\x1FF\x3\x2\x2\x2\x1B20\x1B21\a\x223\x2\x2\x1B21\x1B22\a\x4A8"+
		"\x2\x2\x1B22\x1B2B\a\x4A2\x2\x2\x1B23\x1B24\a\x22B\x2\x2\x1B24\x1B25\a"+
		"\x4A8\x2\x2\x1B25\x1B27\a\x4A2\x2\x2\x1B26\x1B28\a\x244\x2\x2\x1B27\x1B26"+
		"\x3\x2\x2\x2\x1B27\x1B28\x3\x2\x2\x2\x1B28\x1B2B\x3\x2\x2\x2\x1B29\x1B2B"+
		"\x5\x262\x132\x2\x1B2A\x1B20\x3\x2\x2\x2\x1B2A\x1B23\x3\x2\x2\x2\x1B2A"+
		"\x1B29\x3\x2\x2\x2\x1B2B\x201\x3\x2\x2\x2\x1B2C\x1B30\a\x31C\x2\x2\x1B2D"+
		"\x1B2E\a\x2BB\x2\x2\x1B2E\x1B2F\a\x4A8\x2\x2\x1B2F\x1B31\a\x4A2\x2\x2"+
		"\x1B30\x1B2D\x3\x2\x2\x2\x1B30\x1B31\x3\x2\x2\x2\x1B31\x1B33\x3\x2\x2"+
		"\x2\x1B32\x1B34\x5\x204\x103\x2\x1B33\x1B32\x3\x2\x2\x2\x1B33\x1B34\x3"+
		"\x2\x2\x2\x1B34\x203\x3\x2\x2\x2\x1B35\x1B36\a\x439\x2\x2\x1B36\x1B37"+
		"\a\x4BA\x2\x2\x1B37\x1B3C\x5\x206\x104\x2\x1B38\x1B39\a\x4BC\x2\x2\x1B39"+
		"\x1B3B\x5\x206\x104\x2\x1B3A\x1B38\x3\x2\x2\x2\x1B3B\x1B3E\x3\x2\x2\x2"+
		"\x1B3C\x1B3A\x3\x2\x2\x2\x1B3C\x1B3D\x3\x2\x2\x2\x1B3D\x1B3F\x3\x2\x2"+
		"\x2\x1B3E\x1B3C\x3\x2\x2\x2\x1B3F\x1B40\a\x4BB\x2\x2\x1B40\x205\x3\x2"+
		"\x2\x2\x1B41\x1B42\a\x20E\x2\x2\x1B42\x1B43\a\x4A8\x2\x2\x1B43\x1B48\x5"+
		"\x4A0\x251\x2\x1B44\x1B45\a\xAC\x2\x2\x1B45\x1B46\a\x4A8\x2\x2\x1B46\x1B48"+
		"\x5\x4A0\x251\x2\x1B47\x1B41\x3\x2\x2\x2\x1B47\x1B44\x3\x2\x2\x2\x1B48"+
		"\x207\x3\x2\x2\x2\x1B49\x1B4A\a\x386\x2\x2\x1B4A\x1B4B\a\x4BA\x2\x2\x1B4B"+
		"\x1B50\x5\x20A\x106\x2\x1B4C\x1B4D\a\x4BC\x2\x2\x1B4D\x1B4F\x5\x20A\x106"+
		"\x2\x1B4E\x1B4C\x3\x2\x2\x2\x1B4F\x1B52\x3\x2\x2\x2\x1B50\x1B4E\x3\x2"+
		"\x2\x2\x1B50\x1B51\x3\x2\x2\x2\x1B51\x1B53\x3\x2\x2\x2\x1B52\x1B50\x3"+
		"\x2\x2\x2\x1B53\x1B54\a\x4BB\x2\x2\x1B54\x209\x3\x2\x2\x2\x1B55\x1B56"+
		"\a\x1E\x2\x2\x1B56\x1B57\a\x4A8\x2\x2\x1B57\x1B6B\x5\x4A0\x251\x2\x1B58"+
		"\x1B59\a\x1D\x2\x2\x1B59\x1B5A\a\x4A8\x2\x2\x1B5A\x1B6B\x5\x4A0\x251\x2"+
		"\x1B5B\x1B5C\a\x2A3\x2\x2\x1B5C\x1B5D\a\x4A8\x2\x2\x1B5D\x1B6B\x5\x4A0"+
		"\x251\x2\x1B5E\x1B5F\a\x1B8\x2\x2\x1B5F\x1B60\a\x4A8\x2\x2\x1B60\x1B6B"+
		"\x5\x4A0\x251\x2\x1B61\x1B62\a\x3B6\x2\x2\x1B62\x1B63\a\x4A8\x2\x2\x1B63"+
		"\x1B6B\x5\x4A0\x251\x2\x1B64\x1B65\a\xAB\x2\x2\x1B65\x1B66\a\x4A8\x2\x2"+
		"\x1B66\x1B68\a\x4A2\x2\x2\x1B67\x1B69\a\x244\x2\x2\x1B68\x1B67\x3\x2\x2"+
		"\x2\x1B68\x1B69\x3\x2\x2\x2\x1B69\x1B6B\x3\x2\x2\x2\x1B6A\x1B55\x3\x2"+
		"\x2\x2\x1B6A\x1B58\x3\x2\x2\x2\x1B6A\x1B5B\x3\x2\x2\x2\x1B6A\x1B5E\x3"+
		"\x2\x2\x2\x1B6A\x1B61\x3\x2\x2\x2\x1B6A\x1B64\x3\x2\x2\x2\x1B6B\x20B\x3"+
		"\x2\x2\x2\x1B6C\x1B70\a\x30D\x2\x2\x1B6D\x1B6E\a\x2BB\x2\x2\x1B6E\x1B6F"+
		"\a\x4A8\x2\x2\x1B6F\x1B71\a\x18\x2\x2\x1B70\x1B6D\x3\x2\x2\x2\x1B70\x1B71"+
		"\x3\x2\x2\x2\x1B71\x1B73\x3\x2\x2\x2\x1B72\x1B74\x5\x20E\x108\x2\x1B73"+
		"\x1B72\x3\x2\x2\x2\x1B73\x1B74\x3\x2\x2\x2\x1B74\x1B7D\x3\x2\x2\x2\x1B75"+
		"\x1B76\a\x30D\x2\x2\x1B76\x1B77\a\x2BB\x2\x2\x1B77\x1B78\a\x4A8\x2\x2"+
		"\x1B78\x1B7A\a\x4A2\x2\x2\x1B79\x1B7B\x5\x212\x10A\x2\x1B7A\x1B79\x3\x2"+
		"\x2\x2\x1B7A\x1B7B\x3\x2\x2\x2\x1B7B\x1B7D\x3\x2\x2\x2\x1B7C\x1B6C\x3"+
		"\x2\x2\x2\x1B7C\x1B75\x3\x2\x2\x2\x1B7D\x20D\x3\x2\x2\x2\x1B7E\x1B7F\a"+
		"\x439\x2\x2\x1B7F\x1B80\a\x4BA\x2\x2\x1B80\x1B85\x5\x210\x109\x2\x1B81"+
		"\x1B82\a\x4BC\x2\x2\x1B82\x1B84\x5\x210\x109\x2\x1B83\x1B81\x3\x2\x2\x2"+
		"\x1B84\x1B87\x3\x2\x2\x2\x1B85\x1B83\x3\x2\x2\x2\x1B85\x1B86\x3\x2\x2"+
		"\x2\x1B86\x1B88\x3\x2\x2\x2\x1B87\x1B85\x3\x2\x2\x2\x1B88\x1B89\a\x4BB"+
		"\x2\x2\x1B89\x20F\x3\x2\x2\x2\x1B8A\x1B8B\a\x2B0\x2\x2\x1B8B\x1B8C\a\x4A8"+
		"\x2\x2\x1B8C\x1BC7\x5\x4A0\x251\x2\x1B8D\x1B8E\a\x16C\x2\x2\x1B8E\x1B8F"+
		"\a\x4A8\x2\x2\x1B8F\x1BC7\a\x4A2\x2\x2\x1B90\x1B91\a\x39F\x2\x2\x1B91"+
		"\x1B92\a\x4A8\x2\x2\x1B92\x1BC7\x5\x4A0\x251\x2\x1B93\x1B94\a\x1B8\x2"+
		"\x2\x1B94\x1B95\a\x4A8\x2\x2\x1B95\x1BC7\x5\x4A0\x251\x2\x1B96\x1B97\a"+
		"\x3B6\x2\x2\x1B97\x1B98\a\x4A8\x2\x2\x1B98\x1BC7\x5\x4A0\x251\x2\x1B99"+
		"\x1B9A\a\x3B5\x2\x2\x1B9A\x1B9B\a\x4A8\x2\x2\x1B9B\x1BC7\x5\x4A0\x251"+
		"\x2\x1B9C\x1B9D\a\x295\x2\x2\x1B9D\x1BA6\a\x4A8\x2\x2\x1B9E\x1BA3\a\x294"+
		"\x2\x2\x1B9F\x1BA0\a\x4BA\x2\x2\x1BA0\x1BA1\x5\x262\x132\x2\x1BA1\x1BA2"+
		"\a\x4BB\x2\x2\x1BA2\x1BA4\x3\x2\x2\x2\x1BA3\x1B9F\x3\x2\x2\x2\x1BA3\x1BA4"+
		"\x3\x2\x2\x2\x1BA4\x1BA7\x3\x2\x2\x2\x1BA5\x1BA7\a\x28E\x2\x2\x1BA6\x1B9E"+
		"\x3\x2\x2\x2\x1BA6\x1BA5\x3\x2\x2\x2\x1BA7\x1BC7\x3\x2\x2\x2\x1BA8\x1BA9"+
		"\a\x335\x2\x2\x1BA9\x1BAA\a\x4A8\x2\x2\x1BAA\x1BC7\x5\x4A0\x251\x2\x1BAB"+
		"\x1BAC\a\x22B\x2\x2\x1BAC\x1BAD\a\x4A8\x2\x2\x1BAD\x1BAF\a\x4A2\x2\x2"+
		"\x1BAE\x1BB0\a\x244\x2\x2\x1BAF\x1BAE\x3\x2\x2\x2\x1BAF\x1BB0\x3\x2\x2"+
		"\x2\x1BB0\x1BC7\x3\x2\x2\x2\x1BB1\x1BB2\a\x1E\x2\x2\x1BB2\x1BB3\a\x4A8"+
		"\x2\x2\x1BB3\x1BC7\x5\x4A0\x251\x2\x1BB4\x1BB5\a\x1D\x2\x2\x1BB5\x1BB6"+
		"\a\x4A8\x2\x2\x1BB6\x1BC7\x5\x4A0\x251\x2\x1BB7\x1BB8\a\x223\x2\x2\x1BB8"+
		"\x1BB9\a\x4A8\x2\x2\x1BB9\x1BC7\a\x4A2\x2\x2\x1BBA\x1BBB\a\xE4\x2\x2\x1BBB"+
		"\x1BBC\a\x4A8\x2\x2\x1BBC\x1BBE\t\x42\x2\x2\x1BBD\x1BBF\x5\x216\x10C\x2"+
		"\x1BBE\x1BBD\x3\x2\x2\x2\x1BBE\x1BBF\x3\x2\x2\x2\x1BBF\x1BC7\x3\x2\x2"+
		"\x2\x1BC0\x1BC1\a\x448\x2\x2\x1BC1\x1BC2\a\x4A8\x2\x2\x1BC2\x1BC4\x5\x4A0"+
		"\x251\x2\x1BC3\x1BC5\x5\x216\x10C\x2\x1BC4\x1BC3\x3\x2\x2\x2\x1BC4\x1BC5"+
		"\x3\x2\x2\x2\x1BC5\x1BC7\x3\x2\x2\x2\x1BC6\x1B8A\x3\x2\x2\x2\x1BC6\x1B8D"+
		"\x3\x2\x2\x2\x1BC6\x1B90\x3\x2\x2\x2\x1BC6\x1B93\x3\x2\x2\x2\x1BC6\x1B96"+
		"\x3\x2\x2\x2\x1BC6\x1B99\x3\x2\x2\x2\x1BC6\x1B9C\x3\x2\x2\x2\x1BC6\x1BA8"+
		"\x3\x2\x2\x2\x1BC6\x1BAB\x3\x2\x2\x2\x1BC6\x1BB1\x3\x2\x2\x2\x1BC6\x1BB4"+
		"\x3\x2\x2\x2\x1BC6\x1BB7\x3\x2\x2\x2\x1BC6\x1BBA\x3\x2\x2\x2\x1BC6\x1BC0"+
		"\x3\x2\x2\x2\x1BC7\x211\x3\x2\x2\x2\x1BC8\x1BC9\a\x439\x2\x2\x1BC9\x1BCA"+
		"\a\x4BA\x2\x2\x1BCA\x1BCF\x5\x214\x10B\x2\x1BCB\x1BCC\a\x4BC\x2\x2\x1BCC"+
		"\x1BCE\x5\x214\x10B\x2\x1BCD\x1BCB\x3\x2\x2\x2\x1BCE\x1BD1\x3\x2\x2\x2"+
		"\x1BCF\x1BCD\x3\x2\x2\x2\x1BCF\x1BD0\x3\x2\x2\x2\x1BD0\x1BD2\x3\x2\x2"+
		"\x2\x1BD1\x1BCF\x3\x2\x2\x2\x1BD2\x1BD3\a\x4BB\x2\x2\x1BD3\x213\x3\x2"+
		"\x2\x2\x1BD4\x1BD5\a\x39F\x2\x2\x1BD5\x1BD6\a\x4A8\x2\x2\x1BD6\x1BF6\x5"+
		"\x4A0\x251\x2\x1BD7\x1BD8\a\x223\x2\x2\x1BD8\x1BD9\a\x4A8\x2\x2\x1BD9"+
		"\x1BF6\a\x4A2\x2\x2\x1BDA\x1BDB\a\x335\x2\x2\x1BDB\x1BDC\a\x4A8\x2\x2"+
		"\x1BDC\x1BF6\x5\x4A0\x251\x2\x1BDD\x1BDE\a\xE4\x2\x2\x1BDE\x1BDF\a\x4A8"+
		"\x2\x2\x1BDF\x1BE1\t\x42\x2\x2\x1BE0\x1BE2\x5\x216\x10C\x2\x1BE1\x1BE0"+
		"\x3\x2\x2\x2\x1BE1\x1BE2\x3\x2\x2\x2\x1BE2\x1BF6\x3\x2\x2\x2\x1BE3\x1BE4"+
		"\a\x448\x2\x2\x1BE4\x1BE5\a\x4A8\x2\x2\x1BE5\x1BE7\x5\x4A0\x251\x2\x1BE6"+
		"\x1BE8\x5\x216\x10C\x2\x1BE7\x1BE6\x3\x2\x2\x2\x1BE7\x1BE8\x3\x2\x2\x2"+
		"\x1BE8\x1BF6\x3\x2\x2\x2\x1BE9\x1BEA\a\x295\x2\x2\x1BEA\x1BF3\a\x4A8\x2"+
		"\x2\x1BEB\x1BF0\a\x294\x2\x2\x1BEC\x1BED\a\x4BA\x2\x2\x1BED\x1BEE\x5\x262"+
		"\x132\x2\x1BEE\x1BEF\a\x4BB\x2\x2\x1BEF\x1BF1\x3\x2\x2\x2\x1BF0\x1BEC"+
		"\x3\x2\x2\x2\x1BF0\x1BF1\x3\x2\x2\x2\x1BF1\x1BF4\x3\x2\x2\x2\x1BF2\x1BF4"+
		"\a\x28E\x2\x2\x1BF3\x1BEB\x3\x2\x2\x2\x1BF3\x1BF2\x3\x2\x2\x2\x1BF4\x1BF6"+
		"\x3\x2\x2\x2\x1BF5\x1BD4\x3\x2\x2\x2\x1BF5\x1BD7\x3\x2\x2\x2\x1BF5\x1BDA"+
		"\x3\x2\x2\x2\x1BF5\x1BDD\x3\x2\x2\x2\x1BF5\x1BE3\x3\x2\x2\x2\x1BF5\x1BE9"+
		"\x3\x2\x2\x2\x1BF6\x215\x3\x2\x2\x2\x1BF7\x1BF8\a\x294\x2\x2\x1BF8\x1BF9"+
		"\a\x2BC\x2\x2\x1BF9\x1BFA\a\x4BA\x2\x2\x1BFA\x1BFD\a\x4A2\x2\x2\x1BFB"+
		"\x1BFC\a\x3EB\x2\x2\x1BFC\x1BFE\a\x4A2\x2\x2\x1BFD\x1BFB\x3\x2\x2\x2\x1BFD"+
		"\x1BFE\x3\x2\x2\x2\x1BFE\x1C07\x3\x2\x2\x2\x1BFF\x1C00\a\x4BC\x2\x2\x1C00"+
		"\x1C03\a\x4A2\x2\x2\x1C01\x1C02\a\x3EB\x2\x2\x1C02\x1C04\a\x4A2\x2\x2"+
		"\x1C03\x1C01\x3\x2\x2\x2\x1C03\x1C04\x3\x2\x2\x2\x1C04\x1C06\x3\x2\x2"+
		"\x2\x1C05\x1BFF\x3\x2\x2\x2\x1C06\x1C09\x3\x2\x2\x2\x1C07\x1C05\x3\x2"+
		"\x2\x2\x1C07\x1C08\x3\x2\x2\x2\x1C08\x1C0A\x3\x2\x2\x2\x1C09\x1C07\x3"+
		"\x2\x2\x2\x1C0A\x1C0B\a\x4BB\x2\x2\x1C0B\x217\x3\x2\x2\x2\x1C0C\x1C0D"+
		"\a\xC9\x2\x2\x1C0D\x1C0E\a\x99\x2\x2\x1C0E\x1C0F\a\xA0\x2\x2\x1C0F\x1C10"+
		"\a\x1C6\x2\x2\x1C10\x1C11\x5\x4C2\x262\x2\x1C11\x1C12\a\x294\x2\x2\x1C12"+
		"\x1C14\x5\x488\x245\x2\x1C13\x1C15\x5\x21A\x10E\x2\x1C14\x1C13\x3\x2\x2"+
		"\x2\x1C14\x1C15\x3\x2\x2\x2\x1C15\x1C18\x3\x2\x2\x2\x1C16\x1C17\a\x294"+
		"\x2\x2\x1C17\x1C19\x5\x4C2\x262\x2\x1C18\x1C16\x3\x2\x2\x2\x1C18\x1C19"+
		"\x3\x2\x2\x2\x1C19\x1C1B\x3\x2\x2\x2\x1C1A\x1C1C\a\x4BD\x2\x2\x1C1B\x1C1A"+
		"\x3\x2\x2\x2\x1C1B\x1C1C\x3\x2\x2\x2\x1C1C\x219\x3\x2\x2\x2\x1C1D\x1C1E"+
		"\a\x439\x2\x2\x1C1E\x1C1F\a\x4BA\x2\x2\x1C1F\x1C24\x5\x21C\x10F\x2\x1C20"+
		"\x1C21\a\x4BC\x2\x2\x1C21\x1C23\x5\x21C\x10F\x2\x1C22\x1C20\x3\x2\x2\x2"+
		"\x1C23\x1C26\x3\x2\x2\x2\x1C24\x1C22\x3\x2\x2\x2\x1C24\x1C25\x3\x2\x2"+
		"\x2\x1C25\x1C27\x3\x2\x2\x2\x1C26\x1C24\x3\x2\x2\x2\x1C27\x1C28\a\x4BB"+
		"\x2\x2\x1C28\x21B\x3\x2\x2\x2\x1C29\x1C2A\a\x120\x2\x2\x1C2A\x1C2B\a\x4A8"+
		"\x2\x2\x1C2B\x1C3F\x5\x4A0\x251\x2\x1C2C\x1C2D\a\x223\x2\x2\x1C2D\x1C2E"+
		"\a\x4A8\x2\x2\x1C2E\x1C3F\a\x4A2\x2\x2\x1C2F\x1C30\a\x295\x2\x2\x1C30"+
		"\x1C31\a\x4A8\x2\x2\x1C31\x1C3F\x5\x4A0\x251\x2\x1C32\x1C33\a\xAB\x2\x2"+
		"\x1C33\x1C34\a\x4A8\x2\x2\x1C34\x1C36\a\x4A2\x2\x2\x1C35\x1C37\a\x244"+
		"\x2\x2\x1C36\x1C35\x3\x2\x2\x2\x1C36\x1C37\x3\x2\x2\x2\x1C37\x1C3F\x3"+
		"\x2\x2\x2\x1C38\x1C39\a\xE4\x2\x2\x1C39\x1C3A\a\x4A8\x2\x2\x1C3A\x1C3C"+
		"\t\x43\x2\x2\x1C3B\x1C3D\x5\x216\x10C\x2\x1C3C\x1C3B\x3\x2\x2\x2\x1C3C"+
		"\x1C3D\x3\x2\x2\x2\x1C3D\x1C3F\x3\x2\x2\x2\x1C3E\x1C29\x3\x2\x2\x2\x1C3E"+
		"\x1C2C\x3\x2\x2\x2\x1C3E\x1C2F\x3\x2\x2\x2\x1C3E\x1C32\x3\x2\x2\x2\x1C3E"+
		"\x1C38\x3\x2\x2\x2\x1C3F\x21D\x3\x2\x2\x2\x1C40\x1C42\a\xC9\x2\x2\x1C41"+
		"\x1C43\a\x26A\x2\x2\x1C42\x1C41\x3\x2\x2\x2\x1C42\x1C43\x3\x2\x2\x2\x1C43"+
		"\x1C44\x3\x2\x2\x2\x1C44\x1C45\a\xA0\x2\x2\x1C45\x1C46\a\x1C6\x2\x2\x1C46"+
		"\x1C47\x5\x4C2\x262\x2\x1C47\x1C48\a\x294\x2\x2\x1C48\x1C49\x5\x488\x245"+
		"\x2\x1C49\x1C4A\a\x4BA\x2\x2\x1C4A\x1C4B\x5\x496\x24C\x2\x1C4B\x1C4E\a"+
		"\x4BB\x2\x2\x1C4C\x1C4D\a\x436\x2\x2\x1C4D\x1C4F\x5\x3B4\x1DB\x2\x1C4E"+
		"\x1C4C\x3\x2\x2\x2\x1C4E\x1C4F\x3\x2\x2\x2\x1C4F\x1C51\x3\x2\x2\x2\x1C50"+
		"\x1C52\x5\x21A\x10E\x2\x1C51\x1C50\x3\x2\x2\x2\x1C51\x1C52\x3\x2\x2\x2"+
		"\x1C52\x1C55\x3\x2\x2\x2\x1C53\x1C54\a\x294\x2\x2\x1C54\x1C56\x5\x4C2"+
		"\x262\x2\x1C55\x1C53\x3\x2\x2\x2\x1C55\x1C56\x3\x2\x2\x2\x1C56\x1C58\x3"+
		"\x2\x2\x2\x1C57\x1C59\a\x4BD\x2\x2\x1C58\x1C57\x3\x2\x2\x2\x1C58\x1C59"+
		"\x3\x2\x2\x2\x1C59\x21F\x3\x2\x2\x2\x1C5A\x1C5C\a\xC9\x2\x2\x1C5B\x1C5D"+
		"\a\x2D9\x2\x2\x1C5C\x1C5B\x3\x2\x2\x2\x1C5C\x1C5D\x3\x2\x2\x2\x1C5D\x1C5E"+
		"\x3\x2\x2\x2\x1C5E\x1C5F\a\x444\x2\x2\x1C5F\x1C60\a\x1C6\x2\x2\x1C60\x1C61"+
		"\x5\x4C2\x262\x2\x1C61\x1C62\a\x294\x2\x2\x1C62\x1C63\x5\x488\x245\x2"+
		"\x1C63\x1C64\a\x4BA\x2\x2\x1C64\x1C65\x5\x4C2\x262\x2\x1C65\x1C70\a\x4BB"+
		"\x2\x2\x1C66\x1C67\a\x41F\x2\x2\x1C67\x1C68\a\x444\x2\x2\x1C68\x1C69\a"+
		"\x1C6\x2\x2\x1C69\x1C6E\x5\x4C2\x262\x2\x1C6A\x1C6C\a\x172\x2\x2\x1C6B"+
		"\x1C6D\t\x44\x2\x2\x1C6C\x1C6B\x3\x2\x2\x2\x1C6C\x1C6D\x3\x2\x2\x2\x1C6D"+
		"\x1C6F\x3\x2\x2\x2\x1C6E\x1C6A\x3\x2\x2\x2\x1C6E\x1C6F\x3\x2\x2\x2\x1C6F"+
		"\x1C71\x3\x2\x2\x2\x1C70\x1C66\x3\x2\x2\x2\x1C70\x1C71\x3\x2\x2\x2\x1C71"+
		"\x1C73\x3\x2\x2\x2\x1C72\x1C74\x5\x222\x112\x2\x1C73\x1C72\x3\x2\x2\x2"+
		"\x1C73\x1C74\x3\x2\x2\x2\x1C74\x1C76\x3\x2\x2\x2\x1C75\x1C77\a\x4BD\x2"+
		"\x2\x1C76\x1C75\x3\x2\x2\x2\x1C76\x1C77\x3\x2\x2\x2\x1C77\x221\x3\x2\x2"+
		"\x2\x1C78\x1C79\a\x439\x2\x2\x1C79\x1C7A\a\x4BA\x2\x2\x1C7A\x1C7F\x5\x224"+
		"\x113\x2\x1C7B\x1C7C\a\x4BC\x2\x2\x1C7C\x1C7E\x5\x224\x113\x2\x1C7D\x1C7B"+
		"\x3\x2\x2\x2\x1C7E\x1C81\x3\x2\x2\x2\x1C7F\x1C7D\x3\x2\x2\x2\x1C7F\x1C80"+
		"\x3\x2\x2\x2\x1C80\x1C82\x3\x2\x2\x2\x1C81\x1C7F\x3\x2\x2\x2\x1C82\x1C83"+
		"\a\x4BB\x2\x2\x1C83\x223\x3\x2\x2\x2\x1C84\x1C85\a\x2B0\x2\x2\x1C85\x1C86"+
		"\a\x4A8\x2\x2\x1C86\x1CAC\x5\x4A0\x251\x2\x1C87\x1C88\a\x16C\x2\x2\x1C88"+
		"\x1C89\a\x4A8\x2\x2\x1C89\x1CAC\a\x4A2\x2\x2\x1C8A\x1C8B\a\x39F\x2\x2"+
		"\x1C8B\x1C8C\a\x4A8\x2\x2\x1C8C\x1CAC\x5\x4A0\x251\x2\x1C8D\x1C8E\a\x1B8"+
		"\x2\x2\x1C8E\x1C8F\a\x4A8\x2\x2\x1C8F\x1CAC\x5\x4A0\x251\x2\x1C90\x1C91"+
		"\a\x120\x2\x2\x1C91\x1C92\a\x4A8\x2\x2\x1C92\x1CAC\x5\x4A0\x251\x2\x1C93"+
		"\x1C94\a\x295\x2\x2\x1C94\x1C9D\a\x4A8\x2\x2\x1C95\x1C9A\a\x294\x2\x2"+
		"\x1C96\x1C97\a\x4BA\x2\x2\x1C97\x1C98\x5\x262\x132\x2\x1C98\x1C99\a\x4BB"+
		"\x2\x2\x1C99\x1C9B\x3\x2\x2\x2\x1C9A\x1C96\x3\x2\x2\x2\x1C9A\x1C9B\x3"+
		"\x2\x2\x2\x1C9B\x1C9E\x3\x2\x2\x2\x1C9C\x1C9E\a\x28E\x2\x2\x1C9D\x1C95"+
		"\x3\x2\x2\x2\x1C9D\x1C9C\x3\x2\x2\x2\x1C9E\x1CAC\x3\x2\x2\x2\x1C9F\x1CA0"+
		"\a\x1E\x2\x2\x1CA0\x1CA1\a\x4A8\x2\x2\x1CA1\x1CAC\x5\x4A0\x251\x2\x1CA2"+
		"\x1CA3\a\x1D\x2\x2\x1CA3\x1CA4\a\x4A8\x2\x2\x1CA4\x1CAC\x5\x4A0\x251\x2"+
		"\x1CA5\x1CA6\a\x223\x2\x2\x1CA6\x1CA7\a\x4A8\x2\x2\x1CA7\x1CAC\a\x4A2"+
		"\x2\x2\x1CA8\x1CA9\a\x448\x2\x2\x1CA9\x1CAA\a\x4A8\x2\x2\x1CAA\x1CAC\x5"+
		"\x4A0\x251\x2\x1CAB\x1C84\x3\x2\x2\x2\x1CAB\x1C87\x3\x2\x2\x2\x1CAB\x1C8A"+
		"\x3\x2\x2\x2\x1CAB\x1C8D\x3\x2\x2\x2\x1CAB\x1C90\x3\x2\x2\x2\x1CAB\x1C93"+
		"\x3\x2\x2\x2\x1CAB\x1C9F\x3\x2\x2\x2\x1CAB\x1CA2\x3\x2\x2\x2\x1CAB\x1CA5"+
		"\x3\x2\x2\x2\x1CAB\x1CA8\x3\x2\x2\x2\x1CAC\x225\x3\x2\x2\x2\x1CAD\x1CB0"+
		"\a\xC9\x2\x2\x1CAE\x1CAF\a\x2A5\x2\x2\x1CAF\x1CB1\t\x45\x2\x2\x1CB0\x1CAE"+
		"\x3\x2\x2\x2\x1CB0\x1CB1\x3\x2\x2\x2\x1CB1\x1CB4\x3\x2\x2\x2\x1CB2\x1CB4"+
		"\a%\x2\x2\x1CB3\x1CAD\x3\x2\x2\x2\x1CB3\x1CB2\x3\x2\x2\x2\x1CB4\x1CB5"+
		"\x3\x2\x2\x2\x1CB5\x1CB6\t\x46\x2\x2\x1CB6\x1CB9\x5\x48C\x247\x2\x1CB7"+
		"\x1CB8\a\x4BD\x2\x2\x1CB8\x1CBA\a\x4A2\x2\x2\x1CB9\x1CB7\x3\x2\x2\x2\x1CB9"+
		"\x1CBA\x3\x2\x2\x2\x1CBA\x1CC9\x3\x2\x2\x2\x1CBB\x1CBD\a\x4BA\x2\x2\x1CBC"+
		"\x1CBB\x3\x2\x2\x2\x1CBC\x1CBD\x3\x2\x2\x2\x1CBD\x1CBE\x3\x2\x2\x2\x1CBE"+
		"\x1CC3\x5\x240\x121\x2\x1CBF\x1CC0\a\x4BC\x2\x2\x1CC0\x1CC2\x5\x240\x121"+
		"\x2\x1CC1\x1CBF\x3\x2\x2\x2\x1CC2\x1CC5\x3\x2\x2\x2\x1CC3\x1CC1\x3\x2"+
		"\x2\x2\x1CC3\x1CC4\x3\x2\x2\x2\x1CC4\x1CC7\x3\x2\x2\x2\x1CC5\x1CC3\x3"+
		"\x2\x2\x2\x1CC6\x1CC8\a\x4BB\x2\x2\x1CC7\x1CC6\x3\x2\x2\x2\x1CC7\x1CC8"+
		"\x3\x2\x2\x2\x1CC8\x1CCA\x3\x2\x2\x2\x1CC9\x1CBC\x3\x2\x2\x2\x1CC9\x1CCA"+
		"\x3\x2\x2\x2\x1CCA\x1CD4\x3\x2\x2\x2\x1CCB\x1CCC\a\x439\x2\x2\x1CCC\x1CD1"+
		"\x5\x242\x122\x2\x1CCD\x1CCE\a\x4BC\x2\x2\x1CCE\x1CD0\x5\x242\x122\x2"+
		"\x1CCF\x1CCD\x3\x2\x2\x2\x1CD0\x1CD3\x3\x2\x2\x2\x1CD1\x1CCF\x3\x2\x2"+
		"\x2\x1CD1\x1CD2\x3\x2\x2\x2\x1CD2\x1CD5\x3\x2\x2\x2\x1CD3\x1CD1\x3\x2"+
		"\x2\x2\x1CD4\x1CCB\x3\x2\x2\x2\x1CD4\x1CD5\x3\x2\x2\x2\x1CD5\x1CD8\x3"+
		"\x2\x2\x2\x1CD6\x1CD7\a\x172\x2\x2\x1CD7\x1CD9\a\x325\x2\x2\x1CD8\x1CD6"+
		"\x3\x2\x2\x2\x1CD8\x1CD9\x3\x2\x2\x2\x1CD9\x1CDA\x3\x2\x2\x2\x1CDA\x1CE2"+
		"\a:\x2\x2\x1CDB\x1CE3\x5\x228\x115\x2\x1CDC\x1CDE\x5\b\x5\x2\x1CDD\x1CDC"+
		"\x3\x2\x2\x2\x1CDE\x1CE1\x3\x2\x2\x2\x1CDF\x1CDD\x3\x2\x2\x2\x1CDF\x1CE0"+
		"\x3\x2\x2\x2\x1CE0\x1CE3\x3\x2\x2\x2\x1CE1\x1CDF\x3\x2\x2\x2\x1CE2\x1CDB"+
		"\x3\x2\x2\x2\x1CE2\x1CDF\x3\x2\x2\x2\x1CE3\x227\x3\x2\x2\x2\x1CE4\x1CE5"+
		"\a\x150\x2\x2\x1CE5\x1CE6\a\x253\x2\x2\x1CE6\x1CE7\x5\x4C2\x262\x2\x1CE7"+
		"\x1CE8\a\x4B5\x2\x2\x1CE8\x1CE9\x5\x4C2\x262\x2\x1CE9\x1CEA\a\x4B5\x2"+
		"\x2\x1CEA\x1CEB\x5\x4C2\x262\x2\x1CEB\x229\x3\x2\x2\x2\x1CEC\x1CEF\x5"+
		"\x22C\x117\x2\x1CED\x1CEF\x5\x232\x11A\x2\x1CEE\x1CEC\x3\x2\x2\x2\x1CEE"+
		"\x1CED\x3\x2\x2\x2\x1CEF\x22B\x3\x2\x2\x2\x1CF0\x1CF3\a\xC9\x2\x2\x1CF1"+
		"\x1CF2\a\x2A5\x2\x2\x1CF2\x1CF4\t\x45\x2\x2\x1CF3\x1CF1\x3\x2\x2\x2\x1CF3"+
		"\x1CF4\x3\x2\x2\x2\x1CF4\x1CF7\x3\x2\x2\x2\x1CF5\x1CF7\a%\x2\x2\x1CF6"+
		"\x1CF0\x3\x2\x2\x2\x1CF6\x1CF5\x3\x2\x2\x2\x1CF7\x1CF8\x3\x2\x2\x2\x1CF8"+
		"\x1CF9\a\x3F8\x2\x2\x1CF9\x1CFA\x5\x48A\x246\x2\x1CFA\x1CFB\a\x294\x2"+
		"\x2\x1CFB\x1D05\x5\x488\x245\x2\x1CFC\x1CFD\a\x439\x2\x2\x1CFD\x1D02\x5"+
		"\x22E\x118\x2\x1CFE\x1CFF\a\x4BC\x2\x2\x1CFF\x1D01\x5\x22E\x118\x2\x1D00"+
		"\x1CFE\x3\x2\x2\x2\x1D01\x1D04\x3\x2\x2\x2\x1D02\x1D00\x3\x2\x2\x2\x1D02"+
		"\x1D03\x3\x2\x2\x2\x1D03\x1D06\x3\x2\x2\x2\x1D04\x1D02\x3\x2\x2\x2\x1D05"+
		"\x1CFC\x3\x2\x2\x2\x1D05\x1D06\x3\x2\x2\x2\x1D06\x1D0B\x3\x2\x2\x2\x1D07"+
		"\x1D0C\a\x172\x2\x2\x1D08\x1D0C\a\x15\x2\x2\x1D09\x1D0A\a\x1D2\x2\x2\x1D0A"+
		"\x1D0C\a\x28D\x2\x2\x1D0B\x1D07\x3\x2\x2\x2\x1D0B\x1D08\x3\x2\x2\x2\x1D0B"+
		"\x1D09\x3\x2\x2\x2\x1D0C\x1D0D\x3\x2\x2\x2\x1D0D\x1D12\x5\x230\x119\x2"+
		"\x1D0E\x1D0F\a\x4BC\x2\x2\x1D0F\x1D11\x5\x230\x119\x2\x1D10\x1D0E\x3\x2"+
		"\x2\x2\x1D11\x1D14\x3\x2\x2\x2\x1D12\x1D10\x3\x2\x2\x2\x1D12\x1D13\x3"+
		"\x2\x2\x2\x1D13\x1D17\x3\x2\x2\x2\x1D14\x1D12\x3\x2\x2\x2\x1D15\x1D16"+
		"\a\x439\x2\x2\x1D16\x1D18\a\x31\x2\x2\x1D17\x1D15\x3\x2\x2\x2\x1D17\x1D18"+
		"\x3\x2\x2\x2\x1D18\x1D1C\x3\x2\x2\x2\x1D19\x1D1A\a\x271\x2\x2\x1D1A\x1D1B"+
		"\a\x172\x2\x2\x1D1B\x1D1D\a\x325\x2\x2\x1D1C\x1D19\x3\x2\x2\x2\x1D1C\x1D1D"+
		"\x3\x2\x2\x2\x1D1D\x1D1E\x3\x2\x2\x2\x1D1E\x1D20\a:\x2\x2\x1D1F\x1D21"+
		"\x5\b\x5\x2\x1D20\x1D1F\x3\x2\x2\x2\x1D21\x1D22\x3\x2\x2\x2\x1D22\x1D20"+
		"\x3\x2\x2\x2\x1D22\x1D23\x3\x2\x2\x2\x1D23\x22D\x3\x2\x2\x2\x1D24\x1D27"+
		"\a\x12E\x2\x2\x1D25\x1D27\x5\x35E\x1B0\x2\x1D26\x1D24\x3\x2\x2\x2\x1D26"+
		"\x1D25\x3\x2\x2\x2\x1D27\x22F\x3\x2\x2\x2\x1D28\x1D29\tG\x2\x2\x1D29\x231"+
		"\x3\x2\x2\x2\x1D2A\x1D2D\a\xC9\x2\x2\x1D2B\x1D2C\a\x2A5\x2\x2\x1D2C\x1D2E"+
		"\t\x45\x2\x2\x1D2D\x1D2B\x3\x2\x2\x2\x1D2D\x1D2E\x3\x2\x2\x2\x1D2E\x1D31"+
		"\x3\x2\x2\x2\x1D2F\x1D31\a%\x2\x2\x1D30\x1D2A\x3\x2\x2\x2\x1D30\x1D2F"+
		"\x3\x2\x2\x2\x1D31\x1D32\x3\x2\x2\x2\x1D32\x1D33\a\x3F8\x2\x2\x1D33\x1D34"+
		"\x5\x48A\x246\x2\x1D34\x1D38\a\x294\x2\x2\x1D35\x1D36\a\x18\x2\x2\x1D36"+
		"\x1D39\a\x37A\x2\x2\x1D37\x1D39\a\xDD\x2\x2\x1D38\x1D35\x3\x2\x2\x2\x1D38"+
		"\x1D37\x3\x2\x2\x2\x1D39\x1D43\x3\x2\x2\x2\x1D3A\x1D3B\a\x439\x2\x2\x1D3B"+
		"\x1D40\x5\x22E\x118\x2\x1D3C\x1D3D\a\x4BC\x2\x2\x1D3D\x1D3F\x5\x22E\x118"+
		"\x2\x1D3E\x1D3C\x3\x2\x2\x2\x1D3F\x1D42\x3\x2\x2\x2\x1D40\x1D3E\x3\x2"+
		"\x2\x2\x1D40\x1D41\x3\x2\x2\x2\x1D41\x1D44\x3\x2\x2\x2\x1D42\x1D40\x3"+
		"\x2\x2\x2\x1D43\x1D3A\x3\x2\x2\x2\x1D43\x1D44\x3\x2\x2\x2\x1D44\x1D45"+
		"\x3\x2\x2\x2\x1D45\x1D46\tH\x2\x2\x1D46\x1D4B\x5\x234\x11B\x2\x1D47\x1D48"+
		"\a\x4BC\x2\x2\x1D48\x1D4A\x5\x234\x11B\x2\x1D49\x1D47\x3\x2\x2\x2\x1D4A"+
		"\x1D4D\x3\x2\x2\x2\x1D4B\x1D49\x3\x2\x2\x2\x1D4B\x1D4C\x3\x2\x2\x2\x1D4C"+
		"\x1D4E\x3\x2\x2\x2\x1D4D\x1D4B\x3\x2\x2\x2\x1D4E\x1D50\a:\x2\x2\x1D4F"+
		"\x1D51\x5\b\x5\x2\x1D50\x1D4F\x3\x2\x2\x2\x1D51\x1D52\x3\x2\x2\x2\x1D52"+
		"\x1D50\x3\x2\x2\x2\x1D52\x1D53\x3\x2\x2\x2\x1D53\x233\x3\x2\x2\x2\x1D54"+
		"\x1D55\x5\x4C4\x263\x2\x1D55\x235\x3\x2\x2\x2\x1D56\x1D59\a\xC9\x2\x2"+
		"\x1D57\x1D58\a\x2A5\x2\x2\x1D58\x1D5A\a%\x2\x2\x1D59\x1D57\x3\x2\x2\x2"+
		"\x1D59\x1D5A\x3\x2\x2\x2\x1D5A\x1D5D\x3\x2\x2\x2\x1D5B\x1D5D\a%\x2\x2"+
		"\x1D5C\x1D56\x3\x2\x2\x2\x1D5C\x1D5B\x3\x2\x2\x2\x1D5D\x1D5E\x3\x2\x2"+
		"\x2\x1D5E\x1D5F\a\x187\x2\x2\x1D5F\x1D6D\x5\x48C\x247\x2\x1D60\x1D61\a"+
		"\x4BA\x2\x2\x1D61\x1D66\x5\x240\x121\x2\x1D62\x1D63\a\x4BC\x2\x2\x1D63"+
		"\x1D65\x5\x240\x121\x2\x1D64\x1D62\x3\x2\x2\x2\x1D65\x1D68\x3\x2\x2\x2"+
		"\x1D66\x1D64\x3\x2\x2\x2\x1D66\x1D67\x3\x2\x2\x2\x1D67\x1D69\x3\x2\x2"+
		"\x2\x1D68\x1D66\x3\x2\x2\x2\x1D69\x1D6A\a\x4BB\x2\x2\x1D6A\x1D6E\x3\x2"+
		"\x2\x2\x1D6B\x1D6C\a\x4BA\x2\x2\x1D6C\x1D6E\a\x4BB\x2\x2\x1D6D\x1D60\x3"+
		"\x2\x2\x2\x1D6D\x1D6B\x3\x2\x2\x2\x1D6E\x1D72\x3\x2\x2\x2\x1D6F\x1D73"+
		"\x5\x238\x11D\x2\x1D70\x1D73\x5\x23A\x11E\x2\x1D71\x1D73\x5\x23C\x11F"+
		"\x2\x1D72\x1D6F\x3\x2\x2\x2\x1D72\x1D70\x3\x2\x2\x2\x1D72\x1D71\x3\x2"+
		"\x2\x2\x1D73\x1D75\x3\x2\x2\x2\x1D74\x1D76\a\x4BD\x2\x2\x1D75\x1D74\x3"+
		"\x2\x2\x2\x1D75\x1D76\x3\x2\x2\x2\x1D76\x237\x3\x2\x2\x2\x1D77\x1D78\a"+
		"\x33A\x2\x2\x1D78\x1D82\a\x3D7\x2\x2\x1D79\x1D7A\a\x439\x2\x2\x1D7A\x1D7F"+
		"\x5\x244\x123\x2\x1D7B\x1D7C\a\x4BC\x2\x2\x1D7C\x1D7E\x5\x244\x123\x2"+
		"\x1D7D\x1D7B\x3\x2\x2\x2\x1D7E\x1D81\x3\x2\x2\x2\x1D7F\x1D7D\x3\x2\x2"+
		"\x2\x1D7F\x1D80\x3\x2\x2\x2\x1D80\x1D83\x3\x2\x2\x2\x1D81\x1D7F\x3\x2"+
		"\x2\x2\x1D82\x1D79\x3\x2\x2\x2\x1D82\x1D83\x3\x2\x2\x2\x1D83\x1D85\x3"+
		"\x2\x2\x2\x1D84\x1D86\a:\x2\x2\x1D85\x1D84\x3\x2\x2\x2\x1D85\x1D86\x3"+
		"\x2\x2\x2\x1D86\x1D90\x3\x2\x2\x2\x1D87\x1D91\x5\x228\x115\x2\x1D88\x1D8E"+
		"\a\x339\x2\x2\x1D89\x1D8A\a\x4BA\x2\x2\x1D8A\x1D8B\x5\x1E4\xF3\x2\x1D8B"+
		"\x1D8C\a\x4BB\x2\x2\x1D8C\x1D8F\x3\x2\x2\x2\x1D8D\x1D8F\x5\x1E4\xF3\x2"+
		"\x1D8E\x1D89\x3\x2\x2\x2\x1D8E\x1D8D\x3\x2\x2\x2\x1D8F\x1D91\x3\x2\x2"+
		"\x2\x1D90\x1D87\x3\x2\x2\x2\x1D90\x1D88\x3\x2\x2\x2\x1D91\x239\x3\x2\x2"+
		"\x2\x1D92\x1D93\a\x33A\x2\x2\x1D93\x1D94\a\x4A0\x2\x2\x1D94\x1D9E\x5\x362"+
		"\x1B2\x2\x1D95\x1D96\a\x439\x2\x2\x1D96\x1D9B\x5\x244\x123\x2\x1D97\x1D98"+
		"\a\x4BC\x2\x2\x1D98\x1D9A\x5\x244\x123\x2\x1D99\x1D97\x3\x2\x2\x2\x1D9A"+
		"\x1D9D\x3\x2\x2\x2\x1D9B\x1D99\x3\x2\x2\x2\x1D9B\x1D9C\x3\x2\x2\x2\x1D9C"+
		"\x1D9F\x3\x2\x2\x2\x1D9D\x1D9B\x3\x2\x2\x2\x1D9E\x1D95\x3\x2\x2\x2\x1D9E"+
		"\x1D9F\x3\x2\x2\x2\x1D9F\x1DA1\x3\x2\x2\x2\x1DA0\x1DA2\a:\x2\x2\x1DA1"+
		"\x1DA0\x3\x2\x2\x2\x1DA1\x1DA2\x3\x2\x2\x2\x1DA2\x1DB3\x3\x2\x2\x2\x1DA3"+
		"\x1DB4\x5\x228\x115\x2\x1DA4\x1DA8\a\\\x2\x2\x1DA5\x1DA7\x5\b\x5\x2\x1DA6"+
		"\x1DA5\x3\x2\x2\x2\x1DA7\x1DAA\x3\x2\x2\x2\x1DA8\x1DA6\x3\x2\x2\x2\x1DA8"+
		"\x1DA9\x3\x2\x2\x2\x1DA9\x1DAB\x3\x2\x2\x2\x1DAA\x1DA8\x3\x2\x2\x2\x1DAB"+
		"\x1DAD\a\x339\x2\x2\x1DAC\x1DAE\a\x4BD\x2\x2\x1DAD\x1DAC\x3\x2\x2\x2\x1DAD"+
		"\x1DAE\x3\x2\x2\x2\x1DAE\x1DAF\x3\x2\x2\x2\x1DAF\x1DB1\a\x130\x2\x2\x1DB0"+
		"\x1DB2\a\x4BD\x2\x2\x1DB1\x1DB0\x3\x2\x2\x2\x1DB1\x1DB2\x3\x2\x2\x2\x1DB2"+
		"\x1DB4\x3\x2\x2\x2\x1DB3\x1DA3\x3\x2\x2\x2\x1DB3\x1DA4\x3\x2\x2\x2\x1DB4"+
		"\x23B\x3\x2\x2\x2\x1DB5\x1DB6\a\x33A\x2\x2\x1DB6\x1DC0\x5\x4BA\x25E\x2"+
		"\x1DB7\x1DB8\a\x439\x2\x2\x1DB8\x1DBD\x5\x244\x123\x2\x1DB9\x1DBA\a\x4BC"+
		"\x2\x2\x1DBA\x1DBC\x5\x244\x123\x2\x1DBB\x1DB9\x3\x2\x2\x2\x1DBC\x1DBF"+
		"\x3\x2\x2\x2\x1DBD\x1DBB\x3\x2\x2\x2\x1DBD\x1DBE\x3\x2\x2\x2\x1DBE\x1DC1"+
		"\x3\x2\x2\x2\x1DBF\x1DBD\x3\x2\x2\x2\x1DC0\x1DB7\x3\x2\x2\x2\x1DC0\x1DC1"+
		"\x3\x2\x2\x2\x1DC1\x1DC3\x3\x2\x2\x2\x1DC2\x1DC4\a:\x2\x2\x1DC3\x1DC2"+
		"\x3\x2\x2\x2\x1DC3\x1DC4\x3\x2\x2\x2\x1DC4\x1DD4\x3\x2\x2\x2\x1DC5\x1DD5"+
		"\x5\x228\x115\x2\x1DC6\x1DCA\a\\\x2\x2\x1DC7\x1DC9\x5\b\x5\x2\x1DC8\x1DC7"+
		"\x3\x2\x2\x2\x1DC9\x1DCC\x3\x2\x2\x2\x1DCA\x1DC8\x3\x2\x2\x2\x1DCA\x1DCB"+
		"\x3\x2\x2\x2\x1DCB\x1DCD\x3\x2\x2\x2\x1DCC\x1DCA\x3\x2\x2\x2\x1DCD\x1DCE"+
		"\a\x339\x2\x2\x1DCE\x1DD0\x5\x39C\x1CF\x2\x1DCF\x1DD1\a\x4BD\x2\x2\x1DD0"+
		"\x1DCF\x3\x2\x2\x2\x1DD0\x1DD1\x3\x2\x2\x2\x1DD1\x1DD2\x3\x2\x2\x2\x1DD2"+
		"\x1DD3\a\x130\x2\x2\x1DD3\x1DD5\x3\x2\x2\x2\x1DD4\x1DC5\x3\x2\x2\x2\x1DD4"+
		"\x1DC6\x3\x2\x2\x2\x1DD5\x23D\x3\x2\x2\x2\x1DD6\x1DDB\a\x281\x2\x2\x1DD7"+
		"\x1DDB\a\xF9\x2\x2\x1DD8\x1DDB\x5\x4BC\x25F\x2\x1DD9\x1DDB\a\x4A0\x2\x2"+
		"\x1DDA\x1DD6\x3\x2\x2\x2\x1DDA\x1DD7\x3\x2\x2\x2\x1DDA\x1DD8\x3\x2\x2"+
		"\x2\x1DDA\x1DD9\x3\x2\x2\x2\x1DDB\x23F\x3\x2\x2\x2\x1DDC\x1DDE\a\x4A0"+
		"\x2\x2\x1DDD\x1DDF\a:\x2\x2\x1DDE\x1DDD\x3\x2\x2\x2\x1DDE\x1DDF\x3\x2"+
		"\x2\x2\x1DDF\x1DE3\x3\x2\x2\x2\x1DE0\x1DE1\x5\x4C2\x262\x2\x1DE1\x1DE2"+
		"\a\x4B5\x2\x2\x1DE2\x1DE4\x3\x2\x2\x2\x1DE3\x1DE0\x3\x2\x2\x2\x1DE3\x1DE4"+
		"\x3\x2\x2\x2\x1DE4\x1DE5\x3\x2\x2\x2\x1DE5\x1DE7\x5\x4BA\x25E\x2\x1DE6"+
		"\x1DE8\a\x428\x2\x2\x1DE7\x1DE6\x3\x2\x2\x2\x1DE7\x1DE8\x3\x2\x2\x2\x1DE8"+
		"\x1DEB\x3\x2\x2\x2\x1DE9\x1DEA\a\x4A8\x2\x2\x1DEA\x1DEC\x5\x23E\x120\x2"+
		"\x1DEB\x1DE9\x3\x2\x2\x2\x1DEB\x1DEC\x3\x2\x2\x2\x1DEC\x1DEE\x3\x2\x2"+
		"\x2\x1DED\x1DEF\tI\x2\x2\x1DEE\x1DED\x3\x2\x2\x2\x1DEE\x1DEF\x3\x2\x2"+
		"\x2\x1DEF\x241\x3\x2\x2\x2\x1DF0\x1DF4\a\x12E\x2\x2\x1DF1\x1DF4\a\x30F"+
		"\x2\x2\x1DF2\x1DF4\x5\x35E\x1B0\x2\x1DF3\x1DF0\x3\x2\x2\x2\x1DF3\x1DF1"+
		"\x3\x2\x2\x2\x1DF3\x1DF2\x3\x2\x2\x2\x1DF4\x243\x3\x2\x2\x2\x1DF5\x1E02"+
		"\a\x12E\x2\x2\x1DF6\x1E02\a\x35B\x2\x2\x1DF7\x1DF8\a\x33A\x2\x2\x1DF8"+
		"\x1DF9\a\x281\x2\x2\x1DF9\x1DFA\a\x294\x2\x2\x1DFA\x1DFB\a\x281\x2\x2"+
		"\x1DFB\x1E02\a\x1CE\x2\x2\x1DFC\x1DFD\ar\x2\x2\x1DFD\x1DFE\a\x294\x2\x2"+
		"\x1DFE\x1DFF\a\x281\x2\x2\x1DFF\x1E02\a\x1CE\x2\x2\x1E00\x1E02\x5\x35E"+
		"\x1B0\x2\x1E01\x1DF5\x3\x2\x2\x2\x1E01\x1DF6\x3\x2\x2\x2\x1E01\x1DF7\x3"+
		"\x2\x2\x2\x1E01\x1DFC\x3\x2\x2\x2\x1E01\x1E00\x3\x2\x2\x2\x1E02\x245\x3"+
		"\x2\x2\x2\x1E03\x1E04\a\xC9\x2\x2\x1E04\x1E05\a\x3B4\x2\x2\x1E05\x1E06"+
		"\x5\x4C2\x262\x2\x1E06\x1E07\a\x294\x2\x2\x1E07\x1E08\x5\x488\x245\x2"+
		"\x1E08\x1E09\a\x4BA\x2\x2\x1E09\x1E0A\x5\x49C\x24F\x2\x1E0A\x1E1D\a\x4BB"+
		"\x2\x2\x1E0B\x1E11\a\x439\x2\x2\x1E0C\x1E12\a\x183\x2\x2\x1E0D\x1E0E\a"+
		"\x357\x2\x2\x1E0E\x1E0F\a\x4A2\x2\x2\x1E0F\x1E12\tJ\x2\x2\x1E10\x1E12"+
		"\a\x3B9\x2\x2\x1E11\x1E0C\x3\x2\x2\x2\x1E11\x1E0D\x3\x2\x2\x2\x1E11\x1E10"+
		"\x3\x2\x2\x2\x1E12\x1E15\x3\x2\x2\x2\x1E13\x1E14\a\x4BC\x2\x2\x1E14\x1E16"+
		"\a\x26D\x2\x2\x1E15\x1E13\x3\x2\x2\x2\x1E15\x1E16\x3\x2\x2\x2\x1E16\x1E1B"+
		"\x3\x2\x2\x2\x1E17\x1E18\a\x4BC\x2\x2\x1E18\x1E19\a\x1C5\x2\x2\x1E19\x1E1A"+
		"\a\x4A8\x2\x2\x1E1A\x1E1C\x5\x4A0\x251\x2\x1E1B\x1E17\x3\x2\x2\x2\x1E1B"+
		"\x1E1C\x3\x2\x2\x2\x1E1C\x1E1E\x3\x2\x2\x2\x1E1D\x1E0B\x3\x2\x2\x2\x1E1D"+
		"\x1E1E\x3\x2\x2\x2\x1E1E\x1E20\x3\x2\x2\x2\x1E1F\x1E21\a\x4BD\x2\x2\x1E20"+
		"\x1E1F\x3\x2\x2\x2\x1E20\x1E21\x3\x2\x2\x2\x1E21\x247\x3\x2\x2\x2\x1E22"+
		"\x1E23\a\x415\x2\x2\x1E23\x1E24\a\x3B4\x2\x2\x1E24\x1E31\x5\x486\x244"+
		"\x2\x1E25\x1E32\x5\x4C2\x262\x2\x1E26\x1E27\a\x4BA\x2\x2\x1E27\x1E2C\x5"+
		"\x4C2\x262\x2\x1E28\x1E29\a\x4BC\x2\x2\x1E29\x1E2B\x5\x4C2\x262\x2\x1E2A"+
		"\x1E28\x3\x2\x2\x2\x1E2B\x1E2E\x3\x2\x2\x2\x1E2C\x1E2A\x3\x2\x2\x2\x1E2C"+
		"\x1E2D\x3\x2\x2\x2\x1E2D\x1E2F\x3\x2\x2\x2\x1E2E\x1E2C\x3\x2\x2\x2\x1E2F"+
		"\x1E30\a\x4BB\x2\x2\x1E30\x1E32\x3\x2\x2\x2\x1E31\x1E25\x3\x2\x2\x2\x1E31"+
		"\x1E26\x3\x2\x2\x2\x1E31\x1E32\x3\x2\x2\x2\x1E32\x1E34\x3\x2\x2\x2\x1E33"+
		"\x1E35\x5\x24A\x126\x2\x1E34\x1E33\x3\x2\x2\x2\x1E34\x1E35\x3\x2\x2\x2"+
		"\x1E35\x249\x3\x2\x2\x2\x1E36\x1E37\a\x439\x2\x2\x1E37\x1E3C\x5\x24C\x127"+
		"\x2\x1E38\x1E39\a\x4BC\x2\x2\x1E39\x1E3B\x5\x24C\x127\x2\x1E3A\x1E38\x3"+
		"\x2\x2\x2\x1E3B\x1E3E\x3\x2\x2\x2\x1E3C\x1E3A\x3\x2\x2\x2\x1E3C\x1E3D"+
		"\x3\x2\x2\x2\x1E3D\x24B\x3\x2\x2\x2\x1E3E\x1E3C\x3\x2\x2\x2\x1E3F\x1E46"+
		"\a\x183\x2\x2\x1E40\x1E42\a\x4BC\x2\x2\x1E41\x1E40\x3\x2\x2\x2\x1E41\x1E42"+
		"\x3\x2\x2\x2\x1E42\x1E43\x3\x2\x2\x2\x1E43\x1E44\a\x2CA\x2\x2\x1E44\x1E45"+
		"\a\x4A8\x2\x2\x1E45\x1E47\x5\x4A0\x251\x2\x1E46\x1E41\x3\x2\x2\x2\x1E46"+
		"\x1E47\x3\x2\x2\x2\x1E47\x1E6E\x3\x2\x2\x2\x1E48\x1E49\a\x357\x2\x2\x1E49"+
		"\x1E4A\a\x4A2\x2\x2\x1E4A\x1E51\tJ\x2\x2\x1E4B\x1E4D\a\x4BC\x2\x2\x1E4C"+
		"\x1E4B\x3\x2\x2\x2\x1E4C\x1E4D\x3\x2\x2\x2\x1E4D\x1E4E\x3\x2\x2\x2\x1E4E"+
		"\x1E4F\a\x2CA\x2\x2\x1E4F\x1E50\a\x4A8\x2\x2\x1E50\x1E52\x5\x4A0\x251"+
		"\x2\x1E51\x1E4C\x3\x2\x2\x2\x1E51\x1E52\x3\x2\x2\x2\x1E52\x1E6E\x3\x2"+
		"\x2\x2\x1E53\x1E55\a\x32B\x2\x2\x1E54\x1E56\x5\x216\x10C\x2\x1E55\x1E54"+
		"\x3\x2\x2\x2\x1E55\x1E56\x3\x2\x2\x2\x1E56\x1E6E\x3\x2\x2\x2\x1E57\x1E58"+
		"\a\x3B9\x2\x2\x1E58\x1E59\a\x4A8\x2\x2\x1E59\x1E6E\x5\x39C\x1CF\x2\x1E5A"+
		"\x1E5B\a\x347\x2\x2\x1E5B\x1E5C\a\x4A8\x2\x2\x1E5C\x1E6E\a\x4A2\x2\x2"+
		"\x1E5D\x1E5E\a\x2B2\x2\x2\x1E5E\x1E5F\a\x4A8\x2\x2\x1E5F\x1E6E\a\x4A2"+
		"\x2\x2\x1E60\x1E6E\a\x18\x2\x2\x1E61\x1E6E\a\x9F\x2\x2\x1E62\x1E6E\a\x1C6"+
		"\x2\x2\x1E63\x1E6E\a\x26D\x2\x2\x1E64\x1E65\a\x1C5\x2\x2\x1E65\x1E66\a"+
		"\x4A8\x2\x2\x1E66\x1E6E\x5\x4A0\x251\x2\x1E67\x1E68\a\x223\x2\x2\x1E68"+
		"\x1E69\a\x4A8\x2\x2\x1E69\x1E6E\a\x4A2\x2\x2\x1E6A\x1E6B\aO\x2\x2\x1E6B"+
		"\x1E6C\a\x4A8\x2\x2\x1E6C\x1E6E\x5\x4A0\x251\x2\x1E6D\x1E3F\x3\x2\x2\x2"+
		"\x1E6D\x1E48\x3\x2\x2\x2\x1E6D\x1E53\x3\x2\x2\x2\x1E6D\x1E57\x3\x2\x2"+
		"\x2\x1E6D\x1E5A\x3\x2\x2\x2\x1E6D\x1E5D\x3\x2\x2\x2\x1E6D\x1E60\x3\x2"+
		"\x2\x2\x1E6D\x1E61\x3\x2\x2\x2\x1E6D\x1E62\x3\x2\x2\x2\x1E6D\x1E63\x3"+
		"\x2\x2\x2\x1E6D\x1E64\x3\x2\x2\x2\x1E6D\x1E67\x3\x2\x2\x2\x1E6D\x1E6A"+
		"\x3\x2\x2\x2\x1E6E\x24D\x3\x2\x2\x2\x1E6F\x1E70\a\xC9\x2\x2\x1E70\x1E71"+
		"\a\x3D7\x2\x2\x1E71\x1E72\x5\x488\x245\x2\x1E72\x1E73\a\x4BA\x2\x2\x1E73"+
		"\x1E7A\x5\x36A\x1B6\x2\x1E74\x1E76\a\x4BC\x2\x2\x1E75\x1E74\x3\x2\x2\x2"+
		"\x1E75\x1E76\x3\x2\x2\x2\x1E76\x1E77\x3\x2\x2\x2\x1E77\x1E79\x5\x250\x129"+
		"\x2\x1E78\x1E75\x3\x2\x2\x2\x1E79\x1E7C\x3\x2\x2\x2\x1E7A\x1E78\x3\x2"+
		"\x2\x2\x1E7A\x1E7B\x3\x2\x2\x2\x1E7B\x1E7E\x3\x2\x2\x2\x1E7C\x1E7A\x3"+
		"\x2\x2\x2\x1E7D\x1E7F\a\x4BC\x2\x2\x1E7E\x1E7D\x3\x2\x2\x2\x1E7E\x1E7F"+
		"\x3\x2\x2\x2\x1E7F\x1E80\x3\x2\x2\x2\x1E80\x1E83\a\x4BB\x2\x2\x1E81\x1E82"+
		"\a\x212\x2\x2\x1E82\x1E84\x5\x4C4\x263\x2\x1E83\x1E81\x3\x2\x2\x2\x1E83"+
		"\x1E84\x3\x2\x2\x2\x1E84\x1E88\x3\x2\x2\x2\x1E85\x1E87\x5\x252\x12A\x2"+
		"\x1E86\x1E85\x3\x2\x2\x2\x1E87\x1E8A\x3\x2\x2\x2\x1E88\x1E86\x3\x2\x2"+
		"\x2\x1E88\x1E89\x3\x2\x2\x2\x1E89\x1E8F\x3\x2\x2\x2\x1E8A\x1E88\x3\x2"+
		"\x2\x2\x1E8B\x1E8C\a\x294\x2\x2\x1E8C\x1E90\x5\x4C2\x262\x2\x1E8D\x1E90"+
		"\a\xF9\x2\x2\x1E8E\x1E90\x5\x37A\x1BE\x2\x1E8F\x1E8B\x3\x2\x2\x2\x1E8F"+
		"\x1E8D\x3\x2\x2\x2\x1E8F\x1E8E\x3\x2\x2\x2\x1E8F\x1E90\x3\x2\x2\x2\x1E90"+
		"\x1E94\x3\x2\x2\x2\x1E91\x1E92\a\x3E2\x2\x2\x1E92\x1E95\x5\x4C2\x262\x2"+
		"\x1E93\x1E95\a\xF9\x2\x2\x1E94\x1E91\x3\x2\x2\x2\x1E94\x1E93\x3\x2\x2"+
		"\x2\x1E94\x1E95\x3\x2\x2\x2\x1E95\x1E97\x3\x2\x2\x2\x1E96\x1E98\a\x4BD"+
		"\x2\x2\x1E97\x1E96\x3\x2\x2\x2\x1E97\x1E98\x3\x2\x2\x2\x1E98\x24F\x3\x2"+
		"\x2\x2\x1E99\x1E9A\a\x1C6\x2\x2\x1E9A\x1E9C\x5\x4C2\x262\x2\x1E9B\x1E9D"+
		"\a\x40D\x2\x2\x1E9C\x1E9B\x3\x2\x2\x2\x1E9C\x1E9D\x3\x2\x2\x2\x1E9D\x1E9F"+
		"\x3\x2\x2\x2\x1E9E\x1EA0\x5\x4A2\x252\x2\x1E9F\x1E9E\x3\x2\x2\x2\x1E9F"+
		"\x1EA0\x3\x2\x2\x2\x1EA0\x1EA1\x3\x2\x2\x2\x1EA1\x1EA2\a\x4BA\x2\x2\x1EA2"+
		"\x1EA3\x5\x496\x24C\x2\x1EA3\x1EA4\a\x4BB\x2\x2\x1EA4\x1EBB\x3\x2\x2\x2"+
		"\x1EA5\x1EA6\a\x1C6\x2\x2\x1EA6\x1EA7\x5\x4C2\x262\x2\x1EA7\x1EA8\a\x99"+
		"\x2\x2\x1EA8\x1EA9\a\xA0\x2\x2\x1EA9\x1EBB\x3\x2\x2\x2\x1EAA\x1EAB\a\x1C6"+
		"\x2\x2\x1EAB\x1EAD\x5\x4C2\x262\x2\x1EAC\x1EAE\a\x26A\x2\x2\x1EAD\x1EAC"+
		"\x3\x2\x2\x2\x1EAD\x1EAE\x3\x2\x2\x2\x1EAE\x1EAF\x3\x2\x2\x2\x1EAF\x1EB0"+
		"\a\xA0\x2\x2\x1EB0\x1EB1\a\x4BA\x2\x2\x1EB1\x1EB2\x5\x49C\x24F\x2\x1EB2"+
		"\x1EB4\a\x4BB\x2\x2\x1EB3\x1EB5\x5\x256\x12C\x2\x1EB4\x1EB3\x3\x2\x2\x2"+
		"\x1EB4\x1EB5\x3\x2\x2\x2\x1EB5\x1EB8\x3\x2\x2\x2\x1EB6\x1EB7\a\x294\x2"+
		"\x2\x1EB7\x1EB9\x5\x4C2\x262\x2\x1EB8\x1EB6\x3\x2\x2\x2\x1EB8\x1EB9\x3"+
		"\x2\x2\x2\x1EB9\x1EBB\x3\x2\x2\x2\x1EBA\x1E99\x3\x2\x2\x2\x1EBA\x1EA5"+
		"\x3\x2\x2\x2\x1EBA\x1EAA\x3\x2\x2\x2\x1EBB\x251\x3\x2\x2\x2\x1EBC\x1ED0"+
		"\a\x439\x2\x2\x1EBD\x1EBE\a\x4BA\x2\x2\x1EBE\x1EC3\x5\x254\x12B\x2\x1EBF"+
		"\x1EC0\a\x4BC\x2\x2\x1EC0\x1EC2\x5\x254\x12B\x2\x1EC1\x1EBF\x3\x2\x2\x2"+
		"\x1EC2\x1EC5\x3\x2\x2\x2\x1EC3\x1EC1\x3\x2\x2\x2\x1EC3\x1EC4\x3\x2\x2"+
		"\x2\x1EC4\x1EC6\x3\x2\x2\x2\x1EC5\x1EC3\x3\x2\x2\x2\x1EC6\x1EC7\a\x4BB"+
		"\x2\x2\x1EC7\x1ED1\x3\x2\x2\x2\x1EC8\x1ECD\x5\x254\x12B\x2\x1EC9\x1ECA"+
		"\a\x4BC\x2\x2\x1ECA\x1ECC\x5\x254\x12B\x2\x1ECB\x1EC9\x3\x2\x2\x2\x1ECC"+
		"\x1ECF\x3\x2\x2\x2\x1ECD\x1ECB\x3\x2\x2\x2\x1ECD\x1ECE\x3\x2\x2\x2\x1ECE"+
		"\x1ED1\x3\x2\x2\x2\x1ECF\x1ECD\x3\x2\x2\x2\x1ED0\x1EBD\x3\x2\x2\x2\x1ED0"+
		"\x1EC8\x3\x2\x2\x2\x1ED1\x253\x3\x2\x2\x2\x1ED2\x1ED5\x5\x4C4\x263\x2"+
		"\x1ED3\x1ED5\x5\x4C0\x261\x2\x1ED4\x1ED2\x3\x2\x2\x2\x1ED4\x1ED3\x3\x2"+
		"\x2\x2\x1ED5\x1ED6\x3\x2\x2\x2\x1ED6\x1EDB\a\x4A8\x2\x2\x1ED7\x1EDC\x5"+
		"\x4C4\x263\x2\x1ED8\x1EDC\x5\x4C0\x261\x2\x1ED9\x1EDC\x5\x4A0\x251\x2"+
		"\x1EDA\x1EDC\a\x4A2\x2\x2\x1EDB\x1ED7\x3\x2\x2\x2\x1EDB\x1ED8\x3\x2\x2"+
		"\x2\x1EDB\x1ED9\x3\x2\x2\x2\x1EDB\x1EDA\x3\x2\x2\x2\x1EDC\x1F0B\x3\x2"+
		"\x2\x2\x1EDD\x1EDE\a\x99\x2\x2\x1EDE\x1EDF\a\xA0\x2\x2\x1EDF\x1F0B\a\x1C6"+
		"\x2\x2\x1EE0\x1F0B\a\x1A6\x2\x2\x1EE1\x1EE2\a\x16C\x2\x2\x1EE2\x1EE3\a"+
		"\x4A8\x2\x2\x1EE3\x1F0B\a\x4A2\x2\x2\x1EE4\x1EE5\a\x118\x2\x2\x1EE5\x1EE6"+
		"\a\x4A8\x2\x2\x1EE6\x1EE7\a\x19F\x2\x2\x1EE7\x1EE8\a\x4BA\x2\x2\x1EE8"+
		"\x1EE9\x5\x4C2\x262\x2\x1EE9\x1EEA\a\x4BB\x2\x2\x1EEA\x1F0B\x3\x2\x2\x2"+
		"\x1EEB\x1EEC\a\x99\x2\x2\x1EEC\x1EED\a\x1C6\x2\x2\x1EED\x1EEE\a\x4BA\x2"+
		"\x2\x1EEE\x1EF0\x5\x4C2\x262\x2\x1EEF\x1EF1\tK\x2\x2\x1EF0\x1EEF\x3\x2"+
		"\x2\x2\x1EF0\x1EF1\x3\x2\x2\x2\x1EF1\x1EF9\x3\x2\x2\x2\x1EF2\x1EF3\a\x4BC"+
		"\x2\x2\x1EF3\x1EF5\x5\x4C2\x262\x2\x1EF4\x1EF6\tK\x2\x2\x1EF5\x1EF4\x3"+
		"\x2\x2\x2\x1EF5\x1EF6\x3\x2\x2\x2\x1EF6\x1EF8\x3\x2\x2\x2\x1EF7\x1EF2"+
		"\x3\x2\x2\x2\x1EF8\x1EFB\x3\x2\x2\x2\x1EF9\x1EF7\x3\x2\x2\x2\x1EF9\x1EFA"+
		"\x3\x2\x2\x2\x1EFA\x1EFC\x3\x2\x2\x2\x1EFB\x1EF9\x3\x2\x2\x2\x1EFC\x1EFD"+
		"\a\x4BB\x2\x2\x1EFD\x1F0B\x3\x2\x2\x2\x1EFE\x1EFF\a\xE4\x2\x2\x1EFF\x1F00"+
		"\a\x4A8\x2\x2\x1F00\x1F02\tL\x2\x2\x1F01\x1F03\x5\x216\x10C\x2\x1F02\x1F01"+
		"\x3\x2\x2\x2\x1F02\x1F03\x3\x2\x2\x2\x1F03\x1F0B\x3\x2\x2\x2\x1F04\x1F05"+
		"\a\x448\x2\x2\x1F05\x1F06\a\x4A8\x2\x2\x1F06\x1F08\x5\x4A0\x251\x2\x1F07"+
		"\x1F09\x5\x216\x10C\x2\x1F08\x1F07\x3\x2\x2\x2\x1F08\x1F09\x3\x2\x2\x2"+
		"\x1F09\x1F0B\x3\x2\x2\x2\x1F0A\x1ED4\x3\x2\x2\x2\x1F0A\x1EDD\x3\x2\x2"+
		"\x2\x1F0A\x1EE0\x3\x2\x2\x2\x1F0A\x1EE1\x3\x2\x2\x2\x1F0A\x1EE4\x3\x2"+
		"\x2\x2\x1F0A\x1EEB\x3\x2\x2\x2\x1F0A\x1EFE\x3\x2\x2\x2\x1F0A\x1F04\x3"+
		"\x2\x2\x2\x1F0B\x255\x3\x2\x2\x2\x1F0C\x1F0D\a\x439\x2\x2\x1F0D\x1F0E"+
		"\a\x4BA\x2\x2\x1F0E\x1F13\x5\x258\x12D\x2\x1F0F\x1F10\a\x4BC\x2\x2\x1F10"+
		"\x1F12\x5\x258\x12D\x2\x1F11\x1F0F\x3\x2\x2\x2\x1F12\x1F15\x3\x2\x2\x2"+
		"\x1F13\x1F11\x3\x2\x2\x2\x1F13\x1F14\x3\x2\x2\x2\x1F14\x1F16\x3\x2\x2"+
		"\x2\x1F15\x1F13\x3\x2\x2\x2\x1F16\x1F17\a\x4BB\x2\x2\x1F17\x257\x3\x2"+
		"\x2\x2\x1F18\x1F19\a\x2B0\x2\x2\x1F19\x1F1A\a\x4A8\x2\x2\x1F1A\x1F3D\x5"+
		"\x4A0\x251\x2\x1F1B\x1F1C\a\x16C\x2\x2\x1F1C\x1F1D\a\x4A8\x2\x2\x1F1D"+
		"\x1F3D\a\x4A2\x2\x2\x1F1E\x1F1F\a\x1B8\x2\x2\x1F1F\x1F20\a\x4A8\x2\x2"+
		"\x1F20\x1F3D\x5\x4A0\x251\x2\x1F21\x1F22\a\x3B6\x2\x2\x1F22\x1F23\a\x4A8"+
		"\x2\x2\x1F23\x1F3D\x5\x4A0\x251\x2\x1F24\x1F25\a\x3B5\x2\x2\x1F25\x1F26"+
		"\a\x4A8\x2\x2\x1F26\x1F3D\x5\x4A0\x251\x2\x1F27\x1F28\a\x1E\x2\x2\x1F28"+
		"\x1F29\a\x4A8\x2\x2\x1F29\x1F3D\x5\x4A0\x251\x2\x1F2A\x1F2B\a\x1D\x2\x2"+
		"\x1F2B\x1F2C\a\x4A8\x2\x2\x1F2C\x1F3D\x5\x4A0\x251\x2\x1F2D\x1F2E\a\x2A3"+
		"\x2\x2\x1F2E\x1F2F\a\x4A8\x2\x2\x1F2F\x1F3D\x5\x4A0\x251\x2\x1F30\x1F31"+
		"\a\xE4\x2\x2\x1F31\x1F32\a\x4A8\x2\x2\x1F32\x1F34\t\x42\x2\x2\x1F33\x1F35"+
		"\x5\x216\x10C\x2\x1F34\x1F33\x3\x2\x2\x2\x1F34\x1F35\x3\x2\x2\x2\x1F35"+
		"\x1F3D\x3\x2\x2\x2\x1F36\x1F37\a\x448\x2\x2\x1F37\x1F38\a\x4A8\x2\x2\x1F38"+
		"\x1F3A\x5\x4A0\x251\x2\x1F39\x1F3B\x5\x216\x10C\x2\x1F3A\x1F39\x3\x2\x2"+
		"\x2\x1F3A\x1F3B\x3\x2\x2\x2\x1F3B\x1F3D\x3\x2\x2\x2\x1F3C\x1F18\x3\x2"+
		"\x2\x2\x1F3C\x1F1B\x3\x2\x2\x2\x1F3C\x1F1E\x3\x2\x2\x2\x1F3C\x1F21\x3"+
		"\x2\x2\x2\x1F3C\x1F24\x3\x2\x2\x2\x1F3C\x1F27\x3\x2\x2\x2\x1F3C\x1F2A"+
		"\x3\x2\x2\x2\x1F3C\x1F2D\x3\x2\x2\x2\x1F3C\x1F30\x3\x2\x2\x2\x1F3C\x1F36"+
		"\x3\x2\x2\x2\x1F3D\x259\x3\x2\x2\x2\x1F3E\x1F41\a\xC9\x2\x2\x1F3F\x1F40"+
		"\a\x2A5\x2\x2\x1F40\x1F42\t\x45\x2\x2\x1F41\x1F3F\x3\x2\x2\x2\x1F41\x1F42"+
		"\x3\x2\x2\x2\x1F42\x1F45\x3\x2\x2\x2\x1F43\x1F45\a%\x2\x2\x1F44\x1F3E"+
		"\x3\x2\x2\x2\x1F44\x1F43\x3\x2\x2\x2\x1F45\x1F46\x3\x2\x2\x2\x1F46\x1F47"+
		"\a\x42C\x2\x2\x1F47\x1F4C\x5\x48A\x246\x2\x1F48\x1F49\a\x4BA\x2\x2\x1F49"+
		"\x1F4A\x5\x49C\x24F\x2\x1F4A\x1F4B\a\x4BB\x2\x2\x1F4B\x1F4D\x3\x2\x2\x2"+
		"\x1F4C\x1F48\x3\x2\x2\x2\x1F4C\x1F4D\x3\x2\x2\x2\x1F4D\x1F57\x3\x2\x2"+
		"\x2\x1F4E\x1F4F\a\x439\x2\x2\x1F4F\x1F54\x5\x25C\x12F\x2\x1F50\x1F51\a"+
		"\x4BC\x2\x2\x1F51\x1F53\x5\x25C\x12F\x2\x1F52\x1F50\x3\x2\x2\x2\x1F53"+
		"\x1F56\x3\x2\x2\x2\x1F54\x1F52\x3\x2\x2\x2\x1F54\x1F55\x3\x2\x2\x2\x1F55"+
		"\x1F58\x3\x2\x2\x2\x1F56\x1F54\x3\x2\x2\x2\x1F57\x1F4E\x3\x2\x2\x2\x1F57"+
		"\x1F58\x3\x2\x2\x2\x1F58\x1F59\x3\x2\x2\x2\x1F59\x1F5A\a:\x2\x2\x1F5A"+
		"\x1F5E\x5\x1E4\xF3\x2\x1F5B\x1F5C\a\x439\x2\x2\x1F5C\x1F5D\a\x86\x2\x2"+
		"\x1F5D\x1F5F\a\x2A4\x2\x2\x1F5E\x1F5B\x3\x2\x2\x2\x1F5E\x1F5F\x3\x2\x2"+
		"\x2\x1F5F\x1F61\x3\x2\x2\x2\x1F60\x1F62\a\x4BD\x2\x2\x1F61\x1F60\x3\x2"+
		"\x2\x2\x1F61\x1F62\x3\x2\x2\x2\x1F62\x25B\x3\x2\x2\x2\x1F63\x1F64\tM\x2"+
		"\x2\x1F64\x25D\x3\x2\x2\x2\x1F65\x1F66\a%\x2\x2\x1F66\x1F67\a\x3D7\x2"+
		"\x2\x1F67\x1FB1\x5\x488\x245\x2\x1F68\x1F69\a\x386\x2\x2\x1F69\x1F6A\a"+
		"\x4BA\x2\x2\x1F6A\x1F6B\a\x213\x2\x2\x1F6B\x1F6C\a\x4A8\x2\x2\x1F6C\x1F6D"+
		"\tN\x2\x2\x1F6D\x1FB2\a\x4BB\x2\x2\x1F6E\x1F6F\a\r\x2\x2\x1F6F\x1FB2\x5"+
		"\x36A\x1B6\x2\x1F70\x1F71\a%\x2\x2\x1F71\x1F74\a\x9D\x2\x2\x1F72\x1F75"+
		"\x5\x36E\x1B8\x2\x1F73\x1F75\x5\x372\x1BA\x2\x1F74\x1F72\x3\x2\x2\x2\x1F74"+
		"\x1F73\x3\x2\x2\x2\x1F75\x1FB2\x3\x2\x2\x2\x1F76\x1F77\a\x11E\x2\x2\x1F77"+
		"\x1F78\a\x9D\x2\x2\x1F78\x1F7D\x5\x4C2\x262\x2\x1F79\x1F7A\a\x4BC\x2\x2"+
		"\x1F7A\x1F7C\x5\x4C2\x262\x2\x1F7B\x1F79\x3\x2\x2\x2\x1F7C\x1F7F\x3\x2"+
		"\x2\x2\x1F7D\x1F7B\x3\x2\x2\x2\x1F7D\x1F7E\x3\x2\x2\x2\x1F7E\x1FB2\x3"+
		"\x2\x2\x2\x1F7F\x1F7D\x3\x2\x2\x2\x1F80\x1F81\a\x11E\x2\x2\x1F81\x1F82"+
		"\a\xB5\x2\x2\x1F82\x1FB2\x5\x4C2\x262\x2\x1F83\x1F84\a\x439\x2\x2\x1F84"+
		"\x1F85\tO\x2\x2\x1F85\x1F88\a\r\x2\x2\x1F86\x1F87\a\xB5\x2\x2\x1F87\x1F89"+
		"\x5\x4C2\x262\x2\x1F88\x1F86\x3\x2\x2\x2\x1F88\x1F89\x3\x2\x2\x2\x1F89"+
		"\x1FA3\x3\x2\x2\x2\x1F8A\x1F8B\a\x17A\x2\x2\x1F8B\x1F8C\a\x1F1\x2\x2\x1F8C"+
		"\x1F8D\a\x4BA\x2\x2\x1F8D\x1F8E\x5\x49C\x24F\x2\x1F8E\x1F8F\a\x4BB\x2"+
		"\x2\x1F8F\x1F90\a\x313\x2\x2\x1F90\x1F95\x5\x488\x245\x2\x1F91\x1F92\a"+
		"\x4BA\x2\x2\x1F92\x1F93\x5\x49C\x24F\x2\x1F93\x1F94\a\x4BB\x2\x2\x1F94"+
		"\x1F96\x3\x2\x2\x2\x1F95\x1F91\x3\x2\x2\x2\x1F95\x1F96\x3\x2\x2\x2\x1F96"+
		"\x1F9B\x3\x2\x2\x2\x1F97\x1F9A\x5\x386\x1C4\x2\x1F98\x1F9A\x5\x388\x1C5"+
		"\x2\x1F99\x1F97\x3\x2\x2\x2\x1F99\x1F98\x3\x2\x2\x2\x1F9A\x1F9D\x3\x2"+
		"\x2\x2\x1F9B\x1F99\x3\x2\x2\x2\x1F9B\x1F9C\x3\x2\x2\x2\x1F9C\x1FA4\x3"+
		"\x2\x2\x2\x1F9D\x1F9B\x3\x2\x2\x2\x1F9E\x1F9F\a\x86\x2\x2\x1F9F\x1FA0"+
		"\a\x4BA\x2\x2\x1FA0\x1FA1\x5\x3B4\x1DB\x2\x1FA1\x1FA2\a\x4BB\x2\x2\x1FA2"+
		"\x1FA4\x3\x2\x2\x2\x1FA3\x1F8A\x3\x2\x2\x2\x1FA3\x1F9E\x3\x2\x2\x2\x1FA4"+
		"\x1FB2\x3\x2\x2\x2\x1FA5\x1FA6\tO\x2\x2\x1FA6\x1FA7\a\xB5\x2\x2\x1FA7"+
		"\x1FB2\x5\x4C2\x262\x2\x1FA8\x1FA9\t\x1B\x2\x2\x1FA9\x1FAB\a\x3F8\x2\x2"+
		"\x1FAA\x1FAC\x5\x4C2\x262\x2\x1FAB\x1FAA\x3\x2\x2\x2\x1FAB\x1FAC\x3\x2"+
		"\x2\x2\x1FAC\x1FB2\x3\x2\x2\x2\x1FAD\x1FAE\a\x30D\x2\x2\x1FAE\x1FB2\x5"+
		"\x252\x12A\x2\x1FAF\x1FB0\a\x3D1\x2\x2\x1FB0\x1FB2\x5\x260\x131\x2\x1FB1"+
		"\x1F68\x3\x2\x2\x2\x1FB1\x1F6E\x3\x2\x2\x2\x1FB1\x1F70\x3\x2\x2\x2\x1FB1"+
		"\x1F76\x3\x2\x2\x2\x1FB1\x1F80\x3\x2\x2\x2\x1FB1\x1F83\x3\x2\x2\x2\x1FB1"+
		"\x1FA5\x3\x2\x2\x2\x1FB1\x1FA8\x3\x2\x2\x2\x1FB1\x1FAD\x3\x2\x2\x2\x1FB1"+
		"\x1FAF\x3\x2\x2\x2\x1FB2\x1FB4\x3\x2\x2\x2\x1FB3\x1FB5\a\x4BD\x2\x2\x1FB4"+
		"\x1FB3\x3\x2\x2\x2\x1FB4\x1FB5\x3\x2\x2\x2\x1FB5\x25F\x3\x2\x2\x2\x1FB6"+
		"\x1FB8\a\x2BB\x2\x2\x1FB7\x1FB6\x3\x2\x2\x2\x1FB7\x1FB8\x3\x2\x2\x2\x1FB8"+
		"\x1FB9\x3\x2\x2\x2\x1FB9\x1FBB\x5\x39C\x1CF\x2\x1FBA\x1FB7\x3\x2\x2\x2"+
		"\x1FBA\x1FBB\x3\x2\x2\x2\x1FBB\x1FBC\x3\x2\x2\x2\x1FBC\x1FBD\a\x3EB\x2"+
		"\x2\x1FBD\x1FC0\x5\x488\x245\x2\x1FBE\x1FBF\a\x2BB\x2\x2\x1FBF\x1FC1\x5"+
		"\x39C\x1CF\x2\x1FC0\x1FBE\x3\x2\x2\x2\x1FC0\x1FC1\x3\x2\x2\x2\x1FC1\x1FC4"+
		"\x3\x2\x2\x2\x1FC2\x1FC3\a\x439\x2\x2\x1FC3\x1FC5\x5\x262\x132\x2\x1FC4"+
		"\x1FC2\x3\x2\x2\x2\x1FC4\x1FC5\x3\x2\x2\x2\x1FC5\x261\x3\x2\x2\x2\x1FC6"+
		"\x1FC7\a\x432\x2\x2\x1FC7\x1FC8\a\x4BA\x2\x2\x1FC8\x1FC9\a\x22B\x2\x2"+
		"\x1FC9\x1FCA\a\x4A8\x2\x2\x1FCA\x1FCC\x5\x1E8\xF5\x2\x1FCB\x1FCD\a\x244"+
		"\x2\x2\x1FCC\x1FCB\x3\x2\x2\x2\x1FCC\x1FCD\x3\x2\x2\x2\x1FCD\x1FCE\x3"+
		"\x2\x2\x2\x1FCE\x1FCF\a\x4BC\x2\x2\x1FCF\x1FD0\a\x4\x2\x2\x1FD0\x1FD1"+
		"\a\x4A8\x2\x2\x1FD1\x1FD2\tP\x2\x2\x1FD2\x1FD3\a\x4BB\x2\x2\x1FD3\x263"+
		"\x3\x2\x2\x2\x1FD4\x1FD5\a%\x2\x2\x1FD5\x1FD8\a\xDD\x2\x2\x1FD6\x1FD9"+
		"\x5\x4C2\x262\x2\x1FD7\x1FD9\a\xD0\x2\x2\x1FD8\x1FD6\x3\x2\x2\x2\x1FD8"+
		"\x1FD7\x3\x2\x2\x2\x1FD9\x1FE8\x3\x2\x2\x2\x1FDA\x1FDB\a\x24E\x2\x2\x1FDB"+
		"\x1FDC\a\x253\x2\x2\x1FDC\x1FDD\a\x4A8\x2\x2\x1FDD\x1FE9\x5\x4C2\x262"+
		"\x2\x1FDE\x1FDF\a\x9B\x2\x2\x1FDF\x1FE9\x5\x4C2\x262\x2\x1FE0\x1FE1\a"+
		"\x386\x2\x2\x1FE1\x1FE4\x5\x26E\x138\x2\x1FE2\x1FE3\a\x439\x2\x2\x1FE3"+
		"\x1FE5\x5\x2BA\x15E\x2\x1FE4\x1FE2\x3\x2\x2\x2\x1FE4\x1FE5\x3\x2\x2\x2"+
		"\x1FE5\x1FE9\x3\x2\x2\x2\x1FE6\x1FE9\x5\x266\x134\x2\x1FE7\x1FE9\x5\x26A"+
		"\x136\x2\x1FE8\x1FDA\x3\x2\x2\x2\x1FE8\x1FDE\x3\x2\x2\x2\x1FE8\x1FE0\x3"+
		"\x2\x2\x2\x1FE8\x1FE6\x3\x2\x2\x2\x1FE8\x1FE7\x3\x2\x2\x2\x1FE9\x1FEB"+
		"\x3\x2\x2\x2\x1FEA\x1FEC\a\x4BD\x2\x2\x1FEB\x1FEA\x3\x2\x2\x2\x1FEB\x1FEC"+
		"\x3\x2\x2\x2\x1FEC\x265\x3\x2\x2\x2\x1FED\x1FEE\a\r\x2\x2\x1FEE\x1FEF"+
		"\a\x15C\x2\x2\x1FEF\x1FF4\x5\x268\x135\x2\x1FF0\x1FF1\a\x4BC\x2\x2\x1FF1"+
		"\x1FF3\x5\x268\x135\x2\x1FF2\x1FF0\x3\x2\x2\x2\x1FF3\x1FF6\x3\x2\x2\x2"+
		"\x1FF4\x1FF2\x3\x2\x2\x2\x1FF4\x1FF5\x3\x2\x2\x2\x1FF5\x1FFA\x3\x2\x2"+
		"\x2\x1FF6\x1FF4\x3\x2\x2\x2\x1FF7\x1FF8\a\x3EB\x2\x2\x1FF8\x1FF9\a\x15D"+
		"\x2\x2\x1FF9\x1FFB\x5\x4C2\x262\x2\x1FFA\x1FF7\x3\x2\x2\x2\x1FFA\x1FFB"+
		"\x3\x2\x2\x2\x1FFB\x200E\x3\x2\x2\x2\x1FFC\x1FFD\a\r\x2\x2\x1FFD\x1FFE"+
		"\a\x214\x2\x2\x1FFE\x1FFF\a\x15C\x2\x2\x1FFF\x2004\x5\x268\x135\x2\x2000"+
		"\x2001\a\x4BC\x2\x2\x2001\x2003\x5\x268\x135\x2\x2002\x2000\x3\x2\x2\x2"+
		"\x2003\x2006\x3\x2\x2\x2\x2004\x2002\x3\x2\x2\x2\x2004\x2005\x3\x2\x2"+
		"\x2\x2005\x200E\x3\x2\x2\x2\x2006\x2004\x3\x2\x2\x2\x2007\x2008\a\x31B"+
		"\x2\x2\x2008\x2009\a\x15C\x2\x2\x2009\x200E\x5\x4C2\x262\x2\x200A\x200B"+
		"\a\x24E\x2\x2\x200B\x200C\a\x15C\x2\x2\x200C\x200E\x5\x268\x135\x2\x200D"+
		"\x1FED\x3\x2\x2\x2\x200D\x1FFC\x3\x2\x2\x2\x200D\x2007\x3\x2\x2\x2\x200D"+
		"\x200A\x3\x2\x2\x2\x200E\x267\x3\x2\x2\x2\x200F\x2010\a\x4BA\x2\x2\x2010"+
		"\x2011\a\x253\x2\x2\x2011\x2012\a\x4A8\x2\x2\x2012\x2017\x5\x4C6\x264"+
		"\x2\x2013\x2014\a\x4BC\x2\x2\x2014\x2015\a\x259\x2\x2\x2015\x2016\a\x4A8"+
		"\x2\x2\x2016\x2018\x5\x4C6\x264\x2\x2017\x2013\x3\x2\x2\x2\x2017\x2018"+
		"\x3\x2\x2\x2\x2018\x201D\x3\x2\x2\x2\x2019\x201A\a\x4BC\x2\x2\x201A\x201B"+
		"\a\x162\x2\x2\x201B\x201C\a\x4A8\x2\x2\x201C\x201E\a\x4A4\x2\x2\x201D"+
		"\x2019\x3\x2\x2\x2\x201D\x201E\x3\x2\x2\x2\x201E\x2023\x3\x2\x2\x2\x201F"+
		"\x2020\a\x4BC\x2\x2\x2020\x2021\a\x398\x2\x2\x2021\x2022\a\x4A8\x2\x2"+
		"\x2022\x2024\x5\x4CC\x267\x2\x2023\x201F\x3\x2\x2\x2\x2023\x2024\x3\x2"+
		"\x2\x2\x2024\x202A\x3\x2\x2\x2\x2025\x2026\a\x4BC\x2\x2\x2026\x2027\a"+
		"\x225\x2\x2\x2027\x2028\a\x4A8\x2\x2\x2028\x202B\x5\x4CC\x267\x2\x2029"+
		"\x202B\a\x40F\x2\x2\x202A\x2025\x3\x2\x2\x2\x202A\x2029\x3\x2\x2\x2\x202A"+
		"\x202B\x3\x2\x2\x2\x202B\x2030\x3\x2\x2\x2\x202C\x202D\a\x4BC\x2\x2\x202D"+
		"\x202E\a\x161\x2\x2\x202E\x202F\a\x4A8\x2\x2\x202F\x2031\x5\x4CC\x267"+
		"\x2\x2030\x202C\x3\x2\x2\x2\x2030\x2031\x3\x2\x2\x2\x2031\x2034\x3\x2"+
		"\x2\x2\x2032\x2033\a\x4BC\x2\x2\x2033\x2035\a\x28F\x2\x2\x2034\x2032\x3"+
		"\x2\x2\x2\x2034\x2035\x3\x2\x2\x2\x2035\x2036\x3\x2\x2\x2\x2036\x2037"+
		"\a\x4BB\x2\x2\x2037\x269\x3\x2\x2\x2\x2038\x2039\a\r\x2\x2\x2039\x203A"+
		"\a\x15D\x2\x2\x203A\x203F\x5\x4C2\x262\x2\x203B\x203C\a\xB7\x2\x2\x203C"+
		"\x2040\a\x166\x2\x2\x203D\x203E\a\xB7\x2\x2\x203E\x2040\a\x23D\x2\x2\x203F"+
		"\x203B\x3\x2\x2\x2\x203F\x203D\x3\x2\x2\x2\x203F\x2040\x3\x2\x2\x2\x2040"+
		"\x2051\x3\x2\x2\x2\x2041\x2042\a\x31B\x2\x2\x2042\x2043\a\x15D\x2\x2\x2043"+
		"\x2051\x5\x4C2\x262\x2\x2044\x2045\a\x24E\x2\x2\x2045\x2046\a\x15D\x2"+
		"\x2\x2046\x204E\x5\x4C2\x262\x2\x2047\x204F\x5\x26C\x137\x2\x2048\x204F"+
		"\a\xF9\x2\x2\x2049\x204A\a\x253\x2\x2\x204A\x204B\a\x4A8\x2\x2\x204B\x204F"+
		"\x5\x4C2\x262\x2\x204C\x204F\aI\x2\x2\x204D\x204F\aH\x2\x2\x204E\x2047"+
		"\x3\x2\x2\x2\x204E\x2048\x3\x2\x2\x2\x204E\x2049\x3\x2\x2\x2\x204E\x204C"+
		"\x3\x2\x2\x2\x204E\x204D\x3\x2\x2\x2\x204F\x2051\x3\x2\x2\x2\x2050\x2038"+
		"\x3\x2\x2\x2\x2050\x2041\x3\x2\x2\x2\x2050\x2044\x3\x2\x2\x2\x2051\x26B"+
		"\x3\x2\x2\x2\x2052\x2053\tQ\x2\x2\x2053\x26D\x3\x2\x2\x2\x2054\x206E\x5"+
		"\x276\x13C\x2\x2055\x206E\x5\x278\x13D\x2\x2056\x206E\x5\x27C\x13F\x2"+
		"\x2057\x206E\x5\x27E\x140\x2\x2058\x206E\x5\x282\x142\x2\x2059\x206E\x5"+
		"\x29C\x14F\x2\x205A\x206E\x5\x29E\x150\x2\x205B\x206E\x5\x2A0\x151\x2"+
		"\x205C\x206E\x5\x2A2\x152\x2\x205D\x206E\x5\x2A4\x153\x2\x205E\x206E\x5"+
		"\x2A6\x154\x2\x205F\x206E\x5\x2A8\x155\x2\x2060\x2061\a\x166\x2\x2\x2061"+
		"\x206E\x5\x478\x23D\x2\x2062\x206E\x5\x2AA\x156\x2\x2063\x206E\x5\x2AC"+
		"\x157\x2\x2064\x206E\x5\x2AE\x158\x2\x2065\x206E\x5\x270\x139\x2\x2066"+
		"\x206E\x5\x272\x13A\x2\x2067\x206E\x5\x2B0\x159\x2\x2068\x206E\x5\x2B2"+
		"\x15A\x2\x2069\x206E\x5\x2B4\x15B\x2\x206A\x206E\x5\x2B6\x15C\x2\x206B"+
		"\x206E\x5\x2B8\x15D\x2\x206C\x206E\x5\x2BA\x15E\x2\x206D\x2054\x3\x2\x2"+
		"\x2\x206D\x2055\x3\x2\x2\x2\x206D\x2056\x3\x2\x2\x2\x206D\x2057\x3\x2"+
		"\x2\x2\x206D\x2058\x3\x2\x2\x2\x206D\x2059\x3\x2\x2\x2\x206D\x205A\x3"+
		"\x2\x2\x2\x206D\x205B\x3\x2\x2\x2\x206D\x205C\x3\x2\x2\x2\x206D\x205D"+
		"\x3\x2\x2\x2\x206D\x205E\x3\x2\x2\x2\x206D\x205F\x3\x2\x2\x2\x206D\x2060"+
		"\x3\x2\x2\x2\x206D\x2062\x3\x2\x2\x2\x206D\x2063\x3\x2\x2\x2\x206D\x2064"+
		"\x3\x2\x2\x2\x206D\x2065\x3\x2\x2\x2\x206D\x2066\x3\x2\x2\x2\x206D\x2067"+
		"\x3\x2\x2\x2\x206D\x2068\x3\x2\x2\x2\x206D\x2069\x3\x2\x2\x2\x206D\x206A"+
		"\x3\x2\x2\x2\x206D\x206B\x3\x2\x2\x2\x206D\x206C\x3\x2\x2\x2\x206E\x26F"+
		"\x3\x2\x2\x2\x206F\x2070\a\x2F2\x2\x2\x2070\x2071\a\x4A8\x2\x2\x2071\x2072"+
		"\x5\x4A0\x251\x2\x2072\x271\x3\x2\x2\x2\x2073\x2074\a\x2F2\x2\x2\x2074"+
		"\x2075\a\x4BA\x2\x2\x2075\x207A\x5\x274\x13B\x2\x2076\x2077\a\x4BC\x2"+
		"\x2\x2077\x2079\x5\x274\x13B\x2\x2078\x2076\x3\x2\x2\x2\x2079\x207C\x3"+
		"\x2\x2\x2\x207A\x2078\x3\x2\x2\x2\x207A\x207B\x3\x2\x2\x2\x207B\x207D"+
		"\x3\x2\x2\x2\x207C\x207A\x3\x2\x2\x2\x207D\x207E\a\x4BB\x2\x2\x207E\x273"+
		"\x3\x2\x2\x2\x207F\x2080\a\x2A0\x2\x2\x2080\x2081\a\x4A8\x2\x2\x2081\x20A0"+
		"\a\x30B\x2\x2\x2082\x2083\a\x95\x2\x2\x2083\x2084\a\x4A8\x2\x2\x2084\x2085"+
		"\a\x4BA\x2\x2\x2085\x2086\a\x3AC\x2\x2\x2086\x2087\a\x4A8\x2\x2\x2087"+
		"\x2088\a\x4A2\x2\x2\x2088\x20A0\a\x4BB\x2\x2\x2089\x208A\a\xE5\x2\x2\x208A"+
		"\x208B\a\x4A8\x2\x2\x208B\x20A0\a\x4A2\x2\x2\x208C\x208D\a\x1D5\x2\x2"+
		"\x208D\x208E\a\x4A8\x2\x2\x208E\x20A0\a\x4A2\x2\x2\x208F\x2090\a\x237"+
		"\x2\x2\x2090\x2091\a\x4A8\x2\x2\x2091\x20A0\a\x4A2\x2\x2\x2092\x2093\a"+
		"\x2F0\x2\x2\x2093\x2094\a\x4A8\x2\x2\x2094\x20A0\aG\x2\x2\x2095\x2096"+
		"\a\x399\x2\x2\x2096\x2097\a\x4A8\x2\x2\x2097\x20A0\aG\x2\x2\x2098\x2099"+
		"\a\x232\x2\x2\x2099\x209A\a\x4A8\x2\x2\x209A\x20A0\a\x4A2\x2\x2\x209B"+
		"\x209C\a\x434\x2\x2\x209C\x209D\a\x4A8\x2\x2\x209D\x20A0\a\x294\x2\x2"+
		"\x209E\x20A0\a\x28E\x2\x2\x209F\x207F\x3\x2\x2\x2\x209F\x2082\x3\x2\x2"+
		"\x2\x209F\x2089\x3\x2\x2\x2\x209F\x208C\x3\x2\x2\x2\x209F\x208F\x3\x2"+
		"\x2\x2\x209F\x2092\x3\x2\x2\x2\x209F\x2095\x3\x2\x2\x2\x209F\x2098\x3"+
		"\x2\x2\x2\x209F\x209B\x3\x2\x2\x2\x209F\x209E\x3\x2\x2\x2\x20A0\x275\x3"+
		"\x2\x2\x2\x20A1\x20A2\aM\x2\x2\x20A2\x20B3\x5\x4A0\x251\x2\x20A3\x20A4"+
		"\aN\x2\x2\x20A4\x20B3\a\x28E\x2\x2\x20A5\x20AA\a\x294\x2\x2\x20A6\x20A7"+
		"\a\x1C5\x2\x2\x20A7\x20A8\a\x4A8\x2\x2\x20A8\x20AB\a\x294\x2\x2\x20A9"+
		"\x20AB\a\x28E\x2\x2\x20AA\x20A6\x3\x2\x2\x2\x20AA\x20A9\x3\x2\x2\x2\x20AB"+
		"\x20B3\x3\x2\x2\x2\x20AC\x20AD\aP\x2\x2\x20AD\x20B3\x5\x4A0\x251\x2\x20AE"+
		"\x20AF\aQ\x2\x2\x20AF\x20B3\x5\x4A0\x251\x2\x20B0\x20B1\aR\x2\x2\x20B1"+
		"\x20B3\t\x13\x2\x2\x20B2\x20A1\x3\x2\x2\x2\x20B2\x20A3\x3\x2\x2\x2\x20B2"+
		"\x20A5\x3\x2\x2\x2\x20B2\x20AC\x3\x2\x2\x2\x20B2\x20AE\x3\x2\x2\x2\x20B2"+
		"\x20B0\x3\x2\x2\x2\x20B3\x277\x3\x2\x2\x2\x20B4\x20B5\a\x83\x2\x2\x20B5"+
		"\x20C7\a\x4A8\x2\x2\x20B6\x20C8\a\x28E\x2\x2\x20B7\x20B8\a\x294\x2\x2"+
		"\x20B8\x20C3\a\x4BA\x2\x2\x20B9\x20BE\x5\x27A\x13E\x2\x20BA\x20BB\a\x4BC"+
		"\x2\x2\x20BB\x20BD\x5\x27A\x13E\x2\x20BC\x20BA\x3\x2\x2\x2\x20BD\x20C0"+
		"\x3\x2\x2\x2\x20BE\x20BC\x3\x2\x2\x2\x20BE\x20BF\x3\x2\x2\x2\x20BF\x20C2"+
		"\x3\x2\x2\x2\x20C0\x20BE\x3\x2\x2\x2\x20C1\x20B9\x3\x2\x2\x2\x20C2\x20C5"+
		"\x3\x2\x2\x2\x20C3\x20C1\x3\x2\x2\x2\x20C3\x20C4\x3\x2\x2\x2\x20C4\x20C6"+
		"\x3\x2\x2\x2\x20C5\x20C3\x3\x2\x2\x2\x20C6\x20C8\a\x4BB\x2\x2\x20C7\x20B6"+
		"\x3\x2\x2\x2\x20C7\x20B7\x3\x2\x2\x2\x20C8\x279\x3\x2\x2\x2\x20C9\x20CA"+
		"\aL\x2\x2\x20CA\x20CB\a\x4A8\x2\x2\x20CB\x20D1\x5\x4A0\x251\x2\x20CC\x20CD"+
		"\a\x82\x2\x2\x20CD\x20CE\a\x4A8\x2\x2\x20CE\x20CF\a\x4A2\x2\x2\x20CF\x20D1"+
		"\tR\x2\x2\x20D0\x20C9\x3\x2\x2\x2\x20D0\x20CC\x3\x2\x2\x2\x20D1\x27B\x3"+
		"\x2\x2\x2\x20D2\x20D3\a\xB6\x2\x2\x20D3\x20D4\a\x4A8\x2\x2\x20D4\x20D5"+
		"\t@\x2\x2\x20D5\x27D\x3\x2\x2\x2\x20D6\x20D7\a\xD8\x2\x2\x20D7\x20DB\x5"+
		"\x4A0\x251\x2\x20D8\x20D9\a\xD9\x2\x2\x20D9\x20DB\tS\x2\x2\x20DA\x20D6"+
		"\x3\x2\x2\x2\x20DA\x20D8\x3\x2\x2\x2\x20DB\x27F\x3\x2\x2\x2\x20DC\x20DD"+
		"\a%\x2\x2\x20DD\x20DE\a\x131\x2\x2\x20DE\x20E1\x5\x4C2\x262\x2\x20DF\x20E0"+
		"\a\x46\x2\x2\x20E0\x20E2\x5\x4C2\x262\x2\x20E1\x20DF\x3\x2\x2\x2\x20E1"+
		"\x20E2\x3\x2\x2\x2\x20E2\x20E6\x3\x2\x2\x2\x20E3\x20E4\a\x3B2\x2\x2\x20E4"+
		"\x20E5\a\x4A8\x2\x2\x20E5\x20E7\t\x1C\x2\x2\x20E6\x20E3\x3\x2\x2\x2\x20E6"+
		"\x20E7\x3\x2\x2\x2\x20E7\x20E8\x3\x2\x2\x2\x20E8\x20E9\a:\x2\x2\x20E9"+
		"\x20EA\a\x3E1\x2\x2\x20EA\x20EB\a\x4BA\x2\x2\x20EB\x20EC\x5\x12E\x98\x2"+
		"\x20EC\x211F\a\x4BB\x2\x2\x20ED\x20EE\a\x172\x2\x2\x20EE\x20EF\a\x401"+
		"\x2\x2\x20EF\x20F0\a\x4BA\x2\x2\x20F0\x2120\a\x4BB\x2\x2\x20F1\x20F2\a"+
		"\x172\x2\x2\x20F2\x20F3\a\x37E\x2\x2\x20F3\x20F4\a\x4BA\x2\x2\x20F4\x20F9"+
		"\x5\x12C\x97\x2\x20F5\x20F7\a\x4BC\x2\x2\x20F6\x20F5\x3\x2\x2\x2\x20F6"+
		"\x20F7\x3\x2\x2\x2\x20F7\x20F8\x3\x2\x2\x2\x20F8\x20FA\x5\x12A\x96\x2"+
		"\x20F9\x20F6\x3\x2\x2\x2\x20F9\x20FA\x3\x2\x2\x2\x20FA\x2101\x3\x2\x2"+
		"\x2\x20FB\x20FD\a\x4BC\x2\x2\x20FC\x20FB\x3\x2\x2\x2\x20FC\x20FD\x3\x2"+
		"\x2\x2\x20FD\x20FE\x3\x2\x2\x2\x20FE\x20FF\a\x241\x2\x2\x20FF\x2100\a"+
		"\x4A8\x2\x2\x2100\x2102\t\x1D\x2\x2\x2101\x20FC\x3\x2\x2\x2\x2101\x2102"+
		"\x3\x2\x2\x2\x2102\x2109\x3\x2\x2\x2\x2103\x2105\a\x4BC\x2\x2\x2104\x2103"+
		"\x3\x2\x2\x2\x2104\x2105\x3\x2\x2\x2\x2105\x2106\x3\x2\x2\x2\x2106\x2107"+
		"\a\x242\x2\x2\x2107\x2108\a\x4A8\x2\x2\x2108\x210A\a\x4A2\x2\x2\x2109"+
		"\x2104\x3\x2\x2\x2\x2109\x210A\x3\x2\x2\x2\x210A\x210B\x3\x2\x2\x2\x210B"+
		"\x210C\a\x4BB\x2\x2\x210C\x2120\x3\x2\x2\x2\x210D\x210E\a\x172\x2\x2\x210E"+
		"\x210F\a\xE0\x2\x2\x210F\x2110\a\x4BA\x2\x2\x2110\x2115\x5\x12C\x97\x2"+
		"\x2111\x2113\a\x4BC\x2\x2\x2112\x2111\x3\x2\x2\x2\x2112\x2113\x3\x2\x2"+
		"\x2\x2113\x2114\x3\x2\x2\x2\x2114\x2116\x5\x12A\x96\x2\x2115\x2112\x3"+
		"\x2\x2\x2\x2115\x2116\x3\x2\x2\x2\x2116\x2118\x3\x2\x2\x2\x2117\x2119"+
		"\a\x4BC\x2\x2\x2118\x2117\x3\x2\x2\x2\x2118\x2119\x3\x2\x2\x2\x2119\x211A"+
		"\x3\x2\x2\x2\x211A\x211B\a\x341\x2\x2\x211B\x211C\a\x4A8\x2\x2\x211C\x211D"+
		"\t\x1E\x2\x2\x211D\x211E\a\x4BB\x2\x2\x211E\x2120\x3\x2\x2\x2\x211F\x20ED"+
		"\x3\x2\x2\x2\x211F\x20F1\x3\x2\x2\x2\x211F\x210D\x3\x2\x2\x2\x2120\x281"+
		"\x3\x2\x2\x2\x2121\x2122\x5\x284\x143\x2\x2122\x283\x3\x2\x2\x2\x2123"+
		"\x2124\x5\x286\x144\x2\x2124\x2125\x5\x28C\x147\x2\x2125\x212A\x3\x2\x2"+
		"\x2\x2126\x2127\x5\x288\x145\x2\x2127\x2128\x5\x28E\x148\x2\x2128\x212A"+
		"\x3\x2\x2\x2\x2129\x2123\x3\x2\x2\x2\x2129\x2126\x3\x2\x2\x2\x212A\x285"+
		"\x3\x2\x2\x2\x212B\x212C\a\x2BD\x2\x2\x212C\x287\x3\x2\x2\x2\x212D\x212E"+
		"\a\x43D\x2\x2\x212E\x289\x3\x2\x2\x2\x212F\x2130\a\x4A8\x2\x2\x2130\x28B"+
		"\x3\x2\x2\x2\x2131\x2132\x5\x28A\x146\x2\x2132\x2133\x5\x292\x14A\x2\x2133"+
		"\x213E\x3\x2\x2\x2\x2134\x213E\a\x152\x2\x2\x2135\x213E\a\x179\x2\x2\x2136"+
		"\x213E\a\x28E\x2\x2\x2137\x213E\a\x336\x2\x2\x2138\x2139\a\x356\x2\x2"+
		"\x2139\x213E\tT\x2\x2\x213A\x213E\a\x3D0\x2\x2\x213B\x213C\a\x3E8\x2\x2"+
		"\x213C\x213E\a\x4A2\x2\x2\x213D\x2131\x3\x2\x2\x2\x213D\x2134\x3\x2\x2"+
		"\x2\x213D\x2135\x3\x2\x2\x2\x213D\x2136\x3\x2\x2\x2\x213D\x2137\x3\x2"+
		"\x2\x2\x213D\x2138\x3\x2\x2\x2\x213D\x213A\x3\x2\x2\x2\x213D\x213B\x3"+
		"\x2\x2\x2\x213E\x28D\x3\x2\x2\x2\x213F\x2140\x5\x28A\x146\x2\x2140\x2141"+
		"\x5\x290\x149\x2\x2141\x2144\x3\x2\x2\x2\x2142\x2144\a\x28E\x2\x2\x2143"+
		"\x213F\x3\x2\x2\x2\x2143\x2142\x3\x2\x2\x2\x2144\x28F\x3\x2\x2\x2\x2145"+
		"\x2146\x5\x292\x14A\x2\x2146\x291\x3\x2\x2\x2\x2147\x2148\x5\x296\x14C"+
		"\x2\x2148\x2149\x5\x29A\x14E\x2\x2149\x214A\x5\x294\x14B\x2\x214A\x214B"+
		"\x5\x298\x14D\x2\x214B\x293\x3\x2\x2\x2\x214C\x214D\a\x4BE\x2\x2\x214D"+
		"\x295\x3\x2\x2\x2\x214E\x214F\a\x3E1\x2\x2\x214F\x2150\a\x4BE\x2\x2\x2150"+
		"\x2151\a\x11D\x2\x2\x2151\x297\x3\x2\x2\x2\x2152\x2153\a\x4A2\x2\x2\x2153"+
		"\x299\x3\x2\x2\x2\x2154\x2155\x5\x4C2\x262\x2\x2155\x2156\a\x4B5\x2\x2"+
		"\x2156\x2157\x5\x29A\x14E\x2\x2157\x215F\x3\x2\x2\x2\x2158\x2159\x5\x4C2"+
		"\x262\x2\x2159\x215A\a\x4B5\x2\x2\x215A\x215D\x3\x2\x2\x2\x215B\x215D"+
		"\x5\x4C2\x262\x2\x215C\x2158\x3\x2\x2\x2\x215C\x215B\x3\x2\x2\x2\x215D"+
		"\x215F\x3\x2\x2\x2\x215E\x2154\x3\x2\x2\x2\x215E\x215C\x3\x2\x2\x2\x215F"+
		"\x29B\x3\x2\x2\x2\x2160\x2161\a\xEC\x2\x2\x2161\x2162\x5\x4A0\x251\x2"+
		"\x2162\x29D\x3\x2\x2\x2\x2163\x2164\a\x12E\x2\x2\x2164\x2165\x5\x4A0\x251"+
		"\x2\x2165\x29F\x3\x2\x2\x2\x2166\x2167\tU\x2\x2\x2167\x2A1\x3\x2\x2\x2"+
		"\x2168\x2169\tV\x2\x2\x2169\x2A3\x3\x2\x2\x2\x216A\x216B\tW\x2\x2\x216B"+
		"\x2A5\x3\x2\x2\x2\x216C\x216D\a\x101\x2\x2\x216D\x216E\a\x4A8\x2\x2\x216E"+
		"\x216F\tX\x2\x2\x216F\x2A7\x3\x2\x2\x2\x2170\x2171\a\xF0\x2\x2\x2171\x218A"+
		"\x5\x4A0\x251\x2\x2172\x2173\a\x3FD\x2\x2\x2173\x218A\x5\x4A0\x251\x2"+
		"\x2174\x2175\a\xFD\x2\x2\x2175\x2178\a\x4A8\x2\x2\x2176\x2179\x5\x4C2"+
		"\x262\x2\x2177\x2179\a\x4A4\x2\x2\x2178\x2176\x3\x2\x2\x2\x2178\x2177"+
		"\x3\x2\x2\x2\x2179\x218A\x3\x2\x2\x2\x217A\x217B\a\xFC\x2\x2\x217B\x217E"+
		"\a\x4A8\x2\x2\x217C\x217F\x5\x4C2\x262\x2\x217D\x217F\a\x4A4\x2\x2\x217E"+
		"\x217C\x3\x2\x2\x2\x217E\x217D\x3\x2\x2\x2\x217F\x218A\x3\x2\x2\x2\x2180"+
		"\x2181\a\x257\x2\x2\x2181\x2182\a\x4A8\x2\x2\x2182\x218A\t\x13\x2\x2\x2183"+
		"\x2184\a\x3F6\x2\x2\x2184\x2185\a\x4A8\x2\x2\x2185\x218A\t\x13\x2\x2\x2186"+
		"\x2187\a\x402\x2\x2\x2187\x2188\a\x4A8\x2\x2\x2188\x218A\a\x4A2\x2\x2"+
		"\x2189\x2170\x3\x2\x2\x2\x2189\x2172\x3\x2\x2\x2\x2189\x2174\x3\x2\x2"+
		"\x2\x2189\x217A\x3\x2\x2\x2\x2189\x2180\x3\x2\x2\x2\x2189\x2183\x3\x2"+
		"\x2\x2\x2189\x2186\x3\x2\x2\x2\x218A\x2A9\x3\x2\x2\x2\x218B\x2194\a\x19E"+
		"\x2\x2\x218C\x218D\aS\x2\x2\x218D\x218E\a\x19A\x2\x2\x218E\x218F\a\x4A8"+
		"\x2\x2\x218F\x2192\x5\x4C2\x262\x2\x2190\x2192\a\x28E\x2\x2\x2191\x218C"+
		"\x3\x2\x2\x2\x2191\x2190\x3\x2\x2\x2\x2192\x2195\x3\x2\x2\x2\x2193\x2195"+
		"\tY\x2\x2\x2194\x2191\x3\x2\x2\x2\x2194\x2193\x3\x2\x2\x2\x2195\x2AB\x3"+
		"\x2\x2\x2\x2196\x2197\a\x24C\x2\x2\x2197\x2198\t\x13\x2\x2\x2198\x2AD"+
		"\x3\x2\x2\x2\x2199\x219A\a\x2B5\x2\x2\x219A\x219B\tZ\x2\x2\x219B\x2AF"+
		"\x3\x2\x2\x2\x219C\x219D\a\x311\x2\x2\x219D\x21A6\t[\x2\x2\x219E\x219F"+
		"\a\x3ED\x2\x2\x219F\x21A6\x5\x4A0\x251\x2\x21A0\x21A1\a\a\x2\x2\x21A1"+
		"\x21A2\a\x4A8\x2\x2\x21A2\x21A6\x5\x4A0\x251\x2\x21A3\x21A4\a\x2B3\x2"+
		"\x2\x21A4\x21A6\t\\\x2\x2\x21A5\x219C\x3\x2\x2\x2\x21A5\x219E\x3\x2\x2"+
		"\x2\x21A5\x21A0\x3\x2\x2\x2\x21A5\x21A3\x3\x2\x2\x2\x21A6\x2B1\x3\x2\x2"+
		"\x2\x21A7\x21AE\a\x12B\x2\x2\x21A8\x21AE\a\x114\x2\x2\x21A9\x21AE\a\x25C"+
		"\x2\x2\x21AA\x21AE\a\x135\x2\x2\x21AB\x21AC\a\x1AB\x2\x2\x21AC\x21AE\x5"+
		"\x4A0\x251\x2\x21AD\x21A7\x3\x2\x2\x2\x21AD\x21A8\x3\x2\x2\x2\x21AD\x21A9"+
		"\x3\x2\x2\x2\x21AD\x21AA\x3\x2\x2\x2\x21AD\x21AB\x3\x2\x2\x2\x21AE\x2B3"+
		"\x3\x2\x2\x2\x21AF\x21B0\a \x2\x2\x21B0\x21B5\x5\x4A0\x251\x2\x21B1\x21B2"+
		"\a\x308\x2\x2\x21B2\x21B5\t\x13\x2\x2\x21B3\x21B5\t\x13\x2\x2\x21B4\x21AF"+
		"\x3\x2\x2\x2\x21B4\x21B1\x3\x2\x2\x2\x21B4\x21B3\x3\x2\x2\x2\x21B5\x2B5"+
		"\x3\x2\x2\x2\x21B6\x21B7\a+\x2\x2\x21B7\x21CC\x5\x4A0\x251\x2\x21B8\x21B9"+
		"\a*\x2\x2\x21B9\x21CC\x5\x4A0\x251\x2\x21BA\x21BB\a.\x2\x2\x21BB\x21CC"+
		"\x5\x4A0\x251\x2\x21BC\x21BD\a/\x2\x2\x21BD\x21CC\x5\x4A0\x251\x2\x21BE"+
		"\x21BF\a\x38\x2\x2\x21BF\x21CC\x5\x4A0\x251\x2\x21C0\x21C1\a\xA8\x2\x2"+
		"\x21C1\x21C2\a\x4A8\x2\x2\x21C2\x21CC\a\x4A2\x2\x2\x21C3\x21C4\a\xAF\x2"+
		"\x2\x21C4\x21CC\x5\x4A0\x251\x2\x21C5\x21C6\a\x285\x2\x2\x21C6\x21CC\x5"+
		"\x4A0\x251\x2\x21C7\x21C8\a\x2F5\x2\x2\x21C8\x21CC\x5\x4A0\x251\x2\x21C9"+
		"\x21CA\a\x312\x2\x2\x21CA\x21CC\x5\x4A0\x251\x2\x21CB\x21B6\x3\x2\x2\x2"+
		"\x21CB\x21B8\x3\x2\x2\x2\x21CB\x21BA\x3\x2\x2\x2\x21CB\x21BC\x3\x2\x2"+
		"\x2\x21CB\x21BE\x3\x2\x2\x2\x21CB\x21C0\x3\x2\x2\x2\x21CB\x21C3\x3\x2"+
		"\x2\x2\x21CB\x21C5\x3\x2\x2\x2\x21CB\x21C7\x3\x2\x2\x2\x21CB\x21C9\x3"+
		"\x2\x2\x2\x21CC\x2B7\x3\x2\x2\x2\x21CD\x21CE\a\x3DF\x2\x2\x21CE\x21CF"+
		"\a\x4A8\x2\x2\x21CF\x21D0\a\x4A2\x2\x2\x21D0\x21D1\t]\x2\x2\x21D1\x2B9"+
		"\x3\x2\x2\x2\x21D2\x21D3\a\x342\x2\x2\x21D3\x21D4\a\x15\x2\x2\x21D4\x21D9"+
		"\a\x4A2\x2\x2\x21D5\x21D6\a\x342\x2\x2\x21D6\x21D9\a\x1BD\x2\x2\x21D7"+
		"\x21D9\a\x27D\x2\x2\x21D8\x21D2\x3\x2\x2\x2\x21D8\x21D5\x3\x2\x2\x2\x21D8"+
		"\x21D7\x3\x2\x2\x2\x21D9\x2BB\x3\x2\x2\x2\x21DA\x21DB\a\x11E\x2\x2\x21DB"+
		"\x21DE\a\x1C6\x2\x2\x21DC\x21DD\a\x1B6\x2\x2\x21DD\x21DF\a\x147\x2\x2"+
		"\x21DE\x21DC\x3\x2\x2\x2\x21DE\x21DF\x3\x2\x2\x2\x21DF\x21F0\x3\x2\x2"+
		"\x2\x21E0\x21E5\x5\x2BE\x160\x2\x21E1\x21E2\a\x4BC\x2\x2\x21E2\x21E4\x5"+
		"\x2BE\x160\x2\x21E3\x21E1\x3\x2\x2\x2\x21E4\x21E7\x3\x2\x2\x2\x21E5\x21E3"+
		"\x3\x2\x2\x2\x21E5\x21E6\x3\x2\x2\x2\x21E6\x21F1\x3\x2\x2\x2\x21E7\x21E5"+
		"\x3\x2\x2\x2\x21E8\x21ED\x5\x2C0\x161\x2\x21E9\x21EA\a\x4BC\x2\x2\x21EA"+
		"\x21EC\x5\x2C0\x161\x2\x21EB\x21E9\x3\x2\x2\x2\x21EC\x21EF\x3\x2\x2\x2"+
		"\x21ED\x21EB\x3\x2\x2\x2\x21ED\x21EE\x3\x2\x2\x2\x21EE\x21F1\x3\x2\x2"+
		"\x2\x21EF\x21ED\x3\x2\x2\x2\x21F0\x21E0\x3\x2\x2\x2\x21F0\x21E8\x3\x2"+
		"\x2\x2\x21F1\x21F3\x3\x2\x2\x2\x21F2\x21F4\a\x4BD\x2\x2\x21F3\x21F2\x3"+
		"\x2\x2\x2\x21F3\x21F4\x3\x2\x2\x2\x21F4\x2BD\x3\x2\x2\x2\x21F5\x21F6\x5"+
		"\x4C2\x262\x2\x21F6\x21F7\a\x294\x2\x2\x21F7\x21F8\x5\x486\x244\x2\x21F8"+
		"\x2BF\x3\x2\x2\x2\x21F9\x21FA\x5\x4C2\x262\x2\x21FA\x21FB\a\x4B5\x2\x2"+
		"\x21FB\x21FD\x3\x2\x2\x2\x21FC\x21F9\x3\x2\x2\x2\x21FC\x21FD\x3\x2\x2"+
		"\x2\x21FD\x21FE\x3\x2\x2\x2\x21FE\x21FF\x5\x4C2\x262\x2\x21FF\x2200\a"+
		"\x4B5\x2\x2\x2200\x2201\x5\x4C2\x262\x2\x2201\x2C1\x3\x2\x2\x2\x2202\x2203"+
		"\a\x11E\x2\x2\x2203\x2206\t\x46\x2\x2\x2204\x2205\a\x1B6\x2\x2\x2205\x2207"+
		"\a\x147\x2\x2\x2206\x2204\x3\x2\x2\x2\x2206\x2207\x3\x2\x2\x2\x2207\x2208"+
		"\x3\x2\x2\x2\x2208\x220D\x5\x48C\x247\x2\x2209\x220A\a\x4BC\x2\x2\x220A"+
		"\x220C\x5\x48C\x247\x2\x220B\x2209\x3\x2\x2\x2\x220C\x220F\x3\x2\x2\x2"+
		"\x220D\x220B\x3\x2\x2\x2\x220D\x220E\x3\x2\x2\x2\x220E\x2211\x3\x2\x2"+
		"\x2\x220F\x220D\x3\x2\x2\x2\x2210\x2212\a\x4BD\x2\x2\x2211\x2210\x3\x2"+
		"\x2\x2\x2211\x2212\x3\x2\x2\x2\x2212\x2C3\x3\x2\x2\x2\x2213\x2216\x5\x2C6"+
		"\x164\x2\x2214\x2216\x5\x2C8\x165\x2\x2215\x2213\x3\x2\x2\x2\x2215\x2214"+
		"\x3\x2\x2\x2\x2216\x2C5\x3\x2\x2\x2\x2217\x2218\a\x11E\x2\x2\x2218\x221B"+
		"\a\x3F8\x2\x2\x2219\x221A\a\x1B6\x2\x2\x221A\x221C\a\x147\x2\x2\x221B"+
		"\x2219\x3\x2\x2\x2\x221B\x221C\x3\x2\x2\x2\x221C\x221D\x3\x2\x2\x2\x221D"+
		"\x2222\x5\x48A\x246\x2\x221E\x221F\a\x4BC\x2\x2\x221F\x2221\x5\x48A\x246"+
		"\x2\x2220\x221E\x3\x2\x2\x2\x2221\x2224\x3\x2\x2\x2\x2222\x2220\x3\x2"+
		"\x2\x2\x2222\x2223\x3\x2\x2\x2\x2223\x2226\x3\x2\x2\x2\x2224\x2222\x3"+
		"\x2\x2\x2\x2225\x2227\a\x4BD\x2\x2\x2226\x2225\x3\x2\x2\x2\x2226\x2227"+
		"\x3\x2\x2\x2\x2227\x2C7\x3\x2\x2\x2\x2228\x2229\a\x11E\x2\x2\x2229\x222C"+
		"\a\x3F8\x2\x2\x222A\x222B\a\x1B6\x2\x2\x222B\x222D\a\x147\x2\x2\x222C"+
		"\x222A\x3\x2\x2\x2\x222C\x222D\x3\x2\x2\x2\x222D\x222E\x3\x2\x2\x2\x222E"+
		"\x2233\x5\x48A\x246\x2\x222F\x2230\a\x4BC\x2\x2\x2230\x2232\x5\x48A\x246"+
		"\x2\x2231\x222F\x3\x2\x2\x2\x2232\x2235\x3\x2\x2\x2\x2233\x2231\x3\x2"+
		"\x2\x2\x2233\x2234\x3\x2\x2\x2\x2234\x2236\x3\x2\x2\x2\x2235\x2233\x3"+
		"\x2\x2\x2\x2236\x223A\a\x294\x2\x2\x2237\x223B\a\xDD\x2\x2\x2238\x2239"+
		"\a\x18\x2\x2\x2239\x223B\a\x37A\x2\x2\x223A\x2237\x3\x2\x2\x2\x223A\x2238"+
		"\x3\x2\x2\x2\x223B\x223D\x3\x2\x2\x2\x223C\x223E\a\x4BD\x2\x2\x223D\x223C"+
		"\x3\x2\x2\x2\x223D\x223E\x3\x2\x2\x2\x223E\x2C9\x3\x2\x2\x2\x223F\x2240"+
		"\a\x11E\x2\x2\x2240\x2243\a\x187\x2\x2\x2241\x2242\a\x1B6\x2\x2\x2242"+
		"\x2244\a\x147\x2\x2\x2243\x2241\x3\x2\x2\x2\x2243\x2244\x3\x2\x2\x2\x2244"+
		"\x2245\x3\x2\x2\x2\x2245\x224A\x5\x48C\x247\x2\x2246\x2247\a\x4BC\x2\x2"+
		"\x2247\x2249\x5\x48C\x247\x2\x2248\x2246\x3\x2\x2\x2\x2249\x224C\x3\x2"+
		"\x2\x2\x224A\x2248\x3\x2\x2\x2\x224A\x224B\x3\x2\x2\x2\x224B\x224E\x3"+
		"\x2\x2\x2\x224C\x224A\x3\x2\x2\x2\x224D\x224F\a\x4BD\x2\x2\x224E\x224D"+
		"\x3\x2\x2\x2\x224E\x224F\x3\x2\x2\x2\x224F\x2CB\x3\x2\x2\x2\x2250\x2251"+
		"\a\x11E\x2\x2\x2251\x225B\a\x3B4\x2\x2\x2252\x2254\a\x4BC\x2\x2\x2253"+
		"\x2252\x3\x2\x2\x2\x2253\x2254\x3\x2\x2\x2\x2254\x2258\x3\x2\x2\x2\x2255"+
		"\x2256\x5\x488\x245\x2\x2256\x2257\a\x4B5\x2\x2\x2257\x2259\x3\x2\x2\x2"+
		"\x2258\x2255\x3\x2\x2\x2\x2258\x2259\x3\x2\x2\x2\x2259\x225A\x3\x2\x2"+
		"\x2\x225A\x225C\x5\x4C2\x262\x2\x225B\x2253\x3\x2\x2\x2\x225C\x225D\x3"+
		"\x2\x2\x2\x225D\x225B\x3\x2\x2\x2\x225D\x225E\x3\x2\x2\x2\x225E\x225F"+
		"\x3\x2\x2\x2\x225F\x2260\a\x4BD\x2\x2\x2260\x2CD\x3\x2\x2\x2\x2261\x2262"+
		"\a\x11E\x2\x2\x2262\x2265\a\x3D7\x2\x2\x2263\x2264\a\x1B6\x2\x2\x2264"+
		"\x2266\a\x147\x2\x2\x2265\x2263\x3\x2\x2\x2\x2265\x2266\x3\x2\x2\x2\x2266"+
		"\x2267\x3\x2\x2\x2\x2267\x226C\x5\x488\x245\x2\x2268\x2269\a\x4BC\x2\x2"+
		"\x2269\x226B\x5\x488\x245\x2\x226A\x2268\x3\x2\x2\x2\x226B\x226E\x3\x2"+
		"\x2\x2\x226C\x226A\x3\x2\x2\x2\x226C\x226D\x3\x2\x2\x2\x226D\x2270\x3"+
		"\x2\x2\x2\x226E\x226C\x3\x2\x2\x2\x226F\x2271\a\x4BD\x2\x2\x2270\x226F"+
		"\x3\x2\x2\x2\x2270\x2271\x3\x2\x2\x2\x2271\x2CF\x3\x2\x2\x2\x2272\x2273"+
		"\a\x11E\x2\x2\x2273\x2276\a\x42C\x2\x2\x2274\x2275\a\x1B6\x2\x2\x2275"+
		"\x2277\a\x147\x2\x2\x2276\x2274\x3\x2\x2\x2\x2276\x2277\x3\x2\x2\x2\x2277"+
		"\x2278\x3\x2\x2\x2\x2278\x227D\x5\x48A\x246\x2\x2279\x227A\a\x4BC\x2\x2"+
		"\x227A\x227C\x5\x48A\x246\x2\x227B\x2279\x3\x2\x2\x2\x227C\x227F\x3\x2"+
		"\x2\x2\x227D\x227B\x3\x2\x2\x2\x227D\x227E\x3\x2\x2\x2\x227E\x2281\x3"+
		"\x2\x2\x2\x227F\x227D\x3\x2\x2\x2\x2280\x2282\a\x4BD\x2\x2\x2281\x2280"+
		"\x3\x2\x2\x2\x2281\x2282\x3\x2\x2\x2\x2282\x2D1\x3\x2\x2\x2\x2283\x2284"+
		"\a\xC9\x2\x2\x2284\x2285\a\x403\x2\x2\x2285\x228B\x5\x48A\x246\x2\x2286"+
		"\x2287\a\x181\x2\x2\x2287\x2289\x5\x4BA\x25E\x2\x2288\x228A\x5\x4A4\x253"+
		"\x2\x2289\x2288\x3\x2\x2\x2\x2289\x228A\x3\x2\x2\x2\x228A\x228C\x3\x2"+
		"\x2\x2\x228B\x2286\x3\x2\x2\x2\x228B\x228C\x3\x2\x2\x2\x228C\x2293\x3"+
		"\x2\x2\x2\x228D\x228E\a:\x2\x2\x228E\x228F\a\x3D7\x2\x2\x228F\x2290\a"+
		"\x4BA\x2\x2\x2290\x2291\x5\x36A\x1B6\x2\x2291\x2292\a\x4BB\x2\x2\x2292"+
		"\x2294\x3\x2\x2\x2\x2293\x228D\x3\x2\x2\x2\x2293\x2294\x3\x2\x2\x2\x2294"+
		"\x2D3\x3\x2\x2\x2\x2295\x2296\a\x11E\x2\x2\x2296\x2299\a\x403\x2\x2\x2297"+
		"\x2298\a\x1B6\x2\x2\x2298\x229A\a\x147\x2\x2\x2299\x2297\x3\x2\x2\x2\x2299"+
		"\x229A\x3\x2\x2\x2\x229A\x229B\x3\x2\x2\x2\x229B\x229C\x5\x48A\x246\x2"+
		"\x229C\x2D5\x3\x2\x2\x2\x229D\x22A0\x5\x2D8\x16D\x2\x229E\x22A0\x5\x2DA"+
		"\x16E\x2\x229F\x229D\x3\x2\x2\x2\x229F\x229E\x3\x2\x2\x2\x22A0\x2D7\x3"+
		"\x2\x2\x2\x22A1\x22A2\a\x29B\x2\x2\x22A2\x22A3\a\x4BA\x2\x2\x22A3\x22A4"+
		"\x5\x4C2\x262\x2\x22A4\x22A5\a\x4BC\x2\x2\x22A5\x22A6\a\x4A4\x2\x2\x22A6"+
		"\x22A7\a\x4BB\x2\x2\x22A7\x2D9\x3\x2\x2\x2\x22A8\x22A9\a\x299\x2\x2\x22A9"+
		"\x22AA\a\x4BA\x2\x2\x22AA\x22AB\a\x4A4\x2\x2\x22AB\x22AC\a\x4BC\x2\x2"+
		"\x22AC\x22AD\a\x4A4\x2\x2\x22AD\x22AE\a\x4BB\x2\x2\x22AE\x22B0\a\x4B5"+
		"\x2\x2\x22AF\x22B1\x5\x4C2\x262\x2\x22B0\x22AF\x3\x2\x2\x2\x22B0\x22B1"+
		"\x3\x2\x2\x2\x22B1\x22B2\x3\x2\x2\x2\x22B2\x22B4\a\x4B5\x2\x2\x22B3\x22B5"+
		"\x5\x4C2\x262\x2\x22B4\x22B3\x3\x2\x2\x2\x22B4\x22B5\x3\x2\x2\x2\x22B5"+
		"\x22B6\x3\x2\x2\x2\x22B6\x22B7\a\x4B5\x2\x2\x22B7\x22B8\x5\x4C2\x262\x2"+
		"\x22B8\x2DB\x3\x2\x2\x2\x22B9\x22BA\a\xF6\x2\x2\x22BA\x22BC\a\x4A0\x2"+
		"\x2\x22BB\x22BD\a:\x2\x2\x22BC\x22BB\x3\x2\x2\x2\x22BC\x22BD\x3\x2\x2"+
		"\x2\x22BD\x22C1\x3\x2\x2\x2\x22BE\x22C2\x5\x4BA\x25E\x2\x22BF\x22C2\x5"+
		"\x362\x1B2\x2\x22C0\x22C2\x5\x488\x245\x2\x22C1\x22BE\x3\x2\x2\x2\x22C1"+
		"\x22BF\x3\x2\x2\x2\x22C1\x22C0\x3\x2\x2\x2\x22C2\x22E0\x3\x2\x2\x2\x22C3"+
		"\x22C4\a\xF6\x2\x2\x22C4\x22C9\x5\x360\x1B1\x2\x22C5\x22C6\a\x4BC\x2\x2"+
		"\x22C6\x22C8\x5\x360\x1B1\x2\x22C7\x22C5\x3\x2\x2\x2\x22C8\x22CB\x3\x2"+
		"\x2\x2\x22C9\x22C7\x3\x2\x2\x2\x22C9\x22CA\x3\x2\x2\x2\x22CA\x22E0\x3"+
		"\x2\x2\x2\x22CB\x22C9\x3\x2\x2\x2\x22CC\x22CD\a\xF6\x2\x2\x22CD\x22CF"+
		"\a\x4A0\x2\x2\x22CE\x22D0\a:\x2\x2\x22CF\x22CE\x3\x2\x2\x2\x22CF\x22D0"+
		"\x3\x2\x2\x2\x22D0\x22D1\x3\x2\x2\x2\x22D1\x22E0\x5\x366\x1B4\x2\x22D2"+
		"\x22D3\a\x439\x2\x2\x22D3\x22D4\a\x446\x2\x2\x22D4\x22D5\a\x4BA\x2\x2"+
		"\x22D5\x22DA\x5\x2DE\x170\x2\x22D6\x22D7\a\x4BC\x2\x2\x22D7\x22D9\x5\x2DE"+
		"\x170\x2\x22D8\x22D6\x3\x2\x2\x2\x22D9\x22DC\x3\x2\x2\x2\x22DA\x22D8\x3"+
		"\x2\x2\x2\x22DA\x22DB\x3\x2\x2\x2\x22DB\x22DD\x3\x2\x2\x2\x22DC\x22DA"+
		"\x3\x2\x2\x2\x22DD\x22DE\a\x4BB\x2\x2\x22DE\x22E0\x3\x2\x2\x2\x22DF\x22B9"+
		"\x3\x2\x2\x2\x22DF\x22C3\x3\x2\x2\x2\x22DF\x22CC\x3\x2\x2\x2\x22DF\x22D2"+
		"\x3\x2\x2\x2\x22E0\x2DD\x3\x2\x2\x2\x22E1\x22E2\a\x4A4\x2\x2\x22E2\x22E3"+
		"\a:\x2\x2\x22E3\x22E7\x5\x4C2\x262\x2\x22E4\x22E5\a\xF9\x2\x2\x22E5\x22E7"+
		"\a\x4A4\x2\x2\x22E6\x22E1\x3\x2\x2\x2\x22E6\x22E4\x3\x2\x2\x2\x22E7\x2DF"+
		"\x3\x2\x2\x2\x22E8\x22EA\a\x97\x2\x2\x22E9\x22EB\a\x194\x2\x2\x22EA\x22E9"+
		"\x3\x2\x2\x2\x22EA\x22EB\x3\x2\x2\x2\x22EB\x22EC\x3\x2\x2\x2\x22EC\x22EE"+
		"\x5\x49E\x250\x2\x22ED\x22EF\a\x4BD\x2\x2\x22EE\x22ED\x3\x2\x2\x2\x22EE"+
		"\x22EF\x3\x2\x2\x2\x22EF\x2306\x3\x2\x2\x2\x22F0\x22F2\a\xF5\x2\x2\x22F1"+
		"\x22F3\a\x194\x2\x2\x22F2\x22F1\x3\x2\x2\x2\x22F2\x22F3\x3\x2\x2\x2\x22F3"+
		"\x22F5\x3\x2\x2\x2\x22F4\x22F6\a\xD7\x2\x2\x22F5\x22F4\x3\x2\x2\x2\x22F5"+
		"\x22F6\x3\x2\x2\x2\x22F6\x22F7\x3\x2\x2\x2\x22F7\x22F9\x5\x49E\x250\x2"+
		"\x22F8\x22FA\a\x4BD\x2\x2\x22F9\x22F8\x3\x2\x2\x2\x22F9\x22FA\x3\x2\x2"+
		"\x2\x22FA\x2306\x3\x2\x2\x2\x22FB\x2306\x5\x38E\x1C8\x2\x22FC\x2306\x5"+
		"\x394\x1CB\x2\x22FD\x22FF\a\x298\x2\x2\x22FE\x2300\a\x194\x2\x2\x22FF"+
		"\x22FE\x3\x2\x2\x2\x22FF\x2300\x3\x2\x2\x2\x2300\x2301\x3\x2\x2\x2\x2301"+
		"\x2303\x5\x49E\x250\x2\x2302\x2304\a\x4BD\x2\x2\x2303\x2302\x3\x2\x2\x2"+
		"\x2303\x2304\x3\x2\x2\x2\x2304\x2306\x3\x2\x2\x2\x2305\x22E8\x3\x2\x2"+
		"\x2\x2305\x22F0\x3\x2\x2\x2\x2305\x22FB\x3\x2\x2\x2\x2305\x22FC\x3\x2"+
		"\x2\x2\x2305\x22FD\x3\x2\x2\x2\x2306\x2E1\x3\x2\x2\x2\x2307\x2308\aW\x2"+
		"\x2\x2308\x2309\a\xDD\x2\x2\x2309\x2316\x5\x4C2\x262\x2\x230A\x2313\a"+
		"\x30C\x2\x2\x230B\x230D\a\x4BC\x2\x2\x230C\x230B\x3\x2\x2\x2\x230C\x230D"+
		"\x3\x2\x2\x2\x230D\x230E\x3\x2\x2\x2\x230E\x230F\t^\x2\x2\x230F\x2310"+
		"\a\x4A8\x2\x2\x2310\x2312\a\x4A4\x2\x2\x2311\x230C\x3\x2\x2\x2\x2312\x2315"+
		"\x3\x2\x2\x2\x2313\x2311\x3\x2\x2\x2\x2313\x2314\x3\x2\x2\x2\x2314\x2317"+
		"\x3\x2\x2\x2\x2315\x2313\x3\x2\x2\x2\x2316\x230A\x3\x2\x2\x2\x2316\x2317"+
		"\x3\x2\x2\x2\x2317\x2320\x3\x2\x2\x2\x2318\x231A\a\x4BC\x2\x2\x2319\x2318"+
		"\x3\x2\x2\x2\x2319\x231A\x3\x2\x2\x2\x231A\x231B\x3\x2\x2\x2\x231B\x231C"+
		"\t^\x2\x2\x231C\x231D\a\x4A8\x2\x2\x231D\x231F\a\x4A4\x2\x2\x231E\x2319"+
		"\x3\x2\x2\x2\x231F\x2322\x3\x2\x2\x2\x2320\x231E\x3\x2\x2\x2\x2320\x2321"+
		"\x3\x2\x2\x2\x2321\x233A\x3\x2\x2\x2\x2322\x2320\x3\x2\x2\x2\x2323\x2328"+
		"\a\x3EB\x2\x2\x2324\x2326\a\x4BC\x2\x2\x2325\x2324\x3\x2\x2\x2\x2325\x2326"+
		"\x3\x2\x2\x2\x2326\x2327\x3\x2\x2\x2\x2327\x2329\x5\x4C2\x262\x2\x2328"+
		"\x2325\x3\x2\x2\x2\x2329\x232A\x3\x2\x2\x2\x232A\x2328\x3\x2\x2\x2\x232A"+
		"\x232B\x3\x2\x2\x2\x232B\x233B\x3\x2\x2\x2\x232C\x2336\a\x3EB\x2\x2\x232D"+
		"\x232F\a\x4BC\x2\x2\x232E\x232D\x3\x2\x2\x2\x232E\x232F\x3\x2\x2\x2\x232F"+
		"\x2330\x3\x2\x2\x2\x2330\x2331\t_\x2\x2\x2331\x2334\a\x4A8\x2\x2\x2332"+
		"\x2335\a\x4A4\x2\x2\x2333\x2335\x5\x4C2\x262\x2\x2334\x2332\x3\x2\x2\x2"+
		"\x2334\x2333\x3\x2\x2\x2\x2335\x2337\x3\x2\x2\x2\x2336\x232E\x3\x2\x2"+
		"\x2\x2337\x2338\x3\x2\x2\x2\x2338\x2336\x3\x2\x2\x2\x2338\x2339\x3\x2"+
		"\x2\x2\x2339\x233B\x3\x2\x2\x2\x233A\x2323\x3\x2\x2\x2\x233A\x232C\x3"+
		"\x2\x2\x2\x233B\x235D\x3\x2\x2\x2\x233C\x233D\a\x24A\x2\x2\x233D\x2342"+
		"\a\x3EB\x2\x2\x233E\x2340\a\x4BC\x2\x2\x233F\x233E\x3\x2\x2\x2\x233F\x2340"+
		"\x3\x2\x2\x2\x2340\x2341\x3\x2\x2\x2\x2341\x2343\x5\x4C2\x262\x2\x2342"+
		"\x233F\x3\x2\x2\x2\x2343\x2344\x3\x2\x2\x2\x2344\x2342\x3\x2\x2\x2\x2344"+
		"\x2345\x3\x2\x2\x2\x2345\x2347\x3\x2\x2\x2\x2346\x233C\x3\x2\x2\x2\x2347"+
		"\x2348\x3\x2\x2\x2\x2348\x2346\x3\x2\x2\x2\x2348\x2349\x3\x2\x2\x2\x2349"+
		"\x235E\x3\x2\x2\x2\x234A\x234B\a\x24A\x2\x2\x234B\x2355\a\x3EB\x2\x2\x234C"+
		"\x234E\a\x4BC\x2\x2\x234D\x234C\x3\x2\x2\x2\x234D\x234E\x3\x2\x2\x2\x234E"+
		"\x234F\x3\x2\x2\x2\x234F\x2350\t_\x2\x2\x2350\x2353\a\x4A8\x2\x2\x2351"+
		"\x2354\a\x4A4\x2\x2\x2352\x2354\x5\x4C2\x262\x2\x2353\x2351\x3\x2\x2\x2"+
		"\x2353\x2352\x3\x2\x2\x2\x2354\x2356\x3\x2\x2\x2\x2355\x234D\x3\x2\x2"+
		"\x2\x2356\x2357\x3\x2\x2\x2\x2357\x2355\x3\x2\x2\x2\x2357\x2358\x3\x2"+
		"\x2\x2\x2358\x235A\x3\x2\x2\x2\x2359\x234A\x3\x2\x2\x2\x235A\x235B\x3"+
		"\x2\x2\x2\x235B\x2359\x3\x2\x2\x2\x235B\x235C\x3\x2\x2\x2\x235C\x235E"+
		"\x3\x2\x2\x2\x235D\x2346\x3\x2\x2\x2\x235D\x2359\x3\x2\x2\x2\x235D\x235E"+
		"\x3\x2\x2\x2\x235E\x23FF\x3\x2\x2\x2\x235F\x23FC\a\x439\x2\x2\x2360\x2362"+
		"\a\x4BC\x2\x2\x2361\x2360\x3\x2\x2\x2\x2361\x2362\x3\x2\x2\x2\x2362\x2363"+
		"\x3\x2\x2\x2\x2363\x23FB\a\x110\x2\x2\x2364\x2366\a\x4BC\x2\x2\x2365\x2364"+
		"\x3\x2\x2\x2\x2365\x2366\x3\x2\x2\x2\x2366\x2367\x3\x2\x2\x2\x2367\x23FB"+
		"\a\xC4\x2\x2\x2368\x236A\a\x4BC\x2\x2\x2369\x2368\x3\x2\x2\x2\x2369\x236A"+
		"\x3\x2\x2\x2\x236A\x236B\x3\x2\x2\x2\x236B\x23FB\t`\x2\x2\x236C\x236E"+
		"\a\x4BC\x2\x2\x236D\x236C\x3\x2\x2\x2\x236D\x236E\x3\x2\x2\x2\x236E\x236F"+
		"\x3\x2\x2\x2\x236F\x2370\a\x109\x2\x2\x2370\x2373\a\x4A8\x2\x2\x2371\x2374"+
		"\a\x4A4\x2\x2\x2372\x2374\x5\x4C2\x262\x2\x2373\x2371\x3\x2\x2\x2\x2373"+
		"\x2372\x3\x2\x2\x2\x2374\x23FB\x3\x2\x2\x2\x2375\x2377\a\x4BC\x2\x2\x2376"+
		"\x2375\x3\x2\x2\x2\x2376\x2377\x3\x2\x2\x2\x2377\x2378\x3\x2\x2\x2\x2378"+
		"\x2379\a\x253\x2\x2\x2379\x237A\a\x4A8\x2\x2\x237A\x23FB\x5\x4C2\x262"+
		"\x2\x237B\x237D\a\x4BC\x2\x2\x237C\x237B\x3\x2\x2\x2\x237C\x237D\x3\x2"+
		"\x2\x2\x237D\x237E\x3\x2\x2\x2\x237E\x23FB\a\xCC\x2\x2\x237F\x2381\a\x4BC"+
		"\x2\x2\x2380\x237F\x3\x2\x2\x2\x2380\x2381\x3\x2\x2\x2\x2381\x2382\x3"+
		"\x2\x2\x2\x2382\x23FB\a\x16B\x2\x2\x2383\x2385\a\x4BC\x2\x2\x2384\x2383"+
		"\x3\x2\x2\x2\x2384\x2385\x3\x2\x2\x2\x2385\x2392\x3\x2\x2\x2\x2386\x2387"+
		"\a\x14B\x2\x2\x2387\x238A\a\x4A8\x2\x2\x2388\x238B\a\x4A4\x2\x2\x2389"+
		"\x238B\x5\x4C2\x262\x2\x238A\x2388\x3\x2\x2\x2\x238A\x2389\x3\x2\x2\x2"+
		"\x238B\x2393\x3\x2\x2\x2\x238C\x238D\a\x337\x2\x2\x238D\x2390\a\x4A8\x2"+
		"\x2\x238E\x2391\a\x4A2\x2\x2\x238F\x2391\x5\x4C2\x262\x2\x2390\x238E\x3"+
		"\x2\x2\x2\x2390\x238F\x3\x2\x2\x2\x2391\x2393\x3\x2\x2\x2\x2392\x2386"+
		"\x3\x2\x2\x2\x2392\x238C\x3\x2\x2\x2\x2393\x23FB\x3\x2\x2\x2\x2394\x2396"+
		"\a\x4BC\x2\x2\x2395\x2394\x3\x2\x2\x2\x2395\x2396\x3\x2\x2\x2\x2396\x2397"+
		"\x3\x2\x2\x2\x2397\x23FB\t\x61\x2\x2\x2398\x239A\a\x4BC\x2\x2\x2399\x2398"+
		"\x3\x2\x2\x2\x2399\x239A\x3\x2\x2\x2\x239A\x239B\x3\x2\x2\x2\x239B\x23FB"+
		"\t\x62\x2\x2\x239C\x239E\a\x4BC\x2\x2\x239D\x239C\x3\x2\x2\x2\x239D\x239E"+
		"\x3\x2\x2\x2\x239E\x239F\x3\x2\x2\x2\x239F\x23FB\t\x63\x2\x2\x23A0\x23A2"+
		"\a\x4BC\x2\x2\x23A1\x23A0\x3\x2\x2\x2\x23A1\x23A2\x3\x2\x2\x2\x23A2\x23A3"+
		"\x3\x2\x2\x2\x23A3\x23A4\a\x239\x2\x2\x23A4\x23A7\a\x4A8\x2\x2\x23A5\x23A8"+
		"\a\x4A4\x2\x2\x23A6\x23A8\x5\x4C2\x262\x2\x23A7\x23A5\x3\x2\x2\x2\x23A7"+
		"\x23A6\x3\x2\x2\x2\x23A8\x23FB\x3\x2\x2\x2\x23A9\x23AB\a\x4BC\x2\x2\x23AA"+
		"\x23A9\x3\x2\x2\x2\x23AA\x23AB\x3\x2\x2\x2\x23AB\x23AC\x3\x2\x2\x2\x23AC"+
		"\x23AD\a\x23A\x2\x2\x23AD\x23AE\a\x4A8\x2\x2\x23AE\x23FB\a\x4A4\x2\x2"+
		"\x23AF\x23B1\a\x4BC\x2\x2\x23B0\x23AF\x3\x2\x2\x2\x23B0\x23B1\x3\x2\x2"+
		"\x2\x23B1\x23B2\x3\x2\x2\x2\x23B2\x23B3\ag\x2\x2\x23B3\x23B6\a\x4A8\x2"+
		"\x2\x23B4\x23B7\a\x4A2\x2\x2\x23B5\x23B7\x5\x4C2\x262\x2\x23B6\x23B4\x3"+
		"\x2\x2\x2\x23B6\x23B5\x3\x2\x2\x2\x23B7\x23FB\x3\x2\x2\x2\x23B8\x23BA"+
		"\a\x4BC\x2\x2\x23B9\x23B8\x3\x2\x2\x2\x23B9\x23BA\x3\x2\x2\x2\x23BA\x23BB"+
		"\x3\x2\x2\x2\x23BB\x23BC\am\x2\x2\x23BC\x23BF\a\x4A8\x2\x2\x23BD\x23C0"+
		"\a\x4A2\x2\x2\x23BE\x23C0\x5\x4C2\x262\x2\x23BF\x23BD\x3\x2\x2\x2\x23BF"+
		"\x23BE\x3\x2\x2\x2\x23C0\x23FB\x3\x2\x2\x2\x23C1\x23C3\a\x4BC\x2\x2\x23C2"+
		"\x23C1\x3\x2\x2\x2\x23C2\x23C3\x3\x2\x2\x2\x23C3\x23C4\x3\x2\x2\x2\x23C4"+
		"\x23C5\a\x226\x2\x2\x23C5\x23C8\a\x4A8\x2\x2\x23C6\x23C9\a\x4A2\x2\x2"+
		"\x23C7\x23C9\x5\x4C2\x262\x2\x23C8\x23C6\x3\x2\x2\x2\x23C8\x23C7\x3\x2"+
		"\x2\x2\x23C9\x23FB\x3\x2\x2\x2\x23CA\x23CC\a\x4BC\x2\x2\x23CB\x23CA\x3"+
		"\x2\x2\x2\x23CB\x23CC\x3\x2\x2\x2\x23CC\x23CD\x3\x2\x2\x2\x23CD\x23FB"+
		"\t\x64\x2\x2\x23CE\x23D0\a\x4BC\x2\x2\x23CF\x23CE\x3\x2\x2\x2\x23CF\x23D0"+
		"\x3\x2\x2\x2\x23D0\x23D1\x3\x2\x2\x2\x23D1\x23FB\t\x65\x2\x2\x23D2\x23D4"+
		"\a\x4BC\x2\x2\x23D3\x23D2\x3\x2\x2\x2\x23D3\x23D4\x3\x2\x2\x2\x23D4\x23D5"+
		"\x3\x2\x2\x2\x23D5\x23FB\a\x331\x2\x2\x23D6\x23D8\a\x4BC\x2\x2\x23D7\x23D6"+
		"\x3\x2\x2\x2\x23D7\x23D8\x3\x2\x2\x2\x23D8\x23D9\x3\x2\x2\x2\x23D9\x23DC"+
		"\a\x3B7\x2\x2\x23DA\x23DB\a\x4A8\x2\x2\x23DB\x23DD\a\x4A2\x2\x2\x23DC"+
		"\x23DA\x3\x2\x2\x2\x23DC\x23DD\x3\x2\x2\x2\x23DD\x23FB\x3\x2\x2\x2\x23DE"+
		"\x23E0\a\x4BC\x2\x2\x23DF\x23DE\x3\x2\x2\x2\x23DF\x23E0\x3\x2\x2\x2\x23E0"+
		"\x23E1\x3\x2\x2\x2\x23E1\x23FB\t\x66\x2\x2\x23E2\x23E4\a\x4BC\x2\x2\x23E3"+
		"\x23E2\x3\x2\x2\x2\x23E3\x23E4\x3\x2\x2\x2\x23E4\x23E5\x3\x2\x2\x2\x23E5"+
		"\x23FB\tg\x2\x2\x23E6\x23E8\a\x4BC\x2\x2\x23E7\x23E6\x3\x2\x2\x2\x23E7"+
		"\x23E8\x3\x2\x2\x2\x23E8\x23E9\x3\x2\x2\x2\x23E9\x23EA\a\x12E\x2\x2\x23EA"+
		"\x23EB\a\x4BA\x2\x2\x23EB\x23EC\a\x17\x2\x2\x23EC\x23ED\a\x4A8\x2\x2\x23ED"+
		"\x23EE\th\x2\x2\x23EE\x23EF\a\x4BC\x2\x2\x23EF\x23F0\a\x37A\x2\x2\x23F0"+
		"\x23F1\a|\x2\x2\x23F1\x23F8\a\x4A8\x2\x2\x23F2\x23F9\x5\x4C2\x262\x2\x23F3"+
		"\x23F4\a\x37A\x2\x2\x23F4\x23F5\a?\x2\x2\x23F5\x23F6\a\x1F1\x2\x2\x23F6"+
		"\x23F7\a\x4A8\x2\x2\x23F7\x23F9\x5\x4C2\x262\x2\x23F8\x23F2\x3\x2\x2\x2"+
		"\x23F8\x23F3\x3\x2\x2\x2\x23F9\x23FB\x3\x2\x2\x2\x23FA\x2361\x3\x2\x2"+
		"\x2\x23FA\x2365\x3\x2\x2\x2\x23FA\x2369\x3\x2\x2\x2\x23FA\x236D\x3\x2"+
		"\x2\x2\x23FA\x2376\x3\x2\x2\x2\x23FA\x237C\x3\x2\x2\x2\x23FA\x2380\x3"+
		"\x2\x2\x2\x23FA\x2384\x3\x2\x2\x2\x23FA\x2395\x3\x2\x2\x2\x23FA\x2399"+
		"\x3\x2\x2\x2\x23FA\x239D\x3\x2\x2\x2\x23FA\x23A1\x3\x2\x2\x2\x23FA\x23AA"+
		"\x3\x2\x2\x2\x23FA\x23B0\x3\x2\x2\x2\x23FA\x23B9\x3\x2\x2\x2\x23FA\x23C2"+
		"\x3\x2\x2\x2\x23FA\x23CB\x3\x2\x2\x2\x23FA\x23CF\x3\x2\x2\x2\x23FA\x23D3"+
		"\x3\x2\x2\x2\x23FA\x23D7\x3\x2\x2\x2\x23FA\x23DF\x3\x2\x2\x2\x23FA\x23E3"+
		"\x3\x2\x2\x2\x23FA\x23E7\x3\x2\x2\x2\x23FB\x23FE\x3\x2\x2\x2\x23FC\x23FA"+
		"\x3\x2\x2\x2\x23FC\x23FD\x3\x2\x2\x2\x23FD\x2400\x3\x2\x2\x2\x23FE\x23FC"+
		"\x3\x2\x2\x2\x23FF\x235F\x3\x2\x2\x2\x23FF\x2400\x3\x2\x2\x2\x2400\x2E3"+
		"\x3\x2\x2\x2\x2401\x2402\aW\x2\x2\x2402\x2403\a\x214\x2\x2\x2403\x241B"+
		"\x5\x4C2\x262\x2\x2404\x2409\a\x3EB\x2\x2\x2405\x2407\a\x4BC\x2\x2\x2406"+
		"\x2405\x3\x2\x2\x2\x2406\x2407\x3\x2\x2\x2\x2407\x2408\x3\x2\x2\x2\x2408"+
		"\x240A\x5\x4C2\x262\x2\x2409\x2406\x3\x2\x2\x2\x240A\x240B\x3\x2\x2\x2"+
		"\x240B\x2409\x3\x2\x2\x2\x240B\x240C\x3\x2\x2\x2\x240C\x241C\x3\x2\x2"+
		"\x2\x240D\x2417\a\x3EB\x2\x2\x240E\x2410\a\x4BC\x2\x2\x240F\x240E\x3\x2"+
		"\x2\x2\x240F\x2410\x3\x2\x2\x2\x2410\x2411\x3\x2\x2\x2\x2411\x2412\t_"+
		"\x2\x2\x2412\x2415\a\x4A8\x2\x2\x2413\x2416\a\x4A4\x2\x2\x2414\x2416\x5"+
		"\x4C2\x262\x2\x2415\x2413\x3\x2\x2\x2\x2415\x2414\x3\x2\x2\x2\x2416\x2418"+
		"\x3\x2\x2\x2\x2417\x240F\x3\x2\x2\x2\x2418\x2419\x3\x2\x2\x2\x2419\x2417"+
		"\x3\x2\x2\x2\x2419\x241A\x3\x2\x2\x2\x241A\x241C\x3\x2\x2\x2\x241B\x2404"+
		"\x3\x2\x2\x2\x241B\x240D\x3\x2\x2\x2\x241C\x243E\x3\x2\x2\x2\x241D\x241E"+
		"\a\x24A\x2\x2\x241E\x2423\a\x3EB\x2\x2\x241F\x2421\a\x4BC\x2\x2\x2420"+
		"\x241F\x3\x2\x2\x2\x2420\x2421\x3\x2\x2\x2\x2421\x2422\x3\x2\x2\x2\x2422"+
		"\x2424\x5\x4C2\x262\x2\x2423\x2420\x3\x2\x2\x2\x2424\x2425\x3\x2\x2\x2"+
		"\x2425\x2423\x3\x2\x2\x2\x2425\x2426\x3\x2\x2\x2\x2426\x2428\x3\x2\x2"+
		"\x2\x2427\x241D\x3\x2\x2\x2\x2428\x2429\x3\x2\x2\x2\x2429\x2427\x3\x2"+
		"\x2\x2\x2429\x242A\x3\x2\x2\x2\x242A\x243F\x3\x2\x2\x2\x242B\x242C\a\x24A"+
		"\x2\x2\x242C\x2436\a\x3EB\x2\x2\x242D\x242F\a\x4BC\x2\x2\x242E\x242D\x3"+
		"\x2\x2\x2\x242E\x242F\x3\x2\x2\x2\x242F\x2430\x3\x2\x2\x2\x2430\x2431"+
		"\t_\x2\x2\x2431\x2434\a\x4A8\x2\x2\x2432\x2435\a\x4A4\x2\x2\x2433\x2435"+
		"\x5\x4C2\x262\x2\x2434\x2432\x3\x2\x2\x2\x2434\x2433\x3\x2\x2\x2\x2435"+
		"\x2437\x3\x2\x2\x2\x2436\x242E\x3\x2\x2\x2\x2437\x2438\x3\x2\x2\x2\x2438"+
		"\x2436\x3\x2\x2\x2\x2438\x2439\x3\x2\x2\x2\x2439\x243B\x3\x2\x2\x2\x243A"+
		"\x242B\x3\x2\x2\x2\x243B\x243C\x3\x2\x2\x2\x243C\x243A\x3\x2\x2\x2\x243C"+
		"\x243D\x3\x2\x2\x2\x243D\x243F\x3\x2\x2\x2\x243E\x2427\x3\x2\x2\x2\x243E"+
		"\x243A\x3\x2\x2\x2\x243E\x243F\x3\x2\x2\x2\x243F\x24ED\x3\x2\x2\x2\x2440"+
		"\x24EA\a\x439\x2\x2\x2441\x2443\a\x4BC\x2\x2\x2442\x2441\x3\x2\x2\x2\x2442"+
		"\x2443\x3\x2\x2\x2\x2443\x2444\x3\x2\x2\x2\x2444\x24E9\a\x110\x2\x2\x2445"+
		"\x2447\a\x4BC\x2\x2\x2446\x2445\x3\x2\x2\x2\x2446\x2447\x3\x2\x2\x2\x2447"+
		"\x2448\x3\x2\x2\x2\x2448\x24E9\a\xC4\x2\x2\x2449\x244B\a\x4BC\x2\x2\x244A"+
		"\x2449\x3\x2\x2\x2\x244A\x244B\x3\x2\x2\x2\x244B\x244C\x3\x2\x2\x2\x244C"+
		"\x24E9\t`\x2\x2\x244D\x244F\a\x4BC\x2\x2\x244E\x244D\x3\x2\x2\x2\x244E"+
		"\x244F\x3\x2\x2\x2\x244F\x2450\x3\x2\x2\x2\x2450\x2451\a\x109\x2\x2\x2451"+
		"\x2454\a\x4A8\x2\x2\x2452\x2455\a\x4A4\x2\x2\x2453\x2455\x5\x4C2\x262"+
		"\x2\x2454\x2452\x3\x2\x2\x2\x2454\x2453\x3\x2\x2\x2\x2455\x24E9\x3\x2"+
		"\x2\x2\x2456\x2458\a\x4BC\x2\x2\x2457\x2456\x3\x2\x2\x2\x2457\x2458\x3"+
		"\x2\x2\x2\x2458\x2459\x3\x2\x2\x2\x2459\x245A\a\x253\x2\x2\x245A\x245B"+
		"\a\x4A8\x2\x2\x245B\x24E9\x5\x4C2\x262\x2\x245C\x245E\a\x4BC\x2\x2\x245D"+
		"\x245C\x3\x2\x2\x2\x245D\x245E\x3\x2\x2\x2\x245E\x245F\x3\x2\x2\x2\x245F"+
		"\x24E9\a\xCC\x2\x2\x2460\x2462\a\x4BC\x2\x2\x2461\x2460\x3\x2\x2\x2\x2461"+
		"\x2462\x3\x2\x2\x2\x2462\x2463\x3\x2\x2\x2\x2463\x24E9\a\x16B\x2\x2\x2464"+
		"\x2466\a\x4BC\x2\x2\x2465\x2464\x3\x2\x2\x2\x2465\x2466\x3\x2\x2\x2\x2466"+
		"\x2473\x3\x2\x2\x2\x2467\x2468\a\x14B\x2\x2\x2468\x246B\a\x4A8\x2\x2\x2469"+
		"\x246C\a\x4A4\x2\x2\x246A\x246C\x5\x4C2\x262\x2\x246B\x2469\x3\x2\x2\x2"+
		"\x246B\x246A\x3\x2\x2\x2\x246C\x2474\x3\x2\x2\x2\x246D\x246E\a\x337\x2"+
		"\x2\x246E\x2471\a\x4A8\x2\x2\x246F\x2472\a\x4A2\x2\x2\x2470\x2472\x5\x4C2"+
		"\x262\x2\x2471\x246F\x3\x2\x2\x2\x2471\x2470\x3\x2\x2\x2\x2472\x2474\x3"+
		"\x2\x2\x2\x2473\x2467\x3\x2\x2\x2\x2473\x246D\x3\x2\x2\x2\x2474\x24E9"+
		"\x3\x2\x2\x2\x2475\x2477\a\x4BC\x2\x2\x2476\x2475\x3\x2\x2\x2\x2476\x2477"+
		"\x3\x2\x2\x2\x2477\x2478\x3\x2\x2\x2\x2478\x24E9\t\x61\x2\x2\x2479\x247B"+
		"\a\x4BC\x2\x2\x247A\x2479\x3\x2\x2\x2\x247A\x247B\x3\x2\x2\x2\x247B\x247C"+
		"\x3\x2\x2\x2\x247C\x24E9\t\x62\x2\x2\x247D\x247F\a\x4BC\x2\x2\x247E\x247D"+
		"\x3\x2\x2\x2\x247E\x247F\x3\x2\x2\x2\x247F\x2480\x3\x2\x2\x2\x2480\x24E9"+
		"\t\x63\x2\x2\x2481\x2483\a\x4BC\x2\x2\x2482\x2481\x3\x2\x2\x2\x2482\x2483"+
		"\x3\x2\x2\x2\x2483\x2484\x3\x2\x2\x2\x2484\x2485\a\x239\x2\x2\x2485\x2488"+
		"\a\x4A8\x2\x2\x2486\x2489\a\x4A4\x2\x2\x2487\x2489\x5\x4C2\x262\x2\x2488"+
		"\x2486\x3\x2\x2\x2\x2488\x2487\x3\x2\x2\x2\x2489\x24E9\x3\x2\x2\x2\x248A"+
		"\x248C\a\x4BC\x2\x2\x248B\x248A\x3\x2\x2\x2\x248B\x248C\x3\x2\x2\x2\x248C"+
		"\x248D\x3\x2\x2\x2\x248D\x248E\a\x23A\x2\x2\x248E\x248F\a\x4A8\x2\x2\x248F"+
		"\x24E9\a\x4A4\x2\x2\x2490\x2492\a\x4BC\x2\x2\x2491\x2490\x3\x2\x2\x2\x2491"+
		"\x2492\x3\x2\x2\x2\x2492\x2493\x3\x2\x2\x2\x2493\x2494\ag\x2\x2\x2494"+
		"\x2497\a\x4A8\x2\x2\x2495\x2498\a\x4A2\x2\x2\x2496\x2498\x5\x4C2\x262"+
		"\x2\x2497\x2495\x3\x2\x2\x2\x2497\x2496\x3\x2\x2\x2\x2498\x24E9\x3\x2"+
		"\x2\x2\x2499\x249B\a\x4BC\x2\x2\x249A\x2499\x3\x2\x2\x2\x249A\x249B\x3"+
		"\x2\x2\x2\x249B\x249C\x3\x2\x2\x2\x249C\x249D\am\x2\x2\x249D\x24A0\a\x4A8"+
		"\x2\x2\x249E\x24A1\a\x4A2\x2\x2\x249F\x24A1\x5\x4C2\x262\x2\x24A0\x249E"+
		"\x3\x2\x2\x2\x24A0\x249F\x3\x2\x2\x2\x24A1\x24E9\x3\x2\x2\x2\x24A2\x24A4"+
		"\a\x4BC\x2\x2\x24A3\x24A2\x3\x2\x2\x2\x24A3\x24A4\x3\x2\x2\x2\x24A4\x24A5"+
		"\x3\x2\x2\x2\x24A5\x24A6\a\x226\x2\x2\x24A6\x24A9\a\x4A8\x2\x2\x24A7\x24AA"+
		"\a\x4A2\x2\x2\x24A8\x24AA\x5\x4C2\x262\x2\x24A9\x24A7\x3\x2\x2\x2\x24A9"+
		"\x24A8\x3\x2\x2\x2\x24AA\x24E9\x3\x2\x2\x2\x24AB\x24AD\a\x4BC\x2\x2\x24AC"+
		"\x24AB\x3\x2\x2\x2\x24AC\x24AD\x3\x2\x2\x2\x24AD\x24AE\x3\x2\x2\x2\x24AE"+
		"\x24E9\t\x64\x2\x2\x24AF\x24B1\a\x4BC\x2\x2\x24B0\x24AF\x3\x2\x2\x2\x24B0"+
		"\x24B1\x3\x2\x2\x2\x24B1\x24B2\x3\x2\x2\x2\x24B2\x24E9\t\x65\x2\x2\x24B3"+
		"\x24B5\a\x4BC\x2\x2\x24B4\x24B3\x3\x2\x2\x2\x24B4\x24B5\x3\x2\x2\x2\x24B5"+
		"\x24B6\x3\x2\x2\x2\x24B6\x24E9\a\x331\x2\x2\x24B7\x24B9\a\x4BC\x2\x2\x24B8"+
		"\x24B7\x3\x2\x2\x2\x24B8\x24B9\x3\x2\x2\x2\x24B9\x24BA\x3\x2\x2\x2\x24BA"+
		"\x24BD\a\x3B7\x2\x2\x24BB\x24BC\a\x4A8\x2\x2\x24BC\x24BE\a\x4A2\x2\x2"+
		"\x24BD\x24BB\x3\x2\x2\x2\x24BD\x24BE\x3\x2\x2\x2\x24BE\x24E9\x3\x2\x2"+
		"\x2\x24BF\x24C1\a\x4BC\x2\x2\x24C0\x24BF\x3\x2\x2\x2\x24C0\x24C1\x3\x2"+
		"\x2\x2\x24C1\x24C2\x3\x2\x2\x2\x24C2\x24E9\t\x66\x2\x2\x24C3\x24C5\a\x4BC"+
		"\x2\x2\x24C4\x24C3\x3\x2\x2\x2\x24C4\x24C5\x3\x2\x2\x2\x24C5\x24C6\x3"+
		"\x2\x2\x2\x24C6\x24E9\tg\x2\x2\x24C7\x24C9\a\x4BC\x2\x2\x24C8\x24C7\x3"+
		"\x2\x2\x2\x24C8\x24C9\x3\x2\x2\x2\x24C9\x24CE\x3\x2\x2\x2\x24CA\x24CF"+
		"\a\x26E\x2\x2\x24CB\x24CC\a\x3AD\x2\x2\x24CC\x24CD\a\x4A8\x2\x2\x24CD"+
		"\x24CF\a\x4A4\x2\x2\x24CE\x24CA\x3\x2\x2\x2\x24CE\x24CB\x3\x2\x2\x2\x24CF"+
		"\x24E9\x3\x2\x2\x2\x24D0\x24D2\a\x4BC\x2\x2\x24D1\x24D0\x3\x2\x2\x2\x24D1"+
		"\x24D2\x3\x2\x2\x2\x24D2\x24D3\x3\x2\x2\x2\x24D3\x24E9\a\x27C\x2\x2\x24D4"+
		"\x24D6\a\x4BC\x2\x2\x24D5\x24D4\x3\x2\x2\x2\x24D5\x24D6\x3\x2\x2\x2\x24D6"+
		"\x24D7\x3\x2\x2\x2\x24D7\x24D8\a\x12E\x2\x2\x24D8\x24D9\a\x4BA\x2\x2\x24D9"+
		"\x24DA\a\x17\x2\x2\x24DA\x24DB\a\x4A8\x2\x2\x24DB\x24DC\th\x2\x2\x24DC"+
		"\x24DD\a\x4BC\x2\x2\x24DD\x24DE\a\x37A\x2\x2\x24DE\x24DF\a|\x2\x2\x24DF"+
		"\x24E6\a\x4A8\x2\x2\x24E0\x24E7\x5\x4C2\x262\x2\x24E1\x24E2\a\x37A\x2"+
		"\x2\x24E2\x24E3\a?\x2\x2\x24E3\x24E4\a\x1F1\x2\x2\x24E4\x24E5\a\x4A8\x2"+
		"\x2\x24E5\x24E7\x5\x4C2\x262\x2\x24E6\x24E0\x3\x2\x2\x2\x24E6\x24E1\x3"+
		"\x2\x2\x2\x24E7\x24E9\x3\x2\x2\x2\x24E8\x2442\x3\x2\x2\x2\x24E8\x2446"+
		"\x3\x2\x2\x2\x24E8\x244A\x3\x2\x2\x2\x24E8\x244E\x3\x2\x2\x2\x24E8\x2457"+
		"\x3\x2\x2\x2\x24E8\x245D\x3\x2\x2\x2\x24E8\x2461\x3\x2\x2\x2\x24E8\x2465"+
		"\x3\x2\x2\x2\x24E8\x2476\x3\x2\x2\x2\x24E8\x247A\x3\x2\x2\x2\x24E8\x247E"+
		"\x3\x2\x2\x2\x24E8\x2482\x3\x2\x2\x2\x24E8\x248B\x3\x2\x2\x2\x24E8\x2491"+
		"\x3\x2\x2\x2\x24E8\x249A\x3\x2\x2\x2\x24E8\x24A3\x3\x2\x2\x2\x24E8\x24AC"+
		"\x3\x2\x2\x2\x24E8\x24B0\x3\x2\x2\x2\x24E8\x24B4\x3\x2\x2\x2\x24E8\x24B8"+
		"\x3\x2\x2\x2\x24E8\x24C0\x3\x2\x2\x2\x24E8\x24C4\x3\x2\x2\x2\x24E8\x24C8"+
		"\x3\x2\x2\x2\x24E8\x24D1\x3\x2\x2\x2\x24E8\x24D5\x3\x2\x2\x2\x24E9\x24EC"+
		"\x3\x2\x2\x2\x24EA\x24E8\x3\x2\x2\x2\x24EA\x24EB\x3\x2\x2\x2\x24EB\x24EE"+
		"\x3\x2\x2\x2\x24EC\x24EA\x3\x2\x2\x2\x24ED\x2440\x3\x2\x2\x2\x24ED\x24EE"+
		"\x3\x2\x2\x2\x24EE\x2E5\x3\x2\x2\x2\x24EF\x24F0\aW\x2\x2\x24F0\x24F1\a"+
		"|\x2\x2\x24F1\x24F2\x5\x4C2\x262\x2\x24F2\x24F3\a\x3EB\x2\x2\x24F3\x24F4"+
		"\a\x15C\x2\x2\x24F4\x24F5\a\x4A8\x2\x2\x24F5\x2515\a\x4A4\x2\x2\x24F6"+
		"\x24F7\a\x439\x2\x2\x24F7\x24F8\a\x2DF\x2\x2\x24F8\x24F9\a\x1F1\x2\x2"+
		"\x24F9\x2510\a\x4BA\x2\x2\x24FA\x24FC\a\x4BC\x2\x2\x24FB\x24FA\x3\x2\x2"+
		"\x2\x24FB\x24FC\x3\x2\x2\x2\x24FC\x24FD\x3\x2\x2\x2\x24FD\x24FE\a\x15C"+
		"\x2\x2\x24FE\x24FF\a\x4A8\x2\x2\x24FF\x2511\a\x4A4\x2\x2\x2500\x2502\a"+
		"\x4BC\x2\x2\x2501\x2500\x3\x2\x2\x2\x2501\x2502\x3\x2\x2\x2\x2502\x2503"+
		"\x3\x2\x2\x2\x2503\x2504\a\x12E\x2\x2\x2504\x2505\ap\x2\x2\x2505\x2506"+
		"\a\x2BE\x2\x2\x2506\x2507\a\x4A8\x2\x2\x2507\x2511\a\x4A4\x2\x2\x2508"+
		"\x250A\a\x4BC\x2\x2\x2509\x2508\x3\x2\x2\x2\x2509\x250A\x3\x2\x2\x2\x250A"+
		"\x250B\x3\x2\x2\x2\x250B\x250C\a\xF8\x2\x2\x250C\x250D\ap\x2\x2\x250D"+
		"\x250E\a\x2BE\x2\x2\x250E\x250F\a\x4A8\x2\x2\x250F\x2511\a\x4A4\x2\x2"+
		"\x2510\x24FB\x3\x2\x2\x2\x2510\x2501\x3\x2\x2\x2\x2510\x2509\x3\x2\x2"+
		"\x2\x2511\x2512\x3\x2\x2\x2\x2512\x2510\x3\x2\x2\x2\x2512\x2513\x3\x2"+
		"\x2\x2\x2513\x2514\x3\x2\x2\x2\x2514\x2516\a\x4BB\x2\x2\x2515\x24F6\x3"+
		"\x2\x2\x2\x2515\x2516\x3\x2\x2\x2\x2516\x2E7\x3\x2\x2\x2\x2517\x2518\a"+
		"W\x2\x2\x2518\x2519\a\x21F\x2\x2\x2519\x251A\a\x1F1\x2\x2\x251A\x251B"+
		"\a\x3EB\x2\x2\x251B\x251C\a\x15C\x2\x2\x251C\x251D\a\x4A8\x2\x2\x251D"+
		"\x251E\a\x4A4\x2\x2\x251E\x251F\a\x12E\x2\x2\x251F\x2520\ap\x2\x2\x2520"+
		"\x2521\a\x2BE\x2\x2\x2521\x2522\a\x4A8\x2\x2\x2522\x2523\a\x4A4\x2\x2"+
		"\x2523\x2E9\x3\x2\x2\x2\x2524\x2525\aW\x2\x2\x2525\x2526\a\x37C\x2\x2"+
		"\x2526\x2527\a\x21F\x2\x2\x2527\x2528\a\x1F1\x2\x2\x2528\x2529\a\x3EB"+
		"\x2\x2\x2529\x252A\a\x15C\x2\x2\x252A\x252B\a\x4A8\x2\x2\x252B\x252C\a"+
		"\x4A4\x2\x2\x252C\x252D\a\x12E\x2\x2\x252D\x252E\ap\x2\x2\x252E\x252F"+
		"\a\x2BE\x2\x2\x252F\x2530\a\x4A8\x2\x2\x2530\x2531\a\x4A4\x2\x2\x2531"+
		"\x2EB\x3\x2\x2\x2\x2532\x2536\a\x1F7\x2\x2\x2533\x2537\x5\x2EE\x178\x2"+
		"\x2534\x2537\x5\x2F0\x179\x2\x2535\x2537\x5\x2F2\x17A\x2\x2536\x2533\x3"+
		"\x2\x2\x2\x2536\x2534\x3\x2\x2\x2\x2536\x2535\x3\x2\x2\x2\x2537\x2ED\x3"+
		"\x2\x2\x2\x2538\x253B\t!\x2\x2\x2539\x253B\a\x414\x2\x2\x253A\x2538\x3"+
		"\x2\x2\x2\x253A\x2539\x3\x2\x2\x2\x253B\x253E\x3\x2\x2\x2\x253C\x253D"+
		"\a\x439\x2\x2\x253D\x253F\a\x3BB\x2\x2\x253E\x253C\x3\x2\x2\x2\x253E\x253F"+
		"\x3\x2\x2\x2\x253F\x2EF\x3\x2\x2\x2\x2540\x2541\a\x2EF\x2\x2\x2541\x2542"+
		"\a\x272\x2\x2\x2542\x2545\a\x3C8\x2\x2\x2543\x2546\a\x18\x2\x2\x2544\x2546"+
		"\a\x4A2\x2\x2\x2545\x2543\x3\x2\x2\x2\x2545\x2544\x3\x2\x2\x2\x2546\x2F1"+
		"\x3\x2\x2\x2\x2547\x2548\a\x3B7\x2\x2\x2548\x2549\a\x1E2\x2\x2\x2549\x254A"+
		"\a\x4A2\x2\x2\x254A\x2F3\x3\x2\x2\x2\x254B\x254C\a\x145\x2\x2\x254C\x254E"+
		"\x5\x2F8\x17D\x2\x254D\x254F\a\x4BD\x2\x2\x254E\x254D\x3\x2\x2\x2\x254E"+
		"\x254F\x3\x2\x2\x2\x254F\x2F5\x3\x2\x2\x2\x2550\x2559\x5\x490\x249\x2"+
		"\x2551\x2556\x5\x2FA\x17E\x2\x2552\x2553\a\x4BC\x2\x2\x2553\x2555\x5\x2FA"+
		"\x17E\x2\x2554\x2552\x3\x2\x2\x2\x2555\x2558\x3\x2\x2\x2\x2556\x2554\x3"+
		"\x2\x2\x2\x2556\x2557\x3\x2\x2\x2\x2557\x255A\x3\x2\x2\x2\x2558\x2556"+
		"\x3\x2\x2\x2\x2559\x2551\x3\x2\x2\x2\x2559\x255A\x3\x2\x2\x2\x255A\x255C"+
		"\x3\x2\x2\x2\x255B\x255D\a\x4BD\x2\x2\x255C\x255B\x3\x2\x2\x2\x255C\x255D"+
		"\x3\x2\x2\x2\x255D\x2F7\x3\x2\x2\x2\x255E\x255F\a\x4A0\x2\x2\x255F\x2561"+
		"\a\x4A8\x2\x2\x2560\x255E\x3\x2\x2\x2\x2560\x2561\x3\x2\x2\x2\x2561\x2564"+
		"\x3\x2\x2\x2\x2562\x2565\x5\x490\x249\x2\x2563\x2565\x5\x302\x182\x2\x2564"+
		"\x2562\x3\x2\x2\x2\x2564\x2563\x3\x2\x2\x2\x2565\x2567\x3\x2\x2\x2\x2566"+
		"\x2568\x5\x2FA\x17E\x2\x2567\x2566\x3\x2\x2\x2\x2567\x2568\x3\x2\x2\x2"+
		"\x2568\x2585\x3\x2\x2\x2\x2569\x256A\a\x4BA\x2\x2\x256A\x256F\x5\x302"+
		"\x182\x2\x256B\x256C\a\x4BC\x2\x2\x256C\x256E\x5\x302\x182\x2\x256D\x256B"+
		"\x3\x2\x2\x2\x256E\x2571\x3\x2\x2\x2\x256F\x256D\x3\x2\x2\x2\x256F\x2570"+
		"\x3\x2\x2\x2\x2570\x2572\x3\x2\x2\x2\x2571\x256F\x3\x2\x2\x2\x2572\x2577"+
		"\a\x4BB\x2\x2\x2573\x2574\a:\x2\x2\x2574\x2575\ti\x2\x2\x2575\x2576\a"+
		"\x4A8\x2\x2\x2576\x2578\a\x4A4\x2\x2\x2577\x2573\x3\x2\x2\x2\x2577\x2578"+
		"\x3\x2\x2\x2\x2578\x257B\x3\x2\x2\x2\x2579\x257A\a\x41\x2\x2\x257A\x257C"+
		"\x5\x4C2\x262\x2\x257B\x2579\x3\x2\x2\x2\x257B\x257C\x3\x2\x2\x2\x257C"+
		"\x2585\x3\x2\x2\x2\x257D\x2582\a:\x2\x2\x257E\x257F\ti\x2\x2\x257F\x2580"+
		"\a\x4A8\x2\x2\x2580\x2583\a\x4A4\x2\x2\x2581\x2583\as\x2\x2\x2582\x257E"+
		"\x3\x2\x2\x2\x2582\x2581\x3\x2\x2\x2\x2583\x2585\x3\x2\x2\x2\x2584\x2560"+
		"\x3\x2\x2\x2\x2584\x2569\x3\x2\x2\x2\x2584\x257D\x3\x2\x2\x2\x2585\x2F9"+
		"\x3\x2\x2\x2\x2586\x258B\x5\x2FE\x180\x2\x2587\x2588\a\x4BC\x2\x2\x2588"+
		"\x258A\x5\x2FA\x17E\x2\x2589\x2587\x3\x2\x2\x2\x258A\x258D\x3\x2\x2\x2"+
		"\x258B\x2589\x3\x2\x2\x2\x258B\x258C\x3\x2\x2\x2\x258C\x2597\x3\x2\x2"+
		"\x2\x258D\x258B\x3\x2\x2\x2\x258E\x2593\x5\x2FC\x17F\x2\x258F\x2590\a"+
		"\x4BC\x2\x2\x2590\x2592\x5\x2FC\x17F\x2\x2591\x258F\x3\x2\x2\x2\x2592"+
		"\x2595\x3\x2\x2\x2\x2593\x2591\x3\x2\x2\x2\x2593\x2594\x3\x2\x2\x2\x2594"+
		"\x2597\x3\x2\x2\x2\x2595\x2593\x3\x2\x2\x2\x2596\x2586\x3\x2\x2\x2\x2596"+
		"\x258E\x3\x2\x2\x2\x2597\x2FB\x3\x2\x2\x2\x2598\x2599\a\x4A0\x2\x2\x2599"+
		"\x259A\a\x4A8\x2\x2\x259A\x259B\x5\x300\x181\x2\x259B\x2FD\x3\x2\x2\x2"+
		"\x259C\x259D\x5\x300\x181\x2\x259D\x2FF\x3\x2\x2\x2\x259E\x25A7\x5\x4BC"+
		"\x25F\x2\x259F\x25A1\a\x4A0\x2\x2\x25A0\x25A2\tj\x2\x2\x25A1\x25A0\x3"+
		"\x2\x2\x2\x25A1\x25A2\x3\x2\x2\x2\x25A2\x25A7\x3\x2\x2\x2\x25A3\x25A7"+
		"\x5\x4C2\x262\x2\x25A4\x25A7\a\xF9\x2\x2\x25A5\x25A7\a\x281\x2\x2\x25A6"+
		"\x259E\x3\x2\x2\x2\x25A6\x259F\x3\x2\x2\x2\x25A6\x25A3\x3\x2\x2\x2\x25A6"+
		"\x25A4\x3\x2\x2\x2\x25A6\x25A5\x3\x2\x2\x2\x25A7\x301\x3\x2\x2\x2\x25A8"+
		"\x25AA\a\x4A0\x2\x2\x25A9\x25AB\tj\x2\x2\x25AA\x25A9\x3\x2\x2\x2\x25AA"+
		"\x25AB\x3\x2\x2\x2\x25AB\x25AE\x3\x2\x2\x2\x25AC\x25AE\a\x4A4\x2\x2\x25AD"+
		"\x25A8\x3\x2\x2\x2\x25AD\x25AC\x3\x2\x2\x2\x25AE\x25B1\x3\x2\x2\x2\x25AF"+
		"\x25B0\a\x4C3\x2\x2\x25B0\x25B2\x5\x302\x182\x2\x25B1\x25AF\x3\x2\x2\x2"+
		"\x25B1\x25B2\x3\x2\x2\x2\x25B2\x303\x3\x2\x2\x2\x25B3\x25B5\x5\x35E\x1B0"+
		"\x2\x25B4\x25B6\a\x4BD\x2\x2\x25B5\x25B4\x3\x2\x2\x2\x25B5\x25B6\x3\x2"+
		"\x2\x2\x25B6\x25F2\x3\x2\x2\x2\x25B7\x25C3\a\x198\x2\x2\x25B8\x25BA\a"+
		"\x18\x2\x2\x25B9\x25BB\a\x2E1\x2\x2\x25BA\x25B9\x3\x2\x2\x2\x25BA\x25BB"+
		"\x3\x2\x2\x2\x25BB\x25C4\x3\x2\x2\x2\x25BC\x25C1\x5\x320\x191\x2\x25BD"+
		"\x25BE\a\x4BA\x2\x2\x25BE\x25BF\x5\x49C\x24F\x2\x25BF\x25C0\a\x4BB\x2"+
		"\x2\x25C0\x25C2\x3\x2\x2\x2\x25C1\x25BD\x3\x2\x2\x2\x25C1\x25C2\x3\x2"+
		"\x2\x2\x25C2\x25C4\x3\x2\x2\x2\x25C3\x25B8\x3\x2\x2\x2\x25C3\x25BC\x3"+
		"\x2\x2\x2\x25C4\x25CC\x3\x2\x2\x2\x25C5\x25C9\a\x294\x2\x2\x25C6\x25C7"+
		"\x5\x9EP\x2\x25C7\x25C8\a\x4BF\x2\x2\x25C8\x25CA\x3\x2\x2\x2\x25C9\x25C6"+
		"\x3\x2\x2\x2\x25C9\x25CA\x3\x2\x2\x2\x25CA\x25CB\x3\x2\x2\x2\x25CB\x25CD"+
		"\x5\x488\x245\x2\x25CC\x25C5\x3\x2\x2\x2\x25CC\x25CD\x3\x2\x2\x2\x25CD"+
		"\x25CE\x3\x2\x2\x2\x25CE\x25CF\a\x3EB\x2\x2\x25CF\x25D4\x5\x306\x184\x2"+
		"\x25D0\x25D1\a\x4BC\x2\x2\x25D1\x25D3\x5\x306\x184\x2\x25D2\x25D0\x3\x2"+
		"\x2\x2\x25D3\x25D6\x3\x2\x2\x2\x25D4\x25D2\x3\x2\x2\x2\x25D4\x25D5\x3"+
		"\x2\x2\x2\x25D5\x25DA\x3\x2\x2\x2\x25D6\x25D4\x3\x2\x2\x2\x25D7\x25D8"+
		"\a\x439\x2\x2\x25D8\x25D9\a\x198\x2\x2\x25D9\x25DB\a\x2A4\x2\x2\x25DA"+
		"\x25D7\x3\x2\x2\x2\x25DA\x25DB\x3\x2\x2\x2\x25DB\x25DE\x3\x2\x2\x2\x25DC"+
		"\x25DD\a:\x2\x2\x25DD\x25DF\x5\x306\x184\x2\x25DE\x25DC\x3\x2\x2\x2\x25DE"+
		"\x25DF\x3\x2\x2\x2\x25DF\x25E1\x3\x2\x2\x2\x25E0\x25E2\a\x4BD\x2\x2\x25E1"+
		"\x25E0\x3\x2\x2\x2\x25E1\x25E2\x3\x2\x2\x2\x25E2\x25F2\x3\x2\x2\x2\x25E3"+
		"\x25E8\a\x33C\x2\x2\x25E4\x25E5\a\x439\x2\x2\x25E5\x25E6\a\xC3\x2\x2\x25E6"+
		"\x25E7\a\x4A8\x2\x2\x25E7\x25E9\a\x4A0\x2\x2\x25E8\x25E4\x3\x2\x2\x2\x25E8"+
		"\x25E9\x3\x2\x2\x2\x25E9\x25EB\x3\x2\x2\x2\x25EA\x25EC\a\x4BD\x2\x2\x25EB"+
		"\x25EA\x3\x2\x2\x2\x25EB\x25EC\x3\x2\x2\x2\x25EC\x25F2\x3\x2\x2\x2\x25ED"+
		"\x25F2\x5\x312\x18A\x2\x25EE\x25F2\x5\x314\x18B\x2\x25EF\x25F2\x5\x316"+
		"\x18C\x2\x25F0\x25F2\x5\x308\x185\x2\x25F1\x25B3\x3\x2\x2\x2\x25F1\x25B7"+
		"\x3\x2\x2\x2\x25F1\x25E3\x3\x2\x2\x2\x25F1\x25ED\x3\x2\x2\x2\x25F1\x25EE"+
		"\x3\x2\x2\x2\x25F1\x25EF\x3\x2\x2\x2\x25F1\x25F0\x3\x2\x2\x2\x25F2\x305"+
		"\x3\x2\x2\x2\x25F3\x25F6\x5\x4C2\x262\x2\x25F4\x25F6\a\x2EB\x2\x2\x25F5"+
		"\x25F3\x3\x2\x2\x2\x25F5\x25F4\x3\x2\x2\x2\x25F6\x307\x3\x2\x2\x2\x25F7"+
		"\x25F8\a\xC9\x2\x2\x25F8\x25F9\a|\x2\x2\x25F9\x25FC\x5\x4C2\x262\x2\x25FA"+
		"\x25FB\a\x46\x2\x2\x25FB\x25FD\x5\x4C2\x262\x2\x25FC\x25FA\x3\x2\x2\x2"+
		"\x25FC\x25FD\x3\x2\x2\x2\x25FD\x2601\x3\x2\x2\x2\x25FE\x25FF\a\x181\x2"+
		"\x2\x25FF\x2602\x5\x30A\x186\x2\x2600\x2602\x5\x30E\x188\x2\x2601\x25FE"+
		"\x3\x2\x2\x2\x2601\x2600\x3\x2\x2\x2\x2602\x2609\x3\x2\x2\x2\x2603\x2604"+
		"\a\f\x2\x2\x2604\x2605\a\x172\x2\x2\x2605\x2606\a\\\x2\x2\x2606\x2607"+
		"\a\x10E\x2\x2\x2607\x2608\a\x4A8\x2\x2\x2608\x260A\x5\x4A0\x251\x2\x2609"+
		"\x2603\x3\x2\x2\x2\x2609\x260A\x3\x2\x2\x2\x260A\x309\x3\x2\x2\x2\x260B"+
		"\x260C\a=\x2\x2\x260C\x261D\x5\x4C2\x262\x2\x260D\x260F\a\x143\x2\x2\x260E"+
		"\x260D\x3\x2\x2\x2\x260E\x260F\x3\x2\x2\x2\x260F\x2610\x3\x2\x2\x2\x2610"+
		"\x2611\a\x15C\x2\x2\x2611\x2612\a\x4A8\x2\x2\x2612\x261A\a\x4A4\x2\x2"+
		"\x2613\x2614\a\x439\x2\x2\x2614\x2615\a\x2DF\x2\x2\x2615\x2616\a\x1F1"+
		"\x2\x2\x2616\x2617\a\x4BA\x2\x2\x2617\x2618\x5\x30C\x187\x2\x2618\x2619"+
		"\a\x4BB\x2\x2\x2619\x261B\x3\x2\x2\x2\x261A\x2613\x3\x2\x2\x2\x261A\x261B"+
		"\x3\x2\x2\x2\x261B\x261D\x3\x2\x2\x2\x261C\x260B\x3\x2\x2\x2\x261C\x260E"+
		"\x3\x2\x2\x2\x261D\x30B\x3\x2\x2\x2\x261E\x261F\tk\x2\x2\x261F\x2620\a"+
		"\x4A8\x2\x2\x2620\x2627\a\x4A4\x2\x2\x2621\x2622\a\x4BC\x2\x2\x2622\x2623"+
		"\tl\x2\x2\x2623\x2624\ap\x2\x2\x2624\x2625\a\x2BE\x2\x2\x2625\x2626\a"+
		"\x4A8\x2\x2\x2626\x2628\a\x4A4\x2\x2\x2627\x2621\x3\x2\x2\x2\x2627\x2628"+
		"\x3\x2\x2\x2\x2628\x30D\x3\x2\x2\x2\x2629\x262A\a\x12E\x2\x2\x262A\x262B"+
		"\ap\x2\x2\x262B\x262C\a\x2BE\x2\x2\x262C\x262D\a\x4A8\x2\x2\x262D\x262F"+
		"\a\x4A4\x2\x2\x262E\x2629\x3\x2\x2\x2\x262E\x262F\x3\x2\x2\x2\x262F\x2630"+
		"\x3\x2\x2\x2\x2630\x2631\a\x439\x2\x2\x2631\x2632\a\x3C6\x2\x2\x2632\x2633"+
		"\a\x4A8\x2\x2\x2633\x2638\a\x4A4\x2\x2\x2634\x2635\a\x4BC\x2\x2\x2635"+
		"\x2637\x5\x310\x189\x2\x2636\x2634\x3\x2\x2\x2\x2637\x263A\x3\x2\x2\x2"+
		"\x2638\x2636\x3\x2\x2\x2\x2638\x2639\x3\x2\x2\x2\x2639\x30F\x3\x2\x2\x2"+
		"\x263A\x2638\x3\x2\x2\x2\x263B\x263C\tm\x2\x2\x263C\x263D\a\x4A8\x2\x2"+
		"\x263D\x263E\a\x4A4\x2\x2\x263E\x311\x3\x2\x2\x2\x263F\x2640\a\x298\x2"+
		"\x2\x2640\x2641\a\x3D2\x2\x2\x2641\x2642\a\x1F1\x2\x2\x2642\x2643\x5\x4C2"+
		"\x262\x2\x2643\x2644\a\xF8\x2\x2\x2644\x2645\ap\x2\x2\x2645\x2646\x5\x31E"+
		"\x190\x2\x2646\x2650\x3\x2\x2\x2\x2647\x2648\a\x298\x2\x2\x2648\x2649"+
		"\a\x21F\x2\x2\x2649\x264A\a\x1F1\x2\x2\x264A\x264B\a\xF8\x2\x2\x264B\x264C"+
		"\ap\x2\x2\x264C\x264D\a\x2BE\x2\x2\x264D\x264E\a\x4A8\x2\x2\x264E\x2650"+
		"\a\x4A4\x2\x2\x264F\x263F\x3\x2\x2\x2\x264F\x2647\x3\x2\x2\x2\x2650\x313"+
		"\x3\x2\x2\x2\x2651\x2652\a\x97\x2\x2\x2652\x2653\a\x3D2\x2\x2\x2653\x2654"+
		"\a\x1F1\x2\x2\x2654\x265D\x5\x4C2\x262\x2\x2655\x2656\a\x97\x2\x2\x2656"+
		"\x2657\a\x18\x2\x2\x2657\x2658\a\x3D2\x2\x2\x2658\x265D\a\x1F2\x2\x2\x2659"+
		"\x265A\a\x97\x2\x2\x265A\x265B\a\x21F\x2\x2\x265B\x265D\a\x1F1\x2\x2\x265C"+
		"\x2651\x3\x2\x2\x2\x265C\x2655\x3\x2\x2\x2\x265C\x2659\x3\x2\x2\x2\x265D"+
		"\x315\x3\x2\x2\x2\x265E\x265F\a\xC9\x2\x2\x265F\x2660\a\x21F\x2\x2\x2660"+
		"\x2661\a\x1F1\x2\x2\x2661\x2662\a\x12E\x2\x2\x2662\x2663\ap\x2\x2\x2663"+
		"\x2664\a\x2BE\x2\x2\x2664\x2665\a\x4A8\x2\x2\x2665\x2682\a\x4A4\x2\x2"+
		"\x2666\x2667\a\xC9\x2\x2\x2667\x2668\a\x3D2\x2\x2\x2668\x2669\a\x1F1\x2"+
		"\x2\x2669\x266C\x5\x4C2\x262\x2\x266A\x266B\a\x46\x2\x2\x266B\x266D\x5"+
		"\x4C2\x262\x2\x266C\x266A\x3\x2\x2\x2\x266C\x266D\x3\x2\x2\x2\x266D\x2671"+
		"\x3\x2\x2\x2\x266E\x266F\a\x181\x2\x2\x266F\x2670\a\x2E9\x2\x2\x2670\x2672"+
		"\x5\x4C2\x262\x2\x2671\x266E\x3\x2\x2\x2\x2671\x2672\x3\x2\x2\x2\x2672"+
		"\x2673\x3\x2\x2\x2\x2673\x267D\a\x439\x2\x2\x2674\x2679\x5\x318\x18D\x2"+
		"\x2675\x2676\a\x12E\x2\x2\x2676\x2677\ap\x2\x2\x2677\x2679\x5\x31C\x18F"+
		"\x2\x2678\x2674\x3\x2\x2\x2\x2678\x2675\x3\x2\x2\x2\x2679\x267B\x3\x2"+
		"\x2\x2\x267A\x267C\a\x4BC\x2\x2\x267B\x267A\x3\x2\x2\x2\x267B\x267C\x3"+
		"\x2\x2\x2\x267C\x267E\x3\x2\x2\x2\x267D\x2678\x3\x2\x2\x2\x267E\x267F"+
		"\x3\x2\x2\x2\x267F\x267D\x3\x2\x2\x2\x267F\x2680\x3\x2\x2\x2\x2680\x2682"+
		"\x3\x2\x2\x2\x2681\x265E\x3\x2\x2\x2\x2681\x2666\x3\x2\x2\x2\x2682\x317"+
		"\x3\x2\x2\x2\x2683\x2684\a\x1F5\x2\x2\x2684\x2685\a\x4A8\x2\x2\x2685\x2693"+
		"\a\x4A4\x2\x2\x2686\x2687\a\x17\x2\x2\x2687\x2688\a\x4A8\x2\x2\x2688\x2693"+
		"\x5\x31A\x18E\x2\x2689\x268A\a\x1B2\x2\x2\x268A\x268B\a\x4A8\x2\x2\x268B"+
		"\x2693\a\x4A4\x2\x2\x268C\x268D\a\x2EA\x2\x2\x268D\x268E\a\x4A8\x2\x2"+
		"\x268E\x2693\a\x4A4\x2\x2\x268F\x2690\a\xCB\x2\x2\x2690\x2691\a\x4A8\x2"+
		"\x2\x2691\x2693\t\v\x2\x2\x2692\x2683\x3\x2\x2\x2\x2692\x2686\x3\x2\x2"+
		"\x2\x2692\x2689\x3\x2\x2\x2\x2692\x268C\x3\x2\x2\x2\x2692\x268F\x3\x2"+
		"\x2\x2\x2693\x319\x3\x2\x2\x2\x2694\x2695\tn\x2\x2\x2695\x31B\x3\x2\x2"+
		"\x2\x2696\x2697\a|\x2\x2\x2697\x26A2\x5\x4C2\x262\x2\x2698\x2699\a?\x2"+
		"\x2\x2699\x269A\a\x1F1\x2\x2\x269A\x26A2\x5\x4C2\x262\x2\x269B\x269C\a"+
		"\x3D2\x2\x2\x269C\x269D\a\x1F1\x2\x2\x269D\x26A2\x5\x4C2\x262\x2\x269E"+
		"\x269F\a\x2BE\x2\x2\x269F\x26A0\a\x4A8\x2\x2\x26A0\x26A2\a\x4A4\x2\x2"+
		"\x26A1\x2696\x3\x2\x2\x2\x26A1\x2698\x3\x2\x2\x2\x26A1\x269B\x3\x2\x2"+
		"\x2\x26A1\x269E\x3\x2\x2\x2\x26A2\x31D\x3\x2\x2\x2\x26A3\x26A4\a|\x2\x2"+
		"\x26A4\x26A9\x5\x4C2\x262\x2\x26A5\x26A6\a\x439\x2\x2\x26A6\x26A7\a\x2BE"+
		"\x2\x2\x26A7\x26A8\a\x4A8\x2\x2\x26A8\x26AA\a\x4A4\x2\x2\x26A9\x26A5\x3"+
		"\x2\x2\x2\x26A9\x26AA\x3\x2\x2\x2\x26AA\x26BB\x3\x2\x2\x2\x26AB\x26AC"+
		"\a?\x2\x2\x26AC\x26AD\a\x1F1\x2\x2\x26AD\x26B2\x5\x4C2\x262\x2\x26AE\x26AF"+
		"\a\x439\x2\x2\x26AF\x26B0\a\x2BE\x2\x2\x26B0\x26B1\a\x4A8\x2\x2\x26B1"+
		"\x26B3\a\x4A4\x2\x2\x26B2\x26AE\x3\x2\x2\x2\x26B2\x26B3\x3\x2\x2\x2\x26B3"+
		"\x26BB\x3\x2\x2\x2\x26B4\x26B5\a\x3D2\x2\x2\x26B5\x26B6\a\x1F1\x2\x2\x26B6"+
		"\x26BB\x5\x4C2\x262\x2\x26B7\x26B8\a\x2BE\x2\x2\x26B8\x26B9\a\x4A8\x2"+
		"\x2\x26B9\x26BB\a\x4A4\x2\x2\x26BA\x26A3\x3\x2\x2\x2\x26BA\x26AB\x3\x2"+
		"\x2\x2\x26BA\x26B4\x3\x2\x2\x2\x26BA\x26B7\x3\x2\x2\x2\x26BB\x31F\x3\x2"+
		"\x2\x2\x26BC\x26C2\a\xF\x2\x2\x26BD\x26BE\an\x2\x2\x26BE\x26C3\a\x29F"+
		"\x2\x2\x26BF\x26C0\a\xDD\x2\x2\x26C0\x26C1\an\x2\x2\x26C1\x26C3\a\x29F"+
		"\x2\x2\x26C2\x26BD\x3\x2\x2\x2\x26C2\x26BF\x3\x2\x2\x2\x26C3\x2792\x3"+
		"\x2\x2\x2\x26C4\x270B\a%\x2\x2\x26C5\x2704\a\x30\x2\x2\x26C6\x26C7\a\x32"+
		"\x2\x2\x26C7\x2705\a\x341\x2\x2\x26C8\x2705\a=\x2\x2\x26C9\x26CA\a?\x2"+
		"\x2\x26CA\x2705\a\x1F1\x2\x2\x26CB\x26CC\aS\x2\x2\x26CC\x2705\a\x19A\x2"+
		"\x2\x26CD\x2705\a|\x2\x2\x26CE\x26D3\a\x9D\x2\x2\x26CF\x26D0\a\x12E\x2"+
		"\x2\x26D0\x26D4\a\x1F1\x2\x2\x26D1\x26D2\a\x21F\x2\x2\x26D2\x26D4\a\x1F1"+
		"\x2\x2\x26D3\x26CF\x3\x2\x2\x2\x26D3\x26D1\x3\x2\x2\x2\x26D4\x2705\x3"+
		"\x2\x2\x2\x26D5\x2705\a\xB3\x2\x2\x26D6\x2705\a\xBE\x2\x2\x26D7\x2705"+
		"\a\xCC\x2\x2\x26D8\x26E0\a\xDD\x2\x2\x26D9\x26E1\a\x42\x2\x2\x26DA\x26DB"+
		"\a\xF4\x2\x2\x26DB\x26E1\a\x3F8\x2\x2\x26DC\x26DD\a\x13E\x2\x2\x26DD\x26E1"+
		"\to\x2\x2\x26DE\x26DF\a\x35F\x2\x2\x26DF\x26E1\a\xB1\x2\x2\x26E0\x26D9"+
		"\x3\x2\x2\x2\x26E0\x26DA\x3\x2\x2\x2\x26E0\x26DC\x3\x2\x2\x2\x26E0\x26DE"+
		"\x3\x2\x2\x2\x26E0\x26E1\x3\x2\x2\x2\x26E1\x2705\x3\x2\x2\x2\x26E2\x2705"+
		"\a\xE3\x2\x2\x26E3\x2705\a\x131\x2\x2\x26E4\x26E5\a\x13E\x2\x2\x26E5\x2705"+
		"\to\x2\x2\x26E6\x26EC\a\x150\x2\x2\x26E7\x26E8\a\xDC\x2\x2\x26E8\x26ED"+
		"\a\x3A1\x2\x2\x26E9\x26EA\a\x15C\x2\x2\x26EA\x26ED\a\x17B\x2\x2\x26EB"+
		"\x26ED\a\x202\x2\x2\x26EC\x26E7\x3\x2\x2\x2\x26EC\x26E9\x3\x2\x2\x2\x26EC"+
		"\x26EB\x3\x2\x2\x2\x26ED\x2705\x3\x2\x2\x2\x26EE\x26EF\a\x184\x2\x2\x26EF"+
		"\x2705\ax\x2\x2\x26F0\x26F1\a\x206\x2\x2\x26F1\x2705\a\x37A\x2\x2\x26F2"+
		"\x2705\a\x215\x2\x2\x26F3\x2705\a\x21D\x2\x2\x26F4\x26F5\a\x240\x2\x2"+
		"\x26F5\x2705\a\x403\x2\x2\x26F6\x26F7\a\x318\x2\x2\x26F7\x26F8\a\x37C"+
		"\x2\x2\x26F8\x2705\a\x62\x2\x2\x26F9\x2705\a\x341\x2\x2\x26FA\x2705\a"+
		"\x345\x2\x2\x26FB\x2705\a\x35A\x2\x2\x26FC\x26FD\a\x36B\x2\x2\x26FD\x2705"+
		"\a\x2D3\x2\x2\x26FE\x26FF\a\x37A\x2\x2\x26FF\x2705\tp\x2\x2\x2700\x2705"+
		"\a\x37C\x2\x2\x2701\x2702\a\x3D2\x2\x2\x2702\x2705\a\x1F1\x2\x2\x2703"+
		"\x2705\a\x41C\x2\x2\x2704\x26C6\x3\x2\x2\x2\x2704\x26C8\x3\x2\x2\x2\x2704"+
		"\x26C9\x3\x2\x2\x2\x2704\x26CB\x3\x2\x2\x2\x2704\x26CD\x3\x2\x2\x2\x2704"+
		"\x26CE\x3\x2\x2\x2\x2704\x26D5\x3\x2\x2\x2\x2704\x26D6\x3\x2\x2\x2\x2704"+
		"\x26D7\x3\x2\x2\x2\x2704\x26D8\x3\x2\x2\x2\x2704\x26E2\x3\x2\x2\x2\x2704"+
		"\x26E3\x3\x2\x2\x2\x2704\x26E4\x3\x2\x2\x2\x2704\x26E6\x3\x2\x2\x2\x2704"+
		"\x26EE\x3\x2\x2\x2\x2704\x26F0\x3\x2\x2\x2\x2704\x26F2\x3\x2\x2\x2\x2704"+
		"\x26F3\x3\x2\x2\x2\x2704\x26F4\x3\x2\x2\x2\x2704\x26F6\x3\x2\x2\x2\x2704"+
		"\x26F9\x3\x2\x2\x2\x2704\x26FA\x3\x2\x2\x2\x2704\x26FB\x3\x2\x2\x2\x2704"+
		"\x26FC\x3\x2\x2\x2\x2704\x26FE\x3\x2\x2\x2\x2704\x2700\x3\x2\x2\x2\x2704"+
		"\x2701\x3\x2\x2\x2\x2704\x2703\x3\x2\x2\x2\x2705\x270C\x3\x2\x2\x2\x2706"+
		"\x270C\a\x32F\x2\x2\x2707\x2708\a\x37A\x2\x2\x2708\x270C\a\x3B2\x2\x2"+
		"\x2709\x270C\a\x389\x2\x2\x270A\x270C\a\x3EF\x2\x2\x270B\x26C5\x3\x2\x2"+
		"\x2\x270B\x2706\x3\x2\x2\x2\x270B\x2707\x3\x2\x2\x2\x270B\x2709\x3\x2"+
		"\x2\x2\x270B\x270A\x3\x2\x2\x2\x270B\x270C\x3\x2\x2\x2\x270C\x2792\x3"+
		"\x2\x2\x2\x270D\x270F\a\x44\x2\x2\x270E\x2710\a\x37A\x2\x2\x270F\x270E"+
		"\x3\x2\x2\x2\x270F\x2710\x3\x2\x2\x2\x2710\x2792\x3\x2\x2\x2\x2711\x2712"+
		"\aW\x2\x2\x2712\x2792\tq\x2\x2\x2713\x2792\a\x8C\x2\x2\x2714\x2719\a\xB2"+
		"\x2\x2\x2715\x2716\a\x30\x2\x2\x2716\x271A\a\xDD\x2\x2\x2717\x271A\a\x325"+
		"\x2\x2\x2718\x271A\a\x3A7\x2\x2\x2719\x2715\x3\x2\x2\x2\x2719\x2717\x3"+
		"\x2\x2\x2\x2719\x2718\x3\x2\x2\x2\x2719\x271A\x3\x2\x2\x2\x271A\x2792"+
		"\x3\x2\x2\x2\x271B\x271D\a\xC0\x2\x2\x271C\x271E\a\x37A\x2\x2\x271D\x271C"+
		"\x3\x2\x2\x2\x271D\x271E\x3\x2\x2\x2\x271E\x2792\x3\x2\x2\x2\x271F\x2755"+
		"\a\xC9\x2\x2\x2720\x2756\a\x16\x2\x2\x2721\x2722\a\x30\x2\x2\x2722\x2756"+
		"\a\xDD\x2\x2\x2723\x2756\a=\x2\x2\x2724\x2725\a?\x2\x2\x2725\x2756\a\x1F1"+
		"\x2\x2\x2726\x2727\aS\x2\x2\x2727\x2756\a\x19A\x2\x2\x2728\x2756\a|\x2"+
		"\x2\x2729\x2756\a\xBE\x2\x2\x272A\x272E\a\xDD\x2\x2\x272B\x272C\a\xF4"+
		"\x2\x2\x272C\x272D\a\x13E\x2\x2\x272D\x272F\a\x272\x2\x2\x272E\x272B\x3"+
		"\x2\x2\x2\x272E\x272F\x3\x2\x2\x2\x272F\x2756\x3\x2\x2\x2\x2730\x2731"+
		"\a\xF4\x2\x2\x2731\x2732\a\x13E\x2\x2\x2732\x2756\a\x272\x2\x2\x2733\x2756"+
		"\a\xF9\x2\x2\x2734\x2756\a\x131\x2\x2\x2735\x2736\a\x150\x2\x2\x2736\x2756"+
		"\a\x202\x2\x2\x2737\x2738\a\x184\x2\x2\x2738\x2756\ax\x2\x2\x2739\x2756"+
		"\a\x187\x2\x2\x273A\x273B\a\x240\x2\x2\x273B\x2756\a\x403\x2\x2\x273C"+
		"\x2756\a\x2E4\x2\x2\x273D\x2756\a\x2F3\x2\x2\x273E\x273F\a\x318\x2\x2"+
		"\x273F\x2740\a\x37C\x2\x2\x2740\x2756\a\x62\x2\x2\x2741\x2756\a\x341\x2"+
		"\x2\x2742\x2756\a\x345\x2\x2\x2743\x2756\a\x354\x2\x2\x2744\x2756\a\x35A"+
		"\x2\x2\x2745\x2756\a\x377\x2\x2\x2746\x2747\a\x37A\x2\x2\x2747\x2756\a"+
		"\x341\x2\x2\x2748\x2756\a\x37C\x2\x2\x2749\x274A\a\x3D2\x2\x2\x274A\x2756"+
		"\a\x1F1\x2\x2\x274B\x2756\a\x3D4\x2\x2\x274C\x2756\a\x3D7\x2\x2\x274D"+
		"\x274E\a\x3EF\x2\x2\x274E\x274F\a\x13E\x2\x2\x274F\x2756\a\x272\x2\x2"+
		"\x2750\x2756\a\x403\x2\x2\x2751\x2756\a\x42C\x2\x2\x2752\x2753\a\x444"+
		"\x2\x2\x2753\x2754\a\x35A\x2\x2\x2754\x2756\a\x9C\x2\x2\x2755\x2720\x3"+
		"\x2\x2\x2\x2755\x2721\x3\x2\x2\x2\x2755\x2723\x3\x2\x2\x2\x2755\x2724"+
		"\x3\x2\x2\x2\x2755\x2726\x3\x2\x2\x2\x2755\x2728\x3\x2\x2\x2\x2755\x2729"+
		"\x3\x2\x2\x2\x2755\x272A\x3\x2\x2\x2\x2755\x2730\x3\x2\x2\x2\x2755\x2733"+
		"\x3\x2\x2\x2\x2755\x2734\x3\x2\x2\x2\x2755\x2735\x3\x2\x2\x2\x2755\x2737"+
		"\x3\x2\x2\x2\x2755\x2739\x3\x2\x2\x2\x2755\x273A\x3\x2\x2\x2\x2755\x273C"+
		"\x3\x2\x2\x2\x2755\x273D\x3\x2\x2\x2\x2755\x273E\x3\x2\x2\x2\x2755\x2741"+
		"\x3\x2\x2\x2\x2755\x2742\x3\x2\x2\x2\x2755\x2743\x3\x2\x2\x2\x2755\x2744"+
		"\x3\x2\x2\x2\x2755\x2745\x3\x2\x2\x2\x2755\x2746\x3\x2\x2\x2\x2755\x2748"+
		"\x3\x2\x2\x2\x2755\x2749\x3\x2\x2\x2\x2755\x274B\x3\x2\x2\x2\x2755\x274C"+
		"\x3\x2\x2\x2\x2755\x274D\x3\x2\x2\x2\x2755\x2750\x3\x2\x2\x2\x2755\x2751"+
		"\x3\x2\x2\x2\x2755\x2752\x3\x2\x2\x2\x2756\x2792\x3\x2\x2\x2\x2757\x2792"+
		"\a\x102\x2\x2\x2758\x275C\a\x145\x2\x2\x2759\x275A\a\x30\x2\x2\x275A\x275B"+
		"\a\x150\x2\x2\x275B\x275D\a\x361\x2\x2\x275C\x2759\x3\x2\x2\x2\x275C\x275D"+
		"\x3\x2\x2\x2\x275D\x2792\x3\x2\x2\x2\x275E\x275F\a\x150\x2\x2\x275F\x2760"+
		"\a\t\x2\x2\x2760\x2792\a=\x2\x2\x2761\x2764\a\x1BE\x2\x2\x2762\x2763\a"+
		"\x30\x2\x2\x2763\x2765\a\x215\x2\x2\x2764\x2762\x3\x2\x2\x2\x2764\x2765"+
		"\x3\x2\x2\x2\x2765\x2792\x3\x2\x2\x2\x2766\x2792\a\x1D0\x2\x2\x2767\x2768"+
		"\a\x1F7\x2\x2\x2768\x2769\a\xDD\x2\x2\x2769\x2792\a\xB3\x2\x2\x276A\x2792"+
		"\a\x30E\x2\x2\x276B\x2792\a\x313\x2\x2\x276C\x2770\a\x36F\x2\x2\x276D"+
		"\x276E\a\x18\x2\x2\x276E\x276F\a\x41C\x2\x2\x276F\x2771\a\x36A\x2\x2\x2770"+
		"\x276D\x3\x2\x2\x2\x2770\x2771\x3\x2\x2\x2\x2771\x2792\x3\x2\x2\x2\x2772"+
		"\x2792\a\x375\x2\x2\x2773\x2792\a\x38E\x2\x2\x2774\x2792\a\x393\x2\x2"+
		"\x2775\x2776\a\x3C7\x2\x2\x2776\x2777\a\x2EF\x2\x2\x2777\x2792\a\x273"+
		"\x2\x2\x2778\x2779\a\x3DC\x2\x2\x2779\x2792\a\x2AF\x2\x2\x277A\x2792\a"+
		"\x411\x2\x2\x277B\x277C\a\x413\x2\x2\x277C\x2792\a=\x2\x2\x277D\x2792"+
		"\a\x415\x2\x2\x277E\x278F\a\x42C\x2\x2\x277F\x2786\a\x30\x2\x2\x2780\x2787"+
		"\a\xDD\x2\x2\x2781\x2787\a\xFF\x2\x2\x2782\x2783\a\x9D\x2\x2\x2783\x2784"+
		"\t\xE\x2\x2\x2784\x2785\a\x1F1\x2\x2\x2785\x2787\a\xFF\x2\x2\x2786\x2780"+
		"\x3\x2\x2\x2\x2786\x2781\x3\x2\x2\x2\x2786\x2782\x3\x2\x2\x2\x2787\x2790"+
		"\x3\x2\x2\x2\x2788\x2789\a\x7F\x2\x2\x2789\x2790\a\x3F0\x2\x2\x278A\x278B"+
		"\a\xDD\x2\x2\x278B\x2790\a\x3B2\x2\x2\x278C\x2790\a\xFF\x2\x2\x278D\x278E"+
		"\a\x37A\x2\x2\x278E\x2790\a\x3B2\x2\x2\x278F\x277F\x3\x2\x2\x2\x278F\x2788"+
		"\x3\x2\x2\x2\x278F\x278A\x3\x2\x2\x2\x278F\x278C\x3\x2\x2\x2\x278F\x278D"+
		"\x3\x2\x2\x2\x2790\x2792\x3\x2\x2\x2\x2791\x26BC\x3\x2\x2\x2\x2791\x26C4"+
		"\x3\x2\x2\x2\x2791\x270D\x3\x2\x2\x2\x2791\x2711\x3\x2\x2\x2\x2791\x2713"+
		"\x3\x2\x2\x2\x2791\x2714\x3\x2\x2\x2\x2791\x271B\x3\x2\x2\x2\x2791\x271F"+
		"\x3\x2\x2\x2\x2791\x2757\x3\x2\x2\x2\x2791\x2758\x3\x2\x2\x2\x2791\x275E"+
		"\x3\x2\x2\x2\x2791\x2761\x3\x2\x2\x2\x2791\x2766\x3\x2\x2\x2\x2791\x2767"+
		"\x3\x2\x2\x2\x2791\x276A\x3\x2\x2\x2\x2791\x276B\x3\x2\x2\x2\x2791\x276C"+
		"\x3\x2\x2\x2\x2791\x2772\x3\x2\x2\x2\x2791\x2773\x3\x2\x2\x2\x2791\x2774"+
		"\x3\x2\x2\x2\x2791\x2775\x3\x2\x2\x2\x2791\x2778\x3\x2\x2\x2\x2791\x277A"+
		"\x3\x2\x2\x2\x2791\x277B\x3\x2\x2\x2\x2791\x277D\x3\x2\x2\x2\x2791\x277E"+
		"\x3\x2\x2\x2\x2792\x321\x3\x2\x2\x2\x2793\x2794\a\x386\x2\x2\x2794\x2797"+
		"\a\x4A0\x2\x2\x2795\x2796\a\x4B5\x2\x2\x2796\x2798\x5\x4C2\x262\x2\x2797"+
		"\x2795\x3\x2\x2\x2\x2797\x2798\x3\x2\x2\x2\x2798\x2799\x3\x2\x2\x2\x2799"+
		"\x279A\a\x4A8\x2\x2\x279A\x27B3\x5\x39C\x1CF\x2\x279B\x279C\a\x386\x2"+
		"\x2\x279C\x279D\a\x4A0\x2\x2\x279D\x279E\x5\x4CA\x266\x2\x279E\x279F\x5"+
		"\x39C\x1CF\x2\x279F\x27B3\x3\x2\x2\x2\x27A0\x27A1\a\x386\x2\x2\x27A1\x27A2"+
		"\a\x4A0\x2\x2\x27A2\x27A3\a\x4A8\x2\x2\x27A3\x27A4\a\xD7\x2\x2\x27A4\x27AF"+
		"\x5\x390\x1C9\x2\x27A5\x27AD\a\x172\x2\x2\x27A6\x27A7\a\x300\x2\x2\x27A7"+
		"\x27AE\a\x296\x2\x2\x27A8\x27AB\a\x415\x2\x2\x27A9\x27AA\a\x28D\x2\x2"+
		"\x27AA\x27AC\x5\x49C\x24F\x2\x27AB\x27A9\x3\x2\x2\x2\x27AB\x27AC\x3\x2"+
		"\x2\x2\x27AC\x27AE\x3\x2\x2\x2\x27AD\x27A6\x3\x2\x2\x2\x27AD\x27A8\x3"+
		"\x2\x2\x2\x27AE\x27B0\x3\x2\x2\x2\x27AF\x27A5\x3\x2\x2\x2\x27AF\x27B0"+
		"\x3\x2\x2\x2\x27B0\x27B3\x3\x2\x2\x2\x27B1\x27B3\x5\x396\x1CC\x2\x27B2"+
		"\x2793\x3\x2\x2\x2\x27B2\x279B\x3\x2\x2\x2\x27B2\x27A0\x3\x2\x2\x2\x27B2"+
		"\x27B1\x3\x2\x2\x2\x27B3\x323\x3\x2\x2\x2\x27B4\x27B5\a\\\x2\x2\x27B5"+
		"\x27B6\a\x117\x2\x2\x27B6\x27B9\tr\x2\x2\x27B7\x27BA\x5\x4C2\x262\x2\x27B8"+
		"\x27BA\a\x4A0\x2\x2\x27B9\x27B7\x3\x2\x2\x2\x27B9\x27B8\x3\x2\x2\x2\x27B9"+
		"\x27BA\x3\x2\x2\x2\x27BA\x27F1\x3\x2\x2\x2\x27BB\x27BC\a\\\x2\x2\x27BC"+
		"\x27C6\tr\x2\x2\x27BD\x27C0\x5\x4C2\x262\x2\x27BE\x27C0\a\x4A0\x2\x2\x27BF"+
		"\x27BD\x3\x2\x2\x2\x27BF\x27BE\x3\x2\x2\x2\x27C0\x27C4\x3\x2\x2\x2\x27C1"+
		"\x27C2\a\x439\x2\x2\x27C2\x27C3\a\x21C\x2\x2\x27C3\x27C5\a\x4A4\x2\x2"+
		"\x27C4\x27C1\x3\x2\x2\x2\x27C4\x27C5\x3\x2\x2\x2\x27C5\x27C7\x3\x2\x2"+
		"\x2\x27C6\x27BF\x3\x2\x2\x2\x27C6\x27C7\x3\x2\x2\x2\x27C7\x27F1\x3\x2"+
		"\x2\x2\x27C8\x27C9\a\xA6\x2\x2\x27C9\x27D6\tr\x2\x2\x27CA\x27CD\x5\x4C2"+
		"\x262\x2\x27CB\x27CD\a\x4A0\x2\x2\x27CC\x27CA\x3\x2\x2\x2\x27CC\x27CB"+
		"\x3\x2\x2\x2\x27CD\x27D4\x3\x2\x2\x2\x27CE\x27CF\a\x439\x2\x2\x27CF\x27D0"+
		"\a\x4BA\x2\x2\x27D0\x27D1\a\x101\x2\x2\x27D1\x27D2\a\x4A8\x2\x2\x27D2"+
		"\x27D3\t\x13\x2\x2\x27D3\x27D5\a\x4BB\x2\x2\x27D4\x27CE\x3\x2\x2\x2\x27D4"+
		"\x27D5\x3\x2\x2\x2\x27D5\x27D7\x3\x2\x2\x2\x27D6\x27CC\x3\x2\x2\x2\x27D6"+
		"\x27D7\x3\x2\x2\x2\x27D7\x27F1\x3\x2\x2\x2\x27D8\x27DA\a\xA6\x2\x2\x27D9"+
		"\x27DB\a\x43E\x2\x2\x27DA\x27D9\x3\x2\x2\x2\x27DA\x27DB\x3\x2\x2\x2\x27DB"+
		"\x27F1\x3\x2\x2\x2\x27DC\x27DD\a\xA6\x2\x2\x27DD\x27F1\x5\x4C2\x262\x2"+
		"\x27DE\x27DF\a\x342\x2\x2\x27DF\x27F1\x5\x4C2\x262\x2\x27E0\x27E1\a\x342"+
		"\x2\x2\x27E1\x27E4\tr\x2\x2\x27E2\x27E5\x5\x4C2\x262\x2\x27E3\x27E5\a"+
		"\x4A0\x2\x2\x27E4\x27E2\x3\x2\x2\x2\x27E4\x27E3\x3\x2\x2\x2\x27E4\x27E5"+
		"\x3\x2\x2\x2\x27E5\x27F1\x3\x2\x2\x2\x27E6\x27E8\a\x342\x2\x2\x27E7\x27E9"+
		"\a\x43E\x2\x2\x27E8\x27E7\x3\x2\x2\x2\x27E8\x27E9\x3\x2\x2\x2\x27E9\x27F1"+
		"\x3\x2\x2\x2\x27EA\x27EB\a\x358\x2\x2\x27EB\x27EE\tr\x2\x2\x27EC\x27EF"+
		"\x5\x4C2\x262\x2\x27ED\x27EF\a\x4A0\x2\x2\x27EE\x27EC\x3\x2\x2\x2\x27EE"+
		"\x27ED\x3\x2\x2\x2\x27EE\x27EF\x3\x2\x2\x2\x27EF\x27F1\x3\x2\x2\x2\x27F0"+
		"\x27B4\x3\x2\x2\x2\x27F0\x27BB\x3\x2\x2\x2\x27F0\x27C8\x3\x2\x2\x2\x27F0"+
		"\x27D8\x3\x2\x2\x2\x27F0\x27DC\x3\x2\x2\x2\x27F0\x27DE\x3\x2\x2\x2\x27F0"+
		"\x27E0\x3\x2\x2\x2\x27F0\x27E6\x3\x2\x2\x2\x27F0\x27EA\x3\x2\x2\x2\x27F1"+
		"\x325\x3\x2\x2\x2\x27F2\x27F4\a\x195\x2\x2\x27F3\x27F5\a\x4A2\x2\x2\x27F4"+
		"\x27F3\x3\x2\x2\x2\x27F4\x27F5\x3\x2\x2\x2\x27F5\x327\x3\x2\x2\x2\x27F6"+
		"\x27F7\a\x41A\x2\x2\x27F7\x27F8\x5\x4C2\x262\x2\x27F8\x329\x3\x2\x2\x2"+
		"\x27F9\x27FB\a\x38A\x2\x2\x27FA\x27FC\a\x4A4\x2\x2\x27FB\x27FA\x3\x2\x2"+
		"\x2\x27FB\x27FC\x3\x2\x2\x2\x27FC\x32B\x3\x2\x2\x2\x27FD\x2800\a\x310"+
		"\x2\x2\x27FE\x27FF\a\x439\x2\x2\x27FF\x2801\a\x2AD\x2\x2\x2800\x27FE\x3"+
		"\x2\x2\x2\x2800\x2801\x3\x2\x2\x2\x2801\x32D\x3\x2\x2\x2\x2802\x2805\a"+
		"\x393\x2\x2\x2803\x2804\a\x439\x2\x2\x2804\x2806\a\x275\x2\x2\x2805\x2803"+
		"\x3\x2\x2\x2\x2805\x2806\x3\x2\x2\x2\x2806\x32F\x3\x2\x2\x2\x2807\x2809"+
		"\a\x8C\x2\x2\x2808\x280A\a\x4A2\x2\x2\x2809\x2808\x3\x2\x2\x2\x2809\x280A"+
		"\x3\x2\x2\x2\x280A\x331\x3\x2\x2\x2\x280B\x280C\ts\x2\x2\x280C\x333\x3"+
		"\x2\x2\x2\x280D\x2826\a\x87\x2\x2\x280E\x2812\a\x4BA\x2\x2\x280F\x2813"+
		"\x5\x4C2\x262\x2\x2810\x2813\a\x4A4\x2\x2\x2811\x2813\a\x4A2\x2\x2\x2812"+
		"\x280F\x3\x2\x2\x2\x2812\x2810\x3\x2\x2\x2\x2812\x2811\x3\x2\x2\x2\x2813"+
		"\x2818\x3\x2\x2\x2\x2814\x2815\a\x4BC\x2\x2\x2815\x2819\a\x267\x2\x2\x2816"+
		"\x2817\a\x4BC\x2\x2\x2817\x2819\tt\x2\x2\x2818\x2814\x3\x2\x2\x2\x2818"+
		"\x2816\x3\x2\x2\x2\x2818\x2819\x3\x2\x2\x2\x2819\x281A\x3\x2\x2\x2\x281A"+
		"\x2824\a\x4BB\x2\x2\x281B\x281C\a\x439\x2\x2\x281C\x2821\x5\x332\x19A"+
		"\x2\x281D\x281E\a\x4BC\x2\x2\x281E\x2820\x5\x332\x19A\x2\x281F\x281D\x3"+
		"\x2\x2\x2\x2820\x2823\x3\x2\x2\x2\x2821\x281F\x3\x2\x2\x2\x2821\x2822"+
		"\x3\x2\x2\x2\x2822\x2825\x3\x2\x2\x2\x2823\x2821\x3\x2\x2\x2\x2824\x281B"+
		"\x3\x2\x2\x2\x2824\x2825\x3\x2\x2\x2\x2825\x2827\x3\x2\x2\x2\x2826\x280E"+
		"\x3\x2\x2\x2\x2826\x2827\x3\x2\x2\x2\x2827\x335\x3\x2\x2\x2\x2828\x2830"+
		"\a\x88\x2\x2\x2829\x282D\a\x4BA\x2\x2\x282A\x282E\x5\x4C2\x262\x2\x282B"+
		"\x282E\a\x4A4\x2\x2\x282C\x282E\a\x4A2\x2\x2\x282D\x282A\x3\x2\x2\x2\x282D"+
		"\x282B\x3\x2\x2\x2\x282D\x282C\x3\x2\x2\x2\x282E\x282F\x3\x2\x2\x2\x282F"+
		"\x2831\a\x4BB\x2\x2\x2830\x2829\x3\x2\x2\x2\x2830\x2831\x3\x2\x2\x2\x2831"+
		"\x2834\x3\x2\x2\x2\x2832\x2833\a\x439\x2\x2\x2833\x2835\a\x279\x2\x2\x2834"+
		"\x2832\x3\x2\x2\x2\x2834\x2835\x3\x2\x2\x2\x2835\x337\x3\x2\x2\x2\x2836"+
		"\x2837\tu\x2\x2\x2837\x339\x3\x2\x2\x2\x2838\x283F\a\x89\x2\x2\x2839\x283C"+
		"\a\x4BA\x2\x2\x283A\x283D\x5\x4C2\x262\x2\x283B\x283D\a\x4A4\x2\x2\x283C"+
		"\x283A\x3\x2\x2\x2\x283C\x283B\x3\x2\x2\x2\x283D\x283E\x3\x2\x2\x2\x283E"+
		"\x2840\a\x4BB\x2\x2\x283F\x2839\x3\x2\x2\x2\x283F\x2840\x3\x2\x2\x2\x2840"+
		"\x284A\x3\x2\x2\x2\x2841\x2842\a\x439\x2\x2\x2842\x2847\x5\x338\x19D\x2"+
		"\x2843\x2844\a\x4BC\x2\x2\x2844\x2846\x5\x338\x19D\x2\x2845\x2843\x3\x2"+
		"\x2\x2\x2846\x2849\x3\x2\x2\x2\x2847\x2845\x3\x2\x2\x2\x2847\x2848\x3"+
		"\x2\x2\x2\x2848\x284B\x3\x2\x2\x2\x2849\x2847\x3\x2\x2\x2\x284A\x2841"+
		"\x3\x2\x2\x2\x284A\x284B\x3\x2\x2\x2\x284B\x33B\x3\x2\x2\x2\x284C\x2857"+
		"\a\"\x2\x2\x284D\x2857\a\x14E\x2\x2\x284E\x2857\a\x279\x2\x2\x284F\x2857"+
		"\a\x3DA\x2\x2\x2850\x2857\a\x13D\x2\x2\x2851\x2857\a\x2CE\x2\x2\x2852"+
		"\x2857\a\xE6\x2\x2\x2853\x2854\a\x223\x2\x2\x2854\x2855\a\x4A8\x2\x2\x2855"+
		"\x2857\a\x4A2\x2\x2\x2856\x284C\x3\x2\x2\x2\x2856\x284D\x3\x2\x2\x2\x2856"+
		"\x284E\x3\x2\x2\x2\x2856\x284F\x3\x2\x2\x2\x2856\x2850\x3\x2\x2\x2\x2856"+
		"\x2851\x3\x2\x2\x2\x2856\x2852\x3\x2\x2\x2\x2856\x2853\x3\x2\x2\x2\x2857"+
		"\x33D\x3\x2\x2\x2\x2858\x2864\a\x8A\x2\x2\x2859\x285D\a\x4BA\x2\x2\x285A"+
		"\x285E\x5\x4C2\x262\x2\x285B\x285E\a\x4A4\x2\x2\x285C\x285E\a\x4A2\x2"+
		"\x2\x285D\x285A\x3\x2\x2\x2\x285D\x285B\x3\x2\x2\x2\x285D\x285C\x3\x2"+
		"\x2\x2\x285E\x2861\x3\x2\x2\x2\x285F\x2860\a\x4BC\x2\x2\x2860\x2862\t"+
		"v\x2\x2\x2861\x285F\x3\x2\x2\x2\x2861\x2862\x3\x2\x2\x2\x2862\x2863\x3"+
		"\x2\x2\x2\x2863\x2865\a\x4BB\x2\x2\x2864\x2859\x3\x2\x2\x2\x2864\x2865"+
		"\x3\x2\x2\x2\x2865\x286F\x3\x2\x2\x2\x2866\x2867\a\x439\x2\x2\x2867\x286C"+
		"\x5\x33C\x19F\x2\x2868\x2869\a\x4BC\x2\x2\x2869\x286B\x5\x33C\x19F\x2"+
		"\x286A\x2868\x3\x2\x2\x2\x286B\x286E\x3\x2\x2\x2\x286C\x286A\x3\x2\x2"+
		"\x2\x286C\x286D\x3\x2\x2\x2\x286D\x2870\x3\x2\x2\x2\x286E\x286C\x3\x2"+
		"\x2\x2\x286F\x2866\x3\x2\x2\x2\x286F\x2870\x3\x2\x2\x2\x2870\x33F\x3\x2"+
		"\x2\x2\x2871\x287A\a\"\x2\x2\x2872\x287A\a\x279\x2\x2\x2873\x287A\a\x3DA"+
		"\x2\x2\x2874\x287A\a\x13D\x2\x2\x2875\x287A\a\x2CE\x2\x2\x2876\x2877\a"+
		"\x223\x2\x2\x2877\x2878\a\x4A8\x2\x2\x2878\x287A\a\x4A2\x2\x2\x2879\x2871"+
		"\x3\x2\x2\x2\x2879\x2872\x3\x2\x2\x2\x2879\x2873\x3\x2\x2\x2\x2879\x2874"+
		"\x3\x2\x2\x2\x2879\x2875\x3\x2\x2\x2\x2879\x2876\x3\x2\x2\x2\x287A\x341"+
		"\x3\x2\x2\x2\x287B\x2886\a\x8B\x2\x2\x287C\x287F\a\x4BA\x2\x2\x287D\x2880"+
		"\a\x4A2\x2\x2\x287E\x2880\a\x4A4\x2\x2\x287F\x287D\x3\x2\x2\x2\x287F\x287E"+
		"\x3\x2\x2\x2\x2880\x2883\x3\x2\x2\x2\x2881\x2882\a\x4BC\x2\x2\x2882\x2884"+
		"\tv\x2\x2\x2883\x2881\x3\x2\x2\x2\x2883\x2884\x3\x2\x2\x2\x2884\x2885"+
		"\x3\x2\x2\x2\x2885\x2887\a\x4BB\x2\x2\x2886\x287C\x3\x2\x2\x2\x2886\x2887"+
		"\x3\x2\x2\x2\x2887\x2891\x3\x2\x2\x2\x2888\x2889\a\x439\x2\x2\x2889\x288E"+
		"\x5\x340\x1A1\x2\x288A\x288B\a\x4BC\x2\x2\x288B\x288D\x5\x340\x1A1\x2"+
		"\x288C\x288A\x3\x2\x2\x2\x288D\x2890\x3\x2\x2\x2\x288E\x288C\x3\x2\x2"+
		"\x2\x288E\x288F\x3\x2\x2\x2\x288F\x2892\x3\x2\x2\x2\x2890\x288E\x3\x2"+
		"\x2\x2\x2891\x2888\x3\x2\x2\x2\x2891\x2892\x3\x2\x2\x2\x2892\x343\x3\x2"+
		"\x2\x2\x2893\x2894\a\x8F\x2\x2\x2894\x2895\a\x4BA\x2\x2\x2895\x289E\a"+
		"\x4A4\x2\x2\x2896\x289C\a\x4BC\x2\x2\x2897\x289D\a\x267\x2\x2\x2898\x289D"+
		"\x5\x39C\x1CF\x2\x2899\x289D\a\x31D\x2\x2\x289A\x289D\a\x31E\x2\x2\x289B"+
		"\x289D\a\x31F\x2\x2\x289C\x2897\x3\x2\x2\x2\x289C\x2898\x3\x2\x2\x2\x289C"+
		"\x2899\x3\x2\x2\x2\x289C\x289A\x3\x2\x2\x2\x289C\x289B\x3\x2\x2\x2\x289D"+
		"\x289F\x3\x2\x2\x2\x289E\x2896\x3\x2\x2\x2\x289E\x289F\x3\x2\x2\x2\x289F"+
		"\x28A0\x3\x2\x2\x2\x28A0\x28AA\a\x4BB\x2\x2\x28A1\x28A2\a\x439\x2\x2\x28A2"+
		"\x28A7\x5\x33C\x19F\x2\x28A3\x28A4\a\x4BC\x2\x2\x28A4\x28A6\x5\x33C\x19F"+
		"\x2\x28A5\x28A3\x3\x2\x2\x2\x28A6\x28A9\x3\x2\x2\x2\x28A7\x28A5\x3\x2"+
		"\x2\x2\x28A7\x28A8\x3\x2\x2\x2\x28A8\x28AB\x3\x2\x2\x2\x28A9\x28A7\x3"+
		"\x2\x2\x2\x28AA\x28A1\x3\x2\x2\x2\x28AA\x28AB\x3\x2\x2\x2\x28AB\x345\x3"+
		"\x2\x2\x2\x28AC\x28AD\a\x93\x2\x2\x28AD\x28B1\a\x4BA\x2\x2\x28AE\x28B2"+
		"\x5\x4C2\x262\x2\x28AF\x28B2\a\x4A4\x2\x2\x28B0\x28B2\a\x4A2\x2\x2\x28B1"+
		"\x28AE\x3\x2\x2\x2\x28B1\x28AF\x3\x2\x2\x2\x28B1\x28B0\x3\x2\x2\x2\x28B2"+
		"\x28B3\x3\x2\x2\x2\x28B3\x28B6\a\x4BC\x2\x2\x28B4\x28B7\x5\x4C2\x262\x2"+
		"\x28B5\x28B7\a\x4A4\x2\x2\x28B6\x28B4\x3\x2\x2\x2\x28B6\x28B5\x3\x2\x2"+
		"\x2\x28B7\x28BA\x3\x2\x2\x2\x28B8\x28B9\a\x4BC\x2\x2\x28B9\x28BB\a\x4A2"+
		"\x2\x2\x28BA\x28B8\x3\x2\x2\x2\x28BA\x28BB\x3\x2\x2\x2\x28BB\x28BC\x3"+
		"\x2\x2\x2\x28BC\x28BF\a\x4BB\x2\x2\x28BD\x28BE\a\x439\x2\x2\x28BE\x28C0"+
		"\a\x279\x2\x2\x28BF\x28BD\x3\x2\x2\x2\x28BF\x28C0\x3\x2\x2\x2\x28C0\x347"+
		"\x3\x2\x2\x2\x28C1\x28C2\tw\x2\x2\x28C2\x349\x3\x2\x2\x2\x28C3\x28C4\a"+
		"\x96\x2\x2\x28C4\x28C5\a\x4BA\x2\x2\x28C5\x28C6\x5\x4C2\x262\x2\x28C6"+
		"\x28C7\a\x4BC\x2\x2\x28C7\x28C8\x5\x4C2\x262\x2\x28C8\x28D2\a\x4BB\x2"+
		"\x2\x28C9\x28CA\a\x439\x2\x2\x28CA\x28CF\x5\x348\x1A5\x2\x28CB\x28CC\a"+
		"\x4BC\x2\x2\x28CC\x28CE\x5\x348\x1A5\x2\x28CD\x28CB\x3\x2\x2\x2\x28CE"+
		"\x28D1\x3\x2\x2\x2\x28CF\x28CD\x3\x2\x2\x2\x28CF\x28D0\x3\x2\x2\x2\x28D0"+
		"\x28D3\x3\x2\x2\x2\x28D1\x28CF\x3\x2\x2\x2\x28D2\x28C9\x3\x2\x2\x2\x28D2"+
		"\x28D3\x3\x2\x2\x2\x28D3\x34B\x3\x2\x2\x2\x28D4\x28D9\a\x2C2\x2\x2\x28D5"+
		"\x28D6\a\x4BA\x2\x2\x28D6\x28D7\x5\x4C2\x262\x2\x28D7\x28D8\a\x4BB\x2"+
		"\x2\x28D8\x28DA\x3\x2\x2\x2\x28D9\x28D5\x3\x2\x2\x2\x28D9\x28DA\x3\x2"+
		"\x2\x2\x28DA\x28DD\x3\x2\x2\x2\x28DB\x28DC\a\x439\x2\x2\x28DC\x28DE\a"+
		"\x1BA\x2\x2\x28DD\x28DB\x3\x2\x2\x2\x28DD\x28DE\x3\x2\x2\x2\x28DE\x34D"+
		"\x3\x2\x2\x2\x28DF\x28E2\a\x2E3\x2\x2\x28E0\x28E1\a\x439\x2\x2\x28E1\x28E3"+
		"\a\x279\x2\x2\x28E2\x28E0\x3\x2\x2\x2\x28E2\x28E3\x3\x2\x2\x2\x28E3\x34F"+
		"\x3\x2\x2\x2\x28E4\x28E5\tx\x2\x2\x28E5\x351\x3\x2\x2\x2\x28E6\x28EF\a"+
		"\x38D\x2\x2\x28E7\x28E8\a\x4BA\x2\x2\x28E8\x28EB\x5\x39C\x1CF\x2\x28E9"+
		"\x28EA\a\x4BC\x2\x2\x28EA\x28EC\x5\x39C\x1CF\x2\x28EB\x28E9\x3\x2\x2\x2"+
		"\x28EB\x28EC\x3\x2\x2\x2\x28EC\x28ED\x3\x2\x2\x2\x28ED\x28EE\a\x4BB\x2"+
		"\x2\x28EE\x28F0\x3\x2\x2\x2\x28EF\x28E7\x3\x2\x2\x2\x28EF\x28F0\x3\x2"+
		"\x2\x2\x28F0\x28FA\x3\x2\x2\x2\x28F1\x28F2\a\x439\x2\x2\x28F2\x28F7\x5"+
		"\x350\x1A9\x2\x28F3\x28F4\a\x4BC\x2\x2\x28F4\x28F6\x5\x350\x1A9\x2\x28F5"+
		"\x28F3\x3\x2\x2\x2\x28F6\x28F9\x3\x2\x2\x2\x28F7\x28F5\x3\x2\x2\x2\x28F7"+
		"\x28F8\x3\x2\x2\x2\x28F8\x28FB\x3\x2\x2\x2\x28F9\x28F7\x3\x2\x2\x2\x28FA"+
		"\x28F1\x3\x2\x2\x2\x28FA\x28FB\x3\x2\x2\x2\x28FB\x353\x3\x2\x2\x2\x28FC"+
		"\x2906\a\x392\x2\x2\x28FD\x28FE\a\x4BA\x2\x2\x28FE\x28FF\a\x398\x2\x2"+
		"\x28FF\x2903\a\x4A8\x2\x2\x2900\x2901\a\x4A2\x2\x2\x2901\x2904\t\x35\x2"+
		"\x2\x2902\x2904\a\xF9\x2\x2\x2903\x2900\x3\x2\x2\x2\x2903\x2902\x3\x2"+
		"\x2\x2\x2904\x2905\x3\x2\x2\x2\x2905\x2907\a\x4BB\x2\x2\x2906\x28FD\x3"+
		"\x2\x2\x2\x2906\x2907\x3\x2\x2\x2\x2907\x290A\x3\x2\x2\x2\x2908\x2909"+
		"\a\x439\x2\x2\x2909\x290B\a\x279\x2\x2\x290A\x2908\x3\x2\x2\x2\x290A\x290B"+
		"\x3\x2\x2\x2\x290B\x355\x3\x2\x2\x2\x290C\x290D\a\xEF\x2\x2\x290D\x290E"+
		"\a\x4BA\x2\x2\x290E\x2915\x5\x4C6\x264\x2\x290F\x2910\a\x4BC\x2\x2\x2910"+
		"\x2913\x5\x4C6\x264\x2\x2911\x2912\a\x4BC\x2\x2\x2912\x2914\x5\x39C\x1CF"+
		"\x2\x2913\x2911\x3\x2\x2\x2\x2913\x2914\x3\x2\x2\x2\x2914\x2916\x3\x2"+
		"\x2\x2\x2915\x290F\x3\x2\x2\x2\x2915\x2916\x3\x2\x2\x2\x2916\x2917\x3"+
		"\x2\x2\x2\x2917\x291A\a\x4BB\x2\x2\x2918\x2919\a\x439\x2\x2\x2919\x291B"+
		"\a\x279\x2\x2\x291A\x2918\x3\x2\x2\x2\x291A\x291B\x3\x2\x2\x2\x291B\x357"+
		"\x3\x2\x2\x2\x291C\x291D\x5\x4C2\x262\x2\x291D\x291E\a\x4BA\x2\x2\x291E"+
		"\x291F\a\x17E\x2\x2\x291F\x2922\a\x4BB\x2\x2\x2920\x2921\a\x439\x2\x2"+
		"\x2921\x2923\a\x279\x2\x2\x2922\x2920\x3\x2\x2\x2\x2922\x2923\x3\x2\x2"+
		"\x2\x2923\x359\x3\x2\x2\x2\x2924\x2929\a\x11F\x2\x2\x2925\x2926\a\x4BA"+
		"\x2\x2\x2926\x292A\a\xAD\x2\x2\x2927\x2928\a\x18\x2\x2\x2928\x292A\a\x4BB"+
		"\x2\x2\x2929\x2925\x3\x2\x2\x2\x2929\x2927\x3\x2\x2\x2\x2929\x292A\x3"+
		"\x2\x2\x2\x292A\x292D\x3\x2\x2\x2\x292B\x292C\a\x439\x2\x2\x292C\x292E"+
		"\a\x279\x2\x2\x292D\x292B\x3\x2\x2\x2\x292D\x292E\x3\x2\x2\x2\x292E\x35B"+
		"\x3\x2\x2\x2\x292F\x293F\a\xEE\x2\x2\x2930\x2940\x5\x334\x19B\x2\x2931"+
		"\x2940\x5\x336\x19C\x2\x2932\x2940\x5\x33A\x19E\x2\x2933\x2940\x5\x33E"+
		"\x1A0\x2\x2934\x2940\x5\x342\x1A2\x2\x2935\x2940\x5\x344\x1A3\x2\x2936"+
		"\x2940\x5\x346\x1A4\x2\x2937\x2940\x5\x34A\x1A6\x2\x2938\x2940\x5\x356"+
		"\x1AC\x2\x2939\x2940\x5\x358\x1AD\x2\x293A\x2940\x5\x35A\x1AE\x2\x293B"+
		"\x2940\x5\x34C\x1A7\x2\x293C\x2940\x5\x34E\x1A8\x2\x293D\x2940\x5\x352"+
		"\x1AA\x2\x293E\x2940\x5\x354\x1AB\x2\x293F\x2930\x3\x2\x2\x2\x293F\x2931"+
		"\x3\x2\x2\x2\x293F\x2932\x3\x2\x2\x2\x293F\x2933\x3\x2\x2\x2\x293F\x2934"+
		"\x3\x2\x2\x2\x293F\x2935\x3\x2\x2\x2\x293F\x2936\x3\x2\x2\x2\x293F\x2937"+
		"\x3\x2\x2\x2\x293F\x2938\x3\x2\x2\x2\x293F\x2939\x3\x2\x2\x2\x293F\x293A"+
		"\x3\x2\x2\x2\x293F\x293B\x3\x2\x2\x2\x293F\x293C\x3\x2\x2\x2\x293F\x293D"+
		"\x3\x2\x2\x2\x293F\x293E\x3\x2\x2\x2\x2940\x35D\x3\x2\x2\x2\x2941\x2942"+
		"\a\x145\x2\x2\x2942\x2943\a:\x2\x2\x2943\x2944\ty\x2\x2\x2944\x35F\x3"+
		"\x2\x2\x2\x2945\x2947\a\x4A0\x2\x2\x2946\x2948\a:\x2\x2\x2947\x2946\x3"+
		"\x2\x2\x2\x2947\x2948\x3\x2\x2\x2\x2948\x2949\x3\x2\x2\x2\x2949\x294C"+
		"\x5\x4BA\x25E\x2\x294A\x294B\a\x4A8\x2\x2\x294B\x294D\x5\x39C\x1CF\x2"+
		"\x294C\x294A\x3\x2\x2\x2\x294C\x294D\x3\x2\x2\x2\x294D\x361\x3\x2\x2\x2"+
		"\x294E\x294F\a\x3D7\x2\x2\x294F\x2950\a\x4BA\x2\x2\x2950\x2957\x5\x36A"+
		"\x1B6\x2\x2951\x2953\a\x4BC\x2\x2\x2952\x2951\x3\x2\x2\x2\x2952\x2953"+
		"\x3\x2\x2\x2\x2953\x2954\x3\x2\x2\x2\x2954\x2956\x5\x364\x1B3\x2\x2955"+
		"\x2952\x3\x2\x2\x2\x2956\x2959\x3\x2\x2\x2\x2957\x2955\x3\x2\x2\x2\x2957"+
		"\x2958\x3\x2\x2\x2\x2958\x295A\x3\x2\x2\x2\x2959\x2957\x3\x2\x2\x2\x295A"+
		"\x295B\a\x4BB\x2\x2\x295B\x363\x3\x2\x2\x2\x295C\x295D\a\x2D9\x2\x2\x295D"+
		"\x2961\a\x1F1\x2\x2\x295E\x295F\a\x1C6\x2\x2\x295F\x2961\x5\x4C2\x262"+
		"\x2\x2960\x295C\x3\x2\x2\x2\x2960\x295E\x3\x2\x2\x2\x2961\x2963\x3\x2"+
		"\x2\x2\x2962\x2964\tz\x2\x2\x2963\x2962\x3\x2\x2\x2\x2963\x2964\x3\x2"+
		"\x2\x2\x2964\x2967\x3\x2\x2\x2\x2965\x2967\a\x40D\x2\x2\x2966\x2960\x3"+
		"\x2\x2\x2\x2966\x2965\x3\x2\x2\x2\x2967\x2968\x3\x2\x2\x2\x2968\x2969"+
		"\a\x4BA\x2\x2\x2969\x296A\x5\x496\x24C\x2\x296A\x296B\a\x4BB\x2\x2\x296B"+
		"\x2972\x3\x2\x2\x2\x296C\x296D\a\x86\x2\x2\x296D\x296E\a\x4BA\x2\x2\x296E"+
		"\x296F\x5\x3B4\x1DB\x2\x296F\x2970\a\x4BB\x2\x2\x2970\x2972\x3\x2\x2\x2"+
		"\x2971\x2966\x3\x2\x2\x2\x2971\x296C\x3\x2\x2\x2\x2972\x365\x3\x2\x2\x2"+
		"\x2973\x2974\a\x444\x2\x2\x2974\x2976\a\x4BA\x2\x2\x2975\x2977\t{\x2\x2"+
		"\x2976\x2975\x3\x2\x2\x2\x2976\x2977\x3\x2\x2\x2\x2977\x2978\x3\x2\x2"+
		"\x2\x2978\x2979\x5\x368\x1B5\x2\x2979\x297A\a\x4BB\x2\x2\x297A\x367\x3"+
		"\x2\x2\x2\x297B\x297C\a\x4A3\x2\x2\x297C\x297D\a\x4B5\x2\x2\x297D\x297E"+
		"\a\x4A3\x2\x2\x297E\x369\x3\x2\x2\x2\x297F\x2986\x5\x36C\x1B7\x2\x2980"+
		"\x2982\a\x4BC\x2\x2\x2981\x2980\x3\x2\x2\x2\x2981\x2982\x3\x2\x2\x2\x2982"+
		"\x2983\x3\x2\x2\x2\x2983\x2985\x5\x36C\x1B7\x2\x2984\x2981\x3\x2\x2\x2"+
		"\x2985\x2988\x3\x2\x2\x2\x2986\x2984\x3\x2\x2\x2\x2986\x2987\x3\x2\x2"+
		"\x2\x2987\x36B\x3\x2\x2\x2\x2988\x2986\x3\x2\x2\x2\x2989\x298D\x5\x36E"+
		"\x1B8\x2\x298A\x298D\x5\x374\x1BB\x2\x298B\x298D\x5\x37C\x1BF\x2\x298C"+
		"\x2989\x3\x2\x2\x2\x298C\x298A\x3\x2\x2\x2\x298C\x298B\x3\x2\x2\x2\x298D"+
		"\x36D\x3\x2\x2\x2\x298E\x2995\x5\x4C2\x262\x2\x298F\x2996\x5\x4BA\x25E"+
		"\x2\x2990\x2991\a:\x2\x2\x2991\x2993\x5\x39C\x1CF\x2\x2992\x2994\a\x2C9"+
		"\x2\x2\x2993\x2992\x3\x2\x2\x2\x2993\x2994\x3\x2\x2\x2\x2994\x2996\x3"+
		"\x2\x2\x2\x2995\x298F\x3\x2\x2\x2\x2995\x2990\x3\x2\x2\x2\x2996\x299A"+
		"\x3\x2\x2\x2\x2997\x2999\x5\x370\x1B9\x2\x2998\x2997\x3\x2\x2\x2\x2999"+
		"\x299C\x3\x2\x2\x2\x299A\x2998\x3\x2\x2\x2\x299A\x299B\x3\x2\x2\x2\x299B"+
		"\x299E\x3\x2\x2\x2\x299C\x299A\x3\x2\x2\x2\x299D\x299F\x5\x378\x1BD\x2"+
		"\x299E\x299D\x3\x2\x2\x2\x299E\x299F\x3\x2\x2\x2\x299F\x36F\x3\x2\x2\x2"+
		"\x29A0\x29D9\a\x166\x2\x2\x29A1\x29A4\a\x9B\x2\x2\x29A2\x29A5\x5\x4C2"+
		"\x262\x2\x29A3\x29A5\a\xDF\x2\x2\x29A4\x29A2\x3\x2\x2\x2\x29A4\x29A3\x3"+
		"\x2\x2\x2\x29A5\x29D9\x3\x2\x2\x2\x29A6\x29D9\a\x3A3\x2\x2\x29A7\x29A8"+
		"\a\x21E\x2\x2\x29A8\x29A9\a\x439\x2\x2\x29A9\x29AA\a\x4BA\x2\x2\x29AA"+
		"\x29AB\a\x187\x2\x2\x29AB\x29AC\a\x4A8\x2\x2\x29AC\x29AD\a\x4A4\x2\x2"+
		"\x29AD\x29D9\a\x4BB\x2\x2\x29AE\x29AF\a\xB5\x2\x2\x29AF\x29B1\x5\x4C2"+
		"\x262\x2\x29B0\x29AE\x3\x2\x2\x2\x29B0\x29B1\x3\x2\x2\x2\x29B1\x29B2\x3"+
		"\x2\x2\x2\x29B2\x29B3\a\xF9\x2\x2\x29B3\x29D9\x5\x39C\x1CF\x2\x29B4\x29BA"+
		"\a\x1AF\x2\x2\x29B5\x29B6\a\x4BA\x2\x2\x29B6\x29B7\a\x4A2\x2\x2\x29B7"+
		"\x29B8\a\x4BC\x2\x2\x29B8\x29B9\a\x4A2\x2\x2\x29B9\x29BB\a\x4BB\x2\x2"+
		"\x29BA\x29B5\x3\x2\x2\x2\x29BA\x29BB\x3\x2\x2\x2\x29BB\x29D9\x3\x2\x2"+
		"\x2\x29BC\x29BD\a\x271\x2\x2\x29BD\x29BE\a\x172\x2\x2\x29BE\x29D9\a\x325"+
		"\x2\x2\x29BF\x29C0\a\x189\x2\x2\x29C0\x29C1\a&\x2\x2\x29C1\x29C2\a:\x2"+
		"\x2\x29C2\x29C3\t|\x2\x2\x29C3\x29C5\t}\x2\x2\x29C4\x29C6\a\x1A7\x2\x2"+
		"\x29C5\x29C4\x3\x2\x2\x2\x29C5\x29C6\x3\x2\x2\x2\x29C6\x29D9\x3\x2\x2"+
		"\x2\x29C7\x29D9\a\x34A\x2\x2\x29C8\x29C9\a\x12C\x2\x2\x29C9\x29CA\a\x439"+
		"\x2\x2\x29CA\x29CB\a\x4BA\x2\x2\x29CB\x29CC\a\xA2\x2\x2\x29CC\x29CD\a"+
		"\x4A8\x2\x2\x29CD\x29CE\a\x4A4\x2\x2\x29CE\x29CF\a\x4BC\x2\x2\x29CF\x29D0"+
		"\a\x12F\x2\x2\x29D0\x29D1\a\x4A8\x2\x2\x29D1\x29D2\t~\x2\x2\x29D2\x29D3"+
		"\a\x4BC\x2\x2\x29D3\x29D4\a\x17\x2\x2\x29D4\x29D5\a\x4A8\x2\x2\x29D5\x29D6"+
		"\a\x4A4\x2\x2\x29D6\x29D9\a\x4BB\x2\x2\x29D7\x29D9\x5\x376\x1BC\x2\x29D8"+
		"\x29A0\x3\x2\x2\x2\x29D8\x29A1\x3\x2\x2\x2\x29D8\x29A6\x3\x2\x2\x2\x29D8"+
		"\x29A7\x3\x2\x2\x2\x29D8\x29B0\x3\x2\x2\x2\x29D8\x29B4\x3\x2\x2\x2\x29D8"+
		"\x29BC\x3\x2\x2\x2\x29D8\x29BF\x3\x2\x2\x2\x29D8\x29C7\x3\x2\x2\x2\x29D8"+
		"\x29C8\x3\x2\x2\x2\x29D8\x29D7\x3\x2\x2\x2\x29D9\x371\x3\x2\x2\x2\x29DA"+
		"\x29DB\x5\x4C2\x262\x2\x29DB\x29F1\t\x19\x2\x2\x29DC\x29F2\a\x34A\x2\x2"+
		"\x29DD\x29F2\a\x2C9\x2\x2\x29DE\x29DF\a\x271\x2\x2\x29DF\x29E0\a\x172"+
		"\x2\x2\x29E0\x29F2\a\x325\x2\x2\x29E1\x29F2\a\x3A3\x2\x2\x29E2\x29F2\a"+
		"\x1A7\x2\x2\x29E3\x29EF\a\x21E\x2\x2\x29E4\x29ED\a\x439\x2\x2\x29E5\x29E6"+
		"\a\x187\x2\x2\x29E6\x29E7\a\x4A8\x2\x2\x29E7\x29EE\a\x4A4\x2\x2\x29E8"+
		"\x29E9\a\x4BA\x2\x2\x29E9\x29EA\a\x187\x2\x2\x29EA\x29EB\a\x4A8\x2\x2"+
		"\x29EB\x29EC\a\x4A4\x2\x2\x29EC\x29EE\a\x4BB\x2\x2\x29ED\x29E5\x3\x2\x2"+
		"\x2\x29ED\x29E8\x3\x2\x2\x2\x29EE\x29F0\x3\x2\x2\x2\x29EF\x29E4\x3\x2"+
		"\x2\x2\x29EF\x29F0\x3\x2\x2\x2\x29F0\x29F2\x3\x2\x2\x2\x29F1\x29DC\x3"+
		"\x2\x2\x2\x29F1\x29DD\x3\x2\x2\x2\x29F1\x29DE\x3\x2\x2\x2\x29F1\x29E1"+
		"\x3\x2\x2\x2\x29F1\x29E2\x3\x2\x2\x2\x29F1\x29E3\x3\x2\x2\x2\x29F2\x373"+
		"\x3\x2\x2\x2\x29F3\x29F4\x5\x4C2\x262\x2\x29F4\x29F5\t\x7F\x2\x2\x29F5"+
		"\x29F9\x5\x39C\x1CF\x2\x29F6\x29FA\a\x221\x2\x2\x29F7\x29F8\a\x271\x2"+
		"\x2\x29F8\x29FA\a\x221\x2\x2\x29F9\x29F6\x3\x2\x2\x2\x29F9\x29F7\x3\x2"+
		"\x2\x2\x29F9\x29FA\x3\x2\x2\x2\x29FA\x375\x3\x2\x2\x2\x29FB\x29FC\a\xB5"+
		"\x2\x2\x29FC\x29FE\x5\x4C2\x262\x2\x29FD\x29FB\x3\x2\x2\x2\x29FD\x29FE"+
		"\x3\x2\x2\x2\x29FE\x2A0F\x3\x2\x2\x2\x29FF\x2A10\x5\x4A4\x253\x2\x2A00"+
		"\x2A01\a\x2D9\x2\x2\x2A01\x2A04\a\x1F1\x2\x2\x2A02\x2A04\a\x40D\x2\x2"+
		"\x2A03\x2A00\x3\x2\x2\x2\x2A03\x2A02\x3\x2\x2\x2\x2A04\x2A06\x3\x2\x2"+
		"\x2\x2A05\x2A07\x5\x4A2\x252\x2\x2A06\x2A05\x3\x2\x2\x2\x2A06\x2A07\x3"+
		"\x2\x2\x2\x2A07\x2A08\x3\x2\x2\x2\x2A08\x2A10\x5\x380\x1C1\x2\x2A09\x2A0A"+
		"\a\x17A\x2\x2\x2A0A\x2A0C\a\x1F1\x2\x2\x2A0B\x2A09\x3\x2\x2\x2\x2A0B\x2A0C"+
		"\x3\x2\x2\x2\x2A0C\x2A0D\x3\x2\x2\x2\x2A0D\x2A10\x5\x382\x1C2\x2\x2A0E"+
		"\x2A10\x5\x384\x1C3\x2\x2A0F\x29FF\x3\x2\x2\x2\x2A0F\x2A03\x3\x2\x2\x2"+
		"\x2A0F\x2A0B\x3\x2\x2\x2\x2A0F\x2A0E\x3\x2\x2\x2\x2A10\x377\x3\x2\x2\x2"+
		"\x2A11\x2A12\a\x1C6\x2\x2\x2A12\x2A14\x5\x4C2\x262\x2\x2A13\x2A15\x5\x4A2"+
		"\x252\x2\x2A14\x2A13\x3\x2\x2\x2\x2A14\x2A15\x3\x2\x2\x2\x2A15\x2A17\x3"+
		"\x2\x2\x2\x2A16\x2A18\x5\x256\x12C\x2\x2A17\x2A16\x3\x2\x2\x2\x2A17\x2A18"+
		"\x3\x2\x2\x2\x2A18\x2A1A\x3\x2\x2\x2\x2A19\x2A1B\x5\x37A\x1BE\x2\x2A1A"+
		"\x2A19\x3\x2\x2\x2\x2A1A\x2A1B\x3\x2\x2\x2\x2A1B\x2A21\x3\x2\x2\x2\x2A1C"+
		"\x2A1F\a\x167\x2\x2\x2A1D\x2A20\x5\x4C2\x262\x2\x2A1E\x2A20\a\x282\x2"+
		"\x2\x2A1F\x2A1D\x3\x2\x2\x2\x2A1F\x2A1E\x3\x2\x2\x2\x2A20\x2A22\x3\x2"+
		"\x2\x2\x2A21\x2A1C\x3\x2\x2\x2\x2A21\x2A22\x3\x2\x2\x2\x2A22\x379\x3\x2"+
		"\x2\x2\x2A23\x2A2B\a\x294\x2\x2\x2A24\x2A25\x5\x4C2\x262\x2\x2A25\x2A26"+
		"\a\x4BA\x2\x2\x2A26\x2A27\x5\x4C2\x262\x2\x2A27\x2A28\a\x4BB\x2\x2\x2A28"+
		"\x2A2C\x3\x2\x2\x2\x2A29\x2A2C\x5\x4C2\x262\x2\x2A2A\x2A2C\a\xFB\x2\x2"+
		"\x2A2B\x2A24\x3\x2\x2\x2\x2A2B\x2A29\x3\x2\x2\x2\x2A2B\x2A2A\x3\x2\x2"+
		"\x2\x2A2C\x37B\x3\x2\x2\x2\x2A2D\x2A2E\a\xB5\x2\x2\x2A2E\x2A30\x5\x4C2"+
		"\x262\x2\x2A2F\x2A2D\x3\x2\x2\x2\x2A2F\x2A30\x3\x2\x2\x2\x2A30\x2A5A\x3"+
		"\x2\x2\x2\x2A31\x2A32\a\x2D9\x2\x2\x2A32\x2A35\a\x1F1\x2\x2\x2A33\x2A35"+
		"\a\x40D\x2\x2\x2A34\x2A31\x3\x2\x2\x2\x2A34\x2A33\x3\x2\x2\x2\x2A35\x2A37"+
		"\x3\x2\x2\x2\x2A36\x2A38\x5\x4A2\x252\x2\x2A37\x2A36\x3\x2\x2\x2\x2A37"+
		"\x2A38\x3\x2\x2\x2\x2A38\x2A39\x3\x2\x2\x2\x2A39\x2A3A\a\x4BA\x2\x2\x2A3A"+
		"\x2A3B\x5\x496\x24C\x2\x2A3B\x2A3C\a\x4BB\x2\x2\x2A3C\x2A3D\x5\x380\x1C1"+
		"\x2\x2A3D\x2A5B\x3\x2\x2\x2\x2A3E\x2A3F\a\x17A\x2\x2\x2A3F\x2A40\a\x1F1"+
		"\x2\x2\x2A40\x2A41\a\x4BA\x2\x2\x2A41\x2A42\x5\x49C\x24F\x2\x2A42\x2A43"+
		"\a\x4BB\x2\x2\x2A43\x2A44\x5\x382\x1C2\x2\x2A44\x2A5B\x3\x2\x2\x2\x2A45"+
		"\x2A46\a\xB3\x2\x2\x2A46\x2A47\a\x4BA\x2\x2\x2A47\x2A4C\x5\x37E\x1C0\x2"+
		"\x2A48\x2A49\a\x4BC\x2\x2\x2A49\x2A4B\x5\x37E\x1C0\x2\x2A4A\x2A48\x3\x2"+
		"\x2\x2\x2A4B\x2A4E\x3\x2\x2\x2\x2A4C\x2A4A\x3\x2\x2\x2\x2A4C\x2A4D\x3"+
		"\x2\x2\x2\x2A4D\x2A4F\x3\x2\x2\x2\x2A4E\x2A4C\x3\x2\x2\x2\x2A4F\x2A50"+
		"\a\x4BB\x2\x2\x2A50\x2A5B\x3\x2\x2\x2\x2A51\x2A52\a\xF9\x2\x2\x2A52\x2A53"+
		"\x5\x39C\x1CF\x2\x2A53\x2A54\a\x172\x2\x2\x2A54\x2A57\x5\x4C2\x262\x2"+
		"\x2A55\x2A56\a\x439\x2\x2\x2A56\x2A58\a\x423\x2\x2\x2A57\x2A55\x3\x2\x2"+
		"\x2\x2A57\x2A58\x3\x2\x2\x2\x2A58\x2A5B\x3\x2\x2\x2\x2A59\x2A5B\x5\x384"+
		"\x1C3\x2\x2A5A\x2A34\x3\x2\x2\x2\x2A5A\x2A3E\x3\x2\x2\x2\x2A5A\x2A45\x3"+
		"\x2\x2\x2\x2A5A\x2A51\x3\x2\x2\x2\x2A5A\x2A59\x3\x2\x2\x2\x2A5B\x37D\x3"+
		"\x2\x2\x2\x2A5C\x2A5D\x5\x4C2\x262\x2\x2A5D\x2A5E\a\x3EB\x2\x2\x2A5E\x2A5F"+
		"\x5\x4C2\x262\x2\x2A5F\x37F\x3\x2\x2\x2\x2A60\x2A61\a\x439\x2\x2\x2A61"+
		"\x2A62\a\x16C\x2\x2\x2A62\x2A63\a\x4A8\x2\x2\x2A63\x2A65\a\x4A2\x2\x2"+
		"\x2A64\x2A60\x3\x2\x2\x2\x2A64\x2A65\x3\x2\x2\x2\x2A65\x2A67\x3\x2\x2"+
		"\x2\x2A66\x2A68\x5\x38A\x1C6\x2\x2A67\x2A66\x3\x2\x2\x2\x2A67\x2A68\x3"+
		"\x2\x2\x2\x2A68\x2A6A\x3\x2\x2\x2\x2A69\x2A6B\x5\x37A\x1BE\x2\x2A6A\x2A69"+
		"\x3\x2\x2\x2\x2A6A\x2A6B\x3\x2\x2\x2\x2A6B\x381\x3\x2\x2\x2\x2A6C\x2A6D"+
		"\a\x313\x2\x2\x2A6D\x2A6E\x5\x488\x245\x2\x2A6E\x2A6F\a\x4BA\x2\x2\x2A6F"+
		"\x2A70\x5\x49C\x24F\x2\x2A70\x2A75\a\x4BB\x2\x2\x2A71\x2A74\x5\x386\x1C4"+
		"\x2\x2A72\x2A74\x5\x388\x1C5\x2\x2A73\x2A71\x3\x2\x2\x2\x2A73\x2A72\x3"+
		"\x2\x2\x2\x2A74\x2A77\x3\x2\x2\x2\x2A75\x2A73\x3\x2\x2\x2\x2A75\x2A76"+
		"\x3\x2\x2\x2\x2A76\x2A7B\x3\x2\x2\x2\x2A77\x2A75\x3\x2\x2\x2\x2A78\x2A79"+
		"\a\x271\x2\x2\x2A79\x2A7A\a\x172\x2\x2\x2A7A\x2A7C\a\x325\x2\x2\x2A7B"+
		"\x2A78\x3\x2\x2\x2\x2A7B\x2A7C\x3\x2\x2\x2\x2A7C\x383\x3\x2\x2\x2\x2A7D"+
		"\x2A81\a\x86\x2\x2\x2A7E\x2A7F\a\x271\x2\x2\x2A7F\x2A80\a\x172\x2\x2\x2A80"+
		"\x2A82\a\x325\x2\x2\x2A81\x2A7E\x3\x2\x2\x2\x2A81\x2A82\x3\x2\x2\x2\x2A82"+
		"\x2A83\x3\x2\x2\x2\x2A83\x2A84\a\x4BA\x2\x2\x2A84\x2A85\x5\x3B4\x1DB\x2"+
		"\x2A85\x2A86\a\x4BB\x2\x2\x2A86\x385\x3\x2\x2\x2\x2A87\x2A88\a\x294\x2"+
		"\x2\x2A88\x2A90\a\x102\x2\x2\x2A89\x2A8A\a\x25F\x2\x2\x2A8A\x2A91\a\n"+
		"\x2\x2\x2A8B\x2A91\au\x2\x2\x2A8C\x2A8D\a\x386\x2\x2\x2A8D\x2A91\a\x281"+
		"\x2\x2\x2A8E\x2A8F\a\x386\x2\x2\x2A8F\x2A91\a\xF9\x2\x2\x2A90\x2A89\x3"+
		"\x2\x2\x2\x2A90\x2A8B\x3\x2\x2\x2\x2A90\x2A8C\x3\x2\x2\x2\x2A90\x2A8E"+
		"\x3\x2\x2\x2\x2A91\x387\x3\x2\x2\x2\x2A92\x2A93\a\x294\x2\x2\x2A93\x2A9B"+
		"\a\x415\x2\x2\x2A94\x2A95\a\x25F\x2\x2\x2A95\x2A9C\a\n\x2\x2\x2A96\x2A9C"+
		"\au\x2\x2\x2A97\x2A98\a\x386\x2\x2\x2A98\x2A9C\a\x281\x2\x2\x2A99\x2A9A"+
		"\a\x386\x2\x2\x2A9A\x2A9C\a\xF9\x2\x2\x2A9B\x2A94\x3\x2\x2\x2\x2A9B\x2A96"+
		"\x3\x2\x2\x2\x2A9B\x2A97\x3\x2\x2\x2\x2A9B\x2A99\x3\x2\x2\x2\x2A9C\x389"+
		"\x3\x2\x2\x2\x2A9D\x2A9E\a\x439\x2\x2\x2A9E\x2A9F\a\x4BA\x2\x2\x2A9F\x2AA4"+
		"\x5\x38C\x1C7\x2\x2AA0\x2AA1\a\x4BC\x2\x2\x2AA1\x2AA3\x5\x38C\x1C7\x2"+
		"\x2AA2\x2AA0\x3\x2\x2\x2\x2AA3\x2AA6\x3\x2\x2\x2\x2AA4\x2AA2\x3\x2\x2"+
		"\x2\x2AA4\x2AA5\x3\x2\x2\x2\x2AA5\x2AA7\x3\x2\x2\x2\x2AA6\x2AA4\x3\x2"+
		"\x2\x2\x2AA7\x2AA8\a\x4BB\x2\x2\x2AA8\x38B\x3\x2\x2\x2\x2AA9\x2AAA\a\x2B0"+
		"\x2\x2\x2AAA\x2AAB\a\x4A8\x2\x2\x2AAB\x2B00\x5\x4A0\x251\x2\x2AAC\x2AAD"+
		"\a\x16C\x2\x2\x2AAD\x2AAE\a\x4A8\x2\x2\x2AAE\x2B00\a\x4A2\x2\x2\x2AAF"+
		"\x2AB0\a\x1B8\x2\x2\x2AB0\x2AB1\a\x4A8\x2\x2\x2AB1\x2B00\x5\x4A0\x251"+
		"\x2\x2AB2\x2AB3\a\x3B6\x2\x2\x2AB3\x2AB4\a\x4A8\x2\x2\x2AB4\x2B00\x5\x4A0"+
		"\x251\x2\x2AB5\x2AB6\a\x1E\x2\x2\x2AB6\x2AB7\a\x4A8\x2\x2\x2AB7\x2B00"+
		"\x5\x4A0\x251\x2\x2AB8\x2AB9\a\x1D\x2\x2\x2AB9\x2ABA\a\x4A8\x2\x2\x2ABA"+
		"\x2B00\x5\x4A0\x251\x2\x2ABB\x2ABC\a\x2A3\x2\x2\x2ABC\x2ABD\a\x4A8\x2"+
		"\x2\x2ABD\x2B00\x5\x4A0\x251\x2\x2ABE\x2ABF\a\x39F\x2\x2\x2ABF\x2AC0\a"+
		"\x4A8\x2\x2\x2AC0\x2B00\x5\x4A0\x251\x2\x2AC1\x2AC2\a\x223\x2\x2\x2AC2"+
		"\x2AC3\a\x4A8\x2\x2\x2AC3\x2B00\a\x4A2\x2\x2\x2AC4\x2AC5\a\xE4\x2\x2\x2AC5"+
		"\x2AC6\a\x4A8\x2\x2\x2AC6\x2AC8\t\x42\x2\x2\x2AC7\x2AC9\x5\x216\x10C\x2"+
		"\x2AC8\x2AC7\x3\x2\x2\x2\x2AC8\x2AC9\x3\x2\x2\x2\x2AC9\x2B00\x3\x2\x2"+
		"\x2\x2ACA\x2ACB\a\x448\x2\x2\x2ACB\x2ACC\a\x4A8\x2\x2\x2ACC\x2ACE\x5\x4A0"+
		"\x251\x2\x2ACD\x2ACF\x5\x216\x10C\x2\x2ACE\x2ACD\x3\x2\x2\x2\x2ACE\x2ACF"+
		"\x3\x2\x2\x2\x2ACF\x2B00\x3\x2\x2\x2\x2AD0\x2AD1\a\x118\x2\x2\x2AD1\x2AD2"+
		"\a\x4A8\x2\x2\x2AD2\x2AD3\a\x19F\x2\x2\x2AD3\x2AD4\a\x4BA\x2\x2\x2AD4"+
		"\x2AD5\x5\x4C2\x262\x2\x2AD5\x2AD6\a\x4BB\x2\x2\x2AD6\x2B00\x3\x2\x2\x2"+
		"\x2AD7\x2AD8\a\x99\x2\x2\x2AD8\x2AD9\a\x1C6\x2\x2\x2AD9\x2ADA\a\x4BA\x2"+
		"\x2\x2ADA\x2ADC\x5\x4C2\x262\x2\x2ADB\x2ADD\tK\x2\x2\x2ADC\x2ADB\x3\x2"+
		"\x2\x2\x2ADC\x2ADD\x3\x2\x2\x2\x2ADD\x2AE5\x3\x2\x2\x2\x2ADE\x2ADF\a\x4BC"+
		"\x2\x2\x2ADF\x2AE1\x5\x4C2\x262\x2\x2AE0\x2AE2\tK\x2\x2\x2AE1\x2AE0\x3"+
		"\x2\x2\x2\x2AE1\x2AE2\x3\x2\x2\x2\x2AE2\x2AE4\x3\x2\x2\x2\x2AE3\x2ADE"+
		"\x3\x2\x2\x2\x2AE4\x2AE7\x3\x2\x2\x2\x2AE5\x2AE3\x3\x2\x2\x2\x2AE5\x2AE6"+
		"\x3\x2\x2\x2\x2AE6\x2AE8\x3\x2\x2\x2\x2AE7\x2AE5\x3\x2\x2\x2\x2AE8\x2AE9"+
		"\a\x4BB\x2\x2\x2AE9\x2B00\x3\x2\x2\x2\x2AEA\x2AEB\a\x295\x2\x2\x2AEB\x2AF4"+
		"\a\x4A8\x2\x2\x2AEC\x2AF1\a\x294\x2\x2\x2AED\x2AEE\a\x4BA\x2\x2\x2AEE"+
		"\x2AEF\x5\x262\x132\x2\x2AEF\x2AF0\a\x4BB\x2\x2\x2AF0\x2AF2\x3\x2\x2\x2"+
		"\x2AF1\x2AED\x3\x2\x2\x2\x2AF1\x2AF2\x3\x2\x2\x2\x2AF2\x2AF5\x3\x2\x2"+
		"\x2\x2AF3\x2AF5\a\x28E\x2\x2\x2AF4\x2AEC\x3\x2\x2\x2\x2AF4\x2AF3\x3\x2"+
		"\x2\x2\x2AF5\x2B00\x3\x2\x2\x2\x2AF6\x2AF7\a\x335\x2\x2\x2AF7\x2AF8\a"+
		"\x4A8\x2\x2\x2AF8\x2B00\x5\x4A0\x251\x2\x2AF9\x2AFA\a\x22B\x2\x2\x2AFA"+
		"\x2AFB\a\x4A8\x2\x2\x2AFB\x2AFD\a\x4A2\x2\x2\x2AFC\x2AFE\a\x244\x2\x2"+
		"\x2AFD\x2AFC\x3\x2\x2\x2\x2AFD\x2AFE\x3\x2\x2\x2\x2AFE\x2B00\x3\x2\x2"+
		"\x2\x2AFF\x2AA9\x3\x2\x2\x2\x2AFF\x2AAC\x3\x2\x2\x2\x2AFF\x2AAF\x3\x2"+
		"\x2\x2\x2AFF\x2AB2\x3\x2\x2\x2\x2AFF\x2AB5\x3\x2\x2\x2\x2AFF\x2AB8\x3"+
		"\x2\x2\x2\x2AFF\x2ABB\x3\x2\x2\x2\x2AFF\x2ABE\x3\x2\x2\x2\x2AFF\x2AC1"+
		"\x3\x2\x2\x2\x2AFF\x2AC4\x3\x2\x2\x2\x2AFF\x2ACA\x3\x2\x2\x2\x2AFF\x2AD0"+
		"\x3\x2\x2\x2\x2AFF\x2AD7\x3\x2\x2\x2\x2AFF\x2AEA\x3\x2\x2\x2\x2AFF\x2AF6"+
		"\x3\x2\x2\x2\x2AFF\x2AF9\x3\x2\x2\x2\x2B00\x38D\x3\x2\x2\x2\x2B01\x2B02"+
		"\a\xF6\x2\x2\x2B02\x2B22\x5\x49E\x250\x2\x2B03\x2B0D\a\xD7\x2\x2\x2B04"+
		"\x2B0B\x5\x390\x1C9\x2\x2B05\x2B06\a\x172\x2\x2\x2B06\x2B09\a\x415\x2"+
		"\x2\x2B07\x2B08\a\x28D\x2\x2\x2B08\x2B0A\x5\x49C\x24F\x2\x2B09\x2B07\x3"+
		"\x2\x2\x2\x2B09\x2B0A\x3\x2\x2\x2\x2B0A\x2B0C\x3\x2\x2\x2\x2B0B\x2B05"+
		"\x3\x2\x2\x2\x2B0B\x2B0C\x3\x2\x2\x2\x2B0C\x2B0E\x3\x2\x2\x2\x2B0D\x2B04"+
		"\x3\x2\x2\x2\x2B0D\x2B0E\x3\x2\x2\x2\x2B0E\x2B23\x3\x2\x2\x2\x2B0F\x2B11"+
		"\t\x80\x2\x2\x2B10\x2B0F\x3\x2\x2\x2\x2B10\x2B11\x3\x2\x2\x2\x2B11\x2B13"+
		"\x3\x2\x2\x2\x2B12\x2B14\a\x362\x2\x2\x2B13\x2B12\x3\x2\x2\x2\x2B13\x2B14"+
		"\x3\x2\x2\x2\x2B14\x2B15\x3\x2\x2\x2\x2B15\x2B16\a\xD7\x2\x2\x2B16\x2B17"+
		"\a\x172\x2\x2\x2B17\x2B20\x5\x1E4\xF3\x2\x2B18\x2B1E\a\x172\x2\x2\x2B19"+
		"\x2B1A\a\x300\x2\x2\x2B1A\x2B1F\a\x296\x2\x2\x2B1B\x2B1F\a\x415\x2\x2"+
		"\x2B1C\x2B1D\a\x28D\x2\x2\x2B1D\x2B1F\x5\x49C\x24F\x2\x2B1E\x2B19\x3\x2"+
		"\x2\x2\x2B1E\x2B1B\x3\x2\x2\x2\x2B1E\x2B1C\x3\x2\x2\x2\x2B1F\x2B21\x3"+
		"\x2\x2\x2\x2B20\x2B18\x3\x2\x2\x2\x2B20\x2B21\x3\x2\x2\x2\x2B21\x2B23"+
		"\x3\x2\x2\x2\x2B22\x2B03\x3\x2\x2\x2\x2B22\x2B10\x3\x2\x2\x2\x2B23\x2B25"+
		"\x3\x2\x2\x2\x2B24\x2B26\a\x4BD\x2\x2\x2B25\x2B24\x3\x2\x2\x2\x2B25\x2B26"+
		"\x3\x2\x2\x2\x2B26\x38F\x3\x2\x2\x2\x2B27\x2B29\x5\x392\x1CA\x2\x2B28"+
		"\x2B27\x3\x2\x2\x2\x2B29\x2B2C\x3\x2\x2\x2\x2B2A\x2B28\x3\x2\x2\x2\x2B2A"+
		"\x2B2B\x3\x2\x2\x2\x2B2B\x2B2D\x3\x2\x2\x2\x2B2C\x2B2A\x3\x2\x2\x2\x2B2D"+
		"\x2B2E\a\x172\x2\x2\x2B2E\x2B2F\x5\x1E4\xF3\x2\x2B2F\x391\x3\x2\x2\x2"+
		"\x2B30\x2B36\tS\x2\x2\x2B31\x2B36\t\x81\x2\x2\x2B32\x2B36\t\x82\x2\x2"+
		"\x2B33\x2B36\t\x83\x2\x2\x2B34\x2B36\a\x407\x2\x2\x2B35\x2B30\x3\x2\x2"+
		"\x2\x2B35\x2B31\x3\x2\x2\x2\x2B35\x2B32\x3\x2\x2\x2\x2B35\x2B33\x3\x2"+
		"\x2\x2\x2B35\x2B34\x3\x2\x2\x2\x2B36\x393\x3\x2\x2\x2\x2B37\x2B41\a\x15B"+
		"\x2\x2\x2B38\x2B3F\a\x25E\x2\x2\x2B39\x2B3F\a\x2DC\x2\x2\x2B3A\x2B3F\a"+
		"\x16E\x2\x2\x2B3B\x2B3F\a\x1FA\x2\x2\x2B3C\x2B3D\t\x84\x2\x2\x2B3D\x2B3F"+
		"\x5\x39C\x1CF\x2\x2B3E\x2B38\x3\x2\x2\x2\x2B3E\x2B39\x3\x2\x2\x2\x2B3E"+
		"\x2B3A\x3\x2\x2\x2\x2B3E\x2B3B\x3\x2\x2\x2\x2B3E\x2B3C\x3\x2\x2\x2\x2B3E"+
		"\x2B3F\x3\x2\x2\x2\x2B3F\x2B40\x3\x2\x2\x2\x2B40\x2B42\a\x181\x2\x2\x2B41"+
		"\x2B3E\x3\x2\x2\x2\x2B41\x2B42\x3\x2\x2\x2\x2B42\x2B44\x3\x2\x2\x2\x2B43"+
		"\x2B45\a\x194\x2\x2\x2B44\x2B43\x3\x2\x2\x2\x2B44\x2B45\x3\x2\x2\x2\x2B45"+
		"\x2B46\x3\x2\x2\x2\x2B46\x2B50\x5\x49E\x250\x2\x2B47\x2B48\a\x1D6\x2\x2"+
		"\x2B48\x2B4D\a\x4A0\x2\x2\x2B49\x2B4A\a\x4BC\x2\x2\x2B4A\x2B4C\a\x4A0"+
		"\x2\x2\x2B4B\x2B49\x3\x2\x2\x2\x2B4C\x2B4F\x3\x2\x2\x2\x2B4D\x2B4B\x3"+
		"\x2\x2\x2\x2B4D\x2B4E\x3\x2\x2\x2\x2B4E\x2B51\x3\x2\x2\x2\x2B4F\x2B4D"+
		"\x3\x2\x2\x2\x2B50\x2B47\x3\x2\x2\x2\x2B50\x2B51\x3\x2\x2\x2\x2B51\x2B53"+
		"\x3\x2\x2\x2\x2B52\x2B54\a\x4BD\x2\x2\x2B53\x2B52\x3\x2\x2\x2\x2B53\x2B54"+
		"\x3\x2\x2\x2\x2B54\x395\x3\x2\x2\x2\x2B55\x2B56\a\x386\x2\x2\x2B56\x2B5A"+
		"\x5\x4C2\x262\x2\x2B57\x2B5B\x5\x4C2\x262\x2\x2B58\x2B5B\x5\x39A\x1CE"+
		"\x2\x2B59\x2B5B\x5\x4A0\x251\x2\x2B5A\x2B57\x3\x2\x2\x2\x2B5A\x2B58\x3"+
		"\x2\x2\x2\x2B5A\x2B59\x3\x2\x2\x2\x2B5B\x2B5D\x3\x2\x2\x2\x2B5C\x2B5E"+
		"\a\x4BD\x2\x2\x2B5D\x2B5C\x3\x2\x2\x2\x2B5D\x2B5E\x3\x2\x2\x2\x2B5E\x2B99"+
		"\x3\x2\x2\x2\x2B5F\x2B60\a\x386\x2\x2\x2B60\x2B61\a\x3B4\x2\x2\x2B61\x2B62"+
		"\t\x85\x2\x2\x2B62\x2B64\x5\x4A0\x251\x2\x2B63\x2B65\a\x4BD\x2\x2\x2B64"+
		"\x2B63\x3\x2\x2\x2\x2B64\x2B65\x3\x2\x2\x2\x2B65\x2B99\x3\x2\x2\x2\x2B66"+
		"\x2B67\a\x386\x2\x2\x2B67\x2B68\a\x347\x2\x2\x2B68\x2B6A\t\x2\x2\x2\x2B69"+
		"\x2B6B\a\x4BD\x2\x2\x2B6A\x2B69\x3\x2\x2\x2\x2B6A\x2B6B\x3\x2\x2\x2\x2B6B"+
		"\x2B99\x3\x2\x2\x2\x2B6C\x2B6D\a\x386\x2\x2\x2B6D\x2B6E\a\x3E3\x2\x2\x2B6E"+
		"\x2B70\a\x4A2\x2\x2\x2B6F\x2B71\a\x4BD\x2\x2\x2B70\x2B6F\x3\x2\x2\x2\x2B70"+
		"\x2B71\x3\x2\x2\x2\x2B71\x2B99\x3\x2\x2\x2\x2B72\x2B73\a\x386\x2\x2\x2B73"+
		"\x2B74\a\x3F3\x2\x2\x2B74\x2B75\a\x1DE\x2\x2\x2B75\x2B7F\a\x201\x2\x2"+
		"\x2B76\x2B77\a\x300\x2\x2\x2B77\x2B80\a\x40A\x2\x2\x2B78\x2B79\a\x300"+
		"\x2\x2\x2B79\x2B80\a\xA7\x2\x2\x2B7A\x2B7B\a\x320\x2\x2\x2B7B\x2B80\a"+
		"\x300\x2\x2\x2B7C\x2B80\a\x39C\x2\x2\x2B7D\x2B80\a\x379\x2\x2\x2B7E\x2B80"+
		"\a\x4A2\x2\x2\x2B7F\x2B76\x3\x2\x2\x2\x2B7F\x2B78\x3\x2\x2\x2\x2B7F\x2B7A"+
		"\x3\x2\x2\x2\x2B7F\x2B7C\x3\x2\x2\x2\x2B7F\x2B7D\x3\x2\x2\x2\x2B7F\x2B7E"+
		"\x3\x2\x2\x2\x2B80\x2B82\x3\x2\x2\x2\x2B81\x2B83\a\x4BD\x2\x2\x2B82\x2B81"+
		"\x3\x2\x2\x2\x2B82\x2B83\x3\x2\x2\x2\x2B83\x2B99\x3\x2\x2\x2\x2B84\x2B85"+
		"\a\x386\x2\x2\x2B85\x2B86\a\x1B1\x2\x2\x2B86\x2B87\x5\x488\x245\x2\x2B87"+
		"\x2B89\x5\x4A0\x251\x2\x2B88\x2B8A\a\x4BD\x2\x2\x2B89\x2B88\x3\x2\x2\x2"+
		"\x2B89\x2B8A\x3\x2\x2\x2\x2B8A\x2B99\x3\x2\x2\x2\x2B8B\x2B8C\a\x386\x2"+
		"\x2\x2B8C\x2B91\x5\x398\x1CD\x2\x2B8D\x2B8E\a\x4BC\x2\x2\x2B8E\x2B90\x5"+
		"\x398\x1CD\x2\x2B8F\x2B8D\x3\x2\x2\x2\x2B90\x2B93\x3\x2\x2\x2\x2B91\x2B8F"+
		"\x3\x2\x2\x2\x2B91\x2B92\x3\x2\x2\x2\x2B92\x2B94\x3\x2\x2\x2\x2B93\x2B91"+
		"\x3\x2\x2\x2\x2B94\x2B95\x5\x4A0\x251\x2\x2B95\x2B99\x3\x2\x2\x2\x2B96"+
		"\x2B97\a\x386\x2\x2\x2B97\x2B99\x5\x43A\x21E\x2\x2B98\x2B55\x3\x2\x2\x2"+
		"\x2B98\x2B5F\x3\x2\x2\x2\x2B98\x2B66\x3\x2\x2\x2\x2B98\x2B6C\x3\x2\x2"+
		"\x2\x2B98\x2B72\x3\x2\x2\x2\x2B98\x2B84\x3\x2\x2\x2\x2B98\x2B8B\x3\x2"+
		"\x2\x2\x2B98\x2B96\x3\x2\x2\x2\x2B99\x397\x3\x2\x2\x2\x2B9A\x2B9B\t\x86"+
		"\x2\x2\x2B9B\x399\x3\x2\x2\x2\x2B9C\x2B9F\x5\x4BC\x25F\x2\x2B9D\x2B9F"+
		"\a\x4A0\x2\x2\x2B9E\x2B9C\x3\x2\x2\x2\x2B9E\x2B9D\x3\x2\x2\x2\x2B9F\x39B"+
		"\x3\x2\x2\x2\x2BA0\x2BA1\b\x1CF\x1\x2\x2BA1\x2BAA\x5\x3A2\x1D2\x2\x2BA2"+
		"\x2BAA\x5\x416\x20C\x2\x2BA3\x2BAA\x5\x3A4\x1D3\x2\x2BA4\x2BAA\x5\x494"+
		"\x24B\x2\x2BA5\x2BAA\x5\x3A8\x1D5\x2\x2BA6\x2BAA\x5\x3A6\x1D4\x2\x2BA7"+
		"\x2BAA\x5\x46A\x236\x2\x2BA8\x2BAA\a\x495\x2\x2\x2BA9\x2BA0\x3\x2\x2\x2"+
		"\x2BA9\x2BA2\x3\x2\x2\x2\x2BA9\x2BA3\x3\x2\x2\x2\x2BA9\x2BA4\x3\x2\x2"+
		"\x2\x2BA9\x2BA5\x3\x2\x2\x2\x2BA9\x2BA6\x3\x2\x2\x2\x2BA9\x2BA7\x3\x2"+
		"\x2\x2\x2BA9\x2BA8\x3\x2\x2\x2\x2BAA\x2BC3\x3\x2\x2\x2\x2BAB\x2BAC\f\a"+
		"\x2\x2\x2BAC\x2BAD\t\x87\x2\x2\x2BAD\x2BC2\x5\x39C\x1CF\b\x2BAE\x2BAF"+
		"\f\x6\x2\x2\x2BAF\x2BB0\t\x88\x2\x2\x2BB0\x2BC2\x5\x39C\x1CF\a\x2BB1\x2BB2"+
		"\f\xE\x2\x2\x2BB2\x2BB7\a\x4B5\x2\x2\x2BB3\x2BB8\x5\x430\x219\x2\x2BB4"+
		"\x2BB8\x5\x434\x21B\x2\x2BB5\x2BB8\x5\x438\x21D\x2\x2BB6\x2BB8\x5\x43C"+
		"\x21F\x2\x2BB7\x2BB3\x3\x2\x2\x2\x2BB7\x2BB4\x3\x2\x2\x2\x2BB7\x2BB5\x3"+
		"\x2\x2\x2\x2BB7\x2BB6\x3\x2\x2\x2\x2BB8\x2BC2\x3\x2\x2\x2\x2BB9\x2BBA"+
		"\f\r\x2\x2\x2BBA\x2BBB\a\x4B5\x2\x2\x2BBB\x2BC2\x5\x43E\x220\x2\x2BBC"+
		"\x2BBD\f\f\x2\x2\x2BBD\x2BBE\a\x9B\x2\x2\x2BBE\x2BC2\x5\x4C2\x262\x2\x2BBF"+
		"\x2BC0\f\x5\x2\x2\x2BC0\x2BC2\x5\x3A0\x1D1\x2\x2BC1\x2BAB\x3\x2\x2\x2"+
		"\x2BC1\x2BAE\x3\x2\x2\x2\x2BC1\x2BB1\x3\x2\x2\x2\x2BC1\x2BB9\x3\x2\x2"+
		"\x2\x2BC1\x2BBC\x3\x2\x2\x2\x2BC1\x2BBF\x3\x2\x2\x2\x2BC2\x2BC5\x3\x2"+
		"\x2\x2\x2BC3\x2BC1\x3\x2\x2\x2\x2BC3\x2BC4\x3\x2\x2\x2\x2BC4\x39D\x3\x2"+
		"\x2\x2\x2BC5\x2BC3\x3\x2\x2\x2\x2BC6\x2BC7\a\x4C9\x2\x2\x2BC7\x39F\x3"+
		"\x2\x2\x2\x2BC8\x2BC9\a\x41\x2\x2\x2BC9\x2BCA\a\x3E7\x2\x2\x2BCA\x2BCB"+
		"\a\x44A\x2\x2\x2BCB\x2BCC\x5\x39C\x1CF\x2\x2BCC\x3A1\x3\x2\x2\x2\x2BCD"+
		"\x2BD2\a\xF9\x2\x2\x2BCE\x2BD2\a\x281\x2\x2\x2BCF\x2BD2\a\x4A0\x2\x2\x2BD0"+
		"\x2BD2\x5\x4BE\x260\x2\x2BD1\x2BCD\x3\x2\x2\x2\x2BD1\x2BCE\x3\x2\x2\x2"+
		"\x2BD1\x2BCF\x3\x2\x2\x2\x2BD1\x2BD0\x3\x2\x2\x2\x2BD2\x3A3\x3\x2\x2\x2"+
		"\x2BD3\x2BD4\av\x2\x2\x2BD4\x2BD6\x5\x39C\x1CF\x2\x2BD5\x2BD7\x5\x444"+
		"\x223\x2\x2BD6\x2BD5\x3\x2\x2\x2\x2BD7\x2BD8\x3\x2\x2\x2\x2BD8\x2BD6\x3"+
		"\x2\x2\x2\x2BD8\x2BD9\x3\x2\x2\x2\x2BD9\x2BDC\x3\x2\x2\x2\x2BDA\x2BDB"+
		"\a\x126\x2\x2\x2BDB\x2BDD\x5\x39C\x1CF\x2\x2BDC\x2BDA\x3\x2\x2\x2\x2BDC"+
		"\x2BDD\x3\x2\x2\x2\x2BDD\x2BDE\x3\x2\x2\x2\x2BDE\x2BDF\a\x130\x2\x2\x2BDF"+
		"\x2BED\x3\x2\x2\x2\x2BE0\x2BE2\av\x2\x2\x2BE1\x2BE3\x5\x446\x224\x2\x2BE2"+
		"\x2BE1\x3\x2\x2\x2\x2BE3\x2BE4\x3\x2\x2\x2\x2BE4\x2BE2\x3\x2\x2\x2\x2BE4"+
		"\x2BE5\x3\x2\x2\x2\x2BE5\x2BE8\x3\x2\x2\x2\x2BE6\x2BE7\a\x126\x2\x2\x2BE7"+
		"\x2BE9\x5\x39C\x1CF\x2\x2BE8\x2BE6\x3\x2\x2\x2\x2BE8\x2BE9\x3\x2\x2\x2"+
		"\x2BE9\x2BEA\x3\x2\x2\x2\x2BEA\x2BEB\a\x130\x2\x2\x2BEB\x2BED\x3\x2\x2"+
		"\x2\x2BEC\x2BD3\x3\x2\x2\x2\x2BEC\x2BE0\x3\x2\x2\x2\x2BED\x3A5\x3\x2\x2"+
		"\x2\x2BEE\x2BEF\a\x4C5\x2\x2\x2BEF\x2BF3\x5\x39C\x1CF\x2\x2BF0\x2BF1\t"+
		"\x89\x2\x2\x2BF1\x2BF3\x5\x39C\x1CF\x2\x2BF2\x2BEE\x3\x2\x2\x2\x2BF2\x2BF0"+
		"\x3\x2\x2\x2\x2BF3\x3A7\x3\x2\x2\x2\x2BF4\x2BF5\a\x4BA\x2\x2\x2BF5\x2BF6"+
		"\x5\x39C\x1CF\x2\x2BF6\x2BF7\a\x4BB\x2\x2\x2BF7\x2BFD\x3\x2\x2\x2\x2BF8"+
		"\x2BF9\a\x4BA\x2\x2\x2BF9\x2BFA\x5\x3AA\x1D6\x2\x2BFA\x2BFB\a\x4BB\x2"+
		"\x2\x2BFB\x2BFD\x3\x2\x2\x2\x2BFC\x2BF4\x3\x2\x2\x2\x2BFC\x2BF8\x3\x2"+
		"\x2\x2\x2BFD\x3A9\x3\x2\x2\x2\x2BFE\x2BFF\x5\x1E6\xF4\x2\x2BFF\x3AB\x3"+
		"\x2\x2\x2\x2C00\x2C01\a\x439\x2\x2\x2C01\x2C06\x5\x3AE\x1D8\x2\x2C02\x2C03"+
		"\a\x4BC\x2\x2\x2C03\x2C05\x5\x3AE\x1D8\x2\x2C04\x2C02\x3\x2\x2\x2\x2C05"+
		"\x2C08\x3\x2\x2\x2\x2C06\x2C04\x3\x2\x2\x2\x2C06\x2C07\x3\x2\x2\x2\x2C07"+
		"\x3AD\x3\x2\x2\x2\x2C08\x2C06\x3\x2\x2\x2\x2C09\x2C0E\x5\x4C2\x262\x2"+
		"\x2C0A\x2C0B\a\x4BA\x2\x2\x2C0B\x2C0C\x5\x49C\x24F\x2\x2C0C\x2C0D\a\x4BB"+
		"\x2\x2\x2C0D\x2C0F\x3\x2\x2\x2\x2C0E\x2C0A\x3\x2\x2\x2\x2C0E\x2C0F\x3"+
		"\x2\x2\x2\x2C0F\x2C10\x3\x2\x2\x2\x2C10\x2C11\a:\x2\x2\x2C11\x2C12\a\x4BA"+
		"\x2\x2\x2C12\x2C13\x5\x1E6\xF4\x2\x2C13\x2C14\a\x4BB\x2\x2\x2C14\x3AF"+
		"\x3\x2\x2\x2\x2C15\x2C16\a\x4A0\x2\x2\x2C16\x2C17\a\x4A8\x2\x2\x2C17\x2C1A"+
		"\x5\x494\x24B\x2\x2C18\x2C1B\a\x4A8\x2\x2\x2C19\x2C1B\x5\x4CA\x266\x2"+
		"\x2C1A\x2C18\x3\x2\x2\x2\x2C1A\x2C19\x3\x2\x2\x2\x2C1B\x2C1C\x3\x2\x2"+
		"\x2\x2C1C\x2C1D\x5\x39C\x1CF\x2\x2C1D\x2C2F\x3\x2\x2\x2\x2C1E\x2C21\x5"+
		"\x494\x24B\x2\x2C1F\x2C21\a\x4A0\x2\x2\x2C20\x2C1E\x3\x2\x2\x2\x2C20\x2C1F"+
		"\x3\x2\x2\x2\x2C21\x2C24\x3\x2\x2\x2\x2C22\x2C25\a\x4A8\x2\x2\x2C23\x2C25"+
		"\x5\x4CA\x266\x2\x2C24\x2C22\x3\x2\x2\x2\x2C24\x2C23\x3\x2\x2\x2\x2C25"+
		"\x2C26\x3\x2\x2\x2\x2C26\x2C2F\x5\x39C\x1CF\x2\x2C27\x2C28\x5\x4C2\x262"+
		"\x2\x2C28\x2C29\a\x4B5\x2\x2\x2C29\x2C2A\x5\x4C2\x262\x2\x2C2A\x2C2B\a"+
		"\x4BA\x2\x2\x2C2B\x2C2C\x5\x460\x231\x2\x2C2C\x2C2D\a\x4BB\x2\x2\x2C2D"+
		"\x2C2F\x3\x2\x2\x2\x2C2E\x2C15\x3\x2\x2\x2\x2C2E\x2C20\x3\x2\x2\x2\x2C2E"+
		"\x2C27\x3\x2\x2\x2\x2C2F\x3B1\x3\x2\x2\x2\x2C30\x2C33\x5\x494\x24B\x2"+
		"\x2C31\x2C33\a\x4A0\x2\x2\x2C32\x2C30\x3\x2\x2\x2\x2C32\x2C31\x3\x2\x2"+
		"\x2\x2C33\x2C36\x3\x2\x2\x2\x2C34\x2C37\a\x4A8\x2\x2\x2C35\x2C37\x5\x4CA"+
		"\x266\x2\x2C36\x2C34\x3\x2\x2\x2\x2C36\x2C35\x3\x2\x2\x2\x2C37\x2C38\x3"+
		"\x2\x2\x2\x2C38\x2C41\x5\x39C\x1CF\x2\x2C39\x2C3A\x5\x4C2\x262\x2\x2C3A"+
		"\x2C3B\a\x4B5\x2\x2\x2C3B\x2C3C\x5\x4C2\x262\x2\x2C3C\x2C3D\a\x4BA\x2"+
		"\x2\x2C3D\x2C3E\x5\x460\x231\x2\x2C3E\x2C3F\a\x4BB\x2\x2\x2C3F\x2C41\x3"+
		"\x2\x2\x2\x2C40\x2C32\x3\x2\x2\x2\x2C40\x2C39\x3\x2\x2\x2\x2C41\x3B3\x3"+
		"\x2\x2\x2\x2C42\x2C46\b\x1DB\x1\x2\x2C43\x2C45\a\x271\x2\x2\x2C44\x2C43"+
		"\x3\x2\x2\x2\x2C45\x2C48\x3\x2\x2\x2\x2C46\x2C44\x3\x2\x2\x2\x2C46\x2C47"+
		"\x3\x2\x2\x2\x2C47\x2C4E\x3\x2\x2\x2\x2C48\x2C46\x3\x2\x2\x2\x2C49\x2C4F"+
		"\x5\x3B6\x1DC\x2\x2C4A\x2C4B\a\x4BA\x2\x2\x2C4B\x2C4C\x5\x3B4\x1DB\x2"+
		"\x2C4C\x2C4D\a\x4BB\x2\x2\x2C4D\x2C4F\x3\x2\x2\x2\x2C4E\x2C49\x3\x2\x2"+
		"\x2\x2C4E\x2C4A\x3\x2\x2\x2\x2C4F\x2C58\x3\x2\x2\x2\x2C50\x2C51\f\x4\x2"+
		"\x2\x2C51\x2C52\a\'\x2\x2\x2C52\x2C57\x5\x3B4\x1DB\x5\x2C53\x2C54\f\x3"+
		"\x2\x2\x2C54\x2C55\a\x2A5\x2\x2\x2C55\x2C57\x5\x3B4\x1DB\x4\x2C56\x2C50"+
		"\x3\x2\x2\x2\x2C56\x2C53\x3\x2\x2\x2\x2C57\x2C5A\x3\x2\x2\x2\x2C58\x2C56"+
		"\x3\x2\x2\x2\x2C58\x2C59\x3\x2\x2\x2\x2C59\x3B5\x3\x2\x2\x2\x2C5A\x2C58"+
		"\x3\x2\x2\x2\x2C5B\x2C5C\a\x147\x2\x2\x2C5C\x2C5D\a\x4BA\x2\x2\x2C5D\x2C5E"+
		"\x5\x3AA\x1D6\x2\x2C5E\x2C5F\a\x4BB\x2\x2\x2C5F\x2C9D\x3\x2\x2\x2\x2C60"+
		"\x2C9D\x5\x41C\x20F\x2\x2C61\x2C62\x5\x39C\x1CF\x2\x2C62\x2C63\x5\x4C8"+
		"\x265\x2\x2C63\x2C64\x5\x39C\x1CF\x2\x2C64\x2C9D\x3\x2\x2\x2\x2C65\x2C66"+
		"\x5\x39C\x1CF\x2\x2C66\x2C67\a\x4AE\x2\x2\x2C67\x2C68\x5\x39C\x1CF\x2"+
		"\x2C68\x2C9D\x3\x2\x2\x2\x2C69\x2C6A\x5\x39C\x1CF\x2\x2C6A\x2C6B\x5\x4C8"+
		"\x265\x2\x2C6B\x2C6C\t\x8A\x2\x2\x2C6C\x2C6D\a\x4BA\x2\x2\x2C6D\x2C6E"+
		"\x5\x3AA\x1D6\x2\x2C6E\x2C6F\a\x4BB\x2\x2\x2C6F\x2C9D\x3\x2\x2\x2\x2C70"+
		"\x2C74\x5\x39C\x1CF\x2\x2C71\x2C73\a\x271\x2\x2\x2C72\x2C71\x3\x2\x2\x2"+
		"\x2C73\x2C76\x3\x2\x2\x2\x2C74\x2C72\x3\x2\x2\x2\x2C74\x2C75\x3\x2\x2"+
		"\x2\x2C75\x2C77\x3\x2\x2\x2\x2C76\x2C74\x3\x2\x2\x2\x2C77\x2C78\a^\x2"+
		"\x2\x2C78\x2C79\x5\x39C\x1CF\x2\x2C79\x2C7A\a\'\x2\x2\x2C7A\x2C7B\x5\x39C"+
		"\x1CF\x2\x2C7B\x2C9D\x3\x2\x2\x2\x2C7C\x2C80\x5\x39C\x1CF\x2\x2C7D\x2C7F"+
		"\a\x271\x2\x2\x2C7E\x2C7D\x3\x2\x2\x2\x2C7F\x2C82\x3\x2\x2\x2\x2C80\x2C7E"+
		"\x3\x2\x2\x2\x2C80\x2C81\x3\x2\x2\x2\x2C81\x2C83\x3\x2\x2\x2\x2C82\x2C80"+
		"\x3\x2\x2\x2\x2C83\x2C84\a\x1C1\x2\x2\x2C84\x2C87\a\x4BA\x2\x2\x2C85\x2C88"+
		"\x5\x3AA\x1D6\x2\x2C86\x2C88\x5\x460\x231\x2\x2C87\x2C85\x3\x2\x2\x2\x2C87"+
		"\x2C86\x3\x2\x2\x2\x2C88\x2C89\x3\x2\x2\x2\x2C89\x2C8A\a\x4BB\x2\x2\x2C8A"+
		"\x2C9D\x3\x2\x2\x2\x2C8B\x2C8F\x5\x39C\x1CF\x2\x2C8C\x2C8E\a\x271\x2\x2"+
		"\x2C8D\x2C8C\x3\x2\x2\x2\x2C8E\x2C91\x3\x2\x2\x2\x2C8F\x2C8D\x3\x2\x2"+
		"\x2\x2C8F\x2C90\x3\x2\x2\x2\x2C90\x2C92\x3\x2\x2\x2\x2C91\x2C8F\x3\x2"+
		"\x2\x2\x2C92\x2C93\a\x204\x2\x2\x2C93\x2C96\x5\x39C\x1CF\x2\x2C94\x2C95"+
		"\a\x13C\x2\x2\x2C95\x2C97\x5\x39C\x1CF\x2\x2C96\x2C94\x3\x2\x2\x2\x2C96"+
		"\x2C97\x3\x2\x2\x2\x2C97\x2C9D\x3\x2\x2\x2\x2C98\x2C99\x5\x39C\x1CF\x2"+
		"\x2C99\x2C9A\a\x1D9\x2\x2\x2C9A\x2C9B\x5\x4A4\x253\x2\x2C9B\x2C9D\x3\x2"+
		"\x2\x2\x2C9C\x2C5B\x3\x2\x2\x2\x2C9C\x2C60\x3\x2\x2\x2\x2C9C\x2C61\x3"+
		"\x2\x2\x2\x2C9C\x2C65\x3\x2\x2\x2\x2C9C\x2C69\x3\x2\x2\x2\x2C9C\x2C70"+
		"\x3\x2\x2\x2\x2C9C\x2C7C\x3\x2\x2\x2\x2C9C\x2C8B\x3\x2\x2\x2\x2C9C\x2C98"+
		"\x3\x2\x2\x2\x2C9D\x3B7\x3\x2\x2\x2\x2C9E\x2CA0\x5\x3BC\x1DF\x2\x2C9F"+
		"\x2CA1\x5\x3C6\x1E4\x2\x2CA0\x2C9F\x3\x2\x2\x2\x2CA0\x2CA1\x3\x2\x2\x2"+
		"\x2CA1\x2CA5\x3\x2\x2\x2\x2CA2\x2CA4\x5\x3BA\x1DE\x2\x2CA3\x2CA2\x3\x2"+
		"\x2\x2\x2CA4\x2CA7\x3\x2\x2\x2\x2CA5\x2CA3\x3\x2\x2\x2\x2CA5\x2CA6\x3"+
		"\x2\x2\x2\x2CA6\x2CB3\x3\x2\x2\x2\x2CA7\x2CA5\x3\x2\x2\x2\x2CA8\x2CA9"+
		"\a\x4BA\x2\x2\x2CA9\x2CAA\x5\x3B8\x1DD\x2\x2CAA\x2CB0\a\x4BB\x2\x2\x2CAB"+
		"\x2CAD\a\x40C\x2\x2\x2CAC\x2CAE\a\x18\x2\x2\x2CAD\x2CAC\x3\x2\x2\x2\x2CAD"+
		"\x2CAE\x3\x2\x2\x2\x2CAE\x2CAF\x3\x2\x2\x2\x2CAF\x2CB1\x5\x3B8\x1DD\x2"+
		"\x2CB0\x2CAB\x3\x2\x2\x2\x2CB0\x2CB1\x3\x2\x2\x2\x2CB1\x2CB3\x3\x2\x2"+
		"\x2\x2CB2\x2C9E\x3\x2\x2\x2\x2CB2\x2CA8\x3\x2\x2\x2\x2CB3\x3B9\x3\x2\x2"+
		"\x2\x2CB4\x2CB6\a\x40C\x2\x2\x2CB5\x2CB7\a\x18\x2\x2\x2CB6\x2CB5\x3\x2"+
		"\x2\x2\x2CB6\x2CB7\x3\x2\x2\x2\x2CB7\x2CBB\x3\x2\x2\x2\x2CB8\x2CBB\a\x141"+
		"\x2\x2\x2CB9\x2CBB\a\x1D4\x2\x2\x2CBA\x2CB4\x3\x2\x2\x2\x2CBA\x2CB8\x3"+
		"\x2\x2\x2\x2CBA\x2CB9\x3\x2\x2\x2\x2CBB\x2CC1\x3\x2\x2\x2\x2CBC\x2CC2"+
		"\x5\x3BC\x1DF\x2\x2CBD\x2CBE\a\x4BA\x2\x2\x2CBE\x2CBF\x5\x3B8\x1DD\x2"+
		"\x2CBF\x2CC0\a\x4BB\x2\x2\x2CC0\x2CC2\x3\x2\x2\x2\x2CC1\x2CBC\x3\x2\x2"+
		"\x2\x2CC1\x2CBD\x3\x2\x2\x2\x2CC2\x3BB\x3\x2\x2\x2\x2CC3\x2CC5\a\x36F"+
		"\x2\x2\x2CC4\x2CC6\t\x8B\x2\x2\x2CC5\x2CC4\x3\x2\x2\x2\x2CC5\x2CC6\x3"+
		"\x2\x2\x2\x2CC6\x2CC8\x3\x2\x2\x2\x2CC7\x2CC9\x5\x3BE\x1E0\x2\x2CC8\x2CC7"+
		"\x3\x2\x2\x2\x2CC8\x2CC9\x3\x2\x2\x2\x2CC9\x2CCA\x3\x2\x2\x2\x2CCA\x2CCD"+
		"\x5\x3D8\x1ED\x2\x2CCB\x2CCC\a\x1D6\x2\x2\x2CCC\x2CCE\x5\x488\x245\x2"+
		"\x2CCD\x2CCB\x3\x2\x2\x2\x2CCD\x2CCE\x3\x2\x2\x2\x2CCE\x2CD1\x3\x2\x2"+
		"\x2\x2CCF\x2CD0\a\x181\x2\x2\x2CD0\x2CD2\x5\x3E4\x1F3\x2\x2CD1\x2CCF\x3"+
		"\x2\x2\x2\x2CD1\x2CD2\x3\x2\x2\x2\x2CD2\x2CD5\x3\x2\x2\x2\x2CD3\x2CD4"+
		"\a\x436\x2\x2\x2CD4\x2CD6\x5\x3B4\x1DB\x2\x2CD5\x2CD3\x3\x2\x2\x2\x2CD5"+
		"\x2CD6\x3\x2\x2\x2\x2CD6\x2CF3\x3\x2\x2\x2\x2CD7\x2CD8\a\x19A\x2\x2\x2CD8"+
		"\x2CF1\ap\x2\x2\x2CD9\x2CDB\a\x18\x2\x2\x2CDA\x2CD9\x3\x2\x2\x2\x2CDA"+
		"\x2CDB\x3\x2\x2\x2\x2CDB\x2CDC\x3\x2\x2\x2\x2CDC\x2CE1\x5\x3D0\x1E9\x2"+
		"\x2CDD\x2CDE\a\x4BC\x2\x2\x2CDE\x2CE0\x5\x3D0\x1E9\x2\x2CDF\x2CDD\x3\x2"+
		"\x2\x2\x2CE0\x2CE3\x3\x2\x2\x2\x2CE1\x2CDF\x3\x2\x2\x2\x2CE1\x2CE2\x3"+
		"\x2\x2\x2\x2CE2\x2CF2\x3\x2\x2\x2\x2CE3\x2CE1\x3\x2\x2\x2\x2CE4\x2CE5"+
		"\a\x19B\x2\x2\x2CE5\x2CE6\a\x388\x2\x2\x2CE6\x2CE7\a\x4BA\x2\x2\x2CE7"+
		"\x2CEC\x5\x3CE\x1E8\x2\x2CE8\x2CE9\a\x4BC\x2\x2\x2CE9\x2CEB\x5\x3CE\x1E8"+
		"\x2\x2CEA\x2CE8\x3\x2\x2\x2\x2CEB\x2CEE\x3\x2\x2\x2\x2CEC\x2CEA\x3\x2"+
		"\x2\x2\x2CEC\x2CED\x3\x2\x2\x2\x2CED\x2CEF\x3\x2\x2\x2\x2CEE\x2CEC\x3"+
		"\x2\x2\x2\x2CEF\x2CF0\a\x4BB\x2\x2\x2CF0\x2CF2\x3\x2\x2\x2\x2CF1\x2CDA"+
		"\x3\x2\x2\x2\x2CF1\x2CE4\x3\x2\x2\x2\x2CF2\x2CF4\x3\x2\x2\x2\x2CF3\x2CD7"+
		"\x3\x2\x2\x2\x2CF3\x2CF4\x3\x2\x2\x2\x2CF4\x2CF7\x3\x2\x2\x2\x2CF5\x2CF6"+
		"\a\x1A3\x2\x2\x2CF6\x2CF8\x5\x3B4\x1DB\x2\x2CF7\x2CF5\x3\x2\x2\x2\x2CF7"+
		"\x2CF8\x3\x2\x2\x2\x2CF8\x3BD\x3\x2\x2\x2\x2CF9\x2CFC\a\x3EC\x2\x2\x2CFA"+
		"\x2CFD\x5\x3C0\x1E1\x2\x2CFB\x2CFD\x5\x3C2\x1E2\x2\x2CFC\x2CFA\x3\x2\x2"+
		"\x2\x2CFC\x2CFB\x3\x2\x2\x2\x2CFD\x2D00\x3\x2\x2\x2\x2CFE\x2CFF\a\x439"+
		"\x2\x2\x2CFF\x2D01\a\x3E6\x2\x2\x2D00\x2CFE\x3\x2\x2\x2\x2D00\x2D01\x3"+
		"\x2\x2\x2\x2D01\x3BF\x3\x2\x2\x2\x2D02\x2D03\t\x8C\x2\x2\x2D03\x2D0A\a"+
		"\x2C3\x2\x2\x2D04\x2D05\a\x4BA\x2\x2\x2D05\x2D06\x5\x39C\x1CF\x2\x2D06"+
		"\x2D07\a\x4BB\x2\x2\x2D07\x2D08\a\x2C3\x2\x2\x2D08\x2D0A\x3\x2\x2\x2\x2D09"+
		"\x2D02\x3\x2\x2\x2\x2D09\x2D04\x3\x2\x2\x2\x2D0A\x3C1\x3\x2\x2\x2\x2D0B"+
		"\x2D11\a\x4A2\x2\x2\x2D0C\x2D0D\a\x4BA\x2\x2\x2D0D\x2D0E\x5\x39C\x1CF"+
		"\x2\x2D0E\x2D0F\a\x4BB\x2\x2\x2D0F\x2D11\x3\x2\x2\x2\x2D10\x2D0B\x3\x2"+
		"\x2\x2\x2D10\x2D0C\x3\x2\x2\x2\x2D11\x3C3\x3\x2\x2\x2\x2D12\x2D13\a\x2A6"+
		"\x2\x2\x2D13\x2D14\ap\x2\x2\x2D14\x2D19\x5\x3CC\x1E7\x2\x2D15\x2D16\a"+
		"\x4BC\x2\x2\x2D16\x2D18\x5\x3CC\x1E7\x2\x2D17\x2D15\x3\x2\x2\x2\x2D18"+
		"\x2D1B\x3\x2\x2\x2\x2D19\x2D17\x3\x2\x2\x2\x2D19\x2D1A\x3\x2\x2\x2\x2D1A"+
		"\x3C5\x3\x2\x2\x2\x2D1B\x2D19\x3\x2\x2\x2\x2D1C\x2D28\x5\x3C4\x1E3\x2"+
		"\x2D1D\x2D1E\a\x290\x2\x2\x2D1E\x2D1F\x5\x39C\x1CF\x2\x2D1F\x2D26\t\x8D"+
		"\x2\x2\x2D20\x2D21\a\x15B\x2\x2\x2D21\x2D22\t\x8E\x2\x2\x2D22\x2D23\x5"+
		"\x39C\x1CF\x2\x2D23\x2D24\t\x8D\x2\x2\x2D24\x2D25\a\x296\x2\x2\x2D25\x2D27"+
		"\x3\x2\x2\x2\x2D26\x2D20\x3\x2\x2\x2\x2D26\x2D27\x3\x2\x2\x2\x2D27\x2D29"+
		"\x3\x2\x2\x2\x2D28\x2D1D\x3\x2\x2\x2\x2D28\x2D29\x3\x2\x2\x2\x2D29\x3C7"+
		"\x3\x2\x2\x2\x2D2A\x2D2B\a\x172\x2\x2\x2D2B\x2D84\ak\x2\x2\x2D2C\x2D2D"+
		"\a\x172\x2\x2\x2D2D\x2D35\a\x444\x2\x2\x2D2E\x2D32\a\x2FC\x2\x2\x2D2F"+
		"\x2D30\a\x4BA\x2\x2\x2D30\x2D31\a\x4A4\x2\x2\x2D31\x2D33\a\x4BB\x2\x2"+
		"\x2D32\x2D2F\x3\x2\x2\x2\x2D32\x2D33\x3\x2\x2\x2\x2D33\x2D36\x3\x2\x2"+
		"\x2\x2D34\x2D36\aG\x2\x2\x2D35\x2D2E\x3\x2\x2\x2\x2D35\x2D34\x3\x2\x2"+
		"\x2\x2D36\x2D3A\x3\x2\x2\x2\x2D37\x2D39\x5\x3CA\x1E6\x2\x2D38\x2D37\x3"+
		"\x2\x2\x2\x2D39\x2D3C\x3\x2\x2\x2\x2D3A\x2D38\x3\x2\x2\x2\x2D3A\x2D3B"+
		"\x3\x2\x2\x2\x2D3B\x2D47\x3\x2\x2\x2\x2D3C\x2D3A\x3\x2\x2\x2\x2D3D\x2D45"+
		"\a\x4BC\x2\x2\x2D3E\x2D46\a\x445\x2\x2\x2D3F\x2D43\a\x447\x2\x2\x2D40"+
		"\x2D41\a\x4BA\x2\x2\x2D41\x2D42\a\x4A4\x2\x2\x2D42\x2D44\a\x4BB\x2\x2"+
		"\x2D43\x2D40\x3\x2\x2\x2\x2D43\x2D44\x3\x2\x2\x2\x2D44\x2D46\x3\x2\x2"+
		"\x2\x2D45\x2D3E\x3\x2\x2\x2\x2D45\x2D3F\x3\x2\x2\x2\x2D46\x2D48\x3\x2"+
		"\x2\x2\x2D47\x2D3D\x3\x2\x2\x2\x2D47\x2D48\x3\x2\x2\x2\x2D48\x2D4E\x3"+
		"\x2\x2\x2\x2D49\x2D4A\a\x4BC\x2\x2\x2D4A\x2D4C\a\x125\x2\x2\x2D4B\x2D4D"+
		"\t\x8F\x2\x2\x2D4C\x2D4B\x3\x2\x2\x2\x2D4C\x2D4D\x3\x2\x2\x2\x2D4D\x2D4F"+
		"\x3\x2\x2\x2\x2D4E\x2D49\x3\x2\x2\x2\x2D4E\x2D4F\x3\x2\x2\x2\x2D4F\x2D84"+
		"\x3\x2\x2\x2\x2D50\x2D51\a\x172\x2\x2\x2D51\x2D52\a\x444\x2\x2\x2D52\x2D56"+
		"\a\x14D\x2\x2\x2D53\x2D55\x5\x3CA\x1E6\x2\x2D54\x2D53\x3\x2\x2\x2\x2D55"+
		"\x2D58\x3\x2\x2\x2\x2D56\x2D54\x3\x2\x2\x2\x2D56\x2D57\x3\x2\x2\x2\x2D57"+
		"\x2D5B\x3\x2\x2\x2\x2D58\x2D56\x3\x2\x2\x2\x2D59\x2D5A\a\x4BC\x2\x2\x2D5A"+
		"\x2D5C\a\x445\x2\x2\x2D5B\x2D59\x3\x2\x2\x2\x2D5B\x2D5C\x3\x2\x2\x2\x2D5C"+
		"\x2D84\x3\x2\x2\x2\x2D5D\x2D5E\a\x172\x2\x2\x2D5E\x2D5F\a\x444\x2\x2\x2D5F"+
		"\x2D63\a\x2BF\x2\x2\x2D60\x2D61\a\x4BA\x2\x2\x2D61\x2D62\a\x4A4\x2\x2"+
		"\x2D62\x2D64\a\x4BB\x2\x2\x2D63\x2D60\x3\x2\x2\x2\x2D63\x2D64\x3\x2\x2"+
		"\x2\x2D64\x2D68\x3\x2\x2\x2\x2D65\x2D67\x5\x3CA\x1E6\x2\x2D66\x2D65\x3"+
		"\x2\x2\x2\x2D67\x2D6A\x3\x2\x2\x2\x2D68\x2D66\x3\x2\x2\x2\x2D68\x2D69"+
		"\x3\x2\x2\x2\x2D69\x2D70\x3\x2\x2\x2\x2D6A\x2D68\x3\x2\x2\x2\x2D6B\x2D6C"+
		"\a\x4BC\x2\x2\x2D6C\x2D6E\a\x125\x2\x2\x2D6D\x2D6F\t\x8F\x2\x2\x2D6E\x2D6D"+
		"\x3\x2\x2\x2\x2D6E\x2D6F\x3\x2\x2\x2\x2D6F\x2D71\x3\x2\x2\x2\x2D70\x2D6B"+
		"\x3\x2\x2\x2\x2D70\x2D71\x3\x2\x2\x2\x2D71\x2D84\x3\x2\x2\x2\x2D72\x2D73"+
		"\a\x172\x2\x2\x2D73\x2D74\a\x1E4\x2\x2\x2D74\x2D80\t\x90\x2\x2\x2D75\x2D7C"+
		"\a\x4BC\x2\x2\x2D76\x2D77\a\x343\x2\x2\x2D77\x2D78\a\x4BA\x2\x2\x2D78"+
		"\x2D79\a\x4A4\x2\x2\x2D79\x2D7D\a\x4BB\x2\x2\x2D7A\x2D7D\a\x1C3\x2\x2"+
		"\x2D7B\x2D7D\a\x43C\x2\x2\x2D7C\x2D76\x3\x2\x2\x2\x2D7C\x2D7A\x3\x2\x2"+
		"\x2\x2D7C\x2D7B\x3\x2\x2\x2\x2D7D\x2D7F\x3\x2\x2\x2\x2D7E\x2D75\x3\x2"+
		"\x2\x2\x2D7F\x2D82\x3\x2\x2\x2\x2D80\x2D7E\x3\x2\x2\x2\x2D80\x2D81\x3"+
		"\x2\x2\x2\x2D81\x2D84\x3\x2\x2\x2\x2D82\x2D80\x3\x2\x2\x2\x2D83\x2D2A"+
		"\x3\x2\x2\x2\x2D83\x2D2C\x3\x2\x2\x2\x2D83\x2D50\x3\x2\x2\x2\x2D83\x2D5D"+
		"\x3\x2\x2\x2\x2D83\x2D72\x3\x2\x2\x2\x2D84\x3C9\x3\x2\x2\x2\x2D85\x2D8F"+
		"\a\x4BC\x2\x2\x2D86\x2D87\a\x61\x2\x2\x2D87\x2D90\aZ\x2\x2\x2D88\x2D90"+
		"\a\x403\x2\x2\x2D89\x2D8D\a\x343\x2\x2\x2D8A\x2D8B\a\x4BA\x2\x2\x2D8B"+
		"\x2D8C\a\x4A4\x2\x2\x2D8C\x2D8E\a\x4BB\x2\x2\x2D8D\x2D8A\x3\x2\x2\x2\x2D8D"+
		"\x2D8E\x3\x2\x2\x2\x2D8E\x2D90\x3\x2\x2\x2\x2D8F\x2D86\x3\x2\x2\x2\x2D8F"+
		"\x2D88\x3\x2\x2\x2\x2D8F\x2D89\x3\x2\x2\x2\x2D90\x3CB\x3\x2\x2\x2\x2D91"+
		"\x2D94\x5\x39C\x1CF\x2\x2D92\x2D95\a;\x2\x2\x2D93\x2D95\a\x108\x2\x2\x2D94"+
		"\x2D92\x3\x2\x2\x2\x2D94\x2D93\x3\x2\x2\x2\x2D94\x2D95\x3\x2\x2\x2\x2D95"+
		"\x3CD\x3\x2\x2\x2\x2D96\x2D98\a\x4BA\x2\x2\x2D97\x2D96\x3\x2\x2\x2\x2D97"+
		"\x2D98\x3\x2\x2\x2\x2D98\x2D99\x3\x2\x2\x2\x2D99\x2D9E\x5\x3D0\x1E9\x2"+
		"\x2D9A\x2D9B\a\x4BC\x2\x2\x2D9B\x2D9D\x5\x3D0\x1E9\x2\x2D9C\x2D9A\x3\x2"+
		"\x2\x2\x2D9D\x2DA0\x3\x2\x2\x2\x2D9E\x2D9C\x3\x2\x2\x2\x2D9E\x2D9F\x3"+
		"\x2\x2\x2\x2D9F\x2DA2\x3\x2\x2\x2\x2DA0\x2D9E\x3\x2\x2\x2\x2DA1\x2DA3"+
		"\a\x4BB\x2\x2\x2DA2\x2DA1\x3\x2\x2\x2\x2DA2\x2DA3\x3\x2\x2\x2\x2DA3\x2DA7"+
		"\x3\x2\x2\x2\x2DA4\x2DA5\a\x4BA\x2\x2\x2DA5\x2DA7\a\x4BB\x2\x2\x2DA6\x2D97"+
		"\x3\x2\x2\x2\x2DA6\x2DA4\x3\x2\x2\x2\x2DA7\x3CF\x3\x2\x2\x2\x2DA8\x2DA9"+
		"\x5\x39C\x1CF\x2\x2DA9\x3D1\x3\x2\x2\x2\x2DAA\x2DAB\a\x2A4\x2\x2\x2DAB"+
		"\x2DAC\a\x4BA\x2\x2\x2DAC\x2DB1\x5\x3D4\x1EB\x2\x2DAD\x2DAE\a\x4BC\x2"+
		"\x2\x2DAE\x2DB0\x5\x3D4\x1EB\x2\x2DAF\x2DAD\x3\x2\x2\x2\x2DB0\x2DB3\x3"+
		"\x2\x2\x2\x2DB1\x2DAF\x3\x2\x2\x2\x2DB1\x2DB2\x3\x2\x2\x2\x2DB2\x2DB4"+
		"\x3\x2\x2\x2\x2DB3\x2DB1\x3\x2\x2\x2\x2DB4\x2DB5\a\x4BB\x2\x2\x2DB5\x3D3"+
		"\x3\x2\x2\x2\x2DB6\x2DB7\a\x159\x2\x2\x2DB7\x2DE6\a\x4A2\x2\x2\x2DB8\x2DB9"+
		"\t\x91\x2\x2\x2DB9\x2DE6\a\x19A\x2\x2\x2DBA\x2DBB\t\x92\x2\x2\x2DBB\x2DE6"+
		"\a\x40C\x2\x2\x2DBC\x2DBD\t\x93\x2\x2\x2DBD\x2DE6\a\x1E3\x2\x2\x2DBE\x2DBF"+
		"\a\x14A\x2\x2\x2DBF\x2DE6\a\x42D\x2\x2\x2DC0\x2DC1\a\x173\x2\x2\x2DC1"+
		"\x2DE6\a\x2A6\x2\x2\x2DC2\x2DE6\a\x1B9\x2\x2\x2DC3\x2DC4\a\x1EC\x2\x2"+
		"\x2DC4\x2DE6\a\x2D0\x2\x2\x2DC5\x2DC6\a\x1EE\x2\x2\x2DC6\x2DE6\a\x2D0"+
		"\x2\x2\x2DC7\x2DC8\a\x223\x2\x2\x2DC8\x2DE6\a\x4A2\x2\x2\x2DC9\x2DCA\a"+
		"\x224\x2\x2\x2DCA\x2DE6\a\x4A2\x2\x2\x2DCB\x2DCC\a\x2A2\x2\x2\x2DCC\x2DCD"+
		"\a\x172\x2\x2\x2DCD\x2DCE\a\x4BA\x2\x2\x2DCE\x2DD3\x5\x3D6\x1EC\x2\x2DCF"+
		"\x2DD0\a\x4BC\x2\x2\x2DD0\x2DD2\x5\x3D6\x1EC\x2\x2DD1\x2DCF\x3\x2\x2\x2"+
		"\x2DD2\x2DD5\x3\x2\x2\x2\x2DD3\x2DD1\x3\x2\x2\x2\x2DD3\x2DD4\x3\x2\x2"+
		"\x2\x2DD4\x2DD6\x3\x2\x2\x2\x2DD5\x2DD3\x3\x2\x2\x2\x2DD6\x2DD7\a\x4BB"+
		"\x2\x2\x2DD7\x2DE6\x3\x2\x2\x2\x2DD8\x2DD9\a\x2A2\x2\x2\x2DD9\x2DDA\a"+
		"\x172\x2\x2\x2DDA\x2DE6\a\x40E\x2\x2\x2DDB\x2DDC\a\x2B5\x2\x2\x2DDC\x2DE6"+
		"\tZ\x2\x2\x2DDD\x2DDE\a\x4CA\x2\x2\x2DDE\x2DE6\a\x4A2\x2\x2\x2DDF\x2DE6"+
		"\a\x30F\x2\x2\x2DE0\x2DE1\a\x340\x2\x2\x2DE1\x2DE6\a\x2D0\x2\x2\x2DE2"+
		"\x2DE3\a\x41A\x2\x2\x2DE3\x2DE4\a\x2D0\x2\x2\x2DE4\x2DE6\a\x4A4\x2\x2"+
		"\x2DE5\x2DB6\x3\x2\x2\x2\x2DE5\x2DB8\x3\x2\x2\x2\x2DE5\x2DBA\x3\x2\x2"+
		"\x2\x2DE5\x2DBC\x3\x2\x2\x2\x2DE5\x2DBE\x3\x2\x2\x2\x2DE5\x2DC0\x3\x2"+
		"\x2\x2\x2DE5\x2DC2\x3\x2\x2\x2\x2DE5\x2DC3\x3\x2\x2\x2\x2DE5\x2DC5\x3"+
		"\x2\x2\x2\x2DE5\x2DC7\x3\x2\x2\x2\x2DE5\x2DC9\x3\x2\x2\x2\x2DE5\x2DCB"+
		"\x3\x2\x2\x2\x2DE5\x2DD8\x3\x2\x2\x2\x2DE5\x2DDB\x3\x2\x2\x2\x2DE5\x2DDD"+
		"\x3\x2\x2\x2\x2DE5\x2DDF\x3\x2\x2\x2\x2DE5\x2DE0\x3\x2\x2\x2\x2DE5\x2DE2"+
		"\x3\x2\x2\x2\x2DE6\x3D5\x3\x2\x2\x2\x2DE7\x2DEE\a\x4A0\x2\x2\x2DE8\x2DEF"+
		"\a\x40E\x2\x2\x2DE9\x2DEC\a\x4A8\x2\x2\x2DEA\x2DED\x5\x4BC\x25F\x2\x2DEB"+
		"\x2DED\a\x281\x2\x2\x2DEC\x2DEA\x3\x2\x2\x2\x2DEC\x2DEB\x3\x2\x2\x2\x2DED"+
		"\x2DEF\x3\x2\x2\x2\x2DEE\x2DE8\x3\x2\x2\x2\x2DEE\x2DE9\x3\x2\x2\x2\x2DEF"+
		"\x3D7\x3\x2\x2\x2\x2DF0\x2DF5\x5\x3E2\x1F2\x2\x2DF1\x2DF2\a\x4BC\x2\x2"+
		"\x2DF2\x2DF4\x5\x3E2\x1F2\x2\x2DF3\x2DF1\x3\x2\x2\x2\x2DF4\x2DF7\x3\x2"+
		"\x2\x2\x2DF5\x2DF3\x3\x2\x2\x2\x2DF5\x2DF6\x3\x2\x2\x2\x2DF6\x3D9\x3\x2"+
		"\x2\x2\x2DF7\x2DF5\x3\x2\x2\x2\x2DF8\x2DF9\a\x4BA\x2\x2\x2DF9\x2DFE\x5"+
		"\x302\x182\x2\x2DFA\x2DFB\a\x4BC\x2\x2\x2DFB\x2DFD\x5\x302\x182\x2\x2DFC"+
		"\x2DFA\x3\x2\x2\x2\x2DFD\x2E00\x3\x2\x2\x2\x2DFE\x2DFC\x3\x2\x2\x2\x2DFE"+
		"\x2DFF\x3\x2\x2\x2\x2DFF\x2E01\x3\x2\x2\x2\x2E00\x2DFE\x3\x2\x2\x2\x2E01"+
		"\x2E02\a\x4BB\x2\x2\x2E02\x3DB\x3\x2\x2\x2\x2E03\x2E04\x5\x488\x245\x2"+
		"\x2E04\x2E05\a\x4B5\x2\x2\x2E05\x2E07\x3\x2\x2\x2\x2E06\x2E03\x3\x2\x2"+
		"\x2\x2E06\x2E07\x3\x2\x2\x2\x2E07\x2E08\x3\x2\x2\x2\x2E08\x2E0D\a\x4C0"+
		"\x2\x2\x2E09\x2E0A\t\x94\x2\x2\x2E0A\x2E0B\a\x4B5\x2\x2\x2E0B\x2E0D\a"+
		"\x4C0\x2\x2\x2E0C\x2E06\x3\x2\x2\x2\x2E0C\x2E09\x3\x2\x2\x2\x2E0D\x3DD"+
		"\x3\x2\x2\x2\x2E0E\x2E0F\x5\x4C2\x262\x2\x2E0F\x2E10\a\x4B5\x2\x2\x2E10"+
		"\x2E11\x5\x4C2\x262\x2\x2E11\x2E13\x5\x3DA\x1EE\x2\x2E12\x2E14\x5\x448"+
		"\x225\x2\x2E13\x2E12\x3\x2\x2\x2\x2E13\x2E14\x3\x2\x2\x2\x2E14\x2E1F\x3"+
		"\x2\x2\x2\x2E15\x2E16\x5\x4C2\x262\x2\x2E16\x2E17\a\x4BF\x2\x2\x2E17\x2E19"+
		"\x5\x4C2\x262\x2\x2E18\x2E1A\x5\x3DA\x1EE\x2\x2E19\x2E18\x3\x2\x2\x2\x2E19"+
		"\x2E1A\x3\x2\x2\x2\x2E1A\x2E1C\x3\x2\x2\x2\x2E1B\x2E1D\x5\x448\x225\x2"+
		"\x2E1C\x2E1B\x3\x2\x2\x2\x2E1C\x2E1D\x3\x2\x2\x2\x2E1D\x2E1F\x3\x2\x2"+
		"\x2\x2E1E\x2E0E\x3\x2\x2\x2\x2E1E\x2E15\x3\x2\x2\x2\x2E1F\x3DF\x3\x2\x2"+
		"\x2\x2E20\x2E21\x5\x45C\x22F\x2\x2E21\x2E22\a\x4A8\x2\x2\x2E22\x2E23\x5"+
		"\x39C\x1CF\x2\x2E23\x2E29\x3\x2\x2\x2\x2E24\x2E26\x5\x39C\x1CF\x2\x2E25"+
		"\x2E27\x5\x448\x225\x2\x2E26\x2E25\x3\x2\x2\x2\x2E26\x2E27\x3\x2\x2\x2"+
		"\x2E27\x2E29\x3\x2\x2\x2\x2E28\x2E20\x3\x2\x2\x2\x2E28\x2E24\x3\x2\x2"+
		"\x2\x2E29\x3E1\x3\x2\x2\x2\x2E2A\x2E34\x5\x3DC\x1EF\x2\x2E2B\x2E34\x5"+
		"\x3DE\x1F0\x2\x2E2C\x2E2F\a\x4A0\x2\x2\x2E2D\x2E30\x5\x4CA\x266\x2\x2E2E"+
		"\x2E30\a\x4A8\x2\x2\x2E2F\x2E2D\x3\x2\x2\x2\x2E2F\x2E2E\x3\x2\x2\x2\x2E30"+
		"\x2E31\x3\x2\x2\x2\x2E31\x2E34\x5\x39C\x1CF\x2\x2E32\x2E34\x5\x3E0\x1F1"+
		"\x2\x2E33\x2E2A\x3\x2\x2\x2\x2E33\x2E2B\x3\x2\x2\x2\x2E33\x2E2C\x3\x2"+
		"\x2\x2\x2E33\x2E32\x3\x2\x2\x2\x2E34\x3E3\x3\x2\x2\x2\x2E35\x2E3F\x5\x3E6"+
		"\x1F4\x2\x2E36\x2E3B\x5\x3E8\x1F5\x2\x2E37\x2E38\a\x4BC\x2\x2\x2E38\x2E3A"+
		"\x5\x3E8\x1F5\x2\x2E39\x2E37\x3\x2\x2\x2\x2E3A\x2E3D\x3\x2\x2\x2\x2E3B"+
		"\x2E39\x3\x2\x2\x2\x2E3B\x2E3C\x3\x2\x2\x2\x2E3C\x2E3F\x3\x2\x2\x2\x2E3D"+
		"\x2E3B\x3\x2\x2\x2\x2E3E\x2E35\x3\x2\x2\x2\x2E3E\x2E36\x3\x2\x2\x2\x2E3F"+
		"\x3E5\x3\x2\x2\x2\x2E40\x2E43\x5\x3E8\x1F5\x2\x2E41\x2E42\a\x4BC\x2\x2"+
		"\x2E42\x2E44\x5\x3E8\x1F5\x2\x2E43\x2E41\x3\x2\x2\x2\x2E44\x2E45\x3\x2"+
		"\x2\x2\x2E45\x2E43\x3\x2\x2\x2\x2E45\x2E46\x3\x2\x2\x2\x2E46\x3E7\x3\x2"+
		"\x2\x2\x2E47\x2E4B\x5\x3EA\x1F6\x2\x2E48\x2E4A\x5\x3FE\x200\x2\x2E49\x2E48"+
		"\x3\x2\x2\x2\x2E4A\x2E4D\x3\x2\x2\x2\x2E4B\x2E49\x3\x2\x2\x2\x2E4B\x2E4C"+
		"\x3\x2\x2\x2\x2E4C\x3E9\x3\x2\x2\x2\x2E4D\x2E4B\x3\x2\x2\x2\x2E4E\x2E4F"+
		"\x5\x486\x244\x2\x2E4F\x2E50\x5\x450\x229\x2\x2E50\x2E51\x5\x44A\x226"+
		"\x2\x2E51\x2E93\x3\x2\x2\x2\x2E52\x2E54\x5\x486\x244\x2\x2E53\x2E55\x5"+
		"\x44A\x226\x2\x2E54\x2E53\x3\x2\x2\x2\x2E54\x2E55\x3\x2\x2\x2\x2E55\x2E59"+
		"\x3\x2\x2\x2\x2E56\x2E5A\x5\x44E\x228\x2\x2E57\x2E5A\x5\x450\x229\x2\x2E58"+
		"\x2E5A\x5\x452\x22A\x2\x2E59\x2E56\x3\x2\x2\x2\x2E59\x2E57\x3\x2\x2\x2"+
		"\x2E59\x2E58\x3\x2\x2\x2\x2E59\x2E5A\x3\x2\x2\x2\x2E5A\x2E93\x3\x2\x2"+
		"\x2\x2E5B\x2E5D\x5\x410\x209\x2\x2E5C\x2E5E\x5\x44A\x226\x2\x2E5D\x2E5C"+
		"\x3\x2\x2\x2\x2E5D\x2E5E\x3\x2\x2\x2\x2E5E\x2E93\x3\x2\x2\x2\x2E5F\x2E60"+
		"\a\x4BA\x2\x2\x2E60\x2E61\x5\x414\x20B\x2\x2E61\x2E66\a\x4BB\x2\x2\x2E62"+
		"\x2E64\x5\x44A\x226\x2\x2E63\x2E65\x5\x45A\x22E\x2\x2E64\x2E63\x3\x2\x2"+
		"\x2\x2E64\x2E65\x3\x2\x2\x2\x2E65\x2E67\x3\x2\x2\x2\x2E66\x2E62\x3\x2"+
		"\x2\x2\x2E66\x2E67\x3\x2\x2\x2\x2E67\x2E93\x3\x2\x2\x2\x2E68\x2E6A\x5"+
		"\x3F8\x1FD\x2\x2E69\x2E6B\x5\x44A\x226\x2\x2E6A\x2E69\x3\x2\x2\x2\x2E6A"+
		"\x2E6B\x3\x2\x2\x2\x2E6B\x2E93\x3\x2\x2\x2\x2E6C\x2E71\x5\x442\x222\x2"+
		"\x2E6D\x2E6F\x5\x44A\x226\x2\x2E6E\x2E70\x5\x45A\x22E\x2\x2E6F\x2E6E\x3"+
		"\x2\x2\x2\x2E6F\x2E70\x3\x2\x2\x2\x2E70\x2E72\x3\x2\x2\x2\x2E71\x2E6D"+
		"\x3\x2\x2\x2\x2E71\x2E72\x3\x2\x2\x2\x2E72\x2E93\x3\x2\x2\x2\x2E73\x2E78"+
		"\x5\x416\x20C\x2\x2E74\x2E76\x5\x44A\x226\x2\x2E75\x2E77\x5\x45A\x22E"+
		"\x2\x2E76\x2E75\x3\x2\x2\x2\x2E76\x2E77\x3\x2\x2\x2\x2E77\x2E79\x3\x2"+
		"\x2\x2\x2E78\x2E74\x3\x2\x2\x2\x2E78\x2E79\x3\x2\x2\x2\x2E79\x2E93\x3"+
		"\x2\x2\x2\x2E7A\x2E7C\a\x4A0\x2\x2\x2E7B\x2E7D\x5\x44A\x226\x2\x2E7C\x2E7B"+
		"\x3\x2\x2\x2\x2E7C\x2E7D\x3\x2\x2\x2\x2E7D\x2E93\x3\x2\x2\x2\x2E7E\x2E7F"+
		"\a\x4A0\x2\x2\x2E7F\x2E80\a\x4B5\x2\x2\x2E80\x2E85\x5\x416\x20C\x2\x2E81"+
		"\x2E83\x5\x44A\x226\x2\x2E82\x2E84\x5\x45A\x22E\x2\x2E83\x2E82\x3\x2\x2"+
		"\x2\x2E83\x2E84\x3\x2\x2\x2\x2E84\x2E86\x3\x2\x2\x2\x2E85\x2E81\x3\x2"+
		"\x2\x2\x2E85\x2E86\x3\x2\x2\x2\x2E86\x2E93\x3\x2\x2\x2\x2E87\x2E93\x5"+
		"\x3EC\x1F7\x2\x2E88\x2E93\x5\x3EE\x1F8\x2\x2E89\x2E8A\a\x4BF\x2\x2\x2E8A"+
		"\x2E8C\x5\x416\x20C\x2\x2E8B\x2E8D\x5\x44A\x226\x2\x2E8C\x2E8B\x3\x2\x2"+
		"\x2\x2E8C\x2E8D\x3\x2\x2\x2\x2E8D\x2E93\x3\x2\x2\x2\x2E8E\x2E8F\a\x4BA"+
		"\x2\x2\x2E8F\x2E90\x5\x3E8\x1F5\x2\x2E90\x2E91\a\x4BB\x2\x2\x2E91\x2E93"+
		"\x3\x2\x2\x2\x2E92\x2E4E\x3\x2\x2\x2\x2E92\x2E52\x3\x2\x2\x2\x2E92\x2E5B"+
		"\x3\x2\x2\x2\x2E92\x2E5F\x3\x2\x2\x2\x2E92\x2E68\x3\x2\x2\x2\x2E92\x2E6C"+
		"\x3\x2\x2\x2\x2E92\x2E73\x3\x2\x2\x2\x2E92\x2E7A\x3\x2\x2\x2\x2E92\x2E7E"+
		"\x3\x2\x2\x2\x2E92\x2E87\x3\x2\x2\x2\x2E92\x2E88\x3\x2\x2\x2\x2E92\x2E89"+
		"\x3\x2\x2\x2\x2E92\x2E8E\x3\x2\x2\x2\x2E93\x3EB\x3\x2\x2\x2\x2E94\x2E95"+
		"\a\x29D\x2\x2\x2E95\x2E96\a\x4BA\x2\x2\x2E96\x2E97\x5\x39C\x1CF\x2\x2E97"+
		"\x2E98\a\x4BC\x2\x2\x2E98\x2E9B\x5\x39C\x1CF\x2\x2E99\x2E9A\a\x4BC\x2"+
		"\x2\x2E9A\x2E9C\x5\x39C\x1CF\x2\x2E9B\x2E99\x3\x2\x2\x2\x2E9B\x2E9C\x3"+
		"\x2\x2\x2\x2E9C\x2E9D\x3\x2\x2\x2\x2E9D\x2EA3\a\x4BB\x2\x2\x2E9E\x2E9F"+
		"\a\x439\x2\x2\x2E9F\x2EA0\a\x4BA\x2\x2\x2EA0\x2EA1\x5\x3F4\x1FB\x2\x2EA1"+
		"\x2EA2\a\x4BB\x2\x2\x2EA2\x2EA4\x3\x2\x2\x2\x2EA3\x2E9E\x3\x2\x2\x2\x2EA3"+
		"\x2EA4\x3\x2\x2\x2\x2EA4\x2EA6\x3\x2\x2\x2\x2EA5\x2EA7\x5\x44A\x226\x2"+
		"\x2EA6\x2EA5\x3\x2\x2\x2\x2EA6\x2EA7\x3\x2\x2\x2\x2EA7\x3ED\x3\x2\x2\x2"+
		"\x2EA8\x2EA9\a\x29A\x2\x2\x2EA9\x2EAA\a\x4BA\x2\x2\x2EAA\x2EAD\x5\x39C"+
		"\x1CF\x2\x2EAB\x2EAC\a\x4BC\x2\x2\x2EAC\x2EAE\x5\x39C\x1CF\x2\x2EAD\x2EAB"+
		"\x3\x2\x2\x2\x2EAD\x2EAE\x3\x2\x2\x2\x2EAE\x2EAF\x3\x2\x2\x2\x2EAF\x2EB5"+
		"\a\x4BB\x2\x2\x2EB0\x2EB1\a\x439\x2\x2\x2EB1\x2EB2\a\x4BA\x2\x2\x2EB2"+
		"\x2EB3\x5\x3F0\x1F9\x2\x2EB3\x2EB4\a\x4BB\x2\x2\x2EB4\x2EB6\x3\x2\x2\x2"+
		"\x2EB5\x2EB0\x3\x2\x2\x2\x2EB5\x2EB6\x3\x2\x2\x2\x2EB6\x2EB8\x3\x2\x2"+
		"\x2\x2EB7\x2EB9\x5\x44A\x226\x2\x2EB8\x2EB7\x3\x2\x2\x2\x2EB8\x2EB9\x3"+
		"\x2\x2\x2\x2EB9\x3EF\x3\x2\x2\x2\x2EBA\x2EBF\x5\x3F2\x1FA\x2\x2EBB\x2EBC"+
		"\a\x4BC\x2\x2\x2EBC\x2EBE\x5\x3F2\x1FA\x2\x2EBD\x2EBB\x3\x2\x2\x2\x2EBE"+
		"\x2EC1\x3\x2\x2\x2\x2EBF\x2EBD\x3\x2\x2\x2\x2EBF\x2EC0\x3\x2\x2\x2\x2EC0"+
		"\x3F1\x3\x2\x2\x2\x2EC1\x2EBF\x3\x2\x2\x2\x2EC2\x2EC5\x5\x3F6\x1FC\x2"+
		"\x2EC3\x2EC4\a:\x2\x2\x2EC4\x2EC6\a\x1E4\x2\x2\x2EC5\x2EC3\x3\x2\x2\x2"+
		"\x2EC5\x2EC6\x3\x2\x2\x2\x2EC6\x3F3\x3\x2\x2\x2\x2EC7\x2ECC\x5\x3F6\x1FC"+
		"\x2\x2EC8\x2EC9\a\x4BC\x2\x2\x2EC9\x2ECB\x5\x3F6\x1FC\x2\x2ECA\x2EC8\x3"+
		"\x2\x2\x2\x2ECB\x2ECE\x3\x2\x2\x2\x2ECC\x2ECA\x3\x2\x2\x2\x2ECC\x2ECD"+
		"\x3\x2\x2\x2\x2ECD\x3F5\x3\x2\x2\x2\x2ECE\x2ECC\x3\x2\x2\x2\x2ECF\x2ED0"+
		"\x5\x4C2\x262\x2\x2ED0\x2ED2\x5\x4BA\x25E\x2\x2ED1\x2ED3\a\x4A4\x2\x2"+
		"\x2ED2\x2ED1\x3\x2\x2\x2\x2ED2\x2ED3\x3\x2\x2\x2\x2ED3\x3F7\x3\x2\x2\x2"+
		"\x2ED4\x2ED7\x5\x3FA\x1FE\x2\x2ED5\x2ED7\x5\x3FC\x1FF\x2\x2ED6\x2ED4\x3"+
		"\x2\x2\x2\x2ED6\x2ED5\x3\x2\x2\x2\x2ED7\x3F9\x3\x2\x2\x2\x2ED8\x2ED9\a"+
		"\x81\x2\x2\x2ED9\x2EDA\a\x4BA\x2\x2\x2EDA\x2EDB\a\x80\x2\x2\x2EDB\x2EDC"+
		"\x5\x488\x245\x2\x2EDC\x2EDD\a\x4BC\x2\x2\x2EDD\x2EDE\t\x95\x2\x2\x2EDE"+
		"\x2EDF\a\x4BB\x2\x2\x2EDF\x3FB\x3\x2\x2\x2\x2EE0\x2EE1\a\x81\x2\x2\x2EE1"+
		"\x2EE2\a\x4BA\x2\x2\x2EE2\x2EE3\a\x42B\x2\x2\x2EE3\x2EE4\x5\x488\x245"+
		"\x2\x2EE4\x2EE5\a\x4BC\x2\x2\x2EE5\x2EE6\x5\x40E\x208\x2\x2EE6\x2EE7\a"+
		"\x4BC\x2\x2\x2EE7\x2EE8\x5\x3D8\x1ED\x2\x2EE8\x2EE9\a\x4BB\x2\x2\x2EE9"+
		"\x3FD\x3\x2\x2\x2\x2EEA\x2EF0\x5\x400\x201\x2\x2EEB\x2EF0\x5\x402\x202"+
		"\x2\x2EEC\x2EF0\x5\x404\x203\x2\x2EED\x2EF0\x5\x406\x204\x2\x2EEE\x2EF0"+
		"\x5\x408\x205\x2\x2EEF\x2EEA\x3\x2\x2\x2\x2EEF\x2EEB\x3\x2\x2\x2\x2EEF"+
		"\x2EEC\x3\x2\x2\x2\x2EEF\x2EED\x3\x2\x2\x2\x2EEF\x2EEE\x3\x2\x2\x2\x2EF0"+
		"\x3FF\x3\x2\x2\x2\x2EF1\x2EF3\a\x1CD\x2\x2\x2EF2\x2EF1\x3\x2\x2\x2\x2EF2"+
		"\x2EF3\x3\x2\x2\x2\x2EF3\x2EF9\x3\x2\x2\x2\x2EF4\x2EF6\t\x96\x2\x2\x2EF5"+
		"\x2EF7\a\x2AA\x2\x2\x2EF6\x2EF5\x3\x2\x2\x2\x2EF6\x2EF7\x3\x2\x2\x2\x2EF7"+
		"\x2EF9\x3\x2\x2\x2\x2EF8\x2EF2\x3\x2\x2\x2\x2EF8\x2EF4\x3\x2\x2\x2\x2EF9"+
		"\x2EFB\x3\x2\x2\x2\x2EFA\x2EFC\t\x97\x2\x2\x2EFB\x2EFA\x3\x2\x2\x2\x2EFB"+
		"\x2EFC\x3\x2\x2\x2\x2EFC\x2EFD\x3\x2\x2\x2\x2EFD\x2EFE\a\x1E3\x2\x2\x2EFE"+
		"\x2EFF\x5\x3E8\x1F5\x2\x2EFF\x2F00\a\x294\x2\x2\x2F00\x2F01\x5\x3B4\x1DB"+
		"\x2\x2F01\x401\x3\x2\x2\x2\x2F02\x2F03\a\xCD\x2\x2\x2F03\x2F04\a\x1E3"+
		"\x2\x2\x2F04\x2F05\x5\x3EA\x1F6\x2\x2F05\x403\x3\x2\x2\x2\x2F06\x2F07"+
		"\t\x98\x2\x2\x2F07\x2F08\a\x36\x2\x2\x2F08\x2F09\x5\x3EA\x1F6\x2\x2F09"+
		"\x405\x3\x2\x2\x2\x2F0A\x2F0B\a\x2CF\x2\x2\x2F0B\x2F0C\x5\x40A\x206\x2"+
		"\x2F0C\x2F0D\x5\x44A\x226\x2\x2F0D\x407\x3\x2\x2\x2\x2F0E\x2F0F\a\x412"+
		"\x2\x2\x2F0F\x2F10\x5\x40C\x207\x2\x2F10\x2F11\x5\x44A\x226\x2\x2F11\x409"+
		"\x3\x2\x2\x2\x2F12\x2F13\a\x4BA\x2\x2\x2F13\x2F14\x5\x464\x233\x2\x2F14"+
		"\x2F15\a\x172\x2\x2\x2F15\x2F16\x5\x494\x24B\x2\x2F16\x2F17\a\x1C1\x2"+
		"\x2\x2F17\x2F18\x5\x45A\x22E\x2\x2F18\x2F19\a\x4BB\x2\x2\x2F19\x40B\x3"+
		"\x2\x2\x2\x2F1A\x2F1B\a\x4BA\x2\x2\x2F1B\x2F1C\x5\x39C\x1CF\x2\x2F1C\x2F1D"+
		"\a\x172\x2\x2\x2F1D\x2F1E\x5\x494\x24B\x2\x2F1E\x2F1F\a\x1C1\x2\x2\x2F1F"+
		"\x2F20\a\x4BA\x2\x2\x2F20\x2F21\x5\x40E\x208\x2\x2F21\x2F22\a\x4BB\x2"+
		"\x2\x2F22\x2F23\a\x4BB\x2\x2\x2F23\x40D\x3\x2\x2\x2\x2F24\x2F29\x5\x494"+
		"\x24B\x2\x2F25\x2F26\a\x4BC\x2\x2\x2F26\x2F28\x5\x494\x24B\x2\x2F27\x2F25"+
		"\x3\x2\x2\x2\x2F28\x2F2B\x3\x2\x2\x2\x2F29\x2F27\x3\x2\x2\x2\x2F29\x2F2A"+
		"\x3\x2\x2\x2\x2F2A\x40F\x3\x2\x2\x2\x2F2B\x2F29\x3\x2\x2\x2\x2F2C\x2F2D"+
		"\a\x29C\x2\x2\x2F2D\x2F2E\a\x4BA\x2\x2\x2F2E\x2F2F\a\x4A4\x2\x2\x2F2F"+
		"\x2F30\a\x4BC\x2\x2\x2F30\x2F31\a\x4A4\x2\x2\x2F31\x2F32\a\x4BC\x2\x2"+
		"\x2F32\x2F33\a\x4A4\x2\x2\x2F33\x2F47\a\x4BB\x2\x2\x2F34\x2F35\a\x29C"+
		"\x2\x2\x2F35\x2F36\a\x4BA\x2\x2\x2F36\x2F37\an\x2\x2\x2F37\x2F38\a\x4A4"+
		"\x2\x2\x2F38\x2F42\a\x4BC\x2\x2\x2F39\x2F3E\x5\x412\x20A\x2\x2F3A\x2F3B"+
		"\a\x4BC\x2\x2\x2F3B\x2F3D\x5\x412\x20A\x2\x2F3C\x2F3A\x3\x2\x2\x2\x2F3D"+
		"\x2F40\x3\x2\x2\x2\x2F3E\x2F3C\x3\x2\x2\x2\x2F3E\x2F3F\x3\x2\x2\x2\x2F3F"+
		"\x2F43\x3\x2\x2\x2\x2F40\x2F3E\x3\x2\x2\x2\x2F41\x2F43\x5\x4C2\x262\x2"+
		"\x2F42\x2F39\x3\x2\x2\x2\x2F42\x2F41\x3\x2\x2\x2\x2F43\x2F44\x3\x2\x2"+
		"\x2\x2F44\x2F45\a\x4BB\x2\x2\x2F45\x2F47\x3\x2\x2\x2\x2F46\x2F2C\x3\x2"+
		"\x2\x2\x2F46\x2F34\x3\x2\x2\x2\x2F47\x411\x3\x2\x2\x2\x2F48\x2F49\x5\x4C2"+
		"\x262\x2\x2F49\x2F4A\a\x4A8\x2\x2\x2F4A\x2F4B\t!\x2\x2\x2F4B\x413\x3\x2"+
		"\x2\x2\x2F4C\x2F5F\x5\x3AA\x1D6\x2\x2F4D\x2F4E\a\x4BA\x2\x2\x2F4E\x2F54"+
		"\x5\x3AA\x1D6\x2\x2F4F\x2F50\a\x40C\x2\x2\x2F50\x2F51\a\x18\x2\x2\x2F51"+
		"\x2F53\x5\x3AA\x1D6\x2\x2F52\x2F4F\x3\x2\x2\x2\x2F53\x2F56\x3\x2\x2\x2"+
		"\x2F54\x2F52\x3\x2\x2\x2\x2F54\x2F55\x3\x2\x2\x2\x2F55\x2F57\x3\x2\x2"+
		"\x2\x2F56\x2F54\x3\x2\x2\x2\x2F57\x2F58\a\x4BB\x2\x2\x2F58\x2F5F\x3\x2"+
		"\x2\x2\x2F59\x2F5F\x5\x45E\x230\x2\x2F5A\x2F5B\a\x4BA\x2\x2\x2F5B\x2F5C"+
		"\x5\x45E\x230\x2\x2F5C\x2F5D\a\x4BB\x2\x2\x2F5D\x2F5F\x3\x2\x2\x2\x2F5E"+
		"\x2F4C\x3\x2\x2\x2\x2F5E\x2F4D\x3\x2\x2\x2\x2F5E\x2F59\x3\x2\x2\x2\x2F5E"+
		"\x2F5A\x3\x2\x2\x2\x2F5F\x415\x3\x2\x2\x2\x2F60\x2F6F\x5\x462\x232\x2"+
		"\x2F61\x2F6F\x5\x464\x233\x2\x2F62\x2F6F\x5\x466\x234\x2\x2F63\x2F6F\x5"+
		"\x422\x212\x2\x2F64\x2F65\x5\x4A6\x254\x2\x2F65\x2F67\a\x4BA\x2\x2\x2F66"+
		"\x2F68\x5\x460\x231\x2\x2F67\x2F66\x3\x2\x2\x2\x2F67\x2F68\x3\x2\x2\x2"+
		"\x2F68\x2F69\x3\x2\x2\x2\x2F69\x2F6A\a\x4BB\x2\x2\x2F6A\x2F6F\x3\x2\x2"+
		"\x2\x2F6B\x2F6F\x5\x41A\x20E\x2\x2F6C\x2F6F\x5\x418\x20D\x2\x2F6D\x2F6F"+
		"\x5\x440\x221\x2\x2F6E\x2F60\x3\x2\x2\x2\x2F6E\x2F61\x3\x2\x2\x2\x2F6E"+
		"\x2F62\x3\x2\x2\x2\x2F6E\x2F63\x3\x2\x2\x2\x2F6E\x2F64\x3\x2\x2\x2\x2F6E"+
		"\x2F6B\x3\x2\x2\x2\x2F6E\x2F6C\x3\x2\x2\x2\x2F6E\x2F6D\x3\x2\x2\x2\x2F6F"+
		"\x417\x3\x2\x2\x2\x2F70\x2F71\x5\x4C2\x262\x2\x2F71\x2F72\a\x4B5\x2\x2"+
		"\x2F72\x2F74\x3\x2\x2\x2\x2F73\x2F70\x3\x2\x2\x2\x2F73\x2F74\x3\x2\x2"+
		"\x2\x2F74\x2F75\x3\x2\x2\x2\x2F75\x2F76\a\x11A\x2\x2\x2F76\x2F77\a\x4B5"+
		"\x2\x2\x2F77\x2F78\x5\x4C2\x262\x2\x2F78\x2F79\a\x4BA\x2\x2\x2F79\x2F7A"+
		"\x5\x39C\x1CF\x2\x2F7A\x2F7B\a\x4BB\x2\x2\x2F7B\x419\x3\x2\x2\x2\x2F7C"+
		"\x2F7D\t\x99\x2\x2\x2F7D\x2F7E\a\x4BA\x2\x2\x2F7E\x2F7F\x5\x488\x245\x2"+
		"\x2F7F\x2F8D\a\x4BC\x2\x2\x2F80\x2F8E\x5\x494\x24B\x2\x2F81\x2F82\a\x4BA"+
		"\x2\x2\x2F82\x2F87\x5\x494\x24B\x2\x2F83\x2F84\a\x4BC\x2\x2\x2F84\x2F86"+
		"\x5\x494\x24B\x2\x2F85\x2F83\x3\x2\x2\x2\x2F86\x2F89\x3\x2\x2\x2\x2F87"+
		"\x2F85\x3\x2\x2\x2\x2F87\x2F88\x3\x2\x2\x2\x2F88\x2F8A\x3\x2\x2\x2\x2F89"+
		"\x2F87\x3\x2\x2\x2\x2F8A\x2F8B\a\x4BB\x2\x2\x2F8B\x2F8E\x3\x2\x2\x2\x2F8C"+
		"\x2F8E\a\x4C0\x2\x2\x2F8D\x2F80\x3\x2\x2\x2\x2F8D\x2F81\x3\x2\x2\x2\x2F8D"+
		"\x2F8C\x3\x2\x2\x2\x2F8E\x2F8F\x3\x2\x2\x2\x2F8F\x2F90\a\x4BC\x2\x2\x2F90"+
		"\x2F94\x5\x39C\x1CF\x2\x2F91\x2F92\a\x4BC\x2\x2\x2F92\x2F93\a\x1F9\x2"+
		"\x2\x2F93\x2F95\x5\x39C\x1CF\x2\x2F94\x2F91\x3\x2\x2\x2\x2F94\x2F95\x3"+
		"\x2\x2\x2\x2F95\x2F98\x3\x2\x2\x2\x2F96\x2F97\a\x4BC\x2\x2\x2F97\x2F99"+
		"\x5\x39C\x1CF\x2\x2F98\x2F96\x3\x2\x2\x2\x2F98\x2F99\x3\x2\x2\x2\x2F99"+
		"\x2F9A\x3\x2\x2\x2\x2F9A\x2F9B\a\x4BB\x2\x2\x2F9B\x2FC1\x3\x2\x2\x2\x2F9C"+
		"\x2F9D\t\x9A\x2\x2\x2F9D\x2F9E\a\x4BA\x2\x2\x2F9E\x2F9F\x5\x488\x245\x2"+
		"\x2F9F\x2FAD\a\x4BC\x2\x2\x2FA0\x2FAE\x5\x494\x24B\x2\x2FA1\x2FA2\a\x4BA"+
		"\x2\x2\x2FA2\x2FA7\x5\x494\x24B\x2\x2FA3\x2FA4\a\x4BC\x2\x2\x2FA4\x2FA6"+
		"\x5\x494\x24B\x2\x2FA5\x2FA3\x3\x2\x2\x2\x2FA6\x2FA9\x3\x2\x2\x2\x2FA7"+
		"\x2FA5\x3\x2\x2\x2\x2FA7\x2FA8\x3\x2\x2\x2\x2FA8\x2FAA\x3\x2\x2\x2\x2FA9"+
		"\x2FA7\x3\x2\x2\x2\x2FAA\x2FAB\a\x4BB\x2\x2\x2FAB\x2FAE\x3\x2\x2\x2\x2FAC"+
		"\x2FAE\a\x4C0\x2\x2\x2FAD\x2FA0\x3\x2\x2\x2\x2FAD\x2FA1\x3\x2\x2\x2\x2FAD"+
		"\x2FAC\x3\x2\x2\x2\x2FAE\x2FAF\x3\x2\x2\x2\x2FAF\x2FB0\a\x4BC\x2\x2\x2FB0"+
		"\x2FB1\x5\x39C\x1CF\x2\x2FB1\x2FB2\a\x4BB\x2\x2\x2FB2\x2FC1\x3\x2\x2\x2"+
		"\x2FB3\x2FB4\a\x372\x2\x2\x2FB4\x2FB5\a\x4BA\x2\x2\x2FB5\x2FB6\x5\x488"+
		"\x245\x2\x2FB6\x2FB7\a\x4BC\x2\x2\x2FB7\x2FB8\x5\x494\x24B\x2\x2FB8\x2FB9"+
		"\a\x4BC\x2\x2\x2FB9\x2FBA\x5\x39C\x1CF\x2\x2FBA\x2FBB\a\x4BC\x2\x2\x2FBB"+
		"\x2FBC\x5\x494\x24B\x2\x2FBC\x2FBD\a\x4BC\x2\x2\x2FBD\x2FBE\x5\x39C\x1CF"+
		"\x2\x2FBE\x2FBF\a\x4BB\x2\x2\x2FBF\x2FC1\x3\x2\x2\x2\x2FC0\x2F7C\x3\x2"+
		"\x2\x2\x2FC0\x2F9C\x3\x2\x2\x2\x2FC0\x2FB3\x3\x2\x2\x2\x2FC1\x41B\x3\x2"+
		"\x2\x2\x2FC2\x2FC3\a\xB7\x2\x2\x2FC3\x2FD8\a\x4BA\x2\x2\x2FC4\x2FD9\x5"+
		"\x494\x24B\x2\x2FC5\x2FC6\a\x4BA\x2\x2\x2FC6\x2FCB\x5\x494\x24B\x2\x2FC7"+
		"\x2FC8\a\x4BC\x2\x2\x2FC8\x2FCA\x5\x494\x24B\x2\x2FC9\x2FC7\x3\x2\x2\x2"+
		"\x2FCA\x2FCD\x3\x2\x2\x2\x2FCB\x2FC9\x3\x2\x2\x2\x2FCB\x2FCC\x3\x2\x2"+
		"\x2\x2FCC\x2FCE\x3\x2\x2\x2\x2FCD\x2FCB\x3\x2\x2\x2\x2FCE\x2FCF\a\x4BB"+
		"\x2\x2\x2FCF\x2FD9\x3\x2\x2\x2\x2FD0\x2FD9\a\x4C0\x2\x2\x2FD1\x2FD2\a"+
		"\x2E8\x2\x2\x2FD2\x2FD3\a\x4BA\x2\x2\x2FD3\x2FD4\x5\x494\x24B\x2\x2FD4"+
		"\x2FD5\a\x4BC\x2\x2\x2FD5\x2FD6\x5\x39C\x1CF\x2\x2FD6\x2FD7\a\x4BB\x2"+
		"\x2\x2FD7\x2FD9\x3\x2\x2\x2\x2FD8\x2FC4\x3\x2\x2\x2\x2FD8\x2FC5\x3\x2"+
		"\x2\x2\x2FD8\x2FD0\x3\x2\x2\x2\x2FD8\x2FD1\x3\x2\x2\x2\x2FD9\x2FDA\x3"+
		"\x2\x2\x2\x2FDA\x2FDB\a\x4BC\x2\x2\x2FDB\x2FDC\x5\x39C\x1CF\x2\x2FDC\x2FDD"+
		"\a\x4BB\x2\x2\x2FDD\x2FFB\x3\x2\x2\x2\x2FDE\x2FDF\a\x17F\x2\x2\x2FDF\x2FE0"+
		"\a\x4BA\x2\x2\x2FE0\x2FE1\x5\x488\x245\x2\x2FE1\x2FEF\a\x4BC\x2\x2\x2FE2"+
		"\x2FF0\x5\x494\x24B\x2\x2FE3\x2FE4\a\x4BA\x2\x2\x2FE4\x2FE9\x5\x494\x24B"+
		"\x2\x2FE5\x2FE6\a\x4BC\x2\x2\x2FE6\x2FE8\x5\x494\x24B\x2\x2FE7\x2FE5\x3"+
		"\x2\x2\x2\x2FE8\x2FEB\x3\x2\x2\x2\x2FE9\x2FE7\x3\x2\x2\x2\x2FE9\x2FEA"+
		"\x3\x2\x2\x2\x2FEA\x2FEC\x3\x2\x2\x2\x2FEB\x2FE9\x3\x2\x2\x2\x2FEC\x2FED"+
		"\a\x4BB\x2\x2\x2FED\x2FF0\x3\x2\x2\x2\x2FEE\x2FF0\a\x4C0\x2\x2\x2FEF\x2FE2"+
		"\x3\x2\x2\x2\x2FEF\x2FE3\x3\x2\x2\x2\x2FEF\x2FEE\x3\x2\x2\x2\x2FF0\x2FF1"+
		"\x3\x2\x2\x2\x2FF1\x2FF2\a\x4BC\x2\x2\x2FF2\x2FF6\x5\x39C\x1CF\x2\x2FF3"+
		"\x2FF4\a\x4BC\x2\x2\x2FF4\x2FF5\a\x1F9\x2\x2\x2FF5\x2FF7\x5\x39C\x1CF"+
		"\x2\x2FF6\x2FF3\x3\x2\x2\x2\x2FF6\x2FF7\x3\x2\x2\x2\x2FF7\x2FF8\x3\x2"+
		"\x2\x2\x2FF8\x2FF9\a\x4BB\x2\x2\x2FF9\x2FFB\x3\x2\x2\x2\x2FFA\x2FC2\x3"+
		"\x2\x2\x2\x2FFA\x2FDE\x3\x2\x2\x2\x2FFB\x41D\x3\x2\x2\x2\x2FFC\x2FFD\x5"+
		"\x39C\x1CF\x2\x2FFD\x2FFE\a\x4BE\x2\x2\x2FFE\x2FFF\x5\x39C\x1CF\x2\x2FFF"+
		"\x41F\x3\x2\x2\x2\x3000\x3001\t\x9B\x2\x2\x3001\x3002\a\x294\x2\x2\x3002"+
		"\x3003\a\x281\x2\x2\x3003\x421\x3\x2\x2\x2\x3004\x3005\a\x37\x2\x2\x3005"+
		"\x3006\a\x4BA\x2\x2\x3006\x3547\a\x4BB\x2\x2\x3007\x3008\a\x34\x2\x2\x3008"+
		"\x3009\a\x4BA\x2\x2\x3009\x300A\x5\x39C\x1CF\x2\x300A\x300B\a\x4BC\x2"+
		"\x2\x300B\x300C\x5\x39C\x1CF\x2\x300C\x300D\a\x4BC\x2\x2\x300D\x300E\x5"+
		"\x39C\x1CF\x2\x300E\x300F\a\x4BB\x2\x2\x300F\x3547\x3\x2\x2\x2\x3010\x3011"+
		"\a\x35\x2\x2\x3011\x3012\a\x4BA\x2\x2\x3012\x3013\x5\x39C\x1CF\x2\x3013"+
		"\x3014\a\x4BC\x2\x2\x3014\x3015\x5\x39C\x1CF\x2\x3015\x3016\a\x4BC\x2"+
		"\x2\x3016\x3017\x5\x39C\x1CF\x2\x3017\x3018\a\x4BC\x2\x2\x3018\x3019\x5"+
		"\x39C\x1CF\x2\x3019\x301A\a\x4BB\x2\x2\x301A\x3547\x3\x2\x2\x2\x301B\x301C"+
		"\a>\x2\x2\x301C\x301D\a\x4BA\x2\x2\x301D\x301E\x5\x39C\x1CF\x2\x301E\x301F"+
		"\a\x4BC\x2\x2\x301F\x3020\x5\x39C\x1CF\x2\x3020\x3021\a\x4BB\x2\x2\x3021"+
		"\x3547\x3\x2\x2\x2\x3022\x3023\a\xA4\x2\x2\x3023\x3024\a\x4BA\x2\x2\x3024"+
		"\x3025\x5\x39C\x1CF\x2\x3025\x3026\a\x4BC\x2\x2\x3026\x3027\x5\x39C\x1CF"+
		"\x2\x3027\x3028\a\x4BB\x2\x2\x3028\x3547\x3\x2\x2\x2\x3029\x302A\a\xA5"+
		"\x2\x2\x302A\x302B\a\x4BA\x2\x2\x302B\x302C\x5\x39C\x1CF\x2\x302C\x302D"+
		"\a\x4BC\x2\x2\x302D\x302E\x5\x39C\x1CF\x2\x302E\x302F\a\x4BB\x2\x2\x302F"+
		"\x3547\x3\x2\x2\x2\x3030\x3031\a\x9E\x2\x2\x3031\x3032\a\x4BA\x2\x2\x3032"+
		"\x3033\x5\x39C\x1CF\x2\x3033\x3034\a\x4BC\x2\x2\x3034\x3035\x5\x39C\x1CF"+
		"\x2\x3035\x3036\a\x4BC\x2\x2\x3036\x3037\x5\x39C\x1CF\x2\x3037\x3038\a"+
		"\x4BB\x2\x2\x3038\x3547\x3\x2\x2\x2\x3039\x303A\a\xDE\x2\x2\x303A\x303B"+
		"\a\x4BA\x2\x2\x303B\x303C\x5\x39C\x1CF\x2\x303C\x303D\a\x4BC\x2\x2\x303D"+
		"\x303E\x5\x39C\x1CF\x2\x303E\x303F\a\x4BB\x2\x2\x303F\x3547\x3\x2\x2\x2"+
		"\x3040\x3041\a\xF2\x2\x2\x3041\x3043\a\x4BA\x2\x2\x3042\x3044\x5\x39C"+
		"\x1CF\x2\x3043\x3042\x3\x2\x2\x2\x3043\x3044\x3\x2\x2\x2\x3044\x3045\x3"+
		"\x2\x2\x2\x3045\x3547\a\x4BB\x2\x2\x3046\x3047\a\xF3\x2\x2\x3047\x3049"+
		"\a\x4BA\x2\x2\x3048\x304A\x5\x39C\x1CF\x2\x3049\x3048\x3\x2\x2\x2\x3049"+
		"\x304A\x3\x2\x2\x2\x304A\x304B\x3\x2\x2\x2\x304B\x3547\a\x4BB\x2\x2\x304C"+
		"\x304D\a\x168\x2\x2\x304D\x304E\a\x4BA\x2\x2\x304E\x304F\x5\x39C\x1CF"+
		"\x2\x304F\x3050\a\x4BB\x2\x2\x3050\x3547\x3\x2\x2\x2\x3051\x3052\a\x169"+
		"\x2\x2\x3052\x3053\a\x4BA\x2\x2\x3053\x3054\x5\x39C\x1CF\x2\x3054\x3055"+
		"\a\x4BB\x2\x2\x3055\x3547\x3\x2\x2\x2\x3056\x3057\a\x16A\x2\x2\x3057\x3058"+
		"\a\x4BA\x2\x2\x3058\x3059\x5\x39C\x1CF\x2\x3059\x305A\a\x4BB\x2\x2\x305A"+
		"\x3547\x3\x2\x2\x2\x305B\x305C\a\x15F\x2\x2\x305C\x305D\a\x4BA\x2\x2\x305D"+
		"\x305E\x5\x39C\x1CF\x2\x305E\x305F\a\x4BB\x2\x2\x305F\x3547\x3\x2\x2\x2"+
		"\x3060\x3061\a\x160\x2\x2\x3061\x3062\a\x4BA\x2\x2\x3062\x3063\x5\x39C"+
		"\x1CF\x2\x3063\x3064\a\x4BB\x2\x2\x3064\x3547\x3\x2\x2\x2\x3065\x3066"+
		"\a\x15E\x2\x2\x3066\x3067\a\x4BA\x2\x2\x3067\x3068\x5\x39C\x1CF\x2\x3068"+
		"\x3069\a\x4BC\x2\x2\x3069\x306A\x5\x39C\x1CF\x2\x306A\x306B\a\x4BB\x2"+
		"\x2\x306B\x3547\x3\x2\x2\x2\x306C\x306D\a\x164\x2\x2\x306D\x306E\a\x4BA"+
		"\x2\x2\x306E\x306F\x5\x39C\x1CF\x2\x306F\x3070\a\x4BC\x2\x2\x3070\x3071"+
		"\x5\x39C\x1CF\x2\x3071\x3072\a\x4BB\x2\x2\x3072\x3547\x3\x2\x2\x2\x3073"+
		"\x3074\a\x165\x2\x2\x3074\x3075\a\x4BA\x2\x2\x3075\x3076\x5\x39C\x1CF"+
		"\x2\x3076\x3077\a\x4BC\x2\x2\x3077\x3078\x5\x39C\x1CF\x2\x3078\x3079\a"+
		"\x4BB\x2\x2\x3079\x3547\x3\x2\x2\x2\x307A\x307B\a\x185\x2\x2\x307B\x307C"+
		"\a\x4BA\x2\x2\x307C\x307D\x5\x39C\x1CF\x2\x307D\x307E\a\x4BC\x2\x2\x307E"+
		"\x307F\x5\x39C\x1CF\x2\x307F\x3080\a\x4BB\x2\x2\x3080\x3547\x3\x2\x2\x2"+
		"\x3081\x3082\a\x186\x2\x2\x3082\x3083\a\x4BA\x2\x2\x3083\x3084\x5\x39C"+
		"\x1CF\x2\x3084\x3085\a\x4BB\x2\x2\x3085\x3547\x3\x2\x2\x2\x3086\x3087"+
		"\a\x1C9\x2\x2\x3087\x3088\a\x4BA\x2\x2\x3088\x3089\x5\x39C\x1CF\x2\x3089"+
		"\x308A\a\x4BC\x2\x2\x308A\x308B\x5\x39C\x1CF\x2\x308B\x308C\a\x4BC\x2"+
		"\x2\x308C\x308D\x5\x39C\x1CF\x2\x308D\x308E\a\x4BB\x2\x2\x308E\x3547\x3"+
		"\x2\x2\x2\x308F\x3090\a\x1C7\x2\x2\x3090\x3091\a\x4BA\x2\x2\x3091\x3092"+
		"\x5\x39C\x1CF\x2\x3092\x3093\a\x4BC\x2\x2\x3093\x3094\x5\x39C\x1CF\x2"+
		"\x3094\x3095\a\x4BC\x2\x2\x3095\x3096\x5\x39C\x1CF\x2\x3096\x3097\a\x4BC"+
		"\x2\x2\x3097\x3098\x5\x39C\x1CF\x2\x3098\x3099\a\x4BB\x2\x2\x3099\x3547"+
		"\x3\x2\x2\x2\x309A\x309B\a\x1C8\x2\x2\x309B\x309C\a\x4BA\x2\x2\x309C\x309D"+
		"\x5\x39C\x1CF\x2\x309D\x309E\a\x4BC\x2\x2\x309E\x309F\x5\x39C\x1CF\x2"+
		"\x309F\x30A0\a\x4BC\x2\x2\x30A0\x30A1\x5\x39C\x1CF\x2\x30A1\x30A2\a\x4BB"+
		"\x2\x2\x30A2\x3547\x3\x2\x2\x2\x30A3\x30A4\a\x25E\x2\x2\x30A4\x30A5\a"+
		"\x422\x2\x2\x30A5\x30A6\a\x172\x2\x2\x30A6\x30AC\x5\x488\x245\x2\x30A7"+
		"\x30A8\a\x2AC\x2\x2\x30A8\x30A9\a\x4BA\x2\x2\x30A9\x30AA\x5\x3C4\x1E3"+
		"\x2\x30AA\x30AB\a\x4BB\x2\x2\x30AB\x30AD\x3\x2\x2\x2\x30AC\x30A7\x3\x2"+
		"\x2\x2\x30AC\x30AD\x3\x2\x2\x2\x30AD\x3547\x3\x2\x2\x2\x30AE\x30AF\a\x289"+
		"\x2\x2\x30AF\x30B0\a\x4BA\x2\x2\x30B0\x30B1\x5\x39C\x1CF\x2\x30B1\x30B2"+
		"\a\x4BB\x2\x2\x30B2\x3547\x3\x2\x2\x2\x30B3\x30B4\a\x28A\x2\x2\x30B4\x30B5"+
		"\a\x4BA\x2\x2\x30B5\x30B8\x5\x39C\x1CF\x2\x30B6\x30B7\a\x4BC\x2\x2\x30B7"+
		"\x30B9\x5\x39C\x1CF\x2\x30B8\x30B6\x3\x2\x2\x2\x30B8\x30B9\x3\x2\x2\x2"+
		"\x30B9\x30BA\x3\x2\x2\x2\x30BA\x30BB\a\x4BB\x2\x2\x30BB\x3547\x3\x2\x2"+
		"\x2\x30BC\x30BD\a\x28B\x2\x2\x30BD\x30BE\a\x4BA\x2\x2\x30BE\x30C1\x5\x39C"+
		"\x1CF\x2\x30BF\x30C0\a\x4BC\x2\x2\x30C0\x30C2\x5\x39C\x1CF\x2\x30C1\x30BF"+
		"\x3\x2\x2\x2\x30C1\x30C2\x3\x2\x2\x2\x30C2\x30C3\x3\x2\x2\x2\x30C3\x30C4"+
		"\a\x4BB\x2\x2\x30C4\x3547\x3\x2\x2\x2\x30C5\x30C6\a\x28C\x2\x2\x30C6\x30C7"+
		"\a\x4BA\x2\x2\x30C7\x30CA\x5\x39C\x1CF\x2\x30C8\x30C9\a\x4BC\x2\x2\x30C9"+
		"\x30CB\x5\x39C\x1CF\x2\x30CA\x30C8\x3\x2\x2\x2\x30CA\x30CB\x3\x2\x2\x2"+
		"\x30CB\x30CC\x3\x2\x2\x2\x30CC\x30CD\a\x4BB\x2\x2\x30CD\x3547\x3\x2\x2"+
		"\x2\x30CE\x30CF\a\x287\x2\x2\x30CF\x30D0\a\x4BA\x2\x2\x30D0\x30D1\x5\x39C"+
		"\x1CF\x2\x30D1\x30D2\a\x4BC\x2\x2\x30D2\x30D3\x5\x39C\x1CF\x2\x30D3\x30D4"+
		"\a\x4BB\x2\x2\x30D4\x3547\x3\x2\x2\x2\x30D5\x30D6\a\x288\x2\x2\x30D6\x30D7"+
		"\a\x4BA\x2\x2\x30D7\x30D8\x5\x39C\x1CF\x2\x30D8\x30D9\a\x4BC\x2\x2\x30D9"+
		"\x30DA\x5\x39C\x1CF\x2\x30DA\x30DB\a\x4BB\x2\x2\x30DB\x3547\x3\x2\x2\x2"+
		"\x30DC\x30DD\a\x2A7\x2\x2\x30DD\x30DE\a\x4BA\x2\x2\x30DE\x3547\a\x4BB"+
		"\x2\x2\x30DF\x30E0\a\x2B8\x2\x2\x30E0\x30E1\a\x4BA\x2\x2\x30E1\x30E2\x5"+
		"\x39C\x1CF\x2\x30E2\x30E3\a\x4BC\x2\x2\x30E3\x30E4\x5\x39C\x1CF\x2\x30E4"+
		"\x30E5\a\x4BB\x2\x2\x30E5\x3547\x3\x2\x2\x2\x30E6\x30E7\a\x35C\x2\x2\x30E7"+
		"\x30E9\a\x4BA\x2\x2\x30E8\x30EA\x5\x39C\x1CF\x2\x30E9\x30E8\x3\x2\x2\x2"+
		"\x30E9\x30EA\x3\x2\x2\x2\x30EA\x30EB\x3\x2\x2\x2\x30EB\x3547\a\x4BB\x2"+
		"\x2\x30EC\x30ED\a\x35D\x2\x2\x30ED\x30EF\a\x4BA\x2\x2\x30EE\x30F0\x5\x39C"+
		"\x1CF\x2\x30EF\x30EE\x3\x2\x2\x2\x30EF\x30F0\x3\x2\x2\x2\x30F0\x30F1\x3"+
		"\x2\x2\x2\x30F1\x3547\a\x4BB\x2\x2\x30F2\x30F3\a\x360\x2\x2\x30F3\x30F4"+
		"\a\x4BA\x2\x2\x30F4\x3547\a\x4BB\x2\x2\x30F5\x30F6\a\x37B\x2\x2\x30F6"+
		"\x30F7\a\x4BA\x2\x2\x30F7\x30F8\x5\x39C\x1CF\x2\x30F8\x30F9\a\x4BB\x2"+
		"\x2\x30F9\x3547\x3\x2\x2\x2\x30FA\x30FB\a\x3B8\x2\x2\x30FB\x30FC\a\x4BA"+
		"\x2\x2\x30FC\x30FD\x5\x39C\x1CF\x2\x30FD\x30FE\a\x4BC\x2\x2\x30FE\x30FF"+
		"\x5\x39C\x1CF\x2\x30FF\x3100\a\x4BB\x2\x2\x3100\x3547\x3\x2\x2\x2\x3101"+
		"\x3102\a\x405\x2\x2\x3102\x3103\a\x4BA\x2\x2\x3103\x3104\x5\x39C\x1CF"+
		"\x2\x3104\x3105\a\x4BB\x2\x2\x3105\x3547\x3\x2\x2\x2\x3106\x3107\a\x406"+
		"\x2\x2\x3107\x3108\a\x4BA\x2\x2\x3108\x3109\x5\x39C\x1CF\x2\x3109\x310A"+
		"\a\x4BB\x2\x2\x310A\x3547\x3\x2\x2\x2\x310B\x310C\a\x404\x2\x2\x310C\x310D"+
		"\a\x4BA\x2\x2\x310D\x310E\x5\x39C\x1CF\x2\x310E\x310F\a\x4BC\x2\x2\x310F"+
		"\x3110\x5\x39C\x1CF\x2\x3110\x3111\a\x4BB\x2\x2\x3111\x3547\x3\x2\x2\x2"+
		"\x3112\x3113\a<\x2\x2\x3113\x3114\a\x4BA\x2\x2\x3114\x3115\x5\x39C\x1CF"+
		"\x2\x3115\x3116\a\x4BB\x2\x2\x3116\x3547\x3\x2\x2\x2\x3117\x3118\a\x84"+
		"\x2\x2\x3118\x3119\a\x4BA\x2\x2\x3119\x311A\x5\x39C\x1CF\x2\x311A\x311B"+
		"\a\x4BB\x2\x2\x311B\x3547\x3\x2\x2\x2\x311C\x311D\a\x85\x2\x2\x311D\x311E"+
		"\a\x4BA\x2\x2\x311E\x311F\x5\x39C\x1CF\x2\x311F\x3120\a\x4BC\x2\x2\x3120"+
		"\x3123\x5\x39C\x1CF\x2\x3121\x3122\a\x4BC\x2\x2\x3122\x3124\x5\x39C\x1CF"+
		"\x2\x3123\x3121\x3\x2\x2\x2\x3123\x3124\x3\x2\x2\x2\x3124\x3125\x3\x2"+
		"\x2\x2\x3125\x3126\a\x4BB\x2\x2\x3126\x3547\x3\x2\x2\x2\x3127\x3128\a"+
		"\xAE\x2\x2\x3128\x3129\a\x4BA\x2\x2\x3129\x312A\x5\x39C\x1CF\x2\x312A"+
		"\x312B\a\x4BC\x2\x2\x312B\x3130\x5\x39C\x1CF\x2\x312C\x312D\a\x4BC\x2"+
		"\x2\x312D\x312F\x5\x39C\x1CF\x2\x312E\x312C\x3\x2\x2\x2\x312F\x3132\x3"+
		"\x2\x2\x2\x3130\x312E\x3\x2\x2\x2\x3130\x3131\x3\x2\x2\x2\x3131\x3133"+
		"\x3\x2\x2\x2\x3132\x3130\x3\x2\x2\x2\x3133\x3134\a\x4BB\x2\x2\x3134\x3547"+
		"\x3\x2\x2\x2\x3135\x3136\a\xB0\x2\x2\x3136\x3137\a\x4BA\x2\x2\x3137\x3138"+
		"\x5\x39C\x1CF\x2\x3138\x3139\a\x4BC\x2\x2\x3139\x313A\x5\x39C\x1CF\x2"+
		"\x313A\x313B\a\x4BC\x2\x2\x313B\x3140\x5\x39C\x1CF\x2\x313C\x313D\a\x4BC"+
		"\x2\x2\x313D\x313F\x5\x39C\x1CF\x2\x313E\x313C\x3\x2\x2\x2\x313F\x3142"+
		"\x3\x2\x2\x2\x3140\x313E\x3\x2\x2\x2\x3140\x3141\x3\x2\x2\x2\x3141\x3143"+
		"\x3\x2\x2\x2\x3142\x3140\x3\x2\x2\x2\x3143\x3144\a\x4BB\x2\x2\x3144\x3547"+
		"\x3\x2\x2\x2\x3145\x3146\a\x10F\x2\x2\x3146\x3147\a\x4BA\x2\x2\x3147\x3148"+
		"\x5\x39C\x1CF\x2\x3148\x3149\a\x4BC\x2\x2\x3149\x314A\x5\x39C\x1CF\x2"+
		"\x314A\x314B\a\x4BB\x2\x2\x314B\x3547\x3\x2\x2\x2\x314C\x314D\a\x17B\x2"+
		"\x2\x314D\x314E\a\x4BA\x2\x2\x314E\x314F\x5\x39C\x1CF\x2\x314F\x3150\a"+
		"\x4BC\x2\x2\x3150\x3153\x5\x39C\x1CF\x2\x3151\x3152\a\x4BC\x2\x2\x3152"+
		"\x3154\x5\x39C\x1CF\x2\x3153\x3151\x3\x2\x2\x2\x3153\x3154\x3\x2\x2\x2"+
		"\x3154\x3155\x3\x2\x2\x2\x3155\x3156\a\x4BB\x2\x2\x3156\x3547\x3\x2\x2"+
		"\x2\x3157\x3158\a\x1FF\x2\x2\x3158\x3159\a\x4BA\x2\x2\x3159\x315A\x5\x39C"+
		"\x1CF\x2\x315A\x315B\a\x4BC\x2\x2\x315B\x315C\x5\x39C\x1CF\x2\x315C\x315D"+
		"\a\x4BB\x2\x2\x315D\x3547\x3\x2\x2\x2\x315E\x315F\a\x200\x2\x2\x315F\x3160"+
		"\a\x4BA\x2\x2\x3160\x3161\x5\x39C\x1CF\x2\x3161\x3162\a\x4BB\x2\x2\x3162"+
		"\x3547\x3\x2\x2\x2\x3163\x3164\a\x219\x2\x2\x3164\x3165\a\x4BA\x2\x2\x3165"+
		"\x3166\x5\x39C\x1CF\x2\x3166\x3167\a\x4BB\x2\x2\x3167\x3547\x3\x2\x2\x2"+
		"\x3168\x3169\a\x21A\x2\x2\x3169\x316A\a\x4BA\x2\x2\x316A\x316B\x5\x39C"+
		"\x1CF\x2\x316B\x316C\a\x4BB\x2\x2\x316C\x3547\x3\x2\x2\x2\x316D\x316E"+
		"\a\x255\x2\x2\x316E\x316F\a\x4BA\x2\x2\x316F\x3170\x5\x39C\x1CF\x2\x3170"+
		"\x3171\a\x4BB\x2\x2\x3171\x3547\x3\x2\x2\x2\x3172\x3173\a\x2C0\x2\x2\x3173"+
		"\x3174\a\x4BA\x2\x2\x3174\x3175\x5\x39C\x1CF\x2\x3175\x3176\a\x4BC\x2"+
		"\x2\x3176\x3177\x5\x39C\x1CF\x2\x3177\x3178\a\x4BB\x2\x2\x3178\x3547\x3"+
		"\x2\x2\x2\x3179\x317A\a\x2F6\x2\x2\x317A\x317B\a\x4BA\x2\x2\x317B\x317E"+
		"\x5\x39C\x1CF\x2\x317C\x317D\a\x4BC\x2\x2\x317D\x317F\x5\x39C\x1CF\x2"+
		"\x317E\x317C\x3\x2\x2\x2\x317E\x317F\x3\x2\x2\x2\x317F\x3180\x3\x2\x2"+
		"\x2\x3180\x3181\a\x4BB\x2\x2\x3181\x3547\x3\x2\x2\x2\x3182\x3183\a\x322"+
		"\x2\x2\x3183\x3184\a\x4BA\x2\x2\x3184\x3185\x5\x39C\x1CF\x2\x3185\x3186"+
		"\a\x4BC\x2\x2\x3186\x3187\x5\x39C\x1CF\x2\x3187\x3188\a\x4BC\x2\x2\x3188"+
		"\x3189\x5\x39C\x1CF\x2\x3189\x318A\a\x4BB\x2\x2\x318A\x3547\x3\x2\x2\x2"+
		"\x318B\x318C\a\x324\x2\x2\x318C\x318D\a\x4BA\x2\x2\x318D\x318E\x5\x39C"+
		"\x1CF\x2\x318E\x318F\a\x4BC\x2\x2\x318F\x3190\x5\x39C\x1CF\x2\x3190\x3191"+
		"\a\x4BB\x2\x2\x3191\x3547\x3\x2\x2\x2\x3192\x3193\a\x33B\x2\x2\x3193\x3194"+
		"\a\x4BA\x2\x2\x3194\x3195\x5\x39C\x1CF\x2\x3195\x3196\a\x4BB\x2\x2\x3196"+
		"\x3547\x3\x2\x2\x2\x3197\x3198\a\x33F\x2\x2\x3198\x3199\a\x4BA\x2\x2\x3199"+
		"\x319A\x5\x39C\x1CF\x2\x319A\x319B\a\x4BC\x2\x2\x319B\x319C\x5\x39C\x1CF"+
		"\x2\x319C\x319D\a\x4BB\x2\x2\x319D\x3547\x3\x2\x2\x2\x319E\x319F\a\x353"+
		"\x2\x2\x319F\x31A0\a\x4BA\x2\x2\x31A0\x31A1\x5\x39C\x1CF\x2\x31A1\x31A2"+
		"\a\x4BB\x2\x2\x31A2\x3547\x3\x2\x2\x2\x31A3\x31A4\a\x3A0\x2\x2\x31A4\x31A5"+
		"\a\x4BA\x2\x2\x31A5\x31A6\x5\x39C\x1CF\x2\x31A6\x31A7\a\x4BB\x2\x2\x31A7"+
		"\x3547\x3\x2\x2\x2\x31A8\x31A9\a\x3A2\x2\x2\x31A9\x31AA\a\x4BA\x2\x2\x31AA"+
		"\x31AB\x5\x39C\x1CF\x2\x31AB\x31AC\a\x4BB\x2\x2\x31AC\x3547\x3\x2\x2\x2"+
		"\x31AD\x31AE\a\x3C2\x2\x2\x31AE\x31AF\a\x4BA\x2\x2\x31AF\x31B6\x5\x39C"+
		"\x1CF\x2\x31B0\x31B1\a\x4BC\x2\x2\x31B1\x31B4\x5\x39C\x1CF\x2\x31B2\x31B3"+
		"\a\x4BC\x2\x2\x31B3\x31B5\x5\x39C\x1CF\x2\x31B4\x31B2\x3\x2\x2\x2\x31B4"+
		"\x31B5\x3\x2\x2\x2\x31B5\x31B7\x3\x2\x2\x2\x31B6\x31B0\x3\x2\x2\x2\x31B6"+
		"\x31B7\x3\x2\x2\x2\x31B7\x31B8\x3\x2\x2\x2\x31B8\x31B9\a\x4BB\x2\x2\x31B9"+
		"\x3547\x3\x2\x2\x2\x31BA\x31BB\a\x3C3\x2\x2\x31BB\x31BC\a\x4BA\x2\x2\x31BC"+
		"\x31BD\x5\x39C\x1CF\x2\x31BD\x31BE\a\x4BC\x2\x2\x31BE\x31BF\x5\x39C\x1CF"+
		"\x2\x31BF\x31C6\a\x4BB\x2\x2\x31C0\x31C1\a\x43A\x2\x2\x31C1\x31C2\a\x19A"+
		"\x2\x2\x31C2\x31C3\a\x4BA\x2\x2\x31C3\x31C4\x5\x3C4\x1E3\x2\x31C4\x31C5"+
		"\a\x4BB\x2\x2\x31C5\x31C7\x3\x2\x2\x2\x31C6\x31C0\x3\x2\x2\x2\x31C6\x31C7"+
		"\x3\x2\x2\x2\x31C7\x3547\x3\x2\x2\x2\x31C8\x31C9\a\x3C4\x2\x2\x31C9\x31CA"+
		"\a\x4BA\x2\x2\x31CA\x31CB\x5\x39C\x1CF\x2\x31CB\x31CC\a\x4BC\x2\x2\x31CC"+
		"\x31CD\x5\x39C\x1CF\x2\x31CD\x31CE\a\x4BB\x2\x2\x31CE\x3547\x3\x2\x2\x2"+
		"\x31CF\x31D0\a\x3C5\x2\x2\x31D0\x31D1\a\x4BA\x2\x2\x31D1\x31D2\x5\x39C"+
		"\x1CF\x2\x31D2\x31D3\a\x4BC\x2\x2\x31D3\x31D4\x5\x39C\x1CF\x2\x31D4\x31D5"+
		"\a\x4BC\x2\x2\x31D5\x31D6\x5\x39C\x1CF\x2\x31D6\x31D7\a\x4BC\x2\x2\x31D7"+
		"\x31D8\x5\x39C\x1CF\x2\x31D8\x31D9\a\x4BB\x2\x2\x31D9\x3547\x3\x2\x2\x2"+
		"\x31DA\x31DB\a\x3C9\x2\x2\x31DB\x31DC\a\x4BA\x2\x2\x31DC\x31DD\x5\x39C"+
		"\x1CF\x2\x31DD\x31DE\a\x4BC\x2\x2\x31DE\x31DF\x5\x39C\x1CF\x2\x31DF\x31E0"+
		"\a\x4BC\x2\x2\x31E0\x31E1\x5\x39C\x1CF\x2\x31E1\x31E2\a\x4BB\x2\x2\x31E2"+
		"\x3547\x3\x2\x2\x2\x31E3\x31E4\a\x3F7\x2\x2\x31E4\x31E5\a\x4BA\x2\x2\x31E5"+
		"\x31E6\x5\x39C\x1CF\x2\x31E6\x31E7\a\x4BC\x2\x2\x31E7\x31E8\x5\x39C\x1CF"+
		"\x2\x31E8\x31E9\a\x4BC\x2\x2\x31E9\x31EA\x5\x39C\x1CF\x2\x31EA\x31EB\a"+
		"\x4BB\x2\x2\x31EB\x3547\x3\x2\x2\x2\x31EC\x31ED\a\x3F9\x2\x2\x31ED\x31F1"+
		"\a\x4BA\x2\x2\x31EE\x31EF\x5\x39C\x1CF\x2\x31EF\x31F0\a\x181\x2\x2\x31F0"+
		"\x31F2\x3\x2\x2\x2\x31F1\x31EE\x3\x2\x2\x2\x31F1\x31F2\x3\x2\x2\x2\x31F2"+
		"\x31F3\x3\x2\x2\x2\x31F3\x31F4\x5\x39C\x1CF\x2\x31F4\x31F5\a\x4BB\x2\x2"+
		"\x31F5\x3547\x3\x2\x2\x2\x31F6\x31F7\a\x40B\x2\x2\x31F7\x31F8\a\x4BA\x2"+
		"\x2\x31F8\x31F9\x5\x39C\x1CF\x2\x31F9\x31FA\a\x4BB\x2\x2\x31FA\x3547\x3"+
		"\x2\x2\x2\x31FB\x31FC\a\x418\x2\x2\x31FC\x31FD\a\x4BA\x2\x2\x31FD\x31FE"+
		"\x5\x39C\x1CF\x2\x31FE\x31FF\a\x4BB\x2\x2\x31FF\x3547\x3\x2\x2\x2\x3200"+
		"\x3201\a`\x2\x2\x3201\x320B\a\x4BA\x2\x2\x3202\x320C\a\x4C0\x2\x2\x3203"+
		"\x3208\x5\x39C\x1CF\x2\x3204\x3205\a\x4BC\x2\x2\x3205\x3207\x5\x39C\x1CF"+
		"\x2\x3206\x3204\x3\x2\x2\x2\x3207\x320A\x3\x2\x2\x2\x3208\x3206\x3\x2"+
		"\x2\x2\x3208\x3209\x3\x2\x2\x2\x3209\x320C\x3\x2\x2\x2\x320A\x3208\x3"+
		"\x2\x2\x2\x320B\x3202\x3\x2\x2\x2\x320B\x3203\x3\x2\x2\x2\x320C\x320D"+
		"\x3\x2\x2\x2\x320D\x3547\a\x4BB\x2\x2\x320E\x320F\a\x8D\x2\x2\x320F\x3219"+
		"\a\x4BA\x2\x2\x3210\x321A\a\x4C0\x2\x2\x3211\x3216\x5\x39C\x1CF\x2\x3212"+
		"\x3213\a\x4BC\x2\x2\x3213\x3215\x5\x39C\x1CF\x2\x3214\x3212\x3\x2\x2\x2"+
		"\x3215\x3218\x3\x2\x2\x2\x3216\x3214\x3\x2\x2\x2\x3216\x3217\x3\x2\x2"+
		"\x2\x3217\x321A\x3\x2\x2\x2\x3218\x3216\x3\x2\x2\x2\x3219\x3210\x3\x2"+
		"\x2\x2\x3219\x3211\x3\x2\x2\x2\x321A\x321B\x3\x2\x2\x2\x321B\x3547\a\x4BB"+
		"\x2\x2\x321C\x321D\a\xA9\x2\x2\x321D\x321E\a\x4BA\x2\x2\x321E\x321F\x5"+
		"\x39C\x1CF\x2\x321F\x3220\a\x4BB\x2\x2\x3220\x3547\x3\x2\x2\x2\x3221\x3222"+
		"\a\xB4\x2\x2\x3222\x3223\a\x4BA\x2\x2\x3223\x3224\a\x4A4\x2\x2\x3224\x3547"+
		"\a\x4BB\x2\x2\x3225\x3226\a\xBB\x2\x2\x3226\x3227\a\x4BA\x2\x2\x3227\x3547"+
		"\a\x4BB\x2\x2\x3228\x3229\a\xD2\x2\x2\x3229\x322A\a\x4BA\x2\x2\x322A\x3547"+
		"\a\x4BB\x2\x2\x322B\x322C\a\xD5\x2\x2\x322C\x322D\a\x4BA\x2\x2\x322D\x3547"+
		"\a\x4BB\x2\x2\x322E\x322F\a\xF7\x2\x2\x322F\x3230\a\x4BA\x2\x2\x3230\x3231"+
		"\x5\x39C\x1CF\x2\x3231\x3232\a\x4BB\x2\x2\x3232\x3547\x3\x2\x2\x2\x3233"+
		"\x3234\a\x136\x2\x2\x3234\x3235\a\x4BA\x2\x2\x3235\x3547\a\x4BB\x2\x2"+
		"\x3236\x3237\a\x137\x2\x2\x3237\x3238\a\x4BA\x2\x2\x3238\x3547\a\x4BB"+
		"\x2\x2\x3239\x323A\a\x138\x2\x2\x323A\x323B\a\x4BA\x2\x2\x323B\x3547\a"+
		"\x4BB\x2\x2\x323C\x323D\a\x139\x2\x2\x323D\x323E\a\x4BA\x2\x2\x323E\x3547"+
		"\a\x4BB\x2\x2\x323F\x3240\a\x13A\x2\x2\x3240\x3241\a\x4BA\x2\x2\x3241"+
		"\x3547\a\x4BB\x2\x2\x3242\x3243\a\x13B\x2\x2\x3243\x3244\a\x4BA\x2\x2"+
		"\x3244\x3547\a\x4BB\x2\x2\x3245\x3246\a\x17C\x2\x2\x3246\x324A\a\x4BA"+
		"\x2\x2\x3247\x324B\a\x4A2\x2\x2\x3248\x324B\a\x4A4\x2\x2\x3249\x324B\a"+
		"\x4A0\x2\x2\x324A\x3247\x3\x2\x2\x2\x324A\x3248\x3\x2\x2\x2\x324A\x3249"+
		"\x3\x2\x2\x2\x324B\x324C\x3\x2\x2\x2\x324C\x324D\a\x4BC\x2\x2\x324D\x3252"+
		"\x5\x39C\x1CF\x2\x324E\x324F\a\x4BC\x2\x2\x324F\x3251\x5\x39C\x1CF\x2"+
		"\x3250\x324E\x3\x2\x2\x2\x3251\x3254\x3\x2\x2\x2\x3252\x3250\x3\x2\x2"+
		"\x2\x3252\x3253\x3\x2\x2\x2\x3253\x3255\x3\x2\x2\x2\x3254\x3252\x3\x2"+
		"\x2\x2\x3255\x3256\a\x4BB\x2\x2\x3256\x3547\x3\x2\x2\x2\x3257\x3258\a"+
		"\x193\x2\x2\x3258\x3259\a\x4BA\x2\x2\x3259\x3547\a\x4BB\x2\x2\x325A\x325B"+
		"\a\x18C\x2\x2\x325B\x325D\a\x4BA\x2\x2\x325C\x325E\a\x4A4\x2\x2\x325D"+
		"\x325C\x3\x2\x2\x2\x325D\x325E\x3\x2\x2\x2\x325E\x325F\x3\x2\x2\x2\x325F"+
		"\x3547\a\x4BB\x2\x2\x3260\x3261\a\x1AC\x2\x2\x3261\x3262\a\x4BA\x2\x2"+
		"\x3262\x3547\a\x4BB\x2\x2\x3263\x3264\a\x1AD\x2\x2\x3264\x3265\a\x4BA"+
		"\x2\x2\x3265\x3547\a\x4BB\x2\x2\x3266\x3267\a\x1DC\x2\x2\x3267\x3268\a"+
		"\x4BA\x2\x2\x3268\x3269\x5\x39C\x1CF\x2\x3269\x326A\a\x4BC\x2\x2\x326A"+
		"\x326B\x5\x39C\x1CF\x2\x326B\x326C\a\x4BB\x2\x2\x326C\x3547\x3\x2\x2\x2"+
		"\x326D\x326E\a\x1DD\x2\x2\x326E\x326F\a\x4BA\x2\x2\x326F\x3270\x5\x39C"+
		"\x1CF\x2\x3270\x3271\a\x4BB\x2\x2\x3271\x3547\x3\x2\x2\x2\x3272\x3273"+
		"\a\x246\x2\x2\x3273\x3274\a\x4BA\x2\x2\x3274\x3547\a\x4BB\x2\x2\x3275"+
		"\x3276\a\x258\x2\x2\x3276\x3277\a\x4BA\x2\x2\x3277\x3547\a\x4BB\x2\x2"+
		"\x3278\x3279\a\x25A\x2\x2\x3279\x327A\a\x4BA\x2\x2\x327A\x3547\a\x4BB"+
		"\x2\x2\x327B\x327C\a\x348\x2\x2\x327C\x327D\a\x4BA\x2\x2\x327D\x3547\a"+
		"\x4BB\x2\x2\x327E\x327F\a\x383\x2\x2\x327F\x3280\a\x4BA\x2\x2\x3280\x3281"+
		"\a\x4A4\x2\x2\x3281\x3547\a\x4BB\x2\x2\x3282\x3283\a\x442\x2\x2\x3283"+
		"\x3284\a\x4BA\x2\x2\x3284\x3547\a\x4BB\x2\x2\x3285\x3286\aw\x2\x2\x3286"+
		"\x3287\a\x4BA\x2\x2\x3287\x3288\x5\x39C\x1CF\x2\x3288\x3289\a:\x2\x2\x3289"+
		"\x328A\x5\x4BA\x25E\x2\x328A\x328B\a\x4BB\x2\x2\x328B\x3547\x3\x2\x2\x2"+
		"\x328C\x328D\a\x3FF\x2\x2\x328D\x328E\a\x4BA\x2\x2\x328E\x328F\x5\x39C"+
		"\x1CF\x2\x328F\x3290\a:\x2\x2\x3290\x3291\x5\x4BA\x25E\x2\x3291\x3292"+
		"\a\x4BB\x2\x2\x3292\x3547\x3\x2\x2\x2\x3293\x3294\a\xC2\x2\x2\x3294\x3295"+
		"\a\x4BA\x2\x2\x3295\x3296\x5\x4BA\x25E\x2\x3296\x3297\a\x4BC\x2\x2\x3297"+
		"\x329A\x5\x39C\x1CF\x2\x3298\x3299\a\x4BC\x2\x2\x3299\x329B\x5\x39C\x1CF"+
		"\x2\x329A\x3298\x3\x2\x2\x2\x329A\x329B\x3\x2\x2\x2\x329B\x329C\x3\x2"+
		"\x2\x2\x329C\x329D\a\x4BB\x2\x2\x329D\x3547\x3\x2\x2\x2\x329E\x329F\a"+
		"\x9A\x2\x2\x329F\x32A0\a\x4BA\x2\x2\x32A0\x32A1\x5\x460\x231\x2\x32A1"+
		"\x32A2\a\x4BB\x2\x2\x32A2\x3547\x3\x2\x2\x2\x32A3\x3547\a\x496\x2\x2\x32A4"+
		"\x3547\a\x497\x2\x2\x32A5\x32A6\a\xDA\x2\x2\x32A6\x32A7\a\x4BA\x2\x2\x32A7"+
		"\x32A8\a\x4A4\x2\x2\x32A8\x32A9\a\x4BC\x2\x2\x32A9\x32AA\x5\x39C\x1CF"+
		"\x2\x32AA\x32AB\a\x4BB\x2\x2\x32AB\x3547\x3\x2\x2\x2\x32AC\x32AD\a~\x2"+
		"\x2\x32AD\x32AE\a\x4BA\x2\x2\x32AE\x32AF\x5\x39C\x1CF\x2\x32AF\x32B0\a"+
		"\x4BB\x2\x2\x32B0\x3547\x3\x2\x2\x2\x32B1\x32B2\a\xE2\x2\x2\x32B2\x32B3"+
		"\a\x4BA\x2\x2\x32B3\x32B4\x5\x39C\x1CF\x2\x32B4\x32B5\a\x4BB\x2\x2\x32B5"+
		"\x3547\x3\x2\x2\x2\x32B6\x32B7\a\x1B3\x2\x2\x32B7\x32B8\a\x4BA\x2\x2\x32B8"+
		"\x32B9\x5\x39C\x1CF\x2\x32B9\x32BA\a\x4BB\x2\x2\x32BA\x3547\x3\x2\x2\x2"+
		"\x32BB\x32BC\a\x1B4\x2\x2\x32BC\x32BD\a\x4BA\x2\x2\x32BD\x32BE\x5\x39C"+
		"\x1CF\x2\x32BE\x32BF\a\x4BB\x2\x2\x32BF\x3547\x3\x2\x2\x2\x32C0\x32C1"+
		"\a\x1B5\x2\x2\x32C1\x32C2\a\x4BA\x2\x2\x32C2\x32C3\x5\x39C\x1CF\x2\x32C3"+
		"\x32C4\a\x4BB\x2\x2\x32C4\x3547\x3\x2\x2\x2\x32C5\x32C6\a\x1AF\x2\x2\x32C6"+
		"\x32C7\a\x4BA\x2\x2\x32C7\x32CC\x5\x4BA\x25E\x2\x32C8\x32C9\a\x4BC\x2"+
		"\x2\x32C9\x32CA\a\x4A2\x2\x2\x32CA\x32CB\a\x4BC\x2\x2\x32CB\x32CD\a\x4A2"+
		"\x2\x2\x32CC\x32C8\x3\x2\x2\x2\x32CC\x32CD\x3\x2\x2\x2\x32CD\x32CE\x3"+
		"\x2\x2\x2\x32CE\x32CF\a\x4BB\x2\x2\x32CF\x3547\x3\x2\x2\x2\x32D0\x32D1"+
		"\a\x3AB\x2\x2\x32D1\x32D2\a\x4BA\x2\x2\x32D2\x32D3\x5\x39C\x1CF\x2\x32D3"+
		"\x32D4\a\x4BC\x2\x2\x32D4\x32D5\a\x4A4\x2\x2\x32D5\x32D6\a\x4BB\x2\x2"+
		"\x32D6\x3547\x3\x2\x2\x2\x32D7\x32D8\a\xD1\x2\x2\x32D8\x32D9\a\x4BA\x2"+
		"\x2\x32D9\x3547\a\x4BB\x2\x2\x32DA\x3547\a\xD4\x2\x2\x32DB\x32DC\a\x461"+
		"\x2\x2\x32DC\x32DD\a\x4BA\x2\x2\x32DD\x3547\a\x4BB\x2\x2\x32DE\x32DF\a"+
		"\x462\x2\x2\x32DF\x32E0\a\x4BA\x2\x2\x32E0\x3547\a\x4BB\x2\x2\x32E1\x32E2"+
		"\a\x463\x2\x2\x32E2\x32E3\a\x4BA\x2\x2\x32E3\x32E4\x5\x426\x214\x2\x32E4"+
		"\x32E5\a\x4BC\x2\x2\x32E5\x32E6\x5\x39C\x1CF\x2\x32E6\x32E7\a\x4BC\x2"+
		"\x2\x32E7\x32EA\x5\x39C\x1CF\x2\x32E8\x32E9\a\x4BC\x2\x2\x32E9\x32EB\x5"+
		"\x39C\x1CF\x2\x32EA\x32E8\x3\x2\x2\x2\x32EA\x32EB\x3\x2\x2\x2\x32EB\x32EC"+
		"\x3\x2\x2\x2\x32EC\x32ED\a\x4BB\x2\x2\x32ED\x3547\x3\x2\x2\x2\x32EE\x32EF"+
		"\a\xE8\x2\x2\x32EF\x32F0\a\x4BA\x2\x2\x32F0\x32F1\x5\x428\x215\x2\x32F1"+
		"\x32F2\a\x4BC\x2\x2\x32F2\x32F3\x5\x39C\x1CF\x2\x32F3\x32F4\a\x4BC\x2"+
		"\x2\x32F4\x32F5\x5\x39C\x1CF\x2\x32F5\x32F6\a\x4BB\x2\x2\x32F6\x3547\x3"+
		"\x2\x2\x2\x32F7\x32F8\a\xE9\x2\x2\x32F8\x32F9\a\x4BA\x2\x2\x32F9\x32FA"+
		"\x5\x428\x215\x2\x32FA\x32FB\a\x4BC\x2\x2\x32FB\x32FC\x5\x39C\x1CF\x2"+
		"\x32FC\x32FD\a\x4BC\x2\x2\x32FD\x32FE\x5\x39C\x1CF\x2\x32FE\x32FF\a\x4BB"+
		"\x2\x2\x32FF\x3547\x3\x2\x2\x2\x3300\x3301\a\x464\x2\x2\x3301\x3302\a"+
		"\x4BA\x2\x2\x3302\x3303\x5\x428\x215\x2\x3303\x3304\a\x4BC\x2\x2\x3304"+
		"\x3305\x5\x39C\x1CF\x2\x3305\x3306\a\x4BC\x2\x2\x3306\x3307\x5\x39C\x1CF"+
		"\x2\x3307\x3308\a\x4BB\x2\x2\x3308\x3547\x3\x2\x2\x2\x3309\x330A\a\x465"+
		"\x2\x2\x330A\x330B\a\x4BA\x2\x2\x330B\x330C\x5\x39C\x1CF\x2\x330C\x330D"+
		"\a\x4BC\x2\x2\x330D\x330E\x5\x39C\x1CF\x2\x330E\x330F\a\x4BC\x2\x2\x330F"+
		"\x3310\x5\x39C\x1CF\x2\x3310\x3311\a\x4BB\x2\x2\x3311\x3547\x3\x2\x2\x2"+
		"\x3312\x3313\a\xEA\x2\x2\x3313\x3314\a\x4BA\x2\x2\x3314\x3315\x5\x42A"+
		"\x216\x2\x3315\x3316\a\x4BC\x2\x2\x3316\x3317\x5\x39C\x1CF\x2\x3317\x3318"+
		"\a\x4BB\x2\x2\x3318\x3547\x3\x2\x2\x2\x3319\x331A\a\xEB\x2\x2\x331A\x331B"+
		"\a\x4BA\x2\x2\x331B\x331C\x5\x42A\x216\x2\x331C\x331D\a\x4BC\x2\x2\x331D"+
		"\x331E\x5\x39C\x1CF\x2\x331E\x331F\a\x4BB\x2\x2\x331F\x3547\x3\x2\x2\x2"+
		"\x3320\x3321\a\x466\x2\x2\x3321\x3322\a\x4BA\x2\x2\x3322\x3323\x5\x39C"+
		"\x1CF\x2\x3323\x3324\a\x4BC\x2\x2\x3324\x3325\x5\x39C\x1CF\x2\x3325\x3326"+
		"\a\x4BC\x2\x2\x3326\x3327\x5\x39C\x1CF\x2\x3327\x3328\a\x4BC\x2\x2\x3328"+
		"\x3329\x5\x39C\x1CF\x2\x3329\x332A\a\x4BC\x2\x2\x332A\x332B\x5\x39C\x1CF"+
		"\x2\x332B\x332C\a\x4BC\x2\x2\x332C\x332D\x5\x39C\x1CF\x2\x332D\x332E\a"+
		"\x4BC\x2\x2\x332E\x332F\x5\x39C\x1CF\x2\x332F\x3330\a\x4BC\x2\x2\x3330"+
		"\x3331\x5\x39C\x1CF\x2\x3331\x3332\a\x4BB\x2\x2\x3332\x3547\x3\x2\x2\x2"+
		"\x3333\x3334\a\x467\x2\x2\x3334\x3335\a\x4BA\x2\x2\x3335\x3336\x5\x39C"+
		"\x1CF\x2\x3336\x3337\a\x4BC\x2\x2\x3337\x3338\x5\x39C\x1CF\x2\x3338\x3339"+
		"\a\x4BC\x2\x2\x3339\x333A\x5\x39C\x1CF\x2\x333A\x333B\a\x4BC\x2\x2\x333B"+
		"\x333C\x5\x39C\x1CF\x2\x333C\x333D\a\x4BC\x2\x2\x333D\x333E\x5\x39C\x1CF"+
		"\x2\x333E\x333F\a\x4BC\x2\x2\x333F\x3340\x5\x39C\x1CF\x2\x3340\x3341\a"+
		"\x4BC\x2\x2\x3341\x3342\x5\x39C\x1CF\x2\x3342\x3343\a\x4BB\x2\x2\x3343"+
		"\x3547\x3\x2\x2\x2\x3344\x3345\a\x468\x2\x2\x3345\x3346\a\x4BA\x2\x2\x3346"+
		"\x3347\x5\x39C\x1CF\x2\x3347\x3348\a\x4BC\x2\x2\x3348\x3349\x5\x39C\x1CF"+
		"\x2\x3349\x334A\a\x4BC\x2\x2\x334A\x334B\x5\x39C\x1CF\x2\x334B\x334C\a"+
		"\x4BC\x2\x2\x334C\x334D\x5\x39C\x1CF\x2\x334D\x334E\a\x4BC\x2\x2\x334E"+
		"\x334F\x5\x39C\x1CF\x2\x334F\x3350\a\x4BC\x2\x2\x3350\x3351\x5\x39C\x1CF"+
		"\x2\x3351\x3352\a\x4BC\x2\x2\x3352\x3353\x5\x39C\x1CF\x2\x3353\x3354\a"+
		"\x4BC\x2\x2\x3354\x3355\x5\x39C\x1CF\x2\x3355\x3356\a\x4BC\x2\x2\x3356"+
		"\x3357\x5\x39C\x1CF\x2\x3357\x3358\a\x4BC\x2\x2\x3358\x3359\a\x4A2\x2"+
		"\x2\x3359\x335A\a\x4BB\x2\x2\x335A\x3547\x3\x2\x2\x2\x335B\x335C\a\x469"+
		"\x2\x2\x335C\x335D\a\x4BA\x2\x2\x335D\x335E\x5\x42C\x217\x2\x335E\x335F"+
		"\a\x4BC\x2\x2\x335F\x3360\x5\x39C\x1CF\x2\x3360\x3361\a\x4BB\x2\x2\x3361"+
		"\x3547\x3\x2\x2\x2\x3362\x3363\a\x46A\x2\x2\x3363\x3364\a\x4BA\x2\x2\x3364"+
		"\x3365\x5\x39C\x1CF\x2\x3365\x3366\a\x4BB\x2\x2\x3366\x3547\x3\x2\x2\x2"+
		"\x3367\x3368\a\x46B\x2\x2\x3368\x3369\a\x4BA\x2\x2\x3369\x336C\x5\x39C"+
		"\x1CF\x2\x336A\x336B\a\x4BC\x2\x2\x336B\x336D\x5\x39C\x1CF\x2\x336C\x336A"+
		"\x3\x2\x2\x2\x336C\x336D\x3\x2\x2\x2\x336D\x336E\x3\x2\x2\x2\x336E\x336F"+
		"\a\x4BB\x2\x2\x336F\x3547\x3\x2\x2\x2\x3370\x3371\a\x18D\x2\x2\x3371\x3372"+
		"\a\x4BA\x2\x2\x3372\x3547\a\x4BB\x2\x2\x3373\x3374\a\x192\x2\x2\x3374"+
		"\x3375\a\x4BA\x2\x2\x3375\x3547\a\x4BB\x2\x2\x3376\x3377\a\x46C\x2\x2"+
		"\x3377\x3378\a\x4BA\x2\x2\x3378\x3379\x5\x39C\x1CF\x2\x3379\x337A\a\x4BB"+
		"\x2\x2\x337A\x3547\x3\x2\x2\x2\x337B\x337C\a\x46D\x2\x2\x337C\x337D\a"+
		"\x4BA\x2\x2\x337D\x337E\x5\x39C\x1CF\x2\x337E\x337F\a\x4BB\x2\x2\x337F"+
		"\x3547\x3\x2\x2\x2\x3380\x3381\a\x46E\x2\x2\x3381\x3382\a\x4BA\x2\x2\x3382"+
		"\x3383\x5\x39C\x1CF\x2\x3383\x3384\a\x4BC\x2\x2\x3384\x3385\x5\x39C\x1CF"+
		"\x2\x3385\x3386\a\x4BC\x2\x2\x3386\x3387\x5\x39C\x1CF\x2\x3387\x3388\a"+
		"\x4BC\x2\x2\x3388\x3389\x5\x39C\x1CF\x2\x3389\x338A\a\x4BC\x2\x2\x338A"+
		"\x338B\x5\x39C\x1CF\x2\x338B\x338C\a\x4BB\x2\x2\x338C\x3547\x3\x2\x2\x2"+
		"\x338D\x338E\a\x46F\x2\x2\x338E\x338F\a\x4BA\x2\x2\x338F\x3390\x5\x39C"+
		"\x1CF\x2\x3390\x3391\a\x4BC\x2\x2\x3391\x3392\x5\x39C\x1CF\x2\x3392\x3393"+
		"\a\x4BB\x2\x2\x3393\x3547\x3\x2\x2\x2\x3394\x3395\a\x470\x2\x2\x3395\x3396"+
		"\a\x4BA\x2\x2\x3396\x3547\a\x4BB\x2\x2\x3397\x3398\a\x471\x2\x2\x3398"+
		"\x3399\a\x4BA\x2\x2\x3399\x3547\a\x4BB\x2\x2\x339A\x339B\a\x472\x2\x2"+
		"\x339B\x339C\a\x4BA\x2\x2\x339C\x3547\a\x4BB\x2\x2\x339D\x339E\a\x473"+
		"\x2\x2\x339E\x339F\a\x4BA\x2\x2\x339F\x33A0\x5\x39C\x1CF\x2\x33A0\x33A1"+
		"\a\x4BC\x2\x2\x33A1\x33A2\x5\x39C\x1CF\x2\x33A2\x33A3\a\x4BC\x2\x2\x33A3"+
		"\x33A4\x5\x39C\x1CF\x2\x33A4\x33A5\a\x4BC\x2\x2\x33A5\x33A6\x5\x39C\x1CF"+
		"\x2\x33A6\x33A7\a\x4BC\x2\x2\x33A7\x33A8\a\x4A2\x2\x2\x33A8\x33A9\a\x4BB"+
		"\x2\x2\x33A9\x3547\x3\x2\x2\x2\x33AA\x33AB\a\x474\x2\x2\x33AB\x33AC\a"+
		"\x4BA\x2\x2\x33AC\x33AD\x5\x39C\x1CF\x2\x33AD\x33AE\a\x4BC\x2\x2\x33AE"+
		"\x33AF\x5\x39C\x1CF\x2\x33AF\x33B0\a\x4BB\x2\x2\x33B0\x3547\x3\x2\x2\x2"+
		"\x33B1\x33B2\a\x475\x2\x2\x33B2\x33B3\a\x4BA\x2\x2\x33B3\x33B4\x5\x39C"+
		"\x1CF\x2\x33B4\x33B5\a\x4BB\x2\x2\x33B5\x3547\x3\x2\x2\x2\x33B6\x33B7"+
		"\a\x1AF\x2\x2\x33B7\x33B8\a\x4BA\x2\x2\x33B8\x33BB\x5\x4BA\x25E\x2\x33B9"+
		"\x33BA\a\x4BC\x2\x2\x33BA\x33BC\a\x4A2\x2\x2\x33BB\x33B9\x3\x2\x2\x2\x33BB"+
		"\x33BC\x3\x2\x2\x2\x33BC\x33BF\x3\x2\x2\x2\x33BD\x33BE\a\x4BC\x2\x2\x33BE"+
		"\x33C0\a\x4A2\x2\x2\x33BF\x33BD\x3\x2\x2\x2\x33BF\x33C0\x3\x2\x2\x2\x33C0"+
		"\x33C1\x3\x2\x2\x2\x33C1\x33C2\a\x4BB\x2\x2\x33C2\x3547\x3\x2\x2\x2\x33C3"+
		"\x33C4\a\x246\x2\x2\x33C4\x33C5\a\x4BA\x2\x2\x33C5\x3547\a\x4BB\x2\x2"+
		"\x33C6\x33C7\a\x280\x2\x2\x33C7\x33C8\a\x4BA\x2\x2\x33C8\x33C9\x5\x39C"+
		"\x1CF\x2\x33C9\x33CA\a\x4BC\x2\x2\x33CA\x33CB\x5\x39C\x1CF\x2\x33CB\x33CC"+
		"\a\x4BB\x2\x2\x33CC\x3547\x3\x2\x2\x2\x33CD\x33CE\a\x2B7\x2\x2\x33CE\x33CF"+
		"\a\x4BA\x2\x2\x33CF\x33D0\x5\x39C\x1CF\x2\x33D0\x33D1\a:\x2\x2\x33D1\x33D4"+
		"\x5\x4BA\x25E\x2\x33D2\x33D3\a\x41F\x2\x2\x33D3\x33D5\x5\x39C\x1CF\x2"+
		"\x33D4\x33D2\x3\x2\x2\x2\x33D4\x33D5\x3\x2\x2\x2\x33D5\x33D6\x3\x2\x2"+
		"\x2\x33D6\x33D7\a\x4BB\x2\x2\x33D7\x3547\x3\x2\x2\x2\x33D8\x3547\x5\x424"+
		"\x213\x2\x33D9\x33DA\a\x1BC\x2\x2\x33DA\x33DB\a\x4BA\x2\x2\x33DB\x33DC"+
		"\x5\x3B4\x1DB\x2\x33DC\x33DD\a\x4BC\x2\x2\x33DD\x33DE\x5\x39C\x1CF\x2"+
		"\x33DE\x33DF\a\x4BC\x2\x2\x33DF\x33E0\x5\x39C\x1CF\x2\x33E0\x33E1\a\x4BB"+
		"\x2\x2\x33E1\x3547\x3\x2\x2\x2\x33E2\x33E3\a\x1DB\x2\x2\x33E3\x33E4\a"+
		"\x4BA\x2\x2\x33E4\x33E7\x5\x39C\x1CF\x2\x33E5\x33E6\a\x4BC\x2\x2\x33E6"+
		"\x33E8\x5\x39C\x1CF\x2\x33E7\x33E5\x3\x2\x2\x2\x33E7\x33E8\x3\x2\x2\x2"+
		"\x33E8\x33E9\x3\x2\x2\x2\x33E9\x33EA\a\x4BB\x2\x2\x33EA\x3547\x3\x2\x2"+
		"\x2\x33EB\x33EC\a\x1E7\x2\x2\x33EC\x33F5\a\x4BA\x2\x2\x33ED\x33F2\x5\x41E"+
		"\x210\x2\x33EE\x33EF\a\x4BC\x2\x2\x33EF\x33F1\x5\x41E\x210\x2\x33F0\x33EE"+
		"\x3\x2\x2\x2\x33F1\x33F4\x3\x2\x2\x2\x33F2\x33F0\x3\x2\x2\x2\x33F2\x33F3"+
		"\x3\x2\x2\x2\x33F3\x33F6\x3\x2\x2\x2\x33F4\x33F2\x3\x2\x2\x2\x33F5\x33ED"+
		"\x3\x2\x2\x2\x33F5\x33F6\x3\x2\x2\x2\x33F6\x33F8\x3\x2\x2\x2\x33F7\x33F9"+
		"\x5\x420\x211\x2\x33F8\x33F7\x3\x2\x2\x2\x33F8\x33F9\x3\x2\x2\x2\x33F9"+
		"\x33FA\x3\x2\x2\x2\x33FA\x3547\a\x4BB\x2\x2\x33FB\x33FC\a\x1E5\x2\x2\x33FC"+
		"\x33FE\a\x4BA\x2\x2\x33FD\x33FF\x5\x460\x231\x2\x33FE\x33FD\x3\x2\x2\x2"+
		"\x33FE\x33FF\x3\x2\x2\x2\x33FF\x3401\x3\x2\x2\x2\x3400\x3402\x5\x420\x211"+
		"\x2\x3401\x3400\x3\x2\x2\x2\x3401\x3402\x3\x2\x2\x2\x3402\x3403\x3\x2"+
		"\x2\x2\x3403\x3547\a\x4BB\x2\x2\x3404\x3405\a\x1EA\x2\x2\x3405\x3406\a"+
		"\x4BA\x2\x2\x3406\x3407\x5\x39C\x1CF\x2\x3407\x3408\a\x4BC\x2\x2\x3408"+
		"\x3409\x5\x39C\x1CF\x2\x3409\x340A\a\x4BB\x2\x2\x340A\x3547\x3\x2\x2\x2"+
		"\x340B\x340C\a\x1E9\x2\x2\x340C\x340D\a\x4BA\x2\x2\x340D\x3410\x5\x39C"+
		"\x1CF\x2\x340E\x340F\a\x4BC\x2\x2\x340F\x3411\x5\x39C\x1CF\x2\x3410\x340E"+
		"\x3\x2\x2\x2\x3410\x3411\x3\x2\x2\x2\x3411\x3412\x3\x2\x2\x2\x3412\x3413"+
		"\a\x4BB\x2\x2\x3413\x3547\x3\x2\x2\x2\x3414\x3415\a\x1E6\x2\x2\x3415\x3416"+
		"\a\x4BA\x2\x2\x3416\x3417\x5\x39C\x1CF\x2\x3417\x3418\a\x4BC\x2\x2\x3418"+
		"\x3419\x5\x39C\x1CF\x2\x3419\x341A\a\x4BC\x2\x2\x341A\x341B\x5\x39C\x1CF"+
		"\x2\x341B\x341C\a\x4BB\x2\x2\x341C\x3547\x3\x2\x2\x2\x341D\x341E\a\x1E8"+
		"\x2\x2\x341E\x341F\a\x4BA\x2\x2\x341F\x3420\x5\x39C\x1CF\x2\x3420\x3421"+
		"\a\x4BC\x2\x2\x3421\x3422\x5\x39C\x1CF\x2\x3422\x3423\a\x4BB\x2\x2\x3423"+
		"\x3547\x3\x2\x2\x2\x3424\x3425\a\x44B\x2\x2\x3425\x3426\a\x4BA\x2\x2\x3426"+
		"\x3427\x5\x39C\x1CF\x2\x3427\x3428\a\x4BB\x2\x2\x3428\x3547\x3\x2\x2\x2"+
		"\x3429\x342A\a\x44C\x2\x2\x342A\x342B\a\x4BA\x2\x2\x342B\x342C\x5\x39C"+
		"\x1CF\x2\x342C\x342D\a\x4BB\x2\x2\x342D\x3547\x3\x2\x2\x2\x342E\x342F"+
		"\a\x44D\x2\x2\x342F\x3430\a\x4BA\x2\x2\x3430\x3431\x5\x39C\x1CF\x2\x3431"+
		"\x3432\a\x4BB\x2\x2\x3432\x3547\x3\x2\x2\x2\x3433\x3434\a\x44E\x2\x2\x3434"+
		"\x3435\a\x4BA\x2\x2\x3435\x3436\x5\x39C\x1CF\x2\x3436\x3437\a\x4BB\x2"+
		"\x2\x3437\x3547\x3\x2\x2\x2\x3438\x3439\a\x44F\x2\x2\x3439\x343A\a\x4BA"+
		"\x2\x2\x343A\x343B\x5\x39C\x1CF\x2\x343B\x343C\a\x4BC\x2\x2\x343C\x343D"+
		"\x5\x39C\x1CF\x2\x343D\x343E\a\x4BB\x2\x2\x343E\x3547\x3\x2\x2\x2\x343F"+
		"\x3440\a\x450\x2\x2\x3440\x3441\a\x4BA\x2\x2\x3441\x3442\x5\x39C\x1CF"+
		"\x2\x3442\x3443\a\x4BB\x2\x2\x3443\x3547\x3\x2\x2\x2\x3444\x3445\a\x451"+
		"\x2\x2\x3445\x3446\a\x4BA\x2\x2\x3446\x3447\x5\x39C\x1CF\x2\x3447\x3448"+
		"\a\x4BB\x2\x2\x3448\x3547\x3\x2\x2\x2\x3449\x344A\a\x452\x2\x2\x344A\x344B"+
		"\a\x4BA\x2\x2\x344B\x344C\x5\x39C\x1CF\x2\x344C\x344D\a\x4BB\x2\x2\x344D"+
		"\x3547\x3\x2\x2\x2\x344E\x344F\a\x453\x2\x2\x344F\x3450\a\x4BA\x2\x2\x3450"+
		"\x3451\x5\x39C\x1CF\x2\x3451\x3452\a\x4BB\x2\x2\x3452\x3547\x3\x2\x2\x2"+
		"\x3453\x3454\a\x454\x2\x2\x3454\x3455\a\x4BA\x2\x2\x3455\x3456\x5\x39C"+
		"\x1CF\x2\x3456\x3457\a\x4BB\x2\x2\x3457\x3547\x3\x2\x2\x2\x3458\x3459"+
		"\a\x455\x2\x2\x3459\x345A\a\x4BA\x2\x2\x345A\x345B\x5\x39C\x1CF\x2\x345B"+
		"\x345C\a\x4BB\x2\x2\x345C\x3547\x3\x2\x2\x2\x345D\x345E\a\x214\x2\x2\x345E"+
		"\x345F\a\x4BA\x2\x2\x345F\x3462\x5\x39C\x1CF\x2\x3460\x3461\a\x4BC\x2"+
		"\x2\x3461\x3463\x5\x39C\x1CF\x2\x3462\x3460\x3\x2\x2\x2\x3462\x3463\x3"+
		"\x2\x2\x2\x3463\x3464\x3\x2\x2\x2\x3464\x3465\a\x4BB\x2\x2\x3465\x3547"+
		"\x3\x2\x2\x2\x3466\x3467\a\x456\x2\x2\x3467\x3468\a\x4BA\x2\x2\x3468\x3469"+
		"\x5\x39C\x1CF\x2\x3469\x346A\a\x4BB\x2\x2\x346A\x3547\x3\x2\x2\x2\x346B"+
		"\x346C\a\x457\x2\x2\x346C\x346D\a\x4BA\x2\x2\x346D\x3547\a\x4BB\x2\x2"+
		"\x346E\x346F\a\x458\x2\x2\x346F\x3470\a\x4BA\x2\x2\x3470\x3471\x5\x39C"+
		"\x1CF\x2\x3471\x3472\a\x4BC\x2\x2\x3472\x3473\x5\x39C\x1CF\x2\x3473\x3474"+
		"\a\x4BB\x2\x2\x3474\x3547\x3\x2\x2\x2\x3475\x3476\a\x459\x2\x2\x3476\x3477"+
		"\a\x4BA\x2\x2\x3477\x3478\x5\x39C\x1CF\x2\x3478\x3479\a\x4BB\x2\x2\x3479"+
		"\x3547\x3\x2\x2\x2\x347A\x347B\a\x45A\x2\x2\x347B\x347D\a\x4BA\x2\x2\x347C"+
		"\x347E\x5\x39C\x1CF\x2\x347D\x347C\x3\x2\x2\x2\x347D\x347E\x3\x2\x2\x2"+
		"\x347E\x347F\x3\x2\x2\x2\x347F\x3547\a\x4BB\x2\x2\x3480\x3481\a\x45B\x2"+
		"\x2\x3481\x3482\a\x4BA\x2\x2\x3482\x3483\x5\x39C\x1CF\x2\x3483\x3484\a"+
		"\x4BC\x2\x2\x3484\x3487\x5\x39C\x1CF\x2\x3485\x3486\a\x4BC\x2\x2\x3486"+
		"\x3488\x5\x39C\x1CF\x2\x3487\x3485\x3\x2\x2\x2\x3487\x3488\x3\x2\x2\x2"+
		"\x3488\x3489\x3\x2\x2\x2\x3489\x348A\a\x4BB\x2\x2\x348A\x3547\x3\x2\x2"+
		"\x2\x348B\x348C\a\x45C\x2\x2\x348C\x348D\a\x4BA\x2\x2\x348D\x348E\x5\x39C"+
		"\x1CF\x2\x348E\x348F\a\x4BB\x2\x2\x348F\x3547\x3\x2\x2\x2\x3490\x3491"+
		"\a\x45D\x2\x2\x3491\x3492\a\x4BA\x2\x2\x3492\x3493\x5\x39C\x1CF\x2\x3493"+
		"\x3494\a\x4BB\x2\x2\x3494\x3547\x3\x2\x2\x2\x3495\x3496\a\x45E\x2\x2\x3496"+
		"\x3497\a\x4BA\x2\x2\x3497\x3498\x5\x39C\x1CF\x2\x3498\x3499\a\x4BB\x2"+
		"\x2\x3499\x3547\x3\x2\x2\x2\x349A\x349B\a\x45F\x2\x2\x349B\x349C\a\x4BA"+
		"\x2\x2\x349C\x349D\x5\x39C\x1CF\x2\x349D\x349E\a\x4BB\x2\x2\x349E\x3547"+
		"\x3\x2\x2\x2\x349F\x34A0\a\x460\x2\x2\x34A0\x34A1\a\x4BA\x2\x2\x34A1\x34A2"+
		"\x5\x39C\x1CF\x2\x34A2\x34A3\a\x4BB\x2\x2\x34A3\x3547\x3\x2\x2\x2\x34A4"+
		"\x34A5\a\x199\x2\x2\x34A5\x34A6\a\x4BA\x2\x2\x34A6\x34A7\x5\x460\x231"+
		"\x2\x34A7\x34A8\a\x4BB\x2\x2\x34A8\x3547\x3\x2\x2\x2\x34A9\x34AA\a\x1FD"+
		"\x2\x2\x34AA\x34AB\a\x4BA\x2\x2\x34AB\x34AC\x5\x460\x231\x2\x34AC\x34AD"+
		"\a\x4BB\x2\x2\x34AD\x3547\x3\x2\x2\x2\x34AE\x34AF\a{\x2\x2\x34AF\x34B0"+
		"\a\x4BA\x2\x2\x34B0\x34B1\x5\x39C\x1CF\x2\x34B1\x34B2\a\x4BB\x2\x2\x34B2"+
		"\x3547\x3\x2\x2\x2\x34B3\x34B4\a}\x2\x2\x34B4\x34B5\a\x4BA\x2\x2\x34B5"+
		"\x34B6\x5\x39C\x1CF\x2\x34B6\x34B7\a\x4BC\x2\x2\x34B7\x34BA\x5\x39C\x1CF"+
		"\x2\x34B8\x34B9\a\x4BC\x2\x2\x34B9\x34BB\x5\x39C\x1CF\x2\x34BA\x34B8\x3"+
		"\x2\x2\x2\x34BA\x34BB\x3\x2\x2\x2\x34BB\x34BC\x3\x2\x2\x2\x34BC\x34BD"+
		"\a\x4BB\x2\x2\x34BD\x3547\x3\x2\x2\x2\x34BE\x3547\a\xD6\x2\x2\x34BF\x34C0"+
		"\a\xE1\x2\x2\x34C0\x34C2\a\x4BA\x2\x2\x34C1\x34C3\x5\x39C\x1CF\x2\x34C2"+
		"\x34C1\x3\x2\x2\x2\x34C2\x34C3\x3\x2\x2\x2\x34C3\x34C4\x3\x2\x2\x2\x34C4"+
		"\x3547\a\x4BB\x2\x2\x34C5\x34C6\a\x1A1\x2\x2\x34C6\x34C7\a\x4BA\x2\x2"+
		"\x34C7\x34C8\x5\x39C\x1CF\x2\x34C8\x34C9\a\x4BB\x2\x2\x34C9\x3547\x3\x2"+
		"\x2\x2\x34CA\x34CB\a\x1A2\x2\x2\x34CB\x34CC\a\x4BA\x2\x2\x34CC\x34CD\x5"+
		"\x39C\x1CF\x2\x34CD\x34CE\a\x4BC\x2\x2\x34CE\x34CF\x5\x39C\x1CF\x2\x34CF"+
		"\x34D0\a\x4BC\x2\x2\x34D0\x34D7\x5\x39C\x1CF\x2\x34D1\x34D2\a\x4BC\x2"+
		"\x2\x34D2\x34D5\x5\x39C\x1CF\x2\x34D3\x34D4\a\x4BC\x2\x2\x34D4\x34D6\x5"+
		"\x39C\x1CF\x2\x34D5\x34D3\x3\x2\x2\x2\x34D5\x34D6\x3\x2\x2\x2\x34D6\x34D8"+
		"\x3\x2\x2\x2\x34D7\x34D1\x3\x2\x2\x2\x34D7\x34D8\x3\x2\x2\x2\x34D8\x34D9"+
		"\x3\x2\x2\x2\x34D9\x34DA\a\x4BB\x2\x2\x34DA\x3547\x3\x2\x2\x2\x34DB\x34DC"+
		"\a\x1DF\x2\x2\x34DC\x34DD\a\x4BA\x2\x2\x34DD\x34DE\x5\x39C\x1CF\x2\x34DE"+
		"\x34DF\a\x4BB\x2\x2\x34DF\x3547\x3\x2\x2\x2\x34E0\x34E1\a\x1E0\x2\x2\x34E1"+
		"\x34E2\a\x4BA\x2\x2\x34E2\x34E5\x5\x39C\x1CF\x2\x34E3\x34E4\a\x4BC\x2"+
		"\x2\x34E4\x34E6\x5\x39C\x1CF\x2\x34E5\x34E3\x3\x2\x2\x2\x34E5\x34E6\x3"+
		"\x2\x2\x2\x34E6\x34E7\x3\x2\x2\x2\x34E7\x34E8\a\x4BB\x2\x2\x34E8\x3547"+
		"\x3\x2\x2\x2\x34E9\x34EA\a\x1E1\x2\x2\x34EA\x34EB\a\x4BA\x2\x2\x34EB\x34EE"+
		"\x5\x39C\x1CF\x2\x34EC\x34ED\a\x4BC\x2\x2\x34ED\x34EF\x5\x39C\x1CF\x2"+
		"\x34EE\x34EC\x3\x2\x2\x2\x34EE\x34EF\x3\x2\x2\x2\x34EF\x34F0\x3\x2\x2"+
		"\x2\x34F0\x34F1\a\x4BB\x2\x2\x34F1\x3547\x3\x2\x2\x2\x34F2\x34F3\a\x216"+
		"\x2\x2\x34F3\x34F4\a\x4BA\x2\x2\x34F4\x34F5\x5\x39C\x1CF\x2\x34F5\x34F6"+
		"\a\x4BC\x2\x2\x34F6\x34F7\x5\x39C\x1CF\x2\x34F7\x34F8\a\x4BB\x2\x2\x34F8"+
		"\x3547\x3\x2\x2\x2\x34F9\x34FA\a\x2A8\x2\x2\x34FA\x34FB\a\x4BA\x2\x2\x34FB"+
		"\x3547\a\x4BB\x2\x2\x34FC\x34FD\a\x2C7\x2\x2\x34FD\x3503\a\x4BA\x2\x2"+
		"\x34FE\x3501\x5\x39C\x1CF\x2\x34FF\x3500\a\x4BC\x2\x2\x3500\x3502\x5\x39C"+
		"\x1CF\x2\x3501\x34FF\x3\x2\x2\x2\x3501\x3502\x3\x2\x2\x2\x3502\x3504\x3"+
		"\x2\x2\x2\x3503\x34FE\x3\x2\x2\x2\x3503\x3504\x3\x2\x2\x2\x3504\x3505"+
		"\x3\x2\x2\x2\x3505\x3547\a\x4BB\x2\x2\x3506\x3507\a\x2ED\x2\x2\x3507\x3508"+
		"\a\x4BA\x2\x2\x3508\x3509\x5\x39C\x1CF\x2\x3509\x350A\a\x4BB\x2\x2\x350A"+
		"\x3547\x3\x2\x2\x2\x350B\x350C\a\x2EC\x2\x2\x350C\x350D\a\x4BA\x2\x2\x350D"+
		"\x350E\x5\x39C\x1CF\x2\x350E\x350F\a\x4BC\x2\x2\x350F\x3512\x5\x39C\x1CF"+
		"\x2\x3510\x3511\a\x4BC\x2\x2\x3511\x3513\x5\x39C\x1CF\x2\x3512\x3510\x3"+
		"\x2\x2\x2\x3512\x3513\x3\x2\x2\x2\x3513\x3514\x3\x2\x2\x2\x3514\x3515"+
		"\a\x4BB\x2\x2\x3515\x3547\x3\x2\x2\x2\x3516\x3547\a\x385\x2\x2\x3517\x3518"+
		"\a\x382\x2\x2\x3518\x3519\a\x4BA\x2\x2\x3519\x351A\x5\x39C\x1CF\x2\x351A"+
		"\x351B\a\x4BB\x2\x2\x351B\x3547\x3\x2\x2\x2\x351C\x351D\a\x3CC\x2\x2\x351D"+
		"\x351F\a\x4BA\x2\x2\x351E\x3520\x5\x39C\x1CF\x2\x351F\x351E\x3\x2\x2\x2"+
		"\x351F\x3520\x3\x2\x2\x2\x3520\x3521\x3\x2\x2\x2\x3521\x3547\a\x4BB\x2"+
		"\x2\x3522\x3523\a\x3CD\x2\x2\x3523\x3525\a\x4BA\x2\x2\x3524\x3526\x5\x39C"+
		"\x1CF\x2\x3525\x3524\x3\x2\x2\x2\x3525\x3526\x3\x2\x2\x2\x3526\x3527\x3"+
		"\x2\x2\x2\x3527\x3547\a\x4BB\x2\x2\x3528\x3529\a\x3CE\x2\x2\x3529\x352F"+
		"\a\x4BA\x2\x2\x352A\x352D\x5\x39C\x1CF\x2\x352B\x352C\a\x4BC\x2\x2\x352C"+
		"\x352E\x5\x39C\x1CF\x2\x352D\x352B\x3\x2\x2\x2\x352D\x352E\x3\x2\x2\x2"+
		"\x352E\x3530\x3\x2\x2\x2\x352F\x352A\x3\x2\x2\x2\x352F\x3530\x3\x2\x2"+
		"\x2\x3530\x3531\x3\x2\x2\x2\x3531\x3547\a\x4BB\x2\x2\x3532\x3533\a\x3CF"+
		"\x2\x2\x3533\x3535\a\x4BA\x2\x2\x3534\x3536\x5\x39C\x1CF\x2\x3535\x3534"+
		"\x3\x2\x2\x2\x3535\x3536\x3\x2\x2\x2\x3536\x3537\x3\x2\x2\x2\x3537\x3547"+
		"\a\x4BB\x2\x2\x3538\x3547\a\x3D6\x2\x2\x3539\x3547\a\x41C\x2\x2\x353A"+
		"\x353B\a\x41D\x2\x2\x353B\x353D\a\x4BA\x2\x2\x353C\x353E\x5\x39C\x1CF"+
		"\x2\x353D\x353C\x3\x2\x2\x2\x353D\x353E\x3\x2\x2\x2\x353E\x353F\x3\x2"+
		"\x2\x2\x353F\x3547\a\x4BB\x2\x2\x3540\x3541\a\x41E\x2\x2\x3541\x3543\a"+
		"\x4BA\x2\x2\x3542\x3544\x5\x39C\x1CF\x2\x3543\x3542\x3\x2\x2\x2\x3543"+
		"\x3544\x3\x2\x2\x2\x3544\x3545\x3\x2\x2\x2\x3545\x3547\a\x4BB\x2\x2\x3546"+
		"\x3004\x3\x2\x2\x2\x3546\x3007\x3\x2\x2\x2\x3546\x3010\x3\x2\x2\x2\x3546"+
		"\x301B\x3\x2\x2\x2\x3546\x3022\x3\x2\x2\x2\x3546\x3029\x3\x2\x2\x2\x3546"+
		"\x3030\x3\x2\x2\x2\x3546\x3039\x3\x2\x2\x2\x3546\x3040\x3\x2\x2\x2\x3546"+
		"\x3046\x3\x2\x2\x2\x3546\x304C\x3\x2\x2\x2\x3546\x3051\x3\x2\x2\x2\x3546"+
		"\x3056\x3\x2\x2\x2\x3546\x305B\x3\x2\x2\x2\x3546\x3060\x3\x2\x2\x2\x3546"+
		"\x3065\x3\x2\x2\x2\x3546\x306C\x3\x2\x2\x2\x3546\x3073\x3\x2\x2\x2\x3546"+
		"\x307A\x3\x2\x2\x2\x3546\x3081\x3\x2\x2\x2\x3546\x3086\x3\x2\x2\x2\x3546"+
		"\x308F\x3\x2\x2\x2\x3546\x309A\x3\x2\x2\x2\x3546\x30A3\x3\x2\x2\x2\x3546"+
		"\x30AE\x3\x2\x2\x2\x3546\x30B3\x3\x2\x2\x2\x3546\x30BC\x3\x2\x2\x2\x3546"+
		"\x30C5\x3\x2\x2\x2\x3546\x30CE\x3\x2\x2\x2\x3546\x30D5\x3\x2\x2\x2\x3546"+
		"\x30DC\x3\x2\x2\x2\x3546\x30DF\x3\x2\x2\x2\x3546\x30E6\x3\x2\x2\x2\x3546"+
		"\x30EC\x3\x2\x2\x2\x3546\x30F2\x3\x2\x2\x2\x3546\x30F5\x3\x2\x2\x2\x3546"+
		"\x30FA\x3\x2\x2\x2\x3546\x3101\x3\x2\x2\x2\x3546\x3106\x3\x2\x2\x2\x3546"+
		"\x310B\x3\x2\x2\x2\x3546\x3112\x3\x2\x2\x2\x3546\x3117\x3\x2\x2\x2\x3546"+
		"\x311C\x3\x2\x2\x2\x3546\x3127\x3\x2\x2\x2\x3546\x3135\x3\x2\x2\x2\x3546"+
		"\x3145\x3\x2\x2\x2\x3546\x314C\x3\x2\x2\x2\x3546\x3157\x3\x2\x2\x2\x3546"+
		"\x315E\x3\x2\x2\x2\x3546\x3163\x3\x2\x2\x2\x3546\x3168\x3\x2\x2\x2\x3546"+
		"\x316D\x3\x2\x2\x2\x3546\x3172\x3\x2\x2\x2\x3546\x3179\x3\x2\x2\x2\x3546"+
		"\x3182\x3\x2\x2\x2\x3546\x318B\x3\x2\x2\x2\x3546\x3192\x3\x2\x2\x2\x3546"+
		"\x3197\x3\x2\x2\x2\x3546\x319E\x3\x2\x2\x2\x3546\x31A3\x3\x2\x2\x2\x3546"+
		"\x31A8\x3\x2\x2\x2\x3546\x31AD\x3\x2\x2\x2\x3546\x31BA\x3\x2\x2\x2\x3546"+
		"\x31C8\x3\x2\x2\x2\x3546\x31CF\x3\x2\x2\x2\x3546\x31DA\x3\x2\x2\x2\x3546"+
		"\x31E3\x3\x2\x2\x2\x3546\x31EC\x3\x2\x2\x2\x3546\x31F6\x3\x2\x2\x2\x3546"+
		"\x31FB\x3\x2\x2\x2\x3546\x3200\x3\x2\x2\x2\x3546\x320E\x3\x2\x2\x2\x3546"+
		"\x321C\x3\x2\x2\x2\x3546\x3221\x3\x2\x2\x2\x3546\x3225\x3\x2\x2\x2\x3546"+
		"\x3228\x3\x2\x2\x2\x3546\x322B\x3\x2\x2\x2\x3546\x322E\x3\x2\x2\x2\x3546"+
		"\x3233\x3\x2\x2\x2\x3546\x3236\x3\x2\x2\x2\x3546\x3239\x3\x2\x2\x2\x3546"+
		"\x323C\x3\x2\x2\x2\x3546\x323F\x3\x2\x2\x2\x3546\x3242\x3\x2\x2\x2\x3546"+
		"\x3245\x3\x2\x2\x2\x3546\x3257\x3\x2\x2\x2\x3546\x325A\x3\x2\x2\x2\x3546"+
		"\x3260\x3\x2\x2\x2\x3546\x3263\x3\x2\x2\x2\x3546\x3266\x3\x2\x2\x2\x3546"+
		"\x326D\x3\x2\x2\x2\x3546\x3272\x3\x2\x2\x2\x3546\x3275\x3\x2\x2\x2\x3546"+
		"\x3278\x3\x2\x2\x2\x3546\x327B\x3\x2\x2\x2\x3546\x327E\x3\x2\x2\x2\x3546"+
		"\x3282\x3\x2\x2\x2\x3546\x3285\x3\x2\x2\x2\x3546\x328C\x3\x2\x2\x2\x3546"+
		"\x3293\x3\x2\x2\x2\x3546\x329E\x3\x2\x2\x2\x3546\x32A3\x3\x2\x2\x2\x3546"+
		"\x32A4\x3\x2\x2\x2\x3546\x32A5\x3\x2\x2\x2\x3546\x32AC\x3\x2\x2\x2\x3546"+
		"\x32B1\x3\x2\x2\x2\x3546\x32B6\x3\x2\x2\x2\x3546\x32BB\x3\x2\x2\x2\x3546"+
		"\x32C0\x3\x2\x2\x2\x3546\x32C5\x3\x2\x2\x2\x3546\x32D0\x3\x2\x2\x2\x3546"+
		"\x32D7\x3\x2\x2\x2\x3546\x32DA\x3\x2\x2\x2\x3546\x32DB\x3\x2\x2\x2\x3546"+
		"\x32DE\x3\x2\x2\x2\x3546\x32E1\x3\x2\x2\x2\x3546\x32EE\x3\x2\x2\x2\x3546"+
		"\x32F7\x3\x2\x2\x2\x3546\x3300\x3\x2\x2\x2\x3546\x3309\x3\x2\x2\x2\x3546"+
		"\x3312\x3\x2\x2\x2\x3546\x3319\x3\x2\x2\x2\x3546\x3320\x3\x2\x2\x2\x3546"+
		"\x3333\x3\x2\x2\x2\x3546\x3344\x3\x2\x2\x2\x3546\x335B\x3\x2\x2\x2\x3546"+
		"\x3362\x3\x2\x2\x2\x3546\x3367\x3\x2\x2\x2\x3546\x3370\x3\x2\x2\x2\x3546"+
		"\x3373\x3\x2\x2\x2\x3546\x3376\x3\x2\x2\x2\x3546\x337B\x3\x2\x2\x2\x3546"+
		"\x3380\x3\x2\x2\x2\x3546\x338D\x3\x2\x2\x2\x3546\x3394\x3\x2\x2\x2\x3546"+
		"\x3397\x3\x2\x2\x2\x3546\x339A\x3\x2\x2\x2\x3546\x339D\x3\x2\x2\x2\x3546"+
		"\x33AA\x3\x2\x2\x2\x3546\x33B1\x3\x2\x2\x2\x3546\x33B6\x3\x2\x2\x2\x3546"+
		"\x33C3\x3\x2\x2\x2\x3546\x33C6\x3\x2\x2\x2\x3546\x33CD\x3\x2\x2\x2\x3546"+
		"\x33D8\x3\x2\x2\x2\x3546\x33D9\x3\x2\x2\x2\x3546\x33E2\x3\x2\x2\x2\x3546"+
		"\x33EB\x3\x2\x2\x2\x3546\x33FB\x3\x2\x2\x2\x3546\x3404\x3\x2\x2\x2\x3546"+
		"\x340B\x3\x2\x2\x2\x3546\x3414\x3\x2\x2\x2\x3546\x341D\x3\x2\x2\x2\x3546"+
		"\x3424\x3\x2\x2\x2\x3546\x3429\x3\x2\x2\x2\x3546\x342E\x3\x2\x2\x2\x3546"+
		"\x3433\x3\x2\x2\x2\x3546\x3438\x3\x2\x2\x2\x3546\x343F\x3\x2\x2\x2\x3546"+
		"\x3444\x3\x2\x2\x2\x3546\x3449\x3\x2\x2\x2\x3546\x344E\x3\x2\x2\x2\x3546"+
		"\x3453\x3\x2\x2\x2\x3546\x3458\x3\x2\x2\x2\x3546\x345D\x3\x2\x2\x2\x3546"+
		"\x3466\x3\x2\x2\x2\x3546\x346B\x3\x2\x2\x2\x3546\x346E\x3\x2\x2\x2\x3546"+
		"\x3475\x3\x2\x2\x2\x3546\x347A\x3\x2\x2\x2\x3546\x3480\x3\x2\x2\x2\x3546"+
		"\x348B\x3\x2\x2\x2\x3546\x3490\x3\x2\x2\x2\x3546\x3495\x3\x2\x2\x2\x3546"+
		"\x349A\x3\x2\x2\x2\x3546\x349F\x3\x2\x2\x2\x3546\x34A4\x3\x2\x2\x2\x3546"+
		"\x34A9\x3\x2\x2\x2\x3546\x34AE\x3\x2\x2\x2\x3546\x34B3\x3\x2\x2\x2\x3546"+
		"\x34BE\x3\x2\x2\x2\x3546\x34BF\x3\x2\x2\x2\x3546\x34C5\x3\x2\x2\x2\x3546"+
		"\x34CA\x3\x2\x2\x2\x3546\x34DB\x3\x2\x2\x2\x3546\x34E0\x3\x2\x2\x2\x3546"+
		"\x34E9\x3\x2\x2\x2\x3546\x34F2\x3\x2\x2\x2\x3546\x34F9\x3\x2\x2\x2\x3546"+
		"\x34FC\x3\x2\x2\x2\x3546\x3506\x3\x2\x2\x2\x3546\x350B\x3\x2\x2\x2\x3546"+
		"\x3516\x3\x2\x2\x2\x3546\x3517\x3\x2\x2\x2\x3546\x351C\x3\x2\x2\x2\x3546"+
		"\x3522\x3\x2\x2\x2\x3546\x3528\x3\x2\x2\x2\x3546\x3532\x3\x2\x2\x2\x3546"+
		"\x3538\x3\x2\x2\x2\x3546\x3539\x3\x2\x2\x2\x3546\x353A\x3\x2\x2\x2\x3546"+
		"\x3540\x3\x2\x2\x2\x3547\x423\x3\x2\x2\x2\x3548\x354D\x5\x42E\x218\x2"+
		"\x3549\x354D\x5\x432\x21A\x2\x354A\x354D\x5\x436\x21C\x2\x354B\x354D\x5"+
		"\x43A\x21E\x2\x354C\x3548\x3\x2\x2\x2\x354C\x3549\x3\x2\x2\x2\x354C\x354A"+
		"\x3\x2\x2\x2\x354C\x354B\x3\x2\x2\x2\x354D\x425\x3\x2\x2\x2\x354E\x354F"+
		"\t\x9C\x2\x2\x354F\x427\x3\x2\x2\x2\x3550\x3558\x5\x426\x214\x2\x3551"+
		"\x3558\a\x477\x2\x2\x3552\x3558\a\x485\x2\x2\x3553\x3558\a\x47D\x2\x2"+
		"\x3554\x3558\a\x48C\x2\x2\x3555\x3558\a\x47E\x2\x2\x3556\x3558\a\x48D"+
		"\x2\x2\x3557\x3550\x3\x2\x2\x2\x3557\x3551\x3\x2\x2\x2\x3557\x3552\x3"+
		"\x2\x2\x2\x3557\x3553\x3\x2\x2\x2\x3557\x3554\x3\x2\x2\x2\x3557\x3555"+
		"\x3\x2\x2\x2\x3557\x3556\x3\x2\x2\x2\x3558\x429\x3\x2\x2\x2\x3559\x3561"+
		"\x5\x428\x215\x2\x355A\x3561\a\x481\x2\x2\x355B\x3561\a\x490\x2\x2\x355C"+
		"\x3561\a\x47F\x2\x2\x355D\x3561\a\x48E\x2\x2\x355E\x3561\a\x480\x2\x2"+
		"\x355F\x3561\a\x48F\x2\x2\x3560\x3559\x3\x2\x2\x2\x3560\x355A\x3\x2\x2"+
		"\x2\x3560\x355B\x3\x2\x2\x2\x3560\x355C\x3\x2\x2\x2\x3560\x355D\x3\x2"+
		"\x2\x2\x3560\x355E\x3\x2\x2\x2\x3560\x355F\x3\x2\x2\x2\x3561\x42B\x3\x2"+
		"\x2\x2\x3562\x356A\x5\x426\x214\x2\x3563\x356A\a\x477\x2\x2\x3564\x356A"+
		"\a\x485\x2\x2\x3565\x356A\a\x47D\x2\x2\x3566\x356A\a\x48C\x2\x2\x3567"+
		"\x356A\a\x480\x2\x2\x3568\x356A\a\x48F\x2\x2\x3569\x3562\x3\x2\x2\x2\x3569"+
		"\x3563\x3\x2\x2\x2\x3569\x3564\x3\x2\x2\x2\x3569\x3565\x3\x2\x2\x2\x3569"+
		"\x3566\x3\x2\x2\x2\x3569\x3567\x3\x2\x2\x2\x3569\x3568\x3\x2\x2\x2\x356A"+
		"\x42D\x3\x2\x2\x2\x356B\x3576\a\x4A0\x2\x2\x356C\x3576\x5\x494\x24B\x2"+
		"\x356D\x356E\a\x13F\x2\x2\x356E\x356F\a\x4BA\x2\x2\x356F\x3576\a\x4BB"+
		"\x2\x2\x3570\x3576\x5\x432\x21A\x2\x3571\x3572\a\x4BA\x2\x2\x3572\x3573"+
		"\x5\x3AA\x1D6\x2\x3573\x3574\a\x4BB\x2\x2\x3574\x3576\x3\x2\x2\x2\x3575"+
		"\x356B\x3\x2\x2\x2\x3575\x356C\x3\x2\x2\x2\x3575\x356D\x3\x2\x2\x2\x3575"+
		"\x3570\x3\x2\x2\x2\x3575\x3571\x3\x2\x2\x2\x3576\x3577\x3\x2\x2\x2\x3577"+
		"\x3578\a\x4B5\x2\x2\x3578\x3579\x5\x430\x219\x2\x3579\x42F\x3\x2\x2\x2"+
		"\x357A\x357B\t\x9D\x2\x2\x357B\x357C\a\x4BA\x2\x2\x357C\x357D\a\x4A4\x2"+
		"\x2\x357D\x357E\a\x4BC\x2\x2\x357E\x357F\a\x4A4\x2\x2\x357F\x3580\a\x4BB"+
		"\x2\x2\x3580\x431\x3\x2\x2\x2\x3581\x3588\a\x4A0\x2\x2\x3582\x3588\x5"+
		"\x494\x24B\x2\x3583\x3584\a\x4BA\x2\x2\x3584\x3585\x5\x3AA\x1D6\x2\x3585"+
		"\x3586\a\x4BB\x2\x2\x3586\x3588\x3\x2\x2\x2\x3587\x3581\x3\x2\x2\x2\x3587"+
		"\x3582\x3\x2\x2\x2\x3587\x3583\x3\x2\x2\x2\x3588\x3589\x3\x2\x2\x2\x3589"+
		"\x358A\a\x4B5\x2\x2\x358A\x358B\x5\x434\x21B\x2\x358B\x433\x3\x2\x2\x2"+
		"\x358C\x358D\t\x9E\x2\x2\x358D\x358E\a\x4BA\x2\x2\x358E\x358F\a\x4A4\x2"+
		"\x2\x358F\x3590\a\x4BB\x2\x2\x3590\x435\x3\x2\x2\x2\x3591\x3598\a\x4A0"+
		"\x2\x2\x3592\x3598\x5\x494\x24B\x2\x3593\x3594\a\x4BA\x2\x2\x3594\x3595"+
		"\x5\x3AA\x1D6\x2\x3595\x3596\a\x4BB\x2\x2\x3596\x3598\x3\x2\x2\x2\x3597"+
		"\x3591\x3\x2\x2\x2\x3597\x3592\x3\x2\x2\x2\x3597\x3593\x3\x2\x2\x2\x3598"+
		"\x3599\x3\x2\x2\x2\x3599\x359A\a\x4B5\x2\x2\x359A\x359B\x5\x438\x21D\x2"+
		"\x359B\x437\x3\x2\x2\x2\x359C\x359D\t\x9F\x2\x2\x359D\x359E\a\x4BA\x2"+
		"\x2\x359E\x359F\a\x4A4\x2\x2\x359F\x35A0\a\x4BB\x2\x2\x35A0\x439\x3\x2"+
		"\x2\x2\x35A1\x35A8\a\x4A0\x2\x2\x35A2\x35A8\x5\x494\x24B\x2\x35A3\x35A4"+
		"\a\x4BA\x2\x2\x35A4\x35A5\x5\x3AA\x1D6\x2\x35A5\x35A6\a\x4BB\x2\x2\x35A6"+
		"\x35A8\x3\x2\x2\x2\x35A7\x35A1\x3\x2\x2\x2\x35A7\x35A2\x3\x2\x2\x2\x35A7"+
		"\x35A3\x3\x2\x2\x2\x35A8\x35A9\x3\x2\x2\x2\x35A9\x35AA\a\x4B5\x2\x2\x35AA"+
		"\x35AB\x5\x43C\x21F\x2\x35AB\x43B\x3\x2\x2\x2\x35AC\x35AD\t\xA0\x2\x2"+
		"\x35AD\x35AE\a\x4BA\x2\x2\x35AE\x35AF\a\x4A4\x2\x2\x35AF\x35B0\a\x4BB"+
		"\x2\x2\x35B0\x43D\x3\x2\x2\x2\x35B1\x35B2\a\x18B\x2\x2\x35B2\x35B3\a\x4BA"+
		"\x2\x2\x35B3\x35B4\x5\x39C\x1CF\x2\x35B4\x35B5\a\x4BB\x2\x2\x35B5\x35D0"+
		"\x3\x2\x2\x2\x35B6\x35B7\a\x18E\x2\x2\x35B7\x35B8\a\x4BA\x2\x2\x35B8\x35B9"+
		"\x5\x39C\x1CF\x2\x35B9\x35BA\a\x4BC\x2\x2\x35BA\x35BB\x5\x39C\x1CF\x2"+
		"\x35BB\x35BC\a\x4BB\x2\x2\x35BC\x35D0\x3\x2\x2\x2\x35BD\x35BE\a\x18F\x2"+
		"\x2\x35BE\x35BF\a\x4BA\x2\x2\x35BF\x35D0\a\x4BB\x2\x2\x35C0\x35C1\a\x1DA"+
		"\x2\x2\x35C1\x35C2\a\x4BA\x2\x2\x35C2\x35C3\x5\x39C\x1CF\x2\x35C3\x35C4"+
		"\a\x4BB\x2\x2\x35C4\x35D0\x3\x2\x2\x2\x35C5\x35C6\a\x190\x2\x2\x35C6\x35C7"+
		"\a\x4BA\x2\x2\x35C7\x35C8\x5\x39C\x1CF\x2\x35C8\x35C9\a\x4BC\x2\x2\x35C9"+
		"\x35CA\x5\x39C\x1CF\x2\x35CA\x35CB\a\x4BB\x2\x2\x35CB\x35D0\x3\x2\x2\x2"+
		"\x35CC\x35CD\a\x3EE\x2\x2\x35CD\x35CE\a\x4BA\x2\x2\x35CE\x35D0\a\x4BB"+
		"\x2\x2\x35CF\x35B1\x3\x2\x2\x2\x35CF\x35B6\x3\x2\x2\x2\x35CF\x35BD\x3"+
		"\x2\x2\x2\x35CF\x35C0\x3\x2\x2\x2\x35CF\x35C5\x3\x2\x2\x2\x35CF\x35CC"+
		"\x3\x2\x2\x2\x35D0\x43F\x3\x2\x2\x2\x35D1\x35D2\a\x1A8\x2\x2\x35D2\x35DB"+
		"\a\x4BF\x2\x2\x35D3\x35D4\a\x191\x2\x2\x35D4\x35D5\a\x4BA\x2\x2\x35D5"+
		"\x35DC\a\x4BB\x2\x2\x35D6\x35D7\a\x2B7\x2\x2\x35D7\x35D8\a\x4BA\x2\x2"+
		"\x35D8\x35D9\x5\x39C\x1CF\x2\x35D9\x35DA\a\x4BB\x2\x2\x35DA\x35DC\x3\x2"+
		"\x2\x2\x35DB\x35D3\x3\x2\x2\x2\x35DB\x35D6\x3\x2\x2\x2\x35DC\x441\x3\x2"+
		"\x2\x2\x35DD\x35E4\a\x4A0\x2\x2\x35DE\x35E4\x5\x494\x24B\x2\x35DF\x35E0"+
		"\a\x4BA\x2\x2\x35E0\x35E1\x5\x3AA\x1D6\x2\x35E1\x35E2\a\x4BB\x2\x2\x35E2"+
		"\x35E4\x3\x2\x2\x2\x35E3\x35DD\x3\x2\x2\x2\x35E3\x35DE\x3\x2\x2\x2\x35E3"+
		"\x35DF\x3\x2\x2\x2\x35E4\x35E5\x3\x2\x2\x2\x35E5\x35E6\a\x4B5\x2\x2\x35E6"+
		"\x35E7\a\x262\x2\x2\x35E7\x35E8\a\x4BA\x2\x2\x35E8\x35E9\a\x4A4\x2\x2"+
		"\x35E9\x35EA\a\x4BB\x2\x2\x35EA\x443\x3\x2\x2\x2\x35EB\x35EC\a\x435\x2"+
		"\x2\x35EC\x35ED\x5\x39C\x1CF\x2\x35ED\x35EE\a\x3E4\x2\x2\x35EE\x35EF\x5"+
		"\x39C\x1CF\x2\x35EF\x445\x3\x2\x2\x2\x35F0\x35F1\a\x435\x2\x2\x35F1\x35F2"+
		"\x5\x3B4\x1DB\x2\x35F2\x35F3\a\x3E4\x2\x2\x35F3\x35F4\x5\x39C\x1CF\x2"+
		"\x35F4\x447\x3\x2\x2\x2\x35F5\x35F7\a:\x2\x2\x35F6\x35F5\x3\x2\x2\x2\x35F6"+
		"\x35F7\x3\x2\x2\x2\x35F7\x35F8\x3\x2\x2\x2\x35F8\x35F9\x5\x45C\x22F\x2"+
		"\x35F9\x449\x3\x2\x2\x2\x35FA\x35FC\a:\x2\x2\x35FB\x35FA\x3\x2\x2\x2\x35FB"+
		"\x35FC\x3\x2\x2\x2\x35FC\x35FD\x3\x2\x2\x2\x35FD\x35FE\x5\x44C\x227\x2"+
		"\x35FE\x44B\x3\x2\x2\x2\x35FF\x3600\x5\x4C2\x262\x2\x3600\x44D\x3\x2\x2"+
		"\x2\x3601\x3602\a\x439\x2\x2\x3602\x3603\a\x4BA\x2\x2\x3603\x360A\x5\x456"+
		"\x22C\x2\x3604\x3606\a\x4BC\x2\x2\x3605\x3604\x3\x2\x2\x2\x3605\x3606"+
		"\x3\x2\x2\x2\x3606\x3607\x3\x2\x2\x2\x3607\x3609\x5\x456\x22C\x2\x3608"+
		"\x3605\x3\x2\x2\x2\x3609\x360C\x3\x2\x2\x2\x360A\x3608\x3\x2\x2\x2\x360A"+
		"\x360B\x3\x2\x2\x2\x360B\x360D\x3\x2\x2\x2\x360C\x360A\x3\x2\x2\x2\x360D"+
		"\x360E\a\x4BB\x2\x2\x360E\x44F\x3\x2\x2\x2\x360F\x3610\a\x4BA\x2\x2\x3610"+
		"\x3611\x5\x456\x22C\x2\x3611\x3612\a\x4BB\x2\x2\x3612\x451\x3\x2\x2\x2"+
		"\x3613\x3615\x5\x454\x22B\x2\x3614\x3613\x3\x2\x2\x2\x3615\x3616\x3\x2"+
		"\x2\x2\x3616\x3614\x3\x2\x2\x2\x3616\x3617\x3\x2\x2\x2\x3617\x453\x3\x2"+
		"\x2\x2\x3618\x3619\t\xA1\x2\x2\x3619\x455\x3\x2\x2\x2\x361A\x3653\a\x264"+
		"\x2\x2\x361B\x362E\a\x1C6\x2\x2\x361C\x361D\a\x4BA\x2\x2\x361D\x3622\x5"+
		"\x458\x22D\x2\x361E\x361F\a\x4BC\x2\x2\x361F\x3621\x5\x458\x22D\x2\x3620"+
		"\x361E\x3\x2\x2\x2\x3621\x3624\x3\x2\x2\x2\x3622\x3620\x3\x2\x2\x2\x3622"+
		"\x3623\x3\x2\x2\x2\x3623\x3625\x3\x2\x2\x2\x3624\x3622\x3\x2\x2\x2\x3625"+
		"\x3626\a\x4BB\x2\x2\x3626\x362F\x3\x2\x2\x2\x3627\x3628\a\x4A8\x2\x2\x3628"+
		"\x3629\a\x4BA\x2\x2\x3629\x362A\x5\x458\x22D\x2\x362A\x362B\a\x4BB\x2"+
		"\x2\x362B\x362F\x3\x2\x2\x2\x362C\x362D\a\x4A8\x2\x2\x362D\x362F\x5\x458"+
		"\x22D\x2\x362E\x361C\x3\x2\x2\x2\x362E\x3627\x3\x2\x2\x2\x362E\x362C\x3"+
		"\x2\x2\x2\x362F\x3653\x3\x2\x2\x2\x3630\x3638\a\x177\x2\x2\x3631\x3632"+
		"\a\x4BA\x2\x2\x3632\x3633\x5\x458\x22D\x2\x3633\x3634\a\x4BA\x2\x2\x3634"+
		"\x3635\x5\x49C\x24F\x2\x3635\x3636\a\x4BB\x2\x2\x3636\x3637\a\x4BB\x2"+
		"\x2\x3637\x3639\x3\x2\x2\x2\x3638\x3631\x3\x2\x2\x2\x3638\x3639\x3\x2"+
		"\x2\x2\x3639\x3653\x3\x2\x2\x2\x363A\x3653\a\x176\x2\x2\x363B\x3653\a"+
		"\x1AA\x2\x2\x363C\x3653\a\x269\x2\x2\x363D\x3653\a\x275\x2\x2\x363E\x3653"+
		"\a\x2B4\x2\x2\x363F\x3653\a\x301\x2\x2\x3640\x3653\a\x302\x2\x2\x3641"+
		"\x3653\a\x304\x2\x2\x3642\x3653\a\x306\x2\x2\x3643\x3653\a\x321\x2\x2"+
		"\x3644\x3653\a\x34B\x2\x2\x3645\x3653\a\x379\x2\x2\x3646\x3653\a\x39C"+
		"\x2\x2\x3647\x3648\a\x3A4\x2\x2\x3648\x3649\a\x4A8\x2\x2\x3649\x3653\a"+
		"\x4A2\x2\x2\x364A\x3653\a\x3DA\x2\x2\x364B\x3653\a\x3DB\x2\x2\x364C\x3653"+
		"\a\x417\x2\x2\x364D\x3653\a\x443\x2\x2\x364E\x3653\a\x1EF\x2\x2\x364F"+
		"\x3653\a\x1ED\x2\x2\x3650\x3653\a\x1B7\x2\x2\x3651\x3653\a\x1BB\x2\x2"+
		"\x3652\x361A\x3\x2\x2\x2\x3652\x361B\x3\x2\x2\x2\x3652\x3630\x3\x2\x2"+
		"\x2\x3652\x363A\x3\x2\x2\x2\x3652\x363B\x3\x2\x2\x2\x3652\x363C\x3\x2"+
		"\x2\x2\x3652\x363D\x3\x2\x2\x2\x3652\x363E\x3\x2\x2\x2\x3652\x363F\x3"+
		"\x2\x2\x2\x3652\x3640\x3\x2\x2\x2\x3652\x3641\x3\x2\x2\x2\x3652\x3642"+
		"\x3\x2\x2\x2\x3652\x3643\x3\x2\x2\x2\x3652\x3644\x3\x2\x2\x2\x3652\x3645"+
		"\x3\x2\x2\x2\x3652\x3646\x3\x2\x2\x2\x3652\x3647\x3\x2\x2\x2\x3652\x364A"+
		"\x3\x2\x2\x2\x3652\x364B\x3\x2\x2\x2\x3652\x364C\x3\x2\x2\x2\x3652\x364D"+
		"\x3\x2\x2\x2\x3652\x364E\x3\x2\x2\x2\x3652\x364F\x3\x2\x2\x2\x3652\x3650"+
		"\x3\x2\x2\x2\x3652\x3651\x3\x2\x2\x2\x3653\x457\x3\x2\x2\x2\x3654\x3657"+
		"\x5\x4C2\x262\x2\x3655\x3657\a\x4A2\x2\x2\x3656\x3654\x3\x2\x2\x2\x3656"+
		"\x3655\x3\x2\x2\x2\x3657\x459\x3\x2\x2\x2\x3658\x3659\a\x4BA\x2\x2\x3659"+
		"\x365E\x5\x45C\x22F\x2\x365A\x365B\a\x4BC\x2\x2\x365B\x365D\x5\x45C\x22F"+
		"\x2\x365C\x365A\x3\x2\x2\x2\x365D\x3660\x3\x2\x2\x2\x365E\x365C\x3\x2"+
		"\x2\x2\x365E\x365F\x3\x2\x2\x2\x365F\x3661\x3\x2\x2\x2\x3660\x365E\x3"+
		"\x2\x2\x2\x3661\x3662\a\x4BB\x2\x2\x3662\x45B\x3\x2\x2\x2\x3663\x3666"+
		"\x5\x4C2\x262\x2\x3664\x3666\a\x4A4\x2\x2\x3665\x3663\x3\x2\x2\x2\x3665"+
		"\x3664\x3\x2\x2\x2\x3666\x45D\x3\x2\x2\x2\x3667\x3668\a\x423\x2\x2\x3668"+
		"\x3669\a\x4BA\x2\x2\x3669\x366A\x5\x460\x231\x2\x366A\x3672\a\x4BB\x2"+
		"\x2\x366B\x366C\a\x4BC\x2\x2\x366C\x366D\a\x4BA\x2\x2\x366D\x366E\x5\x460"+
		"\x231\x2\x366E\x366F\a\x4BB\x2\x2\x366F\x3671\x3\x2\x2\x2\x3670\x366B"+
		"\x3\x2\x2\x2\x3671\x3674\x3\x2\x2\x2\x3672\x3670\x3\x2\x2\x2\x3672\x3673"+
		"\x3\x2\x2\x2\x3673\x45F\x3\x2\x2\x2\x3674\x3672\x3\x2\x2\x2\x3675\x367A"+
		"\x5\x39C\x1CF\x2\x3676\x3677\a\x4BC\x2\x2\x3677\x3679\x5\x39C\x1CF\x2"+
		"\x3678\x3676\x3\x2\x2\x2\x3679\x367C\x3\x2\x2\x2\x367A\x3678\x3\x2\x2"+
		"\x2\x367A\x367B\x3\x2\x2\x2\x367B\x461\x3\x2\x2\x2\x367C\x367A\x3\x2\x2"+
		"\x2\x367D\x367E\t\xA2\x2\x2\x367E\x367F\a\x4BA\x2\x2\x367F\x3680\a\x4BB"+
		"\x2\x2\x3680\x3688\x5\x46A\x236\x2\x3681\x3682\a\x27E\x2\x2\x3682\x3683"+
		"\a\x4BA\x2\x2\x3683\x3684\x5\x39C\x1CF\x2\x3684\x3685\a\x4BB\x2\x2\x3685"+
		"\x3686\x5\x46A\x236\x2\x3686\x3688\x3\x2\x2\x2\x3687\x367D\x3\x2\x2\x2"+
		"\x3687\x3681\x3\x2\x2\x2\x3688\x463\x3\x2\x2\x2\x3689\x368A\t\xA3\x2\x2"+
		"\x368A\x368B\a\x4BA\x2\x2\x368B\x368C\x5\x468\x235\x2\x368C\x368E\a\x4BB"+
		"\x2\x2\x368D\x368F\x5\x46A\x236\x2\x368E\x368D\x3\x2\x2\x2\x368E\x368F"+
		"\x3\x2\x2\x2\x368F\x36AA\x3\x2\x2\x2\x3690\x3691\t\xA4\x2\x2\x3691\x3694"+
		"\a\x4BA\x2\x2\x3692\x3695\a\x4C0\x2\x2\x3693\x3695\x5\x468\x235\x2\x3694"+
		"\x3692\x3\x2\x2\x2\x3694\x3693\x3\x2\x2\x2\x3695\x3696\x3\x2\x2\x2\x3696"+
		"\x3698\a\x4BB\x2\x2\x3697\x3699\x5\x46A\x236\x2\x3698\x3697\x3\x2\x2\x2"+
		"\x3698\x3699\x3\x2\x2\x2\x3699\x36AA\x3\x2\x2\x2\x369A\x369B\a\x8E\x2"+
		"\x2\x369B\x369C\a\x4BA\x2\x2\x369C\x369D\x5\x468\x235\x2\x369D\x369E\a"+
		"\x4BB\x2\x2\x369E\x36AA\x3\x2\x2\x2\x369F\x36A0\a\x19B\x2\x2\x36A0\x36A1"+
		"\a\x4BA\x2\x2\x36A1\x36A2\x5\x39C\x1CF\x2\x36A2\x36A3\a\x4BB\x2\x2\x36A3"+
		"\x36AA\x3\x2\x2\x2\x36A4\x36A5\a\x19C\x2\x2\x36A5\x36A6\a\x4BA\x2\x2\x36A6"+
		"\x36A7\x5\x460\x231\x2\x36A7\x36A8\a\x4BB\x2\x2\x36A8\x36AA\x3\x2\x2\x2"+
		"\x36A9\x3689\x3\x2\x2\x2\x36A9\x3690\x3\x2\x2\x2\x36A9\x369A\x3\x2\x2"+
		"\x2\x36A9\x369F\x3\x2\x2\x2\x36A9\x36A4\x3\x2\x2\x2\x36AA\x465\x3\x2\x2"+
		"\x2\x36AB\x36AC\t\xA5\x2\x2\x36AC\x36AD\a\x4BA\x2\x2\x36AD\x36AE\x5\x39C"+
		"\x1CF\x2\x36AE\x36AF\a\x4BB\x2\x2\x36AF\x36B0\x5\x46A\x236\x2\x36B0\x36DF"+
		"\x3\x2\x2\x2\x36B1\x36B2\t\xA6\x2\x2\x36B2\x36B3\a\x4BA\x2\x2\x36B3\x36BA"+
		"\x5\x39C\x1CF\x2\x36B4\x36B5\a\x4BC\x2\x2\x36B5\x36B8\x5\x39C\x1CF\x2"+
		"\x36B6\x36B7\a\x4BC\x2\x2\x36B7\x36B9\x5\x39C\x1CF\x2\x36B8\x36B6\x3\x2"+
		"\x2\x2\x36B8\x36B9\x3\x2\x2\x2\x36B9\x36BB\x3\x2\x2\x2\x36BA\x36B4\x3"+
		"\x2\x2\x2\x36BA\x36BB\x3\x2\x2\x2\x36BB\x36BC\x3\x2\x2\x2\x36BC\x36BD"+
		"\a\x4BB\x2\x2\x36BD\x36BE\x5\x46A\x236\x2\x36BE\x36DF\x3\x2\x2\x2\x36BF"+
		"\x36C0\t\xA7\x2\x2\x36C0\x36C1\a\x4BA\x2\x2\x36C1\x36C2\a\x4BB\x2\x2\x36C2"+
		"\x36C3\a\x2AC\x2\x2\x36C3\x36C7\a\x4BA\x2\x2\x36C4\x36C5\a\x2BB\x2\x2"+
		"\x36C5\x36C6\ap\x2\x2\x36C6\x36C8\x5\x460\x231\x2\x36C7\x36C4\x3\x2\x2"+
		"\x2\x36C7\x36C8\x3\x2\x2\x2\x36C8\x36C9\x3\x2\x2\x2\x36C9\x36CA\x5\x3C4"+
		"\x1E3\x2\x36CA\x36CB\a\x4BB\x2\x2\x36CB\x36DF\x3\x2\x2\x2\x36CC\x36CD"+
		"\t\xA8\x2\x2\x36CD\x36CE\a\x4BA\x2\x2\x36CE\x36CF\x5\x39C\x1CF\x2\x36CF"+
		"\x36D0\a\x4BB\x2\x2\x36D0\x36D1\a\x43A\x2\x2\x36D1\x36D2\a\x19A\x2\x2"+
		"\x36D2\x36D3\a\x4BA\x2\x2\x36D3\x36D4\x5\x3C4\x1E3\x2\x36D4\x36D5\a\x4BB"+
		"\x2\x2\x36D5\x36D6\a\x2AC\x2\x2\x36D6\x36DA\a\x4BA\x2\x2\x36D7\x36D8\a"+
		"\x2BB\x2\x2\x36D8\x36D9\ap\x2\x2\x36D9\x36DB\x5\x460\x231\x2\x36DA\x36D7"+
		"\x3\x2\x2\x2\x36DA\x36DB\x3\x2\x2\x2\x36DB\x36DC\x3\x2\x2\x2\x36DC\x36DD"+
		"\a\x4BB\x2\x2\x36DD\x36DF\x3\x2\x2\x2\x36DE\x36AB\x3\x2\x2\x2\x36DE\x36B1"+
		"\x3\x2\x2\x2\x36DE\x36BF\x3\x2\x2\x2\x36DE\x36CC\x3\x2\x2\x2\x36DF\x467"+
		"\x3\x2\x2\x2\x36E0\x36E2\t\x8B\x2\x2\x36E1\x36E0\x3\x2\x2\x2\x36E1\x36E2"+
		"\x3\x2\x2\x2\x36E2\x36E3\x3\x2\x2\x2\x36E3\x36E4\x5\x39C\x1CF\x2\x36E4"+
		"\x469\x3\x2\x2\x2\x36E5\x36E6\a\x2AC\x2\x2\x36E6\x36EA\a\x4BA\x2\x2\x36E7"+
		"\x36E8\a\x2BB\x2\x2\x36E8\x36E9\ap\x2\x2\x36E9\x36EB\x5\x460\x231\x2\x36EA"+
		"\x36E7\x3\x2\x2\x2\x36EA\x36EB\x3\x2\x2\x2\x36EB\x36ED\x3\x2\x2\x2\x36EC"+
		"\x36EE\x5\x3C4\x1E3\x2\x36ED\x36EC\x3\x2\x2\x2\x36ED\x36EE\x3\x2\x2\x2"+
		"\x36EE\x36F0\x3\x2\x2\x2\x36EF\x36F1\x5\x46C\x237\x2\x36F0\x36EF\x3\x2"+
		"\x2\x2\x36F0\x36F1\x3\x2\x2\x2\x36F1\x36F2\x3\x2\x2\x2\x36F2\x36F3\a\x4BB"+
		"\x2\x2\x36F3\x46B\x3\x2\x2\x2\x36F4\x36F5\t\xA9\x2\x2\x36F5\x36F6\x5\x46E"+
		"\x238\x2\x36F6\x46D\x3\x2\x2\x2\x36F7\x36FE\x5\x472\x23A\x2\x36F8\x36F9"+
		"\a^\x2\x2\x36F9\x36FA\x5\x470\x239\x2\x36FA\x36FB\a\'\x2\x2\x36FB\x36FC"+
		"\x5\x470\x239\x2\x36FC\x36FE\x3\x2\x2\x2\x36FD\x36F7\x3\x2\x2\x2\x36FD"+
		"\x36F8\x3\x2\x2\x2\x36FE\x46F\x3\x2\x2\x2\x36FF\x3702\x5\x472\x23A\x2"+
		"\x3700\x3702\x5\x474\x23B\x2\x3701\x36FF\x3\x2\x2\x2\x3701\x3700\x3\x2"+
		"\x2\x2\x3702\x471\x3\x2\x2\x2\x3703\x3704\a\x408\x2\x2\x3704\x370A\a\x2D6"+
		"\x2\x2\x3705\x3706\a\x4A2\x2\x2\x3706\x370A\a\x2D6\x2\x2\x3707\x3708\a"+
		"\xD0\x2\x2\x3708\x370A\a\x346\x2\x2\x3709\x3703\x3\x2\x2\x2\x3709\x3705"+
		"\x3\x2\x2\x2\x3709\x3707\x3\x2\x2\x2\x370A\x473\x3\x2\x2\x2\x370B\x370C"+
		"\a\x408\x2\x2\x370C\x3710\a\x171\x2\x2\x370D\x370E\a\x4A2\x2\x2\x370E"+
		"\x3710\a\x171\x2\x2\x370F\x370B\x3\x2\x2\x2\x370F\x370D\x3\x2\x2\x2\x3710"+
		"\x475\x3\x2\x2\x2\x3711\x3712\a\x166\x2\x2\x3712\x3717\x5\x478\x23D\x2"+
		"\x3713\x3714\a\x4BC\x2\x2\x3714\x3716\x5\x478\x23D\x2\x3715\x3713\x3\x2"+
		"\x2\x2\x3716\x3719\x3\x2\x2\x2\x3717\x3715\x3\x2\x2\x2\x3717\x3718\x3"+
		"\x2\x2\x2\x3718\x373D\x3\x2\x2\x2\x3719\x3717\x3\x2\x2\x2\x371A\x371B"+
		"\a\xFD\x2\x2\x371B\x371E\a\x4A8\x2\x2\x371C\x371F\x5\x4C2\x262\x2\x371D"+
		"\x371F\a\x4A4\x2\x2\x371E\x371C\x3\x2\x2\x2\x371E\x371D\x3\x2\x2\x2\x371F"+
		"\x373D\x3\x2\x2\x2\x3720\x3721\a\xFC\x2\x2\x3721\x3724\a\x4A8\x2\x2\x3722"+
		"\x3725\x5\x4C2\x262\x2\x3723\x3725\a\x4A4\x2\x2\x3724\x3722\x3\x2\x2\x2"+
		"\x3724\x3723\x3\x2\x2\x2\x3725\x373D\x3\x2\x2\x2\x3726\x3727\a\x257\x2"+
		"\x2\x3727\x3728\a\x4A8\x2\x2\x3728\x373D\t\x13\x2\x2\x3729\x372A\a\x3F6"+
		"\x2\x2\x372A\x372B\a\x4A8\x2\x2\x372B\x373D\t\x13\x2\x2\x372C\x372D\a"+
		"\x402\x2\x2\x372D\x372E\a\x4A8\x2\x2\x372E\x373D\a\x4A2\x2\x2\x372F\x3730"+
		"\a\xF0\x2\x2\x3730\x373D\t\x13\x2\x2\x3731\x3732\a\x3FD\x2\x2\x3732\x373D"+
		"\t\x13\x2\x2\x3733\x3734\ay\x2\x2\x3734\x3737\a\x4A8\x2\x2\x3735\x3738"+
		"\x5\x4C2\x262\x2\x3736\x3738\a\xDF\x2\x2\x3737\x3735\x3\x2\x2\x2\x3737"+
		"\x3736\x3\x2\x2\x2\x3738\x373D\x3\x2\x2\x2\x3739\x373A\a\x1FE\x2\x2\x373A"+
		"\x373B\a\x4A8\x2\x2\x373B\x373D\t\x13\x2\x2\x373C\x3711\x3\x2\x2\x2\x373C"+
		"\x371A\x3\x2\x2\x2\x373C\x3720\x3\x2\x2\x2\x373C\x3726\x3\x2\x2\x2\x373C"+
		"\x3729\x3\x2\x2\x2\x373C\x372C\x3\x2\x2\x2\x373C\x372F\x3\x2\x2\x2\x373C"+
		"\x3731\x3\x2\x2\x2\x373C\x3733\x3\x2\x2\x2\x373C\x3739\x3\x2\x2\x2\x373D"+
		"\x477\x3\x2\x2\x2\x373E\x3745\a\x4BA\x2\x2\x373F\x3740\a\x26C\x2\x2\x3740"+
		"\x3741\a\x4A8\x2\x2\x3741\x3746\t\xAA\x2\x2\x3742\x3743\a\x111\x2\x2\x3743"+
		"\x3744\a\x4A8\x2\x2\x3744\x3746\a\x4A4\x2\x2\x3745\x373F\x3\x2\x2\x2\x3745"+
		"\x3742\x3\x2\x2\x2\x3746\x3747\x3\x2\x2\x2\x3747\x3748\a\x4BB\x2\x2\x3748"+
		"\x479\x3\x2\x2\x2\x3749\x374C\x5\x47C\x23F\x2\x374A\x374C\x5\x47E\x240"+
		"\x2\x374B\x3749\x3\x2\x2\x2\x374B\x374A\x3\x2\x2\x2\x374C\x47B\x3\x2\x2"+
		"\x2\x374D\x374E\a\x15D\x2\x2\x374E\x3751\x5\x4C2\x262\x2\x374F\x3750\a"+
		"\xB7\x2\x2\x3750\x3752\a\x166\x2\x2\x3751\x374F\x3\x2\x2\x2\x3751\x3752"+
		"\x3\x2\x2\x2\x3752\x3754\x3\x2\x2\x2\x3753\x3755\a\xF9\x2\x2\x3754\x3753"+
		"\x3\x2\x2\x2\x3754\x3755\x3\x2\x2\x2\x3755\x3758\x3\x2\x2\x2\x3756\x3757"+
		"\a\xB7\x2\x2\x3757\x3759\a\x23D\x2\x2\x3758\x3756\x3\x2\x2\x2\x3758\x3759"+
		"\x3\x2\x2\x2\x3759\x375A\x3\x2\x2\x2\x375A\x375F\x5\x47E\x240\x2\x375B"+
		"\x375C\a\x4BC\x2\x2\x375C\x375E\x5\x47E\x240\x2\x375D\x375B\x3\x2\x2\x2"+
		"\x375E\x3761\x3\x2\x2\x2\x375F\x375D\x3\x2\x2\x2\x375F\x3760\x3\x2\x2"+
		"\x2\x3760\x47D\x3\x2\x2\x2\x3761\x375F\x3\x2\x2\x2\x3762\x3763\a\x4BA"+
		"\x2\x2\x3763\x3764\a\x253\x2\x2\x3764\x3767\a\x4A8\x2\x2\x3765\x3768\x5"+
		"\x4C2\x262\x2\x3766\x3768\a\x4A4\x2\x2\x3767\x3765\x3\x2\x2\x2\x3767\x3766"+
		"\x3\x2\x2\x2\x3768\x376A\x3\x2\x2\x2\x3769\x376B\a\x4BC\x2\x2\x376A\x3769"+
		"\x3\x2\x2\x2\x376A\x376B\x3\x2\x2\x2\x376B\x376C\x3\x2\x2\x2\x376C\x376D"+
		"\a\x162\x2\x2\x376D\x376E\a\x4A8\x2\x2\x376E\x3770\a\x4A4\x2\x2\x376F"+
		"\x3771\a\x4BC\x2\x2\x3770\x376F\x3\x2\x2\x2\x3770\x3771\x3\x2\x2\x2\x3771"+
		"\x3778\x3\x2\x2\x2\x3772\x3773\a\x398\x2\x2\x3773\x3774\a\x4A8\x2\x2\x3774"+
		"\x3776\x5\x4CC\x267\x2\x3775\x3777\a\x4BC\x2\x2\x3776\x3775\x3\x2\x2\x2"+
		"\x3776\x3777\x3\x2\x2\x2\x3777\x3779\x3\x2\x2\x2\x3778\x3772\x3\x2\x2"+
		"\x2\x3778\x3779\x3\x2\x2\x2\x3779\x3783\x3\x2\x2\x2\x377A\x377B\a\x225"+
		"\x2\x2\x377B\x377E\a\x4A8\x2\x2\x377C\x377F\x5\x4CC\x267\x2\x377D\x377F"+
		"\a\x40F\x2\x2\x377E\x377C\x3\x2\x2\x2\x377E\x377D\x3\x2\x2\x2\x377F\x3781"+
		"\x3\x2\x2\x2\x3780\x3782\a\x4BC\x2\x2\x3781\x3780\x3\x2\x2\x2\x3781\x3782"+
		"\x3\x2\x2\x2\x3782\x3784\x3\x2\x2\x2\x3783\x377A\x3\x2\x2\x2\x3783\x3784"+
		"\x3\x2\x2\x2\x3784\x378B\x3\x2\x2\x2\x3785\x3786\a\x161\x2\x2\x3786\x3787"+
		"\a\x4A8\x2\x2\x3787\x3789\x5\x4CC\x267\x2\x3788\x378A\a\x4BC\x2\x2\x3789"+
		"\x3788\x3\x2\x2\x2\x3789\x378A\x3\x2\x2\x2\x378A\x378C\x3\x2\x2\x2\x378B"+
		"\x3785\x3\x2\x2\x2\x378B\x378C\x3\x2\x2\x2\x378C\x378D\x3\x2\x2\x2\x378D"+
		"\x378E\a\x4BB\x2\x2\x378E\x47F\x3\x2\x2\x2\x378F\x3790\x5\x4C2\x262\x2"+
		"\x3790\x3791\a\x4B5\x2\x2\x3791\x3792\x5\x4C2\x262\x2\x3792\x3793\a\x4B5"+
		"\x2\x2\x3793\x3794\x5\x4C2\x262\x2\x3794\x3795\a\x4B5\x2\x2\x3795\x37A1"+
		"\x3\x2\x2\x2\x3796\x3797\x5\x4C2\x262\x2\x3797\x3799\a\x4B5\x2\x2\x3798"+
		"\x379A\x5\x4C2\x262\x2\x3799\x3798\x3\x2\x2\x2\x3799\x379A\x3\x2\x2\x2"+
		"\x379A\x379B\x3\x2\x2\x2\x379B\x379C\a\x4B5\x2\x2\x379C\x37A1\x3\x2\x2"+
		"\x2\x379D\x379E\x5\x4C2\x262\x2\x379E\x379F\a\x4B5\x2\x2\x379F\x37A1\x3"+
		"\x2\x2\x2\x37A0\x378F\x3\x2\x2\x2\x37A0\x3796\x3\x2\x2\x2\x37A0\x379D"+
		"\x3\x2\x2\x2\x37A0\x37A1\x3\x2\x2\x2\x37A1\x37A2\x3\x2\x2\x2\x37A2\x37A3"+
		"\x5\x4C2\x262\x2\x37A3\x481\x3\x2\x2\x2\x37A4\x37AA\x5\x4C2\x262\x2\x37A5"+
		"\x37A6\x5\x4C2\x262\x2\x37A6\x37A7\a\x4B5\x2\x2\x37A7\x37A8\x5\x4C2\x262"+
		"\x2\x37A8\x37AA\x3\x2\x2\x2\x37A9\x37A4\x3\x2\x2\x2\x37A9\x37A5\x3\x2"+
		"\x2\x2\x37AA\x483\x3\x2\x2\x2\x37AB\x37B1\x5\x4C2\x262\x2\x37AC\x37AD"+
		"\x5\x4C2\x262\x2\x37AD\x37AE\a\x4B5\x2\x2\x37AE\x37AF\x5\x4C2\x262\x2"+
		"\x37AF\x37B1\x3\x2\x2\x2\x37B0\x37AB\x3\x2\x2\x2\x37B0\x37AC\x3\x2\x2"+
		"\x2\x37B1\x485\x3\x2\x2\x2\x37B2\x37B3\x5\x4C2\x262\x2\x37B3\x37B4\a\x4B5"+
		"\x2\x2\x37B4\x37B5\a\x4B5\x2\x2\x37B5\x37B6\x5\x4C2\x262\x2\x37B6\x37B7"+
		"\a\x4B5\x2\x2\x37B7\x37CA\x3\x2\x2\x2\x37B8\x37B9\x5\x4C2\x262\x2\x37B9"+
		"\x37BA\a\x4B5\x2\x2\x37BA\x37BB\x5\x4C2\x262\x2\x37BB\x37BC\a\x4B5\x2"+
		"\x2\x37BC\x37BD\x5\x4C2\x262\x2\x37BD\x37BE\a\x4B5\x2\x2\x37BE\x37CA\x3"+
		"\x2\x2\x2\x37BF\x37C0\x5\x4C2\x262\x2\x37C0\x37C2\a\x4B5\x2\x2\x37C1\x37C3"+
		"\x5\x4C2\x262\x2\x37C2\x37C1\x3\x2\x2\x2\x37C2\x37C3\x3\x2\x2\x2\x37C3"+
		"\x37C4\x3\x2\x2\x2\x37C4\x37C5\a\x4B5\x2\x2\x37C5\x37CA\x3\x2\x2\x2\x37C6"+
		"\x37C7\x5\x4C2\x262\x2\x37C7\x37C8\a\x4B5\x2\x2\x37C8\x37CA\x3\x2\x2\x2"+
		"\x37C9\x37B2\x3\x2\x2\x2\x37C9\x37B8\x3\x2\x2\x2\x37C9\x37BF\x3\x2\x2"+
		"\x2\x37C9\x37C6\x3\x2\x2\x2\x37C9\x37CA\x3\x2\x2\x2\x37CA\x37CB\x3\x2"+
		"\x2\x2\x37CB\x37CC\x5\x4C2\x262\x2\x37CC\x487\x3\x2\x2\x2\x37CD\x37CE"+
		"\x5\x4C2\x262\x2\x37CE\x37D0\a\x4B5\x2\x2\x37CF\x37D1\x5\x4C2\x262\x2"+
		"\x37D0\x37CF\x3\x2\x2\x2\x37D0\x37D1\x3\x2\x2\x2\x37D1\x37D2\x3\x2\x2"+
		"\x2\x37D2\x37D3\a\x4B5\x2\x2\x37D3\x37D8\x3\x2\x2\x2\x37D4\x37D5\x5\x4C2"+
		"\x262\x2\x37D5\x37D6\a\x4B5\x2\x2\x37D6\x37D8\x3\x2\x2\x2\x37D7\x37CD"+
		"\x3\x2\x2\x2\x37D7\x37D4\x3\x2\x2\x2\x37D7\x37D8\x3\x2\x2\x2\x37D8\x37DB"+
		"\x3\x2\x2\x2\x37D9\x37DC\x5\x4C2\x262\x2\x37DA\x37DC\a\x66\x2\x2\x37DB"+
		"\x37D9\x3\x2\x2\x2\x37DB\x37DA\x3\x2\x2\x2\x37DC\x489\x3\x2\x2\x2\x37DD"+
		"\x37DE\x5\x4C2\x262\x2\x37DE\x37DF\a\x4B5\x2\x2\x37DF\x37E1\x3\x2\x2\x2"+
		"\x37E0\x37DD\x3\x2\x2\x2\x37E0\x37E1\x3\x2\x2\x2\x37E1\x37E2\x3\x2\x2"+
		"\x2\x37E2\x37E3\x5\x4C2\x262\x2\x37E3\x48B\x3\x2\x2\x2\x37E4\x37E5\x5"+
		"\x4C2\x262\x2\x37E5\x37E6\a\x4B5\x2\x2\x37E6\x37E8\x3\x2\x2\x2\x37E7\x37E4"+
		"\x3\x2\x2\x2\x37E7\x37E8\x3\x2\x2\x2\x37E8\x37E9\x3\x2\x2\x2\x37E9\x37EA"+
		"\x5\x4C2\x262\x2\x37EA\x48D\x3\x2\x2\x2\x37EB\x37ED\x5\x4C2\x262\x2\x37EC"+
		"\x37EB\x3\x2\x2\x2\x37EC\x37ED\x3\x2\x2\x2\x37ED\x37EE\x3\x2\x2\x2\x37EE"+
		"\x37F0\a\x4B5\x2\x2\x37EF\x37F1\x5\x4C2\x262\x2\x37F0\x37EF\x3\x2\x2\x2"+
		"\x37F0\x37F1\x3\x2\x2\x2\x37F1\x37F2\x3\x2\x2\x2\x37F2\x37F3\a\x4B5\x2"+
		"\x2\x37F3\x37F6\x5\x4C2\x262\x2\x37F4\x37F6\x5\x48C\x247\x2\x37F5\x37EC"+
		"\x3\x2\x2\x2\x37F5\x37F4\x3\x2\x2\x2\x37F6\x48F\x3\x2\x2\x2\x37F7\x37F9"+
		"\x5\x4C2\x262\x2\x37F8\x37F7\x3\x2\x2\x2\x37F8\x37F9\x3\x2\x2\x2\x37F9"+
		"\x37FA\x3\x2\x2\x2\x37FA\x37FC\a\x4B5\x2\x2\x37FB\x37FD\x5\x4C2\x262\x2"+
		"\x37FC\x37FB\x3\x2\x2\x2\x37FC\x37FD\x3\x2\x2\x2\x37FD\x37FE\x3\x2\x2"+
		"\x2\x37FE\x3800\a\x4B5\x2\x2\x37FF\x3801\x5\x4C2\x262\x2\x3800\x37FF\x3"+
		"\x2\x2\x2\x3800\x3801\x3\x2\x2\x2\x3801\x3802\x3\x2\x2\x2\x3802\x3803"+
		"\a\x4B5\x2\x2\x3803\x3806\x5\x4C2\x262\x2\x3804\x3806\x5\x48E\x248\x2"+
		"\x3805\x37F8\x3\x2\x2\x2\x3805\x3804\x3\x2\x2\x2\x3806\x491\x3\x2\x2\x2"+
		"\x3807\x380A\x5\x486\x244\x2\x3808\x380A\a\x4A0\x2\x2\x3809\x3807\x3\x2"+
		"\x2\x2\x3809\x3808\x3\x2\x2\x2\x380A\x493\x3\x2\x2\x2\x380B\x380F\a\x103"+
		"\x2\x2\x380C\x380F\a\x1D1\x2\x2\x380D\x380F\x5\x486\x244\x2\x380E\x380B"+
		"\x3\x2\x2\x2\x380E\x380C\x3\x2\x2\x2\x380E\x380D\x3\x2\x2\x2\x380F\x3810"+
		"\x3\x2\x2\x2\x3810\x3812\a\x4B5\x2\x2\x3811\x380E\x3\x2\x2\x2\x3811\x3812"+
		"\x3\x2\x2\x2\x3812\x3816\x3\x2\x2\x2\x3813\x3817\x5\x4C2\x262\x2\x3814"+
		"\x3815\a\x4B9\x2\x2\x3815\x3817\t\xAB\x2\x2\x3816\x3813\x3\x2\x2\x2\x3816"+
		"\x3814\x3\x2\x2\x2\x3817\x495\x3\x2\x2\x2\x3818\x381A\x5\x4C2\x262\x2"+
		"\x3819\x381B\tK\x2\x2\x381A\x3819\x3\x2\x2\x2\x381A\x381B\x3\x2\x2\x2"+
		"\x381B\x3823\x3\x2\x2\x2\x381C\x381D\a\x4BC\x2\x2\x381D\x381F\x5\x4C2"+
		"\x262\x2\x381E\x3820\tK\x2\x2\x381F\x381E\x3\x2\x2\x2\x381F\x3820\x3\x2"+
		"\x2\x2\x3820\x3822\x3\x2\x2\x2\x3821\x381C\x3\x2\x2\x2\x3822\x3825\x3"+
		"\x2\x2\x2\x3823\x3821\x3\x2\x2\x2\x3823\x3824\x3\x2\x2\x2\x3824\x497\x3"+
		"\x2\x2\x2\x3825\x3823\x3\x2\x2\x2\x3826\x382B\x5\x49A\x24E\x2\x3827\x3828"+
		"\a\x4BC\x2\x2\x3828\x382A\x5\x49A\x24E\x2\x3829\x3827\x3\x2\x2\x2\x382A"+
		"\x382D\x3\x2\x2\x2\x382B\x3829\x3\x2\x2\x2\x382B\x382C\x3\x2\x2\x2\x382C"+
		"\x499\x3\x2\x2\x2\x382D\x382B\x3\x2\x2\x2\x382E\x3830\x5\x4C2\x262\x2"+
		"\x382F\x382E\x3\x2\x2\x2\x382F\x3830\x3\x2\x2\x2\x3830\x3831\x3\x2\x2"+
		"\x2\x3831\x3833\a\x4B5\x2\x2\x3832\x382F\x3\x2\x2\x2\x3833\x3836\x3\x2"+
		"\x2\x2\x3834\x3832\x3\x2\x2\x2\x3834\x3835\x3\x2\x2\x2\x3835\x3837\x3"+
		"\x2\x2\x2\x3836\x3834\x3\x2\x2\x2\x3837\x3838\x5\x4C2\x262\x2\x3838\x49B"+
		"\x3\x2\x2\x2\x3839\x383E\x5\x4C2\x262\x2\x383A\x383B\a\x4BC\x2\x2\x383B"+
		"\x383D\x5\x4C2\x262\x2\x383C\x383A\x3\x2\x2\x2\x383D\x3840\x3\x2\x2\x2"+
		"\x383E\x383C\x3\x2\x2\x2\x383E\x383F\x3\x2\x2\x2\x383F\x49D\x3\x2\x2\x2"+
		"\x3840\x383E\x3\x2\x2\x2\x3841\x3844\x5\x4C2\x262\x2\x3842\x3844\a\x4A0"+
		"\x2\x2\x3843\x3841\x3\x2\x2\x2\x3843\x3842\x3\x2\x2\x2\x3844\x49F\x3\x2"+
		"\x2\x2\x3845\x3846\t\x13\x2\x2\x3846\x4A1\x3\x2\x2\x2\x3847\x3848\tz\x2"+
		"\x2\x3848\x4A3\x3\x2\x2\x2\x3849\x384B\a\x271\x2\x2\x384A\x3849\x3\x2"+
		"\x2\x2\x384A\x384B\x3\x2\x2\x2\x384B\x384C\x3\x2\x2\x2\x384C\x384D\a\x281"+
		"\x2\x2\x384D\x4A5\x3\x2\x2\x2\x384E\x3854\x5\x490\x249\x2\x384F\x3854"+
		"\a\x33F\x2\x2\x3850\x3854\a\x1FF\x2\x2\x3851\x3854\a`\x2\x2\x3852\x3854"+
		"\a\x8D\x2\x2\x3853\x384E\x3\x2\x2\x2\x3853\x384F\x3\x2\x2\x2\x3853\x3850"+
		"\x3\x2\x2\x2\x3853\x3851\x3\x2\x2\x2\x3853\x3852\x3\x2\x2\x2\x3854\x4A7"+
		"\x3\x2\x2\x2\x3855\x3856\a\\\x2\x2\x3856\x3857\a\xC1\x2\x2\x3857\x3858"+
		"\a\x3E9\x2\x2\x3858\x3859\a\x4BA\x2\x2\x3859\x385A\a\x4A0\x2\x2\x385A"+
		"\x385B\a\x4BB\x2\x2\x385B\x385C\a\x3E8\x2\x2\x385C\x385D\a\x4A8\x2\x2"+
		"\x385D\x385F\x5\x1E8\xF5\x2\x385E\x3860\a\x4BD\x2\x2\x385F\x385E\x3\x2"+
		"\x2\x2\x385F\x3860\x3\x2\x2\x2\x3860\x4A9\x3\x2\x2\x2\x3861\x3862\a\\"+
		"\x2\x2\x3862\x3864\a\x10E\x2\x2\x3863\x3865\a\xC1\x2\x2\x3864\x3863\x3"+
		"\x2\x2\x2\x3864\x3865\x3\x2\x2\x2\x3865\x3866\x3\x2\x2\x2\x3866\x3867"+
		"\a\x4A0\x2\x2\x3867\x3868\a\x181\x2\x2\x3868\x3869\a\x37C\x2\x2\x3869"+
		"\x386A\x5\x4AE\x258\x2\x386A\x386B\a\x3EB\x2\x2\x386B\x386C\a\x37C\x2"+
		"\x2\x386C\x386F\x5\x4AE\x258\x2\x386D\x386E\a\x4BC\x2\x2\x386E\x3870\a"+
		"\x4A4\x2\x2\x386F\x386D\x3\x2\x2\x2\x386F\x3870\x3\x2\x2\x2\x3870\x3871"+
		"\x3\x2\x2\x2\x3871\x3872\a\x294\x2\x2\x3872\x3873\a\xBE\x2\x2\x3873\x388A"+
		"\x5\x4AC\x257\x2\x3874\x387B\a\x439\x2\x2\x3875\x3876\t\xAC\x2\x2\x3876"+
		"\x3877\a\x4A8\x2\x2\x3877\x3879\a\x4A0\x2\x2\x3878\x387A\a\x4BC\x2\x2"+
		"\x3879\x3878\x3\x2\x2\x2\x3879\x387A\x3\x2\x2\x2\x387A\x387C\x3\x2\x2"+
		"\x2\x387B\x3875\x3\x2\x2\x2\x387B\x387C\x3\x2\x2\x2\x387C\x3883\x3\x2"+
		"\x2\x2\x387D\x387E\a\x203\x2\x2\x387E\x387F\a\x4A8\x2\x2\x387F\x3881\t"+
		"\x2\x2\x2\x3880\x3882\a\x4BC\x2\x2\x3881\x3880\x3\x2\x2\x2\x3881\x3882"+
		"\x3\x2\x2\x2\x3882\x3884\x3\x2\x2\x2\x3883\x387D\x3\x2\x2\x2\x3883\x3884"+
		"\x3\x2\x2\x2\x3884\x3888\x3\x2\x2\x2\x3885\x3886\a\x12E\x2\x2\x3886\x3887"+
		"\a\x4A8\x2\x2\x3887\x3889\x5\x4A0\x251\x2\x3888\x3885\x3\x2\x2\x2\x3888"+
		"\x3889\x3\x2\x2\x2\x3889\x388B\x3\x2\x2\x2\x388A\x3874\x3\x2\x2\x2\x388A"+
		"\x388B\x3\x2\x2\x2\x388B\x388D\x3\x2\x2\x2\x388C\x388E\a\x4BD\x2\x2\x388D"+
		"\x388C\x3\x2\x2\x2\x388D\x388E\x3\x2\x2\x2\x388E\x4AB\x3\x2\x2\x2\x388F"+
		"\x3892\x5\x4C2\x262\x2\x3890\x3892\x5\x39C\x1CF\x2\x3891\x388F\x3\x2\x2"+
		"\x2\x3891\x3890\x3\x2\x2\x2\x3892\x4AD\x3\x2\x2\x2\x3893\x3896\x5\x4C2"+
		"\x262\x2\x3894\x3896\x5\x39C\x1CF\x2\x3895\x3893\x3\x2\x2\x2\x3895\x3894"+
		"\x3\x2\x2\x2\x3896\x4AF\x3\x2\x2\x2\x3897\x3898\a\x130\x2\x2\x3898\x3899"+
		"\a\xC1\x2\x2\x3899\x389B\a\x4A0\x2\x2\x389A\x389C\a\x4BD\x2\x2\x389B\x389A"+
		"\x3\x2\x2\x2\x389B\x389C\x3\x2\x2\x2\x389C\x38A9\x3\x2\x2\x2\x389D\x38A4"+
		"\a\x439\x2\x2\x389E\x389F\a\x134\x2\x2\x389F\x38A0\a\x4A8\x2\x2\x38A0"+
		"\x38A1\t\x3\x2\x2\x38A1\x38A2\a\x109\x2\x2\x38A2\x38A3\a\x4A8\x2\x2\x38A3"+
		"\x38A5\t\x3\x2\x2\x38A4\x389E\x3\x2\x2\x2\x38A4\x38A5\x3\x2\x2\x2\x38A5"+
		"\x38A7\x3\x2\x2\x2\x38A6\x38A8\a\x94\x2\x2\x38A7\x38A6\x3\x2\x2\x2\x38A7"+
		"\x38A8\x3\x2\x2\x2\x38A8\x38AA\x3\x2\x2\x2\x38A9\x389D\x3\x2\x2\x2\x38A9"+
		"\x38AA\x3\x2\x2\x2\x38AA\x4B1\x3\x2\x2\x2\x38AB\x38AD\a\x431\x2\x2\x38AC"+
		"\x38AB\x3\x2\x2\x2\x38AC\x38AD\x3\x2\x2\x2\x38AD\x38AE\x3\x2\x2\x2\x38AE"+
		"\x38AF\a\x4BA\x2\x2\x38AF\x38B0\x5\x4B4\x25B\x2\x38B0\x38B6\a\x4BB\x2"+
		"\x2\x38B1\x38B3\a\x4BC\x2\x2\x38B2\x38B1\x3\x2\x2\x2\x38B2\x38B3\x3\x2"+
		"\x2\x2\x38B3\x38B4\x3\x2\x2\x2\x38B4\x38B5\a\x3E8\x2\x2\x38B5\x38B7\x5"+
		"\x1E8\xF5\x2\x38B6\x38B2\x3\x2\x2\x2\x38B6\x38B7\x3\x2\x2\x2\x38B7\x38B9"+
		"\x3\x2\x2\x2\x38B8\x38BA\a\x4BD\x2\x2\x38B9\x38B8\x3\x2\x2\x2\x38B9\x38BA"+
		"\x3\x2\x2\x2\x38BA\x4B3\x3\x2\x2\x2\x38BB\x38BC\a\x18A\x2\x2\x38BC\x38BD"+
		"\a\xC1\x2\x2\x38BD\x38BE\a\x19A\x2\x2\x38BE\x38BF\t\x3\x2\x2\x38BF\x38C0"+
		"\a\x181\x2\x2\x38C0\x38C2\x5\x4B6\x25C\x2\x38C1\x38C3\a\x4BD\x2\x2\x38C2"+
		"\x38C1\x3\x2\x2\x2\x38C2\x38C3\x3\x2\x2\x2\x38C3\x4B5\x3\x2\x2\x2\x38C4"+
		"\x38C5\x5\x4C2\x262\x2\x38C5\x38C6\a\x4B5\x2\x2\x38C6\x38C7\x5\x4C2\x262"+
		"\x2\x38C7\x38C8\a\x4B5\x2\x2\x38C8\x38C9\x5\x4C2\x262\x2\x38C9\x38CC\x3"+
		"\x2\x2\x2\x38CA\x38CC\x5\x4C2\x262\x2\x38CB\x38C4\x3\x2\x2\x2\x38CB\x38CA"+
		"\x3\x2\x2\x2\x38CC\x4B7\x3\x2\x2\x2\x38CD\x38CE\a\x375\x2\x2\x38CE\x38CF"+
		"\a\x294\x2\x2\x38CF\x38D0\a\xC1\x2\x2\x38D0\x38D1\t\x3\x2\x2\x38D1\x38D2"+
		"\a\x240\x2\x2\x38D2\x38D3\a\x403\x2\x2\x38D3\x38D7\x5\x39C\x1CF\x2\x38D4"+
		"\x38D5\a\x4BA\x2\x2\x38D5\x38D6\t\x3\x2\x2\x38D6\x38D8\a\x4BB\x2\x2\x38D7"+
		"\x38D4\x3\x2\x2\x2\x38D7\x38D8\x3\x2\x2\x2\x38D8\x38DA\x3\x2\x2\x2\x38D9"+
		"\x38DB\a\x4BD\x2\x2\x38DA\x38D9\x3\x2\x2\x2\x38DA\x38DB\x3\x2\x2\x2\x38DB"+
		"\x4B9\x3\x2\x2\x2\x38DC\x38DD\t\xAD\x2\x2\x38DD\x38DE\a\x4BA\x2\x2\x38DE"+
		"\x38DF\a\x222\x2\x2\x38DF\x38FB\a\x4BB\x2\x2\x38E0\x38E1\x5\x4C2\x262"+
		"\x2\x38E1\x38E2\a\x4BA\x2\x2\x38E2\x38E3\a\x4A2\x2\x2\x38E3\x38E4\a\x4BC"+
		"\x2\x2\x38E4\x38E5\a\x4A2\x2\x2\x38E5\x38E6\a\x4BB\x2\x2\x38E6\x38FB\x3"+
		"\x2\x2\x2\x38E7\x38E8\x5\x4C2\x262\x2\x38E8\x38E9\a\x4BA\x2\x2\x38E9\x38EA"+
		"\a\x4A2\x2\x2\x38EA\x38EB\a\x4BB\x2\x2\x38EB\x38FB\x3\x2\x2\x2\x38EC\x38ED"+
		"\x5\x4C2\x262\x2\x38ED\x38F3\a\x1AF\x2\x2\x38EE\x38EF\a\x4BA\x2\x2\x38EF"+
		"\x38F0\a\x4A2\x2\x2\x38F0\x38F1\a\x4BC\x2\x2\x38F1\x38F2\a\x4A2\x2\x2"+
		"\x38F2\x38F4\a\x4BB\x2\x2\x38F3\x38EE\x3\x2\x2\x2\x38F3\x38F4\x3\x2\x2"+
		"\x2\x38F4\x38FB\x3\x2\x2\x2\x38F5\x38F7\a\x11B\x2\x2\x38F6\x38F8\a\x2D7"+
		"\x2\x2\x38F7\x38F6\x3\x2\x2\x2\x38F7\x38F8\x3\x2\x2\x2\x38F8\x38FB\x3"+
		"\x2\x2\x2\x38F9\x38FB\x5\x4C2\x262\x2\x38FA\x38DC\x3\x2\x2\x2\x38FA\x38E0"+
		"\x3\x2\x2\x2\x38FA\x38E7\x3\x2\x2\x2\x38FA\x38EC\x3\x2\x2\x2\x38FA\x38F5"+
		"\x3\x2\x2\x2\x38FA\x38F9\x3\x2\x2\x2\x38FB\x4BB\x3\x2\x2\x2\x38FC\x390C"+
		"\a\x4A4\x2\x2\x38FD\x390C\a\x4A5\x2\x2\x38FE\x3900\a\x4C4\x2\x2\x38FF"+
		"\x38FE\x3\x2\x2\x2\x38FF\x3900\x3\x2\x2\x2\x3900\x3901\x3\x2\x2\x2\x3901"+
		"\x390C\t\x8C\x2\x2\x3902\x3904\a\x4C4\x2\x2\x3903\x3902\x3\x2\x2\x2\x3903"+
		"\x3904\x3\x2\x2\x2\x3904\x3905\x3\x2\x2\x2\x3905\x3907\a\x4B9\x2\x2\x3906"+
		"\x3908\t\x89\x2\x2\x3907\x3906\x3\x2\x2\x2\x3907\x3908\x3\x2\x2\x2\x3908"+
		"\x3909\x3\x2\x2\x2\x3909\x390C\t\xAE\x2\x2\x390A\x390C\x5\x39E\x1D0\x2"+
		"\x390B\x38FC\x3\x2\x2\x2\x390B\x38FD\x3\x2\x2\x2\x390B\x38FF\x3\x2\x2"+
		"\x2\x390B\x3903\x3\x2\x2\x2\x390B\x390A\x3\x2\x2\x2\x390C\x4BD\x3\x2\x2"+
		"\x2\x390D\x3917\a\x4A4\x2\x2\x390E\x3917\a\x4A5\x2\x2\x390F\x3917\t\x8C"+
		"\x2\x2\x3910\x3912\a\x4B9\x2\x2\x3911\x3913\t\x89\x2\x2\x3912\x3911\x3"+
		"\x2\x2\x2\x3912\x3913\x3\x2\x2\x2\x3913\x3914\x3\x2\x2\x2\x3914\x3917"+
		"\t\xAE\x2\x2\x3915\x3917\x5\x39E\x1D0\x2\x3916\x390D\x3\x2\x2\x2\x3916"+
		"\x390E\x3\x2\x2\x2\x3916\x390F\x3\x2\x2\x2\x3916\x3910\x3\x2\x2\x2\x3916"+
		"\x3915\x3\x2\x2\x2\x3917\x4BF\x3\x2\x2\x2\x3918\x3919\t\xAF\x2\x2\x3919"+
		"\x4C1\x3\x2\x2\x2\x391A\x3922\a\x4A3\x2\x2\x391B\x3922\a\x4A1\x2\x2\x391C"+
		"\x3922\a\x49C\x2\x2\x391D\x3922\a\x49D\x2\x2\x391E\x3922\a\x49F\x2\x2"+
		"\x391F\x3922\x5\x4C0\x261\x2\x3920\x3922\a\x2FC\x2\x2\x3921\x391A\x3\x2"+
		"\x2\x2\x3921\x391B\x3\x2\x2\x2\x3921\x391C\x3\x2\x2\x2\x3921\x391D\x3"+
		"\x2\x2\x2\x3921\x391E\x3\x2\x2\x2\x3921\x391F\x3\x2\x2\x2\x3921\x3920"+
		"\x3\x2\x2\x2\x3922\x4C3\x3\x2\x2\x2\x3923\x3924\a\x4A3\x2\x2\x3924\x4C5"+
		"\x3\x2\x2\x2\x3925\x3928\x5\x4C2\x262\x2\x3926\x3928\a\x4A4\x2\x2\x3927"+
		"\x3925\x3\x2\x2\x2\x3927\x3926\x3\x2\x2\x2\x3928\x4C7\x3\x2\x2\x2\x3929"+
		"\x3939\a\x4A8\x2\x2\x392A\x3939\a\x4A9\x2\x2\x392B\x3939\a\x4AA\x2\x2"+
		"\x392C\x392D\a\x4AA\x2\x2\x392D\x3939\a\x4A8\x2\x2\x392E\x392F\a\x4A9"+
		"\x2\x2\x392F\x3939\a\x4A8\x2\x2\x3930\x3931\a\x4AA\x2\x2\x3931\x3939\a"+
		"\x4A9\x2\x2\x3932\x3933\a\x4AB\x2\x2\x3933\x3939\a\x4A8\x2\x2\x3934\x3935"+
		"\a\x4AB\x2\x2\x3935\x3939\a\x4A9\x2\x2\x3936\x3937\a\x4AB\x2\x2\x3937"+
		"\x3939\a\x4AA\x2\x2\x3938\x3929\x3\x2\x2\x2\x3938\x392A\x3\x2\x2\x2\x3938"+
		"\x392B\x3\x2\x2\x2\x3938\x392C\x3\x2\x2\x2\x3938\x392E\x3\x2\x2\x2\x3938"+
		"\x3930\x3\x2\x2\x2\x3938\x3932\x3\x2\x2\x2\x3938\x3934\x3\x2\x2\x2\x3938"+
		"\x3936\x3\x2\x2\x2\x3939\x4C9\x3\x2\x2\x2\x393A\x393B\t\xB0\x2\x2\x393B"+
		"\x4CB\x3\x2\x2\x2\x393C\x393E\a\x4A2\x2\x2\x393D\x393F\t\xB1\x2\x2\x393E"+
		"\x393D\x3\x2\x2\x2\x393E\x393F\x3\x2\x2\x2\x393F\x4CD\x3\x2\x2\x2\x73F"+
		"\x4D1\x4D9\x4DE\x4E2\x4E8\x4EA\x4EF\x4F6\x4F9\x4FF\x503\x507\x50B\x50F"+
		"\x513\x517\x51A\x521\x5C9\x5D0\x5DE\x5E2\x5E7\x5EC\x5F0\x5F4\x5F9\x5FE"+
		"\x600\x604\x607\x60E\x611\x61A\x61D\x628\x62D\x632\x637\x63C\x642\x646"+
		"\x649\x64D\x650\x653\x65A\x65E\x660\x665\x66B\x66F\x67B\x67F\x685\x688"+
		"\x691\x694\x6A9\x6B1\x6B6\x6B9\x6BE\x6C1\x6C6\x6CF\x6DB\x6E0\x6E3\x6E8"+
		"\x6EE\x6F3\x704\x707\x70A\x70D\x712\x71B\x72A\x73B\x746\x74C\x75B\x76A"+
		"\x773\x777\x77C\x782\x788\x78B\x790\x795\x79D\x7A7\x7BA\x7C2\x7CF\x7D1"+
		"\x7DD\x7DF\x7E6\x7EF\x7F5\x7FE\x80C\x816\x820\x848\x85F\x883\x885\x897"+
		"\x8AF\x8B2\x8C0\x8E0\x8F2\x8F5\x8FA\x8FD\x902\x905\x90A\x90D\x912\x915"+
		"\x91D\x920\x928\x935\x940\x945\x949\x94F\x966\x972\x97D\x982\x986\x98C"+
		"\x98E\x99B\x9B2\x9B9\x9C2\x9C7\x9CA\x9CF\x9D2\x9D7\x9DC\x9F8\xA00\xA06"+
		"\xA0D\xA0F\xA1C\xA23\xA32\xA44\xA47\xA49\xA4E\xA52\xA55\xA57\xA5D\xA60"+
		"\xA62\xA68\xA6A\xA80\xA88\xA90\xA92\xA94\xA9D\xAB2\xABF\xACE\xAD2\xAF5"+
		"\xAF8\xAFD\xB14\xB17\xB1C\xB36\xB44\xB49\xB51\xB56\xB5D\xB72\xB97\xB9C"+
		"\xBAF\xBBB\xBBE\xBC3\xBC6\xBCC\xBDB\xBE0\xBE8\xBEB\xBF0\xBF5\xBF8\xC10"+
		"\xC17\xC1C\xC21\xC26\xC28\xC2F\xC3C\xC42\xC47\xC4F\xC5F\xC66\xC6B\xC70"+
		"\xC73\xC79\xC7F\xC84\xC89\xC8E\xC91\xC97\xC9D\xCA8\xCAB\xCB5\xCBB\xCBF"+
		"\xCC3\xCE0\xCED\xCF3\xCFD\xD00\xD10\xD15\xD25\xD28\xD2B\xD30\xD33\xD38"+
		"\xD41\xD44\xD47\xD4E\xD56\xD5A\xD5C\xD5E\xD64\xD68\xD6D\xD70\xD72\xD7E"+
		"\xD81\xD83\xD8E\xD92\xD96\xD9B\xDAA\xDB1\xDBA\xDC2\xDC5\xDCA\xDCF\xDD7"+
		"\xDDD\xDE1\xDE7\xDEC\xDF0\xDF7\xDFF\xE07\xE10\xE15\xE19\xE1C\xE20\xE26"+
		"\xE2B\xE33\xE3B\xE41\xE47\xE4A\xE4F\xE52\xE59\xE5B\xE5E\xE64\xE67\xE6C"+
		"\xE6F\xE74\xE77\xE7C\xE7F\xE84\xE87\xE8A\xE8D\xE94\xE98\xE9F\xEA6\xEAC"+
		"\xEB9\xEBD\xEC2\xECC\xED5\xED9\xEE5\xEEB\xEF0\xEF2\xF06\xF0A\xF12\xF1B"+
		"\xF21\xF27\xF2F\xF31\xF3B\xF3F\xF42\xF46\xF4B\xF51\xF54\xF58\xF60\xF62"+
		"\xF65\xF6D\xF75\xF7C\xF83\xF85\xF87\xF8C\xF92\xF95\xF97\xF99\xF9C\xFA1"+
		"\xFA4\xFA9\xFB8\xFBF\xFC6\xFC8\xFCA\xFCF\xFD5\xFD8\xFDA\xFDC\xFDF\xFE4"+
		"\xFE7\xFEC\xFF9\xFFE\x1007\x100C\x1012\x1016\x101A\x102B\x102D\x1037\x103C"+
		"\x103E\x1042\x1048\x1050\x1055\x1058\x1060\x1063\x1068\x106D\x1072\x1077"+
		"\x107C\x1081\x1085\x108A\x1095\x109A\x109D\x10A0\x10A5\x10A8\x10AD\x10B0"+
		"\x10B5\x10B8\x10BD\x10C0\x10C5\x10C8\x10CD\x10D3\x10D8\x10DB\x10E0\x10E7"+
		"\x10E9\x10EF\x10F8\x10FD\x10FF\x110B\x1111\x111D\x1120\x1125\x1127\x1131"+
		"\x1136\x1138\x113C\x1142\x1154\x1156\x1165\x1177\x117F\x1189\x1199\x11AE"+
		"\x11B9\x11BF\x11C8\x11D1\x11D7\x11E0\x11E5\x11E8\x11ED\x11F0\x11F5\x11F8"+
		"\x1200\x1206\x120A\x1211\x1217\x121B\x121E\x1220\x1223\x1228\x122B\x1230"+
		"\x1233\x1238\x123B\x1240\x1243\x1252\x125D\x1268\x126F\x1272\x127A\x1280"+
		"\x1289\x1290\x1299\x12A3\x12A8\x12B6\x12C1\x12C8\x12CB\x12D3\x12DA\x12E1"+
		"\x12E5\x12EA\x12ED\x12F2\x12F5\x12FA\x12FD\x1306\x130D\x131C\x131F\x1324"+
		"\x132F\x1338\x1343\x1349\x134B\x1353\x135B\x1360\x136B\x136E\x1372\x137A"+
		"\x137E\x1382\x138A\x138F\x1397\x139C\x13A0\x13A2\x13A7\x13B0\x13B3\x13B8"+
		"\x13BF\x13C5\x13C7\x13CC\x13D2\x13D8\x13DD\x13E3\x13EA\x13EF\x13F4\x13F9"+
		"\x13FC\x1400\x1403\x1407\x140B\x140E\x1412\x1417\x141B\x141F\x1429\x142F"+
		"\x1436\x1439\x143F\x1445\x144A\x144C\x1452\x1454\x1459\x145F\x1465\x146A"+
		"\x146C\x1470\x1474\x1477\x1485\x148A\x148E\x149B\x149E\x14A0\x14A8\x14B2"+
		"\x14B8\x14BF\x14C2\x14C8\x14CE\x14D3\x14D5\x14DB\x14DD\x14E2\x14E8\x14EE"+
		"\x14F4\x14F9\x14FB\x14FF\x1503\x1506\x1514\x1519\x151D\x152A\x152D\x152F"+
		"\x1537\x1542\x154B\x1554\x155F\x1568\x1571\x157D\x1581\x1586\x1588\x158A"+
		"\x158F\x1593\x1598\x159A\x159C\x15AA\x15AF\x15C5\x15DB\x15E0\x15ED\x15F5"+
		"\x1607\x160A\x1612\x1617\x1622\x1629\x162E\x1632\x1636\x1639\x1640\x1652"+
		"\x1654\x1668\x166F\x1676\x167B\x1680\x1686\x168B\x168D\x1694\x169A\x16A0"+
		"\x16A3\x16A9\x16B3\x16B6\x16BD\x16C0\x16C5\x16C7\x16CF\x16D3\x16D9\x16DE"+
		"\x16E0\x16E3\x16EA\x16F0\x16F7\x16FA\x1700\x1705\x1707\x170A\x1712\x1718"+
		"\x171F\x1722\x1728\x172D\x172F\x1737\x173F\x1745\x174A\x174C\x1756\x175B"+
		"\x1765\x176B\x1777\x1779\x1780\x1786\x178C\x1792\x1797\x1799\x17A0\x17A8"+
		"\x17AE\x17BC\x17BE\x17C1\x17C6\x17C8\x17D4\x17DA\x17E8\x17EA\x17ED\x17F2"+
		"\x17F5\x17FA\x17FC\x1805\x180C\x1818\x1828\x1831\x183A\x183D\x1842\x1849"+
		"\x184B\x1851\x1853\x185B\x185D\x1863\x1865\x186B\x186D\x1874\x1877\x1879"+
		"\x187C\x1880\x1882\x188C\x1892\x1896\x189E\x18A5\x18AB\x18AD\x18B8\x18BD"+
		"\x18C3\x18C7\x18D1\x18D9\x18E5\x18E8\x18F0\x18F2\x18F5\x18F9\x18FC\x1905"+
		"\x1908\x190B\x1913\x1919\x1920\x1924\x192F\x1935\x1937\x1940\x1944\x194B"+
		"\x1950\x1953\x195B\x195F\x1962\x1966\x1969\x196D\x1974\x1978\x197A\x197C"+
		"\x197F\x1982\x1985\x198A\x198D\x1995\x1997\x199A\x199E\x19A1\x19A7\x19AA"+
		"\x19AE\x19B1\x19B4\x19BB\x19BE\x19C5\x19CB\x19CF\x19D9\x19DC\x19DF\x19E5"+
		"\x19E8\x19EB\x19EE\x19F2\x19F5\x19FD\x19FF\x1A03\x1A06\x1A0E\x1A12\x1A16"+
		"\x1A1D\x1A21\x1A23\x1A25\x1A28\x1A2B\x1A2E\x1A36\x1A3C\x1A42\x1A44\x1A48"+
		"\x1A4B\x1A53\x1A57\x1A5E\x1A61\x1A6A\x1A6D\x1A71\x1A79\x1A7C\x1A84\x1A88"+
		"\x1A8F\x1A92\x1A9A\x1A9F\x1AA8\x1AAB\x1AAF\x1AB7\x1ABA\x1AC6\x1ACA\x1ACD"+
		"\x1ADB\x1ADF\x1AE2\x1AE6\x1AE9\x1AF2\x1AFE\x1B04\x1B0D\x1B12\x1B1B\x1B27"+
		"\x1B2A\x1B30\x1B33\x1B3C\x1B47\x1B50\x1B68\x1B6A\x1B70\x1B73\x1B7A\x1B7C"+
		"\x1B85\x1BA3\x1BA6\x1BAF\x1BBE\x1BC4\x1BC6\x1BCF\x1BE1\x1BE7\x1BF0\x1BF3"+
		"\x1BF5\x1BFD\x1C03\x1C07\x1C14\x1C18\x1C1B\x1C24\x1C36\x1C3C\x1C3E\x1C42"+
		"\x1C4E\x1C51\x1C55\x1C58\x1C5C\x1C6C\x1C6E\x1C70\x1C73\x1C76\x1C7F\x1C9A"+
		"\x1C9D\x1CAB\x1CB0\x1CB3\x1CB9\x1CBC\x1CC3\x1CC7\x1CC9\x1CD1\x1CD4\x1CD8"+
		"\x1CDF\x1CE2\x1CEE\x1CF3\x1CF6\x1D02\x1D05\x1D0B\x1D12\x1D17\x1D1C\x1D22"+
		"\x1D26\x1D2D\x1D30\x1D38\x1D40\x1D43\x1D4B\x1D52\x1D59\x1D5C\x1D66\x1D6D"+
		"\x1D72\x1D75\x1D7F\x1D82\x1D85\x1D8E\x1D90\x1D9B\x1D9E\x1DA1\x1DA8\x1DAD"+
		"\x1DB1\x1DB3\x1DBD\x1DC0\x1DC3\x1DCA\x1DD0\x1DD4\x1DDA\x1DDE\x1DE3\x1DE7"+
		"\x1DEB\x1DEE\x1DF3\x1E01\x1E11\x1E15\x1E1B\x1E1D\x1E20\x1E2C\x1E31\x1E34"+
		"\x1E3C\x1E41\x1E46\x1E4C\x1E51\x1E55\x1E6D\x1E75\x1E7A\x1E7E\x1E83\x1E88"+
		"\x1E8F\x1E94\x1E97\x1E9C\x1E9F\x1EAD\x1EB4\x1EB8\x1EBA\x1EC3\x1ECD\x1ED0"+
		"\x1ED4\x1EDB\x1EF0\x1EF5\x1EF9\x1F02\x1F08\x1F0A\x1F13\x1F34\x1F3A\x1F3C"+
		"\x1F41\x1F44\x1F4C\x1F54\x1F57\x1F5E\x1F61\x1F74\x1F7D\x1F88\x1F95\x1F99"+
		"\x1F9B\x1FA3\x1FAB\x1FB1\x1FB4\x1FB7\x1FBA\x1FC0\x1FC4\x1FCC\x1FD8\x1FE4"+
		"\x1FE8\x1FEB\x1FF4\x1FFA\x2004\x200D\x2017\x201D\x2023\x202A\x2030\x2034"+
		"\x203F\x204E\x2050\x206D\x207A\x209F\x20AA\x20B2\x20BE\x20C3\x20C7\x20D0"+
		"\x20DA\x20E1\x20E6\x20F6\x20F9\x20FC\x2101\x2104\x2109\x2112\x2115\x2118"+
		"\x211F\x2129\x213D\x2143\x215C\x215E\x2178\x217E\x2189\x2191\x2194\x21A5"+
		"\x21AD\x21B4\x21CB\x21D8\x21DE\x21E5\x21ED\x21F0\x21F3\x21FC\x2206\x220D"+
		"\x2211\x2215\x221B\x2222\x2226\x222C\x2233\x223A\x223D\x2243\x224A\x224E"+
		"\x2253\x2258\x225D\x2265\x226C\x2270\x2276\x227D\x2281\x2289\x228B\x2293"+
		"\x2299\x229F\x22B0\x22B4\x22BC\x22C1\x22C9\x22CF\x22DA\x22DF\x22E6\x22EA"+
		"\x22EE\x22F2\x22F5\x22F9\x22FF\x2303\x2305\x230C\x2313\x2316\x2319\x2320"+
		"\x2325\x232A\x232E\x2334\x2338\x233A\x233F\x2344\x2348\x234D\x2353\x2357"+
		"\x235B\x235D\x2361\x2365\x2369\x236D\x2373\x2376\x237C\x2380\x2384\x238A"+
		"\x2390\x2392\x2395\x2399\x239D\x23A1\x23A7\x23AA\x23B0\x23B6\x23B9\x23BF"+
		"\x23C2\x23C8\x23CB\x23CF\x23D3\x23D7\x23DC\x23DF\x23E3\x23E7\x23F8\x23FA"+
		"\x23FC\x23FF\x2406\x240B\x240F\x2415\x2419\x241B\x2420\x2425\x2429\x242E"+
		"\x2434\x2438\x243C\x243E\x2442\x2446\x244A\x244E\x2454\x2457\x245D\x2461"+
		"\x2465\x246B\x2471\x2473\x2476\x247A\x247E\x2482\x2488\x248B\x2491\x2497"+
		"\x249A\x24A0\x24A3\x24A9\x24AC\x24B0\x24B4\x24B8\x24BD\x24C0\x24C4\x24C8"+
		"\x24CE\x24D1\x24D5\x24E6\x24E8\x24EA\x24ED\x24FB\x2501\x2509\x2510\x2512"+
		"\x2515\x2536\x253A\x253E\x2545\x254E\x2556\x2559\x255C\x2560\x2564\x2567"+
		"\x256F\x2577\x257B\x2582\x2584\x258B\x2593\x2596\x25A1\x25A6\x25AA\x25AD"+
		"\x25B1\x25B5\x25BA\x25C1\x25C3\x25C9\x25CC\x25D4\x25DA\x25DE\x25E1\x25E8"+
		"\x25EB\x25F1\x25F5\x25FC\x2601\x2609\x260E\x261A\x261C\x2627\x262E\x2638"+
		"\x264F\x265C\x266C\x2671\x2678\x267B\x267F\x2681\x2692\x26A1\x26A9\x26B2"+
		"\x26BA\x26C2\x26D3\x26E0\x26EC\x2704\x270B\x270F\x2719\x271D\x272E\x2755"+
		"\x275C\x2764\x2770\x2786\x278F\x2791\x2797\x27AB\x27AD\x27AF\x27B2\x27B9"+
		"\x27BF\x27C4\x27C6\x27CC\x27D4\x27D6\x27DA\x27E4\x27E8\x27EE\x27F0\x27F4"+
		"\x27FB\x2800\x2805\x2809\x2812\x2818\x2821\x2824\x2826\x282D\x2830\x2834"+
		"\x283C\x283F\x2847\x284A\x2856\x285D\x2861\x2864\x286C\x286F\x2879\x287F"+
		"\x2883\x2886\x288E\x2891\x289C\x289E\x28A7\x28AA\x28B1\x28B6\x28BA\x28BF"+
		"\x28CF\x28D2\x28D9\x28DD\x28E2\x28EB\x28EF\x28F7\x28FA\x2903\x2906\x290A"+
		"\x2913\x2915\x291A\x2922\x2929\x292D\x293F\x2947\x294C\x2952\x2957\x2960"+
		"\x2963\x2966\x2971\x2976\x2981\x2986\x298C\x2993\x2995\x299A\x299E\x29A4"+
		"\x29B0\x29BA\x29C5\x29D8\x29ED\x29EF\x29F1\x29F9\x29FD\x2A03\x2A06\x2A0B"+
		"\x2A0F\x2A14\x2A17\x2A1A\x2A1F\x2A21\x2A2B\x2A2F\x2A34\x2A37\x2A4C\x2A57"+
		"\x2A5A\x2A64\x2A67\x2A6A\x2A73\x2A75\x2A7B\x2A81\x2A90\x2A9B\x2AA4\x2AC8"+
		"\x2ACE\x2ADC\x2AE1\x2AE5\x2AF1\x2AF4\x2AFD\x2AFF\x2B09\x2B0B\x2B0D\x2B10"+
		"\x2B13\x2B1E\x2B20\x2B22\x2B25\x2B2A\x2B35\x2B3E\x2B41\x2B44\x2B4D\x2B50"+
		"\x2B53\x2B5A\x2B5D\x2B64\x2B6A\x2B70\x2B7F\x2B82\x2B89\x2B91\x2B98\x2B9E"+
		"\x2BA9\x2BB7\x2BC1\x2BC3\x2BD1\x2BD8\x2BDC\x2BE4\x2BE8\x2BEC\x2BF2\x2BFC"+
		"\x2C06\x2C0E\x2C1A\x2C20\x2C24\x2C2E\x2C32\x2C36\x2C40\x2C46\x2C4E\x2C56"+
		"\x2C58\x2C74\x2C80\x2C87\x2C8F\x2C96\x2C9C\x2CA0\x2CA5\x2CAD\x2CB0\x2CB2"+
		"\x2CB6\x2CBA\x2CC1\x2CC5\x2CC8\x2CCD\x2CD1\x2CD5\x2CDA\x2CE1\x2CEC\x2CF1"+
		"\x2CF3\x2CF7\x2CFC\x2D00\x2D09\x2D10\x2D19\x2D26\x2D28\x2D32\x2D35\x2D3A"+
		"\x2D43\x2D45\x2D47\x2D4C\x2D4E\x2D56\x2D5B\x2D63\x2D68\x2D6E\x2D70\x2D7C"+
		"\x2D80\x2D83\x2D8D\x2D8F\x2D94\x2D97\x2D9E\x2DA2\x2DA6\x2DB1\x2DD3\x2DE5"+
		"\x2DEC\x2DEE\x2DF5\x2DFE\x2E06\x2E0C\x2E13\x2E19\x2E1C\x2E1E\x2E26\x2E28"+
		"\x2E2F\x2E33\x2E3B\x2E3E\x2E45\x2E4B\x2E54\x2E59\x2E5D\x2E64\x2E66\x2E6A"+
		"\x2E6F\x2E71\x2E76\x2E78\x2E7C\x2E83\x2E85\x2E8C\x2E92\x2E9B\x2EA3\x2EA6"+
		"\x2EAD\x2EB5\x2EB8\x2EBF\x2EC5\x2ECC\x2ED2\x2ED6\x2EEF\x2EF2\x2EF6\x2EF8"+
		"\x2EFB\x2F29\x2F3E\x2F42\x2F46\x2F54\x2F5E\x2F67\x2F6E\x2F73\x2F87\x2F8D"+
		"\x2F94\x2F98\x2FA7\x2FAD\x2FC0\x2FCB\x2FD8\x2FE9\x2FEF\x2FF6\x2FFA\x3043"+
		"\x3049\x30AC\x30B8\x30C1\x30CA\x30E9\x30EF\x3123\x3130\x3140\x3153\x317E"+
		"\x31B4\x31B6\x31C6\x31F1\x3208\x320B\x3216\x3219\x324A\x3252\x325D\x329A"+
		"\x32CC\x32EA\x336C\x33BB\x33BF\x33D4\x33E7\x33F2\x33F5\x33F8\x33FE\x3401"+
		"\x3410\x3462\x347D\x3487\x34BA\x34C2\x34D5\x34D7\x34E5\x34EE\x3501\x3503"+
		"\x3512\x351F\x3525\x352D\x352F\x3535\x353D\x3543\x3546\x354C\x3557\x3560"+
		"\x3569\x3575\x3587\x3597\x35A7\x35CF\x35DB\x35E3\x35F6\x35FB\x3605\x360A"+
		"\x3616\x3622\x362E\x3638\x3652\x3656\x365E\x3665\x3672\x367A\x3687\x368E"+
		"\x3694\x3698\x36A9\x36B8\x36BA\x36C7\x36DA\x36DE\x36E1\x36EA\x36ED\x36F0"+
		"\x36FD\x3701\x3709\x370F\x3717\x371E\x3724\x3737\x373C\x3745\x374B\x3751"+
		"\x3754\x3758\x375F\x3767\x376A\x3770\x3776\x3778\x377E\x3781\x3783\x3789"+
		"\x378B\x3799\x37A0\x37A9\x37B0\x37C2\x37C9\x37D0\x37D7\x37DB\x37E0\x37E7"+
		"\x37EC\x37F0\x37F5\x37F8\x37FC\x3800\x3805\x3809\x380E\x3811\x3816\x381A"+
		"\x381F\x3823\x382B\x382F\x3834\x383E\x3843\x384A\x3853\x385F\x3864\x386F"+
		"\x3879\x387B\x3881\x3883\x3888\x388A\x388D\x3891\x3895\x389B\x38A4\x38A7"+
		"\x38A9\x38AC\x38B2\x38B6\x38B9\x38C2\x38CB\x38D7\x38DA\x38F3\x38F7\x38FA"+
		"\x38FF\x3903\x3907\x390B\x3912\x3916\x3921\x3927\x3938\x393E";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace SqlSchemaCompare.Core.TSql
