//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\GitHub\SqlSchemaCompare\SqlSchemaCompareGenerator\SqlSchemaCompareGenerator.Console\TSqlParser.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SqlSchemaCompare.Core.TSql {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class TSqlParser : Parser {
	public const int
		ABORT=1, ABORT_AFTER_WAIT=2, ABSENT=3, ABSOLUTE=4, ACCELERATED_DATABASE_RECOVERY=5, 
		ACCENT_SENSITIVITY=6, ACCESS=7, ACTION=8, ACTIVATION=9, ACTIVE=10, ADD=11, 
		ADDRESS=12, ADMINISTER=13, AES=14, AES_128=15, AES_192=16, AES_256=17, 
		AFFINITY=18, AFTER=19, AGGREGATE=20, ALGORITHM=21, ALL=22, ALLOWED=23, 
		ALLOW_CONNECTIONS=24, ALLOW_ENCRYPTED_VALUE_MODIFICATIONS=25, ALLOW_MULTIPLE_EVENT_LOSS=26, 
		ALLOW_PAGE_LOCKS=27, ALLOW_ROW_LOCKS=28, ALLOW_SINGLE_EVENT_LOSS=29, ALLOW_SNAPSHOT_ISOLATION=30, 
		ALL_CONSTRAINTS=31, ALL_ERRORMSGS=32, ALL_INDEXES=33, ALL_LEVELS=34, ALTER=35, 
		ALWAYS=36, AND=37, ANONYMOUS=38, ANSI_DEFAULTS=39, ANSI_NULLS=40, ANSI_NULL_DEFAULT=41, 
		ANSI_NULL_DFLT_OFF=42, ANSI_NULL_DFLT_ON=43, ANSI_PADDING=44, ANSI_WARNINGS=45, 
		ANY=46, APPEND=47, APPLICATION=48, APPLICATION_LOG=49, APPLOCK_MODE=50, 
		APPLOCK_TEST=51, APPLY=52, APP_NAME=53, ARITHABORT=54, ARITHIGNORE=55, 
		AS=56, ASC=57, ASCII=58, ASSEMBLY=59, ASSEMBLYPROPERTY=60, ASYMMETRIC=61, 
		ASYNCHRONOUS_COMMIT=62, AT_KEYWORD=63, AUDIT=64, AUDIT_GUID=65, AUTHENTICATE=66, 
		AUTHENTICATION=67, AUTHORIZATION=68, AUTO=69, AUTOGROW_ALL_FILES=70, AUTOGROW_SINGLE_FILE=71, 
		AUTOMATED_BACKUP_PREFERENCE=72, AUTOMATIC=73, AUTO_CLEANUP=74, AUTO_CLOSE=75, 
		AUTO_CREATE_STATISTICS=76, AUTO_DROP=77, AUTO_SHRINK=78, AUTO_UPDATE_STATISTICS=79, 
		AUTO_UPDATE_STATISTICS_ASYNC=80, AVAILABILITY=81, AVAILABILITY_MODE=82, 
		AVG=83, BACKSLASH=84, BACKUP=85, BACKUP_CLONEDB=86, BACKUP_PRIORITY=87, 
		BASE64=88, BEFORE=89, BEGIN=90, BEGIN_DIALOG=91, BETWEEN=92, BIGINT=93, 
		BINARY_BASE64=94, BINARY_CHECKSUM=95, BINARY_KEYWORD=96, BINDING=97, BLOB_STORAGE=98, 
		BLOCK=99, BLOCKERS=100, BLOCKING_HIERARCHY=101, BLOCKSIZE=102, BREAK=103, 
		BROKER=104, BROKER_INSTANCE=105, BROWSE=106, BUFFER=107, BUFFERCOUNT=108, 
		BULK=109, BULK_LOGGED=110, BY=111, CACHE=112, CALLED=113, CALLER=114, 
		CAP_CPU_PERCENT=115, CASCADE=116, CASE=117, CAST=118, CATALOG=119, CATALOG_COLLATION=120, 
		CATCH=121, CERTENCODED=122, CERTIFICATE=123, CERTPRIVATEKEY=124, CERT_ID=125, 
		CHANGE=126, CHANGES=127, CHANGETABLE=128, CHANGE_RETENTION=129, CHANGE_TRACKING=130, 
		CHAR=131, CHARINDEX=132, CHECK=133, CHECKALLOC=134, CHECKCATALOG=135, 
		CHECKCONSTRAINTS=136, CHECKDB=137, CHECKFILEGROUP=138, CHECKPOINT=139, 
		CHECKSUM=140, CHECKSUM_AGG=141, CHECKTABLE=142, CHECK_EXPIRATION=143, 
		CHECK_POLICY=144, CLASSIFIER_FUNCTION=145, CLEANTABLE=146, CLEANUP=147, 
		CLONEDATABASE=148, CLOSE=149, CLUSTER=150, CLUSTERED=151, COALESCE=152, 
		COLLATE=153, COLLECTION=154, COLUMN=155, COLUMNPROPERTY=156, COLUMNS=157, 
		COLUMNSTORE=158, COLUMNSTORE_ARCHIVE=159, COLUMN_ENCRYPTION_KEY=160, COLUMN_MASTER_KEY=161, 
		COL_LENGTH=162, COL_NAME=163, COMMIT=164, COMMITTED=165, COMPATIBILITY_LEVEL=166, 
		COMPRESS=167, COMPRESSION=168, COMPRESSION_DELAY=169, COMPRESS_ALL_ROW_GROUPS=170, 
		COMPUTE=171, CONCAT=172, CONCAT_NULL_YIELDS_NULL=173, CONCAT_WS=174, CONFIGURATION=175, 
		CONNECT=176, CONNECTION=177, CONNECTIONPROPERTY=178, CONSTRAINT=179, CONTAINMENT=180, 
		CONTAINS=181, CONTAINSTABLE=182, CONTENT=183, CONTEXT=184, CONTEXT_INFO=185, 
		CONTINUE=186, CONTINUE_AFTER_ERROR=187, CONTRACT=188, CONTRACT_NAME=189, 
		CONTROL=190, CONVERSATION=191, CONVERT=192, COOKIE=193, COPY_ONLY=194, 
		COUNT=195, COUNTER=196, COUNT_BIG=197, CPU=198, CREATE=199, CREATE_NEW=200, 
		CREATION_DISPOSITION=201, CREDENTIAL=202, CROSS=203, CRYPTOGRAPHIC=204, 
		CUME_DIST=205, CURRENT=206, CURRENT_DATE=207, CURRENT_REQUEST_ID=208, 
		CURRENT_TIME=209, CURRENT_TIMESTAMP=210, CURRENT_TRANSACTION_ID=211, CURRENT_USER=212, 
		CURSOR=213, CURSOR_CLOSE_ON_COMMIT=214, CURSOR_DEFAULT=215, CURSOR_STATUS=216, 
		CYCLE=217, DATA=218, DATABASE=219, DATABASE_DEFAULT=220, DATABASE_MIRRORING=221, 
		DATABASE_PRINCIPAL_ID=222, DATALENGTH=223, DATASPACE=224, DATA_COMPRESSION=225, 
		DATA_PURITY=226, DATA_SOURCE=227, DATEADD=228, DATEDIFF=229, DATENAME=230, 
		DATEPART=231, DATE_CORRELATION_OPTIMIZATION=232, DAYS=233, DBCC=234, DBREINDEX=235, 
		DB_CHAINING=236, DB_FAILOVER=237, DB_ID=238, DB_NAME=239, DDL=240, DEALLOCATE=241, 
		DECLARE=242, DECOMPRESS=243, DECRYPTION=244, DEFAULT=245, DEFAULT_DATABASE=246, 
		DEFAULT_DOUBLE_QUOTE=247, DEFAULT_FULLTEXT_LANGUAGE=248, DEFAULT_LANGUAGE=249, 
		DEFAULT_SCHEMA=250, DEFINITION=251, DELAY=252, DELAYED_DURABILITY=253, 
		DELETE=254, DELETED=255, DENSE_RANK=256, DENY=257, DEPENDENTS=258, DES=259, 
		DESC=260, DESCRIPTION=261, DESX=262, DETERMINISTIC=263, DHCP=264, DIAGNOSTICS=265, 
		DIALOG=266, DIFFERENCE=267, DIFFERENTIAL=268, DIRECTORY_NAME=269, DISABLE=270, 
		DISABLED=271, DISABLE_BROKER=272, DISK=273, DISTINCT=274, DISTRIBUTED=275, 
		DISTRIBUTION=276, DOCUMENT=277, DOLLAR_PARTITION=278, DOUBLE=279, DOUBLE_BACK_SLASH=280, 
		DOUBLE_FORWARD_SLASH=281, DROP=282, DROPCLEANBUFFERS=283, DROP_EXISTING=284, 
		DTC_SUPPORT=285, DUMP=286, DYNAMIC=287, ELEMENTS=288, ELSE=289, EMERGENCY=290, 
		EMPTY=291, ENABLE=292, ENABLED=293, ENABLE_BROKER=294, ENCRYPTED=295, 
		ENCRYPTED_VALUE=296, ENCRYPTION=297, ENCRYPTION_TYPE=298, END=299, ENDPOINT=300, 
		ENDPOINT_URL=301, ERRLVL=302, ERROR=303, ERROR_BROKER_CONVERSATIONS=304, 
		ERROR_LINE=305, ERROR_MESSAGE=306, ERROR_NUMBER=307, ERROR_PROCEDURE=308, 
		ERROR_SEVERITY=309, ERROR_STATE=310, ESCAPE=311, ESTIMATEONLY=312, EVENT=313, 
		EVENT_RETENTION_MODE=314, EVENTDATA=315, EXCEPT=316, EXCLUSIVE=317, EXECUTABLE=318, 
		EXECUTABLE_FILE=319, EXECUTE=320, EXIST=321, EXISTS=322, EXIST_SQUARE_BRACKET=323, 
		EXIT=324, EXPAND=325, EXPIREDATE=326, EXPIRY_DATE=327, EXPLICIT=328, EXTENDED_LOGICAL_CHECKS=329, 
		EXTENSION=330, EXTERNAL=331, EXTERNAL_ACCESS=332, FAILOVER=333, FAILOVER_MODE=334, 
		FAILURE=335, FAILURECONDITIONLEVEL=336, FAILURE_CONDITION_LEVEL=337, FAIL_OPERATION=338, 
		FAN_IN=339, FAST=340, FAST_FORWARD=341, FETCH=342, FILE=343, FILEGROUP=344, 
		FILEGROUPPROPERTY=345, FILEGROUP_ID=346, FILEGROUP_NAME=347, FILEGROWTH=348, 
		FILENAME=349, FILEPATH=350, FILEPROPERTY=351, FILEPROPERTYEX=352, FILESTREAM=353, 
		FILESTREAM_ON=354, FILE_ID=355, FILE_IDEX=356, FILE_NAME=357, FILE_SNAPSHOT=358, 
		FILLFACTOR=359, FILTER=360, FIRST=361, FIRST_VALUE=362, FMTONLY=363, FOLLOWING=364, 
		FOR=365, FORCE=366, FORCED=367, FORCEPLAN=368, FORCESCAN=369, FORCESEEK=370, 
		FORCE_FAILOVER_ALLOW_DATA_LOSS=371, FORCE_SERVICE_ALLOW_DATA_LOSS=372, 
		FOREIGN=373, FORMAT=374, FORMATMESSAGE=375, FORWARD_ONLY=376, FREE=377, 
		FREETEXT=378, FREETEXTTABLE=379, FROM=380, FULL=381, FULLSCAN=382, FULLTEXT=383, 
		FULLTEXTCATALOGPROPERTY=384, FULLTEXTSERVICEPROPERTY=385, FUNCTION=386, 
		GB=387, GENERATED=388, GET=389, GETANCESTOR=390, GETANSINULL=391, GETDATE=392, 
		GETDESCENDANT=393, GETLEVEL=394, GETREPARENTEDVALUE=395, GETROOT=396, 
		GETUTCDATE=397, GET_FILESTREAM_TRANSACTION_CONTEXT=398, GLOBAL=399, GO=400, 
		GO_BATCH=401, GOTO=402, GOVERNOR=403, GRANT=404, GREATEST=405, GROUP=406, 
		GROUPING=407, GROUPING_ID=408, GROUP_MAX_REQUESTS=409, HADR=410, HASH=411, 
		HASHED=412, HAS_DBACCESS=413, HAS_PERMS_BY_NAME=414, HAVING=415, HEALTHCHECKTIMEOUT=416, 
		HEALTH_CHECK_TIMEOUT=417, HEAP=418, HIDDEN_KEYWORD=419, HIERARCHYID=420, 
		HIGH=421, HOLDLOCK=422, HONOR_BROKER_PRIORITY=423, HOST_ID=424, HOST_NAME=425, 
		HOURS=426, IDENTITY=427, IDENTITYCOL=428, IDENTITY_INSERT=429, IDENTITY_VALUE=430, 
		IDENT_CURRENT=431, IDENT_INCR=432, IDENT_SEED=433, IF=434, IGNORE_CONSTRAINTS=435, 
		IGNORE_DUP_KEY=436, IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=437, IGNORE_REPLICATED_TABLE_CACHE=438, 
		IGNORE_TRIGGERS=439, IIF=440, IMMEDIATE=441, IMPERSONATE=442, IMPLICIT_TRANSACTIONS=443, 
		IMPORTANCE=444, IN=445, INCLUDE=446, INCLUDE_NULL_VALUES=447, INCREMENT=448, 
		INCREMENTAL=449, INDEX=450, INDEXKEY_PROPERTY=451, INDEXPROPERTY=452, 
		INDEX_COL=453, INFINITE=454, INIT=455, INITIATOR=456, INNER=457, INPUT=458, 
		INSENSITIVE=459, INSERT=460, INSERTED=461, INSTEAD=462, INT=463, INTERSECT=464, 
		INTO=465, IO=466, IP=467, IS=468, ISDESCENDANTOF=469, ISJSON=470, ISNULL=471, 
		ISNUMERIC=472, ISOLATION=473, IS_MEMBER=474, IS_ROLEMEMBER=475, IS_SRVROLEMEMBER=476, 
		JOB=477, JOIN=478, JSON=479, JSON_ARRAY=480, JSON_MODIFY=481, JSON_OBJECT=482, 
		JSON_PATH_EXISTS=483, JSON_QUERY=484, JSON_VALUE=485, KB=486, KEEP=487, 
		KEEPDEFAULTS=488, KEEPFIXED=489, KEEPIDENTITY=490, KERBEROS=491, KEY=492, 
		KEYS=493, KEYSET=494, KEY_PATH=495, KEY_SOURCE=496, KEY_STORE_PROVIDER_NAME=497, 
		KILL=498, LAG=499, LANGUAGE=500, LAST=501, LAST_VALUE=502, LEAD=503, LEAST=504, 
		LEFT=505, LEN=506, LEVEL=507, LIBRARY=508, LIFETIME=509, LIKE=510, LINENO=511, 
		LINKED=512, LINUX=513, LIST=514, LISTENER=515, LISTENER_IP=516, LISTENER_PORT=517, 
		LISTENER_URL=518, LOAD=519, LOB_COMPACTION=520, LOCAL=521, LOCAL_SERVICE_NAME=522, 
		LOCATION=523, LOCK=524, LOCK_ESCALATION=525, LOG=526, LOGIN=527, LOGINPROPERTY=528, 
		LOOP=529, LOW=530, LOWER=531, LTRIM=532, MANUAL=533, MARK=534, MASK=535, 
		MASKED=536, MASTER=537, MATCHED=538, MATERIALIZED=539, MAX=540, MAXDOP=541, 
		MAXRECURSION=542, MAXSIZE=543, MAXTRANSFER=544, MAXVALUE=545, MAX_CPU_PERCENT=546, 
		MAX_DISPATCH_LATENCY=547, MAX_DOP=548, MAX_DURATION=549, MAX_EVENT_SIZE=550, 
		MAX_FILES=551, MAX_IOPS_PER_VOLUME=552, MAX_MEMORY=553, MAX_MEMORY_PERCENT=554, 
		MAX_OUTSTANDING_IO_PER_VOLUME=555, MAX_PROCESSES=556, MAX_QUEUE_READERS=557, 
		MAX_ROLLOVER_FILES=558, MAX_SIZE=559, MB=560, MEDIADESCRIPTION=561, MEDIANAME=562, 
		MEDIUM=563, MEMBER=564, MEMORY_OPTIMIZED_DATA=565, MEMORY_PARTITION_MODE=566, 
		MERGE=567, MESSAGE=568, MESSAGE_FORWARDING=569, MESSAGE_FORWARD_SIZE=570, 
		MIN=571, MINUTES=572, MINVALUE=573, MIN_ACTIVE_ROWVERSION=574, MIN_CPU_PERCENT=575, 
		MIN_IOPS_PER_VOLUME=576, MIN_MEMORY_PERCENT=577, MIRROR=578, MIRROR_ADDRESS=579, 
		MIXED_PAGE_ALLOCATION=580, MODE=581, MODIFY=582, MODIFY_SQUARE_BRACKET=583, 
		MOVE=584, MULTI_USER=585, MUST_CHANGE=586, NAME=587, NATIONAL=588, NCHAR=589, 
		NEGOTIATE=590, NESTED_TRIGGERS=591, NEWID=592, NEWNAME=593, NEWSEQUENTIALID=594, 
		NEW_ACCOUNT=595, NEW_BROKER=596, NEW_PASSWORD=597, NEXT=598, NO=599, NOCHECK=600, 
		NOCOUNT=601, NODES=602, NOEXEC=603, NOEXPAND=604, NOFORMAT=605, NOHOLDLOCK=606, 
		NOINDEX=607, NOINIT=608, NONCLUSTERED=609, NONE=610, NON_TRANSACTED_ACCESS=611, 
		NORECOMPUTE=612, NORECOVERY=613, NOREWIND=614, NOSKIP=615, NOT=616, NOTIFICATION=617, 
		NOTIFICATIONS=618, NOUNLOAD=619, NOWAIT=620, NO_CHECKSUM=621, NO_COMPRESSION=622, 
		NO_EVENT_LOSS=623, NO_INFOMSGS=624, NO_QUERYSTORE=625, NO_STATISTICS=626, 
		NO_TRUNCATE=627, NO_WAIT=628, NTILE=629, NTLM=630, NULLIF=631, NULL_=632, 
		NULL_DOUBLE_QUOTE=633, NUMANODE=634, NUMBER=635, NUMERIC_ROUNDABORT=636, 
		OBJECT=637, OBJECTPROPERTY=638, OBJECTPROPERTYEX=639, OBJECT_DEFINITION=640, 
		OBJECT_ID=641, OBJECT_NAME=642, OBJECT_SCHEMA_NAME=643, OF=644, OFF=645, 
		OFFLINE=646, OFFSET=647, OFFSETS=648, OLD_ACCOUNT=649, OLD_PASSWORD=650, 
		ON=651, ONLINE=652, ONLY=653, ON_FAILURE=654, OPEN=655, OPENDATASOURCE=656, 
		OPENJSON=657, OPENQUERY=658, OPENROWSET=659, OPENXML=660, OPEN_EXISTING=661, 
		OPERATIONS=662, OPTIMISTIC=663, OPTIMIZE=664, OPTIMIZE_FOR_SEQUENTIAL_KEY=665, 
		OPTION=666, OR=667, ORDER=668, ORIGINAL_DB_NAME=669, ORIGINAL_LOGIN=670, 
		OUT=671, OUTER=672, OUTPUT=673, OVER=674, OVERRIDE=675, OWNER=676, OWNERSHIP=677, 
		PAD_INDEX=678, PAGE=679, PAGECOUNT=680, PAGE_VERIFY=681, PAGLOCK=682, 
		PARAMETERIZATION=683, PARAM_NODE=684, PARSE=685, PARSENAME=686, PARSEONLY=687, 
		PARTIAL=688, PARTITION=689, PARTITIONS=690, PARTNER=691, PASSWORD=692, 
		PATH=693, PATINDEX=694, PAUSE=695, PDW_SHOWSPACEUSED=696, PERCENT=697, 
		PERCENTILE_CONT=698, PERCENTILE_DISC=699, PERCENT_RANK=700, PERMISSIONS=701, 
		PERMISSION_SET=702, PERSISTED=703, PERSIST_SAMPLE_PERCENT=704, PER_CPU=705, 
		PER_DB=706, PER_NODE=707, PHYSICAL_ONLY=708, PIVOT=709, PLAN=710, PLATFORM=711, 
		POISON_MESSAGE_HANDLING=712, POLICY=713, POOL=714, PORT=715, PRECEDING=716, 
		PRECISION=717, PREDICATE=718, PRIMARY=719, PRIMARY_ROLE=720, PRINT=721, 
		PRIOR=722, PRIORITY=723, PRIORITY_LEVEL=724, PRIVATE=725, PRIVATE_KEY=726, 
		PRIVILEGES=727, PROC=728, PROCCACHE=729, PROCEDURE=730, PROCEDURE_NAME=731, 
		PROCESS=732, PROFILE=733, PROPERTY=734, PROVIDER=735, PROVIDER_KEY_NAME=736, 
		PUBLIC=737, PWDCOMPARE=738, PWDENCRYPT=739, PYTHON=740, QUERY=741, QUERY_SQUARE_BRACKET=742, 
		QUERY_STORE=743, QUERYTRACEON=744, QUEUE=745, QUEUE_DELAY=746, QUOTED_IDENTIFIER=747, 
		QUOTENAME=748, R=749, RAISERROR=750, RANDOMIZED=751, RANGE=752, RANK=753, 
		RAW=754, RC2=755, RC4=756, RC4_128=757, READ=758, READCOMMITTED=759, READCOMMITTEDLOCK=760, 
		READONLY=761, READPAST=762, READTEXT=763, READUNCOMMITTED=764, READWRITE=765, 
		READ_COMMITTED_SNAPSHOT=766, READ_ONLY=767, READ_ONLY_ROUTING_LIST=768, 
		READ_WRITE=769, READ_WRITE_FILEGROUPS=770, REBUILD=771, RECEIVE=772, RECOMPILE=773, 
		RECONFIGURE=774, RECOVERY=775, RECURSIVE_TRIGGERS=776, REFERENCES=777, 
		REGENERATE=778, RELATED_CONVERSATION=779, RELATED_CONVERSATION_GROUP=780, 
		RELATIVE=781, REMOTE=782, REMOTE_PROC_TRANSACTIONS=783, REMOTE_SERVICE_NAME=784, 
		REMOVE=785, REORGANIZE=786, REPAIR_ALLOW_DATA_LOSS=787, REPAIR_FAST=788, 
		REPAIR_REBUILD=789, REPEATABLE=790, REPEATABLEREAD=791, REPLACE=792, REPLICA=793, 
		REPLICATE=794, REPLICATION=795, REQUEST_MAX_CPU_TIME_SEC=796, REQUEST_MAX_MEMORY_GRANT_PERCENT=797, 
		REQUEST_MEMORY_GRANT_TIMEOUT_SEC=798, REQUIRED=799, REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT=800, 
		RESAMPLE=801, RESERVE_DISK_SPACE=802, RESET=803, RESOURCE=804, RESOURCES=805, 
		RESOURCE_MANAGER_LOCATION=806, RESTART=807, RESTORE=808, RESTRICT=809, 
		RESTRICTED_USER=810, RESUMABLE=811, RESUME=812, RETAINDAYS=813, RETENTION=814, 
		RETURN=815, RETURNS=816, REVERSE=817, REVERT=818, REVOKE=819, REWIND=820, 
		RIGHT=821, ROBUST=822, ROLE=823, ROLLBACK=824, ROOT=825, ROUND_ROBIN=826, 
		ROUTE=827, ROW=828, ROWCOUNT=829, ROWCOUNT_BIG=830, ROWGUID=831, ROWGUIDCOL=832, 
		ROWS=833, ROW_NUMBER=834, RSA_1024=835, RSA_2048=836, RSA_3072=837, RSA_4096=838, 
		RSA_512=839, RTRIM=840, RULE=841, SAFE=842, SAFETY=843, SAMPLE=844, SAVE=845, 
		SCHEDULER=846, SCHEMA=847, SCHEMABINDING=848, SCHEMA_ID=849, SCHEMA_NAME=850, 
		SCHEME=851, SCOPED=852, SCOPE_IDENTITY=853, SCRIPT=854, SCROLL=855, SCROLL_LOCKS=856, 
		SEARCH=857, SECONDARY=858, SECONDARY_ONLY=859, SECONDARY_ROLE=860, SECONDS=861, 
		SECRET=862, SECURABLES=863, SECURITY=864, SECURITYAUDIT=865, SECURITY_LOG=866, 
		SEEDING_MODE=867, SELECT=868, SELF=869, SEMANTICKEYPHRASETABLE=870, SEMANTICSIMILARITYDETAILSTABLE=871, 
		SEMANTICSIMILARITYTABLE=872, SEMI_SENSITIVE=873, SEND=874, SENT=875, SEQUENCE=876, 
		SEQUENCE_NUMBER=877, SERIALIZABLE=878, SERVER=879, SERVERPROPERTY=880, 
		SERVICE=881, SERVICEBROKER=882, SERVICE_BROKER=883, SERVICE_NAME=884, 
		SESSION=885, SESSIONPROPERTY=886, SESSION_CONTEXT=887, SESSION_TIMEOUT=888, 
		SESSION_USER=889, SET=890, SETERROR=891, SETS=892, SETTINGS=893, SETUSER=894, 
		SHARE=895, SHARED=896, SHOWCONTIG=897, SHOWPLAN=898, SHOWPLAN_ALL=899, 
		SHOWPLAN_TEXT=900, SHOWPLAN_XML=901, SHRINKLOG=902, SHUTDOWN=903, SID=904, 
		SIGNATURE=905, SIMPLE=906, SINGLE_USER=907, SIZE=908, SKIP_KEYWORD=909, 
		SMALLINT=910, SNAPSHOT=911, SOFTNUMA=912, SOME=913, SORT_IN_TEMPDB=914, 
		SOUNDEX=915, SOURCE=916, SPACE_KEYWORD=917, SPARSE=918, SPATIAL_WINDOW_MAX_CELLS=919, 
		SPECIFICATION=920, SPLIT=921, SQL=922, SQLDUMPERFLAGS=923, SQLDUMPERPATH=924, 
		SQLDUMPERTIMEOUT=925, SQL_VARIANT_PROPERTY=926, STANDBY=927, START=928, 
		STARTED=929, STARTUP_STATE=930, START_DATE=931, STATE=932, STATIC=933, 
		STATISTICS=934, STATISTICS_INCREMENTAL=935, STATISTICS_NORECOMPUTE=936, 
		STATS=937, STATS_DATE=938, STATS_STREAM=939, STATUS=940, STATUSONLY=941, 
		STDEV=942, STDEVP=943, STOP=944, STOPLIST=945, STOPPED=946, STOP_ON_ERROR=947, 
		STR=948, STRING_AGG=949, STRING_ESCAPE=950, STUFF=951, SUBJECT=952, SUBSCRIBE=953, 
		SUBSCRIPTION=954, SUBSTRING=955, SUM=956, SUPPORTED=957, SUSER_ID=958, 
		SUSER_NAME=959, SUSER_SID=960, SUSER_SNAME=961, SUSPEND=962, SWITCH=963, 
		SYMMETRIC=964, SYNCHRONOUS_COMMIT=965, SYNONYM=966, SYSTEM=967, SYSTEM_USER=968, 
		TABLE=969, TABLERESULTS=970, TABLESAMPLE=971, TABLOCK=972, TABLOCKX=973, 
		TAKE=974, TAPE=975, TARGET=976, TARGET_RECOVERY_TIME=977, TB=978, TCP=979, 
		TEXTIMAGE_ON=980, TEXTSIZE=981, THEN=982, THROW=983, TIES=984, TIME=985, 
		TIMEOUT=986, TIMER=987, TINYINT=988, TO=989, TOP=990, TORN_PAGE_DETECTION=991, 
		TOSTRING=992, TRACE=993, TRACKING=994, TRACK_CAUSALITY=995, TRAN=996, 
		TRANSACTION=997, TRANSACTION_ID=998, TRANSFER=999, TRANSFORM_NOISE_WORDS=1000, 
		TRANSLATE=1001, TRIGGER=1002, TRIM=1003, TRIPLE_DES=1004, TRIPLE_DES_3KEY=1005, 
		TRUNCATE=1006, TRUSTWORTHY=1007, TRY=1008, TRY_CAST=1009, TSEQUAL=1010, 
		TSQL=1011, TWO_DIGIT_YEAR_CUTOFF=1012, TYPE=1013, TYPEPROPERTY=1014, TYPE_ID=1015, 
		TYPE_NAME=1016, TYPE_WARNING=1017, UNBOUNDED=1018, UNCHECKED=1019, UNCOMMITTED=1020, 
		UNICODE=1021, UNION=1022, UNIQUE=1023, UNKNOWN=1024, UNLIMITED=1025, UNLOCK=1026, 
		UNMASK=1027, UNPIVOT=1028, UNSAFE=1029, UOW=1030, UPDATE=1031, UPDATETEXT=1032, 
		UPPER=1033, URL=1034, USE=1035, USED=1036, USER=1037, USER_ID=1038, USER_NAME=1039, 
		USING=1040, VALIDATION=1041, VALID_XML=1042, VALUE=1043, VALUES=1044, 
		VALUE_SQUARE_BRACKET=1045, VAR=1046, VARBINARY_KEYWORD=1047, VARP=1048, 
		VARYING=1049, VERBOSELOGGING=1050, VERIFY_CLONEDB=1051, VERSION=1052, 
		VIEW=1053, VIEWS=1054, VIEW_METADATA=1055, VISIBILITY=1056, WAIT=1057, 
		WAITFOR=1058, WAIT_AT_LOW_PRIORITY=1059, WELL_FORMED_XML=1060, WHEN=1061, 
		WHERE=1062, WHILE=1063, WINDOWS=1064, WITH=1065, WITHIN=1066, WITHOUT=1067, 
		WITHOUT_ARRAY_WRAPPER=1068, WITNESS=1069, WORK=1070, WORKLOAD=1071, WRITETEXT=1072, 
		XACT_ABORT=1073, XACT_STATE=1074, XLOCK=1075, XML=1076, XMLDATA=1077, 
		XMLNAMESPACES=1078, XMLSCHEMA=1079, XML_COMPRESSION=1080, XSINIL=1081, 
		ZONE=1082, VARCHAR=1083, NVARCHAR=1084, SPACE=1085, COMMENT=1086, LINE_COMMENT=1087, 
		DOUBLE_QUOTE_ID=1088, SINGLE_QUOTE=1089, SQUARE_BRACKET_ID=1090, LOCAL_ID=1091, 
		DECIMAL=1092, ID=1093, STRING=1094, BINARY=1095, FLOAT=1096, REAL=1097, 
		EQUAL=1098, GREATER=1099, LESS=1100, EXCLAMATION=1101, PLUS_ASSIGN=1102, 
		MINUS_ASSIGN=1103, MULT_ASSIGN=1104, DIV_ASSIGN=1105, MOD_ASSIGN=1106, 
		AND_ASSIGN=1107, XOR_ASSIGN=1108, OR_ASSIGN=1109, DOUBLE_BAR=1110, DOT=1111, 
		UNDERLINE=1112, AT=1113, SHARP=1114, DOLLAR=1115, LR_BRACKET=1116, RR_BRACKET=1117, 
		LS_BRACKET=1118, RS_BRACKET=1119, COMMA=1120, SEMI=1121, COLON=1122, DOUBLE_COLON=1123, 
		STAR=1124, DIVIDE=1125, MODULE=1126, PLUS=1127, MINUS=1128, BIT_NOT=1129, 
		BIT_OR=1130, BIT_AND=1131, BIT_XOR=1132, DISK_DRIVE=1133, IPV4_ADDR=1134, 
		IPV6_ADDR=1135, NOEXEol=1136, DOLLAR_ACTION=1137, YEAR=1138, YEAR_ABBR=1139, 
		QUARTER=1140, QUARTER_ABBR=1141, MONTH=1142, MONTH_ABBR=1143, DAY=1144, 
		DAY_ABBR=1145, WEEK=1146, WEEK_ABBR=1147, HOUR=1148, HOUR_ABBR=1149, MINUTE=1150, 
		MINUTE_ABBR=1151, SECOND=1152, SECOND_ABBR=1153, MILLISECOND=1154, MILLISECOND_ABBR=1155, 
		DAYOFYEAR=1156, DAYOFYEAR_ABBR=1157, MICROSECOND=1158, MICROSECOND_ABBR=1159, 
		NANOSECOND=1160, NANOSECOND_ABBR=1161, WEEKDAY=1162, WEEKDAY_ABBR=1163, 
		TZOFFSET=1164, TZOFFSET_ABBR=1165, ISO_WEEK=1166, ISO_WEEK_ABBR=1167, 
		DATABASEPROPERTYEX=1168, NOLOCK=1169, ROWLOCK=1170, UPDLOCK=1171;
	public const int
		RULE_tsql_file = 0, RULE_batch = 1, RULE_batch_level_statement = 2, RULE_sql_clauses = 3, 
		RULE_dml_clause = 4, RULE_ddl_clause = 5, RULE_backup_statement = 6, RULE_cfl_statement = 7, 
		RULE_block_statement = 8, RULE_break_statement = 9, RULE_continue_statement = 10, 
		RULE_goto_statement = 11, RULE_return_statement = 12, RULE_if_statement = 13, 
		RULE_throw_statement = 14, RULE_throw_error_number = 15, RULE_throw_message = 16, 
		RULE_throw_state = 17, RULE_try_catch_statement = 18, RULE_waitfor_statement = 19, 
		RULE_while_statement = 20, RULE_print_statement = 21, RULE_raiseerror_statement = 22, 
		RULE_empty_statement = 23, RULE_another_statement = 24, RULE_alter_application_role = 25, 
		RULE_alter_xml_schema_collection = 26, RULE_create_application_role = 27, 
		RULE_drop_aggregate = 28, RULE_drop_application_role = 29, RULE_alter_assembly = 30, 
		RULE_alter_assembly_start = 31, RULE_alter_assembly_clause = 32, RULE_alter_assembly_from_clause = 33, 
		RULE_alter_assembly_from_clause_start = 34, RULE_alter_assembly_drop_clause = 35, 
		RULE_alter_assembly_drop_multiple_files = 36, RULE_alter_assembly_drop = 37, 
		RULE_alter_assembly_add_clause = 38, RULE_alter_asssembly_add_clause_start = 39, 
		RULE_alter_assembly_client_file_clause = 40, RULE_alter_assembly_file_name = 41, 
		RULE_alter_assembly_file_bits = 42, RULE_alter_assembly_as = 43, RULE_alter_assembly_with_clause = 44, 
		RULE_alter_assembly_with = 45, RULE_client_assembly_specifier = 46, RULE_assembly_option = 47, 
		RULE_network_file_share = 48, RULE_network_computer = 49, RULE_network_file_start = 50, 
		RULE_file_path = 51, RULE_file_directory_path_separator = 52, RULE_local_file = 53, 
		RULE_local_drive = 54, RULE_multiple_local_files = 55, RULE_multiple_local_file_start = 56, 
		RULE_create_assembly = 57, RULE_drop_assembly = 58, RULE_alter_asymmetric_key = 59, 
		RULE_alter_asymmetric_key_start = 60, RULE_asymmetric_key_option = 61, 
		RULE_asymmetric_key_option_start = 62, RULE_asymmetric_key_password_change_option = 63, 
		RULE_create_asymmetric_key = 64, RULE_drop_asymmetric_key = 65, RULE_alter_authorization = 66, 
		RULE_authorization_grantee = 67, RULE_entity_to = 68, RULE_colon_colon = 69, 
		RULE_alter_authorization_start = 70, RULE_alter_authorization_for_sql_database = 71, 
		RULE_alter_authorization_for_azure_dw = 72, RULE_alter_authorization_for_parallel_dw = 73, 
		RULE_class_type = 74, RULE_class_type_for_sql_database = 75, RULE_class_type_for_azure_dw = 76, 
		RULE_class_type_for_parallel_dw = 77, RULE_class_type_for_grant = 78, 
		RULE_drop_availability_group = 79, RULE_alter_availability_group = 80, 
		RULE_alter_availability_group_start = 81, RULE_alter_availability_group_options = 82, 
		RULE_ip_v4_failover = 83, RULE_ip_v6_failover = 84, RULE_create_or_alter_broker_priority = 85, 
		RULE_drop_broker_priority = 86, RULE_alter_certificate = 87, RULE_alter_column_encryption_key = 88, 
		RULE_create_column_encryption_key = 89, RULE_drop_certificate = 90, RULE_drop_column_encryption_key = 91, 
		RULE_drop_column_master_key = 92, RULE_drop_contract = 93, RULE_drop_credential = 94, 
		RULE_drop_cryptograhic_provider = 95, RULE_drop_database = 96, RULE_drop_database_audit_specification = 97, 
		RULE_drop_database_encryption_key = 98, RULE_drop_database_scoped_credential = 99, 
		RULE_drop_default = 100, RULE_drop_endpoint = 101, RULE_drop_external_data_source = 102, 
		RULE_drop_external_file_format = 103, RULE_drop_external_library = 104, 
		RULE_drop_external_resource_pool = 105, RULE_drop_external_table = 106, 
		RULE_drop_event_notifications = 107, RULE_drop_event_session = 108, RULE_drop_fulltext_catalog = 109, 
		RULE_drop_fulltext_index = 110, RULE_drop_fulltext_stoplist = 111, RULE_drop_login = 112, 
		RULE_drop_master_key = 113, RULE_drop_message_type = 114, RULE_drop_partition_function = 115, 
		RULE_drop_partition_scheme = 116, RULE_drop_queue = 117, RULE_drop_remote_service_binding = 118, 
		RULE_drop_resource_pool = 119, RULE_drop_db_role = 120, RULE_drop_route = 121, 
		RULE_drop_rule = 122, RULE_drop_schema = 123, RULE_drop_search_property_list = 124, 
		RULE_drop_security_policy = 125, RULE_drop_sequence = 126, RULE_drop_server_audit = 127, 
		RULE_drop_server_audit_specification = 128, RULE_drop_server_role = 129, 
		RULE_drop_service = 130, RULE_drop_signature = 131, RULE_drop_statistics_name_azure_dw_and_pdw = 132, 
		RULE_drop_symmetric_key = 133, RULE_drop_synonym = 134, RULE_drop_user = 135, 
		RULE_drop_workload_group = 136, RULE_drop_xml_schema_collection = 137, 
		RULE_disable_trigger = 138, RULE_enable_trigger = 139, RULE_lock_table = 140, 
		RULE_truncate_table = 141, RULE_create_column_master_key = 142, RULE_alter_credential = 143, 
		RULE_create_credential = 144, RULE_alter_cryptographic_provider = 145, 
		RULE_create_cryptographic_provider = 146, RULE_create_endpoint = 147, 
		RULE_endpoint_encryption_alogorithm_clause = 148, RULE_endpoint_authentication_clause = 149, 
		RULE_endpoint_listener_clause = 150, RULE_create_event_notification = 151, 
		RULE_create_or_alter_event_session = 152, RULE_event_session_predicate_expression = 153, 
		RULE_event_session_predicate_factor = 154, RULE_event_session_predicate_leaf = 155, 
		RULE_alter_external_data_source = 156, RULE_alter_external_library = 157, 
		RULE_create_external_library = 158, RULE_alter_external_resource_pool = 159, 
		RULE_create_external_resource_pool = 160, RULE_alter_fulltext_catalog = 161, 
		RULE_create_fulltext_catalog = 162, RULE_alter_fulltext_stoplist = 163, 
		RULE_create_fulltext_stoplist = 164, RULE_alter_login_sql_server = 165, 
		RULE_create_login_sql_server = 166, RULE_alter_login_azure_sql = 167, 
		RULE_create_login_azure_sql = 168, RULE_alter_login_azure_sql_dw_and_pdw = 169, 
		RULE_create_login_pdw = 170, RULE_alter_master_key_sql_server = 171, RULE_create_master_key_sql_server = 172, 
		RULE_alter_master_key_azure_sql = 173, RULE_create_master_key_azure_sql = 174, 
		RULE_alter_message_type = 175, RULE_alter_partition_function = 176, RULE_alter_partition_scheme = 177, 
		RULE_alter_remote_service_binding = 178, RULE_create_remote_service_binding = 179, 
		RULE_create_resource_pool = 180, RULE_alter_resource_governor = 181, RULE_alter_database_audit_specification = 182, 
		RULE_audit_action_spec_group = 183, RULE_audit_action_specification = 184, 
		RULE_action_specification = 185, RULE_audit_class_name = 186, RULE_audit_securable = 187, 
		RULE_alter_db_role = 188, RULE_create_database_audit_specification = 189, 
		RULE_create_db_role = 190, RULE_create_route = 191, RULE_create_rule = 192, 
		RULE_alter_schema_sql = 193, RULE_create_schema = 194, RULE_create_schema_azure_sql_dw_and_pdw = 195, 
		RULE_alter_schema_azure_sql_dw_and_pdw = 196, RULE_create_search_property_list = 197, 
		RULE_create_security_policy = 198, RULE_alter_sequence = 199, RULE_create_sequence = 200, 
		RULE_alter_server_audit = 201, RULE_create_server_audit = 202, RULE_alter_server_audit_specification = 203, 
		RULE_create_server_audit_specification = 204, RULE_alter_server_configuration = 205, 
		RULE_alter_server_role = 206, RULE_create_server_role = 207, RULE_alter_server_role_pdw = 208, 
		RULE_alter_service = 209, RULE_opt_arg_clause = 210, RULE_create_service = 211, 
		RULE_alter_service_master_key = 212, RULE_alter_symmetric_key = 213, RULE_create_synonym = 214, 
		RULE_alter_user = 215, RULE_create_user = 216, RULE_create_user_azure_sql_dw = 217, 
		RULE_alter_user_azure_sql = 218, RULE_alter_workload_group = 219, RULE_create_workload_group = 220, 
		RULE_create_xml_schema_collection = 221, RULE_create_partition_function = 222, 
		RULE_create_partition_scheme = 223, RULE_create_queue = 224, RULE_queue_settings = 225, 
		RULE_alter_queue = 226, RULE_queue_action = 227, RULE_queue_rebuild_options = 228, 
		RULE_create_contract = 229, RULE_conversation_statement = 230, RULE_message_statement = 231, 
		RULE_merge_statement = 232, RULE_when_matches = 233, RULE_merge_matched = 234, 
		RULE_merge_not_matched = 235, RULE_delete_statement = 236, RULE_delete_statement_from = 237, 
		RULE_insert_statement = 238, RULE_insert_statement_value = 239, RULE_receive_statement = 240, 
		RULE_select_statement_standalone = 241, RULE_select_statement = 242, RULE_time = 243, 
		RULE_update_statement = 244, RULE_output_clause = 245, RULE_output_dml_list_elem = 246, 
		RULE_create_database = 247, RULE_create_index = 248, RULE_alter_index = 249, 
		RULE_rebuild_partition = 250, RULE_create_columnstore_index = 251, RULE_create_nonclustered_columnstore_index = 252, 
		RULE_create_xml_index = 253, RULE_create_or_alter_procedure = 254, RULE_as_external_name = 255, 
		RULE_create_or_alter_trigger = 256, RULE_create_or_alter_dml_trigger = 257, 
		RULE_dml_trigger_option = 258, RULE_dml_trigger_operation = 259, RULE_create_or_alter_ddl_trigger = 260, 
		RULE_ddl_trigger_operation = 261, RULE_create_or_alter_function = 262, 
		RULE_func_body_returns_select = 263, RULE_func_body_returns_table = 264, 
		RULE_func_body_returns_scalar = 265, RULE_procedure_param = 266, RULE_procedure_option = 267, 
		RULE_function_option = 268, RULE_partition_with = 269, RULE_create_statistics = 270, 
		RULE_update_statistics = 271, RULE_create_table = 272, RULE_table_indices = 273, 
		RULE_table_options = 274, RULE_create_view = 275, RULE_view_attribute = 276, 
		RULE_alter_table = 277, RULE_switch_partition = 278, RULE_low_priority_lock_wait = 279, 
		RULE_alter_database = 280, RULE_add_or_modify_files = 281, RULE_filespec = 282, 
		RULE_add_or_modify_filegroups = 283, RULE_filegroup_updatability_option = 284, 
		RULE_database_optionspec = 285, RULE_query_store_options = 286, RULE_auto_option = 287, 
		RULE_change_tracking_option = 288, RULE_change_tracking_option_list = 289, 
		RULE_containment_option = 290, RULE_cursor_option = 291, RULE_alter_endpoint = 292, 
		RULE_database_mirroring_option = 293, RULE_mirroring_set_option = 294, 
		RULE_mirroring_partner = 295, RULE_mirroring_witness = 296, RULE_witness_partner_equal = 297, 
		RULE_partner_option = 298, RULE_witness_option = 299, RULE_witness_server = 300, 
		RULE_partner_server = 301, RULE_mirroring_host_port_seperator = 302, RULE_partner_server_tcp_prefix = 303, 
		RULE_port_number = 304, RULE_host = 305, RULE_date_correlation_optimization_option = 306, 
		RULE_db_encryption_option = 307, RULE_db_state_option = 308, RULE_db_update_option = 309, 
		RULE_db_user_access_option = 310, RULE_delayed_durability_option = 311, 
		RULE_external_access_option = 312, RULE_hadr_options = 313, RULE_mixed_page_allocation_option = 314, 
		RULE_parameterization_option = 315, RULE_recovery_option = 316, RULE_service_broker_option = 317, 
		RULE_snapshot_option = 318, RULE_sql_option = 319, RULE_target_recovery_time_option = 320, 
		RULE_termination = 321, RULE_drop_index = 322, RULE_drop_relational_or_xml_or_spatial_index = 323, 
		RULE_drop_backward_compatible_index = 324, RULE_drop_procedure = 325, 
		RULE_drop_trigger = 326, RULE_drop_dml_trigger = 327, RULE_drop_ddl_trigger = 328, 
		RULE_drop_function = 329, RULE_drop_statistics = 330, RULE_drop_table = 331, 
		RULE_drop_view = 332, RULE_create_type = 333, RULE_drop_type = 334, RULE_rowset_function_limited = 335, 
		RULE_openquery = 336, RULE_opendatasource = 337, RULE_declare_statement = 338, 
		RULE_xml_declaration = 339, RULE_cursor_statement = 340, RULE_backup_database = 341, 
		RULE_backup_log = 342, RULE_backup_certificate = 343, RULE_backup_master_key = 344, 
		RULE_backup_service_master_key = 345, RULE_kill_statement = 346, RULE_kill_process = 347, 
		RULE_kill_query_notification = 348, RULE_kill_stats_job = 349, RULE_execute_statement = 350, 
		RULE_execute_body_batch = 351, RULE_execute_body = 352, RULE_execute_statement_arg = 353, 
		RULE_execute_statement_arg_named = 354, RULE_execute_statement_arg_unnamed = 355, 
		RULE_execute_parameter = 356, RULE_execute_var_string = 357, RULE_security_statement = 358, 
		RULE_principal_id = 359, RULE_create_certificate = 360, RULE_existing_keys = 361, 
		RULE_private_key_options = 362, RULE_generate_new_keys = 363, RULE_date_options = 364, 
		RULE_open_key = 365, RULE_close_key = 366, RULE_create_key = 367, RULE_key_options = 368, 
		RULE_algorithm = 369, RULE_encryption_mechanism = 370, RULE_decryption_mechanism = 371, 
		RULE_grant_permission = 372, RULE_set_statement = 373, RULE_transaction_statement = 374, 
		RULE_go_batch_statement = 375, RULE_go_statement = 376, RULE_use_statement = 377, 
		RULE_setuser_statement = 378, RULE_reconfigure_statement = 379, RULE_shutdown_statement = 380, 
		RULE_checkpoint_statement = 381, RULE_dbcc_checkalloc_option = 382, RULE_dbcc_checkalloc = 383, 
		RULE_dbcc_checkcatalog = 384, RULE_dbcc_checkconstraints_option = 385, 
		RULE_dbcc_checkconstraints = 386, RULE_dbcc_checkdb_table_option = 387, 
		RULE_dbcc_checkdb = 388, RULE_dbcc_checkfilegroup_option = 389, RULE_dbcc_checkfilegroup = 390, 
		RULE_dbcc_checktable = 391, RULE_dbcc_cleantable = 392, RULE_dbcc_clonedatabase_option = 393, 
		RULE_dbcc_clonedatabase = 394, RULE_dbcc_pdw_showspaceused = 395, RULE_dbcc_proccache = 396, 
		RULE_dbcc_showcontig_option = 397, RULE_dbcc_showcontig = 398, RULE_dbcc_shrinklog = 399, 
		RULE_dbcc_dbreindex = 400, RULE_dbcc_dll_free = 401, RULE_dbcc_dropcleanbuffers = 402, 
		RULE_dbcc_clause = 403, RULE_execute_clause = 404, RULE_declare_local = 405, 
		RULE_table_type_definition = 406, RULE_table_type_indices = 407, RULE_xml_type_definition = 408, 
		RULE_xml_schema_collection = 409, RULE_column_def_table_constraints = 410, 
		RULE_column_def_table_constraint = 411, RULE_column_definition = 412, 
		RULE_materialized_column_definition = 413, RULE_column_constraint = 414, 
		RULE_table_constraint = 415, RULE_default_value_columns = 416, RULE_on_delete = 417, 
		RULE_on_update = 418, RULE_index_options = 419, RULE_index_option = 420, 
		RULE_declare_cursor = 421, RULE_declare_set_cursor_common = 422, RULE_declare_set_cursor_common_partial = 423, 
		RULE_fetch_cursor = 424, RULE_set_special = 425, RULE_special_list = 426, 
		RULE_constant_LOCAL_ID = 427, RULE_expression = 428, RULE_time_zone = 429, 
		RULE_primitive_expression = 430, RULE_case_expression = 431, RULE_unary_operator_expression = 432, 
		RULE_bracket_expression = 433, RULE_constant_expression = 434, RULE_subquery = 435, 
		RULE_with_expression = 436, RULE_common_table_expression = 437, RULE_update_elem = 438, 
		RULE_update_elem_merge = 439, RULE_search_condition = 440, RULE_predicate = 441, 
		RULE_query_expression = 442, RULE_sql_union = 443, RULE_query_specification = 444, 
		RULE_top_clause = 445, RULE_top_percent = 446, RULE_top_count = 447, RULE_order_by_clause = 448, 
		RULE_for_clause = 449, RULE_xml_common_directives = 450, RULE_order_by_expression = 451, 
		RULE_group_by_item = 452, RULE_option_clause = 453, RULE_option = 454, 
		RULE_optimize_for_arg = 455, RULE_select_list = 456, RULE_udt_method_arguments = 457, 
		RULE_asterisk = 458, RULE_column_elem = 459, RULE_udt_elem = 460, RULE_expression_elem = 461, 
		RULE_select_list_elem = 462, RULE_table_sources = 463, RULE_table_source = 464, 
		RULE_table_source_item_joined = 465, RULE_table_source_item = 466, RULE_open_xml = 467, 
		RULE_open_json = 468, RULE_json_declaration = 469, RULE_json_column_declaration = 470, 
		RULE_schema_declaration = 471, RULE_column_declaration = 472, RULE_change_table = 473, 
		RULE_change_table_changes = 474, RULE_change_table_version = 475, RULE_join_part = 476, 
		RULE_join_on = 477, RULE_cross_join = 478, RULE_apply_ = 479, RULE_pivot = 480, 
		RULE_unpivot = 481, RULE_pivot_clause = 482, RULE_unpivot_clause = 483, 
		RULE_full_column_name_list = 484, RULE_table_name_with_hint = 485, RULE_rowset_function = 486, 
		RULE_bulk_option = 487, RULE_derived_table = 488, RULE_function_call = 489, 
		RULE_partition_function = 490, RULE_freetext_function = 491, RULE_freetext_predicate = 492, 
		RULE_built_in_functions = 493, RULE_xml_data_type_methods = 494, RULE_dateparts_9 = 495, 
		RULE_dateparts_12 = 496, RULE_dateparts_15 = 497, RULE_dateparts_datetrunc = 498, 
		RULE_value_method = 499, RULE_value_call = 500, RULE_query_method = 501, 
		RULE_query_call = 502, RULE_exist_method = 503, RULE_exist_call = 504, 
		RULE_modify_method = 505, RULE_modify_call = 506, RULE_nodes_method = 507, 
		RULE_switch_section = 508, RULE_switch_search_condition_section = 509, 
		RULE_as_column_alias = 510, RULE_as_table_alias = 511, RULE_table_alias = 512, 
		RULE_with_table_hints = 513, RULE_deprecated_table_hint = 514, RULE_insert_with_table_hints = 515, 
		RULE_table_hint = 516, RULE_index_value = 517, RULE_column_alias_list = 518, 
		RULE_column_alias = 519, RULE_table_value_constructor = 520, RULE_expression_list_ = 521, 
		RULE_ranking_windowed_function = 522, RULE_aggregate_windowed_function = 523, 
		RULE_analytic_windowed_function = 524, RULE_all_distinct_expression = 525, 
		RULE_over_clause = 526, RULE_row_or_range_clause = 527, RULE_window_frame_extent = 528, 
		RULE_window_frame_bound = 529, RULE_window_frame_preceding = 530, RULE_window_frame_following = 531, 
		RULE_create_database_option = 532, RULE_database_filestream_option = 533, 
		RULE_database_file_spec = 534, RULE_file_group = 535, RULE_file_spec = 536, 
		RULE_entity_name = 537, RULE_entity_name_for_azure_dw = 538, RULE_entity_name_for_parallel_dw = 539, 
		RULE_full_table_name = 540, RULE_table_name = 541, RULE_simple_name = 542, 
		RULE_func_proc_name_schema = 543, RULE_func_proc_name_database_schema = 544, 
		RULE_func_proc_name_server_database_schema = 545, RULE_ddl_object = 546, 
		RULE_full_column_name = 547, RULE_column_name_list_with_order = 548, RULE_insert_column_name_list = 549, 
		RULE_insert_column_id = 550, RULE_column_name_list = 551, RULE_cursor_name = 552, 
		RULE_on_off = 553, RULE_clustered = 554, RULE_null_notnull = 555, RULE_null_or_default = 556, 
		RULE_scalar_function_name = 557, RULE_begin_conversation_timer = 558, 
		RULE_begin_conversation_dialog = 559, RULE_contract_name = 560, RULE_service_name = 561, 
		RULE_end_conversation = 562, RULE_waitfor_conversation = 563, RULE_get_conversation = 564, 
		RULE_queue_id = 565, RULE_send_conversation = 566, RULE_data_type = 567, 
		RULE_default_value = 568, RULE_constant = 569, RULE_sign = 570, RULE_keyword = 571, 
		RULE_id_ = 572, RULE_simple_id = 573, RULE_id_or_string = 574, RULE_comparison_operator = 575, 
		RULE_assignment_operator = 576, RULE_file_size = 577;
	public static readonly string[] ruleNames = {
		"tsql_file", "batch", "batch_level_statement", "sql_clauses", "dml_clause", 
		"ddl_clause", "backup_statement", "cfl_statement", "block_statement", 
		"break_statement", "continue_statement", "goto_statement", "return_statement", 
		"if_statement", "throw_statement", "throw_error_number", "throw_message", 
		"throw_state", "try_catch_statement", "waitfor_statement", "while_statement", 
		"print_statement", "raiseerror_statement", "empty_statement", "another_statement", 
		"alter_application_role", "alter_xml_schema_collection", "create_application_role", 
		"drop_aggregate", "drop_application_role", "alter_assembly", "alter_assembly_start", 
		"alter_assembly_clause", "alter_assembly_from_clause", "alter_assembly_from_clause_start", 
		"alter_assembly_drop_clause", "alter_assembly_drop_multiple_files", "alter_assembly_drop", 
		"alter_assembly_add_clause", "alter_asssembly_add_clause_start", "alter_assembly_client_file_clause", 
		"alter_assembly_file_name", "alter_assembly_file_bits", "alter_assembly_as", 
		"alter_assembly_with_clause", "alter_assembly_with", "client_assembly_specifier", 
		"assembly_option", "network_file_share", "network_computer", "network_file_start", 
		"file_path", "file_directory_path_separator", "local_file", "local_drive", 
		"multiple_local_files", "multiple_local_file_start", "create_assembly", 
		"drop_assembly", "alter_asymmetric_key", "alter_asymmetric_key_start", 
		"asymmetric_key_option", "asymmetric_key_option_start", "asymmetric_key_password_change_option", 
		"create_asymmetric_key", "drop_asymmetric_key", "alter_authorization", 
		"authorization_grantee", "entity_to", "colon_colon", "alter_authorization_start", 
		"alter_authorization_for_sql_database", "alter_authorization_for_azure_dw", 
		"alter_authorization_for_parallel_dw", "class_type", "class_type_for_sql_database", 
		"class_type_for_azure_dw", "class_type_for_parallel_dw", "class_type_for_grant", 
		"drop_availability_group", "alter_availability_group", "alter_availability_group_start", 
		"alter_availability_group_options", "ip_v4_failover", "ip_v6_failover", 
		"create_or_alter_broker_priority", "drop_broker_priority", "alter_certificate", 
		"alter_column_encryption_key", "create_column_encryption_key", "drop_certificate", 
		"drop_column_encryption_key", "drop_column_master_key", "drop_contract", 
		"drop_credential", "drop_cryptograhic_provider", "drop_database", "drop_database_audit_specification", 
		"drop_database_encryption_key", "drop_database_scoped_credential", "drop_default", 
		"drop_endpoint", "drop_external_data_source", "drop_external_file_format", 
		"drop_external_library", "drop_external_resource_pool", "drop_external_table", 
		"drop_event_notifications", "drop_event_session", "drop_fulltext_catalog", 
		"drop_fulltext_index", "drop_fulltext_stoplist", "drop_login", "drop_master_key", 
		"drop_message_type", "drop_partition_function", "drop_partition_scheme", 
		"drop_queue", "drop_remote_service_binding", "drop_resource_pool", "drop_db_role", 
		"drop_route", "drop_rule", "drop_schema", "drop_search_property_list", 
		"drop_security_policy", "drop_sequence", "drop_server_audit", "drop_server_audit_specification", 
		"drop_server_role", "drop_service", "drop_signature", "drop_statistics_name_azure_dw_and_pdw", 
		"drop_symmetric_key", "drop_synonym", "drop_user", "drop_workload_group", 
		"drop_xml_schema_collection", "disable_trigger", "enable_trigger", "lock_table", 
		"truncate_table", "create_column_master_key", "alter_credential", "create_credential", 
		"alter_cryptographic_provider", "create_cryptographic_provider", "create_endpoint", 
		"endpoint_encryption_alogorithm_clause", "endpoint_authentication_clause", 
		"endpoint_listener_clause", "create_event_notification", "create_or_alter_event_session", 
		"event_session_predicate_expression", "event_session_predicate_factor", 
		"event_session_predicate_leaf", "alter_external_data_source", "alter_external_library", 
		"create_external_library", "alter_external_resource_pool", "create_external_resource_pool", 
		"alter_fulltext_catalog", "create_fulltext_catalog", "alter_fulltext_stoplist", 
		"create_fulltext_stoplist", "alter_login_sql_server", "create_login_sql_server", 
		"alter_login_azure_sql", "create_login_azure_sql", "alter_login_azure_sql_dw_and_pdw", 
		"create_login_pdw", "alter_master_key_sql_server", "create_master_key_sql_server", 
		"alter_master_key_azure_sql", "create_master_key_azure_sql", "alter_message_type", 
		"alter_partition_function", "alter_partition_scheme", "alter_remote_service_binding", 
		"create_remote_service_binding", "create_resource_pool", "alter_resource_governor", 
		"alter_database_audit_specification", "audit_action_spec_group", "audit_action_specification", 
		"action_specification", "audit_class_name", "audit_securable", "alter_db_role", 
		"create_database_audit_specification", "create_db_role", "create_route", 
		"create_rule", "alter_schema_sql", "create_schema", "create_schema_azure_sql_dw_and_pdw", 
		"alter_schema_azure_sql_dw_and_pdw", "create_search_property_list", "create_security_policy", 
		"alter_sequence", "create_sequence", "alter_server_audit", "create_server_audit", 
		"alter_server_audit_specification", "create_server_audit_specification", 
		"alter_server_configuration", "alter_server_role", "create_server_role", 
		"alter_server_role_pdw", "alter_service", "opt_arg_clause", "create_service", 
		"alter_service_master_key", "alter_symmetric_key", "create_synonym", "alter_user", 
		"create_user", "create_user_azure_sql_dw", "alter_user_azure_sql", "alter_workload_group", 
		"create_workload_group", "create_xml_schema_collection", "create_partition_function", 
		"create_partition_scheme", "create_queue", "queue_settings", "alter_queue", 
		"queue_action", "queue_rebuild_options", "create_contract", "conversation_statement", 
		"message_statement", "merge_statement", "when_matches", "merge_matched", 
		"merge_not_matched", "delete_statement", "delete_statement_from", "insert_statement", 
		"insert_statement_value", "receive_statement", "select_statement_standalone", 
		"select_statement", "time", "update_statement", "output_clause", "output_dml_list_elem", 
		"create_database", "create_index", "alter_index", "rebuild_partition", 
		"create_columnstore_index", "create_nonclustered_columnstore_index", "create_xml_index", 
		"create_or_alter_procedure", "as_external_name", "create_or_alter_trigger", 
		"create_or_alter_dml_trigger", "dml_trigger_option", "dml_trigger_operation", 
		"create_or_alter_ddl_trigger", "ddl_trigger_operation", "create_or_alter_function", 
		"func_body_returns_select", "func_body_returns_table", "func_body_returns_scalar", 
		"procedure_param", "procedure_option", "function_option", "partition_with", 
		"create_statistics", "update_statistics", "create_table", "table_indices", 
		"table_options", "create_view", "view_attribute", "alter_table", "switch_partition", 
		"low_priority_lock_wait", "alter_database", "add_or_modify_files", "filespec", 
		"add_or_modify_filegroups", "filegroup_updatability_option", "database_optionspec", 
		"query_store_options", "auto_option", "change_tracking_option", "change_tracking_option_list", 
		"containment_option", "cursor_option", "alter_endpoint", "database_mirroring_option", 
		"mirroring_set_option", "mirroring_partner", "mirroring_witness", "witness_partner_equal", 
		"partner_option", "witness_option", "witness_server", "partner_server", 
		"mirroring_host_port_seperator", "partner_server_tcp_prefix", "port_number", 
		"host", "date_correlation_optimization_option", "db_encryption_option", 
		"db_state_option", "db_update_option", "db_user_access_option", "delayed_durability_option", 
		"external_access_option", "hadr_options", "mixed_page_allocation_option", 
		"parameterization_option", "recovery_option", "service_broker_option", 
		"snapshot_option", "sql_option", "target_recovery_time_option", "termination", 
		"drop_index", "drop_relational_or_xml_or_spatial_index", "drop_backward_compatible_index", 
		"drop_procedure", "drop_trigger", "drop_dml_trigger", "drop_ddl_trigger", 
		"drop_function", "drop_statistics", "drop_table", "drop_view", "create_type", 
		"drop_type", "rowset_function_limited", "openquery", "opendatasource", 
		"declare_statement", "xml_declaration", "cursor_statement", "backup_database", 
		"backup_log", "backup_certificate", "backup_master_key", "backup_service_master_key", 
		"kill_statement", "kill_process", "kill_query_notification", "kill_stats_job", 
		"execute_statement", "execute_body_batch", "execute_body", "execute_statement_arg", 
		"execute_statement_arg_named", "execute_statement_arg_unnamed", "execute_parameter", 
		"execute_var_string", "security_statement", "principal_id", "create_certificate", 
		"existing_keys", "private_key_options", "generate_new_keys", "date_options", 
		"open_key", "close_key", "create_key", "key_options", "algorithm", "encryption_mechanism", 
		"decryption_mechanism", "grant_permission", "set_statement", "transaction_statement", 
		"go_batch_statement", "go_statement", "use_statement", "setuser_statement", 
		"reconfigure_statement", "shutdown_statement", "checkpoint_statement", 
		"dbcc_checkalloc_option", "dbcc_checkalloc", "dbcc_checkcatalog", "dbcc_checkconstraints_option", 
		"dbcc_checkconstraints", "dbcc_checkdb_table_option", "dbcc_checkdb", 
		"dbcc_checkfilegroup_option", "dbcc_checkfilegroup", "dbcc_checktable", 
		"dbcc_cleantable", "dbcc_clonedatabase_option", "dbcc_clonedatabase", 
		"dbcc_pdw_showspaceused", "dbcc_proccache", "dbcc_showcontig_option", 
		"dbcc_showcontig", "dbcc_shrinklog", "dbcc_dbreindex", "dbcc_dll_free", 
		"dbcc_dropcleanbuffers", "dbcc_clause", "execute_clause", "declare_local", 
		"table_type_definition", "table_type_indices", "xml_type_definition", 
		"xml_schema_collection", "column_def_table_constraints", "column_def_table_constraint", 
		"column_definition", "materialized_column_definition", "column_constraint", 
		"table_constraint", "default_value_columns", "on_delete", "on_update", 
		"index_options", "index_option", "declare_cursor", "declare_set_cursor_common", 
		"declare_set_cursor_common_partial", "fetch_cursor", "set_special", "special_list", 
		"constant_LOCAL_ID", "expression", "time_zone", "primitive_expression", 
		"case_expression", "unary_operator_expression", "bracket_expression", 
		"constant_expression", "subquery", "with_expression", "common_table_expression", 
		"update_elem", "update_elem_merge", "search_condition", "predicate", "query_expression", 
		"sql_union", "query_specification", "top_clause", "top_percent", "top_count", 
		"order_by_clause", "for_clause", "xml_common_directives", "order_by_expression", 
		"group_by_item", "option_clause", "option", "optimize_for_arg", "select_list", 
		"udt_method_arguments", "asterisk", "column_elem", "udt_elem", "expression_elem", 
		"select_list_elem", "table_sources", "table_source", "table_source_item_joined", 
		"table_source_item", "open_xml", "open_json", "json_declaration", "json_column_declaration", 
		"schema_declaration", "column_declaration", "change_table", "change_table_changes", 
		"change_table_version", "join_part", "join_on", "cross_join", "apply_", 
		"pivot", "unpivot", "pivot_clause", "unpivot_clause", "full_column_name_list", 
		"table_name_with_hint", "rowset_function", "bulk_option", "derived_table", 
		"function_call", "partition_function", "freetext_function", "freetext_predicate", 
		"built_in_functions", "xml_data_type_methods", "dateparts_9", "dateparts_12", 
		"dateparts_15", "dateparts_datetrunc", "value_method", "value_call", "query_method", 
		"query_call", "exist_method", "exist_call", "modify_method", "modify_call", 
		"nodes_method", "switch_section", "switch_search_condition_section", "as_column_alias", 
		"as_table_alias", "table_alias", "with_table_hints", "deprecated_table_hint", 
		"insert_with_table_hints", "table_hint", "index_value", "column_alias_list", 
		"column_alias", "table_value_constructor", "expression_list_", "ranking_windowed_function", 
		"aggregate_windowed_function", "analytic_windowed_function", "all_distinct_expression", 
		"over_clause", "row_or_range_clause", "window_frame_extent", "window_frame_bound", 
		"window_frame_preceding", "window_frame_following", "create_database_option", 
		"database_filestream_option", "database_file_spec", "file_group", "file_spec", 
		"entity_name", "entity_name_for_azure_dw", "entity_name_for_parallel_dw", 
		"full_table_name", "table_name", "simple_name", "func_proc_name_schema", 
		"func_proc_name_database_schema", "func_proc_name_server_database_schema", 
		"ddl_object", "full_column_name", "column_name_list_with_order", "insert_column_name_list", 
		"insert_column_id", "column_name_list", "cursor_name", "on_off", "clustered", 
		"null_notnull", "null_or_default", "scalar_function_name", "begin_conversation_timer", 
		"begin_conversation_dialog", "contract_name", "service_name", "end_conversation", 
		"waitfor_conversation", "get_conversation", "queue_id", "send_conversation", 
		"data_type", "default_value", "constant", "sign", "keyword", "id_", "simple_id", 
		"id_or_string", "comparison_operator", "assignment_operator", "file_size"
	};

	private static readonly string[] _LiteralNames = {
		null, "'ABORT'", "'ABORT_AFTER_WAIT'", "'ABSENT'", "'ABSOLUTE'", "'ACCELERATED_DATABASE_RECOVERY'", 
		"'ACCENT_SENSITIVITY'", "'ACCESS'", "'ACTION'", "'ACTIVATION'", "'ACTIVE'", 
		"'ADD'", "'ADDRESS'", "'ADMINISTER'", "'AES'", "'AES_128'", "'AES_192'", 
		"'AES_256'", "'AFFINITY'", "'AFTER'", "'AGGREGATE'", "'ALGORITHM'", "'ALL'", 
		"'ALLOWED'", "'ALLOW_CONNECTIONS'", "'ALLOW_ENCRYPTED_VALUE_MODIFICATIONS'", 
		"'ALLOW_MULTIPLE_EVENT_LOSS'", "'ALLOW_PAGE_LOCKS'", "'ALLOW_ROW_LOCKS'", 
		"'ALLOW_SINGLE_EVENT_LOSS'", "'ALLOW_SNAPSHOT_ISOLATION'", "'ALL_CONSTRAINTS'", 
		"'ALL_ERRORMSGS'", "'ALL_INDEXES'", "'ALL_LEVELS'", "'ALTER'", "'ALWAYS'", 
		"'AND'", "'ANONYMOUS'", "'ANSI_DEFAULTS'", "'ANSI_NULLS'", "'ANSI_NULL_DEFAULT'", 
		"'ANSI_NULL_DFLT_OFF'", "'ANSI_NULL_DFLT_ON'", "'ANSI_PADDING'", "'ANSI_WARNINGS'", 
		"'ANY'", "'APPEND'", "'APPLICATION'", "'APPLICATION_LOG'", "'APPLOCK_MODE'", 
		"'APPLOCK_TEST'", "'APPLY'", "'APP_NAME'", "'ARITHABORT'", "'ARITHIGNORE'", 
		"'AS'", "'ASC'", "'ASCII'", "'ASSEMBLY'", "'ASSEMBLYPROPERTY'", "'ASYMMETRIC'", 
		"'ASYNCHRONOUS_COMMIT'", "'AT'", "'AUDIT'", "'AUDIT_GUID'", "'AUTHENTICATE'", 
		"'AUTHENTICATION'", "'AUTHORIZATION'", "'AUTO'", "'AUTOGROW_ALL_FILES'", 
		"'AUTOGROW_SINGLE_FILE'", "'AUTOMATED_BACKUP_PREFERENCE'", "'AUTOMATIC'", 
		"'AUTO_CLEANUP'", "'AUTO_CLOSE'", "'AUTO_CREATE_STATISTICS'", "'AUTO_DROP'", 
		"'AUTO_SHRINK'", "'AUTO_UPDATE_STATISTICS'", "'AUTO_UPDATE_STATISTICS_ASYNC'", 
		"'AVAILABILITY'", "'AVAILABILITY_MODE'", "'AVG'", "'\\'", "'BACKUP'", 
		"'BACKUP_CLONEDB'", "'BACKUP_PRIORITY'", "'BASE64'", "'BEFORE'", "'BEGIN'", 
		"'BEGIN_DIALOG'", "'BETWEEN'", "'BIGINT'", "'BINARY BASE64'", "'BINARY_CHECKSUM'", 
		"'BINARY'", "'BINDING'", "'BLOB_STORAGE'", "'BLOCK'", "'BLOCKERS'", "'BLOCKING_HIERARCHY'", 
		"'BLOCKSIZE'", "'BREAK'", "'BROKER'", "'BROKER_INSTANCE'", "'BROWSE'", 
		"'BUFFER'", "'BUFFERCOUNT'", "'BULK'", "'BULK_LOGGED'", "'BY'", "'CACHE'", 
		"'CALLED'", "'CALLER'", "'CAP_CPU_PERCENT'", "'CASCADE'", "'CASE'", "'CAST'", 
		"'CATALOG'", "'CATALOG_COLLATION'", "'CATCH'", "'CERTENCODED'", "'CERTIFICATE'", 
		"'CERTPRIVATEKEY'", "'CERT_ID'", "'CHANGE'", "'CHANGES'", "'CHANGETABLE'", 
		"'CHANGE_RETENTION'", "'CHANGE_TRACKING'", "'CHAR'", "'CHARINDEX'", "'CHECK'", 
		"'CHECKALLOC'", "'CHECKCATALOG'", "'CHECKCONSTRAINTS'", "'CHECKDB'", "'CHECKFILEGROUP'", 
		"'CHECKPOINT'", "'CHECKSUM'", "'CHECKSUM_AGG'", "'CHECKTABLE'", "'CHECK_EXPIRATION'", 
		"'CHECK_POLICY'", "'CLASSIFIER_FUNCTION'", "'CLEANTABLE'", "'CLEANUP'", 
		"'CLONEDATABASE'", "'CLOSE'", "'CLUSTER'", "'CLUSTERED'", "'COALESCE'", 
		"'COLLATE'", "'COLLECTION'", "'COLUMN'", "'COLUMNPROPERTY'", "'COLUMNS'", 
		"'COLUMNSTORE'", "'COLUMNSTORE_ARCHIVE'", "'COLUMN_ENCRYPTION_KEY'", "'COLUMN_MASTER_KEY'", 
		"'COL_LENGTH'", "'COL_NAME'", "'COMMIT'", "'COMMITTED'", "'COMPATIBILITY_LEVEL'", 
		"'COMPRESS'", "'COMPRESSION'", "'COMPRESSION_DELAY'", "'COMPRESS_ALL_ROW_GROUPS'", 
		"'COMPUTE'", "'CONCAT'", "'CONCAT_NULL_YIELDS_NULL'", "'CONCAT_WS'", "'CONFIGURATION'", 
		"'CONNECT'", "'CONNECTION'", "'CONNECTIONPROPERTY'", "'CONSTRAINT'", "'CONTAINMENT'", 
		"'CONTAINS'", "'CONTAINSTABLE'", "'CONTENT'", "'CONTEXT'", "'CONTEXT_INFO'", 
		"'CONTINUE'", "'CONTINUE_AFTER_ERROR'", "'CONTRACT'", "'CONTRACT_NAME'", 
		"'CONTROL'", "'CONVERSATION'", "'TRY_ CONVERT'", "'COOKIE'", "'COPY_ONLY'", 
		"'COUNT'", "'COUNTER'", "'COUNT_BIG'", "'CPU'", "'CREATE'", "'CREATE_NEW'", 
		"'CREATION_DISPOSITION'", "'CREDENTIAL'", "'CROSS'", "'CRYPTOGRAPHIC'", 
		"'CUME_DIST'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_REQUEST_ID'", 
		"'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_TRANSACTION_ID'", "'CURRENT_USER'", 
		"'CURSOR'", "'CURSOR_CLOSE_ON_COMMIT'", "'CURSOR_DEFAULT'", "'CURSOR_STATUS'", 
		"'CYCLE'", "'DATA'", "'DATABASE'", "'DATABASE_DEFAULT'", "'DATABASE_MIRRORING'", 
		"'DATABASE_PRINCIPAL_ID'", "'DATALENGTH'", "'DATASPACE'", "'DATA_COMPRESSION'", 
		"'DATA_PURITY'", "'DATA_SOURCE'", "'DATEADD'", "'DATEDIFF'", "'DATENAME'", 
		"'DATEPART'", "'DATE_CORRELATION_OPTIMIZATION'", "'DAYS'", "'DBCC'", "'DBREINDEX'", 
		"'DB_CHAINING'", "'DB_FAILOVER'", "'DB_ID'", "'DB_NAME'", "'DDL'", "'DEALLOCATE'", 
		"'DECLARE'", "'DECOMPRESS'", "'DECRYPTION'", "'DEFAULT'", "'DEFAULT_DATABASE'", 
		null, "'DEFAULT_FULLTEXT_LANGUAGE'", "'DEFAULT_LANGUAGE'", "'DEFAULT_SCHEMA'", 
		"'DEFINITION'", "'DELAY'", "'DELAYED_DURABILITY'", "'DELETE'", "'DELETED'", 
		"'DENSE_RANK'", "'DENY'", "'DEPENDENTS'", "'DES'", "'DESC'", "'DESCRIPTION'", 
		"'DESX'", "'DETERMINISTIC'", "'DHCP'", "'DIAGNOSTICS'", "'DIALOG'", "'DIFFERENCE'", 
		"'DIFFERENTIAL'", "'DIRECTORY_NAME'", "'DISABLE'", "'DISABLED'", "'DISABLE_BROKER'", 
		"'DISK'", "'DISTINCT'", "'DISTRIBUTED'", "'DISTRIBUTION'", "'DOCUMENT'", 
		"'$PARTITION'", "'DOUBLE'", "'\\\\'", "'//'", "'DROP'", "'DROPCLEANBUFFERS'", 
		"'DROP_EXISTING'", "'DTC_SUPPORT'", "'DUMP'", "'DYNAMIC'", "'ELEMENTS'", 
		"'ELSE'", "'EMERGENCY'", "'EMPTY'", "'ENABLE'", "'ENABLED'", "'ENABLE_BROKER'", 
		"'ENCRYPTED'", "'ENCRYPTED_VALUE'", "'ENCRYPTION'", "'ENCRYPTION_TYPE'", 
		"'END'", "'ENDPOINT'", "'ENDPOINT_URL'", "'ERRLVL'", "'ERROR'", "'ERROR_BROKER_CONVERSATIONS'", 
		"'ERROR_LINE'", "'ERROR_MESSAGE'", "'ERROR_NUMBER'", "'ERROR_PROCEDURE'", 
		"'ERROR_SEVERITY'", "'ERROR_STATE'", "'ESCAPE'", "'ESTIMATEONLY'", "'EVENT'", 
		"'EVENT_RETENTION_MODE'", null, "'EXCEPT'", "'EXCLUSIVE'", "'EXECUTABLE'", 
		"'EXECUTABLE_FILE'", null, "'EXIST'", "'EXISTS'", "'[EXIST]'", "'EXIT'", 
		"'EXPAND'", "'EXPIREDATE'", "'EXPIRY_DATE'", "'EXPLICIT'", "'EXTENDED_LOGICAL_CHECKS'", 
		"'EXTENSION'", "'EXTERNAL'", "'EXTERNAL_ACCESS'", "'FAILOVER'", "'FAILOVER_MODE'", 
		"'FAILURE'", "'FAILURECONDITIONLEVEL'", "'FAILURE_CONDITION_LEVEL'", "'FAIL_OPERATION'", 
		"'FAN_IN'", "'FAST'", "'FAST_FORWARD'", "'FETCH'", "'FILE'", "'FILEGROUP'", 
		"'FILEGROUPPROPERTY'", "'FILEGROUP_ID'", "'FILEGROUP_NAME'", "'FILEGROWTH'", 
		"'FILENAME'", "'FILEPATH'", "'FILEPROPERTY'", "'FILEPROPERTYEX'", "'FILESTREAM'", 
		"'FILESTREAM_ON'", "'FILE_ID'", "'FILE_IDEX'", "'FILE_NAME'", "'FILE_SNAPSHOT'", 
		"'FILLFACTOR'", "'FILTER'", "'FIRST'", "'FIRST_VALUE'", "'FMTONLY'", "'FOLLOWING'", 
		"'FOR'", "'FORCE'", "'FORCED'", "'FORCEPLAN'", "'FORCESCAN'", "'FORCESEEK'", 
		"'FORCE_FAILOVER_ALLOW_DATA_LOSS'", "'FORCE_SERVICE_ALLOW_DATA_LOSS'", 
		"'FOREIGN'", "'FORMAT'", "'FORMATMESSAGE'", "'FORWARD_ONLY'", "'FREE'", 
		"'FREETEXT'", "'FREETEXTTABLE'", "'FROM'", "'FULL'", "'FULLSCAN'", "'FULLTEXT'", 
		"'FULLTEXTCATALOGPROPERTY'", "'FULLTEXTSERVICEPROPERTY'", "'FUNCTION'", 
		"'GB'", "'GENERATED'", "'GET'", "'GETANCESTOR'", "'GETANSINULL'", "'GETDATE'", 
		"'GETDESCENDANT'", "'GETLEVEL'", "'GETREPARENTEDVALUE'", "'GETROOT'", 
		"'GETUTCDATE'", "'GET_FILESTREAM_TRANSACTION_CONTEXT'", "'GLOBAL'", "'GO'", 
		null, "'GOTO'", "'GOVERNOR'", "'GRANT'", "'GREATEST'", "'GROUP'", "'GROUPING'", 
		"'GROUPING_ID'", "'GROUP_MAX_REQUESTS'", "'HADR'", "'HASH'", "'HASHED'", 
		"'HAS_DBACCESS'", "'HAS_PERMS_BY_NAME'", "'HAVING'", "'HEALTHCHECKTIMEOUT'", 
		"'HEALTH_CHECK_TIMEOUT'", "'HEAP'", "'HIDDEN'", "'HIERARCHYID'", "'HIGH'", 
		"'HOLDLOCK'", "'HONOR_BROKER_PRIORITY'", "'HOST_ID'", "'HOST_NAME'", "'HOURS'", 
		"'IDENTITY'", "'IDENTITYCOL'", "'IDENTITY_INSERT'", "'IDENTITY_VALUE'", 
		"'IDENT_CURRENT'", "'IDENT_INCR'", "'IDENT_SEED'", "'IF'", "'IGNORE_CONSTRAINTS'", 
		"'IGNORE_DUP_KEY'", "'IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX'", "'IGNORE_REPLICATED_TABLE_CACHE'", 
		"'IGNORE_TRIGGERS'", "'IIF'", "'IMMEDIATE'", "'IMPERSONATE'", "'IMPLICIT_TRANSACTIONS'", 
		"'IMPORTANCE'", "'IN'", "'INCLUDE'", "'INCLUDE_NULL_VALUES'", "'INCREMENT'", 
		"'INCREMENTAL'", "'INDEX'", "'INDEXKEY_PROPERTY'", "'INDEXPROPERTY'", 
		"'INDEX_COL'", "'INFINITE'", "'INIT'", "'INITIATOR'", "'INNER'", "'INPUT'", 
		"'INSENSITIVE'", "'INSERT'", "'INSERTED'", "'INSTEAD'", "'INT'", "'INTERSECT'", 
		"'INTO'", "'IO'", "'IP'", "'IS'", "'ISDESCENDANTOF'", "'ISJSON'", "'ISNULL'", 
		"'ISNUMERIC'", "'ISOLATION'", "'IS_MEMBER'", "'IS_ROLEMEMBER'", "'IS_SRVROLEMEMBER'", 
		"'JOB'", "'JOIN'", "'JSON'", "'JSON_ARRAY'", "'JSON_MODIFY'", "'JSON_OBJECT'", 
		"'JSON_PATH_EXISTS'", "'JSON_QUERY'", "'JSON_VALUE'", "'KB'", "'KEEP'", 
		"'KEEPDEFAULTS'", "'KEEPFIXED'", "'KEEPIDENTITY'", "'KERBEROS'", "'KEY'", 
		"'KEYS'", "'KEYSET'", "'KEY_PATH'", "'KEY_SOURCE'", "'KEY_STORE_PROVIDER_NAME'", 
		"'KILL'", "'LAG'", "'LANGUAGE'", "'LAST'", "'LAST_VALUE'", "'LEAD'", "'LEAST'", 
		"'LEFT'", "'LEN'", "'LEVEL'", "'LIBRARY'", "'LIFETIME'", "'LIKE'", "'LINENO'", 
		"'LINKED'", "'LINUX'", "'LIST'", "'LISTENER'", "'LISTENER_IP'", "'LISTENER_PORT'", 
		"'LISTENER_URL'", "'LOAD'", "'LOB_COMPACTION'", "'LOCAL'", "'LOCAL_SERVICE_NAME'", 
		"'LOCATION'", "'LOCK'", "'LOCK_ESCALATION'", "'LOG'", "'LOGIN'", "'LOGINPROPERTY'", 
		"'LOOP'", "'LOW'", "'LOWER'", "'LTRIM'", "'MANUAL'", "'MARK'", "'MASK'", 
		"'MASKED'", "'MASTER'", "'MATCHED'", "'MATERIALIZED'", "'MAX'", "'MAXDOP'", 
		"'MAXRECURSION'", "'MAXSIZE'", "'MAXTRANSFER'", "'MAXVALUE'", "'MAX_CPU_PERCENT'", 
		"'MAX_DISPATCH_LATENCY'", "'MAX_DOP'", "'MAX_DURATION'", "'MAX_EVENT_SIZE'", 
		"'MAX_FILES'", "'MAX_IOPS_PER_VOLUME'", "'MAX_MEMORY'", "'MAX_MEMORY_PERCENT'", 
		"'MAX_OUTSTANDING_IO_PER_VOLUME'", "'MAX_PROCESSES'", "'MAX_QUEUE_READERS'", 
		"'MAX_ROLLOVER_FILES'", "'MAX_SIZE'", "'MB'", "'MEDIADESCRIPTION'", "'MEDIANAME'", 
		"'MEDIUM'", "'MEMBER'", "'MEMORY_OPTIMIZED_DATA'", "'MEMORY_PARTITION_MODE'", 
		"'MERGE'", "'MESSAGE'", "'MESSAGE_FORWARDING'", "'MESSAGE_FORWARD_SIZE'", 
		"'MIN'", "'MINUTES'", "'MINVALUE'", "'MIN_ACTIVE_ROWVERSION'", "'MIN_CPU_PERCENT'", 
		"'MIN_IOPS_PER_VOLUME'", "'MIN_MEMORY_PERCENT'", "'MIRROR'", "'MIRROR_ADDRESS'", 
		"'MIXED_PAGE_ALLOCATION'", "'MODE'", "'MODIFY'", "'[MODIFY]'", "'MOVE'", 
		"'MULTI_USER'", "'MUST_CHANGE'", "'NAME'", "'NATIONAL'", "'NCHAR'", "'NEGOTIATE'", 
		"'NESTED_TRIGGERS'", "'NEWID'", "'NEWNAME'", "'NEWSEQUENTIALID'", "'NEW_ACCOUNT'", 
		"'NEW_BROKER'", "'NEW_PASSWORD'", "'NEXT'", "'NO'", "'NOCHECK'", "'NOCOUNT'", 
		"'NODES'", "'NOEXEC'", "'NOEXPAND'", "'NOFORMAT'", "'NOHOLDLOCK'", "'NOINDEX'", 
		"'NOINIT'", "'NONCLUSTERED'", "'NONE'", "'NON_TRANSACTED_ACCESS'", "'NORECOMPUTE'", 
		"'NORECOVERY'", "'NOREWIND'", "'NOSKIP'", "'NOT'", "'NOTIFICATION'", "'NOTIFICATIONS'", 
		"'NOUNLOAD'", "'NOWAIT'", "'NO_CHECKSUM'", "'NO_COMPRESSION'", "'NO_EVENT_LOSS'", 
		"'NO_INFOMSGS'", "'NO_QUERYSTORE'", "'NO_STATISTICS'", "'NO_TRUNCATE'", 
		"'NO_WAIT'", "'NTILE'", "'NTLM'", "'NULLIF'", "'NULL'", null, "'NUMANODE'", 
		"'NUMBER'", "'NUMERIC_ROUNDABORT'", "'OBJECT'", "'OBJECTPROPERTY'", "'OBJECTPROPERTYEX'", 
		"'OBJECT_DEFINITION'", "'OBJECT_ID'", "'OBJECT_NAME'", "'OBJECT_SCHEMA_NAME'", 
		"'OF'", "'OFF'", "'OFFLINE'", "'OFFSET'", "'OFFSETS'", "'OLD_ACCOUNT'", 
		"'OLD_PASSWORD'", "'ON'", "'ONLINE'", "'ONLY'", "'ON_FAILURE'", "'OPEN'", 
		"'OPENDATASOURCE'", "'OPENJSON'", "'OPENQUERY'", "'OPENROWSET'", "'OPENXML'", 
		"'OPEN_EXISTING'", "'OPERATIONS'", "'OPTIMISTIC'", "'OPTIMIZE'", "'OPTIMIZE_FOR_SEQUENTIAL_KEY'", 
		"'OPTION'", "'OR'", "'ORDER'", "'ORIGINAL_DB_NAME'", "'ORIGINAL_LOGIN'", 
		"'OUT'", "'OUTER'", "'OUTPUT'", "'OVER'", "'OVERRIDE'", "'OWNER'", "'OWNERSHIP'", 
		"'PAD_INDEX'", "'PAGE'", "'PAGECOUNT'", "'PAGE_VERIFY'", "'PAGLOCK'", 
		"'PARAMETERIZATION'", "'PARAM_NODE'", null, "'PARSENAME'", "'PARSEONLY'", 
		"'PARTIAL'", "'PARTITION'", "'PARTITIONS'", "'PARTNER'", "'PASSWORD'", 
		"'PATH'", "'PATINDEX'", "'PAUSE'", "'PDW_SHOWSPACEUSED'", "'PERCENT'", 
		"'PERCENTILE_CONT'", "'PERCENTILE_DISC'", "'PERCENT_RANK'", "'PERMISSIONS'", 
		"'PERMISSION_SET'", "'PERSISTED'", "'PERSIST_SAMPLE_PERCENT'", "'PER_CPU'", 
		"'PER_DB'", "'PER_NODE'", "'PHYSICAL_ONLY'", "'PIVOT'", "'PLAN'", "'PLATFORM'", 
		"'POISON_MESSAGE_HANDLING'", "'POLICY'", "'POOL'", "'PORT'", "'PRECEDING'", 
		"'PRECISION'", "'PREDICATE'", "'PRIMARY'", "'PRIMARY_ROLE'", "'PRINT'", 
		"'PRIOR'", "'PRIORITY'", "'PRIORITY_LEVEL'", "'PRIVATE'", "'PRIVATE_KEY'", 
		"'PRIVILEGES'", "'PROC'", "'PROCCACHE'", "'PROCEDURE'", "'PROCEDURE_NAME'", 
		"'PROCESS'", "'PROFILE'", "'PROPERTY'", "'PROVIDER'", "'PROVIDER_KEY_NAME'", 
		"'PUBLIC'", "'PWDCOMPARE'", "'PWDENCRYPT'", "'PYTHON'", "'QUERY'", "'[QUERY]'", 
		"'QUERY_STORE'", "'QUERYTRACEON'", "'QUEUE'", "'QUEUE_DELAY'", "'QUOTED_IDENTIFIER'", 
		"'QUOTENAME'", "'R'", "'RAISERROR'", "'RANDOMIZED'", "'RANGE'", "'RANK'", 
		"'RAW'", "'RC2'", "'RC4'", "'RC4_128'", "'READ'", "'READCOMMITTED'", "'READCOMMITTEDLOCK'", 
		"'READONLY'", "'READPAST'", "'READTEXT'", "'READUNCOMMITTED'", "'READWRITE'", 
		"'READ_COMMITTED_SNAPSHOT'", "'READ_ONLY'", "'READ_ONLY_ROUTING_LIST'", 
		"'READ_WRITE'", "'READ_WRITE_FILEGROUPS'", "'REBUILD'", "'RECEIVE'", "'RECOMPILE'", 
		"'RECONFIGURE'", "'RECOVERY'", "'RECURSIVE_TRIGGERS'", "'REFERENCES'", 
		"'REGENERATE'", "'RELATED_CONVERSATION'", "'RELATED_CONVERSATION_GROUP'", 
		"'RELATIVE'", "'REMOTE'", "'REMOTE_PROC_TRANSACTIONS'", "'REMOTE_SERVICE_NAME'", 
		"'REMOVE'", "'REORGANIZE'", "'REPAIR_ALLOW_DATA_LOSS'", "'REPAIR_FAST'", 
		"'REPAIR_REBUILD'", "'REPEATABLE'", "'REPEATABLEREAD'", "'REPLACE'", "'REPLICA'", 
		"'REPLICATE'", "'REPLICATION'", "'REQUEST_MAX_CPU_TIME_SEC'", "'REQUEST_MAX_MEMORY_GRANT_PERCENT'", 
		"'REQUEST_MEMORY_GRANT_TIMEOUT_SEC'", "'REQUIRED'", "'REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT'", 
		"'RESAMPLE'", "'RESERVE_DISK_SPACE'", "'RESET'", "'RESOURCE'", "'RESOURCES'", 
		"'RESOURCE_MANAGER_LOCATION'", "'RESTART'", "'RESTORE'", "'RESTRICT'", 
		"'RESTRICTED_USER'", "'RESUMABLE'", "'RESUME'", "'RETAINDAYS'", "'RETENTION'", 
		"'RETURN'", "'RETURNS'", "'REVERSE'", "'REVERT'", "'REVOKE'", "'REWIND'", 
		"'RIGHT'", "'ROBUST'", "'ROLE'", "'ROLLBACK'", "'ROOT'", "'ROUND_ROBIN'", 
		"'ROUTE'", "'ROW'", "'ROWCOUNT'", "'ROWCOUNT_BIG'", "'ROWGUID'", "'ROWGUIDCOL'", 
		"'ROWS'", "'ROW_NUMBER'", "'RSA_1024'", "'RSA_2048'", "'RSA_3072'", "'RSA_4096'", 
		"'RSA_512'", "'RTRIM'", "'RULE'", "'SAFE'", "'SAFETY'", "'SAMPLE'", "'SAVE'", 
		"'SCHEDULER'", "'SCHEMA'", "'SCHEMABINDING'", "'SCHEMA_ID'", "'SCHEMA_NAME'", 
		"'SCHEME'", "'SCOPED'", "'SCOPE_IDENTITY'", "'SCRIPT'", "'SCROLL'", "'SCROLL_LOCKS'", 
		"'SEARCH'", "'SECONDARY'", "'SECONDARY_ONLY'", "'SECONDARY_ROLE'", "'SECONDS'", 
		"'SECRET'", "'SECURABLES'", "'SECURITY'", "'SECURITYAUDIT'", "'SECURITY_LOG'", 
		"'SEEDING_MODE'", "'SELECT'", "'SELF'", "'SEMANTICKEYPHRASETABLE'", "'SEMANTICSIMILARITYDETAILSTABLE'", 
		"'SEMANTICSIMILARITYTABLE'", "'SEMI_SENSITIVE'", "'SEND'", "'SENT'", "'SEQUENCE'", 
		"'SEQUENCE_NUMBER'", "'SERIALIZABLE'", "'SERVER'", "'SERVERPROPERTY'", 
		"'SERVICE'", "'SERVICEBROKER'", "'SERVICE_BROKER'", "'SERVICE_NAME'", 
		"'SESSION'", "'SESSIONPROPERTY'", "'SESSION_CONTEXT'", "'SESSION_TIMEOUT'", 
		"'SESSION_USER'", "'SET'", "'SETERROR'", "'SETS'", "'SETTINGS'", "'SETUSER'", 
		"'SHARE'", "'SHARED'", "'SHOWCONTIG'", "'SHOWPLAN'", "'SHOWPLAN_ALL'", 
		"'SHOWPLAN_TEXT'", "'SHOWPLAN_XML'", "'SHRINKLOG'", "'SHUTDOWN'", "'SID'", 
		"'SIGNATURE'", "'SIMPLE'", "'SINGLE_USER'", "'SIZE'", "'SKIP'", "'SMALLINT'", 
		"'SNAPSHOT'", "'SOFTNUMA'", "'SOME'", "'SORT_IN_TEMPDB'", "'SOUNDEX'", 
		"'SOURCE'", "'SPACE'", "'SPARSE'", "'SPATIAL_WINDOW_MAX_CELLS'", "'SPECIFICATION'", 
		"'SPLIT'", "'SQL'", "'SQLDUMPERFLAGS'", "'SQLDUMPERPATH'", "'SQLDUMPERTIMEOUT'", 
		"'SQL_VARIANT_PROPERTY'", "'STANDBY'", "'START'", "'STARTED'", "'STARTUP_STATE'", 
		"'START_DATE'", "'STATE'", "'STATIC'", "'STATISTICS'", "'STATISTICS_INCREMENTAL'", 
		"'STATISTICS_NORECOMPUTE'", "'STATS'", "'STATS_DATE'", "'STATS_STREAM'", 
		"'STATUS'", "'STATUSONLY'", "'STDEV'", "'STDEVP'", "'STOP'", "'STOPLIST'", 
		"'STOPPED'", "'STOP_ON_ERROR'", "'STR'", "'STRING_AGG'", "'STRING_ESCAPE'", 
		"'STUFF'", "'SUBJECT'", "'SUBSCRIBE'", "'SUBSCRIPTION'", "'SUBSTRING'", 
		"'SUM'", "'SUPPORTED'", "'SUSER_ID'", "'SUSER_NAME'", "'SUSER_SID'", "'SUSER_SNAME'", 
		"'SUSPEND'", "'SWITCH'", "'SYMMETRIC'", "'SYNCHRONOUS_COMMIT'", "'SYNONYM'", 
		"'SYSTEM'", "'SYSTEM_USER'", "'TABLE'", "'TABLERESULTS'", "'TABLESAMPLE'", 
		"'TABLOCK'", "'TABLOCKX'", "'TAKE'", "'TAPE'", "'TARGET'", "'TARGET_RECOVERY_TIME'", 
		"'TB'", "'TCP'", "'TEXTIMAGE_ON'", "'TEXTSIZE'", "'THEN'", "'THROW'", 
		"'TIES'", "'TIME'", "'TIMEOUT'", "'TIMER'", "'TINYINT'", "'TO'", "'TOP'", 
		"'TORN_PAGE_DETECTION'", "'TOSTRING'", "'TRACE'", "'TRACKING'", "'TRACK_CAUSALITY'", 
		"'TRAN'", "'TRANSACTION'", "'TRANSACTION_ID'", "'TRANSFER'", "'TRANSFORM_NOISE_WORDS'", 
		"'TRANSLATE'", "'TRIGGER'", "'TRIM'", "'TRIPLE_DES'", "'TRIPLE_DES_3KEY'", 
		"'TRUNCATE'", "'TRUSTWORTHY'", "'TRY'", "'TRY_CAST'", "'TSEQUAL'", "'TSQL'", 
		"'TWO_DIGIT_YEAR_CUTOFF'", "'TYPE'", "'TYPEPROPERTY'", "'TYPE_ID'", "'TYPE_NAME'", 
		"'TYPE_WARNING'", "'UNBOUNDED'", "'UNCHECKED'", "'UNCOMMITTED'", "'UNICODE'", 
		"'UNION'", "'UNIQUE'", "'UNKNOWN'", "'UNLIMITED'", "'UNLOCK'", "'UNMASK'", 
		"'UNPIVOT'", "'UNSAFE'", "'UOW'", "'UPDATE'", "'UPDATETEXT'", "'UPPER'", 
		"'URL'", "'USE'", "'USED'", "'USER'", "'USER_ID'", "'USER_NAME'", "'USING'", 
		"'VALIDATION'", "'VALID_XML'", "'VALUE'", "'VALUES'", "'[VALUE]'", "'VAR'", 
		"'VARBINARY'", "'VARP'", "'VARYING'", "'VERBOSELOGGING'", "'VERIFY_CLONEDB'", 
		"'VERSION'", "'VIEW'", "'VIEWS'", "'VIEW_METADATA'", "'VISIBILITY'", "'WAIT'", 
		"'WAITFOR'", "'WAIT_AT_LOW_PRIORITY'", "'WELL_FORMED_XML'", "'WHEN'", 
		"'WHERE'", "'WHILE'", "'WINDOWS'", "'WITH'", "'WITHIN'", "'WITHOUT'", 
		"'WITHOUT_ARRAY_WRAPPER'", "'WITNESS'", "'WORK'", "'WORKLOAD'", "'WRITETEXT'", 
		"'XACT_ABORT'", "'XACT_STATE'", "'XLOCK'", "'XML'", "'XMLDATA'", "'XMLNAMESPACES'", 
		"'XMLSCHEMA'", "'XML_COMPRESSION'", "'XSINIL'", "'ZONE'", "'VARCHAR'", 
		"'NVARCHAR'", null, null, null, null, "'''", null, null, null, null, null, 
		null, null, null, "'='", "'>'", "'<'", "'!'", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'&='", "'^='", "'|='", "'||'", "'.'", "'_'", "'@'", "'#'", 
		"'$'", "'('", "')'", "'['", "']'", "','", "';'", "':'", "'::'", "'*'", 
		"'/'", "'%'", "'+'", "'-'", "'~'", "'|'", "'&'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ABORT", "ABORT_AFTER_WAIT", "ABSENT", "ABSOLUTE", "ACCELERATED_DATABASE_RECOVERY", 
		"ACCENT_SENSITIVITY", "ACCESS", "ACTION", "ACTIVATION", "ACTIVE", "ADD", 
		"ADDRESS", "ADMINISTER", "AES", "AES_128", "AES_192", "AES_256", "AFFINITY", 
		"AFTER", "AGGREGATE", "ALGORITHM", "ALL", "ALLOWED", "ALLOW_CONNECTIONS", 
		"ALLOW_ENCRYPTED_VALUE_MODIFICATIONS", "ALLOW_MULTIPLE_EVENT_LOSS", "ALLOW_PAGE_LOCKS", 
		"ALLOW_ROW_LOCKS", "ALLOW_SINGLE_EVENT_LOSS", "ALLOW_SNAPSHOT_ISOLATION", 
		"ALL_CONSTRAINTS", "ALL_ERRORMSGS", "ALL_INDEXES", "ALL_LEVELS", "ALTER", 
		"ALWAYS", "AND", "ANONYMOUS", "ANSI_DEFAULTS", "ANSI_NULLS", "ANSI_NULL_DEFAULT", 
		"ANSI_NULL_DFLT_OFF", "ANSI_NULL_DFLT_ON", "ANSI_PADDING", "ANSI_WARNINGS", 
		"ANY", "APPEND", "APPLICATION", "APPLICATION_LOG", "APPLOCK_MODE", "APPLOCK_TEST", 
		"APPLY", "APP_NAME", "ARITHABORT", "ARITHIGNORE", "AS", "ASC", "ASCII", 
		"ASSEMBLY", "ASSEMBLYPROPERTY", "ASYMMETRIC", "ASYNCHRONOUS_COMMIT", "AT_KEYWORD", 
		"AUDIT", "AUDIT_GUID", "AUTHENTICATE", "AUTHENTICATION", "AUTHORIZATION", 
		"AUTO", "AUTOGROW_ALL_FILES", "AUTOGROW_SINGLE_FILE", "AUTOMATED_BACKUP_PREFERENCE", 
		"AUTOMATIC", "AUTO_CLEANUP", "AUTO_CLOSE", "AUTO_CREATE_STATISTICS", "AUTO_DROP", 
		"AUTO_SHRINK", "AUTO_UPDATE_STATISTICS", "AUTO_UPDATE_STATISTICS_ASYNC", 
		"AVAILABILITY", "AVAILABILITY_MODE", "AVG", "BACKSLASH", "BACKUP", "BACKUP_CLONEDB", 
		"BACKUP_PRIORITY", "BASE64", "BEFORE", "BEGIN", "BEGIN_DIALOG", "BETWEEN", 
		"BIGINT", "BINARY_BASE64", "BINARY_CHECKSUM", "BINARY_KEYWORD", "BINDING", 
		"BLOB_STORAGE", "BLOCK", "BLOCKERS", "BLOCKING_HIERARCHY", "BLOCKSIZE", 
		"BREAK", "BROKER", "BROKER_INSTANCE", "BROWSE", "BUFFER", "BUFFERCOUNT", 
		"BULK", "BULK_LOGGED", "BY", "CACHE", "CALLED", "CALLER", "CAP_CPU_PERCENT", 
		"CASCADE", "CASE", "CAST", "CATALOG", "CATALOG_COLLATION", "CATCH", "CERTENCODED", 
		"CERTIFICATE", "CERTPRIVATEKEY", "CERT_ID", "CHANGE", "CHANGES", "CHANGETABLE", 
		"CHANGE_RETENTION", "CHANGE_TRACKING", "CHAR", "CHARINDEX", "CHECK", "CHECKALLOC", 
		"CHECKCATALOG", "CHECKCONSTRAINTS", "CHECKDB", "CHECKFILEGROUP", "CHECKPOINT", 
		"CHECKSUM", "CHECKSUM_AGG", "CHECKTABLE", "CHECK_EXPIRATION", "CHECK_POLICY", 
		"CLASSIFIER_FUNCTION", "CLEANTABLE", "CLEANUP", "CLONEDATABASE", "CLOSE", 
		"CLUSTER", "CLUSTERED", "COALESCE", "COLLATE", "COLLECTION", "COLUMN", 
		"COLUMNPROPERTY", "COLUMNS", "COLUMNSTORE", "COLUMNSTORE_ARCHIVE", "COLUMN_ENCRYPTION_KEY", 
		"COLUMN_MASTER_KEY", "COL_LENGTH", "COL_NAME", "COMMIT", "COMMITTED", 
		"COMPATIBILITY_LEVEL", "COMPRESS", "COMPRESSION", "COMPRESSION_DELAY", 
		"COMPRESS_ALL_ROW_GROUPS", "COMPUTE", "CONCAT", "CONCAT_NULL_YIELDS_NULL", 
		"CONCAT_WS", "CONFIGURATION", "CONNECT", "CONNECTION", "CONNECTIONPROPERTY", 
		"CONSTRAINT", "CONTAINMENT", "CONTAINS", "CONTAINSTABLE", "CONTENT", "CONTEXT", 
		"CONTEXT_INFO", "CONTINUE", "CONTINUE_AFTER_ERROR", "CONTRACT", "CONTRACT_NAME", 
		"CONTROL", "CONVERSATION", "CONVERT", "COOKIE", "COPY_ONLY", "COUNT", 
		"COUNTER", "COUNT_BIG", "CPU", "CREATE", "CREATE_NEW", "CREATION_DISPOSITION", 
		"CREDENTIAL", "CROSS", "CRYPTOGRAPHIC", "CUME_DIST", "CURRENT", "CURRENT_DATE", 
		"CURRENT_REQUEST_ID", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_TRANSACTION_ID", 
		"CURRENT_USER", "CURSOR", "CURSOR_CLOSE_ON_COMMIT", "CURSOR_DEFAULT", 
		"CURSOR_STATUS", "CYCLE", "DATA", "DATABASE", "DATABASE_DEFAULT", "DATABASE_MIRRORING", 
		"DATABASE_PRINCIPAL_ID", "DATALENGTH", "DATASPACE", "DATA_COMPRESSION", 
		"DATA_PURITY", "DATA_SOURCE", "DATEADD", "DATEDIFF", "DATENAME", "DATEPART", 
		"DATE_CORRELATION_OPTIMIZATION", "DAYS", "DBCC", "DBREINDEX", "DB_CHAINING", 
		"DB_FAILOVER", "DB_ID", "DB_NAME", "DDL", "DEALLOCATE", "DECLARE", "DECOMPRESS", 
		"DECRYPTION", "DEFAULT", "DEFAULT_DATABASE", "DEFAULT_DOUBLE_QUOTE", "DEFAULT_FULLTEXT_LANGUAGE", 
		"DEFAULT_LANGUAGE", "DEFAULT_SCHEMA", "DEFINITION", "DELAY", "DELAYED_DURABILITY", 
		"DELETE", "DELETED", "DENSE_RANK", "DENY", "DEPENDENTS", "DES", "DESC", 
		"DESCRIPTION", "DESX", "DETERMINISTIC", "DHCP", "DIAGNOSTICS", "DIALOG", 
		"DIFFERENCE", "DIFFERENTIAL", "DIRECTORY_NAME", "DISABLE", "DISABLED", 
		"DISABLE_BROKER", "DISK", "DISTINCT", "DISTRIBUTED", "DISTRIBUTION", "DOCUMENT", 
		"DOLLAR_PARTITION", "DOUBLE", "DOUBLE_BACK_SLASH", "DOUBLE_FORWARD_SLASH", 
		"DROP", "DROPCLEANBUFFERS", "DROP_EXISTING", "DTC_SUPPORT", "DUMP", "DYNAMIC", 
		"ELEMENTS", "ELSE", "EMERGENCY", "EMPTY", "ENABLE", "ENABLED", "ENABLE_BROKER", 
		"ENCRYPTED", "ENCRYPTED_VALUE", "ENCRYPTION", "ENCRYPTION_TYPE", "END", 
		"ENDPOINT", "ENDPOINT_URL", "ERRLVL", "ERROR", "ERROR_BROKER_CONVERSATIONS", 
		"ERROR_LINE", "ERROR_MESSAGE", "ERROR_NUMBER", "ERROR_PROCEDURE", "ERROR_SEVERITY", 
		"ERROR_STATE", "ESCAPE", "ESTIMATEONLY", "EVENT", "EVENT_RETENTION_MODE", 
		"EVENTDATA", "EXCEPT", "EXCLUSIVE", "EXECUTABLE", "EXECUTABLE_FILE", "EXECUTE", 
		"EXIST", "EXISTS", "EXIST_SQUARE_BRACKET", "EXIT", "EXPAND", "EXPIREDATE", 
		"EXPIRY_DATE", "EXPLICIT", "EXTENDED_LOGICAL_CHECKS", "EXTENSION", "EXTERNAL", 
		"EXTERNAL_ACCESS", "FAILOVER", "FAILOVER_MODE", "FAILURE", "FAILURECONDITIONLEVEL", 
		"FAILURE_CONDITION_LEVEL", "FAIL_OPERATION", "FAN_IN", "FAST", "FAST_FORWARD", 
		"FETCH", "FILE", "FILEGROUP", "FILEGROUPPROPERTY", "FILEGROUP_ID", "FILEGROUP_NAME", 
		"FILEGROWTH", "FILENAME", "FILEPATH", "FILEPROPERTY", "FILEPROPERTYEX", 
		"FILESTREAM", "FILESTREAM_ON", "FILE_ID", "FILE_IDEX", "FILE_NAME", "FILE_SNAPSHOT", 
		"FILLFACTOR", "FILTER", "FIRST", "FIRST_VALUE", "FMTONLY", "FOLLOWING", 
		"FOR", "FORCE", "FORCED", "FORCEPLAN", "FORCESCAN", "FORCESEEK", "FORCE_FAILOVER_ALLOW_DATA_LOSS", 
		"FORCE_SERVICE_ALLOW_DATA_LOSS", "FOREIGN", "FORMAT", "FORMATMESSAGE", 
		"FORWARD_ONLY", "FREE", "FREETEXT", "FREETEXTTABLE", "FROM", "FULL", "FULLSCAN", 
		"FULLTEXT", "FULLTEXTCATALOGPROPERTY", "FULLTEXTSERVICEPROPERTY", "FUNCTION", 
		"GB", "GENERATED", "GET", "GETANCESTOR", "GETANSINULL", "GETDATE", "GETDESCENDANT", 
		"GETLEVEL", "GETREPARENTEDVALUE", "GETROOT", "GETUTCDATE", "GET_FILESTREAM_TRANSACTION_CONTEXT", 
		"GLOBAL", "GO", "GO_BATCH", "GOTO", "GOVERNOR", "GRANT", "GREATEST", "GROUP", 
		"GROUPING", "GROUPING_ID", "GROUP_MAX_REQUESTS", "HADR", "HASH", "HASHED", 
		"HAS_DBACCESS", "HAS_PERMS_BY_NAME", "HAVING", "HEALTHCHECKTIMEOUT", "HEALTH_CHECK_TIMEOUT", 
		"HEAP", "HIDDEN_KEYWORD", "HIERARCHYID", "HIGH", "HOLDLOCK", "HONOR_BROKER_PRIORITY", 
		"HOST_ID", "HOST_NAME", "HOURS", "IDENTITY", "IDENTITYCOL", "IDENTITY_INSERT", 
		"IDENTITY_VALUE", "IDENT_CURRENT", "IDENT_INCR", "IDENT_SEED", "IF", "IGNORE_CONSTRAINTS", 
		"IGNORE_DUP_KEY", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", "IGNORE_REPLICATED_TABLE_CACHE", 
		"IGNORE_TRIGGERS", "IIF", "IMMEDIATE", "IMPERSONATE", "IMPLICIT_TRANSACTIONS", 
		"IMPORTANCE", "IN", "INCLUDE", "INCLUDE_NULL_VALUES", "INCREMENT", "INCREMENTAL", 
		"INDEX", "INDEXKEY_PROPERTY", "INDEXPROPERTY", "INDEX_COL", "INFINITE", 
		"INIT", "INITIATOR", "INNER", "INPUT", "INSENSITIVE", "INSERT", "INSERTED", 
		"INSTEAD", "INT", "INTERSECT", "INTO", "IO", "IP", "IS", "ISDESCENDANTOF", 
		"ISJSON", "ISNULL", "ISNUMERIC", "ISOLATION", "IS_MEMBER", "IS_ROLEMEMBER", 
		"IS_SRVROLEMEMBER", "JOB", "JOIN", "JSON", "JSON_ARRAY", "JSON_MODIFY", 
		"JSON_OBJECT", "JSON_PATH_EXISTS", "JSON_QUERY", "JSON_VALUE", "KB", "KEEP", 
		"KEEPDEFAULTS", "KEEPFIXED", "KEEPIDENTITY", "KERBEROS", "KEY", "KEYS", 
		"KEYSET", "KEY_PATH", "KEY_SOURCE", "KEY_STORE_PROVIDER_NAME", "KILL", 
		"LAG", "LANGUAGE", "LAST", "LAST_VALUE", "LEAD", "LEAST", "LEFT", "LEN", 
		"LEVEL", "LIBRARY", "LIFETIME", "LIKE", "LINENO", "LINKED", "LINUX", "LIST", 
		"LISTENER", "LISTENER_IP", "LISTENER_PORT", "LISTENER_URL", "LOAD", "LOB_COMPACTION", 
		"LOCAL", "LOCAL_SERVICE_NAME", "LOCATION", "LOCK", "LOCK_ESCALATION", 
		"LOG", "LOGIN", "LOGINPROPERTY", "LOOP", "LOW", "LOWER", "LTRIM", "MANUAL", 
		"MARK", "MASK", "MASKED", "MASTER", "MATCHED", "MATERIALIZED", "MAX", 
		"MAXDOP", "MAXRECURSION", "MAXSIZE", "MAXTRANSFER", "MAXVALUE", "MAX_CPU_PERCENT", 
		"MAX_DISPATCH_LATENCY", "MAX_DOP", "MAX_DURATION", "MAX_EVENT_SIZE", "MAX_FILES", 
		"MAX_IOPS_PER_VOLUME", "MAX_MEMORY", "MAX_MEMORY_PERCENT", "MAX_OUTSTANDING_IO_PER_VOLUME", 
		"MAX_PROCESSES", "MAX_QUEUE_READERS", "MAX_ROLLOVER_FILES", "MAX_SIZE", 
		"MB", "MEDIADESCRIPTION", "MEDIANAME", "MEDIUM", "MEMBER", "MEMORY_OPTIMIZED_DATA", 
		"MEMORY_PARTITION_MODE", "MERGE", "MESSAGE", "MESSAGE_FORWARDING", "MESSAGE_FORWARD_SIZE", 
		"MIN", "MINUTES", "MINVALUE", "MIN_ACTIVE_ROWVERSION", "MIN_CPU_PERCENT", 
		"MIN_IOPS_PER_VOLUME", "MIN_MEMORY_PERCENT", "MIRROR", "MIRROR_ADDRESS", 
		"MIXED_PAGE_ALLOCATION", "MODE", "MODIFY", "MODIFY_SQUARE_BRACKET", "MOVE", 
		"MULTI_USER", "MUST_CHANGE", "NAME", "NATIONAL", "NCHAR", "NEGOTIATE", 
		"NESTED_TRIGGERS", "NEWID", "NEWNAME", "NEWSEQUENTIALID", "NEW_ACCOUNT", 
		"NEW_BROKER", "NEW_PASSWORD", "NEXT", "NO", "NOCHECK", "NOCOUNT", "NODES", 
		"NOEXEC", "NOEXPAND", "NOFORMAT", "NOHOLDLOCK", "NOINDEX", "NOINIT", "NONCLUSTERED", 
		"NONE", "NON_TRANSACTED_ACCESS", "NORECOMPUTE", "NORECOVERY", "NOREWIND", 
		"NOSKIP", "NOT", "NOTIFICATION", "NOTIFICATIONS", "NOUNLOAD", "NOWAIT", 
		"NO_CHECKSUM", "NO_COMPRESSION", "NO_EVENT_LOSS", "NO_INFOMSGS", "NO_QUERYSTORE", 
		"NO_STATISTICS", "NO_TRUNCATE", "NO_WAIT", "NTILE", "NTLM", "NULLIF", 
		"NULL_", "NULL_DOUBLE_QUOTE", "NUMANODE", "NUMBER", "NUMERIC_ROUNDABORT", 
		"OBJECT", "OBJECTPROPERTY", "OBJECTPROPERTYEX", "OBJECT_DEFINITION", "OBJECT_ID", 
		"OBJECT_NAME", "OBJECT_SCHEMA_NAME", "OF", "OFF", "OFFLINE", "OFFSET", 
		"OFFSETS", "OLD_ACCOUNT", "OLD_PASSWORD", "ON", "ONLINE", "ONLY", "ON_FAILURE", 
		"OPEN", "OPENDATASOURCE", "OPENJSON", "OPENQUERY", "OPENROWSET", "OPENXML", 
		"OPEN_EXISTING", "OPERATIONS", "OPTIMISTIC", "OPTIMIZE", "OPTIMIZE_FOR_SEQUENTIAL_KEY", 
		"OPTION", "OR", "ORDER", "ORIGINAL_DB_NAME", "ORIGINAL_LOGIN", "OUT", 
		"OUTER", "OUTPUT", "OVER", "OVERRIDE", "OWNER", "OWNERSHIP", "PAD_INDEX", 
		"PAGE", "PAGECOUNT", "PAGE_VERIFY", "PAGLOCK", "PARAMETERIZATION", "PARAM_NODE", 
		"PARSE", "PARSENAME", "PARSEONLY", "PARTIAL", "PARTITION", "PARTITIONS", 
		"PARTNER", "PASSWORD", "PATH", "PATINDEX", "PAUSE", "PDW_SHOWSPACEUSED", 
		"PERCENT", "PERCENTILE_CONT", "PERCENTILE_DISC", "PERCENT_RANK", "PERMISSIONS", 
		"PERMISSION_SET", "PERSISTED", "PERSIST_SAMPLE_PERCENT", "PER_CPU", "PER_DB", 
		"PER_NODE", "PHYSICAL_ONLY", "PIVOT", "PLAN", "PLATFORM", "POISON_MESSAGE_HANDLING", 
		"POLICY", "POOL", "PORT", "PRECEDING", "PRECISION", "PREDICATE", "PRIMARY", 
		"PRIMARY_ROLE", "PRINT", "PRIOR", "PRIORITY", "PRIORITY_LEVEL", "PRIVATE", 
		"PRIVATE_KEY", "PRIVILEGES", "PROC", "PROCCACHE", "PROCEDURE", "PROCEDURE_NAME", 
		"PROCESS", "PROFILE", "PROPERTY", "PROVIDER", "PROVIDER_KEY_NAME", "PUBLIC", 
		"PWDCOMPARE", "PWDENCRYPT", "PYTHON", "QUERY", "QUERY_SQUARE_BRACKET", 
		"QUERY_STORE", "QUERYTRACEON", "QUEUE", "QUEUE_DELAY", "QUOTED_IDENTIFIER", 
		"QUOTENAME", "R", "RAISERROR", "RANDOMIZED", "RANGE", "RANK", "RAW", "RC2", 
		"RC4", "RC4_128", "READ", "READCOMMITTED", "READCOMMITTEDLOCK", "READONLY", 
		"READPAST", "READTEXT", "READUNCOMMITTED", "READWRITE", "READ_COMMITTED_SNAPSHOT", 
		"READ_ONLY", "READ_ONLY_ROUTING_LIST", "READ_WRITE", "READ_WRITE_FILEGROUPS", 
		"REBUILD", "RECEIVE", "RECOMPILE", "RECONFIGURE", "RECOVERY", "RECURSIVE_TRIGGERS", 
		"REFERENCES", "REGENERATE", "RELATED_CONVERSATION", "RELATED_CONVERSATION_GROUP", 
		"RELATIVE", "REMOTE", "REMOTE_PROC_TRANSACTIONS", "REMOTE_SERVICE_NAME", 
		"REMOVE", "REORGANIZE", "REPAIR_ALLOW_DATA_LOSS", "REPAIR_FAST", "REPAIR_REBUILD", 
		"REPEATABLE", "REPEATABLEREAD", "REPLACE", "REPLICA", "REPLICATE", "REPLICATION", 
		"REQUEST_MAX_CPU_TIME_SEC", "REQUEST_MAX_MEMORY_GRANT_PERCENT", "REQUEST_MEMORY_GRANT_TIMEOUT_SEC", 
		"REQUIRED", "REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT", "RESAMPLE", 
		"RESERVE_DISK_SPACE", "RESET", "RESOURCE", "RESOURCES", "RESOURCE_MANAGER_LOCATION", 
		"RESTART", "RESTORE", "RESTRICT", "RESTRICTED_USER", "RESUMABLE", "RESUME", 
		"RETAINDAYS", "RETENTION", "RETURN", "RETURNS", "REVERSE", "REVERT", "REVOKE", 
		"REWIND", "RIGHT", "ROBUST", "ROLE", "ROLLBACK", "ROOT", "ROUND_ROBIN", 
		"ROUTE", "ROW", "ROWCOUNT", "ROWCOUNT_BIG", "ROWGUID", "ROWGUIDCOL", "ROWS", 
		"ROW_NUMBER", "RSA_1024", "RSA_2048", "RSA_3072", "RSA_4096", "RSA_512", 
		"RTRIM", "RULE", "SAFE", "SAFETY", "SAMPLE", "SAVE", "SCHEDULER", "SCHEMA", 
		"SCHEMABINDING", "SCHEMA_ID", "SCHEMA_NAME", "SCHEME", "SCOPED", "SCOPE_IDENTITY", 
		"SCRIPT", "SCROLL", "SCROLL_LOCKS", "SEARCH", "SECONDARY", "SECONDARY_ONLY", 
		"SECONDARY_ROLE", "SECONDS", "SECRET", "SECURABLES", "SECURITY", "SECURITYAUDIT", 
		"SECURITY_LOG", "SEEDING_MODE", "SELECT", "SELF", "SEMANTICKEYPHRASETABLE", 
		"SEMANTICSIMILARITYDETAILSTABLE", "SEMANTICSIMILARITYTABLE", "SEMI_SENSITIVE", 
		"SEND", "SENT", "SEQUENCE", "SEQUENCE_NUMBER", "SERIALIZABLE", "SERVER", 
		"SERVERPROPERTY", "SERVICE", "SERVICEBROKER", "SERVICE_BROKER", "SERVICE_NAME", 
		"SESSION", "SESSIONPROPERTY", "SESSION_CONTEXT", "SESSION_TIMEOUT", "SESSION_USER", 
		"SET", "SETERROR", "SETS", "SETTINGS", "SETUSER", "SHARE", "SHARED", "SHOWCONTIG", 
		"SHOWPLAN", "SHOWPLAN_ALL", "SHOWPLAN_TEXT", "SHOWPLAN_XML", "SHRINKLOG", 
		"SHUTDOWN", "SID", "SIGNATURE", "SIMPLE", "SINGLE_USER", "SIZE", "SKIP_KEYWORD", 
		"SMALLINT", "SNAPSHOT", "SOFTNUMA", "SOME", "SORT_IN_TEMPDB", "SOUNDEX", 
		"SOURCE", "SPACE_KEYWORD", "SPARSE", "SPATIAL_WINDOW_MAX_CELLS", "SPECIFICATION", 
		"SPLIT", "SQL", "SQLDUMPERFLAGS", "SQLDUMPERPATH", "SQLDUMPERTIMEOUT", 
		"SQL_VARIANT_PROPERTY", "STANDBY", "START", "STARTED", "STARTUP_STATE", 
		"START_DATE", "STATE", "STATIC", "STATISTICS", "STATISTICS_INCREMENTAL", 
		"STATISTICS_NORECOMPUTE", "STATS", "STATS_DATE", "STATS_STREAM", "STATUS", 
		"STATUSONLY", "STDEV", "STDEVP", "STOP", "STOPLIST", "STOPPED", "STOP_ON_ERROR", 
		"STR", "STRING_AGG", "STRING_ESCAPE", "STUFF", "SUBJECT", "SUBSCRIBE", 
		"SUBSCRIPTION", "SUBSTRING", "SUM", "SUPPORTED", "SUSER_ID", "SUSER_NAME", 
		"SUSER_SID", "SUSER_SNAME", "SUSPEND", "SWITCH", "SYMMETRIC", "SYNCHRONOUS_COMMIT", 
		"SYNONYM", "SYSTEM", "SYSTEM_USER", "TABLE", "TABLERESULTS", "TABLESAMPLE", 
		"TABLOCK", "TABLOCKX", "TAKE", "TAPE", "TARGET", "TARGET_RECOVERY_TIME", 
		"TB", "TCP", "TEXTIMAGE_ON", "TEXTSIZE", "THEN", "THROW", "TIES", "TIME", 
		"TIMEOUT", "TIMER", "TINYINT", "TO", "TOP", "TORN_PAGE_DETECTION", "TOSTRING", 
		"TRACE", "TRACKING", "TRACK_CAUSALITY", "TRAN", "TRANSACTION", "TRANSACTION_ID", 
		"TRANSFER", "TRANSFORM_NOISE_WORDS", "TRANSLATE", "TRIGGER", "TRIM", "TRIPLE_DES", 
		"TRIPLE_DES_3KEY", "TRUNCATE", "TRUSTWORTHY", "TRY", "TRY_CAST", "TSEQUAL", 
		"TSQL", "TWO_DIGIT_YEAR_CUTOFF", "TYPE", "TYPEPROPERTY", "TYPE_ID", "TYPE_NAME", 
		"TYPE_WARNING", "UNBOUNDED", "UNCHECKED", "UNCOMMITTED", "UNICODE", "UNION", 
		"UNIQUE", "UNKNOWN", "UNLIMITED", "UNLOCK", "UNMASK", "UNPIVOT", "UNSAFE", 
		"UOW", "UPDATE", "UPDATETEXT", "UPPER", "URL", "USE", "USED", "USER", 
		"USER_ID", "USER_NAME", "USING", "VALIDATION", "VALID_XML", "VALUE", "VALUES", 
		"VALUE_SQUARE_BRACKET", "VAR", "VARBINARY_KEYWORD", "VARP", "VARYING", 
		"VERBOSELOGGING", "VERIFY_CLONEDB", "VERSION", "VIEW", "VIEWS", "VIEW_METADATA", 
		"VISIBILITY", "WAIT", "WAITFOR", "WAIT_AT_LOW_PRIORITY", "WELL_FORMED_XML", 
		"WHEN", "WHERE", "WHILE", "WINDOWS", "WITH", "WITHIN", "WITHOUT", "WITHOUT_ARRAY_WRAPPER", 
		"WITNESS", "WORK", "WORKLOAD", "WRITETEXT", "XACT_ABORT", "XACT_STATE", 
		"XLOCK", "XML", "XMLDATA", "XMLNAMESPACES", "XMLSCHEMA", "XML_COMPRESSION", 
		"XSINIL", "ZONE", "VARCHAR", "NVARCHAR", "SPACE", "COMMENT", "LINE_COMMENT", 
		"DOUBLE_QUOTE_ID", "SINGLE_QUOTE", "SQUARE_BRACKET_ID", "LOCAL_ID", "DECIMAL", 
		"ID", "STRING", "BINARY", "FLOAT", "REAL", "EQUAL", "GREATER", "LESS", 
		"EXCLAMATION", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", 
		"MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "DOUBLE_BAR", "DOT", 
		"UNDERLINE", "AT", "SHARP", "DOLLAR", "LR_BRACKET", "RR_BRACKET", "LS_BRACKET", 
		"RS_BRACKET", "COMMA", "SEMI", "COLON", "DOUBLE_COLON", "STAR", "DIVIDE", 
		"MODULE", "PLUS", "MINUS", "BIT_NOT", "BIT_OR", "BIT_AND", "BIT_XOR", 
		"DISK_DRIVE", "IPV4_ADDR", "IPV6_ADDR", "NOEXEol", "DOLLAR_ACTION", "YEAR", 
		"YEAR_ABBR", "QUARTER", "QUARTER_ABBR", "MONTH", "MONTH_ABBR", "DAY", 
		"DAY_ABBR", "WEEK", "WEEK_ABBR", "HOUR", "HOUR_ABBR", "MINUTE", "MINUTE_ABBR", 
		"SECOND", "SECOND_ABBR", "MILLISECOND", "MILLISECOND_ABBR", "DAYOFYEAR", 
		"DAYOFYEAR_ABBR", "MICROSECOND", "MICROSECOND_ABBR", "NANOSECOND", "NANOSECOND_ABBR", 
		"WEEKDAY", "WEEKDAY_ABBR", "TZOFFSET", "TZOFFSET_ABBR", "ISO_WEEK", "ISO_WEEK_ABBR", 
		"DATABASEPROPERTYEX", "NOLOCK", "ROWLOCK", "UPDLOCK"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TSqlParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public TSqlParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class Tsql_fileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(TSqlParser.Eof, 0); }
		public BatchContext[] batch() {
			return GetRuleContexts<BatchContext>();
		}
		public BatchContext batch(int i) {
			return GetRuleContext<BatchContext>(i);
		}
		public Execute_body_batchContext execute_body_batch() {
			return GetRuleContext<Execute_body_batchContext>(0);
		}
		public Go_batch_statementContext[] go_batch_statement() {
			return GetRuleContexts<Go_batch_statementContext>();
		}
		public Go_batch_statementContext go_batch_statement(int i) {
			return GetRuleContext<Go_batch_statementContext>(i);
		}
		public Tsql_fileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsql_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTsql_file(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTsql_file(this);
		}
	}

	[RuleVersion(0)]
	public Tsql_fileContext tsql_file() {
		Tsql_fileContext _localctx = new Tsql_fileContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_tsql_file);
		try {
			int _alt;
			State = 1172;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1159;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1156; batch();
						}
						} 
					}
					State = 1161;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
				}
				State = 1162; Match(Eof);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1163; execute_body_batch();
				State = 1167;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1164; go_batch_statement();
						}
						} 
					}
					State = 1169;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
				}
				State = 1170; Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BatchContext : ParserRuleContext {
		public Go_batch_statementContext go_batch_statement() {
			return GetRuleContext<Go_batch_statementContext>(0);
		}
		public Execute_body_batchContext execute_body_batch() {
			return GetRuleContext<Execute_body_batchContext>(0);
		}
		public Go_statementContext[] go_statement() {
			return GetRuleContexts<Go_statementContext>();
		}
		public Go_statementContext go_statement(int i) {
			return GetRuleContext<Go_statementContext>(i);
		}
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public Batch_level_statementContext batch_level_statement() {
			return GetRuleContext<Batch_level_statementContext>(0);
		}
		public BatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_batch; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBatch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBatch(this);
		}
	}

	[RuleVersion(0)]
	public BatchContext batch() {
		BatchContext _localctx = new BatchContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_batch);
		try {
			int _alt;
			State = 1200;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1174; go_batch_statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1176;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
				case 1:
					{
					State = 1175; execute_body_batch();
					}
					break;
				}
				State = 1184;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
				case 1:
					{
					State = 1178; go_batch_statement();
					}
					break;

				case 2:
					{
					State = 1180;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 1179; sql_clauses();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1182;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;
				}
				State = 1189;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1186; go_statement();
						}
						} 
					}
					State = 1191;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1192; batch_level_statement();
				State = 1196;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1193; go_statement();
						}
						} 
					}
					State = 1198;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1199; go_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Batch_level_statementContext : ParserRuleContext {
		public Create_or_alter_functionContext create_or_alter_function() {
			return GetRuleContext<Create_or_alter_functionContext>(0);
		}
		public Create_or_alter_procedureContext create_or_alter_procedure() {
			return GetRuleContext<Create_or_alter_procedureContext>(0);
		}
		public Create_or_alter_triggerContext create_or_alter_trigger() {
			return GetRuleContext<Create_or_alter_triggerContext>(0);
		}
		public Create_viewContext create_view() {
			return GetRuleContext<Create_viewContext>(0);
		}
		public Batch_level_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_batch_level_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBatch_level_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBatch_level_statement(this);
		}
	}

	[RuleVersion(0)]
	public Batch_level_statementContext batch_level_statement() {
		Batch_level_statementContext _localctx = new Batch_level_statementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_batch_level_statement);
		try {
			State = 1206;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1202; create_or_alter_function();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1203; create_or_alter_procedure();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1204; create_or_alter_trigger();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1205; create_view();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_clausesContext : ParserRuleContext {
		public Dml_clauseContext dml_clause() {
			return GetRuleContext<Dml_clauseContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Cfl_statementContext cfl_statement() {
			return GetRuleContext<Cfl_statementContext>(0);
		}
		public Another_statementContext another_statement() {
			return GetRuleContext<Another_statementContext>(0);
		}
		public Ddl_clauseContext ddl_clause() {
			return GetRuleContext<Ddl_clauseContext>(0);
		}
		public Dbcc_clauseContext dbcc_clause() {
			return GetRuleContext<Dbcc_clauseContext>(0);
		}
		public Receive_statementContext receive_statement() {
			return GetRuleContext<Receive_statementContext>(0);
		}
		public Backup_statementContext backup_statement() {
			return GetRuleContext<Backup_statementContext>(0);
		}
		public Sql_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_clauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSql_clauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSql_clauses(this);
		}
	}

	[RuleVersion(0)]
	public Sql_clausesContext sql_clauses() {
		Sql_clausesContext _localctx = new Sql_clausesContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_sql_clauses);
		try {
			State = 1237;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1208; dml_clause();
				State = 1210;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
				case 1:
					{
					State = 1209; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1212; cfl_statement();
				State = 1214;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
				case 1:
					{
					State = 1213; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1216; another_statement();
				State = 1218;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
				case 1:
					{
					State = 1217; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1220; ddl_clause();
				State = 1222;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
				case 1:
					{
					State = 1221; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1224; dbcc_clause();
				State = 1226;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
				case 1:
					{
					State = 1225; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1228; receive_statement();
				State = 1230;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
				case 1:
					{
					State = 1229; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1232; backup_statement();
				State = 1234;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
				case 1:
					{
					State = 1233; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1236; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_clauseContext : ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return GetRuleContext<Merge_statementContext>(0);
		}
		public Delete_statementContext delete_statement() {
			return GetRuleContext<Delete_statementContext>(0);
		}
		public Insert_statementContext insert_statement() {
			return GetRuleContext<Insert_statementContext>(0);
		}
		public Select_statement_standaloneContext select_statement_standalone() {
			return GetRuleContext<Select_statement_standaloneContext>(0);
		}
		public Update_statementContext update_statement() {
			return GetRuleContext<Update_statementContext>(0);
		}
		public Dml_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDml_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDml_clause(this);
		}
	}

	[RuleVersion(0)]
	public Dml_clauseContext dml_clause() {
		Dml_clauseContext _localctx = new Dml_clauseContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_dml_clause);
		try {
			State = 1244;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1239; merge_statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1240; delete_statement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1241; insert_statement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1242; select_statement_standalone();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1243; update_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_clauseContext : ParserRuleContext {
		public Alter_application_roleContext alter_application_role() {
			return GetRuleContext<Alter_application_roleContext>(0);
		}
		public Alter_assemblyContext alter_assembly() {
			return GetRuleContext<Alter_assemblyContext>(0);
		}
		public Alter_asymmetric_keyContext alter_asymmetric_key() {
			return GetRuleContext<Alter_asymmetric_keyContext>(0);
		}
		public Alter_authorizationContext alter_authorization() {
			return GetRuleContext<Alter_authorizationContext>(0);
		}
		public Alter_authorization_for_azure_dwContext alter_authorization_for_azure_dw() {
			return GetRuleContext<Alter_authorization_for_azure_dwContext>(0);
		}
		public Alter_authorization_for_parallel_dwContext alter_authorization_for_parallel_dw() {
			return GetRuleContext<Alter_authorization_for_parallel_dwContext>(0);
		}
		public Alter_authorization_for_sql_databaseContext alter_authorization_for_sql_database() {
			return GetRuleContext<Alter_authorization_for_sql_databaseContext>(0);
		}
		public Alter_availability_groupContext alter_availability_group() {
			return GetRuleContext<Alter_availability_groupContext>(0);
		}
		public Alter_certificateContext alter_certificate() {
			return GetRuleContext<Alter_certificateContext>(0);
		}
		public Alter_column_encryption_keyContext alter_column_encryption_key() {
			return GetRuleContext<Alter_column_encryption_keyContext>(0);
		}
		public Alter_credentialContext alter_credential() {
			return GetRuleContext<Alter_credentialContext>(0);
		}
		public Alter_cryptographic_providerContext alter_cryptographic_provider() {
			return GetRuleContext<Alter_cryptographic_providerContext>(0);
		}
		public Alter_databaseContext alter_database() {
			return GetRuleContext<Alter_databaseContext>(0);
		}
		public Alter_db_roleContext alter_db_role() {
			return GetRuleContext<Alter_db_roleContext>(0);
		}
		public Alter_endpointContext alter_endpoint() {
			return GetRuleContext<Alter_endpointContext>(0);
		}
		public Create_or_alter_event_sessionContext create_or_alter_event_session() {
			return GetRuleContext<Create_or_alter_event_sessionContext>(0);
		}
		public Alter_external_data_sourceContext alter_external_data_source() {
			return GetRuleContext<Alter_external_data_sourceContext>(0);
		}
		public Alter_external_libraryContext alter_external_library() {
			return GetRuleContext<Alter_external_libraryContext>(0);
		}
		public Alter_external_resource_poolContext alter_external_resource_pool() {
			return GetRuleContext<Alter_external_resource_poolContext>(0);
		}
		public Alter_fulltext_catalogContext alter_fulltext_catalog() {
			return GetRuleContext<Alter_fulltext_catalogContext>(0);
		}
		public Alter_fulltext_stoplistContext alter_fulltext_stoplist() {
			return GetRuleContext<Alter_fulltext_stoplistContext>(0);
		}
		public Alter_indexContext alter_index() {
			return GetRuleContext<Alter_indexContext>(0);
		}
		public Alter_login_azure_sqlContext alter_login_azure_sql() {
			return GetRuleContext<Alter_login_azure_sqlContext>(0);
		}
		public Alter_login_azure_sql_dw_and_pdwContext alter_login_azure_sql_dw_and_pdw() {
			return GetRuleContext<Alter_login_azure_sql_dw_and_pdwContext>(0);
		}
		public Alter_login_sql_serverContext alter_login_sql_server() {
			return GetRuleContext<Alter_login_sql_serverContext>(0);
		}
		public Alter_master_key_azure_sqlContext alter_master_key_azure_sql() {
			return GetRuleContext<Alter_master_key_azure_sqlContext>(0);
		}
		public Alter_master_key_sql_serverContext alter_master_key_sql_server() {
			return GetRuleContext<Alter_master_key_sql_serverContext>(0);
		}
		public Alter_message_typeContext alter_message_type() {
			return GetRuleContext<Alter_message_typeContext>(0);
		}
		public Alter_partition_functionContext alter_partition_function() {
			return GetRuleContext<Alter_partition_functionContext>(0);
		}
		public Alter_partition_schemeContext alter_partition_scheme() {
			return GetRuleContext<Alter_partition_schemeContext>(0);
		}
		public Alter_remote_service_bindingContext alter_remote_service_binding() {
			return GetRuleContext<Alter_remote_service_bindingContext>(0);
		}
		public Alter_resource_governorContext alter_resource_governor() {
			return GetRuleContext<Alter_resource_governorContext>(0);
		}
		public Alter_schema_azure_sql_dw_and_pdwContext alter_schema_azure_sql_dw_and_pdw() {
			return GetRuleContext<Alter_schema_azure_sql_dw_and_pdwContext>(0);
		}
		public Alter_schema_sqlContext alter_schema_sql() {
			return GetRuleContext<Alter_schema_sqlContext>(0);
		}
		public Alter_sequenceContext alter_sequence() {
			return GetRuleContext<Alter_sequenceContext>(0);
		}
		public Alter_server_auditContext alter_server_audit() {
			return GetRuleContext<Alter_server_auditContext>(0);
		}
		public Alter_server_audit_specificationContext alter_server_audit_specification() {
			return GetRuleContext<Alter_server_audit_specificationContext>(0);
		}
		public Alter_server_configurationContext alter_server_configuration() {
			return GetRuleContext<Alter_server_configurationContext>(0);
		}
		public Alter_server_roleContext alter_server_role() {
			return GetRuleContext<Alter_server_roleContext>(0);
		}
		public Alter_server_role_pdwContext alter_server_role_pdw() {
			return GetRuleContext<Alter_server_role_pdwContext>(0);
		}
		public Alter_serviceContext alter_service() {
			return GetRuleContext<Alter_serviceContext>(0);
		}
		public Alter_service_master_keyContext alter_service_master_key() {
			return GetRuleContext<Alter_service_master_keyContext>(0);
		}
		public Alter_symmetric_keyContext alter_symmetric_key() {
			return GetRuleContext<Alter_symmetric_keyContext>(0);
		}
		public Alter_tableContext alter_table() {
			return GetRuleContext<Alter_tableContext>(0);
		}
		public Alter_userContext alter_user() {
			return GetRuleContext<Alter_userContext>(0);
		}
		public Alter_user_azure_sqlContext alter_user_azure_sql() {
			return GetRuleContext<Alter_user_azure_sqlContext>(0);
		}
		public Alter_workload_groupContext alter_workload_group() {
			return GetRuleContext<Alter_workload_groupContext>(0);
		}
		public Create_application_roleContext create_application_role() {
			return GetRuleContext<Create_application_roleContext>(0);
		}
		public Create_assemblyContext create_assembly() {
			return GetRuleContext<Create_assemblyContext>(0);
		}
		public Create_asymmetric_keyContext create_asymmetric_key() {
			return GetRuleContext<Create_asymmetric_keyContext>(0);
		}
		public Create_column_encryption_keyContext create_column_encryption_key() {
			return GetRuleContext<Create_column_encryption_keyContext>(0);
		}
		public Create_column_master_keyContext create_column_master_key() {
			return GetRuleContext<Create_column_master_keyContext>(0);
		}
		public Create_credentialContext create_credential() {
			return GetRuleContext<Create_credentialContext>(0);
		}
		public Create_cryptographic_providerContext create_cryptographic_provider() {
			return GetRuleContext<Create_cryptographic_providerContext>(0);
		}
		public Create_databaseContext create_database() {
			return GetRuleContext<Create_databaseContext>(0);
		}
		public Create_db_roleContext create_db_role() {
			return GetRuleContext<Create_db_roleContext>(0);
		}
		public Create_event_notificationContext create_event_notification() {
			return GetRuleContext<Create_event_notificationContext>(0);
		}
		public Create_external_libraryContext create_external_library() {
			return GetRuleContext<Create_external_libraryContext>(0);
		}
		public Create_external_resource_poolContext create_external_resource_pool() {
			return GetRuleContext<Create_external_resource_poolContext>(0);
		}
		public Create_fulltext_catalogContext create_fulltext_catalog() {
			return GetRuleContext<Create_fulltext_catalogContext>(0);
		}
		public Create_fulltext_stoplistContext create_fulltext_stoplist() {
			return GetRuleContext<Create_fulltext_stoplistContext>(0);
		}
		public Create_indexContext create_index() {
			return GetRuleContext<Create_indexContext>(0);
		}
		public Create_columnstore_indexContext create_columnstore_index() {
			return GetRuleContext<Create_columnstore_indexContext>(0);
		}
		public Create_nonclustered_columnstore_indexContext create_nonclustered_columnstore_index() {
			return GetRuleContext<Create_nonclustered_columnstore_indexContext>(0);
		}
		public Create_login_azure_sqlContext create_login_azure_sql() {
			return GetRuleContext<Create_login_azure_sqlContext>(0);
		}
		public Create_login_pdwContext create_login_pdw() {
			return GetRuleContext<Create_login_pdwContext>(0);
		}
		public Create_login_sql_serverContext create_login_sql_server() {
			return GetRuleContext<Create_login_sql_serverContext>(0);
		}
		public Create_master_key_azure_sqlContext create_master_key_azure_sql() {
			return GetRuleContext<Create_master_key_azure_sqlContext>(0);
		}
		public Create_master_key_sql_serverContext create_master_key_sql_server() {
			return GetRuleContext<Create_master_key_sql_serverContext>(0);
		}
		public Create_or_alter_broker_priorityContext create_or_alter_broker_priority() {
			return GetRuleContext<Create_or_alter_broker_priorityContext>(0);
		}
		public Create_remote_service_bindingContext create_remote_service_binding() {
			return GetRuleContext<Create_remote_service_bindingContext>(0);
		}
		public Create_resource_poolContext create_resource_pool() {
			return GetRuleContext<Create_resource_poolContext>(0);
		}
		public Create_routeContext create_route() {
			return GetRuleContext<Create_routeContext>(0);
		}
		public Create_ruleContext create_rule() {
			return GetRuleContext<Create_ruleContext>(0);
		}
		public Create_schemaContext create_schema() {
			return GetRuleContext<Create_schemaContext>(0);
		}
		public Create_schema_azure_sql_dw_and_pdwContext create_schema_azure_sql_dw_and_pdw() {
			return GetRuleContext<Create_schema_azure_sql_dw_and_pdwContext>(0);
		}
		public Create_search_property_listContext create_search_property_list() {
			return GetRuleContext<Create_search_property_listContext>(0);
		}
		public Create_security_policyContext create_security_policy() {
			return GetRuleContext<Create_security_policyContext>(0);
		}
		public Create_sequenceContext create_sequence() {
			return GetRuleContext<Create_sequenceContext>(0);
		}
		public Create_server_auditContext create_server_audit() {
			return GetRuleContext<Create_server_auditContext>(0);
		}
		public Create_server_audit_specificationContext create_server_audit_specification() {
			return GetRuleContext<Create_server_audit_specificationContext>(0);
		}
		public Create_server_roleContext create_server_role() {
			return GetRuleContext<Create_server_roleContext>(0);
		}
		public Create_serviceContext create_service() {
			return GetRuleContext<Create_serviceContext>(0);
		}
		public Create_statisticsContext create_statistics() {
			return GetRuleContext<Create_statisticsContext>(0);
		}
		public Create_synonymContext create_synonym() {
			return GetRuleContext<Create_synonymContext>(0);
		}
		public Create_tableContext create_table() {
			return GetRuleContext<Create_tableContext>(0);
		}
		public Create_typeContext create_type() {
			return GetRuleContext<Create_typeContext>(0);
		}
		public Create_userContext create_user() {
			return GetRuleContext<Create_userContext>(0);
		}
		public Create_user_azure_sql_dwContext create_user_azure_sql_dw() {
			return GetRuleContext<Create_user_azure_sql_dwContext>(0);
		}
		public Create_workload_groupContext create_workload_group() {
			return GetRuleContext<Create_workload_groupContext>(0);
		}
		public Create_xml_indexContext create_xml_index() {
			return GetRuleContext<Create_xml_indexContext>(0);
		}
		public Create_xml_schema_collectionContext create_xml_schema_collection() {
			return GetRuleContext<Create_xml_schema_collectionContext>(0);
		}
		public Create_partition_functionContext create_partition_function() {
			return GetRuleContext<Create_partition_functionContext>(0);
		}
		public Create_partition_schemeContext create_partition_scheme() {
			return GetRuleContext<Create_partition_schemeContext>(0);
		}
		public Drop_aggregateContext drop_aggregate() {
			return GetRuleContext<Drop_aggregateContext>(0);
		}
		public Drop_application_roleContext drop_application_role() {
			return GetRuleContext<Drop_application_roleContext>(0);
		}
		public Drop_assemblyContext drop_assembly() {
			return GetRuleContext<Drop_assemblyContext>(0);
		}
		public Drop_asymmetric_keyContext drop_asymmetric_key() {
			return GetRuleContext<Drop_asymmetric_keyContext>(0);
		}
		public Drop_availability_groupContext drop_availability_group() {
			return GetRuleContext<Drop_availability_groupContext>(0);
		}
		public Drop_broker_priorityContext drop_broker_priority() {
			return GetRuleContext<Drop_broker_priorityContext>(0);
		}
		public Drop_certificateContext drop_certificate() {
			return GetRuleContext<Drop_certificateContext>(0);
		}
		public Drop_column_encryption_keyContext drop_column_encryption_key() {
			return GetRuleContext<Drop_column_encryption_keyContext>(0);
		}
		public Drop_column_master_keyContext drop_column_master_key() {
			return GetRuleContext<Drop_column_master_keyContext>(0);
		}
		public Drop_contractContext drop_contract() {
			return GetRuleContext<Drop_contractContext>(0);
		}
		public Drop_credentialContext drop_credential() {
			return GetRuleContext<Drop_credentialContext>(0);
		}
		public Drop_cryptograhic_providerContext drop_cryptograhic_provider() {
			return GetRuleContext<Drop_cryptograhic_providerContext>(0);
		}
		public Drop_databaseContext drop_database() {
			return GetRuleContext<Drop_databaseContext>(0);
		}
		public Drop_database_audit_specificationContext drop_database_audit_specification() {
			return GetRuleContext<Drop_database_audit_specificationContext>(0);
		}
		public Drop_database_encryption_keyContext drop_database_encryption_key() {
			return GetRuleContext<Drop_database_encryption_keyContext>(0);
		}
		public Drop_database_scoped_credentialContext drop_database_scoped_credential() {
			return GetRuleContext<Drop_database_scoped_credentialContext>(0);
		}
		public Drop_db_roleContext drop_db_role() {
			return GetRuleContext<Drop_db_roleContext>(0);
		}
		public Drop_defaultContext drop_default() {
			return GetRuleContext<Drop_defaultContext>(0);
		}
		public Drop_endpointContext drop_endpoint() {
			return GetRuleContext<Drop_endpointContext>(0);
		}
		public Drop_event_notificationsContext drop_event_notifications() {
			return GetRuleContext<Drop_event_notificationsContext>(0);
		}
		public Drop_event_sessionContext drop_event_session() {
			return GetRuleContext<Drop_event_sessionContext>(0);
		}
		public Drop_external_data_sourceContext drop_external_data_source() {
			return GetRuleContext<Drop_external_data_sourceContext>(0);
		}
		public Drop_external_file_formatContext drop_external_file_format() {
			return GetRuleContext<Drop_external_file_formatContext>(0);
		}
		public Drop_external_libraryContext drop_external_library() {
			return GetRuleContext<Drop_external_libraryContext>(0);
		}
		public Drop_external_resource_poolContext drop_external_resource_pool() {
			return GetRuleContext<Drop_external_resource_poolContext>(0);
		}
		public Drop_external_tableContext drop_external_table() {
			return GetRuleContext<Drop_external_tableContext>(0);
		}
		public Drop_fulltext_catalogContext drop_fulltext_catalog() {
			return GetRuleContext<Drop_fulltext_catalogContext>(0);
		}
		public Drop_fulltext_indexContext drop_fulltext_index() {
			return GetRuleContext<Drop_fulltext_indexContext>(0);
		}
		public Drop_fulltext_stoplistContext drop_fulltext_stoplist() {
			return GetRuleContext<Drop_fulltext_stoplistContext>(0);
		}
		public Drop_functionContext drop_function() {
			return GetRuleContext<Drop_functionContext>(0);
		}
		public Drop_indexContext drop_index() {
			return GetRuleContext<Drop_indexContext>(0);
		}
		public Drop_loginContext drop_login() {
			return GetRuleContext<Drop_loginContext>(0);
		}
		public Drop_master_keyContext drop_master_key() {
			return GetRuleContext<Drop_master_keyContext>(0);
		}
		public Drop_message_typeContext drop_message_type() {
			return GetRuleContext<Drop_message_typeContext>(0);
		}
		public Drop_partition_functionContext drop_partition_function() {
			return GetRuleContext<Drop_partition_functionContext>(0);
		}
		public Drop_partition_schemeContext drop_partition_scheme() {
			return GetRuleContext<Drop_partition_schemeContext>(0);
		}
		public Drop_procedureContext drop_procedure() {
			return GetRuleContext<Drop_procedureContext>(0);
		}
		public Drop_queueContext drop_queue() {
			return GetRuleContext<Drop_queueContext>(0);
		}
		public Drop_remote_service_bindingContext drop_remote_service_binding() {
			return GetRuleContext<Drop_remote_service_bindingContext>(0);
		}
		public Drop_resource_poolContext drop_resource_pool() {
			return GetRuleContext<Drop_resource_poolContext>(0);
		}
		public Drop_routeContext drop_route() {
			return GetRuleContext<Drop_routeContext>(0);
		}
		public Drop_ruleContext drop_rule() {
			return GetRuleContext<Drop_ruleContext>(0);
		}
		public Drop_schemaContext drop_schema() {
			return GetRuleContext<Drop_schemaContext>(0);
		}
		public Drop_search_property_listContext drop_search_property_list() {
			return GetRuleContext<Drop_search_property_listContext>(0);
		}
		public Drop_security_policyContext drop_security_policy() {
			return GetRuleContext<Drop_security_policyContext>(0);
		}
		public Drop_sequenceContext drop_sequence() {
			return GetRuleContext<Drop_sequenceContext>(0);
		}
		public Drop_server_auditContext drop_server_audit() {
			return GetRuleContext<Drop_server_auditContext>(0);
		}
		public Drop_server_audit_specificationContext drop_server_audit_specification() {
			return GetRuleContext<Drop_server_audit_specificationContext>(0);
		}
		public Drop_server_roleContext drop_server_role() {
			return GetRuleContext<Drop_server_roleContext>(0);
		}
		public Drop_serviceContext drop_service() {
			return GetRuleContext<Drop_serviceContext>(0);
		}
		public Drop_signatureContext drop_signature() {
			return GetRuleContext<Drop_signatureContext>(0);
		}
		public Drop_statisticsContext drop_statistics() {
			return GetRuleContext<Drop_statisticsContext>(0);
		}
		public Drop_statistics_name_azure_dw_and_pdwContext drop_statistics_name_azure_dw_and_pdw() {
			return GetRuleContext<Drop_statistics_name_azure_dw_and_pdwContext>(0);
		}
		public Drop_symmetric_keyContext drop_symmetric_key() {
			return GetRuleContext<Drop_symmetric_keyContext>(0);
		}
		public Drop_synonymContext drop_synonym() {
			return GetRuleContext<Drop_synonymContext>(0);
		}
		public Drop_tableContext drop_table() {
			return GetRuleContext<Drop_tableContext>(0);
		}
		public Drop_triggerContext drop_trigger() {
			return GetRuleContext<Drop_triggerContext>(0);
		}
		public Drop_typeContext drop_type() {
			return GetRuleContext<Drop_typeContext>(0);
		}
		public Drop_userContext drop_user() {
			return GetRuleContext<Drop_userContext>(0);
		}
		public Drop_viewContext drop_view() {
			return GetRuleContext<Drop_viewContext>(0);
		}
		public Drop_workload_groupContext drop_workload_group() {
			return GetRuleContext<Drop_workload_groupContext>(0);
		}
		public Drop_xml_schema_collectionContext drop_xml_schema_collection() {
			return GetRuleContext<Drop_xml_schema_collectionContext>(0);
		}
		public Disable_triggerContext disable_trigger() {
			return GetRuleContext<Disable_triggerContext>(0);
		}
		public Enable_triggerContext enable_trigger() {
			return GetRuleContext<Enable_triggerContext>(0);
		}
		public Lock_tableContext lock_table() {
			return GetRuleContext<Lock_tableContext>(0);
		}
		public Truncate_tableContext truncate_table() {
			return GetRuleContext<Truncate_tableContext>(0);
		}
		public Update_statisticsContext update_statistics() {
			return GetRuleContext<Update_statisticsContext>(0);
		}
		public Ddl_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDdl_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDdl_clause(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_clauseContext ddl_clause() {
		Ddl_clauseContext _localctx = new Ddl_clauseContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_ddl_clause);
		try {
			State = 1407;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1246; alter_application_role();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1247; alter_assembly();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1248; alter_asymmetric_key();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1249; alter_authorization();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1250; alter_authorization_for_azure_dw();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1251; alter_authorization_for_parallel_dw();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1252; alter_authorization_for_sql_database();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1253; alter_availability_group();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1254; alter_certificate();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1255; alter_column_encryption_key();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1256; alter_credential();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1257; alter_cryptographic_provider();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1258; alter_database();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1259; alter_db_role();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1260; alter_endpoint();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1261; create_or_alter_event_session();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1262; alter_external_data_source();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1263; alter_external_library();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1264; alter_external_resource_pool();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1265; alter_fulltext_catalog();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1266; alter_fulltext_stoplist();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1267; alter_index();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1268; alter_login_azure_sql();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1269; alter_login_azure_sql_dw_and_pdw();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1270; alter_login_sql_server();
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1271; alter_master_key_azure_sql();
				}
				break;

			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1272; alter_master_key_sql_server();
				}
				break;

			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1273; alter_message_type();
				}
				break;

			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1274; alter_partition_function();
				}
				break;

			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1275; alter_partition_scheme();
				}
				break;

			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 1276; alter_remote_service_binding();
				}
				break;

			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 1277; alter_resource_governor();
				}
				break;

			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 1278; alter_schema_azure_sql_dw_and_pdw();
				}
				break;

			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 1279; alter_schema_sql();
				}
				break;

			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 1280; alter_sequence();
				}
				break;

			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 1281; alter_server_audit();
				}
				break;

			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 1282; alter_server_audit_specification();
				}
				break;

			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 1283; alter_server_configuration();
				}
				break;

			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 1284; alter_server_role();
				}
				break;

			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 1285; alter_server_role_pdw();
				}
				break;

			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 1286; alter_service();
				}
				break;

			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 1287; alter_service_master_key();
				}
				break;

			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 1288; alter_symmetric_key();
				}
				break;

			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 1289; alter_table();
				}
				break;

			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 1290; alter_user();
				}
				break;

			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 1291; alter_user_azure_sql();
				}
				break;

			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 1292; alter_workload_group();
				}
				break;

			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 1293; create_application_role();
				}
				break;

			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 1294; create_assembly();
				}
				break;

			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 1295; create_asymmetric_key();
				}
				break;

			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 1296; create_column_encryption_key();
				}
				break;

			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 1297; create_column_master_key();
				}
				break;

			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 1298; create_credential();
				}
				break;

			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 1299; create_cryptographic_provider();
				}
				break;

			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 1300; create_database();
				}
				break;

			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 1301; create_db_role();
				}
				break;

			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 1302; create_event_notification();
				}
				break;

			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 1303; create_external_library();
				}
				break;

			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 1304; create_external_resource_pool();
				}
				break;

			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 1305; create_fulltext_catalog();
				}
				break;

			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 1306; create_fulltext_stoplist();
				}
				break;

			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 1307; create_index();
				}
				break;

			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 1308; create_columnstore_index();
				}
				break;

			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 1309; create_nonclustered_columnstore_index();
				}
				break;

			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 1310; create_login_azure_sql();
				}
				break;

			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 1311; create_login_pdw();
				}
				break;

			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 1312; create_login_sql_server();
				}
				break;

			case 68:
				EnterOuterAlt(_localctx, 68);
				{
				State = 1313; create_master_key_azure_sql();
				}
				break;

			case 69:
				EnterOuterAlt(_localctx, 69);
				{
				State = 1314; create_master_key_sql_server();
				}
				break;

			case 70:
				EnterOuterAlt(_localctx, 70);
				{
				State = 1315; create_or_alter_broker_priority();
				}
				break;

			case 71:
				EnterOuterAlt(_localctx, 71);
				{
				State = 1316; create_remote_service_binding();
				}
				break;

			case 72:
				EnterOuterAlt(_localctx, 72);
				{
				State = 1317; create_resource_pool();
				}
				break;

			case 73:
				EnterOuterAlt(_localctx, 73);
				{
				State = 1318; create_route();
				}
				break;

			case 74:
				EnterOuterAlt(_localctx, 74);
				{
				State = 1319; create_rule();
				}
				break;

			case 75:
				EnterOuterAlt(_localctx, 75);
				{
				State = 1320; create_schema();
				}
				break;

			case 76:
				EnterOuterAlt(_localctx, 76);
				{
				State = 1321; create_schema_azure_sql_dw_and_pdw();
				}
				break;

			case 77:
				EnterOuterAlt(_localctx, 77);
				{
				State = 1322; create_search_property_list();
				}
				break;

			case 78:
				EnterOuterAlt(_localctx, 78);
				{
				State = 1323; create_security_policy();
				}
				break;

			case 79:
				EnterOuterAlt(_localctx, 79);
				{
				State = 1324; create_sequence();
				}
				break;

			case 80:
				EnterOuterAlt(_localctx, 80);
				{
				State = 1325; create_server_audit();
				}
				break;

			case 81:
				EnterOuterAlt(_localctx, 81);
				{
				State = 1326; create_server_audit_specification();
				}
				break;

			case 82:
				EnterOuterAlt(_localctx, 82);
				{
				State = 1327; create_server_role();
				}
				break;

			case 83:
				EnterOuterAlt(_localctx, 83);
				{
				State = 1328; create_service();
				}
				break;

			case 84:
				EnterOuterAlt(_localctx, 84);
				{
				State = 1329; create_statistics();
				}
				break;

			case 85:
				EnterOuterAlt(_localctx, 85);
				{
				State = 1330; create_synonym();
				}
				break;

			case 86:
				EnterOuterAlt(_localctx, 86);
				{
				State = 1331; create_table();
				}
				break;

			case 87:
				EnterOuterAlt(_localctx, 87);
				{
				State = 1332; create_type();
				}
				break;

			case 88:
				EnterOuterAlt(_localctx, 88);
				{
				State = 1333; create_user();
				}
				break;

			case 89:
				EnterOuterAlt(_localctx, 89);
				{
				State = 1334; create_user_azure_sql_dw();
				}
				break;

			case 90:
				EnterOuterAlt(_localctx, 90);
				{
				State = 1335; create_workload_group();
				}
				break;

			case 91:
				EnterOuterAlt(_localctx, 91);
				{
				State = 1336; create_xml_index();
				}
				break;

			case 92:
				EnterOuterAlt(_localctx, 92);
				{
				State = 1337; create_xml_schema_collection();
				}
				break;

			case 93:
				EnterOuterAlt(_localctx, 93);
				{
				State = 1338; create_partition_function();
				}
				break;

			case 94:
				EnterOuterAlt(_localctx, 94);
				{
				State = 1339; create_partition_scheme();
				}
				break;

			case 95:
				EnterOuterAlt(_localctx, 95);
				{
				State = 1340; drop_aggregate();
				}
				break;

			case 96:
				EnterOuterAlt(_localctx, 96);
				{
				State = 1341; drop_application_role();
				}
				break;

			case 97:
				EnterOuterAlt(_localctx, 97);
				{
				State = 1342; drop_assembly();
				}
				break;

			case 98:
				EnterOuterAlt(_localctx, 98);
				{
				State = 1343; drop_asymmetric_key();
				}
				break;

			case 99:
				EnterOuterAlt(_localctx, 99);
				{
				State = 1344; drop_availability_group();
				}
				break;

			case 100:
				EnterOuterAlt(_localctx, 100);
				{
				State = 1345; drop_broker_priority();
				}
				break;

			case 101:
				EnterOuterAlt(_localctx, 101);
				{
				State = 1346; drop_certificate();
				}
				break;

			case 102:
				EnterOuterAlt(_localctx, 102);
				{
				State = 1347; drop_column_encryption_key();
				}
				break;

			case 103:
				EnterOuterAlt(_localctx, 103);
				{
				State = 1348; drop_column_master_key();
				}
				break;

			case 104:
				EnterOuterAlt(_localctx, 104);
				{
				State = 1349; drop_contract();
				}
				break;

			case 105:
				EnterOuterAlt(_localctx, 105);
				{
				State = 1350; drop_credential();
				}
				break;

			case 106:
				EnterOuterAlt(_localctx, 106);
				{
				State = 1351; drop_cryptograhic_provider();
				}
				break;

			case 107:
				EnterOuterAlt(_localctx, 107);
				{
				State = 1352; drop_database();
				}
				break;

			case 108:
				EnterOuterAlt(_localctx, 108);
				{
				State = 1353; drop_database_audit_specification();
				}
				break;

			case 109:
				EnterOuterAlt(_localctx, 109);
				{
				State = 1354; drop_database_encryption_key();
				}
				break;

			case 110:
				EnterOuterAlt(_localctx, 110);
				{
				State = 1355; drop_database_scoped_credential();
				}
				break;

			case 111:
				EnterOuterAlt(_localctx, 111);
				{
				State = 1356; drop_db_role();
				}
				break;

			case 112:
				EnterOuterAlt(_localctx, 112);
				{
				State = 1357; drop_default();
				}
				break;

			case 113:
				EnterOuterAlt(_localctx, 113);
				{
				State = 1358; drop_endpoint();
				}
				break;

			case 114:
				EnterOuterAlt(_localctx, 114);
				{
				State = 1359; drop_event_notifications();
				}
				break;

			case 115:
				EnterOuterAlt(_localctx, 115);
				{
				State = 1360; drop_event_session();
				}
				break;

			case 116:
				EnterOuterAlt(_localctx, 116);
				{
				State = 1361; drop_external_data_source();
				}
				break;

			case 117:
				EnterOuterAlt(_localctx, 117);
				{
				State = 1362; drop_external_file_format();
				}
				break;

			case 118:
				EnterOuterAlt(_localctx, 118);
				{
				State = 1363; drop_external_library();
				}
				break;

			case 119:
				EnterOuterAlt(_localctx, 119);
				{
				State = 1364; drop_external_resource_pool();
				}
				break;

			case 120:
				EnterOuterAlt(_localctx, 120);
				{
				State = 1365; drop_external_table();
				}
				break;

			case 121:
				EnterOuterAlt(_localctx, 121);
				{
				State = 1366; drop_fulltext_catalog();
				}
				break;

			case 122:
				EnterOuterAlt(_localctx, 122);
				{
				State = 1367; drop_fulltext_index();
				}
				break;

			case 123:
				EnterOuterAlt(_localctx, 123);
				{
				State = 1368; drop_fulltext_stoplist();
				}
				break;

			case 124:
				EnterOuterAlt(_localctx, 124);
				{
				State = 1369; drop_function();
				}
				break;

			case 125:
				EnterOuterAlt(_localctx, 125);
				{
				State = 1370; drop_index();
				}
				break;

			case 126:
				EnterOuterAlt(_localctx, 126);
				{
				State = 1371; drop_login();
				}
				break;

			case 127:
				EnterOuterAlt(_localctx, 127);
				{
				State = 1372; drop_master_key();
				}
				break;

			case 128:
				EnterOuterAlt(_localctx, 128);
				{
				State = 1373; drop_message_type();
				}
				break;

			case 129:
				EnterOuterAlt(_localctx, 129);
				{
				State = 1374; drop_partition_function();
				}
				break;

			case 130:
				EnterOuterAlt(_localctx, 130);
				{
				State = 1375; drop_partition_scheme();
				}
				break;

			case 131:
				EnterOuterAlt(_localctx, 131);
				{
				State = 1376; drop_procedure();
				}
				break;

			case 132:
				EnterOuterAlt(_localctx, 132);
				{
				State = 1377; drop_queue();
				}
				break;

			case 133:
				EnterOuterAlt(_localctx, 133);
				{
				State = 1378; drop_remote_service_binding();
				}
				break;

			case 134:
				EnterOuterAlt(_localctx, 134);
				{
				State = 1379; drop_resource_pool();
				}
				break;

			case 135:
				EnterOuterAlt(_localctx, 135);
				{
				State = 1380; drop_route();
				}
				break;

			case 136:
				EnterOuterAlt(_localctx, 136);
				{
				State = 1381; drop_rule();
				}
				break;

			case 137:
				EnterOuterAlt(_localctx, 137);
				{
				State = 1382; drop_schema();
				}
				break;

			case 138:
				EnterOuterAlt(_localctx, 138);
				{
				State = 1383; drop_search_property_list();
				}
				break;

			case 139:
				EnterOuterAlt(_localctx, 139);
				{
				State = 1384; drop_security_policy();
				}
				break;

			case 140:
				EnterOuterAlt(_localctx, 140);
				{
				State = 1385; drop_sequence();
				}
				break;

			case 141:
				EnterOuterAlt(_localctx, 141);
				{
				State = 1386; drop_server_audit();
				}
				break;

			case 142:
				EnterOuterAlt(_localctx, 142);
				{
				State = 1387; drop_server_audit_specification();
				}
				break;

			case 143:
				EnterOuterAlt(_localctx, 143);
				{
				State = 1388; drop_server_role();
				}
				break;

			case 144:
				EnterOuterAlt(_localctx, 144);
				{
				State = 1389; drop_service();
				}
				break;

			case 145:
				EnterOuterAlt(_localctx, 145);
				{
				State = 1390; drop_signature();
				}
				break;

			case 146:
				EnterOuterAlt(_localctx, 146);
				{
				State = 1391; drop_statistics();
				}
				break;

			case 147:
				EnterOuterAlt(_localctx, 147);
				{
				State = 1392; drop_statistics_name_azure_dw_and_pdw();
				}
				break;

			case 148:
				EnterOuterAlt(_localctx, 148);
				{
				State = 1393; drop_symmetric_key();
				}
				break;

			case 149:
				EnterOuterAlt(_localctx, 149);
				{
				State = 1394; drop_synonym();
				}
				break;

			case 150:
				EnterOuterAlt(_localctx, 150);
				{
				State = 1395; drop_table();
				}
				break;

			case 151:
				EnterOuterAlt(_localctx, 151);
				{
				State = 1396; drop_trigger();
				}
				break;

			case 152:
				EnterOuterAlt(_localctx, 152);
				{
				State = 1397; drop_type();
				}
				break;

			case 153:
				EnterOuterAlt(_localctx, 153);
				{
				State = 1398; drop_user();
				}
				break;

			case 154:
				EnterOuterAlt(_localctx, 154);
				{
				State = 1399; drop_view();
				}
				break;

			case 155:
				EnterOuterAlt(_localctx, 155);
				{
				State = 1400; drop_workload_group();
				}
				break;

			case 156:
				EnterOuterAlt(_localctx, 156);
				{
				State = 1401; drop_xml_schema_collection();
				}
				break;

			case 157:
				EnterOuterAlt(_localctx, 157);
				{
				State = 1402; disable_trigger();
				}
				break;

			case 158:
				EnterOuterAlt(_localctx, 158);
				{
				State = 1403; enable_trigger();
				}
				break;

			case 159:
				EnterOuterAlt(_localctx, 159);
				{
				State = 1404; lock_table();
				}
				break;

			case 160:
				EnterOuterAlt(_localctx, 160);
				{
				State = 1405; truncate_table();
				}
				break;

			case 161:
				EnterOuterAlt(_localctx, 161);
				{
				State = 1406; update_statistics();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_statementContext : ParserRuleContext {
		public Backup_databaseContext backup_database() {
			return GetRuleContext<Backup_databaseContext>(0);
		}
		public Backup_logContext backup_log() {
			return GetRuleContext<Backup_logContext>(0);
		}
		public Backup_certificateContext backup_certificate() {
			return GetRuleContext<Backup_certificateContext>(0);
		}
		public Backup_master_keyContext backup_master_key() {
			return GetRuleContext<Backup_master_keyContext>(0);
		}
		public Backup_service_master_keyContext backup_service_master_key() {
			return GetRuleContext<Backup_service_master_keyContext>(0);
		}
		public Backup_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_statement(this);
		}
	}

	[RuleVersion(0)]
	public Backup_statementContext backup_statement() {
		Backup_statementContext _localctx = new Backup_statementContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_backup_statement);
		try {
			State = 1414;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1409; backup_database();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1410; backup_log();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1411; backup_certificate();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1412; backup_master_key();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1413; backup_service_master_key();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cfl_statementContext : ParserRuleContext {
		public Block_statementContext block_statement() {
			return GetRuleContext<Block_statementContext>(0);
		}
		public Break_statementContext break_statement() {
			return GetRuleContext<Break_statementContext>(0);
		}
		public Continue_statementContext continue_statement() {
			return GetRuleContext<Continue_statementContext>(0);
		}
		public Goto_statementContext goto_statement() {
			return GetRuleContext<Goto_statementContext>(0);
		}
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public Print_statementContext print_statement() {
			return GetRuleContext<Print_statementContext>(0);
		}
		public Raiseerror_statementContext raiseerror_statement() {
			return GetRuleContext<Raiseerror_statementContext>(0);
		}
		public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public Throw_statementContext throw_statement() {
			return GetRuleContext<Throw_statementContext>(0);
		}
		public Try_catch_statementContext try_catch_statement() {
			return GetRuleContext<Try_catch_statementContext>(0);
		}
		public Waitfor_statementContext waitfor_statement() {
			return GetRuleContext<Waitfor_statementContext>(0);
		}
		public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		public Cfl_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cfl_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCfl_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCfl_statement(this);
		}
	}

	[RuleVersion(0)]
	public Cfl_statementContext cfl_statement() {
		Cfl_statementContext _localctx = new Cfl_statementContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_cfl_statement);
		try {
			State = 1428;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1416; block_statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1417; break_statement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1418; continue_statement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1419; goto_statement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1420; if_statement();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1421; print_statement();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1422; raiseerror_statement();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1423; return_statement();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1424; throw_statement();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1425; try_catch_statement();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1426; waitfor_statement();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1427; while_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_statementContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public Block_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBlock_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBlock_statement(this);
		}
	}

	[RuleVersion(0)]
	public Block_statementContext block_statement() {
		Block_statementContext _localctx = new Block_statementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_block_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1430; Match(BEGIN);
			State = 1432;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				State = 1431; Match(SEMI);
				}
				break;
			}
			State = 1437;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,23,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1434; sql_clauses();
					}
					} 
				}
				State = 1439;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,23,_ctx);
			}
			State = 1440; Match(END);
			State = 1442;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				State = 1441; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Break_statementContext : ParserRuleContext {
		public ITerminalNode BREAK() { return GetToken(TSqlParser.BREAK, 0); }
		public Break_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBreak_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBreak_statement(this);
		}
	}

	[RuleVersion(0)]
	public Break_statementContext break_statement() {
		Break_statementContext _localctx = new Break_statementContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_break_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1444; Match(BREAK);
			State = 1446;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				State = 1445; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Continue_statementContext : ParserRuleContext {
		public ITerminalNode CONTINUE() { return GetToken(TSqlParser.CONTINUE, 0); }
		public Continue_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continue_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterContinue_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitContinue_statement(this);
		}
	}

	[RuleVersion(0)]
	public Continue_statementContext continue_statement() {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_continue_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1448; Match(CONTINUE);
			State = 1450;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				State = 1449; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Goto_statementContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(TSqlParser.GOTO, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Goto_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goto_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGoto_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGoto_statement(this);
		}
	}

	[RuleVersion(0)]
	public Goto_statementContext goto_statement() {
		Goto_statementContext _localctx = new Goto_statementContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_goto_statement);
		try {
			State = 1462;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1452; Match(GOTO);
				State = 1453; id_();
				State = 1455;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
				case 1:
					{
					State = 1454; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1457; id_();
				State = 1458; Match(COLON);
				State = 1460;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
				case 1:
					{
					State = 1459; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_return_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1464; Match(RETURN);
			State = 1466;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 1465; expression(0);
				}
				break;
			}
			State = 1469;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				State = 1468; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(TSqlParser.ELSE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1471; Match(IF);
			State = 1472; search_condition(0);
			State = 1473; sql_clauses();
			State = 1476;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				State = 1474; Match(ELSE);
				State = 1475; sql_clauses();
				}
				break;
			}
			State = 1479;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				State = 1478; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_statementContext : ParserRuleContext {
		public ITerminalNode THROW() { return GetToken(TSqlParser.THROW, 0); }
		public Throw_error_numberContext throw_error_number() {
			return GetRuleContext<Throw_error_numberContext>(0);
		}
		public Throw_messageContext throw_message() {
			return GetRuleContext<Throw_messageContext>(0);
		}
		public Throw_stateContext throw_state() {
			return GetRuleContext<Throw_stateContext>(0);
		}
		public Throw_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterThrow_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitThrow_statement(this);
		}
	}

	[RuleVersion(0)]
	public Throw_statementContext throw_statement() {
		Throw_statementContext _localctx = new Throw_statementContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_throw_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1481; Match(THROW);
			State = 1488;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				State = 1482; throw_error_number();
				State = 1483; Match(COMMA);
				State = 1484; throw_message();
				State = 1485; Match(COMMA);
				State = 1486; throw_state();
				}
				break;
			}
			State = 1491;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				{
				State = 1490; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_error_numberContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_error_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_error_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterThrow_error_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitThrow_error_number(this);
		}
	}

	[RuleVersion(0)]
	public Throw_error_numberContext throw_error_number() {
		Throw_error_numberContext _localctx = new Throw_error_numberContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_throw_error_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1493;
			_la = _input.La(1);
			if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_messageContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_messageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_message; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterThrow_message(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitThrow_message(this);
		}
	}

	[RuleVersion(0)]
	public Throw_messageContext throw_message() {
		Throw_messageContext _localctx = new Throw_messageContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_throw_message);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1495;
			_la = _input.La(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_stateContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_stateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_state; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterThrow_state(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitThrow_state(this);
		}
	}

	[RuleVersion(0)]
	public Throw_stateContext throw_state() {
		Throw_stateContext _localctx = new Throw_stateContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_throw_state);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1497;
			_la = _input.La(1);
			if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_catch_statementContext : ParserRuleContext {
		public Sql_clausesContext try_clauses;
		public Sql_clausesContext catch_clauses;
		public ITerminalNode[] BEGIN() { return GetTokens(TSqlParser.BEGIN); }
		public ITerminalNode BEGIN(int i) {
			return GetToken(TSqlParser.BEGIN, i);
		}
		public ITerminalNode[] TRY() { return GetTokens(TSqlParser.TRY); }
		public ITerminalNode TRY(int i) {
			return GetToken(TSqlParser.TRY, i);
		}
		public ITerminalNode[] END() { return GetTokens(TSqlParser.END); }
		public ITerminalNode END(int i) {
			return GetToken(TSqlParser.END, i);
		}
		public ITerminalNode[] CATCH() { return GetTokens(TSqlParser.CATCH); }
		public ITerminalNode CATCH(int i) {
			return GetToken(TSqlParser.CATCH, i);
		}
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public Try_catch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_catch_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTry_catch_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTry_catch_statement(this);
		}
	}

	[RuleVersion(0)]
	public Try_catch_statementContext try_catch_statement() {
		Try_catch_statementContext _localctx = new Try_catch_statementContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_try_catch_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1499; Match(BEGIN);
			State = 1500; Match(TRY);
			State = 1502;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				State = 1501; Match(SEMI);
				}
				break;
			}
			State = 1505;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1504; _localctx.try_clauses = sql_clauses();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1507;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 1509; Match(END);
			State = 1510; Match(TRY);
			State = 1512;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				State = 1511; Match(SEMI);
				}
				break;
			}
			State = 1514; Match(BEGIN);
			State = 1515; Match(CATCH);
			State = 1517;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
			case 1:
				{
				State = 1516; Match(SEMI);
				}
				break;
			}
			State = 1522;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,40,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1519; _localctx.catch_clauses = sql_clauses();
					}
					} 
				}
				State = 1524;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,40,_ctx);
			}
			State = 1525; Match(END);
			State = 1526; Match(CATCH);
			State = 1528;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				{
				State = 1527; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Waitfor_statementContext : ParserRuleContext {
		public ITerminalNode WAITFOR() { return GetToken(TSqlParser.WAITFOR, 0); }
		public Receive_statementContext receive_statement() {
			return GetRuleContext<Receive_statementContext>(0);
		}
		public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DELAY() { return GetToken(TSqlParser.DELAY, 0); }
		public ITerminalNode TIME() { return GetToken(TSqlParser.TIME, 0); }
		public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public Waitfor_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitfor_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWaitfor_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWaitfor_statement(this);
		}
	}

	[RuleVersion(0)]
	public Waitfor_statementContext waitfor_statement() {
		Waitfor_statementContext _localctx = new Waitfor_statementContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_waitfor_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1530; Match(WAITFOR);
			State = 1532;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				State = 1531; receive_statement();
				}
				break;
			}
			State = 1535;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				State = 1534; Match(COMMA);
				}
				break;
			}
			State = 1539;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				State = 1537;
				_la = _input.La(1);
				if ( !(_la==DELAY || _la==TIME || _la==TIMEOUT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1538; time();
				}
				break;
			}
			State = 1542;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				{
				State = 1541; expression(0);
				}
				break;
			}
			State = 1545;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				State = 1544; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(TSqlParser.WHILE, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Sql_clausesContext sql_clauses() {
			return GetRuleContext<Sql_clausesContext>(0);
		}
		public ITerminalNode BREAK() { return GetToken(TSqlParser.BREAK, 0); }
		public ITerminalNode CONTINUE() { return GetToken(TSqlParser.CONTINUE, 0); }
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1547; Match(WHILE);
			State = 1548; search_condition(0);
			State = 1558;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
			case 1:
				{
				State = 1549; sql_clauses();
				}
				break;

			case 2:
				{
				State = 1550; Match(BREAK);
				State = 1552;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
				case 1:
					{
					State = 1551; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 1554; Match(CONTINUE);
				State = 1556;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
				case 1:
					{
					State = 1555; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_statementContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(TSqlParser.PRINT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DOUBLE_QUOTE_ID() { return GetToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public Print_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrint_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrint_statement(this);
		}
	}

	[RuleVersion(0)]
	public Print_statementContext print_statement() {
		Print_statementContext _localctx = new Print_statementContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_print_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1560; Match(PRINT);
			State = 1563;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
			case 1:
				{
				State = 1561; expression(0);
				}
				break;

			case 2:
				{
				State = 1562; Match(DOUBLE_QUOTE_ID);
				}
				break;
			}
			State = 1569;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,51,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1565; Match(COMMA);
					State = 1566; Match(LOCAL_ID);
					}
					} 
				}
				State = 1571;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,51,_ctx);
			}
			State = 1573;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
			case 1:
				{
				State = 1572; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raiseerror_statementContext : ParserRuleContext {
		public IToken msg;
		public Constant_LOCAL_IDContext severity;
		public Constant_LOCAL_IDContext state;
		public IToken formatstring;
		public IToken argument;
		public ITerminalNode RAISERROR() { return GetToken(TSqlParser.RAISERROR, 0); }
		public Constant_LOCAL_IDContext[] constant_LOCAL_ID() {
			return GetRuleContexts<Constant_LOCAL_IDContext>();
		}
		public Constant_LOCAL_IDContext constant_LOCAL_ID(int i) {
			return GetRuleContext<Constant_LOCAL_IDContext>(i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode SETERROR() { return GetToken(TSqlParser.SETERROR, 0); }
		public ITerminalNode NOWAIT() { return GetToken(TSqlParser.NOWAIT, 0); }
		public ITerminalNode DOUBLE_QUOTE_ID() { return GetToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public Raiseerror_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseerror_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRaiseerror_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRaiseerror_statement(this);
		}
	}

	[RuleVersion(0)]
	public Raiseerror_statementContext raiseerror_statement() {
		Raiseerror_statementContext _localctx = new Raiseerror_statementContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_raiseerror_statement);
		int _la;
		try {
			int _alt;
			State = 1607;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1575; Match(RAISERROR);
				State = 1576; Match(LR_BRACKET);
				State = 1577;
				_localctx.msg = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 1091)) & ~0x3f) == 0 && ((1L << (_la - 1091)) & ((1L << (LOCAL_ID - 1091)) | (1L << (DECIMAL - 1091)) | (1L << (STRING - 1091)))) != 0)) ) {
					_localctx.msg = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1578; Match(COMMA);
				State = 1579; _localctx.severity = constant_LOCAL_ID();
				State = 1580; Match(COMMA);
				State = 1581; _localctx.state = constant_LOCAL_ID();
				State = 1586;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,53,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1582; Match(COMMA);
						State = 1583; constant_LOCAL_ID();
						}
						} 
					}
					State = 1588;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,53,_ctx);
				}
				State = 1589; Match(RR_BRACKET);
				State = 1592;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
				case 1:
					{
					State = 1590; Match(WITH);
					State = 1591;
					_la = _input.La(1);
					if ( !(_la==LOG || _la==NOWAIT || _la==SETERROR) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 1595;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,55,_ctx) ) {
				case 1:
					{
					State = 1594; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1597; Match(RAISERROR);
				State = 1598; Match(DECIMAL);
				State = 1599;
				_localctx.formatstring = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 1088)) & ~0x3f) == 0 && ((1L << (_la - 1088)) & ((1L << (DOUBLE_QUOTE_ID - 1088)) | (1L << (LOCAL_ID - 1088)) | (1L << (STRING - 1088)))) != 0)) ) {
					_localctx.formatstring = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1604;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,56,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1600; Match(COMMA);
						State = 1601;
						_localctx.argument = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 1091)) & ~0x3f) == 0 && ((1L << (_la - 1091)) & ((1L << (LOCAL_ID - 1091)) | (1L << (DECIMAL - 1091)) | (1L << (STRING - 1091)))) != 0)) ) {
							_localctx.argument = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						} 
					}
					State = 1606;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,56,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_statementContext : ParserRuleContext {
		public Empty_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEmpty_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEmpty_statement(this);
		}
	}

	[RuleVersion(0)]
	public Empty_statementContext empty_statement() {
		Empty_statementContext _localctx = new Empty_statementContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_empty_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1609; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Another_statementContext : ParserRuleContext {
		public Declare_statementContext declare_statement() {
			return GetRuleContext<Declare_statementContext>(0);
		}
		public Execute_statementContext execute_statement() {
			return GetRuleContext<Execute_statementContext>(0);
		}
		public Cursor_statementContext cursor_statement() {
			return GetRuleContext<Cursor_statementContext>(0);
		}
		public Conversation_statementContext conversation_statement() {
			return GetRuleContext<Conversation_statementContext>(0);
		}
		public Create_contractContext create_contract() {
			return GetRuleContext<Create_contractContext>(0);
		}
		public Create_queueContext create_queue() {
			return GetRuleContext<Create_queueContext>(0);
		}
		public Alter_queueContext alter_queue() {
			return GetRuleContext<Alter_queueContext>(0);
		}
		public Kill_statementContext kill_statement() {
			return GetRuleContext<Kill_statementContext>(0);
		}
		public Message_statementContext message_statement() {
			return GetRuleContext<Message_statementContext>(0);
		}
		public Security_statementContext security_statement() {
			return GetRuleContext<Security_statementContext>(0);
		}
		public Set_statementContext set_statement() {
			return GetRuleContext<Set_statementContext>(0);
		}
		public Transaction_statementContext transaction_statement() {
			return GetRuleContext<Transaction_statementContext>(0);
		}
		public Use_statementContext use_statement() {
			return GetRuleContext<Use_statementContext>(0);
		}
		public Setuser_statementContext setuser_statement() {
			return GetRuleContext<Setuser_statementContext>(0);
		}
		public Reconfigure_statementContext reconfigure_statement() {
			return GetRuleContext<Reconfigure_statementContext>(0);
		}
		public Shutdown_statementContext shutdown_statement() {
			return GetRuleContext<Shutdown_statementContext>(0);
		}
		public Checkpoint_statementContext checkpoint_statement() {
			return GetRuleContext<Checkpoint_statementContext>(0);
		}
		public Another_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_another_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAnother_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAnother_statement(this);
		}
	}

	[RuleVersion(0)]
	public Another_statementContext another_statement() {
		Another_statementContext _localctx = new Another_statementContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_another_statement);
		try {
			State = 1628;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1611; declare_statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1612; execute_statement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1613; cursor_statement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1614; conversation_statement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1615; create_contract();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1616; create_queue();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1617; alter_queue();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1618; kill_statement();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1619; message_statement();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1620; security_statement();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1621; set_statement();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1622; transaction_statement();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1623; use_statement();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1624; setuser_statement();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1625; reconfigure_statement();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1626; shutdown_statement();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1627; checkpoint_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_application_roleContext : ParserRuleContext {
		public Id_Context appliction_role;
		public Id_Context new_application_role_name;
		public IToken application_role_password;
		public Id_Context app_role_default_schema;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode DEFAULT_SCHEMA() { return GetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_application_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_application_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_application_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_application_role(this);
		}
	}

	[RuleVersion(0)]
	public Alter_application_roleContext alter_application_role() {
		Alter_application_roleContext _localctx = new Alter_application_roleContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_alter_application_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1630; Match(ALTER);
			State = 1631; Match(APPLICATION);
			State = 1632; Match(ROLE);
			State = 1633; _localctx.appliction_role = id_();
			State = 1634; Match(WITH);
			State = 1641;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,60,_ctx) ) {
			case 1:
				{
				State = 1636;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,59,_ctx) ) {
				case 1:
					{
					State = 1635; Match(COMMA);
					}
					break;
				}
				State = 1638; Match(NAME);
				State = 1639; Match(EQUAL);
				State = 1640; _localctx.new_application_role_name = id_();
				}
				break;
			}
			State = 1649;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,62,_ctx) ) {
			case 1:
				{
				State = 1644;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
				case 1:
					{
					State = 1643; Match(COMMA);
					}
					break;
				}
				State = 1646; Match(PASSWORD);
				State = 1647; Match(EQUAL);
				State = 1648; _localctx.application_role_password = Match(STRING);
				}
				break;
			}
			State = 1657;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,64,_ctx) ) {
			case 1:
				{
				State = 1652;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
				case 1:
					{
					State = 1651; Match(COMMA);
					}
					break;
				}
				State = 1654; Match(DEFAULT_SCHEMA);
				State = 1655; Match(EQUAL);
				State = 1656; _localctx.app_role_default_schema = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_xml_schema_collectionContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Alter_xml_schema_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_xml_schema_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_xml_schema_collection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_xml_schema_collection(this);
		}
	}

	[RuleVersion(0)]
	public Alter_xml_schema_collectionContext alter_xml_schema_collection() {
		Alter_xml_schema_collectionContext _localctx = new Alter_xml_schema_collectionContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_alter_xml_schema_collection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1659; Match(ALTER);
			State = 1660; Match(XML);
			State = 1661; Match(SCHEMA);
			State = 1662; Match(COLLECTION);
			State = 1666;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
			case 1:
				{
				State = 1663; id_();
				State = 1664; Match(DOT);
				}
				break;
			}
			State = 1668; id_();
			State = 1669; Match(ADD);
			State = 1670; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_application_roleContext : ParserRuleContext {
		public Id_Context appliction_role;
		public IToken application_role_password;
		public Id_Context app_role_default_schema;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode DEFAULT_SCHEMA() { return GetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_application_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_application_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_application_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_application_role(this);
		}
	}

	[RuleVersion(0)]
	public Create_application_roleContext create_application_role() {
		Create_application_roleContext _localctx = new Create_application_roleContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_create_application_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1672; Match(CREATE);
			State = 1673; Match(APPLICATION);
			State = 1674; Match(ROLE);
			State = 1675; _localctx.appliction_role = id_();
			State = 1676; Match(WITH);
			State = 1683;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,67,_ctx) ) {
			case 1:
				{
				State = 1678;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
				case 1:
					{
					State = 1677; Match(COMMA);
					}
					break;
				}
				State = 1680; Match(PASSWORD);
				State = 1681; Match(EQUAL);
				State = 1682; _localctx.application_role_password = Match(STRING);
				}
				break;
			}
			State = 1691;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,69,_ctx) ) {
			case 1:
				{
				State = 1686;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
				case 1:
					{
					State = 1685; Match(COMMA);
					}
					break;
				}
				State = 1688; Match(DEFAULT_SCHEMA);
				State = 1689; Match(EQUAL);
				State = 1690; _localctx.app_role_default_schema = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_aggregateContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context aggregate_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode AGGREGATE() { return GetToken(TSqlParser.AGGREGATE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_aggregateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_aggregate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_aggregate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_aggregate(this);
		}
	}

	[RuleVersion(0)]
	public Drop_aggregateContext drop_aggregate() {
		Drop_aggregateContext _localctx = new Drop_aggregateContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_drop_aggregate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1693; Match(DROP);
			State = 1694; Match(AGGREGATE);
			State = 1697;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
			case 1:
				{
				State = 1695; Match(IF);
				State = 1696; Match(EXISTS);
				}
				break;
			}
			State = 1702;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
			case 1:
				{
				State = 1699; _localctx.schema_name = id_();
				State = 1700; Match(DOT);
				}
				break;
			}
			State = 1704; _localctx.aggregate_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_application_roleContext : ParserRuleContext {
		public Id_Context rolename;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_application_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_application_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_application_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_application_role(this);
		}
	}

	[RuleVersion(0)]
	public Drop_application_roleContext drop_application_role() {
		Drop_application_roleContext _localctx = new Drop_application_roleContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_drop_application_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1706; Match(DROP);
			State = 1707; Match(APPLICATION);
			State = 1708; Match(ROLE);
			State = 1709; _localctx.rolename = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assemblyContext : ParserRuleContext {
		public Id_Context assembly_name;
		public Alter_assembly_startContext alter_assembly_start() {
			return GetRuleContext<Alter_assembly_startContext>(0);
		}
		public Alter_assembly_clauseContext alter_assembly_clause() {
			return GetRuleContext<Alter_assembly_clauseContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Alter_assemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assemblyContext alter_assembly() {
		Alter_assemblyContext _localctx = new Alter_assemblyContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_alter_assembly);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1711; alter_assembly_start();
			State = 1712; _localctx.assembly_name = id_();
			State = 1713; alter_assembly_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_startContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public Alter_assembly_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_start(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_startContext alter_assembly_start() {
		Alter_assembly_startContext _localctx = new Alter_assembly_startContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_alter_assembly_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1715; Match(ALTER);
			State = 1716; Match(ASSEMBLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_clauseContext : ParserRuleContext {
		public Alter_assembly_from_clauseContext alter_assembly_from_clause() {
			return GetRuleContext<Alter_assembly_from_clauseContext>(0);
		}
		public Alter_assembly_with_clauseContext alter_assembly_with_clause() {
			return GetRuleContext<Alter_assembly_with_clauseContext>(0);
		}
		public Alter_assembly_drop_clauseContext alter_assembly_drop_clause() {
			return GetRuleContext<Alter_assembly_drop_clauseContext>(0);
		}
		public Alter_assembly_add_clauseContext alter_assembly_add_clause() {
			return GetRuleContext<Alter_assembly_add_clauseContext>(0);
		}
		public Alter_assembly_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_clause(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_clauseContext alter_assembly_clause() {
		Alter_assembly_clauseContext _localctx = new Alter_assembly_clauseContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_alter_assembly_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1719;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				State = 1718; alter_assembly_from_clause();
				}
				break;
			}
			State = 1722;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,73,_ctx) ) {
			case 1:
				{
				State = 1721; alter_assembly_with_clause();
				}
				break;
			}
			State = 1725;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				State = 1724; alter_assembly_drop_clause();
				}
				break;
			}
			State = 1728;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
			case 1:
				{
				State = 1727; alter_assembly_add_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_from_clauseContext : ParserRuleContext {
		public Alter_assembly_from_clause_startContext alter_assembly_from_clause_start() {
			return GetRuleContext<Alter_assembly_from_clause_startContext>(0);
		}
		public Client_assembly_specifierContext client_assembly_specifier() {
			return GetRuleContext<Client_assembly_specifierContext>(0);
		}
		public Alter_assembly_file_bitsContext alter_assembly_file_bits() {
			return GetRuleContext<Alter_assembly_file_bitsContext>(0);
		}
		public Alter_assembly_from_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_from_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_from_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_from_clause(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_from_clauseContext alter_assembly_from_clause() {
		Alter_assembly_from_clauseContext _localctx = new Alter_assembly_from_clauseContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_alter_assembly_from_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1730; alter_assembly_from_clause_start();
			State = 1733;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,76,_ctx) ) {
			case 1:
				{
				State = 1731; client_assembly_specifier();
				}
				break;

			case 2:
				{
				State = 1732; alter_assembly_file_bits();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_from_clause_startContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Alter_assembly_from_clause_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_from_clause_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_from_clause_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_from_clause_start(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_from_clause_startContext alter_assembly_from_clause_start() {
		Alter_assembly_from_clause_startContext _localctx = new Alter_assembly_from_clause_startContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_alter_assembly_from_clause_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1735; Match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_drop_clauseContext : ParserRuleContext {
		public Alter_assembly_dropContext alter_assembly_drop() {
			return GetRuleContext<Alter_assembly_dropContext>(0);
		}
		public Alter_assembly_drop_multiple_filesContext alter_assembly_drop_multiple_files() {
			return GetRuleContext<Alter_assembly_drop_multiple_filesContext>(0);
		}
		public Alter_assembly_drop_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_drop_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_drop_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_drop_clause(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_drop_clauseContext alter_assembly_drop_clause() {
		Alter_assembly_drop_clauseContext _localctx = new Alter_assembly_drop_clauseContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_alter_assembly_drop_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1737; alter_assembly_drop();
			State = 1738; alter_assembly_drop_multiple_files();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_drop_multiple_filesContext : ParserRuleContext {
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Multiple_local_filesContext multiple_local_files() {
			return GetRuleContext<Multiple_local_filesContext>(0);
		}
		public Alter_assembly_drop_multiple_filesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_drop_multiple_files; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_drop_multiple_files(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_drop_multiple_files(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_drop_multiple_filesContext alter_assembly_drop_multiple_files() {
		Alter_assembly_drop_multiple_filesContext _localctx = new Alter_assembly_drop_multiple_filesContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_alter_assembly_drop_multiple_files);
		try {
			State = 1742;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,77,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1740; Match(ALL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1741; multiple_local_files();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_dropContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Alter_assembly_dropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_drop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_drop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_drop(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_dropContext alter_assembly_drop() {
		Alter_assembly_dropContext _localctx = new Alter_assembly_dropContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_alter_assembly_drop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1744; Match(DROP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_add_clauseContext : ParserRuleContext {
		public Alter_asssembly_add_clause_startContext alter_asssembly_add_clause_start() {
			return GetRuleContext<Alter_asssembly_add_clause_startContext>(0);
		}
		public Alter_assembly_client_file_clauseContext alter_assembly_client_file_clause() {
			return GetRuleContext<Alter_assembly_client_file_clauseContext>(0);
		}
		public Alter_assembly_add_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_add_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_add_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_add_clause(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_add_clauseContext alter_assembly_add_clause() {
		Alter_assembly_add_clauseContext _localctx = new Alter_assembly_add_clauseContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_alter_assembly_add_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1746; alter_asssembly_add_clause_start();
			State = 1747; alter_assembly_client_file_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_asssembly_add_clause_startContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Alter_asssembly_add_clause_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_asssembly_add_clause_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_asssembly_add_clause_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_asssembly_add_clause_start(this);
		}
	}

	[RuleVersion(0)]
	public Alter_asssembly_add_clause_startContext alter_asssembly_add_clause_start() {
		Alter_asssembly_add_clause_startContext _localctx = new Alter_asssembly_add_clause_startContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_alter_asssembly_add_clause_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1749; Match(ADD);
			State = 1750; Match(FILE);
			State = 1751; Match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_client_file_clauseContext : ParserRuleContext {
		public Alter_assembly_file_nameContext alter_assembly_file_name() {
			return GetRuleContext<Alter_assembly_file_nameContext>(0);
		}
		public Alter_assembly_asContext alter_assembly_as() {
			return GetRuleContext<Alter_assembly_asContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Alter_assembly_client_file_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_client_file_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_client_file_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_client_file_clause(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_client_file_clauseContext alter_assembly_client_file_clause() {
		Alter_assembly_client_file_clauseContext _localctx = new Alter_assembly_client_file_clauseContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_alter_assembly_client_file_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1753; alter_assembly_file_name();
			State = 1757;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,78,_ctx) ) {
			case 1:
				{
				State = 1754; alter_assembly_as();
				State = 1755; id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_file_nameContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Alter_assembly_file_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_file_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_file_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_file_name(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_file_nameContext alter_assembly_file_name() {
		Alter_assembly_file_nameContext _localctx = new Alter_assembly_file_nameContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_alter_assembly_file_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1759; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_file_bitsContext : ParserRuleContext {
		public Alter_assembly_asContext alter_assembly_as() {
			return GetRuleContext<Alter_assembly_asContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Alter_assembly_file_bitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_file_bits; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_file_bits(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_file_bits(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_file_bitsContext alter_assembly_file_bits() {
		Alter_assembly_file_bitsContext _localctx = new Alter_assembly_file_bitsContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_alter_assembly_file_bits);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1761; alter_assembly_as();
			State = 1762; id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_asContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Alter_assembly_asContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_as; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_as(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_as(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_asContext alter_assembly_as() {
		Alter_assembly_asContext _localctx = new Alter_assembly_asContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_alter_assembly_as);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1764; Match(AS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_with_clauseContext : ParserRuleContext {
		public Alter_assembly_withContext alter_assembly_with() {
			return GetRuleContext<Alter_assembly_withContext>(0);
		}
		public Assembly_optionContext assembly_option() {
			return GetRuleContext<Assembly_optionContext>(0);
		}
		public Alter_assembly_with_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_with_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_with_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_with_clause(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_with_clauseContext alter_assembly_with_clause() {
		Alter_assembly_with_clauseContext _localctx = new Alter_assembly_with_clauseContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_alter_assembly_with_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1766; alter_assembly_with();
			State = 1767; assembly_option(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_withContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Alter_assembly_withContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_with; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_with(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_with(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_withContext alter_assembly_with() {
		Alter_assembly_withContext _localctx = new Alter_assembly_withContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_alter_assembly_with);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1769; Match(WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Client_assembly_specifierContext : ParserRuleContext {
		public Network_file_shareContext network_file_share() {
			return GetRuleContext<Network_file_shareContext>(0);
		}
		public Local_fileContext local_file() {
			return GetRuleContext<Local_fileContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Client_assembly_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_client_assembly_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClient_assembly_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClient_assembly_specifier(this);
		}
	}

	[RuleVersion(0)]
	public Client_assembly_specifierContext client_assembly_specifier() {
		Client_assembly_specifierContext _localctx = new Client_assembly_specifierContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_client_assembly_specifier);
		try {
			State = 1774;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,79,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1771; network_file_share();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1772; local_file();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1773; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assembly_optionContext : ParserRuleContext {
		public ITerminalNode PERMISSION_SET() { return GetToken(TSqlParser.PERMISSION_SET, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode SAFE() { return GetToken(TSqlParser.SAFE, 0); }
		public ITerminalNode EXTERNAL_ACCESS() { return GetToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		public ITerminalNode UNSAFE() { return GetToken(TSqlParser.UNSAFE, 0); }
		public ITerminalNode VISIBILITY() { return GetToken(TSqlParser.VISIBILITY, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode UNCHECKED() { return GetToken(TSqlParser.UNCHECKED, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public Assembly_optionContext assembly_option() {
			return GetRuleContext<Assembly_optionContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Assembly_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assembly_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAssembly_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAssembly_option(this);
		}
	}

	[RuleVersion(0)]
	public Assembly_optionContext assembly_option() {
		return assembly_option(0);
	}

	private Assembly_optionContext assembly_option(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Assembly_optionContext _localctx = new Assembly_optionContext(_ctx, _parentState);
		Assembly_optionContext _prevctx = _localctx;
		int _startState = 94;
		EnterRecursionRule(_localctx, 94, RULE_assembly_option, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1785;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				State = 1777; Match(PERMISSION_SET);
				State = 1778; Match(EQUAL);
				State = 1779;
				_la = _input.La(1);
				if ( !(_la==EXTERNAL_ACCESS || _la==SAFE || _la==UNSAFE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				{
				State = 1780; Match(VISIBILITY);
				State = 1781; Match(EQUAL);
				State = 1782; on_off();
				}
				break;

			case 3:
				{
				State = 1783; Match(UNCHECKED);
				State = 1784; Match(DATA);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 1791;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,81,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Assembly_optionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_assembly_option);
					State = 1787;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 1788; Match(COMMA);
					}
					} 
				}
				State = 1793;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,81,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Network_file_shareContext : ParserRuleContext {
		public Network_file_startContext network_file_start() {
			return GetRuleContext<Network_file_startContext>(0);
		}
		public Network_computerContext network_computer() {
			return GetRuleContext<Network_computerContext>(0);
		}
		public File_pathContext file_path() {
			return GetRuleContext<File_pathContext>(0);
		}
		public Network_file_shareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_network_file_share; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNetwork_file_share(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNetwork_file_share(this);
		}
	}

	[RuleVersion(0)]
	public Network_file_shareContext network_file_share() {
		Network_file_shareContext _localctx = new Network_file_shareContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_network_file_share);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1794; network_file_start();
			State = 1795; network_computer();
			State = 1796; file_path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Network_computerContext : ParserRuleContext {
		public Id_Context computer_name;
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Network_computerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_network_computer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNetwork_computer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNetwork_computer(this);
		}
	}

	[RuleVersion(0)]
	public Network_computerContext network_computer() {
		Network_computerContext _localctx = new Network_computerContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_network_computer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1798; _localctx.computer_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Network_file_startContext : ParserRuleContext {
		public ITerminalNode DOUBLE_BACK_SLASH() { return GetToken(TSqlParser.DOUBLE_BACK_SLASH, 0); }
		public Network_file_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_network_file_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNetwork_file_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNetwork_file_start(this);
		}
	}

	[RuleVersion(0)]
	public Network_file_startContext network_file_start() {
		Network_file_startContext _localctx = new Network_file_startContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_network_file_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1800; Match(DOUBLE_BACK_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_pathContext : ParserRuleContext {
		public File_directory_path_separatorContext file_directory_path_separator() {
			return GetRuleContext<File_directory_path_separatorContext>(0);
		}
		public File_pathContext file_path() {
			return GetRuleContext<File_pathContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public File_pathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_path; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_path(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_path(this);
		}
	}

	[RuleVersion(0)]
	public File_pathContext file_path() {
		File_pathContext _localctx = new File_pathContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_file_path);
		try {
			State = 1806;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,82,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1802; file_directory_path_separator();
				State = 1803; file_path();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1805; id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_directory_path_separatorContext : ParserRuleContext {
		public File_directory_path_separatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_directory_path_separator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_directory_path_separator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_directory_path_separator(this);
		}
	}

	[RuleVersion(0)]
	public File_directory_path_separatorContext file_directory_path_separator() {
		File_directory_path_separatorContext _localctx = new File_directory_path_separatorContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_file_directory_path_separator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1808; Match(BACKSLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_fileContext : ParserRuleContext {
		public Local_driveContext local_drive() {
			return GetRuleContext<Local_driveContext>(0);
		}
		public File_pathContext file_path() {
			return GetRuleContext<File_pathContext>(0);
		}
		public Local_fileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLocal_file(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLocal_file(this);
		}
	}

	[RuleVersion(0)]
	public Local_fileContext local_file() {
		Local_fileContext _localctx = new Local_fileContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_local_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1810; local_drive();
			State = 1811; file_path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_driveContext : ParserRuleContext {
		public ITerminalNode DISK_DRIVE() { return GetToken(TSqlParser.DISK_DRIVE, 0); }
		public Local_driveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_drive; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLocal_drive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLocal_drive(this);
		}
	}

	[RuleVersion(0)]
	public Local_driveContext local_drive() {
		Local_driveContext _localctx = new Local_driveContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_local_drive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1813; Match(DISK_DRIVE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiple_local_filesContext : ParserRuleContext {
		public Multiple_local_file_startContext multiple_local_file_start() {
			return GetRuleContext<Multiple_local_file_startContext>(0);
		}
		public Local_fileContext local_file() {
			return GetRuleContext<Local_fileContext>(0);
		}
		public ITerminalNode SINGLE_QUOTE() { return GetToken(TSqlParser.SINGLE_QUOTE, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Multiple_local_filesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiple_local_files; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMultiple_local_files(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMultiple_local_files(this);
		}
	}

	[RuleVersion(0)]
	public Multiple_local_filesContext multiple_local_files() {
		Multiple_local_filesContext _localctx = new Multiple_local_filesContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_multiple_local_files);
		try {
			State = 1821;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,83,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1815; multiple_local_file_start();
				State = 1816; local_file();
				State = 1817; Match(SINGLE_QUOTE);
				State = 1818; Match(COMMA);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1820; local_file();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiple_local_file_startContext : ParserRuleContext {
		public ITerminalNode SINGLE_QUOTE() { return GetToken(TSqlParser.SINGLE_QUOTE, 0); }
		public Multiple_local_file_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiple_local_file_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMultiple_local_file_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMultiple_local_file_start(this);
		}
	}

	[RuleVersion(0)]
	public Multiple_local_file_startContext multiple_local_file_start() {
		Multiple_local_file_startContext _localctx = new Multiple_local_file_startContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_multiple_local_file_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1823; Match(SINGLE_QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_assemblyContext : ParserRuleContext {
		public Id_Context assembly_name;
		public Id_Context owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PERMISSION_SET() { return GetToken(TSqlParser.PERMISSION_SET, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] BINARY() { return GetTokens(TSqlParser.BINARY); }
		public ITerminalNode BINARY(int i) {
			return GetToken(TSqlParser.BINARY, i);
		}
		public ITerminalNode SAFE() { return GetToken(TSqlParser.SAFE, 0); }
		public ITerminalNode EXTERNAL_ACCESS() { return GetToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		public ITerminalNode UNSAFE() { return GetToken(TSqlParser.UNSAFE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_assemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_assembly; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_assembly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_assembly(this);
		}
	}

	[RuleVersion(0)]
	public Create_assemblyContext create_assembly() {
		Create_assemblyContext _localctx = new Create_assemblyContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_create_assembly);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1825; Match(CREATE);
			State = 1826; Match(ASSEMBLY);
			State = 1827; _localctx.assembly_name = id_();
			State = 1830;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,84,_ctx) ) {
			case 1:
				{
				State = 1828; Match(AUTHORIZATION);
				State = 1829; _localctx.owner_name = id_();
				}
				break;
			}
			State = 1832; Match(FROM);
			State = 1837;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1834;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,85,_ctx) ) {
					case 1:
						{
						State = 1833; Match(COMMA);
						}
						break;
					}
					State = 1836;
					_la = _input.La(1);
					if ( !(_la==STRING || _la==BINARY) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1839;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,86,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 1845;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				State = 1841; Match(WITH);
				State = 1842; Match(PERMISSION_SET);
				State = 1843; Match(EQUAL);
				State = 1844;
				_la = _input.La(1);
				if ( !(_la==EXTERNAL_ACCESS || _la==SAFE || _la==UNSAFE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_assemblyContext : ParserRuleContext {
		public Id_Context assembly_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode DEPENDENTS() { return GetToken(TSqlParser.DEPENDENTS, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_assemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_assembly; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_assembly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_assembly(this);
		}
	}

	[RuleVersion(0)]
	public Drop_assemblyContext drop_assembly() {
		Drop_assemblyContext _localctx = new Drop_assemblyContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_drop_assembly);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1847; Match(DROP);
			State = 1848; Match(ASSEMBLY);
			State = 1851;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,88,_ctx) ) {
			case 1:
				{
				State = 1849; Match(IF);
				State = 1850; Match(EXISTS);
				}
				break;
			}
			State = 1857;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1854;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,89,_ctx) ) {
					case 1:
						{
						State = 1853; Match(COMMA);
						}
						break;
					}
					State = 1856; _localctx.assembly_name = id_();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1859;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,90,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 1864;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				State = 1861; Match(WITH);
				State = 1862; Match(NO);
				State = 1863; Match(DEPENDENTS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_asymmetric_keyContext : ParserRuleContext {
		public Id_Context Asym_Key_Name;
		public Alter_asymmetric_key_startContext alter_asymmetric_key_start() {
			return GetRuleContext<Alter_asymmetric_key_startContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Asymmetric_key_optionContext asymmetric_key_option() {
			return GetRuleContext<Asymmetric_key_optionContext>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Alter_asymmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_asymmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_asymmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_asymmetric_key(this);
		}
	}

	[RuleVersion(0)]
	public Alter_asymmetric_keyContext alter_asymmetric_key() {
		Alter_asymmetric_keyContext _localctx = new Alter_asymmetric_keyContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_alter_asymmetric_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1866; alter_asymmetric_key_start();
			State = 1867; _localctx.Asym_Key_Name = id_();
			State = 1872;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,92,_ctx) ) {
			case 1:
				{
				State = 1868; asymmetric_key_option();
				}
				break;

			case 2:
				{
				State = 1869; Match(REMOVE);
				State = 1870; Match(PRIVATE);
				State = 1871; Match(KEY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_asymmetric_key_startContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Alter_asymmetric_key_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_asymmetric_key_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_asymmetric_key_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_asymmetric_key_start(this);
		}
	}

	[RuleVersion(0)]
	public Alter_asymmetric_key_startContext alter_asymmetric_key_start() {
		Alter_asymmetric_key_startContext _localctx = new Alter_asymmetric_key_startContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_alter_asymmetric_key_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1874; Match(ALTER);
			State = 1875; Match(ASYMMETRIC);
			State = 1876; Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asymmetric_key_optionContext : ParserRuleContext {
		public Asymmetric_key_option_startContext asymmetric_key_option_start() {
			return GetRuleContext<Asymmetric_key_option_startContext>(0);
		}
		public Asymmetric_key_password_change_optionContext[] asymmetric_key_password_change_option() {
			return GetRuleContexts<Asymmetric_key_password_change_optionContext>();
		}
		public Asymmetric_key_password_change_optionContext asymmetric_key_password_change_option(int i) {
			return GetRuleContext<Asymmetric_key_password_change_optionContext>(i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Asymmetric_key_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asymmetric_key_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAsymmetric_key_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAsymmetric_key_option(this);
		}
	}

	[RuleVersion(0)]
	public Asymmetric_key_optionContext asymmetric_key_option() {
		Asymmetric_key_optionContext _localctx = new Asymmetric_key_optionContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_asymmetric_key_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1878; asymmetric_key_option_start();
			State = 1879; asymmetric_key_password_change_option();
			State = 1882;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				State = 1880; Match(COMMA);
				State = 1881; asymmetric_key_password_change_option();
				}
				break;
			}
			State = 1884; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asymmetric_key_option_startContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Asymmetric_key_option_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asymmetric_key_option_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAsymmetric_key_option_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAsymmetric_key_option_start(this);
		}
	}

	[RuleVersion(0)]
	public Asymmetric_key_option_startContext asymmetric_key_option_start() {
		Asymmetric_key_option_startContext _localctx = new Asymmetric_key_option_startContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_asymmetric_key_option_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1886; Match(WITH);
			State = 1887; Match(PRIVATE);
			State = 1888; Match(KEY);
			State = 1889; Match(LR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asymmetric_key_password_change_optionContext : ParserRuleContext {
		public ITerminalNode DECRYPTION() { return GetToken(TSqlParser.DECRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public Asymmetric_key_password_change_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asymmetric_key_password_change_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAsymmetric_key_password_change_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAsymmetric_key_password_change_option(this);
		}
	}

	[RuleVersion(0)]
	public Asymmetric_key_password_change_optionContext asymmetric_key_password_change_option() {
		Asymmetric_key_password_change_optionContext _localctx = new Asymmetric_key_password_change_optionContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_asymmetric_key_password_change_option);
		try {
			State = 1901;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,94,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1891; Match(DECRYPTION);
				State = 1892; Match(BY);
				State = 1893; Match(PASSWORD);
				State = 1894; Match(EQUAL);
				State = 1895; Match(STRING);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1896; Match(ENCRYPTION);
				State = 1897; Match(BY);
				State = 1898; Match(PASSWORD);
				State = 1899; Match(EQUAL);
				State = 1900; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_asymmetric_keyContext : ParserRuleContext {
		public Id_Context Asym_Key_Nam;
		public Id_Context database_principal_name;
		public Id_Context Assembly_Name;
		public Id_Context Provider_Name;
		public IToken provider_key_name;
		public IToken asymmetric_key_password;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode EXECUTABLE_FILE() { return GetToken(TSqlParser.EXECUTABLE_FILE, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode PROVIDER_KEY_NAME() { return GetToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public ITerminalNode CREATION_DISPOSITION() { return GetToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public ITerminalNode RSA_4096() { return GetToken(TSqlParser.RSA_4096, 0); }
		public ITerminalNode RSA_3072() { return GetToken(TSqlParser.RSA_3072, 0); }
		public ITerminalNode RSA_2048() { return GetToken(TSqlParser.RSA_2048, 0); }
		public ITerminalNode RSA_1024() { return GetToken(TSqlParser.RSA_1024, 0); }
		public ITerminalNode RSA_512() { return GetToken(TSqlParser.RSA_512, 0); }
		public ITerminalNode CREATE_NEW() { return GetToken(TSqlParser.CREATE_NEW, 0); }
		public ITerminalNode OPEN_EXISTING() { return GetToken(TSqlParser.OPEN_EXISTING, 0); }
		public Create_asymmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_asymmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_asymmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_asymmetric_key(this);
		}
	}

	[RuleVersion(0)]
	public Create_asymmetric_keyContext create_asymmetric_key() {
		Create_asymmetric_keyContext _localctx = new Create_asymmetric_keyContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_create_asymmetric_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1903; Match(CREATE);
			State = 1904; Match(ASYMMETRIC);
			State = 1905; Match(KEY);
			State = 1906; _localctx.Asym_Key_Nam = id_();
			State = 1909;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,95,_ctx) ) {
			case 1:
				{
				State = 1907; Match(AUTHORIZATION);
				State = 1908; _localctx.database_principal_name = id_();
				}
				break;
			}
			State = 1924;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,97,_ctx) ) {
			case 1:
				{
				State = 1911; Match(FROM);
				State = 1922;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,96,_ctx) ) {
				case 1:
					{
					State = 1912; Match(FILE);
					State = 1913; Match(EQUAL);
					State = 1914; Match(STRING);
					}
					break;

				case 2:
					{
					State = 1915; Match(EXECUTABLE_FILE);
					State = 1916; Match(EQUAL);
					State = 1917; Match(STRING);
					}
					break;

				case 3:
					{
					State = 1918; Match(ASSEMBLY);
					State = 1919; _localctx.Assembly_Name = id_();
					}
					break;

				case 4:
					{
					State = 1920; Match(PROVIDER);
					State = 1921; _localctx.Provider_Name = id_();
					}
					break;
				}
				}
				break;
			}
			State = 1938;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,99,_ctx) ) {
			case 1:
				{
				State = 1926; Match(WITH);
				State = 1936;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,98,_ctx) ) {
				case 1:
					{
					State = 1927; Match(ALGORITHM);
					State = 1928; Match(EQUAL);
					State = 1929;
					_la = _input.La(1);
					if ( !(((((_la - 835)) & ~0x3f) == 0 && ((1L << (_la - 835)) & ((1L << (RSA_1024 - 835)) | (1L << (RSA_2048 - 835)) | (1L << (RSA_3072 - 835)) | (1L << (RSA_4096 - 835)) | (1L << (RSA_512 - 835)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 2:
					{
					State = 1930; Match(PROVIDER_KEY_NAME);
					State = 1931; Match(EQUAL);
					State = 1932; _localctx.provider_key_name = Match(STRING);
					}
					break;

				case 3:
					{
					State = 1933; Match(CREATION_DISPOSITION);
					State = 1934; Match(EQUAL);
					State = 1935;
					_la = _input.La(1);
					if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;
			}
			State = 1945;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,100,_ctx) ) {
			case 1:
				{
				State = 1940; Match(ENCRYPTION);
				State = 1941; Match(BY);
				State = 1942; Match(PASSWORD);
				State = 1943; Match(EQUAL);
				State = 1944; _localctx.asymmetric_key_password = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_asymmetric_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Drop_asymmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_asymmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_asymmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_asymmetric_key(this);
		}
	}

	[RuleVersion(0)]
	public Drop_asymmetric_keyContext drop_asymmetric_key() {
		Drop_asymmetric_keyContext _localctx = new Drop_asymmetric_keyContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_drop_asymmetric_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1947; Match(DROP);
			State = 1948; Match(ASYMMETRIC);
			State = 1949; Match(KEY);
			State = 1950; _localctx.key_name = id_();
			State = 1954;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,101,_ctx) ) {
			case 1:
				{
				State = 1951; Match(REMOVE);
				State = 1952; Match(PROVIDER);
				State = 1953; Match(KEY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorizationContext : ParserRuleContext {
		public Entity_nameContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return GetRuleContext<Alter_authorization_startContext>(0);
		}
		public Entity_toContext entity_to() {
			return GetRuleContext<Entity_toContext>(0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return GetRuleContext<Authorization_granteeContext>(0);
		}
		public Entity_nameContext entity_name() {
			return GetRuleContext<Entity_nameContext>(0);
		}
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public Colon_colonContext colon_colon() {
			return GetRuleContext<Colon_colonContext>(0);
		}
		public Alter_authorizationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorizationContext alter_authorization() {
		Alter_authorizationContext _localctx = new Alter_authorizationContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_alter_authorization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1956; alter_authorization_start();
			State = 1960;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,102,_ctx) ) {
			case 1:
				{
				State = 1957; class_type();
				State = 1958; colon_colon();
				}
				break;
			}
			State = 1962; _localctx.entity = entity_name();
			State = 1963; entity_to();
			State = 1964; authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Authorization_granteeContext : ParserRuleContext {
		public Id_Context principal_name;
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode OWNER() { return GetToken(TSqlParser.OWNER, 0); }
		public Authorization_granteeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_authorization_grantee; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAuthorization_grantee(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAuthorization_grantee(this);
		}
	}

	[RuleVersion(0)]
	public Authorization_granteeContext authorization_grantee() {
		Authorization_granteeContext _localctx = new Authorization_granteeContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_authorization_grantee);
		try {
			State = 1969;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,103,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1966; _localctx.principal_name = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1967; Match(SCHEMA);
				State = 1968; Match(OWNER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_toContext : ParserRuleContext {
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public Entity_toContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_to; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEntity_to(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEntity_to(this);
		}
	}

	[RuleVersion(0)]
	public Entity_toContext entity_to() {
		Entity_toContext _localctx = new Entity_toContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_entity_to);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1971; Match(TO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Colon_colonContext : ParserRuleContext {
		public ITerminalNode DOUBLE_COLON() { return GetToken(TSqlParser.DOUBLE_COLON, 0); }
		public Colon_colonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colon_colon; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColon_colon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColon_colon(this);
		}
	}

	[RuleVersion(0)]
	public Colon_colonContext colon_colon() {
		Colon_colonContext _localctx = new Colon_colonContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_colon_colon);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1973; Match(DOUBLE_COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorization_startContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Alter_authorization_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization_start(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorization_startContext alter_authorization_start() {
		Alter_authorization_startContext _localctx = new Alter_authorization_startContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_alter_authorization_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1975; Match(ALTER);
			State = 1976; Match(AUTHORIZATION);
			State = 1977; Match(ON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorization_for_sql_databaseContext : ParserRuleContext {
		public Entity_nameContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return GetRuleContext<Alter_authorization_startContext>(0);
		}
		public Entity_toContext entity_to() {
			return GetRuleContext<Entity_toContext>(0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return GetRuleContext<Authorization_granteeContext>(0);
		}
		public Entity_nameContext entity_name() {
			return GetRuleContext<Entity_nameContext>(0);
		}
		public Class_type_for_sql_databaseContext class_type_for_sql_database() {
			return GetRuleContext<Class_type_for_sql_databaseContext>(0);
		}
		public Colon_colonContext colon_colon() {
			return GetRuleContext<Colon_colonContext>(0);
		}
		public Alter_authorization_for_sql_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization_for_sql_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization_for_sql_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization_for_sql_database(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorization_for_sql_databaseContext alter_authorization_for_sql_database() {
		Alter_authorization_for_sql_databaseContext _localctx = new Alter_authorization_for_sql_databaseContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_alter_authorization_for_sql_database);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1979; alter_authorization_start();
			State = 1983;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,104,_ctx) ) {
			case 1:
				{
				State = 1980; class_type_for_sql_database();
				State = 1981; colon_colon();
				}
				break;
			}
			State = 1985; _localctx.entity = entity_name();
			State = 1986; entity_to();
			State = 1987; authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorization_for_azure_dwContext : ParserRuleContext {
		public Entity_name_for_azure_dwContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return GetRuleContext<Alter_authorization_startContext>(0);
		}
		public Entity_toContext entity_to() {
			return GetRuleContext<Entity_toContext>(0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return GetRuleContext<Authorization_granteeContext>(0);
		}
		public Entity_name_for_azure_dwContext entity_name_for_azure_dw() {
			return GetRuleContext<Entity_name_for_azure_dwContext>(0);
		}
		public Class_type_for_azure_dwContext class_type_for_azure_dw() {
			return GetRuleContext<Class_type_for_azure_dwContext>(0);
		}
		public Colon_colonContext colon_colon() {
			return GetRuleContext<Colon_colonContext>(0);
		}
		public Alter_authorization_for_azure_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization_for_azure_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization_for_azure_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization_for_azure_dw(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorization_for_azure_dwContext alter_authorization_for_azure_dw() {
		Alter_authorization_for_azure_dwContext _localctx = new Alter_authorization_for_azure_dwContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_alter_authorization_for_azure_dw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1989; alter_authorization_start();
			State = 1993;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,105,_ctx) ) {
			case 1:
				{
				State = 1990; class_type_for_azure_dw();
				State = 1991; colon_colon();
				}
				break;
			}
			State = 1995; _localctx.entity = entity_name_for_azure_dw();
			State = 1996; entity_to();
			State = 1997; authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorization_for_parallel_dwContext : ParserRuleContext {
		public Entity_name_for_parallel_dwContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return GetRuleContext<Alter_authorization_startContext>(0);
		}
		public Entity_toContext entity_to() {
			return GetRuleContext<Entity_toContext>(0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return GetRuleContext<Authorization_granteeContext>(0);
		}
		public Entity_name_for_parallel_dwContext entity_name_for_parallel_dw() {
			return GetRuleContext<Entity_name_for_parallel_dwContext>(0);
		}
		public Class_type_for_parallel_dwContext class_type_for_parallel_dw() {
			return GetRuleContext<Class_type_for_parallel_dwContext>(0);
		}
		public Colon_colonContext colon_colon() {
			return GetRuleContext<Colon_colonContext>(0);
		}
		public Alter_authorization_for_parallel_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization_for_parallel_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization_for_parallel_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization_for_parallel_dw(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorization_for_parallel_dwContext alter_authorization_for_parallel_dw() {
		Alter_authorization_for_parallel_dwContext _localctx = new Alter_authorization_for_parallel_dwContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_alter_authorization_for_parallel_dw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1999; alter_authorization_start();
			State = 2003;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,106,_ctx) ) {
			case 1:
				{
				State = 2000; class_type_for_parallel_dw();
				State = 2001; colon_colon();
				}
				break;
			}
			State = 2005; _localctx.entity = entity_name_for_parallel_dw();
			State = 2006; entity_to();
			State = 2007; authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_typeContext : ParserRuleContext {
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Class_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type(this);
		}
	}

	[RuleVersion(0)]
	public Class_typeContext class_type() {
		Class_typeContext _localctx = new Class_typeContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_class_type);
		try {
			State = 2043;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,107,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2009; Match(OBJECT);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2010; Match(ASSEMBLY);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2011; Match(ASYMMETRIC);
				State = 2012; Match(KEY);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2013; Match(AVAILABILITY);
				State = 2014; Match(GROUP);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2015; Match(CERTIFICATE);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2016; Match(CONTRACT);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2017; Match(TYPE);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2018; Match(DATABASE);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2019; Match(ENDPOINT);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2020; Match(FULLTEXT);
				State = 2021; Match(CATALOG);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2022; Match(FULLTEXT);
				State = 2023; Match(STOPLIST);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2024; Match(MESSAGE);
				State = 2025; Match(TYPE);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2026; Match(REMOTE);
				State = 2027; Match(SERVICE);
				State = 2028; Match(BINDING);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2029; Match(ROLE);
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2030; Match(ROUTE);
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2031; Match(SCHEMA);
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2032; Match(SEARCH);
				State = 2033; Match(PROPERTY);
				State = 2034; Match(LIST);
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2035; Match(SERVER);
				State = 2036; Match(ROLE);
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2037; Match(SERVICE);
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2038; Match(SYMMETRIC);
				State = 2039; Match(KEY);
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2040; Match(XML);
				State = 2041; Match(SCHEMA);
				State = 2042; Match(COLLECTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_type_for_sql_databaseContext : ParserRuleContext {
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Class_type_for_sql_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type_for_sql_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type_for_sql_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type_for_sql_database(this);
		}
	}

	[RuleVersion(0)]
	public Class_type_for_sql_databaseContext class_type_for_sql_database() {
		Class_type_for_sql_databaseContext _localctx = new Class_type_for_sql_databaseContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_class_type_for_sql_database);
		try {
			State = 2066;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,108,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2045; Match(OBJECT);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2046; Match(ASSEMBLY);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2047; Match(ASYMMETRIC);
				State = 2048; Match(KEY);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2049; Match(CERTIFICATE);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2050; Match(TYPE);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2051; Match(DATABASE);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2052; Match(FULLTEXT);
				State = 2053; Match(CATALOG);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2054; Match(FULLTEXT);
				State = 2055; Match(STOPLIST);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2056; Match(ROLE);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2057; Match(SCHEMA);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2058; Match(SEARCH);
				State = 2059; Match(PROPERTY);
				State = 2060; Match(LIST);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2061; Match(SYMMETRIC);
				State = 2062; Match(KEY);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2063; Match(XML);
				State = 2064; Match(SCHEMA);
				State = 2065; Match(COLLECTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_type_for_azure_dwContext : ParserRuleContext {
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public Class_type_for_azure_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type_for_azure_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type_for_azure_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type_for_azure_dw(this);
		}
	}

	[RuleVersion(0)]
	public Class_type_for_azure_dwContext class_type_for_azure_dw() {
		Class_type_for_azure_dwContext _localctx = new Class_type_for_azure_dwContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_class_type_for_azure_dw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2068;
			_la = _input.La(1);
			if ( !(_la==OBJECT || _la==SCHEMA) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_type_for_parallel_dwContext : ParserRuleContext {
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public Class_type_for_parallel_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type_for_parallel_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type_for_parallel_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type_for_parallel_dw(this);
		}
	}

	[RuleVersion(0)]
	public Class_type_for_parallel_dwContext class_type_for_parallel_dw() {
		Class_type_for_parallel_dwContext _localctx = new Class_type_for_parallel_dwContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_class_type_for_parallel_dw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2070;
			_la = _input.La(1);
			if ( !(_la==DATABASE || _la==OBJECT || _la==SCHEMA) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_type_for_grantContext : ParserRuleContext {
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode BROKER() { return GetToken(TSqlParser.BROKER, 0); }
		public ITerminalNode PRIORITY() { return GetToken(TSqlParser.PRIORITY, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		public ITerminalNode SCOPED() { return GetToken(TSqlParser.SCOPED, 0); }
		public ITerminalNode CONFIGURATION() { return GetToken(TSqlParser.CONFIGURATION, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode GOVERNOR() { return GetToken(TSqlParser.GOVERNOR, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode FORMAT() { return GetToken(TSqlParser.FORMAT, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public ITerminalNode SQL() { return GetToken(TSqlParser.SQL, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Class_type_for_grantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type_for_grant; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type_for_grant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type_for_grant(this);
		}
	}

	[RuleVersion(0)]
	public Class_type_for_grantContext class_type_for_grant() {
		Class_type_for_grantContext _localctx = new Class_type_for_grantContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_class_type_for_grant);
		int _la;
		try {
			State = 2163;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,114,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2072; Match(APPLICATION);
				State = 2073; Match(ROLE);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2074; Match(ASSEMBLY);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2075; Match(ASYMMETRIC);
				State = 2076; Match(KEY);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2077; Match(AUDIT);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2078; Match(AVAILABILITY);
				State = 2079; Match(GROUP);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2080; Match(BROKER);
				State = 2081; Match(PRIORITY);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2082; Match(CERTIFICATE);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2083; Match(COLUMN);
				State = 2084;
				_la = _input.La(1);
				if ( !(_la==ENCRYPTION || _la==MASTER) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2085; Match(KEY);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2086; Match(CONTRACT);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2087; Match(CREDENTIAL);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2088; Match(CRYPTOGRAPHIC);
				State = 2089; Match(PROVIDER);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2090; Match(DATABASE);
				State = 2104;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,110,_ctx) ) {
				case 1:
					{
					State = 2091; Match(AUDIT);
					State = 2092; Match(SPECIFICATION);
					}
					break;

				case 2:
					{
					State = 2093; Match(ENCRYPTION);
					State = 2094; Match(KEY);
					}
					break;

				case 3:
					{
					State = 2095; Match(EVENT);
					State = 2096; Match(SESSION);
					}
					break;

				case 4:
					{
					State = 2097; Match(SCOPED);
					State = 2102;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,109,_ctx) ) {
					case 1:
						{
						State = 2098; Match(CONFIGURATION);
						}
						break;

					case 2:
						{
						State = 2099; Match(CREDENTIAL);
						}
						break;

					case 3:
						{
						State = 2100; Match(RESOURCE);
						State = 2101; Match(GOVERNOR);
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2106; Match(ENDPOINT);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2107; Match(EVENT);
				State = 2108; Match(SESSION);
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2109; Match(NOTIFICATION);
				State = 2110;
				_la = _input.La(1);
				if ( !(_la==DATABASE || _la==OBJECT || _la==SERVER) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2111; Match(EXTERNAL);
				State = 2122;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,111,_ctx) ) {
				case 1:
					{
					State = 2112; Match(DATA);
					State = 2113; Match(SOURCE);
					}
					break;

				case 2:
					{
					State = 2114; Match(FILE);
					State = 2115; Match(FORMAT);
					}
					break;

				case 3:
					{
					State = 2116; Match(LIBRARY);
					}
					break;

				case 4:
					{
					State = 2117; Match(RESOURCE);
					State = 2118; Match(POOL);
					}
					break;

				case 5:
					{
					State = 2119; Match(TABLE);
					}
					break;

				case 6:
					{
					State = 2120; Match(CATALOG);
					}
					break;

				case 7:
					{
					State = 2121; Match(STOPLIST);
					}
					break;
				}
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2124; Match(LOGIN);
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2125; Match(MASTER);
				State = 2126; Match(KEY);
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2127; Match(MESSAGE);
				State = 2128; Match(TYPE);
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2129; Match(OBJECT);
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2130; Match(PARTITION);
				State = 2131;
				_la = _input.La(1);
				if ( !(_la==FUNCTION || _la==SCHEME) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 2132; Match(REMOTE);
				State = 2133; Match(SERVICE);
				State = 2134; Match(BINDING);
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 2135; Match(RESOURCE);
				State = 2136; Match(GOVERNOR);
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 2137; Match(ROLE);
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 2138; Match(ROUTE);
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 2139; Match(SCHEMA);
				}
				break;

			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 2140; Match(SEARCH);
				State = 2141; Match(PROPERTY);
				State = 2142; Match(LIST);
				}
				break;

			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 2143; Match(SERVER);
				State = 2149;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,113,_ctx) ) {
				case 1:
					{
					{
					State = 2144; Match(AUDIT);
					State = 2146;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,112,_ctx) ) {
					case 1:
						{
						State = 2145; Match(SPECIFICATION);
						}
						break;
					}
					}
					}
					break;

				case 2:
					{
					State = 2148; Match(ROLE);
					}
					break;
				}
				}
				break;

			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 2151; Match(SERVICE);
				}
				break;

			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 2152; Match(SQL);
				State = 2153; Match(LOGIN);
				}
				break;

			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 2154; Match(SYMMETRIC);
				State = 2155; Match(KEY);
				}
				break;

			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 2156; Match(TRIGGER);
				State = 2157;
				_la = _input.La(1);
				if ( !(_la==DATABASE || _la==SERVER) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 2158; Match(TYPE);
				}
				break;

			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 2159; Match(USER);
				}
				break;

			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 2160; Match(XML);
				State = 2161; Match(SCHEMA);
				State = 2162; Match(COLLECTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_availability_groupContext : ParserRuleContext {
		public Id_Context group_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_availability_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_availability_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_availability_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_availability_group(this);
		}
	}

	[RuleVersion(0)]
	public Drop_availability_groupContext drop_availability_group() {
		Drop_availability_groupContext _localctx = new Drop_availability_groupContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_drop_availability_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2165; Match(DROP);
			State = 2166; Match(AVAILABILITY);
			State = 2167; Match(GROUP);
			State = 2168; _localctx.group_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_availability_groupContext : ParserRuleContext {
		public Alter_availability_group_startContext alter_availability_group_start() {
			return GetRuleContext<Alter_availability_group_startContext>(0);
		}
		public Alter_availability_group_optionsContext alter_availability_group_options() {
			return GetRuleContext<Alter_availability_group_optionsContext>(0);
		}
		public Alter_availability_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_availability_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_availability_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_availability_group(this);
		}
	}

	[RuleVersion(0)]
	public Alter_availability_groupContext alter_availability_group() {
		Alter_availability_groupContext _localctx = new Alter_availability_groupContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_alter_availability_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2170; alter_availability_group_start();
			State = 2171; alter_availability_group_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_availability_group_startContext : ParserRuleContext {
		public Id_Context group_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Alter_availability_group_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_availability_group_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_availability_group_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_availability_group_start(this);
		}
	}

	[RuleVersion(0)]
	public Alter_availability_group_startContext alter_availability_group_start() {
		Alter_availability_group_startContext _localctx = new Alter_availability_group_startContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_alter_availability_group_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2173; Match(ALTER);
			State = 2174; Match(AVAILABILITY);
			State = 2175; Match(GROUP);
			State = 2176; _localctx.group_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_availability_group_optionsContext : ParserRuleContext {
		public IToken milliseconds;
		public Id_Context database_name;
		public IToken server_instance;
		public IToken session_timeout;
		public IToken ag_name;
		public IToken ag_name_modified;
		public IToken listener_name;
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode AUTOMATED_BACKUP_PREFERENCE() { return GetToken(TSqlParser.AUTOMATED_BACKUP_PREFERENCE, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode FAILURE_CONDITION_LEVEL() { return GetToken(TSqlParser.FAILURE_CONDITION_LEVEL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode HEALTH_CHECK_TIMEOUT() { return GetToken(TSqlParser.HEALTH_CHECK_TIMEOUT, 0); }
		public ITerminalNode DB_FAILOVER() { return GetToken(TSqlParser.DB_FAILOVER, 0); }
		public ITerminalNode REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT() { return GetToken(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0); }
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public ITerminalNode SECONDARY_ONLY() { return GetToken(TSqlParser.SECONDARY_ONLY, 0); }
		public ITerminalNode SECONDARY() { return GetToken(TSqlParser.SECONDARY, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode REPLICA() { return GetToken(TSqlParser.REPLICA, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] WITH() { return GetTokens(TSqlParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(TSqlParser.WITH, i);
		}
		public ITerminalNode ENDPOINT_URL() { return GetToken(TSqlParser.ENDPOINT_URL, 0); }
		public ITerminalNode[] AVAILABILITY_MODE() { return GetTokens(TSqlParser.AVAILABILITY_MODE); }
		public ITerminalNode AVAILABILITY_MODE(int i) {
			return GetToken(TSqlParser.AVAILABILITY_MODE, i);
		}
		public ITerminalNode[] FAILOVER_MODE() { return GetTokens(TSqlParser.FAILOVER_MODE); }
		public ITerminalNode FAILOVER_MODE(int i) {
			return GetToken(TSqlParser.FAILOVER_MODE, i);
		}
		public ITerminalNode[] SEEDING_MODE() { return GetTokens(TSqlParser.SEEDING_MODE); }
		public ITerminalNode SEEDING_MODE(int i) {
			return GetToken(TSqlParser.SEEDING_MODE, i);
		}
		public ITerminalNode BACKUP_PRIORITY() { return GetToken(TSqlParser.BACKUP_PRIORITY, 0); }
		public ITerminalNode PRIMARY_ROLE() { return GetToken(TSqlParser.PRIMARY_ROLE, 0); }
		public ITerminalNode[] ALLOW_CONNECTIONS() { return GetTokens(TSqlParser.ALLOW_CONNECTIONS); }
		public ITerminalNode ALLOW_CONNECTIONS(int i) {
			return GetToken(TSqlParser.ALLOW_CONNECTIONS, i);
		}
		public ITerminalNode SECONDARY_ROLE() { return GetToken(TSqlParser.SECONDARY_ROLE, 0); }
		public ITerminalNode[] SYNCHRONOUS_COMMIT() { return GetTokens(TSqlParser.SYNCHRONOUS_COMMIT); }
		public ITerminalNode SYNCHRONOUS_COMMIT(int i) {
			return GetToken(TSqlParser.SYNCHRONOUS_COMMIT, i);
		}
		public ITerminalNode[] ASYNCHRONOUS_COMMIT() { return GetTokens(TSqlParser.ASYNCHRONOUS_COMMIT); }
		public ITerminalNode ASYNCHRONOUS_COMMIT(int i) {
			return GetToken(TSqlParser.ASYNCHRONOUS_COMMIT, i);
		}
		public ITerminalNode[] AUTOMATIC() { return GetTokens(TSqlParser.AUTOMATIC); }
		public ITerminalNode AUTOMATIC(int i) {
			return GetToken(TSqlParser.AUTOMATIC, i);
		}
		public ITerminalNode[] MANUAL() { return GetTokens(TSqlParser.MANUAL); }
		public ITerminalNode MANUAL(int i) {
			return GetToken(TSqlParser.MANUAL, i);
		}
		public ITerminalNode READ_WRITE() { return GetToken(TSqlParser.READ_WRITE, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode READ_ONLY_ROUTING_LIST() { return GetToken(TSqlParser.READ_ONLY_ROUTING_LIST, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode SESSION_TIMEOUT() { return GetToken(TSqlParser.SESSION_TIMEOUT, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode JOIN() { return GetToken(TSqlParser.JOIN, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode[] LISTENER_URL() { return GetTokens(TSqlParser.LISTENER_URL); }
		public ITerminalNode LISTENER_URL(int i) {
			return GetToken(TSqlParser.LISTENER_URL, i);
		}
		public ITerminalNode GRANT() { return GetToken(TSqlParser.GRANT, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ANY() { return GetToken(TSqlParser.ANY, 0); }
		public ITerminalNode DENY() { return GetToken(TSqlParser.DENY, 0); }
		public ITerminalNode FAILOVER() { return GetToken(TSqlParser.FAILOVER, 0); }
		public ITerminalNode FORCE_FAILOVER_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode LISTENER() { return GetToken(TSqlParser.LISTENER, 0); }
		public ITerminalNode DHCP() { return GetToken(TSqlParser.DHCP, 0); }
		public ITerminalNode IP() { return GetToken(TSqlParser.IP, 0); }
		public Ip_v4_failoverContext[] ip_v4_failover() {
			return GetRuleContexts<Ip_v4_failoverContext>();
		}
		public Ip_v4_failoverContext ip_v4_failover(int i) {
			return GetRuleContext<Ip_v4_failoverContext>(i);
		}
		public ITerminalNode PORT() { return GetToken(TSqlParser.PORT, 0); }
		public Ip_v6_failoverContext[] ip_v6_failover() {
			return GetRuleContexts<Ip_v6_failoverContext>();
		}
		public Ip_v6_failoverContext ip_v6_failover(int i) {
			return GetRuleContext<Ip_v6_failoverContext>(i);
		}
		public ITerminalNode RESTART() { return GetToken(TSqlParser.RESTART, 0); }
		public ITerminalNode OFFLINE() { return GetToken(TSqlParser.OFFLINE, 0); }
		public ITerminalNode DTC_SUPPORT() { return GetToken(TSqlParser.DTC_SUPPORT, 0); }
		public ITerminalNode PER_DB() { return GetToken(TSqlParser.PER_DB, 0); }
		public Alter_availability_group_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_availability_group_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_availability_group_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_availability_group_options(this);
		}
	}

	[RuleVersion(0)]
	public Alter_availability_group_optionsContext alter_availability_group_options() {
		Alter_availability_group_optionsContext _localctx = new Alter_availability_group_optionsContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_alter_availability_group_options);
		int _la;
		try {
			int _alt;
			State = 2533;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,158,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2178; Match(SET);
				State = 2179; Match(LR_BRACKET);
				{
				State = 2195;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,115,_ctx) ) {
				case 1:
					{
					State = 2180; Match(AUTOMATED_BACKUP_PREFERENCE);
					State = 2181; Match(EQUAL);
					State = 2182;
					_la = _input.La(1);
					if ( !(_la==NONE || _la==PRIMARY || _la==SECONDARY || _la==SECONDARY_ONLY) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 2:
					{
					State = 2183; Match(FAILURE_CONDITION_LEVEL);
					State = 2184; Match(EQUAL);
					State = 2185; Match(DECIMAL);
					}
					break;

				case 3:
					{
					State = 2186; Match(HEALTH_CHECK_TIMEOUT);
					State = 2187; Match(EQUAL);
					State = 2188; _localctx.milliseconds = Match(DECIMAL);
					}
					break;

				case 4:
					{
					State = 2189; Match(DB_FAILOVER);
					State = 2190; Match(EQUAL);
					State = 2191;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 5:
					{
					State = 2192; Match(REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT);
					State = 2193; Match(EQUAL);
					State = 2194; Match(DECIMAL);
					}
					break;
				}
				State = 2197; Match(RR_BRACKET);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2198; Match(ADD);
				State = 2199; Match(DATABASE);
				State = 2200; _localctx.database_name = id_();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2201; Match(REMOVE);
				State = 2202; Match(DATABASE);
				State = 2203; _localctx.database_name = id_();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2204; Match(ADD);
				State = 2205; Match(REPLICA);
				State = 2206; Match(ON);
				State = 2207; _localctx.server_instance = Match(STRING);
				{
				State = 2208; Match(WITH);
				State = 2209; Match(LR_BRACKET);
				{
				State = 2213;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,116,_ctx) ) {
				case 1:
					{
					State = 2210; Match(ENDPOINT_URL);
					State = 2211; Match(EQUAL);
					State = 2212; Match(STRING);
					}
					break;
				}
				State = 2221;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,118,_ctx) ) {
				case 1:
					{
					State = 2216;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,117,_ctx) ) {
					case 1:
						{
						State = 2215; Match(COMMA);
						}
						break;
					}
					State = 2218; Match(AVAILABILITY_MODE);
					State = 2219; Match(EQUAL);
					State = 2220;
					_la = _input.La(1);
					if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 2229;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,120,_ctx) ) {
				case 1:
					{
					State = 2224;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,119,_ctx) ) {
					case 1:
						{
						State = 2223; Match(COMMA);
						}
						break;
					}
					State = 2226; Match(FAILOVER_MODE);
					State = 2227; Match(EQUAL);
					State = 2228;
					_la = _input.La(1);
					if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 2237;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,122,_ctx) ) {
				case 1:
					{
					State = 2232;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,121,_ctx) ) {
					case 1:
						{
						State = 2231; Match(COMMA);
						}
						break;
					}
					State = 2234; Match(SEEDING_MODE);
					State = 2235; Match(EQUAL);
					State = 2236;
					_la = _input.La(1);
					if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 2245;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,124,_ctx) ) {
				case 1:
					{
					State = 2240;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,123,_ctx) ) {
					case 1:
						{
						State = 2239; Match(COMMA);
						}
						break;
					}
					State = 2242; Match(BACKUP_PRIORITY);
					State = 2243; Match(EQUAL);
					State = 2244; Match(DECIMAL);
					}
					break;
				}
				State = 2256;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,126,_ctx) ) {
				case 1:
					{
					State = 2248;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,125,_ctx) ) {
					case 1:
						{
						State = 2247; Match(COMMA);
						}
						break;
					}
					State = 2250; Match(PRIMARY_ROLE);
					State = 2251; Match(LR_BRACKET);
					State = 2252; Match(ALLOW_CONNECTIONS);
					State = 2253; Match(EQUAL);
					State = 2254;
					_la = _input.La(1);
					if ( !(_la==ALL || _la==READ_WRITE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 2255; Match(RR_BRACKET);
					}
					break;
				}
				State = 2267;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,128,_ctx) ) {
				case 1:
					{
					State = 2259;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,127,_ctx) ) {
					case 1:
						{
						State = 2258; Match(COMMA);
						}
						break;
					}
					State = 2261; Match(SECONDARY_ROLE);
					State = 2262; Match(LR_BRACKET);
					State = 2263; Match(ALLOW_CONNECTIONS);
					State = 2264; Match(EQUAL);
					{
					State = 2265; Match(READ_ONLY);
					}
					State = 2266; Match(RR_BRACKET);
					}
					break;
				}
				}
				}
				State = 2269; Match(RR_BRACKET);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2270; Match(SECONDARY_ROLE);
				State = 2271; Match(LR_BRACKET);
				State = 2280;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,129,_ctx) ) {
				case 1:
					{
					State = 2272; Match(ALLOW_CONNECTIONS);
					State = 2273; Match(EQUAL);
					State = 2274;
					_la = _input.La(1);
					if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 2:
					{
					State = 2275; Match(READ_ONLY_ROUTING_LIST);
					State = 2276; Match(EQUAL);
					{
					State = 2277; Match(LR_BRACKET);
					{
					{
					State = 2278; Match(STRING);
					}
					}
					State = 2279; Match(RR_BRACKET);
					}
					}
					break;
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2282; Match(PRIMARY_ROLE);
				State = 2283; Match(LR_BRACKET);
				State = 2306;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,133,_ctx) ) {
				case 1:
					{
					State = 2284; Match(ALLOW_CONNECTIONS);
					State = 2285; Match(EQUAL);
					State = 2286;
					_la = _input.La(1);
					if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 2:
					{
					State = 2287; Match(READ_ONLY_ROUTING_LIST);
					State = 2288; Match(EQUAL);
					{
					State = 2289; Match(LR_BRACKET);
					State = 2300;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,132,_ctx) ) {
					case 1:
						{
						State = 2296;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,131,_ctx);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
							if ( _alt==1 ) {
								{
								{
								State = 2291;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,130,_ctx) ) {
								case 1:
									{
									State = 2290; Match(COMMA);
									}
									break;
								}
								State = 2293; Match(STRING);
								}
								} 
							}
							State = 2298;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,131,_ctx);
						}
						}
						break;

					case 2:
						{
						State = 2299; Match(NONE);
						}
						break;
					}
					State = 2302; Match(RR_BRACKET);
					}
					}
					break;

				case 3:
					{
					State = 2303; Match(SESSION_TIMEOUT);
					State = 2304; Match(EQUAL);
					State = 2305; _localctx.session_timeout = Match(DECIMAL);
					}
					break;
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2308; Match(MODIFY);
				State = 2309; Match(REPLICA);
				State = 2310; Match(ON);
				State = 2311; _localctx.server_instance = Match(STRING);
				State = 2369;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,140,_ctx) ) {
				case 1:
					{
					State = 2312; Match(WITH);
					State = 2313; Match(LR_BRACKET);
					State = 2329;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,134,_ctx) ) {
					case 1:
						{
						State = 2314; Match(ENDPOINT_URL);
						State = 2315; Match(EQUAL);
						State = 2316; Match(STRING);
						}
						break;

					case 2:
						{
						State = 2317; Match(AVAILABILITY_MODE);
						State = 2318; Match(EQUAL);
						State = 2319;
						_la = _input.La(1);
						if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 3:
						{
						State = 2320; Match(FAILOVER_MODE);
						State = 2321; Match(EQUAL);
						State = 2322;
						_la = _input.La(1);
						if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 4:
						{
						State = 2323; Match(SEEDING_MODE);
						State = 2324; Match(EQUAL);
						State = 2325;
						_la = _input.La(1);
						if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 5:
						{
						State = 2326; Match(BACKUP_PRIORITY);
						State = 2327; Match(EQUAL);
						State = 2328; Match(DECIMAL);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 2331; Match(SECONDARY_ROLE);
					State = 2332; Match(LR_BRACKET);
					State = 2341;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,135,_ctx) ) {
					case 1:
						{
						State = 2333; Match(ALLOW_CONNECTIONS);
						State = 2334; Match(EQUAL);
						State = 2335;
						_la = _input.La(1);
						if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 2:
						{
						State = 2336; Match(READ_ONLY_ROUTING_LIST);
						State = 2337; Match(EQUAL);
						{
						State = 2338; Match(LR_BRACKET);
						{
						{
						State = 2339; Match(STRING);
						}
						}
						State = 2340; Match(RR_BRACKET);
						}
						}
						break;
					}
					}
					break;

				case 3:
					{
					State = 2343; Match(PRIMARY_ROLE);
					State = 2344; Match(LR_BRACKET);
					State = 2367;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,139,_ctx) ) {
					case 1:
						{
						State = 2345; Match(ALLOW_CONNECTIONS);
						State = 2346; Match(EQUAL);
						State = 2347;
						_la = _input.La(1);
						if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 2:
						{
						State = 2348; Match(READ_ONLY_ROUTING_LIST);
						State = 2349; Match(EQUAL);
						{
						State = 2350; Match(LR_BRACKET);
						State = 2361;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,138,_ctx) ) {
						case 1:
							{
							State = 2357;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,137,_ctx);
							while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
								if ( _alt==1 ) {
									{
									{
									State = 2352;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,136,_ctx) ) {
									case 1:
										{
										State = 2351; Match(COMMA);
										}
										break;
									}
									State = 2354; Match(STRING);
									}
									} 
								}
								State = 2359;
								_errHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(_input,137,_ctx);
							}
							}
							break;

						case 2:
							{
							State = 2360; Match(NONE);
							}
							break;
						}
						State = 2363; Match(RR_BRACKET);
						}
						}
						break;

					case 3:
						{
						State = 2364; Match(SESSION_TIMEOUT);
						State = 2365; Match(EQUAL);
						State = 2366; _localctx.session_timeout = Match(DECIMAL);
						}
						break;
					}
					}
					break;
				}
				State = 2371; Match(RR_BRACKET);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2372; Match(REMOVE);
				State = 2373; Match(REPLICA);
				State = 2374; Match(ON);
				State = 2375; Match(STRING);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2376; Match(JOIN);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2377; Match(JOIN);
				State = 2378; Match(AVAILABILITY);
				State = 2379; Match(GROUP);
				State = 2380; Match(ON);
				State = 2403;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2382;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,141,_ctx) ) {
						case 1:
							{
							State = 2381; Match(COMMA);
							}
							break;
						}
						State = 2384; _localctx.ag_name = Match(STRING);
						State = 2385; Match(WITH);
						State = 2386; Match(LR_BRACKET);
						{
						State = 2387; Match(LISTENER_URL);
						State = 2388; Match(EQUAL);
						State = 2389; Match(STRING);
						State = 2390; Match(COMMA);
						State = 2391; Match(AVAILABILITY_MODE);
						State = 2392; Match(EQUAL);
						State = 2393;
						_la = _input.La(1);
						if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2394; Match(COMMA);
						State = 2395; Match(FAILOVER_MODE);
						State = 2396; Match(EQUAL);
						State = 2397; Match(MANUAL);
						State = 2398; Match(COMMA);
						State = 2399; Match(SEEDING_MODE);
						State = 2400; Match(EQUAL);
						State = 2401;
						_la = _input.La(1);
						if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2402; Match(RR_BRACKET);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2405;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,142,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2407; Match(MODIFY);
				State = 2408; Match(AVAILABILITY);
				State = 2409; Match(GROUP);
				State = 2410; Match(ON);
				State = 2445;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2412;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,143,_ctx) ) {
						case 1:
							{
							State = 2411; Match(COMMA);
							}
							break;
						}
						State = 2414; _localctx.ag_name_modified = Match(STRING);
						State = 2415; Match(WITH);
						State = 2416; Match(LR_BRACKET);
						{
						State = 2417; Match(LISTENER_URL);
						State = 2418; Match(EQUAL);
						State = 2419; Match(STRING);
						State = 2426;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,145,_ctx) ) {
						case 1:
							{
							State = 2421;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,144,_ctx) ) {
							case 1:
								{
								State = 2420; Match(COMMA);
								}
								break;
							}
							State = 2423; Match(AVAILABILITY_MODE);
							State = 2424; Match(EQUAL);
							State = 2425;
							_la = _input.La(1);
							if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;
						}
						State = 2434;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,147,_ctx) ) {
						case 1:
							{
							State = 2429;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,146,_ctx) ) {
							case 1:
								{
								State = 2428; Match(COMMA);
								}
								break;
							}
							State = 2431; Match(FAILOVER_MODE);
							State = 2432; Match(EQUAL);
							State = 2433; Match(MANUAL);
							}
							break;
						}
						State = 2442;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,149,_ctx) ) {
						case 1:
							{
							State = 2437;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,148,_ctx) ) {
							case 1:
								{
								State = 2436; Match(COMMA);
								}
								break;
							}
							State = 2439; Match(SEEDING_MODE);
							State = 2440; Match(EQUAL);
							State = 2441;
							_la = _input.La(1);
							if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;
						}
						State = 2444; Match(RR_BRACKET);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2447;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,150,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2449; Match(GRANT);
				State = 2450; Match(CREATE);
				State = 2451; Match(ANY);
				State = 2452; Match(DATABASE);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2453; Match(DENY);
				State = 2454; Match(CREATE);
				State = 2455; Match(ANY);
				State = 2456; Match(DATABASE);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2457; Match(FAILOVER);
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2458; Match(FORCE_FAILOVER_ALLOW_DATA_LOSS);
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2459; Match(ADD);
				State = 2460; Match(LISTENER);
				State = 2461; _localctx.listener_name = Match(STRING);
				State = 2462; Match(LR_BRACKET);
				State = 2498;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,155,_ctx) ) {
				case 1:
					{
					State = 2463; Match(WITH);
					State = 2464; Match(DHCP);
					{
					State = 2465; Match(ON);
					State = 2466; Match(LR_BRACKET);
					State = 2467; ip_v4_failover();
					State = 2468; ip_v4_failover();
					State = 2469; Match(RR_BRACKET);
					}
					}
					break;

				case 2:
					{
					State = 2471; Match(WITH);
					State = 2472; Match(IP);
					State = 2473; Match(LR_BRACKET);
					{
					State = 2487;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 2475;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,151,_ctx) ) {
							case 1:
								{
								State = 2474; Match(COMMA);
								}
								break;
							}
							State = 2477; Match(LR_BRACKET);
							State = 2483;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,152,_ctx) ) {
							case 1:
								{
								State = 2478; ip_v4_failover();
								State = 2479; Match(COMMA);
								State = 2480; ip_v4_failover();
								}
								break;

							case 2:
								{
								State = 2482; ip_v6_failover();
								}
								break;
							}
							State = 2485; Match(RR_BRACKET);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 2489;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,153,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					State = 2491; Match(RR_BRACKET);
					State = 2496;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,154,_ctx) ) {
					case 1:
						{
						State = 2492; Match(COMMA);
						State = 2493; Match(PORT);
						State = 2494; Match(EQUAL);
						State = 2495; Match(DECIMAL);
						}
						break;
					}
					}
					}
					break;
				}
				State = 2500; Match(RR_BRACKET);
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2502; Match(MODIFY);
				State = 2503; Match(LISTENER);
				State = 2518;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,157,_ctx) ) {
				case 1:
					{
					State = 2504; Match(ADD);
					State = 2505; Match(IP);
					State = 2506; Match(LR_BRACKET);
					State = 2511;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,156,_ctx) ) {
					case 1:
						{
						State = 2507; ip_v4_failover();
						State = 2508; ip_v4_failover();
						}
						break;

					case 2:
						{
						State = 2510; ip_v6_failover();
						}
						break;
					}
					State = 2513; Match(RR_BRACKET);
					}
					break;

				case 2:
					{
					State = 2515; Match(PORT);
					State = 2516; Match(EQUAL);
					State = 2517; Match(DECIMAL);
					}
					break;
				}
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2520; Match(RESTART);
				State = 2521; Match(LISTENER);
				State = 2522; Match(STRING);
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2523; Match(REMOVE);
				State = 2524; Match(LISTENER);
				State = 2525; Match(STRING);
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2526; Match(OFFLINE);
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2527; Match(WITH);
				State = 2528; Match(LR_BRACKET);
				State = 2529; Match(DTC_SUPPORT);
				State = 2530; Match(EQUAL);
				State = 2531; Match(PER_DB);
				State = 2532; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ip_v4_failoverContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Ip_v4_failoverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ip_v4_failover; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIp_v4_failover(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIp_v4_failover(this);
		}
	}

	[RuleVersion(0)]
	public Ip_v4_failoverContext ip_v4_failover() {
		Ip_v4_failoverContext _localctx = new Ip_v4_failoverContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_ip_v4_failover);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2535; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ip_v6_failoverContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Ip_v6_failoverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ip_v6_failover; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIp_v6_failover(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIp_v6_failover(this);
		}
	}

	[RuleVersion(0)]
	public Ip_v6_failoverContext ip_v6_failover() {
		Ip_v6_failoverContext _localctx = new Ip_v6_failoverContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_ip_v6_failover);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2537; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_broker_priorityContext : ParserRuleContext {
		public Id_Context ConversationPriorityName;
		public IToken RemoteServiceName;
		public IToken PriorityValue;
		public ITerminalNode BROKER() { return GetToken(TSqlParser.BROKER, 0); }
		public ITerminalNode PRIORITY() { return GetToken(TSqlParser.PRIORITY, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode CONTRACT_NAME() { return GetToken(TSqlParser.CONTRACT_NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode LOCAL_SERVICE_NAME() { return GetToken(TSqlParser.LOCAL_SERVICE_NAME, 0); }
		public ITerminalNode REMOTE_SERVICE_NAME() { return GetToken(TSqlParser.REMOTE_SERVICE_NAME, 0); }
		public ITerminalNode PRIORITY_LEVEL() { return GetToken(TSqlParser.PRIORITY_LEVEL, 0); }
		public ITerminalNode[] ANY() { return GetTokens(TSqlParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(TSqlParser.ANY, i);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode DOUBLE_FORWARD_SLASH() { return GetToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0); }
		public Create_or_alter_broker_priorityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_broker_priority; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_broker_priority(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_broker_priority(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_broker_priorityContext create_or_alter_broker_priority() {
		Create_or_alter_broker_priorityContext _localctx = new Create_or_alter_broker_priorityContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_create_or_alter_broker_priority);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2539;
			_la = _input.La(1);
			if ( !(_la==ALTER || _la==CREATE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 2540; Match(BROKER);
			State = 2541; Match(PRIORITY);
			State = 2542; _localctx.ConversationPriorityName = id_();
			State = 2543; Match(FOR);
			State = 2544; Match(CONVERSATION);
			State = 2545; Match(SET);
			State = 2546; Match(LR_BRACKET);
			State = 2556;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,161,_ctx) ) {
			case 1:
				{
				State = 2547; Match(CONTRACT_NAME);
				State = 2548; Match(EQUAL);
				State = 2551;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,159,_ctx) ) {
				case 1:
					{
					{
					State = 2549; id_();
					}
					}
					break;

				case 2:
					{
					State = 2550; Match(ANY);
					}
					break;
				}
				State = 2554;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,160,_ctx) ) {
				case 1:
					{
					State = 2553; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 2570;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,165,_ctx) ) {
			case 1:
				{
				State = 2558; Match(LOCAL_SERVICE_NAME);
				State = 2559; Match(EQUAL);
				State = 2565;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,163,_ctx) ) {
				case 1:
					{
					State = 2561;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,162,_ctx) ) {
					case 1:
						{
						State = 2560; Match(DOUBLE_FORWARD_SLASH);
						}
						break;
					}
					State = 2563; id_();
					}
					break;

				case 2:
					{
					State = 2564; Match(ANY);
					}
					break;
				}
				State = 2568;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,164,_ctx) ) {
				case 1:
					{
					State = 2567; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 2581;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,168,_ctx) ) {
			case 1:
				{
				State = 2572; Match(REMOTE_SERVICE_NAME);
				State = 2573; Match(EQUAL);
				State = 2576;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,166,_ctx) ) {
				case 1:
					{
					State = 2574; _localctx.RemoteServiceName = Match(STRING);
					}
					break;

				case 2:
					{
					State = 2575; Match(ANY);
					}
					break;
				}
				State = 2579;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,167,_ctx) ) {
				case 1:
					{
					State = 2578; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 2589;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,170,_ctx) ) {
			case 1:
				{
				State = 2583; Match(PRIORITY_LEVEL);
				State = 2584; Match(EQUAL);
				State = 2587;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,169,_ctx) ) {
				case 1:
					{
					State = 2585; _localctx.PriorityValue = Match(DECIMAL);
					}
					break;

				case 2:
					{
					State = 2586; Match(DEFAULT);
					}
					break;
				}
				}
				break;
			}
			State = 2591; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_broker_priorityContext : ParserRuleContext {
		public Id_Context ConversationPriorityName;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode BROKER() { return GetToken(TSqlParser.BROKER, 0); }
		public ITerminalNode PRIORITY() { return GetToken(TSqlParser.PRIORITY, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_broker_priorityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_broker_priority; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_broker_priority(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_broker_priority(this);
		}
	}

	[RuleVersion(0)]
	public Drop_broker_priorityContext drop_broker_priority() {
		Drop_broker_priorityContext _localctx = new Drop_broker_priorityContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_drop_broker_priority);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2593; Match(DROP);
			State = 2594; Match(BROKER);
			State = 2595; Match(PRIORITY);
			State = 2596; _localctx.ConversationPriorityName = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_certificateContext : ParserRuleContext {
		public Id_Context certificate_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode PRIVATE_KEY() { return GetToken(TSqlParser.PRIVATE_KEY, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode ACTIVE() { return GetToken(TSqlParser.ACTIVE, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode BEGIN_DIALOG() { return GetToken(TSqlParser.BEGIN_DIALOG, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode[] FILE() { return GetTokens(TSqlParser.FILE); }
		public ITerminalNode FILE(int i) {
			return GetToken(TSqlParser.FILE, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] DECRYPTION() { return GetTokens(TSqlParser.DECRYPTION); }
		public ITerminalNode DECRYPTION(int i) {
			return GetToken(TSqlParser.DECRYPTION, i);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public ITerminalNode[] PASSWORD() { return GetTokens(TSqlParser.PASSWORD); }
		public ITerminalNode PASSWORD(int i) {
			return GetToken(TSqlParser.PASSWORD, i);
		}
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_certificateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_certificate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_certificate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_certificate(this);
		}
	}

	[RuleVersion(0)]
	public Alter_certificateContext alter_certificate() {
		Alter_certificateContext _localctx = new Alter_certificateContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_alter_certificate);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2598; Match(ALTER);
			State = 2599; Match(CERTIFICATE);
			State = 2600; _localctx.certificate_name = id_();
			State = 2640;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,176,_ctx) ) {
			case 1:
				{
				State = 2601; Match(REMOVE);
				State = 2602; Match(PRIVATE_KEY);
				}
				break;

			case 2:
				{
				State = 2603; Match(WITH);
				State = 2604; Match(PRIVATE);
				State = 2605; Match(KEY);
				State = 2606; Match(LR_BRACKET);
				State = 2629;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 2629;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,174,_ctx) ) {
						case 1:
							{
							State = 2607; Match(FILE);
							State = 2608; Match(EQUAL);
							State = 2609; Match(STRING);
							State = 2611;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,171,_ctx) ) {
							case 1:
								{
								State = 2610; Match(COMMA);
								}
								break;
							}
							}
							break;

						case 2:
							{
							State = 2613; Match(DECRYPTION);
							State = 2614; Match(BY);
							State = 2615; Match(PASSWORD);
							State = 2616; Match(EQUAL);
							State = 2617; Match(STRING);
							State = 2619;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,172,_ctx) ) {
							case 1:
								{
								State = 2618; Match(COMMA);
								}
								break;
							}
							}
							break;

						case 3:
							{
							State = 2621; Match(ENCRYPTION);
							State = 2622; Match(BY);
							State = 2623; Match(PASSWORD);
							State = 2624; Match(EQUAL);
							State = 2625; Match(STRING);
							State = 2627;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,173,_ctx) ) {
							case 1:
								{
								State = 2626; Match(COMMA);
								}
								break;
							}
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2631;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,175,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 2633; Match(RR_BRACKET);
				}
				break;

			case 3:
				{
				State = 2634; Match(WITH);
				State = 2635; Match(ACTIVE);
				State = 2636; Match(FOR);
				State = 2637; Match(BEGIN_DIALOG);
				State = 2638; Match(EQUAL);
				State = 2639;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_column_encryption_keyContext : ParserRuleContext {
		public Id_Context column_encryption_key;
		public Id_Context column_master_key_name;
		public IToken algorithm_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode COLUMN_MASTER_KEY() { return GetToken(TSqlParser.COLUMN_MASTER_KEY, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode ENCRYPTED_VALUE() { return GetToken(TSqlParser.ENCRYPTED_VALUE, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Alter_column_encryption_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_column_encryption_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_column_encryption_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_column_encryption_key(this);
		}
	}

	[RuleVersion(0)]
	public Alter_column_encryption_keyContext alter_column_encryption_key() {
		Alter_column_encryption_keyContext _localctx = new Alter_column_encryption_keyContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_alter_column_encryption_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2642; Match(ALTER);
			State = 2643; Match(COLUMN);
			State = 2644; Match(ENCRYPTION);
			State = 2645; Match(KEY);
			State = 2646; _localctx.column_encryption_key = id_();
			State = 2647;
			_la = _input.La(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 2648; Match(VALUE);
			State = 2649; Match(LR_BRACKET);
			State = 2650; Match(COLUMN_MASTER_KEY);
			State = 2651; Match(EQUAL);
			State = 2652; _localctx.column_master_key_name = id_();
			State = 2661;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,177,_ctx) ) {
			case 1:
				{
				State = 2653; Match(COMMA);
				State = 2654; Match(ALGORITHM);
				State = 2655; Match(EQUAL);
				State = 2656; _localctx.algorithm_name = Match(STRING);
				State = 2657; Match(COMMA);
				State = 2658; Match(ENCRYPTED_VALUE);
				State = 2659; Match(EQUAL);
				State = 2660; Match(BINARY);
				}
				break;
			}
			State = 2663; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_column_encryption_keyContext : ParserRuleContext {
		public Id_Context column_encryption_key;
		public Id_Context column_master_key_name;
		public IToken algorithm_name;
		public IToken encrypted_value;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] COLUMN_MASTER_KEY() { return GetTokens(TSqlParser.COLUMN_MASTER_KEY); }
		public ITerminalNode COLUMN_MASTER_KEY(int i) {
			return GetToken(TSqlParser.COLUMN_MASTER_KEY, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] ALGORITHM() { return GetTokens(TSqlParser.ALGORITHM); }
		public ITerminalNode ALGORITHM(int i) {
			return GetToken(TSqlParser.ALGORITHM, i);
		}
		public ITerminalNode[] ENCRYPTED_VALUE() { return GetTokens(TSqlParser.ENCRYPTED_VALUE); }
		public ITerminalNode ENCRYPTED_VALUE(int i) {
			return GetToken(TSqlParser.ENCRYPTED_VALUE, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] BINARY() { return GetTokens(TSqlParser.BINARY); }
		public ITerminalNode BINARY(int i) {
			return GetToken(TSqlParser.BINARY, i);
		}
		public Create_column_encryption_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_column_encryption_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_column_encryption_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_column_encryption_key(this);
		}
	}

	[RuleVersion(0)]
	public Create_column_encryption_keyContext create_column_encryption_key() {
		Create_column_encryption_keyContext _localctx = new Create_column_encryption_keyContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_create_column_encryption_key);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2665; Match(CREATE);
			State = 2666; Match(COLUMN);
			State = 2667; Match(ENCRYPTION);
			State = 2668; Match(KEY);
			State = 2669; _localctx.column_encryption_key = id_();
			State = 2670; Match(WITH);
			State = 2671; Match(VALUES);
			State = 2691;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2672; Match(LR_BRACKET);
					State = 2674;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,178,_ctx) ) {
					case 1:
						{
						State = 2673; Match(COMMA);
						}
						break;
					}
					State = 2676; Match(COLUMN_MASTER_KEY);
					State = 2677; Match(EQUAL);
					State = 2678; _localctx.column_master_key_name = id_();
					State = 2679; Match(COMMA);
					State = 2680; Match(ALGORITHM);
					State = 2681; Match(EQUAL);
					State = 2682; _localctx.algorithm_name = Match(STRING);
					State = 2683; Match(COMMA);
					State = 2684; Match(ENCRYPTED_VALUE);
					State = 2685; Match(EQUAL);
					State = 2686; _localctx.encrypted_value = Match(BINARY);
					State = 2687; Match(RR_BRACKET);
					State = 2689;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,179,_ctx) ) {
					case 1:
						{
						State = 2688; Match(COMMA);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2693;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,180,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_certificateContext : ParserRuleContext {
		public Id_Context certificate_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_certificateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_certificate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_certificate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_certificate(this);
		}
	}

	[RuleVersion(0)]
	public Drop_certificateContext drop_certificate() {
		Drop_certificateContext _localctx = new Drop_certificateContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_drop_certificate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2695; Match(DROP);
			State = 2696; Match(CERTIFICATE);
			State = 2697; _localctx.certificate_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_column_encryption_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_column_encryption_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_column_encryption_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_column_encryption_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_column_encryption_key(this);
		}
	}

	[RuleVersion(0)]
	public Drop_column_encryption_keyContext drop_column_encryption_key() {
		Drop_column_encryption_keyContext _localctx = new Drop_column_encryption_keyContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_drop_column_encryption_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2699; Match(DROP);
			State = 2700; Match(COLUMN);
			State = 2701; Match(ENCRYPTION);
			State = 2702; Match(KEY);
			State = 2703; _localctx.key_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_column_master_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_column_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_column_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_column_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_column_master_key(this);
		}
	}

	[RuleVersion(0)]
	public Drop_column_master_keyContext drop_column_master_key() {
		Drop_column_master_keyContext _localctx = new Drop_column_master_keyContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_drop_column_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2705; Match(DROP);
			State = 2706; Match(COLUMN);
			State = 2707; Match(MASTER);
			State = 2708; Match(KEY);
			State = 2709; _localctx.key_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_contractContext : ParserRuleContext {
		public Id_Context dropped_contract_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_contractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_contract; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_contract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_contract(this);
		}
	}

	[RuleVersion(0)]
	public Drop_contractContext drop_contract() {
		Drop_contractContext _localctx = new Drop_contractContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_drop_contract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2711; Match(DROP);
			State = 2712; Match(CONTRACT);
			State = 2713; _localctx.dropped_contract_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_credentialContext : ParserRuleContext {
		public Id_Context credential_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_credentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_credential; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_credential(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_credential(this);
		}
	}

	[RuleVersion(0)]
	public Drop_credentialContext drop_credential() {
		Drop_credentialContext _localctx = new Drop_credentialContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_drop_credential);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2715; Match(DROP);
			State = 2716; Match(CREDENTIAL);
			State = 2717; _localctx.credential_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_cryptograhic_providerContext : ParserRuleContext {
		public Id_Context provider_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_cryptograhic_providerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_cryptograhic_provider; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_cryptograhic_provider(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_cryptograhic_provider(this);
		}
	}

	[RuleVersion(0)]
	public Drop_cryptograhic_providerContext drop_cryptograhic_provider() {
		Drop_cryptograhic_providerContext _localctx = new Drop_cryptograhic_providerContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_drop_cryptograhic_provider);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2719; Match(DROP);
			State = 2720; Match(CRYPTOGRAPHIC);
			State = 2721; Match(PROVIDER);
			State = 2722; _localctx.provider_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_databaseContext : ParserRuleContext {
		public Id_Context database_name_or_database_snapshot_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_database(this);
		}
	}

	[RuleVersion(0)]
	public Drop_databaseContext drop_database() {
		Drop_databaseContext _localctx = new Drop_databaseContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_drop_database);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2724; Match(DROP);
			State = 2725; Match(DATABASE);
			State = 2728;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,181,_ctx) ) {
			case 1:
				{
				State = 2726; Match(IF);
				State = 2727; Match(EXISTS);
				}
				break;
			}
			State = 2734;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2731;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,182,_ctx) ) {
					case 1:
						{
						State = 2730; Match(COMMA);
						}
						break;
					}
					State = 2733; _localctx.database_name_or_database_snapshot_name = id_();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2736;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,183,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_database_audit_specificationContext : ParserRuleContext {
		public Id_Context audit_specification_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_database_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_database_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_database_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_database_audit_specification(this);
		}
	}

	[RuleVersion(0)]
	public Drop_database_audit_specificationContext drop_database_audit_specification() {
		Drop_database_audit_specificationContext _localctx = new Drop_database_audit_specificationContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_drop_database_audit_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2738; Match(DROP);
			State = 2739; Match(DATABASE);
			State = 2740; Match(AUDIT);
			State = 2741; Match(SPECIFICATION);
			State = 2742; _localctx.audit_specification_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_database_encryption_keyContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Drop_database_encryption_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_database_encryption_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_database_encryption_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_database_encryption_key(this);
		}
	}

	[RuleVersion(0)]
	public Drop_database_encryption_keyContext drop_database_encryption_key() {
		Drop_database_encryption_keyContext _localctx = new Drop_database_encryption_keyContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_drop_database_encryption_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2744; Match(DROP);
			State = 2745; Match(DATABASE);
			State = 2746; Match(ENCRYPTION);
			State = 2747; Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_database_scoped_credentialContext : ParserRuleContext {
		public Id_Context credential_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode SCOPED() { return GetToken(TSqlParser.SCOPED, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_database_scoped_credentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_database_scoped_credential; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_database_scoped_credential(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_database_scoped_credential(this);
		}
	}

	[RuleVersion(0)]
	public Drop_database_scoped_credentialContext drop_database_scoped_credential() {
		Drop_database_scoped_credentialContext _localctx = new Drop_database_scoped_credentialContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_drop_database_scoped_credential);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2749; Match(DROP);
			State = 2750; Match(DATABASE);
			State = 2751; Match(SCOPED);
			State = 2752; Match(CREDENTIAL);
			State = 2753; _localctx.credential_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_defaultContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context default_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_default; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_default(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_default(this);
		}
	}

	[RuleVersion(0)]
	public Drop_defaultContext drop_default() {
		Drop_defaultContext _localctx = new Drop_defaultContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_drop_default);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2755; Match(DROP);
			State = 2756; Match(DEFAULT);
			State = 2759;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,184,_ctx) ) {
			case 1:
				{
				State = 2757; Match(IF);
				State = 2758; Match(EXISTS);
				}
				break;
			}
			{
			State = 2762;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,185,_ctx) ) {
			case 1:
				{
				State = 2761; Match(COMMA);
				}
				break;
			}
			State = 2767;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,186,_ctx) ) {
			case 1:
				{
				State = 2764; _localctx.schema_name = id_();
				State = 2765; Match(DOT);
				}
				break;
			}
			State = 2769; _localctx.default_name = id_();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_endpointContext : ParserRuleContext {
		public Id_Context endPointName;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_endpointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_endpoint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_endpoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_endpoint(this);
		}
	}

	[RuleVersion(0)]
	public Drop_endpointContext drop_endpoint() {
		Drop_endpointContext _localctx = new Drop_endpointContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_drop_endpoint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2771; Match(DROP);
			State = 2772; Match(ENDPOINT);
			State = 2773; _localctx.endPointName = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_data_sourceContext : ParserRuleContext {
		public Id_Context external_data_source_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_external_data_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_data_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_data_source(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_data_source(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_data_sourceContext drop_external_data_source() {
		Drop_external_data_sourceContext _localctx = new Drop_external_data_sourceContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_drop_external_data_source);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2775; Match(DROP);
			State = 2776; Match(EXTERNAL);
			State = 2777; Match(DATA);
			State = 2778; Match(SOURCE);
			State = 2779; _localctx.external_data_source_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_file_formatContext : ParserRuleContext {
		public Id_Context external_file_format_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode FORMAT() { return GetToken(TSqlParser.FORMAT, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_external_file_formatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_file_format; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_file_format(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_file_format(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_file_formatContext drop_external_file_format() {
		Drop_external_file_formatContext _localctx = new Drop_external_file_formatContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_drop_external_file_format);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2781; Match(DROP);
			State = 2782; Match(EXTERNAL);
			State = 2783; Match(FILE);
			State = 2784; Match(FORMAT);
			State = 2785; _localctx.external_file_format_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_libraryContext : ParserRuleContext {
		public Id_Context library_name;
		public Id_Context owner_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Drop_external_libraryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_library; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_library(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_library(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_libraryContext drop_external_library() {
		Drop_external_libraryContext _localctx = new Drop_external_libraryContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_drop_external_library);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2787; Match(DROP);
			State = 2788; Match(EXTERNAL);
			State = 2789; Match(LIBRARY);
			State = 2790; _localctx.library_name = id_();
			State = 2793;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,187,_ctx) ) {
			case 1:
				{
				State = 2791; Match(AUTHORIZATION);
				State = 2792; _localctx.owner_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_resource_poolContext : ParserRuleContext {
		public Id_Context pool_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_external_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_resource_pool(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_resource_poolContext drop_external_resource_pool() {
		Drop_external_resource_poolContext _localctx = new Drop_external_resource_poolContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_drop_external_resource_pool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2795; Match(DROP);
			State = 2796; Match(EXTERNAL);
			State = 2797; Match(RESOURCE);
			State = 2798; Match(POOL);
			State = 2799; _localctx.pool_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_tableContext : ParserRuleContext {
		public Id_Context database_name;
		public Id_Context schema_name;
		public Id_Context table;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Drop_external_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_table(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_tableContext drop_external_table() {
		Drop_external_tableContext _localctx = new Drop_external_tableContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_drop_external_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2801; Match(DROP);
			State = 2802; Match(EXTERNAL);
			State = 2803; Match(TABLE);
			State = 2807;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				State = 2804; _localctx.database_name = id_();
				State = 2805; Match(DOT);
				}
				break;
			}
			State = 2812;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,189,_ctx) ) {
			case 1:
				{
				State = 2809; _localctx.schema_name = id_();
				State = 2810; Match(DOT);
				}
				break;
			}
			State = 2814; _localctx.table = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_event_notificationsContext : ParserRuleContext {
		public Id_Context notification_name;
		public Id_Context queue_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_event_notificationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_event_notifications; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_event_notifications(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_event_notifications(this);
		}
	}

	[RuleVersion(0)]
	public Drop_event_notificationsContext drop_event_notifications() {
		Drop_event_notificationsContext _localctx = new Drop_event_notificationsContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_drop_event_notifications);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2816; Match(DROP);
			State = 2817; Match(EVENT);
			State = 2818; Match(NOTIFICATION);
			State = 2823;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2820;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,190,_ctx) ) {
					case 1:
						{
						State = 2819; Match(COMMA);
						}
						break;
					}
					State = 2822; _localctx.notification_name = id_();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2825;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,191,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 2827; Match(ON);
			State = 2832;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,192,_ctx) ) {
			case 1:
				{
				State = 2828; Match(SERVER);
				}
				break;

			case 2:
				{
				State = 2829; Match(DATABASE);
				}
				break;

			case 3:
				{
				State = 2830; Match(QUEUE);
				State = 2831; _localctx.queue_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_event_sessionContext : ParserRuleContext {
		public Id_Context event_session_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_event_sessionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_event_session; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_event_session(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_event_session(this);
		}
	}

	[RuleVersion(0)]
	public Drop_event_sessionContext drop_event_session() {
		Drop_event_sessionContext _localctx = new Drop_event_sessionContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_drop_event_session);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2834; Match(DROP);
			State = 2835; Match(EVENT);
			State = 2836; Match(SESSION);
			State = 2837; _localctx.event_session_name = id_();
			State = 2838; Match(ON);
			State = 2839; Match(SERVER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_fulltext_catalogContext : ParserRuleContext {
		public Id_Context catalog_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_fulltext_catalogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_fulltext_catalog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_fulltext_catalog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_fulltext_catalog(this);
		}
	}

	[RuleVersion(0)]
	public Drop_fulltext_catalogContext drop_fulltext_catalog() {
		Drop_fulltext_catalogContext _localctx = new Drop_fulltext_catalogContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_drop_fulltext_catalog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2841; Match(DROP);
			State = 2842; Match(FULLTEXT);
			State = 2843; Match(CATALOG);
			State = 2844; _localctx.catalog_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_fulltext_indexContext : ParserRuleContext {
		public Id_Context schema;
		public Id_Context table;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_fulltext_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_fulltext_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_fulltext_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_fulltext_index(this);
		}
	}

	[RuleVersion(0)]
	public Drop_fulltext_indexContext drop_fulltext_index() {
		Drop_fulltext_indexContext _localctx = new Drop_fulltext_indexContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_drop_fulltext_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2846; Match(DROP);
			State = 2847; Match(FULLTEXT);
			State = 2848; Match(INDEX);
			State = 2849; Match(ON);
			State = 2853;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,193,_ctx) ) {
			case 1:
				{
				State = 2850; _localctx.schema = id_();
				State = 2851; Match(DOT);
				}
				break;
			}
			State = 2855; _localctx.table = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_fulltext_stoplistContext : ParserRuleContext {
		public Id_Context stoplist_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_fulltext_stoplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_fulltext_stoplist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_fulltext_stoplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_fulltext_stoplist(this);
		}
	}

	[RuleVersion(0)]
	public Drop_fulltext_stoplistContext drop_fulltext_stoplist() {
		Drop_fulltext_stoplistContext _localctx = new Drop_fulltext_stoplistContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_drop_fulltext_stoplist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2857; Match(DROP);
			State = 2858; Match(FULLTEXT);
			State = 2859; Match(STOPLIST);
			State = 2860; _localctx.stoplist_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_loginContext : ParserRuleContext {
		public Id_Context login_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_loginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_login; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_login(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_login(this);
		}
	}

	[RuleVersion(0)]
	public Drop_loginContext drop_login() {
		Drop_loginContext _localctx = new Drop_loginContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_drop_login);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2862; Match(DROP);
			State = 2863; Match(LOGIN);
			State = 2864; _localctx.login_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_master_keyContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Drop_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_master_key(this);
		}
	}

	[RuleVersion(0)]
	public Drop_master_keyContext drop_master_key() {
		Drop_master_keyContext _localctx = new Drop_master_keyContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_drop_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2866; Match(DROP);
			State = 2867; Match(MASTER);
			State = 2868; Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_message_typeContext : ParserRuleContext {
		public Id_Context message_type_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_message_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_message_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_message_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_message_type(this);
		}
	}

	[RuleVersion(0)]
	public Drop_message_typeContext drop_message_type() {
		Drop_message_typeContext _localctx = new Drop_message_typeContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_drop_message_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2870; Match(DROP);
			State = 2871; Match(MESSAGE);
			State = 2872; Match(TYPE);
			State = 2873; _localctx.message_type_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_partition_functionContext : ParserRuleContext {
		public Id_Context partition_function_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_partition_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_partition_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_partition_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_partition_function(this);
		}
	}

	[RuleVersion(0)]
	public Drop_partition_functionContext drop_partition_function() {
		Drop_partition_functionContext _localctx = new Drop_partition_functionContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_drop_partition_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2875; Match(DROP);
			State = 2876; Match(PARTITION);
			State = 2877; Match(FUNCTION);
			State = 2878; _localctx.partition_function_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_partition_schemeContext : ParserRuleContext {
		public Id_Context partition_scheme_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_partition_schemeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_partition_scheme; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_partition_scheme(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_partition_scheme(this);
		}
	}

	[RuleVersion(0)]
	public Drop_partition_schemeContext drop_partition_scheme() {
		Drop_partition_schemeContext _localctx = new Drop_partition_schemeContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_drop_partition_scheme);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2880; Match(DROP);
			State = 2881; Match(PARTITION);
			State = 2882; Match(SCHEME);
			State = 2883; _localctx.partition_scheme_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_queueContext : ParserRuleContext {
		public Id_Context database_name;
		public Id_Context schema_name;
		public Id_Context queue_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Drop_queueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_queue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_queue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_queue(this);
		}
	}

	[RuleVersion(0)]
	public Drop_queueContext drop_queue() {
		Drop_queueContext _localctx = new Drop_queueContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_drop_queue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2885; Match(DROP);
			State = 2886; Match(QUEUE);
			State = 2890;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,194,_ctx) ) {
			case 1:
				{
				State = 2887; _localctx.database_name = id_();
				State = 2888; Match(DOT);
				}
				break;
			}
			State = 2895;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,195,_ctx) ) {
			case 1:
				{
				State = 2892; _localctx.schema_name = id_();
				State = 2893; Match(DOT);
				}
				break;
			}
			State = 2897; _localctx.queue_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_remote_service_bindingContext : ParserRuleContext {
		public Id_Context binding_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_remote_service_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_remote_service_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_remote_service_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_remote_service_binding(this);
		}
	}

	[RuleVersion(0)]
	public Drop_remote_service_bindingContext drop_remote_service_binding() {
		Drop_remote_service_bindingContext _localctx = new Drop_remote_service_bindingContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_drop_remote_service_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2899; Match(DROP);
			State = 2900; Match(REMOTE);
			State = 2901; Match(SERVICE);
			State = 2902; Match(BINDING);
			State = 2903; _localctx.binding_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_resource_poolContext : ParserRuleContext {
		public Id_Context pool_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_resource_pool(this);
		}
	}

	[RuleVersion(0)]
	public Drop_resource_poolContext drop_resource_pool() {
		Drop_resource_poolContext _localctx = new Drop_resource_poolContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_drop_resource_pool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2905; Match(DROP);
			State = 2906; Match(RESOURCE);
			State = 2907; Match(POOL);
			State = 2908; _localctx.pool_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_db_roleContext : ParserRuleContext {
		public Id_Context role_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_db_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_db_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_db_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_db_role(this);
		}
	}

	[RuleVersion(0)]
	public Drop_db_roleContext drop_db_role() {
		Drop_db_roleContext _localctx = new Drop_db_roleContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_drop_db_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2910; Match(DROP);
			State = 2911; Match(ROLE);
			State = 2914;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				State = 2912; Match(IF);
				State = 2913; Match(EXISTS);
				}
				break;
			}
			State = 2916; _localctx.role_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_routeContext : ParserRuleContext {
		public Id_Context route_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_routeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_route; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_route(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_route(this);
		}
	}

	[RuleVersion(0)]
	public Drop_routeContext drop_route() {
		Drop_routeContext _localctx = new Drop_routeContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_drop_route);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2918; Match(DROP);
			State = 2919; Match(ROUTE);
			State = 2920; _localctx.route_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_ruleContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context rule_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode RULE() { return GetToken(TSqlParser.RULE, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_rule; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_rule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_rule(this);
		}
	}

	[RuleVersion(0)]
	public Drop_ruleContext drop_rule() {
		Drop_ruleContext _localctx = new Drop_ruleContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_drop_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2922; Match(DROP);
			State = 2923; Match(RULE);
			State = 2926;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,197,_ctx) ) {
			case 1:
				{
				State = 2924; Match(IF);
				State = 2925; Match(EXISTS);
				}
				break;
			}
			State = 2937;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,200,_ctx) ) {
			case 1:
				{
				State = 2929;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,198,_ctx) ) {
				case 1:
					{
					State = 2928; Match(COMMA);
					}
					break;
				}
				State = 2934;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,199,_ctx) ) {
				case 1:
					{
					State = 2931; _localctx.schema_name = id_();
					State = 2932; Match(DOT);
					}
					break;
				}
				State = 2936; _localctx.rule_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_schemaContext : ParserRuleContext {
		public Id_Context schema_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_schema(this);
		}
	}

	[RuleVersion(0)]
	public Drop_schemaContext drop_schema() {
		Drop_schemaContext _localctx = new Drop_schemaContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_drop_schema);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2939; Match(DROP);
			State = 2940; Match(SCHEMA);
			State = 2943;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,201,_ctx) ) {
			case 1:
				{
				State = 2941; Match(IF);
				State = 2942; Match(EXISTS);
				}
				break;
			}
			State = 2945; _localctx.schema_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_search_property_listContext : ParserRuleContext {
		public Id_Context property_list_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_search_property_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_search_property_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_search_property_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_search_property_list(this);
		}
	}

	[RuleVersion(0)]
	public Drop_search_property_listContext drop_search_property_list() {
		Drop_search_property_listContext _localctx = new Drop_search_property_listContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_drop_search_property_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2947; Match(DROP);
			State = 2948; Match(SEARCH);
			State = 2949; Match(PROPERTY);
			State = 2950; Match(LIST);
			State = 2951; _localctx.property_list_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_security_policyContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context security_policy_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SECURITY() { return GetToken(TSqlParser.SECURITY, 0); }
		public ITerminalNode POLICY() { return GetToken(TSqlParser.POLICY, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_security_policyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_security_policy; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_security_policy(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_security_policy(this);
		}
	}

	[RuleVersion(0)]
	public Drop_security_policyContext drop_security_policy() {
		Drop_security_policyContext _localctx = new Drop_security_policyContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_drop_security_policy);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2953; Match(DROP);
			State = 2954; Match(SECURITY);
			State = 2955; Match(POLICY);
			State = 2958;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,202,_ctx) ) {
			case 1:
				{
				State = 2956; Match(IF);
				State = 2957; Match(EXISTS);
				}
				break;
			}
			State = 2963;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,203,_ctx) ) {
			case 1:
				{
				State = 2960; _localctx.schema_name = id_();
				State = 2961; Match(DOT);
				}
				break;
			}
			State = 2965; _localctx.security_policy_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_sequenceContext : ParserRuleContext {
		public Id_Context database_name;
		public Id_Context schema_name;
		public Id_Context sequence_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_sequence; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_sequence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_sequence(this);
		}
	}

	[RuleVersion(0)]
	public Drop_sequenceContext drop_sequence() {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_drop_sequence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2967; Match(DROP);
			State = 2968; Match(SEQUENCE);
			State = 2971;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,204,_ctx) ) {
			case 1:
				{
				State = 2969; Match(IF);
				State = 2970; Match(EXISTS);
				}
				break;
			}
			State = 2987;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,208,_ctx) ) {
			case 1:
				{
				State = 2974;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,205,_ctx) ) {
				case 1:
					{
					State = 2973; Match(COMMA);
					}
					break;
				}
				State = 2979;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,206,_ctx) ) {
				case 1:
					{
					State = 2976; _localctx.database_name = id_();
					State = 2977; Match(DOT);
					}
					break;
				}
				State = 2984;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,207,_ctx) ) {
				case 1:
					{
					State = 2981; _localctx.schema_name = id_();
					State = 2982; Match(DOT);
					}
					break;
				}
				State = 2986; _localctx.sequence_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_server_auditContext : ParserRuleContext {
		public Id_Context audit_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_server_auditContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_server_audit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_server_audit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_server_audit(this);
		}
	}

	[RuleVersion(0)]
	public Drop_server_auditContext drop_server_audit() {
		Drop_server_auditContext _localctx = new Drop_server_auditContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_drop_server_audit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2989; Match(DROP);
			State = 2990; Match(SERVER);
			State = 2991; Match(AUDIT);
			State = 2992; _localctx.audit_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_server_audit_specificationContext : ParserRuleContext {
		public Id_Context audit_specification_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_server_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_server_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_server_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_server_audit_specification(this);
		}
	}

	[RuleVersion(0)]
	public Drop_server_audit_specificationContext drop_server_audit_specification() {
		Drop_server_audit_specificationContext _localctx = new Drop_server_audit_specificationContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_drop_server_audit_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2994; Match(DROP);
			State = 2995; Match(SERVER);
			State = 2996; Match(AUDIT);
			State = 2997; Match(SPECIFICATION);
			State = 2998; _localctx.audit_specification_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_server_roleContext : ParserRuleContext {
		public Id_Context role_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_server_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_server_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_server_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_server_role(this);
		}
	}

	[RuleVersion(0)]
	public Drop_server_roleContext drop_server_role() {
		Drop_server_roleContext _localctx = new Drop_server_roleContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_drop_server_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3000; Match(DROP);
			State = 3001; Match(SERVER);
			State = 3002; Match(ROLE);
			State = 3003; _localctx.role_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_serviceContext : ParserRuleContext {
		public Id_Context dropped_service_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_serviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_service; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_service(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_service(this);
		}
	}

	[RuleVersion(0)]
	public Drop_serviceContext drop_service() {
		Drop_serviceContext _localctx = new Drop_serviceContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_drop_service);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3005; Match(DROP);
			State = 3006; Match(SERVICE);
			State = 3007; _localctx.dropped_service_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_signatureContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context module_name;
		public Id_Context cert_name;
		public Id_Context Asym_key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SIGNATURE() { return GetToken(TSqlParser.SIGNATURE, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode COUNTER() { return GetToken(TSqlParser.COUNTER, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode[] CERTIFICATE() { return GetTokens(TSqlParser.CERTIFICATE); }
		public ITerminalNode CERTIFICATE(int i) {
			return GetToken(TSqlParser.CERTIFICATE, i);
		}
		public ITerminalNode[] ASYMMETRIC() { return GetTokens(TSqlParser.ASYMMETRIC); }
		public ITerminalNode ASYMMETRIC(int i) {
			return GetToken(TSqlParser.ASYMMETRIC, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_signature(this);
		}
	}

	[RuleVersion(0)]
	public Drop_signatureContext drop_signature() {
		Drop_signatureContext _localctx = new Drop_signatureContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_drop_signature);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3009; Match(DROP);
			State = 3011;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,209,_ctx) ) {
			case 1:
				{
				State = 3010; Match(COUNTER);
				}
				break;
			}
			State = 3013; Match(SIGNATURE);
			State = 3014; Match(FROM);
			State = 3018;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,210,_ctx) ) {
			case 1:
				{
				State = 3015; _localctx.schema_name = id_();
				State = 3016; Match(DOT);
				}
				break;
			}
			State = 3020; _localctx.module_name = id_();
			State = 3021; Match(BY);
			State = 3033;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 3033;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,213,_ctx) ) {
					case 1:
						{
						State = 3023;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,211,_ctx) ) {
						case 1:
							{
							State = 3022; Match(COMMA);
							}
							break;
						}
						State = 3025; Match(CERTIFICATE);
						State = 3026; _localctx.cert_name = id_();
						}
						break;

					case 2:
						{
						State = 3028;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,212,_ctx) ) {
						case 1:
							{
							State = 3027; Match(COMMA);
							}
							break;
						}
						State = 3030; Match(ASYMMETRIC);
						State = 3031; Match(KEY);
						State = 3032; _localctx.Asym_key_name = id_();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3035;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,214,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_statistics_name_azure_dw_and_pdwContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context object_name;
		public Id_Context statistics_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Drop_statistics_name_azure_dw_and_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_statistics_name_azure_dw_and_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_statistics_name_azure_dw_and_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_statistics_name_azure_dw_and_pdw(this);
		}
	}

	[RuleVersion(0)]
	public Drop_statistics_name_azure_dw_and_pdwContext drop_statistics_name_azure_dw_and_pdw() {
		Drop_statistics_name_azure_dw_and_pdwContext _localctx = new Drop_statistics_name_azure_dw_and_pdwContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_drop_statistics_name_azure_dw_and_pdw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3037; Match(DROP);
			State = 3038; Match(STATISTICS);
			State = 3042;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,215,_ctx) ) {
			case 1:
				{
				State = 3039; _localctx.schema_name = id_();
				State = 3040; Match(DOT);
				}
				break;
			}
			State = 3044; _localctx.object_name = id_();
			State = 3045; Match(DOT);
			State = 3046; _localctx.statistics_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_symmetric_keyContext : ParserRuleContext {
		public Id_Context symmetric_key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Drop_symmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_symmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_symmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_symmetric_key(this);
		}
	}

	[RuleVersion(0)]
	public Drop_symmetric_keyContext drop_symmetric_key() {
		Drop_symmetric_keyContext _localctx = new Drop_symmetric_keyContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_drop_symmetric_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3048; Match(DROP);
			State = 3049; Match(SYMMETRIC);
			State = 3050; Match(KEY);
			State = 3051; _localctx.symmetric_key_name = id_();
			State = 3055;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,216,_ctx) ) {
			case 1:
				{
				State = 3052; Match(REMOVE);
				State = 3053; Match(PROVIDER);
				State = 3054; Match(KEY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_synonymContext : ParserRuleContext {
		public Id_Context schema;
		public Id_Context synonym_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SYNONYM() { return GetToken(TSqlParser.SYNONYM, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_synonymContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_synonym; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_synonym(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_synonym(this);
		}
	}

	[RuleVersion(0)]
	public Drop_synonymContext drop_synonym() {
		Drop_synonymContext _localctx = new Drop_synonymContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_drop_synonym);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3057; Match(DROP);
			State = 3058; Match(SYNONYM);
			State = 3061;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,217,_ctx) ) {
			case 1:
				{
				State = 3059; Match(IF);
				State = 3060; Match(EXISTS);
				}
				break;
			}
			State = 3066;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,218,_ctx) ) {
			case 1:
				{
				State = 3063; _localctx.schema = id_();
				State = 3064; Match(DOT);
				}
				break;
			}
			State = 3068; _localctx.synonym_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_userContext : ParserRuleContext {
		public Id_Context user_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_userContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_user; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_user(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_user(this);
		}
	}

	[RuleVersion(0)]
	public Drop_userContext drop_user() {
		Drop_userContext _localctx = new Drop_userContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_drop_user);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3070; Match(DROP);
			State = 3071; Match(USER);
			State = 3074;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,219,_ctx) ) {
			case 1:
				{
				State = 3072; Match(IF);
				State = 3073; Match(EXISTS);
				}
				break;
			}
			State = 3076; _localctx.user_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_workload_groupContext : ParserRuleContext {
		public Id_Context group_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode WORKLOAD() { return GetToken(TSqlParser.WORKLOAD, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_workload_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_workload_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_workload_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_workload_group(this);
		}
	}

	[RuleVersion(0)]
	public Drop_workload_groupContext drop_workload_group() {
		Drop_workload_groupContext _localctx = new Drop_workload_groupContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_drop_workload_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3078; Match(DROP);
			State = 3079; Match(WORKLOAD);
			State = 3080; Match(GROUP);
			State = 3081; _localctx.group_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_xml_schema_collectionContext : ParserRuleContext {
		public Id_Context relational_schema;
		public Id_Context sql_identifier;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_xml_schema_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_xml_schema_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_xml_schema_collection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_xml_schema_collection(this);
		}
	}

	[RuleVersion(0)]
	public Drop_xml_schema_collectionContext drop_xml_schema_collection() {
		Drop_xml_schema_collectionContext _localctx = new Drop_xml_schema_collectionContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_drop_xml_schema_collection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3083; Match(DROP);
			State = 3084; Match(XML);
			State = 3085; Match(SCHEMA);
			State = 3086; Match(COLLECTION);
			State = 3090;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,220,_ctx) ) {
			case 1:
				{
				State = 3087; _localctx.relational_schema = id_();
				State = 3088; Match(DOT);
				}
				break;
			}
			State = 3092; _localctx.sql_identifier = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Disable_triggerContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context trigger_name;
		public Id_Context schema_id;
		public Id_Context object_name;
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Disable_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disable_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDisable_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDisable_trigger(this);
		}
	}

	[RuleVersion(0)]
	public Disable_triggerContext disable_trigger() {
		Disable_triggerContext _localctx = new Disable_triggerContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_disable_trigger);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3094; Match(DISABLE);
			State = 3095; Match(TRIGGER);
			State = 3110;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,224,_ctx) ) {
			case 1:
				{
				State = 3105;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3097;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,221,_ctx) ) {
						case 1:
							{
							State = 3096; Match(COMMA);
							}
							break;
						}
						State = 3102;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,222,_ctx) ) {
						case 1:
							{
							State = 3099; _localctx.schema_name = id_();
							State = 3100; Match(DOT);
							}
							break;
						}
						State = 3104; _localctx.trigger_name = id_();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3107;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,223,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				{
				State = 3109; Match(ALL);
				}
				break;
			}
			State = 3112; Match(ON);
			State = 3122;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,226,_ctx) ) {
			case 1:
				{
				State = 3116;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,225,_ctx) ) {
				case 1:
					{
					State = 3113; _localctx.schema_id = id_();
					State = 3114; Match(DOT);
					}
					break;
				}
				State = 3118; _localctx.object_name = id_();
				}
				break;

			case 2:
				{
				State = 3119; Match(DATABASE);
				}
				break;

			case 3:
				{
				State = 3120; Match(ALL);
				State = 3121; Match(SERVER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enable_triggerContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context trigger_name;
		public Id_Context schema_id;
		public Id_Context object_name;
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Enable_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enable_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEnable_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEnable_trigger(this);
		}
	}

	[RuleVersion(0)]
	public Enable_triggerContext enable_trigger() {
		Enable_triggerContext _localctx = new Enable_triggerContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_enable_trigger);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3124; Match(ENABLE);
			State = 3125; Match(TRIGGER);
			State = 3140;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,230,_ctx) ) {
			case 1:
				{
				State = 3135;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3127;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,227,_ctx) ) {
						case 1:
							{
							State = 3126; Match(COMMA);
							}
							break;
						}
						State = 3132;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,228,_ctx) ) {
						case 1:
							{
							State = 3129; _localctx.schema_name = id_();
							State = 3130; Match(DOT);
							}
							break;
						}
						State = 3134; _localctx.trigger_name = id_();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3137;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,229,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				{
				State = 3139; Match(ALL);
				}
				break;
			}
			State = 3142; Match(ON);
			State = 3152;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,232,_ctx) ) {
			case 1:
				{
				State = 3146;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,231,_ctx) ) {
				case 1:
					{
					State = 3143; _localctx.schema_id = id_();
					State = 3144; Match(DOT);
					}
					break;
				}
				State = 3148; _localctx.object_name = id_();
				}
				break;

			case 2:
				{
				State = 3149; Match(DATABASE);
				}
				break;

			case 3:
				{
				State = 3150; Match(ALL);
				State = 3151; Match(SERVER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lock_tableContext : ParserRuleContext {
		public IToken seconds;
		public ITerminalNode LOCK() { return GetToken(TSqlParser.LOCK, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public ITerminalNode MODE() { return GetToken(TSqlParser.MODE, 0); }
		public ITerminalNode SHARE() { return GetToken(TSqlParser.SHARE, 0); }
		public ITerminalNode EXCLUSIVE() { return GetToken(TSqlParser.EXCLUSIVE, 0); }
		public ITerminalNode WAIT() { return GetToken(TSqlParser.WAIT, 0); }
		public ITerminalNode NOWAIT() { return GetToken(TSqlParser.NOWAIT, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Lock_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLock_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLock_table(this);
		}
	}

	[RuleVersion(0)]
	public Lock_tableContext lock_table() {
		Lock_tableContext _localctx = new Lock_tableContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_lock_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3154; Match(LOCK);
			State = 3155; Match(TABLE);
			State = 3156; table_name();
			State = 3157; Match(IN);
			State = 3158;
			_la = _input.La(1);
			if ( !(_la==EXCLUSIVE || _la==SHARE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 3159; Match(MODE);
			State = 3163;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,233,_ctx) ) {
			case 1:
				{
				State = 3160; Match(WAIT);
				State = 3161; _localctx.seconds = Match(DECIMAL);
				}
				break;

			case 2:
				{
				State = 3162; Match(NOWAIT);
				}
				break;
			}
			State = 3166;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,234,_ctx) ) {
			case 1:
				{
				State = 3165; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Truncate_tableContext : ParserRuleContext {
		public ITerminalNode TRUNCATE() { return GetToken(TSqlParser.TRUNCATE, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode PARTITIONS() { return GetToken(TSqlParser.PARTITIONS, 0); }
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Truncate_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncate_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTruncate_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTruncate_table(this);
		}
	}

	[RuleVersion(0)]
	public Truncate_tableContext truncate_table() {
		Truncate_tableContext _localctx = new Truncate_tableContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_truncate_table);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3168; Match(TRUNCATE);
			State = 3169; Match(TABLE);
			State = 3170; table_name();
			State = 3190;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,238,_ctx) ) {
			case 1:
				{
				State = 3171; Match(WITH);
				State = 3172; Match(LR_BRACKET);
				State = 3173; Match(PARTITIONS);
				State = 3174; Match(LR_BRACKET);
				State = 3184;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3176;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,235,_ctx) ) {
						case 1:
							{
							State = 3175; Match(COMMA);
							}
							break;
						}
						State = 3182;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,236,_ctx) ) {
						case 1:
							{
							State = 3178; Match(DECIMAL);
							}
							break;

						case 2:
							{
							State = 3179; Match(DECIMAL);
							State = 3180; Match(TO);
							State = 3181; Match(DECIMAL);
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3186;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,237,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 3188; Match(RR_BRACKET);
				State = 3189; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_column_master_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public IToken key_store_provider_name;
		public IToken key_path;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode KEY_STORE_PROVIDER_NAME() { return GetToken(TSqlParser.KEY_STORE_PROVIDER_NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode KEY_PATH() { return GetToken(TSqlParser.KEY_PATH, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Create_column_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_column_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_column_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_column_master_key(this);
		}
	}

	[RuleVersion(0)]
	public Create_column_master_keyContext create_column_master_key() {
		Create_column_master_keyContext _localctx = new Create_column_master_keyContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_create_column_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3192; Match(CREATE);
			State = 3193; Match(COLUMN);
			State = 3194; Match(MASTER);
			State = 3195; Match(KEY);
			State = 3196; _localctx.key_name = id_();
			State = 3197; Match(WITH);
			State = 3198; Match(LR_BRACKET);
			State = 3199; Match(KEY_STORE_PROVIDER_NAME);
			State = 3200; Match(EQUAL);
			State = 3201; _localctx.key_store_provider_name = Match(STRING);
			State = 3202; Match(COMMA);
			State = 3203; Match(KEY_PATH);
			State = 3204; Match(EQUAL);
			State = 3205; _localctx.key_path = Match(STRING);
			State = 3206; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_credentialContext : ParserRuleContext {
		public Id_Context credential_name;
		public IToken identity_name;
		public IToken secret;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode SECRET() { return GetToken(TSqlParser.SECRET, 0); }
		public Alter_credentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_credential; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_credential(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_credential(this);
		}
	}

	[RuleVersion(0)]
	public Alter_credentialContext alter_credential() {
		Alter_credentialContext _localctx = new Alter_credentialContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_alter_credential);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3208; Match(ALTER);
			State = 3209; Match(CREDENTIAL);
			State = 3210; _localctx.credential_name = id_();
			State = 3211; Match(WITH);
			State = 3212; Match(IDENTITY);
			State = 3213; Match(EQUAL);
			State = 3214; _localctx.identity_name = Match(STRING);
			State = 3219;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,239,_ctx) ) {
			case 1:
				{
				State = 3215; Match(COMMA);
				State = 3216; Match(SECRET);
				State = 3217; Match(EQUAL);
				State = 3218; _localctx.secret = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_credentialContext : ParserRuleContext {
		public Id_Context credential_name;
		public IToken identity_name;
		public IToken secret;
		public Id_Context cryptographic_provider_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode SECRET() { return GetToken(TSqlParser.SECRET, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Create_credentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_credential; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_credential(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_credential(this);
		}
	}

	[RuleVersion(0)]
	public Create_credentialContext create_credential() {
		Create_credentialContext _localctx = new Create_credentialContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_create_credential);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3221; Match(CREATE);
			State = 3222; Match(CREDENTIAL);
			State = 3223; _localctx.credential_name = id_();
			State = 3224; Match(WITH);
			State = 3225; Match(IDENTITY);
			State = 3226; Match(EQUAL);
			State = 3227; _localctx.identity_name = Match(STRING);
			State = 3232;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,240,_ctx) ) {
			case 1:
				{
				State = 3228; Match(COMMA);
				State = 3229; Match(SECRET);
				State = 3230; Match(EQUAL);
				State = 3231; _localctx.secret = Match(STRING);
				}
				break;
			}
			State = 3238;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,241,_ctx) ) {
			case 1:
				{
				State = 3234; Match(FOR);
				State = 3235; Match(CRYPTOGRAPHIC);
				State = 3236; Match(PROVIDER);
				State = 3237; _localctx.cryptographic_provider_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_cryptographic_providerContext : ParserRuleContext {
		public Id_Context provider_name;
		public IToken crypto_provider_ddl_file;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public Alter_cryptographic_providerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_cryptographic_provider; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_cryptographic_provider(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_cryptographic_provider(this);
		}
	}

	[RuleVersion(0)]
	public Alter_cryptographic_providerContext alter_cryptographic_provider() {
		Alter_cryptographic_providerContext _localctx = new Alter_cryptographic_providerContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_alter_cryptographic_provider);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3240; Match(ALTER);
			State = 3241; Match(CRYPTOGRAPHIC);
			State = 3242; Match(PROVIDER);
			State = 3243; _localctx.provider_name = id_();
			State = 3248;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,242,_ctx) ) {
			case 1:
				{
				State = 3244; Match(FROM);
				State = 3245; Match(FILE);
				State = 3246; Match(EQUAL);
				State = 3247; _localctx.crypto_provider_ddl_file = Match(STRING);
				}
				break;
			}
			State = 3251;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,243,_ctx) ) {
			case 1:
				{
				State = 3250;
				_la = _input.La(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_cryptographic_providerContext : ParserRuleContext {
		public Id_Context provider_name;
		public IToken path_of_DLL;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Create_cryptographic_providerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_cryptographic_provider; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_cryptographic_provider(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_cryptographic_provider(this);
		}
	}

	[RuleVersion(0)]
	public Create_cryptographic_providerContext create_cryptographic_provider() {
		Create_cryptographic_providerContext _localctx = new Create_cryptographic_providerContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_create_cryptographic_provider);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3253; Match(CREATE);
			State = 3254; Match(CRYPTOGRAPHIC);
			State = 3255; Match(PROVIDER);
			State = 3256; _localctx.provider_name = id_();
			State = 3257; Match(FROM);
			State = 3258; Match(FILE);
			State = 3259; Match(EQUAL);
			State = 3260; _localctx.path_of_DLL = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_endpointContext : ParserRuleContext {
		public Id_Context endpointname;
		public Id_Context login;
		public IToken state;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode TCP() { return GetToken(TSqlParser.TCP, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public Endpoint_listener_clauseContext endpoint_listener_clause() {
			return GetRuleContext<Endpoint_listener_clauseContext>(0);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode TSQL() { return GetToken(TSqlParser.TSQL, 0); }
		public ITerminalNode SERVICE_BROKER() { return GetToken(TSqlParser.SERVICE_BROKER, 0); }
		public Endpoint_authentication_clauseContext endpoint_authentication_clause() {
			return GetRuleContext<Endpoint_authentication_clauseContext>(0);
		}
		public ITerminalNode DATABASE_MIRRORING() { return GetToken(TSqlParser.DATABASE_MIRRORING, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode WITNESS() { return GetToken(TSqlParser.WITNESS, 0); }
		public ITerminalNode PARTNER() { return GetToken(TSqlParser.PARTNER, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode STARTED() { return GetToken(TSqlParser.STARTED, 0); }
		public ITerminalNode STOPPED() { return GetToken(TSqlParser.STOPPED, 0); }
		public ITerminalNode[] DISABLED() { return GetTokens(TSqlParser.DISABLED); }
		public ITerminalNode DISABLED(int i) {
			return GetToken(TSqlParser.DISABLED, i);
		}
		public Endpoint_encryption_alogorithm_clauseContext endpoint_encryption_alogorithm_clause() {
			return GetRuleContext<Endpoint_encryption_alogorithm_clauseContext>(0);
		}
		public ITerminalNode MESSAGE_FORWARDING() { return GetToken(TSqlParser.MESSAGE_FORWARDING, 0); }
		public ITerminalNode MESSAGE_FORWARD_SIZE() { return GetToken(TSqlParser.MESSAGE_FORWARD_SIZE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode ENABLED() { return GetToken(TSqlParser.ENABLED, 0); }
		public Create_endpointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_endpoint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_endpoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_endpoint(this);
		}
	}

	[RuleVersion(0)]
	public Create_endpointContext create_endpoint() {
		Create_endpointContext _localctx = new Create_endpointContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_create_endpoint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3262; Match(CREATE);
			State = 3263; Match(ENDPOINT);
			State = 3264; _localctx.endpointname = id_();
			State = 3267;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,244,_ctx) ) {
			case 1:
				{
				State = 3265; Match(AUTHORIZATION);
				State = 3266; _localctx.login = id_();
				}
				break;
			}
			State = 3272;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,245,_ctx) ) {
			case 1:
				{
				State = 3269; Match(STATE);
				State = 3270; Match(EQUAL);
				State = 3271;
				_localctx.state = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==DISABLED || _la==STARTED || _la==STOPPED) ) {
					_localctx.state = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 3274; Match(AS);
			State = 3275; Match(TCP);
			State = 3276; Match(LR_BRACKET);
			State = 3277; endpoint_listener_clause();
			State = 3278; Match(RR_BRACKET);
			State = 3329;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,255,_ctx) ) {
			case 1:
				{
				State = 3279; Match(FOR);
				State = 3280; Match(TSQL);
				State = 3281; Match(LR_BRACKET);
				State = 3282; Match(RR_BRACKET);
				}
				break;

			case 2:
				{
				State = 3283; Match(FOR);
				State = 3284; Match(SERVICE_BROKER);
				State = 3285; Match(LR_BRACKET);
				State = 3286; endpoint_authentication_clause();
				State = 3291;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,247,_ctx) ) {
				case 1:
					{
					State = 3288;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,246,_ctx) ) {
					case 1:
						{
						State = 3287; Match(COMMA);
						}
						break;
					}
					State = 3290; endpoint_encryption_alogorithm_clause();
					}
					break;
				}
				State = 3299;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,249,_ctx) ) {
				case 1:
					{
					State = 3294;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,248,_ctx) ) {
					case 1:
						{
						State = 3293; Match(COMMA);
						}
						break;
					}
					State = 3296; Match(MESSAGE_FORWARDING);
					State = 3297; Match(EQUAL);
					State = 3298;
					_la = _input.La(1);
					if ( !(_la==DISABLED || _la==ENABLED) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3307;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,251,_ctx) ) {
				case 1:
					{
					State = 3302;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,250,_ctx) ) {
					case 1:
						{
						State = 3301; Match(COMMA);
						}
						break;
					}
					State = 3304; Match(MESSAGE_FORWARD_SIZE);
					State = 3305; Match(EQUAL);
					State = 3306; Match(DECIMAL);
					}
					break;
				}
				State = 3309; Match(RR_BRACKET);
				}
				break;

			case 3:
				{
				State = 3311; Match(FOR);
				State = 3312; Match(DATABASE_MIRRORING);
				State = 3313; Match(LR_BRACKET);
				State = 3314; endpoint_authentication_clause();
				State = 3319;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,253,_ctx) ) {
				case 1:
					{
					State = 3316;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,252,_ctx) ) {
					case 1:
						{
						State = 3315; Match(COMMA);
						}
						break;
					}
					State = 3318; endpoint_encryption_alogorithm_clause();
					}
					break;
				}
				State = 3322;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,254,_ctx) ) {
				case 1:
					{
					State = 3321; Match(COMMA);
					}
					break;
				}
				State = 3324; Match(ROLE);
				State = 3325; Match(EQUAL);
				State = 3326;
				_la = _input.La(1);
				if ( !(_la==ALL || _la==PARTNER || _la==WITNESS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 3327; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Endpoint_encryption_alogorithm_clauseContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DISABLED() { return GetToken(TSqlParser.DISABLED, 0); }
		public ITerminalNode SUPPORTED() { return GetToken(TSqlParser.SUPPORTED, 0); }
		public ITerminalNode REQUIRED() { return GetToken(TSqlParser.REQUIRED, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode AES() { return GetToken(TSqlParser.AES, 0); }
		public ITerminalNode RC4() { return GetToken(TSqlParser.RC4, 0); }
		public Endpoint_encryption_alogorithm_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpoint_encryption_alogorithm_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEndpoint_encryption_alogorithm_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEndpoint_encryption_alogorithm_clause(this);
		}
	}

	[RuleVersion(0)]
	public Endpoint_encryption_alogorithm_clauseContext endpoint_encryption_alogorithm_clause() {
		Endpoint_encryption_alogorithm_clauseContext _localctx = new Endpoint_encryption_alogorithm_clauseContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_endpoint_encryption_alogorithm_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3331; Match(ENCRYPTION);
			State = 3332; Match(EQUAL);
			State = 3333;
			_la = _input.La(1);
			if ( !(_la==DISABLED || _la==REQUIRED || _la==SUPPORTED) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 3345;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,259,_ctx) ) {
			case 1:
				{
				State = 3334; Match(ALGORITHM);
				State = 3343;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,258,_ctx) ) {
				case 1:
					{
					State = 3335; Match(AES);
					State = 3337;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,256,_ctx) ) {
					case 1:
						{
						State = 3336; Match(RC4);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 3339; Match(RC4);
					State = 3341;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,257,_ctx) ) {
					case 1:
						{
						State = 3340; Match(AES);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Endpoint_authentication_clauseContext : ParserRuleContext {
		public Id_Context cert_name;
		public ITerminalNode AUTHENTICATION() { return GetToken(TSqlParser.AUTHENTICATION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode NTLM() { return GetToken(TSqlParser.NTLM, 0); }
		public ITerminalNode KERBEROS() { return GetToken(TSqlParser.KERBEROS, 0); }
		public ITerminalNode NEGOTIATE() { return GetToken(TSqlParser.NEGOTIATE, 0); }
		public Endpoint_authentication_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpoint_authentication_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEndpoint_authentication_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEndpoint_authentication_clause(this);
		}
	}

	[RuleVersion(0)]
	public Endpoint_authentication_clauseContext endpoint_authentication_clause() {
		Endpoint_authentication_clauseContext _localctx = new Endpoint_authentication_clauseContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_endpoint_authentication_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3347; Match(AUTHENTICATION);
			State = 3348; Match(EQUAL);
			State = 3365;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,264,_ctx) ) {
			case 1:
				{
				State = 3349; Match(WINDOWS);
				State = 3351;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,260,_ctx) ) {
				case 1:
					{
					State = 3350;
					_la = _input.La(1);
					if ( !(_la==KERBEROS || _la==NEGOTIATE || _la==NTLM) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3355;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,261,_ctx) ) {
				case 1:
					{
					State = 3353; Match(CERTIFICATE);
					State = 3354; _localctx.cert_name = id_();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 3357; Match(CERTIFICATE);
				State = 3358; _localctx.cert_name = id_();
				State = 3360;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,262,_ctx) ) {
				case 1:
					{
					State = 3359; Match(WINDOWS);
					}
					break;
				}
				State = 3363;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,263,_ctx) ) {
				case 1:
					{
					State = 3362;
					_la = _input.La(1);
					if ( !(_la==KERBEROS || _la==NEGOTIATE || _la==NTLM) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Endpoint_listener_clauseContext : ParserRuleContext {
		public IToken port;
		public IToken ipv4;
		public IToken ipv6;
		public ITerminalNode LISTENER_PORT() { return GetToken(TSqlParser.LISTENER_PORT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode LISTENER_IP() { return GetToken(TSqlParser.LISTENER_IP, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode IPV4_ADDR() { return GetToken(TSqlParser.IPV4_ADDR, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Endpoint_listener_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpoint_listener_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEndpoint_listener_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEndpoint_listener_clause(this);
		}
	}

	[RuleVersion(0)]
	public Endpoint_listener_clauseContext endpoint_listener_clause() {
		Endpoint_listener_clauseContext _localctx = new Endpoint_listener_clauseContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_endpoint_listener_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3367; Match(LISTENER_PORT);
			State = 3368; Match(EQUAL);
			State = 3369; _localctx.port = Match(DECIMAL);
			State = 3382;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,267,_ctx) ) {
			case 1:
				{
				State = 3370; Match(COMMA);
				State = 3371; Match(LISTENER_IP);
				State = 3372; Match(EQUAL);
				State = 3380;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,266,_ctx) ) {
				case 1:
					{
					State = 3373; Match(ALL);
					}
					break;

				case 2:
					{
					State = 3374; Match(LR_BRACKET);
					State = 3377;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,265,_ctx) ) {
					case 1:
						{
						State = 3375; _localctx.ipv4 = Match(IPV4_ADDR);
						}
						break;

					case 2:
						{
						State = 3376; _localctx.ipv6 = Match(STRING);
						}
						break;
					}
					State = 3379; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_event_notificationContext : ParserRuleContext {
		public Id_Context event_notification_name;
		public Id_Context queue_name;
		public Id_Context event_type_or_group;
		public IToken broker_service;
		public IToken broker_service_specifier_or_current_database;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FAN_IN() { return GetToken(TSqlParser.FAN_IN, 0); }
		public Create_event_notificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_event_notification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_event_notification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_event_notification(this);
		}
	}

	[RuleVersion(0)]
	public Create_event_notificationContext create_event_notification() {
		Create_event_notificationContext _localctx = new Create_event_notificationContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_create_event_notification);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3384; Match(CREATE);
			State = 3385; Match(EVENT);
			State = 3386; Match(NOTIFICATION);
			State = 3387; _localctx.event_notification_name = id_();
			State = 3388; Match(ON);
			State = 3393;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,268,_ctx) ) {
			case 1:
				{
				State = 3389; Match(SERVER);
				}
				break;

			case 2:
				{
				State = 3390; Match(DATABASE);
				}
				break;

			case 3:
				{
				State = 3391; Match(QUEUE);
				State = 3392; _localctx.queue_name = id_();
				}
				break;
			}
			State = 3397;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,269,_ctx) ) {
			case 1:
				{
				State = 3395; Match(WITH);
				State = 3396; Match(FAN_IN);
				}
				break;
			}
			State = 3399; Match(FOR);
			State = 3404;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 3401;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,270,_ctx) ) {
					case 1:
						{
						State = 3400; Match(COMMA);
						}
						break;
					}
					State = 3403; _localctx.event_type_or_group = id_();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3406;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,271,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 3408; Match(TO);
			State = 3409; Match(SERVICE);
			State = 3410; _localctx.broker_service = Match(STRING);
			State = 3411; Match(COMMA);
			State = 3412; _localctx.broker_service_specifier_or_current_database = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_event_sessionContext : ParserRuleContext {
		public Id_Context event_session_name;
		public Id_Context event_module_guid;
		public Id_Context event_package_name;
		public Id_Context event_name;
		public Id_Context event_customizable_attributue;
		public Id_Context action_name;
		public Id_Context target_name;
		public Id_Context target_parameter_name;
		public IToken max_memory;
		public IToken max_dispatch_latency_seconds;
		public IToken max_event_size;
		public ITerminalNode[] EVENT() { return GetTokens(TSqlParser.EVENT); }
		public ITerminalNode EVENT(int i) {
			return GetToken(TSqlParser.EVENT, i);
		}
		public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		public ITerminalNode[] DROP() { return GetTokens(TSqlParser.DROP); }
		public ITerminalNode DROP(int i) {
			return GetToken(TSqlParser.DROP, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode[] TARGET() { return GetTokens(TSqlParser.TARGET); }
		public ITerminalNode TARGET(int i) {
			return GetToken(TSqlParser.TARGET, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode START() { return GetToken(TSqlParser.START, 0); }
		public ITerminalNode STOP() { return GetToken(TSqlParser.STOP, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] SET() { return GetTokens(TSqlParser.SET); }
		public ITerminalNode SET(int i) {
			return GetToken(TSqlParser.SET, i);
		}
		public ITerminalNode MAX_MEMORY() { return GetToken(TSqlParser.MAX_MEMORY, 0); }
		public ITerminalNode EVENT_RETENTION_MODE() { return GetToken(TSqlParser.EVENT_RETENTION_MODE, 0); }
		public ITerminalNode MAX_DISPATCH_LATENCY() { return GetToken(TSqlParser.MAX_DISPATCH_LATENCY, 0); }
		public ITerminalNode MAX_EVENT_SIZE() { return GetToken(TSqlParser.MAX_EVENT_SIZE, 0); }
		public ITerminalNode MEMORY_PARTITION_MODE() { return GetToken(TSqlParser.MEMORY_PARTITION_MODE, 0); }
		public ITerminalNode TRACK_CAUSALITY() { return GetToken(TSqlParser.TRACK_CAUSALITY, 0); }
		public ITerminalNode STARTUP_STATE() { return GetToken(TSqlParser.STARTUP_STATE, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] KB() { return GetTokens(TSqlParser.KB); }
		public ITerminalNode KB(int i) {
			return GetToken(TSqlParser.KB, i);
		}
		public ITerminalNode[] MB() { return GetTokens(TSqlParser.MB); }
		public ITerminalNode MB(int i) {
			return GetToken(TSqlParser.MB, i);
		}
		public ITerminalNode ALLOW_SINGLE_EVENT_LOSS() { return GetToken(TSqlParser.ALLOW_SINGLE_EVENT_LOSS, 0); }
		public ITerminalNode ALLOW_MULTIPLE_EVENT_LOSS() { return GetToken(TSqlParser.ALLOW_MULTIPLE_EVENT_LOSS, 0); }
		public ITerminalNode NO_EVENT_LOSS() { return GetToken(TSqlParser.NO_EVENT_LOSS, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode PER_NODE() { return GetToken(TSqlParser.PER_NODE, 0); }
		public ITerminalNode PER_CPU() { return GetToken(TSqlParser.PER_CPU, 0); }
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode SECONDS() { return GetToken(TSqlParser.SECONDS, 0); }
		public ITerminalNode INFINITE() { return GetToken(TSqlParser.INFINITE, 0); }
		public ITerminalNode[] ACTION() { return GetTokens(TSqlParser.ACTION); }
		public ITerminalNode ACTION(int i) {
			return GetToken(TSqlParser.ACTION, i);
		}
		public ITerminalNode[] WHERE() { return GetTokens(TSqlParser.WHERE); }
		public ITerminalNode WHERE(int i) {
			return GetToken(TSqlParser.WHERE, i);
		}
		public Event_session_predicate_expressionContext[] event_session_predicate_expression() {
			return GetRuleContexts<Event_session_predicate_expressionContext>();
		}
		public Event_session_predicate_expressionContext event_session_predicate_expression(int i) {
			return GetRuleContext<Event_session_predicate_expressionContext>(i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Create_or_alter_event_sessionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_event_session; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_event_session(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_event_session(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_event_sessionContext create_or_alter_event_session() {
		Create_or_alter_event_sessionContext _localctx = new Create_or_alter_event_sessionContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_create_or_alter_event_session);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3414;
			_la = _input.La(1);
			if ( !(_la==ALTER || _la==CREATE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 3415; Match(EVENT);
			State = 3416; Match(SESSION);
			State = 3417; _localctx.event_session_name = id_();
			State = 3418; Match(ON);
			State = 3419; Match(SERVER);
			State = 3487;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,283,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 3421;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,272,_ctx) ) {
					case 1:
						{
						State = 3420; Match(COMMA);
						}
						break;
					}
					State = 3423; Match(ADD);
					State = 3424; Match(EVENT);
					{
					State = 3428;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,273,_ctx) ) {
					case 1:
						{
						State = 3425; _localctx.event_module_guid = id_();
						State = 3426; Match(DOT);
						}
						break;
					}
					State = 3430; _localctx.event_package_name = id_();
					State = 3431; Match(DOT);
					State = 3432; _localctx.event_name = id_();
					}
					State = 3482;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,282,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 3434; Match(LR_BRACKET);
							State = 3448;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,276,_ctx) ) {
							case 1:
								{
								State = 3435; Match(SET);
								State = 3445;
								_errHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(_input,275,_ctx);
								while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
									if ( _alt==1 ) {
										{
										{
										State = 3437;
										_errHandler.Sync(this);
										switch ( Interpreter.AdaptivePredict(_input,274,_ctx) ) {
										case 1:
											{
											State = 3436; Match(COMMA);
											}
											break;
										}
										State = 3439; _localctx.event_customizable_attributue = id_();
										State = 3440; Match(EQUAL);
										State = 3441;
										_la = _input.La(1);
										if ( !(_la==DECIMAL || _la==STRING) ) {
										_errHandler.RecoverInline(this);
										} else {
											if (_input.La(1) == TokenConstants.Eof) {
												matchedEOF = true;
											}

											_errHandler.ReportMatch(this);
											Consume();
										}
										}
										} 
									}
									State = 3447;
									_errHandler.Sync(this);
									_alt = Interpreter.AdaptivePredict(_input,275,_ctx);
								}
								}
								break;
							}
							State = 3470;
							_errHandler.Sync(this);
							_alt = 1;
							do {
								switch (_alt) {
								case 1:
									{
									{
									State = 3450; Match(ACTION);
									State = 3451; Match(LR_BRACKET);
									State = 3464;
									_errHandler.Sync(this);
									_alt = 1;
									do {
										switch (_alt) {
										case 1:
											{
											{
											State = 3453;
											_errHandler.Sync(this);
											switch ( Interpreter.AdaptivePredict(_input,277,_ctx) ) {
											case 1:
												{
												State = 3452; Match(COMMA);
												}
												break;
											}
											State = 3458;
											_errHandler.Sync(this);
											switch ( Interpreter.AdaptivePredict(_input,278,_ctx) ) {
											case 1:
												{
												State = 3455; _localctx.event_module_guid = id_();
												State = 3456; Match(DOT);
												}
												break;
											}
											State = 3460; _localctx.event_package_name = id_();
											State = 3461; Match(DOT);
											State = 3462; _localctx.action_name = id_();
											}
											}
											break;
										default:
											throw new NoViableAltException(this);
										}
										State = 3466;
										_errHandler.Sync(this);
										_alt = Interpreter.AdaptivePredict(_input,279,_ctx);
									} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
									State = 3468; Match(RR_BRACKET);
									}
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								State = 3472;
								_errHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(_input,280,_ctx);
							} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
							State = 3476;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,281,_ctx) ) {
							case 1:
								{
								State = 3474; Match(WHERE);
								State = 3475; event_session_predicate_expression();
								}
								break;
							}
							State = 3478; Match(RR_BRACKET);
							}
							} 
						}
						State = 3484;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,282,_ctx);
					}
					}
					} 
				}
				State = 3489;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,283,_ctx);
			}
			State = 3506;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,286,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 3491;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,284,_ctx) ) {
					case 1:
						{
						State = 3490; Match(COMMA);
						}
						break;
					}
					State = 3493; Match(DROP);
					State = 3494; Match(EVENT);
					State = 3498;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,285,_ctx) ) {
					case 1:
						{
						State = 3495; _localctx.event_module_guid = id_();
						State = 3496; Match(DOT);
						}
						break;
					}
					State = 3500; _localctx.event_package_name = id_();
					State = 3501; Match(DOT);
					State = 3502; _localctx.event_name = id_();
					}
					} 
				}
				State = 3508;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,286,_ctx);
			}
			State = 3550;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,294,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					{
					State = 3509; Match(ADD);
					State = 3510; Match(TARGET);
					State = 3514;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,287,_ctx) ) {
					case 1:
						{
						State = 3511; _localctx.event_module_guid = id_();
						State = 3512; Match(DOT);
						}
						break;
					}
					State = 3516; _localctx.event_package_name = id_();
					State = 3517; Match(DOT);
					State = 3518; _localctx.target_name = id_();
					}
					State = 3545;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,293,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 3520; Match(LR_BRACKET);
							State = 3521; Match(SET);
							State = 3537;
							_errHandler.Sync(this);
							_alt = 1;
							do {
								switch (_alt) {
								case 1:
									{
									{
									State = 3523;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,288,_ctx) ) {
									case 1:
										{
										State = 3522; Match(COMMA);
										}
										break;
									}
									State = 3525; _localctx.target_parameter_name = id_();
									State = 3526; Match(EQUAL);
									State = 3535;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,291,_ctx) ) {
									case 1:
										{
										State = 3528;
										_errHandler.Sync(this);
										switch ( Interpreter.AdaptivePredict(_input,289,_ctx) ) {
										case 1:
											{
											State = 3527; Match(LR_BRACKET);
											}
											break;
										}
										State = 3530; Match(DECIMAL);
										State = 3532;
										_errHandler.Sync(this);
										switch ( Interpreter.AdaptivePredict(_input,290,_ctx) ) {
										case 1:
											{
											State = 3531; Match(RR_BRACKET);
											}
											break;
										}
										}
										break;

									case 2:
										{
										State = 3534; Match(STRING);
										}
										break;
									}
									}
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								State = 3539;
								_errHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(_input,292,_ctx);
							} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
							State = 3541; Match(RR_BRACKET);
							}
							} 
						}
						State = 3547;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,293,_ctx);
					}
					}
					} 
				}
				State = 3552;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,294,_ctx);
			}
			State = 3566;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,296,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 3553; Match(DROP);
					State = 3554; Match(TARGET);
					State = 3558;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,295,_ctx) ) {
					case 1:
						{
						State = 3555; _localctx.event_module_guid = id_();
						State = 3556; Match(DOT);
						}
						break;
					}
					State = 3560; _localctx.event_package_name = id_();
					State = 3561; Match(DOT);
					State = 3562; _localctx.target_name = id_();
					}
					} 
				}
				State = 3568;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,296,_ctx);
			}
			State = 3634;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,312,_ctx) ) {
			case 1:
				{
				State = 3569; Match(WITH);
				State = 3570; Match(LR_BRACKET);
				State = 3578;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,298,_ctx) ) {
				case 1:
					{
					State = 3572;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,297,_ctx) ) {
					case 1:
						{
						State = 3571; Match(COMMA);
						}
						break;
					}
					State = 3574; Match(MAX_MEMORY);
					State = 3575; Match(EQUAL);
					State = 3576; _localctx.max_memory = Match(DECIMAL);
					State = 3577;
					_la = _input.La(1);
					if ( !(_la==KB || _la==MB) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3586;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,300,_ctx) ) {
				case 1:
					{
					State = 3581;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,299,_ctx) ) {
					case 1:
						{
						State = 3580; Match(COMMA);
						}
						break;
					}
					State = 3583; Match(EVENT_RETENTION_MODE);
					State = 3584; Match(EQUAL);
					State = 3585;
					_la = _input.La(1);
					if ( !(_la==ALLOW_MULTIPLE_EVENT_LOSS || _la==ALLOW_SINGLE_EVENT_LOSS || _la==NO_EVENT_LOSS) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3598;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,303,_ctx) ) {
				case 1:
					{
					State = 3589;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,301,_ctx) ) {
					case 1:
						{
						State = 3588; Match(COMMA);
						}
						break;
					}
					State = 3591; Match(MAX_DISPATCH_LATENCY);
					State = 3592; Match(EQUAL);
					State = 3596;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,302,_ctx) ) {
					case 1:
						{
						State = 3593; _localctx.max_dispatch_latency_seconds = Match(DECIMAL);
						State = 3594; Match(SECONDS);
						}
						break;

					case 2:
						{
						State = 3595; Match(INFINITE);
						}
						break;
					}
					}
					break;
				}
				State = 3607;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,305,_ctx) ) {
				case 1:
					{
					State = 3601;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,304,_ctx) ) {
					case 1:
						{
						State = 3600; Match(COMMA);
						}
						break;
					}
					State = 3603; Match(MAX_EVENT_SIZE);
					State = 3604; Match(EQUAL);
					State = 3605; _localctx.max_event_size = Match(DECIMAL);
					State = 3606;
					_la = _input.La(1);
					if ( !(_la==KB || _la==MB) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3615;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,307,_ctx) ) {
				case 1:
					{
					State = 3610;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,306,_ctx) ) {
					case 1:
						{
						State = 3609; Match(COMMA);
						}
						break;
					}
					State = 3612; Match(MEMORY_PARTITION_MODE);
					State = 3613; Match(EQUAL);
					State = 3614;
					_la = _input.La(1);
					if ( !(_la==NONE || _la==PER_CPU || _la==PER_NODE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3623;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,309,_ctx) ) {
				case 1:
					{
					State = 3618;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,308,_ctx) ) {
					case 1:
						{
						State = 3617; Match(COMMA);
						}
						break;
					}
					State = 3620; Match(TRACK_CAUSALITY);
					State = 3621; Match(EQUAL);
					State = 3622;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3631;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,311,_ctx) ) {
				case 1:
					{
					State = 3626;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,310,_ctx) ) {
					case 1:
						{
						State = 3625; Match(COMMA);
						}
						break;
					}
					State = 3628; Match(STARTUP_STATE);
					State = 3629; Match(EQUAL);
					State = 3630;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3633; Match(RR_BRACKET);
				}
				break;
			}
			State = 3639;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,313,_ctx) ) {
			case 1:
				{
				State = 3636; Match(STATE);
				State = 3637; Match(EQUAL);
				State = 3638;
				_la = _input.La(1);
				if ( !(_la==START || _la==STOP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_session_predicate_expressionContext : ParserRuleContext {
		public Event_session_predicate_factorContext[] event_session_predicate_factor() {
			return GetRuleContexts<Event_session_predicate_factorContext>();
		}
		public Event_session_predicate_factorContext event_session_predicate_factor(int i) {
			return GetRuleContext<Event_session_predicate_factorContext>(i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public Event_session_predicate_expressionContext[] event_session_predicate_expression() {
			return GetRuleContexts<Event_session_predicate_expressionContext>();
		}
		public Event_session_predicate_expressionContext event_session_predicate_expression(int i) {
			return GetRuleContext<Event_session_predicate_expressionContext>(i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] NOT() { return GetTokens(TSqlParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(TSqlParser.NOT, i);
		}
		public ITerminalNode[] AND() { return GetTokens(TSqlParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(TSqlParser.AND, i);
		}
		public ITerminalNode[] OR() { return GetTokens(TSqlParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(TSqlParser.OR, i);
		}
		public Event_session_predicate_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_session_predicate_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEvent_session_predicate_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEvent_session_predicate_expression(this);
		}
	}

	[RuleVersion(0)]
	public Event_session_predicate_expressionContext event_session_predicate_expression() {
		Event_session_predicate_expressionContext _localctx = new Event_session_predicate_expressionContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_event_session_predicate_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3657;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 3642;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,314,_ctx) ) {
					case 1:
						{
						State = 3641; Match(COMMA);
						}
						break;
					}
					State = 3645;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,315,_ctx) ) {
					case 1:
						{
						State = 3644;
						_la = _input.La(1);
						if ( !(_la==AND || _la==OR) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					State = 3648;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,316,_ctx) ) {
					case 1:
						{
						State = 3647; Match(NOT);
						}
						break;
					}
					State = 3655;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,317,_ctx) ) {
					case 1:
						{
						State = 3650; event_session_predicate_factor();
						}
						break;

					case 2:
						{
						State = 3651; Match(LR_BRACKET);
						State = 3652; event_session_predicate_expression();
						State = 3653; Match(RR_BRACKET);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3659;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,318,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_session_predicate_factorContext : ParserRuleContext {
		public Event_session_predicate_leafContext event_session_predicate_leaf() {
			return GetRuleContext<Event_session_predicate_leafContext>(0);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Event_session_predicate_expressionContext event_session_predicate_expression() {
			return GetRuleContext<Event_session_predicate_expressionContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Event_session_predicate_factorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_session_predicate_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEvent_session_predicate_factor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEvent_session_predicate_factor(this);
		}
	}

	[RuleVersion(0)]
	public Event_session_predicate_factorContext event_session_predicate_factor() {
		Event_session_predicate_factorContext _localctx = new Event_session_predicate_factorContext(_ctx, State);
		EnterRule(_localctx, 308, RULE_event_session_predicate_factor);
		try {
			State = 3666;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,319,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3661; event_session_predicate_leaf();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3662; Match(LR_BRACKET);
				State = 3663; event_session_predicate_expression();
				State = 3664; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_session_predicate_leafContext : ParserRuleContext {
		public Id_Context event_field_name;
		public Id_Context event_module_guid;
		public Id_Context event_package_name;
		public Id_Context predicate_source_name;
		public Id_Context predicate_compare_name;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode GREATER() { return GetToken(TSqlParser.GREATER, 0); }
		public ITerminalNode LESS() { return GetToken(TSqlParser.LESS, 0); }
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode EXCLAMATION() { return GetToken(TSqlParser.EXCLAMATION, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Event_session_predicate_leafContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_session_predicate_leaf; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEvent_session_predicate_leaf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEvent_session_predicate_leaf(this);
		}
	}

	[RuleVersion(0)]
	public Event_session_predicate_leafContext event_session_predicate_leaf() {
		Event_session_predicate_leafContext _localctx = new Event_session_predicate_leafContext(_ctx, State);
		EnterRule(_localctx, 310, RULE_event_session_predicate_leaf);
		int _la;
		try {
			State = 3724;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,327,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3696;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,323,_ctx) ) {
				case 1:
					{
					State = 3668; _localctx.event_field_name = id_();
					}
					break;

				case 2:
					{
					State = 3679;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,321,_ctx) ) {
					case 1:
						{
						State = 3669; _localctx.event_field_name = id_();
						}
						break;

					case 2:
						{
						{
						State = 3673;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,320,_ctx) ) {
						case 1:
							{
							State = 3670; _localctx.event_module_guid = id_();
							State = 3671; Match(DOT);
							}
							break;
						}
						State = 3675; _localctx.event_package_name = id_();
						State = 3676; Match(DOT);
						State = 3677; _localctx.predicate_source_name = id_();
						}
						}
						break;
					}
					State = 3692;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,322,_ctx) ) {
					case 1:
						{
						State = 3681; Match(EQUAL);
						}
						break;

					case 2:
						{
						{
						State = 3682; Match(LESS);
						State = 3683; Match(GREATER);
						}
						}
						break;

					case 3:
						{
						{
						State = 3684; Match(EXCLAMATION);
						State = 3685; Match(EQUAL);
						}
						}
						break;

					case 4:
						{
						State = 3686; Match(GREATER);
						}
						break;

					case 5:
						{
						{
						State = 3687; Match(GREATER);
						State = 3688; Match(EQUAL);
						}
						}
						break;

					case 6:
						{
						State = 3689; Match(LESS);
						}
						break;

					case 7:
						{
						State = 3690; Match(LESS);
						State = 3691; Match(EQUAL);
						}
						break;
					}
					State = 3694;
					_la = _input.La(1);
					if ( !(_la==DECIMAL || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3701;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,324,_ctx) ) {
				case 1:
					{
					State = 3698; _localctx.event_module_guid = id_();
					State = 3699; Match(DOT);
					}
					break;
				}
				State = 3703; _localctx.event_package_name = id_();
				State = 3704; Match(DOT);
				State = 3705; _localctx.predicate_compare_name = id_();
				State = 3706; Match(LR_BRACKET);
				State = 3720;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,326,_ctx) ) {
				case 1:
					{
					State = 3707; _localctx.event_field_name = id_();
					}
					break;

				case 2:
					{
					{
					State = 3711;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,325,_ctx) ) {
					case 1:
						{
						State = 3708; _localctx.event_module_guid = id_();
						State = 3709; Match(DOT);
						}
						break;
					}
					State = 3713; _localctx.event_package_name = id_();
					State = 3714; Match(DOT);
					State = 3715; _localctx.predicate_source_name = id_();
					}
					State = 3717; Match(COMMA);
					State = 3718;
					_la = _input.La(1);
					if ( !(_la==DECIMAL || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3722; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_external_data_sourceContext : ParserRuleContext {
		public Id_Context data_source_name;
		public IToken location;
		public IToken resource_manager_location;
		public Id_Context credential_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] LOCATION() { return GetTokens(TSqlParser.LOCATION); }
		public ITerminalNode LOCATION(int i) {
			return GetToken(TSqlParser.LOCATION, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] RESOURCE_MANAGER_LOCATION() { return GetTokens(TSqlParser.RESOURCE_MANAGER_LOCATION); }
		public ITerminalNode RESOURCE_MANAGER_LOCATION(int i) {
			return GetToken(TSqlParser.RESOURCE_MANAGER_LOCATION, i);
		}
		public ITerminalNode[] CREDENTIAL() { return GetTokens(TSqlParser.CREDENTIAL); }
		public ITerminalNode CREDENTIAL(int i) {
			return GetToken(TSqlParser.CREDENTIAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode BLOB_STORAGE() { return GetToken(TSqlParser.BLOB_STORAGE, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Alter_external_data_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_external_data_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_external_data_source(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_external_data_source(this);
		}
	}

	[RuleVersion(0)]
	public Alter_external_data_sourceContext alter_external_data_source() {
		Alter_external_data_sourceContext _localctx = new Alter_external_data_sourceContext(_ctx, State);
		EnterRule(_localctx, 312, RULE_alter_external_data_source);
		try {
			int _alt;
			State = 3773;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,333,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3726; Match(ALTER);
				State = 3727; Match(EXTERNAL);
				State = 3728; Match(DATA);
				State = 3729; Match(SOURCE);
				State = 3730; _localctx.data_source_name = id_();
				State = 3731; Match(SET);
				State = 3747;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 3747;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,330,_ctx) ) {
						case 1:
							{
							State = 3732; Match(LOCATION);
							State = 3733; Match(EQUAL);
							State = 3734; _localctx.location = Match(STRING);
							State = 3736;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,328,_ctx) ) {
							case 1:
								{
								State = 3735; Match(COMMA);
								}
								break;
							}
							}
							break;

						case 2:
							{
							State = 3738; Match(RESOURCE_MANAGER_LOCATION);
							State = 3739; Match(EQUAL);
							State = 3740; _localctx.resource_manager_location = Match(STRING);
							State = 3742;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,329,_ctx) ) {
							case 1:
								{
								State = 3741; Match(COMMA);
								}
								break;
							}
							}
							break;

						case 3:
							{
							State = 3744; Match(CREDENTIAL);
							State = 3745; Match(EQUAL);
							State = 3746; _localctx.credential_name = id_();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3749;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,331,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3751; Match(ALTER);
				State = 3752; Match(EXTERNAL);
				State = 3753; Match(DATA);
				State = 3754; Match(SOURCE);
				State = 3755; _localctx.data_source_name = id_();
				State = 3756; Match(WITH);
				State = 3757; Match(LR_BRACKET);
				State = 3758; Match(TYPE);
				State = 3759; Match(EQUAL);
				State = 3760; Match(BLOB_STORAGE);
				State = 3761; Match(COMMA);
				State = 3762; Match(LOCATION);
				State = 3763; Match(EQUAL);
				State = 3764; _localctx.location = Match(STRING);
				State = 3769;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,332,_ctx) ) {
				case 1:
					{
					State = 3765; Match(COMMA);
					State = 3766; Match(CREDENTIAL);
					State = 3767; Match(EQUAL);
					State = 3768; _localctx.credential_name = id_();
					}
					break;
				}
				State = 3771; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_external_libraryContext : ParserRuleContext {
		public Id_Context library_name;
		public Id_Context owner_name;
		public IToken client_library;
		public Id_Context external_data_source_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode PLATFORM() { return GetToken(TSqlParser.PLATFORM, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode[] LANGUAGE() { return GetTokens(TSqlParser.LANGUAGE); }
		public ITerminalNode LANGUAGE(int i) {
			return GetToken(TSqlParser.LANGUAGE, i);
		}
		public ITerminalNode[] DATA_SOURCE() { return GetTokens(TSqlParser.DATA_SOURCE); }
		public ITerminalNode DATA_SOURCE(int i) {
			return GetToken(TSqlParser.DATA_SOURCE, i);
		}
		public ITerminalNode[] R() { return GetTokens(TSqlParser.R); }
		public ITerminalNode R(int i) {
			return GetToken(TSqlParser.R, i);
		}
		public ITerminalNode[] PYTHON() { return GetTokens(TSqlParser.PYTHON); }
		public ITerminalNode PYTHON(int i) {
			return GetToken(TSqlParser.PYTHON, i);
		}
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode LINUX() { return GetToken(TSqlParser.LINUX, 0); }
		public Alter_external_libraryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_external_library; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_external_library(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_external_library(this);
		}
	}

	[RuleVersion(0)]
	public Alter_external_libraryContext alter_external_library() {
		Alter_external_libraryContext _localctx = new Alter_external_libraryContext(_ctx, State);
		EnterRule(_localctx, 314, RULE_alter_external_library);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3775; Match(ALTER);
			State = 3776; Match(EXTERNAL);
			State = 3777; Match(LIBRARY);
			State = 3778; _localctx.library_name = id_();
			State = 3781;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,334,_ctx) ) {
			case 1:
				{
				State = 3779; Match(AUTHORIZATION);
				State = 3780; _localctx.owner_name = id_();
				}
				break;
			}
			State = 3783;
			_la = _input.La(1);
			if ( !(_la==ADD || _la==SET) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			{
			State = 3784; Match(LR_BRACKET);
			State = 3785; Match(CONTENT);
			State = 3786; Match(EQUAL);
			State = 3790;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,335,_ctx) ) {
			case 1:
				{
				State = 3787; _localctx.client_library = Match(STRING);
				}
				break;

			case 2:
				{
				State = 3788; Match(BINARY);
				}
				break;

			case 3:
				{
				State = 3789; Match(NONE);
				}
				break;
			}
			{
			State = 3792; Match(COMMA);
			State = 3793; Match(PLATFORM);
			State = 3794; Match(EQUAL);
			State = 3796;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,336,_ctx) ) {
			case 1:
				{
				State = 3795;
				_la = _input.La(1);
				if ( !(_la==LINUX || _la==WINDOWS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 3798; Match(RR_BRACKET);
			}
			State = 3800; Match(WITH);
			State = 3810;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 3810;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,338,_ctx) ) {
					case 1:
						{
						State = 3802;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,337,_ctx) ) {
						case 1:
							{
							State = 3801; Match(COMMA);
							}
							break;
						}
						State = 3804; Match(LANGUAGE);
						State = 3805; Match(EQUAL);
						State = 3806;
						_la = _input.La(1);
						if ( !(_la==PYTHON || _la==R) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 2:
						{
						State = 3807; Match(DATA_SOURCE);
						State = 3808; Match(EQUAL);
						State = 3809; _localctx.external_data_source_name = id_();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3812;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,339,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 3814; Match(RR_BRACKET);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_external_libraryContext : ParserRuleContext {
		public Id_Context library_name;
		public Id_Context owner_name;
		public IToken client_library;
		public Id_Context external_data_source_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode PLATFORM() { return GetToken(TSqlParser.PLATFORM, 0); }
		public ITerminalNode[] LANGUAGE() { return GetTokens(TSqlParser.LANGUAGE); }
		public ITerminalNode LANGUAGE(int i) {
			return GetToken(TSqlParser.LANGUAGE, i);
		}
		public ITerminalNode[] DATA_SOURCE() { return GetTokens(TSqlParser.DATA_SOURCE); }
		public ITerminalNode DATA_SOURCE(int i) {
			return GetToken(TSqlParser.DATA_SOURCE, i);
		}
		public ITerminalNode[] R() { return GetTokens(TSqlParser.R); }
		public ITerminalNode R(int i) {
			return GetToken(TSqlParser.R, i);
		}
		public ITerminalNode[] PYTHON() { return GetTokens(TSqlParser.PYTHON); }
		public ITerminalNode PYTHON(int i) {
			return GetToken(TSqlParser.PYTHON, i);
		}
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode LINUX() { return GetToken(TSqlParser.LINUX, 0); }
		public Create_external_libraryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_external_library; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_external_library(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_external_library(this);
		}
	}

	[RuleVersion(0)]
	public Create_external_libraryContext create_external_library() {
		Create_external_libraryContext _localctx = new Create_external_libraryContext(_ctx, State);
		EnterRule(_localctx, 316, RULE_create_external_library);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3816; Match(CREATE);
			State = 3817; Match(EXTERNAL);
			State = 3818; Match(LIBRARY);
			State = 3819; _localctx.library_name = id_();
			State = 3822;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,340,_ctx) ) {
			case 1:
				{
				State = 3820; Match(AUTHORIZATION);
				State = 3821; _localctx.owner_name = id_();
				}
				break;
			}
			State = 3824; Match(FROM);
			{
			State = 3826;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,341,_ctx) ) {
			case 1:
				{
				State = 3825; Match(COMMA);
				}
				break;
			}
			State = 3829;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,342,_ctx) ) {
			case 1:
				{
				State = 3828; Match(LR_BRACKET);
				}
				break;
			}
			State = 3833;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,343,_ctx) ) {
			case 1:
				{
				State = 3831; Match(CONTENT);
				State = 3832; Match(EQUAL);
				}
				break;
			}
			State = 3838;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,344,_ctx) ) {
			case 1:
				{
				State = 3835; _localctx.client_library = Match(STRING);
				}
				break;

			case 2:
				{
				State = 3836; Match(BINARY);
				}
				break;

			case 3:
				{
				State = 3837; Match(NONE);
				}
				break;
			}
			State = 3847;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,346,_ctx) ) {
			case 1:
				{
				State = 3840; Match(COMMA);
				State = 3841; Match(PLATFORM);
				State = 3842; Match(EQUAL);
				State = 3844;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,345,_ctx) ) {
				case 1:
					{
					State = 3843;
					_la = _input.La(1);
					if ( !(_la==LINUX || _la==WINDOWS) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3846; Match(RR_BRACKET);
				}
				break;
			}
			}
			State = 3864;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,350,_ctx) ) {
			case 1:
				{
				State = 3849; Match(WITH);
				State = 3859;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 3859;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,348,_ctx) ) {
						case 1:
							{
							State = 3851;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,347,_ctx) ) {
							case 1:
								{
								State = 3850; Match(COMMA);
								}
								break;
							}
							State = 3853; Match(LANGUAGE);
							State = 3854; Match(EQUAL);
							State = 3855;
							_la = _input.La(1);
							if ( !(_la==PYTHON || _la==R) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 2:
							{
							State = 3856; Match(DATA_SOURCE);
							State = 3857; Match(EQUAL);
							State = 3858; _localctx.external_data_source_name = id_();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3861;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,349,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 3863; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_external_resource_poolContext : ParserRuleContext {
		public Id_Context pool_name;
		public IToken max_cpu_percent;
		public IToken max_memory_percent;
		public IToken max_processes;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode MAX_CPU_PERCENT() { return GetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode DEFAULT_DOUBLE_QUOTE() { return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0); }
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode CPU() { return GetToken(TSqlParser.CPU, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode MAX_MEMORY_PERCENT() { return GetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public ITerminalNode MAX_PROCESSES() { return GetToken(TSqlParser.MAX_PROCESSES, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Alter_external_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_external_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_external_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_external_resource_pool(this);
		}
	}

	[RuleVersion(0)]
	public Alter_external_resource_poolContext alter_external_resource_pool() {
		Alter_external_resource_poolContext _localctx = new Alter_external_resource_poolContext(_ctx, State);
		EnterRule(_localctx, 318, RULE_alter_external_resource_pool);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3866; Match(ALTER);
			State = 3867; Match(EXTERNAL);
			State = 3868; Match(RESOURCE);
			State = 3869; Match(POOL);
			State = 3872;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,351,_ctx) ) {
			case 1:
				{
				State = 3870; _localctx.pool_name = id_();
				}
				break;

			case 2:
				{
				State = 3871; Match(DEFAULT_DOUBLE_QUOTE);
				}
				break;
			}
			State = 3874; Match(WITH);
			State = 3875; Match(LR_BRACKET);
			State = 3876; Match(MAX_CPU_PERCENT);
			State = 3877; Match(EQUAL);
			State = 3878; _localctx.max_cpu_percent = Match(DECIMAL);
			State = 3916;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,361,_ctx) ) {
			case 1:
				{
				State = 3880;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,352,_ctx) ) {
				case 1:
					{
					State = 3879; Match(COMMA);
					}
					break;
				}
				State = 3882; Match(AFFINITY);
				State = 3883; Match(CPU);
				State = 3884; Match(EQUAL);
				State = 3898;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,356,_ctx) ) {
				case 1:
					{
					State = 3885; Match(AUTO);
					}
					break;

				case 2:
					{
					State = 3894;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							State = 3894;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,354,_ctx) ) {
							case 1:
								{
								State = 3887;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,353,_ctx) ) {
								case 1:
									{
									State = 3886; Match(COMMA);
									}
									break;
								}
								State = 3889; Match(DECIMAL);
								State = 3890; Match(TO);
								State = 3891; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 3892; Match(COMMA);
								State = 3893; Match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 3896;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,355,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 3900; Match(NUMANODE);
				State = 3901; Match(EQUAL);
				State = 3912;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 3912;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,359,_ctx) ) {
						case 1:
							{
							State = 3903;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,357,_ctx) ) {
							case 1:
								{
								State = 3902; Match(COMMA);
								}
								break;
							}
							State = 3905; Match(DECIMAL);
							State = 3906; Match(TO);
							State = 3907; Match(DECIMAL);
							}
							break;

						case 2:
							{
							State = 3909;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,358,_ctx) ) {
							case 1:
								{
								State = 3908; Match(COMMA);
								}
								break;
							}
							State = 3911; Match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3914;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,360,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 3924;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,363,_ctx) ) {
			case 1:
				{
				State = 3919;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,362,_ctx) ) {
				case 1:
					{
					State = 3918; Match(COMMA);
					}
					break;
				}
				State = 3921; Match(MAX_MEMORY_PERCENT);
				State = 3922; Match(EQUAL);
				State = 3923; _localctx.max_memory_percent = Match(DECIMAL);
				}
				break;
			}
			State = 3932;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,365,_ctx) ) {
			case 1:
				{
				State = 3927;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,364,_ctx) ) {
				case 1:
					{
					State = 3926; Match(COMMA);
					}
					break;
				}
				State = 3929; Match(MAX_PROCESSES);
				State = 3930; Match(EQUAL);
				State = 3931; _localctx.max_processes = Match(DECIMAL);
				}
				break;
			}
			State = 3934; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_external_resource_poolContext : ParserRuleContext {
		public Id_Context pool_name;
		public IToken max_cpu_percent;
		public IToken max_memory_percent;
		public IToken max_processes;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode MAX_CPU_PERCENT() { return GetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode CPU() { return GetToken(TSqlParser.CPU, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public ITerminalNode MAX_MEMORY_PERCENT() { return GetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public ITerminalNode MAX_PROCESSES() { return GetToken(TSqlParser.MAX_PROCESSES, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Create_external_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_external_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_external_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_external_resource_pool(this);
		}
	}

	[RuleVersion(0)]
	public Create_external_resource_poolContext create_external_resource_pool() {
		Create_external_resource_poolContext _localctx = new Create_external_resource_poolContext(_ctx, State);
		EnterRule(_localctx, 320, RULE_create_external_resource_pool);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3936; Match(CREATE);
			State = 3937; Match(EXTERNAL);
			State = 3938; Match(RESOURCE);
			State = 3939; Match(POOL);
			State = 3940; _localctx.pool_name = id_();
			State = 3941; Match(WITH);
			State = 3942; Match(LR_BRACKET);
			State = 3943; Match(MAX_CPU_PERCENT);
			State = 3944; Match(EQUAL);
			State = 3945; _localctx.max_cpu_percent = Match(DECIMAL);
			State = 3983;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,375,_ctx) ) {
			case 1:
				{
				State = 3947;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,366,_ctx) ) {
				case 1:
					{
					State = 3946; Match(COMMA);
					}
					break;
				}
				State = 3949; Match(AFFINITY);
				State = 3950; Match(CPU);
				State = 3951; Match(EQUAL);
				State = 3965;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,370,_ctx) ) {
				case 1:
					{
					State = 3952; Match(AUTO);
					}
					break;

				case 2:
					{
					State = 3961;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							State = 3961;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,368,_ctx) ) {
							case 1:
								{
								State = 3954;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,367,_ctx) ) {
								case 1:
									{
									State = 3953; Match(COMMA);
									}
									break;
								}
								State = 3956; Match(DECIMAL);
								State = 3957; Match(TO);
								State = 3958; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 3959; Match(COMMA);
								State = 3960; Match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 3963;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,369,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 3967; Match(NUMANODE);
				State = 3968; Match(EQUAL);
				State = 3979;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 3979;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,373,_ctx) ) {
						case 1:
							{
							State = 3970;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,371,_ctx) ) {
							case 1:
								{
								State = 3969; Match(COMMA);
								}
								break;
							}
							State = 3972; Match(DECIMAL);
							State = 3973; Match(TO);
							State = 3974; Match(DECIMAL);
							}
							break;

						case 2:
							{
							State = 3976;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,372,_ctx) ) {
							case 1:
								{
								State = 3975; Match(COMMA);
								}
								break;
							}
							State = 3978; Match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3981;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,374,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 3991;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,377,_ctx) ) {
			case 1:
				{
				State = 3986;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,376,_ctx) ) {
				case 1:
					{
					State = 3985; Match(COMMA);
					}
					break;
				}
				State = 3988; Match(MAX_MEMORY_PERCENT);
				State = 3989; Match(EQUAL);
				State = 3990; _localctx.max_memory_percent = Match(DECIMAL);
				}
				break;
			}
			State = 3999;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,379,_ctx) ) {
			case 1:
				{
				State = 3994;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,378,_ctx) ) {
				case 1:
					{
					State = 3993; Match(COMMA);
					}
					break;
				}
				State = 3996; Match(MAX_PROCESSES);
				State = 3997; Match(EQUAL);
				State = 3998; _localctx.max_processes = Match(DECIMAL);
				}
				break;
			}
			State = 4001; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_fulltext_catalogContext : ParserRuleContext {
		public Id_Context catalog_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		public ITerminalNode REORGANIZE() { return GetToken(TSqlParser.REORGANIZE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ACCENT_SENSITIVITY() { return GetToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Alter_fulltext_catalogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_fulltext_catalog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_fulltext_catalog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_fulltext_catalog(this);
		}
	}

	[RuleVersion(0)]
	public Alter_fulltext_catalogContext alter_fulltext_catalog() {
		Alter_fulltext_catalogContext _localctx = new Alter_fulltext_catalogContext(_ctx, State);
		EnterRule(_localctx, 322, RULE_alter_fulltext_catalog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4003; Match(ALTER);
			State = 4004; Match(FULLTEXT);
			State = 4005; Match(CATALOG);
			State = 4006; _localctx.catalog_name = id_();
			State = 4017;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,381,_ctx) ) {
			case 1:
				{
				State = 4007; Match(REBUILD);
				State = 4012;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,380,_ctx) ) {
				case 1:
					{
					State = 4008; Match(WITH);
					State = 4009; Match(ACCENT_SENSITIVITY);
					State = 4010; Match(EQUAL);
					State = 4011;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 4014; Match(REORGANIZE);
				}
				break;

			case 3:
				{
				State = 4015; Match(AS);
				State = 4016; Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_fulltext_catalogContext : ParserRuleContext {
		public Id_Context catalog_name;
		public Id_Context filegroup;
		public IToken rootpath;
		public Id_Context owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ACCENT_SENSITIVITY() { return GetToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_fulltext_catalogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_fulltext_catalog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_fulltext_catalog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_fulltext_catalog(this);
		}
	}

	[RuleVersion(0)]
	public Create_fulltext_catalogContext create_fulltext_catalog() {
		Create_fulltext_catalogContext _localctx = new Create_fulltext_catalogContext(_ctx, State);
		EnterRule(_localctx, 324, RULE_create_fulltext_catalog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4019; Match(CREATE);
			State = 4020; Match(FULLTEXT);
			State = 4021; Match(CATALOG);
			State = 4022; _localctx.catalog_name = id_();
			State = 4026;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,382,_ctx) ) {
			case 1:
				{
				State = 4023; Match(ON);
				State = 4024; Match(FILEGROUP);
				State = 4025; _localctx.filegroup = id_();
				}
				break;
			}
			State = 4031;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,383,_ctx) ) {
			case 1:
				{
				State = 4028; Match(IN);
				State = 4029; Match(PATH);
				State = 4030; _localctx.rootpath = Match(STRING);
				}
				break;
			}
			State = 4037;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,384,_ctx) ) {
			case 1:
				{
				State = 4033; Match(WITH);
				State = 4034; Match(ACCENT_SENSITIVITY);
				State = 4035; Match(EQUAL);
				State = 4036;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 4041;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,385,_ctx) ) {
			case 1:
				{
				State = 4039; Match(AS);
				State = 4040; Match(DEFAULT);
				}
				break;
			}
			State = 4045;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,386,_ctx) ) {
			case 1:
				{
				State = 4043; Match(AUTHORIZATION);
				State = 4044; _localctx.owner_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_fulltext_stoplistContext : ParserRuleContext {
		public Id_Context stoplist_name;
		public IToken stopword;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode LANGUAGE() { return GetToken(TSqlParser.LANGUAGE, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Alter_fulltext_stoplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_fulltext_stoplist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_fulltext_stoplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_fulltext_stoplist(this);
		}
	}

	[RuleVersion(0)]
	public Alter_fulltext_stoplistContext alter_fulltext_stoplist() {
		Alter_fulltext_stoplistContext _localctx = new Alter_fulltext_stoplistContext(_ctx, State);
		EnterRule(_localctx, 326, RULE_alter_fulltext_stoplist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4047; Match(ALTER);
			State = 4048; Match(FULLTEXT);
			State = 4049; Match(STOPLIST);
			State = 4050; _localctx.stoplist_name = id_();
			State = 4064;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,388,_ctx) ) {
			case 1:
				{
				State = 4051; Match(ADD);
				State = 4052; _localctx.stopword = Match(STRING);
				State = 4053; Match(LANGUAGE);
				State = 4054;
				_la = _input.La(1);
				if ( !(((((_la - 1092)) & ~0x3f) == 0 && ((1L << (_la - 1092)) & ((1L << (DECIMAL - 1092)) | (1L << (STRING - 1092)) | (1L << (BINARY - 1092)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				{
				State = 4055; Match(DROP);
				State = 4062;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,387,_ctx) ) {
				case 1:
					{
					State = 4056; _localctx.stopword = Match(STRING);
					State = 4057; Match(LANGUAGE);
					State = 4058;
					_la = _input.La(1);
					if ( !(((((_la - 1092)) & ~0x3f) == 0 && ((1L << (_la - 1092)) & ((1L << (DECIMAL - 1092)) | (1L << (STRING - 1092)) | (1L << (BINARY - 1092)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 2:
					{
					State = 4059; Match(ALL);
					State = 4060;
					_la = _input.La(1);
					if ( !(((((_la - 1092)) & ~0x3f) == 0 && ((1L << (_la - 1092)) & ((1L << (DECIMAL - 1092)) | (1L << (STRING - 1092)) | (1L << (BINARY - 1092)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 3:
					{
					State = 4061; Match(ALL);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_fulltext_stoplistContext : ParserRuleContext {
		public Id_Context stoplist_name;
		public Id_Context database_name;
		public Id_Context source_stoplist_name;
		public Id_Context owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode[] STOPLIST() { return GetTokens(TSqlParser.STOPLIST); }
		public ITerminalNode STOPLIST(int i) {
			return GetToken(TSqlParser.STOPLIST, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode SYSTEM() { return GetToken(TSqlParser.SYSTEM, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Create_fulltext_stoplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_fulltext_stoplist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_fulltext_stoplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_fulltext_stoplist(this);
		}
	}

	[RuleVersion(0)]
	public Create_fulltext_stoplistContext create_fulltext_stoplist() {
		Create_fulltext_stoplistContext _localctx = new Create_fulltext_stoplistContext(_ctx, State);
		EnterRule(_localctx, 328, RULE_create_fulltext_stoplist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4066; Match(CREATE);
			State = 4067; Match(FULLTEXT);
			State = 4068; Match(STOPLIST);
			State = 4069; _localctx.stoplist_name = id_();
			State = 4081;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,391,_ctx) ) {
			case 1:
				{
				State = 4070; Match(FROM);
				State = 4079;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,390,_ctx) ) {
				case 1:
					{
					State = 4074;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,389,_ctx) ) {
					case 1:
						{
						State = 4071; _localctx.database_name = id_();
						State = 4072; Match(DOT);
						}
						break;
					}
					State = 4076; _localctx.source_stoplist_name = id_();
					}
					break;

				case 2:
					{
					State = 4077; Match(SYSTEM);
					State = 4078; Match(STOPLIST);
					}
					break;
				}
				}
				break;
			}
			State = 4085;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,392,_ctx) ) {
			case 1:
				{
				State = 4083; Match(AUTHORIZATION);
				State = 4084; _localctx.owner_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_login_sql_serverContext : ParserRuleContext {
		public Id_Context login_name;
		public IToken password;
		public IToken password_hash;
		public IToken old_password;
		public Id_Context default_database;
		public Id_Context default_laguage;
		public Id_Context credential_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] CREDENTIAL() { return GetTokens(TSqlParser.CREDENTIAL); }
		public ITerminalNode CREDENTIAL(int i) {
			return GetToken(TSqlParser.CREDENTIAL, i);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode DEFAULT_DATABASE() { return GetToken(TSqlParser.DEFAULT_DATABASE, 0); }
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode CHECK_POLICY() { return GetToken(TSqlParser.CHECK_POLICY, 0); }
		public ITerminalNode CHECK_EXPIRATION() { return GetToken(TSqlParser.CHECK_EXPIRATION, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode HASHED() { return GetToken(TSqlParser.HASHED, 0); }
		public ITerminalNode[] MUST_CHANGE() { return GetTokens(TSqlParser.MUST_CHANGE); }
		public ITerminalNode MUST_CHANGE(int i) {
			return GetToken(TSqlParser.MUST_CHANGE, i);
		}
		public ITerminalNode[] UNLOCK() { return GetTokens(TSqlParser.UNLOCK); }
		public ITerminalNode UNLOCK(int i) {
			return GetToken(TSqlParser.UNLOCK, i);
		}
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public Alter_login_sql_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_login_sql_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_login_sql_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_login_sql_server(this);
		}
	}

	[RuleVersion(0)]
	public Alter_login_sql_serverContext alter_login_sql_server() {
		Alter_login_sql_serverContext _localctx = new Alter_login_sql_serverContext(_ctx, State);
		EnterRule(_localctx, 330, RULE_alter_login_sql_server);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4087; Match(ALTER);
			State = 4088; Match(LOGIN);
			State = 4089; _localctx.login_name = id_();
			State = 4157;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,406,_ctx) ) {
			case 1:
				{
				State = 4091;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,393,_ctx) ) {
				case 1:
					{
					State = 4090;
					_la = _input.La(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 4093; Match(WITH);
				State = 4107;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,396,_ctx) ) {
				case 1:
					{
					{
					State = 4094; Match(PASSWORD);
					State = 4095; Match(EQUAL);
					State = 4099;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,394,_ctx) ) {
					case 1:
						{
						State = 4096; _localctx.password = Match(STRING);
						}
						break;

					case 2:
						{
						State = 4097; _localctx.password_hash = Match(BINARY);
						State = 4098; Match(HASHED);
						}
						break;
					}
					}
					State = 4104;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,395,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 4101;
							_la = _input.La(1);
							if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							} 
						}
						State = 4106;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,395,_ctx);
					}
					}
					break;
				}
				State = 4118;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,398,_ctx) ) {
				case 1:
					{
					State = 4109; Match(OLD_PASSWORD);
					State = 4110; Match(EQUAL);
					State = 4111; _localctx.old_password = Match(STRING);
					State = 4115;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,397,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 4112;
							_la = _input.La(1);
							if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							} 
						}
						State = 4117;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,397,_ctx);
					}
					}
					break;
				}
				State = 4123;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,399,_ctx) ) {
				case 1:
					{
					State = 4120; Match(DEFAULT_DATABASE);
					State = 4121; Match(EQUAL);
					State = 4122; _localctx.default_database = id_();
					}
					break;
				}
				State = 4128;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,400,_ctx) ) {
				case 1:
					{
					State = 4125; Match(DEFAULT_LANGUAGE);
					State = 4126; Match(EQUAL);
					State = 4127; _localctx.default_laguage = id_();
					}
					break;
				}
				State = 4133;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,401,_ctx) ) {
				case 1:
					{
					State = 4130; Match(NAME);
					State = 4131; Match(EQUAL);
					State = 4132; _localctx.login_name = id_();
					}
					break;
				}
				State = 4138;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,402,_ctx) ) {
				case 1:
					{
					State = 4135; Match(CHECK_POLICY);
					State = 4136; Match(EQUAL);
					State = 4137;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 4143;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,403,_ctx) ) {
				case 1:
					{
					State = 4140; Match(CHECK_EXPIRATION);
					State = 4141; Match(EQUAL);
					State = 4142;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 4148;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,404,_ctx) ) {
				case 1:
					{
					State = 4145; Match(CREDENTIAL);
					State = 4146; Match(EQUAL);
					State = 4147; _localctx.credential_name = id_();
					}
					break;
				}
				State = 4152;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,405,_ctx) ) {
				case 1:
					{
					State = 4150; Match(NO);
					State = 4151; Match(CREDENTIAL);
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 4154;
				_la = _input.La(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 4155; Match(CREDENTIAL);
				State = 4156; _localctx.credential_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_login_sql_serverContext : ParserRuleContext {
		public Id_Context login_name;
		public IToken password;
		public IToken password_hash;
		public IToken sid;
		public Id_Context default_database;
		public Id_Context default_laguage;
		public Id_Context credential_name;
		public IToken default_language;
		public Id_Context certname;
		public Id_Context asym_key_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode SID() { return GetToken(TSqlParser.SID, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode DEFAULT_DATABASE() { return GetToken(TSqlParser.DEFAULT_DATABASE, 0); }
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode CHECK_EXPIRATION() { return GetToken(TSqlParser.CHECK_EXPIRATION, 0); }
		public ITerminalNode CHECK_POLICY() { return GetToken(TSqlParser.CHECK_POLICY, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode[] BINARY() { return GetTokens(TSqlParser.BINARY); }
		public ITerminalNode BINARY(int i) {
			return GetToken(TSqlParser.BINARY, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode HASHED() { return GetToken(TSqlParser.HASHED, 0); }
		public ITerminalNode[] MUST_CHANGE() { return GetTokens(TSqlParser.MUST_CHANGE); }
		public ITerminalNode MUST_CHANGE(int i) {
			return GetToken(TSqlParser.MUST_CHANGE, i);
		}
		public ITerminalNode[] UNLOCK() { return GetTokens(TSqlParser.UNLOCK); }
		public ITerminalNode UNLOCK(int i) {
			return GetToken(TSqlParser.UNLOCK, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Create_login_sql_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_login_sql_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_login_sql_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_login_sql_server(this);
		}
	}

	[RuleVersion(0)]
	public Create_login_sql_serverContext create_login_sql_server() {
		Create_login_sql_serverContext _localctx = new Create_login_sql_serverContext(_ctx, State);
		EnterRule(_localctx, 332, RULE_create_login_sql_server);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4159; Match(CREATE);
			State = 4160; Match(LOGIN);
			State = 4161; _localctx.login_name = id_();
			State = 4252;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,427,_ctx) ) {
			case 1:
				{
				State = 4162; Match(WITH);
				State = 4176;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,409,_ctx) ) {
				case 1:
					{
					{
					State = 4163; Match(PASSWORD);
					State = 4164; Match(EQUAL);
					State = 4168;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,407,_ctx) ) {
					case 1:
						{
						State = 4165; _localctx.password = Match(STRING);
						}
						break;

					case 2:
						{
						State = 4166; _localctx.password_hash = Match(BINARY);
						State = 4167; Match(HASHED);
						}
						break;
					}
					}
					State = 4173;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,408,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 4170;
							_la = _input.La(1);
							if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							} 
						}
						State = 4175;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,408,_ctx);
					}
					}
					break;
				}
				State = 4184;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,411,_ctx) ) {
				case 1:
					{
					State = 4179;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,410,_ctx) ) {
					case 1:
						{
						State = 4178; Match(COMMA);
						}
						break;
					}
					State = 4181; Match(SID);
					State = 4182; Match(EQUAL);
					State = 4183; _localctx.sid = Match(BINARY);
					}
					break;
				}
				State = 4192;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,413,_ctx) ) {
				case 1:
					{
					State = 4187;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,412,_ctx) ) {
					case 1:
						{
						State = 4186; Match(COMMA);
						}
						break;
					}
					State = 4189; Match(DEFAULT_DATABASE);
					State = 4190; Match(EQUAL);
					State = 4191; _localctx.default_database = id_();
					}
					break;
				}
				State = 4200;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,415,_ctx) ) {
				case 1:
					{
					State = 4195;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,414,_ctx) ) {
					case 1:
						{
						State = 4194; Match(COMMA);
						}
						break;
					}
					State = 4197; Match(DEFAULT_LANGUAGE);
					State = 4198; Match(EQUAL);
					State = 4199; _localctx.default_laguage = id_();
					}
					break;
				}
				State = 4208;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,417,_ctx) ) {
				case 1:
					{
					State = 4203;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,416,_ctx) ) {
					case 1:
						{
						State = 4202; Match(COMMA);
						}
						break;
					}
					State = 4205; Match(CHECK_EXPIRATION);
					State = 4206; Match(EQUAL);
					State = 4207;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 4216;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,419,_ctx) ) {
				case 1:
					{
					State = 4211;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,418,_ctx) ) {
					case 1:
						{
						State = 4210; Match(COMMA);
						}
						break;
					}
					State = 4213; Match(CHECK_POLICY);
					State = 4214; Match(EQUAL);
					State = 4215;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 4224;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,421,_ctx) ) {
				case 1:
					{
					State = 4219;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,420,_ctx) ) {
					case 1:
						{
						State = 4218; Match(COMMA);
						}
						break;
					}
					State = 4221; Match(CREDENTIAL);
					State = 4222; Match(EQUAL);
					State = 4223; _localctx.credential_name = id_();
					}
					break;
				}
				}
				break;

			case 2:
				{
				{
				State = 4226; Match(FROM);
				State = 4250;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,426,_ctx) ) {
				case 1:
					{
					State = 4227; Match(WINDOWS);
					{
					State = 4228; Match(WITH);
					State = 4235;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,423,_ctx) ) {
					case 1:
						{
						State = 4230;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,422,_ctx) ) {
						case 1:
							{
							State = 4229; Match(COMMA);
							}
							break;
						}
						State = 4232; Match(DEFAULT_DATABASE);
						State = 4233; Match(EQUAL);
						State = 4234; _localctx.default_database = id_();
						}
						break;
					}
					State = 4243;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,425,_ctx) ) {
					case 1:
						{
						State = 4238;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,424,_ctx) ) {
						case 1:
							{
							State = 4237; Match(COMMA);
							}
							break;
						}
						State = 4240; Match(DEFAULT_LANGUAGE);
						State = 4241; Match(EQUAL);
						State = 4242; _localctx.default_language = Match(STRING);
						}
						break;
					}
					}
					}
					break;

				case 2:
					{
					State = 4245; Match(CERTIFICATE);
					State = 4246; _localctx.certname = id_();
					}
					break;

				case 3:
					{
					State = 4247; Match(ASYMMETRIC);
					State = 4248; Match(KEY);
					State = 4249; _localctx.asym_key_name = id_();
					}
					break;
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_login_azure_sqlContext : ParserRuleContext {
		public Id_Context login_name;
		public IToken password;
		public IToken old_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public Alter_login_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_login_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_login_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_login_azure_sql(this);
		}
	}

	[RuleVersion(0)]
	public Alter_login_azure_sqlContext alter_login_azure_sql() {
		Alter_login_azure_sqlContext _localctx = new Alter_login_azure_sqlContext(_ctx, State);
		EnterRule(_localctx, 334, RULE_alter_login_azure_sql);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4254; Match(ALTER);
			State = 4255; Match(LOGIN);
			State = 4256; _localctx.login_name = id_();
			State = 4274;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,431,_ctx) ) {
			case 1:
				{
				State = 4258;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,428,_ctx) ) {
				case 1:
					{
					State = 4257;
					_la = _input.La(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 4260; Match(WITH);
				State = 4272;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,430,_ctx) ) {
				case 1:
					{
					State = 4261; Match(PASSWORD);
					State = 4262; Match(EQUAL);
					State = 4263; _localctx.password = Match(STRING);
					State = 4267;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,429,_ctx) ) {
					case 1:
						{
						State = 4264; Match(OLD_PASSWORD);
						State = 4265; Match(EQUAL);
						State = 4266; _localctx.old_password = Match(STRING);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 4269; Match(NAME);
					State = 4270; Match(EQUAL);
					State = 4271; _localctx.login_name = id_();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_login_azure_sqlContext : ParserRuleContext {
		public Id_Context login_name;
		public IToken sid;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode SID() { return GetToken(TSqlParser.SID, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public Create_login_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_login_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_login_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_login_azure_sql(this);
		}
	}

	[RuleVersion(0)]
	public Create_login_azure_sqlContext create_login_azure_sql() {
		Create_login_azure_sqlContext _localctx = new Create_login_azure_sqlContext(_ctx, State);
		EnterRule(_localctx, 336, RULE_create_login_azure_sql);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4276; Match(CREATE);
			State = 4277; Match(LOGIN);
			State = 4278; _localctx.login_name = id_();
			State = 4279; Match(WITH);
			State = 4280; Match(PASSWORD);
			State = 4281; Match(EQUAL);
			State = 4282; Match(STRING);
			State = 4286;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,432,_ctx) ) {
			case 1:
				{
				State = 4283; Match(SID);
				State = 4284; Match(EQUAL);
				State = 4285; _localctx.sid = Match(BINARY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_login_azure_sql_dw_and_pdwContext : ParserRuleContext {
		public Id_Context login_name;
		public IToken password;
		public IToken old_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public ITerminalNode[] MUST_CHANGE() { return GetTokens(TSqlParser.MUST_CHANGE); }
		public ITerminalNode MUST_CHANGE(int i) {
			return GetToken(TSqlParser.MUST_CHANGE, i);
		}
		public ITerminalNode[] UNLOCK() { return GetTokens(TSqlParser.UNLOCK); }
		public ITerminalNode UNLOCK(int i) {
			return GetToken(TSqlParser.UNLOCK, i);
		}
		public Alter_login_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_login_azure_sql_dw_and_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_login_azure_sql_dw_and_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_login_azure_sql_dw_and_pdw(this);
		}
	}

	[RuleVersion(0)]
	public Alter_login_azure_sql_dw_and_pdwContext alter_login_azure_sql_dw_and_pdw() {
		Alter_login_azure_sql_dw_and_pdwContext _localctx = new Alter_login_azure_sql_dw_and_pdwContext(_ctx, State);
		EnterRule(_localctx, 338, RULE_alter_login_azure_sql_dw_and_pdw);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4288; Match(ALTER);
			State = 4289; Match(LOGIN);
			State = 4290; _localctx.login_name = id_();
			State = 4314;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,437,_ctx) ) {
			case 1:
				{
				State = 4292;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,433,_ctx) ) {
				case 1:
					{
					State = 4291;
					_la = _input.La(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 4294; Match(WITH);
				State = 4312;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,436,_ctx) ) {
				case 1:
					{
					State = 4295; Match(PASSWORD);
					State = 4296; Match(EQUAL);
					State = 4297; _localctx.password = Match(STRING);
					State = 4307;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,435,_ctx) ) {
					case 1:
						{
						State = 4298; Match(OLD_PASSWORD);
						State = 4299; Match(EQUAL);
						State = 4300; _localctx.old_password = Match(STRING);
						State = 4304;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,434,_ctx);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
							if ( _alt==1 ) {
								{
								{
								State = 4301;
								_la = _input.La(1);
								if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								} 
							}
							State = 4306;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,434,_ctx);
						}
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 4309; Match(NAME);
					State = 4310; Match(EQUAL);
					State = 4311; _localctx.login_name = id_();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_login_pdwContext : ParserRuleContext {
		public Id_Context loginName;
		public IToken password;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode MUST_CHANGE() { return GetToken(TSqlParser.MUST_CHANGE, 0); }
		public ITerminalNode CHECK_POLICY() { return GetToken(TSqlParser.CHECK_POLICY, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_login_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_login_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_login_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_login_pdw(this);
		}
	}

	[RuleVersion(0)]
	public Create_login_pdwContext create_login_pdw() {
		Create_login_pdwContext _localctx = new Create_login_pdwContext(_ctx, State);
		EnterRule(_localctx, 340, RULE_create_login_pdw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4316; Match(CREATE);
			State = 4317; Match(LOGIN);
			State = 4318; _localctx.loginName = id_();
			State = 4335;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,441,_ctx) ) {
			case 1:
				{
				State = 4319; Match(WITH);
				{
				State = 4320; Match(PASSWORD);
				State = 4321; Match(EQUAL);
				State = 4322; _localctx.password = Match(STRING);
				State = 4324;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,438,_ctx) ) {
				case 1:
					{
					State = 4323; Match(MUST_CHANGE);
					}
					break;
				}
				State = 4331;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,440,_ctx) ) {
				case 1:
					{
					State = 4326; Match(CHECK_POLICY);
					State = 4327; Match(EQUAL);
					State = 4329;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,439,_ctx) ) {
					case 1:
						{
						State = 4328;
						_la = _input.La(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				}
				break;

			case 2:
				{
				State = 4333; Match(FROM);
				State = 4334; Match(WINDOWS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_master_key_sql_serverContext : ParserRuleContext {
		public IToken password;
		public IToken encryption_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] MASTER() { return GetTokens(TSqlParser.MASTER); }
		public ITerminalNode MASTER(int i) {
			return GetToken(TSqlParser.MASTER, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public ITerminalNode REGENERATE() { return GetToken(TSqlParser.REGENERATE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public Alter_master_key_sql_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_master_key_sql_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_master_key_sql_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_master_key_sql_server(this);
		}
	}

	[RuleVersion(0)]
	public Alter_master_key_sql_serverContext alter_master_key_sql_server() {
		Alter_master_key_sql_serverContext _localctx = new Alter_master_key_sql_serverContext(_ctx, State);
		EnterRule(_localctx, 342, RULE_alter_master_key_sql_server);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4337; Match(ALTER);
			State = 4338; Match(MASTER);
			State = 4339; Match(KEY);
			State = 4361;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,444,_ctx) ) {
			case 1:
				{
				State = 4341;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,442,_ctx) ) {
				case 1:
					{
					State = 4340; Match(FORCE);
					}
					break;
				}
				State = 4343; Match(REGENERATE);
				State = 4344; Match(WITH);
				State = 4345; Match(ENCRYPTION);
				State = 4346; Match(BY);
				State = 4347; Match(PASSWORD);
				State = 4348; Match(EQUAL);
				State = 4349; _localctx.password = Match(STRING);
				}
				break;

			case 2:
				{
				State = 4350;
				_la = _input.La(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 4351; Match(ENCRYPTION);
				State = 4352; Match(BY);
				State = 4359;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,443,_ctx) ) {
				case 1:
					{
					State = 4353; Match(SERVICE);
					State = 4354; Match(MASTER);
					State = 4355; Match(KEY);
					}
					break;

				case 2:
					{
					State = 4356; Match(PASSWORD);
					State = 4357; Match(EQUAL);
					State = 4358; _localctx.encryption_password = Match(STRING);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_master_key_sql_serverContext : ParserRuleContext {
		public IToken password;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Create_master_key_sql_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_master_key_sql_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_master_key_sql_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_master_key_sql_server(this);
		}
	}

	[RuleVersion(0)]
	public Create_master_key_sql_serverContext create_master_key_sql_server() {
		Create_master_key_sql_serverContext _localctx = new Create_master_key_sql_serverContext(_ctx, State);
		EnterRule(_localctx, 344, RULE_create_master_key_sql_server);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4363; Match(CREATE);
			State = 4364; Match(MASTER);
			State = 4365; Match(KEY);
			State = 4366; Match(ENCRYPTION);
			State = 4367; Match(BY);
			State = 4368; Match(PASSWORD);
			State = 4369; Match(EQUAL);
			State = 4370; _localctx.password = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_master_key_azure_sqlContext : ParserRuleContext {
		public IToken password;
		public IToken encryption_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] MASTER() { return GetTokens(TSqlParser.MASTER); }
		public ITerminalNode MASTER(int i) {
			return GetToken(TSqlParser.MASTER, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public ITerminalNode REGENERATE() { return GetToken(TSqlParser.REGENERATE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public Alter_master_key_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_master_key_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_master_key_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_master_key_azure_sql(this);
		}
	}

	[RuleVersion(0)]
	public Alter_master_key_azure_sqlContext alter_master_key_azure_sql() {
		Alter_master_key_azure_sqlContext _localctx = new Alter_master_key_azure_sqlContext(_ctx, State);
		EnterRule(_localctx, 346, RULE_alter_master_key_azure_sql);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4372; Match(ALTER);
			State = 4373; Match(MASTER);
			State = 4374; Match(KEY);
			State = 4402;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,447,_ctx) ) {
			case 1:
				{
				State = 4376;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,445,_ctx) ) {
				case 1:
					{
					State = 4375; Match(FORCE);
					}
					break;
				}
				State = 4378; Match(REGENERATE);
				State = 4379; Match(WITH);
				State = 4380; Match(ENCRYPTION);
				State = 4381; Match(BY);
				State = 4382; Match(PASSWORD);
				State = 4383; Match(EQUAL);
				State = 4384; _localctx.password = Match(STRING);
				}
				break;

			case 2:
				{
				State = 4385; Match(ADD);
				State = 4386; Match(ENCRYPTION);
				State = 4387; Match(BY);
				State = 4394;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,446,_ctx) ) {
				case 1:
					{
					State = 4388; Match(SERVICE);
					State = 4389; Match(MASTER);
					State = 4390; Match(KEY);
					}
					break;

				case 2:
					{
					State = 4391; Match(PASSWORD);
					State = 4392; Match(EQUAL);
					State = 4393; _localctx.encryption_password = Match(STRING);
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 4396; Match(DROP);
				State = 4397; Match(ENCRYPTION);
				State = 4398; Match(BY);
				State = 4399; Match(PASSWORD);
				State = 4400; Match(EQUAL);
				State = 4401; _localctx.encryption_password = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_master_key_azure_sqlContext : ParserRuleContext {
		public IToken password;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Create_master_key_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_master_key_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_master_key_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_master_key_azure_sql(this);
		}
	}

	[RuleVersion(0)]
	public Create_master_key_azure_sqlContext create_master_key_azure_sql() {
		Create_master_key_azure_sqlContext _localctx = new Create_master_key_azure_sqlContext(_ctx, State);
		EnterRule(_localctx, 348, RULE_create_master_key_azure_sql);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4404; Match(CREATE);
			State = 4405; Match(MASTER);
			State = 4406; Match(KEY);
			State = 4412;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,448,_ctx) ) {
			case 1:
				{
				State = 4407; Match(ENCRYPTION);
				State = 4408; Match(BY);
				State = 4409; Match(PASSWORD);
				State = 4410; Match(EQUAL);
				State = 4411; _localctx.password = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_message_typeContext : ParserRuleContext {
		public Id_Context message_type_name;
		public Id_Context schema_collection_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode VALIDATION() { return GetToken(TSqlParser.VALIDATION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode EMPTY() { return GetToken(TSqlParser.EMPTY, 0); }
		public ITerminalNode WELL_FORMED_XML() { return GetToken(TSqlParser.WELL_FORMED_XML, 0); }
		public ITerminalNode VALID_XML() { return GetToken(TSqlParser.VALID_XML, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Alter_message_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_message_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_message_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_message_type(this);
		}
	}

	[RuleVersion(0)]
	public Alter_message_typeContext alter_message_type() {
		Alter_message_typeContext _localctx = new Alter_message_typeContext(_ctx, State);
		EnterRule(_localctx, 350, RULE_alter_message_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4414; Match(ALTER);
			State = 4415; Match(MESSAGE);
			State = 4416; Match(TYPE);
			State = 4417; _localctx.message_type_name = id_();
			State = 4418; Match(VALIDATION);
			State = 4419; Match(EQUAL);
			State = 4428;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,449,_ctx) ) {
			case 1:
				{
				State = 4420; Match(NONE);
				}
				break;

			case 2:
				{
				State = 4421; Match(EMPTY);
				}
				break;

			case 3:
				{
				State = 4422; Match(WELL_FORMED_XML);
				}
				break;

			case 4:
				{
				State = 4423; Match(VALID_XML);
				State = 4424; Match(WITH);
				State = 4425; Match(SCHEMA);
				State = 4426; Match(COLLECTION);
				State = 4427; _localctx.schema_collection_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_partition_functionContext : ParserRuleContext {
		public Id_Context partition_function_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode RANGE() { return GetToken(TSqlParser.RANGE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode SPLIT() { return GetToken(TSqlParser.SPLIT, 0); }
		public ITerminalNode MERGE() { return GetToken(TSqlParser.MERGE, 0); }
		public Alter_partition_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_partition_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_partition_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_partition_function(this);
		}
	}

	[RuleVersion(0)]
	public Alter_partition_functionContext alter_partition_function() {
		Alter_partition_functionContext _localctx = new Alter_partition_functionContext(_ctx, State);
		EnterRule(_localctx, 352, RULE_alter_partition_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4430; Match(ALTER);
			State = 4431; Match(PARTITION);
			State = 4432; Match(FUNCTION);
			State = 4433; _localctx.partition_function_name = id_();
			State = 4434; Match(LR_BRACKET);
			State = 4435; Match(RR_BRACKET);
			State = 4436;
			_la = _input.La(1);
			if ( !(_la==MERGE || _la==SPLIT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 4437; Match(RANGE);
			State = 4438; Match(LR_BRACKET);
			State = 4439; Match(DECIMAL);
			State = 4440; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_partition_schemeContext : ParserRuleContext {
		public Id_Context partition_scheme_name;
		public Id_Context file_group_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public ITerminalNode USED() { return GetToken(TSqlParser.USED, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Alter_partition_schemeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_partition_scheme; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_partition_scheme(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_partition_scheme(this);
		}
	}

	[RuleVersion(0)]
	public Alter_partition_schemeContext alter_partition_scheme() {
		Alter_partition_schemeContext _localctx = new Alter_partition_schemeContext(_ctx, State);
		EnterRule(_localctx, 354, RULE_alter_partition_scheme);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4442; Match(ALTER);
			State = 4443; Match(PARTITION);
			State = 4444; Match(SCHEME);
			State = 4445; _localctx.partition_scheme_name = id_();
			State = 4446; Match(NEXT);
			State = 4447; Match(USED);
			State = 4449;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,450,_ctx) ) {
			case 1:
				{
				State = 4448; _localctx.file_group_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_remote_service_bindingContext : ParserRuleContext {
		public Id_Context binding_name;
		public Id_Context user_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode ANONYMOUS() { return GetToken(TSqlParser.ANONYMOUS, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Alter_remote_service_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_remote_service_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_remote_service_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_remote_service_binding(this);
		}
	}

	[RuleVersion(0)]
	public Alter_remote_service_bindingContext alter_remote_service_binding() {
		Alter_remote_service_bindingContext _localctx = new Alter_remote_service_bindingContext(_ctx, State);
		EnterRule(_localctx, 356, RULE_alter_remote_service_binding);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4451; Match(ALTER);
			State = 4452; Match(REMOTE);
			State = 4453; Match(SERVICE);
			State = 4454; Match(BINDING);
			State = 4455; _localctx.binding_name = id_();
			State = 4456; Match(WITH);
			State = 4460;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,451,_ctx) ) {
			case 1:
				{
				State = 4457; Match(USER);
				State = 4458; Match(EQUAL);
				State = 4459; _localctx.user_name = id_();
				}
				break;
			}
			State = 4466;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,452,_ctx) ) {
			case 1:
				{
				State = 4462; Match(COMMA);
				State = 4463; Match(ANONYMOUS);
				State = 4464; Match(EQUAL);
				State = 4465;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_remote_service_bindingContext : ParserRuleContext {
		public Id_Context binding_name;
		public Id_Context owner_name;
		public IToken remote_service_name;
		public Id_Context user_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode[] SERVICE() { return GetTokens(TSqlParser.SERVICE); }
		public ITerminalNode SERVICE(int i) {
			return GetToken(TSqlParser.SERVICE, i);
		}
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode ANONYMOUS() { return GetToken(TSqlParser.ANONYMOUS, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_remote_service_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_remote_service_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_remote_service_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_remote_service_binding(this);
		}
	}

	[RuleVersion(0)]
	public Create_remote_service_bindingContext create_remote_service_binding() {
		Create_remote_service_bindingContext _localctx = new Create_remote_service_bindingContext(_ctx, State);
		EnterRule(_localctx, 358, RULE_create_remote_service_binding);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4468; Match(CREATE);
			State = 4469; Match(REMOTE);
			State = 4470; Match(SERVICE);
			State = 4471; Match(BINDING);
			State = 4472; _localctx.binding_name = id_();
			State = 4475;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,453,_ctx) ) {
			case 1:
				{
				State = 4473; Match(AUTHORIZATION);
				State = 4474; _localctx.owner_name = id_();
				}
				break;
			}
			State = 4477; Match(TO);
			State = 4478; Match(SERVICE);
			State = 4479; _localctx.remote_service_name = Match(STRING);
			State = 4480; Match(WITH);
			State = 4484;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,454,_ctx) ) {
			case 1:
				{
				State = 4481; Match(USER);
				State = 4482; Match(EQUAL);
				State = 4483; _localctx.user_name = id_();
				}
				break;
			}
			State = 4490;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,455,_ctx) ) {
			case 1:
				{
				State = 4486; Match(COMMA);
				State = 4487; Match(ANONYMOUS);
				State = 4488; Match(EQUAL);
				State = 4489;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_resource_poolContext : ParserRuleContext {
		public Id_Context pool_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode MIN_CPU_PERCENT() { return GetToken(TSqlParser.MIN_CPU_PERCENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode MAX_CPU_PERCENT() { return GetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public ITerminalNode CAP_CPU_PERCENT() { return GetToken(TSqlParser.CAP_CPU_PERCENT, 0); }
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode SCHEDULER() { return GetToken(TSqlParser.SCHEDULER, 0); }
		public ITerminalNode MIN_MEMORY_PERCENT() { return GetToken(TSqlParser.MIN_MEMORY_PERCENT, 0); }
		public ITerminalNode MAX_MEMORY_PERCENT() { return GetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public ITerminalNode MIN_IOPS_PER_VOLUME() { return GetToken(TSqlParser.MIN_IOPS_PER_VOLUME, 0); }
		public ITerminalNode MAX_IOPS_PER_VOLUME() { return GetToken(TSqlParser.MAX_IOPS_PER_VOLUME, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Create_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_resource_pool(this);
		}
	}

	[RuleVersion(0)]
	public Create_resource_poolContext create_resource_pool() {
		Create_resource_poolContext _localctx = new Create_resource_poolContext(_ctx, State);
		EnterRule(_localctx, 360, RULE_create_resource_pool);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4492; Match(CREATE);
			State = 4493; Match(RESOURCE);
			State = 4494; Match(POOL);
			State = 4495; _localctx.pool_name = id_();
			State = 4598;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,479,_ctx) ) {
			case 1:
				{
				State = 4496; Match(WITH);
				State = 4497; Match(LR_BRACKET);
				State = 4504;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,457,_ctx) ) {
				case 1:
					{
					State = 4499;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,456,_ctx) ) {
					case 1:
						{
						State = 4498; Match(COMMA);
						}
						break;
					}
					State = 4501; Match(MIN_CPU_PERCENT);
					State = 4502; Match(EQUAL);
					State = 4503; Match(DECIMAL);
					}
					break;
				}
				State = 4512;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,459,_ctx) ) {
				case 1:
					{
					State = 4507;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,458,_ctx) ) {
					case 1:
						{
						State = 4506; Match(COMMA);
						}
						break;
					}
					State = 4509; Match(MAX_CPU_PERCENT);
					State = 4510; Match(EQUAL);
					State = 4511; Match(DECIMAL);
					}
					break;
				}
				State = 4520;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,461,_ctx) ) {
				case 1:
					{
					State = 4515;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,460,_ctx) ) {
					case 1:
						{
						State = 4514; Match(COMMA);
						}
						break;
					}
					State = 4517; Match(CAP_CPU_PERCENT);
					State = 4518; Match(EQUAL);
					State = 4519; Match(DECIMAL);
					}
					break;
				}
				State = 4563;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,470,_ctx) ) {
				case 1:
					{
					State = 4523;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,462,_ctx) ) {
					case 1:
						{
						State = 4522; Match(COMMA);
						}
						break;
					}
					State = 4525; Match(AFFINITY);
					State = 4526; Match(SCHEDULER);
					State = 4527; Match(EQUAL);
					State = 4561;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,469,_ctx) ) {
					case 1:
						{
						State = 4528; Match(AUTO);
						}
						break;

					case 2:
						{
						State = 4529; Match(LR_BRACKET);
						State = 4539;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 4531;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,463,_ctx) ) {
								case 1:
									{
									State = 4530; Match(COMMA);
									}
									break;
								}
								State = 4537;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,464,_ctx) ) {
								case 1:
									{
									State = 4533; Match(DECIMAL);
									}
									break;

								case 2:
									{
									State = 4534; Match(DECIMAL);
									State = 4535; Match(TO);
									State = 4536; Match(DECIMAL);
									}
									break;
								}
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 4541;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,465,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						State = 4543; Match(RR_BRACKET);
						}
						break;

					case 3:
						{
						State = 4544; Match(NUMANODE);
						State = 4545; Match(EQUAL);
						State = 4546; Match(LR_BRACKET);
						State = 4556;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 4548;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,466,_ctx) ) {
								case 1:
									{
									State = 4547; Match(COMMA);
									}
									break;
								}
								State = 4554;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,467,_ctx) ) {
								case 1:
									{
									State = 4550; Match(DECIMAL);
									}
									break;

								case 2:
									{
									State = 4551; Match(DECIMAL);
									State = 4552; Match(TO);
									State = 4553; Match(DECIMAL);
									}
									break;
								}
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 4558;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,468,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						State = 4560; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				State = 4571;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,472,_ctx) ) {
				case 1:
					{
					State = 4566;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,471,_ctx) ) {
					case 1:
						{
						State = 4565; Match(COMMA);
						}
						break;
					}
					State = 4568; Match(MIN_MEMORY_PERCENT);
					State = 4569; Match(EQUAL);
					State = 4570; Match(DECIMAL);
					}
					break;
				}
				State = 4579;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,474,_ctx) ) {
				case 1:
					{
					State = 4574;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,473,_ctx) ) {
					case 1:
						{
						State = 4573; Match(COMMA);
						}
						break;
					}
					State = 4576; Match(MAX_MEMORY_PERCENT);
					State = 4577; Match(EQUAL);
					State = 4578; Match(DECIMAL);
					}
					break;
				}
				State = 4587;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,476,_ctx) ) {
				case 1:
					{
					State = 4582;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,475,_ctx) ) {
					case 1:
						{
						State = 4581; Match(COMMA);
						}
						break;
					}
					State = 4584; Match(MIN_IOPS_PER_VOLUME);
					State = 4585; Match(EQUAL);
					State = 4586; Match(DECIMAL);
					}
					break;
				}
				State = 4595;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,478,_ctx) ) {
				case 1:
					{
					State = 4590;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,477,_ctx) ) {
					case 1:
						{
						State = 4589; Match(COMMA);
						}
						break;
					}
					State = 4592; Match(MAX_IOPS_PER_VOLUME);
					State = 4593; Match(EQUAL);
					State = 4594; Match(DECIMAL);
					}
					break;
				}
				State = 4597; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_resource_governorContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context function_name;
		public IToken max_outstanding_io_per_volume;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode GOVERNOR() { return GetToken(TSqlParser.GOVERNOR, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode CLASSIFIER_FUNCTION() { return GetToken(TSqlParser.CLASSIFIER_FUNCTION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode RESET() { return GetToken(TSqlParser.RESET, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public ITerminalNode MAX_OUTSTANDING_IO_PER_VOLUME() { return GetToken(TSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode RECONFIGURE() { return GetToken(TSqlParser.RECONFIGURE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Alter_resource_governorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_resource_governor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_resource_governor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_resource_governor(this);
		}
	}

	[RuleVersion(0)]
	public Alter_resource_governorContext alter_resource_governor() {
		Alter_resource_governorContext _localctx = new Alter_resource_governorContext(_ctx, State);
		EnterRule(_localctx, 362, RULE_alter_resource_governor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4600; Match(ALTER);
			State = 4601; Match(RESOURCE);
			State = 4602; Match(GOVERNOR);
			State = 4624;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,481,_ctx) ) {
			case 1:
				{
				State = 4603;
				_la = _input.La(1);
				if ( !(_la==DISABLE || _la==RECONFIGURE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				{
				State = 4604; Match(WITH);
				State = 4605; Match(LR_BRACKET);
				State = 4606; Match(CLASSIFIER_FUNCTION);
				State = 4607; Match(EQUAL);
				State = 4613;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,480,_ctx) ) {
				case 1:
					{
					State = 4608; _localctx.schema_name = id_();
					State = 4609; Match(DOT);
					State = 4610; _localctx.function_name = id_();
					}
					break;

				case 2:
					{
					State = 4612; Match(NULL_);
					}
					break;
				}
				State = 4615; Match(RR_BRACKET);
				}
				break;

			case 3:
				{
				State = 4616; Match(RESET);
				State = 4617; Match(STATISTICS);
				}
				break;

			case 4:
				{
				State = 4618; Match(WITH);
				State = 4619; Match(LR_BRACKET);
				State = 4620; Match(MAX_OUTSTANDING_IO_PER_VOLUME);
				State = 4621; Match(EQUAL);
				State = 4622; _localctx.max_outstanding_io_per_volume = Match(DECIMAL);
				State = 4623; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_database_audit_specificationContext : ParserRuleContext {
		public Id_Context audit_specification_name;
		public Id_Context audit_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode[] AUDIT() { return GetTokens(TSqlParser.AUDIT); }
		public ITerminalNode AUDIT(int i) {
			return GetToken(TSqlParser.AUDIT, i);
		}
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public Audit_action_spec_groupContext[] audit_action_spec_group() {
			return GetRuleContexts<Audit_action_spec_groupContext>();
		}
		public Audit_action_spec_groupContext audit_action_spec_group(int i) {
			return GetRuleContext<Audit_action_spec_groupContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Alter_database_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_database_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_database_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_database_audit_specification(this);
		}
	}

	[RuleVersion(0)]
	public Alter_database_audit_specificationContext alter_database_audit_specification() {
		Alter_database_audit_specificationContext _localctx = new Alter_database_audit_specificationContext(_ctx, State);
		EnterRule(_localctx, 364, RULE_alter_database_audit_specification);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4626; Match(ALTER);
			State = 4627; Match(DATABASE);
			State = 4628; Match(AUDIT);
			State = 4629; Match(SPECIFICATION);
			State = 4630; _localctx.audit_specification_name = id_();
			State = 4635;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,482,_ctx) ) {
			case 1:
				{
				State = 4631; Match(FOR);
				State = 4632; Match(SERVER);
				State = 4633; Match(AUDIT);
				State = 4634; _localctx.audit_name = id_();
				}
				break;
			}
			State = 4645;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,484,_ctx) ) {
			case 1:
				{
				State = 4637; audit_action_spec_group();
				State = 4642;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,483,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 4638; Match(COMMA);
						State = 4639; audit_action_spec_group();
						}
						} 
					}
					State = 4644;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,483,_ctx);
				}
				}
				break;
			}
			State = 4653;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,485,_ctx) ) {
			case 1:
				{
				State = 4647; Match(WITH);
				State = 4648; Match(LR_BRACKET);
				State = 4649; Match(STATE);
				State = 4650; Match(EQUAL);
				State = 4651;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 4652; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Audit_action_spec_groupContext : ParserRuleContext {
		public Id_Context audit_action_group_name;
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Audit_action_specificationContext audit_action_specification() {
			return GetRuleContext<Audit_action_specificationContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Audit_action_spec_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_audit_action_spec_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAudit_action_spec_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAudit_action_spec_group(this);
		}
	}

	[RuleVersion(0)]
	public Audit_action_spec_groupContext audit_action_spec_group() {
		Audit_action_spec_groupContext _localctx = new Audit_action_spec_groupContext(_ctx, State);
		EnterRule(_localctx, 366, RULE_audit_action_spec_group);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4655;
			_la = _input.La(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 4656; Match(LR_BRACKET);
			State = 4659;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,486,_ctx) ) {
			case 1:
				{
				State = 4657; audit_action_specification();
				}
				break;

			case 2:
				{
				State = 4658; _localctx.audit_action_group_name = id_();
				}
				break;
			}
			State = 4661; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Audit_action_specificationContext : ParserRuleContext {
		public Action_specificationContext[] action_specification() {
			return GetRuleContexts<Action_specificationContext>();
		}
		public Action_specificationContext action_specification(int i) {
			return GetRuleContext<Action_specificationContext>(i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Audit_securableContext audit_securable() {
			return GetRuleContext<Audit_securableContext>(0);
		}
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public Principal_idContext[] principal_id() {
			return GetRuleContexts<Principal_idContext>();
		}
		public Principal_idContext principal_id(int i) {
			return GetRuleContext<Principal_idContext>(i);
		}
		public Audit_class_nameContext audit_class_name() {
			return GetRuleContext<Audit_class_nameContext>(0);
		}
		public Audit_action_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_audit_action_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAudit_action_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAudit_action_specification(this);
		}
	}

	[RuleVersion(0)]
	public Audit_action_specificationContext audit_action_specification() {
		Audit_action_specificationContext _localctx = new Audit_action_specificationContext(_ctx, State);
		EnterRule(_localctx, 368, RULE_audit_action_specification);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4663; action_specification();
			State = 4668;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,487,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 4664; Match(COMMA);
					State = 4665; action_specification();
					}
					} 
				}
				State = 4670;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,487,_ctx);
			}
			State = 4671; Match(ON);
			State = 4675;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,488,_ctx) ) {
			case 1:
				{
				State = 4672; audit_class_name();
				State = 4673; Match(DOUBLE_COLON);
				}
				break;
			}
			State = 4677; audit_securable();
			State = 4678; Match(BY);
			State = 4679; principal_id();
			State = 4684;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,489,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 4680; Match(COMMA);
					State = 4681; principal_id();
					}
					} 
				}
				State = 4686;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,489,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Action_specificationContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(TSqlParser.SELECT, 0); }
		public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		public ITerminalNode RECEIVE() { return GetToken(TSqlParser.RECEIVE, 0); }
		public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		public Action_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAction_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAction_specification(this);
		}
	}

	[RuleVersion(0)]
	public Action_specificationContext action_specification() {
		Action_specificationContext _localctx = new Action_specificationContext(_ctx, State);
		EnterRule(_localctx, 370, RULE_action_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4687;
			_la = _input.La(1);
			if ( !(_la==DELETE || _la==EXECUTE || _la==INSERT || _la==RECEIVE || _la==REFERENCES || _la==SELECT || _la==UPDATE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Audit_class_nameContext : ParserRuleContext {
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Audit_class_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_audit_class_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAudit_class_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAudit_class_name(this);
		}
	}

	[RuleVersion(0)]
	public Audit_class_nameContext audit_class_name() {
		Audit_class_nameContext _localctx = new Audit_class_nameContext(_ctx, State);
		EnterRule(_localctx, 372, RULE_audit_class_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4689;
			_la = _input.La(1);
			if ( !(_la==OBJECT || _la==SCHEMA || _la==TABLE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Audit_securableContext : ParserRuleContext {
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Audit_securableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_audit_securable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAudit_securable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAudit_securable(this);
		}
	}

	[RuleVersion(0)]
	public Audit_securableContext audit_securable() {
		Audit_securableContext _localctx = new Audit_securableContext(_ctx, State);
		EnterRule(_localctx, 374, RULE_audit_securable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4699;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,491,_ctx) ) {
			case 1:
				{
				State = 4694;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,490,_ctx) ) {
				case 1:
					{
					State = 4691; id_();
					State = 4692; Match(DOT);
					}
					break;
				}
				State = 4696; id_();
				State = 4697; Match(DOT);
				}
				break;
			}
			State = 4701; id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_db_roleContext : ParserRuleContext {
		public Id_Context role_name;
		public Id_Context database_principal;
		public Id_Context new_role_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode MEMBER() { return GetToken(TSqlParser.MEMBER, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Alter_db_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_db_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_db_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_db_role(this);
		}
	}

	[RuleVersion(0)]
	public Alter_db_roleContext alter_db_role() {
		Alter_db_roleContext _localctx = new Alter_db_roleContext(_ctx, State);
		EnterRule(_localctx, 376, RULE_alter_db_role);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4703; Match(ALTER);
			State = 4704; Match(ROLE);
			State = 4705; _localctx.role_name = id_();
			State = 4713;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,492,_ctx) ) {
			case 1:
				{
				State = 4706;
				_la = _input.La(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 4707; Match(MEMBER);
				State = 4708; _localctx.database_principal = id_();
				}
				break;

			case 2:
				{
				State = 4709; Match(WITH);
				State = 4710; Match(NAME);
				State = 4711; Match(EQUAL);
				State = 4712; _localctx.new_role_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_database_audit_specificationContext : ParserRuleContext {
		public Id_Context audit_specification_name;
		public Id_Context audit_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode[] AUDIT() { return GetTokens(TSqlParser.AUDIT); }
		public ITerminalNode AUDIT(int i) {
			return GetToken(TSqlParser.AUDIT, i);
		}
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public Audit_action_spec_groupContext[] audit_action_spec_group() {
			return GetRuleContexts<Audit_action_spec_groupContext>();
		}
		public Audit_action_spec_groupContext audit_action_spec_group(int i) {
			return GetRuleContext<Audit_action_spec_groupContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_database_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_database_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_database_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_database_audit_specification(this);
		}
	}

	[RuleVersion(0)]
	public Create_database_audit_specificationContext create_database_audit_specification() {
		Create_database_audit_specificationContext _localctx = new Create_database_audit_specificationContext(_ctx, State);
		EnterRule(_localctx, 378, RULE_create_database_audit_specification);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4715; Match(CREATE);
			State = 4716; Match(DATABASE);
			State = 4717; Match(AUDIT);
			State = 4718; Match(SPECIFICATION);
			State = 4719; _localctx.audit_specification_name = id_();
			State = 4724;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,493,_ctx) ) {
			case 1:
				{
				State = 4720; Match(FOR);
				State = 4721; Match(SERVER);
				State = 4722; Match(AUDIT);
				State = 4723; _localctx.audit_name = id_();
				}
				break;
			}
			State = 4734;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,495,_ctx) ) {
			case 1:
				{
				State = 4726; audit_action_spec_group();
				State = 4731;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,494,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 4727; Match(COMMA);
						State = 4728; audit_action_spec_group();
						}
						} 
					}
					State = 4733;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,494,_ctx);
				}
				}
				break;
			}
			State = 4742;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,496,_ctx) ) {
			case 1:
				{
				State = 4736; Match(WITH);
				State = 4737; Match(LR_BRACKET);
				State = 4738; Match(STATE);
				State = 4739; Match(EQUAL);
				State = 4740;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 4741; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_db_roleContext : ParserRuleContext {
		public Id_Context role_name;
		public Id_Context owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_db_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_db_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_db_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_db_role(this);
		}
	}

	[RuleVersion(0)]
	public Create_db_roleContext create_db_role() {
		Create_db_roleContext _localctx = new Create_db_roleContext(_ctx, State);
		EnterRule(_localctx, 380, RULE_create_db_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4744; Match(CREATE);
			State = 4745; Match(ROLE);
			State = 4746; _localctx.role_name = id_();
			State = 4749;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,497,_ctx) ) {
			case 1:
				{
				State = 4747; Match(AUTHORIZATION);
				State = 4748; _localctx.owner_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_routeContext : ParserRuleContext {
		public Id_Context route_name;
		public Id_Context owner_name;
		public IToken route_service_name;
		public IToken broker_instance_identifier;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ADDRESS() { return GetToken(TSqlParser.ADDRESS, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode SERVICE_NAME() { return GetToken(TSqlParser.SERVICE_NAME, 0); }
		public ITerminalNode BROKER_INSTANCE() { return GetToken(TSqlParser.BROKER_INSTANCE, 0); }
		public ITerminalNode LIFETIME() { return GetToken(TSqlParser.LIFETIME, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode MIRROR_ADDRESS() { return GetToken(TSqlParser.MIRROR_ADDRESS, 0); }
		public Create_routeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_route; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_route(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_route(this);
		}
	}

	[RuleVersion(0)]
	public Create_routeContext create_route() {
		Create_routeContext _localctx = new Create_routeContext(_ctx, State);
		EnterRule(_localctx, 382, RULE_create_route);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4751; Match(CREATE);
			State = 4752; Match(ROUTE);
			State = 4753; _localctx.route_name = id_();
			State = 4756;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,498,_ctx) ) {
			case 1:
				{
				State = 4754; Match(AUTHORIZATION);
				State = 4755; _localctx.owner_name = id_();
				}
				break;
			}
			State = 4758; Match(WITH);
			State = 4765;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,500,_ctx) ) {
			case 1:
				{
				State = 4760;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,499,_ctx) ) {
				case 1:
					{
					State = 4759; Match(COMMA);
					}
					break;
				}
				State = 4762; Match(SERVICE_NAME);
				State = 4763; Match(EQUAL);
				State = 4764; _localctx.route_service_name = Match(STRING);
				}
				break;
			}
			State = 4773;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,502,_ctx) ) {
			case 1:
				{
				State = 4768;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,501,_ctx) ) {
				case 1:
					{
					State = 4767; Match(COMMA);
					}
					break;
				}
				State = 4770; Match(BROKER_INSTANCE);
				State = 4771; Match(EQUAL);
				State = 4772; _localctx.broker_instance_identifier = Match(STRING);
				}
				break;
			}
			State = 4781;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,504,_ctx) ) {
			case 1:
				{
				State = 4776;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,503,_ctx) ) {
				case 1:
					{
					State = 4775; Match(COMMA);
					}
					break;
				}
				State = 4778; Match(LIFETIME);
				State = 4779; Match(EQUAL);
				State = 4780; Match(DECIMAL);
				}
				break;
			}
			State = 4784;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,505,_ctx) ) {
			case 1:
				{
				State = 4783; Match(COMMA);
				}
				break;
			}
			State = 4786; Match(ADDRESS);
			State = 4787; Match(EQUAL);
			State = 4788; Match(STRING);
			State = 4793;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,506,_ctx) ) {
			case 1:
				{
				State = 4789; Match(COMMA);
				State = 4790; Match(MIRROR_ADDRESS);
				State = 4791; Match(EQUAL);
				State = 4792; Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_ruleContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context rule_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode RULE() { return GetToken(TSqlParser.RULE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Create_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_rule; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_rule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_rule(this);
		}
	}

	[RuleVersion(0)]
	public Create_ruleContext create_rule() {
		Create_ruleContext _localctx = new Create_ruleContext(_ctx, State);
		EnterRule(_localctx, 384, RULE_create_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4795; Match(CREATE);
			State = 4796; Match(RULE);
			State = 4800;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,507,_ctx) ) {
			case 1:
				{
				State = 4797; _localctx.schema_name = id_();
				State = 4798; Match(DOT);
				}
				break;
			}
			State = 4802; _localctx.rule_name = id_();
			State = 4803; Match(AS);
			State = 4804; search_condition(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_sqlContext : ParserRuleContext {
		public Id_Context schema_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] SCHEMA() { return GetTokens(TSqlParser.SCHEMA); }
		public ITerminalNode SCHEMA(int i) {
			return GetToken(TSqlParser.SCHEMA, i);
		}
		public ITerminalNode TRANSFER() { return GetToken(TSqlParser.TRANSFER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode DOUBLE_COLON() { return GetToken(TSqlParser.DOUBLE_COLON, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Alter_schema_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_sql(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_sqlContext alter_schema_sql() {
		Alter_schema_sqlContext _localctx = new Alter_schema_sqlContext(_ctx, State);
		EnterRule(_localctx, 386, RULE_alter_schema_sql);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4806; Match(ALTER);
			State = 4807; Match(SCHEMA);
			State = 4808; _localctx.schema_name = id_();
			State = 4809; Match(TRANSFER);
			State = 4818;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,509,_ctx) ) {
			case 1:
				{
				State = 4815;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,508,_ctx) ) {
				case 1:
					{
					State = 4810; Match(OBJECT);
					}
					break;

				case 2:
					{
					State = 4811; Match(TYPE);
					}
					break;

				case 3:
					{
					State = 4812; Match(XML);
					State = 4813; Match(SCHEMA);
					State = 4814; Match(COLLECTION);
					}
					break;
				}
				State = 4817; Match(DOUBLE_COLON);
				}
				break;
			}
			State = 4820; id_();
			State = 4823;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,510,_ctx) ) {
			case 1:
				{
				State = 4821; Match(DOT);
				State = 4822; id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_schemaContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context owner_name;
		public Id_Context object_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode[] SCHEMA() { return GetTokens(TSqlParser.SCHEMA); }
		public ITerminalNode SCHEMA(int i) {
			return GetToken(TSqlParser.SCHEMA, i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Create_tableContext[] create_table() {
			return GetRuleContexts<Create_tableContext>();
		}
		public Create_tableContext create_table(int i) {
			return GetRuleContext<Create_tableContext>(i);
		}
		public Create_viewContext[] create_view() {
			return GetRuleContexts<Create_viewContext>();
		}
		public Create_viewContext create_view(int i) {
			return GetRuleContext<Create_viewContext>(i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public ITerminalNode[] REVOKE() { return GetTokens(TSqlParser.REVOKE); }
		public ITerminalNode REVOKE(int i) {
			return GetToken(TSqlParser.REVOKE, i);
		}
		public ITerminalNode[] FROM() { return GetTokens(TSqlParser.FROM); }
		public ITerminalNode FROM(int i) {
			return GetToken(TSqlParser.FROM, i);
		}
		public ITerminalNode[] GRANT() { return GetTokens(TSqlParser.GRANT); }
		public ITerminalNode GRANT(int i) {
			return GetToken(TSqlParser.GRANT, i);
		}
		public ITerminalNode[] DENY() { return GetTokens(TSqlParser.DENY); }
		public ITerminalNode DENY(int i) {
			return GetToken(TSqlParser.DENY, i);
		}
		public ITerminalNode[] SELECT() { return GetTokens(TSqlParser.SELECT); }
		public ITerminalNode SELECT(int i) {
			return GetToken(TSqlParser.SELECT, i);
		}
		public ITerminalNode[] INSERT() { return GetTokens(TSqlParser.INSERT); }
		public ITerminalNode INSERT(int i) {
			return GetToken(TSqlParser.INSERT, i);
		}
		public ITerminalNode[] DELETE() { return GetTokens(TSqlParser.DELETE); }
		public ITerminalNode DELETE(int i) {
			return GetToken(TSqlParser.DELETE, i);
		}
		public ITerminalNode[] UPDATE() { return GetTokens(TSqlParser.UPDATE); }
		public ITerminalNode UPDATE(int i) {
			return GetToken(TSqlParser.UPDATE, i);
		}
		public ITerminalNode[] DOUBLE_COLON() { return GetTokens(TSqlParser.DOUBLE_COLON); }
		public ITerminalNode DOUBLE_COLON(int i) {
			return GetToken(TSqlParser.DOUBLE_COLON, i);
		}
		public Create_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_schema(this);
		}
	}

	[RuleVersion(0)]
	public Create_schemaContext create_schema() {
		Create_schemaContext _localctx = new Create_schemaContext(_ctx, State);
		EnterRule(_localctx, 388, RULE_create_schema);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4825; Match(CREATE);
			State = 4826; Match(SCHEMA);
			State = 4834;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,511,_ctx) ) {
			case 1:
				{
				State = 4827; _localctx.schema_name = id_();
				}
				break;

			case 2:
				{
				State = 4828; Match(AUTHORIZATION);
				State = 4829; _localctx.owner_name = id_();
				}
				break;

			case 3:
				{
				State = 4830; _localctx.schema_name = id_();
				State = 4831; Match(AUTHORIZATION);
				State = 4832; _localctx.owner_name = id_();
				}
				break;
			}
			State = 4862;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,515,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 4860;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,514,_ctx) ) {
					case 1:
						{
						State = 4836; create_table();
						}
						break;

					case 2:
						{
						State = 4837; create_view();
						}
						break;

					case 3:
						{
						State = 4838;
						_la = _input.La(1);
						if ( !(_la==DENY || _la==GRANT) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 4839;
						_la = _input.La(1);
						if ( !(_la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 4840; Match(ON);
						State = 4843;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,512,_ctx) ) {
						case 1:
							{
							State = 4841; Match(SCHEMA);
							State = 4842; Match(DOUBLE_COLON);
							}
							break;
						}
						State = 4845; _localctx.object_name = id_();
						State = 4846; Match(TO);
						State = 4847; _localctx.owner_name = id_();
						}
						break;

					case 4:
						{
						State = 4849; Match(REVOKE);
						State = 4850;
						_la = _input.La(1);
						if ( !(_la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 4851; Match(ON);
						State = 4854;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,513,_ctx) ) {
						case 1:
							{
							State = 4852; Match(SCHEMA);
							State = 4853; Match(DOUBLE_COLON);
							}
							break;
						}
						State = 4856; _localctx.object_name = id_();
						State = 4857; Match(FROM);
						State = 4858; _localctx.owner_name = id_();
						}
						break;
					}
					} 
				}
				State = 4864;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,515,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_schema_azure_sql_dw_and_pdwContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_schema_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_schema_azure_sql_dw_and_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_schema_azure_sql_dw_and_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_schema_azure_sql_dw_and_pdw(this);
		}
	}

	[RuleVersion(0)]
	public Create_schema_azure_sql_dw_and_pdwContext create_schema_azure_sql_dw_and_pdw() {
		Create_schema_azure_sql_dw_and_pdwContext _localctx = new Create_schema_azure_sql_dw_and_pdwContext(_ctx, State);
		EnterRule(_localctx, 390, RULE_create_schema_azure_sql_dw_and_pdw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4865; Match(CREATE);
			State = 4866; Match(SCHEMA);
			State = 4867; _localctx.schema_name = id_();
			State = 4870;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,516,_ctx) ) {
			case 1:
				{
				State = 4868; Match(AUTHORIZATION);
				State = 4869; _localctx.owner_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_azure_sql_dw_and_pdwContext : ParserRuleContext {
		public Id_Context schema_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode TRANSFER() { return GetToken(TSqlParser.TRANSFER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode DOUBLE_COLON() { return GetToken(TSqlParser.DOUBLE_COLON, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public Alter_schema_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_azure_sql_dw_and_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_azure_sql_dw_and_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_azure_sql_dw_and_pdw(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_azure_sql_dw_and_pdwContext alter_schema_azure_sql_dw_and_pdw() {
		Alter_schema_azure_sql_dw_and_pdwContext _localctx = new Alter_schema_azure_sql_dw_and_pdwContext(_ctx, State);
		EnterRule(_localctx, 392, RULE_alter_schema_azure_sql_dw_and_pdw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4872; Match(ALTER);
			State = 4873; Match(SCHEMA);
			State = 4874; _localctx.schema_name = id_();
			State = 4875; Match(TRANSFER);
			State = 4878;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,517,_ctx) ) {
			case 1:
				{
				State = 4876; Match(OBJECT);
				State = 4877; Match(DOUBLE_COLON);
				}
				break;
			}
			State = 4880; id_();
			State = 4883;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,518,_ctx) ) {
			case 1:
				{
				State = 4881; Match(DOT);
				State = 4882; Match(ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_search_property_listContext : ParserRuleContext {
		public Id_Context new_list_name;
		public Id_Context database_name;
		public Id_Context source_list_name;
		public Id_Context owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Create_search_property_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_search_property_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_search_property_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_search_property_list(this);
		}
	}

	[RuleVersion(0)]
	public Create_search_property_listContext create_search_property_list() {
		Create_search_property_listContext _localctx = new Create_search_property_listContext(_ctx, State);
		EnterRule(_localctx, 394, RULE_create_search_property_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4885; Match(CREATE);
			State = 4886; Match(SEARCH);
			State = 4887; Match(PROPERTY);
			State = 4888; Match(LIST);
			State = 4889; _localctx.new_list_name = id_();
			State = 4897;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,520,_ctx) ) {
			case 1:
				{
				State = 4890; Match(FROM);
				State = 4894;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,519,_ctx) ) {
				case 1:
					{
					State = 4891; _localctx.database_name = id_();
					State = 4892; Match(DOT);
					}
					break;
				}
				State = 4896; _localctx.source_list_name = id_();
				}
				break;
			}
			State = 4901;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,521,_ctx) ) {
			case 1:
				{
				State = 4899; Match(AUTHORIZATION);
				State = 4900; _localctx.owner_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_security_policyContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context security_policy_name;
		public Id_Context tvf_schema_name;
		public Id_Context security_predicate_function_name;
		public Id_Context column_name_or_arguments;
		public Id_Context table_schema_name;
		public Id_Context name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SECURITY() { return GetToken(TSqlParser.SECURITY, 0); }
		public ITerminalNode POLICY() { return GetToken(TSqlParser.POLICY, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		public ITerminalNode[] PREDICATE() { return GetTokens(TSqlParser.PREDICATE); }
		public ITerminalNode PREDICATE(int i) {
			return GetToken(TSqlParser.PREDICATE, i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] AFTER() { return GetTokens(TSqlParser.AFTER); }
		public ITerminalNode AFTER(int i) {
			return GetToken(TSqlParser.AFTER, i);
		}
		public ITerminalNode[] BEFORE() { return GetTokens(TSqlParser.BEFORE); }
		public ITerminalNode BEFORE(int i) {
			return GetToken(TSqlParser.BEFORE, i);
		}
		public ITerminalNode SCHEMABINDING() { return GetToken(TSqlParser.SCHEMABINDING, 0); }
		public ITerminalNode[] FILTER() { return GetTokens(TSqlParser.FILTER); }
		public ITerminalNode FILTER(int i) {
			return GetToken(TSqlParser.FILTER, i);
		}
		public ITerminalNode[] BLOCK() { return GetTokens(TSqlParser.BLOCK); }
		public ITerminalNode BLOCK(int i) {
			return GetToken(TSqlParser.BLOCK, i);
		}
		public ITerminalNode[] INSERT() { return GetTokens(TSqlParser.INSERT); }
		public ITerminalNode INSERT(int i) {
			return GetToken(TSqlParser.INSERT, i);
		}
		public ITerminalNode[] UPDATE() { return GetTokens(TSqlParser.UPDATE); }
		public ITerminalNode UPDATE(int i) {
			return GetToken(TSqlParser.UPDATE, i);
		}
		public ITerminalNode[] DELETE() { return GetTokens(TSqlParser.DELETE); }
		public ITerminalNode DELETE(int i) {
			return GetToken(TSqlParser.DELETE, i);
		}
		public Create_security_policyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_security_policy; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_security_policy(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_security_policy(this);
		}
	}

	[RuleVersion(0)]
	public Create_security_policyContext create_security_policy() {
		Create_security_policyContext _localctx = new Create_security_policyContext(_ctx, State);
		EnterRule(_localctx, 396, RULE_create_security_policy);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4903; Match(CREATE);
			State = 4904; Match(SECURITY);
			State = 4905; Match(POLICY);
			State = 4909;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,522,_ctx) ) {
			case 1:
				{
				State = 4906; _localctx.schema_name = id_();
				State = 4907; Match(DOT);
				}
				break;
			}
			State = 4911; _localctx.security_policy_name = id_();
			State = 4952;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4913;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,523,_ctx) ) {
					case 1:
						{
						State = 4912; Match(COMMA);
						}
						break;
					}
					State = 4915; Match(ADD);
					State = 4917;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,524,_ctx) ) {
					case 1:
						{
						State = 4916;
						_la = _input.La(1);
						if ( !(_la==BLOCK || _la==FILTER) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					State = 4919; Match(PREDICATE);
					State = 4920; _localctx.tvf_schema_name = id_();
					State = 4921; Match(DOT);
					State = 4922; _localctx.security_predicate_function_name = id_();
					State = 4923; Match(LR_BRACKET);
					State = 4928;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 4925;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,525,_ctx) ) {
							case 1:
								{
								State = 4924; Match(COMMA);
								}
								break;
							}
							State = 4927; _localctx.column_name_or_arguments = id_();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 4930;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,526,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					State = 4932; Match(RR_BRACKET);
					State = 4933; Match(ON);
					State = 4934; _localctx.table_schema_name = id_();
					State = 4935; Match(DOT);
					State = 4936; _localctx.name = id_();
					State = 4949;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,530,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 4947;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,529,_ctx) ) {
							case 1:
								{
								State = 4938;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,527,_ctx) ) {
								case 1:
									{
									State = 4937; Match(COMMA);
									}
									break;
								}
								State = 4940; Match(AFTER);
								State = 4941;
								_la = _input.La(1);
								if ( !(_la==INSERT || _la==UPDATE) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;

							case 2:
								{
								State = 4943;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,528,_ctx) ) {
								case 1:
									{
									State = 4942; Match(COMMA);
									}
									break;
								}
								State = 4945; Match(BEFORE);
								State = 4946;
								_la = _input.La(1);
								if ( !(_la==DELETE || _la==UPDATE) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;
							}
							} 
						}
						State = 4951;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,530,_ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4954;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,531,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 4966;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,533,_ctx) ) {
			case 1:
				{
				State = 4956; Match(WITH);
				State = 4957; Match(LR_BRACKET);
				State = 4958; Match(STATE);
				State = 4959; Match(EQUAL);
				State = 4960;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 4963;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,532,_ctx) ) {
				case 1:
					{
					State = 4961; Match(SCHEMABINDING);
					State = 4962;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 4965; Match(RR_BRACKET);
				}
				break;
			}
			State = 4971;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,534,_ctx) ) {
			case 1:
				{
				State = 4968; Match(NOT);
				State = 4969; Match(FOR);
				State = 4970; Match(REPLICATION);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_sequenceContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context sequence_name;
		public IToken sequnce_increment;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode RESTART() { return GetToken(TSqlParser.RESTART, 0); }
		public ITerminalNode INCREMENT() { return GetToken(TSqlParser.INCREMENT, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode MINVALUE() { return GetToken(TSqlParser.MINVALUE, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] NO() { return GetTokens(TSqlParser.NO); }
		public ITerminalNode NO(int i) {
			return GetToken(TSqlParser.NO, i);
		}
		public ITerminalNode MAXVALUE() { return GetToken(TSqlParser.MAXVALUE, 0); }
		public ITerminalNode CYCLE() { return GetToken(TSqlParser.CYCLE, 0); }
		public ITerminalNode CACHE() { return GetToken(TSqlParser.CACHE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_sequence; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_sequence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_sequence(this);
		}
	}

	[RuleVersion(0)]
	public Alter_sequenceContext alter_sequence() {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(_ctx, State);
		EnterRule(_localctx, 398, RULE_alter_sequence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4973; Match(ALTER);
			State = 4974; Match(SEQUENCE);
			State = 4978;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,535,_ctx) ) {
			case 1:
				{
				State = 4975; _localctx.schema_name = id_();
				State = 4976; Match(DOT);
				}
				break;
			}
			State = 4980; _localctx.sequence_name = id_();
			State = 4986;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,537,_ctx) ) {
			case 1:
				{
				State = 4981; Match(RESTART);
				State = 4984;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,536,_ctx) ) {
				case 1:
					{
					State = 4982; Match(WITH);
					State = 4983; Match(DECIMAL);
					}
					break;
				}
				}
				break;
			}
			State = 4991;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,538,_ctx) ) {
			case 1:
				{
				State = 4988; Match(INCREMENT);
				State = 4989; Match(BY);
				State = 4990; _localctx.sequnce_increment = Match(DECIMAL);
				}
				break;
			}
			State = 4997;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,539,_ctx) ) {
			case 1:
				{
				State = 4993; Match(MINVALUE);
				State = 4994; Match(DECIMAL);
				}
				break;

			case 2:
				{
				State = 4995; Match(NO);
				State = 4996; Match(MINVALUE);
				}
				break;
			}
			State = 5003;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,540,_ctx) ) {
			case 1:
				{
				State = 4999; Match(MAXVALUE);
				State = 5000; Match(DECIMAL);
				}
				break;

			case 2:
				{
				State = 5001; Match(NO);
				State = 5002; Match(MAXVALUE);
				}
				break;
			}
			State = 5008;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,541,_ctx) ) {
			case 1:
				{
				State = 5005; Match(CYCLE);
				}
				break;

			case 2:
				{
				State = 5006; Match(NO);
				State = 5007; Match(CYCLE);
				}
				break;
			}
			State = 5014;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,542,_ctx) ) {
			case 1:
				{
				State = 5010; Match(CACHE);
				State = 5011; Match(DECIMAL);
				}
				break;

			case 2:
				{
				State = 5012; Match(NO);
				State = 5013; Match(CACHE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_sequenceContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context sequence_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode START() { return GetToken(TSqlParser.START, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode INCREMENT() { return GetToken(TSqlParser.INCREMENT, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode MINVALUE() { return GetToken(TSqlParser.MINVALUE, 0); }
		public ITerminalNode[] NO() { return GetTokens(TSqlParser.NO); }
		public ITerminalNode NO(int i) {
			return GetToken(TSqlParser.NO, i);
		}
		public ITerminalNode MAXVALUE() { return GetToken(TSqlParser.MAXVALUE, 0); }
		public ITerminalNode CYCLE() { return GetToken(TSqlParser.CYCLE, 0); }
		public ITerminalNode CACHE() { return GetToken(TSqlParser.CACHE, 0); }
		public ITerminalNode[] MINUS() { return GetTokens(TSqlParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(TSqlParser.MINUS, i);
		}
		public Create_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_sequence; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_sequence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_sequence(this);
		}
	}

	[RuleVersion(0)]
	public Create_sequenceContext create_sequence() {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, State);
		EnterRule(_localctx, 400, RULE_create_sequence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5016; Match(CREATE);
			State = 5017; Match(SEQUENCE);
			State = 5021;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,543,_ctx) ) {
			case 1:
				{
				State = 5018; _localctx.schema_name = id_();
				State = 5019; Match(DOT);
				}
				break;
			}
			State = 5023; _localctx.sequence_name = id_();
			State = 5026;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,544,_ctx) ) {
			case 1:
				{
				State = 5024; Match(AS);
				State = 5025; data_type();
				}
				break;
			}
			State = 5031;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,545,_ctx) ) {
			case 1:
				{
				State = 5028; Match(START);
				State = 5029; Match(WITH);
				State = 5030; Match(DECIMAL);
				}
				break;
			}
			State = 5039;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,547,_ctx) ) {
			case 1:
				{
				State = 5033; Match(INCREMENT);
				State = 5034; Match(BY);
				State = 5036;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,546,_ctx) ) {
				case 1:
					{
					State = 5035; Match(MINUS);
					}
					break;
				}
				State = 5038; Match(DECIMAL);
				}
				break;
			}
			State = 5050;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,550,_ctx) ) {
			case 1:
				{
				State = 5041; Match(MINVALUE);
				State = 5046;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,549,_ctx) ) {
				case 1:
					{
					State = 5043;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,548,_ctx) ) {
					case 1:
						{
						State = 5042; Match(MINUS);
						}
						break;
					}
					State = 5045; Match(DECIMAL);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 5048; Match(NO);
				State = 5049; Match(MINVALUE);
				}
				break;
			}
			State = 5061;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,553,_ctx) ) {
			case 1:
				{
				State = 5052; Match(MAXVALUE);
				State = 5057;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,552,_ctx) ) {
				case 1:
					{
					State = 5054;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,551,_ctx) ) {
					case 1:
						{
						State = 5053; Match(MINUS);
						}
						break;
					}
					State = 5056; Match(DECIMAL);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 5059; Match(NO);
				State = 5060; Match(MAXVALUE);
				}
				break;
			}
			State = 5066;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,554,_ctx) ) {
			case 1:
				{
				State = 5063; Match(CYCLE);
				}
				break;

			case 2:
				{
				State = 5064; Match(NO);
				State = 5065; Match(CYCLE);
				}
				break;
			}
			State = 5074;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,556,_ctx) ) {
			case 1:
				{
				State = 5068; Match(CACHE);
				State = 5070;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,555,_ctx) ) {
				case 1:
					{
					State = 5069; Match(DECIMAL);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 5072; Match(NO);
				State = 5073; Match(CACHE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_auditContext : ParserRuleContext {
		public Id_Context audit_name;
		public IToken filepath;
		public IToken max_rollover_files;
		public IToken max_files;
		public IToken queue_delay;
		public Id_Context event_field_name;
		public Id_Context new_audit_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode APPLICATION_LOG() { return GetToken(TSqlParser.APPLICATION_LOG, 0); }
		public ITerminalNode SECURITY_LOG() { return GetToken(TSqlParser.SECURITY_LOG, 0); }
		public ITerminalNode[] QUEUE_DELAY() { return GetTokens(TSqlParser.QUEUE_DELAY); }
		public ITerminalNode QUEUE_DELAY(int i) {
			return GetToken(TSqlParser.QUEUE_DELAY, i);
		}
		public ITerminalNode[] ON_FAILURE() { return GetTokens(TSqlParser.ON_FAILURE); }
		public ITerminalNode ON_FAILURE(int i) {
			return GetToken(TSqlParser.ON_FAILURE, i);
		}
		public ITerminalNode[] STATE() { return GetTokens(TSqlParser.STATE); }
		public ITerminalNode STATE(int i) {
			return GetToken(TSqlParser.STATE, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public ITerminalNode[] CONTINUE() { return GetTokens(TSqlParser.CONTINUE); }
		public ITerminalNode CONTINUE(int i) {
			return GetToken(TSqlParser.CONTINUE, i);
		}
		public ITerminalNode[] SHUTDOWN() { return GetTokens(TSqlParser.SHUTDOWN); }
		public ITerminalNode SHUTDOWN(int i) {
			return GetToken(TSqlParser.SHUTDOWN, i);
		}
		public ITerminalNode[] FAIL_OPERATION() { return GetTokens(TSqlParser.FAIL_OPERATION); }
		public ITerminalNode FAIL_OPERATION(int i) {
			return GetToken(TSqlParser.FAIL_OPERATION, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode GREATER() { return GetToken(TSqlParser.GREATER, 0); }
		public ITerminalNode LESS() { return GetToken(TSqlParser.LESS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode EXCLAMATION() { return GetToken(TSqlParser.EXCLAMATION, 0); }
		public ITerminalNode[] FILEPATH() { return GetTokens(TSqlParser.FILEPATH); }
		public ITerminalNode FILEPATH(int i) {
			return GetToken(TSqlParser.FILEPATH, i);
		}
		public ITerminalNode[] MAXSIZE() { return GetTokens(TSqlParser.MAXSIZE); }
		public ITerminalNode MAXSIZE(int i) {
			return GetToken(TSqlParser.MAXSIZE, i);
		}
		public ITerminalNode[] MAX_ROLLOVER_FILES() { return GetTokens(TSqlParser.MAX_ROLLOVER_FILES); }
		public ITerminalNode MAX_ROLLOVER_FILES(int i) {
			return GetToken(TSqlParser.MAX_ROLLOVER_FILES, i);
		}
		public ITerminalNode[] MAX_FILES() { return GetTokens(TSqlParser.MAX_FILES); }
		public ITerminalNode MAX_FILES(int i) {
			return GetToken(TSqlParser.MAX_FILES, i);
		}
		public ITerminalNode[] RESERVE_DISK_SPACE() { return GetTokens(TSqlParser.RESERVE_DISK_SPACE); }
		public ITerminalNode RESERVE_DISK_SPACE(int i) {
			return GetToken(TSqlParser.RESERVE_DISK_SPACE, i);
		}
		public ITerminalNode[] UNLIMITED() { return GetTokens(TSqlParser.UNLIMITED); }
		public ITerminalNode UNLIMITED(int i) {
			return GetToken(TSqlParser.UNLIMITED, i);
		}
		public ITerminalNode[] MB() { return GetTokens(TSqlParser.MB); }
		public ITerminalNode MB(int i) {
			return GetToken(TSqlParser.MB, i);
		}
		public ITerminalNode[] GB() { return GetTokens(TSqlParser.GB); }
		public ITerminalNode GB(int i) {
			return GetToken(TSqlParser.GB, i);
		}
		public ITerminalNode[] TB() { return GetTokens(TSqlParser.TB); }
		public ITerminalNode TB(int i) {
			return GetToken(TSqlParser.TB, i);
		}
		public Alter_server_auditContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_audit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_audit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_audit(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_auditContext alter_server_audit() {
		Alter_server_auditContext _localctx = new Alter_server_auditContext(_ctx, State);
		EnterRule(_localctx, 402, RULE_alter_server_audit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5076; Match(ALTER);
			State = 5077; Match(SERVER);
			State = 5078; Match(AUDIT);
			State = 5079; _localctx.audit_name = id_();
			State = 5211;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,581,_ctx) ) {
			case 1:
				{
				State = 5127;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,566,_ctx) ) {
				case 1:
					{
					State = 5080; Match(TO);
					State = 5125;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,565,_ctx) ) {
					case 1:
						{
						State = 5081; Match(FILE);
						{
						State = 5082; Match(LR_BRACKET);
						State = 5119;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,564,_ctx);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
							if ( _alt==1 ) {
								{
								State = 5117;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,563,_ctx) ) {
								case 1:
									{
									State = 5084;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,557,_ctx) ) {
									case 1:
										{
										State = 5083; Match(COMMA);
										}
										break;
									}
									State = 5086; Match(FILEPATH);
									State = 5087; Match(EQUAL);
									State = 5088; _localctx.filepath = Match(STRING);
									}
									break;

								case 2:
									{
									State = 5090;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,558,_ctx) ) {
									case 1:
										{
										State = 5089; Match(COMMA);
										}
										break;
									}
									State = 5092; Match(MAXSIZE);
									State = 5093; Match(EQUAL);
									State = 5097;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,559,_ctx) ) {
									case 1:
										{
										State = 5094; Match(DECIMAL);
										State = 5095;
										_la = _input.La(1);
										if ( !(_la==GB || _la==MB || _la==TB) ) {
										_errHandler.RecoverInline(this);
										} else {
											if (_input.La(1) == TokenConstants.Eof) {
												matchedEOF = true;
											}

											_errHandler.ReportMatch(this);
											Consume();
										}
										}
										break;

									case 2:
										{
										State = 5096; Match(UNLIMITED);
										}
										break;
									}
									}
									break;

								case 3:
									{
									State = 5100;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,560,_ctx) ) {
									case 1:
										{
										State = 5099; Match(COMMA);
										}
										break;
									}
									State = 5102; Match(MAX_ROLLOVER_FILES);
									State = 5103; Match(EQUAL);
									State = 5104;
									_localctx.max_rollover_files = _input.Lt(1);
									_la = _input.La(1);
									if ( !(_la==UNLIMITED || _la==DECIMAL) ) {
										_localctx.max_rollover_files = _errHandler.RecoverInline(this);
									} else {
										if (_input.La(1) == TokenConstants.Eof) {
											matchedEOF = true;
										}

										_errHandler.ReportMatch(this);
										Consume();
									}
									}
									break;

								case 4:
									{
									State = 5106;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,561,_ctx) ) {
									case 1:
										{
										State = 5105; Match(COMMA);
										}
										break;
									}
									State = 5108; Match(MAX_FILES);
									State = 5109; Match(EQUAL);
									State = 5110; _localctx.max_files = Match(DECIMAL);
									}
									break;

								case 5:
									{
									State = 5112;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,562,_ctx) ) {
									case 1:
										{
										State = 5111; Match(COMMA);
										}
										break;
									}
									State = 5114; Match(RESERVE_DISK_SPACE);
									State = 5115; Match(EQUAL);
									State = 5116;
									_la = _input.La(1);
									if ( !(_la==OFF || _la==ON) ) {
									_errHandler.RecoverInline(this);
									} else {
										if (_input.La(1) == TokenConstants.Eof) {
											matchedEOF = true;
										}

										_errHandler.ReportMatch(this);
										Consume();
									}
									}
									break;
								}
								} 
							}
							State = 5121;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,564,_ctx);
						}
						State = 5122; Match(RR_BRACKET);
						}
						}
						break;

					case 2:
						{
						State = 5123; Match(APPLICATION_LOG);
						}
						break;

					case 3:
						{
						State = 5124; Match(SECURITY_LOG);
						}
						break;
					}
					}
					break;
				}
				State = 5155;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,572,_ctx) ) {
				case 1:
					{
					State = 5129; Match(WITH);
					State = 5130; Match(LR_BRACKET);
					State = 5151;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,571,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 5149;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,570,_ctx) ) {
							case 1:
								{
								State = 5132;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,567,_ctx) ) {
								case 1:
									{
									State = 5131; Match(COMMA);
									}
									break;
								}
								State = 5134; Match(QUEUE_DELAY);
								State = 5135; Match(EQUAL);
								State = 5136; _localctx.queue_delay = Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 5138;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,568,_ctx) ) {
								case 1:
									{
									State = 5137; Match(COMMA);
									}
									break;
								}
								State = 5140; Match(ON_FAILURE);
								State = 5141; Match(EQUAL);
								State = 5142;
								_la = _input.La(1);
								if ( !(_la==CONTINUE || _la==FAIL_OPERATION || _la==SHUTDOWN) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;

							case 3:
								{
								State = 5144;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,569,_ctx) ) {
								case 1:
									{
									State = 5143; Match(COMMA);
									}
									break;
								}
								State = 5146; Match(STATE);
								State = 5147; Match(EQUAL);
								State = 5148;
								_la = _input.La(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;
							}
							} 
						}
						State = 5153;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,571,_ctx);
					}
					State = 5154; Match(RR_BRACKET);
					}
					break;
				}
				State = 5203;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,580,_ctx) ) {
				case 1:
					{
					State = 5157; Match(WHERE);
					State = 5201;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,579,_ctx) ) {
					case 1:
						{
						State = 5159;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,573,_ctx) ) {
						case 1:
							{
							State = 5158; Match(COMMA);
							}
							break;
						}
						{
						State = 5162;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,574,_ctx) ) {
						case 1:
							{
							State = 5161; Match(NOT);
							}
							break;
						}
						}
						State = 5164; _localctx.event_field_name = id_();
						State = 5176;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,575,_ctx) ) {
						case 1:
							{
							State = 5165; Match(EQUAL);
							}
							break;

						case 2:
							{
							{
							State = 5166; Match(LESS);
							State = 5167; Match(GREATER);
							}
							}
							break;

						case 3:
							{
							{
							State = 5168; Match(EXCLAMATION);
							State = 5169; Match(EQUAL);
							}
							}
							break;

						case 4:
							{
							State = 5170; Match(GREATER);
							}
							break;

						case 5:
							{
							{
							State = 5171; Match(GREATER);
							State = 5172; Match(EQUAL);
							}
							}
							break;

						case 6:
							{
							State = 5173; Match(LESS);
							}
							break;

						case 7:
							{
							State = 5174; Match(LESS);
							State = 5175; Match(EQUAL);
							}
							break;
						}
						State = 5178;
						_la = _input.La(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 2:
						{
						State = 5181;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,576,_ctx) ) {
						case 1:
							{
							State = 5180; Match(COMMA);
							}
							break;
						}
						State = 5183;
						_la = _input.La(1);
						if ( !(_la==AND || _la==OR) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 5185;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,577,_ctx) ) {
						case 1:
							{
							State = 5184; Match(NOT);
							}
							break;
						}
						State = 5198;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,578,_ctx) ) {
						case 1:
							{
							State = 5187; Match(EQUAL);
							}
							break;

						case 2:
							{
							{
							State = 5188; Match(LESS);
							State = 5189; Match(GREATER);
							}
							}
							break;

						case 3:
							{
							{
							State = 5190; Match(EXCLAMATION);
							State = 5191; Match(EQUAL);
							}
							}
							break;

						case 4:
							{
							State = 5192; Match(GREATER);
							}
							break;

						case 5:
							{
							{
							State = 5193; Match(GREATER);
							State = 5194; Match(EQUAL);
							}
							}
							break;

						case 6:
							{
							State = 5195; Match(LESS);
							}
							break;

						case 7:
							{
							State = 5196; Match(LESS);
							State = 5197; Match(EQUAL);
							}
							break;
						}
						State = 5200;
						_la = _input.La(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 5205; Match(REMOVE);
				State = 5206; Match(WHERE);
				}
				break;

			case 3:
				{
				State = 5207; Match(MODIFY);
				State = 5208; Match(NAME);
				State = 5209; Match(EQUAL);
				State = 5210; _localctx.new_audit_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_server_auditContext : ParserRuleContext {
		public Id_Context audit_name;
		public IToken filepath;
		public IToken max_rollover_files;
		public IToken max_files;
		public IToken queue_delay;
		public Id_Context audit_guid;
		public Id_Context event_field_name;
		public Id_Context new_audit_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode APPLICATION_LOG() { return GetToken(TSqlParser.APPLICATION_LOG, 0); }
		public ITerminalNode SECURITY_LOG() { return GetToken(TSqlParser.SECURITY_LOG, 0); }
		public ITerminalNode[] QUEUE_DELAY() { return GetTokens(TSqlParser.QUEUE_DELAY); }
		public ITerminalNode QUEUE_DELAY(int i) {
			return GetToken(TSqlParser.QUEUE_DELAY, i);
		}
		public ITerminalNode[] ON_FAILURE() { return GetTokens(TSqlParser.ON_FAILURE); }
		public ITerminalNode ON_FAILURE(int i) {
			return GetToken(TSqlParser.ON_FAILURE, i);
		}
		public ITerminalNode[] STATE() { return GetTokens(TSqlParser.STATE); }
		public ITerminalNode STATE(int i) {
			return GetToken(TSqlParser.STATE, i);
		}
		public ITerminalNode[] AUDIT_GUID() { return GetTokens(TSqlParser.AUDIT_GUID); }
		public ITerminalNode AUDIT_GUID(int i) {
			return GetToken(TSqlParser.AUDIT_GUID, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public ITerminalNode[] CONTINUE() { return GetTokens(TSqlParser.CONTINUE); }
		public ITerminalNode CONTINUE(int i) {
			return GetToken(TSqlParser.CONTINUE, i);
		}
		public ITerminalNode[] SHUTDOWN() { return GetTokens(TSqlParser.SHUTDOWN); }
		public ITerminalNode SHUTDOWN(int i) {
			return GetToken(TSqlParser.SHUTDOWN, i);
		}
		public ITerminalNode[] FAIL_OPERATION() { return GetTokens(TSqlParser.FAIL_OPERATION); }
		public ITerminalNode FAIL_OPERATION(int i) {
			return GetToken(TSqlParser.FAIL_OPERATION, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode GREATER() { return GetToken(TSqlParser.GREATER, 0); }
		public ITerminalNode LESS() { return GetToken(TSqlParser.LESS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode EXCLAMATION() { return GetToken(TSqlParser.EXCLAMATION, 0); }
		public ITerminalNode[] FILEPATH() { return GetTokens(TSqlParser.FILEPATH); }
		public ITerminalNode FILEPATH(int i) {
			return GetToken(TSqlParser.FILEPATH, i);
		}
		public ITerminalNode[] MAXSIZE() { return GetTokens(TSqlParser.MAXSIZE); }
		public ITerminalNode MAXSIZE(int i) {
			return GetToken(TSqlParser.MAXSIZE, i);
		}
		public ITerminalNode[] MAX_ROLLOVER_FILES() { return GetTokens(TSqlParser.MAX_ROLLOVER_FILES); }
		public ITerminalNode MAX_ROLLOVER_FILES(int i) {
			return GetToken(TSqlParser.MAX_ROLLOVER_FILES, i);
		}
		public ITerminalNode[] MAX_FILES() { return GetTokens(TSqlParser.MAX_FILES); }
		public ITerminalNode MAX_FILES(int i) {
			return GetToken(TSqlParser.MAX_FILES, i);
		}
		public ITerminalNode[] RESERVE_DISK_SPACE() { return GetTokens(TSqlParser.RESERVE_DISK_SPACE); }
		public ITerminalNode RESERVE_DISK_SPACE(int i) {
			return GetToken(TSqlParser.RESERVE_DISK_SPACE, i);
		}
		public ITerminalNode[] UNLIMITED() { return GetTokens(TSqlParser.UNLIMITED); }
		public ITerminalNode UNLIMITED(int i) {
			return GetToken(TSqlParser.UNLIMITED, i);
		}
		public ITerminalNode[] MB() { return GetTokens(TSqlParser.MB); }
		public ITerminalNode MB(int i) {
			return GetToken(TSqlParser.MB, i);
		}
		public ITerminalNode[] GB() { return GetTokens(TSqlParser.GB); }
		public ITerminalNode GB(int i) {
			return GetToken(TSqlParser.GB, i);
		}
		public ITerminalNode[] TB() { return GetTokens(TSqlParser.TB); }
		public ITerminalNode TB(int i) {
			return GetToken(TSqlParser.TB, i);
		}
		public Create_server_auditContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_server_audit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_server_audit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_server_audit(this);
		}
	}

	[RuleVersion(0)]
	public Create_server_auditContext create_server_audit() {
		Create_server_auditContext _localctx = new Create_server_auditContext(_ctx, State);
		EnterRule(_localctx, 404, RULE_create_server_audit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5213; Match(CREATE);
			State = 5214; Match(SERVER);
			State = 5215; Match(AUDIT);
			State = 5216; _localctx.audit_name = id_();
			State = 5354;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,607,_ctx) ) {
			case 1:
				{
				State = 5264;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,591,_ctx) ) {
				case 1:
					{
					State = 5217; Match(TO);
					State = 5262;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,590,_ctx) ) {
					case 1:
						{
						State = 5218; Match(FILE);
						{
						State = 5219; Match(LR_BRACKET);
						State = 5256;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,589,_ctx);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
							if ( _alt==1 ) {
								{
								State = 5254;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,588,_ctx) ) {
								case 1:
									{
									State = 5221;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,582,_ctx) ) {
									case 1:
										{
										State = 5220; Match(COMMA);
										}
										break;
									}
									State = 5223; Match(FILEPATH);
									State = 5224; Match(EQUAL);
									State = 5225; _localctx.filepath = Match(STRING);
									}
									break;

								case 2:
									{
									State = 5227;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,583,_ctx) ) {
									case 1:
										{
										State = 5226; Match(COMMA);
										}
										break;
									}
									State = 5229; Match(MAXSIZE);
									State = 5230; Match(EQUAL);
									State = 5234;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,584,_ctx) ) {
									case 1:
										{
										State = 5231; Match(DECIMAL);
										State = 5232;
										_la = _input.La(1);
										if ( !(_la==GB || _la==MB || _la==TB) ) {
										_errHandler.RecoverInline(this);
										} else {
											if (_input.La(1) == TokenConstants.Eof) {
												matchedEOF = true;
											}

											_errHandler.ReportMatch(this);
											Consume();
										}
										}
										break;

									case 2:
										{
										State = 5233; Match(UNLIMITED);
										}
										break;
									}
									}
									break;

								case 3:
									{
									State = 5237;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,585,_ctx) ) {
									case 1:
										{
										State = 5236; Match(COMMA);
										}
										break;
									}
									State = 5239; Match(MAX_ROLLOVER_FILES);
									State = 5240; Match(EQUAL);
									State = 5241;
									_localctx.max_rollover_files = _input.Lt(1);
									_la = _input.La(1);
									if ( !(_la==UNLIMITED || _la==DECIMAL) ) {
										_localctx.max_rollover_files = _errHandler.RecoverInline(this);
									} else {
										if (_input.La(1) == TokenConstants.Eof) {
											matchedEOF = true;
										}

										_errHandler.ReportMatch(this);
										Consume();
									}
									}
									break;

								case 4:
									{
									State = 5243;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,586,_ctx) ) {
									case 1:
										{
										State = 5242; Match(COMMA);
										}
										break;
									}
									State = 5245; Match(MAX_FILES);
									State = 5246; Match(EQUAL);
									State = 5247; _localctx.max_files = Match(DECIMAL);
									}
									break;

								case 5:
									{
									State = 5249;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,587,_ctx) ) {
									case 1:
										{
										State = 5248; Match(COMMA);
										}
										break;
									}
									State = 5251; Match(RESERVE_DISK_SPACE);
									State = 5252; Match(EQUAL);
									State = 5253;
									_la = _input.La(1);
									if ( !(_la==OFF || _la==ON) ) {
									_errHandler.RecoverInline(this);
									} else {
										if (_input.La(1) == TokenConstants.Eof) {
											matchedEOF = true;
										}

										_errHandler.ReportMatch(this);
										Consume();
									}
									}
									break;
								}
								} 
							}
							State = 5258;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,589,_ctx);
						}
						State = 5259; Match(RR_BRACKET);
						}
						}
						break;

					case 2:
						{
						State = 5260; Match(APPLICATION_LOG);
						}
						break;

					case 3:
						{
						State = 5261; Match(SECURITY_LOG);
						}
						break;
					}
					}
					break;
				}
				State = 5298;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,598,_ctx) ) {
				case 1:
					{
					State = 5266; Match(WITH);
					State = 5267; Match(LR_BRACKET);
					State = 5294;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,597,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 5292;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,596,_ctx) ) {
							case 1:
								{
								State = 5269;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,592,_ctx) ) {
								case 1:
									{
									State = 5268; Match(COMMA);
									}
									break;
								}
								State = 5271; Match(QUEUE_DELAY);
								State = 5272; Match(EQUAL);
								State = 5273; _localctx.queue_delay = Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 5275;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,593,_ctx) ) {
								case 1:
									{
									State = 5274; Match(COMMA);
									}
									break;
								}
								State = 5277; Match(ON_FAILURE);
								State = 5278; Match(EQUAL);
								State = 5279;
								_la = _input.La(1);
								if ( !(_la==CONTINUE || _la==FAIL_OPERATION || _la==SHUTDOWN) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;

							case 3:
								{
								State = 5281;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,594,_ctx) ) {
								case 1:
									{
									State = 5280; Match(COMMA);
									}
									break;
								}
								State = 5283; Match(STATE);
								State = 5284; Match(EQUAL);
								State = 5285;
								_la = _input.La(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;

							case 4:
								{
								State = 5287;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,595,_ctx) ) {
								case 1:
									{
									State = 5286; Match(COMMA);
									}
									break;
								}
								State = 5289; Match(AUDIT_GUID);
								State = 5290; Match(EQUAL);
								State = 5291; _localctx.audit_guid = id_();
								}
								break;
							}
							} 
						}
						State = 5296;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,597,_ctx);
					}
					State = 5297; Match(RR_BRACKET);
					}
					break;
				}
				State = 5346;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,606,_ctx) ) {
				case 1:
					{
					State = 5300; Match(WHERE);
					State = 5344;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,605,_ctx) ) {
					case 1:
						{
						State = 5302;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,599,_ctx) ) {
						case 1:
							{
							State = 5301; Match(COMMA);
							}
							break;
						}
						{
						State = 5305;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,600,_ctx) ) {
						case 1:
							{
							State = 5304; Match(NOT);
							}
							break;
						}
						}
						State = 5307; _localctx.event_field_name = id_();
						State = 5319;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,601,_ctx) ) {
						case 1:
							{
							State = 5308; Match(EQUAL);
							}
							break;

						case 2:
							{
							{
							State = 5309; Match(LESS);
							State = 5310; Match(GREATER);
							}
							}
							break;

						case 3:
							{
							{
							State = 5311; Match(EXCLAMATION);
							State = 5312; Match(EQUAL);
							}
							}
							break;

						case 4:
							{
							State = 5313; Match(GREATER);
							}
							break;

						case 5:
							{
							{
							State = 5314; Match(GREATER);
							State = 5315; Match(EQUAL);
							}
							}
							break;

						case 6:
							{
							State = 5316; Match(LESS);
							}
							break;

						case 7:
							{
							State = 5317; Match(LESS);
							State = 5318; Match(EQUAL);
							}
							break;
						}
						State = 5321;
						_la = _input.La(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 2:
						{
						State = 5324;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,602,_ctx) ) {
						case 1:
							{
							State = 5323; Match(COMMA);
							}
							break;
						}
						State = 5326;
						_la = _input.La(1);
						if ( !(_la==AND || _la==OR) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 5328;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,603,_ctx) ) {
						case 1:
							{
							State = 5327; Match(NOT);
							}
							break;
						}
						State = 5341;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,604,_ctx) ) {
						case 1:
							{
							State = 5330; Match(EQUAL);
							}
							break;

						case 2:
							{
							{
							State = 5331; Match(LESS);
							State = 5332; Match(GREATER);
							}
							}
							break;

						case 3:
							{
							{
							State = 5333; Match(EXCLAMATION);
							State = 5334; Match(EQUAL);
							}
							}
							break;

						case 4:
							{
							State = 5335; Match(GREATER);
							}
							break;

						case 5:
							{
							{
							State = 5336; Match(GREATER);
							State = 5337; Match(EQUAL);
							}
							}
							break;

						case 6:
							{
							State = 5338; Match(LESS);
							}
							break;

						case 7:
							{
							State = 5339; Match(LESS);
							State = 5340; Match(EQUAL);
							}
							break;
						}
						State = 5343;
						_la = _input.La(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 5348; Match(REMOVE);
				State = 5349; Match(WHERE);
				}
				break;

			case 3:
				{
				State = 5350; Match(MODIFY);
				State = 5351; Match(NAME);
				State = 5352; Match(EQUAL);
				State = 5353; _localctx.new_audit_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_audit_specificationContext : ParserRuleContext {
		public Id_Context audit_specification_name;
		public Id_Context audit_name;
		public Id_Context audit_action_group_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] SERVER() { return GetTokens(TSqlParser.SERVER); }
		public ITerminalNode SERVER(int i) {
			return GetToken(TSqlParser.SERVER, i);
		}
		public ITerminalNode[] AUDIT() { return GetTokens(TSqlParser.AUDIT); }
		public ITerminalNode AUDIT(int i) {
			return GetToken(TSqlParser.AUDIT, i);
		}
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		public ITerminalNode[] DROP() { return GetTokens(TSqlParser.DROP); }
		public ITerminalNode DROP(int i) {
			return GetToken(TSqlParser.DROP, i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Alter_server_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_audit_specification(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_audit_specificationContext alter_server_audit_specification() {
		Alter_server_audit_specificationContext _localctx = new Alter_server_audit_specificationContext(_ctx, State);
		EnterRule(_localctx, 406, RULE_alter_server_audit_specification);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5356; Match(ALTER);
			State = 5357; Match(SERVER);
			State = 5358; Match(AUDIT);
			State = 5359; Match(SPECIFICATION);
			State = 5360; _localctx.audit_specification_name = id_();
			State = 5365;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,608,_ctx) ) {
			case 1:
				{
				State = 5361; Match(FOR);
				State = 5362; Match(SERVER);
				State = 5363; Match(AUDIT);
				State = 5364; _localctx.audit_name = id_();
				}
				break;
			}
			State = 5374;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,609,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 5367;
					_la = _input.La(1);
					if ( !(_la==ADD || _la==DROP) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5368; Match(LR_BRACKET);
					State = 5369; _localctx.audit_action_group_name = id_();
					State = 5370; Match(RR_BRACKET);
					}
					} 
				}
				State = 5376;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,609,_ctx);
			}
			State = 5383;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,610,_ctx) ) {
			case 1:
				{
				State = 5377; Match(WITH);
				State = 5378; Match(LR_BRACKET);
				State = 5379; Match(STATE);
				State = 5380; Match(EQUAL);
				State = 5381;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 5382; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_server_audit_specificationContext : ParserRuleContext {
		public Id_Context audit_specification_name;
		public Id_Context audit_name;
		public Id_Context audit_action_group_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode[] SERVER() { return GetTokens(TSqlParser.SERVER); }
		public ITerminalNode SERVER(int i) {
			return GetToken(TSqlParser.SERVER, i);
		}
		public ITerminalNode[] AUDIT() { return GetTokens(TSqlParser.AUDIT); }
		public ITerminalNode AUDIT(int i) {
			return GetToken(TSqlParser.AUDIT, i);
		}
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_server_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_server_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_server_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_server_audit_specification(this);
		}
	}

	[RuleVersion(0)]
	public Create_server_audit_specificationContext create_server_audit_specification() {
		Create_server_audit_specificationContext _localctx = new Create_server_audit_specificationContext(_ctx, State);
		EnterRule(_localctx, 408, RULE_create_server_audit_specification);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5385; Match(CREATE);
			State = 5386; Match(SERVER);
			State = 5387; Match(AUDIT);
			State = 5388; Match(SPECIFICATION);
			State = 5389; _localctx.audit_specification_name = id_();
			State = 5394;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,611,_ctx) ) {
			case 1:
				{
				State = 5390; Match(FOR);
				State = 5391; Match(SERVER);
				State = 5392; Match(AUDIT);
				State = 5393; _localctx.audit_name = id_();
				}
				break;
			}
			State = 5403;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,612,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 5396; Match(ADD);
					State = 5397; Match(LR_BRACKET);
					State = 5398; _localctx.audit_action_group_name = id_();
					State = 5399; Match(RR_BRACKET);
					}
					} 
				}
				State = 5405;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,612,_ctx);
			}
			State = 5412;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,613,_ctx) ) {
			case 1:
				{
				State = 5406; Match(WITH);
				State = 5407; Match(LR_BRACKET);
				State = 5408; Match(STATE);
				State = 5409; Match(EQUAL);
				State = 5410;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 5411; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_configurationContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode CONFIGURATION() { return GetToken(TSqlParser.CONFIGURATION, 0); }
		public ITerminalNode[] SET() { return GetTokens(TSqlParser.SET); }
		public ITerminalNode SET(int i) {
			return GetToken(TSqlParser.SET, i);
		}
		public ITerminalNode PROCESS() { return GetToken(TSqlParser.PROCESS, 0); }
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode DIAGNOSTICS() { return GetToken(TSqlParser.DIAGNOSTICS, 0); }
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode FAILOVER() { return GetToken(TSqlParser.FAILOVER, 0); }
		public ITerminalNode CLUSTER() { return GetToken(TSqlParser.CLUSTER, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode HADR() { return GetToken(TSqlParser.HADR, 0); }
		public ITerminalNode CONTEXT() { return GetToken(TSqlParser.CONTEXT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode BUFFER() { return GetToken(TSqlParser.BUFFER, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public ITerminalNode EXTENSION() { return GetToken(TSqlParser.EXTENSION, 0); }
		public ITerminalNode SOFTNUMA() { return GetToken(TSqlParser.SOFTNUMA, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LOCAL() { return GetToken(TSqlParser.LOCAL, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode CPU() { return GetToken(TSqlParser.CPU, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		public ITerminalNode MAX_SIZE() { return GetToken(TSqlParser.MAX_SIZE, 0); }
		public ITerminalNode MAX_FILES() { return GetToken(TSqlParser.MAX_FILES, 0); }
		public ITerminalNode VERBOSELOGGING() { return GetToken(TSqlParser.VERBOSELOGGING, 0); }
		public ITerminalNode SQLDUMPERFLAGS() { return GetToken(TSqlParser.SQLDUMPERFLAGS, 0); }
		public ITerminalNode SQLDUMPERPATH() { return GetToken(TSqlParser.SQLDUMPERPATH, 0); }
		public ITerminalNode SQLDUMPERTIMEOUT() { return GetToken(TSqlParser.SQLDUMPERTIMEOUT, 0); }
		public ITerminalNode FAILURECONDITIONLEVEL() { return GetToken(TSqlParser.FAILURECONDITIONLEVEL, 0); }
		public ITerminalNode HEALTHCHECKTIMEOUT() { return GetToken(TSqlParser.HEALTHCHECKTIMEOUT, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode FILENAME() { return GetToken(TSqlParser.FILENAME, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode KB() { return GetToken(TSqlParser.KB, 0); }
		public ITerminalNode MB() { return GetToken(TSqlParser.MB, 0); }
		public ITerminalNode GB() { return GetToken(TSqlParser.GB, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Alter_server_configurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_configuration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_configuration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_configuration(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_configurationContext alter_server_configuration() {
		Alter_server_configurationContext _localctx = new Alter_server_configurationContext(_ctx, State);
		EnterRule(_localctx, 410, RULE_alter_server_configuration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5414; Match(ALTER);
			State = 5415; Match(SERVER);
			State = 5416; Match(CONFIGURATION);
			State = 5417; Match(SET);
			{
			State = 5523;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,628,_ctx) ) {
			case 1:
				{
				State = 5418; Match(PROCESS);
				State = 5419; Match(AFFINITY);
				State = 5455;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,623,_ctx) ) {
				case 1:
					{
					State = 5420; Match(CPU);
					State = 5421; Match(EQUAL);
					State = 5437;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,618,_ctx) ) {
					case 1:
						{
						State = 5422; Match(AUTO);
						}
						break;

					case 2:
						{
						State = 5433;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								State = 5433;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,616,_ctx) ) {
								case 1:
									{
									State = 5424;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,614,_ctx) ) {
									case 1:
										{
										State = 5423; Match(COMMA);
										}
										break;
									}
									State = 5426; Match(DECIMAL);
									}
									break;

								case 2:
									{
									State = 5428;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,615,_ctx) ) {
									case 1:
										{
										State = 5427; Match(COMMA);
										}
										break;
									}
									State = 5430; Match(DECIMAL);
									State = 5431; Match(TO);
									State = 5432; Match(DECIMAL);
									}
									break;
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 5435;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,617,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 5439; Match(NUMANODE);
					State = 5440; Match(EQUAL);
					State = 5451;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							State = 5451;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,621,_ctx) ) {
							case 1:
								{
								State = 5442;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,619,_ctx) ) {
								case 1:
									{
									State = 5441; Match(COMMA);
									}
									break;
								}
								State = 5444; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 5446;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,620,_ctx) ) {
								case 1:
									{
									State = 5445; Match(COMMA);
									}
									break;
								}
								State = 5448; Match(DECIMAL);
								State = 5449; Match(TO);
								State = 5450; Match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 5453;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,622,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 5457; Match(DIAGNOSTICS);
				State = 5458; Match(LOG);
				State = 5474;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,625,_ctx) ) {
				case 1:
					{
					State = 5459; Match(ON);
					}
					break;

				case 2:
					{
					State = 5460; Match(OFF);
					}
					break;

				case 3:
					{
					State = 5461; Match(PATH);
					State = 5462; Match(EQUAL);
					State = 5463;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 4:
					{
					State = 5464; Match(MAX_SIZE);
					State = 5465; Match(EQUAL);
					State = 5469;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,624,_ctx) ) {
					case 1:
						{
						State = 5466; Match(DECIMAL);
						State = 5467; Match(MB);
						}
						break;

					case 2:
						{
						State = 5468; Match(DEFAULT);
						}
						break;
					}
					}
					break;

				case 5:
					{
					State = 5471; Match(MAX_FILES);
					State = 5472; Match(EQUAL);
					State = 5473;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==DECIMAL) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 5476; Match(FAILOVER);
				State = 5477; Match(CLUSTER);
				State = 5478; Match(PROPERTY);
				State = 5496;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,626,_ctx) ) {
				case 1:
					{
					State = 5479; Match(VERBOSELOGGING);
					State = 5480; Match(EQUAL);
					State = 5481;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 2:
					{
					State = 5482; Match(SQLDUMPERFLAGS);
					State = 5483; Match(EQUAL);
					State = 5484;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 3:
					{
					State = 5485; Match(SQLDUMPERPATH);
					State = 5486; Match(EQUAL);
					State = 5487;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 4:
					{
					State = 5488; Match(SQLDUMPERTIMEOUT);
					State = 5489;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 5:
					{
					State = 5490; Match(FAILURECONDITIONLEVEL);
					State = 5491; Match(EQUAL);
					State = 5492;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 6:
					{
					State = 5493; Match(HEALTHCHECKTIMEOUT);
					State = 5494; Match(EQUAL);
					State = 5495;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==DECIMAL) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 4:
				{
				State = 5498; Match(HADR);
				State = 5499; Match(CLUSTER);
				State = 5500; Match(CONTEXT);
				State = 5501; Match(EQUAL);
				State = 5502;
				_la = _input.La(1);
				if ( !(_la==LOCAL || _la==STRING) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 5:
				{
				State = 5503; Match(BUFFER);
				State = 5504; Match(POOL);
				State = 5505; Match(EXTENSION);
				State = 5518;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,627,_ctx) ) {
				case 1:
					{
					State = 5506; Match(ON);
					State = 5507; Match(LR_BRACKET);
					State = 5508; Match(FILENAME);
					State = 5509; Match(EQUAL);
					State = 5510; Match(STRING);
					State = 5511; Match(COMMA);
					State = 5512; Match(SIZE);
					State = 5513; Match(EQUAL);
					State = 5514; Match(DECIMAL);
					State = 5515;
					_la = _input.La(1);
					if ( !(_la==GB || _la==KB || _la==MB) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5516; Match(RR_BRACKET);
					}
					break;

				case 2:
					{
					State = 5517; Match(OFF);
					}
					break;
				}
				}
				break;

			case 6:
				{
				State = 5520; Match(SET);
				State = 5521; Match(SOFTNUMA);
				State = 5522;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_roleContext : ParserRuleContext {
		public Id_Context server_role_name;
		public Id_Context server_principal;
		public Id_Context new_server_role_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode MEMBER() { return GetToken(TSqlParser.MEMBER, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Alter_server_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_role(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_roleContext alter_server_role() {
		Alter_server_roleContext _localctx = new Alter_server_roleContext(_ctx, State);
		EnterRule(_localctx, 412, RULE_alter_server_role);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5525; Match(ALTER);
			State = 5526; Match(SERVER);
			State = 5527; Match(ROLE);
			State = 5528; _localctx.server_role_name = id_();
			State = 5536;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,629,_ctx) ) {
			case 1:
				{
				State = 5529;
				_la = _input.La(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 5530; Match(MEMBER);
				State = 5531; _localctx.server_principal = id_();
				}
				break;

			case 2:
				{
				State = 5532; Match(WITH);
				State = 5533; Match(NAME);
				State = 5534; Match(EQUAL);
				State = 5535; _localctx.new_server_role_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_server_roleContext : ParserRuleContext {
		public Id_Context server_role;
		public Id_Context server_principal;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_server_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_server_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_server_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_server_role(this);
		}
	}

	[RuleVersion(0)]
	public Create_server_roleContext create_server_role() {
		Create_server_roleContext _localctx = new Create_server_roleContext(_ctx, State);
		EnterRule(_localctx, 414, RULE_create_server_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5538; Match(CREATE);
			State = 5539; Match(SERVER);
			State = 5540; Match(ROLE);
			State = 5541; _localctx.server_role = id_();
			State = 5544;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,630,_ctx) ) {
			case 1:
				{
				State = 5542; Match(AUTHORIZATION);
				State = 5543; _localctx.server_principal = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_role_pdwContext : ParserRuleContext {
		public Id_Context server_role_name;
		public Id_Context login;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode MEMBER() { return GetToken(TSqlParser.MEMBER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Alter_server_role_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_role_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_role_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_role_pdw(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_role_pdwContext alter_server_role_pdw() {
		Alter_server_role_pdwContext _localctx = new Alter_server_role_pdwContext(_ctx, State);
		EnterRule(_localctx, 416, RULE_alter_server_role_pdw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5546; Match(ALTER);
			State = 5547; Match(SERVER);
			State = 5548; Match(ROLE);
			State = 5549; _localctx.server_role_name = id_();
			State = 5550;
			_la = _input.La(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 5551; Match(MEMBER);
			State = 5552; _localctx.login = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_serviceContext : ParserRuleContext {
		public Id_Context modified_service_name;
		public Id_Context schema_name;
		public Id_Context queue_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public Opt_arg_clauseContext[] opt_arg_clause() {
			return GetRuleContexts<Opt_arg_clauseContext>();
		}
		public Opt_arg_clauseContext opt_arg_clause(int i) {
			return GetRuleContext<Opt_arg_clauseContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_serviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_service; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_service(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_service(this);
		}
	}

	[RuleVersion(0)]
	public Alter_serviceContext alter_service() {
		Alter_serviceContext _localctx = new Alter_serviceContext(_ctx, State);
		EnterRule(_localctx, 418, RULE_alter_service);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5554; Match(ALTER);
			State = 5555; Match(SERVICE);
			State = 5556; _localctx.modified_service_name = id_();
			State = 5565;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,632,_ctx) ) {
			case 1:
				{
				State = 5557; Match(ON);
				State = 5558; Match(QUEUE);
				State = 5562;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,631,_ctx) ) {
				case 1:
					{
					State = 5559; _localctx.schema_name = id_();
					State = 5560; Match(DOT);
					}
					break;
				}
				State = 5564; _localctx.queue_name = id_();
				}
				break;
			}
			State = 5578;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,634,_ctx) ) {
			case 1:
				{
				State = 5567; Match(LR_BRACKET);
				State = 5568; opt_arg_clause();
				State = 5573;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,633,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 5569; Match(COMMA);
						State = 5570; opt_arg_clause();
						}
						} 
					}
					State = 5575;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,633,_ctx);
				}
				State = 5576; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_arg_clauseContext : ParserRuleContext {
		public Id_Context modified_contract_name;
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Opt_arg_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_arg_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpt_arg_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpt_arg_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_arg_clauseContext opt_arg_clause() {
		Opt_arg_clauseContext _localctx = new Opt_arg_clauseContext(_ctx, State);
		EnterRule(_localctx, 420, RULE_opt_arg_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5580;
			_la = _input.La(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 5581; Match(CONTRACT);
			State = 5582; _localctx.modified_contract_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_serviceContext : ParserRuleContext {
		public Id_Context create_service_name;
		public Id_Context owner_name;
		public Id_Context schema_name;
		public Id_Context queue_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] DEFAULT() { return GetTokens(TSqlParser.DEFAULT); }
		public ITerminalNode DEFAULT(int i) {
			return GetToken(TSqlParser.DEFAULT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_serviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_service; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_service(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_service(this);
		}
	}

	[RuleVersion(0)]
	public Create_serviceContext create_service() {
		Create_serviceContext _localctx = new Create_serviceContext(_ctx, State);
		EnterRule(_localctx, 422, RULE_create_service);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5584; Match(CREATE);
			State = 5585; Match(SERVICE);
			State = 5586; _localctx.create_service_name = id_();
			State = 5589;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,635,_ctx) ) {
			case 1:
				{
				State = 5587; Match(AUTHORIZATION);
				State = 5588; _localctx.owner_name = id_();
				}
				break;
			}
			State = 5591; Match(ON);
			State = 5592; Match(QUEUE);
			State = 5596;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,636,_ctx) ) {
			case 1:
				{
				State = 5593; _localctx.schema_name = id_();
				State = 5594; Match(DOT);
				}
				break;
			}
			State = 5598; _localctx.queue_name = id_();
			State = 5612;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,640,_ctx) ) {
			case 1:
				{
				State = 5599; Match(LR_BRACKET);
				State = 5607;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 5601;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,637,_ctx) ) {
						case 1:
							{
							State = 5600; Match(COMMA);
							}
							break;
						}
						State = 5605;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,638,_ctx) ) {
						case 1:
							{
							State = 5603; id_();
							}
							break;

						case 2:
							{
							State = 5604; Match(DEFAULT);
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 5609;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,639,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 5611; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_service_master_keyContext : ParserRuleContext {
		public IToken acold_account_name;
		public IToken old_password;
		public IToken new_account_name;
		public IToken new_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode REGENERATE() { return GetToken(TSqlParser.REGENERATE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public ITerminalNode OLD_ACCOUNT() { return GetToken(TSqlParser.OLD_ACCOUNT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public ITerminalNode NEW_ACCOUNT() { return GetToken(TSqlParser.NEW_ACCOUNT, 0); }
		public ITerminalNode NEW_PASSWORD() { return GetToken(TSqlParser.NEW_PASSWORD, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Alter_service_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_service_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_service_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_service_master_key(this);
		}
	}

	[RuleVersion(0)]
	public Alter_service_master_keyContext alter_service_master_key() {
		Alter_service_master_keyContext _localctx = new Alter_service_master_keyContext(_ctx, State);
		EnterRule(_localctx, 424, RULE_alter_service_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5614; Match(ALTER);
			State = 5615; Match(SERVICE);
			State = 5616; Match(MASTER);
			State = 5617; Match(KEY);
			State = 5639;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,643,_ctx) ) {
			case 1:
				{
				State = 5619;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,641,_ctx) ) {
				case 1:
					{
					State = 5618; Match(FORCE);
					}
					break;
				}
				State = 5621; Match(REGENERATE);
				}
				break;

			case 2:
				{
				{
				State = 5622; Match(WITH);
				State = 5637;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,642,_ctx) ) {
				case 1:
					{
					State = 5623; Match(OLD_ACCOUNT);
					State = 5624; Match(EQUAL);
					State = 5625; _localctx.acold_account_name = Match(STRING);
					State = 5626; Match(COMMA);
					State = 5627; Match(OLD_PASSWORD);
					State = 5628; Match(EQUAL);
					State = 5629; _localctx.old_password = Match(STRING);
					}
					break;

				case 2:
					{
					State = 5630; Match(NEW_ACCOUNT);
					State = 5631; Match(EQUAL);
					State = 5632; _localctx.new_account_name = Match(STRING);
					State = 5633; Match(COMMA);
					State = 5634; Match(NEW_PASSWORD);
					State = 5635; Match(EQUAL);
					State = 5636; _localctx.new_password = Match(STRING);
					}
					break;
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_symmetric_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public Id_Context certificate_name;
		public IToken password;
		public Id_Context symmetric_key_name;
		public Id_Context Asym_key_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] SYMMETRIC() { return GetTokens(TSqlParser.SYMMETRIC); }
		public ITerminalNode SYMMETRIC(int i) {
			return GetToken(TSqlParser.SYMMETRIC, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Alter_symmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_symmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_symmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_symmetric_key(this);
		}
	}

	[RuleVersion(0)]
	public Alter_symmetric_keyContext alter_symmetric_key() {
		Alter_symmetric_keyContext _localctx = new Alter_symmetric_keyContext(_ctx, State);
		EnterRule(_localctx, 426, RULE_alter_symmetric_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5641; Match(ALTER);
			State = 5642; Match(SYMMETRIC);
			State = 5643; Match(KEY);
			State = 5644; _localctx.key_name = id_();
			{
			State = 5645;
			_la = _input.La(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 5646; Match(ENCRYPTION);
			State = 5647; Match(BY);
			State = 5659;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,644,_ctx) ) {
			case 1:
				{
				State = 5648; Match(CERTIFICATE);
				State = 5649; _localctx.certificate_name = id_();
				}
				break;

			case 2:
				{
				State = 5650; Match(PASSWORD);
				State = 5651; Match(EQUAL);
				State = 5652; _localctx.password = Match(STRING);
				}
				break;

			case 3:
				{
				State = 5653; Match(SYMMETRIC);
				State = 5654; Match(KEY);
				State = 5655; _localctx.symmetric_key_name = id_();
				}
				break;

			case 4:
				{
				State = 5656; Match(ASYMMETRIC);
				State = 5657; Match(KEY);
				State = 5658; _localctx.Asym_key_name = id_();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_synonymContext : ParserRuleContext {
		public Id_Context schema_name_1;
		public Id_Context synonym_name;
		public Id_Context server_name;
		public Id_Context database_name;
		public Id_Context schema_name_2;
		public Id_Context object_name;
		public Id_Context database_or_schema2;
		public Id_Context schema_id_2_or_object_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SYNONYM() { return GetToken(TSqlParser.SYNONYM, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Create_synonymContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_synonym; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_synonym(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_synonym(this);
		}
	}

	[RuleVersion(0)]
	public Create_synonymContext create_synonym() {
		Create_synonymContext _localctx = new Create_synonymContext(_ctx, State);
		EnterRule(_localctx, 428, RULE_create_synonym);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5661; Match(CREATE);
			State = 5662; Match(SYNONYM);
			State = 5666;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,645,_ctx) ) {
			case 1:
				{
				State = 5663; _localctx.schema_name_1 = id_();
				State = 5664; Match(DOT);
				}
				break;
			}
			State = 5668; _localctx.synonym_name = id_();
			State = 5669; Match(FOR);
			State = 5696;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,651,_ctx) ) {
			case 1:
				{
				State = 5673;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,646,_ctx) ) {
				case 1:
					{
					State = 5670; _localctx.server_name = id_();
					State = 5671; Match(DOT);
					}
					break;
				}
				State = 5678;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,647,_ctx) ) {
				case 1:
					{
					State = 5675; _localctx.database_name = id_();
					State = 5676; Match(DOT);
					}
					break;
				}
				State = 5683;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,648,_ctx) ) {
				case 1:
					{
					State = 5680; _localctx.schema_name_2 = id_();
					State = 5681; Match(DOT);
					}
					break;
				}
				State = 5685; _localctx.object_name = id_();
				}
				break;

			case 2:
				{
				State = 5689;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,649,_ctx) ) {
				case 1:
					{
					State = 5686; _localctx.database_or_schema2 = id_();
					State = 5687; Match(DOT);
					}
					break;
				}
				State = 5694;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,650,_ctx) ) {
				case 1:
					{
					State = 5691; _localctx.schema_id_2_or_object_name = id_();
					State = 5692; Match(DOT);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_userContext : ParserRuleContext {
		public Id_Context username;
		public Id_Context newusername;
		public Id_Context schema_name;
		public Id_Context loginame;
		public IToken lcid;
		public Id_Context language_name_or_alias;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] NAME() { return GetTokens(TSqlParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(TSqlParser.NAME, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] DEFAULT_SCHEMA() { return GetTokens(TSqlParser.DEFAULT_SCHEMA); }
		public ITerminalNode DEFAULT_SCHEMA(int i) {
			return GetToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public ITerminalNode[] LOGIN() { return GetTokens(TSqlParser.LOGIN); }
		public ITerminalNode LOGIN(int i) {
			return GetToken(TSqlParser.LOGIN, i);
		}
		public ITerminalNode[] PASSWORD() { return GetTokens(TSqlParser.PASSWORD); }
		public ITerminalNode PASSWORD(int i) {
			return GetToken(TSqlParser.PASSWORD, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] DEFAULT_LANGUAGE() { return GetTokens(TSqlParser.DEFAULT_LANGUAGE); }
		public ITerminalNode DEFAULT_LANGUAGE(int i) {
			return GetToken(TSqlParser.DEFAULT_LANGUAGE, i);
		}
		public ITerminalNode[] ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return GetTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public ITerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return GetToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode[] NULL_() { return GetTokens(TSqlParser.NULL_); }
		public ITerminalNode NULL_(int i) {
			return GetToken(TSqlParser.NULL_, i);
		}
		public ITerminalNode[] NONE() { return GetTokens(TSqlParser.NONE); }
		public ITerminalNode NONE(int i) {
			return GetToken(TSqlParser.NONE, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] OLD_PASSWORD() { return GetTokens(TSqlParser.OLD_PASSWORD); }
		public ITerminalNode OLD_PASSWORD(int i) {
			return GetToken(TSqlParser.OLD_PASSWORD, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public Alter_userContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_user; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_user(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_user(this);
		}
	}

	[RuleVersion(0)]
	public Alter_userContext alter_user() {
		Alter_userContext _localctx = new Alter_userContext(_ctx, State);
		EnterRule(_localctx, 430, RULE_alter_user);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5698; Match(ALTER);
			State = 5699; Match(USER);
			State = 5700; _localctx.username = id_();
			State = 5701; Match(WITH);
			State = 5752;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 5752;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,661,_ctx) ) {
					case 1:
						{
						State = 5703;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,652,_ctx) ) {
						case 1:
							{
							State = 5702; Match(COMMA);
							}
							break;
						}
						State = 5705; Match(NAME);
						State = 5706; Match(EQUAL);
						State = 5707; _localctx.newusername = id_();
						}
						break;

					case 2:
						{
						State = 5709;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,653,_ctx) ) {
						case 1:
							{
							State = 5708; Match(COMMA);
							}
							break;
						}
						State = 5711; Match(DEFAULT_SCHEMA);
						State = 5712; Match(EQUAL);
						State = 5715;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,654,_ctx) ) {
						case 1:
							{
							State = 5713; _localctx.schema_name = id_();
							}
							break;

						case 2:
							{
							State = 5714; Match(NULL_);
							}
							break;
						}
						}
						break;

					case 3:
						{
						State = 5718;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,655,_ctx) ) {
						case 1:
							{
							State = 5717; Match(COMMA);
							}
							break;
						}
						State = 5720; Match(LOGIN);
						State = 5721; Match(EQUAL);
						State = 5722; _localctx.loginame = id_();
						}
						break;

					case 4:
						{
						State = 5724;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,656,_ctx) ) {
						case 1:
							{
							State = 5723; Match(COMMA);
							}
							break;
						}
						State = 5726; Match(PASSWORD);
						State = 5727; Match(EQUAL);
						State = 5728; Match(STRING);
						State = 5732;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 5729; Match(OLD_PASSWORD);
								State = 5730; Match(EQUAL);
								State = 5731; Match(STRING);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 5734;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,657,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						break;

					case 5:
						{
						State = 5737;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,658,_ctx) ) {
						case 1:
							{
							State = 5736; Match(COMMA);
							}
							break;
						}
						State = 5739; Match(DEFAULT_LANGUAGE);
						State = 5740; Match(EQUAL);
						State = 5744;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,659,_ctx) ) {
						case 1:
							{
							State = 5741; Match(NONE);
							}
							break;

						case 2:
							{
							State = 5742; _localctx.lcid = Match(DECIMAL);
							}
							break;

						case 3:
							{
							State = 5743; _localctx.language_name_or_alias = id_();
							}
							break;
						}
						}
						break;

					case 6:
						{
						State = 5747;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,660,_ctx) ) {
						case 1:
							{
							State = 5746; Match(COMMA);
							}
							break;
						}
						State = 5749; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
						State = 5750; Match(EQUAL);
						State = 5751;
						_la = _input.La(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5754;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,662,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_userContext : ParserRuleContext {
		public Id_Context user_name;
		public Id_Context login_name;
		public Id_Context schema_name;
		public Id_Context windows_principal;
		public Id_Context language_name_or_alias;
		public IToken password;
		public Id_Context Azure_Active_Directory_principal;
		public Id_Context cert_name;
		public Id_Context asym_key_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode[] DEFAULT_SCHEMA() { return GetTokens(TSqlParser.DEFAULT_SCHEMA); }
		public ITerminalNode DEFAULT_SCHEMA(int i) {
			return GetToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return GetTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public ITerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return GetToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode[] DEFAULT_LANGUAGE() { return GetTokens(TSqlParser.DEFAULT_LANGUAGE); }
		public ITerminalNode DEFAULT_LANGUAGE(int i) {
			return GetToken(TSqlParser.DEFAULT_LANGUAGE, i);
		}
		public ITerminalNode[] SID() { return GetTokens(TSqlParser.SID); }
		public ITerminalNode SID(int i) {
			return GetToken(TSqlParser.SID, i);
		}
		public ITerminalNode[] BINARY() { return GetTokens(TSqlParser.BINARY); }
		public ITerminalNode BINARY(int i) {
			return GetToken(TSqlParser.BINARY, i);
		}
		public ITerminalNode[] NONE() { return GetTokens(TSqlParser.NONE); }
		public ITerminalNode NONE(int i) {
			return GetToken(TSqlParser.NONE, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode WITHOUT() { return GetToken(TSqlParser.WITHOUT, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Create_userContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_user; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_user(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_user(this);
		}
	}

	[RuleVersion(0)]
	public Create_userContext create_user() {
		Create_userContext _localctx = new Create_userContext(_ctx, State);
		EnterRule(_localctx, 432, RULE_create_user);
		int _la;
		try {
			int _alt;
			State = 5902;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,690,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5756; Match(CREATE);
				State = 5757; Match(USER);
				State = 5758; _localctx.user_name = id_();
				State = 5762;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,663,_ctx) ) {
				case 1:
					{
					State = 5759;
					_la = _input.La(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5760; Match(LOGIN);
					State = 5761; _localctx.login_name = id_();
					}
					break;
				}
				State = 5782;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,668,_ctx) ) {
				case 1:
					{
					State = 5764; Match(WITH);
					State = 5779;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,667,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 5777;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,666,_ctx) ) {
							case 1:
								{
								State = 5766;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,664,_ctx) ) {
								case 1:
									{
									State = 5765; Match(COMMA);
									}
									break;
								}
								State = 5768; Match(DEFAULT_SCHEMA);
								State = 5769; Match(EQUAL);
								State = 5770; _localctx.schema_name = id_();
								}
								break;

							case 2:
								{
								State = 5772;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,665,_ctx) ) {
								case 1:
									{
									State = 5771; Match(COMMA);
									}
									break;
								}
								State = 5774; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								State = 5775; Match(EQUAL);
								State = 5776;
								_la = _input.La(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;
							}
							} 
						}
						State = 5781;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,667,_ctx);
					}
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5784; Match(CREATE);
				State = 5785; Match(USER);
				State = 5866;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,684,_ctx) ) {
				case 1:
					{
					State = 5786; _localctx.windows_principal = id_();
					State = 5821;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,676,_ctx) ) {
					case 1:
						{
						State = 5787; Match(WITH);
						State = 5818;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,675,_ctx);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
							if ( _alt==1 ) {
								{
								State = 5816;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,674,_ctx) ) {
								case 1:
									{
									State = 5789;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,669,_ctx) ) {
									case 1:
										{
										State = 5788; Match(COMMA);
										}
										break;
									}
									State = 5791; Match(DEFAULT_SCHEMA);
									State = 5792; Match(EQUAL);
									State = 5793; _localctx.schema_name = id_();
									}
									break;

								case 2:
									{
									State = 5795;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,670,_ctx) ) {
									case 1:
										{
										State = 5794; Match(COMMA);
										}
										break;
									}
									State = 5797; Match(DEFAULT_LANGUAGE);
									State = 5798; Match(EQUAL);
									State = 5802;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,671,_ctx) ) {
									case 1:
										{
										State = 5799; Match(NONE);
										}
										break;

									case 2:
										{
										State = 5800; Match(DECIMAL);
										}
										break;

									case 3:
										{
										State = 5801; _localctx.language_name_or_alias = id_();
										}
										break;
									}
									}
									break;

								case 3:
									{
									State = 5805;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,672,_ctx) ) {
									case 1:
										{
										State = 5804; Match(COMMA);
										}
										break;
									}
									State = 5807; Match(SID);
									State = 5808; Match(EQUAL);
									State = 5809; Match(BINARY);
									}
									break;

								case 4:
									{
									State = 5811;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,673,_ctx) ) {
									case 1:
										{
										State = 5810; Match(COMMA);
										}
										break;
									}
									State = 5813; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
									State = 5814; Match(EQUAL);
									State = 5815;
									_la = _input.La(1);
									if ( !(_la==OFF || _la==ON) ) {
									_errHandler.RecoverInline(this);
									} else {
										if (_input.La(1) == TokenConstants.Eof) {
											matchedEOF = true;
										}

										_errHandler.ReportMatch(this);
										Consume();
									}
									}
									break;
								}
								} 
							}
							State = 5820;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,675,_ctx);
						}
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 5823; _localctx.user_name = id_();
					State = 5824; Match(WITH);
					State = 5825; Match(PASSWORD);
					State = 5826; Match(EQUAL);
					State = 5827; _localctx.password = Match(STRING);
					State = 5858;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,683,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 5856;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,682,_ctx) ) {
							case 1:
								{
								State = 5829;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,677,_ctx) ) {
								case 1:
									{
									State = 5828; Match(COMMA);
									}
									break;
								}
								State = 5831; Match(DEFAULT_SCHEMA);
								State = 5832; Match(EQUAL);
								State = 5833; _localctx.schema_name = id_();
								}
								break;

							case 2:
								{
								State = 5835;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,678,_ctx) ) {
								case 1:
									{
									State = 5834; Match(COMMA);
									}
									break;
								}
								State = 5837; Match(DEFAULT_LANGUAGE);
								State = 5838; Match(EQUAL);
								State = 5842;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,679,_ctx) ) {
								case 1:
									{
									State = 5839; Match(NONE);
									}
									break;

								case 2:
									{
									State = 5840; Match(DECIMAL);
									}
									break;

								case 3:
									{
									State = 5841; _localctx.language_name_or_alias = id_();
									}
									break;
								}
								}
								break;

							case 3:
								{
								State = 5845;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,680,_ctx) ) {
								case 1:
									{
									State = 5844; Match(COMMA);
									}
									break;
								}
								State = 5847; Match(SID);
								State = 5848; Match(EQUAL);
								State = 5849; Match(BINARY);
								}
								break;

							case 4:
								{
								State = 5851;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,681,_ctx) ) {
								case 1:
									{
									State = 5850; Match(COMMA);
									}
									break;
								}
								State = 5853; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								State = 5854; Match(EQUAL);
								State = 5855;
								_la = _input.La(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;
							}
							} 
						}
						State = 5860;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,683,_ctx);
					}
					}
					break;

				case 3:
					{
					State = 5861; _localctx.Azure_Active_Directory_principal = id_();
					State = 5862; Match(FROM);
					State = 5863; Match(EXTERNAL);
					State = 5864; Match(PROVIDER);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5868; Match(CREATE);
				State = 5869; Match(USER);
				State = 5870; _localctx.user_name = id_();
				State = 5897;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,689,_ctx) ) {
				case 1:
					{
					State = 5871; Match(WITHOUT);
					State = 5872; Match(LOGIN);
					State = 5887;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,688,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 5885;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,687,_ctx) ) {
							case 1:
								{
								State = 5874;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,685,_ctx) ) {
								case 1:
									{
									State = 5873; Match(COMMA);
									}
									break;
								}
								State = 5876; Match(DEFAULT_SCHEMA);
								State = 5877; Match(EQUAL);
								State = 5878; _localctx.schema_name = id_();
								}
								break;

							case 2:
								{
								State = 5880;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,686,_ctx) ) {
								case 1:
									{
									State = 5879; Match(COMMA);
									}
									break;
								}
								State = 5882; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								State = 5883; Match(EQUAL);
								State = 5884;
								_la = _input.La(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;
							}
							} 
						}
						State = 5889;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,688,_ctx);
					}
					}
					break;

				case 2:
					{
					State = 5890;
					_la = _input.La(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5891; Match(CERTIFICATE);
					State = 5892; _localctx.cert_name = id_();
					}
					break;

				case 3:
					{
					State = 5893;
					_la = _input.La(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5894; Match(ASYMMETRIC);
					State = 5895; Match(KEY);
					State = 5896; _localctx.asym_key_name = id_();
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5899; Match(CREATE);
				State = 5900; Match(USER);
				State = 5901; _localctx.user_name = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_user_azure_sql_dwContext : ParserRuleContext {
		public Id_Context user_name;
		public Id_Context login_name;
		public Id_Context schema_name;
		public Id_Context Azure_Active_Directory_principal;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode WITHOUT() { return GetToken(TSqlParser.WITHOUT, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode DEFAULT_SCHEMA() { return GetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Create_user_azure_sql_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_user_azure_sql_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_user_azure_sql_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_user_azure_sql_dw(this);
		}
	}

	[RuleVersion(0)]
	public Create_user_azure_sql_dwContext create_user_azure_sql_dw() {
		Create_user_azure_sql_dwContext _localctx = new Create_user_azure_sql_dwContext(_ctx, State);
		EnterRule(_localctx, 434, RULE_create_user_azure_sql_dw);
		int _la;
		try {
			State = 5932;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,694,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5904; Match(CREATE);
				State = 5905; Match(USER);
				State = 5906; _localctx.user_name = id_();
				State = 5912;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,691,_ctx) ) {
				case 1:
					{
					State = 5907;
					_la = _input.La(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5908; Match(LOGIN);
					State = 5909; _localctx.login_name = id_();
					}
					break;

				case 2:
					{
					State = 5910; Match(WITHOUT);
					State = 5911; Match(LOGIN);
					}
					break;
				}
				State = 5918;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,692,_ctx) ) {
				case 1:
					{
					State = 5914; Match(WITH);
					State = 5915; Match(DEFAULT_SCHEMA);
					State = 5916; Match(EQUAL);
					State = 5917; _localctx.schema_name = id_();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5920; Match(CREATE);
				State = 5921; Match(USER);
				State = 5922; _localctx.Azure_Active_Directory_principal = id_();
				State = 5923; Match(FROM);
				State = 5924; Match(EXTERNAL);
				State = 5925; Match(PROVIDER);
				State = 5930;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,693,_ctx) ) {
				case 1:
					{
					State = 5926; Match(WITH);
					State = 5927; Match(DEFAULT_SCHEMA);
					State = 5928; Match(EQUAL);
					State = 5929; _localctx.schema_name = id_();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_user_azure_sqlContext : ParserRuleContext {
		public Id_Context username;
		public Id_Context newusername;
		public Id_Context schema_name;
		public Id_Context loginame;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] NAME() { return GetTokens(TSqlParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(TSqlParser.NAME, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] DEFAULT_SCHEMA() { return GetTokens(TSqlParser.DEFAULT_SCHEMA); }
		public ITerminalNode DEFAULT_SCHEMA(int i) {
			return GetToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public ITerminalNode[] LOGIN() { return GetTokens(TSqlParser.LOGIN); }
		public ITerminalNode LOGIN(int i) {
			return GetToken(TSqlParser.LOGIN, i);
		}
		public ITerminalNode[] ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return GetTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public ITerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return GetToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_user_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_user_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_user_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_user_azure_sql(this);
		}
	}

	[RuleVersion(0)]
	public Alter_user_azure_sqlContext alter_user_azure_sql() {
		Alter_user_azure_sqlContext _localctx = new Alter_user_azure_sqlContext(_ctx, State);
		EnterRule(_localctx, 436, RULE_alter_user_azure_sql);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5934; Match(ALTER);
			State = 5935; Match(USER);
			State = 5936; _localctx.username = id_();
			State = 5937; Match(WITH);
			State = 5962;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 5962;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,699,_ctx) ) {
					case 1:
						{
						State = 5939;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,695,_ctx) ) {
						case 1:
							{
							State = 5938; Match(COMMA);
							}
							break;
						}
						State = 5941; Match(NAME);
						State = 5942; Match(EQUAL);
						State = 5943; _localctx.newusername = id_();
						}
						break;

					case 2:
						{
						State = 5945;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,696,_ctx) ) {
						case 1:
							{
							State = 5944; Match(COMMA);
							}
							break;
						}
						State = 5947; Match(DEFAULT_SCHEMA);
						State = 5948; Match(EQUAL);
						State = 5949; _localctx.schema_name = id_();
						}
						break;

					case 3:
						{
						State = 5951;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,697,_ctx) ) {
						case 1:
							{
							State = 5950; Match(COMMA);
							}
							break;
						}
						State = 5953; Match(LOGIN);
						State = 5954; Match(EQUAL);
						State = 5955; _localctx.loginame = id_();
						}
						break;

					case 4:
						{
						State = 5957;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,698,_ctx) ) {
						case 1:
							{
							State = 5956; Match(COMMA);
							}
							break;
						}
						State = 5959; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
						State = 5960; Match(EQUAL);
						State = 5961;
						_la = _input.La(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5964;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,700,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_workload_groupContext : ParserRuleContext {
		public Id_Context workload_group_group_name;
		public IToken request_max_memory_grant;
		public IToken request_max_cpu_time_sec;
		public IToken request_memory_grant_timeout_sec;
		public IToken max_dop;
		public IToken group_max_requests;
		public Id_Context workload_group_pool_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode WORKLOAD() { return GetToken(TSqlParser.WORKLOAD, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode[] DEFAULT_DOUBLE_QUOTE() { return GetTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE); }
		public ITerminalNode DEFAULT_DOUBLE_QUOTE(int i) {
			return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public ITerminalNode[] IMPORTANCE() { return GetTokens(TSqlParser.IMPORTANCE); }
		public ITerminalNode IMPORTANCE(int i) {
			return GetToken(TSqlParser.IMPORTANCE, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] REQUEST_MAX_MEMORY_GRANT_PERCENT() { return GetTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT); }
		public ITerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT(int i) {
			return GetToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
		}
		public ITerminalNode[] REQUEST_MAX_CPU_TIME_SEC() { return GetTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC); }
		public ITerminalNode REQUEST_MAX_CPU_TIME_SEC(int i) {
			return GetToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i);
		}
		public ITerminalNode[] REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return GetTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC); }
		public ITerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC(int i) {
			return GetToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
		}
		public ITerminalNode[] MAX_DOP() { return GetTokens(TSqlParser.MAX_DOP); }
		public ITerminalNode MAX_DOP(int i) {
			return GetToken(TSqlParser.MAX_DOP, i);
		}
		public ITerminalNode[] GROUP_MAX_REQUESTS() { return GetTokens(TSqlParser.GROUP_MAX_REQUESTS); }
		public ITerminalNode GROUP_MAX_REQUESTS(int i) {
			return GetToken(TSqlParser.GROUP_MAX_REQUESTS, i);
		}
		public ITerminalNode[] LOW() { return GetTokens(TSqlParser.LOW); }
		public ITerminalNode LOW(int i) {
			return GetToken(TSqlParser.LOW, i);
		}
		public ITerminalNode[] MEDIUM() { return GetTokens(TSqlParser.MEDIUM); }
		public ITerminalNode MEDIUM(int i) {
			return GetToken(TSqlParser.MEDIUM, i);
		}
		public ITerminalNode[] HIGH() { return GetTokens(TSqlParser.HIGH); }
		public ITerminalNode HIGH(int i) {
			return GetToken(TSqlParser.HIGH, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_workload_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_workload_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_workload_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_workload_group(this);
		}
	}

	[RuleVersion(0)]
	public Alter_workload_groupContext alter_workload_group() {
		Alter_workload_groupContext _localctx = new Alter_workload_groupContext(_ctx, State);
		EnterRule(_localctx, 438, RULE_alter_workload_group);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5966; Match(ALTER);
			State = 5967; Match(WORKLOAD);
			State = 5968; Match(GROUP);
			State = 5971;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,701,_ctx) ) {
			case 1:
				{
				State = 5969; _localctx.workload_group_group_name = id_();
				}
				break;

			case 2:
				{
				State = 5970; Match(DEFAULT_DOUBLE_QUOTE);
				}
				break;
			}
			State = 6004;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,706,_ctx) ) {
			case 1:
				{
				State = 5973; Match(WITH);
				State = 5974; Match(LR_BRACKET);
				State = 5999;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 5999;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,704,_ctx) ) {
						case 1:
							{
							State = 5975; Match(IMPORTANCE);
							State = 5976; Match(EQUAL);
							State = 5977;
							_la = _input.La(1);
							if ( !(_la==HIGH || _la==LOW || _la==MEDIUM) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 2:
							{
							State = 5979;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,702,_ctx) ) {
							case 1:
								{
								State = 5978; Match(COMMA);
								}
								break;
							}
							State = 5981; Match(REQUEST_MAX_MEMORY_GRANT_PERCENT);
							State = 5982; Match(EQUAL);
							State = 5983; _localctx.request_max_memory_grant = Match(DECIMAL);
							}
							break;

						case 3:
							{
							State = 5985;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,703,_ctx) ) {
							case 1:
								{
								State = 5984; Match(COMMA);
								}
								break;
							}
							State = 5987; Match(REQUEST_MAX_CPU_TIME_SEC);
							State = 5988; Match(EQUAL);
							State = 5989; _localctx.request_max_cpu_time_sec = Match(DECIMAL);
							}
							break;

						case 4:
							{
							State = 5990; Match(REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
							State = 5991; Match(EQUAL);
							State = 5992; _localctx.request_memory_grant_timeout_sec = Match(DECIMAL);
							}
							break;

						case 5:
							{
							State = 5993; Match(MAX_DOP);
							State = 5994; Match(EQUAL);
							State = 5995; _localctx.max_dop = Match(DECIMAL);
							}
							break;

						case 6:
							{
							State = 5996; Match(GROUP_MAX_REQUESTS);
							State = 5997; Match(EQUAL);
							State = 5998; _localctx.group_max_requests = Match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6001;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,705,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 6003; Match(RR_BRACKET);
				}
				break;
			}
			State = 6011;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,708,_ctx) ) {
			case 1:
				{
				State = 6006; Match(USING);
				State = 6009;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,707,_ctx) ) {
				case 1:
					{
					State = 6007; _localctx.workload_group_pool_name = id_();
					}
					break;

				case 2:
					{
					State = 6008; Match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_workload_groupContext : ParserRuleContext {
		public Id_Context workload_group_group_name;
		public IToken request_max_memory_grant;
		public IToken request_max_cpu_time_sec;
		public IToken request_memory_grant_timeout_sec;
		public IToken max_dop;
		public IToken group_max_requests;
		public Id_Context workload_group_pool_name;
		public Id_Context external_pool_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode WORKLOAD() { return GetToken(TSqlParser.WORKLOAD, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public ITerminalNode[] IMPORTANCE() { return GetTokens(TSqlParser.IMPORTANCE); }
		public ITerminalNode IMPORTANCE(int i) {
			return GetToken(TSqlParser.IMPORTANCE, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] REQUEST_MAX_MEMORY_GRANT_PERCENT() { return GetTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT); }
		public ITerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT(int i) {
			return GetToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
		}
		public ITerminalNode[] REQUEST_MAX_CPU_TIME_SEC() { return GetTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC); }
		public ITerminalNode REQUEST_MAX_CPU_TIME_SEC(int i) {
			return GetToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i);
		}
		public ITerminalNode[] REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return GetTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC); }
		public ITerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC(int i) {
			return GetToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
		}
		public ITerminalNode[] MAX_DOP() { return GetTokens(TSqlParser.MAX_DOP); }
		public ITerminalNode MAX_DOP(int i) {
			return GetToken(TSqlParser.MAX_DOP, i);
		}
		public ITerminalNode[] GROUP_MAX_REQUESTS() { return GetTokens(TSqlParser.GROUP_MAX_REQUESTS); }
		public ITerminalNode GROUP_MAX_REQUESTS(int i) {
			return GetToken(TSqlParser.GROUP_MAX_REQUESTS, i);
		}
		public ITerminalNode[] DEFAULT_DOUBLE_QUOTE() { return GetTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE); }
		public ITerminalNode DEFAULT_DOUBLE_QUOTE(int i) {
			return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i);
		}
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode[] LOW() { return GetTokens(TSqlParser.LOW); }
		public ITerminalNode LOW(int i) {
			return GetToken(TSqlParser.LOW, i);
		}
		public ITerminalNode[] MEDIUM() { return GetTokens(TSqlParser.MEDIUM); }
		public ITerminalNode MEDIUM(int i) {
			return GetToken(TSqlParser.MEDIUM, i);
		}
		public ITerminalNode[] HIGH() { return GetTokens(TSqlParser.HIGH); }
		public ITerminalNode HIGH(int i) {
			return GetToken(TSqlParser.HIGH, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_workload_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_workload_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_workload_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_workload_group(this);
		}
	}

	[RuleVersion(0)]
	public Create_workload_groupContext create_workload_group() {
		Create_workload_groupContext _localctx = new Create_workload_groupContext(_ctx, State);
		EnterRule(_localctx, 440, RULE_create_workload_group);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6013; Match(CREATE);
			State = 6014; Match(WORKLOAD);
			State = 6015; Match(GROUP);
			State = 6016; _localctx.workload_group_group_name = id_();
			State = 6048;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,713,_ctx) ) {
			case 1:
				{
				State = 6017; Match(WITH);
				State = 6018; Match(LR_BRACKET);
				State = 6043;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 6043;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,711,_ctx) ) {
						case 1:
							{
							State = 6019; Match(IMPORTANCE);
							State = 6020; Match(EQUAL);
							State = 6021;
							_la = _input.La(1);
							if ( !(_la==HIGH || _la==LOW || _la==MEDIUM) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 2:
							{
							State = 6023;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,709,_ctx) ) {
							case 1:
								{
								State = 6022; Match(COMMA);
								}
								break;
							}
							State = 6025; Match(REQUEST_MAX_MEMORY_GRANT_PERCENT);
							State = 6026; Match(EQUAL);
							State = 6027; _localctx.request_max_memory_grant = Match(DECIMAL);
							}
							break;

						case 3:
							{
							State = 6029;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,710,_ctx) ) {
							case 1:
								{
								State = 6028; Match(COMMA);
								}
								break;
							}
							State = 6031; Match(REQUEST_MAX_CPU_TIME_SEC);
							State = 6032; Match(EQUAL);
							State = 6033; _localctx.request_max_cpu_time_sec = Match(DECIMAL);
							}
							break;

						case 4:
							{
							State = 6034; Match(REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
							State = 6035; Match(EQUAL);
							State = 6036; _localctx.request_memory_grant_timeout_sec = Match(DECIMAL);
							}
							break;

						case 5:
							{
							State = 6037; Match(MAX_DOP);
							State = 6038; Match(EQUAL);
							State = 6039; _localctx.max_dop = Match(DECIMAL);
							}
							break;

						case 6:
							{
							State = 6040; Match(GROUP_MAX_REQUESTS);
							State = 6041; Match(EQUAL);
							State = 6042; _localctx.group_max_requests = Match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6045;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,712,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 6047; Match(RR_BRACKET);
				}
				break;
			}
			State = 6063;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,717,_ctx) ) {
			case 1:
				{
				State = 6050; Match(USING);
				State = 6053;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,714,_ctx) ) {
				case 1:
					{
					State = 6051; _localctx.workload_group_pool_name = id_();
					}
					break;

				case 2:
					{
					State = 6052; Match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				State = 6061;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,716,_ctx) ) {
				case 1:
					{
					State = 6056;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,715,_ctx) ) {
					case 1:
						{
						State = 6055; Match(COMMA);
						}
						break;
					}
					State = 6058; Match(EXTERNAL);
					State = 6059; _localctx.external_pool_name = id_();
					}
					break;

				case 2:
					{
					State = 6060; Match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_xml_schema_collectionContext : ParserRuleContext {
		public Id_Context relational_schema;
		public Id_Context sql_identifier;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Create_xml_schema_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_xml_schema_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_xml_schema_collection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_xml_schema_collection(this);
		}
	}

	[RuleVersion(0)]
	public Create_xml_schema_collectionContext create_xml_schema_collection() {
		Create_xml_schema_collectionContext _localctx = new Create_xml_schema_collectionContext(_ctx, State);
		EnterRule(_localctx, 442, RULE_create_xml_schema_collection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6065; Match(CREATE);
			State = 6066; Match(XML);
			State = 6067; Match(SCHEMA);
			State = 6068; Match(COLLECTION);
			State = 6072;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,718,_ctx) ) {
			case 1:
				{
				State = 6069; _localctx.relational_schema = id_();
				State = 6070; Match(DOT);
				}
				break;
			}
			State = 6074; _localctx.sql_identifier = id_();
			State = 6075; Match(AS);
			State = 6079;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,719,_ctx) ) {
			case 1:
				{
				State = 6076; Match(STRING);
				}
				break;

			case 2:
				{
				State = 6077; id_();
				}
				break;

			case 3:
				{
				State = 6078; Match(LOCAL_ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_partition_functionContext : ParserRuleContext {
		public Id_Context partition_function_name;
		public Data_typeContext input_parameter_type;
		public Expression_list_Context boundary_values;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode RANGE() { return GetToken(TSqlParser.RANGE, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public ITerminalNode LEFT() { return GetToken(TSqlParser.LEFT, 0); }
		public ITerminalNode RIGHT() { return GetToken(TSqlParser.RIGHT, 0); }
		public Create_partition_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_partition_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_partition_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_partition_function(this);
		}
	}

	[RuleVersion(0)]
	public Create_partition_functionContext create_partition_function() {
		Create_partition_functionContext _localctx = new Create_partition_functionContext(_ctx, State);
		EnterRule(_localctx, 444, RULE_create_partition_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6081; Match(CREATE);
			State = 6082; Match(PARTITION);
			State = 6083; Match(FUNCTION);
			State = 6084; _localctx.partition_function_name = id_();
			State = 6085; Match(LR_BRACKET);
			State = 6086; _localctx.input_parameter_type = data_type();
			State = 6087; Match(RR_BRACKET);
			State = 6088; Match(AS);
			State = 6089; Match(RANGE);
			State = 6091;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,720,_ctx) ) {
			case 1:
				{
				State = 6090;
				_la = _input.La(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 6093; Match(FOR);
			State = 6094; Match(VALUES);
			State = 6095; Match(LR_BRACKET);
			State = 6096; _localctx.boundary_values = expression_list_();
			State = 6097; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_partition_schemeContext : ParserRuleContext {
		public Id_Context partition_scheme_name;
		public Id_Context partition_function_name;
		public Id_Context _id_;
		public IList<Id_Context> _file_group_names = new List<Id_Context>();
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode[] PARTITION() { return GetTokens(TSqlParser.PARTITION); }
		public ITerminalNode PARTITION(int i) {
			return GetToken(TSqlParser.PARTITION, i);
		}
		public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Create_partition_schemeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_partition_scheme; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_partition_scheme(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_partition_scheme(this);
		}
	}

	[RuleVersion(0)]
	public Create_partition_schemeContext create_partition_scheme() {
		Create_partition_schemeContext _localctx = new Create_partition_schemeContext(_ctx, State);
		EnterRule(_localctx, 446, RULE_create_partition_scheme);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6099; Match(CREATE);
			State = 6100; Match(PARTITION);
			State = 6101; Match(SCHEME);
			State = 6102; _localctx.partition_scheme_name = id_();
			State = 6103; Match(AS);
			State = 6104; Match(PARTITION);
			State = 6105; _localctx.partition_function_name = id_();
			State = 6107;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,721,_ctx) ) {
			case 1:
				{
				State = 6106; Match(ALL);
				}
				break;
			}
			State = 6109; Match(TO);
			State = 6110; Match(LR_BRACKET);
			State = 6111; _localctx._id_ = id_();
			_localctx._file_group_names.Add(_localctx._id_);
			State = 6116;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,722,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6112; Match(COMMA);
					State = 6113; _localctx._id_ = id_();
					_localctx._file_group_names.Add(_localctx._id_);
					}
					} 
				}
				State = 6118;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,722,_ctx);
			}
			State = 6119; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_queueContext : ParserRuleContext {
		public Id_Context queue_name;
		public Id_Context filegroup;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Queue_settingsContext queue_settings() {
			return GetRuleContext<Queue_settingsContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public Create_queueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_queue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_queue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_queue(this);
		}
	}

	[RuleVersion(0)]
	public Create_queueContext create_queue() {
		Create_queueContext _localctx = new Create_queueContext(_ctx, State);
		EnterRule(_localctx, 448, RULE_create_queue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6121; Match(CREATE);
			State = 6122; Match(QUEUE);
			State = 6125;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,723,_ctx) ) {
			case 1:
				{
				State = 6123; full_table_name();
				}
				break;

			case 2:
				{
				State = 6124; _localctx.queue_name = id_();
				}
				break;
			}
			State = 6128;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,724,_ctx) ) {
			case 1:
				{
				State = 6127; queue_settings();
				}
				break;
			}
			State = 6133;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,725,_ctx) ) {
			case 1:
				{
				State = 6130; Match(ON);
				State = 6131; _localctx.filegroup = id_();
				}
				break;

			case 2:
				{
				State = 6132; Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Queue_settingsContext : ParserRuleContext {
		public IToken max_readers;
		public IToken user_name;
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] STATUS() { return GetTokens(TSqlParser.STATUS); }
		public ITerminalNode STATUS(int i) {
			return GetToken(TSqlParser.STATUS, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode RETENTION() { return GetToken(TSqlParser.RETENTION, 0); }
		public ITerminalNode ACTIVATION() { return GetToken(TSqlParser.ACTIVATION, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode POISON_MESSAGE_HANDLING() { return GetToken(TSqlParser.POISON_MESSAGE_HANDLING, 0); }
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode PROCEDURE_NAME() { return GetToken(TSqlParser.PROCEDURE_NAME, 0); }
		public Func_proc_name_database_schemaContext func_proc_name_database_schema() {
			return GetRuleContext<Func_proc_name_database_schemaContext>(0);
		}
		public ITerminalNode MAX_QUEUE_READERS() { return GetToken(TSqlParser.MAX_QUEUE_READERS, 0); }
		public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode SELF() { return GetToken(TSqlParser.SELF, 0); }
		public ITerminalNode OWNER() { return GetToken(TSqlParser.OWNER, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Queue_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queue_settings; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQueue_settings(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQueue_settings(this);
		}
	}

	[RuleVersion(0)]
	public Queue_settingsContext queue_settings() {
		Queue_settingsContext _localctx = new Queue_settingsContext(_ctx, State);
		EnterRule(_localctx, 450, RULE_queue_settings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6135; Match(WITH);
			State = 6142;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,727,_ctx) ) {
			case 1:
				{
				State = 6136; Match(STATUS);
				State = 6137; Match(EQUAL);
				State = 6138;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 6140;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,726,_ctx) ) {
				case 1:
					{
					State = 6139; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 6150;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,729,_ctx) ) {
			case 1:
				{
				State = 6144; Match(RETENTION);
				State = 6145; Match(EQUAL);
				State = 6146;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 6148;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,728,_ctx) ) {
				case 1:
					{
					State = 6147; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 6197;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,741,_ctx) ) {
			case 1:
				{
				State = 6152; Match(ACTIVATION);
				State = 6153; Match(LR_BRACKET);
				State = 6191;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,739,_ctx) ) {
				case 1:
					{
					{
					State = 6160;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,731,_ctx) ) {
					case 1:
						{
						State = 6154; Match(STATUS);
						State = 6155; Match(EQUAL);
						State = 6156;
						_la = _input.La(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 6158;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,730,_ctx) ) {
						case 1:
							{
							State = 6157; Match(COMMA);
							}
							break;
						}
						}
						break;
					}
					State = 6168;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,733,_ctx) ) {
					case 1:
						{
						State = 6162; Match(PROCEDURE_NAME);
						State = 6163; Match(EQUAL);
						State = 6164; func_proc_name_database_schema();
						State = 6166;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,732,_ctx) ) {
						case 1:
							{
							State = 6165; Match(COMMA);
							}
							break;
						}
						}
						break;
					}
					State = 6176;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,735,_ctx) ) {
					case 1:
						{
						State = 6170; Match(MAX_QUEUE_READERS);
						State = 6171; Match(EQUAL);
						State = 6172; _localctx.max_readers = Match(DECIMAL);
						State = 6174;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,734,_ctx) ) {
						case 1:
							{
							State = 6173; Match(COMMA);
							}
							break;
						}
						}
						break;
					}
					State = 6188;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,738,_ctx) ) {
					case 1:
						{
						State = 6178; Match(EXECUTE);
						State = 6179; Match(AS);
						State = 6183;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,736,_ctx) ) {
						case 1:
							{
							State = 6180; Match(SELF);
							}
							break;

						case 2:
							{
							State = 6181; _localctx.user_name = Match(STRING);
							}
							break;

						case 3:
							{
							State = 6182; Match(OWNER);
							}
							break;
						}
						State = 6186;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,737,_ctx) ) {
						case 1:
							{
							State = 6185; Match(COMMA);
							}
							break;
						}
						}
						break;
					}
					}
					}
					break;

				case 2:
					{
					State = 6190; Match(DROP);
					}
					break;
				}
				State = 6193; Match(RR_BRACKET);
				State = 6195;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,740,_ctx) ) {
				case 1:
					{
					State = 6194; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 6206;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,742,_ctx) ) {
			case 1:
				{
				State = 6199; Match(POISON_MESSAGE_HANDLING);
				State = 6200; Match(LR_BRACKET);
				{
				State = 6201; Match(STATUS);
				State = 6202; Match(EQUAL);
				State = 6203;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				State = 6205; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_queueContext : ParserRuleContext {
		public Id_Context queue_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public Queue_settingsContext queue_settings() {
			return GetRuleContext<Queue_settingsContext>(0);
		}
		public Queue_actionContext queue_action() {
			return GetRuleContext<Queue_actionContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Alter_queueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_queue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_queue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_queue(this);
		}
	}

	[RuleVersion(0)]
	public Alter_queueContext alter_queue() {
		Alter_queueContext _localctx = new Alter_queueContext(_ctx, State);
		EnterRule(_localctx, 452, RULE_alter_queue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6208; Match(ALTER);
			State = 6209; Match(QUEUE);
			State = 6212;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,743,_ctx) ) {
			case 1:
				{
				State = 6210; full_table_name();
				}
				break;

			case 2:
				{
				State = 6211; _localctx.queue_name = id_();
				}
				break;
			}
			State = 6216;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,744,_ctx) ) {
			case 1:
				{
				State = 6214; queue_settings();
				}
				break;

			case 2:
				{
				State = 6215; queue_action();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Queue_actionContext : ParserRuleContext {
		public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Queue_rebuild_optionsContext queue_rebuild_options() {
			return GetRuleContext<Queue_rebuild_optionsContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode REORGANIZE() { return GetToken(TSqlParser.REORGANIZE, 0); }
		public ITerminalNode LOB_COMPACTION() { return GetToken(TSqlParser.LOB_COMPACTION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode MOVE() { return GetToken(TSqlParser.MOVE, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public Queue_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queue_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQueue_action(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQueue_action(this);
		}
	}

	[RuleVersion(0)]
	public Queue_actionContext queue_action() {
		Queue_actionContext _localctx = new Queue_actionContext(_ctx, State);
		EnterRule(_localctx, 454, RULE_queue_action);
		try {
			State = 6239;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,748,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6218; Match(REBUILD);
				State = 6224;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,745,_ctx) ) {
				case 1:
					{
					State = 6219; Match(WITH);
					State = 6220; Match(LR_BRACKET);
					State = 6221; queue_rebuild_options();
					State = 6222; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6226; Match(REORGANIZE);
				State = 6231;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,746,_ctx) ) {
				case 1:
					{
					State = 6227; Match(WITH);
					State = 6228; Match(LOB_COMPACTION);
					State = 6229; Match(EQUAL);
					State = 6230; on_off();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6233; Match(MOVE);
				State = 6234; Match(TO);
				State = 6237;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,747,_ctx) ) {
				case 1:
					{
					State = 6235; id_();
					}
					break;

				case 2:
					{
					State = 6236; Match(DEFAULT);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Queue_rebuild_optionsContext : ParserRuleContext {
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Queue_rebuild_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queue_rebuild_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQueue_rebuild_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQueue_rebuild_options(this);
		}
	}

	[RuleVersion(0)]
	public Queue_rebuild_optionsContext queue_rebuild_options() {
		Queue_rebuild_optionsContext _localctx = new Queue_rebuild_optionsContext(_ctx, State);
		EnterRule(_localctx, 456, RULE_queue_rebuild_options);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6241; Match(MAXDOP);
			State = 6242; Match(EQUAL);
			State = 6243; Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_contractContext : ParserRuleContext {
		public Id_Context owner_name;
		public Id_Context message_type_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public Contract_nameContext contract_name() {
			return GetRuleContext<Contract_nameContext>(0);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode[] SENT() { return GetTokens(TSqlParser.SENT); }
		public ITerminalNode SENT(int i) {
			return GetToken(TSqlParser.SENT, i);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] INITIATOR() { return GetTokens(TSqlParser.INITIATOR); }
		public ITerminalNode INITIATOR(int i) {
			return GetToken(TSqlParser.INITIATOR, i);
		}
		public ITerminalNode[] TARGET() { return GetTokens(TSqlParser.TARGET); }
		public ITerminalNode TARGET(int i) {
			return GetToken(TSqlParser.TARGET, i);
		}
		public ITerminalNode[] ANY() { return GetTokens(TSqlParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(TSqlParser.ANY, i);
		}
		public ITerminalNode[] DEFAULT() { return GetTokens(TSqlParser.DEFAULT); }
		public ITerminalNode DEFAULT(int i) {
			return GetToken(TSqlParser.DEFAULT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_contractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_contract; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_contract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_contract(this);
		}
	}

	[RuleVersion(0)]
	public Create_contractContext create_contract() {
		Create_contractContext _localctx = new Create_contractContext(_ctx, State);
		EnterRule(_localctx, 458, RULE_create_contract);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6245; Match(CREATE);
			State = 6246; Match(CONTRACT);
			State = 6247; contract_name();
			State = 6250;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,749,_ctx) ) {
			case 1:
				{
				State = 6248; Match(AUTHORIZATION);
				State = 6249; _localctx.owner_name = id_();
				}
				break;
			}
			State = 6252; Match(LR_BRACKET);
			State = 6263;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 6255;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,750,_ctx) ) {
					case 1:
						{
						State = 6253; _localctx.message_type_name = id_();
						}
						break;

					case 2:
						{
						State = 6254; Match(DEFAULT);
						}
						break;
					}
					State = 6257; Match(SENT);
					State = 6258; Match(BY);
					State = 6259;
					_la = _input.La(1);
					if ( !(_la==ANY || _la==INITIATOR || _la==TARGET) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 6261;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,751,_ctx) ) {
					case 1:
						{
						State = 6260; Match(COMMA);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6265;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,752,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 6267; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conversation_statementContext : ParserRuleContext {
		public Begin_conversation_timerContext begin_conversation_timer() {
			return GetRuleContext<Begin_conversation_timerContext>(0);
		}
		public Begin_conversation_dialogContext begin_conversation_dialog() {
			return GetRuleContext<Begin_conversation_dialogContext>(0);
		}
		public End_conversationContext end_conversation() {
			return GetRuleContext<End_conversationContext>(0);
		}
		public Get_conversationContext get_conversation() {
			return GetRuleContext<Get_conversationContext>(0);
		}
		public Send_conversationContext send_conversation() {
			return GetRuleContext<Send_conversationContext>(0);
		}
		public Waitfor_conversationContext waitfor_conversation() {
			return GetRuleContext<Waitfor_conversationContext>(0);
		}
		public Conversation_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversation_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterConversation_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitConversation_statement(this);
		}
	}

	[RuleVersion(0)]
	public Conversation_statementContext conversation_statement() {
		Conversation_statementContext _localctx = new Conversation_statementContext(_ctx, State);
		EnterRule(_localctx, 460, RULE_conversation_statement);
		try {
			State = 6275;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,753,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6269; begin_conversation_timer();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6270; begin_conversation_dialog();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6271; end_conversation();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6272; get_conversation();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6273; send_conversation();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6274; waitfor_conversation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Message_statementContext : ParserRuleContext {
		public Id_Context message_type_name;
		public Id_Context owner_name;
		public Id_Context schema_collection_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode VALIDATION() { return GetToken(TSqlParser.VALIDATION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode EMPTY() { return GetToken(TSqlParser.EMPTY, 0); }
		public ITerminalNode WELL_FORMED_XML() { return GetToken(TSqlParser.WELL_FORMED_XML, 0); }
		public ITerminalNode VALID_XML() { return GetToken(TSqlParser.VALID_XML, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Message_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_message_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMessage_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMessage_statement(this);
		}
	}

	[RuleVersion(0)]
	public Message_statementContext message_statement() {
		Message_statementContext _localctx = new Message_statementContext(_ctx, State);
		EnterRule(_localctx, 462, RULE_message_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6277; Match(CREATE);
			State = 6278; Match(MESSAGE);
			State = 6279; Match(TYPE);
			State = 6280; _localctx.message_type_name = id_();
			State = 6283;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,754,_ctx) ) {
			case 1:
				{
				State = 6281; Match(AUTHORIZATION);
				State = 6282; _localctx.owner_name = id_();
				}
				break;
			}
			{
			State = 6285; Match(VALIDATION);
			State = 6286; Match(EQUAL);
			State = 6295;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,755,_ctx) ) {
			case 1:
				{
				State = 6287; Match(NONE);
				}
				break;

			case 2:
				{
				State = 6288; Match(EMPTY);
				}
				break;

			case 3:
				{
				State = 6289; Match(WELL_FORMED_XML);
				}
				break;

			case 4:
				{
				State = 6290; Match(VALID_XML);
				State = 6291; Match(WITH);
				State = 6292; Match(SCHEMA);
				State = 6293; Match(COLLECTION);
				State = 6294; _localctx.schema_collection_name = id_();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_statementContext : ParserRuleContext {
		public ITerminalNode MERGE() { return GetToken(TSqlParser.MERGE, 0); }
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return GetRuleContext<Insert_with_table_hintsContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public When_matchesContext[] when_matches() {
			return GetRuleContexts<When_matchesContext>();
		}
		public When_matchesContext when_matches(int i) {
			return GetRuleContext<When_matchesContext>(i);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public Merge_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMerge_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMerge_statement(this);
		}
	}

	[RuleVersion(0)]
	public Merge_statementContext merge_statement() {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, State);
		EnterRule(_localctx, 464, RULE_merge_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6298;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,756,_ctx) ) {
			case 1:
				{
				State = 6297; with_expression();
				}
				break;
			}
			State = 6300; Match(MERGE);
			State = 6308;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,758,_ctx) ) {
			case 1:
				{
				State = 6301; Match(TOP);
				State = 6302; Match(LR_BRACKET);
				State = 6303; expression(0);
				State = 6304; Match(RR_BRACKET);
				State = 6306;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,757,_ctx) ) {
				case 1:
					{
					State = 6305; Match(PERCENT);
					}
					break;
				}
				}
				break;
			}
			State = 6311;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,759,_ctx) ) {
			case 1:
				{
				State = 6310; Match(INTO);
				}
				break;
			}
			State = 6313; ddl_object();
			State = 6315;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,760,_ctx) ) {
			case 1:
				{
				State = 6314; insert_with_table_hints();
				}
				break;
			}
			State = 6318;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,761,_ctx) ) {
			case 1:
				{
				State = 6317; as_table_alias();
				}
				break;
			}
			State = 6320; Match(USING);
			State = 6321; table_sources();
			State = 6322; Match(ON);
			State = 6323; search_condition(0);
			State = 6325;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 6324; when_matches();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6327;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,762,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 6330;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,763,_ctx) ) {
			case 1:
				{
				State = 6329; output_clause();
				}
				break;
			}
			State = 6333;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,764,_ctx) ) {
			case 1:
				{
				State = 6332; option_clause();
				}
				break;
			}
			State = 6335; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class When_matchesContext : ParserRuleContext {
		public ITerminalNode[] WHEN() { return GetTokens(TSqlParser.WHEN); }
		public ITerminalNode WHEN(int i) {
			return GetToken(TSqlParser.WHEN, i);
		}
		public ITerminalNode[] MATCHED() { return GetTokens(TSqlParser.MATCHED); }
		public ITerminalNode MATCHED(int i) {
			return GetToken(TSqlParser.MATCHED, i);
		}
		public ITerminalNode[] THEN() { return GetTokens(TSqlParser.THEN); }
		public ITerminalNode THEN(int i) {
			return GetToken(TSqlParser.THEN, i);
		}
		public Merge_matchedContext[] merge_matched() {
			return GetRuleContexts<Merge_matchedContext>();
		}
		public Merge_matchedContext merge_matched(int i) {
			return GetRuleContext<Merge_matchedContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(TSqlParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(TSqlParser.AND, i);
		}
		public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		public ITerminalNode[] NOT() { return GetTokens(TSqlParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(TSqlParser.NOT, i);
		}
		public Merge_not_matchedContext merge_not_matched() {
			return GetRuleContext<Merge_not_matchedContext>(0);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public ITerminalNode TARGET() { return GetToken(TSqlParser.TARGET, 0); }
		public ITerminalNode[] SOURCE() { return GetTokens(TSqlParser.SOURCE); }
		public ITerminalNode SOURCE(int i) {
			return GetToken(TSqlParser.SOURCE, i);
		}
		public When_matchesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_when_matches; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWhen_matches(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWhen_matches(this);
		}
	}

	[RuleVersion(0)]
	public When_matchesContext when_matches() {
		When_matchesContext _localctx = new When_matchesContext(_ctx, State);
		EnterRule(_localctx, 466, RULE_when_matches);
		try {
			int _alt;
			State = 6377;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,771,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6345;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 6337; Match(WHEN);
						State = 6338; Match(MATCHED);
						State = 6341;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,765,_ctx) ) {
						case 1:
							{
							State = 6339; Match(AND);
							State = 6340; search_condition(0);
							}
							break;
						}
						State = 6343; Match(THEN);
						State = 6344; merge_matched();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6347;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,766,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 6349; Match(WHEN);
				State = 6350; Match(NOT);
				State = 6351; Match(MATCHED);
				State = 6354;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,767,_ctx) ) {
				case 1:
					{
					State = 6352; Match(BY);
					State = 6353; Match(TARGET);
					}
					break;
				}
				State = 6358;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,768,_ctx) ) {
				case 1:
					{
					State = 6356; Match(AND);
					State = 6357; search_condition(0);
					}
					break;
				}
				State = 6360; Match(THEN);
				State = 6361; merge_not_matched();
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6373;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 6362; Match(WHEN);
						State = 6363; Match(NOT);
						State = 6364; Match(MATCHED);
						State = 6365; Match(BY);
						State = 6366; Match(SOURCE);
						State = 6369;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,769,_ctx) ) {
						case 1:
							{
							State = 6367; Match(AND);
							State = 6368; search_condition(0);
							}
							break;
						}
						State = 6371; Match(THEN);
						State = 6372; merge_matched();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6375;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,770,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_matchedContext : ParserRuleContext {
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public Update_elem_mergeContext[] update_elem_merge() {
			return GetRuleContexts<Update_elem_mergeContext>();
		}
		public Update_elem_mergeContext update_elem_merge(int i) {
			return GetRuleContext<Update_elem_mergeContext>(i);
		}
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public Merge_matchedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_matched; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMerge_matched(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMerge_matched(this);
		}
	}

	[RuleVersion(0)]
	public Merge_matchedContext merge_matched() {
		Merge_matchedContext _localctx = new Merge_matchedContext(_ctx, State);
		EnterRule(_localctx, 468, RULE_merge_matched);
		try {
			int _alt;
			State = 6390;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,773,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6379; Match(UPDATE);
				State = 6380; Match(SET);
				State = 6381; update_elem_merge();
				State = 6386;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,772,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6382; Match(COMMA);
						State = 6383; update_elem_merge();
						}
						} 
					}
					State = 6388;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,772,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6389; Match(DELETE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_not_matchedContext : ParserRuleContext {
		public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		public Table_value_constructorContext table_value_constructor() {
			return GetRuleContext<Table_value_constructorContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Merge_not_matchedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_not_matched; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMerge_not_matched(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMerge_not_matched(this);
		}
	}

	[RuleVersion(0)]
	public Merge_not_matchedContext merge_not_matched() {
		Merge_not_matchedContext _localctx = new Merge_not_matchedContext(_ctx, State);
		EnterRule(_localctx, 470, RULE_merge_not_matched);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6392; Match(INSERT);
			State = 6397;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,774,_ctx) ) {
			case 1:
				{
				State = 6393; Match(LR_BRACKET);
				State = 6394; column_name_list();
				State = 6395; Match(RR_BRACKET);
				}
				break;
			}
			State = 6402;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,775,_ctx) ) {
			case 1:
				{
				State = 6399; table_value_constructor();
				}
				break;

			case 2:
				{
				State = 6400; Match(DEFAULT);
				State = 6401; Match(VALUES);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_statementContext : ParserRuleContext {
		public IToken cursor_var;
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public Delete_statement_fromContext delete_statement_from() {
			return GetRuleContext<Delete_statement_fromContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode[] FROM() { return GetTokens(TSqlParser.FROM); }
		public ITerminalNode FROM(int i) {
			return GetToken(TSqlParser.FROM, i);
		}
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return GetRuleContext<Insert_with_table_hintsContext>(0);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode CURRENT() { return GetToken(TSqlParser.CURRENT, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public Delete_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDelete_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDelete_statement(this);
		}
	}

	[RuleVersion(0)]
	public Delete_statementContext delete_statement() {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, State);
		EnterRule(_localctx, 472, RULE_delete_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6405;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,776,_ctx) ) {
			case 1:
				{
				State = 6404; with_expression();
				}
				break;
			}
			State = 6407; Match(DELETE);
			State = 6417;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,778,_ctx) ) {
			case 1:
				{
				State = 6408; Match(TOP);
				State = 6409; Match(LR_BRACKET);
				State = 6410; expression(0);
				State = 6411; Match(RR_BRACKET);
				State = 6413;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,777,_ctx) ) {
				case 1:
					{
					State = 6412; Match(PERCENT);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 6415; Match(TOP);
				State = 6416; Match(DECIMAL);
				}
				break;
			}
			State = 6420;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,779,_ctx) ) {
			case 1:
				{
				State = 6419; Match(FROM);
				}
				break;
			}
			State = 6422; delete_statement_from();
			State = 6424;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,780,_ctx) ) {
			case 1:
				{
				State = 6423; insert_with_table_hints();
				}
				break;
			}
			State = 6427;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,781,_ctx) ) {
			case 1:
				{
				State = 6426; output_clause();
				}
				break;
			}
			State = 6431;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,782,_ctx) ) {
			case 1:
				{
				State = 6429; Match(FROM);
				State = 6430; table_sources();
				}
				break;
			}
			State = 6446;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,786,_ctx) ) {
			case 1:
				{
				State = 6433; Match(WHERE);
				State = 6444;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,785,_ctx) ) {
				case 1:
					{
					State = 6434; search_condition(0);
					}
					break;

				case 2:
					{
					State = 6435; Match(CURRENT);
					State = 6436; Match(OF);
					State = 6442;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,784,_ctx) ) {
					case 1:
						{
						State = 6438;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,783,_ctx) ) {
						case 1:
							{
							State = 6437; Match(GLOBAL);
							}
							break;
						}
						State = 6440; cursor_name();
						}
						break;

					case 2:
						{
						State = 6441; _localctx.cursor_var = Match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			State = 6449;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,787,_ctx) ) {
			case 1:
				{
				State = 6448; for_clause();
				}
				break;
			}
			State = 6452;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,788,_ctx) ) {
			case 1:
				{
				State = 6451; option_clause();
				}
				break;
			}
			State = 6455;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,789,_ctx) ) {
			case 1:
				{
				State = 6454; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_statement_fromContext : ParserRuleContext {
		public IToken table_var;
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Delete_statement_fromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_statement_from; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDelete_statement_from(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDelete_statement_from(this);
		}
	}

	[RuleVersion(0)]
	public Delete_statement_fromContext delete_statement_from() {
		Delete_statement_fromContext _localctx = new Delete_statement_fromContext(_ctx, State);
		EnterRule(_localctx, 474, RULE_delete_statement_from);
		try {
			State = 6461;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,790,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6457; ddl_object();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6458; table_alias();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6459; rowset_function_limited();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6460; _localctx.table_var = Match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_statementContext : ParserRuleContext {
		public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		public Insert_statement_valueContext insert_statement_value() {
			return GetRuleContext<Insert_statement_valueContext>(0);
		}
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return GetRuleContext<Insert_with_table_hintsContext>(0);
		}
		public Insert_column_name_listContext insert_column_name_list() {
			return GetRuleContext<Insert_column_name_listContext>(0);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public Insert_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_statement(this);
		}
	}

	[RuleVersion(0)]
	public Insert_statementContext insert_statement() {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, State);
		EnterRule(_localctx, 476, RULE_insert_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6464;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,791,_ctx) ) {
			case 1:
				{
				State = 6463; with_expression();
				}
				break;
			}
			State = 6466; Match(INSERT);
			State = 6474;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,793,_ctx) ) {
			case 1:
				{
				State = 6467; Match(TOP);
				State = 6468; Match(LR_BRACKET);
				State = 6469; expression(0);
				State = 6470; Match(RR_BRACKET);
				State = 6472;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,792,_ctx) ) {
				case 1:
					{
					State = 6471; Match(PERCENT);
					}
					break;
				}
				}
				break;
			}
			State = 6477;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,794,_ctx) ) {
			case 1:
				{
				State = 6476; Match(INTO);
				}
				break;
			}
			State = 6481;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,795,_ctx) ) {
			case 1:
				{
				State = 6479; ddl_object();
				}
				break;

			case 2:
				{
				State = 6480; rowset_function_limited();
				}
				break;
			}
			State = 6484;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,796,_ctx) ) {
			case 1:
				{
				State = 6483; insert_with_table_hints();
				}
				break;
			}
			State = 6490;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,797,_ctx) ) {
			case 1:
				{
				State = 6486; Match(LR_BRACKET);
				State = 6487; insert_column_name_list();
				State = 6488; Match(RR_BRACKET);
				}
				break;
			}
			State = 6493;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,798,_ctx) ) {
			case 1:
				{
				State = 6492; output_clause();
				}
				break;
			}
			State = 6495; insert_statement_value();
			State = 6497;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,799,_ctx) ) {
			case 1:
				{
				State = 6496; for_clause();
				}
				break;
			}
			State = 6500;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,800,_ctx) ) {
			case 1:
				{
				State = 6499; option_clause();
				}
				break;
			}
			State = 6503;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,801,_ctx) ) {
			case 1:
				{
				State = 6502; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_statement_valueContext : ParserRuleContext {
		public Table_value_constructorContext table_value_constructor() {
			return GetRuleContext<Table_value_constructorContext>(0);
		}
		public Derived_tableContext derived_table() {
			return GetRuleContext<Derived_tableContext>(0);
		}
		public Execute_statementContext execute_statement() {
			return GetRuleContext<Execute_statementContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Insert_statement_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_statement_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_statement_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_statement_value(this);
		}
	}

	[RuleVersion(0)]
	public Insert_statement_valueContext insert_statement_value() {
		Insert_statement_valueContext _localctx = new Insert_statement_valueContext(_ctx, State);
		EnterRule(_localctx, 478, RULE_insert_statement_value);
		try {
			State = 6510;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,802,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6505; table_value_constructor();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6506; derived_table();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6507; execute_statement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6508; Match(DEFAULT);
				State = 6509; Match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Receive_statementContext : ParserRuleContext {
		public Id_Context table_variable;
		public Search_conditionContext where;
		public ITerminalNode RECEIVE() { return GetToken(TSqlParser.RECEIVE, 0); }
		public Select_list_elemContext select_list_elem() {
			return GetRuleContext<Select_list_elemContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode DISTINCT() { return GetToken(TSqlParser.DISTINCT, 0); }
		public Top_clauseContext top_clause() {
			return GetRuleContext<Top_clauseContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Receive_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receive_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterReceive_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitReceive_statement(this);
		}
	}

	[RuleVersion(0)]
	public Receive_statementContext receive_statement() {
		Receive_statementContext _localctx = new Receive_statementContext(_ctx, State);
		EnterRule(_localctx, 480, RULE_receive_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6513;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,803,_ctx) ) {
			case 1:
				{
				State = 6512; Match(LR_BRACKET);
				}
				break;
			}
			State = 6515; Match(RECEIVE);
			State = 6519;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,804,_ctx) ) {
			case 1:
				{
				State = 6516; Match(ALL);
				}
				break;

			case 2:
				{
				State = 6517; Match(DISTINCT);
				}
				break;

			case 3:
				{
				State = 6518; top_clause();
				}
				break;
			}
			State = 6521; select_list_elem();
			State = 6522; Match(FROM);
			State = 6523; full_table_name();
			State = 6529;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,805,_ctx) ) {
			case 1:
				{
				State = 6524; Match(INTO);
				State = 6525; _localctx.table_variable = id_();
				{
				State = 6526; Match(WHERE);
				State = 6527; _localctx.where = search_condition(0);
				}
				}
				break;
			}
			State = 6532;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,806,_ctx) ) {
			case 1:
				{
				State = 6531; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_statement_standaloneContext : ParserRuleContext {
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public Select_statement_standaloneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_statement_standalone; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_statement_standalone(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_statement_standalone(this);
		}
	}

	[RuleVersion(0)]
	public Select_statement_standaloneContext select_statement_standalone() {
		Select_statement_standaloneContext _localctx = new Select_statement_standaloneContext(_ctx, State);
		EnterRule(_localctx, 482, RULE_select_statement_standalone);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6535;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,807,_ctx) ) {
			case 1:
				{
				State = 6534; with_expression();
				}
				break;
			}
			State = 6537; select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_statementContext : ParserRuleContext {
		public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_statement(this);
		}
	}

	[RuleVersion(0)]
	public Select_statementContext select_statement() {
		Select_statementContext _localctx = new Select_statementContext(_ctx, State);
		EnterRule(_localctx, 484, RULE_select_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6539; query_expression();
			State = 6541;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,808,_ctx) ) {
			case 1:
				{
				State = 6540; order_by_clause();
				}
				break;
			}
			State = 6544;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,809,_ctx) ) {
			case 1:
				{
				State = 6543; for_clause();
				}
				break;
			}
			State = 6547;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,810,_ctx) ) {
			case 1:
				{
				State = 6546; option_clause();
				}
				break;
			}
			State = 6550;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,811,_ctx) ) {
			case 1:
				{
				State = 6549; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public TimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTime(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTime(this);
		}
	}

	[RuleVersion(0)]
	public TimeContext time() {
		TimeContext _localctx = new TimeContext(_ctx, State);
		EnterRule(_localctx, 486, RULE_time);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6554;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,812,_ctx) ) {
			case 1:
				{
				State = 6552; Match(LOCAL_ID);
				}
				break;

			case 2:
				{
				State = 6553; constant();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_statementContext : ParserRuleContext {
		public IToken cursor_var;
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public Update_elemContext[] update_elem() {
			return GetRuleContexts<Update_elemContext>();
		}
		public Update_elemContext update_elem(int i) {
			return GetRuleContext<Update_elemContext>(i);
		}
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode CURRENT() { return GetToken(TSqlParser.CURRENT, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public Update_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_statement(this);
		}
	}

	[RuleVersion(0)]
	public Update_statementContext update_statement() {
		Update_statementContext _localctx = new Update_statementContext(_ctx, State);
		EnterRule(_localctx, 488, RULE_update_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6557;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,813,_ctx) ) {
			case 1:
				{
				State = 6556; with_expression();
				}
				break;
			}
			State = 6559; Match(UPDATE);
			State = 6567;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,815,_ctx) ) {
			case 1:
				{
				State = 6560; Match(TOP);
				State = 6561; Match(LR_BRACKET);
				State = 6562; expression(0);
				State = 6563; Match(RR_BRACKET);
				State = 6565;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,814,_ctx) ) {
				case 1:
					{
					State = 6564; Match(PERCENT);
					}
					break;
				}
				}
				break;
			}
			State = 6571;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,816,_ctx) ) {
			case 1:
				{
				State = 6569; ddl_object();
				}
				break;

			case 2:
				{
				State = 6570; rowset_function_limited();
				}
				break;
			}
			State = 6574;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,817,_ctx) ) {
			case 1:
				{
				State = 6573; with_table_hints();
				}
				break;
			}
			State = 6576; Match(SET);
			State = 6577; update_elem();
			State = 6582;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,818,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6578; Match(COMMA);
					State = 6579; update_elem();
					}
					} 
				}
				State = 6584;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,818,_ctx);
			}
			State = 6586;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,819,_ctx) ) {
			case 1:
				{
				State = 6585; output_clause();
				}
				break;
			}
			State = 6590;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,820,_ctx) ) {
			case 1:
				{
				State = 6588; Match(FROM);
				State = 6589; table_sources();
				}
				break;
			}
			State = 6605;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,824,_ctx) ) {
			case 1:
				{
				State = 6592; Match(WHERE);
				State = 6603;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,823,_ctx) ) {
				case 1:
					{
					State = 6593; search_condition(0);
					}
					break;

				case 2:
					{
					State = 6594; Match(CURRENT);
					State = 6595; Match(OF);
					State = 6601;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,822,_ctx) ) {
					case 1:
						{
						State = 6597;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,821,_ctx) ) {
						case 1:
							{
							State = 6596; Match(GLOBAL);
							}
							break;
						}
						State = 6599; cursor_name();
						}
						break;

					case 2:
						{
						State = 6600; _localctx.cursor_var = Match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			State = 6608;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,825,_ctx) ) {
			case 1:
				{
				State = 6607; for_clause();
				}
				break;
			}
			State = 6611;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,826,_ctx) ) {
			case 1:
				{
				State = 6610; option_clause();
				}
				break;
			}
			State = 6614;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,827,_ctx) ) {
			case 1:
				{
				State = 6613; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_clauseContext : ParserRuleContext {
		public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		public Output_dml_list_elemContext[] output_dml_list_elem() {
			return GetRuleContexts<Output_dml_list_elemContext>();
		}
		public Output_dml_list_elemContext output_dml_list_elem(int i) {
			return GetRuleContext<Output_dml_list_elemContext>(i);
		}
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Output_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOutput_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOutput_clause(this);
		}
	}

	[RuleVersion(0)]
	public Output_clauseContext output_clause() {
		Output_clauseContext _localctx = new Output_clauseContext(_ctx, State);
		EnterRule(_localctx, 490, RULE_output_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6616; Match(OUTPUT);
			State = 6617; output_dml_list_elem();
			State = 6622;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,828,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6618; Match(COMMA);
					State = 6619; output_dml_list_elem();
					}
					} 
				}
				State = 6624;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,828,_ctx);
			}
			State = 6636;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,831,_ctx) ) {
			case 1:
				{
				State = 6625; Match(INTO);
				State = 6628;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,829,_ctx) ) {
				case 1:
					{
					State = 6626; Match(LOCAL_ID);
					}
					break;

				case 2:
					{
					State = 6627; table_name();
					}
					break;
				}
				State = 6634;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,830,_ctx) ) {
				case 1:
					{
					State = 6630; Match(LR_BRACKET);
					State = 6631; column_name_list();
					State = 6632; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_dml_list_elemContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AsteriskContext asterisk() {
			return GetRuleContext<AsteriskContext>(0);
		}
		public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public Output_dml_list_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_dml_list_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOutput_dml_list_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOutput_dml_list_elem(this);
		}
	}

	[RuleVersion(0)]
	public Output_dml_list_elemContext output_dml_list_elem() {
		Output_dml_list_elemContext _localctx = new Output_dml_list_elemContext(_ctx, State);
		EnterRule(_localctx, 492, RULE_output_dml_list_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6640;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,832,_ctx) ) {
			case 1:
				{
				State = 6638; expression(0);
				}
				break;

			case 2:
				{
				State = 6639; asterisk();
				}
				break;
			}
			State = 6643;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,833,_ctx) ) {
			case 1:
				{
				State = 6642; as_column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_databaseContext : ParserRuleContext {
		public Id_Context database;
		public Id_Context collation_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode CONTAINMENT() { return GetToken(TSqlParser.CONTAINMENT, 0); }
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public Database_file_specContext[] database_file_spec() {
			return GetRuleContexts<Database_file_specContext>();
		}
		public Database_file_specContext database_file_spec(int i) {
			return GetRuleContext<Database_file_specContext>(i);
		}
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Create_database_optionContext[] create_database_option() {
			return GetRuleContexts<Create_database_optionContext>();
		}
		public Create_database_optionContext create_database_option(int i) {
			return GetRuleContext<Create_database_optionContext>(i);
		}
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode PARTIAL() { return GetToken(TSqlParser.PARTIAL, 0); }
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public Create_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_database(this);
		}
	}

	[RuleVersion(0)]
	public Create_databaseContext create_database() {
		Create_databaseContext _localctx = new Create_databaseContext(_ctx, State);
		EnterRule(_localctx, 494, RULE_create_database);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6645; Match(CREATE);
			State = 6646; Match(DATABASE);
			{
			State = 6647; _localctx.database = id_();
			}
			State = 6651;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,834,_ctx) ) {
			case 1:
				{
				State = 6648; Match(CONTAINMENT);
				State = 6649; Match(EQUAL);
				State = 6650;
				_la = _input.La(1);
				if ( !(_la==NONE || _la==PARTIAL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 6665;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,837,_ctx) ) {
			case 1:
				{
				State = 6653; Match(ON);
				State = 6655;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,835,_ctx) ) {
				case 1:
					{
					State = 6654; Match(PRIMARY);
					}
					break;
				}
				State = 6657; database_file_spec();
				State = 6662;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,836,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6658; Match(COMMA);
						State = 6659; database_file_spec();
						}
						} 
					}
					State = 6664;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,836,_ctx);
				}
				}
				break;
			}
			State = 6677;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,839,_ctx) ) {
			case 1:
				{
				State = 6667; Match(LOG);
				State = 6668; Match(ON);
				State = 6669; database_file_spec();
				State = 6674;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,838,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6670; Match(COMMA);
						State = 6671; database_file_spec();
						}
						} 
					}
					State = 6676;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,838,_ctx);
				}
				}
				break;
			}
			State = 6681;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,840,_ctx) ) {
			case 1:
				{
				State = 6679; Match(COLLATE);
				State = 6680; _localctx.collation_name = id_();
				}
				break;
			}
			State = 6692;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,842,_ctx) ) {
			case 1:
				{
				State = 6683; Match(WITH);
				State = 6684; create_database_option();
				State = 6689;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,841,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6685; Match(COMMA);
						State = 6686; create_database_option();
						}
						} 
					}
					State = 6691;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,841,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_indexContext : ParserRuleContext {
		public Search_conditionContext where;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		public ITerminalNode INCLUDE() { return GetToken(TSqlParser.INCLUDE, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Create_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_index(this);
		}
	}

	[RuleVersion(0)]
	public Create_indexContext create_index() {
		Create_indexContext _localctx = new Create_indexContext(_ctx, State);
		EnterRule(_localctx, 496, RULE_create_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6694; Match(CREATE);
			State = 6696;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,843,_ctx) ) {
			case 1:
				{
				State = 6695; Match(UNIQUE);
				}
				break;
			}
			State = 6699;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,844,_ctx) ) {
			case 1:
				{
				State = 6698; clustered();
				}
				break;
			}
			State = 6701; Match(INDEX);
			State = 6702; id_();
			State = 6703; Match(ON);
			State = 6704; table_name();
			State = 6705; Match(LR_BRACKET);
			State = 6706; column_name_list_with_order();
			State = 6707; Match(RR_BRACKET);
			State = 6713;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,845,_ctx) ) {
			case 1:
				{
				State = 6708; Match(INCLUDE);
				State = 6709; Match(LR_BRACKET);
				State = 6710; column_name_list();
				State = 6711; Match(RR_BRACKET);
				}
				break;
			}
			State = 6717;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,846,_ctx) ) {
			case 1:
				{
				State = 6715; Match(WHERE);
				State = 6716; _localctx.where = search_condition(0);
				}
				break;
			}
			State = 6720;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,847,_ctx) ) {
			case 1:
				{
				State = 6719; index_options();
				}
				break;
			}
			State = 6724;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,848,_ctx) ) {
			case 1:
				{
				State = 6722; Match(ON);
				State = 6723; id_();
				}
				break;
			}
			State = 6727;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,849,_ctx) ) {
			case 1:
				{
				State = 6726; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_indexContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode PAUSE() { return GetToken(TSqlParser.PAUSE, 0); }
		public ITerminalNode ABORT() { return GetToken(TSqlParser.ABORT, 0); }
		public Rebuild_partitionContext rebuild_partition() {
			return GetRuleContext<Rebuild_partitionContext>(0);
		}
		public Alter_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_index(this);
		}
	}

	[RuleVersion(0)]
	public Alter_indexContext alter_index() {
		Alter_indexContext _localctx = new Alter_indexContext(_ctx, State);
		EnterRule(_localctx, 498, RULE_alter_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6729; Match(ALTER);
			State = 6730; Match(INDEX);
			State = 6731; id_();
			State = 6732; Match(ON);
			State = 6733; table_name();
			State = 6738;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,850,_ctx) ) {
			case 1:
				{
				State = 6734; Match(DISABLE);
				}
				break;

			case 2:
				{
				State = 6735; Match(PAUSE);
				}
				break;

			case 3:
				{
				State = 6736; Match(ABORT);
				}
				break;

			case 4:
				{
				State = 6737; rebuild_partition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rebuild_partitionContext : ParserRuleContext {
		public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public Rebuild_partitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rebuild_partition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRebuild_partition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRebuild_partition(this);
		}
	}

	[RuleVersion(0)]
	public Rebuild_partitionContext rebuild_partition() {
		Rebuild_partitionContext _localctx = new Rebuild_partitionContext(_ctx, State);
		EnterRule(_localctx, 500, RULE_rebuild_partition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6740; Match(REBUILD);
			State = 6744;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,851,_ctx) ) {
			case 1:
				{
				State = 6741; Match(PARTITION);
				State = 6742; Match(EQUAL);
				State = 6743; Match(ALL);
				}
				break;
			}
			State = 6747;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,852,_ctx) ) {
			case 1:
				{
				State = 6746; index_options();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_columnstore_indexContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode COLUMNSTORE() { return GetToken(TSqlParser.COLUMNSTORE, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode CLUSTERED() { return GetToken(TSqlParser.CLUSTERED, 0); }
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public ITerminalNode NONCLUSTERED() { return GetToken(TSqlParser.NONCLUSTERED, 0); }
		public Create_columnstore_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_columnstore_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_columnstore_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_columnstore_index(this);
		}
	}

	[RuleVersion(0)]
	public Create_columnstore_indexContext create_columnstore_index() {
		Create_columnstore_indexContext _localctx = new Create_columnstore_indexContext(_ctx, State);
		EnterRule(_localctx, 502, RULE_create_columnstore_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6749; Match(CREATE);
			State = 6754;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,854,_ctx) ) {
			case 1:
				{
				State = 6750; Match(CLUSTERED);
				}
				break;

			case 2:
				{
				State = 6752;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,853,_ctx) ) {
				case 1:
					{
					State = 6751; Match(NONCLUSTERED);
					}
					break;
				}
				}
				break;
			}
			State = 6756; Match(COLUMNSTORE);
			State = 6757; Match(INDEX);
			State = 6758; id_();
			State = 6759; Match(ON);
			State = 6760; table_name();
			State = 6762;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,855,_ctx) ) {
			case 1:
				{
				State = 6761; index_options();
				}
				break;
			}
			State = 6766;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,856,_ctx) ) {
			case 1:
				{
				State = 6764; Match(ON);
				State = 6765; id_();
				}
				break;
			}
			State = 6769;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,857,_ctx) ) {
			case 1:
				{
				State = 6768; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_nonclustered_columnstore_indexContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode COLUMNSTORE() { return GetToken(TSqlParser.COLUMNSTORE, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		public ITerminalNode NONCLUSTERED() { return GetToken(TSqlParser.NONCLUSTERED, 0); }
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public Create_nonclustered_columnstore_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_nonclustered_columnstore_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_nonclustered_columnstore_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_nonclustered_columnstore_index(this);
		}
	}

	[RuleVersion(0)]
	public Create_nonclustered_columnstore_indexContext create_nonclustered_columnstore_index() {
		Create_nonclustered_columnstore_indexContext _localctx = new Create_nonclustered_columnstore_indexContext(_ctx, State);
		EnterRule(_localctx, 504, RULE_create_nonclustered_columnstore_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6771; Match(CREATE);
			State = 6773;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,858,_ctx) ) {
			case 1:
				{
				State = 6772; Match(NONCLUSTERED);
				}
				break;
			}
			State = 6775; Match(COLUMNSTORE);
			State = 6776; Match(INDEX);
			State = 6777; id_();
			State = 6778; Match(ON);
			State = 6779; table_name();
			State = 6780; Match(LR_BRACKET);
			State = 6781; column_name_list_with_order();
			State = 6782; Match(RR_BRACKET);
			State = 6785;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,859,_ctx) ) {
			case 1:
				{
				State = 6783; Match(WHERE);
				State = 6784; search_condition(0);
				}
				break;
			}
			State = 6788;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,860,_ctx) ) {
			case 1:
				{
				State = 6787; index_options();
				}
				break;
			}
			State = 6792;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,861,_ctx) ) {
			case 1:
				{
				State = 6790; Match(ON);
				State = 6791; id_();
				}
				break;
			}
			State = 6795;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,862,_ctx) ) {
			case 1:
				{
				State = 6794; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_xml_indexContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode[] XML() { return GetTokens(TSqlParser.XML); }
		public ITerminalNode XML(int i) {
			return GetToken(TSqlParser.XML, i);
		}
		public ITerminalNode[] INDEX() { return GetTokens(TSqlParser.INDEX); }
		public ITerminalNode INDEX(int i) {
			return GetToken(TSqlParser.INDEX, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public Create_xml_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_xml_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_xml_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_xml_index(this);
		}
	}

	[RuleVersion(0)]
	public Create_xml_indexContext create_xml_index() {
		Create_xml_indexContext _localctx = new Create_xml_indexContext(_ctx, State);
		EnterRule(_localctx, 506, RULE_create_xml_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6797; Match(CREATE);
			State = 6799;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,863,_ctx) ) {
			case 1:
				{
				State = 6798; Match(PRIMARY);
				}
				break;
			}
			State = 6801; Match(XML);
			State = 6802; Match(INDEX);
			State = 6803; id_();
			State = 6804; Match(ON);
			State = 6805; table_name();
			State = 6806; Match(LR_BRACKET);
			State = 6807; id_();
			State = 6808; Match(RR_BRACKET);
			State = 6819;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,866,_ctx) ) {
			case 1:
				{
				State = 6809; Match(USING);
				State = 6810; Match(XML);
				State = 6811; Match(INDEX);
				State = 6812; id_();
				State = 6817;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,865,_ctx) ) {
				case 1:
					{
					State = 6813; Match(FOR);
					State = 6815;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,864,_ctx) ) {
					case 1:
						{
						State = 6814;
						_la = _input.La(1);
						if ( !(_la==PATH || _la==PROPERTY || _la==VALUE) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			State = 6822;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,867,_ctx) ) {
			case 1:
				{
				State = 6821; index_options();
				}
				break;
			}
			State = 6825;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,868,_ctx) ) {
			case 1:
				{
				State = 6824; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_procedureContext : ParserRuleContext {
		public IToken proc;
		public Func_proc_name_schemaContext procName;
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Func_proc_name_schemaContext func_proc_name_schema() {
			return GetRuleContext<Func_proc_name_schemaContext>(0);
		}
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode PROC() { return GetToken(TSqlParser.PROC, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(TSqlParser.PROCEDURE, 0); }
		public As_external_nameContext as_external_name() {
			return GetRuleContext<As_external_nameContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Procedure_paramContext[] procedure_param() {
			return GetRuleContexts<Procedure_paramContext>();
		}
		public Procedure_paramContext procedure_param(int i) {
			return GetRuleContext<Procedure_paramContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Procedure_optionContext[] procedure_option() {
			return GetRuleContexts<Procedure_optionContext>();
		}
		public Procedure_optionContext procedure_option(int i) {
			return GetRuleContext<Procedure_optionContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public Create_or_alter_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_procedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_procedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_procedure(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_procedureContext create_or_alter_procedure() {
		Create_or_alter_procedureContext _localctx = new Create_or_alter_procedureContext(_ctx, State);
		EnterRule(_localctx, 508, RULE_create_or_alter_procedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6833;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,870,_ctx) ) {
			case 1:
				{
				{
				State = 6827; Match(CREATE);
				State = 6830;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,869,_ctx) ) {
				case 1:
					{
					State = 6828; Match(OR);
					State = 6829; Match(ALTER);
					}
					break;
				}
				}
				}
				break;

			case 2:
				{
				State = 6832; Match(ALTER);
				}
				break;
			}
			State = 6835;
			_localctx.proc = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
				_localctx.proc = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 6836; _localctx.procName = func_proc_name_schema();
			State = 6839;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,871,_ctx) ) {
			case 1:
				{
				State = 6837; Match(SEMI);
				State = 6838; Match(DECIMAL);
				}
				break;
			}
			State = 6855;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,875,_ctx) ) {
			case 1:
				{
				State = 6842;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,872,_ctx) ) {
				case 1:
					{
					State = 6841; Match(LR_BRACKET);
					}
					break;
				}
				State = 6844; procedure_param();
				State = 6849;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,873,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6845; Match(COMMA);
						State = 6846; procedure_param();
						}
						} 
					}
					State = 6851;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,873,_ctx);
				}
				State = 6853;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,874,_ctx) ) {
				case 1:
					{
					State = 6852; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
			State = 6866;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,877,_ctx) ) {
			case 1:
				{
				State = 6857; Match(WITH);
				State = 6858; procedure_option();
				State = 6863;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,876,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6859; Match(COMMA);
						State = 6860; procedure_option();
						}
						} 
					}
					State = 6865;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,876,_ctx);
				}
				}
				break;
			}
			State = 6870;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,878,_ctx) ) {
			case 1:
				{
				State = 6868; Match(FOR);
				State = 6869; Match(REPLICATION);
				}
				break;
			}
			State = 6872; Match(AS);
			State = 6880;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,880,_ctx) ) {
			case 1:
				{
				State = 6873; as_external_name();
				}
				break;

			case 2:
				{
				State = 6877;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,879,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6874; sql_clauses();
						}
						} 
					}
					State = 6879;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,879,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_external_nameContext : ParserRuleContext {
		public Id_Context assembly_name;
		public Id_Context class_name;
		public Id_Context method_name;
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public As_external_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_external_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAs_external_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAs_external_name(this);
		}
	}

	[RuleVersion(0)]
	public As_external_nameContext as_external_name() {
		As_external_nameContext _localctx = new As_external_nameContext(_ctx, State);
		EnterRule(_localctx, 510, RULE_as_external_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6882; Match(EXTERNAL);
			State = 6883; Match(NAME);
			State = 6884; _localctx.assembly_name = id_();
			State = 6885; Match(DOT);
			State = 6886; _localctx.class_name = id_();
			State = 6887; Match(DOT);
			State = 6888; _localctx.method_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_triggerContext : ParserRuleContext {
		public Create_or_alter_dml_triggerContext create_or_alter_dml_trigger() {
			return GetRuleContext<Create_or_alter_dml_triggerContext>(0);
		}
		public Create_or_alter_ddl_triggerContext create_or_alter_ddl_trigger() {
			return GetRuleContext<Create_or_alter_ddl_triggerContext>(0);
		}
		public Create_or_alter_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_trigger(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_triggerContext create_or_alter_trigger() {
		Create_or_alter_triggerContext _localctx = new Create_or_alter_triggerContext(_ctx, State);
		EnterRule(_localctx, 512, RULE_create_or_alter_trigger);
		try {
			State = 6892;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,881,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6890; create_or_alter_dml_trigger();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6891; create_or_alter_ddl_trigger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_dml_triggerContext : ParserRuleContext {
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Dml_trigger_operationContext[] dml_trigger_operation() {
			return GetRuleContexts<Dml_trigger_operationContext>();
		}
		public Dml_trigger_operationContext dml_trigger_operation(int i) {
			return GetRuleContext<Dml_trigger_operationContext>(i);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] FOR() { return GetTokens(TSqlParser.FOR); }
		public ITerminalNode FOR(int i) {
			return GetToken(TSqlParser.FOR, i);
		}
		public ITerminalNode AFTER() { return GetToken(TSqlParser.AFTER, 0); }
		public ITerminalNode INSTEAD() { return GetToken(TSqlParser.INSTEAD, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public ITerminalNode[] WITH() { return GetTokens(TSqlParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(TSqlParser.WITH, i);
		}
		public Dml_trigger_optionContext[] dml_trigger_option() {
			return GetRuleContexts<Dml_trigger_optionContext>();
		}
		public Dml_trigger_optionContext dml_trigger_option(int i) {
			return GetRuleContext<Dml_trigger_optionContext>(i);
		}
		public ITerminalNode APPEND() { return GetToken(TSqlParser.APPEND, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public Create_or_alter_dml_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_dml_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_dml_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_dml_trigger(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_dml_triggerContext create_or_alter_dml_trigger() {
		Create_or_alter_dml_triggerContext _localctx = new Create_or_alter_dml_triggerContext(_ctx, State);
		EnterRule(_localctx, 514, RULE_create_or_alter_dml_trigger);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6900;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,883,_ctx) ) {
			case 1:
				{
				{
				State = 6894; Match(CREATE);
				State = 6897;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,882,_ctx) ) {
				case 1:
					{
					State = 6895; Match(OR);
					State = 6896; Match(ALTER);
					}
					break;
				}
				}
				}
				break;

			case 2:
				{
				State = 6899; Match(ALTER);
				}
				break;
			}
			State = 6902; Match(TRIGGER);
			State = 6903; simple_name();
			State = 6904; Match(ON);
			State = 6905; table_name();
			State = 6915;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,885,_ctx) ) {
			case 1:
				{
				State = 6906; Match(WITH);
				State = 6907; dml_trigger_option();
				State = 6912;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,884,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6908; Match(COMMA);
						State = 6909; dml_trigger_option();
						}
						} 
					}
					State = 6914;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,884,_ctx);
				}
				}
				break;
			}
			State = 6921;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,886,_ctx) ) {
			case 1:
				{
				State = 6917; Match(FOR);
				}
				break;

			case 2:
				{
				State = 6918; Match(AFTER);
				}
				break;

			case 3:
				{
				State = 6919; Match(INSTEAD);
				State = 6920; Match(OF);
				}
				break;
			}
			State = 6923; dml_trigger_operation();
			State = 6928;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,887,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6924; Match(COMMA);
					State = 6925; dml_trigger_operation();
					}
					} 
				}
				State = 6930;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,887,_ctx);
			}
			State = 6933;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,888,_ctx) ) {
			case 1:
				{
				State = 6931; Match(WITH);
				State = 6932; Match(APPEND);
				}
				break;
			}
			State = 6938;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,889,_ctx) ) {
			case 1:
				{
				State = 6935; Match(NOT);
				State = 6936; Match(FOR);
				State = 6937; Match(REPLICATION);
				}
				break;
			}
			State = 6940; Match(AS);
			State = 6942;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 6941; sql_clauses();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6944;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,890,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_trigger_optionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public Dml_trigger_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_trigger_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDml_trigger_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDml_trigger_option(this);
		}
	}

	[RuleVersion(0)]
	public Dml_trigger_optionContext dml_trigger_option() {
		Dml_trigger_optionContext _localctx = new Dml_trigger_optionContext(_ctx, State);
		EnterRule(_localctx, 516, RULE_dml_trigger_option);
		try {
			State = 6948;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,891,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6946; Match(ENCRYPTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6947; execute_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_trigger_operationContext : ParserRuleContext {
		public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public Dml_trigger_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_trigger_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDml_trigger_operation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDml_trigger_operation(this);
		}
	}

	[RuleVersion(0)]
	public Dml_trigger_operationContext dml_trigger_operation() {
		Dml_trigger_operationContext _localctx = new Dml_trigger_operationContext(_ctx, State);
		EnterRule(_localctx, 518, RULE_dml_trigger_operation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6950;
			_la = _input.La(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_ddl_triggerContext : ParserRuleContext {
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Ddl_trigger_operationContext[] ddl_trigger_operation() {
			return GetRuleContexts<Ddl_trigger_operationContext>();
		}
		public Ddl_trigger_operationContext ddl_trigger_operation(int i) {
			return GetRuleContext<Ddl_trigger_operationContext>(i);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode AFTER() { return GetToken(TSqlParser.AFTER, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Dml_trigger_optionContext[] dml_trigger_option() {
			return GetRuleContexts<Dml_trigger_optionContext>();
		}
		public Dml_trigger_optionContext dml_trigger_option(int i) {
			return GetRuleContext<Dml_trigger_optionContext>(i);
		}
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public Create_or_alter_ddl_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_ddl_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_ddl_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_ddl_trigger(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_ddl_triggerContext create_or_alter_ddl_trigger() {
		Create_or_alter_ddl_triggerContext _localctx = new Create_or_alter_ddl_triggerContext(_ctx, State);
		EnterRule(_localctx, 520, RULE_create_or_alter_ddl_trigger);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6958;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,893,_ctx) ) {
			case 1:
				{
				{
				State = 6952; Match(CREATE);
				State = 6955;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,892,_ctx) ) {
				case 1:
					{
					State = 6953; Match(OR);
					State = 6954; Match(ALTER);
					}
					break;
				}
				}
				}
				break;

			case 2:
				{
				State = 6957; Match(ALTER);
				}
				break;
			}
			State = 6960; Match(TRIGGER);
			State = 6961; simple_name();
			State = 6962; Match(ON);
			State = 6966;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,894,_ctx) ) {
			case 1:
				{
				State = 6963; Match(ALL);
				State = 6964; Match(SERVER);
				}
				break;

			case 2:
				{
				State = 6965; Match(DATABASE);
				}
				break;
			}
			State = 6977;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,896,_ctx) ) {
			case 1:
				{
				State = 6968; Match(WITH);
				State = 6969; dml_trigger_option();
				State = 6974;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,895,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6970; Match(COMMA);
						State = 6971; dml_trigger_option();
						}
						} 
					}
					State = 6976;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,895,_ctx);
				}
				}
				break;
			}
			State = 6979;
			_la = _input.La(1);
			if ( !(_la==AFTER || _la==FOR) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 6980; ddl_trigger_operation();
			State = 6985;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,897,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6981; Match(COMMA);
					State = 6982; ddl_trigger_operation();
					}
					} 
				}
				State = 6987;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,897,_ctx);
			}
			State = 6988; Match(AS);
			State = 6990;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 6989; sql_clauses();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6992;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,898,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_trigger_operationContext : ParserRuleContext {
		public Simple_idContext simple_id() {
			return GetRuleContext<Simple_idContext>(0);
		}
		public Ddl_trigger_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_trigger_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDdl_trigger_operation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDdl_trigger_operation(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_trigger_operationContext ddl_trigger_operation() {
		Ddl_trigger_operationContext _localctx = new Ddl_trigger_operationContext(_ctx, State);
		EnterRule(_localctx, 522, RULE_ddl_trigger_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6994; simple_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_functionContext : ParserRuleContext {
		public Func_proc_name_schemaContext funcName;
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public Func_proc_name_schemaContext func_proc_name_schema() {
			return GetRuleContext<Func_proc_name_schemaContext>(0);
		}
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public Func_body_returns_selectContext func_body_returns_select() {
			return GetRuleContext<Func_body_returns_selectContext>(0);
		}
		public Func_body_returns_tableContext func_body_returns_table() {
			return GetRuleContext<Func_body_returns_tableContext>(0);
		}
		public Func_body_returns_scalarContext func_body_returns_scalar() {
			return GetRuleContext<Func_body_returns_scalarContext>(0);
		}
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public Procedure_paramContext[] procedure_param() {
			return GetRuleContexts<Procedure_paramContext>();
		}
		public Procedure_paramContext procedure_param(int i) {
			return GetRuleContext<Procedure_paramContext>(i);
		}
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public Create_or_alter_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_function(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_functionContext create_or_alter_function() {
		Create_or_alter_functionContext _localctx = new Create_or_alter_functionContext(_ctx, State);
		EnterRule(_localctx, 524, RULE_create_or_alter_function);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7002;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,900,_ctx) ) {
			case 1:
				{
				{
				State = 6996; Match(CREATE);
				State = 6999;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,899,_ctx) ) {
				case 1:
					{
					State = 6997; Match(OR);
					State = 6998; Match(ALTER);
					}
					break;
				}
				}
				}
				break;

			case 2:
				{
				State = 7001; Match(ALTER);
				}
				break;
			}
			State = 7004; Match(FUNCTION);
			State = 7005; _localctx.funcName = func_proc_name_schema();
			State = 7019;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,902,_ctx) ) {
			case 1:
				{
				{
				State = 7006; Match(LR_BRACKET);
				State = 7007; procedure_param();
				State = 7012;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,901,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7008; Match(COMMA);
						State = 7009; procedure_param();
						}
						} 
					}
					State = 7014;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,901,_ctx);
				}
				State = 7015; Match(RR_BRACKET);
				}
				}
				break;

			case 2:
				{
				State = 7017; Match(LR_BRACKET);
				State = 7018; Match(RR_BRACKET);
				}
				break;
			}
			State = 7024;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,903,_ctx) ) {
			case 1:
				{
				State = 7021; func_body_returns_select();
				}
				break;

			case 2:
				{
				State = 7022; func_body_returns_table();
				}
				break;

			case 3:
				{
				State = 7023; func_body_returns_scalar();
				}
				break;
			}
			State = 7027;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,904,_ctx) ) {
			case 1:
				{
				State = 7026; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_body_returns_selectContext : ParserRuleContext {
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public As_external_nameContext as_external_name() {
			return GetRuleContext<As_external_nameContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		public Select_statement_standaloneContext select_statement_standalone() {
			return GetRuleContext<Select_statement_standaloneContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Function_optionContext[] function_option() {
			return GetRuleContexts<Function_optionContext>();
		}
		public Function_optionContext function_option(int i) {
			return GetRuleContext<Function_optionContext>(i);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Func_body_returns_selectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_body_returns_select; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_body_returns_select(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_body_returns_select(this);
		}
	}

	[RuleVersion(0)]
	public Func_body_returns_selectContext func_body_returns_select() {
		Func_body_returns_selectContext _localctx = new Func_body_returns_selectContext(_ctx, State);
		EnterRule(_localctx, 526, RULE_func_body_returns_select);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7029; Match(RETURNS);
			State = 7030; Match(TABLE);
			State = 7040;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,906,_ctx) ) {
			case 1:
				{
				State = 7031; Match(WITH);
				State = 7032; function_option();
				State = 7037;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,905,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7033; Match(COMMA);
						State = 7034; function_option();
						}
						} 
					}
					State = 7039;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,905,_ctx);
				}
				}
				break;
			}
			State = 7043;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,907,_ctx) ) {
			case 1:
				{
				State = 7042; Match(AS);
				}
				break;
			}
			State = 7054;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,910,_ctx) ) {
			case 1:
				{
				State = 7045; as_external_name();
				}
				break;

			case 2:
				{
				State = 7046; Match(RETURN);
				State = 7048;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,908,_ctx) ) {
				case 1:
					{
					State = 7047; Match(LR_BRACKET);
					}
					break;
				}
				State = 7050; select_statement_standalone();
				State = 7052;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,909,_ctx) ) {
				case 1:
					{
					State = 7051; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_body_returns_tableContext : ParserRuleContext {
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public Table_type_definitionContext table_type_definition() {
			return GetRuleContext<Table_type_definitionContext>(0);
		}
		public As_external_nameContext as_external_name() {
			return GetRuleContext<As_external_nameContext>(0);
		}
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Function_optionContext[] function_option() {
			return GetRuleContexts<Function_optionContext>();
		}
		public Function_optionContext function_option(int i) {
			return GetRuleContext<Function_optionContext>(i);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public Func_body_returns_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_body_returns_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_body_returns_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_body_returns_table(this);
		}
	}

	[RuleVersion(0)]
	public Func_body_returns_tableContext func_body_returns_table() {
		Func_body_returns_tableContext _localctx = new Func_body_returns_tableContext(_ctx, State);
		EnterRule(_localctx, 528, RULE_func_body_returns_table);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7056; Match(RETURNS);
			State = 7058;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,911,_ctx) ) {
			case 1:
				{
				State = 7057; Match(LOCAL_ID);
				}
				break;
			}
			State = 7060; table_type_definition();
			State = 7070;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,913,_ctx) ) {
			case 1:
				{
				State = 7061; Match(WITH);
				State = 7062; function_option();
				State = 7067;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,912,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7063; Match(COMMA);
						State = 7064; function_option();
						}
						} 
					}
					State = 7069;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,912,_ctx);
				}
				}
				break;
			}
			State = 7073;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,914,_ctx) ) {
			case 1:
				{
				State = 7072; Match(AS);
				}
				break;
			}
			State = 7091;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,918,_ctx) ) {
			case 1:
				{
				State = 7075; as_external_name();
				}
				break;

			case 2:
				{
				State = 7076; Match(BEGIN);
				State = 7080;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,915,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7077; sql_clauses();
						}
						} 
					}
					State = 7082;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,915,_ctx);
				}
				State = 7083; Match(RETURN);
				State = 7085;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,916,_ctx) ) {
				case 1:
					{
					State = 7084; Match(SEMI);
					}
					break;
				}
				State = 7087; Match(END);
				State = 7089;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,917,_ctx) ) {
				case 1:
					{
					State = 7088; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_body_returns_scalarContext : ParserRuleContext {
		public ExpressionContext ret;
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public As_external_nameContext as_external_name() {
			return GetRuleContext<As_external_nameContext>(0);
		}
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Function_optionContext[] function_option() {
			return GetRuleContexts<Function_optionContext>();
		}
		public Function_optionContext function_option(int i) {
			return GetRuleContext<Function_optionContext>(i);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public Func_body_returns_scalarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_body_returns_scalar; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_body_returns_scalar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_body_returns_scalar(this);
		}
	}

	[RuleVersion(0)]
	public Func_body_returns_scalarContext func_body_returns_scalar() {
		Func_body_returns_scalarContext _localctx = new Func_body_returns_scalarContext(_ctx, State);
		EnterRule(_localctx, 530, RULE_func_body_returns_scalar);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7093; Match(RETURNS);
			State = 7094; data_type();
			State = 7104;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,920,_ctx) ) {
			case 1:
				{
				State = 7095; Match(WITH);
				State = 7096; function_option();
				State = 7101;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,919,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7097; Match(COMMA);
						State = 7098; function_option();
						}
						} 
					}
					State = 7103;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,919,_ctx);
				}
				}
				break;
			}
			State = 7107;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,921,_ctx) ) {
			case 1:
				{
				State = 7106; Match(AS);
				}
				break;
			}
			State = 7124;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,924,_ctx) ) {
			case 1:
				{
				State = 7109; as_external_name();
				}
				break;

			case 2:
				{
				State = 7110; Match(BEGIN);
				State = 7114;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,922,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7111; sql_clauses();
						}
						} 
					}
					State = 7116;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,922,_ctx);
				}
				State = 7117; Match(RETURN);
				State = 7118; _localctx.ret = expression(0);
				State = 7120;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,923,_ctx) ) {
				case 1:
					{
					State = 7119; Match(SEMI);
					}
					break;
				}
				State = 7122; Match(END);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_paramContext : ParserRuleContext {
		public Id_Context type_schema;
		public Default_valueContext default_val;
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode VARYING() { return GetToken(TSqlParser.VARYING, 0); }
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode OUT() { return GetToken(TSqlParser.OUT, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		public ITerminalNode READONLY() { return GetToken(TSqlParser.READONLY, 0); }
		public Default_valueContext default_value() {
			return GetRuleContext<Default_valueContext>(0);
		}
		public Procedure_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_param; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterProcedure_param(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitProcedure_param(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_paramContext procedure_param() {
		Procedure_paramContext _localctx = new Procedure_paramContext(_ctx, State);
		EnterRule(_localctx, 532, RULE_procedure_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7126; Match(LOCAL_ID);
			State = 7128;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,925,_ctx) ) {
			case 1:
				{
				State = 7127; Match(AS);
				}
				break;
			}
			State = 7133;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,926,_ctx) ) {
			case 1:
				{
				State = 7130; _localctx.type_schema = id_();
				State = 7131; Match(DOT);
				}
				break;
			}
			State = 7135; data_type();
			State = 7137;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,927,_ctx) ) {
			case 1:
				{
				State = 7136; Match(VARYING);
				}
				break;
			}
			State = 7142;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,928,_ctx) ) {
			case 1:
				{
				{
				State = 7139; Match(EQUAL);
				State = 7140; _localctx.default_val = default_value();
				}
				}
				break;

			case 2:
				{
				State = 7141; Match(NULL_);
				}
				break;
			}
			State = 7145;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,929,_ctx) ) {
			case 1:
				{
				State = 7144;
				_la = _input.La(1);
				if ( !(_la==OUT || _la==OUTPUT || _la==READONLY) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_optionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode RECOMPILE() { return GetToken(TSqlParser.RECOMPILE, 0); }
		public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public Procedure_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterProcedure_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitProcedure_option(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_optionContext procedure_option() {
		Procedure_optionContext _localctx = new Procedure_optionContext(_ctx, State);
		EnterRule(_localctx, 534, RULE_procedure_option);
		try {
			State = 7150;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,930,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7147; Match(ENCRYPTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7148; Match(RECOMPILE);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7149; execute_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_optionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode SCHEMABINDING() { return GetToken(TSqlParser.SCHEMABINDING, 0); }
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public ITerminalNode[] NULL_() { return GetTokens(TSqlParser.NULL_); }
		public ITerminalNode NULL_(int i) {
			return GetToken(TSqlParser.NULL_, i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode INPUT() { return GetToken(TSqlParser.INPUT, 0); }
		public ITerminalNode CALLED() { return GetToken(TSqlParser.CALLED, 0); }
		public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public Function_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunction_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunction_option(this);
		}
	}

	[RuleVersion(0)]
	public Function_optionContext function_option() {
		Function_optionContext _localctx = new Function_optionContext(_ctx, State);
		EnterRule(_localctx, 536, RULE_function_option);
		try {
			State = 7164;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,931,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7152; Match(ENCRYPTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7153; Match(SCHEMABINDING);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7154; Match(RETURNS);
				State = 7155; Match(NULL_);
				State = 7156; Match(ON);
				State = 7157; Match(NULL_);
				State = 7158; Match(INPUT);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7159; Match(CALLED);
				State = 7160; Match(ON);
				State = 7161; Match(NULL_);
				State = 7162; Match(INPUT);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7163; execute_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_withContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FULLSCAN() { return GetToken(TSqlParser.FULLSCAN, 0); }
		public ITerminalNode SAMPLE() { return GetToken(TSqlParser.SAMPLE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode STATS_STREAM() { return GetToken(TSqlParser.STATS_STREAM, 0); }
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public ITerminalNode ROWS() { return GetToken(TSqlParser.ROWS, 0); }
		public ITerminalNode NORECOMPUTE() { return GetToken(TSqlParser.NORECOMPUTE, 0); }
		public ITerminalNode INCREMENTAL() { return GetToken(TSqlParser.INCREMENTAL, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Partition_withContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_with; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPartition_with(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPartition_with(this);
		}
	}

	[RuleVersion(0)]
	public Partition_withContext partition_with() {
		Partition_withContext _localctx = new Partition_withContext(_ctx, State);
		EnterRule(_localctx, 538, RULE_partition_with);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7166; Match(WITH);
			State = 7172;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,932,_ctx) ) {
			case 1:
				{
				State = 7167; Match(FULLSCAN);
				}
				break;

			case 2:
				{
				State = 7168; Match(SAMPLE);
				State = 7169; Match(DECIMAL);
				State = 7170;
				_la = _input.La(1);
				if ( !(_la==PERCENT || _la==ROWS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 3:
				{
				State = 7171; Match(STATS_STREAM);
				}
				break;
			}
			State = 7176;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,933,_ctx) ) {
			case 1:
				{
				State = 7174; Match(COMMA);
				State = 7175; Match(NORECOMPUTE);
				}
				break;
			}
			State = 7182;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,934,_ctx) ) {
			case 1:
				{
				State = 7178; Match(COMMA);
				State = 7179; Match(INCREMENTAL);
				State = 7180; Match(EQUAL);
				State = 7181; on_off();
				}
				break;
			}
			State = 7185;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,935,_ctx) ) {
			case 1:
				{
				State = 7184; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_statisticsContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Partition_withContext partition_with() {
			return GetRuleContext<Partition_withContext>(0);
		}
		public Create_statisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_statistics; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_statistics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_statistics(this);
		}
	}

	[RuleVersion(0)]
	public Create_statisticsContext create_statistics() {
		Create_statisticsContext _localctx = new Create_statisticsContext(_ctx, State);
		EnterRule(_localctx, 540, RULE_create_statistics);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7187; Match(CREATE);
			State = 7188; Match(STATISTICS);
			State = 7189; id_();
			State = 7190; Match(ON);
			State = 7191; table_name();
			State = 7192; Match(LR_BRACKET);
			State = 7193; column_name_list();
			State = 7194; Match(RR_BRACKET);
			State = 7196;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,936,_ctx) ) {
			case 1:
				{
				State = 7195; partition_with();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_statisticsContext : ParserRuleContext {
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Partition_withContext partition_with() {
			return GetRuleContext<Partition_withContext>(0);
		}
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Update_statisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_statistics; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_statistics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_statistics(this);
		}
	}

	[RuleVersion(0)]
	public Update_statisticsContext update_statistics() {
		Update_statisticsContext _localctx = new Update_statisticsContext(_ctx, State);
		EnterRule(_localctx, 542, RULE_update_statistics);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7198; Match(UPDATE);
			State = 7200;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,937,_ctx) ) {
			case 1:
				{
				State = 7199;
				_la = _input.La(1);
				if ( !(_la==ALL || _la==INDEX) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 7202; Match(STATISTICS);
			State = 7203; full_table_name();
			State = 7205;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,938,_ctx) ) {
			case 1:
				{
				State = 7204; id_();
				}
				break;
			}
			State = 7208;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,939,_ctx) ) {
			case 1:
				{
				State = 7207; partition_with();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_tableContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return GetRuleContext<Column_def_table_constraintsContext>(0);
		}
		public Table_indicesContext[] table_indices() {
			return GetRuleContexts<Table_indicesContext>();
		}
		public Table_indicesContext table_indices(int i) {
			return GetRuleContext<Table_indicesContext>(i);
		}
		public ITerminalNode LOCK() { return GetToken(TSqlParser.LOCK, 0); }
		public Simple_idContext simple_id() {
			return GetRuleContext<Simple_idContext>(0);
		}
		public Table_optionsContext[] table_options() {
			return GetRuleContexts<Table_optionsContext>();
		}
		public Table_optionsContext table_options(int i) {
			return GetRuleContext<Table_optionsContext>(i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DEFAULT() { return GetTokens(TSqlParser.DEFAULT); }
		public ITerminalNode DEFAULT(int i) {
			return GetToken(TSqlParser.DEFAULT, i);
		}
		public ITerminalNode TEXTIMAGE_ON() { return GetToken(TSqlParser.TEXTIMAGE_ON, 0); }
		public Create_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_table(this);
		}
	}

	[RuleVersion(0)]
	public Create_tableContext create_table() {
		Create_tableContext _localctx = new Create_tableContext(_ctx, State);
		EnterRule(_localctx, 544, RULE_create_table);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7210; Match(CREATE);
			State = 7211; Match(TABLE);
			State = 7212; table_name();
			State = 7213; Match(LR_BRACKET);
			State = 7214; column_def_table_constraints();
			State = 7221;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,941,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7216;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,940,_ctx) ) {
					case 1:
						{
						State = 7215; Match(COMMA);
						}
						break;
					}
					State = 7218; table_indices();
					}
					} 
				}
				State = 7223;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,941,_ctx);
			}
			State = 7225;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,942,_ctx) ) {
			case 1:
				{
				State = 7224; Match(COMMA);
				}
				break;
			}
			State = 7227; Match(RR_BRACKET);
			State = 7230;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,943,_ctx) ) {
			case 1:
				{
				State = 7228; Match(LOCK);
				State = 7229; simple_id();
				}
				break;
			}
			State = 7235;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,944,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7232; table_options();
					}
					} 
				}
				State = 7237;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,944,_ctx);
			}
			State = 7241;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,945,_ctx) ) {
			case 1:
				{
				State = 7238; Match(ON);
				State = 7239; id_();
				}
				break;

			case 2:
				{
				State = 7240; Match(DEFAULT);
				}
				break;
			}
			State = 7246;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,946,_ctx) ) {
			case 1:
				{
				State = 7243; Match(TEXTIMAGE_ON);
				State = 7244; id_();
				}
				break;

			case 2:
				{
				State = 7245; Match(DEFAULT);
				}
				break;
			}
			State = 7249;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,947,_ctx) ) {
			case 1:
				{
				State = 7248; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_indicesContext : ParserRuleContext {
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		public ITerminalNode CLUSTERED() { return GetToken(TSqlParser.CLUSTERED, 0); }
		public ITerminalNode NONCLUSTERED() { return GetToken(TSqlParser.NONCLUSTERED, 0); }
		public Table_indicesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_indices; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_indices(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_indices(this);
		}
	}

	[RuleVersion(0)]
	public Table_indicesContext table_indices() {
		Table_indicesContext _localctx = new Table_indicesContext(_ctx, State);
		EnterRule(_localctx, 546, RULE_table_indices);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7251; Match(INDEX);
			State = 7252; id_();
			State = 7254;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,948,_ctx) ) {
			case 1:
				{
				State = 7253;
				_la = _input.La(1);
				if ( !(_la==CLUSTERED || _la==NONCLUSTERED || _la==UNIQUE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 7256; Match(LR_BRACKET);
			State = 7257; column_name_list_with_order();
			State = 7258; Match(RR_BRACKET);
			State = 7260;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,949,_ctx) ) {
			case 1:
				{
				State = 7259; index_options();
				}
				break;
			}
			State = 7264;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,950,_ctx) ) {
			case 1:
				{
				State = 7262; Match(ON);
				State = 7263; id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_optionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Index_optionContext[] index_option() {
			return GetRuleContexts<Index_optionContext>();
		}
		public Index_optionContext index_option(int i) {
			return GetRuleContext<Index_optionContext>(i);
		}
		public Table_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_options(this);
		}
	}

	[RuleVersion(0)]
	public Table_optionsContext table_options() {
		Table_optionsContext _localctx = new Table_optionsContext(_ctx, State);
		EnterRule(_localctx, 548, RULE_table_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7266; Match(WITH);
			State = 7286;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,953,_ctx) ) {
			case 1:
				{
				State = 7267; Match(LR_BRACKET);
				State = 7268; index_option();
				State = 7273;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,951,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7269; Match(COMMA);
						State = 7270; index_option();
						}
						} 
					}
					State = 7275;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,951,_ctx);
				}
				State = 7276; Match(RR_BRACKET);
				}
				break;

			case 2:
				{
				State = 7278; index_option();
				State = 7283;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,952,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7279; Match(COMMA);
						State = 7280; index_option();
						}
						} 
					}
					State = 7285;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,952,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_viewContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode VIEW() { return GetToken(TSqlParser.VIEW, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Select_statement_standaloneContext select_statement_standalone() {
			return GetRuleContext<Select_statement_standaloneContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode[] WITH() { return GetTokens(TSqlParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(TSqlParser.WITH, i);
		}
		public View_attributeContext[] view_attribute() {
			return GetRuleContexts<View_attributeContext>();
		}
		public View_attributeContext view_attribute(int i) {
			return GetRuleContext<View_attributeContext>(i);
		}
		public ITerminalNode CHECK() { return GetToken(TSqlParser.CHECK, 0); }
		public ITerminalNode OPTION() { return GetToken(TSqlParser.OPTION, 0); }
		public Create_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_view; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_view(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_view(this);
		}
	}

	[RuleVersion(0)]
	public Create_viewContext create_view() {
		Create_viewContext _localctx = new Create_viewContext(_ctx, State);
		EnterRule(_localctx, 550, RULE_create_view);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7288; Match(CREATE);
			State = 7289; Match(VIEW);
			State = 7290; simple_name();
			State = 7295;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,954,_ctx) ) {
			case 1:
				{
				State = 7291; Match(LR_BRACKET);
				State = 7292; column_name_list();
				State = 7293; Match(RR_BRACKET);
				}
				break;
			}
			State = 7306;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,956,_ctx) ) {
			case 1:
				{
				State = 7297; Match(WITH);
				State = 7298; view_attribute();
				State = 7303;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,955,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7299; Match(COMMA);
						State = 7300; view_attribute();
						}
						} 
					}
					State = 7305;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,955,_ctx);
				}
				}
				break;
			}
			State = 7308; Match(AS);
			State = 7309; select_statement_standalone();
			State = 7313;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,957,_ctx) ) {
			case 1:
				{
				State = 7310; Match(WITH);
				State = 7311; Match(CHECK);
				State = 7312; Match(OPTION);
				}
				break;
			}
			State = 7316;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,958,_ctx) ) {
			case 1:
				{
				State = 7315; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_attributeContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode SCHEMABINDING() { return GetToken(TSqlParser.SCHEMABINDING, 0); }
		public ITerminalNode VIEW_METADATA() { return GetToken(TSqlParser.VIEW_METADATA, 0); }
		public View_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterView_attribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitView_attribute(this);
		}
	}

	[RuleVersion(0)]
	public View_attributeContext view_attribute() {
		View_attributeContext _localctx = new View_attributeContext(_ctx, State);
		EnterRule(_localctx, 552, RULE_view_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7318;
			_la = _input.La(1);
			if ( !(_la==ENCRYPTION || _la==SCHEMABINDING || _la==VIEW_METADATA) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_tableContext : ParserRuleContext {
		public Id_Context constraint;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		public ITerminalNode[] ALTER() { return GetTokens(TSqlParser.ALTER); }
		public ITerminalNode ALTER(int i) {
			return GetToken(TSqlParser.ALTER, i);
		}
		public ITerminalNode[] TABLE() { return GetTokens(TSqlParser.TABLE); }
		public ITerminalNode TABLE(int i) {
			return GetToken(TSqlParser.TABLE, i);
		}
		public Table_nameContext[] table_name() {
			return GetRuleContexts<Table_nameContext>();
		}
		public Table_nameContext table_name(int i) {
			return GetRuleContext<Table_nameContext>(i);
		}
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode LOCK_ESCALATION() { return GetToken(TSqlParser.LOCK_ESCALATION, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return GetRuleContext<Column_def_table_constraintsContext>(0);
		}
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public Column_definitionContext column_definition() {
			return GetRuleContext<Column_definitionContext>(0);
		}
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(TSqlParser.CONSTRAINT, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		public Table_optionsContext table_options() {
			return GetRuleContext<Table_optionsContext>(0);
		}
		public ITerminalNode SWITCH() { return GetToken(TSqlParser.SWITCH, 0); }
		public Switch_partitionContext switch_partition() {
			return GetRuleContext<Switch_partitionContext>(0);
		}
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode[] CHECK() { return GetTokens(TSqlParser.CHECK); }
		public ITerminalNode CHECK(int i) {
			return GetToken(TSqlParser.CHECK, i);
		}
		public ITerminalNode NOCHECK() { return GetToken(TSqlParser.NOCHECK, 0); }
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode FOREIGN() { return GetToken(TSqlParser.FOREIGN, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Column_name_listContext[] column_name_list() {
			return GetRuleContexts<Column_name_listContext>();
		}
		public Column_name_listContext column_name_list(int i) {
			return GetRuleContext<Column_name_listContext>(i);
		}
		public On_deleteContext[] on_delete() {
			return GetRuleContexts<On_deleteContext>();
		}
		public On_deleteContext on_delete(int i) {
			return GetRuleContext<On_deleteContext>(i);
		}
		public On_updateContext[] on_update() {
			return GetRuleContexts<On_updateContext>();
		}
		public On_updateContext on_update(int i) {
			return GetRuleContext<On_updateContext>(i);
		}
		public ITerminalNode[] NOT() { return GetTokens(TSqlParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(TSqlParser.NOT, i);
		}
		public ITerminalNode[] FOR() { return GetTokens(TSqlParser.FOR); }
		public ITerminalNode FOR(int i) {
			return GetToken(TSqlParser.FOR, i);
		}
		public ITerminalNode[] REPLICATION() { return GetTokens(TSqlParser.REPLICATION); }
		public ITerminalNode REPLICATION(int i) {
			return GetToken(TSqlParser.REPLICATION, i);
		}
		public Alter_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_table(this);
		}
	}

	[RuleVersion(0)]
	public Alter_tableContext alter_table() {
		Alter_tableContext _localctx = new Alter_tableContext(_ctx, State);
		EnterRule(_localctx, 554, RULE_alter_table);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7320; Match(ALTER);
			State = 7321; Match(TABLE);
			State = 7322; table_name();
			State = 7396;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,966,_ctx) ) {
			case 1:
				{
				State = 7323; Match(SET);
				State = 7324; Match(LR_BRACKET);
				State = 7325; Match(LOCK_ESCALATION);
				State = 7326; Match(EQUAL);
				State = 7327;
				_la = _input.La(1);
				if ( !(_la==AUTO || _la==DISABLE || _la==TABLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 7328; Match(RR_BRACKET);
				}
				break;

			case 2:
				{
				State = 7329; Match(ADD);
				State = 7330; column_def_table_constraints();
				}
				break;

			case 3:
				{
				State = 7331; Match(ALTER);
				State = 7332; Match(COLUMN);
				State = 7333; column_definition();
				}
				break;

			case 4:
				{
				State = 7334; Match(DROP);
				State = 7335; Match(COLUMN);
				State = 7336; id_();
				State = 7341;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,959,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7337; Match(COMMA);
						State = 7338; id_();
						}
						} 
					}
					State = 7343;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,959,_ctx);
				}
				}
				break;

			case 5:
				{
				State = 7344; Match(DROP);
				State = 7345; Match(CONSTRAINT);
				State = 7346; _localctx.constraint = id_();
				}
				break;

			case 6:
				{
				State = 7347; Match(WITH);
				State = 7348;
				_la = _input.La(1);
				if ( !(_la==CHECK || _la==NOCHECK) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 7349; Match(ADD);
				State = 7352;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,960,_ctx) ) {
				case 1:
					{
					State = 7350; Match(CONSTRAINT);
					State = 7351; _localctx.constraint = id_();
					}
					break;
				}
				State = 7382;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,964,_ctx) ) {
				case 1:
					{
					State = 7354; Match(FOREIGN);
					State = 7355; Match(KEY);
					State = 7356; Match(LR_BRACKET);
					State = 7357; _localctx.fk = column_name_list();
					State = 7358; Match(RR_BRACKET);
					State = 7359; Match(REFERENCES);
					State = 7360; table_name();
					State = 7365;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,961,_ctx) ) {
					case 1:
						{
						State = 7361; Match(LR_BRACKET);
						State = 7362; _localctx.pk = column_name_list();
						State = 7363; Match(RR_BRACKET);
						}
						break;
					}
					State = 7374;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,963,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 7372;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,962,_ctx) ) {
							case 1:
								{
								State = 7367; on_delete();
								}
								break;

							case 2:
								{
								State = 7368; on_update();
								}
								break;

							case 3:
								{
								State = 7369; Match(NOT);
								State = 7370; Match(FOR);
								State = 7371; Match(REPLICATION);
								}
								break;
							}
							} 
						}
						State = 7376;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,963,_ctx);
					}
					}
					break;

				case 2:
					{
					State = 7377; Match(CHECK);
					State = 7378; Match(LR_BRACKET);
					State = 7379; search_condition(0);
					State = 7380; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;

			case 7:
				{
				State = 7384;
				_la = _input.La(1);
				if ( !(_la==CHECK || _la==NOCHECK) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 7385; Match(CONSTRAINT);
				State = 7386; _localctx.constraint = id_();
				}
				break;

			case 8:
				{
				State = 7387;
				_la = _input.La(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 7388; Match(TRIGGER);
				State = 7390;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,965,_ctx) ) {
				case 1:
					{
					State = 7389; id_();
					}
					break;
				}
				}
				break;

			case 9:
				{
				State = 7392; Match(REBUILD);
				State = 7393; table_options();
				}
				break;

			case 10:
				{
				State = 7394; Match(SWITCH);
				State = 7395; switch_partition();
				}
				break;
			}
			State = 7399;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,967,_ctx) ) {
			case 1:
				{
				State = 7398; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_partitionContext : ParserRuleContext {
		public ExpressionContext source_partition_number_expression;
		public Table_nameContext target_table;
		public ExpressionContext target_partition_number_expression;
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode[] PARTITION() { return GetTokens(TSqlParser.PARTITION); }
		public ITerminalNode PARTITION(int i) {
			return GetToken(TSqlParser.PARTITION, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Low_priority_lock_waitContext low_priority_lock_wait() {
			return GetRuleContext<Low_priority_lock_waitContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Switch_partitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_partition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSwitch_partition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSwitch_partition(this);
		}
	}

	[RuleVersion(0)]
	public Switch_partitionContext switch_partition() {
		Switch_partitionContext _localctx = new Switch_partitionContext(_ctx, State);
		EnterRule(_localctx, 556, RULE_switch_partition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7405;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,969,_ctx) ) {
			case 1:
				{
				State = 7402;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,968,_ctx) ) {
				case 1:
					{
					State = 7401; Match(PARTITION);
					}
					break;
				}
				State = 7404; _localctx.source_partition_number_expression = expression(0);
				}
				break;
			}
			State = 7407; Match(TO);
			State = 7408; _localctx.target_table = table_name();
			State = 7411;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,970,_ctx) ) {
			case 1:
				{
				State = 7409; Match(PARTITION);
				State = 7410; _localctx.target_partition_number_expression = expression(0);
				}
				break;
			}
			State = 7415;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,971,_ctx) ) {
			case 1:
				{
				State = 7413; Match(WITH);
				State = 7414; low_priority_lock_wait();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Low_priority_lock_waitContext : ParserRuleContext {
		public TimeContext max_duration;
		public IToken abort_after_wait;
		public ITerminalNode WAIT_AT_LOW_PRIORITY() { return GetToken(TSqlParser.WAIT_AT_LOW_PRIORITY, 0); }
		public ITerminalNode MAX_DURATION() { return GetToken(TSqlParser.MAX_DURATION, 0); }
		public ITerminalNode ABORT_AFTER_WAIT() { return GetToken(TSqlParser.ABORT_AFTER_WAIT, 0); }
		public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode SELF() { return GetToken(TSqlParser.SELF, 0); }
		public ITerminalNode BLOCKERS() { return GetToken(TSqlParser.BLOCKERS, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public Low_priority_lock_waitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_low_priority_lock_wait; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLow_priority_lock_wait(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLow_priority_lock_wait(this);
		}
	}

	[RuleVersion(0)]
	public Low_priority_lock_waitContext low_priority_lock_wait() {
		Low_priority_lock_waitContext _localctx = new Low_priority_lock_waitContext(_ctx, State);
		EnterRule(_localctx, 558, RULE_low_priority_lock_wait);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7417; Match(WAIT_AT_LOW_PRIORITY);
			State = 7418; Match(LR_BRACKET);
			State = 7419; Match(MAX_DURATION);
			State = 7420; Match(EQUAL);
			State = 7421; _localctx.max_duration = time();
			State = 7423;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,972,_ctx) ) {
			case 1:
				{
				State = 7422; Match(MINUTES);
				}
				break;
			}
			State = 7425; Match(COMMA);
			State = 7426; Match(ABORT_AFTER_WAIT);
			State = 7427; Match(EQUAL);
			State = 7428;
			_localctx.abort_after_wait = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==BLOCKERS || _la==NONE || _la==SELF) ) {
				_localctx.abort_after_wait = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 7429; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_databaseContext : ParserRuleContext {
		public Id_Context database;
		public Id_Context new_name;
		public Id_Context collation;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode CURRENT() { return GetToken(TSqlParser.CURRENT, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public Database_optionspecContext database_optionspec() {
			return GetRuleContext<Database_optionspecContext>(0);
		}
		public Add_or_modify_filesContext add_or_modify_files() {
			return GetRuleContext<Add_or_modify_filesContext>(0);
		}
		public Add_or_modify_filegroupsContext add_or_modify_filegroups() {
			return GetRuleContext<Add_or_modify_filegroupsContext>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public TerminationContext termination() {
			return GetRuleContext<TerminationContext>(0);
		}
		public Alter_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_database(this);
		}
	}

	[RuleVersion(0)]
	public Alter_databaseContext alter_database() {
		Alter_databaseContext _localctx = new Alter_databaseContext(_ctx, State);
		EnterRule(_localctx, 560, RULE_alter_database);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7431; Match(ALTER);
			State = 7432; Match(DATABASE);
			State = 7435;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,973,_ctx) ) {
			case 1:
				{
				State = 7433; _localctx.database = id_();
				}
				break;

			case 2:
				{
				State = 7434; Match(CURRENT);
				}
				break;
			}
			State = 7451;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,975,_ctx) ) {
			case 1:
				{
				State = 7437; Match(MODIFY);
				State = 7438; Match(NAME);
				State = 7439; Match(EQUAL);
				State = 7440; _localctx.new_name = id_();
				}
				break;

			case 2:
				{
				State = 7441; Match(COLLATE);
				State = 7442; _localctx.collation = id_();
				}
				break;

			case 3:
				{
				State = 7443; Match(SET);
				State = 7444; database_optionspec();
				State = 7447;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,974,_ctx) ) {
				case 1:
					{
					State = 7445; Match(WITH);
					State = 7446; termination();
					}
					break;
				}
				}
				break;

			case 4:
				{
				State = 7449; add_or_modify_files();
				}
				break;

			case 5:
				{
				State = 7450; add_or_modify_filegroups();
				}
				break;
			}
			State = 7454;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,976,_ctx) ) {
			case 1:
				{
				State = 7453; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_or_modify_filesContext : ParserRuleContext {
		public Id_Context filegroup_name;
		public Id_Context logical_file_name;
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public FilespecContext[] filespec() {
			return GetRuleContexts<FilespecContext>();
		}
		public FilespecContext filespec(int i) {
			return GetRuleContext<FilespecContext>(i);
		}
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public Add_or_modify_filesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_or_modify_files; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAdd_or_modify_files(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAdd_or_modify_files(this);
		}
	}

	[RuleVersion(0)]
	public Add_or_modify_filesContext add_or_modify_files() {
		Add_or_modify_filesContext _localctx = new Add_or_modify_filesContext(_ctx, State);
		EnterRule(_localctx, 562, RULE_add_or_modify_files);
		try {
			int _alt;
			State = 7488;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,980,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7456; Match(ADD);
				State = 7457; Match(FILE);
				State = 7458; filespec();
				State = 7463;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,977,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7459; Match(COMMA);
						State = 7460; filespec();
						}
						} 
					}
					State = 7465;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,977,_ctx);
				}
				State = 7469;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,978,_ctx) ) {
				case 1:
					{
					State = 7466; Match(TO);
					State = 7467; Match(FILEGROUP);
					State = 7468; _localctx.filegroup_name = id_();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7471; Match(ADD);
				State = 7472; Match(LOG);
				State = 7473; Match(FILE);
				State = 7474; filespec();
				State = 7479;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,979,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7475; Match(COMMA);
						State = 7476; filespec();
						}
						} 
					}
					State = 7481;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,979,_ctx);
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7482; Match(REMOVE);
				State = 7483; Match(FILE);
				State = 7484; _localctx.logical_file_name = id_();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7485; Match(MODIFY);
				State = 7486; Match(FILE);
				State = 7487; filespec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilespecContext : ParserRuleContext {
		public Id_or_stringContext name;
		public Id_or_stringContext new_name;
		public IToken file_name;
		public File_sizeContext size;
		public File_sizeContext max_size;
		public File_sizeContext growth_increment;
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public Id_or_stringContext[] id_or_string() {
			return GetRuleContexts<Id_or_stringContext>();
		}
		public Id_or_stringContext id_or_string(int i) {
			return GetRuleContext<Id_or_stringContext>(i);
		}
		public ITerminalNode NEWNAME() { return GetToken(TSqlParser.NEWNAME, 0); }
		public ITerminalNode FILENAME() { return GetToken(TSqlParser.FILENAME, 0); }
		public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		public ITerminalNode MAXSIZE() { return GetToken(TSqlParser.MAXSIZE, 0); }
		public ITerminalNode UNLIMITED() { return GetToken(TSqlParser.UNLIMITED, 0); }
		public ITerminalNode FILEGROWTH() { return GetToken(TSqlParser.FILEGROWTH, 0); }
		public ITerminalNode OFFLINE() { return GetToken(TSqlParser.OFFLINE, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public File_sizeContext[] file_size() {
			return GetRuleContexts<File_sizeContext>();
		}
		public File_sizeContext file_size(int i) {
			return GetRuleContext<File_sizeContext>(i);
		}
		public FilespecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filespec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFilespec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFilespec(this);
		}
	}

	[RuleVersion(0)]
	public FilespecContext filespec() {
		FilespecContext _localctx = new FilespecContext(_ctx, State);
		EnterRule(_localctx, 564, RULE_filespec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7490; Match(LR_BRACKET);
			State = 7491; Match(NAME);
			State = 7492; Match(EQUAL);
			State = 7493; _localctx.name = id_or_string();
			State = 7498;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,981,_ctx) ) {
			case 1:
				{
				State = 7494; Match(COMMA);
				State = 7495; Match(NEWNAME);
				State = 7496; Match(EQUAL);
				State = 7497; _localctx.new_name = id_or_string();
				}
				break;
			}
			State = 7504;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,982,_ctx) ) {
			case 1:
				{
				State = 7500; Match(COMMA);
				State = 7501; Match(FILENAME);
				State = 7502; Match(EQUAL);
				State = 7503; _localctx.file_name = Match(STRING);
				}
				break;
			}
			State = 7510;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,983,_ctx) ) {
			case 1:
				{
				State = 7506; Match(COMMA);
				State = 7507; Match(SIZE);
				State = 7508; Match(EQUAL);
				State = 7509; _localctx.size = file_size();
				}
				break;
			}
			State = 7517;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,984,_ctx) ) {
			case 1:
				{
				State = 7512; Match(COMMA);
				State = 7513; Match(MAXSIZE);
				State = 7514; Match(EQUAL);
				{
				State = 7515; _localctx.max_size = file_size();
				}
				}
				break;

			case 2:
				{
				State = 7516; Match(UNLIMITED);
				}
				break;
			}
			State = 7523;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,985,_ctx) ) {
			case 1:
				{
				State = 7519; Match(COMMA);
				State = 7520; Match(FILEGROWTH);
				State = 7521; Match(EQUAL);
				State = 7522; _localctx.growth_increment = file_size();
				}
				break;
			}
			State = 7527;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,986,_ctx) ) {
			case 1:
				{
				State = 7525; Match(COMMA);
				State = 7526; Match(OFFLINE);
				}
				break;
			}
			State = 7529; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_or_modify_filegroupsContext : ParserRuleContext {
		public Id_Context filegroup_name;
		public Id_Context filegrou_name;
		public Id_Context new_filegroup_name;
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode CONTAINS() { return GetToken(TSqlParser.CONTAINS, 0); }
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public ITerminalNode MEMORY_OPTIMIZED_DATA() { return GetToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public Filegroup_updatability_optionContext filegroup_updatability_option() {
			return GetRuleContext<Filegroup_updatability_optionContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode AUTOGROW_SINGLE_FILE() { return GetToken(TSqlParser.AUTOGROW_SINGLE_FILE, 0); }
		public ITerminalNode AUTOGROW_ALL_FILES() { return GetToken(TSqlParser.AUTOGROW_ALL_FILES, 0); }
		public Add_or_modify_filegroupsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_or_modify_filegroups; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAdd_or_modify_filegroups(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAdd_or_modify_filegroups(this);
		}
	}

	[RuleVersion(0)]
	public Add_or_modify_filegroupsContext add_or_modify_filegroups() {
		Add_or_modify_filegroupsContext _localctx = new Add_or_modify_filegroupsContext(_ctx, State);
		EnterRule(_localctx, 566, RULE_add_or_modify_filegroups);
		try {
			State = 7555;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,989,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7531; Match(ADD);
				State = 7532; Match(FILEGROUP);
				State = 7533; _localctx.filegroup_name = id_();
				State = 7538;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,987,_ctx) ) {
				case 1:
					{
					State = 7534; Match(CONTAINS);
					State = 7535; Match(FILESTREAM);
					}
					break;

				case 2:
					{
					State = 7536; Match(CONTAINS);
					State = 7537; Match(MEMORY_OPTIMIZED_DATA);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7540; Match(REMOVE);
				State = 7541; Match(FILEGROUP);
				State = 7542; _localctx.filegrou_name = id_();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7543; Match(MODIFY);
				State = 7544; Match(FILEGROUP);
				State = 7545; _localctx.filegrou_name = id_();
				State = 7553;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,988,_ctx) ) {
				case 1:
					{
					State = 7546; filegroup_updatability_option();
					}
					break;

				case 2:
					{
					State = 7547; Match(DEFAULT);
					}
					break;

				case 3:
					{
					State = 7548; Match(NAME);
					State = 7549; Match(EQUAL);
					State = 7550; _localctx.new_filegroup_name = id_();
					}
					break;

				case 4:
					{
					State = 7551; Match(AUTOGROW_SINGLE_FILE);
					}
					break;

				case 5:
					{
					State = 7552; Match(AUTOGROW_ALL_FILES);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Filegroup_updatability_optionContext : ParserRuleContext {
		public ITerminalNode READONLY() { return GetToken(TSqlParser.READONLY, 0); }
		public ITerminalNode READWRITE() { return GetToken(TSqlParser.READWRITE, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(TSqlParser.READ_WRITE, 0); }
		public Filegroup_updatability_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filegroup_updatability_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFilegroup_updatability_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFilegroup_updatability_option(this);
		}
	}

	[RuleVersion(0)]
	public Filegroup_updatability_optionContext filegroup_updatability_option() {
		Filegroup_updatability_optionContext _localctx = new Filegroup_updatability_optionContext(_ctx, State);
		EnterRule(_localctx, 568, RULE_filegroup_updatability_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7557;
			_la = _input.La(1);
			if ( !(((((_la - 761)) & ~0x3f) == 0 && ((1L << (_la - 761)) & ((1L << (READONLY - 761)) | (1L << (READWRITE - 761)) | (1L << (READ_ONLY - 761)) | (1L << (READ_WRITE - 761)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_optionspecContext : ParserRuleContext {
		public Auto_optionContext auto_option() {
			return GetRuleContext<Auto_optionContext>(0);
		}
		public Change_tracking_optionContext change_tracking_option() {
			return GetRuleContext<Change_tracking_optionContext>(0);
		}
		public Containment_optionContext containment_option() {
			return GetRuleContext<Containment_optionContext>(0);
		}
		public Cursor_optionContext cursor_option() {
			return GetRuleContext<Cursor_optionContext>(0);
		}
		public Database_mirroring_optionContext database_mirroring_option() {
			return GetRuleContext<Database_mirroring_optionContext>(0);
		}
		public Date_correlation_optimization_optionContext date_correlation_optimization_option() {
			return GetRuleContext<Date_correlation_optimization_optionContext>(0);
		}
		public Db_encryption_optionContext db_encryption_option() {
			return GetRuleContext<Db_encryption_optionContext>(0);
		}
		public Db_state_optionContext db_state_option() {
			return GetRuleContext<Db_state_optionContext>(0);
		}
		public Db_update_optionContext db_update_option() {
			return GetRuleContext<Db_update_optionContext>(0);
		}
		public Db_user_access_optionContext db_user_access_option() {
			return GetRuleContext<Db_user_access_optionContext>(0);
		}
		public Delayed_durability_optionContext delayed_durability_option() {
			return GetRuleContext<Delayed_durability_optionContext>(0);
		}
		public External_access_optionContext external_access_option() {
			return GetRuleContext<External_access_optionContext>(0);
		}
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public Database_filestream_optionContext database_filestream_option() {
			return GetRuleContext<Database_filestream_optionContext>(0);
		}
		public Hadr_optionsContext hadr_options() {
			return GetRuleContext<Hadr_optionsContext>(0);
		}
		public Mixed_page_allocation_optionContext mixed_page_allocation_option() {
			return GetRuleContext<Mixed_page_allocation_optionContext>(0);
		}
		public Parameterization_optionContext parameterization_option() {
			return GetRuleContext<Parameterization_optionContext>(0);
		}
		public Query_store_optionsContext query_store_options() {
			return GetRuleContext<Query_store_optionsContext>(0);
		}
		public Recovery_optionContext recovery_option() {
			return GetRuleContext<Recovery_optionContext>(0);
		}
		public Service_broker_optionContext service_broker_option() {
			return GetRuleContext<Service_broker_optionContext>(0);
		}
		public Snapshot_optionContext snapshot_option() {
			return GetRuleContext<Snapshot_optionContext>(0);
		}
		public Sql_optionContext sql_option() {
			return GetRuleContext<Sql_optionContext>(0);
		}
		public Target_recovery_time_optionContext target_recovery_time_option() {
			return GetRuleContext<Target_recovery_time_optionContext>(0);
		}
		public TerminationContext termination() {
			return GetRuleContext<TerminationContext>(0);
		}
		public Database_optionspecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_optionspec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDatabase_optionspec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDatabase_optionspec(this);
		}
	}

	[RuleVersion(0)]
	public Database_optionspecContext database_optionspec() {
		Database_optionspecContext _localctx = new Database_optionspecContext(_ctx, State);
		EnterRule(_localctx, 570, RULE_database_optionspec);
		try {
			State = 7583;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,990,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7559; auto_option();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7560; change_tracking_option();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7561; containment_option();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7562; cursor_option();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7563; database_mirroring_option();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7564; date_correlation_optimization_option();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7565; db_encryption_option();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7566; db_state_option();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7567; db_update_option();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7568; db_user_access_option();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 7569; delayed_durability_option();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 7570; external_access_option();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 7571; Match(FILESTREAM);
				State = 7572; database_filestream_option();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 7573; hadr_options();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 7574; mixed_page_allocation_option();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 7575; parameterization_option();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 7576; query_store_options();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 7577; recovery_option();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 7578; service_broker_option();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 7579; snapshot_option();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 7580; sql_option();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 7581; target_recovery_time_option();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 7582; termination();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_store_optionsContext : ParserRuleContext {
		public ITerminalNode QUERY_STORE() { return GetToken(TSqlParser.QUERY_STORE, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Query_store_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_store_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_store_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_store_options(this);
		}
	}

	[RuleVersion(0)]
	public Query_store_optionsContext query_store_options() {
		Query_store_optionsContext _localctx = new Query_store_optionsContext(_ctx, State);
		EnterRule(_localctx, 572, RULE_query_store_options);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7585; Match(QUERY_STORE);
			State = 7586; Match(EQUAL);
			State = 7587; on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Auto_optionContext : ParserRuleContext {
		public ITerminalNode AUTO_CLOSE() { return GetToken(TSqlParser.AUTO_CLOSE, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode AUTO_CREATE_STATISTICS() { return GetToken(TSqlParser.AUTO_CREATE_STATISTICS, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode INCREMENTAL() { return GetToken(TSqlParser.INCREMENTAL, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode AUTO_SHRINK() { return GetToken(TSqlParser.AUTO_SHRINK, 0); }
		public ITerminalNode AUTO_UPDATE_STATISTICS() { return GetToken(TSqlParser.AUTO_UPDATE_STATISTICS, 0); }
		public ITerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return GetToken(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public Auto_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_auto_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAuto_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAuto_option(this);
		}
	}

	[RuleVersion(0)]
	public Auto_optionContext auto_option() {
		Auto_optionContext _localctx = new Auto_optionContext(_ctx, State);
		EnterRule(_localctx, 574, RULE_auto_option);
		int _la;
		try {
			State = 7606;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,992,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7589; Match(AUTO_CLOSE);
				State = 7590; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7591; Match(AUTO_CREATE_STATISTICS);
				State = 7592; Match(OFF);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7593; Match(ON);
				State = 7598;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,991,_ctx) ) {
				case 1:
					{
					State = 7594; Match(INCREMENTAL);
					State = 7595; Match(EQUAL);
					State = 7596; Match(ON);
					}
					break;

				case 2:
					{
					State = 7597; Match(OFF);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7600; Match(AUTO_SHRINK);
				State = 7601; on_off();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7602; Match(AUTO_UPDATE_STATISTICS);
				State = 7603; on_off();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7604; Match(AUTO_UPDATE_STATISTICS_ASYNC);
				State = 7605;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_tracking_optionContext : ParserRuleContext {
		public ITerminalNode CHANGE_TRACKING() { return GetToken(TSqlParser.CHANGE_TRACKING, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Change_tracking_option_listContext[] change_tracking_option_list() {
			return GetRuleContexts<Change_tracking_option_listContext>();
		}
		public Change_tracking_option_listContext change_tracking_option_list(int i) {
			return GetRuleContext<Change_tracking_option_listContext>(i);
		}
		public Change_tracking_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_tracking_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_tracking_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_tracking_option(this);
		}
	}

	[RuleVersion(0)]
	public Change_tracking_optionContext change_tracking_option() {
		Change_tracking_optionContext _localctx = new Change_tracking_optionContext(_ctx, State);
		EnterRule(_localctx, 576, RULE_change_tracking_option);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7608; Match(CHANGE_TRACKING);
			State = 7609; Match(EQUAL);
			State = 7625;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,995,_ctx) ) {
			case 1:
				{
				State = 7610; Match(OFF);
				}
				break;

			case 2:
				{
				State = 7611; Match(ON);
				State = 7622;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,994,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7612; change_tracking_option_list();
						State = 7617;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,993,_ctx);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
							if ( _alt==1 ) {
								{
								{
								State = 7613; Match(COMMA);
								State = 7614; change_tracking_option_list();
								}
								} 
							}
							State = 7619;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,993,_ctx);
						}
						}
						} 
					}
					State = 7624;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,994,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_tracking_option_listContext : ParserRuleContext {
		public ITerminalNode AUTO_CLEANUP() { return GetToken(TSqlParser.AUTO_CLEANUP, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode CHANGE_RETENTION() { return GetToken(TSqlParser.CHANGE_RETENTION, 0); }
		public ITerminalNode DAYS() { return GetToken(TSqlParser.DAYS, 0); }
		public ITerminalNode HOURS() { return GetToken(TSqlParser.HOURS, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public Change_tracking_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_tracking_option_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_tracking_option_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_tracking_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Change_tracking_option_listContext change_tracking_option_list() {
		Change_tracking_option_listContext _localctx = new Change_tracking_option_listContext(_ctx, State);
		EnterRule(_localctx, 578, RULE_change_tracking_option_list);
		int _la;
		try {
			State = 7633;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,996,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7627; Match(AUTO_CLEANUP);
				State = 7628; Match(EQUAL);
				State = 7629; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7630; Match(CHANGE_RETENTION);
				State = 7631; Match(EQUAL);
				State = 7632;
				_la = _input.La(1);
				if ( !(_la==DAYS || _la==HOURS || _la==MINUTES) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Containment_optionContext : ParserRuleContext {
		public ITerminalNode CONTAINMENT() { return GetToken(TSqlParser.CONTAINMENT, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode PARTIAL() { return GetToken(TSqlParser.PARTIAL, 0); }
		public Containment_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_containment_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterContainment_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitContainment_option(this);
		}
	}

	[RuleVersion(0)]
	public Containment_optionContext containment_option() {
		Containment_optionContext _localctx = new Containment_optionContext(_ctx, State);
		EnterRule(_localctx, 580, RULE_containment_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7635; Match(CONTAINMENT);
			State = 7636; Match(EQUAL);
			State = 7637;
			_la = _input.La(1);
			if ( !(_la==NONE || _la==PARTIAL) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_optionContext : ParserRuleContext {
		public ITerminalNode CURSOR_CLOSE_ON_COMMIT() { return GetToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode CURSOR_DEFAULT() { return GetToken(TSqlParser.CURSOR_DEFAULT, 0); }
		public ITerminalNode LOCAL() { return GetToken(TSqlParser.LOCAL, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public Cursor_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCursor_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCursor_option(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_optionContext cursor_option() {
		Cursor_optionContext _localctx = new Cursor_optionContext(_ctx, State);
		EnterRule(_localctx, 582, RULE_cursor_option);
		int _la;
		try {
			State = 7643;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,997,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7639; Match(CURSOR_CLOSE_ON_COMMIT);
				State = 7640; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7641; Match(CURSOR_DEFAULT);
				State = 7642;
				_la = _input.La(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_endpointContext : ParserRuleContext {
		public Id_Context endpointname;
		public Id_Context login;
		public IToken state;
		public IToken port;
		public Id_Context cert_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode TCP() { return GetToken(TSqlParser.TCP, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode LISTENER_PORT() { return GetToken(TSqlParser.LISTENER_PORT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode TSQL() { return GetToken(TSqlParser.TSQL, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode SERVICE_BROKER() { return GetToken(TSqlParser.SERVICE_BROKER, 0); }
		public ITerminalNode AUTHENTICATION() { return GetToken(TSqlParser.AUTHENTICATION, 0); }
		public ITerminalNode DATABASE_MIRRORING() { return GetToken(TSqlParser.DATABASE_MIRRORING, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode LISTENER_IP() { return GetToken(TSqlParser.LISTENER_IP, 0); }
		public ITerminalNode WITNESS() { return GetToken(TSqlParser.WITNESS, 0); }
		public ITerminalNode PARTNER() { return GetToken(TSqlParser.PARTNER, 0); }
		public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		public ITerminalNode IPV4_ADDR() { return GetToken(TSqlParser.IPV4_ADDR, 0); }
		public ITerminalNode IPV6_ADDR() { return GetToken(TSqlParser.IPV6_ADDR, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode MESSAGE_FORWARDING() { return GetToken(TSqlParser.MESSAGE_FORWARDING, 0); }
		public ITerminalNode MESSAGE_FORWARD_SIZE() { return GetToken(TSqlParser.MESSAGE_FORWARD_SIZE, 0); }
		public ITerminalNode STARTED() { return GetToken(TSqlParser.STARTED, 0); }
		public ITerminalNode STOPPED() { return GetToken(TSqlParser.STOPPED, 0); }
		public ITerminalNode[] DISABLED() { return GetTokens(TSqlParser.DISABLED); }
		public ITerminalNode DISABLED(int i) {
			return GetToken(TSqlParser.DISABLED, i);
		}
		public ITerminalNode SUPPORTED() { return GetToken(TSqlParser.SUPPORTED, 0); }
		public ITerminalNode REQUIRED() { return GetToken(TSqlParser.REQUIRED, 0); }
		public ITerminalNode ENABLED() { return GetToken(TSqlParser.ENABLED, 0); }
		public ITerminalNode NTLM() { return GetToken(TSqlParser.NTLM, 0); }
		public ITerminalNode KERBEROS() { return GetToken(TSqlParser.KERBEROS, 0); }
		public ITerminalNode NEGOTIATE() { return GetToken(TSqlParser.NEGOTIATE, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode AES() { return GetToken(TSqlParser.AES, 0); }
		public ITerminalNode RC4() { return GetToken(TSqlParser.RC4, 0); }
		public Alter_endpointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_endpoint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_endpoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_endpoint(this);
		}
	}

	[RuleVersion(0)]
	public Alter_endpointContext alter_endpoint() {
		Alter_endpointContext _localctx = new Alter_endpointContext(_ctx, State);
		EnterRule(_localctx, 584, RULE_alter_endpoint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7645; Match(ALTER);
			State = 7646; Match(ENDPOINT);
			State = 7647; _localctx.endpointname = id_();
			State = 7650;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,998,_ctx) ) {
			case 1:
				{
				State = 7648; Match(AUTHORIZATION);
				State = 7649; _localctx.login = id_();
				}
				break;
			}
			State = 7659;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1000,_ctx) ) {
			case 1:
				{
				State = 7652; Match(STATE);
				State = 7653; Match(EQUAL);
				State = 7657;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,999,_ctx) ) {
				case 1:
					{
					State = 7654; _localctx.state = Match(STARTED);
					}
					break;

				case 2:
					{
					State = 7655; _localctx.state = Match(STOPPED);
					}
					break;

				case 3:
					{
					State = 7656; _localctx.state = Match(DISABLED);
					}
					break;
				}
				}
				break;
			}
			State = 7661; Match(AS);
			State = 7662; Match(TCP);
			State = 7663; Match(LR_BRACKET);
			State = 7664; Match(LISTENER_PORT);
			State = 7665; Match(EQUAL);
			State = 7666; _localctx.port = Match(DECIMAL);
			State = 7671;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1001,_ctx) ) {
			case 1:
				{
				State = 7667; Match(COMMA);
				State = 7668; Match(LISTENER_IP);
				State = 7669; Match(EQUAL);
				State = 7670;
				_la = _input.La(1);
				if ( !(_la==ALL || ((((_la - 1094)) & ~0x3f) == 0 && ((1L << (_la - 1094)) & ((1L << (STRING - 1094)) | (1L << (IPV4_ADDR - 1094)) | (1L << (IPV6_ADDR - 1094)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 7673; Match(RR_BRACKET);
			State = 7783;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1025,_ctx) ) {
			case 1:
				{
				State = 7674; Match(TSQL);
				}
				break;

			case 2:
				{
				State = 7675; Match(FOR);
				State = 7676; Match(SERVICE_BROKER);
				State = 7677; Match(LR_BRACKET);
				State = 7678; Match(AUTHENTICATION);
				State = 7679; Match(EQUAL);
				State = 7696;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1006,_ctx) ) {
				case 1:
					{
					State = 7680; Match(WINDOWS);
					State = 7682;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1002,_ctx) ) {
					case 1:
						{
						State = 7681;
						_la = _input.La(1);
						if ( !(_la==KERBEROS || _la==NEGOTIATE || _la==NTLM) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					State = 7686;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1003,_ctx) ) {
					case 1:
						{
						State = 7684; Match(CERTIFICATE);
						State = 7685; _localctx.cert_name = id_();
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 7688; Match(CERTIFICATE);
					State = 7689; _localctx.cert_name = id_();
					State = 7691;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1004,_ctx) ) {
					case 1:
						{
						State = 7690; Match(WINDOWS);
						}
						break;
					}
					State = 7694;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1005,_ctx) ) {
					case 1:
						{
						State = 7693;
						_la = _input.La(1);
						if ( !(_la==KERBEROS || _la==NEGOTIATE || _la==NTLM) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				State = 7715;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1010,_ctx) ) {
				case 1:
					{
					State = 7699;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1007,_ctx) ) {
					case 1:
						{
						State = 7698; Match(COMMA);
						}
						break;
					}
					State = 7701; Match(ENCRYPTION);
					State = 7702; Match(EQUAL);
					State = 7703;
					_la = _input.La(1);
					if ( !(_la==DISABLED || _la==REQUIRED || _la==SUPPORTED) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 7713;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1009,_ctx) ) {
					case 1:
						{
						State = 7704; Match(ALGORITHM);
						State = 7711;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1008,_ctx) ) {
						case 1:
							{
							State = 7705; Match(AES);
							}
							break;

						case 2:
							{
							State = 7706; Match(RC4);
							}
							break;

						case 3:
							{
							State = 7707; Match(AES);
							State = 7708; Match(RC4);
							}
							break;

						case 4:
							{
							State = 7709; Match(RC4);
							State = 7710; Match(AES);
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				State = 7723;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1012,_ctx) ) {
				case 1:
					{
					State = 7718;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1011,_ctx) ) {
					case 1:
						{
						State = 7717; Match(COMMA);
						}
						break;
					}
					State = 7720; Match(MESSAGE_FORWARDING);
					State = 7721; Match(EQUAL);
					State = 7722;
					_la = _input.La(1);
					if ( !(_la==DISABLED || _la==ENABLED) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 7731;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1014,_ctx) ) {
				case 1:
					{
					State = 7726;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1013,_ctx) ) {
					case 1:
						{
						State = 7725; Match(COMMA);
						}
						break;
					}
					State = 7728; Match(MESSAGE_FORWARD_SIZE);
					State = 7729; Match(EQUAL);
					State = 7730; Match(DECIMAL);
					}
					break;
				}
				State = 7733; Match(RR_BRACKET);
				}
				break;

			case 3:
				{
				State = 7734; Match(FOR);
				State = 7735; Match(DATABASE_MIRRORING);
				State = 7736; Match(LR_BRACKET);
				State = 7737; Match(AUTHENTICATION);
				State = 7738; Match(EQUAL);
				State = 7755;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1019,_ctx) ) {
				case 1:
					{
					State = 7739; Match(WINDOWS);
					State = 7741;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1015,_ctx) ) {
					case 1:
						{
						State = 7740;
						_la = _input.La(1);
						if ( !(_la==KERBEROS || _la==NEGOTIATE || _la==NTLM) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					State = 7745;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1016,_ctx) ) {
					case 1:
						{
						State = 7743; Match(CERTIFICATE);
						State = 7744; _localctx.cert_name = id_();
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 7747; Match(CERTIFICATE);
					State = 7748; _localctx.cert_name = id_();
					State = 7750;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1017,_ctx) ) {
					case 1:
						{
						State = 7749; Match(WINDOWS);
						}
						break;
					}
					State = 7753;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1018,_ctx) ) {
					case 1:
						{
						State = 7752;
						_la = _input.La(1);
						if ( !(_la==KERBEROS || _la==NEGOTIATE || _la==NTLM) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				State = 7774;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1023,_ctx) ) {
				case 1:
					{
					State = 7758;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1020,_ctx) ) {
					case 1:
						{
						State = 7757; Match(COMMA);
						}
						break;
					}
					State = 7760; Match(ENCRYPTION);
					State = 7761; Match(EQUAL);
					State = 7762;
					_la = _input.La(1);
					if ( !(_la==DISABLED || _la==REQUIRED || _la==SUPPORTED) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 7772;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1022,_ctx) ) {
					case 1:
						{
						State = 7763; Match(ALGORITHM);
						State = 7770;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1021,_ctx) ) {
						case 1:
							{
							State = 7764; Match(AES);
							}
							break;

						case 2:
							{
							State = 7765; Match(RC4);
							}
							break;

						case 3:
							{
							State = 7766; Match(AES);
							State = 7767; Match(RC4);
							}
							break;

						case 4:
							{
							State = 7768; Match(RC4);
							State = 7769; Match(AES);
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				State = 7777;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1024,_ctx) ) {
				case 1:
					{
					State = 7776; Match(COMMA);
					}
					break;
				}
				State = 7779; Match(ROLE);
				State = 7780; Match(EQUAL);
				State = 7781;
				_la = _input.La(1);
				if ( !(_la==ALL || _la==PARTNER || _la==WITNESS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 7782; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_mirroring_optionContext : ParserRuleContext {
		public Mirroring_set_optionContext mirroring_set_option() {
			return GetRuleContext<Mirroring_set_optionContext>(0);
		}
		public Database_mirroring_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_mirroring_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDatabase_mirroring_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDatabase_mirroring_option(this);
		}
	}

	[RuleVersion(0)]
	public Database_mirroring_optionContext database_mirroring_option() {
		Database_mirroring_optionContext _localctx = new Database_mirroring_optionContext(_ctx, State);
		EnterRule(_localctx, 586, RULE_database_mirroring_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7785; mirroring_set_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mirroring_set_optionContext : ParserRuleContext {
		public Mirroring_partnerContext mirroring_partner() {
			return GetRuleContext<Mirroring_partnerContext>(0);
		}
		public Partner_optionContext partner_option() {
			return GetRuleContext<Partner_optionContext>(0);
		}
		public Mirroring_witnessContext mirroring_witness() {
			return GetRuleContext<Mirroring_witnessContext>(0);
		}
		public Witness_optionContext witness_option() {
			return GetRuleContext<Witness_optionContext>(0);
		}
		public Mirroring_set_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mirroring_set_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMirroring_set_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMirroring_set_option(this);
		}
	}

	[RuleVersion(0)]
	public Mirroring_set_optionContext mirroring_set_option() {
		Mirroring_set_optionContext _localctx = new Mirroring_set_optionContext(_ctx, State);
		EnterRule(_localctx, 588, RULE_mirroring_set_option);
		try {
			State = 7793;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1026,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7787; mirroring_partner();
				State = 7788; partner_option();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7790; mirroring_witness();
				State = 7791; witness_option();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mirroring_partnerContext : ParserRuleContext {
		public ITerminalNode PARTNER() { return GetToken(TSqlParser.PARTNER, 0); }
		public Mirroring_partnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mirroring_partner; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMirroring_partner(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMirroring_partner(this);
		}
	}

	[RuleVersion(0)]
	public Mirroring_partnerContext mirroring_partner() {
		Mirroring_partnerContext _localctx = new Mirroring_partnerContext(_ctx, State);
		EnterRule(_localctx, 590, RULE_mirroring_partner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7795; Match(PARTNER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mirroring_witnessContext : ParserRuleContext {
		public ITerminalNode WITNESS() { return GetToken(TSqlParser.WITNESS, 0); }
		public Mirroring_witnessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mirroring_witness; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMirroring_witness(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMirroring_witness(this);
		}
	}

	[RuleVersion(0)]
	public Mirroring_witnessContext mirroring_witness() {
		Mirroring_witnessContext _localctx = new Mirroring_witnessContext(_ctx, State);
		EnterRule(_localctx, 592, RULE_mirroring_witness);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7797; Match(WITNESS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Witness_partner_equalContext : ParserRuleContext {
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public Witness_partner_equalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_witness_partner_equal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWitness_partner_equal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWitness_partner_equal(this);
		}
	}

	[RuleVersion(0)]
	public Witness_partner_equalContext witness_partner_equal() {
		Witness_partner_equalContext _localctx = new Witness_partner_equalContext(_ctx, State);
		EnterRule(_localctx, 594, RULE_witness_partner_equal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7799; Match(EQUAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partner_optionContext : ParserRuleContext {
		public Witness_partner_equalContext witness_partner_equal() {
			return GetRuleContext<Witness_partner_equalContext>(0);
		}
		public Partner_serverContext partner_server() {
			return GetRuleContext<Partner_serverContext>(0);
		}
		public ITerminalNode FAILOVER() { return GetToken(TSqlParser.FAILOVER, 0); }
		public ITerminalNode FORCE_SERVICE_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode RESUME() { return GetToken(TSqlParser.RESUME, 0); }
		public ITerminalNode SAFETY() { return GetToken(TSqlParser.SAFETY, 0); }
		public ITerminalNode FULL() { return GetToken(TSqlParser.FULL, 0); }
		public ITerminalNode SUSPEND() { return GetToken(TSqlParser.SUSPEND, 0); }
		public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Partner_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partner_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPartner_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPartner_option(this);
		}
	}

	[RuleVersion(0)]
	public Partner_optionContext partner_option() {
		Partner_optionContext _localctx = new Partner_optionContext(_ctx, State);
		EnterRule(_localctx, 596, RULE_partner_option);
		int _la;
		try {
			State = 7813;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1027,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7801; witness_partner_equal();
				State = 7802; partner_server();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7804; Match(FAILOVER);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7805; Match(FORCE_SERVICE_ALLOW_DATA_LOSS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7806; Match(OFF);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7807; Match(RESUME);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7808; Match(SAFETY);
				State = 7809;
				_la = _input.La(1);
				if ( !(_la==FULL || _la==OFF) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7810; Match(SUSPEND);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7811; Match(TIMEOUT);
				State = 7812; Match(DECIMAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Witness_optionContext : ParserRuleContext {
		public Witness_partner_equalContext witness_partner_equal() {
			return GetRuleContext<Witness_partner_equalContext>(0);
		}
		public Witness_serverContext witness_server() {
			return GetRuleContext<Witness_serverContext>(0);
		}
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Witness_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_witness_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWitness_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWitness_option(this);
		}
	}

	[RuleVersion(0)]
	public Witness_optionContext witness_option() {
		Witness_optionContext _localctx = new Witness_optionContext(_ctx, State);
		EnterRule(_localctx, 598, RULE_witness_option);
		try {
			State = 7819;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1028,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7815; witness_partner_equal();
				State = 7816; witness_server();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7818; Match(OFF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Witness_serverContext : ParserRuleContext {
		public Partner_serverContext partner_server() {
			return GetRuleContext<Partner_serverContext>(0);
		}
		public Witness_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_witness_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWitness_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWitness_server(this);
		}
	}

	[RuleVersion(0)]
	public Witness_serverContext witness_server() {
		Witness_serverContext _localctx = new Witness_serverContext(_ctx, State);
		EnterRule(_localctx, 600, RULE_witness_server);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7821; partner_server();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partner_serverContext : ParserRuleContext {
		public Partner_server_tcp_prefixContext partner_server_tcp_prefix() {
			return GetRuleContext<Partner_server_tcp_prefixContext>(0);
		}
		public HostContext host() {
			return GetRuleContext<HostContext>(0);
		}
		public Mirroring_host_port_seperatorContext mirroring_host_port_seperator() {
			return GetRuleContext<Mirroring_host_port_seperatorContext>(0);
		}
		public Port_numberContext port_number() {
			return GetRuleContext<Port_numberContext>(0);
		}
		public Partner_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partner_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPartner_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPartner_server(this);
		}
	}

	[RuleVersion(0)]
	public Partner_serverContext partner_server() {
		Partner_serverContext _localctx = new Partner_serverContext(_ctx, State);
		EnterRule(_localctx, 602, RULE_partner_server);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7823; partner_server_tcp_prefix();
			State = 7824; host();
			State = 7825; mirroring_host_port_seperator();
			State = 7826; port_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mirroring_host_port_seperatorContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(TSqlParser.COLON, 0); }
		public Mirroring_host_port_seperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mirroring_host_port_seperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMirroring_host_port_seperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMirroring_host_port_seperator(this);
		}
	}

	[RuleVersion(0)]
	public Mirroring_host_port_seperatorContext mirroring_host_port_seperator() {
		Mirroring_host_port_seperatorContext _localctx = new Mirroring_host_port_seperatorContext(_ctx, State);
		EnterRule(_localctx, 604, RULE_mirroring_host_port_seperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7828; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partner_server_tcp_prefixContext : ParserRuleContext {
		public ITerminalNode TCP() { return GetToken(TSqlParser.TCP, 0); }
		public ITerminalNode COLON() { return GetToken(TSqlParser.COLON, 0); }
		public ITerminalNode DOUBLE_FORWARD_SLASH() { return GetToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0); }
		public Partner_server_tcp_prefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partner_server_tcp_prefix; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPartner_server_tcp_prefix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPartner_server_tcp_prefix(this);
		}
	}

	[RuleVersion(0)]
	public Partner_server_tcp_prefixContext partner_server_tcp_prefix() {
		Partner_server_tcp_prefixContext _localctx = new Partner_server_tcp_prefixContext(_ctx, State);
		EnterRule(_localctx, 606, RULE_partner_server_tcp_prefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7830; Match(TCP);
			State = 7831; Match(COLON);
			State = 7832; Match(DOUBLE_FORWARD_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Port_numberContext : ParserRuleContext {
		public IToken port;
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Port_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_port_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPort_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPort_number(this);
		}
	}

	[RuleVersion(0)]
	public Port_numberContext port_number() {
		Port_numberContext _localctx = new Port_numberContext(_ctx, State);
		EnterRule(_localctx, 608, RULE_port_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7834; _localctx.port = Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HostContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public HostContext host() {
			return GetRuleContext<HostContext>(0);
		}
		public HostContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_host; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterHost(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitHost(this);
		}
	}

	[RuleVersion(0)]
	public HostContext host() {
		HostContext _localctx = new HostContext(_ctx, State);
		EnterRule(_localctx, 610, RULE_host);
		try {
			State = 7846;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1030,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7836; id_();
				State = 7837; Match(DOT);
				State = 7838; host();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7844;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1029,_ctx) ) {
				case 1:
					{
					State = 7840; id_();
					State = 7841; Match(DOT);
					}
					break;

				case 2:
					{
					State = 7843; id_();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_correlation_optimization_optionContext : ParserRuleContext {
		public ITerminalNode DATE_CORRELATION_OPTIMIZATION() { return GetToken(TSqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Date_correlation_optimization_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_correlation_optimization_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDate_correlation_optimization_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDate_correlation_optimization_option(this);
		}
	}

	[RuleVersion(0)]
	public Date_correlation_optimization_optionContext date_correlation_optimization_option() {
		Date_correlation_optimization_optionContext _localctx = new Date_correlation_optimization_optionContext(_ctx, State);
		EnterRule(_localctx, 612, RULE_date_correlation_optimization_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7848; Match(DATE_CORRELATION_OPTIMIZATION);
			State = 7849; on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_encryption_optionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Db_encryption_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_encryption_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDb_encryption_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDb_encryption_option(this);
		}
	}

	[RuleVersion(0)]
	public Db_encryption_optionContext db_encryption_option() {
		Db_encryption_optionContext _localctx = new Db_encryption_optionContext(_ctx, State);
		EnterRule(_localctx, 614, RULE_db_encryption_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7851; Match(ENCRYPTION);
			State = 7852; on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_state_optionContext : ParserRuleContext {
		public ITerminalNode ONLINE() { return GetToken(TSqlParser.ONLINE, 0); }
		public ITerminalNode OFFLINE() { return GetToken(TSqlParser.OFFLINE, 0); }
		public ITerminalNode EMERGENCY() { return GetToken(TSqlParser.EMERGENCY, 0); }
		public Db_state_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_state_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDb_state_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDb_state_option(this);
		}
	}

	[RuleVersion(0)]
	public Db_state_optionContext db_state_option() {
		Db_state_optionContext _localctx = new Db_state_optionContext(_ctx, State);
		EnterRule(_localctx, 616, RULE_db_state_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7854;
			_la = _input.La(1);
			if ( !(_la==EMERGENCY || _la==OFFLINE || _la==ONLINE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_update_optionContext : ParserRuleContext {
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(TSqlParser.READ_WRITE, 0); }
		public Db_update_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_update_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDb_update_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDb_update_option(this);
		}
	}

	[RuleVersion(0)]
	public Db_update_optionContext db_update_option() {
		Db_update_optionContext _localctx = new Db_update_optionContext(_ctx, State);
		EnterRule(_localctx, 618, RULE_db_update_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7856;
			_la = _input.La(1);
			if ( !(_la==READ_ONLY || _la==READ_WRITE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_user_access_optionContext : ParserRuleContext {
		public ITerminalNode SINGLE_USER() { return GetToken(TSqlParser.SINGLE_USER, 0); }
		public ITerminalNode RESTRICTED_USER() { return GetToken(TSqlParser.RESTRICTED_USER, 0); }
		public ITerminalNode MULTI_USER() { return GetToken(TSqlParser.MULTI_USER, 0); }
		public Db_user_access_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_user_access_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDb_user_access_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDb_user_access_option(this);
		}
	}

	[RuleVersion(0)]
	public Db_user_access_optionContext db_user_access_option() {
		Db_user_access_optionContext _localctx = new Db_user_access_optionContext(_ctx, State);
		EnterRule(_localctx, 620, RULE_db_user_access_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7858;
			_la = _input.La(1);
			if ( !(_la==MULTI_USER || _la==RESTRICTED_USER || _la==SINGLE_USER) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delayed_durability_optionContext : ParserRuleContext {
		public ITerminalNode DELAYED_DURABILITY() { return GetToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DISABLED() { return GetToken(TSqlParser.DISABLED, 0); }
		public ITerminalNode ALLOWED() { return GetToken(TSqlParser.ALLOWED, 0); }
		public ITerminalNode FORCED() { return GetToken(TSqlParser.FORCED, 0); }
		public Delayed_durability_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delayed_durability_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDelayed_durability_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDelayed_durability_option(this);
		}
	}

	[RuleVersion(0)]
	public Delayed_durability_optionContext delayed_durability_option() {
		Delayed_durability_optionContext _localctx = new Delayed_durability_optionContext(_ctx, State);
		EnterRule(_localctx, 622, RULE_delayed_durability_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7860; Match(DELAYED_DURABILITY);
			State = 7861; Match(EQUAL);
			State = 7862;
			_la = _input.La(1);
			if ( !(_la==ALLOWED || _la==DISABLED || _la==FORCED) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_access_optionContext : ParserRuleContext {
		public ITerminalNode DB_CHAINING() { return GetToken(TSqlParser.DB_CHAINING, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode TRUSTWORTHY() { return GetToken(TSqlParser.TRUSTWORTHY, 0); }
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public ITerminalNode NESTED_TRIGGERS() { return GetToken(TSqlParser.NESTED_TRIGGERS, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode TRANSFORM_NOISE_WORDS() { return GetToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public ITerminalNode TWO_DIGIT_YEAR_CUTOFF() { return GetToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public External_access_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_access_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExternal_access_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExternal_access_option(this);
		}
	}

	[RuleVersion(0)]
	public External_access_optionContext external_access_option() {
		External_access_optionContext _localctx = new External_access_optionContext(_ctx, State);
		EnterRule(_localctx, 624, RULE_external_access_option);
		int _la;
		try {
			State = 7889;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1033,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7864; Match(DB_CHAINING);
				State = 7865; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7866; Match(TRUSTWORTHY);
				State = 7867; on_off();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7868; Match(DEFAULT_LANGUAGE);
				State = 7869; Match(EQUAL);
				State = 7872;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1031,_ctx) ) {
				case 1:
					{
					State = 7870; id_();
					}
					break;

				case 2:
					{
					State = 7871; Match(STRING);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7874; Match(DEFAULT_FULLTEXT_LANGUAGE);
				State = 7875; Match(EQUAL);
				State = 7878;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1032,_ctx) ) {
				case 1:
					{
					State = 7876; id_();
					}
					break;

				case 2:
					{
					State = 7877; Match(STRING);
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7880; Match(NESTED_TRIGGERS);
				State = 7881; Match(EQUAL);
				State = 7882;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7883; Match(TRANSFORM_NOISE_WORDS);
				State = 7884; Match(EQUAL);
				State = 7885;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7886; Match(TWO_DIGIT_YEAR_CUTOFF);
				State = 7887; Match(EQUAL);
				State = 7888; Match(DECIMAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hadr_optionsContext : ParserRuleContext {
		public Id_Context availability_group_name;
		public ITerminalNode HADR() { return GetToken(TSqlParser.HADR, 0); }
		public ITerminalNode SUSPEND() { return GetToken(TSqlParser.SUSPEND, 0); }
		public ITerminalNode RESUME() { return GetToken(TSqlParser.RESUME, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Hadr_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hadr_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterHadr_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitHadr_options(this);
		}
	}

	[RuleVersion(0)]
	public Hadr_optionsContext hadr_options() {
		Hadr_optionsContext _localctx = new Hadr_optionsContext(_ctx, State);
		EnterRule(_localctx, 626, RULE_hadr_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7891; Match(HADR);
			State = 7900;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1035,_ctx) ) {
			case 1:
				{
				State = 7897;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1034,_ctx) ) {
				case 1:
					{
					State = 7892; Match(AVAILABILITY);
					State = 7893; Match(GROUP);
					State = 7894; Match(EQUAL);
					State = 7895; _localctx.availability_group_name = id_();
					}
					break;

				case 2:
					{
					State = 7896; Match(OFF);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 7899;
				_la = _input.La(1);
				if ( !(_la==RESUME || _la==SUSPEND) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mixed_page_allocation_optionContext : ParserRuleContext {
		public ITerminalNode MIXED_PAGE_ALLOCATION() { return GetToken(TSqlParser.MIXED_PAGE_ALLOCATION, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Mixed_page_allocation_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mixed_page_allocation_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMixed_page_allocation_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMixed_page_allocation_option(this);
		}
	}

	[RuleVersion(0)]
	public Mixed_page_allocation_optionContext mixed_page_allocation_option() {
		Mixed_page_allocation_optionContext _localctx = new Mixed_page_allocation_optionContext(_ctx, State);
		EnterRule(_localctx, 628, RULE_mixed_page_allocation_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7902; Match(MIXED_PAGE_ALLOCATION);
			State = 7903;
			_la = _input.La(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameterization_optionContext : ParserRuleContext {
		public ITerminalNode PARAMETERIZATION() { return GetToken(TSqlParser.PARAMETERIZATION, 0); }
		public ITerminalNode SIMPLE() { return GetToken(TSqlParser.SIMPLE, 0); }
		public ITerminalNode FORCED() { return GetToken(TSqlParser.FORCED, 0); }
		public Parameterization_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterization_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterParameterization_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitParameterization_option(this);
		}
	}

	[RuleVersion(0)]
	public Parameterization_optionContext parameterization_option() {
		Parameterization_optionContext _localctx = new Parameterization_optionContext(_ctx, State);
		EnterRule(_localctx, 630, RULE_parameterization_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7905; Match(PARAMETERIZATION);
			State = 7906;
			_la = _input.La(1);
			if ( !(_la==FORCED || _la==SIMPLE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Recovery_optionContext : ParserRuleContext {
		public ITerminalNode RECOVERY() { return GetToken(TSqlParser.RECOVERY, 0); }
		public ITerminalNode FULL() { return GetToken(TSqlParser.FULL, 0); }
		public ITerminalNode BULK_LOGGED() { return GetToken(TSqlParser.BULK_LOGGED, 0); }
		public ITerminalNode SIMPLE() { return GetToken(TSqlParser.SIMPLE, 0); }
		public ITerminalNode TORN_PAGE_DETECTION() { return GetToken(TSqlParser.TORN_PAGE_DETECTION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode ACCELERATED_DATABASE_RECOVERY() { return GetToken(TSqlParser.ACCELERATED_DATABASE_RECOVERY, 0); }
		public ITerminalNode PAGE_VERIFY() { return GetToken(TSqlParser.PAGE_VERIFY, 0); }
		public ITerminalNode CHECKSUM() { return GetToken(TSqlParser.CHECKSUM, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public Recovery_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recovery_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRecovery_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRecovery_option(this);
		}
	}

	[RuleVersion(0)]
	public Recovery_optionContext recovery_option() {
		Recovery_optionContext _localctx = new Recovery_optionContext(_ctx, State);
		EnterRule(_localctx, 632, RULE_recovery_option);
		int _la;
		try {
			State = 7917;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1036,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7908; Match(RECOVERY);
				State = 7909;
				_la = _input.La(1);
				if ( !(_la==BULK_LOGGED || _la==FULL || _la==SIMPLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7910; Match(TORN_PAGE_DETECTION);
				State = 7911; on_off();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7912; Match(ACCELERATED_DATABASE_RECOVERY);
				State = 7913; Match(EQUAL);
				State = 7914; on_off();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7915; Match(PAGE_VERIFY);
				State = 7916;
				_la = _input.La(1);
				if ( !(_la==CHECKSUM || _la==NONE || _la==TORN_PAGE_DETECTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Service_broker_optionContext : ParserRuleContext {
		public ITerminalNode ENABLE_BROKER() { return GetToken(TSqlParser.ENABLE_BROKER, 0); }
		public ITerminalNode DISABLE_BROKER() { return GetToken(TSqlParser.DISABLE_BROKER, 0); }
		public ITerminalNode NEW_BROKER() { return GetToken(TSqlParser.NEW_BROKER, 0); }
		public ITerminalNode ERROR_BROKER_CONVERSATIONS() { return GetToken(TSqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
		public ITerminalNode HONOR_BROKER_PRIORITY() { return GetToken(TSqlParser.HONOR_BROKER_PRIORITY, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Service_broker_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_service_broker_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterService_broker_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitService_broker_option(this);
		}
	}

	[RuleVersion(0)]
	public Service_broker_optionContext service_broker_option() {
		Service_broker_optionContext _localctx = new Service_broker_optionContext(_ctx, State);
		EnterRule(_localctx, 634, RULE_service_broker_option);
		try {
			State = 7925;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1037,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7919; Match(ENABLE_BROKER);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7920; Match(DISABLE_BROKER);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7921; Match(NEW_BROKER);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7922; Match(ERROR_BROKER_CONVERSATIONS);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7923; Match(HONOR_BROKER_PRIORITY);
				State = 7924; on_off();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Snapshot_optionContext : ParserRuleContext {
		public IToken MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT;
		public ITerminalNode ALLOW_SNAPSHOT_ISOLATION() { return GetToken(TSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode READ_COMMITTED_SNAPSHOT() { return GetToken(TSqlParser.READ_COMMITTED_SNAPSHOT, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Snapshot_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_snapshot_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSnapshot_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSnapshot_option(this);
		}
	}

	[RuleVersion(0)]
	public Snapshot_optionContext snapshot_option() {
		Snapshot_optionContext _localctx = new Snapshot_optionContext(_ctx, State);
		EnterRule(_localctx, 636, RULE_snapshot_option);
		int _la;
		try {
			State = 7932;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1038,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7927; Match(ALLOW_SNAPSHOT_ISOLATION);
				State = 7928; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7929; Match(READ_COMMITTED_SNAPSHOT);
				State = 7930;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7931;
				_localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
					_localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_optionContext : ParserRuleContext {
		public ITerminalNode ANSI_NULL_DEFAULT() { return GetToken(TSqlParser.ANSI_NULL_DEFAULT, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode ANSI_NULLS() { return GetToken(TSqlParser.ANSI_NULLS, 0); }
		public ITerminalNode ANSI_PADDING() { return GetToken(TSqlParser.ANSI_PADDING, 0); }
		public ITerminalNode ANSI_WARNINGS() { return GetToken(TSqlParser.ANSI_WARNINGS, 0); }
		public ITerminalNode ARITHABORT() { return GetToken(TSqlParser.ARITHABORT, 0); }
		public ITerminalNode COMPATIBILITY_LEVEL() { return GetToken(TSqlParser.COMPATIBILITY_LEVEL, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode CONCAT_NULL_YIELDS_NULL() { return GetToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public ITerminalNode NUMERIC_ROUNDABORT() { return GetToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
		public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public ITerminalNode RECURSIVE_TRIGGERS() { return GetToken(TSqlParser.RECURSIVE_TRIGGERS, 0); }
		public Sql_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSql_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSql_option(this);
		}
	}

	[RuleVersion(0)]
	public Sql_optionContext sql_option() {
		Sql_optionContext _localctx = new Sql_optionContext(_ctx, State);
		EnterRule(_localctx, 638, RULE_sql_option);
		try {
			State = 7955;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1039,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7934; Match(ANSI_NULL_DEFAULT);
				State = 7935; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7936; Match(ANSI_NULLS);
				State = 7937; on_off();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7938; Match(ANSI_PADDING);
				State = 7939; on_off();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7940; Match(ANSI_WARNINGS);
				State = 7941; on_off();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7942; Match(ARITHABORT);
				State = 7943; on_off();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7944; Match(COMPATIBILITY_LEVEL);
				State = 7945; Match(EQUAL);
				State = 7946; Match(DECIMAL);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7947; Match(CONCAT_NULL_YIELDS_NULL);
				State = 7948; on_off();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7949; Match(NUMERIC_ROUNDABORT);
				State = 7950; on_off();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7951; Match(QUOTED_IDENTIFIER);
				State = 7952; on_off();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7953; Match(RECURSIVE_TRIGGERS);
				State = 7954; on_off();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target_recovery_time_optionContext : ParserRuleContext {
		public ITerminalNode TARGET_RECOVERY_TIME() { return GetToken(TSqlParser.TARGET_RECOVERY_TIME, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode SECONDS() { return GetToken(TSqlParser.SECONDS, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public Target_recovery_time_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target_recovery_time_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTarget_recovery_time_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTarget_recovery_time_option(this);
		}
	}

	[RuleVersion(0)]
	public Target_recovery_time_optionContext target_recovery_time_option() {
		Target_recovery_time_optionContext _localctx = new Target_recovery_time_optionContext(_ctx, State);
		EnterRule(_localctx, 640, RULE_target_recovery_time_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7957; Match(TARGET_RECOVERY_TIME);
			State = 7958; Match(EQUAL);
			State = 7959; Match(DECIMAL);
			State = 7960;
			_la = _input.La(1);
			if ( !(_la==MINUTES || _la==SECONDS) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminationContext : ParserRuleContext {
		public IToken seconds;
		public ITerminalNode ROLLBACK() { return GetToken(TSqlParser.ROLLBACK, 0); }
		public ITerminalNode AFTER() { return GetToken(TSqlParser.AFTER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(TSqlParser.IMMEDIATE, 0); }
		public ITerminalNode NO_WAIT() { return GetToken(TSqlParser.NO_WAIT, 0); }
		public TerminationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termination; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTermination(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTermination(this);
		}
	}

	[RuleVersion(0)]
	public TerminationContext termination() {
		TerminationContext _localctx = new TerminationContext(_ctx, State);
		EnterRule(_localctx, 642, RULE_termination);
		try {
			State = 7968;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1040,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7962; Match(ROLLBACK);
				State = 7963; Match(AFTER);
				State = 7964; _localctx.seconds = Match(DECIMAL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7965; Match(ROLLBACK);
				State = 7966; Match(IMMEDIATE);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7967; Match(NO_WAIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_indexContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Drop_relational_or_xml_or_spatial_indexContext[] drop_relational_or_xml_or_spatial_index() {
			return GetRuleContexts<Drop_relational_or_xml_or_spatial_indexContext>();
		}
		public Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index(int i) {
			return GetRuleContext<Drop_relational_or_xml_or_spatial_indexContext>(i);
		}
		public Drop_backward_compatible_indexContext[] drop_backward_compatible_index() {
			return GetRuleContexts<Drop_backward_compatible_indexContext>();
		}
		public Drop_backward_compatible_indexContext drop_backward_compatible_index(int i) {
			return GetRuleContext<Drop_backward_compatible_indexContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_index(this);
		}
	}

	[RuleVersion(0)]
	public Drop_indexContext drop_index() {
		Drop_indexContext _localctx = new Drop_indexContext(_ctx, State);
		EnterRule(_localctx, 644, RULE_drop_index);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7970; Match(DROP);
			State = 7971; Match(INDEX);
			State = 7974;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1041,_ctx) ) {
			case 1:
				{
				State = 7972; Match(IF);
				State = 7973; Match(EXISTS);
				}
				break;
			}
			State = 7992;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1044,_ctx) ) {
			case 1:
				{
				State = 7976; drop_relational_or_xml_or_spatial_index();
				State = 7981;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1042,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7977; Match(COMMA);
						State = 7978; drop_relational_or_xml_or_spatial_index();
						}
						} 
					}
					State = 7983;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1042,_ctx);
				}
				}
				break;

			case 2:
				{
				State = 7984; drop_backward_compatible_index();
				State = 7989;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1043,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7985; Match(COMMA);
						State = 7986; drop_backward_compatible_index();
						}
						} 
					}
					State = 7991;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1043,_ctx);
				}
				}
				break;
			}
			State = 7995;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1045,_ctx) ) {
			case 1:
				{
				State = 7994; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_relational_or_xml_or_spatial_indexContext : ParserRuleContext {
		public Id_Context index_name;
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_relational_or_xml_or_spatial_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_relational_or_xml_or_spatial_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_relational_or_xml_or_spatial_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_relational_or_xml_or_spatial_index(this);
		}
	}

	[RuleVersion(0)]
	public Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index() {
		Drop_relational_or_xml_or_spatial_indexContext _localctx = new Drop_relational_or_xml_or_spatial_indexContext(_ctx, State);
		EnterRule(_localctx, 646, RULE_drop_relational_or_xml_or_spatial_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7997; _localctx.index_name = id_();
			State = 7998; Match(ON);
			State = 7999; full_table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_backward_compatible_indexContext : ParserRuleContext {
		public Id_Context owner_name;
		public Id_Context table_or_view_name;
		public Id_Context index_name;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Drop_backward_compatible_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_backward_compatible_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_backward_compatible_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_backward_compatible_index(this);
		}
	}

	[RuleVersion(0)]
	public Drop_backward_compatible_indexContext drop_backward_compatible_index() {
		Drop_backward_compatible_indexContext _localctx = new Drop_backward_compatible_indexContext(_ctx, State);
		EnterRule(_localctx, 648, RULE_drop_backward_compatible_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8004;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1046,_ctx) ) {
			case 1:
				{
				State = 8001; _localctx.owner_name = id_();
				State = 8002; Match(DOT);
				}
				break;
			}
			State = 8006; _localctx.table_or_view_name = id_();
			State = 8007; Match(DOT);
			State = 8008; _localctx.index_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_procedureContext : ParserRuleContext {
		public IToken proc;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Func_proc_name_schemaContext[] func_proc_name_schema() {
			return GetRuleContexts<Func_proc_name_schemaContext>();
		}
		public Func_proc_name_schemaContext func_proc_name_schema(int i) {
			return GetRuleContext<Func_proc_name_schemaContext>(i);
		}
		public ITerminalNode PROC() { return GetToken(TSqlParser.PROC, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(TSqlParser.PROCEDURE, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_procedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_procedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_procedure(this);
		}
	}

	[RuleVersion(0)]
	public Drop_procedureContext drop_procedure() {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, State);
		EnterRule(_localctx, 650, RULE_drop_procedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8010; Match(DROP);
			State = 8011;
			_localctx.proc = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
				_localctx.proc = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 8014;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1047,_ctx) ) {
			case 1:
				{
				State = 8012; Match(IF);
				State = 8013; Match(EXISTS);
				}
				break;
			}
			State = 8016; func_proc_name_schema();
			State = 8021;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1048,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 8017; Match(COMMA);
					State = 8018; func_proc_name_schema();
					}
					} 
				}
				State = 8023;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1048,_ctx);
			}
			State = 8025;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1049,_ctx) ) {
			case 1:
				{
				State = 8024; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_triggerContext : ParserRuleContext {
		public Drop_dml_triggerContext drop_dml_trigger() {
			return GetRuleContext<Drop_dml_triggerContext>(0);
		}
		public Drop_ddl_triggerContext drop_ddl_trigger() {
			return GetRuleContext<Drop_ddl_triggerContext>(0);
		}
		public Drop_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_trigger(this);
		}
	}

	[RuleVersion(0)]
	public Drop_triggerContext drop_trigger() {
		Drop_triggerContext _localctx = new Drop_triggerContext(_ctx, State);
		EnterRule(_localctx, 652, RULE_drop_trigger);
		try {
			State = 8029;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1050,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8027; drop_dml_trigger();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8028; drop_ddl_trigger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_dml_triggerContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext[] simple_name() {
			return GetRuleContexts<Simple_nameContext>();
		}
		public Simple_nameContext simple_name(int i) {
			return GetRuleContext<Simple_nameContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_dml_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_dml_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_dml_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_dml_trigger(this);
		}
	}

	[RuleVersion(0)]
	public Drop_dml_triggerContext drop_dml_trigger() {
		Drop_dml_triggerContext _localctx = new Drop_dml_triggerContext(_ctx, State);
		EnterRule(_localctx, 654, RULE_drop_dml_trigger);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8031; Match(DROP);
			State = 8032; Match(TRIGGER);
			State = 8035;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1051,_ctx) ) {
			case 1:
				{
				State = 8033; Match(IF);
				State = 8034; Match(EXISTS);
				}
				break;
			}
			State = 8037; simple_name();
			State = 8042;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1052,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 8038; Match(COMMA);
					State = 8039; simple_name();
					}
					} 
				}
				State = 8044;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1052,_ctx);
			}
			State = 8046;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1053,_ctx) ) {
			case 1:
				{
				State = 8045; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_ddl_triggerContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext[] simple_name() {
			return GetRuleContexts<Simple_nameContext>();
		}
		public Simple_nameContext simple_name(int i) {
			return GetRuleContext<Simple_nameContext>(i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_ddl_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_ddl_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_ddl_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_ddl_trigger(this);
		}
	}

	[RuleVersion(0)]
	public Drop_ddl_triggerContext drop_ddl_trigger() {
		Drop_ddl_triggerContext _localctx = new Drop_ddl_triggerContext(_ctx, State);
		EnterRule(_localctx, 656, RULE_drop_ddl_trigger);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8048; Match(DROP);
			State = 8049; Match(TRIGGER);
			State = 8052;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1054,_ctx) ) {
			case 1:
				{
				State = 8050; Match(IF);
				State = 8051; Match(EXISTS);
				}
				break;
			}
			State = 8054; simple_name();
			State = 8059;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1055,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 8055; Match(COMMA);
					State = 8056; simple_name();
					}
					} 
				}
				State = 8061;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1055,_ctx);
			}
			State = 8062; Match(ON);
			State = 8066;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1056,_ctx) ) {
			case 1:
				{
				State = 8063; Match(DATABASE);
				}
				break;

			case 2:
				{
				State = 8064; Match(ALL);
				State = 8065; Match(SERVER);
				}
				break;
			}
			State = 8069;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1057,_ctx) ) {
			case 1:
				{
				State = 8068; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_functionContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public Func_proc_name_schemaContext[] func_proc_name_schema() {
			return GetRuleContexts<Func_proc_name_schemaContext>();
		}
		public Func_proc_name_schemaContext func_proc_name_schema(int i) {
			return GetRuleContext<Func_proc_name_schemaContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_function(this);
		}
	}

	[RuleVersion(0)]
	public Drop_functionContext drop_function() {
		Drop_functionContext _localctx = new Drop_functionContext(_ctx, State);
		EnterRule(_localctx, 658, RULE_drop_function);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8071; Match(DROP);
			State = 8072; Match(FUNCTION);
			State = 8075;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1058,_ctx) ) {
			case 1:
				{
				State = 8073; Match(IF);
				State = 8074; Match(EXISTS);
				}
				break;
			}
			State = 8077; func_proc_name_schema();
			State = 8082;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1059,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 8078; Match(COMMA);
					State = 8079; func_proc_name_schema();
					}
					} 
				}
				State = 8084;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1059,_ctx);
			}
			State = 8086;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1060,_ctx) ) {
			case 1:
				{
				State = 8085; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_statisticsContext : ParserRuleContext {
		public Id_Context name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Table_nameContext[] table_name() {
			return GetRuleContexts<Table_nameContext>();
		}
		public Table_nameContext table_name(int i) {
			return GetRuleContext<Table_nameContext>(i);
		}
		public Drop_statisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_statistics; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_statistics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_statistics(this);
		}
	}

	[RuleVersion(0)]
	public Drop_statisticsContext drop_statistics() {
		Drop_statisticsContext _localctx = new Drop_statisticsContext(_ctx, State);
		EnterRule(_localctx, 660, RULE_drop_statistics);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8088; Match(DROP);
			State = 8089; Match(STATISTICS);
			State = 8099;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 8091;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1061,_ctx) ) {
					case 1:
						{
						State = 8090; Match(COMMA);
						}
						break;
					}
					State = 8096;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1062,_ctx) ) {
					case 1:
						{
						State = 8093; table_name();
						State = 8094; Match(DOT);
						}
						break;
					}
					State = 8098; _localctx.name = id_();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8101;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1063,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 8103; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_tableContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_table(this);
		}
	}

	[RuleVersion(0)]
	public Drop_tableContext drop_table() {
		Drop_tableContext _localctx = new Drop_tableContext(_ctx, State);
		EnterRule(_localctx, 662, RULE_drop_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8105; Match(DROP);
			State = 8106; Match(TABLE);
			State = 8109;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1064,_ctx) ) {
			case 1:
				{
				State = 8107; Match(IF);
				State = 8108; Match(EXISTS);
				}
				break;
			}
			State = 8111; table_name();
			State = 8113;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1065,_ctx) ) {
			case 1:
				{
				State = 8112; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_viewContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode VIEW() { return GetToken(TSqlParser.VIEW, 0); }
		public Simple_nameContext[] simple_name() {
			return GetRuleContexts<Simple_nameContext>();
		}
		public Simple_nameContext simple_name(int i) {
			return GetRuleContext<Simple_nameContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_view; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_view(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_view(this);
		}
	}

	[RuleVersion(0)]
	public Drop_viewContext drop_view() {
		Drop_viewContext _localctx = new Drop_viewContext(_ctx, State);
		EnterRule(_localctx, 664, RULE_drop_view);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8115; Match(DROP);
			State = 8116; Match(VIEW);
			State = 8119;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1066,_ctx) ) {
			case 1:
				{
				State = 8117; Match(IF);
				State = 8118; Match(EXISTS);
				}
				break;
			}
			State = 8121; simple_name();
			State = 8126;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1067,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 8122; Match(COMMA);
					State = 8123; simple_name();
					}
					} 
				}
				State = 8128;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1067,_ctx);
			}
			State = 8130;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1068,_ctx) ) {
			case 1:
				{
				State = 8129; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_typeContext : ParserRuleContext {
		public Simple_nameContext name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return GetRuleContext<Column_def_table_constraintsContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Default_valueContext default_value() {
			return GetRuleContext<Default_valueContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public Create_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_type(this);
		}
	}

	[RuleVersion(0)]
	public Create_typeContext create_type() {
		Create_typeContext _localctx = new Create_typeContext(_ctx, State);
		EnterRule(_localctx, 666, RULE_create_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8132; Match(CREATE);
			State = 8133; Match(TYPE);
			State = 8134; _localctx.name = simple_name();
			State = 8142;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1070,_ctx) ) {
			case 1:
				{
				State = 8135; Match(FROM);
				State = 8136; data_type();
				State = 8140;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1069,_ctx) ) {
				case 1:
					{
					State = 8137; default_value();
					}
					break;

				case 2:
					{
					State = 8138; Match(NOT);
					State = 8139; Match(NULL_);
					}
					break;
				}
				}
				break;
			}
			State = 8150;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1071,_ctx) ) {
			case 1:
				{
				State = 8144; Match(AS);
				State = 8145; Match(TABLE);
				State = 8146; Match(LR_BRACKET);
				State = 8147; column_def_table_constraints();
				State = 8148; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_typeContext : ParserRuleContext {
		public Simple_nameContext name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_type(this);
		}
	}

	[RuleVersion(0)]
	public Drop_typeContext drop_type() {
		Drop_typeContext _localctx = new Drop_typeContext(_ctx, State);
		EnterRule(_localctx, 668, RULE_drop_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8152; Match(DROP);
			State = 8153; Match(TYPE);
			State = 8156;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1072,_ctx) ) {
			case 1:
				{
				State = 8154; Match(IF);
				State = 8155; Match(EXISTS);
				}
				break;
			}
			State = 8158; _localctx.name = simple_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rowset_function_limitedContext : ParserRuleContext {
		public OpenqueryContext openquery() {
			return GetRuleContext<OpenqueryContext>(0);
		}
		public OpendatasourceContext opendatasource() {
			return GetRuleContext<OpendatasourceContext>(0);
		}
		public Rowset_function_limitedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowset_function_limited; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRowset_function_limited(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRowset_function_limited(this);
		}
	}

	[RuleVersion(0)]
	public Rowset_function_limitedContext rowset_function_limited() {
		Rowset_function_limitedContext _localctx = new Rowset_function_limitedContext(_ctx, State);
		EnterRule(_localctx, 670, RULE_rowset_function_limited);
		try {
			State = 8162;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1073,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8160; openquery();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8161; opendatasource();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenqueryContext : ParserRuleContext {
		public Id_Context linked_server;
		public IToken query;
		public ITerminalNode OPENQUERY() { return GetToken(TSqlParser.OPENQUERY, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public OpenqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpenquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpenquery(this);
		}
	}

	[RuleVersion(0)]
	public OpenqueryContext openquery() {
		OpenqueryContext _localctx = new OpenqueryContext(_ctx, State);
		EnterRule(_localctx, 672, RULE_openquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8164; Match(OPENQUERY);
			State = 8165; Match(LR_BRACKET);
			State = 8166; _localctx.linked_server = id_();
			State = 8167; Match(COMMA);
			State = 8168; _localctx.query = Match(STRING);
			State = 8169; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpendatasourceContext : ParserRuleContext {
		public IToken provider;
		public IToken init;
		public Id_Context database;
		public Id_Context scheme;
		public Id_Context table;
		public ITerminalNode OPENDATASOURCE() { return GetToken(TSqlParser.OPENDATASOURCE, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public OpendatasourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opendatasource; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpendatasource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpendatasource(this);
		}
	}

	[RuleVersion(0)]
	public OpendatasourceContext opendatasource() {
		OpendatasourceContext _localctx = new OpendatasourceContext(_ctx, State);
		EnterRule(_localctx, 674, RULE_opendatasource);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8171; Match(OPENDATASOURCE);
			State = 8172; Match(LR_BRACKET);
			State = 8173; _localctx.provider = Match(STRING);
			State = 8174; Match(COMMA);
			State = 8175; _localctx.init = Match(STRING);
			State = 8176; Match(RR_BRACKET);
			State = 8177; Match(DOT);
			State = 8179;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1074,_ctx) ) {
			case 1:
				{
				State = 8178; _localctx.database = id_();
				}
				break;
			}
			State = 8181; Match(DOT);
			State = 8183;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1075,_ctx) ) {
			case 1:
				{
				State = 8182; _localctx.scheme = id_();
				}
				break;
			}
			State = 8185; Match(DOT);
			{
			State = 8186; _localctx.table = id_();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_statementContext : ParserRuleContext {
		public Declare_localContext _declare_local;
		public IList<Declare_localContext> _loc = new List<Declare_localContext>();
		public Xml_declarationContext _xml_declaration;
		public IList<Xml_declarationContext> _xml_dec = new List<Xml_declarationContext>();
		public ITerminalNode DECLARE() { return GetToken(TSqlParser.DECLARE, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Table_type_definitionContext table_type_definition() {
			return GetRuleContext<Table_type_definitionContext>(0);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Declare_localContext[] declare_local() {
			return GetRuleContexts<Declare_localContext>();
		}
		public Declare_localContext declare_local(int i) {
			return GetRuleContext<Declare_localContext>(i);
		}
		public Xml_type_definitionContext xml_type_definition() {
			return GetRuleContext<Xml_type_definitionContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode XMLNAMESPACES() { return GetToken(TSqlParser.XMLNAMESPACES, 0); }
		public Xml_declarationContext[] xml_declaration() {
			return GetRuleContexts<Xml_declarationContext>();
		}
		public Xml_declarationContext xml_declaration(int i) {
			return GetRuleContext<Xml_declarationContext>(i);
		}
		public Declare_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_statement(this);
		}
	}

	[RuleVersion(0)]
	public Declare_statementContext declare_statement() {
		Declare_statementContext _localctx = new Declare_statementContext(_ctx, State);
		EnterRule(_localctx, 676, RULE_declare_statement);
		try {
			int _alt;
			State = 8236;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1085,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8188; Match(DECLARE);
				State = 8189; Match(LOCAL_ID);
				State = 8191;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1076,_ctx) ) {
				case 1:
					{
					State = 8190; Match(AS);
					}
					break;
				}
				State = 8195;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1077,_ctx) ) {
				case 1:
					{
					State = 8193; table_type_definition();
					}
					break;

				case 2:
					{
					State = 8194; table_name();
					}
					break;
				}
				State = 8198;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1078,_ctx) ) {
				case 1:
					{
					State = 8197; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8200; Match(DECLARE);
				State = 8201; _localctx._declare_local = declare_local();
				_localctx._loc.Add(_localctx._declare_local);
				State = 8206;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1079,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8202; Match(COMMA);
						State = 8203; _localctx._declare_local = declare_local();
						_localctx._loc.Add(_localctx._declare_local);
						}
						} 
					}
					State = 8208;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1079,_ctx);
				}
				State = 8210;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1080,_ctx) ) {
				case 1:
					{
					State = 8209; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8212; Match(DECLARE);
				State = 8213; Match(LOCAL_ID);
				State = 8215;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1081,_ctx) ) {
				case 1:
					{
					State = 8214; Match(AS);
					}
					break;
				}
				State = 8217; xml_type_definition();
				State = 8219;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1082,_ctx) ) {
				case 1:
					{
					State = 8218; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8221; Match(WITH);
				State = 8222; Match(XMLNAMESPACES);
				State = 8223; Match(LR_BRACKET);
				State = 8224; _localctx._xml_declaration = xml_declaration();
				_localctx._xml_dec.Add(_localctx._xml_declaration);
				State = 8229;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1083,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8225; Match(COMMA);
						State = 8226; _localctx._xml_declaration = xml_declaration();
						_localctx._xml_dec.Add(_localctx._xml_declaration);
						}
						} 
					}
					State = 8231;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1083,_ctx);
				}
				State = 8232; Match(RR_BRACKET);
				State = 8234;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1084,_ctx) ) {
				case 1:
					{
					State = 8233; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_declarationContext : ParserRuleContext {
		public IToken xml_namespace_uri;
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public Xml_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Xml_declarationContext xml_declaration() {
		Xml_declarationContext _localctx = new Xml_declarationContext(_ctx, State);
		EnterRule(_localctx, 678, RULE_xml_declaration);
		try {
			State = 8243;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1086,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8238; _localctx.xml_namespace_uri = Match(STRING);
				State = 8239; Match(AS);
				State = 8240; id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8241; Match(DEFAULT);
				State = 8242; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_statementContext : ParserRuleContext {
		public ITerminalNode CLOSE() { return GetToken(TSqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public ITerminalNode DEALLOCATE() { return GetToken(TSqlParser.DEALLOCATE, 0); }
		public ITerminalNode CURSOR() { return GetToken(TSqlParser.CURSOR, 0); }
		public Declare_cursorContext declare_cursor() {
			return GetRuleContext<Declare_cursorContext>(0);
		}
		public Fetch_cursorContext fetch_cursor() {
			return GetRuleContext<Fetch_cursorContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(TSqlParser.OPEN, 0); }
		public Cursor_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCursor_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCursor_statement(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_statementContext cursor_statement() {
		Cursor_statementContext _localctx = new Cursor_statementContext(_ctx, State);
		EnterRule(_localctx, 680, RULE_cursor_statement);
		try {
			State = 8274;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1094,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8245; Match(CLOSE);
				State = 8247;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1087,_ctx) ) {
				case 1:
					{
					State = 8246; Match(GLOBAL);
					}
					break;
				}
				State = 8249; cursor_name();
				State = 8251;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1088,_ctx) ) {
				case 1:
					{
					State = 8250; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8253; Match(DEALLOCATE);
				State = 8255;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1089,_ctx) ) {
				case 1:
					{
					State = 8254; Match(GLOBAL);
					}
					break;
				}
				State = 8258;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1090,_ctx) ) {
				case 1:
					{
					State = 8257; Match(CURSOR);
					}
					break;
				}
				State = 8260; cursor_name();
				State = 8262;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1091,_ctx) ) {
				case 1:
					{
					State = 8261; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8264; declare_cursor();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8265; fetch_cursor();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8266; Match(OPEN);
				State = 8268;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1092,_ctx) ) {
				case 1:
					{
					State = 8267; Match(GLOBAL);
					}
					break;
				}
				State = 8270; cursor_name();
				State = 8272;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1093,_ctx) ) {
				case 1:
					{
					State = 8271; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_databaseContext : ParserRuleContext {
		public Id_Context database_name;
		public IToken file_or_filegroup;
		public Id_Context logical_device_name;
		public Id_Context backup_set_name;
		public IToken medianame;
		public IToken stats_percent;
		public Id_Context encryptor_name;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode READ_WRITE_FILEGROUPS() { return GetToken(TSqlParser.READ_WRITE_FILEGROUPS, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] FILE() { return GetTokens(TSqlParser.FILE); }
		public ITerminalNode FILE(int i) {
			return GetToken(TSqlParser.FILE, i);
		}
		public ITerminalNode[] FILEGROUP() { return GetTokens(TSqlParser.FILEGROUP); }
		public ITerminalNode FILEGROUP(int i) {
			return GetToken(TSqlParser.FILEGROUP, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] DISK() { return GetTokens(TSqlParser.DISK); }
		public ITerminalNode DISK(int i) {
			return GetToken(TSqlParser.DISK, i);
		}
		public ITerminalNode[] TAPE() { return GetTokens(TSqlParser.TAPE); }
		public ITerminalNode TAPE(int i) {
			return GetToken(TSqlParser.TAPE, i);
		}
		public ITerminalNode[] URL() { return GetTokens(TSqlParser.URL); }
		public ITerminalNode URL(int i) {
			return GetToken(TSqlParser.URL, i);
		}
		public ITerminalNode[] MIRROR() { return GetTokens(TSqlParser.MIRROR); }
		public ITerminalNode MIRROR(int i) {
			return GetToken(TSqlParser.MIRROR, i);
		}
		public ITerminalNode[] DIFFERENTIAL() { return GetTokens(TSqlParser.DIFFERENTIAL); }
		public ITerminalNode DIFFERENTIAL(int i) {
			return GetToken(TSqlParser.DIFFERENTIAL, i);
		}
		public ITerminalNode[] COPY_ONLY() { return GetTokens(TSqlParser.COPY_ONLY); }
		public ITerminalNode COPY_ONLY(int i) {
			return GetToken(TSqlParser.COPY_ONLY, i);
		}
		public ITerminalNode[] DESCRIPTION() { return GetTokens(TSqlParser.DESCRIPTION); }
		public ITerminalNode DESCRIPTION(int i) {
			return GetToken(TSqlParser.DESCRIPTION, i);
		}
		public ITerminalNode[] NAME() { return GetTokens(TSqlParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(TSqlParser.NAME, i);
		}
		public ITerminalNode[] CREDENTIAL() { return GetTokens(TSqlParser.CREDENTIAL); }
		public ITerminalNode CREDENTIAL(int i) {
			return GetToken(TSqlParser.CREDENTIAL, i);
		}
		public ITerminalNode[] FILE_SNAPSHOT() { return GetTokens(TSqlParser.FILE_SNAPSHOT); }
		public ITerminalNode FILE_SNAPSHOT(int i) {
			return GetToken(TSqlParser.FILE_SNAPSHOT, i);
		}
		public ITerminalNode[] MEDIADESCRIPTION() { return GetTokens(TSqlParser.MEDIADESCRIPTION); }
		public ITerminalNode MEDIADESCRIPTION(int i) {
			return GetToken(TSqlParser.MEDIADESCRIPTION, i);
		}
		public ITerminalNode[] MEDIANAME() { return GetTokens(TSqlParser.MEDIANAME); }
		public ITerminalNode MEDIANAME(int i) {
			return GetToken(TSqlParser.MEDIANAME, i);
		}
		public ITerminalNode[] BLOCKSIZE() { return GetTokens(TSqlParser.BLOCKSIZE); }
		public ITerminalNode BLOCKSIZE(int i) {
			return GetToken(TSqlParser.BLOCKSIZE, i);
		}
		public ITerminalNode[] BUFFERCOUNT() { return GetTokens(TSqlParser.BUFFERCOUNT); }
		public ITerminalNode BUFFERCOUNT(int i) {
			return GetToken(TSqlParser.BUFFERCOUNT, i);
		}
		public ITerminalNode[] MAXTRANSFER() { return GetTokens(TSqlParser.MAXTRANSFER); }
		public ITerminalNode MAXTRANSFER(int i) {
			return GetToken(TSqlParser.MAXTRANSFER, i);
		}
		public ITerminalNode[] RESTART() { return GetTokens(TSqlParser.RESTART); }
		public ITerminalNode RESTART(int i) {
			return GetToken(TSqlParser.RESTART, i);
		}
		public ITerminalNode[] STATS() { return GetTokens(TSqlParser.STATS); }
		public ITerminalNode STATS(int i) {
			return GetToken(TSqlParser.STATS, i);
		}
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] ALGORITHM() { return GetTokens(TSqlParser.ALGORITHM); }
		public ITerminalNode ALGORITHM(int i) {
			return GetToken(TSqlParser.ALGORITHM, i);
		}
		public ITerminalNode[] SERVER() { return GetTokens(TSqlParser.SERVER); }
		public ITerminalNode SERVER(int i) {
			return GetToken(TSqlParser.SERVER, i);
		}
		public ITerminalNode[] CERTIFICATE() { return GetTokens(TSqlParser.CERTIFICATE); }
		public ITerminalNode CERTIFICATE(int i) {
			return GetToken(TSqlParser.CERTIFICATE, i);
		}
		public ITerminalNode[] COMPRESSION() { return GetTokens(TSqlParser.COMPRESSION); }
		public ITerminalNode COMPRESSION(int i) {
			return GetToken(TSqlParser.COMPRESSION, i);
		}
		public ITerminalNode[] NO_COMPRESSION() { return GetTokens(TSqlParser.NO_COMPRESSION); }
		public ITerminalNode NO_COMPRESSION(int i) {
			return GetToken(TSqlParser.NO_COMPRESSION, i);
		}
		public ITerminalNode[] NOINIT() { return GetTokens(TSqlParser.NOINIT); }
		public ITerminalNode NOINIT(int i) {
			return GetToken(TSqlParser.NOINIT, i);
		}
		public ITerminalNode[] INIT() { return GetTokens(TSqlParser.INIT); }
		public ITerminalNode INIT(int i) {
			return GetToken(TSqlParser.INIT, i);
		}
		public ITerminalNode[] NOSKIP() { return GetTokens(TSqlParser.NOSKIP); }
		public ITerminalNode NOSKIP(int i) {
			return GetToken(TSqlParser.NOSKIP, i);
		}
		public ITerminalNode[] SKIP_KEYWORD() { return GetTokens(TSqlParser.SKIP_KEYWORD); }
		public ITerminalNode SKIP_KEYWORD(int i) {
			return GetToken(TSqlParser.SKIP_KEYWORD, i);
		}
		public ITerminalNode[] NOFORMAT() { return GetTokens(TSqlParser.NOFORMAT); }
		public ITerminalNode NOFORMAT(int i) {
			return GetToken(TSqlParser.NOFORMAT, i);
		}
		public ITerminalNode[] FORMAT() { return GetTokens(TSqlParser.FORMAT); }
		public ITerminalNode FORMAT(int i) {
			return GetToken(TSqlParser.FORMAT, i);
		}
		public ITerminalNode[] NO_CHECKSUM() { return GetTokens(TSqlParser.NO_CHECKSUM); }
		public ITerminalNode NO_CHECKSUM(int i) {
			return GetToken(TSqlParser.NO_CHECKSUM, i);
		}
		public ITerminalNode[] CHECKSUM() { return GetTokens(TSqlParser.CHECKSUM); }
		public ITerminalNode CHECKSUM(int i) {
			return GetToken(TSqlParser.CHECKSUM, i);
		}
		public ITerminalNode[] STOP_ON_ERROR() { return GetTokens(TSqlParser.STOP_ON_ERROR); }
		public ITerminalNode STOP_ON_ERROR(int i) {
			return GetToken(TSqlParser.STOP_ON_ERROR, i);
		}
		public ITerminalNode[] CONTINUE_AFTER_ERROR() { return GetTokens(TSqlParser.CONTINUE_AFTER_ERROR); }
		public ITerminalNode CONTINUE_AFTER_ERROR(int i) {
			return GetToken(TSqlParser.CONTINUE_AFTER_ERROR, i);
		}
		public ITerminalNode[] REWIND() { return GetTokens(TSqlParser.REWIND); }
		public ITerminalNode REWIND(int i) {
			return GetToken(TSqlParser.REWIND, i);
		}
		public ITerminalNode[] NOREWIND() { return GetTokens(TSqlParser.NOREWIND); }
		public ITerminalNode NOREWIND(int i) {
			return GetToken(TSqlParser.NOREWIND, i);
		}
		public ITerminalNode[] LOAD() { return GetTokens(TSqlParser.LOAD); }
		public ITerminalNode LOAD(int i) {
			return GetToken(TSqlParser.LOAD, i);
		}
		public ITerminalNode[] NOUNLOAD() { return GetTokens(TSqlParser.NOUNLOAD); }
		public ITerminalNode NOUNLOAD(int i) {
			return GetToken(TSqlParser.NOUNLOAD, i);
		}
		public ITerminalNode[] AES_128() { return GetTokens(TSqlParser.AES_128); }
		public ITerminalNode AES_128(int i) {
			return GetToken(TSqlParser.AES_128, i);
		}
		public ITerminalNode[] AES_192() { return GetTokens(TSqlParser.AES_192); }
		public ITerminalNode AES_192(int i) {
			return GetToken(TSqlParser.AES_192, i);
		}
		public ITerminalNode[] AES_256() { return GetTokens(TSqlParser.AES_256); }
		public ITerminalNode AES_256(int i) {
			return GetToken(TSqlParser.AES_256, i);
		}
		public ITerminalNode[] TRIPLE_DES_3KEY() { return GetTokens(TSqlParser.TRIPLE_DES_3KEY); }
		public ITerminalNode TRIPLE_DES_3KEY(int i) {
			return GetToken(TSqlParser.TRIPLE_DES_3KEY, i);
		}
		public ITerminalNode[] EXPIREDATE() { return GetTokens(TSqlParser.EXPIREDATE); }
		public ITerminalNode EXPIREDATE(int i) {
			return GetToken(TSqlParser.EXPIREDATE, i);
		}
		public ITerminalNode[] RETAINDAYS() { return GetTokens(TSqlParser.RETAINDAYS); }
		public ITerminalNode RETAINDAYS(int i) {
			return GetToken(TSqlParser.RETAINDAYS, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] ASYMMETRIC() { return GetTokens(TSqlParser.ASYMMETRIC); }
		public ITerminalNode ASYMMETRIC(int i) {
			return GetToken(TSqlParser.ASYMMETRIC, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public Backup_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_database(this);
		}
	}

	[RuleVersion(0)]
	public Backup_databaseContext backup_database() {
		Backup_databaseContext _localctx = new Backup_databaseContext(_ctx, State);
		EnterRule(_localctx, 682, RULE_backup_database);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8276; Match(BACKUP);
			State = 8277; Match(DATABASE);
			{
			State = 8278; _localctx.database_name = id_();
			}
			State = 8291;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1097,_ctx) ) {
			case 1:
				{
				State = 8279; Match(READ_WRITE_FILEGROUPS);
				State = 8288;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1096,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8281;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1095,_ctx) ) {
						case 1:
							{
							State = 8280; Match(COMMA);
							}
							break;
						}
						State = 8283;
						_la = _input.La(1);
						if ( !(_la==FILE || _la==FILEGROUP) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 8284; Match(EQUAL);
						State = 8285; _localctx.file_or_filegroup = Match(STRING);
						}
						} 
					}
					State = 8290;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1096,_ctx);
				}
				}
				break;
			}
			State = 8301;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1099,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 8294;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1098,_ctx) ) {
					case 1:
						{
						State = 8293; Match(COMMA);
						}
						break;
					}
					State = 8296;
					_la = _input.La(1);
					if ( !(_la==FILE || _la==FILEGROUP) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 8297; Match(EQUAL);
					State = 8298; _localctx.file_or_filegroup = Match(STRING);
					}
					} 
				}
				State = 8303;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1099,_ctx);
			}
			State = 8327;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1105,_ctx) ) {
			case 1:
				{
				State = 8304; Match(TO);
				State = 8309;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 8306;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1100,_ctx) ) {
						case 1:
							{
							State = 8305; Match(COMMA);
							}
							break;
						}
						State = 8308; _localctx.logical_device_name = id_();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 8311;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1101,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				{
				State = 8313; Match(TO);
				State = 8323;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 8315;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1102,_ctx) ) {
						case 1:
							{
							State = 8314; Match(COMMA);
							}
							break;
						}
						State = 8317;
						_la = _input.La(1);
						if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 8318; Match(EQUAL);
						State = 8321;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1103,_ctx) ) {
						case 1:
							{
							State = 8319; Match(STRING);
							}
							break;

						case 2:
							{
							State = 8320; id_();
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 8325;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1104,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 8362;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1113,_ctx) ) {
			case 1:
				{
				State = 8339;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 8329; Match(MIRROR);
						State = 8330; Match(TO);
						State = 8335;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 8332;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1106,_ctx) ) {
								case 1:
									{
									State = 8331; Match(COMMA);
									}
									break;
								}
								State = 8334; _localctx.logical_device_name = id_();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 8337;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,1107,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 8341;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1108,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				{
				State = 8358;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 8343; Match(MIRROR);
						State = 8344; Match(TO);
						State = 8354;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 8346;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1109,_ctx) ) {
								case 1:
									{
									State = 8345; Match(COMMA);
									}
									break;
								}
								State = 8348;
								_la = _input.La(1);
								if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								State = 8349; Match(EQUAL);
								State = 8352;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1110,_ctx) ) {
								case 1:
									{
									State = 8350; Match(STRING);
									}
									break;

								case 2:
									{
									State = 8351; id_();
									}
									break;
								}
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 8356;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,1111,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 8360;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1112,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 8524;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1149,_ctx) ) {
			case 1:
				{
				State = 8364; Match(WITH);
				State = 8521;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1148,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						State = 8519;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1147,_ctx) ) {
						case 1:
							{
							State = 8366;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1114,_ctx) ) {
							case 1:
								{
								State = 8365; Match(COMMA);
								}
								break;
							}
							State = 8368; Match(DIFFERENTIAL);
							}
							break;

						case 2:
							{
							State = 8370;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1115,_ctx) ) {
							case 1:
								{
								State = 8369; Match(COMMA);
								}
								break;
							}
							State = 8372; Match(COPY_ONLY);
							}
							break;

						case 3:
							{
							State = 8374;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1116,_ctx) ) {
							case 1:
								{
								State = 8373; Match(COMMA);
								}
								break;
							}
							State = 8376;
							_la = _input.La(1);
							if ( !(_la==COMPRESSION || _la==NO_COMPRESSION) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 4:
							{
							State = 8378;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1117,_ctx) ) {
							case 1:
								{
								State = 8377; Match(COMMA);
								}
								break;
							}
							State = 8380; Match(DESCRIPTION);
							State = 8381; Match(EQUAL);
							State = 8384;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1118,_ctx) ) {
							case 1:
								{
								State = 8382; Match(STRING);
								}
								break;

							case 2:
								{
								State = 8383; id_();
								}
								break;
							}
							}
							break;

						case 5:
							{
							State = 8387;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1119,_ctx) ) {
							case 1:
								{
								State = 8386; Match(COMMA);
								}
								break;
							}
							State = 8389; Match(NAME);
							State = 8390; Match(EQUAL);
							State = 8391; _localctx.backup_set_name = id_();
							}
							break;

						case 6:
							{
							State = 8393;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1120,_ctx) ) {
							case 1:
								{
								State = 8392; Match(COMMA);
								}
								break;
							}
							State = 8395; Match(CREDENTIAL);
							}
							break;

						case 7:
							{
							State = 8397;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1121,_ctx) ) {
							case 1:
								{
								State = 8396; Match(COMMA);
								}
								break;
							}
							State = 8399; Match(FILE_SNAPSHOT);
							}
							break;

						case 8:
							{
							State = 8401;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1122,_ctx) ) {
							case 1:
								{
								State = 8400; Match(COMMA);
								}
								break;
							}
							State = 8415;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1125,_ctx) ) {
							case 1:
								{
								State = 8403; Match(EXPIREDATE);
								State = 8404; Match(EQUAL);
								State = 8407;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1123,_ctx) ) {
								case 1:
									{
									State = 8405; Match(STRING);
									}
									break;

								case 2:
									{
									State = 8406; id_();
									}
									break;
								}
								}
								break;

							case 2:
								{
								State = 8409; Match(RETAINDAYS);
								State = 8410; Match(EQUAL);
								State = 8413;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1124,_ctx) ) {
								case 1:
									{
									State = 8411; Match(DECIMAL);
									}
									break;

								case 2:
									{
									State = 8412; id_();
									}
									break;
								}
								}
								break;
							}
							}
							break;

						case 9:
							{
							State = 8418;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1126,_ctx) ) {
							case 1:
								{
								State = 8417; Match(COMMA);
								}
								break;
							}
							State = 8420;
							_la = _input.La(1);
							if ( !(_la==INIT || _la==NOINIT) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 10:
							{
							State = 8422;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1127,_ctx) ) {
							case 1:
								{
								State = 8421; Match(COMMA);
								}
								break;
							}
							State = 8424;
							_la = _input.La(1);
							if ( !(_la==NOSKIP || _la==SKIP_KEYWORD) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 11:
							{
							State = 8426;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1128,_ctx) ) {
							case 1:
								{
								State = 8425; Match(COMMA);
								}
								break;
							}
							State = 8428;
							_la = _input.La(1);
							if ( !(_la==FORMAT || _la==NOFORMAT) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 12:
							{
							State = 8430;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1129,_ctx) ) {
							case 1:
								{
								State = 8429; Match(COMMA);
								}
								break;
							}
							State = 8432; Match(MEDIADESCRIPTION);
							State = 8433; Match(EQUAL);
							State = 8436;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1130,_ctx) ) {
							case 1:
								{
								State = 8434; Match(STRING);
								}
								break;

							case 2:
								{
								State = 8435; id_();
								}
								break;
							}
							}
							break;

						case 13:
							{
							State = 8439;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1131,_ctx) ) {
							case 1:
								{
								State = 8438; Match(COMMA);
								}
								break;
							}
							State = 8441; Match(MEDIANAME);
							State = 8442; Match(EQUAL);
							{
							State = 8443; _localctx.medianame = Match(STRING);
							}
							}
							break;

						case 14:
							{
							State = 8445;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1132,_ctx) ) {
							case 1:
								{
								State = 8444; Match(COMMA);
								}
								break;
							}
							State = 8447; Match(BLOCKSIZE);
							State = 8448; Match(EQUAL);
							State = 8451;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1133,_ctx) ) {
							case 1:
								{
								State = 8449; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 8450; id_();
								}
								break;
							}
							}
							break;

						case 15:
							{
							State = 8454;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1134,_ctx) ) {
							case 1:
								{
								State = 8453; Match(COMMA);
								}
								break;
							}
							State = 8456; Match(BUFFERCOUNT);
							State = 8457; Match(EQUAL);
							State = 8460;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1135,_ctx) ) {
							case 1:
								{
								State = 8458; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 8459; id_();
								}
								break;
							}
							}
							break;

						case 16:
							{
							State = 8463;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1136,_ctx) ) {
							case 1:
								{
								State = 8462; Match(COMMA);
								}
								break;
							}
							State = 8465; Match(MAXTRANSFER);
							State = 8466; Match(EQUAL);
							State = 8469;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1137,_ctx) ) {
							case 1:
								{
								State = 8467; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 8468; id_();
								}
								break;
							}
							}
							break;

						case 17:
							{
							State = 8472;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1138,_ctx) ) {
							case 1:
								{
								State = 8471; Match(COMMA);
								}
								break;
							}
							State = 8474;
							_la = _input.La(1);
							if ( !(_la==CHECKSUM || _la==NO_CHECKSUM) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 18:
							{
							State = 8476;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1139,_ctx) ) {
							case 1:
								{
								State = 8475; Match(COMMA);
								}
								break;
							}
							State = 8478;
							_la = _input.La(1);
							if ( !(_la==CONTINUE_AFTER_ERROR || _la==STOP_ON_ERROR) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 19:
							{
							State = 8480;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1140,_ctx) ) {
							case 1:
								{
								State = 8479; Match(COMMA);
								}
								break;
							}
							State = 8482; Match(RESTART);
							}
							break;

						case 20:
							{
							State = 8484;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1141,_ctx) ) {
							case 1:
								{
								State = 8483; Match(COMMA);
								}
								break;
							}
							State = 8486; Match(STATS);
							State = 8489;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1142,_ctx) ) {
							case 1:
								{
								State = 8487; Match(EQUAL);
								State = 8488; _localctx.stats_percent = Match(DECIMAL);
								}
								break;
							}
							}
							break;

						case 21:
							{
							State = 8492;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1143,_ctx) ) {
							case 1:
								{
								State = 8491; Match(COMMA);
								}
								break;
							}
							State = 8494;
							_la = _input.La(1);
							if ( !(_la==NOREWIND || _la==REWIND) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 22:
							{
							State = 8496;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1144,_ctx) ) {
							case 1:
								{
								State = 8495; Match(COMMA);
								}
								break;
							}
							State = 8498;
							_la = _input.La(1);
							if ( !(_la==LOAD || _la==NOUNLOAD) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 23:
							{
							State = 8500;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1145,_ctx) ) {
							case 1:
								{
								State = 8499; Match(COMMA);
								}
								break;
							}
							State = 8502; Match(ENCRYPTION);
							State = 8503; Match(LR_BRACKET);
							State = 8504; Match(ALGORITHM);
							State = 8505; Match(EQUAL);
							State = 8506;
							_la = _input.La(1);
							if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AES_128) | (1L << AES_192) | (1L << AES_256))) != 0) || _la==TRIPLE_DES_3KEY) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							State = 8507; Match(COMMA);
							State = 8508; Match(SERVER);
							State = 8509; Match(CERTIFICATE);
							State = 8510; Match(EQUAL);
							State = 8517;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1146,_ctx) ) {
							case 1:
								{
								State = 8511; _localctx.encryptor_name = id_();
								}
								break;

							case 2:
								{
								State = 8512; Match(SERVER);
								State = 8513; Match(ASYMMETRIC);
								State = 8514; Match(KEY);
								State = 8515; Match(EQUAL);
								State = 8516; _localctx.encryptor_name = id_();
								}
								break;
							}
							}
							break;
						}
						} 
					}
					State = 8523;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1148,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_logContext : ParserRuleContext {
		public Id_Context database_name;
		public Id_Context logical_device_name;
		public Id_Context backup_set_name;
		public IToken medianame;
		public IToken stats_percent;
		public IToken undo_file_name;
		public Id_Context encryptor_name;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] DISK() { return GetTokens(TSqlParser.DISK); }
		public ITerminalNode DISK(int i) {
			return GetToken(TSqlParser.DISK, i);
		}
		public ITerminalNode[] TAPE() { return GetTokens(TSqlParser.TAPE); }
		public ITerminalNode TAPE(int i) {
			return GetToken(TSqlParser.TAPE, i);
		}
		public ITerminalNode[] URL() { return GetTokens(TSqlParser.URL); }
		public ITerminalNode URL(int i) {
			return GetToken(TSqlParser.URL, i);
		}
		public ITerminalNode[] MIRROR() { return GetTokens(TSqlParser.MIRROR); }
		public ITerminalNode MIRROR(int i) {
			return GetToken(TSqlParser.MIRROR, i);
		}
		public ITerminalNode[] DIFFERENTIAL() { return GetTokens(TSqlParser.DIFFERENTIAL); }
		public ITerminalNode DIFFERENTIAL(int i) {
			return GetToken(TSqlParser.DIFFERENTIAL, i);
		}
		public ITerminalNode[] COPY_ONLY() { return GetTokens(TSqlParser.COPY_ONLY); }
		public ITerminalNode COPY_ONLY(int i) {
			return GetToken(TSqlParser.COPY_ONLY, i);
		}
		public ITerminalNode[] DESCRIPTION() { return GetTokens(TSqlParser.DESCRIPTION); }
		public ITerminalNode DESCRIPTION(int i) {
			return GetToken(TSqlParser.DESCRIPTION, i);
		}
		public ITerminalNode[] NAME() { return GetTokens(TSqlParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(TSqlParser.NAME, i);
		}
		public ITerminalNode[] CREDENTIAL() { return GetTokens(TSqlParser.CREDENTIAL); }
		public ITerminalNode CREDENTIAL(int i) {
			return GetToken(TSqlParser.CREDENTIAL, i);
		}
		public ITerminalNode[] FILE_SNAPSHOT() { return GetTokens(TSqlParser.FILE_SNAPSHOT); }
		public ITerminalNode FILE_SNAPSHOT(int i) {
			return GetToken(TSqlParser.FILE_SNAPSHOT, i);
		}
		public ITerminalNode[] MEDIADESCRIPTION() { return GetTokens(TSqlParser.MEDIADESCRIPTION); }
		public ITerminalNode MEDIADESCRIPTION(int i) {
			return GetToken(TSqlParser.MEDIADESCRIPTION, i);
		}
		public ITerminalNode[] MEDIANAME() { return GetTokens(TSqlParser.MEDIANAME); }
		public ITerminalNode MEDIANAME(int i) {
			return GetToken(TSqlParser.MEDIANAME, i);
		}
		public ITerminalNode[] BLOCKSIZE() { return GetTokens(TSqlParser.BLOCKSIZE); }
		public ITerminalNode BLOCKSIZE(int i) {
			return GetToken(TSqlParser.BLOCKSIZE, i);
		}
		public ITerminalNode[] BUFFERCOUNT() { return GetTokens(TSqlParser.BUFFERCOUNT); }
		public ITerminalNode BUFFERCOUNT(int i) {
			return GetToken(TSqlParser.BUFFERCOUNT, i);
		}
		public ITerminalNode[] MAXTRANSFER() { return GetTokens(TSqlParser.MAXTRANSFER); }
		public ITerminalNode MAXTRANSFER(int i) {
			return GetToken(TSqlParser.MAXTRANSFER, i);
		}
		public ITerminalNode[] RESTART() { return GetTokens(TSqlParser.RESTART); }
		public ITerminalNode RESTART(int i) {
			return GetToken(TSqlParser.RESTART, i);
		}
		public ITerminalNode[] STATS() { return GetTokens(TSqlParser.STATS); }
		public ITerminalNode STATS(int i) {
			return GetToken(TSqlParser.STATS, i);
		}
		public ITerminalNode[] NO_TRUNCATE() { return GetTokens(TSqlParser.NO_TRUNCATE); }
		public ITerminalNode NO_TRUNCATE(int i) {
			return GetToken(TSqlParser.NO_TRUNCATE, i);
		}
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] ALGORITHM() { return GetTokens(TSqlParser.ALGORITHM); }
		public ITerminalNode ALGORITHM(int i) {
			return GetToken(TSqlParser.ALGORITHM, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] SERVER() { return GetTokens(TSqlParser.SERVER); }
		public ITerminalNode SERVER(int i) {
			return GetToken(TSqlParser.SERVER, i);
		}
		public ITerminalNode[] CERTIFICATE() { return GetTokens(TSqlParser.CERTIFICATE); }
		public ITerminalNode CERTIFICATE(int i) {
			return GetToken(TSqlParser.CERTIFICATE, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] COMPRESSION() { return GetTokens(TSqlParser.COMPRESSION); }
		public ITerminalNode COMPRESSION(int i) {
			return GetToken(TSqlParser.COMPRESSION, i);
		}
		public ITerminalNode[] NO_COMPRESSION() { return GetTokens(TSqlParser.NO_COMPRESSION); }
		public ITerminalNode NO_COMPRESSION(int i) {
			return GetToken(TSqlParser.NO_COMPRESSION, i);
		}
		public ITerminalNode[] NOINIT() { return GetTokens(TSqlParser.NOINIT); }
		public ITerminalNode NOINIT(int i) {
			return GetToken(TSqlParser.NOINIT, i);
		}
		public ITerminalNode[] INIT() { return GetTokens(TSqlParser.INIT); }
		public ITerminalNode INIT(int i) {
			return GetToken(TSqlParser.INIT, i);
		}
		public ITerminalNode[] NOSKIP() { return GetTokens(TSqlParser.NOSKIP); }
		public ITerminalNode NOSKIP(int i) {
			return GetToken(TSqlParser.NOSKIP, i);
		}
		public ITerminalNode[] SKIP_KEYWORD() { return GetTokens(TSqlParser.SKIP_KEYWORD); }
		public ITerminalNode SKIP_KEYWORD(int i) {
			return GetToken(TSqlParser.SKIP_KEYWORD, i);
		}
		public ITerminalNode[] NOFORMAT() { return GetTokens(TSqlParser.NOFORMAT); }
		public ITerminalNode NOFORMAT(int i) {
			return GetToken(TSqlParser.NOFORMAT, i);
		}
		public ITerminalNode[] FORMAT() { return GetTokens(TSqlParser.FORMAT); }
		public ITerminalNode FORMAT(int i) {
			return GetToken(TSqlParser.FORMAT, i);
		}
		public ITerminalNode[] NO_CHECKSUM() { return GetTokens(TSqlParser.NO_CHECKSUM); }
		public ITerminalNode NO_CHECKSUM(int i) {
			return GetToken(TSqlParser.NO_CHECKSUM, i);
		}
		public ITerminalNode[] CHECKSUM() { return GetTokens(TSqlParser.CHECKSUM); }
		public ITerminalNode CHECKSUM(int i) {
			return GetToken(TSqlParser.CHECKSUM, i);
		}
		public ITerminalNode[] STOP_ON_ERROR() { return GetTokens(TSqlParser.STOP_ON_ERROR); }
		public ITerminalNode STOP_ON_ERROR(int i) {
			return GetToken(TSqlParser.STOP_ON_ERROR, i);
		}
		public ITerminalNode[] CONTINUE_AFTER_ERROR() { return GetTokens(TSqlParser.CONTINUE_AFTER_ERROR); }
		public ITerminalNode CONTINUE_AFTER_ERROR(int i) {
			return GetToken(TSqlParser.CONTINUE_AFTER_ERROR, i);
		}
		public ITerminalNode[] REWIND() { return GetTokens(TSqlParser.REWIND); }
		public ITerminalNode REWIND(int i) {
			return GetToken(TSqlParser.REWIND, i);
		}
		public ITerminalNode[] NOREWIND() { return GetTokens(TSqlParser.NOREWIND); }
		public ITerminalNode NOREWIND(int i) {
			return GetToken(TSqlParser.NOREWIND, i);
		}
		public ITerminalNode[] LOAD() { return GetTokens(TSqlParser.LOAD); }
		public ITerminalNode LOAD(int i) {
			return GetToken(TSqlParser.LOAD, i);
		}
		public ITerminalNode[] NOUNLOAD() { return GetTokens(TSqlParser.NOUNLOAD); }
		public ITerminalNode NOUNLOAD(int i) {
			return GetToken(TSqlParser.NOUNLOAD, i);
		}
		public ITerminalNode[] AES_128() { return GetTokens(TSqlParser.AES_128); }
		public ITerminalNode AES_128(int i) {
			return GetToken(TSqlParser.AES_128, i);
		}
		public ITerminalNode[] AES_192() { return GetTokens(TSqlParser.AES_192); }
		public ITerminalNode AES_192(int i) {
			return GetToken(TSqlParser.AES_192, i);
		}
		public ITerminalNode[] AES_256() { return GetTokens(TSqlParser.AES_256); }
		public ITerminalNode AES_256(int i) {
			return GetToken(TSqlParser.AES_256, i);
		}
		public ITerminalNode[] TRIPLE_DES_3KEY() { return GetTokens(TSqlParser.TRIPLE_DES_3KEY); }
		public ITerminalNode TRIPLE_DES_3KEY(int i) {
			return GetToken(TSqlParser.TRIPLE_DES_3KEY, i);
		}
		public ITerminalNode[] EXPIREDATE() { return GetTokens(TSqlParser.EXPIREDATE); }
		public ITerminalNode EXPIREDATE(int i) {
			return GetToken(TSqlParser.EXPIREDATE, i);
		}
		public ITerminalNode[] RETAINDAYS() { return GetTokens(TSqlParser.RETAINDAYS); }
		public ITerminalNode RETAINDAYS(int i) {
			return GetToken(TSqlParser.RETAINDAYS, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] NORECOVERY() { return GetTokens(TSqlParser.NORECOVERY); }
		public ITerminalNode NORECOVERY(int i) {
			return GetToken(TSqlParser.NORECOVERY, i);
		}
		public ITerminalNode[] STANDBY() { return GetTokens(TSqlParser.STANDBY); }
		public ITerminalNode STANDBY(int i) {
			return GetToken(TSqlParser.STANDBY, i);
		}
		public ITerminalNode[] ASYMMETRIC() { return GetTokens(TSqlParser.ASYMMETRIC); }
		public ITerminalNode ASYMMETRIC(int i) {
			return GetToken(TSqlParser.ASYMMETRIC, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public Backup_logContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_log; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_log(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_log(this);
		}
	}

	[RuleVersion(0)]
	public Backup_logContext backup_log() {
		Backup_logContext _localctx = new Backup_logContext(_ctx, State);
		EnterRule(_localctx, 684, RULE_backup_log);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8526; Match(BACKUP);
			State = 8527; Match(LOG);
			{
			State = 8528; _localctx.database_name = id_();
			}
			State = 8552;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1155,_ctx) ) {
			case 1:
				{
				State = 8529; Match(TO);
				State = 8534;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 8531;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1150,_ctx) ) {
						case 1:
							{
							State = 8530; Match(COMMA);
							}
							break;
						}
						State = 8533; _localctx.logical_device_name = id_();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 8536;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1151,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				{
				State = 8538; Match(TO);
				State = 8548;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 8540;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1152,_ctx) ) {
						case 1:
							{
							State = 8539; Match(COMMA);
							}
							break;
						}
						State = 8542;
						_la = _input.La(1);
						if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 8543; Match(EQUAL);
						State = 8546;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1153,_ctx) ) {
						case 1:
							{
							State = 8544; Match(STRING);
							}
							break;

						case 2:
							{
							State = 8545; id_();
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 8550;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1154,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 8587;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1163,_ctx) ) {
			case 1:
				{
				State = 8564;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 8554; Match(MIRROR);
						State = 8555; Match(TO);
						State = 8560;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 8557;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1156,_ctx) ) {
								case 1:
									{
									State = 8556; Match(COMMA);
									}
									break;
								}
								State = 8559; _localctx.logical_device_name = id_();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 8562;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,1157,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 8566;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1158,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				{
				State = 8583;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 8568; Match(MIRROR);
						State = 8569; Match(TO);
						State = 8579;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 8571;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1159,_ctx) ) {
								case 1:
									{
									State = 8570; Match(COMMA);
									}
									break;
								}
								State = 8573;
								_la = _input.La(1);
								if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								State = 8574; Match(EQUAL);
								State = 8577;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1160,_ctx) ) {
								case 1:
									{
									State = 8575; Match(STRING);
									}
									break;

								case 2:
									{
									State = 8576; id_();
									}
									break;
								}
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 8581;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,1161,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 8585;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1162,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 8762;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1202,_ctx) ) {
			case 1:
				{
				State = 8589; Match(WITH);
				State = 8759;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1201,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						State = 8757;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1200,_ctx) ) {
						case 1:
							{
							State = 8591;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1164,_ctx) ) {
							case 1:
								{
								State = 8590; Match(COMMA);
								}
								break;
							}
							State = 8593; Match(DIFFERENTIAL);
							}
							break;

						case 2:
							{
							State = 8595;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1165,_ctx) ) {
							case 1:
								{
								State = 8594; Match(COMMA);
								}
								break;
							}
							State = 8597; Match(COPY_ONLY);
							}
							break;

						case 3:
							{
							State = 8599;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1166,_ctx) ) {
							case 1:
								{
								State = 8598; Match(COMMA);
								}
								break;
							}
							State = 8601;
							_la = _input.La(1);
							if ( !(_la==COMPRESSION || _la==NO_COMPRESSION) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 4:
							{
							State = 8603;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1167,_ctx) ) {
							case 1:
								{
								State = 8602; Match(COMMA);
								}
								break;
							}
							State = 8605; Match(DESCRIPTION);
							State = 8606; Match(EQUAL);
							State = 8609;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1168,_ctx) ) {
							case 1:
								{
								State = 8607; Match(STRING);
								}
								break;

							case 2:
								{
								State = 8608; id_();
								}
								break;
							}
							}
							break;

						case 5:
							{
							State = 8612;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1169,_ctx) ) {
							case 1:
								{
								State = 8611; Match(COMMA);
								}
								break;
							}
							State = 8614; Match(NAME);
							State = 8615; Match(EQUAL);
							State = 8616; _localctx.backup_set_name = id_();
							}
							break;

						case 6:
							{
							State = 8618;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1170,_ctx) ) {
							case 1:
								{
								State = 8617; Match(COMMA);
								}
								break;
							}
							State = 8620; Match(CREDENTIAL);
							}
							break;

						case 7:
							{
							State = 8622;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1171,_ctx) ) {
							case 1:
								{
								State = 8621; Match(COMMA);
								}
								break;
							}
							State = 8624; Match(FILE_SNAPSHOT);
							}
							break;

						case 8:
							{
							State = 8626;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1172,_ctx) ) {
							case 1:
								{
								State = 8625; Match(COMMA);
								}
								break;
							}
							State = 8640;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1175,_ctx) ) {
							case 1:
								{
								State = 8628; Match(EXPIREDATE);
								State = 8629; Match(EQUAL);
								State = 8632;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1173,_ctx) ) {
								case 1:
									{
									State = 8630; Match(STRING);
									}
									break;

								case 2:
									{
									State = 8631; id_();
									}
									break;
								}
								}
								break;

							case 2:
								{
								State = 8634; Match(RETAINDAYS);
								State = 8635; Match(EQUAL);
								State = 8638;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1174,_ctx) ) {
								case 1:
									{
									State = 8636; Match(DECIMAL);
									}
									break;

								case 2:
									{
									State = 8637; id_();
									}
									break;
								}
								}
								break;
							}
							}
							break;

						case 9:
							{
							State = 8643;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1176,_ctx) ) {
							case 1:
								{
								State = 8642; Match(COMMA);
								}
								break;
							}
							State = 8645;
							_la = _input.La(1);
							if ( !(_la==INIT || _la==NOINIT) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 10:
							{
							State = 8647;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1177,_ctx) ) {
							case 1:
								{
								State = 8646; Match(COMMA);
								}
								break;
							}
							State = 8649;
							_la = _input.La(1);
							if ( !(_la==NOSKIP || _la==SKIP_KEYWORD) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 11:
							{
							State = 8651;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1178,_ctx) ) {
							case 1:
								{
								State = 8650; Match(COMMA);
								}
								break;
							}
							State = 8653;
							_la = _input.La(1);
							if ( !(_la==FORMAT || _la==NOFORMAT) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 12:
							{
							State = 8655;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1179,_ctx) ) {
							case 1:
								{
								State = 8654; Match(COMMA);
								}
								break;
							}
							State = 8657; Match(MEDIADESCRIPTION);
							State = 8658; Match(EQUAL);
							State = 8661;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1180,_ctx) ) {
							case 1:
								{
								State = 8659; Match(STRING);
								}
								break;

							case 2:
								{
								State = 8660; id_();
								}
								break;
							}
							}
							break;

						case 13:
							{
							State = 8664;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1181,_ctx) ) {
							case 1:
								{
								State = 8663; Match(COMMA);
								}
								break;
							}
							State = 8666; Match(MEDIANAME);
							State = 8667; Match(EQUAL);
							{
							State = 8668; _localctx.medianame = Match(STRING);
							}
							}
							break;

						case 14:
							{
							State = 8670;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1182,_ctx) ) {
							case 1:
								{
								State = 8669; Match(COMMA);
								}
								break;
							}
							State = 8672; Match(BLOCKSIZE);
							State = 8673; Match(EQUAL);
							State = 8676;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1183,_ctx) ) {
							case 1:
								{
								State = 8674; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 8675; id_();
								}
								break;
							}
							}
							break;

						case 15:
							{
							State = 8679;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1184,_ctx) ) {
							case 1:
								{
								State = 8678; Match(COMMA);
								}
								break;
							}
							State = 8681; Match(BUFFERCOUNT);
							State = 8682; Match(EQUAL);
							State = 8685;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1185,_ctx) ) {
							case 1:
								{
								State = 8683; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 8684; id_();
								}
								break;
							}
							}
							break;

						case 16:
							{
							State = 8688;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1186,_ctx) ) {
							case 1:
								{
								State = 8687; Match(COMMA);
								}
								break;
							}
							State = 8690; Match(MAXTRANSFER);
							State = 8691; Match(EQUAL);
							State = 8694;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1187,_ctx) ) {
							case 1:
								{
								State = 8692; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 8693; id_();
								}
								break;
							}
							}
							break;

						case 17:
							{
							State = 8697;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1188,_ctx) ) {
							case 1:
								{
								State = 8696; Match(COMMA);
								}
								break;
							}
							State = 8699;
							_la = _input.La(1);
							if ( !(_la==CHECKSUM || _la==NO_CHECKSUM) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 18:
							{
							State = 8701;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1189,_ctx) ) {
							case 1:
								{
								State = 8700; Match(COMMA);
								}
								break;
							}
							State = 8703;
							_la = _input.La(1);
							if ( !(_la==CONTINUE_AFTER_ERROR || _la==STOP_ON_ERROR) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 19:
							{
							State = 8705;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1190,_ctx) ) {
							case 1:
								{
								State = 8704; Match(COMMA);
								}
								break;
							}
							State = 8707; Match(RESTART);
							}
							break;

						case 20:
							{
							State = 8709;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1191,_ctx) ) {
							case 1:
								{
								State = 8708; Match(COMMA);
								}
								break;
							}
							State = 8711; Match(STATS);
							State = 8714;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1192,_ctx) ) {
							case 1:
								{
								State = 8712; Match(EQUAL);
								State = 8713; _localctx.stats_percent = Match(DECIMAL);
								}
								break;
							}
							}
							break;

						case 21:
							{
							State = 8717;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1193,_ctx) ) {
							case 1:
								{
								State = 8716; Match(COMMA);
								}
								break;
							}
							State = 8719;
							_la = _input.La(1);
							if ( !(_la==NOREWIND || _la==REWIND) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 22:
							{
							State = 8721;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1194,_ctx) ) {
							case 1:
								{
								State = 8720; Match(COMMA);
								}
								break;
							}
							State = 8723;
							_la = _input.La(1);
							if ( !(_la==LOAD || _la==NOUNLOAD) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 23:
							{
							State = 8725;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1195,_ctx) ) {
							case 1:
								{
								State = 8724; Match(COMMA);
								}
								break;
							}
							State = 8731;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1196,_ctx) ) {
							case 1:
								{
								State = 8727; Match(NORECOVERY);
								}
								break;

							case 2:
								{
								State = 8728; Match(STANDBY);
								State = 8729; Match(EQUAL);
								State = 8730; _localctx.undo_file_name = Match(STRING);
								}
								break;
							}
							}
							break;

						case 24:
							{
							State = 8734;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1197,_ctx) ) {
							case 1:
								{
								State = 8733; Match(COMMA);
								}
								break;
							}
							State = 8736; Match(NO_TRUNCATE);
							}
							break;

						case 25:
							{
							State = 8738;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1198,_ctx) ) {
							case 1:
								{
								State = 8737; Match(COMMA);
								}
								break;
							}
							State = 8740; Match(ENCRYPTION);
							State = 8741; Match(LR_BRACKET);
							State = 8742; Match(ALGORITHM);
							State = 8743; Match(EQUAL);
							State = 8744;
							_la = _input.La(1);
							if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AES_128) | (1L << AES_192) | (1L << AES_256))) != 0) || _la==TRIPLE_DES_3KEY) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							State = 8745; Match(COMMA);
							State = 8746; Match(SERVER);
							State = 8747; Match(CERTIFICATE);
							State = 8748; Match(EQUAL);
							State = 8755;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1199,_ctx) ) {
							case 1:
								{
								State = 8749; _localctx.encryptor_name = id_();
								}
								break;

							case 2:
								{
								State = 8750; Match(SERVER);
								State = 8751; Match(ASYMMETRIC);
								State = 8752; Match(KEY);
								State = 8753; Match(EQUAL);
								State = 8754; _localctx.encryptor_name = id_();
								}
								break;
							}
							}
							break;
						}
						} 
					}
					State = 8761;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1201,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_certificateContext : ParserRuleContext {
		public Id_Context certname;
		public IToken cert_file;
		public IToken private_key_file;
		public IToken encryption_password;
		public IToken decryption_pasword;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode[] FILE() { return GetTokens(TSqlParser.FILE); }
		public ITerminalNode FILE(int i) {
			return GetToken(TSqlParser.FILE, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public ITerminalNode[] PASSWORD() { return GetTokens(TSqlParser.PASSWORD); }
		public ITerminalNode PASSWORD(int i) {
			return GetToken(TSqlParser.PASSWORD, i);
		}
		public ITerminalNode[] DECRYPTION() { return GetTokens(TSqlParser.DECRYPTION); }
		public ITerminalNode DECRYPTION(int i) {
			return GetToken(TSqlParser.DECRYPTION, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Backup_certificateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_certificate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_certificate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_certificate(this);
		}
	}

	[RuleVersion(0)]
	public Backup_certificateContext backup_certificate() {
		Backup_certificateContext _localctx = new Backup_certificateContext(_ctx, State);
		EnterRule(_localctx, 686, RULE_backup_certificate);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8764; Match(BACKUP);
			State = 8765; Match(CERTIFICATE);
			State = 8766; _localctx.certname = id_();
			State = 8767; Match(TO);
			State = 8768; Match(FILE);
			State = 8769; Match(EQUAL);
			State = 8770; _localctx.cert_file = Match(STRING);
			State = 8802;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1208,_ctx) ) {
			case 1:
				{
				State = 8771; Match(WITH);
				State = 8772; Match(PRIVATE);
				State = 8773; Match(KEY);
				State = 8774; Match(LR_BRACKET);
				State = 8797;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 8797;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1206,_ctx) ) {
						case 1:
							{
							State = 8776;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1203,_ctx) ) {
							case 1:
								{
								State = 8775; Match(COMMA);
								}
								break;
							}
							State = 8778; Match(FILE);
							State = 8779; Match(EQUAL);
							State = 8780; _localctx.private_key_file = Match(STRING);
							}
							break;

						case 2:
							{
							State = 8782;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1204,_ctx) ) {
							case 1:
								{
								State = 8781; Match(COMMA);
								}
								break;
							}
							State = 8784; Match(ENCRYPTION);
							State = 8785; Match(BY);
							State = 8786; Match(PASSWORD);
							State = 8787; Match(EQUAL);
							State = 8788; _localctx.encryption_password = Match(STRING);
							}
							break;

						case 3:
							{
							State = 8790;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1205,_ctx) ) {
							case 1:
								{
								State = 8789; Match(COMMA);
								}
								break;
							}
							State = 8792; Match(DECRYPTION);
							State = 8793; Match(BY);
							State = 8794; Match(PASSWORD);
							State = 8795; Match(EQUAL);
							State = 8796; _localctx.decryption_pasword = Match(STRING);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 8799;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1207,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 8801; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_master_keyContext : ParserRuleContext {
		public IToken master_key_backup_file;
		public IToken encryption_password;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Backup_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_master_key(this);
		}
	}

	[RuleVersion(0)]
	public Backup_master_keyContext backup_master_key() {
		Backup_master_keyContext _localctx = new Backup_master_keyContext(_ctx, State);
		EnterRule(_localctx, 688, RULE_backup_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8804; Match(BACKUP);
			State = 8805; Match(MASTER);
			State = 8806; Match(KEY);
			State = 8807; Match(TO);
			State = 8808; Match(FILE);
			State = 8809; Match(EQUAL);
			State = 8810; _localctx.master_key_backup_file = Match(STRING);
			State = 8811; Match(ENCRYPTION);
			State = 8812; Match(BY);
			State = 8813; Match(PASSWORD);
			State = 8814; Match(EQUAL);
			State = 8815; _localctx.encryption_password = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_service_master_keyContext : ParserRuleContext {
		public IToken service_master_key_backup_file;
		public IToken encryption_password;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Backup_service_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_service_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_service_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_service_master_key(this);
		}
	}

	[RuleVersion(0)]
	public Backup_service_master_keyContext backup_service_master_key() {
		Backup_service_master_keyContext _localctx = new Backup_service_master_keyContext(_ctx, State);
		EnterRule(_localctx, 690, RULE_backup_service_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8817; Match(BACKUP);
			State = 8818; Match(SERVICE);
			State = 8819; Match(MASTER);
			State = 8820; Match(KEY);
			State = 8821; Match(TO);
			State = 8822; Match(FILE);
			State = 8823; Match(EQUAL);
			State = 8824; _localctx.service_master_key_backup_file = Match(STRING);
			State = 8825; Match(ENCRYPTION);
			State = 8826; Match(BY);
			State = 8827; Match(PASSWORD);
			State = 8828; Match(EQUAL);
			State = 8829; _localctx.encryption_password = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kill_statementContext : ParserRuleContext {
		public ITerminalNode KILL() { return GetToken(TSqlParser.KILL, 0); }
		public Kill_processContext kill_process() {
			return GetRuleContext<Kill_processContext>(0);
		}
		public Kill_query_notificationContext kill_query_notification() {
			return GetRuleContext<Kill_query_notificationContext>(0);
		}
		public Kill_stats_jobContext kill_stats_job() {
			return GetRuleContext<Kill_stats_jobContext>(0);
		}
		public Kill_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kill_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKill_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKill_statement(this);
		}
	}

	[RuleVersion(0)]
	public Kill_statementContext kill_statement() {
		Kill_statementContext _localctx = new Kill_statementContext(_ctx, State);
		EnterRule(_localctx, 692, RULE_kill_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8831; Match(KILL);
			State = 8835;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1209,_ctx) ) {
			case 1:
				{
				State = 8832; kill_process();
				}
				break;

			case 2:
				{
				State = 8833; kill_query_notification();
				}
				break;

			case 3:
				{
				State = 8834; kill_stats_job();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kill_processContext : ParserRuleContext {
		public IToken session_id;
		public ITerminalNode UOW() { return GetToken(TSqlParser.UOW, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STATUSONLY() { return GetToken(TSqlParser.STATUSONLY, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Kill_processContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kill_process; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKill_process(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKill_process(this);
		}
	}

	[RuleVersion(0)]
	public Kill_processContext kill_process() {
		Kill_processContext _localctx = new Kill_processContext(_ctx, State);
		EnterRule(_localctx, 694, RULE_kill_process);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8839;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1210,_ctx) ) {
			case 1:
				{
				State = 8837;
				_localctx.session_id = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==DECIMAL || _la==STRING) ) {
					_localctx.session_id = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				{
				State = 8838; Match(UOW);
				}
				break;
			}
			State = 8843;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1211,_ctx) ) {
			case 1:
				{
				State = 8841; Match(WITH);
				State = 8842; Match(STATUSONLY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kill_query_notificationContext : ParserRuleContext {
		public IToken subscription_id;
		public ITerminalNode QUERY() { return GetToken(TSqlParser.QUERY, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode SUBSCRIPTION() { return GetToken(TSqlParser.SUBSCRIPTION, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Kill_query_notificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kill_query_notification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKill_query_notification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKill_query_notification(this);
		}
	}

	[RuleVersion(0)]
	public Kill_query_notificationContext kill_query_notification() {
		Kill_query_notificationContext _localctx = new Kill_query_notificationContext(_ctx, State);
		EnterRule(_localctx, 696, RULE_kill_query_notification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8845; Match(QUERY);
			State = 8846; Match(NOTIFICATION);
			State = 8847; Match(SUBSCRIPTION);
			State = 8850;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1212,_ctx) ) {
			case 1:
				{
				State = 8848; Match(ALL);
				}
				break;

			case 2:
				{
				State = 8849; _localctx.subscription_id = Match(DECIMAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kill_stats_jobContext : ParserRuleContext {
		public IToken job_id;
		public ITerminalNode STATS() { return GetToken(TSqlParser.STATS, 0); }
		public ITerminalNode JOB() { return GetToken(TSqlParser.JOB, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Kill_stats_jobContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kill_stats_job; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKill_stats_job(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKill_stats_job(this);
		}
	}

	[RuleVersion(0)]
	public Kill_stats_jobContext kill_stats_job() {
		Kill_stats_jobContext _localctx = new Kill_stats_jobContext(_ctx, State);
		EnterRule(_localctx, 698, RULE_kill_stats_job);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8852; Match(STATS);
			State = 8853; Match(JOB);
			State = 8854; _localctx.job_id = Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statementContext : ParserRuleContext {
		public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		public Execute_bodyContext execute_body() {
			return GetRuleContext<Execute_bodyContext>(0);
		}
		public Execute_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_statement(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statementContext execute_statement() {
		Execute_statementContext _localctx = new Execute_statementContext(_ctx, State);
		EnterRule(_localctx, 700, RULE_execute_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8856; Match(EXECUTE);
			State = 8857; execute_body();
			State = 8859;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1213,_ctx) ) {
			case 1:
				{
				State = 8858; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_body_batchContext : ParserRuleContext {
		public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return GetRuleContext<Func_proc_name_server_database_schemaContext>(0);
		}
		public Execute_statement_argContext[] execute_statement_arg() {
			return GetRuleContexts<Execute_statement_argContext>();
		}
		public Execute_statement_argContext execute_statement_arg(int i) {
			return GetRuleContext<Execute_statement_argContext>(i);
		}
		public Execute_body_batchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_body_batch; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_body_batch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_body_batch(this);
		}
	}

	[RuleVersion(0)]
	public Execute_body_batchContext execute_body_batch() {
		Execute_body_batchContext _localctx = new Execute_body_batchContext(_ctx, State);
		EnterRule(_localctx, 702, RULE_execute_body_batch);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8861; func_proc_name_server_database_schema();
			State = 8870;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1215,_ctx) ) {
			case 1:
				{
				State = 8862; execute_statement_arg();
				State = 8867;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1214,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8863; Match(COMMA);
						State = 8864; execute_statement_arg();
						}
						} 
					}
					State = 8869;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1214,_ctx);
				}
				}
				break;
			}
			State = 8873;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1216,_ctx) ) {
			case 1:
				{
				State = 8872; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_bodyContext : ParserRuleContext {
		public IToken return_status;
		public Id_Context linkedServer;
		public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return GetRuleContext<Func_proc_name_server_database_schemaContext>(0);
		}
		public Execute_var_stringContext[] execute_var_string() {
			return GetRuleContexts<Execute_var_stringContext>();
		}
		public Execute_var_stringContext execute_var_string(int i) {
			return GetRuleContext<Execute_var_stringContext>(i);
		}
		public Execute_statement_argContext execute_statement_arg() {
			return GetRuleContext<Execute_statement_argContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode AT_KEYWORD() { return GetToken(TSqlParser.AT_KEYWORD, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Execute_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_body(this);
		}
	}

	[RuleVersion(0)]
	public Execute_bodyContext execute_body() {
		Execute_bodyContext _localctx = new Execute_bodyContext(_ctx, State);
		EnterRule(_localctx, 704, RULE_execute_body);
		int _la;
		try {
			int _alt;
			State = 8908;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1224,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8877;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1217,_ctx) ) {
				case 1:
					{
					State = 8875; _localctx.return_status = Match(LOCAL_ID);
					State = 8876; Match(EQUAL);
					}
					break;
				}
				State = 8881;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1218,_ctx) ) {
				case 1:
					{
					State = 8879; func_proc_name_server_database_schema();
					}
					break;

				case 2:
					{
					State = 8880; execute_var_string();
					}
					break;
				}
				State = 8884;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1219,_ctx) ) {
				case 1:
					{
					State = 8883; execute_statement_arg();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8886; Match(LR_BRACKET);
				State = 8887; execute_var_string();
				State = 8892;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1220,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8888; Match(COMMA);
						State = 8889; execute_var_string();
						}
						} 
					}
					State = 8894;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1220,_ctx);
				}
				State = 8895; Match(RR_BRACKET);
				State = 8902;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1222,_ctx) ) {
				case 1:
					{
					State = 8897;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1221,_ctx) ) {
					case 1:
						{
						State = 8896; Match(AS);
						}
						break;
					}
					State = 8899;
					_la = _input.La(1);
					if ( !(_la==LOGIN || _la==USER) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 8900; Match(EQUAL);
					State = 8901; Match(STRING);
					}
					break;
				}
				State = 8906;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1223,_ctx) ) {
				case 1:
					{
					State = 8904; Match(AT_KEYWORD);
					State = 8905; _localctx.linkedServer = id_();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statement_argContext : ParserRuleContext {
		public Execute_statement_arg_unnamedContext execute_statement_arg_unnamed() {
			return GetRuleContext<Execute_statement_arg_unnamedContext>(0);
		}
		public Execute_statement_argContext[] execute_statement_arg() {
			return GetRuleContexts<Execute_statement_argContext>();
		}
		public Execute_statement_argContext execute_statement_arg(int i) {
			return GetRuleContext<Execute_statement_argContext>(i);
		}
		public Execute_statement_arg_namedContext[] execute_statement_arg_named() {
			return GetRuleContexts<Execute_statement_arg_namedContext>();
		}
		public Execute_statement_arg_namedContext execute_statement_arg_named(int i) {
			return GetRuleContext<Execute_statement_arg_namedContext>(i);
		}
		public Execute_statement_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_statement_arg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_statement_arg(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statement_argContext execute_statement_arg() {
		Execute_statement_argContext _localctx = new Execute_statement_argContext(_ctx, State);
		EnterRule(_localctx, 706, RULE_execute_statement_arg);
		try {
			int _alt;
			State = 8926;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1227,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8910; execute_statement_arg_unnamed();
				State = 8915;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1225,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8911; Match(COMMA);
						State = 8912; execute_statement_arg();
						}
						} 
					}
					State = 8917;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1225,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8918; execute_statement_arg_named();
				State = 8923;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1226,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8919; Match(COMMA);
						State = 8920; execute_statement_arg_named();
						}
						} 
					}
					State = 8925;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1226,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statement_arg_namedContext : ParserRuleContext {
		public IToken name;
		public Execute_parameterContext value;
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Execute_parameterContext execute_parameter() {
			return GetRuleContext<Execute_parameterContext>(0);
		}
		public Execute_statement_arg_namedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement_arg_named; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_statement_arg_named(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_statement_arg_named(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statement_arg_namedContext execute_statement_arg_named() {
		Execute_statement_arg_namedContext _localctx = new Execute_statement_arg_namedContext(_ctx, State);
		EnterRule(_localctx, 708, RULE_execute_statement_arg_named);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8928; _localctx.name = Match(LOCAL_ID);
			State = 8929; Match(EQUAL);
			State = 8930; _localctx.value = execute_parameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statement_arg_unnamedContext : ParserRuleContext {
		public Execute_parameterContext value;
		public Execute_parameterContext execute_parameter() {
			return GetRuleContext<Execute_parameterContext>(0);
		}
		public Execute_statement_arg_unnamedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement_arg_unnamed; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_statement_arg_unnamed(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_statement_arg_unnamed(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statement_arg_unnamedContext execute_statement_arg_unnamed() {
		Execute_statement_arg_unnamedContext _localctx = new Execute_statement_arg_unnamedContext(_ctx, State);
		EnterRule(_localctx, 710, RULE_execute_statement_arg_unnamed);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8932; _localctx.value = execute_parameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_parameterContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		public ITerminalNode OUT() { return GetToken(TSqlParser.OUT, 0); }
		public Execute_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_parameter(this);
		}
	}

	[RuleVersion(0)]
	public Execute_parameterContext execute_parameter() {
		Execute_parameterContext _localctx = new Execute_parameterContext(_ctx, State);
		EnterRule(_localctx, 712, RULE_execute_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8942;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1229,_ctx) ) {
			case 1:
				{
				State = 8934; constant();
				}
				break;

			case 2:
				{
				State = 8935; Match(LOCAL_ID);
				State = 8937;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1228,_ctx) ) {
				case 1:
					{
					State = 8936;
					_la = _input.La(1);
					if ( !(_la==OUT || _la==OUTPUT) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 8939; id_();
				}
				break;

			case 4:
				{
				State = 8940; Match(DEFAULT);
				}
				break;

			case 5:
				{
				State = 8941; Match(NULL_);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_var_stringContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Execute_var_stringContext execute_var_string() {
			return GetRuleContext<Execute_var_stringContext>(0);
		}
		public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		public ITerminalNode OUT() { return GetToken(TSqlParser.OUT, 0); }
		public Execute_var_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_var_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_var_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_var_string(this);
		}
	}

	[RuleVersion(0)]
	public Execute_var_stringContext execute_var_string() {
		Execute_var_stringContext _localctx = new Execute_var_stringContext(_ctx, State);
		EnterRule(_localctx, 714, RULE_execute_var_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8949;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1231,_ctx) ) {
			case 1:
				{
				State = 8944; Match(LOCAL_ID);
				State = 8946;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1230,_ctx) ) {
				case 1:
					{
					State = 8945;
					_la = _input.La(1);
					if ( !(_la==OUT || _la==OUTPUT) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 8948; Match(STRING);
				}
				break;
			}
			State = 8953;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1232,_ctx) ) {
			case 1:
				{
				State = 8951; Match(PLUS);
				State = 8952; execute_var_string();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Security_statementContext : ParserRuleContext {
		public Table_nameContext on_id;
		public Principal_idContext _principal_id;
		public IList<Principal_idContext> _to_principal = new List<Principal_idContext>();
		public Principal_idContext as_principal;
		public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public ITerminalNode[] GRANT() { return GetTokens(TSqlParser.GRANT); }
		public ITerminalNode GRANT(int i) {
			return GetToken(TSqlParser.GRANT, i);
		}
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public Principal_idContext[] principal_id() {
			return GetRuleContexts<Principal_idContext>();
		}
		public Principal_idContext principal_id(int i) {
			return GetRuleContext<Principal_idContext>(i);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Grant_permissionContext grant_permission() {
			return GetRuleContext<Grant_permissionContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode OPTION() { return GetToken(TSqlParser.OPTION, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode PRIVILEGES() { return GetToken(TSqlParser.PRIVILEGES, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Class_type_for_grantContext class_type_for_grant() {
			return GetRuleContext<Class_type_for_grantContext>(0);
		}
		public ITerminalNode REVERT() { return GetToken(TSqlParser.REVERT, 0); }
		public ITerminalNode COOKIE() { return GetToken(TSqlParser.COOKIE, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Open_keyContext open_key() {
			return GetRuleContext<Open_keyContext>(0);
		}
		public Close_keyContext close_key() {
			return GetRuleContext<Close_keyContext>(0);
		}
		public Create_keyContext create_key() {
			return GetRuleContext<Create_keyContext>(0);
		}
		public Create_certificateContext create_certificate() {
			return GetRuleContext<Create_certificateContext>(0);
		}
		public Security_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_security_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSecurity_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSecurity_statement(this);
		}
	}

	[RuleVersion(0)]
	public Security_statementContext security_statement() {
		Security_statementContext _localctx = new Security_statementContext(_ctx, State);
		EnterRule(_localctx, 716, RULE_security_statement);
		try {
			int _alt;
			State = 9019;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1245,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8955; execute_clause();
				State = 8957;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1233,_ctx) ) {
				case 1:
					{
					State = 8956; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8959; Match(GRANT);
				State = 8971;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1236,_ctx) ) {
				case 1:
					{
					State = 8960; Match(ALL);
					State = 8962;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1234,_ctx) ) {
					case 1:
						{
						State = 8961; Match(PRIVILEGES);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 8964; grant_permission();
					State = 8969;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1235,_ctx) ) {
					case 1:
						{
						State = 8965; Match(LR_BRACKET);
						State = 8966; column_name_list();
						State = 8967; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				State = 8980;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1238,_ctx) ) {
				case 1:
					{
					State = 8973; Match(ON);
					State = 8977;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1237,_ctx) ) {
					case 1:
						{
						State = 8974; class_type_for_grant();
						State = 8975; Match(DOUBLE_COLON);
						}
						break;
					}
					State = 8979; _localctx.on_id = table_name();
					}
					break;
				}
				State = 8982; Match(TO);
				State = 8983; _localctx._principal_id = principal_id();
				_localctx._to_principal.Add(_localctx._principal_id);
				State = 8988;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1239,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8984; Match(COMMA);
						State = 8985; _localctx._principal_id = principal_id();
						_localctx._to_principal.Add(_localctx._principal_id);
						}
						} 
					}
					State = 8990;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1239,_ctx);
				}
				State = 8994;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1240,_ctx) ) {
				case 1:
					{
					State = 8991; Match(WITH);
					State = 8992; Match(GRANT);
					State = 8993; Match(OPTION);
					}
					break;
				}
				State = 8998;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1241,_ctx) ) {
				case 1:
					{
					State = 8996; Match(AS);
					State = 8997; _localctx.as_principal = principal_id();
					}
					break;
				}
				State = 9001;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1242,_ctx) ) {
				case 1:
					{
					State = 9000; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9003; Match(REVERT);
				State = 9010;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1243,_ctx) ) {
				case 1:
					{
					State = 9004; Match(LR_BRACKET);
					State = 9005; Match(WITH);
					State = 9006; Match(COOKIE);
					State = 9007; Match(EQUAL);
					State = 9008; Match(LOCAL_ID);
					State = 9009; Match(RR_BRACKET);
					}
					break;
				}
				State = 9013;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1244,_ctx) ) {
				case 1:
					{
					State = 9012; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9015; open_key();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9016; close_key();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9017; create_key();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9018; create_certificate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Principal_idContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode PUBLIC() { return GetToken(TSqlParser.PUBLIC, 0); }
		public Principal_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_principal_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrincipal_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrincipal_id(this);
		}
	}

	[RuleVersion(0)]
	public Principal_idContext principal_id() {
		Principal_idContext _localctx = new Principal_idContext(_ctx, State);
		EnterRule(_localctx, 718, RULE_principal_id);
		try {
			State = 9024;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1246,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9022; id_();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9023; Match(PUBLIC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_certificateContext : ParserRuleContext {
		public Id_Context certificate_name;
		public Id_Context user_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Existing_keysContext existing_keys() {
			return GetRuleContext<Existing_keysContext>(0);
		}
		public Generate_new_keysContext generate_new_keys() {
			return GetRuleContext<Generate_new_keysContext>(0);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode ACTIVE() { return GetToken(TSqlParser.ACTIVE, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode DIALOG() { return GetToken(TSqlParser.DIALOG, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Create_certificateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_certificate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_certificate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_certificate(this);
		}
	}

	[RuleVersion(0)]
	public Create_certificateContext create_certificate() {
		Create_certificateContext _localctx = new Create_certificateContext(_ctx, State);
		EnterRule(_localctx, 720, RULE_create_certificate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9026; Match(CREATE);
			State = 9027; Match(CERTIFICATE);
			State = 9028; _localctx.certificate_name = id_();
			State = 9031;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1247,_ctx) ) {
			case 1:
				{
				State = 9029; Match(AUTHORIZATION);
				State = 9030; _localctx.user_name = id_();
				}
				break;
			}
			State = 9036;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1248,_ctx) ) {
			case 1:
				{
				State = 9033; Match(FROM);
				State = 9034; existing_keys();
				}
				break;

			case 2:
				{
				State = 9035; generate_new_keys();
				}
				break;
			}
			State = 9044;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1249,_ctx) ) {
			case 1:
				{
				State = 9038; Match(ACTIVE);
				State = 9039; Match(FOR);
				State = 9040; Match(BEGIN);
				State = 9041; Match(DIALOG);
				State = 9042; Match(EQUAL);
				State = 9043; on_off();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Existing_keysContext : ParserRuleContext {
		public Id_Context assembly_name;
		public IToken path_to_file;
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode EXECUTABLE() { return GetToken(TSqlParser.EXECUTABLE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Private_key_optionsContext private_key_options() {
			return GetRuleContext<Private_key_optionsContext>(0);
		}
		public Existing_keysContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_existing_keys; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExisting_keys(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExisting_keys(this);
		}
	}

	[RuleVersion(0)]
	public Existing_keysContext existing_keys() {
		Existing_keysContext _localctx = new Existing_keysContext(_ctx, State);
		EnterRule(_localctx, 722, RULE_existing_keys);
		try {
			State = 9063;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1252,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9046; Match(ASSEMBLY);
				State = 9047; _localctx.assembly_name = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9049;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1250,_ctx) ) {
				case 1:
					{
					State = 9048; Match(EXECUTABLE);
					}
					break;
				}
				State = 9051; Match(FILE);
				State = 9052; Match(EQUAL);
				State = 9053; _localctx.path_to_file = Match(STRING);
				State = 9061;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1251,_ctx) ) {
				case 1:
					{
					State = 9054; Match(WITH);
					State = 9055; Match(PRIVATE);
					State = 9056; Match(KEY);
					State = 9057; Match(LR_BRACKET);
					State = 9058; private_key_options();
					State = 9059; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Private_key_optionsContext : ParserRuleContext {
		public IToken path;
		public IToken password;
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode DECRYPTION() { return GetToken(TSqlParser.DECRYPTION, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public Private_key_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_private_key_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrivate_key_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrivate_key_options(this);
		}
	}

	[RuleVersion(0)]
	public Private_key_optionsContext private_key_options() {
		Private_key_optionsContext _localctx = new Private_key_optionsContext(_ctx, State);
		EnterRule(_localctx, 724, RULE_private_key_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9065;
			_la = _input.La(1);
			if ( !(_la==FILE || _la==BINARY) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 9066; Match(EQUAL);
			State = 9067; _localctx.path = Match(STRING);
			State = 9074;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1253,_ctx) ) {
			case 1:
				{
				State = 9068; Match(COMMA);
				State = 9069;
				_la = _input.La(1);
				if ( !(_la==DECRYPTION || _la==ENCRYPTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 9070; Match(BY);
				State = 9071; Match(PASSWORD);
				State = 9072; Match(EQUAL);
				State = 9073; _localctx.password = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generate_new_keysContext : ParserRuleContext {
		public IToken password;
		public IToken certificate_subject_name;
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode SUBJECT() { return GetToken(TSqlParser.SUBJECT, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public Date_optionsContext[] date_options() {
			return GetRuleContexts<Date_optionsContext>();
		}
		public Date_optionsContext date_options(int i) {
			return GetRuleContext<Date_optionsContext>(i);
		}
		public Generate_new_keysContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generate_new_keys; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGenerate_new_keys(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGenerate_new_keys(this);
		}
	}

	[RuleVersion(0)]
	public Generate_new_keysContext generate_new_keys() {
		Generate_new_keysContext _localctx = new Generate_new_keysContext(_ctx, State);
		EnterRule(_localctx, 726, RULE_generate_new_keys);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9081;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1254,_ctx) ) {
			case 1:
				{
				State = 9076; Match(ENCRYPTION);
				State = 9077; Match(BY);
				State = 9078; Match(PASSWORD);
				State = 9079; Match(EQUAL);
				State = 9080; _localctx.password = Match(STRING);
				}
				break;
			}
			State = 9083; Match(WITH);
			State = 9084; Match(SUBJECT);
			State = 9085; Match(EQUAL);
			State = 9086; _localctx.certificate_subject_name = Match(STRING);
			State = 9091;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1255,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 9087; Match(COMMA);
					State = 9088; date_options();
					}
					} 
				}
				State = 9093;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1255,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_optionsContext : ParserRuleContext {
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode START_DATE() { return GetToken(TSqlParser.START_DATE, 0); }
		public ITerminalNode EXPIRY_DATE() { return GetToken(TSqlParser.EXPIRY_DATE, 0); }
		public Date_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDate_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDate_options(this);
		}
	}

	[RuleVersion(0)]
	public Date_optionsContext date_options() {
		Date_optionsContext _localctx = new Date_optionsContext(_ctx, State);
		EnterRule(_localctx, 728, RULE_date_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9094;
			_la = _input.La(1);
			if ( !(_la==EXPIRY_DATE || _la==START_DATE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 9095; Match(EQUAL);
			State = 9096; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public IToken password;
		public ITerminalNode OPEN() { return GetToken(TSqlParser.OPEN, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode DECRYPTION() { return GetToken(TSqlParser.DECRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public Decryption_mechanismContext decryption_mechanism() {
			return GetRuleContext<Decryption_mechanismContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Open_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpen_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpen_key(this);
		}
	}

	[RuleVersion(0)]
	public Open_keyContext open_key() {
		Open_keyContext _localctx = new Open_keyContext(_ctx, State);
		EnterRule(_localctx, 730, RULE_open_key);
		try {
			State = 9114;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1256,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9098; Match(OPEN);
				State = 9099; Match(SYMMETRIC);
				State = 9100; Match(KEY);
				State = 9101; _localctx.key_name = id_();
				State = 9102; Match(DECRYPTION);
				State = 9103; Match(BY);
				State = 9104; decryption_mechanism();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9106; Match(OPEN);
				State = 9107; Match(MASTER);
				State = 9108; Match(KEY);
				State = 9109; Match(DECRYPTION);
				State = 9110; Match(BY);
				State = 9111; Match(PASSWORD);
				State = 9112; Match(EQUAL);
				State = 9113; _localctx.password = Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Close_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public ITerminalNode CLOSE() { return GetToken(TSqlParser.CLOSE, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode KEYS() { return GetToken(TSqlParser.KEYS, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public Close_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_close_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClose_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClose_key(this);
		}
	}

	[RuleVersion(0)]
	public Close_keyContext close_key() {
		Close_keyContext _localctx = new Close_keyContext(_ctx, State);
		EnterRule(_localctx, 732, RULE_close_key);
		try {
			State = 9127;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1257,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9116; Match(CLOSE);
				State = 9117; Match(SYMMETRIC);
				State = 9118; Match(KEY);
				State = 9119; _localctx.key_name = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9120; Match(CLOSE);
				State = 9121; Match(ALL);
				State = 9122; Match(SYMMETRIC);
				State = 9123; Match(KEYS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9124; Match(CLOSE);
				State = 9125; Match(MASTER);
				State = 9126; Match(KEY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_keyContext : ParserRuleContext {
		public IToken password;
		public Id_Context key_name;
		public Id_Context user_name;
		public Id_Context provider_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Key_optionsContext[] key_options() {
			return GetRuleContexts<Key_optionsContext>();
		}
		public Key_optionsContext key_options(int i) {
			return GetRuleContext<Key_optionsContext>(i);
		}
		public Encryption_mechanismContext[] encryption_mechanism() {
			return GetRuleContexts<Encryption_mechanismContext>();
		}
		public Encryption_mechanismContext encryption_mechanism(int i) {
			return GetRuleContext<Encryption_mechanismContext>(i);
		}
		public Create_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_key(this);
		}
	}

	[RuleVersion(0)]
	public Create_keyContext create_key() {
		Create_keyContext _localctx = new Create_keyContext(_ctx, State);
		EnterRule(_localctx, 734, RULE_create_key);
		try {
			int _alt;
			State = 9164;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1263,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9129; Match(CREATE);
				State = 9130; Match(MASTER);
				State = 9131; Match(KEY);
				State = 9132; Match(ENCRYPTION);
				State = 9133; Match(BY);
				State = 9134; Match(PASSWORD);
				State = 9135; Match(EQUAL);
				State = 9136; _localctx.password = Match(STRING);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9137; Match(CREATE);
				State = 9138; Match(SYMMETRIC);
				State = 9139; Match(KEY);
				State = 9140; _localctx.key_name = id_();
				State = 9143;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1258,_ctx) ) {
				case 1:
					{
					State = 9141; Match(AUTHORIZATION);
					State = 9142; _localctx.user_name = id_();
					}
					break;
				}
				State = 9148;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1259,_ctx) ) {
				case 1:
					{
					State = 9145; Match(FROM);
					State = 9146; Match(PROVIDER);
					State = 9147; _localctx.provider_name = id_();
					}
					break;
				}
				State = 9150; Match(WITH);
				State = 9160;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 9155;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1260,_ctx) ) {
						case 1:
							{
							State = 9151; key_options();
							}
							break;

						case 2:
							{
							State = 9152; Match(ENCRYPTION);
							State = 9153; Match(BY);
							State = 9154; encryption_mechanism();
							}
							break;
						}
						State = 9158;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1261,_ctx) ) {
						case 1:
							{
							State = 9157; Match(COMMA);
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 9162;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1262,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_optionsContext : ParserRuleContext {
		public IToken pass_phrase;
		public IToken identity_phrase;
		public IToken key_name_in_provider;
		public ITerminalNode KEY_SOURCE() { return GetToken(TSqlParser.KEY_SOURCE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public AlgorithmContext algorithm() {
			return GetRuleContext<AlgorithmContext>(0);
		}
		public ITerminalNode IDENTITY_VALUE() { return GetToken(TSqlParser.IDENTITY_VALUE, 0); }
		public ITerminalNode PROVIDER_KEY_NAME() { return GetToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public ITerminalNode CREATION_DISPOSITION() { return GetToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public ITerminalNode CREATE_NEW() { return GetToken(TSqlParser.CREATE_NEW, 0); }
		public ITerminalNode OPEN_EXISTING() { return GetToken(TSqlParser.OPEN_EXISTING, 0); }
		public Key_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKey_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKey_options(this);
		}
	}

	[RuleVersion(0)]
	public Key_optionsContext key_options() {
		Key_optionsContext _localctx = new Key_optionsContext(_ctx, State);
		EnterRule(_localctx, 736, RULE_key_options);
		int _la;
		try {
			State = 9181;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1264,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9166; Match(KEY_SOURCE);
				State = 9167; Match(EQUAL);
				State = 9168; _localctx.pass_phrase = Match(STRING);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9169; Match(ALGORITHM);
				State = 9170; Match(EQUAL);
				State = 9171; algorithm();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9172; Match(IDENTITY_VALUE);
				State = 9173; Match(EQUAL);
				State = 9174; _localctx.identity_phrase = Match(STRING);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9175; Match(PROVIDER_KEY_NAME);
				State = 9176; Match(EQUAL);
				State = 9177; _localctx.key_name_in_provider = Match(STRING);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9178; Match(CREATION_DISPOSITION);
				State = 9179; Match(EQUAL);
				State = 9180;
				_la = _input.La(1);
				if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlgorithmContext : ParserRuleContext {
		public ITerminalNode DES() { return GetToken(TSqlParser.DES, 0); }
		public ITerminalNode TRIPLE_DES() { return GetToken(TSqlParser.TRIPLE_DES, 0); }
		public ITerminalNode TRIPLE_DES_3KEY() { return GetToken(TSqlParser.TRIPLE_DES_3KEY, 0); }
		public ITerminalNode RC2() { return GetToken(TSqlParser.RC2, 0); }
		public ITerminalNode RC4() { return GetToken(TSqlParser.RC4, 0); }
		public ITerminalNode RC4_128() { return GetToken(TSqlParser.RC4_128, 0); }
		public ITerminalNode DESX() { return GetToken(TSqlParser.DESX, 0); }
		public ITerminalNode AES_128() { return GetToken(TSqlParser.AES_128, 0); }
		public ITerminalNode AES_192() { return GetToken(TSqlParser.AES_192, 0); }
		public ITerminalNode AES_256() { return GetToken(TSqlParser.AES_256, 0); }
		public AlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_algorithm; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlgorithm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlgorithm(this);
		}
	}

	[RuleVersion(0)]
	public AlgorithmContext algorithm() {
		AlgorithmContext _localctx = new AlgorithmContext(_ctx, State);
		EnterRule(_localctx, 738, RULE_algorithm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9183;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AES_128) | (1L << AES_192) | (1L << AES_256))) != 0) || _la==DES || _la==DESX || ((((_la - 755)) & ~0x3f) == 0 && ((1L << (_la - 755)) & ((1L << (RC2 - 755)) | (1L << (RC4 - 755)) | (1L << (RC4_128 - 755)))) != 0) || _la==TRIPLE_DES || _la==TRIPLE_DES_3KEY) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Encryption_mechanismContext : ParserRuleContext {
		public Id_Context certificate_name;
		public Id_Context asym_key_name;
		public Id_Context decrypting_Key_name;
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Encryption_mechanismContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encryption_mechanism; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEncryption_mechanism(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEncryption_mechanism(this);
		}
	}

	[RuleVersion(0)]
	public Encryption_mechanismContext encryption_mechanism() {
		Encryption_mechanismContext _localctx = new Encryption_mechanismContext(_ctx, State);
		EnterRule(_localctx, 740, RULE_encryption_mechanism);
		try {
			State = 9196;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1265,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9185; Match(CERTIFICATE);
				State = 9186; _localctx.certificate_name = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9187; Match(ASYMMETRIC);
				State = 9188; Match(KEY);
				State = 9189; _localctx.asym_key_name = id_();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9190; Match(SYMMETRIC);
				State = 9191; Match(KEY);
				State = 9192; _localctx.decrypting_Key_name = id_();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9193; Match(PASSWORD);
				State = 9194; Match(EQUAL);
				State = 9195; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decryption_mechanismContext : ParserRuleContext {
		public Id_Context certificate_name;
		public Id_Context asym_key_name;
		public Id_Context decrypting_Key_name;
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public Decryption_mechanismContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decryption_mechanism; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDecryption_mechanism(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDecryption_mechanism(this);
		}
	}

	[RuleVersion(0)]
	public Decryption_mechanismContext decryption_mechanism() {
		Decryption_mechanismContext _localctx = new Decryption_mechanismContext(_ctx, State);
		EnterRule(_localctx, 742, RULE_decryption_mechanism);
		try {
			State = 9221;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1268,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9198; Match(CERTIFICATE);
				State = 9199; _localctx.certificate_name = id_();
				State = 9204;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1266,_ctx) ) {
				case 1:
					{
					State = 9200; Match(WITH);
					State = 9201; Match(PASSWORD);
					State = 9202; Match(EQUAL);
					State = 9203; Match(STRING);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9206; Match(ASYMMETRIC);
				State = 9207; Match(KEY);
				State = 9208; _localctx.asym_key_name = id_();
				State = 9213;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1267,_ctx) ) {
				case 1:
					{
					State = 9209; Match(WITH);
					State = 9210; Match(PASSWORD);
					State = 9211; Match(EQUAL);
					State = 9212; Match(STRING);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9215; Match(SYMMETRIC);
				State = 9216; Match(KEY);
				State = 9217; _localctx.decrypting_Key_name = id_();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9218; Match(PASSWORD);
				State = 9219; Match(EQUAL);
				State = 9220; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grant_permissionContext : ParserRuleContext {
		public ITerminalNode ADMINISTER() { return GetToken(TSqlParser.ADMINISTER, 0); }
		public ITerminalNode BULK() { return GetToken(TSqlParser.BULK, 0); }
		public ITerminalNode OPERATIONS() { return GetToken(TSqlParser.OPERATIONS, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ANY() { return GetToken(TSqlParser.ANY, 0); }
		public ITerminalNode RESOURCES() { return GetToken(TSqlParser.RESOURCES, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode SETTINGS() { return GetToken(TSqlParser.SETTINGS, 0); }
		public ITerminalNode TRACE() { return GetToken(TSqlParser.TRACE, 0); }
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode CONNECTION() { return GetToken(TSqlParser.CONNECTION, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode DATASPACE() { return GetToken(TSqlParser.DATASPACE, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public ITerminalNode LINKED() { return GetToken(TSqlParser.LINKED, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode MASK() { return GetToken(TSqlParser.MASK, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode SECURITY() { return GetToken(TSqlParser.SECURITY, 0); }
		public ITerminalNode POLICY() { return GetToken(TSqlParser.POLICY, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode FORMAT() { return GetToken(TSqlParser.FORMAT, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public ITerminalNode DDL() { return GetToken(TSqlParser.DDL, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public ITerminalNode SCOPED() { return GetToken(TSqlParser.SCOPED, 0); }
		public ITerminalNode CONFIGURATION() { return GetToken(TSqlParser.CONFIGURATION, 0); }
		public ITerminalNode AUTHENTICATE() { return GetToken(TSqlParser.AUTHENTICATE, 0); }
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode CHECKPOINT() { return GetToken(TSqlParser.CHECKPOINT, 0); }
		public ITerminalNode CONNECT() { return GetToken(TSqlParser.CONNECT, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode SQL() { return GetToken(TSqlParser.SQL, 0); }
		public ITerminalNode CONTROL() { return GetToken(TSqlParser.CONTROL, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode AGGREGATE() { return GetToken(TSqlParser.AGGREGATE, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(TSqlParser.PROCEDURE, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public ITerminalNode RULE() { return GetToken(TSqlParser.RULE, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		public ITerminalNode SYNONYM() { return GetToken(TSqlParser.SYNONYM, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public ITerminalNode VIEW() { return GetToken(TSqlParser.VIEW, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		public ITerminalNode SCRIPT() { return GetToken(TSqlParser.SCRIPT, 0); }
		public ITerminalNode ACCESS() { return GetToken(TSqlParser.ACCESS, 0); }
		public ITerminalNode IMPERSONATE() { return GetToken(TSqlParser.IMPERSONATE, 0); }
		public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		public ITerminalNode KILL() { return GetToken(TSqlParser.KILL, 0); }
		public ITerminalNode RECEIVE() { return GetToken(TSqlParser.RECEIVE, 0); }
		public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		public ITerminalNode SELECT() { return GetToken(TSqlParser.SELECT, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode SECURABLES() { return GetToken(TSqlParser.SECURABLES, 0); }
		public ITerminalNode SEND() { return GetToken(TSqlParser.SEND, 0); }
		public ITerminalNode SHOWPLAN() { return GetToken(TSqlParser.SHOWPLAN, 0); }
		public ITerminalNode SHUTDOWN() { return GetToken(TSqlParser.SHUTDOWN, 0); }
		public ITerminalNode SUBSCRIBE() { return GetToken(TSqlParser.SUBSCRIBE, 0); }
		public ITerminalNode QUERY() { return GetToken(TSqlParser.QUERY, 0); }
		public ITerminalNode NOTIFICATIONS() { return GetToken(TSqlParser.NOTIFICATIONS, 0); }
		public ITerminalNode TAKE() { return GetToken(TSqlParser.TAKE, 0); }
		public ITerminalNode OWNERSHIP() { return GetToken(TSqlParser.OWNERSHIP, 0); }
		public ITerminalNode UNMASK() { return GetToken(TSqlParser.UNMASK, 0); }
		public ITerminalNode UNSAFE() { return GetToken(TSqlParser.UNSAFE, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode CHANGE() { return GetToken(TSqlParser.CHANGE, 0); }
		public ITerminalNode TRACKING() { return GetToken(TSqlParser.TRACKING, 0); }
		public ITerminalNode DEFINITION() { return GetToken(TSqlParser.DEFINITION, 0); }
		public Grant_permissionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grant_permission; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGrant_permission(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGrant_permission(this);
		}
	}

	[RuleVersion(0)]
	public Grant_permissionContext grant_permission() {
		Grant_permissionContext _localctx = new Grant_permissionContext(_ctx, State);
		EnterRule(_localctx, 744, RULE_grant_permission);
		int _la;
		try {
			State = 9436;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1285,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9223; Match(ADMINISTER);
				State = 9229;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1269,_ctx) ) {
				case 1:
					{
					State = 9224; Match(BULK);
					State = 9225; Match(OPERATIONS);
					}
					break;

				case 2:
					{
					State = 9226; Match(DATABASE);
					State = 9227; Match(BULK);
					State = 9228; Match(OPERATIONS);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9231; Match(ALTER);
				State = 9302;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1274,_ctx) ) {
				case 1:
					{
					State = 9232; Match(ANY);
					State = 9295;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1273,_ctx) ) {
					case 1:
						{
						State = 9233; Match(APPLICATION);
						State = 9234; Match(ROLE);
						}
						break;

					case 2:
						{
						State = 9235; Match(ASSEMBLY);
						}
						break;

					case 3:
						{
						State = 9236; Match(ASYMMETRIC);
						State = 9237; Match(KEY);
						}
						break;

					case 4:
						{
						State = 9238; Match(AVAILABILITY);
						State = 9239; Match(GROUP);
						}
						break;

					case 5:
						{
						State = 9240; Match(CERTIFICATE);
						}
						break;

					case 6:
						{
						State = 9241; Match(COLUMN);
						State = 9246;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1270,_ctx) ) {
						case 1:
							{
							State = 9242; Match(ENCRYPTION);
							State = 9243; Match(KEY);
							}
							break;

						case 2:
							{
							State = 9244; Match(MASTER);
							State = 9245; Match(KEY);
							}
							break;
						}
						}
						break;

					case 7:
						{
						State = 9248; Match(CONNECTION);
						}
						break;

					case 8:
						{
						State = 9249; Match(CONTRACT);
						}
						break;

					case 9:
						{
						State = 9250; Match(CREDENTIAL);
						}
						break;

					case 10:
						{
						State = 9251; Match(DATABASE);
						State = 9259;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1271,_ctx) ) {
						case 1:
							{
							State = 9252; Match(AUDIT);
							}
							break;

						case 2:
							{
							State = 9253; Match(DDL);
							State = 9254; Match(TRIGGER);
							}
							break;

						case 3:
							{
							State = 9255; Match(EVENT);
							State = 9256;
							_la = _input.La(1);
							if ( !(_la==NOTIFICATION || _la==SESSION) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 4:
							{
							State = 9257; Match(SCOPED);
							State = 9258; Match(CONFIGURATION);
							}
							break;
						}
						}
						break;

					case 11:
						{
						State = 9261; Match(DATASPACE);
						}
						break;

					case 12:
						{
						State = 9262; Match(ENDPOINT);
						}
						break;

					case 13:
						{
						State = 9263; Match(EVENT);
						State = 9264;
						_la = _input.La(1);
						if ( !(_la==NOTIFICATION || _la==SESSION) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 14:
						{
						State = 9265; Match(EXTERNAL);
						State = 9271;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1272,_ctx) ) {
						case 1:
							{
							State = 9266; Match(DATA);
							State = 9267; Match(SOURCE);
							}
							break;

						case 2:
							{
							State = 9268; Match(FILE);
							State = 9269; Match(FORMAT);
							}
							break;

						case 3:
							{
							State = 9270; Match(LIBRARY);
							}
							break;
						}
						}
						break;

					case 15:
						{
						State = 9273; Match(FULLTEXT);
						State = 9274; Match(CATALOG);
						}
						break;

					case 16:
						{
						State = 9275; Match(LINKED);
						State = 9276; Match(SERVER);
						}
						break;

					case 17:
						{
						State = 9277; Match(LOGIN);
						}
						break;

					case 18:
						{
						State = 9278; Match(MASK);
						}
						break;

					case 19:
						{
						State = 9279; Match(MESSAGE);
						State = 9280; Match(TYPE);
						}
						break;

					case 20:
						{
						State = 9281; Match(REMOTE);
						State = 9282; Match(SERVICE);
						State = 9283; Match(BINDING);
						}
						break;

					case 21:
						{
						State = 9284; Match(ROLE);
						}
						break;

					case 22:
						{
						State = 9285; Match(ROUTE);
						}
						break;

					case 23:
						{
						State = 9286; Match(SCHEMA);
						}
						break;

					case 24:
						{
						State = 9287; Match(SECURITY);
						State = 9288; Match(POLICY);
						}
						break;

					case 25:
						{
						State = 9289; Match(SERVER);
						State = 9290;
						_la = _input.La(1);
						if ( !(_la==AUDIT || _la==ROLE) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 26:
						{
						State = 9291; Match(SERVICE);
						}
						break;

					case 27:
						{
						State = 9292; Match(SYMMETRIC);
						State = 9293; Match(KEY);
						}
						break;

					case 28:
						{
						State = 9294; Match(USER);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 9297; Match(RESOURCES);
					}
					break;

				case 3:
					{
					State = 9298; Match(SERVER);
					State = 9299; Match(STATE);
					}
					break;

				case 4:
					{
					State = 9300; Match(SETTINGS);
					}
					break;

				case 5:
					{
					State = 9301; Match(TRACE);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9304; Match(AUTHENTICATE);
				State = 9306;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1275,_ctx) ) {
				case 1:
					{
					State = 9305; Match(SERVER);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9308; Match(BACKUP);
				State = 9309;
				_la = _input.La(1);
				if ( !(_la==DATABASE || _la==LOG) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9310; Match(CHECKPOINT);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9311; Match(CONNECT);
				State = 9316;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1276,_ctx) ) {
				case 1:
					{
					State = 9312; Match(ANY);
					State = 9313; Match(DATABASE);
					}
					break;

				case 2:
					{
					State = 9314; Match(REPLICATION);
					}
					break;

				case 3:
					{
					State = 9315; Match(SQL);
					}
					break;
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9318; Match(CONTROL);
				State = 9320;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1277,_ctx) ) {
				case 1:
					{
					State = 9319; Match(SERVER);
					}
					break;
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 9322; Match(CREATE);
				State = 9376;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1279,_ctx) ) {
				case 1:
					{
					State = 9323; Match(AGGREGATE);
					}
					break;

				case 2:
					{
					State = 9324; Match(ANY);
					State = 9325; Match(DATABASE);
					}
					break;

				case 3:
					{
					State = 9326; Match(ASSEMBLY);
					}
					break;

				case 4:
					{
					State = 9327; Match(ASYMMETRIC);
					State = 9328; Match(KEY);
					}
					break;

				case 5:
					{
					State = 9329; Match(AVAILABILITY);
					State = 9330; Match(GROUP);
					}
					break;

				case 6:
					{
					State = 9331; Match(CERTIFICATE);
					}
					break;

				case 7:
					{
					State = 9332; Match(CONTRACT);
					}
					break;

				case 8:
					{
					State = 9333; Match(DATABASE);
					State = 9337;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1278,_ctx) ) {
					case 1:
						{
						State = 9334; Match(DDL);
						State = 9335; Match(EVENT);
						State = 9336; Match(NOTIFICATION);
						}
						break;
					}
					}
					break;

				case 9:
					{
					State = 9339; Match(DDL);
					State = 9340; Match(EVENT);
					State = 9341; Match(NOTIFICATION);
					}
					break;

				case 10:
					{
					State = 9342; Match(DEFAULT);
					}
					break;

				case 11:
					{
					State = 9343; Match(ENDPOINT);
					}
					break;

				case 12:
					{
					State = 9344; Match(EXTERNAL);
					State = 9345; Match(LIBRARY);
					}
					break;

				case 13:
					{
					State = 9346; Match(FULLTEXT);
					State = 9347; Match(CATALOG);
					}
					break;

				case 14:
					{
					State = 9348; Match(FUNCTION);
					}
					break;

				case 15:
					{
					State = 9349; Match(MESSAGE);
					State = 9350; Match(TYPE);
					}
					break;

				case 16:
					{
					State = 9351; Match(PROCEDURE);
					}
					break;

				case 17:
					{
					State = 9352; Match(QUEUE);
					}
					break;

				case 18:
					{
					State = 9353; Match(REMOTE);
					State = 9354; Match(SERVICE);
					State = 9355; Match(BINDING);
					}
					break;

				case 19:
					{
					State = 9356; Match(ROLE);
					}
					break;

				case 20:
					{
					State = 9357; Match(ROUTE);
					}
					break;

				case 21:
					{
					State = 9358; Match(RULE);
					}
					break;

				case 22:
					{
					State = 9359; Match(SCHEMA);
					}
					break;

				case 23:
					{
					State = 9360; Match(SEQUENCE);
					}
					break;

				case 24:
					{
					State = 9361; Match(SERVER);
					State = 9362; Match(ROLE);
					}
					break;

				case 25:
					{
					State = 9363; Match(SERVICE);
					}
					break;

				case 26:
					{
					State = 9364; Match(SYMMETRIC);
					State = 9365; Match(KEY);
					}
					break;

				case 27:
					{
					State = 9366; Match(SYNONYM);
					}
					break;

				case 28:
					{
					State = 9367; Match(TABLE);
					}
					break;

				case 29:
					{
					State = 9368; Match(TRACE);
					State = 9369; Match(EVENT);
					State = 9370; Match(NOTIFICATION);
					}
					break;

				case 30:
					{
					State = 9371; Match(TYPE);
					}
					break;

				case 31:
					{
					State = 9372; Match(VIEW);
					}
					break;

				case 32:
					{
					State = 9373; Match(XML);
					State = 9374; Match(SCHEMA);
					State = 9375; Match(COLLECTION);
					}
					break;
				}
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 9378; Match(DELETE);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 9379; Match(EXECUTE);
				State = 9383;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1280,_ctx) ) {
				case 1:
					{
					State = 9380; Match(ANY);
					State = 9381; Match(EXTERNAL);
					State = 9382; Match(SCRIPT);
					}
					break;
				}
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 9385; Match(EXTERNAL);
				State = 9386; Match(ACCESS);
				State = 9387; Match(ASSEMBLY);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 9388; Match(IMPERSONATE);
				State = 9391;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1281,_ctx) ) {
				case 1:
					{
					State = 9389; Match(ANY);
					State = 9390; Match(LOGIN);
					}
					break;
				}
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 9393; Match(INSERT);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 9394; Match(KILL);
				State = 9395; Match(DATABASE);
				State = 9396; Match(CONNECTION);
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 9397; Match(RECEIVE);
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 9398; Match(REFERENCES);
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 9399; Match(SELECT);
				State = 9403;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1282,_ctx) ) {
				case 1:
					{
					State = 9400; Match(ALL);
					State = 9401; Match(USER);
					State = 9402; Match(SECURABLES);
					}
					break;
				}
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 9405; Match(SEND);
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 9406; Match(SHOWPLAN);
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 9407; Match(SHUTDOWN);
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 9408; Match(SUBSCRIBE);
				State = 9409; Match(QUERY);
				State = 9410; Match(NOTIFICATIONS);
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 9411; Match(TAKE);
				State = 9412; Match(OWNERSHIP);
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 9413; Match(UNMASK);
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 9414; Match(UNSAFE);
				State = 9415; Match(ASSEMBLY);
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 9416; Match(UPDATE);
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 9417; Match(VIEW);
				State = 9434;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1284,_ctx) ) {
				case 1:
					{
					State = 9418; Match(ANY);
					State = 9425;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1283,_ctx) ) {
					case 1:
						{
						State = 9419; Match(DATABASE);
						}
						break;

					case 2:
						{
						State = 9420; Match(DEFINITION);
						}
						break;

					case 3:
						{
						State = 9421; Match(COLUMN);
						State = 9422;
						_la = _input.La(1);
						if ( !(_la==ENCRYPTION || _la==MASTER) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 9423; Match(KEY);
						State = 9424; Match(DEFINITION);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 9427; Match(CHANGE);
					State = 9428; Match(TRACKING);
					}
					break;

				case 3:
					{
					State = 9429; Match(DATABASE);
					State = 9430; Match(STATE);
					}
					break;

				case 4:
					{
					State = 9431; Match(DEFINITION);
					}
					break;

				case 5:
					{
					State = 9432; Match(SERVER);
					State = 9433; Match(STATE);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_statementContext : ParserRuleContext {
		public Id_Context member_name;
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public ITerminalNode CURSOR() { return GetToken(TSqlParser.CURSOR, 0); }
		public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return GetRuleContext<Declare_set_cursor_commonContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode READ() { return GetToken(TSqlParser.READ, 0); }
		public ITerminalNode ONLY() { return GetToken(TSqlParser.ONLY, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Set_specialContext set_special() {
			return GetRuleContext<Set_specialContext>(0);
		}
		public Set_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSet_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSet_statement(this);
		}
	}

	[RuleVersion(0)]
	public Set_statementContext set_statement() {
		Set_statementContext _localctx = new Set_statementContext(_ctx, State);
		EnterRule(_localctx, 746, RULE_set_statement);
		try {
			State = 9477;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1293,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9438; Match(SET);
				State = 9439; Match(LOCAL_ID);
				State = 9442;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1286,_ctx) ) {
				case 1:
					{
					State = 9440; Match(DOT);
					State = 9441; _localctx.member_name = id_();
					}
					break;
				}
				State = 9444; Match(EQUAL);
				State = 9445; expression(0);
				State = 9447;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1287,_ctx) ) {
				case 1:
					{
					State = 9446; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9449; Match(SET);
				State = 9450; Match(LOCAL_ID);
				State = 9451; assignment_operator();
				State = 9452; expression(0);
				State = 9454;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1288,_ctx) ) {
				case 1:
					{
					State = 9453; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9456; Match(SET);
				State = 9457; Match(LOCAL_ID);
				State = 9458; Match(EQUAL);
				State = 9459; Match(CURSOR);
				State = 9460; declare_set_cursor_common();
				State = 9471;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1291,_ctx) ) {
				case 1:
					{
					State = 9461; Match(FOR);
					State = 9469;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1290,_ctx) ) {
					case 1:
						{
						State = 9462; Match(READ);
						State = 9463; Match(ONLY);
						}
						break;

					case 2:
						{
						State = 9464; Match(UPDATE);
						State = 9467;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1289,_ctx) ) {
						case 1:
							{
							State = 9465; Match(OF);
							State = 9466; column_name_list();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				State = 9474;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1292,_ctx) ) {
				case 1:
					{
					State = 9473; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9476; set_special();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_statementContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode DISTRIBUTED() { return GetToken(TSqlParser.DISTRIBUTED, 0); }
		public ITerminalNode TRAN() { return GetToken(TSqlParser.TRAN, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(TSqlParser.TRANSACTION, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode MARK() { return GetToken(TSqlParser.MARK, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode COMMIT() { return GetToken(TSqlParser.COMMIT, 0); }
		public ITerminalNode DELAYED_DURABILITY() { return GetToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode WORK() { return GetToken(TSqlParser.WORK, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(TSqlParser.ROLLBACK, 0); }
		public ITerminalNode SAVE() { return GetToken(TSqlParser.SAVE, 0); }
		public Transaction_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTransaction_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTransaction_statement(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_statementContext transaction_statement() {
		Transaction_statementContext _localctx = new Transaction_statementContext(_ctx, State);
		EnterRule(_localctx, 748, RULE_transaction_statement);
		int _la;
		try {
			State = 9560;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1312,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9479; Match(BEGIN);
				State = 9480; Match(DISTRIBUTED);
				State = 9481;
				_la = _input.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 9484;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1294,_ctx) ) {
				case 1:
					{
					State = 9482; id_();
					}
					break;

				case 2:
					{
					State = 9483; Match(LOCAL_ID);
					}
					break;
				}
				State = 9487;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1295,_ctx) ) {
				case 1:
					{
					State = 9486; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9489; Match(BEGIN);
				State = 9490;
				_la = _input.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 9500;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1298,_ctx) ) {
				case 1:
					{
					State = 9493;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1296,_ctx) ) {
					case 1:
						{
						State = 9491; id_();
						}
						break;

					case 2:
						{
						State = 9492; Match(LOCAL_ID);
						}
						break;
					}
					State = 9498;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1297,_ctx) ) {
					case 1:
						{
						State = 9495; Match(WITH);
						State = 9496; Match(MARK);
						State = 9497; Match(STRING);
						}
						break;
					}
					}
					break;
				}
				State = 9503;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1299,_ctx) ) {
				case 1:
					{
					State = 9502; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9505; Match(COMMIT);
				State = 9506;
				_la = _input.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 9519;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1302,_ctx) ) {
				case 1:
					{
					State = 9509;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1300,_ctx) ) {
					case 1:
						{
						State = 9507; id_();
						}
						break;

					case 2:
						{
						State = 9508; Match(LOCAL_ID);
						}
						break;
					}
					State = 9517;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1301,_ctx) ) {
					case 1:
						{
						State = 9511; Match(WITH);
						State = 9512; Match(LR_BRACKET);
						State = 9513; Match(DELAYED_DURABILITY);
						State = 9514; Match(EQUAL);
						State = 9515;
						_la = _input.La(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 9516; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				State = 9522;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1303,_ctx) ) {
				case 1:
					{
					State = 9521; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9524; Match(COMMIT);
				State = 9526;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1304,_ctx) ) {
				case 1:
					{
					State = 9525; Match(WORK);
					}
					break;
				}
				State = 9529;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1305,_ctx) ) {
				case 1:
					{
					State = 9528; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9531; Match(COMMIT);
				State = 9532; id_();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9533; Match(ROLLBACK);
				State = 9534; id_();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9535; Match(ROLLBACK);
				State = 9536;
				_la = _input.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 9539;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1306,_ctx) ) {
				case 1:
					{
					State = 9537; id_();
					}
					break;

				case 2:
					{
					State = 9538; Match(LOCAL_ID);
					}
					break;
				}
				State = 9542;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1307,_ctx) ) {
				case 1:
					{
					State = 9541; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 9544; Match(ROLLBACK);
				State = 9546;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1308,_ctx) ) {
				case 1:
					{
					State = 9545; Match(WORK);
					}
					break;
				}
				State = 9549;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1309,_ctx) ) {
				case 1:
					{
					State = 9548; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 9551; Match(SAVE);
				State = 9552;
				_la = _input.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 9555;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1310,_ctx) ) {
				case 1:
					{
					State = 9553; id_();
					}
					break;

				case 2:
					{
					State = 9554; Match(LOCAL_ID);
					}
					break;
				}
				State = 9558;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1311,_ctx) ) {
				case 1:
					{
					State = 9557; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Go_batch_statementContext : ParserRuleContext {
		public IToken count;
		public ITerminalNode GO_BATCH() { return GetToken(TSqlParser.GO_BATCH, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Go_batch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_go_batch_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGo_batch_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGo_batch_statement(this);
		}
	}

	[RuleVersion(0)]
	public Go_batch_statementContext go_batch_statement() {
		Go_batch_statementContext _localctx = new Go_batch_statementContext(_ctx, State);
		EnterRule(_localctx, 750, RULE_go_batch_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9562; Match(GO_BATCH);
			State = 9564;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1313,_ctx) ) {
			case 1:
				{
				State = 9563; _localctx.count = Match(DECIMAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Go_statementContext : ParserRuleContext {
		public IToken count;
		public ITerminalNode GO() { return GetToken(TSqlParser.GO, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Go_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_go_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGo_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGo_statement(this);
		}
	}

	[RuleVersion(0)]
	public Go_statementContext go_statement() {
		Go_statementContext _localctx = new Go_statementContext(_ctx, State);
		EnterRule(_localctx, 752, RULE_go_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9566; Match(GO);
			State = 9568;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1314,_ctx) ) {
			case 1:
				{
				State = 9567; _localctx.count = Match(DECIMAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Use_statementContext : ParserRuleContext {
		public Id_Context database;
		public ITerminalNode USE() { return GetToken(TSqlParser.USE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Use_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUse_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUse_statement(this);
		}
	}

	[RuleVersion(0)]
	public Use_statementContext use_statement() {
		Use_statementContext _localctx = new Use_statementContext(_ctx, State);
		EnterRule(_localctx, 754, RULE_use_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9570; Match(USE);
			State = 9571; _localctx.database = id_();
			State = 9573;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1315,_ctx) ) {
			case 1:
				{
				State = 9572; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Setuser_statementContext : ParserRuleContext {
		public IToken user;
		public ITerminalNode SETUSER() { return GetToken(TSqlParser.SETUSER, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Setuser_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setuser_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSetuser_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSetuser_statement(this);
		}
	}

	[RuleVersion(0)]
	public Setuser_statementContext setuser_statement() {
		Setuser_statementContext _localctx = new Setuser_statementContext(_ctx, State);
		EnterRule(_localctx, 756, RULE_setuser_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9575; Match(SETUSER);
			State = 9577;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1316,_ctx) ) {
			case 1:
				{
				State = 9576; _localctx.user = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reconfigure_statementContext : ParserRuleContext {
		public ITerminalNode RECONFIGURE() { return GetToken(TSqlParser.RECONFIGURE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(TSqlParser.OVERRIDE, 0); }
		public Reconfigure_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reconfigure_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterReconfigure_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitReconfigure_statement(this);
		}
	}

	[RuleVersion(0)]
	public Reconfigure_statementContext reconfigure_statement() {
		Reconfigure_statementContext _localctx = new Reconfigure_statementContext(_ctx, State);
		EnterRule(_localctx, 758, RULE_reconfigure_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9579; Match(RECONFIGURE);
			State = 9582;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1317,_ctx) ) {
			case 1:
				{
				State = 9580; Match(WITH);
				State = 9581; Match(OVERRIDE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shutdown_statementContext : ParserRuleContext {
		public ITerminalNode SHUTDOWN() { return GetToken(TSqlParser.SHUTDOWN, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NOWAIT() { return GetToken(TSqlParser.NOWAIT, 0); }
		public Shutdown_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shutdown_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterShutdown_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitShutdown_statement(this);
		}
	}

	[RuleVersion(0)]
	public Shutdown_statementContext shutdown_statement() {
		Shutdown_statementContext _localctx = new Shutdown_statementContext(_ctx, State);
		EnterRule(_localctx, 760, RULE_shutdown_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9584; Match(SHUTDOWN);
			State = 9587;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1318,_ctx) ) {
			case 1:
				{
				State = 9585; Match(WITH);
				State = 9586; Match(NOWAIT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Checkpoint_statementContext : ParserRuleContext {
		public IToken checkPointDuration;
		public ITerminalNode CHECKPOINT() { return GetToken(TSqlParser.CHECKPOINT, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Checkpoint_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkpoint_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCheckpoint_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCheckpoint_statement(this);
		}
	}

	[RuleVersion(0)]
	public Checkpoint_statementContext checkpoint_statement() {
		Checkpoint_statementContext _localctx = new Checkpoint_statementContext(_ctx, State);
		EnterRule(_localctx, 762, RULE_checkpoint_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9589; Match(CHECKPOINT);
			State = 9591;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1319,_ctx) ) {
			case 1:
				{
				State = 9590; _localctx.checkPointDuration = Match(DECIMAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checkalloc_optionContext : ParserRuleContext {
		public ITerminalNode ALL_ERRORMSGS() { return GetToken(TSqlParser.ALL_ERRORMSGS, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public ITerminalNode TABLOCK() { return GetToken(TSqlParser.TABLOCK, 0); }
		public ITerminalNode ESTIMATEONLY() { return GetToken(TSqlParser.ESTIMATEONLY, 0); }
		public Dbcc_checkalloc_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checkalloc_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checkalloc_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checkalloc_option(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checkalloc_optionContext dbcc_checkalloc_option() {
		Dbcc_checkalloc_optionContext _localctx = new Dbcc_checkalloc_optionContext(_ctx, State);
		EnterRule(_localctx, 764, RULE_dbcc_checkalloc_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9593;
			_la = _input.La(1);
			if ( !(_la==ALL_ERRORMSGS || _la==ESTIMATEONLY || _la==NO_INFOMSGS || _la==TABLOCK) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checkallocContext : ParserRuleContext {
		public IToken name;
		public Id_Context database;
		public IToken databaseid;
		public Dbcc_checkalloc_optionContext dbcc_option;
		public ITerminalNode CHECKALLOC() { return GetToken(TSqlParser.CHECKALLOC, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode NOINDEX() { return GetToken(TSqlParser.NOINDEX, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode REPAIR_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.REPAIR_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode REPAIR_FAST() { return GetToken(TSqlParser.REPAIR_FAST, 0); }
		public ITerminalNode REPAIR_REBUILD() { return GetToken(TSqlParser.REPAIR_REBUILD, 0); }
		public Dbcc_checkalloc_optionContext[] dbcc_checkalloc_option() {
			return GetRuleContexts<Dbcc_checkalloc_optionContext>();
		}
		public Dbcc_checkalloc_optionContext dbcc_checkalloc_option(int i) {
			return GetRuleContext<Dbcc_checkalloc_optionContext>(i);
		}
		public Dbcc_checkallocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checkalloc; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checkalloc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checkalloc(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checkallocContext dbcc_checkalloc() {
		Dbcc_checkallocContext _localctx = new Dbcc_checkallocContext(_ctx, State);
		EnterRule(_localctx, 766, RULE_dbcc_checkalloc);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9595; _localctx.name = Match(CHECKALLOC);
			State = 9620;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1324,_ctx) ) {
			case 1:
				{
				State = 9596; Match(LR_BRACKET);
				State = 9600;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1320,_ctx) ) {
				case 1:
					{
					State = 9597; _localctx.database = id_();
					}
					break;

				case 2:
					{
					State = 9598; _localctx.databaseid = Match(STRING);
					}
					break;

				case 3:
					{
					State = 9599; Match(DECIMAL);
					}
					break;
				}
				State = 9606;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1321,_ctx) ) {
				case 1:
					{
					State = 9602; Match(COMMA);
					State = 9603; Match(NOINDEX);
					}
					break;

				case 2:
					{
					State = 9604; Match(COMMA);
					State = 9605;
					_la = _input.La(1);
					if ( !(((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (REPAIR_ALLOW_DATA_LOSS - 787)) | (1L << (REPAIR_FAST - 787)) | (1L << (REPAIR_REBUILD - 787)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 9608; Match(RR_BRACKET);
				State = 9618;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1323,_ctx) ) {
				case 1:
					{
					State = 9609; Match(WITH);
					State = 9610; _localctx.dbcc_option = dbcc_checkalloc_option();
					State = 9615;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1322,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 9611; Match(COMMA);
							State = 9612; _localctx.dbcc_option = dbcc_checkalloc_option();
							}
							} 
						}
						State = 9617;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1322,_ctx);
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checkcatalogContext : ParserRuleContext {
		public IToken name;
		public Id_Context database;
		public IToken databasename;
		public IToken dbcc_option;
		public ITerminalNode CHECKCATALOG() { return GetToken(TSqlParser.CHECKCATALOG, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Dbcc_checkcatalogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checkcatalog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checkcatalog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checkcatalog(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checkcatalogContext dbcc_checkcatalog() {
		Dbcc_checkcatalogContext _localctx = new Dbcc_checkcatalogContext(_ctx, State);
		EnterRule(_localctx, 768, RULE_dbcc_checkcatalog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9622; _localctx.name = Match(CHECKCATALOG);
			State = 9630;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1326,_ctx) ) {
			case 1:
				{
				State = 9623; Match(LR_BRACKET);
				State = 9627;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1325,_ctx) ) {
				case 1:
					{
					State = 9624; _localctx.database = id_();
					}
					break;

				case 2:
					{
					State = 9625; _localctx.databasename = Match(STRING);
					}
					break;

				case 3:
					{
					State = 9626; Match(DECIMAL);
					}
					break;
				}
				State = 9629; Match(RR_BRACKET);
				}
				break;
			}
			State = 9634;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1327,_ctx) ) {
			case 1:
				{
				State = 9632; Match(WITH);
				State = 9633; _localctx.dbcc_option = Match(NO_INFOMSGS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checkconstraints_optionContext : ParserRuleContext {
		public ITerminalNode ALL_CONSTRAINTS() { return GetToken(TSqlParser.ALL_CONSTRAINTS, 0); }
		public ITerminalNode ALL_ERRORMSGS() { return GetToken(TSqlParser.ALL_ERRORMSGS, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public Dbcc_checkconstraints_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checkconstraints_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checkconstraints_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checkconstraints_option(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checkconstraints_optionContext dbcc_checkconstraints_option() {
		Dbcc_checkconstraints_optionContext _localctx = new Dbcc_checkconstraints_optionContext(_ctx, State);
		EnterRule(_localctx, 770, RULE_dbcc_checkconstraints_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9636;
			_la = _input.La(1);
			if ( !(_la==ALL_CONSTRAINTS || _la==ALL_ERRORMSGS || _la==NO_INFOMSGS) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checkconstraintsContext : ParserRuleContext {
		public IToken name;
		public Id_Context table_or_constraint;
		public IToken table_or_constraint_name;
		public Dbcc_checkconstraints_optionContext dbcc_option;
		public ITerminalNode CHECKCONSTRAINTS() { return GetToken(TSqlParser.CHECKCONSTRAINTS, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Dbcc_checkconstraints_optionContext[] dbcc_checkconstraints_option() {
			return GetRuleContexts<Dbcc_checkconstraints_optionContext>();
		}
		public Dbcc_checkconstraints_optionContext dbcc_checkconstraints_option(int i) {
			return GetRuleContext<Dbcc_checkconstraints_optionContext>(i);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Dbcc_checkconstraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checkconstraints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checkconstraints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checkconstraints(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checkconstraintsContext dbcc_checkconstraints() {
		Dbcc_checkconstraintsContext _localctx = new Dbcc_checkconstraintsContext(_ctx, State);
		EnterRule(_localctx, 772, RULE_dbcc_checkconstraints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9638; _localctx.name = Match(CHECKCONSTRAINTS);
			State = 9645;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1329,_ctx) ) {
			case 1:
				{
				State = 9639; Match(LR_BRACKET);
				State = 9642;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1328,_ctx) ) {
				case 1:
					{
					State = 9640; _localctx.table_or_constraint = id_();
					}
					break;

				case 2:
					{
					State = 9641; _localctx.table_or_constraint_name = Match(STRING);
					}
					break;
				}
				State = 9644; Match(RR_BRACKET);
				}
				break;
			}
			State = 9656;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1331,_ctx) ) {
			case 1:
				{
				State = 9647; Match(WITH);
				State = 9648; _localctx.dbcc_option = dbcc_checkconstraints_option();
				State = 9653;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1330,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 9649; Match(COMMA);
						State = 9650; _localctx.dbcc_option = dbcc_checkconstraints_option();
						}
						} 
					}
					State = 9655;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1330,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checkdb_table_optionContext : ParserRuleContext {
		public IToken max_dregree_of_parallelism;
		public ITerminalNode ALL_ERRORMSGS() { return GetToken(TSqlParser.ALL_ERRORMSGS, 0); }
		public ITerminalNode EXTENDED_LOGICAL_CHECKS() { return GetToken(TSqlParser.EXTENDED_LOGICAL_CHECKS, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public ITerminalNode TABLOCK() { return GetToken(TSqlParser.TABLOCK, 0); }
		public ITerminalNode ESTIMATEONLY() { return GetToken(TSqlParser.ESTIMATEONLY, 0); }
		public ITerminalNode PHYSICAL_ONLY() { return GetToken(TSqlParser.PHYSICAL_ONLY, 0); }
		public ITerminalNode DATA_PURITY() { return GetToken(TSqlParser.DATA_PURITY, 0); }
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Dbcc_checkdb_table_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checkdb_table_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checkdb_table_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checkdb_table_option(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checkdb_table_optionContext dbcc_checkdb_table_option() {
		Dbcc_checkdb_table_optionContext _localctx = new Dbcc_checkdb_table_optionContext(_ctx, State);
		EnterRule(_localctx, 774, RULE_dbcc_checkdb_table_option);
		try {
			State = 9668;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1332,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9658; Match(ALL_ERRORMSGS);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9659; Match(EXTENDED_LOGICAL_CHECKS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9660; Match(NO_INFOMSGS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9661; Match(TABLOCK);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9662; Match(ESTIMATEONLY);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9663; Match(PHYSICAL_ONLY);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9664; Match(DATA_PURITY);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 9665; Match(MAXDOP);
				State = 9666; Match(EQUAL);
				State = 9667; _localctx.max_dregree_of_parallelism = Match(DECIMAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checkdbContext : ParserRuleContext {
		public IToken name;
		public Id_Context database;
		public IToken databasename;
		public Dbcc_checkdb_table_optionContext dbcc_option;
		public ITerminalNode CHECKDB() { return GetToken(TSqlParser.CHECKDB, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Dbcc_checkdb_table_optionContext[] dbcc_checkdb_table_option() {
			return GetRuleContexts<Dbcc_checkdb_table_optionContext>();
		}
		public Dbcc_checkdb_table_optionContext dbcc_checkdb_table_option(int i) {
			return GetRuleContext<Dbcc_checkdb_table_optionContext>(i);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode NOINDEX() { return GetToken(TSqlParser.NOINDEX, 0); }
		public ITerminalNode REPAIR_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.REPAIR_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode REPAIR_FAST() { return GetToken(TSqlParser.REPAIR_FAST, 0); }
		public ITerminalNode REPAIR_REBUILD() { return GetToken(TSqlParser.REPAIR_REBUILD, 0); }
		public Dbcc_checkdbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checkdb; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checkdb(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checkdb(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checkdbContext dbcc_checkdb() {
		Dbcc_checkdbContext _localctx = new Dbcc_checkdbContext(_ctx, State);
		EnterRule(_localctx, 776, RULE_dbcc_checkdb);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9670; _localctx.name = Match(CHECKDB);
			State = 9682;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1335,_ctx) ) {
			case 1:
				{
				State = 9671; Match(LR_BRACKET);
				State = 9675;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1333,_ctx) ) {
				case 1:
					{
					State = 9672; _localctx.database = id_();
					}
					break;

				case 2:
					{
					State = 9673; _localctx.databasename = Match(STRING);
					}
					break;

				case 3:
					{
					State = 9674; Match(DECIMAL);
					}
					break;
				}
				State = 9679;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1334,_ctx) ) {
				case 1:
					{
					State = 9677; Match(COMMA);
					State = 9678;
					_la = _input.La(1);
					if ( !(_la==NOINDEX || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (REPAIR_ALLOW_DATA_LOSS - 787)) | (1L << (REPAIR_FAST - 787)) | (1L << (REPAIR_REBUILD - 787)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 9681; Match(RR_BRACKET);
				}
				break;
			}
			State = 9693;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1337,_ctx) ) {
			case 1:
				{
				State = 9684; Match(WITH);
				State = 9685; _localctx.dbcc_option = dbcc_checkdb_table_option();
				State = 9690;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1336,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 9686; Match(COMMA);
						State = 9687; _localctx.dbcc_option = dbcc_checkdb_table_option();
						}
						} 
					}
					State = 9692;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1336,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checkfilegroup_optionContext : ParserRuleContext {
		public IToken max_dregree_of_parallelism;
		public ITerminalNode ALL_ERRORMSGS() { return GetToken(TSqlParser.ALL_ERRORMSGS, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public ITerminalNode TABLOCK() { return GetToken(TSqlParser.TABLOCK, 0); }
		public ITerminalNode ESTIMATEONLY() { return GetToken(TSqlParser.ESTIMATEONLY, 0); }
		public ITerminalNode PHYSICAL_ONLY() { return GetToken(TSqlParser.PHYSICAL_ONLY, 0); }
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Dbcc_checkfilegroup_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checkfilegroup_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checkfilegroup_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checkfilegroup_option(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checkfilegroup_optionContext dbcc_checkfilegroup_option() {
		Dbcc_checkfilegroup_optionContext _localctx = new Dbcc_checkfilegroup_optionContext(_ctx, State);
		EnterRule(_localctx, 778, RULE_dbcc_checkfilegroup_option);
		try {
			State = 9703;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1338,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9695; Match(ALL_ERRORMSGS);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9696; Match(NO_INFOMSGS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9697; Match(TABLOCK);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9698; Match(ESTIMATEONLY);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9699; Match(PHYSICAL_ONLY);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9700; Match(MAXDOP);
				State = 9701; Match(EQUAL);
				State = 9702; _localctx.max_dregree_of_parallelism = Match(DECIMAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checkfilegroupContext : ParserRuleContext {
		public IToken name;
		public IToken filegroup_id;
		public IToken filegroup_name;
		public Dbcc_checkfilegroup_optionContext dbcc_option;
		public ITerminalNode CHECKFILEGROUP() { return GetToken(TSqlParser.CHECKFILEGROUP, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Dbcc_checkfilegroup_optionContext[] dbcc_checkfilegroup_option() {
			return GetRuleContexts<Dbcc_checkfilegroup_optionContext>();
		}
		public Dbcc_checkfilegroup_optionContext dbcc_checkfilegroup_option(int i) {
			return GetRuleContext<Dbcc_checkfilegroup_optionContext>(i);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode NOINDEX() { return GetToken(TSqlParser.NOINDEX, 0); }
		public ITerminalNode REPAIR_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.REPAIR_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode REPAIR_FAST() { return GetToken(TSqlParser.REPAIR_FAST, 0); }
		public ITerminalNode REPAIR_REBUILD() { return GetToken(TSqlParser.REPAIR_REBUILD, 0); }
		public Dbcc_checkfilegroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checkfilegroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checkfilegroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checkfilegroup(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checkfilegroupContext dbcc_checkfilegroup() {
		Dbcc_checkfilegroupContext _localctx = new Dbcc_checkfilegroupContext(_ctx, State);
		EnterRule(_localctx, 780, RULE_dbcc_checkfilegroup);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9705; _localctx.name = Match(CHECKFILEGROUP);
			State = 9716;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1341,_ctx) ) {
			case 1:
				{
				State = 9706; Match(LR_BRACKET);
				State = 9709;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1339,_ctx) ) {
				case 1:
					{
					State = 9707; _localctx.filegroup_id = Match(DECIMAL);
					}
					break;

				case 2:
					{
					State = 9708; _localctx.filegroup_name = Match(STRING);
					}
					break;
				}
				State = 9713;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1340,_ctx) ) {
				case 1:
					{
					State = 9711; Match(COMMA);
					State = 9712;
					_la = _input.La(1);
					if ( !(_la==NOINDEX || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (REPAIR_ALLOW_DATA_LOSS - 787)) | (1L << (REPAIR_FAST - 787)) | (1L << (REPAIR_REBUILD - 787)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 9715; Match(RR_BRACKET);
				}
				break;
			}
			State = 9727;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1343,_ctx) ) {
			case 1:
				{
				State = 9718; Match(WITH);
				State = 9719; _localctx.dbcc_option = dbcc_checkfilegroup_option();
				State = 9724;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1342,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 9720; Match(COMMA);
						State = 9721; _localctx.dbcc_option = dbcc_checkfilegroup_option();
						}
						} 
					}
					State = 9726;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1342,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checktableContext : ParserRuleContext {
		public IToken name;
		public IToken table_or_view_name;
		public ExpressionContext index_id;
		public Dbcc_checkdb_table_optionContext dbcc_option;
		public ITerminalNode CHECKTABLE() { return GetToken(TSqlParser.CHECKTABLE, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Dbcc_checkdb_table_optionContext[] dbcc_checkdb_table_option() {
			return GetRuleContexts<Dbcc_checkdb_table_optionContext>();
		}
		public Dbcc_checkdb_table_optionContext dbcc_checkdb_table_option(int i) {
			return GetRuleContext<Dbcc_checkdb_table_optionContext>(i);
		}
		public ITerminalNode NOINDEX() { return GetToken(TSqlParser.NOINDEX, 0); }
		public ITerminalNode REPAIR_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.REPAIR_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode REPAIR_FAST() { return GetToken(TSqlParser.REPAIR_FAST, 0); }
		public ITerminalNode REPAIR_REBUILD() { return GetToken(TSqlParser.REPAIR_REBUILD, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Dbcc_checktableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checktable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checktable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checktable(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checktableContext dbcc_checktable() {
		Dbcc_checktableContext _localctx = new Dbcc_checktableContext(_ctx, State);
		EnterRule(_localctx, 782, RULE_dbcc_checktable);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9729; _localctx.name = Match(CHECKTABLE);
			State = 9730; Match(LR_BRACKET);
			State = 9731; _localctx.table_or_view_name = Match(STRING);
			State = 9740;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1345,_ctx) ) {
			case 1:
				{
				State = 9732; Match(COMMA);
				State = 9738;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1344,_ctx) ) {
				case 1:
					{
					State = 9733; Match(NOINDEX);
					}
					break;

				case 2:
					{
					State = 9734; _localctx.index_id = expression(0);
					}
					break;

				case 3:
					{
					State = 9735; Match(REPAIR_ALLOW_DATA_LOSS);
					}
					break;

				case 4:
					{
					State = 9736; Match(REPAIR_FAST);
					}
					break;

				case 5:
					{
					State = 9737; Match(REPAIR_REBUILD);
					}
					break;
				}
				}
				break;
			}
			State = 9742; Match(RR_BRACKET);
			State = 9752;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1347,_ctx) ) {
			case 1:
				{
				State = 9743; Match(WITH);
				State = 9744; _localctx.dbcc_option = dbcc_checkdb_table_option();
				State = 9749;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1346,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 9745; Match(COMMA);
						State = 9746; _localctx.dbcc_option = dbcc_checkdb_table_option();
						}
						} 
					}
					State = 9751;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1346,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_cleantableContext : ParserRuleContext {
		public IToken name;
		public Id_Context database;
		public IToken databasename;
		public Id_Context table_or_view;
		public IToken table_or_view_name;
		public IToken batch_size;
		public IToken dbcc_option;
		public ITerminalNode CLEANTABLE() { return GetToken(TSqlParser.CLEANTABLE, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public Dbcc_cleantableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_cleantable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_cleantable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_cleantable(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_cleantableContext dbcc_cleantable() {
		Dbcc_cleantableContext _localctx = new Dbcc_cleantableContext(_ctx, State);
		EnterRule(_localctx, 784, RULE_dbcc_cleantable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9754; _localctx.name = Match(CLEANTABLE);
			State = 9755; Match(LR_BRACKET);
			State = 9759;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1348,_ctx) ) {
			case 1:
				{
				State = 9756; _localctx.database = id_();
				}
				break;

			case 2:
				{
				State = 9757; _localctx.databasename = Match(STRING);
				}
				break;

			case 3:
				{
				State = 9758; Match(DECIMAL);
				}
				break;
			}
			State = 9761; Match(COMMA);
			State = 9764;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1349,_ctx) ) {
			case 1:
				{
				State = 9762; _localctx.table_or_view = id_();
				}
				break;

			case 2:
				{
				State = 9763; _localctx.table_or_view_name = Match(STRING);
				}
				break;
			}
			State = 9768;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1350,_ctx) ) {
			case 1:
				{
				State = 9766; Match(COMMA);
				State = 9767; _localctx.batch_size = Match(DECIMAL);
				}
				break;
			}
			State = 9770; Match(RR_BRACKET);
			State = 9773;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1351,_ctx) ) {
			case 1:
				{
				State = 9771; Match(WITH);
				State = 9772; _localctx.dbcc_option = Match(NO_INFOMSGS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_clonedatabase_optionContext : ParserRuleContext {
		public ITerminalNode NO_STATISTICS() { return GetToken(TSqlParser.NO_STATISTICS, 0); }
		public ITerminalNode NO_QUERYSTORE() { return GetToken(TSqlParser.NO_QUERYSTORE, 0); }
		public ITerminalNode SERVICEBROKER() { return GetToken(TSqlParser.SERVICEBROKER, 0); }
		public ITerminalNode VERIFY_CLONEDB() { return GetToken(TSqlParser.VERIFY_CLONEDB, 0); }
		public ITerminalNode BACKUP_CLONEDB() { return GetToken(TSqlParser.BACKUP_CLONEDB, 0); }
		public Dbcc_clonedatabase_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_clonedatabase_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_clonedatabase_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_clonedatabase_option(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_clonedatabase_optionContext dbcc_clonedatabase_option() {
		Dbcc_clonedatabase_optionContext _localctx = new Dbcc_clonedatabase_optionContext(_ctx, State);
		EnterRule(_localctx, 786, RULE_dbcc_clonedatabase_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9775;
			_la = _input.La(1);
			if ( !(_la==BACKUP_CLONEDB || _la==NO_QUERYSTORE || _la==NO_STATISTICS || _la==SERVICEBROKER || _la==VERIFY_CLONEDB) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_clonedatabaseContext : ParserRuleContext {
		public IToken name;
		public Id_Context source_database;
		public Id_Context target_database;
		public Dbcc_clonedatabase_optionContext dbcc_option;
		public ITerminalNode CLONEDATABASE() { return GetToken(TSqlParser.CLONEDATABASE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Dbcc_clonedatabase_optionContext[] dbcc_clonedatabase_option() {
			return GetRuleContexts<Dbcc_clonedatabase_optionContext>();
		}
		public Dbcc_clonedatabase_optionContext dbcc_clonedatabase_option(int i) {
			return GetRuleContext<Dbcc_clonedatabase_optionContext>(i);
		}
		public Dbcc_clonedatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_clonedatabase; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_clonedatabase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_clonedatabase(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_clonedatabaseContext dbcc_clonedatabase() {
		Dbcc_clonedatabaseContext _localctx = new Dbcc_clonedatabaseContext(_ctx, State);
		EnterRule(_localctx, 788, RULE_dbcc_clonedatabase);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9777; _localctx.name = Match(CLONEDATABASE);
			State = 9778; Match(LR_BRACKET);
			State = 9779; _localctx.source_database = id_();
			State = 9780; Match(COMMA);
			State = 9781; _localctx.target_database = id_();
			State = 9782; Match(RR_BRACKET);
			State = 9792;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1353,_ctx) ) {
			case 1:
				{
				State = 9783; Match(WITH);
				State = 9784; _localctx.dbcc_option = dbcc_clonedatabase_option();
				State = 9789;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1352,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 9785; Match(COMMA);
						State = 9786; _localctx.dbcc_option = dbcc_clonedatabase_option();
						}
						} 
					}
					State = 9791;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1352,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_pdw_showspaceusedContext : ParserRuleContext {
		public IToken name;
		public Id_Context tablename;
		public IToken dbcc_option;
		public ITerminalNode PDW_SHOWSPACEUSED() { return GetToken(TSqlParser.PDW_SHOWSPACEUSED, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode IGNORE_REPLICATED_TABLE_CACHE() { return GetToken(TSqlParser.IGNORE_REPLICATED_TABLE_CACHE, 0); }
		public Dbcc_pdw_showspaceusedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_pdw_showspaceused; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_pdw_showspaceused(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_pdw_showspaceused(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_pdw_showspaceusedContext dbcc_pdw_showspaceused() {
		Dbcc_pdw_showspaceusedContext _localctx = new Dbcc_pdw_showspaceusedContext(_ctx, State);
		EnterRule(_localctx, 790, RULE_dbcc_pdw_showspaceused);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9794; _localctx.name = Match(PDW_SHOWSPACEUSED);
			State = 9799;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1354,_ctx) ) {
			case 1:
				{
				State = 9795; Match(LR_BRACKET);
				State = 9796; _localctx.tablename = id_();
				State = 9797; Match(RR_BRACKET);
				}
				break;
			}
			State = 9803;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1355,_ctx) ) {
			case 1:
				{
				State = 9801; Match(WITH);
				State = 9802; _localctx.dbcc_option = Match(IGNORE_REPLICATED_TABLE_CACHE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_proccacheContext : ParserRuleContext {
		public IToken name;
		public IToken dbcc_option;
		public ITerminalNode PROCCACHE() { return GetToken(TSqlParser.PROCCACHE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public Dbcc_proccacheContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_proccache; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_proccache(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_proccache(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_proccacheContext dbcc_proccache() {
		Dbcc_proccacheContext _localctx = new Dbcc_proccacheContext(_ctx, State);
		EnterRule(_localctx, 792, RULE_dbcc_proccache);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9805; _localctx.name = Match(PROCCACHE);
			State = 9808;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1356,_ctx) ) {
			case 1:
				{
				State = 9806; Match(WITH);
				State = 9807; _localctx.dbcc_option = Match(NO_INFOMSGS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_showcontig_optionContext : ParserRuleContext {
		public ITerminalNode ALL_INDEXES() { return GetToken(TSqlParser.ALL_INDEXES, 0); }
		public ITerminalNode TABLERESULTS() { return GetToken(TSqlParser.TABLERESULTS, 0); }
		public ITerminalNode FAST() { return GetToken(TSqlParser.FAST, 0); }
		public ITerminalNode ALL_LEVELS() { return GetToken(TSqlParser.ALL_LEVELS, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public Dbcc_showcontig_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_showcontig_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_showcontig_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_showcontig_option(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_showcontig_optionContext dbcc_showcontig_option() {
		Dbcc_showcontig_optionContext _localctx = new Dbcc_showcontig_optionContext(_ctx, State);
		EnterRule(_localctx, 794, RULE_dbcc_showcontig_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9810;
			_la = _input.La(1);
			if ( !(_la==ALL_INDEXES || _la==ALL_LEVELS || _la==FAST || _la==NO_INFOMSGS || _la==TABLERESULTS) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_showcontigContext : ParserRuleContext {
		public IToken name;
		public ExpressionContext table_or_view;
		public ExpressionContext index;
		public Dbcc_showcontig_optionContext dbcc_option;
		public ITerminalNode SHOWCONTIG() { return GetToken(TSqlParser.SHOWCONTIG, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Dbcc_showcontig_optionContext[] dbcc_showcontig_option() {
			return GetRuleContexts<Dbcc_showcontig_optionContext>();
		}
		public Dbcc_showcontig_optionContext dbcc_showcontig_option(int i) {
			return GetRuleContext<Dbcc_showcontig_optionContext>(i);
		}
		public Dbcc_showcontigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_showcontig; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_showcontig(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_showcontig(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_showcontigContext dbcc_showcontig() {
		Dbcc_showcontigContext _localctx = new Dbcc_showcontigContext(_ctx, State);
		EnterRule(_localctx, 796, RULE_dbcc_showcontig);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9812; _localctx.name = Match(SHOWCONTIG);
			State = 9821;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1358,_ctx) ) {
			case 1:
				{
				State = 9813; Match(LR_BRACKET);
				State = 9814; _localctx.table_or_view = expression(0);
				State = 9817;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1357,_ctx) ) {
				case 1:
					{
					State = 9815; Match(COMMA);
					State = 9816; _localctx.index = expression(0);
					}
					break;
				}
				State = 9819; Match(RR_BRACKET);
				}
				break;
			}
			State = 9832;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1360,_ctx) ) {
			case 1:
				{
				State = 9823; Match(WITH);
				State = 9824; _localctx.dbcc_option = dbcc_showcontig_option();
				State = 9829;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1359,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 9825; Match(COMMA);
						State = 9826; dbcc_showcontig_option();
						}
						} 
					}
					State = 9831;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1359,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_shrinklogContext : ParserRuleContext {
		public IToken name;
		public IToken dbcc_option;
		public ITerminalNode SHRINKLOG() { return GetToken(TSqlParser.SHRINKLOG, 0); }
		public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode MB() { return GetToken(TSqlParser.MB, 0); }
		public ITerminalNode GB() { return GetToken(TSqlParser.GB, 0); }
		public ITerminalNode TB() { return GetToken(TSqlParser.TB, 0); }
		public Dbcc_shrinklogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_shrinklog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_shrinklog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_shrinklog(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_shrinklogContext dbcc_shrinklog() {
		Dbcc_shrinklogContext _localctx = new Dbcc_shrinklogContext(_ctx, State);
		EnterRule(_localctx, 798, RULE_dbcc_shrinklog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9834; _localctx.name = Match(SHRINKLOG);
			State = 9844;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1362,_ctx) ) {
			case 1:
				{
				State = 9835; Match(LR_BRACKET);
				State = 9836; Match(SIZE);
				State = 9837; Match(EQUAL);
				State = 9841;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1361,_ctx) ) {
				case 1:
					{
					{
					State = 9838; Match(DECIMAL);
					State = 9839;
					_la = _input.La(1);
					if ( !(_la==GB || _la==MB || _la==TB) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					}
					break;

				case 2:
					{
					State = 9840; Match(DEFAULT);
					}
					break;
				}
				State = 9843; Match(RR_BRACKET);
				}
				break;
			}
			State = 9848;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1363,_ctx) ) {
			case 1:
				{
				State = 9846; Match(WITH);
				State = 9847; _localctx.dbcc_option = Match(NO_INFOMSGS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_dbreindexContext : ParserRuleContext {
		public IToken name;
		public Id_or_stringContext table;
		public Id_or_stringContext index_name;
		public ExpressionContext fillfactor;
		public IToken dbcc_option;
		public ITerminalNode DBREINDEX() { return GetToken(TSqlParser.DBREINDEX, 0); }
		public Id_or_stringContext[] id_or_string() {
			return GetRuleContexts<Id_or_stringContext>();
		}
		public Id_or_stringContext id_or_string(int i) {
			return GetRuleContext<Id_or_stringContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Dbcc_dbreindexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_dbreindex; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_dbreindex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_dbreindex(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_dbreindexContext dbcc_dbreindex() {
		Dbcc_dbreindexContext _localctx = new Dbcc_dbreindexContext(_ctx, State);
		EnterRule(_localctx, 800, RULE_dbcc_dbreindex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9850; _localctx.name = Match(DBREINDEX);
			State = 9851; Match(LR_BRACKET);
			State = 9852; _localctx.table = id_or_string();
			State = 9859;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1365,_ctx) ) {
			case 1:
				{
				State = 9853; Match(COMMA);
				State = 9854; _localctx.index_name = id_or_string();
				State = 9857;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1364,_ctx) ) {
				case 1:
					{
					State = 9855; Match(COMMA);
					State = 9856; _localctx.fillfactor = expression(0);
					}
					break;
				}
				}
				break;
			}
			State = 9861; Match(RR_BRACKET);
			State = 9864;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1366,_ctx) ) {
			case 1:
				{
				State = 9862; Match(WITH);
				State = 9863; _localctx.dbcc_option = Match(NO_INFOMSGS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_dll_freeContext : ParserRuleContext {
		public Id_Context dllname;
		public IToken name;
		public IToken dbcc_option;
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode FREE() { return GetToken(TSqlParser.FREE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public Dbcc_dll_freeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_dll_free; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_dll_free(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_dll_free(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_dll_freeContext dbcc_dll_free() {
		Dbcc_dll_freeContext _localctx = new Dbcc_dll_freeContext(_ctx, State);
		EnterRule(_localctx, 802, RULE_dbcc_dll_free);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9866; _localctx.dllname = id_();
			State = 9867; Match(LR_BRACKET);
			State = 9868; _localctx.name = Match(FREE);
			State = 9869; Match(RR_BRACKET);
			State = 9872;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1367,_ctx) ) {
			case 1:
				{
				State = 9870; Match(WITH);
				State = 9871; _localctx.dbcc_option = Match(NO_INFOMSGS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_dropcleanbuffersContext : ParserRuleContext {
		public IToken name;
		public IToken dbcc_option;
		public ITerminalNode DROPCLEANBUFFERS() { return GetToken(TSqlParser.DROPCLEANBUFFERS, 0); }
		public ITerminalNode COMPUTE() { return GetToken(TSqlParser.COMPUTE, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public Dbcc_dropcleanbuffersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_dropcleanbuffers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_dropcleanbuffers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_dropcleanbuffers(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_dropcleanbuffersContext dbcc_dropcleanbuffers() {
		Dbcc_dropcleanbuffersContext _localctx = new Dbcc_dropcleanbuffersContext(_ctx, State);
		EnterRule(_localctx, 804, RULE_dbcc_dropcleanbuffers);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9874; _localctx.name = Match(DROPCLEANBUFFERS);
			State = 9879;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1368,_ctx) ) {
			case 1:
				{
				State = 9875; Match(LR_BRACKET);
				State = 9876; Match(COMPUTE);
				}
				break;

			case 2:
				{
				State = 9877; Match(ALL);
				State = 9878; Match(RR_BRACKET);
				}
				break;
			}
			State = 9883;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1369,_ctx) ) {
			case 1:
				{
				State = 9881; Match(WITH);
				State = 9882; _localctx.dbcc_option = Match(NO_INFOMSGS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_clauseContext : ParserRuleContext {
		public ITerminalNode DBCC() { return GetToken(TSqlParser.DBCC, 0); }
		public Dbcc_checkallocContext dbcc_checkalloc() {
			return GetRuleContext<Dbcc_checkallocContext>(0);
		}
		public Dbcc_checkcatalogContext dbcc_checkcatalog() {
			return GetRuleContext<Dbcc_checkcatalogContext>(0);
		}
		public Dbcc_checkconstraintsContext dbcc_checkconstraints() {
			return GetRuleContext<Dbcc_checkconstraintsContext>(0);
		}
		public Dbcc_checkdbContext dbcc_checkdb() {
			return GetRuleContext<Dbcc_checkdbContext>(0);
		}
		public Dbcc_checkfilegroupContext dbcc_checkfilegroup() {
			return GetRuleContext<Dbcc_checkfilegroupContext>(0);
		}
		public Dbcc_checktableContext dbcc_checktable() {
			return GetRuleContext<Dbcc_checktableContext>(0);
		}
		public Dbcc_cleantableContext dbcc_cleantable() {
			return GetRuleContext<Dbcc_cleantableContext>(0);
		}
		public Dbcc_clonedatabaseContext dbcc_clonedatabase() {
			return GetRuleContext<Dbcc_clonedatabaseContext>(0);
		}
		public Dbcc_dbreindexContext dbcc_dbreindex() {
			return GetRuleContext<Dbcc_dbreindexContext>(0);
		}
		public Dbcc_dll_freeContext dbcc_dll_free() {
			return GetRuleContext<Dbcc_dll_freeContext>(0);
		}
		public Dbcc_dropcleanbuffersContext dbcc_dropcleanbuffers() {
			return GetRuleContext<Dbcc_dropcleanbuffersContext>(0);
		}
		public Dbcc_pdw_showspaceusedContext dbcc_pdw_showspaceused() {
			return GetRuleContext<Dbcc_pdw_showspaceusedContext>(0);
		}
		public Dbcc_proccacheContext dbcc_proccache() {
			return GetRuleContext<Dbcc_proccacheContext>(0);
		}
		public Dbcc_showcontigContext dbcc_showcontig() {
			return GetRuleContext<Dbcc_showcontigContext>(0);
		}
		public Dbcc_shrinklogContext dbcc_shrinklog() {
			return GetRuleContext<Dbcc_shrinklogContext>(0);
		}
		public Dbcc_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_clause(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_clauseContext dbcc_clause() {
		Dbcc_clauseContext _localctx = new Dbcc_clauseContext(_ctx, State);
		EnterRule(_localctx, 806, RULE_dbcc_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9885; Match(DBCC);
			State = 9901;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1370,_ctx) ) {
			case 1:
				{
				State = 9886; dbcc_checkalloc();
				}
				break;

			case 2:
				{
				State = 9887; dbcc_checkcatalog();
				}
				break;

			case 3:
				{
				State = 9888; dbcc_checkconstraints();
				}
				break;

			case 4:
				{
				State = 9889; dbcc_checkdb();
				}
				break;

			case 5:
				{
				State = 9890; dbcc_checkfilegroup();
				}
				break;

			case 6:
				{
				State = 9891; dbcc_checktable();
				}
				break;

			case 7:
				{
				State = 9892; dbcc_cleantable();
				}
				break;

			case 8:
				{
				State = 9893; dbcc_clonedatabase();
				}
				break;

			case 9:
				{
				State = 9894; dbcc_dbreindex();
				}
				break;

			case 10:
				{
				State = 9895; dbcc_dll_free();
				}
				break;

			case 11:
				{
				State = 9896; dbcc_dropcleanbuffers();
				}
				break;

			case 12:
				{
				State = 9897; dbcc_pdw_showspaceused();
				}
				break;

			case 13:
				{
				State = 9898; dbcc_proccache();
				}
				break;

			case 14:
				{
				State = 9899; dbcc_showcontig();
				}
				break;

			case 15:
				{
				State = 9900; dbcc_shrinklog();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_clauseContext : ParserRuleContext {
		public IToken clause;
		public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode CALLER() { return GetToken(TSqlParser.CALLER, 0); }
		public ITerminalNode SELF() { return GetToken(TSqlParser.SELF, 0); }
		public ITerminalNode OWNER() { return GetToken(TSqlParser.OWNER, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Execute_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_clause(this);
		}
	}

	[RuleVersion(0)]
	public Execute_clauseContext execute_clause() {
		Execute_clauseContext _localctx = new Execute_clauseContext(_ctx, State);
		EnterRule(_localctx, 808, RULE_execute_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9903; Match(EXECUTE);
			State = 9904; Match(AS);
			State = 9905;
			_localctx.clause = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==CALLER || _la==OWNER || _la==SELF || _la==STRING) ) {
				_localctx.clause = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_localContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Declare_localContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_local; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_local(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_local(this);
		}
	}

	[RuleVersion(0)]
	public Declare_localContext declare_local() {
		Declare_localContext _localctx = new Declare_localContext(_ctx, State);
		EnterRule(_localctx, 810, RULE_declare_local);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9907; Match(LOCAL_ID);
			State = 9909;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1371,_ctx) ) {
			case 1:
				{
				State = 9908; Match(AS);
				}
				break;
			}
			State = 9913;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1372,_ctx) ) {
			case 1:
				{
				State = 9911; table_name();
				}
				break;

			case 2:
				{
				State = 9912; data_type();
				}
				break;
			}
			State = 9917;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1373,_ctx) ) {
			case 1:
				{
				State = 9915; Match(EQUAL);
				State = 9916; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_type_definitionContext : ParserRuleContext {
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return GetRuleContext<Column_def_table_constraintsContext>(0);
		}
		public Table_type_indicesContext[] table_type_indices() {
			return GetRuleContexts<Table_type_indicesContext>();
		}
		public Table_type_indicesContext table_type_indices(int i) {
			return GetRuleContext<Table_type_indicesContext>(i);
		}
		public Table_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_type_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_type_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_type_definition(this);
		}
	}

	[RuleVersion(0)]
	public Table_type_definitionContext table_type_definition() {
		Table_type_definitionContext _localctx = new Table_type_definitionContext(_ctx, State);
		EnterRule(_localctx, 812, RULE_table_type_definition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9919; Match(TABLE);
			State = 9920; Match(LR_BRACKET);
			State = 9921; column_def_table_constraints();
			State = 9928;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1375,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 9923;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1374,_ctx) ) {
					case 1:
						{
						State = 9922; Match(COMMA);
						}
						break;
					}
					State = 9925; table_type_indices();
					}
					} 
				}
				State = 9930;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1375,_ctx);
			}
			State = 9931; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_type_indicesContext : ParserRuleContext {
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode CLUSTERED() { return GetToken(TSqlParser.CLUSTERED, 0); }
		public ITerminalNode NONCLUSTERED() { return GetToken(TSqlParser.NONCLUSTERED, 0); }
		public ITerminalNode CHECK() { return GetToken(TSqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Table_type_indicesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_type_indices; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_type_indices(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_type_indices(this);
		}
	}

	[RuleVersion(0)]
	public Table_type_indicesContext table_type_indices() {
		Table_type_indicesContext _localctx = new Table_type_indicesContext(_ctx, State);
		EnterRule(_localctx, 814, RULE_table_type_indices);
		int _la;
		try {
			State = 9954;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1379,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9943;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1378,_ctx) ) {
				case 1:
					{
					{
					State = 9937;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1376,_ctx) ) {
					case 1:
						{
						State = 9933; Match(PRIMARY);
						State = 9934; Match(KEY);
						}
						break;

					case 2:
						{
						State = 9935; Match(INDEX);
						State = 9936; id_();
						}
						break;
					}
					State = 9940;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1377,_ctx) ) {
					case 1:
						{
						State = 9939;
						_la = _input.La(1);
						if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					}
					break;

				case 2:
					{
					State = 9942; Match(UNIQUE);
					}
					break;
				}
				State = 9945; Match(LR_BRACKET);
				State = 9946; column_name_list_with_order();
				State = 9947; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9949; Match(CHECK);
				State = 9950; Match(LR_BRACKET);
				State = 9951; search_condition(0);
				State = 9952; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_type_definitionContext : ParserRuleContext {
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public Xml_schema_collectionContext xml_schema_collection() {
			return GetRuleContext<Xml_schema_collectionContext>(0);
		}
		public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		public ITerminalNode DOCUMENT() { return GetToken(TSqlParser.DOCUMENT, 0); }
		public Xml_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_type_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_type_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_type_definition(this);
		}
	}

	[RuleVersion(0)]
	public Xml_type_definitionContext xml_type_definition() {
		Xml_type_definitionContext _localctx = new Xml_type_definitionContext(_ctx, State);
		EnterRule(_localctx, 816, RULE_xml_type_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9956; Match(XML);
			State = 9957; Match(LR_BRACKET);
			State = 9959;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1380,_ctx) ) {
			case 1:
				{
				State = 9958;
				_la = _input.La(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 9961; xml_schema_collection();
			State = 9962; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_schema_collectionContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(TSqlParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(TSqlParser.ID, i);
		}
		public Xml_schema_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_schema_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_schema_collection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_schema_collection(this);
		}
	}

	[RuleVersion(0)]
	public Xml_schema_collectionContext xml_schema_collection() {
		Xml_schema_collectionContext _localctx = new Xml_schema_collectionContext(_ctx, State);
		EnterRule(_localctx, 818, RULE_xml_schema_collection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9964; Match(ID);
			State = 9965; Match(DOT);
			State = 9966; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_def_table_constraintsContext : ParserRuleContext {
		public Column_def_table_constraintContext[] column_def_table_constraint() {
			return GetRuleContexts<Column_def_table_constraintContext>();
		}
		public Column_def_table_constraintContext column_def_table_constraint(int i) {
			return GetRuleContext<Column_def_table_constraintContext>(i);
		}
		public Column_def_table_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def_table_constraints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_def_table_constraints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_def_table_constraints(this);
		}
	}

	[RuleVersion(0)]
	public Column_def_table_constraintsContext column_def_table_constraints() {
		Column_def_table_constraintsContext _localctx = new Column_def_table_constraintsContext(_ctx, State);
		EnterRule(_localctx, 820, RULE_column_def_table_constraints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9968; column_def_table_constraint();
			State = 9975;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1382,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 9970;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1381,_ctx) ) {
					case 1:
						{
						State = 9969; Match(COMMA);
						}
						break;
					}
					State = 9972; column_def_table_constraint();
					}
					} 
				}
				State = 9977;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1382,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_def_table_constraintContext : ParserRuleContext {
		public Column_definitionContext column_definition() {
			return GetRuleContext<Column_definitionContext>(0);
		}
		public Materialized_column_definitionContext materialized_column_definition() {
			return GetRuleContext<Materialized_column_definitionContext>(0);
		}
		public Table_constraintContext table_constraint() {
			return GetRuleContext<Table_constraintContext>(0);
		}
		public Column_def_table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def_table_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_def_table_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_def_table_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Column_def_table_constraintContext column_def_table_constraint() {
		Column_def_table_constraintContext _localctx = new Column_def_table_constraintContext(_ctx, State);
		EnterRule(_localctx, 822, RULE_column_def_table_constraint);
		try {
			State = 9981;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1383,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9978; column_definition();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9979; materialized_column_definition();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9980; table_constraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_definitionContext : ParserRuleContext {
		public Id_Context schema;
		public Id_Context constraint;
		public IToken seed;
		public IToken increment;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public Null_or_defaultContext[] null_or_default() {
			return GetRuleContexts<Null_or_defaultContext>();
		}
		public Null_or_defaultContext null_or_default(int i) {
			return GetRuleContext<Null_or_defaultContext>(i);
		}
		public ITerminalNode[] IDENTITY() { return GetTokens(TSqlParser.IDENTITY); }
		public ITerminalNode IDENTITY(int i) {
			return GetToken(TSqlParser.IDENTITY, i);
		}
		public ITerminalNode ROWGUIDCOL() { return GetToken(TSqlParser.ROWGUIDCOL, 0); }
		public Column_constraintContext[] column_constraint() {
			return GetRuleContexts<Column_constraintContext>();
		}
		public Column_constraintContext column_constraint(int i) {
			return GetRuleContext<Column_constraintContext>(i);
		}
		public ITerminalNode PERSISTED() { return GetToken(TSqlParser.PERSISTED, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(TSqlParser.CONSTRAINT, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_definition(this);
		}
	}

	[RuleVersion(0)]
	public Column_definitionContext column_definition() {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, State);
		EnterRule(_localctx, 824, RULE_column_definition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9983; id_();
			State = 9995;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1386,_ctx) ) {
			case 1:
				{
				State = 9987;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1384,_ctx) ) {
				case 1:
					{
					State = 9984; _localctx.schema = id_();
					State = 9985; Match(DOT);
					}
					break;
				}
				State = 9989; data_type();
				}
				break;

			case 2:
				{
				State = 9990; Match(AS);
				State = 9991; expression(0);
				State = 9993;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1385,_ctx) ) {
				case 1:
					{
					State = 9992; Match(PERSISTED);
					}
					break;
				}
				}
				break;
			}
			State = 9999;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1387,_ctx) ) {
			case 1:
				{
				State = 9997; Match(COLLATE);
				State = 9998; id_();
				}
				break;
			}
			State = 10002;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1388,_ctx) ) {
			case 1:
				{
				State = 10001; null_notnull();
				}
				break;
			}
			State = 10025;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1393,_ctx) ) {
			case 1:
				{
				State = 10006;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1389,_ctx) ) {
				case 1:
					{
					State = 10004; Match(CONSTRAINT);
					State = 10005; _localctx.constraint = id_();
					}
					break;
				}
				State = 10008; null_or_default();
				State = 10010;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1390,_ctx) ) {
				case 1:
					{
					State = 10009; null_or_default();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 10012; Match(IDENTITY);
				State = 10018;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1391,_ctx) ) {
				case 1:
					{
					State = 10013; Match(LR_BRACKET);
					State = 10014; _localctx.seed = Match(DECIMAL);
					State = 10015; Match(COMMA);
					State = 10016; _localctx.increment = Match(DECIMAL);
					State = 10017; Match(RR_BRACKET);
					}
					break;
				}
				State = 10023;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1392,_ctx) ) {
				case 1:
					{
					State = 10020; Match(NOT);
					State = 10021; Match(FOR);
					State = 10022; Match(REPLICATION);
					}
					break;
				}
				}
				break;
			}
			State = 10028;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1394,_ctx) ) {
			case 1:
				{
				State = 10027; Match(ROWGUIDCOL);
				}
				break;
			}
			State = 10033;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1395,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 10030; column_constraint();
					}
					} 
				}
				State = 10035;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1395,_ctx);
			}
			State = 10044;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1397,_ctx) ) {
			case 1:
				{
				State = 10036; Match(IDENTITY);
				State = 10042;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1396,_ctx) ) {
				case 1:
					{
					State = 10037; Match(LR_BRACKET);
					State = 10038; _localctx.seed = Match(DECIMAL);
					State = 10039; Match(COMMA);
					State = 10040; _localctx.increment = Match(DECIMAL);
					State = 10041; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Materialized_column_definitionContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COMPUTE() { return GetToken(TSqlParser.COMPUTE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode MATERIALIZED() { return GetToken(TSqlParser.MATERIALIZED, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public Materialized_column_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialized_column_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMaterialized_column_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMaterialized_column_definition(this);
		}
	}

	[RuleVersion(0)]
	public Materialized_column_definitionContext materialized_column_definition() {
		Materialized_column_definitionContext _localctx = new Materialized_column_definitionContext(_ctx, State);
		EnterRule(_localctx, 826, RULE_materialized_column_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10046; id_();
			State = 10047;
			_la = _input.La(1);
			if ( !(_la==AS || _la==COMPUTE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 10048; expression(0);
			State = 10052;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1398,_ctx) ) {
			case 1:
				{
				State = 10049; Match(MATERIALIZED);
				}
				break;

			case 2:
				{
				State = 10050; Match(NOT);
				State = 10051; Match(MATERIALIZED);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraintContext : ParserRuleContext {
		public Id_Context constraint;
		public Column_name_listContext pk;
		public ITerminalNode CHECK() { return GetToken(TSqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(TSqlParser.CONSTRAINT, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode FOREIGN() { return GetToken(TSqlParser.FOREIGN, 0); }
		public On_deleteContext on_delete() {
			return GetRuleContext<On_deleteContext>(0);
		}
		public On_updateContext on_update() {
			return GetRuleContext<On_updateContext>(0);
		}
		public Column_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraintContext column_constraint() {
		Column_constraintContext _localctx = new Column_constraintContext(_ctx, State);
		EnterRule(_localctx, 828, RULE_column_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10056;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1399,_ctx) ) {
			case 1:
				{
				State = 10054; Match(CONSTRAINT);
				State = 10055; _localctx.constraint = id_();
				}
				break;
			}
			State = 10095;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1407,_ctx) ) {
			case 1:
				{
				State = 10061;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1400,_ctx) ) {
				case 1:
					{
					State = 10058; Match(PRIMARY);
					State = 10059; Match(KEY);
					}
					break;

				case 2:
					{
					State = 10060; Match(UNIQUE);
					}
					break;
				}
				State = 10064;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1401,_ctx) ) {
				case 1:
					{
					State = 10063; clustered();
					}
					break;
				}
				State = 10067;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1402,_ctx) ) {
				case 1:
					{
					State = 10066; index_options();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 10069; Match(CHECK);
				State = 10073;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1403,_ctx) ) {
				case 1:
					{
					State = 10070; Match(NOT);
					State = 10071; Match(FOR);
					State = 10072; Match(REPLICATION);
					}
					break;
				}
				State = 10075; Match(LR_BRACKET);
				State = 10076; search_condition(0);
				State = 10077; Match(RR_BRACKET);
				}
				break;

			case 3:
				{
				State = 10081;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1404,_ctx) ) {
				case 1:
					{
					State = 10079; Match(FOREIGN);
					State = 10080; Match(KEY);
					}
					break;
				}
				State = 10083; Match(REFERENCES);
				State = 10084; table_name();
				State = 10085; Match(LR_BRACKET);
				State = 10086; _localctx.pk = column_name_list();
				State = 10087; Match(RR_BRACKET);
				State = 10089;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1405,_ctx) ) {
				case 1:
					{
					State = 10088; on_delete();
					}
					break;
				}
				State = 10092;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1406,_ctx) ) {
				case 1:
					{
					State = 10091; on_update();
					}
					break;
				}
				}
				break;

			case 4:
				{
				State = 10094; null_notnull();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_constraintContext : ParserRuleContext {
		public Id_Context constraint;
		public Default_value_columnsContext default_value_column;
		public Id_Context forColumn;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		public ITerminalNode CHECK() { return GetToken(TSqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode FOREIGN() { return GetToken(TSqlParser.FOREIGN, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(TSqlParser.CONSTRAINT, 0); }
		public Default_value_columnsContext default_value_columns() {
			return GetRuleContext<Default_value_columnsContext>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Column_name_listContext[] column_name_list() {
			return GetRuleContexts<Column_name_listContext>();
		}
		public Column_name_listContext column_name_list(int i) {
			return GetRuleContext<Column_name_listContext>(i);
		}
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public On_deleteContext on_delete() {
			return GetRuleContext<On_deleteContext>(0);
		}
		public On_updateContext on_update() {
			return GetRuleContext<On_updateContext>(0);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Table_constraintContext table_constraint() {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, State);
		EnterRule(_localctx, 830, RULE_table_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10099;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1408,_ctx) ) {
			case 1:
				{
				State = 10097; Match(CONSTRAINT);
				State = 10098; _localctx.constraint = id_();
				}
				break;
			}
			State = 10153;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1417,_ctx) ) {
			case 1:
				{
				State = 10104;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1409,_ctx) ) {
				case 1:
					{
					State = 10101; Match(PRIMARY);
					State = 10102; Match(KEY);
					}
					break;

				case 2:
					{
					State = 10103; Match(UNIQUE);
					}
					break;
				}
				State = 10107;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1410,_ctx) ) {
				case 1:
					{
					State = 10106; clustered();
					}
					break;
				}
				State = 10109; Match(LR_BRACKET);
				State = 10110; column_name_list_with_order();
				State = 10111; Match(RR_BRACKET);
				State = 10113;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1411,_ctx) ) {
				case 1:
					{
					State = 10112; index_options();
					}
					break;
				}
				State = 10117;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1412,_ctx) ) {
				case 1:
					{
					State = 10115; Match(ON);
					State = 10116; id_();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 10119; Match(CHECK);
				State = 10123;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1413,_ctx) ) {
				case 1:
					{
					State = 10120; Match(NOT);
					State = 10121; Match(FOR);
					State = 10122; Match(REPLICATION);
					}
					break;
				}
				State = 10125; Match(LR_BRACKET);
				State = 10126; search_condition(0);
				State = 10127; Match(RR_BRACKET);
				}
				break;

			case 3:
				{
				State = 10129; Match(DEFAULT);
				State = 10130; _localctx.default_value_column = default_value_columns();
				State = 10131; Match(FOR);
				State = 10132; _localctx.forColumn = id_();
				}
				break;

			case 4:
				{
				State = 10134; Match(FOREIGN);
				State = 10135; Match(KEY);
				State = 10136; Match(LR_BRACKET);
				State = 10137; _localctx.fk = column_name_list();
				State = 10138; Match(RR_BRACKET);
				State = 10139; Match(REFERENCES);
				State = 10140; table_name();
				State = 10145;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1414,_ctx) ) {
				case 1:
					{
					State = 10141; Match(LR_BRACKET);
					State = 10142; _localctx.pk = column_name_list();
					State = 10143; Match(RR_BRACKET);
					}
					break;
				}
				State = 10148;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1415,_ctx) ) {
				case 1:
					{
					State = 10147; on_delete();
					}
					break;
				}
				State = 10151;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1416,_ctx) ) {
				case 1:
					{
					State = 10150; on_update();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_value_columnsContext : ParserRuleContext {
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode PLUS() { return GetToken(TSqlParser.PLUS, 0); }
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public Default_value_columnsContext default_value_columns() {
			return GetRuleContext<Default_value_columnsContext>(0);
		}
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Default_value_columnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_value_columns; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDefault_value_columns(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDefault_value_columns(this);
		}
	}

	[RuleVersion(0)]
	public Default_value_columnsContext default_value_columns() {
		Default_value_columnsContext _localctx = new Default_value_columnsContext(_ctx, State);
		EnterRule(_localctx, 832, RULE_default_value_columns);
		try {
			int _alt;
			State = 10203;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1423,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10155; Match(NULL_);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10156; Match(STRING);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10157; Match(PLUS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10158; function_call();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10160;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1418,_ctx) ) {
				case 1:
					{
					State = 10159; Match(MINUS);
					}
					break;
				}
				State = 10163;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 10162; Match(DECIMAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 10165;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1419,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10167; Match(LR_BRACKET);
				State = 10168; default_value_columns();
				State = 10169; Match(RR_BRACKET);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10171; Match(LR_BRACKET);
				State = 10172; Match(LR_BRACKET);
				State = 10173; Match(LR_BRACKET);
				State = 10175;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 10174; Match(DECIMAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 10177;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1420,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 10179; Match(RR_BRACKET);
				State = 10180; Match(DIVIDE);
				State = 10181; Match(LR_BRACKET);
				State = 10183;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 10182; Match(DECIMAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 10185;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1421,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 10187; Match(RR_BRACKET);
				State = 10188; Match(RR_BRACKET);
				State = 10189; Match(DIVIDE);
				State = 10190; Match(LR_BRACKET);
				State = 10192;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 10191; Match(DECIMAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 10194;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1422,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 10196; Match(RR_BRACKET);
				State = 10197; Match(RR_BRACKET);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10198; Match(NEXT);
				State = 10199; Match(VALUE);
				State = 10200; Match(FOR);
				State = 10201; table_name();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 10202; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_deleteContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode ACTION() { return GetToken(TSqlParser.ACTION, 0); }
		public ITerminalNode CASCADE() { return GetToken(TSqlParser.CASCADE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public On_deleteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_delete; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOn_delete(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOn_delete(this);
		}
	}

	[RuleVersion(0)]
	public On_deleteContext on_delete() {
		On_deleteContext _localctx = new On_deleteContext(_ctx, State);
		EnterRule(_localctx, 834, RULE_on_delete);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10205; Match(ON);
			State = 10206; Match(DELETE);
			State = 10214;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1424,_ctx) ) {
			case 1:
				{
				State = 10207; Match(NO);
				State = 10208; Match(ACTION);
				}
				break;

			case 2:
				{
				State = 10209; Match(CASCADE);
				}
				break;

			case 3:
				{
				State = 10210; Match(SET);
				State = 10211; Match(NULL_);
				}
				break;

			case 4:
				{
				State = 10212; Match(SET);
				State = 10213; Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_updateContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode ACTION() { return GetToken(TSqlParser.ACTION, 0); }
		public ITerminalNode CASCADE() { return GetToken(TSqlParser.CASCADE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public On_updateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_update; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOn_update(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOn_update(this);
		}
	}

	[RuleVersion(0)]
	public On_updateContext on_update() {
		On_updateContext _localctx = new On_updateContext(_ctx, State);
		EnterRule(_localctx, 836, RULE_on_update);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10216; Match(ON);
			State = 10217; Match(UPDATE);
			State = 10225;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1425,_ctx) ) {
			case 1:
				{
				State = 10218; Match(NO);
				State = 10219; Match(ACTION);
				}
				break;

			case 2:
				{
				State = 10220; Match(CASCADE);
				}
				break;

			case 3:
				{
				State = 10221; Match(SET);
				State = 10222; Match(NULL_);
				}
				break;

			case 4:
				{
				State = 10223; Match(SET);
				State = 10224; Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_optionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Index_optionContext[] index_option() {
			return GetRuleContexts<Index_optionContext>();
		}
		public Index_optionContext index_option(int i) {
			return GetRuleContext<Index_optionContext>(i);
		}
		public Index_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIndex_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIndex_options(this);
		}
	}

	[RuleVersion(0)]
	public Index_optionsContext index_options() {
		Index_optionsContext _localctx = new Index_optionsContext(_ctx, State);
		EnterRule(_localctx, 838, RULE_index_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10227; Match(WITH);
			State = 10228; Match(LR_BRACKET);
			State = 10229; index_option();
			State = 10234;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1426,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 10230; Match(COMMA);
					State = 10231; index_option();
					}
					} 
				}
				State = 10236;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1426,_ctx);
			}
			State = 10237; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_optionContext : ParserRuleContext {
		public Simple_idContext[] simple_id() {
			return GetRuleContexts<Simple_idContext>();
		}
		public Simple_idContext simple_id(int i) {
			return GetRuleContext<Simple_idContext>(i);
		}
		public KeywordContext[] keyword() {
			return GetRuleContexts<KeywordContext>();
		}
		public KeywordContext keyword(int i) {
			return GetRuleContext<KeywordContext>(i);
		}
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Index_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIndex_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIndex_option(this);
		}
	}

	[RuleVersion(0)]
	public Index_optionContext index_option() {
		Index_optionContext _localctx = new Index_optionContext(_ctx, State);
		EnterRule(_localctx, 840, RULE_index_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10241;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1427,_ctx) ) {
			case 1:
				{
				State = 10239; simple_id();
				}
				break;

			case 2:
				{
				State = 10240; keyword();
				}
				break;
			}
			State = 10243; Match(EQUAL);
			State = 10248;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1428,_ctx) ) {
			case 1:
				{
				State = 10244; simple_id();
				}
				break;

			case 2:
				{
				State = 10245; keyword();
				}
				break;

			case 3:
				{
				State = 10246; on_off();
				}
				break;

			case 4:
				{
				State = 10247; Match(DECIMAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_cursorContext : ParserRuleContext {
		public ITerminalNode DECLARE() { return GetToken(TSqlParser.DECLARE, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode CURSOR() { return GetToken(TSqlParser.CURSOR, 0); }
		public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return GetRuleContext<Declare_set_cursor_commonContext>(0);
		}
		public ITerminalNode[] FOR() { return GetTokens(TSqlParser.FOR); }
		public ITerminalNode FOR(int i) {
			return GetToken(TSqlParser.FOR, i);
		}
		public ITerminalNode READ() { return GetToken(TSqlParser.READ, 0); }
		public ITerminalNode ONLY() { return GetToken(TSqlParser.ONLY, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Select_statement_standaloneContext select_statement_standalone() {
			return GetRuleContext<Select_statement_standaloneContext>(0);
		}
		public ITerminalNode SCROLL() { return GetToken(TSqlParser.SCROLL, 0); }
		public ITerminalNode SEMI_SENSITIVE() { return GetToken(TSqlParser.SEMI_SENSITIVE, 0); }
		public ITerminalNode INSENSITIVE() { return GetToken(TSqlParser.INSENSITIVE, 0); }
		public Declare_cursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_cursor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_cursor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_cursor(this);
		}
	}

	[RuleVersion(0)]
	public Declare_cursorContext declare_cursor() {
		Declare_cursorContext _localctx = new Declare_cursorContext(_ctx, State);
		EnterRule(_localctx, 842, RULE_declare_cursor);
		int _la;
		try {
			State = 10290;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1438,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10250; Match(DECLARE);
				State = 10251; cursor_name();
				{
				State = 10252; Match(CURSOR);
				State = 10266;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1432,_ctx) ) {
				case 1:
					{
					State = 10253; declare_set_cursor_common();
					State = 10264;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1431,_ctx) ) {
					case 1:
						{
						State = 10254; Match(FOR);
						State = 10262;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1430,_ctx) ) {
						case 1:
							{
							{
							State = 10255; Match(UPDATE);
							State = 10258;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1429,_ctx) ) {
							case 1:
								{
								State = 10256; Match(OF);
								State = 10257; column_name_list();
								}
								break;
							}
							}
							}
							break;

						case 2:
							{
							State = 10260; Match(READ);
							State = 10261; Match(ONLY);
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 10269;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1433,_ctx) ) {
				case 1:
					{
					State = 10268;
					_la = _input.La(1);
					if ( !(_la==INSENSITIVE || _la==SEMI_SENSITIVE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 10272;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1434,_ctx) ) {
				case 1:
					{
					State = 10271; Match(SCROLL);
					}
					break;
				}
				State = 10274; Match(CURSOR);
				State = 10275; Match(FOR);
				State = 10276; select_statement_standalone();
				State = 10285;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1436,_ctx) ) {
				case 1:
					{
					State = 10277; Match(FOR);
					State = 10283;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1435,_ctx) ) {
					case 1:
						{
						State = 10278; Match(READ);
						State = 10279; Match(ONLY);
						}
						break;

					case 2:
						{
						State = 10280; Match(UPDATE);
						}
						break;

					case 3:
						{
						{
						State = 10281; Match(OF);
						State = 10282; column_name_list();
						}
						}
						break;
					}
					}
					break;
				}
				}
				State = 10288;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1437,_ctx) ) {
				case 1:
					{
					State = 10287; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_set_cursor_commonContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Select_statement_standaloneContext select_statement_standalone() {
			return GetRuleContext<Select_statement_standaloneContext>(0);
		}
		public Declare_set_cursor_common_partialContext[] declare_set_cursor_common_partial() {
			return GetRuleContexts<Declare_set_cursor_common_partialContext>();
		}
		public Declare_set_cursor_common_partialContext declare_set_cursor_common_partial(int i) {
			return GetRuleContext<Declare_set_cursor_common_partialContext>(i);
		}
		public Declare_set_cursor_commonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_set_cursor_common; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_set_cursor_common(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_set_cursor_common(this);
		}
	}

	[RuleVersion(0)]
	public Declare_set_cursor_commonContext declare_set_cursor_common() {
		Declare_set_cursor_commonContext _localctx = new Declare_set_cursor_commonContext(_ctx, State);
		EnterRule(_localctx, 844, RULE_declare_set_cursor_common);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10295;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1439,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 10292; declare_set_cursor_common_partial();
					}
					} 
				}
				State = 10297;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1439,_ctx);
			}
			State = 10298; Match(FOR);
			State = 10299; select_statement_standalone();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_set_cursor_common_partialContext : ParserRuleContext {
		public ITerminalNode LOCAL() { return GetToken(TSqlParser.LOCAL, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public ITerminalNode FORWARD_ONLY() { return GetToken(TSqlParser.FORWARD_ONLY, 0); }
		public ITerminalNode SCROLL() { return GetToken(TSqlParser.SCROLL, 0); }
		public ITerminalNode STATIC() { return GetToken(TSqlParser.STATIC, 0); }
		public ITerminalNode KEYSET() { return GetToken(TSqlParser.KEYSET, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(TSqlParser.DYNAMIC, 0); }
		public ITerminalNode FAST_FORWARD() { return GetToken(TSqlParser.FAST_FORWARD, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode SCROLL_LOCKS() { return GetToken(TSqlParser.SCROLL_LOCKS, 0); }
		public ITerminalNode OPTIMISTIC() { return GetToken(TSqlParser.OPTIMISTIC, 0); }
		public ITerminalNode TYPE_WARNING() { return GetToken(TSqlParser.TYPE_WARNING, 0); }
		public Declare_set_cursor_common_partialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_set_cursor_common_partial; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_set_cursor_common_partial(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_set_cursor_common_partial(this);
		}
	}

	[RuleVersion(0)]
	public Declare_set_cursor_common_partialContext declare_set_cursor_common_partial() {
		Declare_set_cursor_common_partialContext _localctx = new Declare_set_cursor_common_partialContext(_ctx, State);
		EnterRule(_localctx, 846, RULE_declare_set_cursor_common_partial);
		int _la;
		try {
			State = 10306;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1440,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10301;
				_la = _input.La(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10302;
				_la = _input.La(1);
				if ( !(_la==FORWARD_ONLY || _la==SCROLL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10303;
				_la = _input.La(1);
				if ( !(_la==DYNAMIC || _la==FAST_FORWARD || _la==KEYSET || _la==STATIC) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10304;
				_la = _input.La(1);
				if ( !(_la==OPTIMISTIC || _la==READ_ONLY || _la==SCROLL_LOCKS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10305; Match(TYPE_WARNING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fetch_cursorContext : ParserRuleContext {
		public ITerminalNode FETCH() { return GetToken(TSqlParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public ITerminalNode PRIOR() { return GetToken(TSqlParser.PRIOR, 0); }
		public ITerminalNode FIRST() { return GetToken(TSqlParser.FIRST, 0); }
		public ITerminalNode LAST() { return GetToken(TSqlParser.LAST, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ABSOLUTE() { return GetToken(TSqlParser.ABSOLUTE, 0); }
		public ITerminalNode RELATIVE() { return GetToken(TSqlParser.RELATIVE, 0); }
		public Fetch_cursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetch_cursor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFetch_cursor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFetch_cursor(this);
		}
	}

	[RuleVersion(0)]
	public Fetch_cursorContext fetch_cursor() {
		Fetch_cursorContext _localctx = new Fetch_cursorContext(_ctx, State);
		EnterRule(_localctx, 848, RULE_fetch_cursor);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10308; Match(FETCH);
			State = 10318;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1442,_ctx) ) {
			case 1:
				{
				State = 10315;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1441,_ctx) ) {
				case 1:
					{
					State = 10309; Match(NEXT);
					}
					break;

				case 2:
					{
					State = 10310; Match(PRIOR);
					}
					break;

				case 3:
					{
					State = 10311; Match(FIRST);
					}
					break;

				case 4:
					{
					State = 10312; Match(LAST);
					}
					break;

				case 5:
					{
					State = 10313;
					_la = _input.La(1);
					if ( !(_la==ABSOLUTE || _la==RELATIVE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 10314; expression(0);
					}
					break;
				}
				State = 10317; Match(FROM);
				}
				break;
			}
			State = 10321;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1443,_ctx) ) {
			case 1:
				{
				State = 10320; Match(GLOBAL);
				}
				break;
			}
			State = 10323; cursor_name();
			State = 10333;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1445,_ctx) ) {
			case 1:
				{
				State = 10324; Match(INTO);
				State = 10325; Match(LOCAL_ID);
				State = 10330;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1444,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10326; Match(COMMA);
						State = 10327; Match(LOCAL_ID);
						}
						} 
					}
					State = 10332;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1444,_ctx);
				}
				}
				break;
			}
			State = 10336;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1446,_ctx) ) {
			case 1:
				{
				State = 10335; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_specialContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Constant_LOCAL_IDContext constant_LOCAL_ID() {
			return GetRuleContext<Constant_LOCAL_IDContext>(0);
		}
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public ITerminalNode IO() { return GetToken(TSqlParser.IO, 0); }
		public ITerminalNode TIME() { return GetToken(TSqlParser.TIME, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode PROFILE() { return GetToken(TSqlParser.PROFILE, 0); }
		public ITerminalNode ROWCOUNT() { return GetToken(TSqlParser.ROWCOUNT, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(TSqlParser.TRANSACTION, 0); }
		public ITerminalNode ISOLATION() { return GetToken(TSqlParser.ISOLATION, 0); }
		public ITerminalNode LEVEL() { return GetToken(TSqlParser.LEVEL, 0); }
		public ITerminalNode READ() { return GetToken(TSqlParser.READ, 0); }
		public ITerminalNode UNCOMMITTED() { return GetToken(TSqlParser.UNCOMMITTED, 0); }
		public ITerminalNode COMMITTED() { return GetToken(TSqlParser.COMMITTED, 0); }
		public ITerminalNode REPEATABLE() { return GetToken(TSqlParser.REPEATABLE, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(TSqlParser.SNAPSHOT, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(TSqlParser.SERIALIZABLE, 0); }
		public ITerminalNode IDENTITY_INSERT() { return GetToken(TSqlParser.IDENTITY_INSERT, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Special_listContext[] special_list() {
			return GetRuleContexts<Special_listContext>();
		}
		public Special_listContext special_list(int i) {
			return GetRuleContext<Special_listContext>(i);
		}
		public Modify_methodContext modify_method() {
			return GetRuleContext<Modify_methodContext>(0);
		}
		public Set_specialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_special; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSet_special(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSet_special(this);
		}
	}

	[RuleVersion(0)]
	public Set_specialContext set_special() {
		Set_specialContext _localctx = new Set_specialContext(_ctx, State);
		EnterRule(_localctx, 850, RULE_set_special);
		int _la;
		try {
			int _alt;
			State = 10399;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1455,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10338; Match(SET);
				State = 10339; id_();
				State = 10343;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1447,_ctx) ) {
				case 1:
					{
					State = 10340; id_();
					}
					break;

				case 2:
					{
					State = 10341; constant_LOCAL_ID();
					}
					break;

				case 3:
					{
					State = 10342; on_off();
					}
					break;
				}
				State = 10346;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1448,_ctx) ) {
				case 1:
					{
					State = 10345; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10348; Match(SET);
				State = 10349; Match(STATISTICS);
				State = 10350;
				_la = _input.La(1);
				if ( !(_la==IO || _la==PROFILE || _la==TIME || _la==XML) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10351; on_off();
				State = 10353;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1449,_ctx) ) {
				case 1:
					{
					State = 10352; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10355; Match(SET);
				State = 10356; Match(ROWCOUNT);
				State = 10357;
				_la = _input.La(1);
				if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10359;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1450,_ctx) ) {
				case 1:
					{
					State = 10358; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10361; Match(SET);
				State = 10362; Match(TRANSACTION);
				State = 10363; Match(ISOLATION);
				State = 10364; Match(LEVEL);
				State = 10374;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1451,_ctx) ) {
				case 1:
					{
					State = 10365; Match(READ);
					State = 10366; Match(UNCOMMITTED);
					}
					break;

				case 2:
					{
					State = 10367; Match(READ);
					State = 10368; Match(COMMITTED);
					}
					break;

				case 3:
					{
					State = 10369; Match(REPEATABLE);
					State = 10370; Match(READ);
					}
					break;

				case 4:
					{
					State = 10371; Match(SNAPSHOT);
					}
					break;

				case 5:
					{
					State = 10372; Match(SERIALIZABLE);
					}
					break;

				case 6:
					{
					State = 10373; Match(DECIMAL);
					}
					break;
				}
				State = 10377;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1452,_ctx) ) {
				case 1:
					{
					State = 10376; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10379; Match(SET);
				State = 10380; Match(IDENTITY_INSERT);
				State = 10381; table_name();
				State = 10382; on_off();
				State = 10384;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1453,_ctx) ) {
				case 1:
					{
					State = 10383; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10386; Match(SET);
				State = 10387; special_list();
				State = 10392;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1454,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10388; Match(COMMA);
						State = 10389; special_list();
						}
						} 
					}
					State = 10394;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1454,_ctx);
				}
				State = 10395; on_off();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10397; Match(SET);
				State = 10398; modify_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Special_listContext : ParserRuleContext {
		public ITerminalNode ANSI_NULLS() { return GetToken(TSqlParser.ANSI_NULLS, 0); }
		public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public ITerminalNode ANSI_PADDING() { return GetToken(TSqlParser.ANSI_PADDING, 0); }
		public ITerminalNode ANSI_WARNINGS() { return GetToken(TSqlParser.ANSI_WARNINGS, 0); }
		public ITerminalNode ANSI_DEFAULTS() { return GetToken(TSqlParser.ANSI_DEFAULTS, 0); }
		public ITerminalNode ANSI_NULL_DFLT_OFF() { return GetToken(TSqlParser.ANSI_NULL_DFLT_OFF, 0); }
		public ITerminalNode ANSI_NULL_DFLT_ON() { return GetToken(TSqlParser.ANSI_NULL_DFLT_ON, 0); }
		public ITerminalNode ARITHABORT() { return GetToken(TSqlParser.ARITHABORT, 0); }
		public ITerminalNode ARITHIGNORE() { return GetToken(TSqlParser.ARITHIGNORE, 0); }
		public ITerminalNode CONCAT_NULL_YIELDS_NULL() { return GetToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public ITerminalNode CURSOR_CLOSE_ON_COMMIT() { return GetToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public ITerminalNode FMTONLY() { return GetToken(TSqlParser.FMTONLY, 0); }
		public ITerminalNode FORCEPLAN() { return GetToken(TSqlParser.FORCEPLAN, 0); }
		public ITerminalNode IMPLICIT_TRANSACTIONS() { return GetToken(TSqlParser.IMPLICIT_TRANSACTIONS, 0); }
		public ITerminalNode NOCOUNT() { return GetToken(TSqlParser.NOCOUNT, 0); }
		public ITerminalNode NOEXEol() { return GetToken(TSqlParser.NOEXEol, 0); }
		public ITerminalNode NUMERIC_ROUNDABORT() { return GetToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
		public ITerminalNode PARSEONLY() { return GetToken(TSqlParser.PARSEONLY, 0); }
		public ITerminalNode REMOTE_PROC_TRANSACTIONS() { return GetToken(TSqlParser.REMOTE_PROC_TRANSACTIONS, 0); }
		public ITerminalNode SHOWPLAN_ALL() { return GetToken(TSqlParser.SHOWPLAN_ALL, 0); }
		public ITerminalNode SHOWPLAN_TEXT() { return GetToken(TSqlParser.SHOWPLAN_TEXT, 0); }
		public ITerminalNode SHOWPLAN_XML() { return GetToken(TSqlParser.SHOWPLAN_XML, 0); }
		public ITerminalNode XACT_ABORT() { return GetToken(TSqlParser.XACT_ABORT, 0); }
		public Special_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_special_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSpecial_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSpecial_list(this);
		}
	}

	[RuleVersion(0)]
	public Special_listContext special_list() {
		Special_listContext _localctx = new Special_listContext(_ctx, State);
		EnterRule(_localctx, 852, RULE_special_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10401;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANSI_DEFAULTS) | (1L << ANSI_NULLS) | (1L << ANSI_NULL_DFLT_OFF) | (1L << ANSI_NULL_DFLT_ON) | (1L << ANSI_PADDING) | (1L << ANSI_WARNINGS) | (1L << ARITHABORT) | (1L << ARITHIGNORE))) != 0) || _la==CONCAT_NULL_YIELDS_NULL || _la==CURSOR_CLOSE_ON_COMMIT || _la==FMTONLY || _la==FORCEPLAN || _la==IMPLICIT_TRANSACTIONS || _la==NOCOUNT || _la==NUMERIC_ROUNDABORT || _la==PARSEONLY || _la==QUOTED_IDENTIFIER || _la==REMOTE_PROC_TRANSACTIONS || ((((_la - 899)) & ~0x3f) == 0 && ((1L << (_la - 899)) & ((1L << (SHOWPLAN_ALL - 899)) | (1L << (SHOWPLAN_TEXT - 899)) | (1L << (SHOWPLAN_XML - 899)))) != 0) || _la==XACT_ABORT || _la==NOEXEol) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_LOCAL_IDContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Constant_LOCAL_IDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_LOCAL_ID; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterConstant_LOCAL_ID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitConstant_LOCAL_ID(this);
		}
	}

	[RuleVersion(0)]
	public Constant_LOCAL_IDContext constant_LOCAL_ID() {
		Constant_LOCAL_IDContext _localctx = new Constant_LOCAL_IDContext(_ctx, State);
		EnterRule(_localctx, 854, RULE_constant_LOCAL_ID);
		try {
			State = 10405;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1456,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10403; constant();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10404; Match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken op;
		public Primitive_expressionContext primitive_expression() {
			return GetRuleContext<Primitive_expressionContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Value_callContext value_call() {
			return GetRuleContext<Value_callContext>(0);
		}
		public Query_callContext query_call() {
			return GetRuleContext<Query_callContext>(0);
		}
		public Exist_callContext exist_call() {
			return GetRuleContext<Exist_callContext>(0);
		}
		public Modify_callContext modify_call() {
			return GetRuleContext<Modify_callContext>(0);
		}
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Case_expressionContext case_expression() {
			return GetRuleContext<Case_expressionContext>(0);
		}
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public Bracket_expressionContext bracket_expression() {
			return GetRuleContext<Bracket_expressionContext>(0);
		}
		public Unary_operator_expressionContext unary_operator_expression() {
			return GetRuleContext<Unary_operator_expressionContext>(0);
		}
		public Time_zoneContext time_zone() {
			return GetRuleContext<Time_zoneContext>(0);
		}
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ITerminalNode DOLLAR_ACTION() { return GetToken(TSqlParser.DOLLAR_ACTION, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 856;
		EnterRecursionRule(_localctx, 856, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10416;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1457,_ctx) ) {
			case 1:
				{
				State = 10408; primitive_expression();
				}
				break;

			case 2:
				{
				State = 10409; function_call();
				}
				break;

			case 3:
				{
				State = 10410; case_expression();
				}
				break;

			case 4:
				{
				State = 10411; full_column_name();
				}
				break;

			case 5:
				{
				State = 10412; bracket_expression();
				}
				break;

			case 6:
				{
				State = 10413; unary_operator_expression();
				}
				break;

			case 7:
				{
				State = 10414; over_clause();
				}
				break;

			case 8:
				{
				State = 10415; Match(DOLLAR_ACTION);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 10439;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1460,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 10437;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1459,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 10418;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 10419;
						_localctx.op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 1124)) & ~0x3f) == 0 && ((1L << (_la - 1124)) & ((1L << (STAR - 1124)) | (1L << (DIVIDE - 1124)) | (1L << (MODULE - 1124)))) != 0)) ) {
							_localctx.op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 10420; expression(6);
						}
						break;

					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 10421;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 10422;
						_localctx.op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (DOUBLE_BAR - 1110)) | (1L << (PLUS - 1110)) | (1L << (MINUS - 1110)) | (1L << (BIT_OR - 1110)) | (1L << (BIT_AND - 1110)) | (1L << (BIT_XOR - 1110)))) != 0)) ) {
							_localctx.op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 10423; expression(5);
						}
						break;

					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 10424;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 10425; Match(DOT);
						State = 10430;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1458,_ctx) ) {
						case 1:
							{
							State = 10426; value_call();
							}
							break;

						case 2:
							{
							State = 10427; query_call();
							}
							break;

						case 3:
							{
							State = 10428; exist_call();
							}
							break;

						case 4:
							{
							State = 10429; modify_call();
							}
							break;
						}
						}
						break;

					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 10432;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 10433; Match(COLLATE);
						State = 10434; id_();
						}
						break;

					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 10435;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 10436; time_zone();
						}
						break;
					}
					} 
				}
				State = 10441;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1460,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Time_zoneContext : ParserRuleContext {
		public ITerminalNode AT_KEYWORD() { return GetToken(TSqlParser.AT_KEYWORD, 0); }
		public ITerminalNode TIME() { return GetToken(TSqlParser.TIME, 0); }
		public ITerminalNode ZONE() { return GetToken(TSqlParser.ZONE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Time_zoneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time_zone; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTime_zone(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTime_zone(this);
		}
	}

	[RuleVersion(0)]
	public Time_zoneContext time_zone() {
		Time_zoneContext _localctx = new Time_zoneContext(_ctx, State);
		EnterRule(_localctx, 858, RULE_time_zone);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10442; Match(AT_KEYWORD);
			State = 10443; Match(TIME);
			State = 10444; Match(ZONE);
			State = 10445; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primitive_expressionContext : ParserRuleContext {
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Primitive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrimitive_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrimitive_expression(this);
		}
	}

	[RuleVersion(0)]
	public Primitive_expressionContext primitive_expression() {
		Primitive_expressionContext _localctx = new Primitive_expressionContext(_ctx, State);
		EnterRule(_localctx, 860, RULE_primitive_expression);
		try {
			State = 10451;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1461,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10447; Match(DEFAULT);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10448; Match(NULL_);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10449; Match(LOCAL_ID);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10450; constant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_expressionContext : ParserRuleContext {
		public ExpressionContext caseExpr;
		public ExpressionContext elseExpr;
		public ITerminalNode CASE() { return GetToken(TSqlParser.CASE, 0); }
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Switch_sectionContext[] switch_section() {
			return GetRuleContexts<Switch_sectionContext>();
		}
		public Switch_sectionContext switch_section(int i) {
			return GetRuleContext<Switch_sectionContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(TSqlParser.ELSE, 0); }
		public Switch_search_condition_sectionContext[] switch_search_condition_section() {
			return GetRuleContexts<Switch_search_condition_sectionContext>();
		}
		public Switch_search_condition_sectionContext switch_search_condition_section(int i) {
			return GetRuleContext<Switch_search_condition_sectionContext>(i);
		}
		public Case_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCase_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCase_expression(this);
		}
	}

	[RuleVersion(0)]
	public Case_expressionContext case_expression() {
		Case_expressionContext _localctx = new Case_expressionContext(_ctx, State);
		EnterRule(_localctx, 862, RULE_case_expression);
		try {
			int _alt;
			State = 10478;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1466,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10453; Match(CASE);
				State = 10454; _localctx.caseExpr = expression(0);
				State = 10456;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 10455; switch_section();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 10458;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1462,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 10462;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1463,_ctx) ) {
				case 1:
					{
					State = 10460; Match(ELSE);
					State = 10461; _localctx.elseExpr = expression(0);
					}
					break;
				}
				State = 10464; Match(END);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10466; Match(CASE);
				State = 10468;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 10467; switch_search_condition_section();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 10470;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1464,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 10474;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1465,_ctx) ) {
				case 1:
					{
					State = 10472; Match(ELSE);
					State = 10473; _localctx.elseExpr = expression(0);
					}
					break;
				}
				State = 10476; Match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operator_expressionContext : ParserRuleContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Unary_operator_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUnary_operator_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUnary_operator_expression(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operator_expressionContext unary_operator_expression() {
		Unary_operator_expressionContext _localctx = new Unary_operator_expressionContext(_ctx, State);
		EnterRule(_localctx, 864, RULE_unary_operator_expression);
		int _la;
		try {
			State = 10484;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1467,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10480; Match(BIT_NOT);
				State = 10481; expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10482;
				_localctx.op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					_localctx.op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10483; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bracket_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Bracket_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracket_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBracket_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBracket_expression(this);
		}
	}

	[RuleVersion(0)]
	public Bracket_expressionContext bracket_expression() {
		Bracket_expressionContext _localctx = new Bracket_expressionContext(_ctx, State);
		EnterRule(_localctx, 866, RULE_bracket_expression);
		try {
			State = 10494;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1468,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10486; Match(LR_BRACKET);
				State = 10487; expression(0);
				State = 10488; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10490; Match(LR_BRACKET);
				State = 10491; subquery();
				State = 10492; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_expressionContext : ParserRuleContext {
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public Constant_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterConstant_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitConstant_expression(this);
		}
	}

	[RuleVersion(0)]
	public Constant_expressionContext constant_expression() {
		Constant_expressionContext _localctx = new Constant_expressionContext(_ctx, State);
		EnterRule(_localctx, 868, RULE_constant_expression);
		try {
			State = 10504;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1469,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10496; Match(NULL_);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10497; constant();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10498; function_call();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10499; Match(LOCAL_ID);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10500; Match(LR_BRACKET);
				State = 10501; constant_expression();
				State = 10502; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubqueryContext : ParserRuleContext {
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSubquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSubquery(this);
		}
	}

	[RuleVersion(0)]
	public SubqueryContext subquery() {
		SubqueryContext _localctx = new SubqueryContext(_ctx, State);
		EnterRule(_localctx, 870, RULE_subquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10506; select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_expressionContext : ParserRuleContext {
		public Common_table_expressionContext _common_table_expression;
		public IList<Common_table_expressionContext> _ctes = new List<Common_table_expressionContext>();
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Common_table_expressionContext[] common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		public With_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWith_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWith_expression(this);
		}
	}

	[RuleVersion(0)]
	public With_expressionContext with_expression() {
		With_expressionContext _localctx = new With_expressionContext(_ctx, State);
		EnterRule(_localctx, 872, RULE_with_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10508; Match(WITH);
			State = 10509; _localctx._common_table_expression = common_table_expression();
			_localctx._ctes.Add(_localctx._common_table_expression);
			State = 10514;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1470,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 10510; Match(COMMA);
					State = 10511; _localctx._common_table_expression = common_table_expression();
					_localctx._ctes.Add(_localctx._common_table_expression);
					}
					} 
				}
				State = 10516;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1470,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_table_expressionContext : ParserRuleContext {
		public Id_Context expression_name;
		public Column_name_listContext columns;
		public Select_statementContext cte_query;
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_table_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCommon_table_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCommon_table_expression(this);
		}
	}

	[RuleVersion(0)]
	public Common_table_expressionContext common_table_expression() {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(_ctx, State);
		EnterRule(_localctx, 874, RULE_common_table_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10517; _localctx.expression_name = id_();
			State = 10522;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1471,_ctx) ) {
			case 1:
				{
				State = 10518; Match(LR_BRACKET);
				State = 10519; _localctx.columns = column_name_list();
				State = 10520; Match(RR_BRACKET);
				}
				break;
			}
			State = 10524; Match(AS);
			State = 10525; Match(LR_BRACKET);
			State = 10526; _localctx.cte_query = select_statement();
			State = 10527; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_elemContext : ParserRuleContext {
		public Id_Context udt_column_name;
		public Id_Context method_name;
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Update_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_elem(this);
		}
	}

	[RuleVersion(0)]
	public Update_elemContext update_elem() {
		Update_elemContext _localctx = new Update_elemContext(_ctx, State);
		EnterRule(_localctx, 876, RULE_update_elem);
		try {
			State = 10554;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1475,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10529; Match(LOCAL_ID);
				State = 10530; Match(EQUAL);
				State = 10531; full_column_name();
				State = 10534;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1472,_ctx) ) {
				case 1:
					{
					State = 10532; Match(EQUAL);
					}
					break;

				case 2:
					{
					State = 10533; assignment_operator();
					}
					break;
				}
				State = 10536; expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10540;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1473,_ctx) ) {
				case 1:
					{
					State = 10538; full_column_name();
					}
					break;

				case 2:
					{
					State = 10539; Match(LOCAL_ID);
					}
					break;
				}
				State = 10544;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1474,_ctx) ) {
				case 1:
					{
					State = 10542; Match(EQUAL);
					}
					break;

				case 2:
					{
					State = 10543; assignment_operator();
					}
					break;
				}
				State = 10546; expression(0);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10547; _localctx.udt_column_name = id_();
				State = 10548; Match(DOT);
				State = 10549; _localctx.method_name = id_();
				State = 10550; Match(LR_BRACKET);
				State = 10551; expression_list_();
				State = 10552; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_elem_mergeContext : ParserRuleContext {
		public Id_Context udt_column_name;
		public Id_Context method_name;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Update_elem_mergeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_elem_merge; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_elem_merge(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_elem_merge(this);
		}
	}

	[RuleVersion(0)]
	public Update_elem_mergeContext update_elem_merge() {
		Update_elem_mergeContext _localctx = new Update_elem_mergeContext(_ctx, State);
		EnterRule(_localctx, 878, RULE_update_elem_merge);
		try {
			State = 10572;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1478,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10558;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1476,_ctx) ) {
				case 1:
					{
					State = 10556; full_column_name();
					}
					break;

				case 2:
					{
					State = 10557; Match(LOCAL_ID);
					}
					break;
				}
				State = 10562;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1477,_ctx) ) {
				case 1:
					{
					State = 10560; Match(EQUAL);
					}
					break;

				case 2:
					{
					State = 10561; assignment_operator();
					}
					break;
				}
				State = 10564; expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10565; _localctx.udt_column_name = id_();
				State = 10566; Match(DOT);
				State = 10567; _localctx.method_name = id_();
				State = 10568; Match(LR_BRACKET);
				State = 10569; expression_list_();
				State = 10570; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_conditionContext : ParserRuleContext {
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		public ITerminalNode[] NOT() { return GetTokens(TSqlParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(TSqlParser.NOT, i);
		}
		public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public Search_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSearch_condition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSearch_condition(this);
		}
	}

	[RuleVersion(0)]
	public Search_conditionContext search_condition() {
		return search_condition(0);
	}

	private Search_conditionContext search_condition(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Search_conditionContext _localctx = new Search_conditionContext(_ctx, _parentState);
		Search_conditionContext _prevctx = _localctx;
		int _startState = 880;
		EnterRecursionRule(_localctx, 880, RULE_search_condition, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 10578;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1479,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 10575; Match(NOT);
					}
					} 
				}
				State = 10580;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1479,_ctx);
			}
			State = 10586;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1480,_ctx) ) {
			case 1:
				{
				State = 10581; predicate();
				}
				break;

			case 2:
				{
				State = 10582; Match(LR_BRACKET);
				State = 10583; search_condition(0);
				State = 10584; Match(RR_BRACKET);
				}
				break;
			}
			}
			_ctx.stop = _input.Lt(-1);
			State = 10596;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1482,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 10594;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1481,_ctx) ) {
					case 1:
						{
						_localctx = new Search_conditionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_search_condition);
						State = 10588;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 10589; Match(AND);
						State = 10590; search_condition(3);
						}
						break;

					case 2:
						{
						_localctx = new Search_conditionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_search_condition);
						State = 10591;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 10592; Match(OR);
						State = 10593; search_condition(2);
						}
						break;
					}
					} 
				}
				State = 10598;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1482,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Freetext_predicateContext freetext_predicate() {
			return GetRuleContext<Freetext_predicateContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode SOME() { return GetToken(TSqlParser.SOME, 0); }
		public ITerminalNode ANY() { return GetToken(TSqlParser.ANY, 0); }
		public ITerminalNode BETWEEN() { return GetToken(TSqlParser.BETWEEN, 0); }
		public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		public ITerminalNode[] NOT() { return GetTokens(TSqlParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(TSqlParser.NOT, i);
		}
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public ITerminalNode LIKE() { return GetToken(TSqlParser.LIKE, 0); }
		public ITerminalNode ESCAPE() { return GetToken(TSqlParser.ESCAPE, 0); }
		public ITerminalNode IS() { return GetToken(TSqlParser.IS, 0); }
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(_ctx, State);
		EnterRule(_localctx, 882, RULE_predicate);
		int _la;
		try {
			int _alt;
			State = 10660;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1488,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10599; Match(EXISTS);
				State = 10600; Match(LR_BRACKET);
				State = 10601; subquery();
				State = 10602; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10604; freetext_predicate();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10605; expression(0);
				State = 10606; comparison_operator();
				State = 10607; expression(0);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10609; expression(0);
				State = 10610; comparison_operator();
				State = 10611;
				_la = _input.La(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10612; Match(LR_BRACKET);
				State = 10613; subquery();
				State = 10614; Match(RR_BRACKET);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10616; expression(0);
				State = 10620;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1483,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10617; Match(NOT);
						}
						} 
					}
					State = 10622;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1483,_ctx);
				}
				State = 10623; Match(BETWEEN);
				State = 10624; expression(0);
				State = 10625; Match(AND);
				State = 10626; expression(0);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10628; expression(0);
				State = 10632;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1484,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10629; Match(NOT);
						}
						} 
					}
					State = 10634;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1484,_ctx);
				}
				State = 10635; Match(IN);
				State = 10636; Match(LR_BRACKET);
				State = 10639;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1485,_ctx) ) {
				case 1:
					{
					State = 10637; subquery();
					}
					break;

				case 2:
					{
					State = 10638; expression_list_();
					}
					break;
				}
				State = 10641; Match(RR_BRACKET);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10643; expression(0);
				State = 10647;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1486,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10644; Match(NOT);
						}
						} 
					}
					State = 10649;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1486,_ctx);
				}
				State = 10650; Match(LIKE);
				State = 10651; expression(0);
				State = 10654;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1487,_ctx) ) {
				case 1:
					{
					State = 10652; Match(ESCAPE);
					State = 10653; expression(0);
					}
					break;
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10656; expression(0);
				State = 10657; Match(IS);
				State = 10658; null_notnull();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_expressionContext : ParserRuleContext {
		public Sql_unionContext _sql_union;
		public IList<Sql_unionContext> _unions = new List<Sql_unionContext>();
		public Query_specificationContext query_specification() {
			return GetRuleContext<Query_specificationContext>(0);
		}
		public Query_expressionContext[] query_expression() {
			return GetRuleContexts<Query_expressionContext>();
		}
		public Query_expressionContext query_expression(int i) {
			return GetRuleContext<Query_expressionContext>(i);
		}
		public ITerminalNode UNION() { return GetToken(TSqlParser.UNION, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Sql_unionContext[] sql_union() {
			return GetRuleContexts<Sql_unionContext>();
		}
		public Sql_unionContext sql_union(int i) {
			return GetRuleContext<Sql_unionContext>(i);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_expression(this);
		}
	}

	[RuleVersion(0)]
	public Query_expressionContext query_expression() {
		Query_expressionContext _localctx = new Query_expressionContext(_ctx, State);
		EnterRule(_localctx, 884, RULE_query_expression);
		try {
			int _alt;
			State = 10685;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1494,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10673;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1491,_ctx) ) {
				case 1:
					{
					State = 10662; query_specification();
					}
					break;

				case 2:
					{
					State = 10663; Match(LR_BRACKET);
					State = 10664; query_expression();
					State = 10665; Match(RR_BRACKET);
					State = 10671;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1490,_ctx) ) {
					case 1:
						{
						State = 10666; Match(UNION);
						State = 10668;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1489,_ctx) ) {
						case 1:
							{
							State = 10667; Match(ALL);
							}
							break;
						}
						State = 10670; query_expression();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10675; query_specification();
				State = 10677;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1492,_ctx) ) {
				case 1:
					{
					State = 10676; order_by_clause();
					}
					break;
				}
				State = 10682;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1493,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10679; _localctx._sql_union = sql_union();
						_localctx._unions.Add(_localctx._sql_union);
						}
						} 
					}
					State = 10684;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1493,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_unionContext : ParserRuleContext {
		public Query_specificationContext spec;
		public Query_expressionContext op;
		public ITerminalNode UNION() { return GetToken(TSqlParser.UNION, 0); }
		public ITerminalNode EXCEPT() { return GetToken(TSqlParser.EXCEPT, 0); }
		public ITerminalNode INTERSECT() { return GetToken(TSqlParser.INTERSECT, 0); }
		public Query_specificationContext query_specification() {
			return GetRuleContext<Query_specificationContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public Sql_unionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_union; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSql_union(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSql_union(this);
		}
	}

	[RuleVersion(0)]
	public Sql_unionContext sql_union() {
		Sql_unionContext _localctx = new Sql_unionContext(_ctx, State);
		EnterRule(_localctx, 886, RULE_sql_union);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10693;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1496,_ctx) ) {
			case 1:
				{
				State = 10687; Match(UNION);
				State = 10689;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1495,_ctx) ) {
				case 1:
					{
					State = 10688; Match(ALL);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 10691; Match(EXCEPT);
				}
				break;

			case 3:
				{
				State = 10692; Match(INTERSECT);
				}
				break;
			}
			State = 10700;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1497,_ctx) ) {
			case 1:
				{
				State = 10695; _localctx.spec = query_specification();
				}
				break;

			case 2:
				{
				{
				State = 10696; Match(LR_BRACKET);
				State = 10697; _localctx.op = query_expression();
				State = 10698; Match(RR_BRACKET);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_specificationContext : ParserRuleContext {
		public IToken allOrDistinct;
		public Top_clauseContext top;
		public Select_listContext columns;
		public Table_nameContext into;
		public Table_sourcesContext from;
		public Search_conditionContext where;
		public IToken groupByAll;
		public Group_by_itemContext _group_by_item;
		public IList<Group_by_itemContext> _groupBys = new List<Group_by_itemContext>();
		public Search_conditionContext having;
		public ITerminalNode SELECT() { return GetToken(TSqlParser.SELECT, 0); }
		public Select_listContext select_list() {
			return GetRuleContext<Select_listContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode HAVING() { return GetToken(TSqlParser.HAVING, 0); }
		public Top_clauseContext top_clause() {
			return GetRuleContext<Top_clauseContext>(0);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		public Group_by_itemContext[] group_by_item() {
			return GetRuleContexts<Group_by_itemContext>();
		}
		public Group_by_itemContext group_by_item(int i) {
			return GetRuleContext<Group_by_itemContext>(i);
		}
		public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		public ITerminalNode DISTINCT() { return GetToken(TSqlParser.DISTINCT, 0); }
		public Query_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_specification(this);
		}
	}

	[RuleVersion(0)]
	public Query_specificationContext query_specification() {
		Query_specificationContext _localctx = new Query_specificationContext(_ctx, State);
		EnterRule(_localctx, 888, RULE_query_specification);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10702; Match(SELECT);
			State = 10704;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1498,_ctx) ) {
			case 1:
				{
				State = 10703;
				_localctx.allOrDistinct = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					_localctx.allOrDistinct = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 10707;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1499,_ctx) ) {
			case 1:
				{
				State = 10706; _localctx.top = top_clause();
				}
				break;
			}
			State = 10709; _localctx.columns = select_list();
			State = 10712;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1500,_ctx) ) {
			case 1:
				{
				State = 10710; Match(INTO);
				State = 10711; _localctx.into = table_name();
				}
				break;
			}
			State = 10716;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1501,_ctx) ) {
			case 1:
				{
				State = 10714; Match(FROM);
				State = 10715; _localctx.from = table_sources();
				}
				break;
			}
			State = 10720;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1502,_ctx) ) {
			case 1:
				{
				State = 10718; Match(WHERE);
				State = 10719; _localctx.where = search_condition(0);
				}
				break;
			}
			State = 10735;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1505,_ctx) ) {
			case 1:
				{
				State = 10722; Match(GROUP);
				State = 10723; Match(BY);
				State = 10725;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1503,_ctx) ) {
				case 1:
					{
					State = 10724; _localctx.groupByAll = Match(ALL);
					}
					break;
				}
				State = 10727; _localctx._group_by_item = group_by_item();
				_localctx._groupBys.Add(_localctx._group_by_item);
				State = 10732;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1504,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10728; Match(COMMA);
						State = 10729; _localctx._group_by_item = group_by_item();
						_localctx._groupBys.Add(_localctx._group_by_item);
						}
						} 
					}
					State = 10734;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1504,_ctx);
				}
				}
				break;
			}
			State = 10739;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1506,_ctx) ) {
			case 1:
				{
				State = 10737; Match(HAVING);
				State = 10738; _localctx.having = search_condition(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_clauseContext : ParserRuleContext {
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public Top_percentContext top_percent() {
			return GetRuleContext<Top_percentContext>(0);
		}
		public Top_countContext top_count() {
			return GetRuleContext<Top_countContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode TIES() { return GetToken(TSqlParser.TIES, 0); }
		public Top_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTop_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTop_clause(this);
		}
	}

	[RuleVersion(0)]
	public Top_clauseContext top_clause() {
		Top_clauseContext _localctx = new Top_clauseContext(_ctx, State);
		EnterRule(_localctx, 890, RULE_top_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10741; Match(TOP);
			State = 10744;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1507,_ctx) ) {
			case 1:
				{
				State = 10742; top_percent();
				}
				break;

			case 2:
				{
				State = 10743; top_count();
				}
				break;
			}
			State = 10748;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1508,_ctx) ) {
			case 1:
				{
				State = 10746; Match(WITH);
				State = 10747; Match(TIES);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_percentContext : ParserRuleContext {
		public IToken percent_constant;
		public ExpressionContext topper_expression;
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public ITerminalNode REAL() { return GetToken(TSqlParser.REAL, 0); }
		public ITerminalNode FLOAT() { return GetToken(TSqlParser.FLOAT, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Top_percentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_percent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTop_percent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTop_percent(this);
		}
	}

	[RuleVersion(0)]
	public Top_percentContext top_percent() {
		Top_percentContext _localctx = new Top_percentContext(_ctx, State);
		EnterRule(_localctx, 892, RULE_top_percent);
		int _la;
		try {
			State = 10757;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1509,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10750;
				_localctx.percent_constant = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 1092)) & ~0x3f) == 0 && ((1L << (_la - 1092)) & ((1L << (DECIMAL - 1092)) | (1L << (FLOAT - 1092)) | (1L << (REAL - 1092)))) != 0)) ) {
					_localctx.percent_constant = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10751; Match(PERCENT);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10752; Match(LR_BRACKET);
				State = 10753; _localctx.topper_expression = expression(0);
				State = 10754; Match(RR_BRACKET);
				State = 10755; Match(PERCENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_countContext : ParserRuleContext {
		public IToken count_constant;
		public ExpressionContext topcount_expression;
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Top_countContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_count; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTop_count(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTop_count(this);
		}
	}

	[RuleVersion(0)]
	public Top_countContext top_count() {
		Top_countContext _localctx = new Top_countContext(_ctx, State);
		EnterRule(_localctx, 894, RULE_top_count);
		try {
			State = 10764;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1510,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10759; _localctx.count_constant = Match(DECIMAL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10760; Match(LR_BRACKET);
				State = 10761; _localctx.topcount_expression = expression(0);
				State = 10762; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_clauseContext : ParserRuleContext {
		public Order_by_expressionContext _order_by_expression;
		public IList<Order_by_expressionContext> _order_bys = new List<Order_by_expressionContext>();
		public ExpressionContext offset_exp;
		public IToken offset_rows;
		public IToken fetch_offset;
		public ExpressionContext fetch_exp;
		public IToken fetch_rows;
		public ITerminalNode ORDER() { return GetToken(TSqlParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public Order_by_expressionContext[] order_by_expression() {
			return GetRuleContexts<Order_by_expressionContext>();
		}
		public Order_by_expressionContext order_by_expression(int i) {
			return GetRuleContext<Order_by_expressionContext>(i);
		}
		public ITerminalNode OFFSET() { return GetToken(TSqlParser.OFFSET, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] ROW() { return GetTokens(TSqlParser.ROW); }
		public ITerminalNode ROW(int i) {
			return GetToken(TSqlParser.ROW, i);
		}
		public ITerminalNode[] ROWS() { return GetTokens(TSqlParser.ROWS); }
		public ITerminalNode ROWS(int i) {
			return GetToken(TSqlParser.ROWS, i);
		}
		public ITerminalNode FETCH() { return GetToken(TSqlParser.FETCH, 0); }
		public ITerminalNode ONLY() { return GetToken(TSqlParser.ONLY, 0); }
		public ITerminalNode FIRST() { return GetToken(TSqlParser.FIRST, 0); }
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_clause(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_clauseContext order_by_clause() {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, State);
		EnterRule(_localctx, 896, RULE_order_by_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10766; Match(ORDER);
			State = 10767; Match(BY);
			State = 10768; _localctx._order_by_expression = order_by_expression();
			_localctx._order_bys.Add(_localctx._order_by_expression);
			State = 10773;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1511,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 10769; Match(COMMA);
					State = 10770; _localctx._order_by_expression = order_by_expression();
					_localctx._order_bys.Add(_localctx._order_by_expression);
					}
					} 
				}
				State = 10775;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1511,_ctx);
			}
			State = 10787;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1513,_ctx) ) {
			case 1:
				{
				State = 10776; Match(OFFSET);
				State = 10777; _localctx.offset_exp = expression(0);
				State = 10778;
				_localctx.offset_rows = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ROW || _la==ROWS) ) {
					_localctx.offset_rows = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10785;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1512,_ctx) ) {
				case 1:
					{
					State = 10779; Match(FETCH);
					State = 10780;
					_localctx.fetch_offset = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==FIRST || _la==NEXT) ) {
						_localctx.fetch_offset = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 10781; _localctx.fetch_exp = expression(0);
					State = 10782;
					_localctx.fetch_rows = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==ROW || _la==ROWS) ) {
						_localctx.fetch_rows = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 10783; Match(ONLY);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_clauseContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode BROWSE() { return GetToken(TSqlParser.BROWSE, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode RAW() { return GetToken(TSqlParser.RAW, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public Xml_common_directivesContext[] xml_common_directives() {
			return GetRuleContexts<Xml_common_directivesContext>();
		}
		public Xml_common_directivesContext xml_common_directives(int i) {
			return GetRuleContext<Xml_common_directivesContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode ELEMENTS() { return GetToken(TSqlParser.ELEMENTS, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode XMLDATA() { return GetToken(TSqlParser.XMLDATA, 0); }
		public ITerminalNode XMLSCHEMA() { return GetToken(TSqlParser.XMLSCHEMA, 0); }
		public ITerminalNode XSINIL() { return GetToken(TSqlParser.XSINIL, 0); }
		public ITerminalNode ABSENT() { return GetToken(TSqlParser.ABSENT, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(TSqlParser.EXPLICIT, 0); }
		public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		public ITerminalNode JSON() { return GetToken(TSqlParser.JSON, 0); }
		public ITerminalNode ROOT() { return GetToken(TSqlParser.ROOT, 0); }
		public ITerminalNode INCLUDE_NULL_VALUES() { return GetToken(TSqlParser.INCLUDE_NULL_VALUES, 0); }
		public ITerminalNode WITHOUT_ARRAY_WRAPPER() { return GetToken(TSqlParser.WITHOUT_ARRAY_WRAPPER, 0); }
		public For_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFor_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFor_clause(this);
		}
	}

	[RuleVersion(0)]
	public For_clauseContext for_clause() {
		For_clauseContext _localctx = new For_clauseContext(_ctx, State);
		EnterRule(_localctx, 898, RULE_for_clause);
		int _la;
		try {
			int _alt;
			State = 10881;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1532,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10789; Match(FOR);
				State = 10790; Match(BROWSE);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10791; Match(FOR);
				State = 10792; Match(XML);
				State = 10800;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1515,_ctx) ) {
				case 1:
					{
					State = 10793; Match(RAW);
					State = 10797;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1514,_ctx) ) {
					case 1:
						{
						State = 10794; Match(LR_BRACKET);
						State = 10795; Match(STRING);
						State = 10796; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 10799; Match(AUTO);
					}
					break;
				}
				State = 10805;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1516,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10802; xml_common_directives();
						}
						} 
					}
					State = 10807;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1516,_ctx);
				}
				State = 10818;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1519,_ctx) ) {
				case 1:
					{
					State = 10808; Match(COMMA);
					State = 10816;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1518,_ctx) ) {
					case 1:
						{
						State = 10809; Match(XMLDATA);
						}
						break;

					case 2:
						{
						State = 10810; Match(XMLSCHEMA);
						State = 10814;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1517,_ctx) ) {
						case 1:
							{
							State = 10811; Match(LR_BRACKET);
							State = 10812; Match(STRING);
							State = 10813; Match(RR_BRACKET);
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				State = 10825;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1521,_ctx) ) {
				case 1:
					{
					State = 10820; Match(COMMA);
					State = 10821; Match(ELEMENTS);
					State = 10823;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1520,_ctx) ) {
					case 1:
						{
						State = 10822;
						_la = _input.La(1);
						if ( !(_la==ABSENT || _la==XSINIL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10827; Match(FOR);
				State = 10828; Match(XML);
				State = 10829; Match(EXPLICIT);
				State = 10833;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1522,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10830; xml_common_directives();
						}
						} 
					}
					State = 10835;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1522,_ctx);
				}
				State = 10838;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1523,_ctx) ) {
				case 1:
					{
					State = 10836; Match(COMMA);
					State = 10837; Match(XMLDATA);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10840; Match(FOR);
				State = 10841; Match(XML);
				State = 10842; Match(PATH);
				State = 10846;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1524,_ctx) ) {
				case 1:
					{
					State = 10843; Match(LR_BRACKET);
					State = 10844; Match(STRING);
					State = 10845; Match(RR_BRACKET);
					}
					break;
				}
				State = 10851;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1525,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10848; xml_common_directives();
						}
						} 
					}
					State = 10853;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1525,_ctx);
				}
				State = 10859;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1527,_ctx) ) {
				case 1:
					{
					State = 10854; Match(COMMA);
					State = 10855; Match(ELEMENTS);
					State = 10857;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1526,_ctx) ) {
					case 1:
						{
						State = 10856;
						_la = _input.La(1);
						if ( !(_la==ABSENT || _la==XSINIL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10861; Match(FOR);
				State = 10862; Match(JSON);
				State = 10863;
				_la = _input.La(1);
				if ( !(_la==AUTO || _la==PATH) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10871;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1529,_ctx) ) {
				case 1:
					{
					State = 10864; Match(COMMA);
					State = 10865; Match(ROOT);
					State = 10869;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1528,_ctx) ) {
					case 1:
						{
						State = 10866; Match(LR_BRACKET);
						State = 10867; Match(STRING);
						State = 10868; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				State = 10875;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1530,_ctx) ) {
				case 1:
					{
					State = 10873; Match(COMMA);
					State = 10874; Match(INCLUDE_NULL_VALUES);
					}
					break;
				}
				State = 10879;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1531,_ctx) ) {
				case 1:
					{
					State = 10877; Match(COMMA);
					State = 10878; Match(WITHOUT_ARRAY_WRAPPER);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_common_directivesContext : ParserRuleContext {
		public ITerminalNode BINARY_BASE64() { return GetToken(TSqlParser.BINARY_BASE64, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode ROOT() { return GetToken(TSqlParser.ROOT, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Xml_common_directivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_common_directives; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_common_directives(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_common_directives(this);
		}
	}

	[RuleVersion(0)]
	public Xml_common_directivesContext xml_common_directives() {
		Xml_common_directivesContext _localctx = new Xml_common_directivesContext(_ctx, State);
		EnterRule(_localctx, 900, RULE_xml_common_directives);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10883; Match(COMMA);
			State = 10892;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1534,_ctx) ) {
			case 1:
				{
				State = 10884; Match(BINARY_BASE64);
				}
				break;

			case 2:
				{
				State = 10885; Match(TYPE);
				}
				break;

			case 3:
				{
				State = 10886; Match(ROOT);
				State = 10890;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1533,_ctx) ) {
				case 1:
					{
					State = 10887; Match(LR_BRACKET);
					State = 10888; Match(STRING);
					State = 10889; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_expressionContext : ParserRuleContext {
		public ExpressionContext order_by;
		public IToken ascending;
		public IToken descending;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ASC() { return GetToken(TSqlParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(TSqlParser.DESC, 0); }
		public Order_by_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_expression(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_expressionContext order_by_expression() {
		Order_by_expressionContext _localctx = new Order_by_expressionContext(_ctx, State);
		EnterRule(_localctx, 902, RULE_order_by_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10894; _localctx.order_by = expression(0);
			State = 10897;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1535,_ctx) ) {
			case 1:
				{
				State = 10895; _localctx.ascending = Match(ASC);
				}
				break;

			case 2:
				{
				State = 10896; _localctx.descending = Match(DESC);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_itemContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Group_by_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGroup_by_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGroup_by_item(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_itemContext group_by_item() {
		Group_by_itemContext _localctx = new Group_by_itemContext(_ctx, State);
		EnterRule(_localctx, 904, RULE_group_by_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10899; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Option_clauseContext : ParserRuleContext {
		public OptionContext _option;
		public IList<OptionContext> _options = new List<OptionContext>();
		public ITerminalNode OPTION() { return GetToken(TSqlParser.OPTION, 0); }
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public Option_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOption_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOption_clause(this);
		}
	}

	[RuleVersion(0)]
	public Option_clauseContext option_clause() {
		Option_clauseContext _localctx = new Option_clauseContext(_ctx, State);
		EnterRule(_localctx, 906, RULE_option_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10901; Match(OPTION);
			State = 10902; Match(LR_BRACKET);
			State = 10903; _localctx._option = option();
			_localctx._options.Add(_localctx._option);
			State = 10908;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1536,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 10904; Match(COMMA);
					State = 10905; _localctx._option = option();
					_localctx._options.Add(_localctx._option);
					}
					} 
				}
				State = 10910;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1536,_ctx);
			}
			State = 10911; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		public IToken number_rows;
		public IToken number_of_processors;
		public IToken number_recursion;
		public IToken traceFlag;
		public ITerminalNode FAST() { return GetToken(TSqlParser.FAST, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode HASH() { return GetToken(TSqlParser.HASH, 0); }
		public ITerminalNode ORDER() { return GetToken(TSqlParser.ORDER, 0); }
		public ITerminalNode UNION() { return GetToken(TSqlParser.UNION, 0); }
		public ITerminalNode MERGE() { return GetToken(TSqlParser.MERGE, 0); }
		public ITerminalNode CONCAT() { return GetToken(TSqlParser.CONCAT, 0); }
		public ITerminalNode JOIN() { return GetToken(TSqlParser.JOIN, 0); }
		public ITerminalNode LOOP() { return GetToken(TSqlParser.LOOP, 0); }
		public ITerminalNode EXPAND() { return GetToken(TSqlParser.EXPAND, 0); }
		public ITerminalNode VIEWS() { return GetToken(TSqlParser.VIEWS, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public ITerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return GetToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public ITerminalNode KEEP() { return GetToken(TSqlParser.KEEP, 0); }
		public ITerminalNode PLAN() { return GetToken(TSqlParser.PLAN, 0); }
		public ITerminalNode KEEPFIXED() { return GetToken(TSqlParser.KEEPFIXED, 0); }
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode MAXRECURSION() { return GetToken(TSqlParser.MAXRECURSION, 0); }
		public ITerminalNode OPTIMIZE() { return GetToken(TSqlParser.OPTIMIZE, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Optimize_for_argContext[] optimize_for_arg() {
			return GetRuleContexts<Optimize_for_argContext>();
		}
		public Optimize_for_argContext optimize_for_arg(int i) {
			return GetRuleContext<Optimize_for_argContext>(i);
		}
		public ITerminalNode UNKNOWN() { return GetToken(TSqlParser.UNKNOWN, 0); }
		public ITerminalNode PARAMETERIZATION() { return GetToken(TSqlParser.PARAMETERIZATION, 0); }
		public ITerminalNode SIMPLE() { return GetToken(TSqlParser.SIMPLE, 0); }
		public ITerminalNode FORCED() { return GetToken(TSqlParser.FORCED, 0); }
		public ITerminalNode QUERYTRACEON() { return GetToken(TSqlParser.QUERYTRACEON, 0); }
		public ITerminalNode RECOMPILE() { return GetToken(TSqlParser.RECOMPILE, 0); }
		public ITerminalNode ROBUST() { return GetToken(TSqlParser.ROBUST, 0); }
		public ITerminalNode USE() { return GetToken(TSqlParser.USE, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(_ctx, State);
		EnterRule(_localctx, 908, RULE_option);
		int _la;
		try {
			int _alt;
			State = 10960;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1538,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10913; Match(FAST);
				State = 10914; _localctx.number_rows = Match(DECIMAL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10915;
				_la = _input.La(1);
				if ( !(_la==HASH || _la==ORDER) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10916; Match(GROUP);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10917;
				_la = _input.La(1);
				if ( !(_la==CONCAT || _la==HASH || _la==MERGE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10918; Match(UNION);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10919;
				_la = _input.La(1);
				if ( !(_la==HASH || _la==LOOP || _la==MERGE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10920; Match(JOIN);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10921; Match(EXPAND);
				State = 10922; Match(VIEWS);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10923; Match(FORCE);
				State = 10924; Match(ORDER);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10925; Match(IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10926; Match(KEEP);
				State = 10927; Match(PLAN);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 10928; Match(KEEPFIXED);
				State = 10929; Match(PLAN);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 10930; Match(MAXDOP);
				State = 10931; _localctx.number_of_processors = Match(DECIMAL);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 10932; Match(MAXRECURSION);
				State = 10933; _localctx.number_recursion = Match(DECIMAL);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 10934; Match(OPTIMIZE);
				State = 10935; Match(FOR);
				State = 10936; Match(LR_BRACKET);
				State = 10937; optimize_for_arg();
				State = 10942;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1537,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10938; Match(COMMA);
						State = 10939; optimize_for_arg();
						}
						} 
					}
					State = 10944;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1537,_ctx);
				}
				State = 10945; Match(RR_BRACKET);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 10947; Match(OPTIMIZE);
				State = 10948; Match(FOR);
				State = 10949; Match(UNKNOWN);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 10950; Match(PARAMETERIZATION);
				State = 10951;
				_la = _input.La(1);
				if ( !(_la==FORCED || _la==SIMPLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 10952; Match(QUERYTRACEON);
				State = 10953; _localctx.traceFlag = Match(DECIMAL);
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 10954; Match(RECOMPILE);
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 10955; Match(ROBUST);
				State = 10956; Match(PLAN);
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 10957; Match(USE);
				State = 10958; Match(PLAN);
				State = 10959; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Optimize_for_argContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode UNKNOWN() { return GetToken(TSqlParser.UNKNOWN, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public Optimize_for_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optimize_for_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOptimize_for_arg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOptimize_for_arg(this);
		}
	}

	[RuleVersion(0)]
	public Optimize_for_argContext optimize_for_arg() {
		Optimize_for_argContext _localctx = new Optimize_for_argContext(_ctx, State);
		EnterRule(_localctx, 910, RULE_optimize_for_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10962; Match(LOCAL_ID);
			State = 10969;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1540,_ctx) ) {
			case 1:
				{
				State = 10963; Match(UNKNOWN);
				}
				break;

			case 2:
				{
				State = 10964; Match(EQUAL);
				State = 10967;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1539,_ctx) ) {
				case 1:
					{
					State = 10965; constant();
					}
					break;

				case 2:
					{
					State = 10966; Match(NULL_);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_listContext : ParserRuleContext {
		public Select_list_elemContext _select_list_elem;
		public IList<Select_list_elemContext> _selectElement = new List<Select_list_elemContext>();
		public Select_list_elemContext[] select_list_elem() {
			return GetRuleContexts<Select_list_elemContext>();
		}
		public Select_list_elemContext select_list_elem(int i) {
			return GetRuleContext<Select_list_elemContext>(i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_list(this);
		}
	}

	[RuleVersion(0)]
	public Select_listContext select_list() {
		Select_listContext _localctx = new Select_listContext(_ctx, State);
		EnterRule(_localctx, 912, RULE_select_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10971; _localctx._select_list_elem = select_list_elem();
			_localctx._selectElement.Add(_localctx._select_list_elem);
			State = 10976;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1541,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 10972; Match(COMMA);
					State = 10973; _localctx._select_list_elem = select_list_elem();
					_localctx._selectElement.Add(_localctx._select_list_elem);
					}
					} 
				}
				State = 10978;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1541,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Udt_method_argumentsContext : ParserRuleContext {
		public Execute_var_stringContext _execute_var_string;
		public IList<Execute_var_stringContext> _argument = new List<Execute_var_stringContext>();
		public Execute_var_stringContext[] execute_var_string() {
			return GetRuleContexts<Execute_var_stringContext>();
		}
		public Execute_var_stringContext execute_var_string(int i) {
			return GetRuleContext<Execute_var_stringContext>(i);
		}
		public Udt_method_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udt_method_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUdt_method_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUdt_method_arguments(this);
		}
	}

	[RuleVersion(0)]
	public Udt_method_argumentsContext udt_method_arguments() {
		Udt_method_argumentsContext _localctx = new Udt_method_argumentsContext(_ctx, State);
		EnterRule(_localctx, 914, RULE_udt_method_arguments);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10979; Match(LR_BRACKET);
			State = 10980; _localctx._execute_var_string = execute_var_string();
			_localctx._argument.Add(_localctx._execute_var_string);
			State = 10985;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1542,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 10981; Match(COMMA);
					State = 10982; _localctx._execute_var_string = execute_var_string();
					_localctx._argument.Add(_localctx._execute_var_string);
					}
					} 
				}
				State = 10987;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1542,_ctx);
			}
			State = 10988; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsteriskContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode INSERTED() { return GetToken(TSqlParser.INSERTED, 0); }
		public ITerminalNode DELETED() { return GetToken(TSqlParser.DELETED, 0); }
		public AsteriskContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asterisk; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAsterisk(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAsterisk(this);
		}
	}

	[RuleVersion(0)]
	public AsteriskContext asterisk() {
		AsteriskContext _localctx = new AsteriskContext(_ctx, State);
		EnterRule(_localctx, 916, RULE_asterisk);
		int _la;
		try {
			State = 10999;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1544,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10993;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1543,_ctx) ) {
				case 1:
					{
					State = 10990; table_name();
					State = 10991; Match(DOT);
					}
					break;
				}
				State = 10995; Match(STAR);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10996;
				_la = _input.La(1);
				if ( !(_la==DELETED || _la==INSERTED) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10997; Match(DOT);
				State = 10998; Match(STAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_elemContext : ParserRuleContext {
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode ROWGUID() { return GetToken(TSqlParser.ROWGUID, 0); }
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public Column_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_elem(this);
		}
	}

	[RuleVersion(0)]
	public Column_elemContext column_elem() {
		Column_elemContext _localctx = new Column_elemContext(_ctx, State);
		EnterRule(_localctx, 918, RULE_column_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11007;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1545,_ctx) ) {
			case 1:
				{
				State = 11001; full_column_name();
				}
				break;

			case 2:
				{
				State = 11002; Match(DOLLAR);
				State = 11003; Match(IDENTITY);
				}
				break;

			case 3:
				{
				State = 11004; Match(DOLLAR);
				State = 11005; Match(ROWGUID);
				}
				break;

			case 4:
				{
				State = 11006; Match(NULL_);
				}
				break;
			}
			State = 11010;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1546,_ctx) ) {
			case 1:
				{
				State = 11009; as_column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Udt_elemContext : ParserRuleContext {
		public Id_Context udt_column_name;
		public Id_Context non_static_attr;
		public Id_Context static_attr;
		public Udt_method_argumentsContext udt_method_arguments() {
			return GetRuleContext<Udt_method_argumentsContext>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public ITerminalNode DOUBLE_COLON() { return GetToken(TSqlParser.DOUBLE_COLON, 0); }
		public Udt_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udt_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUdt_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUdt_elem(this);
		}
	}

	[RuleVersion(0)]
	public Udt_elemContext udt_elem() {
		Udt_elemContext _localctx = new Udt_elemContext(_ctx, State);
		EnterRule(_localctx, 920, RULE_udt_elem);
		try {
			State = 11028;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1550,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11012; _localctx.udt_column_name = id_();
				State = 11013; Match(DOT);
				State = 11014; _localctx.non_static_attr = id_();
				State = 11015; udt_method_arguments();
				State = 11017;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1547,_ctx) ) {
				case 1:
					{
					State = 11016; as_column_alias();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11019; _localctx.udt_column_name = id_();
				State = 11020; Match(DOUBLE_COLON);
				State = 11021; _localctx.static_attr = id_();
				State = 11023;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1548,_ctx) ) {
				case 1:
					{
					State = 11022; udt_method_arguments();
					}
					break;
				}
				State = 11026;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1549,_ctx) ) {
				case 1:
					{
					State = 11025; as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_elemContext : ParserRuleContext {
		public Column_aliasContext leftAlias;
		public IToken eq;
		public ExpressionContext leftAssignment;
		public ExpressionContext expressionAs;
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public Expression_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExpression_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExpression_elem(this);
		}
	}

	[RuleVersion(0)]
	public Expression_elemContext expression_elem() {
		Expression_elemContext _localctx = new Expression_elemContext(_ctx, State);
		EnterRule(_localctx, 922, RULE_expression_elem);
		try {
			State = 11038;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1552,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11030; _localctx.leftAlias = column_alias();
				State = 11031; _localctx.eq = Match(EQUAL);
				State = 11032; _localctx.leftAssignment = expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11034; _localctx.expressionAs = expression(0);
				State = 11036;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1551,_ctx) ) {
				case 1:
					{
					State = 11035; as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_list_elemContext : ParserRuleContext {
		public AsteriskContext asterisk() {
			return GetRuleContext<AsteriskContext>(0);
		}
		public Column_elemContext column_elem() {
			return GetRuleContext<Column_elemContext>(0);
		}
		public Udt_elemContext udt_elem() {
			return GetRuleContext<Udt_elemContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Expression_elemContext expression_elem() {
			return GetRuleContext<Expression_elemContext>(0);
		}
		public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public Select_list_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_list_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_list_elem(this);
		}
	}

	[RuleVersion(0)]
	public Select_list_elemContext select_list_elem() {
		Select_list_elemContext _localctx = new Select_list_elemContext(_ctx, State);
		EnterRule(_localctx, 924, RULE_select_list_elem);
		try {
			State = 11063;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1556,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11040; asterisk();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11041; column_elem();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11042; udt_elem();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11043; Match(LOCAL_ID);
				State = 11046;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1553,_ctx) ) {
				case 1:
					{
					State = 11044; assignment_operator();
					}
					break;

				case 2:
					{
					State = 11045; Match(EQUAL);
					}
					break;
				}
				State = 11053;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1554,_ctx) ) {
				case 1:
					{
					State = 11048; expression(0);
					}
					break;

				case 2:
					{
					State = 11049; Match(NEXT);
					State = 11050; Match(VALUE);
					State = 11051; Match(FOR);
					State = 11052; table_name();
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11055; expression_elem();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 11056; Match(NEXT);
				State = 11057; Match(VALUE);
				State = 11058; Match(FOR);
				State = 11059; table_name();
				State = 11061;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1555,_ctx) ) {
				case 1:
					{
					State = 11060; as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_sourcesContext : ParserRuleContext {
		public Table_sourceContext _table_source;
		public IList<Table_sourceContext> _source = new List<Table_sourceContext>();
		public Table_sourceContext[] table_source() {
			return GetRuleContexts<Table_sourceContext>();
		}
		public Table_sourceContext table_source(int i) {
			return GetRuleContext<Table_sourceContext>(i);
		}
		public Table_sourcesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_sources; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_sources(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_sources(this);
		}
	}

	[RuleVersion(0)]
	public Table_sourcesContext table_sources() {
		Table_sourcesContext _localctx = new Table_sourcesContext(_ctx, State);
		EnterRule(_localctx, 926, RULE_table_sources);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11065; _localctx._table_source = table_source();
			_localctx._source.Add(_localctx._table_source);
			State = 11070;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1557,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11066; Match(COMMA);
					State = 11067; _localctx._table_source = table_source();
					_localctx._source.Add(_localctx._table_source);
					}
					} 
				}
				State = 11072;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1557,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_sourceContext : ParserRuleContext {
		public Table_source_item_joinedContext table_source_item_joined() {
			return GetRuleContext<Table_source_item_joinedContext>(0);
		}
		public Table_sourceContext table_source() {
			return GetRuleContext<Table_sourceContext>(0);
		}
		public Table_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_source(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_source(this);
		}
	}

	[RuleVersion(0)]
	public Table_sourceContext table_source() {
		Table_sourceContext _localctx = new Table_sourceContext(_ctx, State);
		EnterRule(_localctx, 928, RULE_table_source);
		try {
			State = 11078;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1558,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11073; table_source_item_joined();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11074; Match(LR_BRACKET);
				State = 11075; table_source();
				State = 11076; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_source_item_joinedContext : ParserRuleContext {
		public Join_partContext _join_part;
		public IList<Join_partContext> _joins = new List<Join_partContext>();
		public Table_source_itemContext table_source_item() {
			return GetRuleContext<Table_source_itemContext>(0);
		}
		public Join_partContext[] join_part() {
			return GetRuleContexts<Join_partContext>();
		}
		public Join_partContext join_part(int i) {
			return GetRuleContext<Join_partContext>(i);
		}
		public Table_source_item_joinedContext table_source_item_joined() {
			return GetRuleContext<Table_source_item_joinedContext>(0);
		}
		public Table_source_item_joinedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_source_item_joined; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_source_item_joined(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_source_item_joined(this);
		}
	}

	[RuleVersion(0)]
	public Table_source_item_joinedContext table_source_item_joined() {
		Table_source_item_joinedContext _localctx = new Table_source_item_joinedContext(_ctx, State);
		EnterRule(_localctx, 930, RULE_table_source_item_joined);
		try {
			int _alt;
			State = 11096;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1561,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11080; table_source_item();
				State = 11084;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1559,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 11081; _localctx._join_part = join_part();
						_localctx._joins.Add(_localctx._join_part);
						}
						} 
					}
					State = 11086;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1559,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11087; Match(LR_BRACKET);
				State = 11088; table_source_item_joined();
				State = 11089; Match(RR_BRACKET);
				State = 11093;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1560,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 11090; _localctx._join_part = join_part();
						_localctx._joins.Add(_localctx._join_part);
						}
						} 
					}
					State = 11095;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1560,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_source_itemContext : ParserRuleContext {
		public IToken loc_id;
		public IToken loc_id_call;
		public Function_callContext loc_fcall;
		public Function_callContext oldstyle_fcall;
		public Table_name_with_hintContext table_name_with_hint() {
			return GetRuleContext<Table_name_with_hintContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Rowset_functionContext rowset_function() {
			return GetRuleContext<Rowset_functionContext>(0);
		}
		public Derived_tableContext derived_table() {
			return GetRuleContext<Derived_tableContext>(0);
		}
		public Column_alias_listContext column_alias_list() {
			return GetRuleContext<Column_alias_listContext>(0);
		}
		public Change_tableContext change_table() {
			return GetRuleContext<Change_tableContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Nodes_methodContext nodes_method() {
			return GetRuleContext<Nodes_methodContext>(0);
		}
		public OpenqueryContext openquery() {
			return GetRuleContext<OpenqueryContext>(0);
		}
		public Open_xmlContext open_xml() {
			return GetRuleContext<Open_xmlContext>(0);
		}
		public Open_jsonContext open_json() {
			return GetRuleContext<Open_jsonContext>(0);
		}
		public ITerminalNode DOUBLE_COLON() { return GetToken(TSqlParser.DOUBLE_COLON, 0); }
		public Table_source_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_source_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_source_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_source_item(this);
		}
	}

	[RuleVersion(0)]
	public Table_source_itemContext table_source_item() {
		Table_source_itemContext _localctx = new Table_source_itemContext(_ctx, State);
		EnterRule(_localctx, 932, RULE_table_source_item);
		try {
			State = 11162;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1578,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11098; table_name_with_hint();
				State = 11100;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1562,_ctx) ) {
				case 1:
					{
					State = 11099; as_table_alias();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11102; full_table_name();
				State = 11104;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1563,_ctx) ) {
				case 1:
					{
					State = 11103; with_table_hints();
					}
					break;
				}
				State = 11107;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1564,_ctx) ) {
				case 1:
					{
					State = 11106; as_table_alias();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11109; rowset_function();
				State = 11111;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1565,_ctx) ) {
				case 1:
					{
					State = 11110; as_table_alias();
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11113; derived_table();
				State = 11118;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1567,_ctx) ) {
				case 1:
					{
					State = 11114; as_table_alias();
					State = 11116;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1566,_ctx) ) {
					case 1:
						{
						State = 11115; column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11120; change_table();
				State = 11122;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1568,_ctx) ) {
				case 1:
					{
					State = 11121; as_table_alias();
					}
					break;
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 11124; function_call();
				State = 11129;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1570,_ctx) ) {
				case 1:
					{
					State = 11125; as_table_alias();
					State = 11127;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1569,_ctx) ) {
					case 1:
						{
						State = 11126; column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 11131; _localctx.loc_id = Match(LOCAL_ID);
				State = 11133;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1571,_ctx) ) {
				case 1:
					{
					State = 11132; as_table_alias();
					}
					break;
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 11135; nodes_method();
				State = 11140;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1573,_ctx) ) {
				case 1:
					{
					State = 11136; as_table_alias();
					State = 11138;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1572,_ctx) ) {
					case 1:
						{
						State = 11137; column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 11142; openquery();
				State = 11144;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1574,_ctx) ) {
				case 1:
					{
					State = 11143; as_table_alias();
					}
					break;
				}
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 11146; _localctx.loc_id_call = Match(LOCAL_ID);
				State = 11147; Match(DOT);
				State = 11148; _localctx.loc_fcall = function_call();
				State = 11153;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1576,_ctx) ) {
				case 1:
					{
					State = 11149; as_table_alias();
					State = 11151;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1575,_ctx) ) {
					case 1:
						{
						State = 11150; column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 11155; open_xml();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 11156; open_json();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 11157; Match(DOUBLE_COLON);
				State = 11158; _localctx.oldstyle_fcall = function_call();
				State = 11160;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1577,_ctx) ) {
				case 1:
					{
					State = 11159; as_table_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_xmlContext : ParserRuleContext {
		public ITerminalNode OPENXML() { return GetToken(TSqlParser.OPENXML, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Schema_declarationContext schema_declaration() {
			return GetRuleContext<Schema_declarationContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public Open_xmlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_xml; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpen_xml(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpen_xml(this);
		}
	}

	[RuleVersion(0)]
	public Open_xmlContext open_xml() {
		Open_xmlContext _localctx = new Open_xmlContext(_ctx, State);
		EnterRule(_localctx, 934, RULE_open_xml);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11164; Match(OPENXML);
			State = 11165; Match(LR_BRACKET);
			State = 11166; expression(0);
			State = 11167; Match(COMMA);
			State = 11168; expression(0);
			State = 11171;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1579,_ctx) ) {
			case 1:
				{
				State = 11169; Match(COMMA);
				State = 11170; expression(0);
				}
				break;
			}
			State = 11173; Match(RR_BRACKET);
			State = 11179;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1580,_ctx) ) {
			case 1:
				{
				State = 11174; Match(WITH);
				State = 11175; Match(LR_BRACKET);
				State = 11176; schema_declaration();
				State = 11177; Match(RR_BRACKET);
				}
				break;
			}
			State = 11182;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1581,_ctx) ) {
			case 1:
				{
				State = 11181; as_table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_jsonContext : ParserRuleContext {
		public ITerminalNode OPENJSON() { return GetToken(TSqlParser.OPENJSON, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Json_declarationContext json_declaration() {
			return GetRuleContext<Json_declarationContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public Open_jsonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_json; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpen_json(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpen_json(this);
		}
	}

	[RuleVersion(0)]
	public Open_jsonContext open_json() {
		Open_jsonContext _localctx = new Open_jsonContext(_ctx, State);
		EnterRule(_localctx, 936, RULE_open_json);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11184; Match(OPENJSON);
			State = 11185; Match(LR_BRACKET);
			State = 11186; expression(0);
			State = 11189;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1582,_ctx) ) {
			case 1:
				{
				State = 11187; Match(COMMA);
				State = 11188; expression(0);
				}
				break;
			}
			State = 11191; Match(RR_BRACKET);
			State = 11197;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1583,_ctx) ) {
			case 1:
				{
				State = 11192; Match(WITH);
				State = 11193; Match(LR_BRACKET);
				State = 11194; json_declaration();
				State = 11195; Match(RR_BRACKET);
				}
				break;
			}
			State = 11200;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1584,_ctx) ) {
			case 1:
				{
				State = 11199; as_table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_declarationContext : ParserRuleContext {
		public Json_column_declarationContext _json_column_declaration;
		public IList<Json_column_declarationContext> _json_col = new List<Json_column_declarationContext>();
		public Json_column_declarationContext[] json_column_declaration() {
			return GetRuleContexts<Json_column_declarationContext>();
		}
		public Json_column_declarationContext json_column_declaration(int i) {
			return GetRuleContext<Json_column_declarationContext>(i);
		}
		public Json_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJson_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJson_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Json_declarationContext json_declaration() {
		Json_declarationContext _localctx = new Json_declarationContext(_ctx, State);
		EnterRule(_localctx, 938, RULE_json_declaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11202; _localctx._json_column_declaration = json_column_declaration();
			_localctx._json_col.Add(_localctx._json_column_declaration);
			State = 11207;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1585,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11203; Match(COMMA);
					State = 11204; _localctx._json_column_declaration = json_column_declaration();
					_localctx._json_col.Add(_localctx._json_column_declaration);
					}
					} 
				}
				State = 11209;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1585,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_column_declarationContext : ParserRuleContext {
		public Column_declarationContext column_declaration() {
			return GetRuleContext<Column_declarationContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode JSON() { return GetToken(TSqlParser.JSON, 0); }
		public Json_column_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_column_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJson_column_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJson_column_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Json_column_declarationContext json_column_declaration() {
		Json_column_declarationContext _localctx = new Json_column_declarationContext(_ctx, State);
		EnterRule(_localctx, 940, RULE_json_column_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11210; column_declaration();
			State = 11213;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1586,_ctx) ) {
			case 1:
				{
				State = 11211; Match(AS);
				State = 11212; Match(JSON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Schema_declarationContext : ParserRuleContext {
		public Column_declarationContext _column_declaration;
		public IList<Column_declarationContext> _xml_col = new List<Column_declarationContext>();
		public Column_declarationContext[] column_declaration() {
			return GetRuleContexts<Column_declarationContext>();
		}
		public Column_declarationContext column_declaration(int i) {
			return GetRuleContext<Column_declarationContext>(i);
		}
		public Schema_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSchema_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSchema_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Schema_declarationContext schema_declaration() {
		Schema_declarationContext _localctx = new Schema_declarationContext(_ctx, State);
		EnterRule(_localctx, 942, RULE_schema_declaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11215; _localctx._column_declaration = column_declaration();
			_localctx._xml_col.Add(_localctx._column_declaration);
			State = 11220;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1587,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11216; Match(COMMA);
					State = 11217; _localctx._column_declaration = column_declaration();
					_localctx._xml_col.Add(_localctx._column_declaration);
					}
					} 
				}
				State = 11222;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1587,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_declarationContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Column_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Column_declarationContext column_declaration() {
		Column_declarationContext _localctx = new Column_declarationContext(_ctx, State);
		EnterRule(_localctx, 944, RULE_column_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11223; id_();
			State = 11224; data_type();
			State = 11226;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1588,_ctx) ) {
			case 1:
				{
				State = 11225; Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_tableContext : ParserRuleContext {
		public Change_table_changesContext change_table_changes() {
			return GetRuleContext<Change_table_changesContext>(0);
		}
		public Change_table_versionContext change_table_version() {
			return GetRuleContext<Change_table_versionContext>(0);
		}
		public Change_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_table(this);
		}
	}

	[RuleVersion(0)]
	public Change_tableContext change_table() {
		Change_tableContext _localctx = new Change_tableContext(_ctx, State);
		EnterRule(_localctx, 946, RULE_change_table);
		try {
			State = 11230;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1589,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11228; change_table_changes();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11229; change_table_version();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_table_changesContext : ParserRuleContext {
		public Table_nameContext changetable;
		public IToken changesid;
		public ITerminalNode CHANGETABLE() { return GetToken(TSqlParser.CHANGETABLE, 0); }
		public ITerminalNode CHANGES() { return GetToken(TSqlParser.CHANGES, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Change_table_changesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_table_changes; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_table_changes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_table_changes(this);
		}
	}

	[RuleVersion(0)]
	public Change_table_changesContext change_table_changes() {
		Change_table_changesContext _localctx = new Change_table_changesContext(_ctx, State);
		EnterRule(_localctx, 948, RULE_change_table_changes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11232; Match(CHANGETABLE);
			State = 11233; Match(LR_BRACKET);
			State = 11234; Match(CHANGES);
			State = 11235; _localctx.changetable = table_name();
			State = 11236; Match(COMMA);
			State = 11237;
			_localctx.changesid = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==NULL_ || _la==LOCAL_ID || _la==DECIMAL) ) {
				_localctx.changesid = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 11238; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_table_versionContext : ParserRuleContext {
		public Table_nameContext versiontable;
		public Full_column_name_listContext pk_columns;
		public Select_listContext pk_values;
		public ITerminalNode CHANGETABLE() { return GetToken(TSqlParser.CHANGETABLE, 0); }
		public ITerminalNode VERSION() { return GetToken(TSqlParser.VERSION, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Full_column_name_listContext full_column_name_list() {
			return GetRuleContext<Full_column_name_listContext>(0);
		}
		public Select_listContext select_list() {
			return GetRuleContext<Select_listContext>(0);
		}
		public Change_table_versionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_table_version; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_table_version(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_table_version(this);
		}
	}

	[RuleVersion(0)]
	public Change_table_versionContext change_table_version() {
		Change_table_versionContext _localctx = new Change_table_versionContext(_ctx, State);
		EnterRule(_localctx, 950, RULE_change_table_version);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11240; Match(CHANGETABLE);
			State = 11241; Match(LR_BRACKET);
			State = 11242; Match(VERSION);
			State = 11243; _localctx.versiontable = table_name();
			State = 11244; Match(COMMA);
			State = 11245; _localctx.pk_columns = full_column_name_list();
			State = 11246; Match(COMMA);
			State = 11247; _localctx.pk_values = select_list();
			State = 11248; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_partContext : ParserRuleContext {
		public Join_onContext join_on() {
			return GetRuleContext<Join_onContext>(0);
		}
		public Cross_joinContext cross_join() {
			return GetRuleContext<Cross_joinContext>(0);
		}
		public Apply_Context apply_() {
			return GetRuleContext<Apply_Context>(0);
		}
		public PivotContext pivot() {
			return GetRuleContext<PivotContext>(0);
		}
		public UnpivotContext unpivot() {
			return GetRuleContext<UnpivotContext>(0);
		}
		public Join_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_part; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJoin_part(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJoin_part(this);
		}
	}

	[RuleVersion(0)]
	public Join_partContext join_part() {
		Join_partContext _localctx = new Join_partContext(_ctx, State);
		EnterRule(_localctx, 952, RULE_join_part);
		try {
			State = 11255;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1590,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11250; join_on();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11251; cross_join();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11252; apply_();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11253; pivot();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11254; unpivot();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_onContext : ParserRuleContext {
		public IToken inner;
		public IToken join_type;
		public IToken outer;
		public IToken join_hint;
		public Table_sourceContext source;
		public Search_conditionContext cond;
		public ITerminalNode JOIN() { return GetToken(TSqlParser.JOIN, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Table_sourceContext table_source() {
			return GetRuleContext<Table_sourceContext>(0);
		}
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode LEFT() { return GetToken(TSqlParser.LEFT, 0); }
		public ITerminalNode RIGHT() { return GetToken(TSqlParser.RIGHT, 0); }
		public ITerminalNode FULL() { return GetToken(TSqlParser.FULL, 0); }
		public ITerminalNode LOOP() { return GetToken(TSqlParser.LOOP, 0); }
		public ITerminalNode HASH() { return GetToken(TSqlParser.HASH, 0); }
		public ITerminalNode MERGE() { return GetToken(TSqlParser.MERGE, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode INNER() { return GetToken(TSqlParser.INNER, 0); }
		public ITerminalNode OUTER() { return GetToken(TSqlParser.OUTER, 0); }
		public Join_onContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_on; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJoin_on(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJoin_on(this);
		}
	}

	[RuleVersion(0)]
	public Join_onContext join_on() {
		Join_onContext _localctx = new Join_onContext(_ctx, State);
		EnterRule(_localctx, 954, RULE_join_on);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11264;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1593,_ctx) ) {
			case 1:
				{
				State = 11258;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1591,_ctx) ) {
				case 1:
					{
					State = 11257; _localctx.inner = Match(INNER);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 11260;
				_localctx.join_type = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
					_localctx.join_type = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11262;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1592,_ctx) ) {
				case 1:
					{
					State = 11261; _localctx.outer = Match(OUTER);
					}
					break;
				}
				}
				break;
			}
			State = 11267;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1594,_ctx) ) {
			case 1:
				{
				State = 11266;
				_localctx.join_hint = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==HASH || _la==LOOP || _la==MERGE || _la==REMOTE) ) {
					_localctx.join_hint = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 11269; Match(JOIN);
			State = 11270; _localctx.source = table_source();
			State = 11271; Match(ON);
			State = 11272; _localctx.cond = search_condition(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cross_joinContext : ParserRuleContext {
		public ITerminalNode CROSS() { return GetToken(TSqlParser.CROSS, 0); }
		public ITerminalNode JOIN() { return GetToken(TSqlParser.JOIN, 0); }
		public Table_sourceContext table_source() {
			return GetRuleContext<Table_sourceContext>(0);
		}
		public Cross_joinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cross_join; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCross_join(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCross_join(this);
		}
	}

	[RuleVersion(0)]
	public Cross_joinContext cross_join() {
		Cross_joinContext _localctx = new Cross_joinContext(_ctx, State);
		EnterRule(_localctx, 956, RULE_cross_join);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11274; Match(CROSS);
			State = 11275; Match(JOIN);
			State = 11276; table_source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Apply_Context : ParserRuleContext {
		public IToken apply_style;
		public Table_sourceContext source;
		public ITerminalNode APPLY() { return GetToken(TSqlParser.APPLY, 0); }
		public Table_sourceContext table_source() {
			return GetRuleContext<Table_sourceContext>(0);
		}
		public ITerminalNode CROSS() { return GetToken(TSqlParser.CROSS, 0); }
		public ITerminalNode OUTER() { return GetToken(TSqlParser.OUTER, 0); }
		public Apply_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_apply_; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterApply_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitApply_(this);
		}
	}

	[RuleVersion(0)]
	public Apply_Context apply_() {
		Apply_Context _localctx = new Apply_Context(_ctx, State);
		EnterRule(_localctx, 958, RULE_apply_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11278;
			_localctx.apply_style = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==CROSS || _la==OUTER) ) {
				_localctx.apply_style = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 11279; Match(APPLY);
			State = 11280; _localctx.source = table_source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PivotContext : ParserRuleContext {
		public ITerminalNode PIVOT() { return GetToken(TSqlParser.PIVOT, 0); }
		public Pivot_clauseContext pivot_clause() {
			return GetRuleContext<Pivot_clauseContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public PivotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPivot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPivot(this);
		}
	}

	[RuleVersion(0)]
	public PivotContext pivot() {
		PivotContext _localctx = new PivotContext(_ctx, State);
		EnterRule(_localctx, 960, RULE_pivot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11282; Match(PIVOT);
			State = 11283; pivot_clause();
			State = 11284; as_table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnpivotContext : ParserRuleContext {
		public ITerminalNode UNPIVOT() { return GetToken(TSqlParser.UNPIVOT, 0); }
		public Unpivot_clauseContext unpivot_clause() {
			return GetRuleContext<Unpivot_clauseContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public UnpivotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpivot; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUnpivot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUnpivot(this);
		}
	}

	[RuleVersion(0)]
	public UnpivotContext unpivot() {
		UnpivotContext _localctx = new UnpivotContext(_ctx, State);
		EnterRule(_localctx, 962, RULE_unpivot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11286; Match(UNPIVOT);
			State = 11287; unpivot_clause();
			State = 11288; as_table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pivot_clauseContext : ParserRuleContext {
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return GetRuleContext<Aggregate_windowed_functionContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public Column_alias_listContext column_alias_list() {
			return GetRuleContext<Column_alias_listContext>(0);
		}
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPivot_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPivot_clause(this);
		}
	}

	[RuleVersion(0)]
	public Pivot_clauseContext pivot_clause() {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, State);
		EnterRule(_localctx, 964, RULE_pivot_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11290; Match(LR_BRACKET);
			State = 11291; aggregate_windowed_function();
			State = 11292; Match(FOR);
			State = 11293; full_column_name();
			State = 11294; Match(IN);
			State = 11295; column_alias_list();
			State = 11296; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unpivot_clauseContext : ParserRuleContext {
		public ExpressionContext unpivot_exp;
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public Full_column_name_listContext full_column_name_list() {
			return GetRuleContext<Full_column_name_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpivot_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUnpivot_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUnpivot_clause(this);
		}
	}

	[RuleVersion(0)]
	public Unpivot_clauseContext unpivot_clause() {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, State);
		EnterRule(_localctx, 966, RULE_unpivot_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11298; Match(LR_BRACKET);
			State = 11299; _localctx.unpivot_exp = expression(0);
			State = 11300; Match(FOR);
			State = 11301; full_column_name();
			State = 11302; Match(IN);
			State = 11303; Match(LR_BRACKET);
			State = 11304; full_column_name_list();
			State = 11305; Match(RR_BRACKET);
			State = 11306; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_column_name_listContext : ParserRuleContext {
		public Full_column_nameContext _full_column_name;
		public IList<Full_column_nameContext> _column = new List<Full_column_nameContext>();
		public Full_column_nameContext[] full_column_name() {
			return GetRuleContexts<Full_column_nameContext>();
		}
		public Full_column_nameContext full_column_name(int i) {
			return GetRuleContext<Full_column_nameContext>(i);
		}
		public Full_column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_column_name_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFull_column_name_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFull_column_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Full_column_name_listContext full_column_name_list() {
		Full_column_name_listContext _localctx = new Full_column_name_listContext(_ctx, State);
		EnterRule(_localctx, 968, RULE_full_column_name_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11308; _localctx._full_column_name = full_column_name();
			_localctx._column.Add(_localctx._full_column_name);
			State = 11313;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1595,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11309; Match(COMMA);
					State = 11310; _localctx._full_column_name = full_column_name();
					_localctx._column.Add(_localctx._full_column_name);
					}
					} 
				}
				State = 11315;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1595,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_name_with_hintContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Table_name_with_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name_with_hint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_name_with_hint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_name_with_hint(this);
		}
	}

	[RuleVersion(0)]
	public Table_name_with_hintContext table_name_with_hint() {
		Table_name_with_hintContext _localctx = new Table_name_with_hintContext(_ctx, State);
		EnterRule(_localctx, 970, RULE_table_name_with_hint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11316; table_name();
			State = 11318;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1596,_ctx) ) {
			case 1:
				{
				State = 11317; with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rowset_functionContext : ParserRuleContext {
		public IToken provider_name;
		public IToken connectionString;
		public IToken sql;
		public IToken data_file;
		public ITerminalNode OPENROWSET() { return GetToken(TSqlParser.OPENROWSET, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode BULK() { return GetToken(TSqlParser.BULK, 0); }
		public Bulk_optionContext[] bulk_option() {
			return GetRuleContexts<Bulk_optionContext>();
		}
		public Bulk_optionContext bulk_option(int i) {
			return GetRuleContext<Bulk_optionContext>(i);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Rowset_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowset_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRowset_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRowset_function(this);
		}
	}

	[RuleVersion(0)]
	public Rowset_functionContext rowset_function() {
		Rowset_functionContext _localctx = new Rowset_functionContext(_ctx, State);
		EnterRule(_localctx, 972, RULE_rowset_function);
		try {
			int _alt;
			State = 11346;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1599,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 11320; Match(OPENROWSET);
				State = 11321; Match(LR_BRACKET);
				State = 11322; _localctx.provider_name = Match(STRING);
				State = 11323; Match(COMMA);
				State = 11324; _localctx.connectionString = Match(STRING);
				State = 11325; Match(COMMA);
				State = 11326; _localctx.sql = Match(STRING);
				State = 11327; Match(RR_BRACKET);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 11328; Match(OPENROWSET);
				State = 11329; Match(LR_BRACKET);
				State = 11330; Match(BULK);
				State = 11331; _localctx.data_file = Match(STRING);
				State = 11332; Match(COMMA);
				State = 11342;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1598,_ctx) ) {
				case 1:
					{
					State = 11333; bulk_option();
					State = 11338;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1597,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 11334; Match(COMMA);
							State = 11335; bulk_option();
							}
							} 
						}
						State = 11340;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1597,_ctx);
					}
					}
					break;

				case 2:
					{
					State = 11341; id_();
					}
					break;
				}
				State = 11344; Match(RR_BRACKET);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bulk_optionContext : ParserRuleContext {
		public IToken bulk_option_value;
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Bulk_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bulk_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBulk_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBulk_option(this);
		}
	}

	[RuleVersion(0)]
	public Bulk_optionContext bulk_option() {
		Bulk_optionContext _localctx = new Bulk_optionContext(_ctx, State);
		EnterRule(_localctx, 974, RULE_bulk_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11348; id_();
			State = 11349; Match(EQUAL);
			State = 11350;
			_localctx.bulk_option_value = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==DECIMAL || _la==STRING) ) {
				_localctx.bulk_option_value = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_tableContext : ParserRuleContext {
		public SubqueryContext[] subquery() {
			return GetRuleContexts<SubqueryContext>();
		}
		public SubqueryContext subquery(int i) {
			return GetRuleContext<SubqueryContext>(i);
		}
		public ITerminalNode[] UNION() { return GetTokens(TSqlParser.UNION); }
		public ITerminalNode UNION(int i) {
			return GetToken(TSqlParser.UNION, i);
		}
		public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		public Table_value_constructorContext table_value_constructor() {
			return GetRuleContext<Table_value_constructorContext>(0);
		}
		public Derived_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDerived_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDerived_table(this);
		}
	}

	[RuleVersion(0)]
	public Derived_tableContext derived_table() {
		Derived_tableContext _localctx = new Derived_tableContext(_ctx, State);
		EnterRule(_localctx, 976, RULE_derived_table);
		try {
			int _alt;
			State = 11370;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1601,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11352; subquery();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11353; Match(LR_BRACKET);
				State = 11354; subquery();
				State = 11360;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1600,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 11355; Match(UNION);
						State = 11356; Match(ALL);
						State = 11357; subquery();
						}
						} 
					}
					State = 11362;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1600,_ctx);
				}
				State = 11363; Match(RR_BRACKET);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11365; table_value_constructor();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11366; Match(LR_BRACKET);
				State = 11367; table_value_constructor();
				State = 11368; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
	 
		public Function_callContext() { }
		public virtual void CopyFrom(Function_callContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RANKING_WINDOWED_FUNCContext : Function_callContext {
		public Ranking_windowed_functionContext ranking_windowed_function() {
			return GetRuleContext<Ranking_windowed_functionContext>(0);
		}
		public RANKING_WINDOWED_FUNCContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRANKING_WINDOWED_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRANKING_WINDOWED_FUNC(this);
		}
	}
	public partial class AGGREGATE_WINDOWED_FUNCContext : Function_callContext {
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return GetRuleContext<Aggregate_windowed_functionContext>(0);
		}
		public AGGREGATE_WINDOWED_FUNCContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAGGREGATE_WINDOWED_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAGGREGATE_WINDOWED_FUNC(this);
		}
	}
	public partial class ANALYTIC_WINDOWED_FUNCContext : Function_callContext {
		public Analytic_windowed_functionContext analytic_windowed_function() {
			return GetRuleContext<Analytic_windowed_functionContext>(0);
		}
		public ANALYTIC_WINDOWED_FUNCContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterANALYTIC_WINDOWED_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitANALYTIC_WINDOWED_FUNC(this);
		}
	}
	public partial class BUILT_IN_FUNCContext : Function_callContext {
		public Built_in_functionsContext built_in_functions() {
			return GetRuleContext<Built_in_functionsContext>(0);
		}
		public BUILT_IN_FUNCContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBUILT_IN_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBUILT_IN_FUNC(this);
		}
	}
	public partial class SCALAR_FUNCTIONContext : Function_callContext {
		public Scalar_function_nameContext scalar_function_name() {
			return GetRuleContext<Scalar_function_nameContext>(0);
		}
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public SCALAR_FUNCTIONContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSCALAR_FUNCTION(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSCALAR_FUNCTION(this);
		}
	}
	public partial class FREE_TEXTContext : Function_callContext {
		public Freetext_functionContext freetext_function() {
			return GetRuleContext<Freetext_functionContext>(0);
		}
		public FREE_TEXTContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFREE_TEXT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFREE_TEXT(this);
		}
	}
	public partial class PARTITION_FUNCContext : Function_callContext {
		public Partition_functionContext partition_function() {
			return GetRuleContext<Partition_functionContext>(0);
		}
		public PARTITION_FUNCContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPARTITION_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPARTITION_FUNC(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(_ctx, State);
		EnterRule(_localctx, 978, RULE_function_call);
		try {
			State = 11385;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1603,_ctx) ) {
			case 1:
				_localctx = new RANKING_WINDOWED_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 11372; ranking_windowed_function();
				}
				break;

			case 2:
				_localctx = new AGGREGATE_WINDOWED_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 11373; aggregate_windowed_function();
				}
				break;

			case 3:
				_localctx = new ANALYTIC_WINDOWED_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 11374; analytic_windowed_function();
				}
				break;

			case 4:
				_localctx = new BUILT_IN_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 11375; built_in_functions();
				}
				break;

			case 5:
				_localctx = new SCALAR_FUNCTIONContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 11376; scalar_function_name();
				State = 11377; Match(LR_BRACKET);
				State = 11379;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1602,_ctx) ) {
				case 1:
					{
					State = 11378; expression_list_();
					}
					break;
				}
				State = 11381; Match(RR_BRACKET);
				}
				break;

			case 6:
				_localctx = new FREE_TEXTContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 11383; freetext_function();
				}
				break;

			case 7:
				_localctx = new PARTITION_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 11384; partition_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_functionContext : ParserRuleContext {
		public Id_Context database;
		public Id_Context func_name;
		public ITerminalNode DOLLAR_PARTITION() { return GetToken(TSqlParser.DOLLAR_PARTITION, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Partition_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPartition_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPartition_function(this);
		}
	}

	[RuleVersion(0)]
	public Partition_functionContext partition_function() {
		Partition_functionContext _localctx = new Partition_functionContext(_ctx, State);
		EnterRule(_localctx, 980, RULE_partition_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11390;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1604,_ctx) ) {
			case 1:
				{
				State = 11387; _localctx.database = id_();
				State = 11388; Match(DOT);
				}
				break;
			}
			State = 11392; Match(DOLLAR_PARTITION);
			State = 11393; Match(DOT);
			State = 11394; _localctx.func_name = id_();
			State = 11395; Match(LR_BRACKET);
			State = 11396; expression(0);
			State = 11397; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Freetext_functionContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode CONTAINSTABLE() { return GetToken(TSqlParser.CONTAINSTABLE, 0); }
		public ITerminalNode FREETEXTTABLE() { return GetToken(TSqlParser.FREETEXTTABLE, 0); }
		public Full_column_nameContext[] full_column_name() {
			return GetRuleContexts<Full_column_nameContext>();
		}
		public Full_column_nameContext full_column_name(int i) {
			return GetRuleContext<Full_column_nameContext>(i);
		}
		public ITerminalNode LANGUAGE() { return GetToken(TSqlParser.LANGUAGE, 0); }
		public ITerminalNode SEMANTICSIMILARITYTABLE() { return GetToken(TSqlParser.SEMANTICSIMILARITYTABLE, 0); }
		public ITerminalNode SEMANTICKEYPHRASETABLE() { return GetToken(TSqlParser.SEMANTICKEYPHRASETABLE, 0); }
		public ITerminalNode SEMANTICSIMILARITYDETAILSTABLE() { return GetToken(TSqlParser.SEMANTICSIMILARITYDETAILSTABLE, 0); }
		public Freetext_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_freetext_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFreetext_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFreetext_function(this);
		}
	}

	[RuleVersion(0)]
	public Freetext_functionContext freetext_function() {
		Freetext_functionContext _localctx = new Freetext_functionContext(_ctx, State);
		EnterRule(_localctx, 982, RULE_freetext_function);
		int _la;
		try {
			int _alt;
			State = 11467;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1611,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11399;
				_la = _input.La(1);
				if ( !(_la==CONTAINSTABLE || _la==FREETEXTTABLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11400; Match(LR_BRACKET);
				State = 11401; table_name();
				State = 11402; Match(COMMA);
				State = 11416;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1606,_ctx) ) {
				case 1:
					{
					State = 11403; full_column_name();
					}
					break;

				case 2:
					{
					State = 11404; Match(LR_BRACKET);
					State = 11405; full_column_name();
					State = 11410;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1605,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 11406; Match(COMMA);
							State = 11407; full_column_name();
							}
							} 
						}
						State = 11412;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1605,_ctx);
					}
					State = 11413; Match(RR_BRACKET);
					}
					break;

				case 3:
					{
					State = 11415; Match(STAR);
					}
					break;
				}
				State = 11418; Match(COMMA);
				State = 11419; expression(0);
				State = 11423;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1607,_ctx) ) {
				case 1:
					{
					State = 11420; Match(COMMA);
					State = 11421; Match(LANGUAGE);
					State = 11422; expression(0);
					}
					break;
				}
				State = 11427;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1608,_ctx) ) {
				case 1:
					{
					State = 11425; Match(COMMA);
					State = 11426; expression(0);
					}
					break;
				}
				State = 11429; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11431;
				_la = _input.La(1);
				if ( !(_la==SEMANTICKEYPHRASETABLE || _la==SEMANTICSIMILARITYTABLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11432; Match(LR_BRACKET);
				State = 11433; table_name();
				State = 11434; Match(COMMA);
				State = 11448;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1610,_ctx) ) {
				case 1:
					{
					State = 11435; full_column_name();
					}
					break;

				case 2:
					{
					State = 11436; Match(LR_BRACKET);
					State = 11437; full_column_name();
					State = 11442;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1609,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 11438; Match(COMMA);
							State = 11439; full_column_name();
							}
							} 
						}
						State = 11444;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1609,_ctx);
					}
					State = 11445; Match(RR_BRACKET);
					}
					break;

				case 3:
					{
					State = 11447; Match(STAR);
					}
					break;
				}
				State = 11450; Match(COMMA);
				State = 11451; expression(0);
				State = 11452; Match(RR_BRACKET);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11454; Match(SEMANTICSIMILARITYDETAILSTABLE);
				State = 11455; Match(LR_BRACKET);
				State = 11456; table_name();
				State = 11457; Match(COMMA);
				State = 11458; full_column_name();
				State = 11459; Match(COMMA);
				State = 11460; expression(0);
				State = 11461; Match(COMMA);
				State = 11462; full_column_name();
				State = 11463; Match(COMMA);
				State = 11464; expression(0);
				State = 11465; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Freetext_predicateContext : ParserRuleContext {
		public ITerminalNode CONTAINS() { return GetToken(TSqlParser.CONTAINS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Full_column_nameContext[] full_column_name() {
			return GetRuleContexts<Full_column_nameContext>();
		}
		public Full_column_nameContext full_column_name(int i) {
			return GetRuleContext<Full_column_nameContext>(i);
		}
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode FREETEXT() { return GetToken(TSqlParser.FREETEXT, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode LANGUAGE() { return GetToken(TSqlParser.LANGUAGE, 0); }
		public Freetext_predicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_freetext_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFreetext_predicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFreetext_predicate(this);
		}
	}

	[RuleVersion(0)]
	public Freetext_predicateContext freetext_predicate() {
		Freetext_predicateContext _localctx = new Freetext_predicateContext(_ctx, State);
		EnterRule(_localctx, 984, RULE_freetext_predicate);
		try {
			int _alt;
			State = 11525;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1617,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11469; Match(CONTAINS);
				State = 11470; Match(LR_BRACKET);
				State = 11491;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1613,_ctx) ) {
				case 1:
					{
					State = 11471; full_column_name();
					}
					break;

				case 2:
					{
					State = 11472; Match(LR_BRACKET);
					State = 11473; full_column_name();
					State = 11478;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1612,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 11474; Match(COMMA);
							State = 11475; full_column_name();
							}
							} 
						}
						State = 11480;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1612,_ctx);
					}
					State = 11481; Match(RR_BRACKET);
					}
					break;

				case 3:
					{
					State = 11483; Match(STAR);
					}
					break;

				case 4:
					{
					State = 11484; Match(PROPERTY);
					State = 11485; Match(LR_BRACKET);
					State = 11486; full_column_name();
					State = 11487; Match(COMMA);
					State = 11488; expression(0);
					State = 11489; Match(RR_BRACKET);
					}
					break;
				}
				State = 11493; Match(COMMA);
				State = 11494; expression(0);
				State = 11495; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11497; Match(FREETEXT);
				State = 11498; Match(LR_BRACKET);
				State = 11499; table_name();
				State = 11500; Match(COMMA);
				State = 11514;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1615,_ctx) ) {
				case 1:
					{
					State = 11501; full_column_name();
					}
					break;

				case 2:
					{
					State = 11502; Match(LR_BRACKET);
					State = 11503; full_column_name();
					State = 11508;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1614,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 11504; Match(COMMA);
							State = 11505; full_column_name();
							}
							} 
						}
						State = 11510;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1614,_ctx);
					}
					State = 11511; Match(RR_BRACKET);
					}
					break;

				case 3:
					{
					State = 11513; Match(STAR);
					}
					break;
				}
				State = 11516; Match(COMMA);
				State = 11517; expression(0);
				State = 11521;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1616,_ctx) ) {
				case 1:
					{
					State = 11518; Match(COMMA);
					State = 11519; Match(LANGUAGE);
					State = 11520; expression(0);
					}
					break;
				}
				State = 11523; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Built_in_functionsContext : ParserRuleContext {
		public Built_in_functionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_built_in_functions; } }
	 
		public Built_in_functionsContext() { }
		public virtual void CopyFrom(Built_in_functionsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BINARY_CHECKSUMContext : Built_in_functionsContext {
		public ITerminalNode BINARY_CHECKSUM() { return GetToken(TSqlParser.BINARY_CHECKSUM, 0); }
		public BINARY_CHECKSUMContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBINARY_CHECKSUM(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBINARY_CHECKSUM(this);
		}
	}
	public partial class CASTContext : Built_in_functionsContext {
		public ITerminalNode CAST() { return GetToken(TSqlParser.CAST, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public CASTContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCAST(this);
		}
	}
	public partial class TRY_CASTContext : Built_in_functionsContext {
		public ITerminalNode TRY_CAST() { return GetToken(TSqlParser.TRY_CAST, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public TRY_CASTContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTRY_CAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTRY_CAST(this);
		}
	}
	public partial class CONVERTContext : Built_in_functionsContext {
		public Data_typeContext convert_data_type;
		public ExpressionContext convert_expression;
		public ExpressionContext style;
		public ITerminalNode CONVERT() { return GetToken(TSqlParser.CONVERT, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CONVERTContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCONVERT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCONVERT(this);
		}
	}
	public partial class CHECKSUMContext : Built_in_functionsContext {
		public ITerminalNode CHECKSUM() { return GetToken(TSqlParser.CHECKSUM, 0); }
		public CHECKSUMContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCHECKSUM(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCHECKSUM(this);
		}
	}
	public partial class COALESCEContext : Built_in_functionsContext {
		public ITerminalNode COALESCE() { return GetToken(TSqlParser.COALESCE, 0); }
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public COALESCEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCOALESCE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCOALESCE(this);
		}
	}
	public partial class CURRENT_TIMESTAMPContext : Built_in_functionsContext {
		public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(TSqlParser.CURRENT_TIMESTAMP, 0); }
		public CURRENT_TIMESTAMPContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCURRENT_TIMESTAMP(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCURRENT_TIMESTAMP(this);
		}
	}
	public partial class CURRENT_USERContext : Built_in_functionsContext {
		public ITerminalNode CURRENT_USER() { return GetToken(TSqlParser.CURRENT_USER, 0); }
		public CURRENT_USERContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCURRENT_USER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCURRENT_USER(this);
		}
	}
	public partial class DATEADDContext : Built_in_functionsContext {
		public IToken datepart;
		public ExpressionContext number;
		public ExpressionContext date;
		public ITerminalNode DATEADD() { return GetToken(TSqlParser.DATEADD, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DATEADDContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATEADD(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATEADD(this);
		}
	}
	public partial class DATEDIFFContext : Built_in_functionsContext {
		public IToken datepart;
		public ExpressionContext date_first;
		public ExpressionContext date_second;
		public ITerminalNode DATEDIFF() { return GetToken(TSqlParser.DATEDIFF, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DATEDIFFContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATEDIFF(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATEDIFF(this);
		}
	}
	public partial class DATENAMEContext : Built_in_functionsContext {
		public IToken datepart;
		public ExpressionContext date;
		public ITerminalNode DATENAME() { return GetToken(TSqlParser.DATENAME, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DATENAMEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATENAME(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATENAME(this);
		}
	}
	public partial class DATEPARTContext : Built_in_functionsContext {
		public IToken datepart;
		public ExpressionContext date;
		public ITerminalNode DATEPART() { return GetToken(TSqlParser.DATEPART, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DATEPARTContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATEPART(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATEPART(this);
		}
	}
	public partial class GETDATEContext : Built_in_functionsContext {
		public ITerminalNode GETDATE() { return GetToken(TSqlParser.GETDATE, 0); }
		public GETDATEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGETDATE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGETDATE(this);
		}
	}
	public partial class GETUTCDATEContext : Built_in_functionsContext {
		public ITerminalNode GETUTCDATE() { return GetToken(TSqlParser.GETUTCDATE, 0); }
		public GETUTCDATEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGETUTCDATE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGETUTCDATE(this);
		}
	}
	public partial class IDENTITYContext : Built_in_functionsContext {
		public IToken seed;
		public IToken increment;
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public IDENTITYContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIDENTITY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIDENTITY(this);
		}
	}
	public partial class MIN_ACTIVE_ROWVERSIONContext : Built_in_functionsContext {
		public ITerminalNode MIN_ACTIVE_ROWVERSION() { return GetToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		public MIN_ACTIVE_ROWVERSIONContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMIN_ACTIVE_ROWVERSION(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMIN_ACTIVE_ROWVERSION(this);
		}
	}
	public partial class NULLIFContext : Built_in_functionsContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NULLIF() { return GetToken(TSqlParser.NULLIF, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NULLIFContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNULLIF(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNULLIF(this);
		}
	}
	public partial class STUFFContext : Built_in_functionsContext {
		public ExpressionContext str;
		public IToken from;
		public IToken to;
		public ExpressionContext str_with;
		public ITerminalNode STUFF() { return GetToken(TSqlParser.STUFF, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public STUFFContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSTUFF(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSTUFF(this);
		}
	}
	public partial class SESSION_USERContext : Built_in_functionsContext {
		public ITerminalNode SESSION_USER() { return GetToken(TSqlParser.SESSION_USER, 0); }
		public SESSION_USERContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSESSION_USER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSESSION_USER(this);
		}
	}
	public partial class SYSTEM_USERContext : Built_in_functionsContext {
		public ITerminalNode SYSTEM_USER() { return GetToken(TSqlParser.SYSTEM_USER, 0); }
		public SYSTEM_USERContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSYSTEM_USER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSYSTEM_USER(this);
		}
	}
	public partial class USERContext : Built_in_functionsContext {
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public USERContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUSER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUSER(this);
		}
	}
	public partial class ISNULLContext : Built_in_functionsContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode ISNULL() { return GetToken(TSqlParser.ISNULL, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ISNULLContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterISNULL(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitISNULL(this);
		}
	}
	public partial class XML_DATA_TYPE_FUNCContext : Built_in_functionsContext {
		public Xml_data_type_methodsContext xml_data_type_methods() {
			return GetRuleContext<Xml_data_type_methodsContext>(0);
		}
		public XML_DATA_TYPE_FUNCContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXML_DATA_TYPE_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXML_DATA_TYPE_FUNC(this);
		}
	}
	public partial class IIFContext : Built_in_functionsContext {
		public Search_conditionContext cond;
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode IIF() { return GetToken(TSqlParser.IIF, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IIFContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIIF(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIIF(this);
		}
	}
	public partial class STRINGAGGContext : Built_in_functionsContext {
		public ExpressionContext expr;
		public ExpressionContext separator;
		public ITerminalNode STRING_AGG() { return GetToken(TSqlParser.STRING_AGG, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode WITHIN() { return GetToken(TSqlParser.WITHIN, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public STRINGAGGContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSTRINGAGG(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSTRINGAGG(this);
		}
	}

	[RuleVersion(0)]
	public Built_in_functionsContext built_in_functions() {
		Built_in_functionsContext _localctx = new Built_in_functionsContext(_ctx, State);
		EnterRule(_localctx, 986, RULE_built_in_functions);
		try {
			State = 11673;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1622,_ctx) ) {
			case 1:
				_localctx = new BINARY_CHECKSUMContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 11527; Match(BINARY_CHECKSUM);
				State = 11528; Match(LR_BRACKET);
				State = 11529; Match(STAR);
				State = 11530; Match(RR_BRACKET);
				}
				break;

			case 2:
				_localctx = new CASTContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 11531; Match(CAST);
				State = 11532; Match(LR_BRACKET);
				State = 11533; expression(0);
				State = 11534; Match(AS);
				State = 11535; data_type();
				State = 11536; Match(RR_BRACKET);
				}
				break;

			case 3:
				_localctx = new TRY_CASTContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 11538; Match(TRY_CAST);
				State = 11539; Match(LR_BRACKET);
				State = 11540; expression(0);
				State = 11541; Match(AS);
				State = 11542; data_type();
				State = 11543; Match(RR_BRACKET);
				}
				break;

			case 4:
				_localctx = new CONVERTContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 11545; Match(CONVERT);
				State = 11546; Match(LR_BRACKET);
				State = 11547; ((CONVERTContext)_localctx).convert_data_type = data_type();
				State = 11548; Match(COMMA);
				State = 11549; ((CONVERTContext)_localctx).convert_expression = expression(0);
				State = 11552;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1618,_ctx) ) {
				case 1:
					{
					State = 11550; Match(COMMA);
					State = 11551; ((CONVERTContext)_localctx).style = expression(0);
					}
					break;
				}
				State = 11554; Match(RR_BRACKET);
				}
				break;

			case 5:
				_localctx = new CHECKSUMContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 11556; Match(CHECKSUM);
				State = 11557; Match(LR_BRACKET);
				State = 11558; Match(STAR);
				State = 11559; Match(RR_BRACKET);
				}
				break;

			case 6:
				_localctx = new COALESCEContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 11560; Match(COALESCE);
				State = 11561; Match(LR_BRACKET);
				State = 11562; expression_list_();
				State = 11563; Match(RR_BRACKET);
				}
				break;

			case 7:
				_localctx = new CURRENT_TIMESTAMPContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 11565; Match(CURRENT_TIMESTAMP);
				}
				break;

			case 8:
				_localctx = new CURRENT_USERContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 11566; Match(CURRENT_USER);
				}
				break;

			case 9:
				_localctx = new DATEADDContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 11567; Match(DATEADD);
				State = 11568; Match(LR_BRACKET);
				State = 11569; ((DATEADDContext)_localctx).datepart = Match(ID);
				State = 11570; Match(COMMA);
				State = 11571; ((DATEADDContext)_localctx).number = expression(0);
				State = 11572; Match(COMMA);
				State = 11573; ((DATEADDContext)_localctx).date = expression(0);
				State = 11574; Match(RR_BRACKET);
				}
				break;

			case 10:
				_localctx = new DATEDIFFContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 11576; Match(DATEDIFF);
				State = 11577; Match(LR_BRACKET);
				State = 11578; ((DATEDIFFContext)_localctx).datepart = Match(ID);
				State = 11579; Match(COMMA);
				State = 11580; ((DATEDIFFContext)_localctx).date_first = expression(0);
				State = 11581; Match(COMMA);
				State = 11582; ((DATEDIFFContext)_localctx).date_second = expression(0);
				State = 11583; Match(RR_BRACKET);
				}
				break;

			case 11:
				_localctx = new DATENAMEContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 11585; Match(DATENAME);
				State = 11586; Match(LR_BRACKET);
				State = 11587; ((DATENAMEContext)_localctx).datepart = Match(ID);
				State = 11588; Match(COMMA);
				State = 11589; ((DATENAMEContext)_localctx).date = expression(0);
				State = 11590; Match(RR_BRACKET);
				}
				break;

			case 12:
				_localctx = new DATEPARTContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 11592; Match(DATEPART);
				State = 11593; Match(LR_BRACKET);
				State = 11594; ((DATEPARTContext)_localctx).datepart = Match(ID);
				State = 11595; Match(COMMA);
				State = 11596; ((DATEPARTContext)_localctx).date = expression(0);
				State = 11597; Match(RR_BRACKET);
				}
				break;

			case 13:
				_localctx = new GETDATEContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 11599; Match(GETDATE);
				State = 11600; Match(LR_BRACKET);
				State = 11601; Match(RR_BRACKET);
				}
				break;

			case 14:
				_localctx = new GETUTCDATEContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 11602; Match(GETUTCDATE);
				State = 11603; Match(LR_BRACKET);
				State = 11604; Match(RR_BRACKET);
				}
				break;

			case 15:
				_localctx = new IDENTITYContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 11605; Match(IDENTITY);
				State = 11606; Match(LR_BRACKET);
				State = 11607; data_type();
				State = 11610;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1619,_ctx) ) {
				case 1:
					{
					State = 11608; Match(COMMA);
					State = 11609; ((IDENTITYContext)_localctx).seed = Match(DECIMAL);
					}
					break;
				}
				State = 11614;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1620,_ctx) ) {
				case 1:
					{
					State = 11612; Match(COMMA);
					State = 11613; ((IDENTITYContext)_localctx).increment = Match(DECIMAL);
					}
					break;
				}
				State = 11616; Match(RR_BRACKET);
				}
				break;

			case 16:
				_localctx = new MIN_ACTIVE_ROWVERSIONContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 11618; Match(MIN_ACTIVE_ROWVERSION);
				State = 11619; Match(LR_BRACKET);
				State = 11620; Match(RR_BRACKET);
				}
				break;

			case 17:
				_localctx = new NULLIFContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 11621; Match(NULLIF);
				State = 11622; Match(LR_BRACKET);
				State = 11623; ((NULLIFContext)_localctx).left = expression(0);
				State = 11624; Match(COMMA);
				State = 11625; ((NULLIFContext)_localctx).right = expression(0);
				State = 11626; Match(RR_BRACKET);
				}
				break;

			case 18:
				_localctx = new STUFFContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 11628; Match(STUFF);
				State = 11629; Match(LR_BRACKET);
				State = 11630; ((STUFFContext)_localctx).str = expression(0);
				State = 11631; Match(COMMA);
				State = 11632; ((STUFFContext)_localctx).from = Match(DECIMAL);
				State = 11633; Match(COMMA);
				State = 11634; ((STUFFContext)_localctx).to = Match(DECIMAL);
				State = 11635; Match(COMMA);
				State = 11636; ((STUFFContext)_localctx).str_with = expression(0);
				State = 11637; Match(RR_BRACKET);
				}
				break;

			case 19:
				_localctx = new SESSION_USERContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 11639; Match(SESSION_USER);
				}
				break;

			case 20:
				_localctx = new SYSTEM_USERContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 11640; Match(SYSTEM_USER);
				}
				break;

			case 21:
				_localctx = new USERContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 11641; Match(USER);
				}
				break;

			case 22:
				_localctx = new ISNULLContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 11642; Match(ISNULL);
				State = 11643; Match(LR_BRACKET);
				State = 11644; ((ISNULLContext)_localctx).left = expression(0);
				State = 11645; Match(COMMA);
				State = 11646; ((ISNULLContext)_localctx).right = expression(0);
				State = 11647; Match(RR_BRACKET);
				}
				break;

			case 23:
				_localctx = new XML_DATA_TYPE_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 11649; xml_data_type_methods();
				}
				break;

			case 24:
				_localctx = new IIFContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 11650; Match(IIF);
				State = 11651; Match(LR_BRACKET);
				State = 11652; ((IIFContext)_localctx).cond = search_condition(0);
				State = 11653; Match(COMMA);
				State = 11654; ((IIFContext)_localctx).left = expression(0);
				State = 11655; Match(COMMA);
				State = 11656; ((IIFContext)_localctx).right = expression(0);
				State = 11657; Match(RR_BRACKET);
				}
				break;

			case 25:
				_localctx = new STRINGAGGContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 11659; Match(STRING_AGG);
				State = 11660; Match(LR_BRACKET);
				State = 11661; ((STRINGAGGContext)_localctx).expr = expression(0);
				State = 11662; Match(COMMA);
				State = 11663; ((STRINGAGGContext)_localctx).separator = expression(0);
				State = 11664; Match(RR_BRACKET);
				State = 11671;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1621,_ctx) ) {
				case 1:
					{
					State = 11665; Match(WITHIN);
					State = 11666; Match(GROUP);
					State = 11667; Match(LR_BRACKET);
					State = 11668; order_by_clause();
					State = 11669; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_data_type_methodsContext : ParserRuleContext {
		public Value_methodContext value_method() {
			return GetRuleContext<Value_methodContext>(0);
		}
		public Query_methodContext query_method() {
			return GetRuleContext<Query_methodContext>(0);
		}
		public Exist_methodContext exist_method() {
			return GetRuleContext<Exist_methodContext>(0);
		}
		public Modify_methodContext modify_method() {
			return GetRuleContext<Modify_methodContext>(0);
		}
		public Xml_data_type_methodsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_data_type_methods; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_data_type_methods(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_data_type_methods(this);
		}
	}

	[RuleVersion(0)]
	public Xml_data_type_methodsContext xml_data_type_methods() {
		Xml_data_type_methodsContext _localctx = new Xml_data_type_methodsContext(_ctx, State);
		EnterRule(_localctx, 988, RULE_xml_data_type_methods);
		try {
			State = 11679;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1623,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11675; value_method();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11676; query_method();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11677; exist_method();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11678; modify_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dateparts_9Context : ParserRuleContext {
		public ITerminalNode YEAR() { return GetToken(TSqlParser.YEAR, 0); }
		public ITerminalNode YEAR_ABBR() { return GetToken(TSqlParser.YEAR_ABBR, 0); }
		public ITerminalNode QUARTER() { return GetToken(TSqlParser.QUARTER, 0); }
		public ITerminalNode QUARTER_ABBR() { return GetToken(TSqlParser.QUARTER_ABBR, 0); }
		public ITerminalNode MONTH() { return GetToken(TSqlParser.MONTH, 0); }
		public ITerminalNode MONTH_ABBR() { return GetToken(TSqlParser.MONTH_ABBR, 0); }
		public ITerminalNode DAY() { return GetToken(TSqlParser.DAY, 0); }
		public ITerminalNode DAY_ABBR() { return GetToken(TSqlParser.DAY_ABBR, 0); }
		public ITerminalNode WEEK() { return GetToken(TSqlParser.WEEK, 0); }
		public ITerminalNode WEEK_ABBR() { return GetToken(TSqlParser.WEEK_ABBR, 0); }
		public ITerminalNode HOUR() { return GetToken(TSqlParser.HOUR, 0); }
		public ITerminalNode HOUR_ABBR() { return GetToken(TSqlParser.HOUR_ABBR, 0); }
		public ITerminalNode MINUTE() { return GetToken(TSqlParser.MINUTE, 0); }
		public ITerminalNode MINUTE_ABBR() { return GetToken(TSqlParser.MINUTE_ABBR, 0); }
		public ITerminalNode SECOND() { return GetToken(TSqlParser.SECOND, 0); }
		public ITerminalNode SECOND_ABBR() { return GetToken(TSqlParser.SECOND_ABBR, 0); }
		public ITerminalNode MILLISECOND() { return GetToken(TSqlParser.MILLISECOND, 0); }
		public ITerminalNode MILLISECOND_ABBR() { return GetToken(TSqlParser.MILLISECOND_ABBR, 0); }
		public Dateparts_9Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateparts_9; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDateparts_9(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDateparts_9(this);
		}
	}

	[RuleVersion(0)]
	public Dateparts_9Context dateparts_9() {
		Dateparts_9Context _localctx = new Dateparts_9Context(_ctx, State);
		EnterRule(_localctx, 990, RULE_dateparts_9);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11681;
			_la = _input.La(1);
			if ( !(((((_la - 1138)) & ~0x3f) == 0 && ((1L << (_la - 1138)) & ((1L << (YEAR - 1138)) | (1L << (YEAR_ABBR - 1138)) | (1L << (QUARTER - 1138)) | (1L << (QUARTER_ABBR - 1138)) | (1L << (MONTH - 1138)) | (1L << (MONTH_ABBR - 1138)) | (1L << (DAY - 1138)) | (1L << (DAY_ABBR - 1138)) | (1L << (WEEK - 1138)) | (1L << (WEEK_ABBR - 1138)) | (1L << (HOUR - 1138)) | (1L << (HOUR_ABBR - 1138)) | (1L << (MINUTE - 1138)) | (1L << (MINUTE_ABBR - 1138)) | (1L << (SECOND - 1138)) | (1L << (SECOND_ABBR - 1138)) | (1L << (MILLISECOND - 1138)) | (1L << (MILLISECOND_ABBR - 1138)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dateparts_12Context : ParserRuleContext {
		public Dateparts_9Context dateparts_9() {
			return GetRuleContext<Dateparts_9Context>(0);
		}
		public ITerminalNode DAYOFYEAR() { return GetToken(TSqlParser.DAYOFYEAR, 0); }
		public ITerminalNode DAYOFYEAR_ABBR() { return GetToken(TSqlParser.DAYOFYEAR_ABBR, 0); }
		public ITerminalNode MICROSECOND() { return GetToken(TSqlParser.MICROSECOND, 0); }
		public ITerminalNode MICROSECOND_ABBR() { return GetToken(TSqlParser.MICROSECOND_ABBR, 0); }
		public ITerminalNode NANOSECOND() { return GetToken(TSqlParser.NANOSECOND, 0); }
		public ITerminalNode NANOSECOND_ABBR() { return GetToken(TSqlParser.NANOSECOND_ABBR, 0); }
		public Dateparts_12Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateparts_12; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDateparts_12(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDateparts_12(this);
		}
	}

	[RuleVersion(0)]
	public Dateparts_12Context dateparts_12() {
		Dateparts_12Context _localctx = new Dateparts_12Context(_ctx, State);
		EnterRule(_localctx, 992, RULE_dateparts_12);
		try {
			State = 11690;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1624,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11683; dateparts_9();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11684; Match(DAYOFYEAR);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11685; Match(DAYOFYEAR_ABBR);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11686; Match(MICROSECOND);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11687; Match(MICROSECOND_ABBR);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 11688; Match(NANOSECOND);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 11689; Match(NANOSECOND_ABBR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dateparts_15Context : ParserRuleContext {
		public Dateparts_12Context dateparts_12() {
			return GetRuleContext<Dateparts_12Context>(0);
		}
		public ITerminalNode WEEKDAY() { return GetToken(TSqlParser.WEEKDAY, 0); }
		public ITerminalNode WEEKDAY_ABBR() { return GetToken(TSqlParser.WEEKDAY_ABBR, 0); }
		public ITerminalNode TZOFFSET() { return GetToken(TSqlParser.TZOFFSET, 0); }
		public ITerminalNode TZOFFSET_ABBR() { return GetToken(TSqlParser.TZOFFSET_ABBR, 0); }
		public ITerminalNode ISO_WEEK() { return GetToken(TSqlParser.ISO_WEEK, 0); }
		public ITerminalNode ISO_WEEK_ABBR() { return GetToken(TSqlParser.ISO_WEEK_ABBR, 0); }
		public Dateparts_15Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateparts_15; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDateparts_15(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDateparts_15(this);
		}
	}

	[RuleVersion(0)]
	public Dateparts_15Context dateparts_15() {
		Dateparts_15Context _localctx = new Dateparts_15Context(_ctx, State);
		EnterRule(_localctx, 994, RULE_dateparts_15);
		try {
			State = 11699;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1625,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11692; dateparts_12();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11693; Match(WEEKDAY);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11694; Match(WEEKDAY_ABBR);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11695; Match(TZOFFSET);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11696; Match(TZOFFSET_ABBR);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 11697; Match(ISO_WEEK);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 11698; Match(ISO_WEEK_ABBR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dateparts_datetruncContext : ParserRuleContext {
		public Dateparts_9Context dateparts_9() {
			return GetRuleContext<Dateparts_9Context>(0);
		}
		public ITerminalNode DAYOFYEAR() { return GetToken(TSqlParser.DAYOFYEAR, 0); }
		public ITerminalNode DAYOFYEAR_ABBR() { return GetToken(TSqlParser.DAYOFYEAR_ABBR, 0); }
		public ITerminalNode MICROSECOND() { return GetToken(TSqlParser.MICROSECOND, 0); }
		public ITerminalNode MICROSECOND_ABBR() { return GetToken(TSqlParser.MICROSECOND_ABBR, 0); }
		public ITerminalNode ISO_WEEK() { return GetToken(TSqlParser.ISO_WEEK, 0); }
		public ITerminalNode ISO_WEEK_ABBR() { return GetToken(TSqlParser.ISO_WEEK_ABBR, 0); }
		public Dateparts_datetruncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateparts_datetrunc; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDateparts_datetrunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDateparts_datetrunc(this);
		}
	}

	[RuleVersion(0)]
	public Dateparts_datetruncContext dateparts_datetrunc() {
		Dateparts_datetruncContext _localctx = new Dateparts_datetruncContext(_ctx, State);
		EnterRule(_localctx, 996, RULE_dateparts_datetrunc);
		try {
			State = 11708;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1626,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11701; dateparts_9();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11702; Match(DAYOFYEAR);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11703; Match(DAYOFYEAR_ABBR);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11704; Match(MICROSECOND);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11705; Match(MICROSECOND_ABBR);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 11706; Match(ISO_WEEK);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 11707; Match(ISO_WEEK_ABBR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_methodContext : ParserRuleContext {
		public IToken loc_id;
		public Id_Context value_id;
		public IToken eventdata;
		public Query_methodContext query;
		public Value_callContext call;
		public Value_callContext value_call() {
			return GetRuleContext<Value_callContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode EVENTDATA() { return GetToken(TSqlParser.EVENTDATA, 0); }
		public Query_methodContext query_method() {
			return GetRuleContext<Query_methodContext>(0);
		}
		public Value_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterValue_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitValue_method(this);
		}
	}

	[RuleVersion(0)]
	public Value_methodContext value_method() {
		Value_methodContext _localctx = new Value_methodContext(_ctx, State);
		EnterRule(_localctx, 998, RULE_value_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11718;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1627,_ctx) ) {
			case 1:
				{
				State = 11710; _localctx.loc_id = Match(LOCAL_ID);
				}
				break;

			case 2:
				{
				State = 11711; _localctx.value_id = id_();
				}
				break;

			case 3:
				{
				State = 11712; _localctx.eventdata = Match(EVENTDATA);
				}
				break;

			case 4:
				{
				State = 11713; _localctx.query = query_method();
				}
				break;

			case 5:
				{
				State = 11714; Match(LR_BRACKET);
				State = 11715; subquery();
				State = 11716; Match(RR_BRACKET);
				}
				break;
			}
			State = 11720; Match(DOT);
			State = 11721; _localctx.call = value_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_callContext : ParserRuleContext {
		public IToken xquery;
		public IToken sqltype;
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Value_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterValue_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitValue_call(this);
		}
	}

	[RuleVersion(0)]
	public Value_callContext value_call() {
		Value_callContext _localctx = new Value_callContext(_ctx, State);
		EnterRule(_localctx, 1000, RULE_value_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11723; Match(VALUE);
			State = 11724; Match(LR_BRACKET);
			State = 11725; _localctx.xquery = Match(STRING);
			State = 11726; Match(COMMA);
			State = 11727; _localctx.sqltype = Match(STRING);
			State = 11728; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_methodContext : ParserRuleContext {
		public IToken loc_id;
		public Id_Context value_id;
		public Full_table_nameContext table;
		public Query_callContext call;
		public Query_callContext query_call() {
			return GetRuleContext<Query_callContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public Query_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_method(this);
		}
	}

	[RuleVersion(0)]
	public Query_methodContext query_method() {
		Query_methodContext _localctx = new Query_methodContext(_ctx, State);
		EnterRule(_localctx, 1002, RULE_query_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11737;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1628,_ctx) ) {
			case 1:
				{
				State = 11730; _localctx.loc_id = Match(LOCAL_ID);
				}
				break;

			case 2:
				{
				State = 11731; _localctx.value_id = id_();
				}
				break;

			case 3:
				{
				State = 11732; _localctx.table = full_table_name();
				}
				break;

			case 4:
				{
				State = 11733; Match(LR_BRACKET);
				State = 11734; subquery();
				State = 11735; Match(RR_BRACKET);
				}
				break;
			}
			State = 11739; Match(DOT);
			State = 11740; _localctx.call = query_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_callContext : ParserRuleContext {
		public IToken xquery;
		public ITerminalNode QUERY() { return GetToken(TSqlParser.QUERY, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Query_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_call(this);
		}
	}

	[RuleVersion(0)]
	public Query_callContext query_call() {
		Query_callContext _localctx = new Query_callContext(_ctx, State);
		EnterRule(_localctx, 1004, RULE_query_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11742; Match(QUERY);
			State = 11743; Match(LR_BRACKET);
			State = 11744; _localctx.xquery = Match(STRING);
			State = 11745; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exist_methodContext : ParserRuleContext {
		public IToken loc_id;
		public Id_Context value_id;
		public Exist_callContext call;
		public Exist_callContext exist_call() {
			return GetRuleContext<Exist_callContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Exist_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exist_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExist_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExist_method(this);
		}
	}

	[RuleVersion(0)]
	public Exist_methodContext exist_method() {
		Exist_methodContext _localctx = new Exist_methodContext(_ctx, State);
		EnterRule(_localctx, 1006, RULE_exist_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11753;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1629,_ctx) ) {
			case 1:
				{
				State = 11747; _localctx.loc_id = Match(LOCAL_ID);
				}
				break;

			case 2:
				{
				State = 11748; _localctx.value_id = id_();
				}
				break;

			case 3:
				{
				State = 11749; Match(LR_BRACKET);
				State = 11750; subquery();
				State = 11751; Match(RR_BRACKET);
				}
				break;
			}
			State = 11755; Match(DOT);
			State = 11756; _localctx.call = exist_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exist_callContext : ParserRuleContext {
		public IToken xquery;
		public ITerminalNode EXIST() { return GetToken(TSqlParser.EXIST, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Exist_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exist_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExist_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExist_call(this);
		}
	}

	[RuleVersion(0)]
	public Exist_callContext exist_call() {
		Exist_callContext _localctx = new Exist_callContext(_ctx, State);
		EnterRule(_localctx, 1008, RULE_exist_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11758; Match(EXIST);
			State = 11759; Match(LR_BRACKET);
			State = 11760; _localctx.xquery = Match(STRING);
			State = 11761; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Modify_methodContext : ParserRuleContext {
		public IToken loc_id;
		public Id_Context value_id;
		public Modify_callContext call;
		public Modify_callContext modify_call() {
			return GetRuleContext<Modify_callContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Modify_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modify_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterModify_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitModify_method(this);
		}
	}

	[RuleVersion(0)]
	public Modify_methodContext modify_method() {
		Modify_methodContext _localctx = new Modify_methodContext(_ctx, State);
		EnterRule(_localctx, 1010, RULE_modify_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11769;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1630,_ctx) ) {
			case 1:
				{
				State = 11763; _localctx.loc_id = Match(LOCAL_ID);
				}
				break;

			case 2:
				{
				State = 11764; _localctx.value_id = id_();
				}
				break;

			case 3:
				{
				State = 11765; Match(LR_BRACKET);
				State = 11766; subquery();
				State = 11767; Match(RR_BRACKET);
				}
				break;
			}
			State = 11771; Match(DOT);
			State = 11772; _localctx.call = modify_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Modify_callContext : ParserRuleContext {
		public IToken xml_dml;
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Modify_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modify_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterModify_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitModify_call(this);
		}
	}

	[RuleVersion(0)]
	public Modify_callContext modify_call() {
		Modify_callContext _localctx = new Modify_callContext(_ctx, State);
		EnterRule(_localctx, 1012, RULE_modify_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11774; Match(MODIFY);
			State = 11775; Match(LR_BRACKET);
			State = 11776; _localctx.xml_dml = Match(STRING);
			State = 11777; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nodes_methodContext : ParserRuleContext {
		public IToken loc_id;
		public Id_Context value_id;
		public IToken xquery;
		public ITerminalNode NODES() { return GetToken(TSqlParser.NODES, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Nodes_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodes_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNodes_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNodes_method(this);
		}
	}

	[RuleVersion(0)]
	public Nodes_methodContext nodes_method() {
		Nodes_methodContext _localctx = new Nodes_methodContext(_ctx, State);
		EnterRule(_localctx, 1014, RULE_nodes_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11785;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1631,_ctx) ) {
			case 1:
				{
				State = 11779; _localctx.loc_id = Match(LOCAL_ID);
				}
				break;

			case 2:
				{
				State = 11780; _localctx.value_id = id_();
				}
				break;

			case 3:
				{
				State = 11781; Match(LR_BRACKET);
				State = 11782; subquery();
				State = 11783; Match(RR_BRACKET);
				}
				break;
			}
			State = 11787; Match(DOT);
			State = 11788; Match(NODES);
			State = 11789; Match(LR_BRACKET);
			State = 11790; _localctx.xquery = Match(STRING);
			State = 11791; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_sectionContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(TSqlParser.WHEN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(TSqlParser.THEN, 0); }
		public Switch_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSwitch_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSwitch_section(this);
		}
	}

	[RuleVersion(0)]
	public Switch_sectionContext switch_section() {
		Switch_sectionContext _localctx = new Switch_sectionContext(_ctx, State);
		EnterRule(_localctx, 1016, RULE_switch_section);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11793; Match(WHEN);
			State = 11794; expression(0);
			State = 11795; Match(THEN);
			State = 11796; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_search_condition_sectionContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(TSqlParser.WHEN, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(TSqlParser.THEN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Switch_search_condition_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_search_condition_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSwitch_search_condition_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSwitch_search_condition_section(this);
		}
	}

	[RuleVersion(0)]
	public Switch_search_condition_sectionContext switch_search_condition_section() {
		Switch_search_condition_sectionContext _localctx = new Switch_search_condition_sectionContext(_ctx, State);
		EnterRule(_localctx, 1018, RULE_switch_search_condition_section);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11798; Match(WHEN);
			State = 11799; search_condition(0);
			State = 11800; Match(THEN);
			State = 11801; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_column_aliasContext : ParserRuleContext {
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public As_column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_column_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAs_column_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAs_column_alias(this);
		}
	}

	[RuleVersion(0)]
	public As_column_aliasContext as_column_alias() {
		As_column_aliasContext _localctx = new As_column_aliasContext(_ctx, State);
		EnterRule(_localctx, 1020, RULE_as_column_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11804;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1632,_ctx) ) {
			case 1:
				{
				State = 11803; Match(AS);
				}
				break;
			}
			State = 11806; column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_table_aliasContext : ParserRuleContext {
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public As_table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_table_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAs_table_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAs_table_alias(this);
		}
	}

	[RuleVersion(0)]
	public As_table_aliasContext as_table_alias() {
		As_table_aliasContext _localctx = new As_table_aliasContext(_ctx, State);
		EnterRule(_localctx, 1022, RULE_as_table_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11809;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1633,_ctx) ) {
			case 1:
				{
				State = 11808; Match(AS);
				}
				break;
			}
			State = 11811; table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_alias(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, State);
		EnterRule(_localctx, 1024, RULE_table_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11813; id_();
			State = 11815;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1634,_ctx) ) {
			case 1:
				{
				State = 11814; with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_table_hintsContext : ParserRuleContext {
		public Table_hintContext _table_hint;
		public IList<Table_hintContext> _hint = new List<Table_hintContext>();
		public Table_hintContext[] table_hint() {
			return GetRuleContexts<Table_hintContext>();
		}
		public Table_hintContext table_hint(int i) {
			return GetRuleContext<Table_hintContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public With_table_hintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_table_hints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWith_table_hints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWith_table_hints(this);
		}
	}

	[RuleVersion(0)]
	public With_table_hintsContext with_table_hints() {
		With_table_hintsContext _localctx = new With_table_hintsContext(_ctx, State);
		EnterRule(_localctx, 1026, RULE_with_table_hints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11818;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1635,_ctx) ) {
			case 1:
				{
				State = 11817; Match(WITH);
				}
				break;
			}
			State = 11820; Match(LR_BRACKET);
			State = 11821; _localctx._table_hint = table_hint();
			_localctx._hint.Add(_localctx._table_hint);
			State = 11828;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1637,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11823;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1636,_ctx) ) {
					case 1:
						{
						State = 11822; Match(COMMA);
						}
						break;
					}
					State = 11825; _localctx._table_hint = table_hint();
					_localctx._hint.Add(_localctx._table_hint);
					}
					} 
				}
				State = 11830;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1637,_ctx);
			}
			State = 11831; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Deprecated_table_hintContext : ParserRuleContext {
		public Table_hintContext table_hint() {
			return GetRuleContext<Table_hintContext>(0);
		}
		public Deprecated_table_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deprecated_table_hint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeprecated_table_hint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeprecated_table_hint(this);
		}
	}

	[RuleVersion(0)]
	public Deprecated_table_hintContext deprecated_table_hint() {
		Deprecated_table_hintContext _localctx = new Deprecated_table_hintContext(_ctx, State);
		EnterRule(_localctx, 1028, RULE_deprecated_table_hint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11833; Match(LR_BRACKET);
			State = 11834; table_hint();
			State = 11835; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_with_table_hintsContext : ParserRuleContext {
		public Table_hintContext _table_hint;
		public IList<Table_hintContext> _hint = new List<Table_hintContext>();
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Table_hintContext[] table_hint() {
			return GetRuleContexts<Table_hintContext>();
		}
		public Table_hintContext table_hint(int i) {
			return GetRuleContext<Table_hintContext>(i);
		}
		public Insert_with_table_hintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_with_table_hints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_with_table_hints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_with_table_hints(this);
		}
	}

	[RuleVersion(0)]
	public Insert_with_table_hintsContext insert_with_table_hints() {
		Insert_with_table_hintsContext _localctx = new Insert_with_table_hintsContext(_ctx, State);
		EnterRule(_localctx, 1030, RULE_insert_with_table_hints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11837; Match(WITH);
			State = 11838; Match(LR_BRACKET);
			State = 11839; _localctx._table_hint = table_hint();
			_localctx._hint.Add(_localctx._table_hint);
			State = 11846;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1639,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11841;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1638,_ctx) ) {
					case 1:
						{
						State = 11840; Match(COMMA);
						}
						break;
					}
					State = 11843; _localctx._table_hint = table_hint();
					_localctx._hint.Add(_localctx._table_hint);
					}
					} 
				}
				State = 11848;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1639,_ctx);
			}
			State = 11849; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_hintContext : ParserRuleContext {
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Index_valueContext[] index_value() {
			return GetRuleContexts<Index_valueContext>();
		}
		public Index_valueContext index_value(int i) {
			return GetRuleContext<Index_valueContext>(i);
		}
		public ITerminalNode FORCESEEK() { return GetToken(TSqlParser.FORCESEEK, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(TSqlParser.SERIALIZABLE, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(TSqlParser.SNAPSHOT, 0); }
		public ITerminalNode SPATIAL_WINDOW_MAX_CELLS() { return GetToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode HOLDLOCK() { return GetToken(TSqlParser.HOLDLOCK, 0); }
		public ITerminalNode[] ID() { return GetTokens(TSqlParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(TSqlParser.ID, i);
		}
		public ITerminalNode NOEXPAND() { return GetToken(TSqlParser.NOEXPAND, 0); }
		public Table_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_hint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_hint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_hint(this);
		}
	}

	[RuleVersion(0)]
	public Table_hintContext table_hint() {
		Table_hintContext _localctx = new Table_hintContext(_ctx, State);
		EnterRule(_localctx, 1032, RULE_table_hint);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11852;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1640,_ctx) ) {
			case 1:
				{
				State = 11851; Match(NOEXPAND);
				}
				break;
			}
			State = 11903;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1646,_ctx) ) {
			case 1:
				{
				State = 11854; Match(INDEX);
				State = 11874;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1643,_ctx) ) {
				case 1:
					{
					State = 11855; Match(LR_BRACKET);
					State = 11856; index_value();
					State = 11861;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1641,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 11857; Match(COMMA);
							State = 11858; index_value();
							}
							} 
						}
						State = 11863;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1641,_ctx);
					}
					State = 11864; Match(RR_BRACKET);
					}
					break;

				case 2:
					{
					State = 11866; index_value();
					State = 11871;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1642,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 11867; Match(COMMA);
							State = 11868; index_value();
							}
							} 
						}
						State = 11873;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1642,_ctx);
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 11876; Match(INDEX);
				State = 11877; Match(EQUAL);
				State = 11878; index_value();
				}
				break;

			case 3:
				{
				State = 11879; Match(FORCESEEK);
				State = 11894;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1645,_ctx) ) {
				case 1:
					{
					State = 11880; Match(LR_BRACKET);
					State = 11881; index_value();
					State = 11882; Match(LR_BRACKET);
					State = 11883; Match(ID);
					State = 11888;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1644,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 11884; Match(COMMA);
							State = 11885; Match(ID);
							}
							} 
						}
						State = 11890;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1644,_ctx);
					}
					State = 11891; Match(RR_BRACKET);
					State = 11892; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;

			case 4:
				{
				State = 11896; Match(SERIALIZABLE);
				}
				break;

			case 5:
				{
				State = 11897; Match(SNAPSHOT);
				}
				break;

			case 6:
				{
				State = 11898; Match(SPATIAL_WINDOW_MAX_CELLS);
				State = 11899; Match(EQUAL);
				State = 11900; Match(DECIMAL);
				}
				break;

			case 7:
				{
				State = 11901; Match(HOLDLOCK);
				}
				break;

			case 8:
				{
				State = 11902; Match(ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_valueContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Index_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIndex_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIndex_value(this);
		}
	}

	[RuleVersion(0)]
	public Index_valueContext index_value() {
		Index_valueContext _localctx = new Index_valueContext(_ctx, State);
		EnterRule(_localctx, 1034, RULE_index_value);
		try {
			State = 11907;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1647,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11905; id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11906; Match(DECIMAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_alias_listContext : ParserRuleContext {
		public Column_aliasContext _column_alias;
		public IList<Column_aliasContext> _alias = new List<Column_aliasContext>();
		public Column_aliasContext[] column_alias() {
			return GetRuleContexts<Column_aliasContext>();
		}
		public Column_aliasContext column_alias(int i) {
			return GetRuleContext<Column_aliasContext>(i);
		}
		public Column_alias_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_alias_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_alias_list(this);
		}
	}

	[RuleVersion(0)]
	public Column_alias_listContext column_alias_list() {
		Column_alias_listContext _localctx = new Column_alias_listContext(_ctx, State);
		EnterRule(_localctx, 1036, RULE_column_alias_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11909; Match(LR_BRACKET);
			State = 11910; _localctx._column_alias = column_alias();
			_localctx._alias.Add(_localctx._column_alias);
			State = 11915;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1648,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11911; Match(COMMA);
					State = 11912; _localctx._column_alias = column_alias();
					_localctx._alias.Add(_localctx._column_alias);
					}
					} 
				}
				State = 11917;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1648,_ctx);
			}
			State = 11918; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_aliasContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_alias(this);
		}
	}

	[RuleVersion(0)]
	public Column_aliasContext column_alias() {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, State);
		EnterRule(_localctx, 1038, RULE_column_alias);
		try {
			State = 11922;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1649,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11920; id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11921; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_value_constructorContext : ParserRuleContext {
		public Expression_list_Context _expression_list_;
		public IList<Expression_list_Context> _exps = new List<Expression_list_Context>();
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Expression_list_Context[] expression_list_() {
			return GetRuleContexts<Expression_list_Context>();
		}
		public Expression_list_Context expression_list_(int i) {
			return GetRuleContext<Expression_list_Context>(i);
		}
		public Table_value_constructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_value_constructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_value_constructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_value_constructor(this);
		}
	}

	[RuleVersion(0)]
	public Table_value_constructorContext table_value_constructor() {
		Table_value_constructorContext _localctx = new Table_value_constructorContext(_ctx, State);
		EnterRule(_localctx, 1040, RULE_table_value_constructor);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11924; Match(VALUES);
			State = 11925; Match(LR_BRACKET);
			State = 11926; _localctx._expression_list_ = expression_list_();
			_localctx._exps.Add(_localctx._expression_list_);
			State = 11927; Match(RR_BRACKET);
			State = 11935;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1650,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11928; Match(COMMA);
					State = 11929; Match(LR_BRACKET);
					State = 11930; _localctx._expression_list_ = expression_list_();
					_localctx._exps.Add(_localctx._expression_list_);
					State = 11931; Match(RR_BRACKET);
					}
					} 
				}
				State = 11937;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1650,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_list_Context : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _exp = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Expression_list_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list_; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExpression_list_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExpression_list_(this);
		}
	}

	[RuleVersion(0)]
	public Expression_list_Context expression_list_() {
		Expression_list_Context _localctx = new Expression_list_Context(_ctx, State);
		EnterRule(_localctx, 1042, RULE_expression_list_);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11938; _localctx._expression = expression(0);
			_localctx._exp.Add(_localctx._expression);
			State = 11943;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1651,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11939; Match(COMMA);
					State = 11940; _localctx._expression = expression(0);
					_localctx._exp.Add(_localctx._expression);
					}
					} 
				}
				State = 11945;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1651,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ranking_windowed_functionContext : ParserRuleContext {
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ITerminalNode RANK() { return GetToken(TSqlParser.RANK, 0); }
		public ITerminalNode DENSE_RANK() { return GetToken(TSqlParser.DENSE_RANK, 0); }
		public ITerminalNode ROW_NUMBER() { return GetToken(TSqlParser.ROW_NUMBER, 0); }
		public ITerminalNode NTILE() { return GetToken(TSqlParser.NTILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Ranking_windowed_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ranking_windowed_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRanking_windowed_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRanking_windowed_function(this);
		}
	}

	[RuleVersion(0)]
	public Ranking_windowed_functionContext ranking_windowed_function() {
		Ranking_windowed_functionContext _localctx = new Ranking_windowed_functionContext(_ctx, State);
		EnterRule(_localctx, 1044, RULE_ranking_windowed_function);
		int _la;
		try {
			State = 11956;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1652,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11946;
				_la = _input.La(1);
				if ( !(_la==DENSE_RANK || _la==RANK || _la==ROW_NUMBER) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11947; Match(LR_BRACKET);
				State = 11948; Match(RR_BRACKET);
				State = 11949; over_clause();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11950; Match(NTILE);
				State = 11951; Match(LR_BRACKET);
				State = 11952; expression(0);
				State = 11953; Match(RR_BRACKET);
				State = 11954; over_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_windowed_functionContext : ParserRuleContext {
		public IToken agg_func;
		public IToken cnt;
		public All_distinct_expressionContext all_distinct_expression() {
			return GetRuleContext<All_distinct_expressionContext>(0);
		}
		public ITerminalNode AVG() { return GetToken(TSqlParser.AVG, 0); }
		public ITerminalNode MAX() { return GetToken(TSqlParser.MAX, 0); }
		public ITerminalNode MIN() { return GetToken(TSqlParser.MIN, 0); }
		public ITerminalNode SUM() { return GetToken(TSqlParser.SUM, 0); }
		public ITerminalNode STDEV() { return GetToken(TSqlParser.STDEV, 0); }
		public ITerminalNode STDEVP() { return GetToken(TSqlParser.STDEVP, 0); }
		public ITerminalNode VAR() { return GetToken(TSqlParser.VAR, 0); }
		public ITerminalNode VARP() { return GetToken(TSqlParser.VARP, 0); }
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ITerminalNode COUNT() { return GetToken(TSqlParser.COUNT, 0); }
		public ITerminalNode COUNT_BIG() { return GetToken(TSqlParser.COUNT_BIG, 0); }
		public ITerminalNode CHECKSUM_AGG() { return GetToken(TSqlParser.CHECKSUM_AGG, 0); }
		public ITerminalNode GROUPING() { return GetToken(TSqlParser.GROUPING, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode GROUPING_ID() { return GetToken(TSqlParser.GROUPING_ID, 0); }
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public Aggregate_windowed_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_windowed_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAggregate_windowed_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAggregate_windowed_function(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_windowed_functionContext aggregate_windowed_function() {
		Aggregate_windowed_functionContext _localctx = new Aggregate_windowed_functionContext(_ctx, State);
		EnterRule(_localctx, 1046, RULE_aggregate_windowed_function);
		int _la;
		try {
			State = 11990;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1656,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11958;
				_localctx.agg_func = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==AVG || _la==MAX || _la==MIN || ((((_la - 942)) & ~0x3f) == 0 && ((1L << (_la - 942)) & ((1L << (STDEV - 942)) | (1L << (STDEVP - 942)) | (1L << (SUM - 942)))) != 0) || _la==VAR || _la==VARP) ) {
					_localctx.agg_func = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11959; Match(LR_BRACKET);
				State = 11960; all_distinct_expression();
				State = 11961; Match(RR_BRACKET);
				State = 11963;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1653,_ctx) ) {
				case 1:
					{
					State = 11962; over_clause();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11965;
				_localctx.cnt = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==COUNT || _la==COUNT_BIG) ) {
					_localctx.cnt = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11966; Match(LR_BRACKET);
				State = 11969;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1654,_ctx) ) {
				case 1:
					{
					State = 11967; Match(STAR);
					}
					break;

				case 2:
					{
					State = 11968; all_distinct_expression();
					}
					break;
				}
				State = 11971; Match(RR_BRACKET);
				State = 11973;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1655,_ctx) ) {
				case 1:
					{
					State = 11972; over_clause();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11975; Match(CHECKSUM_AGG);
				State = 11976; Match(LR_BRACKET);
				State = 11977; all_distinct_expression();
				State = 11978; Match(RR_BRACKET);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11980; Match(GROUPING);
				State = 11981; Match(LR_BRACKET);
				State = 11982; expression(0);
				State = 11983; Match(RR_BRACKET);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11985; Match(GROUPING_ID);
				State = 11986; Match(LR_BRACKET);
				State = 11987; expression_list_();
				State = 11988; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Analytic_windowed_functionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ITerminalNode FIRST_VALUE() { return GetToken(TSqlParser.FIRST_VALUE, 0); }
		public ITerminalNode LAST_VALUE() { return GetToken(TSqlParser.LAST_VALUE, 0); }
		public ITerminalNode LAG() { return GetToken(TSqlParser.LAG, 0); }
		public ITerminalNode LEAD() { return GetToken(TSqlParser.LEAD, 0); }
		public ITerminalNode OVER() { return GetToken(TSqlParser.OVER, 0); }
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public ITerminalNode CUME_DIST() { return GetToken(TSqlParser.CUME_DIST, 0); }
		public ITerminalNode PERCENT_RANK() { return GetToken(TSqlParser.PERCENT_RANK, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public ITerminalNode WITHIN() { return GetToken(TSqlParser.WITHIN, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode ORDER() { return GetToken(TSqlParser.ORDER, 0); }
		public ITerminalNode PERCENTILE_CONT() { return GetToken(TSqlParser.PERCENTILE_CONT, 0); }
		public ITerminalNode PERCENTILE_DISC() { return GetToken(TSqlParser.PERCENTILE_DISC, 0); }
		public ITerminalNode ASC() { return GetToken(TSqlParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(TSqlParser.DESC, 0); }
		public Analytic_windowed_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analytic_windowed_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAnalytic_windowed_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAnalytic_windowed_function(this);
		}
	}

	[RuleVersion(0)]
	public Analytic_windowed_functionContext analytic_windowed_function() {
		Analytic_windowed_functionContext _localctx = new Analytic_windowed_functionContext(_ctx, State);
		EnterRule(_localctx, 1048, RULE_analytic_windowed_function);
		int _la;
		try {
			State = 12048;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1662,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11992;
				_la = _input.La(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11993; Match(LR_BRACKET);
				State = 11994; expression(0);
				State = 11995; Match(RR_BRACKET);
				State = 11996; over_clause();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11998;
				_la = _input.La(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11999; Match(LR_BRACKET);
				State = 12000; expression(0);
				State = 12007;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1658,_ctx) ) {
				case 1:
					{
					State = 12001; Match(COMMA);
					State = 12002; expression(0);
					State = 12005;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1657,_ctx) ) {
					case 1:
						{
						State = 12003; Match(COMMA);
						State = 12004; expression(0);
						}
						break;
					}
					}
					break;
				}
				State = 12009; Match(RR_BRACKET);
				State = 12010; over_clause();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 12012;
				_la = _input.La(1);
				if ( !(_la==CUME_DIST || _la==PERCENT_RANK) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 12013; Match(LR_BRACKET);
				State = 12014; Match(RR_BRACKET);
				State = 12015; Match(OVER);
				State = 12016; Match(LR_BRACKET);
				State = 12020;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1659,_ctx) ) {
				case 1:
					{
					State = 12017; Match(PARTITION);
					State = 12018; Match(BY);
					State = 12019; expression_list_();
					}
					break;
				}
				State = 12022; order_by_clause();
				State = 12023; Match(RR_BRACKET);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 12025;
				_la = _input.La(1);
				if ( !(_la==PERCENTILE_CONT || _la==PERCENTILE_DISC) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 12026; Match(LR_BRACKET);
				State = 12027; expression(0);
				State = 12028; Match(RR_BRACKET);
				State = 12029; Match(WITHIN);
				State = 12030; Match(GROUP);
				State = 12031; Match(LR_BRACKET);
				State = 12032; Match(ORDER);
				State = 12033; Match(BY);
				State = 12034; expression(0);
				State = 12036;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1660,_ctx) ) {
				case 1:
					{
					State = 12035;
					_la = _input.La(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 12038; Match(RR_BRACKET);
				State = 12039; Match(OVER);
				State = 12040; Match(LR_BRACKET);
				State = 12044;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1661,_ctx) ) {
				case 1:
					{
					State = 12041; Match(PARTITION);
					State = 12042; Match(BY);
					State = 12043; expression_list_();
					}
					break;
				}
				State = 12046; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_distinct_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode DISTINCT() { return GetToken(TSqlParser.DISTINCT, 0); }
		public All_distinct_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_distinct_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAll_distinct_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAll_distinct_expression(this);
		}
	}

	[RuleVersion(0)]
	public All_distinct_expressionContext all_distinct_expression() {
		All_distinct_expressionContext _localctx = new All_distinct_expressionContext(_ctx, State);
		EnterRule(_localctx, 1050, RULE_all_distinct_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12051;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1663,_ctx) ) {
			case 1:
				{
				State = 12050;
				_la = _input.La(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 12053; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Over_clauseContext : ParserRuleContext {
		public ITerminalNode OVER() { return GetToken(TSqlParser.OVER, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Row_or_range_clauseContext row_or_range_clause() {
			return GetRuleContext<Row_or_range_clauseContext>(0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOver_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOver_clause(this);
		}
	}

	[RuleVersion(0)]
	public Over_clauseContext over_clause() {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, State);
		EnterRule(_localctx, 1052, RULE_over_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12055; Match(OVER);
			State = 12056; Match(LR_BRACKET);
			State = 12060;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1664,_ctx) ) {
			case 1:
				{
				State = 12057; Match(PARTITION);
				State = 12058; Match(BY);
				State = 12059; expression_list_();
				}
				break;
			}
			State = 12063;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1665,_ctx) ) {
			case 1:
				{
				State = 12062; order_by_clause();
				}
				break;
			}
			State = 12066;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1666,_ctx) ) {
			case 1:
				{
				State = 12065; row_or_range_clause();
				}
				break;
			}
			State = 12068; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_or_range_clauseContext : ParserRuleContext {
		public Window_frame_extentContext window_frame_extent() {
			return GetRuleContext<Window_frame_extentContext>(0);
		}
		public ITerminalNode ROWS() { return GetToken(TSqlParser.ROWS, 0); }
		public ITerminalNode RANGE() { return GetToken(TSqlParser.RANGE, 0); }
		public Row_or_range_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_or_range_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRow_or_range_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRow_or_range_clause(this);
		}
	}

	[RuleVersion(0)]
	public Row_or_range_clauseContext row_or_range_clause() {
		Row_or_range_clauseContext _localctx = new Row_or_range_clauseContext(_ctx, State);
		EnterRule(_localctx, 1054, RULE_row_or_range_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12070;
			_la = _input.La(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 12071; window_frame_extent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_extentContext : ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return GetRuleContext<Window_frame_precedingContext>(0);
		}
		public ITerminalNode BETWEEN() { return GetToken(TSqlParser.BETWEEN, 0); }
		public Window_frame_boundContext[] window_frame_bound() {
			return GetRuleContexts<Window_frame_boundContext>();
		}
		public Window_frame_boundContext window_frame_bound(int i) {
			return GetRuleContext<Window_frame_boundContext>(i);
		}
		public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		public Window_frame_extentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_extent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_extent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_extent(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_extentContext window_frame_extent() {
		Window_frame_extentContext _localctx = new Window_frame_extentContext(_ctx, State);
		EnterRule(_localctx, 1056, RULE_window_frame_extent);
		try {
			State = 12079;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1667,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12073; window_frame_preceding();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12074; Match(BETWEEN);
				State = 12075; window_frame_bound();
				State = 12076; Match(AND);
				State = 12077; window_frame_bound();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_boundContext : ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return GetRuleContext<Window_frame_precedingContext>(0);
		}
		public Window_frame_followingContext window_frame_following() {
			return GetRuleContext<Window_frame_followingContext>(0);
		}
		public Window_frame_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_bound; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_bound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_bound(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_boundContext window_frame_bound() {
		Window_frame_boundContext _localctx = new Window_frame_boundContext(_ctx, State);
		EnterRule(_localctx, 1058, RULE_window_frame_bound);
		try {
			State = 12083;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1668,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12081; window_frame_preceding();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12082; window_frame_following();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_precedingContext : ParserRuleContext {
		public ITerminalNode UNBOUNDED() { return GetToken(TSqlParser.UNBOUNDED, 0); }
		public ITerminalNode PRECEDING() { return GetToken(TSqlParser.PRECEDING, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode CURRENT() { return GetToken(TSqlParser.CURRENT, 0); }
		public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		public Window_frame_precedingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_preceding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_preceding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_preceding(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_precedingContext window_frame_preceding() {
		Window_frame_precedingContext _localctx = new Window_frame_precedingContext(_ctx, State);
		EnterRule(_localctx, 1060, RULE_window_frame_preceding);
		try {
			State = 12091;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1669,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12085; Match(UNBOUNDED);
				State = 12086; Match(PRECEDING);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12087; Match(DECIMAL);
				State = 12088; Match(PRECEDING);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 12089; Match(CURRENT);
				State = 12090; Match(ROW);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_followingContext : ParserRuleContext {
		public ITerminalNode UNBOUNDED() { return GetToken(TSqlParser.UNBOUNDED, 0); }
		public ITerminalNode FOLLOWING() { return GetToken(TSqlParser.FOLLOWING, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Window_frame_followingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_following; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_following(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_following(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_followingContext window_frame_following() {
		Window_frame_followingContext _localctx = new Window_frame_followingContext(_ctx, State);
		EnterRule(_localctx, 1062, RULE_window_frame_following);
		try {
			State = 12097;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1670,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12093; Match(UNBOUNDED);
				State = 12094; Match(FOLLOWING);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12095; Match(DECIMAL);
				State = 12096; Match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_database_optionContext : ParserRuleContext {
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public Database_filestream_optionContext[] database_filestream_option() {
			return GetRuleContexts<Database_filestream_optionContext>();
		}
		public Database_filestream_optionContext database_filestream_option(int i) {
			return GetRuleContext<Database_filestream_optionContext>(i);
		}
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public ITerminalNode NESTED_TRIGGERS() { return GetToken(TSqlParser.NESTED_TRIGGERS, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode TRANSFORM_NOISE_WORDS() { return GetToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public ITerminalNode TWO_DIGIT_YEAR_CUTOFF() { return GetToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode DB_CHAINING() { return GetToken(TSqlParser.DB_CHAINING, 0); }
		public ITerminalNode TRUSTWORTHY() { return GetToken(TSqlParser.TRUSTWORTHY, 0); }
		public ITerminalNode CATALOG_COLLATION() { return GetToken(TSqlParser.CATALOG_COLLATION, 0); }
		public ITerminalNode DATABASE_DEFAULT() { return GetToken(TSqlParser.DATABASE_DEFAULT, 0); }
		public Create_database_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_database_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_database_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_database_option(this);
		}
	}

	[RuleVersion(0)]
	public Create_database_optionContext create_database_option() {
		Create_database_optionContext _localctx = new Create_database_optionContext(_ctx, State);
		EnterRule(_localctx, 1064, RULE_create_database_option);
		int _la;
		try {
			int _alt;
			State = 12136;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1674,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12099; Match(FILESTREAM);
				{
				State = 12100; database_filestream_option();
				State = 12105;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1671,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 12101; Match(COMMA);
						State = 12102; database_filestream_option();
						}
						} 
					}
					State = 12107;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1671,_ctx);
				}
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12108; Match(DEFAULT_LANGUAGE);
				State = 12109; Match(EQUAL);
				State = 12112;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1672,_ctx) ) {
				case 1:
					{
					State = 12110; id_();
					}
					break;

				case 2:
					{
					State = 12111; Match(STRING);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 12114; Match(DEFAULT_FULLTEXT_LANGUAGE);
				State = 12115; Match(EQUAL);
				State = 12118;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1673,_ctx) ) {
				case 1:
					{
					State = 12116; id_();
					}
					break;

				case 2:
					{
					State = 12117; Match(STRING);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 12120; Match(NESTED_TRIGGERS);
				State = 12121; Match(EQUAL);
				State = 12122;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 12123; Match(TRANSFORM_NOISE_WORDS);
				State = 12124; Match(EQUAL);
				State = 12125;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 12126; Match(TWO_DIGIT_YEAR_CUTOFF);
				State = 12127; Match(EQUAL);
				State = 12128; Match(DECIMAL);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 12129; Match(DB_CHAINING);
				State = 12130;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 12131; Match(TRUSTWORTHY);
				State = 12132;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 12133; Match(CATALOG_COLLATION);
				State = 12134; Match(EQUAL);
				State = 12135; Match(DATABASE_DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_filestream_optionContext : ParserRuleContext {
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode NON_TRANSACTED_ACCESS() { return GetToken(TSqlParser.NON_TRANSACTED_ACCESS, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DIRECTORY_NAME() { return GetToken(TSqlParser.DIRECTORY_NAME, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode FULL() { return GetToken(TSqlParser.FULL, 0); }
		public Database_filestream_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_filestream_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDatabase_filestream_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDatabase_filestream_option(this);
		}
	}

	[RuleVersion(0)]
	public Database_filestream_optionContext database_filestream_option() {
		Database_filestream_optionContext _localctx = new Database_filestream_optionContext(_ctx, State);
		EnterRule(_localctx, 1066, RULE_database_filestream_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12138; Match(LR_BRACKET);
			State = 12145;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1675,_ctx) ) {
			case 1:
				{
				{
				State = 12139; Match(NON_TRANSACTED_ACCESS);
				State = 12140; Match(EQUAL);
				State = 12141;
				_la = _input.La(1);
				if ( !(_la==FULL || _la==OFF || _la==READ_ONLY) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				}
				break;

			case 2:
				{
				{
				State = 12142; Match(DIRECTORY_NAME);
				State = 12143; Match(EQUAL);
				State = 12144; Match(STRING);
				}
				}
				break;
			}
			State = 12147; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_file_specContext : ParserRuleContext {
		public File_groupContext file_group() {
			return GetRuleContext<File_groupContext>(0);
		}
		public File_specContext file_spec() {
			return GetRuleContext<File_specContext>(0);
		}
		public Database_file_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_file_spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDatabase_file_spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDatabase_file_spec(this);
		}
	}

	[RuleVersion(0)]
	public Database_file_specContext database_file_spec() {
		Database_file_specContext _localctx = new Database_file_specContext(_ctx, State);
		EnterRule(_localctx, 1068, RULE_database_file_spec);
		try {
			State = 12151;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1676,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12149; file_group();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12150; file_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_groupContext : ParserRuleContext {
		public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public File_specContext[] file_spec() {
			return GetRuleContexts<File_specContext>();
		}
		public File_specContext file_spec(int i) {
			return GetRuleContext<File_specContext>(i);
		}
		public ITerminalNode[] CONTAINS() { return GetTokens(TSqlParser.CONTAINS); }
		public ITerminalNode CONTAINS(int i) {
			return GetToken(TSqlParser.CONTAINS, i);
		}
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode MEMORY_OPTIMIZED_DATA() { return GetToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public File_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_group(this);
		}
	}

	[RuleVersion(0)]
	public File_groupContext file_group() {
		File_groupContext _localctx = new File_groupContext(_ctx, State);
		EnterRule(_localctx, 1070, RULE_file_group);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 12153; Match(FILEGROUP);
			State = 12154; id_();
			State = 12157;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1677,_ctx) ) {
			case 1:
				{
				State = 12155; Match(CONTAINS);
				State = 12156; Match(FILESTREAM);
				}
				break;
			}
			State = 12160;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1678,_ctx) ) {
			case 1:
				{
				State = 12159; Match(DEFAULT);
				}
				break;
			}
			State = 12164;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1679,_ctx) ) {
			case 1:
				{
				State = 12162; Match(CONTAINS);
				State = 12163; Match(MEMORY_OPTIMIZED_DATA);
				}
				break;
			}
			State = 12166; file_spec();
			State = 12171;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1680,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 12167; Match(COMMA);
					State = 12168; file_spec();
					}
					} 
				}
				State = 12173;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1680,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_specContext : ParserRuleContext {
		public IToken file;
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode FILENAME() { return GetToken(TSqlParser.FILENAME, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		public File_sizeContext[] file_size() {
			return GetRuleContexts<File_sizeContext>();
		}
		public File_sizeContext file_size(int i) {
			return GetRuleContext<File_sizeContext>(i);
		}
		public ITerminalNode MAXSIZE() { return GetToken(TSqlParser.MAXSIZE, 0); }
		public ITerminalNode FILEGROWTH() { return GetToken(TSqlParser.FILEGROWTH, 0); }
		public ITerminalNode UNLIMITED() { return GetToken(TSqlParser.UNLIMITED, 0); }
		public File_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_spec(this);
		}
	}

	[RuleVersion(0)]
	public File_specContext file_spec() {
		File_specContext _localctx = new File_specContext(_ctx, State);
		EnterRule(_localctx, 1072, RULE_file_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12174; Match(LR_BRACKET);
			State = 12175; Match(NAME);
			State = 12176; Match(EQUAL);
			State = 12179;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1681,_ctx) ) {
			case 1:
				{
				State = 12177; id_();
				}
				break;

			case 2:
				{
				State = 12178; Match(STRING);
				}
				break;
			}
			State = 12182;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1682,_ctx) ) {
			case 1:
				{
				State = 12181; Match(COMMA);
				}
				break;
			}
			State = 12184; Match(FILENAME);
			State = 12185; Match(EQUAL);
			State = 12186; _localctx.file = Match(STRING);
			State = 12188;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1683,_ctx) ) {
			case 1:
				{
				State = 12187; Match(COMMA);
				}
				break;
			}
			State = 12196;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1685,_ctx) ) {
			case 1:
				{
				State = 12190; Match(SIZE);
				State = 12191; Match(EQUAL);
				State = 12192; file_size();
				State = 12194;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1684,_ctx) ) {
				case 1:
					{
					State = 12193; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 12207;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1688,_ctx) ) {
			case 1:
				{
				State = 12198; Match(MAXSIZE);
				State = 12199; Match(EQUAL);
				State = 12202;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1686,_ctx) ) {
				case 1:
					{
					State = 12200; file_size();
					}
					break;

				case 2:
					{
					State = 12201; Match(UNLIMITED);
					}
					break;
				}
				State = 12205;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1687,_ctx) ) {
				case 1:
					{
					State = 12204; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 12215;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1690,_ctx) ) {
			case 1:
				{
				State = 12209; Match(FILEGROWTH);
				State = 12210; Match(EQUAL);
				State = 12211; file_size();
				State = 12213;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1689,_ctx) ) {
				case 1:
					{
					State = 12212; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 12217; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_nameContext : ParserRuleContext {
		public Id_Context server;
		public Id_Context database;
		public Id_Context schema;
		public Id_Context table;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Entity_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEntity_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEntity_name(this);
		}
	}

	[RuleVersion(0)]
	public Entity_nameContext entity_name() {
		Entity_nameContext _localctx = new Entity_nameContext(_ctx, State);
		EnterRule(_localctx, 1074, RULE_entity_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12236;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1692,_ctx) ) {
			case 1:
				{
				State = 12219; _localctx.server = id_();
				State = 12220; Match(DOT);
				State = 12221; _localctx.database = id_();
				State = 12222; Match(DOT);
				State = 12223; _localctx.schema = id_();
				State = 12224; Match(DOT);
				}
				break;

			case 2:
				{
				State = 12226; _localctx.database = id_();
				State = 12227; Match(DOT);
				State = 12229;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1691,_ctx) ) {
				case 1:
					{
					State = 12228; _localctx.schema = id_();
					}
					break;
				}
				State = 12231; Match(DOT);
				}
				break;

			case 3:
				{
				State = 12233; _localctx.schema = id_();
				State = 12234; Match(DOT);
				}
				break;
			}
			State = 12238; _localctx.table = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_name_for_azure_dwContext : ParserRuleContext {
		public Id_Context schema;
		public Id_Context object_name;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Entity_name_for_azure_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_name_for_azure_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEntity_name_for_azure_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEntity_name_for_azure_dw(this);
		}
	}

	[RuleVersion(0)]
	public Entity_name_for_azure_dwContext entity_name_for_azure_dw() {
		Entity_name_for_azure_dwContext _localctx = new Entity_name_for_azure_dwContext(_ctx, State);
		EnterRule(_localctx, 1076, RULE_entity_name_for_azure_dw);
		try {
			State = 12245;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1693,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12240; _localctx.schema = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12241; _localctx.schema = id_();
				State = 12242; Match(DOT);
				State = 12243; _localctx.object_name = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_name_for_parallel_dwContext : ParserRuleContext {
		public Id_Context schema_database;
		public Id_Context schema;
		public Id_Context object_name;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Entity_name_for_parallel_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_name_for_parallel_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEntity_name_for_parallel_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEntity_name_for_parallel_dw(this);
		}
	}

	[RuleVersion(0)]
	public Entity_name_for_parallel_dwContext entity_name_for_parallel_dw() {
		Entity_name_for_parallel_dwContext _localctx = new Entity_name_for_parallel_dwContext(_ctx, State);
		EnterRule(_localctx, 1078, RULE_entity_name_for_parallel_dw);
		try {
			State = 12252;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1694,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12247; _localctx.schema_database = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12248; _localctx.schema = id_();
				State = 12249; Match(DOT);
				State = 12250; _localctx.object_name = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_table_nameContext : ParserRuleContext {
		public Id_Context linkedServer;
		public Id_Context schema;
		public Id_Context server;
		public Id_Context database;
		public Id_Context table;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Full_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFull_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFull_table_name(this);
		}
	}

	[RuleVersion(0)]
	public Full_table_nameContext full_table_name() {
		Full_table_nameContext _localctx = new Full_table_nameContext(_ctx, State);
		EnterRule(_localctx, 1080, RULE_full_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12277;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1696,_ctx) ) {
			case 1:
				{
				State = 12254; _localctx.linkedServer = id_();
				State = 12255; Match(DOT);
				State = 12256; Match(DOT);
				State = 12257; _localctx.schema = id_();
				State = 12258; Match(DOT);
				}
				break;

			case 2:
				{
				State = 12260; _localctx.server = id_();
				State = 12261; Match(DOT);
				State = 12262; _localctx.database = id_();
				State = 12263; Match(DOT);
				State = 12264; _localctx.schema = id_();
				State = 12265; Match(DOT);
				}
				break;

			case 3:
				{
				State = 12267; _localctx.database = id_();
				State = 12268; Match(DOT);
				State = 12270;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1695,_ctx) ) {
				case 1:
					{
					State = 12269; _localctx.schema = id_();
					}
					break;
				}
				State = 12272; Match(DOT);
				}
				break;

			case 4:
				{
				State = 12274; _localctx.schema = id_();
				State = 12275; Match(DOT);
				}
				break;
			}
			State = 12279; _localctx.table = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_nameContext : ParserRuleContext {
		public Id_Context database;
		public Id_Context schema;
		public Id_Context table;
		public IToken blocking_hierarchy;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode BLOCKING_HIERARCHY() { return GetToken(TSqlParser.BLOCKING_HIERARCHY, 0); }
		public Table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_name(this);
		}
	}

	[RuleVersion(0)]
	public Table_nameContext table_name() {
		Table_nameContext _localctx = new Table_nameContext(_ctx, State);
		EnterRule(_localctx, 1082, RULE_table_name);
		try {
			State = 12307;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1701,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12291;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1698,_ctx) ) {
				case 1:
					{
					State = 12281; _localctx.database = id_();
					State = 12282; Match(DOT);
					State = 12284;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1697,_ctx) ) {
					case 1:
						{
						State = 12283; _localctx.schema = id_();
						}
						break;
					}
					State = 12286; Match(DOT);
					}
					break;

				case 2:
					{
					State = 12288; _localctx.schema = id_();
					State = 12289; Match(DOT);
					}
					break;
				}
				State = 12293; _localctx.table = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12304;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1700,_ctx) ) {
				case 1:
					{
					State = 12294; _localctx.database = id_();
					State = 12295; Match(DOT);
					State = 12297;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1699,_ctx) ) {
					case 1:
						{
						State = 12296; _localctx.schema = id_();
						}
						break;
					}
					State = 12299; Match(DOT);
					}
					break;

				case 2:
					{
					State = 12301; _localctx.schema = id_();
					State = 12302; Match(DOT);
					}
					break;
				}
				State = 12306; _localctx.blocking_hierarchy = Match(BLOCKING_HIERARCHY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_nameContext : ParserRuleContext {
		public Id_Context schema;
		public Id_Context name;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Simple_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSimple_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSimple_name(this);
		}
	}

	[RuleVersion(0)]
	public Simple_nameContext simple_name() {
		Simple_nameContext _localctx = new Simple_nameContext(_ctx, State);
		EnterRule(_localctx, 1084, RULE_simple_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12312;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1702,_ctx) ) {
			case 1:
				{
				State = 12309; _localctx.schema = id_();
				State = 12310; Match(DOT);
				}
				break;
			}
			State = 12314; _localctx.name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_proc_name_schemaContext : ParserRuleContext {
		public Id_Context schema;
		public Id_Context procedure;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Func_proc_name_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_proc_name_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_proc_name_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_proc_name_schema(this);
		}
	}

	[RuleVersion(0)]
	public Func_proc_name_schemaContext func_proc_name_schema() {
		Func_proc_name_schemaContext _localctx = new Func_proc_name_schemaContext(_ctx, State);
		EnterRule(_localctx, 1086, RULE_func_proc_name_schema);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12319;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1703,_ctx) ) {
			case 1:
				{
				{
				State = 12316; _localctx.schema = id_();
				}
				State = 12317; Match(DOT);
				}
				break;
			}
			State = 12321; _localctx.procedure = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_proc_name_database_schemaContext : ParserRuleContext {
		public Id_Context database;
		public Id_Context schema;
		public Id_Context procedure;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Func_proc_name_schemaContext func_proc_name_schema() {
			return GetRuleContext<Func_proc_name_schemaContext>(0);
		}
		public Func_proc_name_database_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_proc_name_database_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_proc_name_database_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_proc_name_database_schema(this);
		}
	}

	[RuleVersion(0)]
	public Func_proc_name_database_schemaContext func_proc_name_database_schema() {
		Func_proc_name_database_schemaContext _localctx = new Func_proc_name_database_schemaContext(_ctx, State);
		EnterRule(_localctx, 1088, RULE_func_proc_name_database_schema);
		try {
			State = 12333;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1706,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12324;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1704,_ctx) ) {
				case 1:
					{
					State = 12323; _localctx.database = id_();
					}
					break;
				}
				State = 12326; Match(DOT);
				State = 12328;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1705,_ctx) ) {
				case 1:
					{
					State = 12327; _localctx.schema = id_();
					}
					break;
				}
				State = 12330; Match(DOT);
				State = 12331; _localctx.procedure = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12332; func_proc_name_schema();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_proc_name_server_database_schemaContext : ParserRuleContext {
		public Id_Context server;
		public Id_Context database;
		public Id_Context schema;
		public Id_Context procedure;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Func_proc_name_database_schemaContext func_proc_name_database_schema() {
			return GetRuleContext<Func_proc_name_database_schemaContext>(0);
		}
		public Func_proc_name_server_database_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_proc_name_server_database_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_proc_name_server_database_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_proc_name_server_database_schema(this);
		}
	}

	[RuleVersion(0)]
	public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
		Func_proc_name_server_database_schemaContext _localctx = new Func_proc_name_server_database_schemaContext(_ctx, State);
		EnterRule(_localctx, 1090, RULE_func_proc_name_server_database_schema);
		try {
			State = 12349;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1710,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12336;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1707,_ctx) ) {
				case 1:
					{
					State = 12335; _localctx.server = id_();
					}
					break;
				}
				State = 12338; Match(DOT);
				State = 12340;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1708,_ctx) ) {
				case 1:
					{
					State = 12339; _localctx.database = id_();
					}
					break;
				}
				State = 12342; Match(DOT);
				State = 12344;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1709,_ctx) ) {
				case 1:
					{
					State = 12343; _localctx.schema = id_();
					}
					break;
				}
				State = 12346; Match(DOT);
				State = 12347; _localctx.procedure = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12348; func_proc_name_database_schema();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_objectContext : ParserRuleContext {
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Ddl_objectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_object; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDdl_object(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDdl_object(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_objectContext ddl_object() {
		Ddl_objectContext _localctx = new Ddl_objectContext(_ctx, State);
		EnterRule(_localctx, 1092, RULE_ddl_object);
		try {
			State = 12353;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1711,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12351; full_table_name();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12352; Match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_column_nameContext : ParserRuleContext {
		public Id_Context column_name;
		public Id_Context server;
		public Id_Context schema;
		public Id_Context tablename;
		public ITerminalNode DELETED() { return GetToken(TSqlParser.DELETED, 0); }
		public ITerminalNode INSERTED() { return GetToken(TSqlParser.INSERTED, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Full_column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_column_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFull_column_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFull_column_name(this);
		}
	}

	[RuleVersion(0)]
	public Full_column_nameContext full_column_name() {
		Full_column_nameContext _localctx = new Full_column_nameContext(_ctx, State);
		EnterRule(_localctx, 1094, RULE_full_column_name);
		int _la;
		try {
			State = 12386;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1718,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12355;
				_la = _input.La(1);
				if ( !(_la==DELETED || _la==INSERTED) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 12356; Match(DOT);
				State = 12357; _localctx.column_name = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12359;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1712,_ctx) ) {
				case 1:
					{
					State = 12358; _localctx.server = id_();
					}
					break;
				}
				State = 12361; Match(DOT);
				State = 12363;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1713,_ctx) ) {
				case 1:
					{
					State = 12362; _localctx.schema = id_();
					}
					break;
				}
				State = 12365; Match(DOT);
				State = 12367;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1714,_ctx) ) {
				case 1:
					{
					State = 12366; _localctx.tablename = id_();
					}
					break;
				}
				State = 12369; Match(DOT);
				State = 12370; _localctx.column_name = id_();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 12372;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1715,_ctx) ) {
				case 1:
					{
					State = 12371; _localctx.schema = id_();
					}
					break;
				}
				State = 12374; Match(DOT);
				State = 12376;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1716,_ctx) ) {
				case 1:
					{
					State = 12375; _localctx.tablename = id_();
					}
					break;
				}
				State = 12378; Match(DOT);
				State = 12379; _localctx.column_name = id_();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 12381;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1717,_ctx) ) {
				case 1:
					{
					State = 12380; _localctx.tablename = id_();
					}
					break;
				}
				State = 12383; Match(DOT);
				State = 12384; _localctx.column_name = id_();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 12385; _localctx.column_name = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_list_with_orderContext : ParserRuleContext {
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] ASC() { return GetTokens(TSqlParser.ASC); }
		public ITerminalNode ASC(int i) {
			return GetToken(TSqlParser.ASC, i);
		}
		public ITerminalNode[] DESC() { return GetTokens(TSqlParser.DESC); }
		public ITerminalNode DESC(int i) {
			return GetToken(TSqlParser.DESC, i);
		}
		public Column_name_list_with_orderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_list_with_order; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_name_list_with_order(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_name_list_with_order(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_list_with_orderContext column_name_list_with_order() {
		Column_name_list_with_orderContext _localctx = new Column_name_list_with_orderContext(_ctx, State);
		EnterRule(_localctx, 1096, RULE_column_name_list_with_order);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 12388; id_();
			State = 12390;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1719,_ctx) ) {
			case 1:
				{
				State = 12389;
				_la = _input.La(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 12399;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1721,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 12392; Match(COMMA);
					State = 12393; id_();
					State = 12395;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1720,_ctx) ) {
					case 1:
						{
						State = 12394;
						_la = _input.La(1);
						if ( !(_la==ASC || _la==DESC) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					} 
				}
				State = 12401;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1721,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_column_name_listContext : ParserRuleContext {
		public Insert_column_idContext _insert_column_id;
		public IList<Insert_column_idContext> _col = new List<Insert_column_idContext>();
		public Insert_column_idContext[] insert_column_id() {
			return GetRuleContexts<Insert_column_idContext>();
		}
		public Insert_column_idContext insert_column_id(int i) {
			return GetRuleContext<Insert_column_idContext>(i);
		}
		public Insert_column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_column_name_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_column_name_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_column_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Insert_column_name_listContext insert_column_name_list() {
		Insert_column_name_listContext _localctx = new Insert_column_name_listContext(_ctx, State);
		EnterRule(_localctx, 1098, RULE_insert_column_name_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 12402; _localctx._insert_column_id = insert_column_id();
			_localctx._col.Add(_localctx._insert_column_id);
			State = 12407;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1722,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 12403; Match(COMMA);
					State = 12404; _localctx._insert_column_id = insert_column_id();
					_localctx._col.Add(_localctx._insert_column_id);
					}
					} 
				}
				State = 12409;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1722,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_column_idContext : ParserRuleContext {
		public Id_Context _id_;
		public IList<Id_Context> _ignore = new List<Id_Context>();
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Insert_column_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_column_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_column_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_column_id(this);
		}
	}

	[RuleVersion(0)]
	public Insert_column_idContext insert_column_id() {
		Insert_column_idContext _localctx = new Insert_column_idContext(_ctx, State);
		EnterRule(_localctx, 1100, RULE_insert_column_id);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 12416;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1724,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 12411;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1723,_ctx) ) {
					case 1:
						{
						State = 12410; _localctx._id_ = id_();
						_localctx._ignore.Add(_localctx._id_);
						}
						break;
					}
					State = 12413; Match(DOT);
					}
					} 
				}
				State = 12418;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1724,_ctx);
			}
			State = 12419; id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_listContext : ParserRuleContext {
		public Id_Context _id_;
		public IList<Id_Context> _col = new List<Id_Context>();
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_name_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_listContext column_name_list() {
		Column_name_listContext _localctx = new Column_name_listContext(_ctx, State);
		EnterRule(_localctx, 1102, RULE_column_name_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 12421; _localctx._id_ = id_();
			_localctx._col.Add(_localctx._id_);
			State = 12426;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1725,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 12422; Match(COMMA);
					State = 12423; _localctx._id_ = id_();
					_localctx._col.Add(_localctx._id_);
					}
					} 
				}
				State = 12428;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1725,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_nameContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Cursor_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCursor_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCursor_name(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_nameContext cursor_name() {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, State);
		EnterRule(_localctx, 1104, RULE_cursor_name);
		try {
			State = 12431;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1726,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12429; id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12430; Match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_offContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public On_offContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_off; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOn_off(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOn_off(this);
		}
	}

	[RuleVersion(0)]
	public On_offContext on_off() {
		On_offContext _localctx = new On_offContext(_ctx, State);
		EnterRule(_localctx, 1106, RULE_on_off);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12433;
			_la = _input.La(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClusteredContext : ParserRuleContext {
		public ITerminalNode CLUSTERED() { return GetToken(TSqlParser.CLUSTERED, 0); }
		public ITerminalNode NONCLUSTERED() { return GetToken(TSqlParser.NONCLUSTERED, 0); }
		public ClusteredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clustered; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClustered(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClustered(this);
		}
	}

	[RuleVersion(0)]
	public ClusteredContext clustered() {
		ClusteredContext _localctx = new ClusteredContext(_ctx, State);
		EnterRule(_localctx, 1108, RULE_clustered);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12435;
			_la = _input.La(1);
			if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_notnullContext : ParserRuleContext {
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public Null_notnullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_notnull; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNull_notnull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNull_notnull(this);
		}
	}

	[RuleVersion(0)]
	public Null_notnullContext null_notnull() {
		Null_notnullContext _localctx = new Null_notnullContext(_ctx, State);
		EnterRule(_localctx, 1110, RULE_null_notnull);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12438;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1727,_ctx) ) {
			case 1:
				{
				State = 12437; Match(NOT);
				}
				break;
			}
			State = 12440; Match(NULL_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_or_defaultContext : ParserRuleContext {
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Null_or_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_or_default; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNull_or_default(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNull_or_default(this);
		}
	}

	[RuleVersion(0)]
	public Null_or_defaultContext null_or_default() {
		Null_or_defaultContext _localctx = new Null_or_defaultContext(_ctx, State);
		EnterRule(_localctx, 1112, RULE_null_or_default);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12453;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1730,_ctx) ) {
			case 1:
				{
				State = 12442; null_notnull();
				}
				break;

			case 2:
				{
				State = 12443; Match(DEFAULT);
				State = 12444; constant_expression();
				State = 12447;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1728,_ctx) ) {
				case 1:
					{
					State = 12445; Match(COLLATE);
					State = 12446; id_();
					}
					break;
				}
				State = 12451;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1729,_ctx) ) {
				case 1:
					{
					State = 12449; Match(WITH);
					State = 12450; Match(VALUES);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_function_nameContext : ParserRuleContext {
		public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return GetRuleContext<Func_proc_name_server_database_schemaContext>(0);
		}
		public ITerminalNode RIGHT() { return GetToken(TSqlParser.RIGHT, 0); }
		public ITerminalNode LEFT() { return GetToken(TSqlParser.LEFT, 0); }
		public ITerminalNode BINARY_CHECKSUM() { return GetToken(TSqlParser.BINARY_CHECKSUM, 0); }
		public ITerminalNode CHECKSUM() { return GetToken(TSqlParser.CHECKSUM, 0); }
		public Scalar_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_function_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterScalar_function_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitScalar_function_name(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_function_nameContext scalar_function_name() {
		Scalar_function_nameContext _localctx = new Scalar_function_nameContext(_ctx, State);
		EnterRule(_localctx, 1114, RULE_scalar_function_name);
		try {
			State = 12460;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1731,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12455; func_proc_name_server_database_schema();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12456; Match(RIGHT);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 12457; Match(LEFT);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 12458; Match(BINARY_CHECKSUM);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 12459; Match(CHECKSUM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Begin_conversation_timerContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode TIMER() { return GetToken(TSqlParser.TIMER, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		public Begin_conversation_timerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_begin_conversation_timer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBegin_conversation_timer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBegin_conversation_timer(this);
		}
	}

	[RuleVersion(0)]
	public Begin_conversation_timerContext begin_conversation_timer() {
		Begin_conversation_timerContext _localctx = new Begin_conversation_timerContext(_ctx, State);
		EnterRule(_localctx, 1116, RULE_begin_conversation_timer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12462; Match(BEGIN);
			State = 12463; Match(CONVERSATION);
			State = 12464; Match(TIMER);
			State = 12465; Match(LR_BRACKET);
			State = 12466; Match(LOCAL_ID);
			State = 12467; Match(RR_BRACKET);
			State = 12468; Match(TIMEOUT);
			State = 12469; Match(EQUAL);
			State = 12470; time();
			State = 12472;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1732,_ctx) ) {
			case 1:
				{
				State = 12471; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Begin_conversation_dialogContext : ParserRuleContext {
		public IToken dialog_handle;
		public Service_nameContext initiator_service_name;
		public Service_nameContext target_service_name;
		public IToken service_broker_guid;
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode DIALOG() { return GetToken(TSqlParser.DIALOG, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode[] SERVICE() { return GetTokens(TSqlParser.SERVICE); }
		public ITerminalNode SERVICE(int i) {
			return GetToken(TSqlParser.SERVICE, i);
		}
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public Contract_nameContext contract_name() {
			return GetRuleContext<Contract_nameContext>(0);
		}
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public Service_nameContext[] service_name() {
			return GetRuleContexts<Service_nameContext>();
		}
		public Service_nameContext service_name(int i) {
			return GetRuleContext<Service_nameContext>(i);
		}
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LIFETIME() { return GetToken(TSqlParser.LIFETIME, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode RELATED_CONVERSATION() { return GetToken(TSqlParser.RELATED_CONVERSATION, 0); }
		public ITerminalNode RELATED_CONVERSATION_GROUP() { return GetToken(TSqlParser.RELATED_CONVERSATION_GROUP, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Begin_conversation_dialogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_begin_conversation_dialog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBegin_conversation_dialog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBegin_conversation_dialog(this);
		}
	}

	[RuleVersion(0)]
	public Begin_conversation_dialogContext begin_conversation_dialog() {
		Begin_conversation_dialogContext _localctx = new Begin_conversation_dialogContext(_ctx, State);
		EnterRule(_localctx, 1118, RULE_begin_conversation_dialog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12474; Match(BEGIN);
			State = 12475; Match(DIALOG);
			State = 12477;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1733,_ctx) ) {
			case 1:
				{
				State = 12476; Match(CONVERSATION);
				}
				break;
			}
			State = 12479; _localctx.dialog_handle = Match(LOCAL_ID);
			State = 12480; Match(FROM);
			State = 12481; Match(SERVICE);
			State = 12482; _localctx.initiator_service_name = service_name();
			State = 12483; Match(TO);
			State = 12484; Match(SERVICE);
			State = 12485; _localctx.target_service_name = service_name();
			State = 12488;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1734,_ctx) ) {
			case 1:
				{
				State = 12486; Match(COMMA);
				State = 12487; _localctx.service_broker_guid = Match(STRING);
				}
				break;
			}
			State = 12490; Match(ON);
			State = 12491; Match(CONTRACT);
			State = 12492; contract_name();
			State = 12515;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1740,_ctx) ) {
			case 1:
				{
				State = 12493; Match(WITH);
				State = 12500;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1736,_ctx) ) {
				case 1:
					{
					State = 12494;
					_la = _input.La(1);
					if ( !(_la==RELATED_CONVERSATION || _la==RELATED_CONVERSATION_GROUP) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 12495; Match(EQUAL);
					State = 12496; Match(LOCAL_ID);
					State = 12498;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1735,_ctx) ) {
					case 1:
						{
						State = 12497; Match(COMMA);
						}
						break;
					}
					}
					break;
				}
				State = 12508;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1738,_ctx) ) {
				case 1:
					{
					State = 12502; Match(LIFETIME);
					State = 12503; Match(EQUAL);
					State = 12504;
					_la = _input.La(1);
					if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 12506;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1737,_ctx) ) {
					case 1:
						{
						State = 12505; Match(COMMA);
						}
						break;
					}
					}
					break;
				}
				State = 12513;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1739,_ctx) ) {
				case 1:
					{
					State = 12510; Match(ENCRYPTION);
					State = 12511; Match(EQUAL);
					State = 12512;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;
			}
			State = 12518;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1741,_ctx) ) {
			case 1:
				{
				State = 12517; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Contract_nameContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Contract_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contract_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterContract_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitContract_name(this);
		}
	}

	[RuleVersion(0)]
	public Contract_nameContext contract_name() {
		Contract_nameContext _localctx = new Contract_nameContext(_ctx, State);
		EnterRule(_localctx, 1120, RULE_contract_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12522;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1742,_ctx) ) {
			case 1:
				{
				State = 12520; id_();
				}
				break;

			case 2:
				{
				State = 12521; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Service_nameContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Service_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_service_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterService_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitService_name(this);
		}
	}

	[RuleVersion(0)]
	public Service_nameContext service_name() {
		Service_nameContext _localctx = new Service_nameContext(_ctx, State);
		EnterRule(_localctx, 1122, RULE_service_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12526;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1743,_ctx) ) {
			case 1:
				{
				State = 12524; id_();
				}
				break;

			case 2:
				{
				State = 12525; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_conversationContext : ParserRuleContext {
		public IToken conversation_handle;
		public IToken faliure_code;
		public IToken failure_text;
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ERROR() { return GetToken(TSqlParser.ERROR, 0); }
		public ITerminalNode DESCRIPTION() { return GetToken(TSqlParser.DESCRIPTION, 0); }
		public ITerminalNode CLEANUP() { return GetToken(TSqlParser.CLEANUP, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public End_conversationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_conversation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEnd_conversation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEnd_conversation(this);
		}
	}

	[RuleVersion(0)]
	public End_conversationContext end_conversation() {
		End_conversationContext _localctx = new End_conversationContext(_ctx, State);
		EnterRule(_localctx, 1124, RULE_end_conversation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12528; Match(END);
			State = 12529; Match(CONVERSATION);
			State = 12530; _localctx.conversation_handle = Match(LOCAL_ID);
			State = 12532;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1744,_ctx) ) {
			case 1:
				{
				State = 12531; Match(SEMI);
				}
				break;
			}
			State = 12546;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1747,_ctx) ) {
			case 1:
				{
				State = 12534; Match(WITH);
				State = 12541;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1745,_ctx) ) {
				case 1:
					{
					State = 12535; Match(ERROR);
					State = 12536; Match(EQUAL);
					State = 12537;
					_localctx.faliure_code = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						_localctx.faliure_code = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 12538; Match(DESCRIPTION);
					State = 12539; Match(EQUAL);
					State = 12540;
					_localctx.failure_text = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						_localctx.failure_text = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 12544;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1746,_ctx) ) {
				case 1:
					{
					State = 12543; Match(CLEANUP);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Waitfor_conversationContext : ParserRuleContext {
		public TimeContext timeout;
		public Get_conversationContext get_conversation() {
			return GetRuleContext<Get_conversationContext>(0);
		}
		public ITerminalNode WAITFOR() { return GetToken(TSqlParser.WAITFOR, 0); }
		public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		public Waitfor_conversationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitfor_conversation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWaitfor_conversation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWaitfor_conversation(this);
		}
	}

	[RuleVersion(0)]
	public Waitfor_conversationContext waitfor_conversation() {
		Waitfor_conversationContext _localctx = new Waitfor_conversationContext(_ctx, State);
		EnterRule(_localctx, 1126, RULE_waitfor_conversation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12549;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1748,_ctx) ) {
			case 1:
				{
				State = 12548; Match(WAITFOR);
				}
				break;
			}
			State = 12551; Match(LR_BRACKET);
			State = 12552; get_conversation();
			State = 12553; Match(RR_BRACKET);
			State = 12559;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1750,_ctx) ) {
			case 1:
				{
				State = 12555;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1749,_ctx) ) {
				case 1:
					{
					State = 12554; Match(COMMA);
					}
					break;
				}
				State = 12557; Match(TIMEOUT);
				State = 12558; _localctx.timeout = time();
				}
				break;
			}
			State = 12562;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1751,_ctx) ) {
			case 1:
				{
				State = 12561; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_conversationContext : ParserRuleContext {
		public IToken conversation_group_id;
		public Queue_idContext queue;
		public ITerminalNode GET() { return GetToken(TSqlParser.GET, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Queue_idContext queue_id() {
			return GetRuleContext<Queue_idContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Get_conversationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_conversation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGet_conversation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGet_conversation(this);
		}
	}

	[RuleVersion(0)]
	public Get_conversationContext get_conversation() {
		Get_conversationContext _localctx = new Get_conversationContext(_ctx, State);
		EnterRule(_localctx, 1128, RULE_get_conversation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12564; Match(GET);
			State = 12565; Match(CONVERSATION);
			State = 12566; Match(GROUP);
			State = 12567;
			_localctx.conversation_group_id = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
				_localctx.conversation_group_id = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 12568; Match(FROM);
			State = 12569; _localctx.queue = queue_id();
			State = 12571;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1752,_ctx) ) {
			case 1:
				{
				State = 12570; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Queue_idContext : ParserRuleContext {
		public Id_Context database_name;
		public Id_Context schema_name;
		public Id_Context name;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Queue_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queue_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQueue_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQueue_id(this);
		}
	}

	[RuleVersion(0)]
	public Queue_idContext queue_id() {
		Queue_idContext _localctx = new Queue_idContext(_ctx, State);
		EnterRule(_localctx, 1130, RULE_queue_id);
		try {
			State = 12580;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1753,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 12573; _localctx.database_name = id_();
				State = 12574; Match(DOT);
				State = 12575; _localctx.schema_name = id_();
				State = 12576; Match(DOT);
				State = 12577; _localctx.name = id_();
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12579; id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Send_conversationContext : ParserRuleContext {
		public IToken conversation_handle;
		public ExpressionContext message_type_name;
		public IToken message_body_expression;
		public ITerminalNode SEND() { return GetToken(TSqlParser.SEND, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public Send_conversationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_send_conversation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSend_conversation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSend_conversation(this);
		}
	}

	[RuleVersion(0)]
	public Send_conversationContext send_conversation() {
		Send_conversationContext _localctx = new Send_conversationContext(_ctx, State);
		EnterRule(_localctx, 1132, RULE_send_conversation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12582; Match(SEND);
			State = 12583; Match(ON);
			State = 12584; Match(CONVERSATION);
			State = 12585;
			_localctx.conversation_handle = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
				_localctx.conversation_handle = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 12586; Match(MESSAGE);
			State = 12587; Match(TYPE);
			State = 12588; _localctx.message_type_name = expression(0);
			State = 12592;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1754,_ctx) ) {
			case 1:
				{
				State = 12589; Match(LR_BRACKET);
				State = 12590;
				_localctx.message_body_expression = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==LOCAL_ID || _la==STRING) ) {
					_localctx.message_body_expression = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 12591; Match(RR_BRACKET);
				}
				break;
			}
			State = 12595;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1755,_ctx) ) {
			case 1:
				{
				State = 12594; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_typeContext : ParserRuleContext {
		public Id_Context scaled;
		public Id_Context ext_type;
		public IToken scale;
		public IToken prec;
		public IToken seed;
		public IToken inc;
		public IToken double_prec;
		public Id_Context unscaled_type;
		public ITerminalNode MAX() { return GetToken(TSqlParser.MAX, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		public ITerminalNode DOCUMENT() { return GetToken(TSqlParser.DOCUMENT, 0); }
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode DOUBLE() { return GetToken(TSqlParser.DOUBLE, 0); }
		public ITerminalNode PRECISION() { return GetToken(TSqlParser.PRECISION, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterData_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitData_type(this);
		}
	}

	[RuleVersion(0)]
	public Data_typeContext data_type() {
		Data_typeContext _localctx = new Data_typeContext(_ctx, State);
		EnterRule(_localctx, 1134, RULE_data_type);
		int _la;
		try {
			State = 12634;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1758,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12597; _localctx.scaled = id_();
				State = 12598; Match(LR_BRACKET);
				State = 12599; Match(MAX);
				State = 12600; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12602; _localctx.ext_type = id_();
				State = 12603; Match(LR_BRACKET);
				State = 12604; _localctx.scale = Match(DECIMAL);
				State = 12605; Match(COMMA);
				State = 12606; _localctx.prec = Match(DECIMAL);
				State = 12607; Match(RR_BRACKET);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 12609; _localctx.ext_type = id_();
				State = 12610; Match(LR_BRACKET);
				State = 12611; _localctx.scale = Match(DECIMAL);
				State = 12612; Match(RR_BRACKET);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 12614; _localctx.ext_type = id_();
				State = 12615; Match(LR_BRACKET);
				State = 12616;
				_la = _input.La(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 12617; table_name();
				State = 12618; Match(RR_BRACKET);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 12620; _localctx.ext_type = id_();
				State = 12621; Match(IDENTITY);
				State = 12627;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1756,_ctx) ) {
				case 1:
					{
					State = 12622; Match(LR_BRACKET);
					State = 12623; _localctx.seed = Match(DECIMAL);
					State = 12624; Match(COMMA);
					State = 12625; _localctx.inc = Match(DECIMAL);
					State = 12626; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 12629; _localctx.double_prec = Match(DOUBLE);
				State = 12631;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1757,_ctx) ) {
				case 1:
					{
					State = 12630; Match(PRECISION);
					}
					break;
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 12633; _localctx.unscaled_type = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_valueContext : ParserRuleContext {
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Default_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDefault_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDefault_value(this);
		}
	}

	[RuleVersion(0)]
	public Default_valueContext default_value() {
		Default_valueContext _localctx = new Default_valueContext(_ctx, State);
		EnterRule(_localctx, 1136, RULE_default_value);
		try {
			State = 12640;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1759,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12636; Match(NULL_);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12637; Match(DEFAULT);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 12638; constant();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 12639; id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public IToken dollar;
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public ITerminalNode REAL() { return GetToken(TSqlParser.REAL, 0); }
		public ITerminalNode FLOAT() { return GetToken(TSqlParser.FLOAT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 1138, RULE_constant);
		int _la;
		try {
			State = 12657;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1763,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12642; Match(STRING);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12643; Match(BINARY);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 12645;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1760,_ctx) ) {
				case 1:
					{
					State = 12644; sign();
					}
					break;
				}
				State = 12647; Match(DECIMAL);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 12649;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1761,_ctx) ) {
				case 1:
					{
					State = 12648; sign();
					}
					break;
				}
				State = 12651;
				_la = _input.La(1);
				if ( !(_la==FLOAT || _la==REAL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 12653;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1762,_ctx) ) {
				case 1:
					{
					State = 12652; sign();
					}
					break;
				}
				State = 12655; _localctx.dollar = Match(DOLLAR);
				State = 12656;
				_la = _input.La(1);
				if ( !(_la==DECIMAL || _la==FLOAT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignContext : ParserRuleContext {
		public SignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sign; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSign(this);
		}
	}

	[RuleVersion(0)]
	public SignContext sign() {
		SignContext _localctx = new SignContext(_ctx, State);
		EnterRule(_localctx, 1140, RULE_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12659;
			_la = _input.La(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode ABORT() { return GetToken(TSqlParser.ABORT, 0); }
		public ITerminalNode ABSOLUTE() { return GetToken(TSqlParser.ABSOLUTE, 0); }
		public ITerminalNode ACCENT_SENSITIVITY() { return GetToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		public ITerminalNode ACCESS() { return GetToken(TSqlParser.ACCESS, 0); }
		public ITerminalNode ACTION() { return GetToken(TSqlParser.ACTION, 0); }
		public ITerminalNode ACTIVATION() { return GetToken(TSqlParser.ACTIVATION, 0); }
		public ITerminalNode ACTIVE() { return GetToken(TSqlParser.ACTIVE, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode ADDRESS() { return GetToken(TSqlParser.ADDRESS, 0); }
		public ITerminalNode AES_128() { return GetToken(TSqlParser.AES_128, 0); }
		public ITerminalNode AES_192() { return GetToken(TSqlParser.AES_192, 0); }
		public ITerminalNode AES_256() { return GetToken(TSqlParser.AES_256, 0); }
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode AFTER() { return GetToken(TSqlParser.AFTER, 0); }
		public ITerminalNode AGGREGATE() { return GetToken(TSqlParser.AGGREGATE, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode ALL_CONSTRAINTS() { return GetToken(TSqlParser.ALL_CONSTRAINTS, 0); }
		public ITerminalNode ALL_ERRORMSGS() { return GetToken(TSqlParser.ALL_ERRORMSGS, 0); }
		public ITerminalNode ALL_INDEXES() { return GetToken(TSqlParser.ALL_INDEXES, 0); }
		public ITerminalNode ALL_LEVELS() { return GetToken(TSqlParser.ALL_LEVELS, 0); }
		public ITerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return GetToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, 0); }
		public ITerminalNode ALLOW_PAGE_LOCKS() { return GetToken(TSqlParser.ALLOW_PAGE_LOCKS, 0); }
		public ITerminalNode ALLOW_ROW_LOCKS() { return GetToken(TSqlParser.ALLOW_ROW_LOCKS, 0); }
		public ITerminalNode ALLOW_SNAPSHOT_ISOLATION() { return GetToken(TSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		public ITerminalNode ALLOWED() { return GetToken(TSqlParser.ALLOWED, 0); }
		public ITerminalNode ALWAYS() { return GetToken(TSqlParser.ALWAYS, 0); }
		public ITerminalNode ANSI_DEFAULTS() { return GetToken(TSqlParser.ANSI_DEFAULTS, 0); }
		public ITerminalNode ANSI_NULL_DEFAULT() { return GetToken(TSqlParser.ANSI_NULL_DEFAULT, 0); }
		public ITerminalNode ANSI_NULL_DFLT_OFF() { return GetToken(TSqlParser.ANSI_NULL_DFLT_OFF, 0); }
		public ITerminalNode ANSI_NULL_DFLT_ON() { return GetToken(TSqlParser.ANSI_NULL_DFLT_ON, 0); }
		public ITerminalNode ANSI_NULLS() { return GetToken(TSqlParser.ANSI_NULLS, 0); }
		public ITerminalNode ANSI_PADDING() { return GetToken(TSqlParser.ANSI_PADDING, 0); }
		public ITerminalNode ANSI_WARNINGS() { return GetToken(TSqlParser.ANSI_WARNINGS, 0); }
		public ITerminalNode APP_NAME() { return GetToken(TSqlParser.APP_NAME, 0); }
		public ITerminalNode APPLICATION_LOG() { return GetToken(TSqlParser.APPLICATION_LOG, 0); }
		public ITerminalNode APPLOCK_MODE() { return GetToken(TSqlParser.APPLOCK_MODE, 0); }
		public ITerminalNode APPLOCK_TEST() { return GetToken(TSqlParser.APPLOCK_TEST, 0); }
		public ITerminalNode APPLY() { return GetToken(TSqlParser.APPLY, 0); }
		public ITerminalNode ARITHABORT() { return GetToken(TSqlParser.ARITHABORT, 0); }
		public ITerminalNode ARITHIGNORE() { return GetToken(TSqlParser.ARITHIGNORE, 0); }
		public ITerminalNode ASCII() { return GetToken(TSqlParser.ASCII, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode ASSEMBLYPROPERTY() { return GetToken(TSqlParser.ASSEMBLYPROPERTY, 0); }
		public ITerminalNode AT_KEYWORD() { return GetToken(TSqlParser.AT_KEYWORD, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public ITerminalNode AUDIT_GUID() { return GetToken(TSqlParser.AUDIT_GUID, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode AUTO_CLEANUP() { return GetToken(TSqlParser.AUTO_CLEANUP, 0); }
		public ITerminalNode AUTO_CLOSE() { return GetToken(TSqlParser.AUTO_CLOSE, 0); }
		public ITerminalNode AUTO_CREATE_STATISTICS() { return GetToken(TSqlParser.AUTO_CREATE_STATISTICS, 0); }
		public ITerminalNode AUTO_DROP() { return GetToken(TSqlParser.AUTO_DROP, 0); }
		public ITerminalNode AUTO_SHRINK() { return GetToken(TSqlParser.AUTO_SHRINK, 0); }
		public ITerminalNode AUTO_UPDATE_STATISTICS() { return GetToken(TSqlParser.AUTO_UPDATE_STATISTICS, 0); }
		public ITerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return GetToken(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public ITerminalNode AUTOGROW_ALL_FILES() { return GetToken(TSqlParser.AUTOGROW_ALL_FILES, 0); }
		public ITerminalNode AUTOGROW_SINGLE_FILE() { return GetToken(TSqlParser.AUTOGROW_SINGLE_FILE, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode AVG() { return GetToken(TSqlParser.AVG, 0); }
		public ITerminalNode BACKUP_CLONEDB() { return GetToken(TSqlParser.BACKUP_CLONEDB, 0); }
		public ITerminalNode BACKUP_PRIORITY() { return GetToken(TSqlParser.BACKUP_PRIORITY, 0); }
		public ITerminalNode BASE64() { return GetToken(TSqlParser.BASE64, 0); }
		public ITerminalNode BEGIN_DIALOG() { return GetToken(TSqlParser.BEGIN_DIALOG, 0); }
		public ITerminalNode BIGINT() { return GetToken(TSqlParser.BIGINT, 0); }
		public ITerminalNode BINARY_BASE64() { return GetToken(TSqlParser.BINARY_BASE64, 0); }
		public ITerminalNode BINARY_CHECKSUM() { return GetToken(TSqlParser.BINARY_CHECKSUM, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode BLOB_STORAGE() { return GetToken(TSqlParser.BLOB_STORAGE, 0); }
		public ITerminalNode BROKER() { return GetToken(TSqlParser.BROKER, 0); }
		public ITerminalNode BROKER_INSTANCE() { return GetToken(TSqlParser.BROKER_INSTANCE, 0); }
		public ITerminalNode BULK_LOGGED() { return GetToken(TSqlParser.BULK_LOGGED, 0); }
		public ITerminalNode CALLER() { return GetToken(TSqlParser.CALLER, 0); }
		public ITerminalNode CAP_CPU_PERCENT() { return GetToken(TSqlParser.CAP_CPU_PERCENT, 0); }
		public ITerminalNode CAST() { return GetToken(TSqlParser.CAST, 0); }
		public ITerminalNode[] TRY_CAST() { return GetTokens(TSqlParser.TRY_CAST); }
		public ITerminalNode TRY_CAST(int i) {
			return GetToken(TSqlParser.TRY_CAST, i);
		}
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public ITerminalNode CATCH() { return GetToken(TSqlParser.CATCH, 0); }
		public ITerminalNode CERT_ID() { return GetToken(TSqlParser.CERT_ID, 0); }
		public ITerminalNode CERTENCODED() { return GetToken(TSqlParser.CERTENCODED, 0); }
		public ITerminalNode CERTPRIVATEKEY() { return GetToken(TSqlParser.CERTPRIVATEKEY, 0); }
		public ITerminalNode CHANGE() { return GetToken(TSqlParser.CHANGE, 0); }
		public ITerminalNode CHANGE_RETENTION() { return GetToken(TSqlParser.CHANGE_RETENTION, 0); }
		public ITerminalNode CHANGE_TRACKING() { return GetToken(TSqlParser.CHANGE_TRACKING, 0); }
		public ITerminalNode CHAR() { return GetToken(TSqlParser.CHAR, 0); }
		public ITerminalNode CHARINDEX() { return GetToken(TSqlParser.CHARINDEX, 0); }
		public ITerminalNode CHECKALLOC() { return GetToken(TSqlParser.CHECKALLOC, 0); }
		public ITerminalNode CHECKCATALOG() { return GetToken(TSqlParser.CHECKCATALOG, 0); }
		public ITerminalNode CHECKCONSTRAINTS() { return GetToken(TSqlParser.CHECKCONSTRAINTS, 0); }
		public ITerminalNode CHECKDB() { return GetToken(TSqlParser.CHECKDB, 0); }
		public ITerminalNode CHECKFILEGROUP() { return GetToken(TSqlParser.CHECKFILEGROUP, 0); }
		public ITerminalNode CHECKSUM() { return GetToken(TSqlParser.CHECKSUM, 0); }
		public ITerminalNode CHECKSUM_AGG() { return GetToken(TSqlParser.CHECKSUM_AGG, 0); }
		public ITerminalNode CHECKTABLE() { return GetToken(TSqlParser.CHECKTABLE, 0); }
		public ITerminalNode CLEANTABLE() { return GetToken(TSqlParser.CLEANTABLE, 0); }
		public ITerminalNode CLEANUP() { return GetToken(TSqlParser.CLEANUP, 0); }
		public ITerminalNode CLONEDATABASE() { return GetToken(TSqlParser.CLONEDATABASE, 0); }
		public ITerminalNode COL_LENGTH() { return GetToken(TSqlParser.COL_LENGTH, 0); }
		public ITerminalNode COL_NAME() { return GetToken(TSqlParser.COL_NAME, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public ITerminalNode COLUMN_ENCRYPTION_KEY() { return GetToken(TSqlParser.COLUMN_ENCRYPTION_KEY, 0); }
		public ITerminalNode COLUMN_MASTER_KEY() { return GetToken(TSqlParser.COLUMN_MASTER_KEY, 0); }
		public ITerminalNode COLUMNPROPERTY() { return GetToken(TSqlParser.COLUMNPROPERTY, 0); }
		public ITerminalNode COLUMNS() { return GetToken(TSqlParser.COLUMNS, 0); }
		public ITerminalNode COLUMNSTORE() { return GetToken(TSqlParser.COLUMNSTORE, 0); }
		public ITerminalNode COLUMNSTORE_ARCHIVE() { return GetToken(TSqlParser.COLUMNSTORE_ARCHIVE, 0); }
		public ITerminalNode COMMITTED() { return GetToken(TSqlParser.COMMITTED, 0); }
		public ITerminalNode COMPATIBILITY_LEVEL() { return GetToken(TSqlParser.COMPATIBILITY_LEVEL, 0); }
		public ITerminalNode COMPRESS_ALL_ROW_GROUPS() { return GetToken(TSqlParser.COMPRESS_ALL_ROW_GROUPS, 0); }
		public ITerminalNode COMPRESSION_DELAY() { return GetToken(TSqlParser.COMPRESSION_DELAY, 0); }
		public ITerminalNode CONCAT() { return GetToken(TSqlParser.CONCAT, 0); }
		public ITerminalNode CONCAT_WS() { return GetToken(TSqlParser.CONCAT_WS, 0); }
		public ITerminalNode CONCAT_NULL_YIELDS_NULL() { return GetToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		public ITerminalNode CONTROL() { return GetToken(TSqlParser.CONTROL, 0); }
		public ITerminalNode COOKIE() { return GetToken(TSqlParser.COOKIE, 0); }
		public ITerminalNode COUNT() { return GetToken(TSqlParser.COUNT, 0); }
		public ITerminalNode COUNT_BIG() { return GetToken(TSqlParser.COUNT_BIG, 0); }
		public ITerminalNode COUNTER() { return GetToken(TSqlParser.COUNTER, 0); }
		public ITerminalNode CPU() { return GetToken(TSqlParser.CPU, 0); }
		public ITerminalNode CREATE_NEW() { return GetToken(TSqlParser.CREATE_NEW, 0); }
		public ITerminalNode CREATION_DISPOSITION() { return GetToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode[] CUME_DIST() { return GetTokens(TSqlParser.CUME_DIST); }
		public ITerminalNode CUME_DIST(int i) {
			return GetToken(TSqlParser.CUME_DIST, i);
		}
		public ITerminalNode CURSOR_CLOSE_ON_COMMIT() { return GetToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public ITerminalNode CURSOR_DEFAULT() { return GetToken(TSqlParser.CURSOR_DEFAULT, 0); }
		public ITerminalNode CURSOR_STATUS() { return GetToken(TSqlParser.CURSOR_STATUS, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public ITerminalNode DATA_PURITY() { return GetToken(TSqlParser.DATA_PURITY, 0); }
		public ITerminalNode DATABASE_PRINCIPAL_ID() { return GetToken(TSqlParser.DATABASE_PRINCIPAL_ID, 0); }
		public ITerminalNode DATABASEPROPERTYEX() { return GetToken(TSqlParser.DATABASEPROPERTYEX, 0); }
		public ITerminalNode DATALENGTH() { return GetToken(TSqlParser.DATALENGTH, 0); }
		public ITerminalNode DATE_CORRELATION_OPTIMIZATION() { return GetToken(TSqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		public ITerminalNode DATEADD() { return GetToken(TSqlParser.DATEADD, 0); }
		public ITerminalNode DATEDIFF() { return GetToken(TSqlParser.DATEDIFF, 0); }
		public ITerminalNode DATENAME() { return GetToken(TSqlParser.DATENAME, 0); }
		public ITerminalNode DATEPART() { return GetToken(TSqlParser.DATEPART, 0); }
		public ITerminalNode DAYS() { return GetToken(TSqlParser.DAYS, 0); }
		public ITerminalNode DB_CHAINING() { return GetToken(TSqlParser.DB_CHAINING, 0); }
		public ITerminalNode DB_FAILOVER() { return GetToken(TSqlParser.DB_FAILOVER, 0); }
		public ITerminalNode DB_ID() { return GetToken(TSqlParser.DB_ID, 0); }
		public ITerminalNode DB_NAME() { return GetToken(TSqlParser.DB_NAME, 0); }
		public ITerminalNode DBCC() { return GetToken(TSqlParser.DBCC, 0); }
		public ITerminalNode DBREINDEX() { return GetToken(TSqlParser.DBREINDEX, 0); }
		public ITerminalNode DECRYPTION() { return GetToken(TSqlParser.DECRYPTION, 0); }
		public ITerminalNode DEFAULT_DOUBLE_QUOTE() { return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0); }
		public ITerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode DEFINITION() { return GetToken(TSqlParser.DEFINITION, 0); }
		public ITerminalNode DELAY() { return GetToken(TSqlParser.DELAY, 0); }
		public ITerminalNode DELAYED_DURABILITY() { return GetToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public ITerminalNode DELETED() { return GetToken(TSqlParser.DELETED, 0); }
		public ITerminalNode DENSE_RANK() { return GetToken(TSqlParser.DENSE_RANK, 0); }
		public ITerminalNode DEPENDENTS() { return GetToken(TSqlParser.DEPENDENTS, 0); }
		public ITerminalNode DES() { return GetToken(TSqlParser.DES, 0); }
		public ITerminalNode DESCRIPTION() { return GetToken(TSqlParser.DESCRIPTION, 0); }
		public ITerminalNode DESX() { return GetToken(TSqlParser.DESX, 0); }
		public ITerminalNode DETERMINISTIC() { return GetToken(TSqlParser.DETERMINISTIC, 0); }
		public ITerminalNode DHCP() { return GetToken(TSqlParser.DHCP, 0); }
		public ITerminalNode DIALOG() { return GetToken(TSqlParser.DIALOG, 0); }
		public ITerminalNode DIFFERENCE() { return GetToken(TSqlParser.DIFFERENCE, 0); }
		public ITerminalNode DIRECTORY_NAME() { return GetToken(TSqlParser.DIRECTORY_NAME, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode DISABLE_BROKER() { return GetToken(TSqlParser.DISABLE_BROKER, 0); }
		public ITerminalNode DISABLED() { return GetToken(TSqlParser.DISABLED, 0); }
		public ITerminalNode DISK_DRIVE() { return GetToken(TSqlParser.DISK_DRIVE, 0); }
		public ITerminalNode DOCUMENT() { return GetToken(TSqlParser.DOCUMENT, 0); }
		public ITerminalNode DROP_EXISTING() { return GetToken(TSqlParser.DROP_EXISTING, 0); }
		public ITerminalNode DROPCLEANBUFFERS() { return GetToken(TSqlParser.DROPCLEANBUFFERS, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(TSqlParser.DYNAMIC, 0); }
		public ITerminalNode ELEMENTS() { return GetToken(TSqlParser.ELEMENTS, 0); }
		public ITerminalNode EMERGENCY() { return GetToken(TSqlParser.EMERGENCY, 0); }
		public ITerminalNode EMPTY() { return GetToken(TSqlParser.EMPTY, 0); }
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode ENABLE_BROKER() { return GetToken(TSqlParser.ENABLE_BROKER, 0); }
		public ITerminalNode ENCRYPTED() { return GetToken(TSqlParser.ENCRYPTED, 0); }
		public ITerminalNode ENCRYPTED_VALUE() { return GetToken(TSqlParser.ENCRYPTED_VALUE, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode ENCRYPTION_TYPE() { return GetToken(TSqlParser.ENCRYPTION_TYPE, 0); }
		public ITerminalNode ENDPOINT_URL() { return GetToken(TSqlParser.ENDPOINT_URL, 0); }
		public ITerminalNode ERROR_BROKER_CONVERSATIONS() { return GetToken(TSqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
		public ITerminalNode ESTIMATEONLY() { return GetToken(TSqlParser.ESTIMATEONLY, 0); }
		public ITerminalNode EXCLUSIVE() { return GetToken(TSqlParser.EXCLUSIVE, 0); }
		public ITerminalNode EXECUTABLE() { return GetToken(TSqlParser.EXECUTABLE, 0); }
		public ITerminalNode EXIST() { return GetToken(TSqlParser.EXIST, 0); }
		public ITerminalNode EXIST_SQUARE_BRACKET() { return GetToken(TSqlParser.EXIST_SQUARE_BRACKET, 0); }
		public ITerminalNode EXPAND() { return GetToken(TSqlParser.EXPAND, 0); }
		public ITerminalNode EXPIRY_DATE() { return GetToken(TSqlParser.EXPIRY_DATE, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(TSqlParser.EXPLICIT, 0); }
		public ITerminalNode EXTENDED_LOGICAL_CHECKS() { return GetToken(TSqlParser.EXTENDED_LOGICAL_CHECKS, 0); }
		public ITerminalNode FAIL_OPERATION() { return GetToken(TSqlParser.FAIL_OPERATION, 0); }
		public ITerminalNode FAILOVER_MODE() { return GetToken(TSqlParser.FAILOVER_MODE, 0); }
		public ITerminalNode FAILURE() { return GetToken(TSqlParser.FAILURE, 0); }
		public ITerminalNode FAILURE_CONDITION_LEVEL() { return GetToken(TSqlParser.FAILURE_CONDITION_LEVEL, 0); }
		public ITerminalNode FAST() { return GetToken(TSqlParser.FAST, 0); }
		public ITerminalNode FAST_FORWARD() { return GetToken(TSqlParser.FAST_FORWARD, 0); }
		public ITerminalNode FILE_ID() { return GetToken(TSqlParser.FILE_ID, 0); }
		public ITerminalNode FILE_IDEX() { return GetToken(TSqlParser.FILE_IDEX, 0); }
		public ITerminalNode FILE_NAME() { return GetToken(TSqlParser.FILE_NAME, 0); }
		public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		public ITerminalNode FILEGROUP_ID() { return GetToken(TSqlParser.FILEGROUP_ID, 0); }
		public ITerminalNode FILEGROUP_NAME() { return GetToken(TSqlParser.FILEGROUP_NAME, 0); }
		public ITerminalNode FILEGROUPPROPERTY() { return GetToken(TSqlParser.FILEGROUPPROPERTY, 0); }
		public ITerminalNode FILEGROWTH() { return GetToken(TSqlParser.FILEGROWTH, 0); }
		public ITerminalNode[] FILENAME() { return GetTokens(TSqlParser.FILENAME); }
		public ITerminalNode FILENAME(int i) {
			return GetToken(TSqlParser.FILENAME, i);
		}
		public ITerminalNode FILEPATH() { return GetToken(TSqlParser.FILEPATH, 0); }
		public ITerminalNode FILEPROPERTY() { return GetToken(TSqlParser.FILEPROPERTY, 0); }
		public ITerminalNode FILEPROPERTYEX() { return GetToken(TSqlParser.FILEPROPERTYEX, 0); }
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public ITerminalNode FILLFACTOR() { return GetToken(TSqlParser.FILLFACTOR, 0); }
		public ITerminalNode FILTER() { return GetToken(TSqlParser.FILTER, 0); }
		public ITerminalNode FIRST() { return GetToken(TSqlParser.FIRST, 0); }
		public ITerminalNode FIRST_VALUE() { return GetToken(TSqlParser.FIRST_VALUE, 0); }
		public ITerminalNode FMTONLY() { return GetToken(TSqlParser.FMTONLY, 0); }
		public ITerminalNode FOLLOWING() { return GetToken(TSqlParser.FOLLOWING, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public ITerminalNode FORCE_FAILOVER_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode FORCED() { return GetToken(TSqlParser.FORCED, 0); }
		public ITerminalNode FORCEPLAN() { return GetToken(TSqlParser.FORCEPLAN, 0); }
		public ITerminalNode FORCESCAN() { return GetToken(TSqlParser.FORCESCAN, 0); }
		public ITerminalNode FORMAT() { return GetToken(TSqlParser.FORMAT, 0); }
		public ITerminalNode FORWARD_ONLY() { return GetToken(TSqlParser.FORWARD_ONLY, 0); }
		public ITerminalNode FREE() { return GetToken(TSqlParser.FREE, 0); }
		public ITerminalNode FULLSCAN() { return GetToken(TSqlParser.FULLSCAN, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode FULLTEXTCATALOGPROPERTY() { return GetToken(TSqlParser.FULLTEXTCATALOGPROPERTY, 0); }
		public ITerminalNode FULLTEXTSERVICEPROPERTY() { return GetToken(TSqlParser.FULLTEXTSERVICEPROPERTY, 0); }
		public ITerminalNode GB() { return GetToken(TSqlParser.GB, 0); }
		public ITerminalNode GENERATED() { return GetToken(TSqlParser.GENERATED, 0); }
		public ITerminalNode GETDATE() { return GetToken(TSqlParser.GETDATE, 0); }
		public ITerminalNode GETUTCDATE() { return GetToken(TSqlParser.GETUTCDATE, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public ITerminalNode GO() { return GetToken(TSqlParser.GO, 0); }
		public ITerminalNode GREATEST() { return GetToken(TSqlParser.GREATEST, 0); }
		public ITerminalNode GROUP_MAX_REQUESTS() { return GetToken(TSqlParser.GROUP_MAX_REQUESTS, 0); }
		public ITerminalNode GROUPING() { return GetToken(TSqlParser.GROUPING, 0); }
		public ITerminalNode GROUPING_ID() { return GetToken(TSqlParser.GROUPING_ID, 0); }
		public ITerminalNode HADR() { return GetToken(TSqlParser.HADR, 0); }
		public ITerminalNode HAS_DBACCESS() { return GetToken(TSqlParser.HAS_DBACCESS, 0); }
		public ITerminalNode HAS_PERMS_BY_NAME() { return GetToken(TSqlParser.HAS_PERMS_BY_NAME, 0); }
		public ITerminalNode HASH() { return GetToken(TSqlParser.HASH, 0); }
		public ITerminalNode HEALTH_CHECK_TIMEOUT() { return GetToken(TSqlParser.HEALTH_CHECK_TIMEOUT, 0); }
		public ITerminalNode HIDDEN_KEYWORD() { return GetToken(TSqlParser.HIDDEN_KEYWORD, 0); }
		public ITerminalNode HIGH() { return GetToken(TSqlParser.HIGH, 0); }
		public ITerminalNode HONOR_BROKER_PRIORITY() { return GetToken(TSqlParser.HONOR_BROKER_PRIORITY, 0); }
		public ITerminalNode HOURS() { return GetToken(TSqlParser.HOURS, 0); }
		public ITerminalNode IDENT_CURRENT() { return GetToken(TSqlParser.IDENT_CURRENT, 0); }
		public ITerminalNode IDENT_INCR() { return GetToken(TSqlParser.IDENT_INCR, 0); }
		public ITerminalNode IDENT_SEED() { return GetToken(TSqlParser.IDENT_SEED, 0); }
		public ITerminalNode IDENTITY_VALUE() { return GetToken(TSqlParser.IDENTITY_VALUE, 0); }
		public ITerminalNode IGNORE_CONSTRAINTS() { return GetToken(TSqlParser.IGNORE_CONSTRAINTS, 0); }
		public ITerminalNode IGNORE_DUP_KEY() { return GetToken(TSqlParser.IGNORE_DUP_KEY, 0); }
		public ITerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return GetToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public ITerminalNode IGNORE_REPLICATED_TABLE_CACHE() { return GetToken(TSqlParser.IGNORE_REPLICATED_TABLE_CACHE, 0); }
		public ITerminalNode IGNORE_TRIGGERS() { return GetToken(TSqlParser.IGNORE_TRIGGERS, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(TSqlParser.IMMEDIATE, 0); }
		public ITerminalNode IMPERSONATE() { return GetToken(TSqlParser.IMPERSONATE, 0); }
		public ITerminalNode IMPLICIT_TRANSACTIONS() { return GetToken(TSqlParser.IMPLICIT_TRANSACTIONS, 0); }
		public ITerminalNode IMPORTANCE() { return GetToken(TSqlParser.IMPORTANCE, 0); }
		public ITerminalNode INCLUDE_NULL_VALUES() { return GetToken(TSqlParser.INCLUDE_NULL_VALUES, 0); }
		public ITerminalNode INCREMENTAL() { return GetToken(TSqlParser.INCREMENTAL, 0); }
		public ITerminalNode INDEX_COL() { return GetToken(TSqlParser.INDEX_COL, 0); }
		public ITerminalNode INDEXKEY_PROPERTY() { return GetToken(TSqlParser.INDEXKEY_PROPERTY, 0); }
		public ITerminalNode INDEXPROPERTY() { return GetToken(TSqlParser.INDEXPROPERTY, 0); }
		public ITerminalNode INITIATOR() { return GetToken(TSqlParser.INITIATOR, 0); }
		public ITerminalNode INPUT() { return GetToken(TSqlParser.INPUT, 0); }
		public ITerminalNode INSENSITIVE() { return GetToken(TSqlParser.INSENSITIVE, 0); }
		public ITerminalNode INSERTED() { return GetToken(TSqlParser.INSERTED, 0); }
		public ITerminalNode INT() { return GetToken(TSqlParser.INT, 0); }
		public ITerminalNode IP() { return GetToken(TSqlParser.IP, 0); }
		public ITerminalNode IS_MEMBER() { return GetToken(TSqlParser.IS_MEMBER, 0); }
		public ITerminalNode IS_ROLEMEMBER() { return GetToken(TSqlParser.IS_ROLEMEMBER, 0); }
		public ITerminalNode IS_SRVROLEMEMBER() { return GetToken(TSqlParser.IS_SRVROLEMEMBER, 0); }
		public ITerminalNode ISJSON() { return GetToken(TSqlParser.ISJSON, 0); }
		public ITerminalNode ISOLATION() { return GetToken(TSqlParser.ISOLATION, 0); }
		public ITerminalNode JOB() { return GetToken(TSqlParser.JOB, 0); }
		public ITerminalNode JSON() { return GetToken(TSqlParser.JSON, 0); }
		public ITerminalNode JSON_OBJECT() { return GetToken(TSqlParser.JSON_OBJECT, 0); }
		public ITerminalNode JSON_ARRAY() { return GetToken(TSqlParser.JSON_ARRAY, 0); }
		public ITerminalNode JSON_VALUE() { return GetToken(TSqlParser.JSON_VALUE, 0); }
		public ITerminalNode JSON_QUERY() { return GetToken(TSqlParser.JSON_QUERY, 0); }
		public ITerminalNode JSON_MODIFY() { return GetToken(TSqlParser.JSON_MODIFY, 0); }
		public ITerminalNode JSON_PATH_EXISTS() { return GetToken(TSqlParser.JSON_PATH_EXISTS, 0); }
		public ITerminalNode KB() { return GetToken(TSqlParser.KB, 0); }
		public ITerminalNode KEEP() { return GetToken(TSqlParser.KEEP, 0); }
		public ITerminalNode KEEPDEFAULTS() { return GetToken(TSqlParser.KEEPDEFAULTS, 0); }
		public ITerminalNode KEEPFIXED() { return GetToken(TSqlParser.KEEPFIXED, 0); }
		public ITerminalNode KEEPIDENTITY() { return GetToken(TSqlParser.KEEPIDENTITY, 0); }
		public ITerminalNode KEY_SOURCE() { return GetToken(TSqlParser.KEY_SOURCE, 0); }
		public ITerminalNode KEYS() { return GetToken(TSqlParser.KEYS, 0); }
		public ITerminalNode KEYSET() { return GetToken(TSqlParser.KEYSET, 0); }
		public ITerminalNode LAG() { return GetToken(TSqlParser.LAG, 0); }
		public ITerminalNode LAST() { return GetToken(TSqlParser.LAST, 0); }
		public ITerminalNode LAST_VALUE() { return GetToken(TSqlParser.LAST_VALUE, 0); }
		public ITerminalNode LEAD() { return GetToken(TSqlParser.LEAD, 0); }
		public ITerminalNode LEAST() { return GetToken(TSqlParser.LEAST, 0); }
		public ITerminalNode LEN() { return GetToken(TSqlParser.LEN, 0); }
		public ITerminalNode LEVEL() { return GetToken(TSqlParser.LEVEL, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public ITerminalNode LISTENER() { return GetToken(TSqlParser.LISTENER, 0); }
		public ITerminalNode LISTENER_URL() { return GetToken(TSqlParser.LISTENER_URL, 0); }
		public ITerminalNode LOB_COMPACTION() { return GetToken(TSqlParser.LOB_COMPACTION, 0); }
		public ITerminalNode LOCAL() { return GetToken(TSqlParser.LOCAL, 0); }
		public ITerminalNode LOCATION() { return GetToken(TSqlParser.LOCATION, 0); }
		public ITerminalNode LOCK() { return GetToken(TSqlParser.LOCK, 0); }
		public ITerminalNode LOCK_ESCALATION() { return GetToken(TSqlParser.LOCK_ESCALATION, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode LOGINPROPERTY() { return GetToken(TSqlParser.LOGINPROPERTY, 0); }
		public ITerminalNode LOOP() { return GetToken(TSqlParser.LOOP, 0); }
		public ITerminalNode LOW() { return GetToken(TSqlParser.LOW, 0); }
		public ITerminalNode LOWER() { return GetToken(TSqlParser.LOWER, 0); }
		public ITerminalNode LTRIM() { return GetToken(TSqlParser.LTRIM, 0); }
		public ITerminalNode MANUAL() { return GetToken(TSqlParser.MANUAL, 0); }
		public ITerminalNode MARK() { return GetToken(TSqlParser.MARK, 0); }
		public ITerminalNode MASKED() { return GetToken(TSqlParser.MASKED, 0); }
		public ITerminalNode MATERIALIZED() { return GetToken(TSqlParser.MATERIALIZED, 0); }
		public ITerminalNode MAX() { return GetToken(TSqlParser.MAX, 0); }
		public ITerminalNode MAX_CPU_PERCENT() { return GetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public ITerminalNode MAX_DOP() { return GetToken(TSqlParser.MAX_DOP, 0); }
		public ITerminalNode MAX_FILES() { return GetToken(TSqlParser.MAX_FILES, 0); }
		public ITerminalNode MAX_IOPS_PER_VOLUME() { return GetToken(TSqlParser.MAX_IOPS_PER_VOLUME, 0); }
		public ITerminalNode MAX_MEMORY_PERCENT() { return GetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public ITerminalNode MAX_PROCESSES() { return GetToken(TSqlParser.MAX_PROCESSES, 0); }
		public ITerminalNode MAX_QUEUE_READERS() { return GetToken(TSqlParser.MAX_QUEUE_READERS, 0); }
		public ITerminalNode MAX_ROLLOVER_FILES() { return GetToken(TSqlParser.MAX_ROLLOVER_FILES, 0); }
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode MAXRECURSION() { return GetToken(TSqlParser.MAXRECURSION, 0); }
		public ITerminalNode MAXSIZE() { return GetToken(TSqlParser.MAXSIZE, 0); }
		public ITerminalNode MB() { return GetToken(TSqlParser.MB, 0); }
		public ITerminalNode MEDIUM() { return GetToken(TSqlParser.MEDIUM, 0); }
		public ITerminalNode MEMORY_OPTIMIZED_DATA() { return GetToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode MIN() { return GetToken(TSqlParser.MIN, 0); }
		public ITerminalNode MIN_ACTIVE_ROWVERSION() { return GetToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		public ITerminalNode MIN_CPU_PERCENT() { return GetToken(TSqlParser.MIN_CPU_PERCENT, 0); }
		public ITerminalNode MIN_IOPS_PER_VOLUME() { return GetToken(TSqlParser.MIN_IOPS_PER_VOLUME, 0); }
		public ITerminalNode MIN_MEMORY_PERCENT() { return GetToken(TSqlParser.MIN_MEMORY_PERCENT, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public ITerminalNode MIRROR_ADDRESS() { return GetToken(TSqlParser.MIRROR_ADDRESS, 0); }
		public ITerminalNode MIXED_PAGE_ALLOCATION() { return GetToken(TSqlParser.MIXED_PAGE_ALLOCATION, 0); }
		public ITerminalNode MODE() { return GetToken(TSqlParser.MODE, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode MODIFY_SQUARE_BRACKET() { return GetToken(TSqlParser.MODIFY_SQUARE_BRACKET, 0); }
		public ITerminalNode MOVE() { return GetToken(TSqlParser.MOVE, 0); }
		public ITerminalNode MULTI_USER() { return GetToken(TSqlParser.MULTI_USER, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode NCHAR() { return GetToken(TSqlParser.NCHAR, 0); }
		public ITerminalNode NESTED_TRIGGERS() { return GetToken(TSqlParser.NESTED_TRIGGERS, 0); }
		public ITerminalNode NEW_ACCOUNT() { return GetToken(TSqlParser.NEW_ACCOUNT, 0); }
		public ITerminalNode NEW_BROKER() { return GetToken(TSqlParser.NEW_BROKER, 0); }
		public ITerminalNode NEW_PASSWORD() { return GetToken(TSqlParser.NEW_PASSWORD, 0); }
		public ITerminalNode NEWNAME() { return GetToken(TSqlParser.NEWNAME, 0); }
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public ITerminalNode NO_QUERYSTORE() { return GetToken(TSqlParser.NO_QUERYSTORE, 0); }
		public ITerminalNode NO_STATISTICS() { return GetToken(TSqlParser.NO_STATISTICS, 0); }
		public ITerminalNode NO_TRUNCATE() { return GetToken(TSqlParser.NO_TRUNCATE, 0); }
		public ITerminalNode NO_WAIT() { return GetToken(TSqlParser.NO_WAIT, 0); }
		public ITerminalNode NOCOUNT() { return GetToken(TSqlParser.NOCOUNT, 0); }
		public ITerminalNode NODES() { return GetToken(TSqlParser.NODES, 0); }
		public ITerminalNode NOEXEC() { return GetToken(TSqlParser.NOEXEC, 0); }
		public ITerminalNode NOEXPAND() { return GetToken(TSqlParser.NOEXPAND, 0); }
		public ITerminalNode NOINDEX() { return GetToken(TSqlParser.NOINDEX, 0); }
		public ITerminalNode NOLOCK() { return GetToken(TSqlParser.NOLOCK, 0); }
		public ITerminalNode NON_TRANSACTED_ACCESS() { return GetToken(TSqlParser.NON_TRANSACTED_ACCESS, 0); }
		public ITerminalNode NORECOMPUTE() { return GetToken(TSqlParser.NORECOMPUTE, 0); }
		public ITerminalNode NORECOVERY() { return GetToken(TSqlParser.NORECOVERY, 0); }
		public ITerminalNode NOTIFICATIONS() { return GetToken(TSqlParser.NOTIFICATIONS, 0); }
		public ITerminalNode NOWAIT() { return GetToken(TSqlParser.NOWAIT, 0); }
		public ITerminalNode NTILE() { return GetToken(TSqlParser.NTILE, 0); }
		public ITerminalNode NULL_DOUBLE_QUOTE() { return GetToken(TSqlParser.NULL_DOUBLE_QUOTE, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public ITerminalNode NUMBER() { return GetToken(TSqlParser.NUMBER, 0); }
		public ITerminalNode NUMERIC_ROUNDABORT() { return GetToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode OBJECT_DEFINITION() { return GetToken(TSqlParser.OBJECT_DEFINITION, 0); }
		public ITerminalNode OBJECT_ID() { return GetToken(TSqlParser.OBJECT_ID, 0); }
		public ITerminalNode OBJECT_NAME() { return GetToken(TSqlParser.OBJECT_NAME, 0); }
		public ITerminalNode OBJECT_SCHEMA_NAME() { return GetToken(TSqlParser.OBJECT_SCHEMA_NAME, 0); }
		public ITerminalNode OBJECTPROPERTY() { return GetToken(TSqlParser.OBJECTPROPERTY, 0); }
		public ITerminalNode OBJECTPROPERTYEX() { return GetToken(TSqlParser.OBJECTPROPERTYEX, 0); }
		public ITerminalNode OFFLINE() { return GetToken(TSqlParser.OFFLINE, 0); }
		public ITerminalNode OFFSET() { return GetToken(TSqlParser.OFFSET, 0); }
		public ITerminalNode OLD_ACCOUNT() { return GetToken(TSqlParser.OLD_ACCOUNT, 0); }
		public ITerminalNode ONLINE() { return GetToken(TSqlParser.ONLINE, 0); }
		public ITerminalNode ONLY() { return GetToken(TSqlParser.ONLY, 0); }
		public ITerminalNode OPEN_EXISTING() { return GetToken(TSqlParser.OPEN_EXISTING, 0); }
		public ITerminalNode OPENJSON() { return GetToken(TSqlParser.OPENJSON, 0); }
		public ITerminalNode OPTIMISTIC() { return GetToken(TSqlParser.OPTIMISTIC, 0); }
		public ITerminalNode OPTIMIZE() { return GetToken(TSqlParser.OPTIMIZE, 0); }
		public ITerminalNode OPTIMIZE_FOR_SEQUENTIAL_KEY() { return GetToken(TSqlParser.OPTIMIZE_FOR_SEQUENTIAL_KEY, 0); }
		public ITerminalNode ORIGINAL_DB_NAME() { return GetToken(TSqlParser.ORIGINAL_DB_NAME, 0); }
		public ITerminalNode ORIGINAL_LOGIN() { return GetToken(TSqlParser.ORIGINAL_LOGIN, 0); }
		public ITerminalNode OUT() { return GetToken(TSqlParser.OUT, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(TSqlParser.OVERRIDE, 0); }
		public ITerminalNode OWNER() { return GetToken(TSqlParser.OWNER, 0); }
		public ITerminalNode OWNERSHIP() { return GetToken(TSqlParser.OWNERSHIP, 0); }
		public ITerminalNode PAD_INDEX() { return GetToken(TSqlParser.PAD_INDEX, 0); }
		public ITerminalNode PAGE_VERIFY() { return GetToken(TSqlParser.PAGE_VERIFY, 0); }
		public ITerminalNode PAGECOUNT() { return GetToken(TSqlParser.PAGECOUNT, 0); }
		public ITerminalNode PAGLOCK() { return GetToken(TSqlParser.PAGLOCK, 0); }
		public ITerminalNode PARAMETERIZATION() { return GetToken(TSqlParser.PARAMETERIZATION, 0); }
		public ITerminalNode PARSENAME() { return GetToken(TSqlParser.PARSENAME, 0); }
		public ITerminalNode PARSEONLY() { return GetToken(TSqlParser.PARSEONLY, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode PARTITIONS() { return GetToken(TSqlParser.PARTITIONS, 0); }
		public ITerminalNode PARTNER() { return GetToken(TSqlParser.PARTNER, 0); }
		public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		public ITerminalNode PATINDEX() { return GetToken(TSqlParser.PATINDEX, 0); }
		public ITerminalNode PAUSE() { return GetToken(TSqlParser.PAUSE, 0); }
		public ITerminalNode PDW_SHOWSPACEUSED() { return GetToken(TSqlParser.PDW_SHOWSPACEUSED, 0); }
		public ITerminalNode[] PERCENT_RANK() { return GetTokens(TSqlParser.PERCENT_RANK); }
		public ITerminalNode PERCENT_RANK(int i) {
			return GetToken(TSqlParser.PERCENT_RANK, i);
		}
		public ITerminalNode[] PERCENTILE_CONT() { return GetTokens(TSqlParser.PERCENTILE_CONT); }
		public ITerminalNode PERCENTILE_CONT(int i) {
			return GetToken(TSqlParser.PERCENTILE_CONT, i);
		}
		public ITerminalNode[] PERCENTILE_DISC() { return GetTokens(TSqlParser.PERCENTILE_DISC); }
		public ITerminalNode PERCENTILE_DISC(int i) {
			return GetToken(TSqlParser.PERCENTILE_DISC, i);
		}
		public ITerminalNode PERMISSIONS() { return GetToken(TSqlParser.PERMISSIONS, 0); }
		public ITerminalNode PERSIST_SAMPLE_PERCENT() { return GetToken(TSqlParser.PERSIST_SAMPLE_PERCENT, 0); }
		public ITerminalNode PHYSICAL_ONLY() { return GetToken(TSqlParser.PHYSICAL_ONLY, 0); }
		public ITerminalNode POISON_MESSAGE_HANDLING() { return GetToken(TSqlParser.POISON_MESSAGE_HANDLING, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public ITerminalNode PORT() { return GetToken(TSqlParser.PORT, 0); }
		public ITerminalNode PRECEDING() { return GetToken(TSqlParser.PRECEDING, 0); }
		public ITerminalNode PRIMARY_ROLE() { return GetToken(TSqlParser.PRIMARY_ROLE, 0); }
		public ITerminalNode PRIOR() { return GetToken(TSqlParser.PRIOR, 0); }
		public ITerminalNode PRIORITY() { return GetToken(TSqlParser.PRIORITY, 0); }
		public ITerminalNode PRIORITY_LEVEL() { return GetToken(TSqlParser.PRIORITY_LEVEL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode PRIVATE_KEY() { return GetToken(TSqlParser.PRIVATE_KEY, 0); }
		public ITerminalNode PRIVILEGES() { return GetToken(TSqlParser.PRIVILEGES, 0); }
		public ITerminalNode PROCCACHE() { return GetToken(TSqlParser.PROCCACHE, 0); }
		public ITerminalNode PROCEDURE_NAME() { return GetToken(TSqlParser.PROCEDURE_NAME, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode PROVIDER_KEY_NAME() { return GetToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public ITerminalNode PWDCOMPARE() { return GetToken(TSqlParser.PWDCOMPARE, 0); }
		public ITerminalNode PWDENCRYPT() { return GetToken(TSqlParser.PWDENCRYPT, 0); }
		public ITerminalNode QUERY() { return GetToken(TSqlParser.QUERY, 0); }
		public ITerminalNode QUERY_SQUARE_BRACKET() { return GetToken(TSqlParser.QUERY_SQUARE_BRACKET, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public ITerminalNode QUEUE_DELAY() { return GetToken(TSqlParser.QUEUE_DELAY, 0); }
		public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public ITerminalNode QUOTENAME() { return GetToken(TSqlParser.QUOTENAME, 0); }
		public ITerminalNode RANDOMIZED() { return GetToken(TSqlParser.RANDOMIZED, 0); }
		public ITerminalNode RANGE() { return GetToken(TSqlParser.RANGE, 0); }
		public ITerminalNode RANK() { return GetToken(TSqlParser.RANK, 0); }
		public ITerminalNode RC2() { return GetToken(TSqlParser.RC2, 0); }
		public ITerminalNode RC4() { return GetToken(TSqlParser.RC4, 0); }
		public ITerminalNode RC4_128() { return GetToken(TSqlParser.RC4_128, 0); }
		public ITerminalNode READ_COMMITTED_SNAPSHOT() { return GetToken(TSqlParser.READ_COMMITTED_SNAPSHOT, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode READ_ONLY_ROUTING_LIST() { return GetToken(TSqlParser.READ_ONLY_ROUTING_LIST, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(TSqlParser.READ_WRITE, 0); }
		public ITerminalNode READCOMMITTED() { return GetToken(TSqlParser.READCOMMITTED, 0); }
		public ITerminalNode READCOMMITTEDLOCK() { return GetToken(TSqlParser.READCOMMITTEDLOCK, 0); }
		public ITerminalNode READONLY() { return GetToken(TSqlParser.READONLY, 0); }
		public ITerminalNode READPAST() { return GetToken(TSqlParser.READPAST, 0); }
		public ITerminalNode READUNCOMMITTED() { return GetToken(TSqlParser.READUNCOMMITTED, 0); }
		public ITerminalNode READWRITE() { return GetToken(TSqlParser.READWRITE, 0); }
		public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		public ITerminalNode RECEIVE() { return GetToken(TSqlParser.RECEIVE, 0); }
		public ITerminalNode RECOMPILE() { return GetToken(TSqlParser.RECOMPILE, 0); }
		public ITerminalNode RECOVERY() { return GetToken(TSqlParser.RECOVERY, 0); }
		public ITerminalNode RECURSIVE_TRIGGERS() { return GetToken(TSqlParser.RECURSIVE_TRIGGERS, 0); }
		public ITerminalNode RELATIVE() { return GetToken(TSqlParser.RELATIVE, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode REMOTE_PROC_TRANSACTIONS() { return GetToken(TSqlParser.REMOTE_PROC_TRANSACTIONS, 0); }
		public ITerminalNode REMOTE_SERVICE_NAME() { return GetToken(TSqlParser.REMOTE_SERVICE_NAME, 0); }
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode REORGANIZE() { return GetToken(TSqlParser.REORGANIZE, 0); }
		public ITerminalNode REPAIR_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.REPAIR_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode REPAIR_FAST() { return GetToken(TSqlParser.REPAIR_FAST, 0); }
		public ITerminalNode REPAIR_REBUILD() { return GetToken(TSqlParser.REPAIR_REBUILD, 0); }
		public ITerminalNode REPEATABLE() { return GetToken(TSqlParser.REPEATABLE, 0); }
		public ITerminalNode REPEATABLEREAD() { return GetToken(TSqlParser.REPEATABLEREAD, 0); }
		public ITerminalNode REPLACE() { return GetToken(TSqlParser.REPLACE, 0); }
		public ITerminalNode REPLICA() { return GetToken(TSqlParser.REPLICA, 0); }
		public ITerminalNode REPLICATE() { return GetToken(TSqlParser.REPLICATE, 0); }
		public ITerminalNode REQUEST_MAX_CPU_TIME_SEC() { return GetToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, 0); }
		public ITerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT() { return GetToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, 0); }
		public ITerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return GetToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, 0); }
		public ITerminalNode REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT() { return GetToken(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0); }
		public ITerminalNode RESAMPLE() { return GetToken(TSqlParser.RESAMPLE, 0); }
		public ITerminalNode RESERVE_DISK_SPACE() { return GetToken(TSqlParser.RESERVE_DISK_SPACE, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode RESOURCE_MANAGER_LOCATION() { return GetToken(TSqlParser.RESOURCE_MANAGER_LOCATION, 0); }
		public ITerminalNode RESTRICTED_USER() { return GetToken(TSqlParser.RESTRICTED_USER, 0); }
		public ITerminalNode RESUMABLE() { return GetToken(TSqlParser.RESUMABLE, 0); }
		public ITerminalNode RETENTION() { return GetToken(TSqlParser.RETENTION, 0); }
		public ITerminalNode REVERSE() { return GetToken(TSqlParser.REVERSE, 0); }
		public ITerminalNode ROBUST() { return GetToken(TSqlParser.ROBUST, 0); }
		public ITerminalNode ROOT() { return GetToken(TSqlParser.ROOT, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		public ITerminalNode ROW_NUMBER() { return GetToken(TSqlParser.ROW_NUMBER, 0); }
		public ITerminalNode ROWGUID() { return GetToken(TSqlParser.ROWGUID, 0); }
		public ITerminalNode ROWLOCK() { return GetToken(TSqlParser.ROWLOCK, 0); }
		public ITerminalNode ROWS() { return GetToken(TSqlParser.ROWS, 0); }
		public ITerminalNode RTRIM() { return GetToken(TSqlParser.RTRIM, 0); }
		public ITerminalNode SAMPLE() { return GetToken(TSqlParser.SAMPLE, 0); }
		public ITerminalNode SCHEMA_ID() { return GetToken(TSqlParser.SCHEMA_ID, 0); }
		public ITerminalNode SCHEMA_NAME() { return GetToken(TSqlParser.SCHEMA_NAME, 0); }
		public ITerminalNode SCHEMABINDING() { return GetToken(TSqlParser.SCHEMABINDING, 0); }
		public ITerminalNode SCOPE_IDENTITY() { return GetToken(TSqlParser.SCOPE_IDENTITY, 0); }
		public ITerminalNode SCOPED() { return GetToken(TSqlParser.SCOPED, 0); }
		public ITerminalNode SCROLL() { return GetToken(TSqlParser.SCROLL, 0); }
		public ITerminalNode SCROLL_LOCKS() { return GetToken(TSqlParser.SCROLL_LOCKS, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode SECONDARY() { return GetToken(TSqlParser.SECONDARY, 0); }
		public ITerminalNode SECONDARY_ONLY() { return GetToken(TSqlParser.SECONDARY_ONLY, 0); }
		public ITerminalNode SECONDARY_ROLE() { return GetToken(TSqlParser.SECONDARY_ROLE, 0); }
		public ITerminalNode SECONDS() { return GetToken(TSqlParser.SECONDS, 0); }
		public ITerminalNode SECRET() { return GetToken(TSqlParser.SECRET, 0); }
		public ITerminalNode SECURABLES() { return GetToken(TSqlParser.SECURABLES, 0); }
		public ITerminalNode SECURITY() { return GetToken(TSqlParser.SECURITY, 0); }
		public ITerminalNode SECURITY_LOG() { return GetToken(TSqlParser.SECURITY_LOG, 0); }
		public ITerminalNode SEEDING_MODE() { return GetToken(TSqlParser.SEEDING_MODE, 0); }
		public ITerminalNode SELF() { return GetToken(TSqlParser.SELF, 0); }
		public ITerminalNode SEMI_SENSITIVE() { return GetToken(TSqlParser.SEMI_SENSITIVE, 0); }
		public ITerminalNode SEND() { return GetToken(TSqlParser.SEND, 0); }
		public ITerminalNode SENT() { return GetToken(TSqlParser.SENT, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		public ITerminalNode SEQUENCE_NUMBER() { return GetToken(TSqlParser.SEQUENCE_NUMBER, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(TSqlParser.SERIALIZABLE, 0); }
		public ITerminalNode SERVERPROPERTY() { return GetToken(TSqlParser.SERVERPROPERTY, 0); }
		public ITerminalNode SERVICEBROKER() { return GetToken(TSqlParser.SERVICEBROKER, 0); }
		public ITerminalNode SESSIONPROPERTY() { return GetToken(TSqlParser.SESSIONPROPERTY, 0); }
		public ITerminalNode SESSION_TIMEOUT() { return GetToken(TSqlParser.SESSION_TIMEOUT, 0); }
		public ITerminalNode SETERROR() { return GetToken(TSqlParser.SETERROR, 0); }
		public ITerminalNode SHARE() { return GetToken(TSqlParser.SHARE, 0); }
		public ITerminalNode SHARED() { return GetToken(TSqlParser.SHARED, 0); }
		public ITerminalNode SHOWCONTIG() { return GetToken(TSqlParser.SHOWCONTIG, 0); }
		public ITerminalNode SHOWPLAN() { return GetToken(TSqlParser.SHOWPLAN, 0); }
		public ITerminalNode SHOWPLAN_ALL() { return GetToken(TSqlParser.SHOWPLAN_ALL, 0); }
		public ITerminalNode SHOWPLAN_TEXT() { return GetToken(TSqlParser.SHOWPLAN_TEXT, 0); }
		public ITerminalNode SHOWPLAN_XML() { return GetToken(TSqlParser.SHOWPLAN_XML, 0); }
		public ITerminalNode SIGNATURE() { return GetToken(TSqlParser.SIGNATURE, 0); }
		public ITerminalNode SIMPLE() { return GetToken(TSqlParser.SIMPLE, 0); }
		public ITerminalNode SINGLE_USER() { return GetToken(TSqlParser.SINGLE_USER, 0); }
		public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		public ITerminalNode SMALLINT() { return GetToken(TSqlParser.SMALLINT, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(TSqlParser.SNAPSHOT, 0); }
		public ITerminalNode SORT_IN_TEMPDB() { return GetToken(TSqlParser.SORT_IN_TEMPDB, 0); }
		public ITerminalNode SOUNDEX() { return GetToken(TSqlParser.SOUNDEX, 0); }
		public ITerminalNode SPACE_KEYWORD() { return GetToken(TSqlParser.SPACE_KEYWORD, 0); }
		public ITerminalNode SPARSE() { return GetToken(TSqlParser.SPARSE, 0); }
		public ITerminalNode SPATIAL_WINDOW_MAX_CELLS() { return GetToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public ITerminalNode SQL_VARIANT_PROPERTY() { return GetToken(TSqlParser.SQL_VARIANT_PROPERTY, 0); }
		public ITerminalNode STANDBY() { return GetToken(TSqlParser.STANDBY, 0); }
		public ITerminalNode START_DATE() { return GetToken(TSqlParser.START_DATE, 0); }
		public ITerminalNode STATIC() { return GetToken(TSqlParser.STATIC, 0); }
		public ITerminalNode STATISTICS_INCREMENTAL() { return GetToken(TSqlParser.STATISTICS_INCREMENTAL, 0); }
		public ITerminalNode STATISTICS_NORECOMPUTE() { return GetToken(TSqlParser.STATISTICS_NORECOMPUTE, 0); }
		public ITerminalNode STATS_DATE() { return GetToken(TSqlParser.STATS_DATE, 0); }
		public ITerminalNode STATS_STREAM() { return GetToken(TSqlParser.STATS_STREAM, 0); }
		public ITerminalNode STATUS() { return GetToken(TSqlParser.STATUS, 0); }
		public ITerminalNode STATUSONLY() { return GetToken(TSqlParser.STATUSONLY, 0); }
		public ITerminalNode STDEV() { return GetToken(TSqlParser.STDEV, 0); }
		public ITerminalNode STDEVP() { return GetToken(TSqlParser.STDEVP, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public ITerminalNode STR() { return GetToken(TSqlParser.STR, 0); }
		public ITerminalNode STRING_AGG() { return GetToken(TSqlParser.STRING_AGG, 0); }
		public ITerminalNode STRING_ESCAPE() { return GetToken(TSqlParser.STRING_ESCAPE, 0); }
		public ITerminalNode STUFF() { return GetToken(TSqlParser.STUFF, 0); }
		public ITerminalNode SUBJECT() { return GetToken(TSqlParser.SUBJECT, 0); }
		public ITerminalNode SUBSCRIBE() { return GetToken(TSqlParser.SUBSCRIBE, 0); }
		public ITerminalNode SUBSCRIPTION() { return GetToken(TSqlParser.SUBSCRIPTION, 0); }
		public ITerminalNode SUBSTRING() { return GetToken(TSqlParser.SUBSTRING, 0); }
		public ITerminalNode SUM() { return GetToken(TSqlParser.SUM, 0); }
		public ITerminalNode SUSER_ID() { return GetToken(TSqlParser.SUSER_ID, 0); }
		public ITerminalNode SUSER_NAME() { return GetToken(TSqlParser.SUSER_NAME, 0); }
		public ITerminalNode SUSER_SID() { return GetToken(TSqlParser.SUSER_SID, 0); }
		public ITerminalNode SUSER_SNAME() { return GetToken(TSqlParser.SUSER_SNAME, 0); }
		public ITerminalNode SUSPEND() { return GetToken(TSqlParser.SUSPEND, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode SYNCHRONOUS_COMMIT() { return GetToken(TSqlParser.SYNCHRONOUS_COMMIT, 0); }
		public ITerminalNode SYNONYM() { return GetToken(TSqlParser.SYNONYM, 0); }
		public ITerminalNode SYSTEM() { return GetToken(TSqlParser.SYSTEM, 0); }
		public ITerminalNode TABLERESULTS() { return GetToken(TSqlParser.TABLERESULTS, 0); }
		public ITerminalNode TABLOCK() { return GetToken(TSqlParser.TABLOCK, 0); }
		public ITerminalNode TABLOCKX() { return GetToken(TSqlParser.TABLOCKX, 0); }
		public ITerminalNode TAKE() { return GetToken(TSqlParser.TAKE, 0); }
		public ITerminalNode TARGET_RECOVERY_TIME() { return GetToken(TSqlParser.TARGET_RECOVERY_TIME, 0); }
		public ITerminalNode TB() { return GetToken(TSqlParser.TB, 0); }
		public ITerminalNode TEXTIMAGE_ON() { return GetToken(TSqlParser.TEXTIMAGE_ON, 0); }
		public ITerminalNode THROW() { return GetToken(TSqlParser.THROW, 0); }
		public ITerminalNode TIES() { return GetToken(TSqlParser.TIES, 0); }
		public ITerminalNode TIME() { return GetToken(TSqlParser.TIME, 0); }
		public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public ITerminalNode TIMER() { return GetToken(TSqlParser.TIMER, 0); }
		public ITerminalNode TINYINT() { return GetToken(TSqlParser.TINYINT, 0); }
		public ITerminalNode TORN_PAGE_DETECTION() { return GetToken(TSqlParser.TORN_PAGE_DETECTION, 0); }
		public ITerminalNode TRACKING() { return GetToken(TSqlParser.TRACKING, 0); }
		public ITerminalNode TRANSACTION_ID() { return GetToken(TSqlParser.TRANSACTION_ID, 0); }
		public ITerminalNode TRANSFORM_NOISE_WORDS() { return GetToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public ITerminalNode TRANSLATE() { return GetToken(TSqlParser.TRANSLATE, 0); }
		public ITerminalNode TRIM() { return GetToken(TSqlParser.TRIM, 0); }
		public ITerminalNode TRIPLE_DES() { return GetToken(TSqlParser.TRIPLE_DES, 0); }
		public ITerminalNode TRIPLE_DES_3KEY() { return GetToken(TSqlParser.TRIPLE_DES_3KEY, 0); }
		public ITerminalNode TRUSTWORTHY() { return GetToken(TSqlParser.TRUSTWORTHY, 0); }
		public ITerminalNode TRY() { return GetToken(TSqlParser.TRY, 0); }
		public ITerminalNode TSQL() { return GetToken(TSqlParser.TSQL, 0); }
		public ITerminalNode TWO_DIGIT_YEAR_CUTOFF() { return GetToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode TYPE_ID() { return GetToken(TSqlParser.TYPE_ID, 0); }
		public ITerminalNode TYPE_NAME() { return GetToken(TSqlParser.TYPE_NAME, 0); }
		public ITerminalNode TYPE_WARNING() { return GetToken(TSqlParser.TYPE_WARNING, 0); }
		public ITerminalNode TYPEPROPERTY() { return GetToken(TSqlParser.TYPEPROPERTY, 0); }
		public ITerminalNode UNBOUNDED() { return GetToken(TSqlParser.UNBOUNDED, 0); }
		public ITerminalNode UNCOMMITTED() { return GetToken(TSqlParser.UNCOMMITTED, 0); }
		public ITerminalNode UNICODE() { return GetToken(TSqlParser.UNICODE, 0); }
		public ITerminalNode UNKNOWN() { return GetToken(TSqlParser.UNKNOWN, 0); }
		public ITerminalNode UNLIMITED() { return GetToken(TSqlParser.UNLIMITED, 0); }
		public ITerminalNode UNMASK() { return GetToken(TSqlParser.UNMASK, 0); }
		public ITerminalNode UOW() { return GetToken(TSqlParser.UOW, 0); }
		public ITerminalNode UPDLOCK() { return GetToken(TSqlParser.UPDLOCK, 0); }
		public ITerminalNode UPPER() { return GetToken(TSqlParser.UPPER, 0); }
		public ITerminalNode USER_ID() { return GetToken(TSqlParser.USER_ID, 0); }
		public ITerminalNode USER_NAME() { return GetToken(TSqlParser.USER_NAME, 0); }
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public ITerminalNode VALID_XML() { return GetToken(TSqlParser.VALID_XML, 0); }
		public ITerminalNode VALIDATION() { return GetToken(TSqlParser.VALIDATION, 0); }
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ITerminalNode VALUE_SQUARE_BRACKET() { return GetToken(TSqlParser.VALUE_SQUARE_BRACKET, 0); }
		public ITerminalNode VAR() { return GetToken(TSqlParser.VAR, 0); }
		public ITerminalNode[] VARBINARY_KEYWORD() { return GetTokens(TSqlParser.VARBINARY_KEYWORD); }
		public ITerminalNode VARBINARY_KEYWORD(int i) {
			return GetToken(TSqlParser.VARBINARY_KEYWORD, i);
		}
		public ITerminalNode VARP() { return GetToken(TSqlParser.VARP, 0); }
		public ITerminalNode VERIFY_CLONEDB() { return GetToken(TSqlParser.VERIFY_CLONEDB, 0); }
		public ITerminalNode VERSION() { return GetToken(TSqlParser.VERSION, 0); }
		public ITerminalNode VIEW_METADATA() { return GetToken(TSqlParser.VIEW_METADATA, 0); }
		public ITerminalNode VIEWS() { return GetToken(TSqlParser.VIEWS, 0); }
		public ITerminalNode WAIT() { return GetToken(TSqlParser.WAIT, 0); }
		public ITerminalNode WELL_FORMED_XML() { return GetToken(TSqlParser.WELL_FORMED_XML, 0); }
		public ITerminalNode WITHOUT_ARRAY_WRAPPER() { return GetToken(TSqlParser.WITHOUT_ARRAY_WRAPPER, 0); }
		public ITerminalNode WORK() { return GetToken(TSqlParser.WORK, 0); }
		public ITerminalNode WORKLOAD() { return GetToken(TSqlParser.WORKLOAD, 0); }
		public ITerminalNode XLOCK() { return GetToken(TSqlParser.XLOCK, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode XML_COMPRESSION() { return GetToken(TSqlParser.XML_COMPRESSION, 0); }
		public ITerminalNode XMLDATA() { return GetToken(TSqlParser.XMLDATA, 0); }
		public ITerminalNode XMLNAMESPACES() { return GetToken(TSqlParser.XMLNAMESPACES, 0); }
		public ITerminalNode XMLSCHEMA() { return GetToken(TSqlParser.XMLSCHEMA, 0); }
		public ITerminalNode XSINIL() { return GetToken(TSqlParser.XSINIL, 0); }
		public ITerminalNode[] ZONE() { return GetTokens(TSqlParser.ZONE); }
		public ITerminalNode ZONE(int i) {
			return GetToken(TSqlParser.ZONE, i);
		}
		public ITerminalNode ABORT_AFTER_WAIT() { return GetToken(TSqlParser.ABORT_AFTER_WAIT, 0); }
		public ITerminalNode ABSENT() { return GetToken(TSqlParser.ABSENT, 0); }
		public ITerminalNode ADMINISTER() { return GetToken(TSqlParser.ADMINISTER, 0); }
		public ITerminalNode AES() { return GetToken(TSqlParser.AES, 0); }
		public ITerminalNode ALLOW_CONNECTIONS() { return GetToken(TSqlParser.ALLOW_CONNECTIONS, 0); }
		public ITerminalNode ALLOW_MULTIPLE_EVENT_LOSS() { return GetToken(TSqlParser.ALLOW_MULTIPLE_EVENT_LOSS, 0); }
		public ITerminalNode ALLOW_SINGLE_EVENT_LOSS() { return GetToken(TSqlParser.ALLOW_SINGLE_EVENT_LOSS, 0); }
		public ITerminalNode ANONYMOUS() { return GetToken(TSqlParser.ANONYMOUS, 0); }
		public ITerminalNode APPEND() { return GetToken(TSqlParser.APPEND, 0); }
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode ASYNCHRONOUS_COMMIT() { return GetToken(TSqlParser.ASYNCHRONOUS_COMMIT, 0); }
		public ITerminalNode AUTHENTICATE() { return GetToken(TSqlParser.AUTHENTICATE, 0); }
		public ITerminalNode AUTHENTICATION() { return GetToken(TSqlParser.AUTHENTICATION, 0); }
		public ITerminalNode AUTOMATED_BACKUP_PREFERENCE() { return GetToken(TSqlParser.AUTOMATED_BACKUP_PREFERENCE, 0); }
		public ITerminalNode AUTOMATIC() { return GetToken(TSqlParser.AUTOMATIC, 0); }
		public ITerminalNode AVAILABILITY_MODE() { return GetToken(TSqlParser.AVAILABILITY_MODE, 0); }
		public ITerminalNode BEFORE() { return GetToken(TSqlParser.BEFORE, 0); }
		public ITerminalNode BLOCK() { return GetToken(TSqlParser.BLOCK, 0); }
		public ITerminalNode BLOCKERS() { return GetToken(TSqlParser.BLOCKERS, 0); }
		public ITerminalNode BLOCKSIZE() { return GetToken(TSqlParser.BLOCKSIZE, 0); }
		public ITerminalNode BLOCKING_HIERARCHY() { return GetToken(TSqlParser.BLOCKING_HIERARCHY, 0); }
		public ITerminalNode BUFFER() { return GetToken(TSqlParser.BUFFER, 0); }
		public ITerminalNode BUFFERCOUNT() { return GetToken(TSqlParser.BUFFERCOUNT, 0); }
		public ITerminalNode CACHE() { return GetToken(TSqlParser.CACHE, 0); }
		public ITerminalNode CALLED() { return GetToken(TSqlParser.CALLED, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode CHANGETABLE() { return GetToken(TSqlParser.CHANGETABLE, 0); }
		public ITerminalNode CHANGES() { return GetToken(TSqlParser.CHANGES, 0); }
		public ITerminalNode CHECK_POLICY() { return GetToken(TSqlParser.CHECK_POLICY, 0); }
		public ITerminalNode CHECK_EXPIRATION() { return GetToken(TSqlParser.CHECK_EXPIRATION, 0); }
		public ITerminalNode CLASSIFIER_FUNCTION() { return GetToken(TSqlParser.CLASSIFIER_FUNCTION, 0); }
		public ITerminalNode CLUSTER() { return GetToken(TSqlParser.CLUSTER, 0); }
		public ITerminalNode COMPRESS() { return GetToken(TSqlParser.COMPRESS, 0); }
		public ITerminalNode COMPRESSION() { return GetToken(TSqlParser.COMPRESSION, 0); }
		public ITerminalNode CONNECT() { return GetToken(TSqlParser.CONNECT, 0); }
		public ITerminalNode CONNECTION() { return GetToken(TSqlParser.CONNECTION, 0); }
		public ITerminalNode CONFIGURATION() { return GetToken(TSqlParser.CONFIGURATION, 0); }
		public ITerminalNode CONNECTIONPROPERTY() { return GetToken(TSqlParser.CONNECTIONPROPERTY, 0); }
		public ITerminalNode CONTAINMENT() { return GetToken(TSqlParser.CONTAINMENT, 0); }
		public ITerminalNode CONTEXT() { return GetToken(TSqlParser.CONTEXT, 0); }
		public ITerminalNode CONTEXT_INFO() { return GetToken(TSqlParser.CONTEXT_INFO, 0); }
		public ITerminalNode CONTINUE_AFTER_ERROR() { return GetToken(TSqlParser.CONTINUE_AFTER_ERROR, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public ITerminalNode CONTRACT_NAME() { return GetToken(TSqlParser.CONTRACT_NAME, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode COPY_ONLY() { return GetToken(TSqlParser.COPY_ONLY, 0); }
		public ITerminalNode CYCLE() { return GetToken(TSqlParser.CYCLE, 0); }
		public ITerminalNode DATA_COMPRESSION() { return GetToken(TSqlParser.DATA_COMPRESSION, 0); }
		public ITerminalNode DATA_SOURCE() { return GetToken(TSqlParser.DATA_SOURCE, 0); }
		public ITerminalNode DATABASE_MIRRORING() { return GetToken(TSqlParser.DATABASE_MIRRORING, 0); }
		public ITerminalNode DATASPACE() { return GetToken(TSqlParser.DATASPACE, 0); }
		public ITerminalNode DDL() { return GetToken(TSqlParser.DDL, 0); }
		public ITerminalNode DECOMPRESS() { return GetToken(TSqlParser.DECOMPRESS, 0); }
		public ITerminalNode DEFAULT_DATABASE() { return GetToken(TSqlParser.DEFAULT_DATABASE, 0); }
		public ITerminalNode DEFAULT_SCHEMA() { return GetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public ITerminalNode DIAGNOSTICS() { return GetToken(TSqlParser.DIAGNOSTICS, 0); }
		public ITerminalNode DIFFERENTIAL() { return GetToken(TSqlParser.DIFFERENTIAL, 0); }
		public ITerminalNode DISTRIBUTION() { return GetToken(TSqlParser.DISTRIBUTION, 0); }
		public ITerminalNode DTC_SUPPORT() { return GetToken(TSqlParser.DTC_SUPPORT, 0); }
		public ITerminalNode ENABLED() { return GetToken(TSqlParser.ENABLED, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public ITerminalNode ERROR() { return GetToken(TSqlParser.ERROR, 0); }
		public ITerminalNode ERROR_LINE() { return GetToken(TSqlParser.ERROR_LINE, 0); }
		public ITerminalNode ERROR_MESSAGE() { return GetToken(TSqlParser.ERROR_MESSAGE, 0); }
		public ITerminalNode ERROR_NUMBER() { return GetToken(TSqlParser.ERROR_NUMBER, 0); }
		public ITerminalNode ERROR_PROCEDURE() { return GetToken(TSqlParser.ERROR_PROCEDURE, 0); }
		public ITerminalNode ERROR_SEVERITY() { return GetToken(TSqlParser.ERROR_SEVERITY, 0); }
		public ITerminalNode ERROR_STATE() { return GetToken(TSqlParser.ERROR_STATE, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode EVENTDATA() { return GetToken(TSqlParser.EVENTDATA, 0); }
		public ITerminalNode EVENT_RETENTION_MODE() { return GetToken(TSqlParser.EVENT_RETENTION_MODE, 0); }
		public ITerminalNode EXECUTABLE_FILE() { return GetToken(TSqlParser.EXECUTABLE_FILE, 0); }
		public ITerminalNode EXPIREDATE() { return GetToken(TSqlParser.EXPIREDATE, 0); }
		public ITerminalNode EXTENSION() { return GetToken(TSqlParser.EXTENSION, 0); }
		public ITerminalNode EXTERNAL_ACCESS() { return GetToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		public ITerminalNode FAILOVER() { return GetToken(TSqlParser.FAILOVER, 0); }
		public ITerminalNode FAILURECONDITIONLEVEL() { return GetToken(TSqlParser.FAILURECONDITIONLEVEL, 0); }
		public ITerminalNode FAN_IN() { return GetToken(TSqlParser.FAN_IN, 0); }
		public ITerminalNode FILE_SNAPSHOT() { return GetToken(TSqlParser.FILE_SNAPSHOT, 0); }
		public ITerminalNode FORCESEEK() { return GetToken(TSqlParser.FORCESEEK, 0); }
		public ITerminalNode FORCE_SERVICE_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode FORMATMESSAGE() { return GetToken(TSqlParser.FORMATMESSAGE, 0); }
		public ITerminalNode GET() { return GetToken(TSqlParser.GET, 0); }
		public ITerminalNode GET_FILESTREAM_TRANSACTION_CONTEXT() { return GetToken(TSqlParser.GET_FILESTREAM_TRANSACTION_CONTEXT, 0); }
		public ITerminalNode GETANCESTOR() { return GetToken(TSqlParser.GETANCESTOR, 0); }
		public ITerminalNode GETANSINULL() { return GetToken(TSqlParser.GETANSINULL, 0); }
		public ITerminalNode GETDESCENDANT() { return GetToken(TSqlParser.GETDESCENDANT, 0); }
		public ITerminalNode GETLEVEL() { return GetToken(TSqlParser.GETLEVEL, 0); }
		public ITerminalNode GETREPARENTEDVALUE() { return GetToken(TSqlParser.GETREPARENTEDVALUE, 0); }
		public ITerminalNode GETROOT() { return GetToken(TSqlParser.GETROOT, 0); }
		public ITerminalNode GOVERNOR() { return GetToken(TSqlParser.GOVERNOR, 0); }
		public ITerminalNode HASHED() { return GetToken(TSqlParser.HASHED, 0); }
		public ITerminalNode HEALTHCHECKTIMEOUT() { return GetToken(TSqlParser.HEALTHCHECKTIMEOUT, 0); }
		public ITerminalNode HEAP() { return GetToken(TSqlParser.HEAP, 0); }
		public ITerminalNode HIERARCHYID() { return GetToken(TSqlParser.HIERARCHYID, 0); }
		public ITerminalNode HOST_ID() { return GetToken(TSqlParser.HOST_ID, 0); }
		public ITerminalNode HOST_NAME() { return GetToken(TSqlParser.HOST_NAME, 0); }
		public ITerminalNode IIF() { return GetToken(TSqlParser.IIF, 0); }
		public ITerminalNode IO() { return GetToken(TSqlParser.IO, 0); }
		public ITerminalNode INCLUDE() { return GetToken(TSqlParser.INCLUDE, 0); }
		public ITerminalNode INCREMENT() { return GetToken(TSqlParser.INCREMENT, 0); }
		public ITerminalNode INFINITE() { return GetToken(TSqlParser.INFINITE, 0); }
		public ITerminalNode INIT() { return GetToken(TSqlParser.INIT, 0); }
		public ITerminalNode INSTEAD() { return GetToken(TSqlParser.INSTEAD, 0); }
		public ITerminalNode ISDESCENDANTOF() { return GetToken(TSqlParser.ISDESCENDANTOF, 0); }
		public ITerminalNode ISNULL() { return GetToken(TSqlParser.ISNULL, 0); }
		public ITerminalNode ISNUMERIC() { return GetToken(TSqlParser.ISNUMERIC, 0); }
		public ITerminalNode KERBEROS() { return GetToken(TSqlParser.KERBEROS, 0); }
		public ITerminalNode KEY_PATH() { return GetToken(TSqlParser.KEY_PATH, 0); }
		public ITerminalNode KEY_STORE_PROVIDER_NAME() { return GetToken(TSqlParser.KEY_STORE_PROVIDER_NAME, 0); }
		public ITerminalNode LANGUAGE() { return GetToken(TSqlParser.LANGUAGE, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public ITerminalNode LIFETIME() { return GetToken(TSqlParser.LIFETIME, 0); }
		public ITerminalNode LINKED() { return GetToken(TSqlParser.LINKED, 0); }
		public ITerminalNode LINUX() { return GetToken(TSqlParser.LINUX, 0); }
		public ITerminalNode LISTENER_IP() { return GetToken(TSqlParser.LISTENER_IP, 0); }
		public ITerminalNode LISTENER_PORT() { return GetToken(TSqlParser.LISTENER_PORT, 0); }
		public ITerminalNode LOCAL_SERVICE_NAME() { return GetToken(TSqlParser.LOCAL_SERVICE_NAME, 0); }
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode[] MASK() { return GetTokens(TSqlParser.MASK); }
		public ITerminalNode MASK(int i) {
			return GetToken(TSqlParser.MASK, i);
		}
		public ITerminalNode MATCHED() { return GetToken(TSqlParser.MATCHED, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode MAX_MEMORY() { return GetToken(TSqlParser.MAX_MEMORY, 0); }
		public ITerminalNode MAXTRANSFER() { return GetToken(TSqlParser.MAXTRANSFER, 0); }
		public ITerminalNode MAXVALUE() { return GetToken(TSqlParser.MAXVALUE, 0); }
		public ITerminalNode MAX_DISPATCH_LATENCY() { return GetToken(TSqlParser.MAX_DISPATCH_LATENCY, 0); }
		public ITerminalNode MAX_DURATION() { return GetToken(TSqlParser.MAX_DURATION, 0); }
		public ITerminalNode MAX_EVENT_SIZE() { return GetToken(TSqlParser.MAX_EVENT_SIZE, 0); }
		public ITerminalNode MAX_SIZE() { return GetToken(TSqlParser.MAX_SIZE, 0); }
		public ITerminalNode MAX_OUTSTANDING_IO_PER_VOLUME() { return GetToken(TSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME, 0); }
		public ITerminalNode MEDIADESCRIPTION() { return GetToken(TSqlParser.MEDIADESCRIPTION, 0); }
		public ITerminalNode MEDIANAME() { return GetToken(TSqlParser.MEDIANAME, 0); }
		public ITerminalNode MEMBER() { return GetToken(TSqlParser.MEMBER, 0); }
		public ITerminalNode MEMORY_PARTITION_MODE() { return GetToken(TSqlParser.MEMORY_PARTITION_MODE, 0); }
		public ITerminalNode MESSAGE_FORWARDING() { return GetToken(TSqlParser.MESSAGE_FORWARDING, 0); }
		public ITerminalNode MESSAGE_FORWARD_SIZE() { return GetToken(TSqlParser.MESSAGE_FORWARD_SIZE, 0); }
		public ITerminalNode MINVALUE() { return GetToken(TSqlParser.MINVALUE, 0); }
		public ITerminalNode MIRROR() { return GetToken(TSqlParser.MIRROR, 0); }
		public ITerminalNode MUST_CHANGE() { return GetToken(TSqlParser.MUST_CHANGE, 0); }
		public ITerminalNode NEWID() { return GetToken(TSqlParser.NEWID, 0); }
		public ITerminalNode NEWSEQUENTIALID() { return GetToken(TSqlParser.NEWSEQUENTIALID, 0); }
		public ITerminalNode NOFORMAT() { return GetToken(TSqlParser.NOFORMAT, 0); }
		public ITerminalNode NOINIT() { return GetToken(TSqlParser.NOINIT, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode NOREWIND() { return GetToken(TSqlParser.NOREWIND, 0); }
		public ITerminalNode NOSKIP() { return GetToken(TSqlParser.NOSKIP, 0); }
		public ITerminalNode NOUNLOAD() { return GetToken(TSqlParser.NOUNLOAD, 0); }
		public ITerminalNode NO_CHECKSUM() { return GetToken(TSqlParser.NO_CHECKSUM, 0); }
		public ITerminalNode NO_COMPRESSION() { return GetToken(TSqlParser.NO_COMPRESSION, 0); }
		public ITerminalNode NO_EVENT_LOSS() { return GetToken(TSqlParser.NO_EVENT_LOSS, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode NTLM() { return GetToken(TSqlParser.NTLM, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public ITerminalNode ON_FAILURE() { return GetToken(TSqlParser.ON_FAILURE, 0); }
		public ITerminalNode OPERATIONS() { return GetToken(TSqlParser.OPERATIONS, 0); }
		public ITerminalNode PAGE() { return GetToken(TSqlParser.PAGE, 0); }
		public ITerminalNode PARAM_NODE() { return GetToken(TSqlParser.PARAM_NODE, 0); }
		public ITerminalNode PARTIAL() { return GetToken(TSqlParser.PARTIAL, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode PERMISSION_SET() { return GetToken(TSqlParser.PERMISSION_SET, 0); }
		public ITerminalNode PER_CPU() { return GetToken(TSqlParser.PER_CPU, 0); }
		public ITerminalNode PER_DB() { return GetToken(TSqlParser.PER_DB, 0); }
		public ITerminalNode PER_NODE() { return GetToken(TSqlParser.PER_NODE, 0); }
		public ITerminalNode PERSISTED() { return GetToken(TSqlParser.PERSISTED, 0); }
		public ITerminalNode PLATFORM() { return GetToken(TSqlParser.PLATFORM, 0); }
		public ITerminalNode POLICY() { return GetToken(TSqlParser.POLICY, 0); }
		public ITerminalNode PREDICATE() { return GetToken(TSqlParser.PREDICATE, 0); }
		public ITerminalNode PROCESS() { return GetToken(TSqlParser.PROCESS, 0); }
		public ITerminalNode PROFILE() { return GetToken(TSqlParser.PROFILE, 0); }
		public ITerminalNode PYTHON() { return GetToken(TSqlParser.PYTHON, 0); }
		public ITerminalNode R() { return GetToken(TSqlParser.R, 0); }
		public ITerminalNode READ_WRITE_FILEGROUPS() { return GetToken(TSqlParser.READ_WRITE_FILEGROUPS, 0); }
		public ITerminalNode REGENERATE() { return GetToken(TSqlParser.REGENERATE, 0); }
		public ITerminalNode RELATED_CONVERSATION() { return GetToken(TSqlParser.RELATED_CONVERSATION, 0); }
		public ITerminalNode RELATED_CONVERSATION_GROUP() { return GetToken(TSqlParser.RELATED_CONVERSATION_GROUP, 0); }
		public ITerminalNode REQUIRED() { return GetToken(TSqlParser.REQUIRED, 0); }
		public ITerminalNode RESET() { return GetToken(TSqlParser.RESET, 0); }
		public ITerminalNode RESOURCES() { return GetToken(TSqlParser.RESOURCES, 0); }
		public ITerminalNode RESTART() { return GetToken(TSqlParser.RESTART, 0); }
		public ITerminalNode RESUME() { return GetToken(TSqlParser.RESUME, 0); }
		public ITerminalNode RETAINDAYS() { return GetToken(TSqlParser.RETAINDAYS, 0); }
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public ITerminalNode REWIND() { return GetToken(TSqlParser.REWIND, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode ROUND_ROBIN() { return GetToken(TSqlParser.ROUND_ROBIN, 0); }
		public ITerminalNode ROWCOUNT_BIG() { return GetToken(TSqlParser.ROWCOUNT_BIG, 0); }
		public ITerminalNode RSA_512() { return GetToken(TSqlParser.RSA_512, 0); }
		public ITerminalNode RSA_1024() { return GetToken(TSqlParser.RSA_1024, 0); }
		public ITerminalNode RSA_2048() { return GetToken(TSqlParser.RSA_2048, 0); }
		public ITerminalNode RSA_3072() { return GetToken(TSqlParser.RSA_3072, 0); }
		public ITerminalNode RSA_4096() { return GetToken(TSqlParser.RSA_4096, 0); }
		public ITerminalNode SAFETY() { return GetToken(TSqlParser.SAFETY, 0); }
		public ITerminalNode SAFE() { return GetToken(TSqlParser.SAFE, 0); }
		public ITerminalNode SCHEDULER() { return GetToken(TSqlParser.SCHEDULER, 0); }
		public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		public ITerminalNode SCRIPT() { return GetToken(TSqlParser.SCRIPT, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode SERVICE_BROKER() { return GetToken(TSqlParser.SERVICE_BROKER, 0); }
		public ITerminalNode SERVICE_NAME() { return GetToken(TSqlParser.SERVICE_NAME, 0); }
		public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		public ITerminalNode SESSION_CONTEXT() { return GetToken(TSqlParser.SESSION_CONTEXT, 0); }
		public ITerminalNode SETTINGS() { return GetToken(TSqlParser.SETTINGS, 0); }
		public ITerminalNode SHRINKLOG() { return GetToken(TSqlParser.SHRINKLOG, 0); }
		public ITerminalNode SID() { return GetToken(TSqlParser.SID, 0); }
		public ITerminalNode SKIP_KEYWORD() { return GetToken(TSqlParser.SKIP_KEYWORD, 0); }
		public ITerminalNode SOFTNUMA() { return GetToken(TSqlParser.SOFTNUMA, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public ITerminalNode SPLIT() { return GetToken(TSqlParser.SPLIT, 0); }
		public ITerminalNode SQL() { return GetToken(TSqlParser.SQL, 0); }
		public ITerminalNode SQLDUMPERFLAGS() { return GetToken(TSqlParser.SQLDUMPERFLAGS, 0); }
		public ITerminalNode SQLDUMPERPATH() { return GetToken(TSqlParser.SQLDUMPERPATH, 0); }
		public ITerminalNode SQLDUMPERTIMEOUT() { return GetToken(TSqlParser.SQLDUMPERTIMEOUT, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode STATS() { return GetToken(TSqlParser.STATS, 0); }
		public ITerminalNode START() { return GetToken(TSqlParser.START, 0); }
		public ITerminalNode STARTED() { return GetToken(TSqlParser.STARTED, 0); }
		public ITerminalNode STARTUP_STATE() { return GetToken(TSqlParser.STARTUP_STATE, 0); }
		public ITerminalNode STOP() { return GetToken(TSqlParser.STOP, 0); }
		public ITerminalNode STOPPED() { return GetToken(TSqlParser.STOPPED, 0); }
		public ITerminalNode STOP_ON_ERROR() { return GetToken(TSqlParser.STOP_ON_ERROR, 0); }
		public ITerminalNode SUPPORTED() { return GetToken(TSqlParser.SUPPORTED, 0); }
		public ITerminalNode SWITCH() { return GetToken(TSqlParser.SWITCH, 0); }
		public ITerminalNode TAPE() { return GetToken(TSqlParser.TAPE, 0); }
		public ITerminalNode TARGET() { return GetToken(TSqlParser.TARGET, 0); }
		public ITerminalNode TCP() { return GetToken(TSqlParser.TCP, 0); }
		public ITerminalNode TOSTRING() { return GetToken(TSqlParser.TOSTRING, 0); }
		public ITerminalNode TRACE() { return GetToken(TSqlParser.TRACE, 0); }
		public ITerminalNode TRACK_CAUSALITY() { return GetToken(TSqlParser.TRACK_CAUSALITY, 0); }
		public ITerminalNode TRANSFER() { return GetToken(TSqlParser.TRANSFER, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(TSqlParser.UNCHECKED, 0); }
		public ITerminalNode UNLOCK() { return GetToken(TSqlParser.UNLOCK, 0); }
		public ITerminalNode UNSAFE() { return GetToken(TSqlParser.UNSAFE, 0); }
		public ITerminalNode URL() { return GetToken(TSqlParser.URL, 0); }
		public ITerminalNode USED() { return GetToken(TSqlParser.USED, 0); }
		public ITerminalNode VERBOSELOGGING() { return GetToken(TSqlParser.VERBOSELOGGING, 0); }
		public ITerminalNode VISIBILITY() { return GetToken(TSqlParser.VISIBILITY, 0); }
		public ITerminalNode WAIT_AT_LOW_PRIORITY() { return GetToken(TSqlParser.WAIT_AT_LOW_PRIORITY, 0); }
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode WITHOUT() { return GetToken(TSqlParser.WITHOUT, 0); }
		public ITerminalNode WITNESS() { return GetToken(TSqlParser.WITNESS, 0); }
		public ITerminalNode VARCHAR() { return GetToken(TSqlParser.VARCHAR, 0); }
		public ITerminalNode NVARCHAR() { return GetToken(TSqlParser.NVARCHAR, 0); }
		public ITerminalNode BINARY_KEYWORD() { return GetToken(TSqlParser.BINARY_KEYWORD, 0); }
		public ITerminalNode PRECISION() { return GetToken(TSqlParser.PRECISION, 0); }
		public ITerminalNode FILESTREAM_ON() { return GetToken(TSqlParser.FILESTREAM_ON, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(_ctx, State);
		EnterRule(_localctx, 1142, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12661;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABORT_AFTER_WAIT) | (1L << ABSENT) | (1L << ABSOLUTE) | (1L << ACCENT_SENSITIVITY) | (1L << ACCESS) | (1L << ACTION) | (1L << ACTIVATION) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDRESS) | (1L << ADMINISTER) | (1L << AES) | (1L << AES_128) | (1L << AES_192) | (1L << AES_256) | (1L << AFFINITY) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALGORITHM) | (1L << ALLOWED) | (1L << ALLOW_CONNECTIONS) | (1L << ALLOW_ENCRYPTED_VALUE_MODIFICATIONS) | (1L << ALLOW_MULTIPLE_EVENT_LOSS) | (1L << ALLOW_PAGE_LOCKS) | (1L << ALLOW_ROW_LOCKS) | (1L << ALLOW_SINGLE_EVENT_LOSS) | (1L << ALLOW_SNAPSHOT_ISOLATION) | (1L << ALL_CONSTRAINTS) | (1L << ALL_ERRORMSGS) | (1L << ALL_INDEXES) | (1L << ALL_LEVELS) | (1L << ALWAYS) | (1L << ANONYMOUS) | (1L << ANSI_DEFAULTS) | (1L << ANSI_NULLS) | (1L << ANSI_NULL_DEFAULT) | (1L << ANSI_NULL_DFLT_OFF) | (1L << ANSI_NULL_DFLT_ON) | (1L << ANSI_PADDING) | (1L << ANSI_WARNINGS) | (1L << APPEND) | (1L << APPLICATION) | (1L << APPLICATION_LOG) | (1L << APPLOCK_MODE) | (1L << APPLOCK_TEST) | (1L << APPLY) | (1L << APP_NAME) | (1L << ARITHABORT) | (1L << ARITHIGNORE) | (1L << ASCII) | (1L << ASSEMBLY) | (1L << ASSEMBLYPROPERTY) | (1L << ASYMMETRIC) | (1L << ASYNCHRONOUS_COMMIT) | (1L << AT_KEYWORD))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUDIT - 64)) | (1L << (AUDIT_GUID - 64)) | (1L << (AUTHENTICATE - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTO - 64)) | (1L << (AUTOGROW_ALL_FILES - 64)) | (1L << (AUTOGROW_SINGLE_FILE - 64)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 64)) | (1L << (AUTOMATIC - 64)) | (1L << (AUTO_CLEANUP - 64)) | (1L << (AUTO_CLOSE - 64)) | (1L << (AUTO_CREATE_STATISTICS - 64)) | (1L << (AUTO_DROP - 64)) | (1L << (AUTO_SHRINK - 64)) | (1L << (AUTO_UPDATE_STATISTICS - 64)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 64)) | (1L << (AVAILABILITY - 64)) | (1L << (AVAILABILITY_MODE - 64)) | (1L << (AVG - 64)) | (1L << (BACKUP_CLONEDB - 64)) | (1L << (BACKUP_PRIORITY - 64)) | (1L << (BASE64 - 64)) | (1L << (BEFORE - 64)) | (1L << (BEGIN_DIALOG - 64)) | (1L << (BIGINT - 64)) | (1L << (BINARY_BASE64 - 64)) | (1L << (BINARY_CHECKSUM - 64)) | (1L << (BINARY_KEYWORD - 64)) | (1L << (BINDING - 64)) | (1L << (BLOB_STORAGE - 64)) | (1L << (BLOCK - 64)) | (1L << (BLOCKERS - 64)) | (1L << (BLOCKING_HIERARCHY - 64)) | (1L << (BLOCKSIZE - 64)) | (1L << (BROKER - 64)) | (1L << (BROKER_INSTANCE - 64)) | (1L << (BUFFER - 64)) | (1L << (BUFFERCOUNT - 64)) | (1L << (BULK_LOGGED - 64)) | (1L << (CACHE - 64)) | (1L << (CALLED - 64)) | (1L << (CALLER - 64)) | (1L << (CAP_CPU_PERCENT - 64)) | (1L << (CAST - 64)) | (1L << (CATALOG - 64)) | (1L << (CATCH - 64)) | (1L << (CERTENCODED - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CERTPRIVATEKEY - 64)) | (1L << (CERT_ID - 64)) | (1L << (CHANGE - 64)) | (1L << (CHANGES - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CHANGETABLE - 128)) | (1L << (CHANGE_RETENTION - 128)) | (1L << (CHANGE_TRACKING - 128)) | (1L << (CHAR - 128)) | (1L << (CHARINDEX - 128)) | (1L << (CHECKALLOC - 128)) | (1L << (CHECKCATALOG - 128)) | (1L << (CHECKCONSTRAINTS - 128)) | (1L << (CHECKDB - 128)) | (1L << (CHECKFILEGROUP - 128)) | (1L << (CHECKSUM - 128)) | (1L << (CHECKSUM_AGG - 128)) | (1L << (CHECKTABLE - 128)) | (1L << (CHECK_EXPIRATION - 128)) | (1L << (CHECK_POLICY - 128)) | (1L << (CLASSIFIER_FUNCTION - 128)) | (1L << (CLEANTABLE - 128)) | (1L << (CLEANUP - 128)) | (1L << (CLONEDATABASE - 128)) | (1L << (CLUSTER - 128)) | (1L << (COLLECTION - 128)) | (1L << (COLUMNPROPERTY - 128)) | (1L << (COLUMNS - 128)) | (1L << (COLUMNSTORE - 128)) | (1L << (COLUMNSTORE_ARCHIVE - 128)) | (1L << (COLUMN_ENCRYPTION_KEY - 128)) | (1L << (COLUMN_MASTER_KEY - 128)) | (1L << (COL_LENGTH - 128)) | (1L << (COL_NAME - 128)) | (1L << (COMMITTED - 128)) | (1L << (COMPATIBILITY_LEVEL - 128)) | (1L << (COMPRESS - 128)) | (1L << (COMPRESSION - 128)) | (1L << (COMPRESSION_DELAY - 128)) | (1L << (COMPRESS_ALL_ROW_GROUPS - 128)) | (1L << (CONCAT - 128)) | (1L << (CONCAT_NULL_YIELDS_NULL - 128)) | (1L << (CONCAT_WS - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONNECT - 128)) | (1L << (CONNECTION - 128)) | (1L << (CONNECTIONPROPERTY - 128)) | (1L << (CONTAINMENT - 128)) | (1L << (CONTENT - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTEXT_INFO - 128)) | (1L << (CONTINUE_AFTER_ERROR - 128)) | (1L << (CONTRACT - 128)) | (1L << (CONTRACT_NAME - 128)) | (1L << (CONTROL - 128)) | (1L << (CONVERSATION - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (COOKIE - 193)) | (1L << (COPY_ONLY - 193)) | (1L << (COUNT - 193)) | (1L << (COUNTER - 193)) | (1L << (COUNT_BIG - 193)) | (1L << (CPU - 193)) | (1L << (CREATE_NEW - 193)) | (1L << (CREATION_DISPOSITION - 193)) | (1L << (CREDENTIAL - 193)) | (1L << (CRYPTOGRAPHIC - 193)) | (1L << (CUME_DIST - 193)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 193)) | (1L << (CURSOR_DEFAULT - 193)) | (1L << (CURSOR_STATUS - 193)) | (1L << (CYCLE - 193)) | (1L << (DATA - 193)) | (1L << (DATABASE_MIRRORING - 193)) | (1L << (DATABASE_PRINCIPAL_ID - 193)) | (1L << (DATALENGTH - 193)) | (1L << (DATASPACE - 193)) | (1L << (DATA_COMPRESSION - 193)) | (1L << (DATA_PURITY - 193)) | (1L << (DATA_SOURCE - 193)) | (1L << (DATEADD - 193)) | (1L << (DATEDIFF - 193)) | (1L << (DATENAME - 193)) | (1L << (DATEPART - 193)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 193)) | (1L << (DAYS - 193)) | (1L << (DBCC - 193)) | (1L << (DBREINDEX - 193)) | (1L << (DB_CHAINING - 193)) | (1L << (DB_FAILOVER - 193)) | (1L << (DB_ID - 193)) | (1L << (DB_NAME - 193)) | (1L << (DDL - 193)) | (1L << (DECOMPRESS - 193)) | (1L << (DECRYPTION - 193)) | (1L << (DEFAULT_DATABASE - 193)) | (1L << (DEFAULT_DOUBLE_QUOTE - 193)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 193)) | (1L << (DEFAULT_LANGUAGE - 193)) | (1L << (DEFAULT_SCHEMA - 193)) | (1L << (DEFINITION - 193)) | (1L << (DELAY - 193)) | (1L << (DELAYED_DURABILITY - 193)) | (1L << (DELETED - 193)) | (1L << (DENSE_RANK - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (DEPENDENTS - 258)) | (1L << (DES - 258)) | (1L << (DESCRIPTION - 258)) | (1L << (DESX - 258)) | (1L << (DETERMINISTIC - 258)) | (1L << (DHCP - 258)) | (1L << (DIAGNOSTICS - 258)) | (1L << (DIALOG - 258)) | (1L << (DIFFERENCE - 258)) | (1L << (DIFFERENTIAL - 258)) | (1L << (DIRECTORY_NAME - 258)) | (1L << (DISABLE - 258)) | (1L << (DISABLED - 258)) | (1L << (DISABLE_BROKER - 258)) | (1L << (DISTRIBUTION - 258)) | (1L << (DOCUMENT - 258)) | (1L << (DROPCLEANBUFFERS - 258)) | (1L << (DROP_EXISTING - 258)) | (1L << (DTC_SUPPORT - 258)) | (1L << (DYNAMIC - 258)) | (1L << (ELEMENTS - 258)) | (1L << (EMERGENCY - 258)) | (1L << (EMPTY - 258)) | (1L << (ENABLE - 258)) | (1L << (ENABLED - 258)) | (1L << (ENABLE_BROKER - 258)) | (1L << (ENCRYPTED - 258)) | (1L << (ENCRYPTED_VALUE - 258)) | (1L << (ENCRYPTION - 258)) | (1L << (ENCRYPTION_TYPE - 258)) | (1L << (ENDPOINT - 258)) | (1L << (ENDPOINT_URL - 258)) | (1L << (ERROR - 258)) | (1L << (ERROR_BROKER_CONVERSATIONS - 258)) | (1L << (ERROR_LINE - 258)) | (1L << (ERROR_MESSAGE - 258)) | (1L << (ERROR_NUMBER - 258)) | (1L << (ERROR_PROCEDURE - 258)) | (1L << (ERROR_SEVERITY - 258)) | (1L << (ERROR_STATE - 258)) | (1L << (ESTIMATEONLY - 258)) | (1L << (EVENT - 258)) | (1L << (EVENT_RETENTION_MODE - 258)) | (1L << (EVENTDATA - 258)) | (1L << (EXCLUSIVE - 258)) | (1L << (EXECUTABLE - 258)) | (1L << (EXECUTABLE_FILE - 258)) | (1L << (EXIST - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (EXIST_SQUARE_BRACKET - 323)) | (1L << (EXPAND - 323)) | (1L << (EXPIREDATE - 323)) | (1L << (EXPIRY_DATE - 323)) | (1L << (EXPLICIT - 323)) | (1L << (EXTENDED_LOGICAL_CHECKS - 323)) | (1L << (EXTENSION - 323)) | (1L << (EXTERNAL_ACCESS - 323)) | (1L << (FAILOVER - 323)) | (1L << (FAILOVER_MODE - 323)) | (1L << (FAILURE - 323)) | (1L << (FAILURECONDITIONLEVEL - 323)) | (1L << (FAILURE_CONDITION_LEVEL - 323)) | (1L << (FAIL_OPERATION - 323)) | (1L << (FAN_IN - 323)) | (1L << (FAST - 323)) | (1L << (FAST_FORWARD - 323)) | (1L << (FILEGROUP - 323)) | (1L << (FILEGROUPPROPERTY - 323)) | (1L << (FILEGROUP_ID - 323)) | (1L << (FILEGROUP_NAME - 323)) | (1L << (FILEGROWTH - 323)) | (1L << (FILENAME - 323)) | (1L << (FILEPATH - 323)) | (1L << (FILEPROPERTY - 323)) | (1L << (FILEPROPERTYEX - 323)) | (1L << (FILESTREAM - 323)) | (1L << (FILESTREAM_ON - 323)) | (1L << (FILE_ID - 323)) | (1L << (FILE_IDEX - 323)) | (1L << (FILE_NAME - 323)) | (1L << (FILE_SNAPSHOT - 323)) | (1L << (FILLFACTOR - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIRST_VALUE - 323)) | (1L << (FMTONLY - 323)) | (1L << (FOLLOWING - 323)) | (1L << (FORCE - 323)) | (1L << (FORCED - 323)) | (1L << (FORCEPLAN - 323)) | (1L << (FORCESCAN - 323)) | (1L << (FORCESEEK - 323)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 323)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 323)) | (1L << (FORMAT - 323)) | (1L << (FORMATMESSAGE - 323)) | (1L << (FORWARD_ONLY - 323)) | (1L << (FREE - 323)) | (1L << (FULLSCAN - 323)) | (1L << (FULLTEXT - 323)) | (1L << (FULLTEXTCATALOGPROPERTY - 323)) | (1L << (FULLTEXTSERVICEPROPERTY - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (GB - 387)) | (1L << (GENERATED - 387)) | (1L << (GET - 387)) | (1L << (GETANCESTOR - 387)) | (1L << (GETANSINULL - 387)) | (1L << (GETDATE - 387)) | (1L << (GETDESCENDANT - 387)) | (1L << (GETLEVEL - 387)) | (1L << (GETREPARENTEDVALUE - 387)) | (1L << (GETROOT - 387)) | (1L << (GETUTCDATE - 387)) | (1L << (GET_FILESTREAM_TRANSACTION_CONTEXT - 387)) | (1L << (GLOBAL - 387)) | (1L << (GO - 387)) | (1L << (GOVERNOR - 387)) | (1L << (GREATEST - 387)) | (1L << (GROUPING - 387)) | (1L << (GROUPING_ID - 387)) | (1L << (GROUP_MAX_REQUESTS - 387)) | (1L << (HADR - 387)) | (1L << (HASH - 387)) | (1L << (HASHED - 387)) | (1L << (HAS_DBACCESS - 387)) | (1L << (HAS_PERMS_BY_NAME - 387)) | (1L << (HEALTHCHECKTIMEOUT - 387)) | (1L << (HEALTH_CHECK_TIMEOUT - 387)) | (1L << (HEAP - 387)) | (1L << (HIDDEN_KEYWORD - 387)) | (1L << (HIERARCHYID - 387)) | (1L << (HIGH - 387)) | (1L << (HONOR_BROKER_PRIORITY - 387)) | (1L << (HOST_ID - 387)) | (1L << (HOST_NAME - 387)) | (1L << (HOURS - 387)) | (1L << (IDENTITY_VALUE - 387)) | (1L << (IDENT_CURRENT - 387)) | (1L << (IDENT_INCR - 387)) | (1L << (IDENT_SEED - 387)) | (1L << (IGNORE_CONSTRAINTS - 387)) | (1L << (IGNORE_DUP_KEY - 387)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 387)) | (1L << (IGNORE_REPLICATED_TABLE_CACHE - 387)) | (1L << (IGNORE_TRIGGERS - 387)) | (1L << (IIF - 387)) | (1L << (IMMEDIATE - 387)) | (1L << (IMPERSONATE - 387)) | (1L << (IMPLICIT_TRANSACTIONS - 387)) | (1L << (IMPORTANCE - 387)) | (1L << (INCLUDE - 387)) | (1L << (INCLUDE_NULL_VALUES - 387)) | (1L << (INCREMENT - 387)) | (1L << (INCREMENTAL - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (INDEXKEY_PROPERTY - 451)) | (1L << (INDEXPROPERTY - 451)) | (1L << (INDEX_COL - 451)) | (1L << (INFINITE - 451)) | (1L << (INIT - 451)) | (1L << (INITIATOR - 451)) | (1L << (INPUT - 451)) | (1L << (INSENSITIVE - 451)) | (1L << (INSERTED - 451)) | (1L << (INSTEAD - 451)) | (1L << (INT - 451)) | (1L << (IO - 451)) | (1L << (IP - 451)) | (1L << (ISDESCENDANTOF - 451)) | (1L << (ISJSON - 451)) | (1L << (ISNULL - 451)) | (1L << (ISNUMERIC - 451)) | (1L << (ISOLATION - 451)) | (1L << (IS_MEMBER - 451)) | (1L << (IS_ROLEMEMBER - 451)) | (1L << (IS_SRVROLEMEMBER - 451)) | (1L << (JOB - 451)) | (1L << (JSON - 451)) | (1L << (JSON_ARRAY - 451)) | (1L << (JSON_MODIFY - 451)) | (1L << (JSON_OBJECT - 451)) | (1L << (JSON_PATH_EXISTS - 451)) | (1L << (JSON_QUERY - 451)) | (1L << (JSON_VALUE - 451)) | (1L << (KB - 451)) | (1L << (KEEP - 451)) | (1L << (KEEPDEFAULTS - 451)) | (1L << (KEEPFIXED - 451)) | (1L << (KEEPIDENTITY - 451)) | (1L << (KERBEROS - 451)) | (1L << (KEYS - 451)) | (1L << (KEYSET - 451)) | (1L << (KEY_PATH - 451)) | (1L << (KEY_SOURCE - 451)) | (1L << (KEY_STORE_PROVIDER_NAME - 451)) | (1L << (LAG - 451)) | (1L << (LANGUAGE - 451)) | (1L << (LAST - 451)) | (1L << (LAST_VALUE - 451)) | (1L << (LEAD - 451)) | (1L << (LEAST - 451)) | (1L << (LEN - 451)) | (1L << (LEVEL - 451)) | (1L << (LIBRARY - 451)) | (1L << (LIFETIME - 451)) | (1L << (LINKED - 451)) | (1L << (LINUX - 451)) | (1L << (LIST - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (LISTENER - 515)) | (1L << (LISTENER_IP - 515)) | (1L << (LISTENER_PORT - 515)) | (1L << (LISTENER_URL - 515)) | (1L << (LOB_COMPACTION - 515)) | (1L << (LOCAL - 515)) | (1L << (LOCAL_SERVICE_NAME - 515)) | (1L << (LOCATION - 515)) | (1L << (LOCK - 515)) | (1L << (LOCK_ESCALATION - 515)) | (1L << (LOG - 515)) | (1L << (LOGIN - 515)) | (1L << (LOGINPROPERTY - 515)) | (1L << (LOOP - 515)) | (1L << (LOW - 515)) | (1L << (LOWER - 515)) | (1L << (LTRIM - 515)) | (1L << (MANUAL - 515)) | (1L << (MARK - 515)) | (1L << (MASK - 515)) | (1L << (MASKED - 515)) | (1L << (MASTER - 515)) | (1L << (MATCHED - 515)) | (1L << (MATERIALIZED - 515)) | (1L << (MAX - 515)) | (1L << (MAXDOP - 515)) | (1L << (MAXRECURSION - 515)) | (1L << (MAXSIZE - 515)) | (1L << (MAXTRANSFER - 515)) | (1L << (MAXVALUE - 515)) | (1L << (MAX_CPU_PERCENT - 515)) | (1L << (MAX_DISPATCH_LATENCY - 515)) | (1L << (MAX_DOP - 515)) | (1L << (MAX_DURATION - 515)) | (1L << (MAX_EVENT_SIZE - 515)) | (1L << (MAX_FILES - 515)) | (1L << (MAX_IOPS_PER_VOLUME - 515)) | (1L << (MAX_MEMORY - 515)) | (1L << (MAX_MEMORY_PERCENT - 515)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 515)) | (1L << (MAX_PROCESSES - 515)) | (1L << (MAX_QUEUE_READERS - 515)) | (1L << (MAX_ROLLOVER_FILES - 515)) | (1L << (MAX_SIZE - 515)) | (1L << (MB - 515)) | (1L << (MEDIADESCRIPTION - 515)) | (1L << (MEDIANAME - 515)) | (1L << (MEDIUM - 515)) | (1L << (MEMBER - 515)) | (1L << (MEMORY_OPTIMIZED_DATA - 515)) | (1L << (MEMORY_PARTITION_MODE - 515)) | (1L << (MESSAGE - 515)) | (1L << (MESSAGE_FORWARDING - 515)) | (1L << (MESSAGE_FORWARD_SIZE - 515)) | (1L << (MIN - 515)) | (1L << (MINUTES - 515)) | (1L << (MINVALUE - 515)) | (1L << (MIN_ACTIVE_ROWVERSION - 515)) | (1L << (MIN_CPU_PERCENT - 515)) | (1L << (MIN_IOPS_PER_VOLUME - 515)) | (1L << (MIN_MEMORY_PERCENT - 515)) | (1L << (MIRROR - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (MIRROR_ADDRESS - 579)) | (1L << (MIXED_PAGE_ALLOCATION - 579)) | (1L << (MODE - 579)) | (1L << (MODIFY - 579)) | (1L << (MODIFY_SQUARE_BRACKET - 579)) | (1L << (MOVE - 579)) | (1L << (MULTI_USER - 579)) | (1L << (MUST_CHANGE - 579)) | (1L << (NAME - 579)) | (1L << (NCHAR - 579)) | (1L << (NESTED_TRIGGERS - 579)) | (1L << (NEWID - 579)) | (1L << (NEWNAME - 579)) | (1L << (NEWSEQUENTIALID - 579)) | (1L << (NEW_ACCOUNT - 579)) | (1L << (NEW_BROKER - 579)) | (1L << (NEW_PASSWORD - 579)) | (1L << (NEXT - 579)) | (1L << (NO - 579)) | (1L << (NOCOUNT - 579)) | (1L << (NODES - 579)) | (1L << (NOEXEC - 579)) | (1L << (NOEXPAND - 579)) | (1L << (NOFORMAT - 579)) | (1L << (NOINDEX - 579)) | (1L << (NOINIT - 579)) | (1L << (NONE - 579)) | (1L << (NON_TRANSACTED_ACCESS - 579)) | (1L << (NORECOMPUTE - 579)) | (1L << (NORECOVERY - 579)) | (1L << (NOREWIND - 579)) | (1L << (NOSKIP - 579)) | (1L << (NOTIFICATION - 579)) | (1L << (NOTIFICATIONS - 579)) | (1L << (NOUNLOAD - 579)) | (1L << (NOWAIT - 579)) | (1L << (NO_CHECKSUM - 579)) | (1L << (NO_COMPRESSION - 579)) | (1L << (NO_EVENT_LOSS - 579)) | (1L << (NO_INFOMSGS - 579)) | (1L << (NO_QUERYSTORE - 579)) | (1L << (NO_STATISTICS - 579)) | (1L << (NO_TRUNCATE - 579)) | (1L << (NO_WAIT - 579)) | (1L << (NTILE - 579)) | (1L << (NTLM - 579)) | (1L << (NULL_DOUBLE_QUOTE - 579)) | (1L << (NUMANODE - 579)) | (1L << (NUMBER - 579)) | (1L << (NUMERIC_ROUNDABORT - 579)) | (1L << (OBJECT - 579)) | (1L << (OBJECTPROPERTY - 579)) | (1L << (OBJECTPROPERTYEX - 579)) | (1L << (OBJECT_DEFINITION - 579)) | (1L << (OBJECT_ID - 579)) | (1L << (OBJECT_NAME - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (OBJECT_SCHEMA_NAME - 643)) | (1L << (OFFLINE - 643)) | (1L << (OFFSET - 643)) | (1L << (OLD_ACCOUNT - 643)) | (1L << (OLD_PASSWORD - 643)) | (1L << (ONLINE - 643)) | (1L << (ONLY - 643)) | (1L << (ON_FAILURE - 643)) | (1L << (OPENJSON - 643)) | (1L << (OPEN_EXISTING - 643)) | (1L << (OPERATIONS - 643)) | (1L << (OPTIMISTIC - 643)) | (1L << (OPTIMIZE - 643)) | (1L << (OPTIMIZE_FOR_SEQUENTIAL_KEY - 643)) | (1L << (ORIGINAL_DB_NAME - 643)) | (1L << (ORIGINAL_LOGIN - 643)) | (1L << (OUT - 643)) | (1L << (OUTPUT - 643)) | (1L << (OVERRIDE - 643)) | (1L << (OWNER - 643)) | (1L << (OWNERSHIP - 643)) | (1L << (PAD_INDEX - 643)) | (1L << (PAGE - 643)) | (1L << (PAGECOUNT - 643)) | (1L << (PAGE_VERIFY - 643)) | (1L << (PAGLOCK - 643)) | (1L << (PARAMETERIZATION - 643)) | (1L << (PARAM_NODE - 643)) | (1L << (PARSENAME - 643)) | (1L << (PARSEONLY - 643)) | (1L << (PARTIAL - 643)) | (1L << (PARTITION - 643)) | (1L << (PARTITIONS - 643)) | (1L << (PARTNER - 643)) | (1L << (PASSWORD - 643)) | (1L << (PATH - 643)) | (1L << (PATINDEX - 643)) | (1L << (PAUSE - 643)) | (1L << (PDW_SHOWSPACEUSED - 643)) | (1L << (PERCENTILE_CONT - 643)) | (1L << (PERCENTILE_DISC - 643)) | (1L << (PERCENT_RANK - 643)) | (1L << (PERMISSIONS - 643)) | (1L << (PERMISSION_SET - 643)) | (1L << (PERSISTED - 643)) | (1L << (PERSIST_SAMPLE_PERCENT - 643)) | (1L << (PER_CPU - 643)) | (1L << (PER_DB - 643)))) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & ((1L << (PER_NODE - 707)) | (1L << (PHYSICAL_ONLY - 707)) | (1L << (PLATFORM - 707)) | (1L << (POISON_MESSAGE_HANDLING - 707)) | (1L << (POLICY - 707)) | (1L << (POOL - 707)) | (1L << (PORT - 707)) | (1L << (PRECEDING - 707)) | (1L << (PRECISION - 707)) | (1L << (PREDICATE - 707)) | (1L << (PRIMARY_ROLE - 707)) | (1L << (PRIOR - 707)) | (1L << (PRIORITY - 707)) | (1L << (PRIORITY_LEVEL - 707)) | (1L << (PRIVATE - 707)) | (1L << (PRIVATE_KEY - 707)) | (1L << (PRIVILEGES - 707)) | (1L << (PROCCACHE - 707)) | (1L << (PROCEDURE_NAME - 707)) | (1L << (PROCESS - 707)) | (1L << (PROFILE - 707)) | (1L << (PROPERTY - 707)) | (1L << (PROVIDER - 707)) | (1L << (PROVIDER_KEY_NAME - 707)) | (1L << (PWDCOMPARE - 707)) | (1L << (PWDENCRYPT - 707)) | (1L << (PYTHON - 707)) | (1L << (QUERY - 707)) | (1L << (QUERY_SQUARE_BRACKET - 707)) | (1L << (QUEUE - 707)) | (1L << (QUEUE_DELAY - 707)) | (1L << (QUOTED_IDENTIFIER - 707)) | (1L << (QUOTENAME - 707)) | (1L << (R - 707)) | (1L << (RANDOMIZED - 707)) | (1L << (RANGE - 707)) | (1L << (RANK - 707)) | (1L << (RC2 - 707)) | (1L << (RC4 - 707)) | (1L << (RC4_128 - 707)) | (1L << (READCOMMITTED - 707)) | (1L << (READCOMMITTEDLOCK - 707)) | (1L << (READONLY - 707)) | (1L << (READPAST - 707)) | (1L << (READUNCOMMITTED - 707)) | (1L << (READWRITE - 707)) | (1L << (READ_COMMITTED_SNAPSHOT - 707)) | (1L << (READ_ONLY - 707)) | (1L << (READ_ONLY_ROUTING_LIST - 707)) | (1L << (READ_WRITE - 707)) | (1L << (READ_WRITE_FILEGROUPS - 707)))) != 0) || ((((_la - 771)) & ~0x3f) == 0 && ((1L << (_la - 771)) & ((1L << (REBUILD - 771)) | (1L << (RECEIVE - 771)) | (1L << (RECOMPILE - 771)) | (1L << (RECOVERY - 771)) | (1L << (RECURSIVE_TRIGGERS - 771)) | (1L << (REGENERATE - 771)) | (1L << (RELATED_CONVERSATION - 771)) | (1L << (RELATED_CONVERSATION_GROUP - 771)) | (1L << (RELATIVE - 771)) | (1L << (REMOTE - 771)) | (1L << (REMOTE_PROC_TRANSACTIONS - 771)) | (1L << (REMOTE_SERVICE_NAME - 771)) | (1L << (REMOVE - 771)) | (1L << (REORGANIZE - 771)) | (1L << (REPAIR_ALLOW_DATA_LOSS - 771)) | (1L << (REPAIR_FAST - 771)) | (1L << (REPAIR_REBUILD - 771)) | (1L << (REPEATABLE - 771)) | (1L << (REPEATABLEREAD - 771)) | (1L << (REPLACE - 771)) | (1L << (REPLICA - 771)) | (1L << (REPLICATE - 771)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 771)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 771)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 771)) | (1L << (REQUIRED - 771)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 771)) | (1L << (RESAMPLE - 771)) | (1L << (RESERVE_DISK_SPACE - 771)) | (1L << (RESET - 771)) | (1L << (RESOURCE - 771)) | (1L << (RESOURCES - 771)) | (1L << (RESOURCE_MANAGER_LOCATION - 771)) | (1L << (RESTART - 771)) | (1L << (RESTRICTED_USER - 771)) | (1L << (RESUMABLE - 771)) | (1L << (RESUME - 771)) | (1L << (RETAINDAYS - 771)) | (1L << (RETENTION - 771)) | (1L << (RETURNS - 771)) | (1L << (REVERSE - 771)) | (1L << (REWIND - 771)) | (1L << (ROBUST - 771)) | (1L << (ROLE - 771)) | (1L << (ROOT - 771)) | (1L << (ROUND_ROBIN - 771)) | (1L << (ROUTE - 771)) | (1L << (ROW - 771)) | (1L << (ROWCOUNT_BIG - 771)) | (1L << (ROWGUID - 771)) | (1L << (ROWS - 771)) | (1L << (ROW_NUMBER - 771)))) != 0) || ((((_la - 835)) & ~0x3f) == 0 && ((1L << (_la - 835)) & ((1L << (RSA_1024 - 835)) | (1L << (RSA_2048 - 835)) | (1L << (RSA_3072 - 835)) | (1L << (RSA_4096 - 835)) | (1L << (RSA_512 - 835)) | (1L << (RTRIM - 835)) | (1L << (SAFE - 835)) | (1L << (SAFETY - 835)) | (1L << (SAMPLE - 835)) | (1L << (SCHEDULER - 835)) | (1L << (SCHEMABINDING - 835)) | (1L << (SCHEMA_ID - 835)) | (1L << (SCHEMA_NAME - 835)) | (1L << (SCHEME - 835)) | (1L << (SCOPED - 835)) | (1L << (SCOPE_IDENTITY - 835)) | (1L << (SCRIPT - 835)) | (1L << (SCROLL - 835)) | (1L << (SCROLL_LOCKS - 835)) | (1L << (SEARCH - 835)) | (1L << (SECONDARY - 835)) | (1L << (SECONDARY_ONLY - 835)) | (1L << (SECONDARY_ROLE - 835)) | (1L << (SECONDS - 835)) | (1L << (SECRET - 835)) | (1L << (SECURABLES - 835)) | (1L << (SECURITY - 835)) | (1L << (SECURITY_LOG - 835)) | (1L << (SEEDING_MODE - 835)) | (1L << (SELF - 835)) | (1L << (SEMI_SENSITIVE - 835)) | (1L << (SEND - 835)) | (1L << (SENT - 835)) | (1L << (SEQUENCE - 835)) | (1L << (SEQUENCE_NUMBER - 835)) | (1L << (SERIALIZABLE - 835)) | (1L << (SERVER - 835)) | (1L << (SERVERPROPERTY - 835)) | (1L << (SERVICE - 835)) | (1L << (SERVICEBROKER - 835)) | (1L << (SERVICE_BROKER - 835)) | (1L << (SERVICE_NAME - 835)) | (1L << (SESSION - 835)) | (1L << (SESSIONPROPERTY - 835)) | (1L << (SESSION_CONTEXT - 835)) | (1L << (SESSION_TIMEOUT - 835)) | (1L << (SETERROR - 835)) | (1L << (SETTINGS - 835)) | (1L << (SHARE - 835)) | (1L << (SHARED - 835)) | (1L << (SHOWCONTIG - 835)) | (1L << (SHOWPLAN - 835)))) != 0) || ((((_la - 899)) & ~0x3f) == 0 && ((1L << (_la - 899)) & ((1L << (SHOWPLAN_ALL - 899)) | (1L << (SHOWPLAN_TEXT - 899)) | (1L << (SHOWPLAN_XML - 899)) | (1L << (SHRINKLOG - 899)) | (1L << (SID - 899)) | (1L << (SIGNATURE - 899)) | (1L << (SIMPLE - 899)) | (1L << (SINGLE_USER - 899)) | (1L << (SIZE - 899)) | (1L << (SKIP_KEYWORD - 899)) | (1L << (SMALLINT - 899)) | (1L << (SNAPSHOT - 899)) | (1L << (SOFTNUMA - 899)) | (1L << (SORT_IN_TEMPDB - 899)) | (1L << (SOUNDEX - 899)) | (1L << (SOURCE - 899)) | (1L << (SPACE_KEYWORD - 899)) | (1L << (SPARSE - 899)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 899)) | (1L << (SPECIFICATION - 899)) | (1L << (SPLIT - 899)) | (1L << (SQL - 899)) | (1L << (SQLDUMPERFLAGS - 899)) | (1L << (SQLDUMPERPATH - 899)) | (1L << (SQLDUMPERTIMEOUT - 899)) | (1L << (SQL_VARIANT_PROPERTY - 899)) | (1L << (STANDBY - 899)) | (1L << (START - 899)) | (1L << (STARTED - 899)) | (1L << (STARTUP_STATE - 899)) | (1L << (START_DATE - 899)) | (1L << (STATE - 899)) | (1L << (STATIC - 899)) | (1L << (STATISTICS_INCREMENTAL - 899)) | (1L << (STATISTICS_NORECOMPUTE - 899)) | (1L << (STATS - 899)) | (1L << (STATS_DATE - 899)) | (1L << (STATS_STREAM - 899)) | (1L << (STATUS - 899)) | (1L << (STATUSONLY - 899)) | (1L << (STDEV - 899)) | (1L << (STDEVP - 899)) | (1L << (STOP - 899)) | (1L << (STOPLIST - 899)) | (1L << (STOPPED - 899)) | (1L << (STOP_ON_ERROR - 899)) | (1L << (STR - 899)) | (1L << (STRING_AGG - 899)) | (1L << (STRING_ESCAPE - 899)) | (1L << (STUFF - 899)) | (1L << (SUBJECT - 899)) | (1L << (SUBSCRIBE - 899)) | (1L << (SUBSCRIPTION - 899)) | (1L << (SUBSTRING - 899)) | (1L << (SUM - 899)) | (1L << (SUPPORTED - 899)) | (1L << (SUSER_ID - 899)) | (1L << (SUSER_NAME - 899)) | (1L << (SUSER_SID - 899)) | (1L << (SUSER_SNAME - 899)) | (1L << (SUSPEND - 899)))) != 0) || ((((_la - 963)) & ~0x3f) == 0 && ((1L << (_la - 963)) & ((1L << (SWITCH - 963)) | (1L << (SYMMETRIC - 963)) | (1L << (SYNCHRONOUS_COMMIT - 963)) | (1L << (SYNONYM - 963)) | (1L << (SYSTEM - 963)) | (1L << (TABLERESULTS - 963)) | (1L << (TABLOCK - 963)) | (1L << (TABLOCKX - 963)) | (1L << (TAKE - 963)) | (1L << (TAPE - 963)) | (1L << (TARGET - 963)) | (1L << (TARGET_RECOVERY_TIME - 963)) | (1L << (TB - 963)) | (1L << (TCP - 963)) | (1L << (TEXTIMAGE_ON - 963)) | (1L << (THROW - 963)) | (1L << (TIES - 963)) | (1L << (TIME - 963)) | (1L << (TIMEOUT - 963)) | (1L << (TIMER - 963)) | (1L << (TINYINT - 963)) | (1L << (TORN_PAGE_DETECTION - 963)) | (1L << (TOSTRING - 963)) | (1L << (TRACE - 963)) | (1L << (TRACKING - 963)) | (1L << (TRACK_CAUSALITY - 963)) | (1L << (TRANSACTION_ID - 963)) | (1L << (TRANSFER - 963)) | (1L << (TRANSFORM_NOISE_WORDS - 963)) | (1L << (TRANSLATE - 963)) | (1L << (TRIM - 963)) | (1L << (TRIPLE_DES - 963)) | (1L << (TRIPLE_DES_3KEY - 963)) | (1L << (TRUSTWORTHY - 963)) | (1L << (TRY - 963)) | (1L << (TRY_CAST - 963)) | (1L << (TSQL - 963)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 963)) | (1L << (TYPE - 963)) | (1L << (TYPEPROPERTY - 963)) | (1L << (TYPE_ID - 963)) | (1L << (TYPE_NAME - 963)) | (1L << (TYPE_WARNING - 963)) | (1L << (UNBOUNDED - 963)) | (1L << (UNCHECKED - 963)) | (1L << (UNCOMMITTED - 963)) | (1L << (UNICODE - 963)) | (1L << (UNKNOWN - 963)) | (1L << (UNLIMITED - 963)) | (1L << (UNLOCK - 963)))) != 0) || ((((_la - 1027)) & ~0x3f) == 0 && ((1L << (_la - 1027)) & ((1L << (UNMASK - 1027)) | (1L << (UNSAFE - 1027)) | (1L << (UOW - 1027)) | (1L << (UPPER - 1027)) | (1L << (URL - 1027)) | (1L << (USED - 1027)) | (1L << (USER_ID - 1027)) | (1L << (USER_NAME - 1027)) | (1L << (USING - 1027)) | (1L << (VALIDATION - 1027)) | (1L << (VALID_XML - 1027)) | (1L << (VALUE - 1027)) | (1L << (VALUE_SQUARE_BRACKET - 1027)) | (1L << (VAR - 1027)) | (1L << (VARBINARY_KEYWORD - 1027)) | (1L << (VARP - 1027)) | (1L << (VERBOSELOGGING - 1027)) | (1L << (VERIFY_CLONEDB - 1027)) | (1L << (VERSION - 1027)) | (1L << (VIEWS - 1027)) | (1L << (VIEW_METADATA - 1027)) | (1L << (VISIBILITY - 1027)) | (1L << (WAIT - 1027)) | (1L << (WAIT_AT_LOW_PRIORITY - 1027)) | (1L << (WELL_FORMED_XML - 1027)) | (1L << (WINDOWS - 1027)) | (1L << (WITHOUT - 1027)) | (1L << (WITHOUT_ARRAY_WRAPPER - 1027)) | (1L << (WITNESS - 1027)) | (1L << (WORK - 1027)) | (1L << (WORKLOAD - 1027)) | (1L << (XLOCK - 1027)) | (1L << (XML - 1027)) | (1L << (XMLDATA - 1027)) | (1L << (XMLNAMESPACES - 1027)) | (1L << (XMLSCHEMA - 1027)) | (1L << (XML_COMPRESSION - 1027)) | (1L << (XSINIL - 1027)) | (1L << (ZONE - 1027)) | (1L << (VARCHAR - 1027)) | (1L << (NVARCHAR - 1027)))) != 0) || ((((_la - 1133)) & ~0x3f) == 0 && ((1L << (_la - 1133)) & ((1L << (DISK_DRIVE - 1133)) | (1L << (DATABASEPROPERTYEX - 1133)) | (1L << (NOLOCK - 1133)) | (1L << (ROWLOCK - 1133)) | (1L << (UPDLOCK - 1133)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_Context : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ITerminalNode DOUBLE_QUOTE_ID() { return GetToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public ITerminalNode SQUARE_BRACKET_ID() { return GetToken(TSqlParser.SQUARE_BRACKET_ID, 0); }
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public Id_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterId_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitId_(this);
		}
	}

	[RuleVersion(0)]
	public Id_Context id_() {
		Id_Context _localctx = new Id_Context(_ctx, State);
		EnterRule(_localctx, 1144, RULE_id_);
		try {
			State = 12667;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1764,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12663; Match(ID);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12664; Match(DOUBLE_QUOTE_ID);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 12665; Match(SQUARE_BRACKET_ID);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 12666; keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_idContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public Simple_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSimple_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSimple_id(this);
		}
	}

	[RuleVersion(0)]
	public Simple_idContext simple_id() {
		Simple_idContext _localctx = new Simple_idContext(_ctx, State);
		EnterRule(_localctx, 1146, RULE_simple_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12669; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_or_stringContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Id_or_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_or_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterId_or_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitId_or_string(this);
		}
	}

	[RuleVersion(0)]
	public Id_or_stringContext id_or_string() {
		Id_or_stringContext _localctx = new Id_or_stringContext(_ctx, State);
		EnterRule(_localctx, 1148, RULE_id_or_string);
		try {
			State = 12673;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1765,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12671; id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12672; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_operatorContext : ParserRuleContext {
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterComparison_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitComparison_operator(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_operatorContext comparison_operator() {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(_ctx, State);
		EnterRule(_localctx, 1150, RULE_comparison_operator);
		try {
			State = 12690;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1766,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12675; Match(EQUAL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12676; Match(GREATER);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 12677; Match(LESS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 12678; Match(LESS);
				State = 12679; Match(EQUAL);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 12680; Match(GREATER);
				State = 12681; Match(EQUAL);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 12682; Match(LESS);
				State = 12683; Match(GREATER);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 12684; Match(EXCLAMATION);
				State = 12685; Match(EQUAL);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 12686; Match(EXCLAMATION);
				State = 12687; Match(GREATER);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 12688; Match(EXCLAMATION);
				State = 12689; Match(LESS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(_ctx, State);
		EnterRule(_localctx, 1152, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12692;
			_la = _input.La(1);
			if ( !(((((_la - 1102)) & ~0x3f) == 0 && ((1L << (_la - 1102)) & ((1L << (PLUS_ASSIGN - 1102)) | (1L << (MINUS_ASSIGN - 1102)) | (1L << (MULT_ASSIGN - 1102)) | (1L << (DIV_ASSIGN - 1102)) | (1L << (MOD_ASSIGN - 1102)) | (1L << (AND_ASSIGN - 1102)) | (1L << (XOR_ASSIGN - 1102)) | (1L << (OR_ASSIGN - 1102)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_sizeContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode KB() { return GetToken(TSqlParser.KB, 0); }
		public ITerminalNode MB() { return GetToken(TSqlParser.MB, 0); }
		public ITerminalNode GB() { return GetToken(TSqlParser.GB, 0); }
		public ITerminalNode TB() { return GetToken(TSqlParser.TB, 0); }
		public File_sizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_size; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_size(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_size(this);
		}
	}

	[RuleVersion(0)]
	public File_sizeContext file_size() {
		File_sizeContext _localctx = new File_sizeContext(_ctx, State);
		EnterRule(_localctx, 1154, RULE_file_size);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12694; Match(DECIMAL);
			State = 12696;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1767,_ctx) ) {
			case 1:
				{
				State = 12695;
				_la = _input.La(1);
				if ( !(_la==GB || _la==KB || _la==MB || _la==TB || _la==MODULE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 47: return assembly_option_sempred((Assembly_optionContext)_localctx, predIndex);

		case 428: return expression_sempred((ExpressionContext)_localctx, predIndex);

		case 440: return search_condition_sempred((Search_conditionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool assembly_option_sempred(Assembly_optionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(_ctx, 5);

		case 2: return Precpred(_ctx, 4);

		case 3: return Precpred(_ctx, 11);

		case 4: return Precpred(_ctx, 10);

		case 5: return Precpred(_ctx, 3);
		}
		return true;
	}
	private bool search_condition_sempred(Search_conditionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(_ctx, 2);

		case 7: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x495\x319D\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9"+
		"\t\xB9\x4\xBA\t\xBA\x4\xBB\t\xBB\x4\xBC\t\xBC\x4\xBD\t\xBD\x4\xBE\t\xBE"+
		"\x4\xBF\t\xBF\x4\xC0\t\xC0\x4\xC1\t\xC1\x4\xC2\t\xC2\x4\xC3\t\xC3\x4\xC4"+
		"\t\xC4\x4\xC5\t\xC5\x4\xC6\t\xC6\x4\xC7\t\xC7\x4\xC8\t\xC8\x4\xC9\t\xC9"+
		"\x4\xCA\t\xCA\x4\xCB\t\xCB\x4\xCC\t\xCC\x4\xCD\t\xCD\x4\xCE\t\xCE\x4\xCF"+
		"\t\xCF\x4\xD0\t\xD0\x4\xD1\t\xD1\x4\xD2\t\xD2\x4\xD3\t\xD3\x4\xD4\t\xD4"+
		"\x4\xD5\t\xD5\x4\xD6\t\xD6\x4\xD7\t\xD7\x4\xD8\t\xD8\x4\xD9\t\xD9\x4\xDA"+
		"\t\xDA\x4\xDB\t\xDB\x4\xDC\t\xDC\x4\xDD\t\xDD\x4\xDE\t\xDE\x4\xDF\t\xDF"+
		"\x4\xE0\t\xE0\x4\xE1\t\xE1\x4\xE2\t\xE2\x4\xE3\t\xE3\x4\xE4\t\xE4\x4\xE5"+
		"\t\xE5\x4\xE6\t\xE6\x4\xE7\t\xE7\x4\xE8\t\xE8\x4\xE9\t\xE9\x4\xEA\t\xEA"+
		"\x4\xEB\t\xEB\x4\xEC\t\xEC\x4\xED\t\xED\x4\xEE\t\xEE\x4\xEF\t\xEF\x4\xF0"+
		"\t\xF0\x4\xF1\t\xF1\x4\xF2\t\xF2\x4\xF3\t\xF3\x4\xF4\t\xF4\x4\xF5\t\xF5"+
		"\x4\xF6\t\xF6\x4\xF7\t\xF7\x4\xF8\t\xF8\x4\xF9\t\xF9\x4\xFA\t\xFA\x4\xFB"+
		"\t\xFB\x4\xFC\t\xFC\x4\xFD\t\xFD\x4\xFE\t\xFE\x4\xFF\t\xFF\x4\x100\t\x100"+
		"\x4\x101\t\x101\x4\x102\t\x102\x4\x103\t\x103\x4\x104\t\x104\x4\x105\t"+
		"\x105\x4\x106\t\x106\x4\x107\t\x107\x4\x108\t\x108\x4\x109\t\x109\x4\x10A"+
		"\t\x10A\x4\x10B\t\x10B\x4\x10C\t\x10C\x4\x10D\t\x10D\x4\x10E\t\x10E\x4"+
		"\x10F\t\x10F\x4\x110\t\x110\x4\x111\t\x111\x4\x112\t\x112\x4\x113\t\x113"+
		"\x4\x114\t\x114\x4\x115\t\x115\x4\x116\t\x116\x4\x117\t\x117\x4\x118\t"+
		"\x118\x4\x119\t\x119\x4\x11A\t\x11A\x4\x11B\t\x11B\x4\x11C\t\x11C\x4\x11D"+
		"\t\x11D\x4\x11E\t\x11E\x4\x11F\t\x11F\x4\x120\t\x120\x4\x121\t\x121\x4"+
		"\x122\t\x122\x4\x123\t\x123\x4\x124\t\x124\x4\x125\t\x125\x4\x126\t\x126"+
		"\x4\x127\t\x127\x4\x128\t\x128\x4\x129\t\x129\x4\x12A\t\x12A\x4\x12B\t"+
		"\x12B\x4\x12C\t\x12C\x4\x12D\t\x12D\x4\x12E\t\x12E\x4\x12F\t\x12F\x4\x130"+
		"\t\x130\x4\x131\t\x131\x4\x132\t\x132\x4\x133\t\x133\x4\x134\t\x134\x4"+
		"\x135\t\x135\x4\x136\t\x136\x4\x137\t\x137\x4\x138\t\x138\x4\x139\t\x139"+
		"\x4\x13A\t\x13A\x4\x13B\t\x13B\x4\x13C\t\x13C\x4\x13D\t\x13D\x4\x13E\t"+
		"\x13E\x4\x13F\t\x13F\x4\x140\t\x140\x4\x141\t\x141\x4\x142\t\x142\x4\x143"+
		"\t\x143\x4\x144\t\x144\x4\x145\t\x145\x4\x146\t\x146\x4\x147\t\x147\x4"+
		"\x148\t\x148\x4\x149\t\x149\x4\x14A\t\x14A\x4\x14B\t\x14B\x4\x14C\t\x14C"+
		"\x4\x14D\t\x14D\x4\x14E\t\x14E\x4\x14F\t\x14F\x4\x150\t\x150\x4\x151\t"+
		"\x151\x4\x152\t\x152\x4\x153\t\x153\x4\x154\t\x154\x4\x155\t\x155\x4\x156"+
		"\t\x156\x4\x157\t\x157\x4\x158\t\x158\x4\x159\t\x159\x4\x15A\t\x15A\x4"+
		"\x15B\t\x15B\x4\x15C\t\x15C\x4\x15D\t\x15D\x4\x15E\t\x15E\x4\x15F\t\x15F"+
		"\x4\x160\t\x160\x4\x161\t\x161\x4\x162\t\x162\x4\x163\t\x163\x4\x164\t"+
		"\x164\x4\x165\t\x165\x4\x166\t\x166\x4\x167\t\x167\x4\x168\t\x168\x4\x169"+
		"\t\x169\x4\x16A\t\x16A\x4\x16B\t\x16B\x4\x16C\t\x16C\x4\x16D\t\x16D\x4"+
		"\x16E\t\x16E\x4\x16F\t\x16F\x4\x170\t\x170\x4\x171\t\x171\x4\x172\t\x172"+
		"\x4\x173\t\x173\x4\x174\t\x174\x4\x175\t\x175\x4\x176\t\x176\x4\x177\t"+
		"\x177\x4\x178\t\x178\x4\x179\t\x179\x4\x17A\t\x17A\x4\x17B\t\x17B\x4\x17C"+
		"\t\x17C\x4\x17D\t\x17D\x4\x17E\t\x17E\x4\x17F\t\x17F\x4\x180\t\x180\x4"+
		"\x181\t\x181\x4\x182\t\x182\x4\x183\t\x183\x4\x184\t\x184\x4\x185\t\x185"+
		"\x4\x186\t\x186\x4\x187\t\x187\x4\x188\t\x188\x4\x189\t\x189\x4\x18A\t"+
		"\x18A\x4\x18B\t\x18B\x4\x18C\t\x18C\x4\x18D\t\x18D\x4\x18E\t\x18E\x4\x18F"+
		"\t\x18F\x4\x190\t\x190\x4\x191\t\x191\x4\x192\t\x192\x4\x193\t\x193\x4"+
		"\x194\t\x194\x4\x195\t\x195\x4\x196\t\x196\x4\x197\t\x197\x4\x198\t\x198"+
		"\x4\x199\t\x199\x4\x19A\t\x19A\x4\x19B\t\x19B\x4\x19C\t\x19C\x4\x19D\t"+
		"\x19D\x4\x19E\t\x19E\x4\x19F\t\x19F\x4\x1A0\t\x1A0\x4\x1A1\t\x1A1\x4\x1A2"+
		"\t\x1A2\x4\x1A3\t\x1A3\x4\x1A4\t\x1A4\x4\x1A5\t\x1A5\x4\x1A6\t\x1A6\x4"+
		"\x1A7\t\x1A7\x4\x1A8\t\x1A8\x4\x1A9\t\x1A9\x4\x1AA\t\x1AA\x4\x1AB\t\x1AB"+
		"\x4\x1AC\t\x1AC\x4\x1AD\t\x1AD\x4\x1AE\t\x1AE\x4\x1AF\t\x1AF\x4\x1B0\t"+
		"\x1B0\x4\x1B1\t\x1B1\x4\x1B2\t\x1B2\x4\x1B3\t\x1B3\x4\x1B4\t\x1B4\x4\x1B5"+
		"\t\x1B5\x4\x1B6\t\x1B6\x4\x1B7\t\x1B7\x4\x1B8\t\x1B8\x4\x1B9\t\x1B9\x4"+
		"\x1BA\t\x1BA\x4\x1BB\t\x1BB\x4\x1BC\t\x1BC\x4\x1BD\t\x1BD\x4\x1BE\t\x1BE"+
		"\x4\x1BF\t\x1BF\x4\x1C0\t\x1C0\x4\x1C1\t\x1C1\x4\x1C2\t\x1C2\x4\x1C3\t"+
		"\x1C3\x4\x1C4\t\x1C4\x4\x1C5\t\x1C5\x4\x1C6\t\x1C6\x4\x1C7\t\x1C7\x4\x1C8"+
		"\t\x1C8\x4\x1C9\t\x1C9\x4\x1CA\t\x1CA\x4\x1CB\t\x1CB\x4\x1CC\t\x1CC\x4"+
		"\x1CD\t\x1CD\x4\x1CE\t\x1CE\x4\x1CF\t\x1CF\x4\x1D0\t\x1D0\x4\x1D1\t\x1D1"+
		"\x4\x1D2\t\x1D2\x4\x1D3\t\x1D3\x4\x1D4\t\x1D4\x4\x1D5\t\x1D5\x4\x1D6\t"+
		"\x1D6\x4\x1D7\t\x1D7\x4\x1D8\t\x1D8\x4\x1D9\t\x1D9\x4\x1DA\t\x1DA\x4\x1DB"+
		"\t\x1DB\x4\x1DC\t\x1DC\x4\x1DD\t\x1DD\x4\x1DE\t\x1DE\x4\x1DF\t\x1DF\x4"+
		"\x1E0\t\x1E0\x4\x1E1\t\x1E1\x4\x1E2\t\x1E2\x4\x1E3\t\x1E3\x4\x1E4\t\x1E4"+
		"\x4\x1E5\t\x1E5\x4\x1E6\t\x1E6\x4\x1E7\t\x1E7\x4\x1E8\t\x1E8\x4\x1E9\t"+
		"\x1E9\x4\x1EA\t\x1EA\x4\x1EB\t\x1EB\x4\x1EC\t\x1EC\x4\x1ED\t\x1ED\x4\x1EE"+
		"\t\x1EE\x4\x1EF\t\x1EF\x4\x1F0\t\x1F0\x4\x1F1\t\x1F1\x4\x1F2\t\x1F2\x4"+
		"\x1F3\t\x1F3\x4\x1F4\t\x1F4\x4\x1F5\t\x1F5\x4\x1F6\t\x1F6\x4\x1F7\t\x1F7"+
		"\x4\x1F8\t\x1F8\x4\x1F9\t\x1F9\x4\x1FA\t\x1FA\x4\x1FB\t\x1FB\x4\x1FC\t"+
		"\x1FC\x4\x1FD\t\x1FD\x4\x1FE\t\x1FE\x4\x1FF\t\x1FF\x4\x200\t\x200\x4\x201"+
		"\t\x201\x4\x202\t\x202\x4\x203\t\x203\x4\x204\t\x204\x4\x205\t\x205\x4"+
		"\x206\t\x206\x4\x207\t\x207\x4\x208\t\x208\x4\x209\t\x209\x4\x20A\t\x20A"+
		"\x4\x20B\t\x20B\x4\x20C\t\x20C\x4\x20D\t\x20D\x4\x20E\t\x20E\x4\x20F\t"+
		"\x20F\x4\x210\t\x210\x4\x211\t\x211\x4\x212\t\x212\x4\x213\t\x213\x4\x214"+
		"\t\x214\x4\x215\t\x215\x4\x216\t\x216\x4\x217\t\x217\x4\x218\t\x218\x4"+
		"\x219\t\x219\x4\x21A\t\x21A\x4\x21B\t\x21B\x4\x21C\t\x21C\x4\x21D\t\x21D"+
		"\x4\x21E\t\x21E\x4\x21F\t\x21F\x4\x220\t\x220\x4\x221\t\x221\x4\x222\t"+
		"\x222\x4\x223\t\x223\x4\x224\t\x224\x4\x225\t\x225\x4\x226\t\x226\x4\x227"+
		"\t\x227\x4\x228\t\x228\x4\x229\t\x229\x4\x22A\t\x22A\x4\x22B\t\x22B\x4"+
		"\x22C\t\x22C\x4\x22D\t\x22D\x4\x22E\t\x22E\x4\x22F\t\x22F\x4\x230\t\x230"+
		"\x4\x231\t\x231\x4\x232\t\x232\x4\x233\t\x233\x4\x234\t\x234\x4\x235\t"+
		"\x235\x4\x236\t\x236\x4\x237\t\x237\x4\x238\t\x238\x4\x239\t\x239\x4\x23A"+
		"\t\x23A\x4\x23B\t\x23B\x4\x23C\t\x23C\x4\x23D\t\x23D\x4\x23E\t\x23E\x4"+
		"\x23F\t\x23F\x4\x240\t\x240\x4\x241\t\x241\x4\x242\t\x242\x4\x243\t\x243"+
		"\x3\x2\a\x2\x488\n\x2\f\x2\xE\x2\x48B\v\x2\x3\x2\x3\x2\x3\x2\a\x2\x490"+
		"\n\x2\f\x2\xE\x2\x493\v\x2\x3\x2\x3\x2\x5\x2\x497\n\x2\x3\x3\x3\x3\x5"+
		"\x3\x49B\n\x3\x3\x3\x3\x3\x6\x3\x49F\n\x3\r\x3\xE\x3\x4A0\x5\x3\x4A3\n"+
		"\x3\x3\x3\a\x3\x4A6\n\x3\f\x3\xE\x3\x4A9\v\x3\x3\x3\x3\x3\a\x3\x4AD\n"+
		"\x3\f\x3\xE\x3\x4B0\v\x3\x3\x3\x5\x3\x4B3\n\x3\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x5\x4\x4B9\n\x4\x3\x5\x3\x5\x5\x5\x4BD\n\x5\x3\x5\x3\x5\x5\x5\x4C1\n"+
		"\x5\x3\x5\x3\x5\x5\x5\x4C5\n\x5\x3\x5\x3\x5\x5\x5\x4C9\n\x5\x3\x5\x3\x5"+
		"\x5\x5\x4CD\n\x5\x3\x5\x3\x5\x5\x5\x4D1\n\x5\x3\x5\x3\x5\x5\x5\x4D5\n"+
		"\x5\x3\x5\x5\x5\x4D8\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x4DF\n\x6"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x582\n\a\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x5\b\x589\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x5\t\x597\n\t\x3\n\x3\n\x5\n\x59B\n\n\x3\n\a\n\x59E\n\n\f\n"+
		"\xE\n\x5A1\v\n\x3\n\x3\n\x5\n\x5A5\n\n\x3\v\x3\v\x5\v\x5A9\n\v\x3\f\x3"+
		"\f\x5\f\x5AD\n\f\x3\r\x3\r\x3\r\x5\r\x5B2\n\r\x3\r\x3\r\x3\r\x5\r\x5B7"+
		"\n\r\x5\r\x5B9\n\r\x3\xE\x3\xE\x5\xE\x5BD\n\xE\x3\xE\x5\xE\x5C0\n\xE\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x5C7\n\xF\x3\xF\x5\xF\x5CA\n\xF\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x5D3\n\x10\x3\x10\x5"+
		"\x10\x5D6\n\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14"+
		"\x3\x14\x5\x14\x5E1\n\x14\x3\x14\x6\x14\x5E4\n\x14\r\x14\xE\x14\x5E5\x3"+
		"\x14\x3\x14\x3\x14\x5\x14\x5EB\n\x14\x3\x14\x3\x14\x3\x14\x5\x14\x5F0"+
		"\n\x14\x3\x14\a\x14\x5F3\n\x14\f\x14\xE\x14\x5F6\v\x14\x3\x14\x3\x14\x3"+
		"\x14\x5\x14\x5FB\n\x14\x3\x15\x3\x15\x5\x15\x5FF\n\x15\x3\x15\x5\x15\x602"+
		"\n\x15\x3\x15\x3\x15\x5\x15\x606\n\x15\x3\x15\x5\x15\x609\n\x15\x3\x15"+
		"\x5\x15\x60C\n\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x613\n\x16"+
		"\x3\x16\x3\x16\x5\x16\x617\n\x16\x5\x16\x619\n\x16\x3\x17\x3\x17\x3\x17"+
		"\x5\x17\x61E\n\x17\x3\x17\x3\x17\a\x17\x622\n\x17\f\x17\xE\x17\x625\v"+
		"\x17\x3\x17\x5\x17\x628\n\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\a\x18\x633\n\x18\f\x18\xE\x18\x636\v\x18\x3\x18"+
		"\x3\x18\x3\x18\x5\x18\x63B\n\x18\x3\x18\x5\x18\x63E\n\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\a\x18\x645\n\x18\f\x18\xE\x18\x648\v\x18\x5\x18"+
		"\x64A\n\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x5\x1A\x65F\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B"+
		"\x667\n\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x66C\n\x1B\x3\x1B\x5\x1B\x66F"+
		"\n\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x674\n\x1B\x3\x1B\x5\x1B\x677\n\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x67C\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x3\x1C\x3\x1C\x5\x1C\x685\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D"+
		"\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x691\n\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x5\x1D\x696\n\x1D\x3\x1D\x5\x1D\x699\n\x1D\x3\x1D\x3\x1D\x3\x1D\x5"+
		"\x1D\x69E\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x6A4\n\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x5\x1E\x6A9\n\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3 \x3 \x3 \x3 \x3!\x3!\x3!\x3\"\x5\"\x6BA\n\"\x3\"\x5\"\x6BD"+
		"\n\"\x3\"\x5\"\x6C0\n\"\x3\"\x5\"\x6C3\n\"\x3#\x3#\x3#\x5#\x6C8\n#\x3"+
		"$\x3$\x3%\x3%\x3%\x3&\x3&\x5&\x6D1\n&\x3\'\x3\'\x3(\x3(\x3(\x3)\x3)\x3"+
		")\x3)\x3*\x3*\x3*\x3*\x5*\x6E0\n*\x3+\x3+\x3,\x3,\x3,\x3-\x3-\x3.\x3."+
		"\x3.\x3/\x3/\x3\x30\x3\x30\x3\x30\x5\x30\x6F1\n\x30\x3\x31\x3\x31\x3\x31"+
		"\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x5\x31\x6FC\n\x31\x3\x31\x3"+
		"\x31\a\x31\x700\n\x31\f\x31\xE\x31\x703\v\x31\x3\x32\x3\x32\x3\x32\x3"+
		"\x32\x3\x33\x3\x33\x3\x34\x3\x34\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x711"+
		"\n\x35\x3\x36\x3\x36\x3\x37\x3\x37\x3\x37\x3\x38\x3\x38\x3\x39\x3\x39"+
		"\x3\x39\x3\x39\x3\x39\x3\x39\x5\x39\x720\n\x39\x3:\x3:\x3;\x3;\x3;\x3"+
		";\x3;\x5;\x729\n;\x3;\x3;\x5;\x72D\n;\x3;\x6;\x730\n;\r;\xE;\x731\x3;"+
		"\x3;\x3;\x3;\x5;\x738\n;\x3<\x3<\x3<\x3<\x5<\x73E\n<\x3<\x5<\x741\n<\x3"+
		"<\x6<\x744\n<\r<\xE<\x745\x3<\x3<\x3<\x5<\x74B\n<\x3=\x3=\x3=\x3=\x3="+
		"\x3=\x5=\x753\n=\x3>\x3>\x3>\x3>\x3?\x3?\x3?\x3?\x5?\x75D\n?\x3?\x3?\x3"+
		"@\x3@\x3@\x3@\x3@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3"+
		"\x41\x3\x41\x3\x41\x5\x41\x770\n\x41\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42"+
		"\x3\x42\x5\x42\x778\n\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3"+
		"\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x785\n\x42\x5\x42\x787\n\x42\x3"+
		"\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5"+
		"\x42\x793\n\x42\x5\x42\x795\n\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5"+
		"\x42\x79C\n\x42\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x5\x43"+
		"\x7A5\n\x43\x3\x44\x3\x44\x3\x44\x3\x44\x5\x44\x7AB\n\x44\x3\x44\x3\x44"+
		"\x3\x44\x3\x44\x3\x45\x3\x45\x3\x45\x5\x45\x7B4\n\x45\x3\x46\x3\x46\x3"+
		"G\x3G\x3H\x3H\x3H\x3H\x3I\x3I\x3I\x3I\x5I\x7C2\nI\x3I\x3I\x3I\x3I\x3J"+
		"\x3J\x3J\x3J\x5J\x7CC\nJ\x3J\x3J\x3J\x3J\x3K\x3K\x3K\x3K\x5K\x7D6\nK\x3"+
		"K\x3K\x3K\x3K\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L"+
		"\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3"+
		"L\x3L\x3L\x5L\x7FE\nL\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M"+
		"\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x5M\x815\nM\x3N\x3N\x3O\x3O\x3P\x3"+
		"P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P"+
		"\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x5P\x839\nP\x5P\x83B\nP\x3"+
		"P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x5P\x84D"+
		"\nP\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3"+
		"P\x3P\x3P\x3P\x3P\x3P\x5P\x865\nP\x3P\x5P\x868\nP\x3P\x3P\x3P\x3P\x3P"+
		"\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x5P\x876\nP\x3Q\x3Q\x3Q\x3Q\x3Q\x3R\x3R\x3"+
		"R\x3S\x3S\x3S\x3S\x3S\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T"+
		"\x3T\x3T\x3T\x3T\x3T\x5T\x896\nT\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3"+
		"T\x3T\x3T\x3T\x3T\x3T\x3T\x5T\x8A8\nT\x3T\x5T\x8AB\nT\x3T\x3T\x3T\x5T"+
		"\x8B0\nT\x3T\x5T\x8B3\nT\x3T\x3T\x3T\x5T\x8B8\nT\x3T\x5T\x8BB\nT\x3T\x3"+
		"T\x3T\x5T\x8C0\nT\x3T\x5T\x8C3\nT\x3T\x3T\x3T\x5T\x8C8\nT\x3T\x5T\x8CB"+
		"\nT\x3T\x3T\x3T\x3T\x3T\x3T\x5T\x8D3\nT\x3T\x5T\x8D6\nT\x3T\x3T\x3T\x3"+
		"T\x3T\x3T\x5T\x8DE\nT\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x5T"+
		"\x8EB\nT\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x5T\x8F6\nT\x3T\aT\x8F9\n"+
		"T\fT\xET\x8FC\vT\x3T\x5T\x8FF\nT\x3T\x3T\x3T\x3T\x5T\x905\nT\x3T\x3T\x3"+
		"T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T"+
		"\x3T\x5T\x91C\nT\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x5T\x928\nT\x3"+
		"T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x5T\x933\nT\x3T\aT\x936\nT\fT\xET\x939"+
		"\vT\x3T\x5T\x93C\nT\x3T\x3T\x3T\x3T\x5T\x942\nT\x5T\x944\nT\x3T\x3T\x3"+
		"T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x5T\x951\nT\x3T\x3T\x3T\x3T\x3T\x3T"+
		"\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x6T\x966\nT\rT\xE"+
		"T\x967\x3T\x3T\x3T\x3T\x3T\x5T\x96F\nT\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x5"+
		"T\x978\nT\x3T\x3T\x3T\x5T\x97D\nT\x3T\x5T\x980\nT\x3T\x3T\x3T\x5T\x985"+
		"\nT\x3T\x5T\x988\nT\x3T\x3T\x3T\x5T\x98D\nT\x3T\x6T\x990\nT\rT\xET\x991"+
		"\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3"+
		"T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x5T\x9AE\nT\x3T\x3T\x3T\x3T\x3T\x3T"+
		"\x5T\x9B6\nT\x3T\x3T\x6T\x9BA\nT\rT\xET\x9BB\x3T\x3T\x3T\x3T\x3T\x5T\x9C3"+
		"\nT\x5T\x9C5\nT\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x5T\x9D2\n"+
		"T\x3T\x3T\x3T\x3T\x3T\x5T\x9D9\nT\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T"+
		"\x3T\x3T\x3T\x3T\x5T\x9E8\nT\x3U\x3U\x3V\x3V\x3W\x3W\x3W\x3W\x3W\x3W\x3"+
		"W\x3W\x3W\x3W\x3W\x3W\x5W\x9FA\nW\x3W\x5W\x9FD\nW\x5W\x9FF\nW\x3W\x3W"+
		"\x3W\x5W\xA04\nW\x3W\x3W\x5W\xA08\nW\x3W\x5W\xA0B\nW\x5W\xA0D\nW\x3W\x3"+
		"W\x3W\x3W\x5W\xA13\nW\x3W\x5W\xA16\nW\x5W\xA18\nW\x3W\x3W\x3W\x3W\x5W"+
		"\xA1E\nW\x5W\xA20\nW\x3W\x3W\x3X\x3X\x3X\x3X\x3X\x3Y\x3Y\x3Y\x3Y\x3Y\x3"+
		"Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x5Y\xA36\nY\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x5Y"+
		"\xA3E\nY\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x5Y\xA46\nY\x6Y\xA48\nY\rY\xEY\xA49\x3"+
		"Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x5Y\xA53\nY\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z"+
		"\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x5Z\xA68\nZ\x3Z\x3Z\x3[\x3"+
		"[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x5[\xA75\n[\x3[\x3[\x3[\x3[\x3[\x3[\x3["+
		"\x3[\x3[\x3[\x3[\x3[\x3[\x5[\xA84\n[\x6[\xA86\n[\r[\xE[\xA87\x3\\\x3\\"+
		"\x3\\\x3\\\x3]\x3]\x3]\x3]\x3]\x3]\x3^\x3^\x3^\x3^\x3^\x3^\x3_\x3_\x3"+
		"_\x3_\x3`\x3`\x3`\x3`\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3\x62\x3\x62"+
		"\x3\x62\x3\x62\x5\x62\xAAB\n\x62\x3\x62\x5\x62\xAAE\n\x62\x3\x62\x6\x62"+
		"\xAB1\n\x62\r\x62\xE\x62\xAB2\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63"+
		"\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65"+
		"\x3\x65\x3\x66\x3\x66\x3\x66\x3\x66\x5\x66\xACA\n\x66\x3\x66\x5\x66\xACD"+
		"\n\x66\x3\x66\x3\x66\x3\x66\x5\x66\xAD2\n\x66\x3\x66\x3\x66\x3g\x3g\x3"+
		"g\x3g\x3h\x3h\x3h\x3h\x3h\x3h\x3i\x3i\x3i\x3i\x3i\x3i\x3j\x3j\x3j\x3j"+
		"\x3j\x3j\x5j\xAEC\nj\x3k\x3k\x3k\x3k\x3k\x3k\x3l\x3l\x3l\x3l\x3l\x3l\x5"+
		"l\xAFA\nl\x3l\x3l\x3l\x5l\xAFF\nl\x3l\x3l\x3m\x3m\x3m\x3m\x5m\xB07\nm"+
		"\x3m\x6m\xB0A\nm\rm\xEm\xB0B\x3m\x3m\x3m\x3m\x3m\x5m\xB13\nm\x3n\x3n\x3"+
		"n\x3n\x3n\x3n\x3n\x3o\x3o\x3o\x3o\x3o\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x5p"+
		"\xB28\np\x3p\x3p\x3q\x3q\x3q\x3q\x3q\x3r\x3r\x3r\x3r\x3s\x3s\x3s\x3s\x3"+
		"t\x3t\x3t\x3t\x3t\x3u\x3u\x3u\x3u\x3u\x3v\x3v\x3v\x3v\x3v\x3w\x3w\x3w"+
		"\x3w\x3w\x5w\xB4D\nw\x3w\x3w\x3w\x5w\xB52\nw\x3w\x3w\x3x\x3x\x3x\x3x\x3"+
		"x\x3x\x3y\x3y\x3y\x3y\x3y\x3z\x3z\x3z\x3z\x5z\xB65\nz\x3z\x3z\x3{\x3{"+
		"\x3{\x3{\x3|\x3|\x3|\x3|\x5|\xB71\n|\x3|\x5|\xB74\n|\x3|\x3|\x3|\x5|\xB79"+
		"\n|\x3|\x5|\xB7C\n|\x3}\x3}\x3}\x3}\x5}\xB82\n}\x3}\x3}\x3~\x3~\x3~\x3"+
		"~\x3~\x3~\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x5\x7F\xB91\n\x7F\x3\x7F"+
		"\x3\x7F\x3\x7F\x5\x7F\xB96\n\x7F\x3\x7F\x3\x7F\x3\x80\x3\x80\x3\x80\x3"+
		"\x80\x5\x80\xB9E\n\x80\x3\x80\x5\x80\xBA1\n\x80\x3\x80\x3\x80\x3\x80\x5"+
		"\x80\xBA6\n\x80\x3\x80\x3\x80\x3\x80\x5\x80\xBAB\n\x80\x3\x80\x5\x80\xBAE"+
		"\n\x80\x3\x81\x3\x81\x3\x81\x3\x81\x3\x81\x3\x82\x3\x82\x3\x82\x3\x82"+
		"\x3\x82\x3\x82\x3\x83\x3\x83\x3\x83\x3\x83\x3\x83\x3\x84\x3\x84\x3\x84"+
		"\x3\x84\x3\x85\x3\x85\x5\x85\xBC6\n\x85\x3\x85\x3\x85\x3\x85\x3\x85\x3"+
		"\x85\x5\x85\xBCD\n\x85\x3\x85\x3\x85\x3\x85\x5\x85\xBD2\n\x85\x3\x85\x3"+
		"\x85\x3\x85\x5\x85\xBD7\n\x85\x3\x85\x3\x85\x3\x85\x6\x85\xBDC\n\x85\r"+
		"\x85\xE\x85\xBDD\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86\x5\x86\xBE5\n\x86"+
		"\x3\x86\x3\x86\x3\x86\x3\x86\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87"+
		"\x3\x87\x5\x87\xBF2\n\x87\x3\x88\x3\x88\x3\x88\x3\x88\x5\x88\xBF8\n\x88"+
		"\x3\x88\x3\x88\x3\x88\x5\x88\xBFD\n\x88\x3\x88\x3\x88\x3\x89\x3\x89\x3"+
		"\x89\x3\x89\x5\x89\xC05\n\x89\x3\x89\x3\x89\x3\x8A\x3\x8A\x3\x8A\x3\x8A"+
		"\x3\x8A\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x5\x8B\xC15\n"+
		"\x8B\x3\x8B\x3\x8B\x3\x8C\x3\x8C\x3\x8C\x5\x8C\xC1C\n\x8C\x3\x8C\x3\x8C"+
		"\x3\x8C\x5\x8C\xC21\n\x8C\x3\x8C\x6\x8C\xC24\n\x8C\r\x8C\xE\x8C\xC25\x3"+
		"\x8C\x5\x8C\xC29\n\x8C\x3\x8C\x3\x8C\x3\x8C\x3\x8C\x5\x8C\xC2F\n\x8C\x3"+
		"\x8C\x3\x8C\x3\x8C\x3\x8C\x5\x8C\xC35\n\x8C\x3\x8D\x3\x8D\x3\x8D\x5\x8D"+
		"\xC3A\n\x8D\x3\x8D\x3\x8D\x3\x8D\x5\x8D\xC3F\n\x8D\x3\x8D\x6\x8D\xC42"+
		"\n\x8D\r\x8D\xE\x8D\xC43\x3\x8D\x5\x8D\xC47\n\x8D\x3\x8D\x3\x8D\x3\x8D"+
		"\x3\x8D\x5\x8D\xC4D\n\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x5\x8D\xC53\n\x8D"+
		"\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x5\x8E"+
		"\xC5E\n\x8E\x3\x8E\x5\x8E\xC61\n\x8E\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F"+
		"\x3\x8F\x3\x8F\x3\x8F\x5\x8F\xC6B\n\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x5"+
		"\x8F\xC71\n\x8F\x6\x8F\xC73\n\x8F\r\x8F\xE\x8F\xC74\x3\x8F\x3\x8F\x5\x8F"+
		"\xC79\n\x8F\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3"+
		"\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x91\x3\x91\x3"+
		"\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x5\x91\xC96"+
		"\n\x91\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92"+
		"\x3\x92\x3\x92\x5\x92\xCA3\n\x92\x3\x92\x3\x92\x3\x92\x3\x92\x5\x92\xCA9"+
		"\n\x92\x3\x93\x3\x93\x3\x93\x3\x93\x3\x93\x3\x93\x3\x93\x3\x93\x5\x93"+
		"\xCB3\n\x93\x3\x93\x5\x93\xCB6\n\x93\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94"+
		"\x3\x94\x3\x94\x3\x94\x3\x94\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x5\x95"+
		"\xCC6\n\x95\x3\x95\x3\x95\x3\x95\x5\x95\xCCB\n\x95\x3\x95\x3\x95\x3\x95"+
		"\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95"+
		"\x3\x95\x5\x95\xCDB\n\x95\x3\x95\x5\x95\xCDE\n\x95\x3\x95\x5\x95\xCE1"+
		"\n\x95\x3\x95\x3\x95\x3\x95\x5\x95\xCE6\n\x95\x3\x95\x5\x95\xCE9\n\x95"+
		"\x3\x95\x3\x95\x3\x95\x5\x95\xCEE\n\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3"+
		"\x95\x3\x95\x3\x95\x5\x95\xCF7\n\x95\x3\x95\x5\x95\xCFA\n\x95\x3\x95\x5"+
		"\x95\xCFD\n\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x5\x95\xD04\n\x95\x3"+
		"\x96\x3\x96\x3\x96\x3\x96\x3\x96\x3\x96\x5\x96\xD0C\n\x96\x3\x96\x3\x96"+
		"\x5\x96\xD10\n\x96\x5\x96\xD12\n\x96\x5\x96\xD14\n\x96\x3\x97\x3\x97\x3"+
		"\x97\x3\x97\x5\x97\xD1A\n\x97\x3\x97\x3\x97\x5\x97\xD1E\n\x97\x3\x97\x3"+
		"\x97\x3\x97\x5\x97\xD23\n\x97\x3\x97\x5\x97\xD26\n\x97\x5\x97\xD28\n\x97"+
		"\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98"+
		"\x5\x98\xD34\n\x98\x3\x98\x5\x98\xD37\n\x98\x5\x98\xD39\n\x98\x3\x99\x3"+
		"\x99\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x5\x99\xD44\n\x99"+
		"\x3\x99\x3\x99\x5\x99\xD48\n\x99\x3\x99\x3\x99\x5\x99\xD4C\n\x99\x3\x99"+
		"\x6\x99\xD4F\n\x99\r\x99\xE\x99\xD50\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99"+
		"\x3\x99\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xD60\n"+
		"\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xD67\n\x9A\x3\x9A\x3\x9A"+
		"\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xD70\n\x9A\x3\x9A\x3\x9A\x3"+
		"\x9A\x3\x9A\a\x9A\xD76\n\x9A\f\x9A\xE\x9A\xD79\v\x9A\x5\x9A\xD7B\n\x9A"+
		"\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xD80\n\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xD85"+
		"\n\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x6\x9A\xD8B\n\x9A\r\x9A\xE\x9A\xD8C"+
		"\x3\x9A\x3\x9A\x6\x9A\xD91\n\x9A\r\x9A\xE\x9A\xD92\x3\x9A\x3\x9A\x5\x9A"+
		"\xD97\n\x9A\x3\x9A\x3\x9A\a\x9A\xD9B\n\x9A\f\x9A\xE\x9A\xD9E\v\x9A\a\x9A"+
		"\xDA0\n\x9A\f\x9A\xE\x9A\xDA3\v\x9A\x3\x9A\x5\x9A\xDA6\n\x9A\x3\x9A\x3"+
		"\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xDAD\n\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A"+
		"\a\x9A\xDB3\n\x9A\f\x9A\xE\x9A\xDB6\v\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A"+
		"\x3\x9A\x5\x9A\xDBD\n\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3"+
		"\x9A\x5\x9A\xDC6\n\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xDCB\n\x9A\x3\x9A\x3"+
		"\x9A\x5\x9A\xDCF\n\x9A\x3\x9A\x5\x9A\xDD2\n\x9A\x6\x9A\xDD4\n\x9A\r\x9A"+
		"\xE\x9A\xDD5\x3\x9A\x3\x9A\a\x9A\xDDA\n\x9A\f\x9A\xE\x9A\xDDD\v\x9A\a"+
		"\x9A\xDDF\n\x9A\f\x9A\xE\x9A\xDE2\v\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3"+
		"\x9A\x5\x9A\xDE9\n\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\a\x9A\xDEF\n\x9A\f"+
		"\x9A\xE\x9A\xDF2\v\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xDF7\n\x9A\x3\x9A\x3"+
		"\x9A\x3\x9A\x3\x9A\x5\x9A\xDFD\n\x9A\x3\x9A\x5\x9A\xE00\n\x9A\x3\x9A\x3"+
		"\x9A\x3\x9A\x5\x9A\xE05\n\x9A\x3\x9A\x5\x9A\xE08\n\x9A\x3\x9A\x3\x9A\x3"+
		"\x9A\x3\x9A\x3\x9A\x5\x9A\xE0F\n\x9A\x5\x9A\xE11\n\x9A\x3\x9A\x5\x9A\xE14"+
		"\n\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xE1A\n\x9A\x3\x9A\x5\x9A\xE1D"+
		"\n\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xE22\n\x9A\x3\x9A\x5\x9A\xE25\n\x9A"+
		"\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xE2A\n\x9A\x3\x9A\x5\x9A\xE2D\n\x9A\x3\x9A"+
		"\x3\x9A\x3\x9A\x5\x9A\xE32\n\x9A\x3\x9A\x5\x9A\xE35\n\x9A\x3\x9A\x3\x9A"+
		"\x3\x9A\x5\x9A\xE3A\n\x9A\x3\x9B\x5\x9B\xE3D\n\x9B\x3\x9B\x5\x9B\xE40"+
		"\n\x9B\x3\x9B\x5\x9B\xE43\n\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x5"+
		"\x9B\xE4A\n\x9B\x6\x9B\xE4C\n\x9B\r\x9B\xE\x9B\xE4D\x3\x9C\x3\x9C\x3\x9C"+
		"\x3\x9C\x3\x9C\x5\x9C\xE55\n\x9C\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x5"+
		"\x9D\xE5C\n\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x5\x9D\xE62\n\x9D\x3\x9D\x3"+
		"\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x5"+
		"\x9D\xE6F\n\x9D\x3\x9D\x3\x9D\x5\x9D\xE73\n\x9D\x3\x9D\x3\x9D\x3\x9D\x5"+
		"\x9D\xE78\n\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D"+
		"\x5\x9D\xE82\n\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x5"+
		"\x9D\xE8B\n\x9D\x3\x9D\x3\x9D\x5\x9D\xE8F\n\x9D\x3\x9E\x3\x9E\x3\x9E\x3"+
		"\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x5\x9E\xE9B\n\x9E\x3\x9E"+
		"\x3\x9E\x3\x9E\x3\x9E\x5\x9E\xEA1\n\x9E\x3\x9E\x3\x9E\x3\x9E\x6\x9E\xEA6"+
		"\n\x9E\r\x9E\xE\x9E\xEA7\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3"+
		"\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3"+
		"\x9E\x3\x9E\x5\x9E\xEBC\n\x9E\x3\x9E\x3\x9E\x5\x9E\xEC0\n\x9E\x3\x9F\x3"+
		"\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x5\x9F\xEC8\n\x9F\x3\x9F\x3\x9F\x3\x9F"+
		"\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x5\x9F\xED1\n\x9F\x3\x9F\x3\x9F\x3\x9F\x3"+
		"\x9F\x5\x9F\xED7\n\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x5\x9F\xEDD\n\x9F\x3"+
		"\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x6\x9F\xEE5\n\x9F\r\x9F\xE\x9F"+
		"\xEE6\x3\x9F\x3\x9F\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x5\xA0\xEF1"+
		"\n\xA0\x3\xA0\x3\xA0\x5\xA0\xEF5\n\xA0\x3\xA0\x5\xA0\xEF8\n\xA0\x3\xA0"+
		"\x3\xA0\x5\xA0\xEFC\n\xA0\x3\xA0\x3\xA0\x3\xA0\x5\xA0\xF01\n\xA0\x3\xA0"+
		"\x3\xA0\x3\xA0\x3\xA0\x5\xA0\xF07\n\xA0\x3\xA0\x5\xA0\xF0A\n\xA0\x3\xA0"+
		"\x3\xA0\x5\xA0\xF0E\n\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x6"+
		"\xA0\xF16\n\xA0\r\xA0\xE\xA0\xF17\x3\xA0\x5\xA0\xF1B\n\xA0\x3\xA1\x3\xA1"+
		"\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x5\xA1\xF23\n\xA1\x3\xA1\x3\xA1\x3\xA1\x3"+
		"\xA1\x3\xA1\x3\xA1\x5\xA1\xF2B\n\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1"+
		"\x5\xA1\xF32\n\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x6\xA1\xF39\n\xA1"+
		"\r\xA1\xE\xA1\xF3A\x5\xA1\xF3D\n\xA1\x3\xA1\x3\xA1\x3\xA1\x5\xA1\xF42"+
		"\n\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x5\xA1\xF48\n\xA1\x3\xA1\x6\xA1\xF4B"+
		"\n\xA1\r\xA1\xE\xA1\xF4C\x5\xA1\xF4F\n\xA1\x3\xA1\x5\xA1\xF52\n\xA1\x3"+
		"\xA1\x3\xA1\x3\xA1\x5\xA1\xF57\n\xA1\x3\xA1\x5\xA1\xF5A\n\xA1\x3\xA1\x3"+
		"\xA1\x3\xA1\x5\xA1\xF5F\n\xA1\x3\xA1\x3\xA1\x3\xA2\x3\xA2\x3\xA2\x3\xA2"+
		"\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x5\xA2\xF6E\n\xA2\x3"+
		"\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x5\xA2\xF75\n\xA2\x3\xA2\x3\xA2\x3\xA2"+
		"\x3\xA2\x3\xA2\x6\xA2\xF7C\n\xA2\r\xA2\xE\xA2\xF7D\x5\xA2\xF80\n\xA2\x3"+
		"\xA2\x3\xA2\x3\xA2\x5\xA2\xF85\n\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x5\xA2"+
		"\xF8B\n\xA2\x3\xA2\x6\xA2\xF8E\n\xA2\r\xA2\xE\xA2\xF8F\x5\xA2\xF92\n\xA2"+
		"\x3\xA2\x5\xA2\xF95\n\xA2\x3\xA2\x3\xA2\x3\xA2\x5\xA2\xF9A\n\xA2\x3\xA2"+
		"\x5\xA2\xF9D\n\xA2\x3\xA2\x3\xA2\x3\xA2\x5\xA2\xFA2\n\xA2\x3\xA2\x3\xA2"+
		"\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x5\xA3"+
		"\xFAF\n\xA3\x3\xA3\x3\xA3\x3\xA3\x5\xA3\xFB4\n\xA3\x3\xA4\x3\xA4\x3\xA4"+
		"\x3\xA4\x3\xA4\x3\xA4\x3\xA4\x5\xA4\xFBD\n\xA4\x3\xA4\x3\xA4\x3\xA4\x5"+
		"\xA4\xFC2\n\xA4\x3\xA4\x3\xA4\x3\xA4\x3\xA4\x5\xA4\xFC8\n\xA4\x3\xA4\x3"+
		"\xA4\x5\xA4\xFCC\n\xA4\x3\xA4\x3\xA4\x5\xA4\xFD0\n\xA4\x3\xA5\x3\xA5\x3"+
		"\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3"+
		"\xA5\x3\xA5\x3\xA5\x5\xA5\xFE1\n\xA5\x5\xA5\xFE3\n\xA5\x3\xA6\x3\xA6\x3"+
		"\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x5\xA6\xFED\n\xA6\x3\xA6\x3\xA6"+
		"\x3\xA6\x5\xA6\xFF2\n\xA6\x5\xA6\xFF4\n\xA6\x3\xA6\x3\xA6\x5\xA6\xFF8"+
		"\n\xA6\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x5\xA7\xFFE\n\xA7\x3\xA7\x3\xA7\x3"+
		"\xA7\x3\xA7\x3\xA7\x3\xA7\x5\xA7\x1006\n\xA7\x3\xA7\a\xA7\x1009\n\xA7"+
		"\f\xA7\xE\xA7\x100C\v\xA7\x5\xA7\x100E\n\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA7"+
		"\a\xA7\x1014\n\xA7\f\xA7\xE\xA7\x1017\v\xA7\x5\xA7\x1019\n\xA7\x3\xA7"+
		"\x3\xA7\x3\xA7\x5\xA7\x101E\n\xA7\x3\xA7\x3\xA7\x3\xA7\x5\xA7\x1023\n"+
		"\xA7\x3\xA7\x3\xA7\x3\xA7\x5\xA7\x1028\n\xA7\x3\xA7\x3\xA7\x3\xA7\x5\xA7"+
		"\x102D\n\xA7\x3\xA7\x3\xA7\x3\xA7\x5\xA7\x1032\n\xA7\x3\xA7\x3\xA7\x3"+
		"\xA7\x5\xA7\x1037\n\xA7\x3\xA7\x3\xA7\x5\xA7\x103B\n\xA7\x3\xA7\x3\xA7"+
		"\x3\xA7\x5\xA7\x1040\n\xA7\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3"+
		"\xA8\x3\xA8\x3\xA8\x5\xA8\x104B\n\xA8\x3\xA8\a\xA8\x104E\n\xA8\f\xA8\xE"+
		"\xA8\x1051\v\xA8\x5\xA8\x1053\n\xA8\x3\xA8\x5\xA8\x1056\n\xA8\x3\xA8\x3"+
		"\xA8\x3\xA8\x5\xA8\x105B\n\xA8\x3\xA8\x5\xA8\x105E\n\xA8\x3\xA8\x3\xA8"+
		"\x3\xA8\x5\xA8\x1063\n\xA8\x3\xA8\x5\xA8\x1066\n\xA8\x3\xA8\x3\xA8\x3"+
		"\xA8\x5\xA8\x106B\n\xA8\x3\xA8\x5\xA8\x106E\n\xA8\x3\xA8\x3\xA8\x3\xA8"+
		"\x5\xA8\x1073\n\xA8\x3\xA8\x5\xA8\x1076\n\xA8\x3\xA8\x3\xA8\x3\xA8\x5"+
		"\xA8\x107B\n\xA8\x3\xA8\x5\xA8\x107E\n\xA8\x3\xA8\x3\xA8\x3\xA8\x5\xA8"+
		"\x1083\n\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x5\xA8\x1089\n\xA8\x3\xA8\x3"+
		"\xA8\x3\xA8\x5\xA8\x108E\n\xA8\x3\xA8\x5\xA8\x1091\n\xA8\x3\xA8\x3\xA8"+
		"\x3\xA8\x5\xA8\x1096\n\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x5\xA8\x109D"+
		"\n\xA8\x5\xA8\x109F\n\xA8\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x5\xA9\x10A5\n\xA9"+
		"\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x5\xA9\x10AE\n\xA9\x3"+
		"\xA9\x3\xA9\x3\xA9\x5\xA9\x10B3\n\xA9\x5\xA9\x10B5\n\xA9\x3\xAA\x3\xAA"+
		"\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x5\xAA\x10C1"+
		"\n\xAA\x3\xAB\x3\xAB\x3\xAB\x3\xAB\x5\xAB\x10C7\n\xAB\x3\xAB\x3\xAB\x3"+
		"\xAB\x3\xAB\x3\xAB\x3\xAB\x3\xAB\x3\xAB\a\xAB\x10D1\n\xAB\f\xAB\xE\xAB"+
		"\x10D4\v\xAB\x5\xAB\x10D6\n\xAB\x3\xAB\x3\xAB\x3\xAB\x5\xAB\x10DB\n\xAB"+
		"\x5\xAB\x10DD\n\xAB\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3"+
		"\xAC\x5\xAC\x10E7\n\xAC\x3\xAC\x3\xAC\x3\xAC\x5\xAC\x10EC\n\xAC\x5\xAC"+
		"\x10EE\n\xAC\x3\xAC\x3\xAC\x5\xAC\x10F2\n\xAC\x3\xAD\x3\xAD\x3\xAD\x3"+
		"\xAD\x5\xAD\x10F8\n\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD"+
		"\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x5\xAD"+
		"\x110A\n\xAD\x5\xAD\x110C\n\xAD\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3"+
		"\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x5\xAF\x111B\n\xAF"+
		"\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF"+
		"\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x5\xAF\x112D\n\xAF\x3\xAF\x3"+
		"\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x5\xAF\x1135\n\xAF\x3\xB0\x3\xB0\x3\xB0"+
		"\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x5\xB0\x113F\n\xB0\x3\xB1\x3\xB1\x3"+
		"\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3"+
		"\xB1\x3\xB1\x5\xB1\x114F\n\xB1\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2"+
		"\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB3\x3\xB3\x3\xB3\x3\xB3"+
		"\x3\xB3\x3\xB3\x3\xB3\x5\xB3\x1164\n\xB3\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x3"+
		"\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x5\xB4\x116F\n\xB4\x3\xB4\x3\xB4\x3\xB4"+
		"\x3\xB4\x5\xB4\x1175\n\xB4\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3"+
		"\xB5\x5\xB5\x117E\n\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5"+
		"\x5\xB5\x1187\n\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x5\xB5\x118D\n\xB5\x3"+
		"\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6\x1196\n\xB6\x3\xB6"+
		"\x3\xB6\x3\xB6\x5\xB6\x119B\n\xB6\x3\xB6\x5\xB6\x119E\n\xB6\x3\xB6\x3"+
		"\xB6\x3\xB6\x5\xB6\x11A3\n\xB6\x3\xB6\x5\xB6\x11A6\n\xB6\x3\xB6\x3\xB6"+
		"\x3\xB6\x5\xB6\x11AB\n\xB6\x3\xB6\x5\xB6\x11AE\n\xB6\x3\xB6\x3\xB6\x3"+
		"\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6\x11B6\n\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6"+
		"\x5\xB6\x11BC\n\xB6\x6\xB6\x11BE\n\xB6\r\xB6\xE\xB6\x11BF\x3\xB6\x3\xB6"+
		"\x3\xB6\x3\xB6\x3\xB6\x5\xB6\x11C7\n\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x5"+
		"\xB6\x11CD\n\xB6\x6\xB6\x11CF\n\xB6\r\xB6\xE\xB6\x11D0\x3\xB6\x5\xB6\x11D4"+
		"\n\xB6\x5\xB6\x11D6\n\xB6\x3\xB6\x5\xB6\x11D9\n\xB6\x3\xB6\x3\xB6\x3\xB6"+
		"\x5\xB6\x11DE\n\xB6\x3\xB6\x5\xB6\x11E1\n\xB6\x3\xB6\x3\xB6\x3\xB6\x5"+
		"\xB6\x11E6\n\xB6\x3\xB6\x5\xB6\x11E9\n\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6"+
		"\x11EE\n\xB6\x3\xB6\x5\xB6\x11F1\n\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6\x11F6"+
		"\n\xB6\x3\xB6\x5\xB6\x11F9\n\xB6\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3"+
		"\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x5\xB7\x1208\n\xB7"+
		"\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x5\xB7"+
		"\x1213\n\xB7\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3"+
		"\xB8\x5\xB8\x121E\n\xB8\x3\xB8\x3\xB8\x3\xB8\a\xB8\x1223\n\xB8\f\xB8\xE"+
		"\xB8\x1226\v\xB8\x5\xB8\x1228\n\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8"+
		"\x3\xB8\x5\xB8\x1230\n\xB8\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x5\xB9\x1236\n"+
		"\xB9\x3\xB9\x3\xB9\x3\xBA\x3\xBA\x3\xBA\a\xBA\x123D\n\xBA\f\xBA\xE\xBA"+
		"\x1240\v\xBA\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x5\xBA\x1246\n\xBA\x3\xBA\x3"+
		"\xBA\x3\xBA\x3\xBA\x3\xBA\a\xBA\x124D\n\xBA\f\xBA\xE\xBA\x1250\v\xBA\x3"+
		"\xBB\x3\xBB\x3\xBC\x3\xBC\x3\xBD\x3\xBD\x3\xBD\x5\xBD\x1259\n\xBD\x3\xBD"+
		"\x3\xBD\x3\xBD\x5\xBD\x125E\n\xBD\x3\xBD\x3\xBD\x3\xBE\x3\xBE\x3\xBE\x3"+
		"\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x5\xBE\x126C\n\xBE\x3\xBF"+
		"\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x5\xBF\x1277"+
		"\n\xBF\x3\xBF\x3\xBF\x3\xBF\a\xBF\x127C\n\xBF\f\xBF\xE\xBF\x127F\v\xBF"+
		"\x5\xBF\x1281\n\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x5\xBF\x1289"+
		"\n\xBF\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x5\xC0\x1290\n\xC0\x3\xC1\x3"+
		"\xC1\x3\xC1\x3\xC1\x3\xC1\x5\xC1\x1297\n\xC1\x3\xC1\x3\xC1\x5\xC1\x129B"+
		"\n\xC1\x3\xC1\x3\xC1\x3\xC1\x5\xC1\x12A0\n\xC1\x3\xC1\x5\xC1\x12A3\n\xC1"+
		"\x3\xC1\x3\xC1\x3\xC1\x5\xC1\x12A8\n\xC1\x3\xC1\x5\xC1\x12AB\n\xC1\x3"+
		"\xC1\x3\xC1\x3\xC1\x5\xC1\x12B0\n\xC1\x3\xC1\x5\xC1\x12B3\n\xC1\x3\xC1"+
		"\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x5\xC1\x12BC\n\xC1\x3\xC2\x3"+
		"\xC2\x3\xC2\x3\xC2\x3\xC2\x5\xC2\x12C3\n\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2"+
		"\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x5\xC3"+
		"\x12D2\n\xC3\x3\xC3\x5\xC3\x12D5\n\xC3\x3\xC3\x3\xC3\x3\xC3\x5\xC3\x12DA"+
		"\n\xC3\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4"+
		"\x5\xC4\x12E5\n\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x5"+
		"\xC4\x12EE\n\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4"+
		"\x3\xC4\x5\xC4\x12F9\n\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\a\xC4\x12FF\n\xC4"+
		"\f\xC4\xE\xC4\x1302\v\xC4\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x5\xC5\x1309"+
		"\n\xC5\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x1311\n\xC6\x3"+
		"\xC6\x3\xC6\x3\xC6\x5\xC6\x1316\n\xC6\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x3\xC7"+
		"\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x5\xC7\x1321\n\xC7\x3\xC7\x5\xC7\x1324\n"+
		"\xC7\x3\xC7\x3\xC7\x5\xC7\x1328\n\xC7\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8"+
		"\x3\xC8\x5\xC8\x1330\n\xC8\x3\xC8\x3\xC8\x5\xC8\x1334\n\xC8\x3\xC8\x3"+
		"\xC8\x5\xC8\x1338\n\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8"+
		"\x1340\n\xC8\x3\xC8\x6\xC8\x1343\n\xC8\r\xC8\xE\xC8\x1344\x3\xC8\x3\xC8"+
		"\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x134D\n\xC8\x3\xC8\x3\xC8\x3\xC8\x5"+
		"\xC8\x1352\n\xC8\x3\xC8\x3\xC8\a\xC8\x1356\n\xC8\f\xC8\xE\xC8\x1359\v"+
		"\xC8\x6\xC8\x135B\n\xC8\r\xC8\xE\xC8\x135C\x3\xC8\x3\xC8\x3\xC8\x3\xC8"+
		"\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x1366\n\xC8\x3\xC8\x5\xC8\x1369\n\xC8\x3"+
		"\xC8\x3\xC8\x3\xC8\x5\xC8\x136E\n\xC8\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9"+
		"\x5\xC9\x1375\n\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x5\xC9\x137B\n\xC9\x5"+
		"\xC9\x137D\n\xC9\x3\xC9\x3\xC9\x3\xC9\x5\xC9\x1382\n\xC9\x3\xC9\x3\xC9"+
		"\x3\xC9\x3\xC9\x5\xC9\x1388\n\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x5\xC9\x138E"+
		"\n\xC9\x3\xC9\x3\xC9\x3\xC9\x5\xC9\x1393\n\xC9\x3\xC9\x3\xC9\x3\xC9\x3"+
		"\xC9\x5\xC9\x1399\n\xC9\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA\x13A0"+
		"\n\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA\x13A5\n\xCA\x3\xCA\x3\xCA\x3\xCA\x5"+
		"\xCA\x13AA\n\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA\x13AF\n\xCA\x3\xCA\x5\xCA"+
		"\x13B2\n\xCA\x3\xCA\x3\xCA\x5\xCA\x13B6\n\xCA\x3\xCA\x5\xCA\x13B9\n\xCA"+
		"\x3\xCA\x3\xCA\x5\xCA\x13BD\n\xCA\x3\xCA\x3\xCA\x5\xCA\x13C1\n\xCA\x3"+
		"\xCA\x5\xCA\x13C4\n\xCA\x3\xCA\x3\xCA\x5\xCA\x13C8\n\xCA\x3\xCA\x3\xCA"+
		"\x3\xCA\x5\xCA\x13CD\n\xCA\x3\xCA\x3\xCA\x5\xCA\x13D1\n\xCA\x3\xCA\x3"+
		"\xCA\x5\xCA\x13D5\n\xCA\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB"+
		"\x3\xCB\x5\xCB\x13DF\n\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x13E5\n"+
		"\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x13EC\n\xCB\x3\xCB\x5\xCB"+
		"\x13EF\n\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x13F5\n\xCB\x3\xCB\x3"+
		"\xCB\x3\xCB\x3\xCB\x5\xCB\x13FB\n\xCB\x3\xCB\x3\xCB\x3\xCB\a\xCB\x1400"+
		"\n\xCB\f\xCB\xE\xCB\x1403\v\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x1408\n\xCB"+
		"\x5\xCB\x140A\n\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x140F\n\xCB\x3\xCB\x3"+
		"\xCB\x3\xCB\x3\xCB\x5\xCB\x1415\n\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB"+
		"\x141B\n\xCB\x3\xCB\x3\xCB\x3\xCB\a\xCB\x1420\n\xCB\f\xCB\xE\xCB\x1423"+
		"\v\xCB\x3\xCB\x5\xCB\x1426\n\xCB\x3\xCB\x3\xCB\x5\xCB\x142A\n\xCB\x3\xCB"+
		"\x5\xCB\x142D\n\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3"+
		"\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x143B\n\xCB\x3\xCB\x3\xCB\x3\xCB"+
		"\x5\xCB\x1440\n\xCB\x3\xCB\x3\xCB\x5\xCB\x1444\n\xCB\x3\xCB\x3\xCB\x3"+
		"\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x1451"+
		"\n\xCB\x3\xCB\x5\xCB\x1454\n\xCB\x5\xCB\x1456\n\xCB\x3\xCB\x3\xCB\x3\xCB"+
		"\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x145E\n\xCB\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3"+
		"\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x1468\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC"+
		"\x5\xCC\x146E\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x1475\n"+
		"\xCC\x3\xCC\x5\xCC\x1478\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x147E"+
		"\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x1484\n\xCC\x3\xCC\x3\xCC\x3"+
		"\xCC\a\xCC\x1489\n\xCC\f\xCC\xE\xCC\x148C\v\xCC\x3\xCC\x3\xCC\x3\xCC\x5"+
		"\xCC\x1491\n\xCC\x5\xCC\x1493\n\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x1498"+
		"\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x149E\n\xCC\x3\xCC\x3\xCC\x3"+
		"\xCC\x3\xCC\x5\xCC\x14A4\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x14AA"+
		"\n\xCC\x3\xCC\x3\xCC\x3\xCC\a\xCC\x14AF\n\xCC\f\xCC\xE\xCC\x14B2\v\xCC"+
		"\x3\xCC\x5\xCC\x14B5\n\xCC\x3\xCC\x3\xCC\x5\xCC\x14B9\n\xCC\x3\xCC\x5"+
		"\xCC\x14BC\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC"+
		"\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x14CA\n\xCC\x3\xCC\x3\xCC\x3\xCC\x5"+
		"\xCC\x14CF\n\xCC\x3\xCC\x3\xCC\x5\xCC\x14D3\n\xCC\x3\xCC\x3\xCC\x3\xCC"+
		"\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x14E0"+
		"\n\xCC\x3\xCC\x5\xCC\x14E3\n\xCC\x5\xCC\x14E5\n\xCC\x3\xCC\x3\xCC\x3\xCC"+
		"\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x14ED\n\xCC\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3"+
		"\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x5\xCD\x14F8\n\xCD\x3\xCD\x3\xCD\x3\xCD"+
		"\x3\xCD\x3\xCD\a\xCD\x14FF\n\xCD\f\xCD\xE\xCD\x1502\v\xCD\x3\xCD\x3\xCD"+
		"\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x5\xCD\x150A\n\xCD\x3\xCE\x3\xCE\x3\xCE\x3"+
		"\xCE\x3\xCE\x3\xCE\x3\xCE\x3\xCE\x3\xCE\x5\xCE\x1515\n\xCE\x3\xCE\x3\xCE"+
		"\x3\xCE\x3\xCE\x3\xCE\a\xCE\x151C\n\xCE\f\xCE\xE\xCE\x151F\v\xCE\x3\xCE"+
		"\x3\xCE\x3\xCE\x3\xCE\x3\xCE\x3\xCE\x5\xCE\x1527\n\xCE\x3\xCF\x3\xCF\x3"+
		"\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x5\xCF\x1533\n\xCF"+
		"\x3\xCF\x3\xCF\x5\xCF\x1537\n\xCF\x3\xCF\x3\xCF\x3\xCF\x6\xCF\x153C\n"+
		"\xCF\r\xCF\xE\xCF\x153D\x5\xCF\x1540\n\xCF\x3\xCF\x3\xCF\x3\xCF\x5\xCF"+
		"\x1545\n\xCF\x3\xCF\x3\xCF\x5\xCF\x1549\n\xCF\x3\xCF\x3\xCF\x3\xCF\x6"+
		"\xCF\x154E\n\xCF\r\xCF\xE\xCF\x154F\x5\xCF\x1552\n\xCF\x3\xCF\x3\xCF\x3"+
		"\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x5"+
		"\xCF\x1560\n\xCF\x3\xCF\x3\xCF\x3\xCF\x5\xCF\x1565\n\xCF\x3\xCF\x3\xCF"+
		"\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF"+
		"\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x5\xCF\x157B"+
		"\n\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF"+
		"\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF"+
		"\x3\xCF\x5\xCF\x1591\n\xCF\x3\xCF\x3\xCF\x3\xCF\x5\xCF\x1596\n\xCF\x3"+
		"\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3"+
		"\xD0\x5\xD0\x15A3\n\xD0\x3\xD1\x3\xD1\x3\xD1\x3\xD1\x3\xD1\x3\xD1\x5\xD1"+
		"\x15AB\n\xD1\x3\xD2\x3\xD2\x3\xD2\x3\xD2\x3\xD2\x3\xD2\x3\xD2\x3\xD2\x3"+
		"\xD3\x3\xD3\x3\xD3\x3\xD3\x3\xD3\x3\xD3\x3\xD3\x3\xD3\x5\xD3\x15BD\n\xD3"+
		"\x3\xD3\x5\xD3\x15C0\n\xD3\x3\xD3\x3\xD3\x3\xD3\x3\xD3\a\xD3\x15C6\n\xD3"+
		"\f\xD3\xE\xD3\x15C9\v\xD3\x3\xD3\x3\xD3\x5\xD3\x15CD\n\xD3\x3\xD4\x3\xD4"+
		"\x3\xD4\x3\xD4\x3\xD5\x3\xD5\x3\xD5\x3\xD5\x3\xD5\x5\xD5\x15D8\n\xD5\x3"+
		"\xD5\x3\xD5\x3\xD5\x3\xD5\x3\xD5\x5\xD5\x15DF\n\xD5\x3\xD5\x3\xD5\x3\xD5"+
		"\x5\xD5\x15E4\n\xD5\x3\xD5\x3\xD5\x5\xD5\x15E8\n\xD5\x6\xD5\x15EA\n\xD5"+
		"\r\xD5\xE\xD5\x15EB\x3\xD5\x5\xD5\x15EF\n\xD5\x3\xD6\x3\xD6\x3\xD6\x3"+
		"\xD6\x3\xD6\x5\xD6\x15F6\n\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6"+
		"\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6"+
		"\x5\xD6\x1608\n\xD6\x5\xD6\x160A\n\xD6\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x3"+
		"\xD7\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x3"+
		"\xD7\x3\xD7\x3\xD7\x3\xD7\x5\xD7\x161E\n\xD7\x3\xD8\x3\xD8\x3\xD8\x3\xD8"+
		"\x3\xD8\x5\xD8\x1625\n\xD8\x3\xD8\x3\xD8\x3\xD8\x3\xD8\x3\xD8\x5\xD8\x162C"+
		"\n\xD8\x3\xD8\x3\xD8\x3\xD8\x5\xD8\x1631\n\xD8\x3\xD8\x3\xD8\x3\xD8\x5"+
		"\xD8\x1636\n\xD8\x3\xD8\x3\xD8\x3\xD8\x3\xD8\x5\xD8\x163C\n\xD8\x3\xD8"+
		"\x3\xD8\x3\xD8\x5\xD8\x1641\n\xD8\x5\xD8\x1643\n\xD8\x3\xD9\x3\xD9\x3"+
		"\xD9\x3\xD9\x3\xD9\x5\xD9\x164A\n\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x5\xD9"+
		"\x1650\n\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x5\xD9\x1656\n\xD9\x3\xD9\x5"+
		"\xD9\x1659\n\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x5\xD9\x165F\n\xD9\x3\xD9"+
		"\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x6\xD9\x1667\n\xD9\r\xD9\xE\xD9\x1668"+
		"\x3\xD9\x5\xD9\x166C\n\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x5\xD9\x1673"+
		"\n\xD9\x3\xD9\x5\xD9\x1676\n\xD9\x3\xD9\x3\xD9\x3\xD9\x6\xD9\x167B\n\xD9"+
		"\r\xD9\xE\xD9\x167C\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x1685"+
		"\n\xDA\x3\xDA\x3\xDA\x5\xDA\x1689\n\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5"+
		"\xDA\x168F\n\xDA\x3\xDA\x3\xDA\x3\xDA\a\xDA\x1694\n\xDA\f\xDA\xE\xDA\x1697"+
		"\v\xDA\x5\xDA\x1699\n\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x16A0"+
		"\n\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x16A6\n\xDA\x3\xDA\x3\xDA\x3"+
		"\xDA\x3\xDA\x3\xDA\x5\xDA\x16AD\n\xDA\x3\xDA\x5\xDA\x16B0\n\xDA\x3\xDA"+
		"\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x16B6\n\xDA\x3\xDA\x3\xDA\x3\xDA\a\xDA\x16BB"+
		"\n\xDA\f\xDA\xE\xDA\x16BE\v\xDA\x5\xDA\x16C0\n\xDA\x3\xDA\x3\xDA\x3\xDA"+
		"\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x16C8\n\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5"+
		"\xDA\x16CE\n\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x16D5\n\xDA"+
		"\x3\xDA\x5\xDA\x16D8\n\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x16DE\n"+
		"\xDA\x3\xDA\x3\xDA\x3\xDA\a\xDA\x16E3\n\xDA\f\xDA\xE\xDA\x16E6\v\xDA\x3"+
		"\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x16ED\n\xDA\x3\xDA\x3\xDA\x3\xDA"+
		"\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x16F5\n\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5"+
		"\xDA\x16FB\n\xDA\x3\xDA\x3\xDA\x3\xDA\a\xDA\x1700\n\xDA\f\xDA\xE\xDA\x1703"+
		"\v\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x170C\n"+
		"\xDA\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x1711\n\xDA\x3\xDB\x3\xDB\x3\xDB\x3\xDB"+
		"\x3\xDB\x3\xDB\x3\xDB\x3\xDB\x5\xDB\x171B\n\xDB\x3\xDB\x3\xDB\x3\xDB\x3"+
		"\xDB\x5\xDB\x1721\n\xDB\x3\xDB\x3\xDB\x3\xDB\x3\xDB\x3\xDB\x3\xDB\x3\xDB"+
		"\x3\xDB\x3\xDB\x3\xDB\x5\xDB\x172D\n\xDB\x5\xDB\x172F\n\xDB\x3\xDC\x3"+
		"\xDC\x3\xDC\x3\xDC\x3\xDC\x5\xDC\x1736\n\xDC\x3\xDC\x3\xDC\x3\xDC\x3\xDC"+
		"\x5\xDC\x173C\n\xDC\x3\xDC\x3\xDC\x3\xDC\x3\xDC\x5\xDC\x1742\n\xDC\x3"+
		"\xDC\x3\xDC\x3\xDC\x3\xDC\x5\xDC\x1748\n\xDC\x3\xDC\x3\xDC\x3\xDC\x6\xDC"+
		"\x174D\n\xDC\r\xDC\xE\xDC\x174E\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x5"+
		"\xDD\x1756\n\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x5\xDD\x175E"+
		"\n\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x5\xDD\x1764\n\xDD\x3\xDD\x3\xDD\x3"+
		"\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x6"+
		"\xDD\x1772\n\xDD\r\xDD\xE\xDD\x1773\x3\xDD\x5\xDD\x1777\n\xDD\x3\xDD\x3"+
		"\xDD\x3\xDD\x5\xDD\x177C\n\xDD\x5\xDD\x177E\n\xDD\x3\xDE\x3\xDE\x3\xDE"+
		"\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x5\xDE\x178A\n\xDE\x3"+
		"\xDE\x3\xDE\x3\xDE\x3\xDE\x5\xDE\x1790\n\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE"+
		"\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x6\xDE\x179E"+
		"\n\xDE\r\xDE\xE\xDE\x179F\x3\xDE\x5\xDE\x17A3\n\xDE\x3\xDE\x3\xDE\x3\xDE"+
		"\x5\xDE\x17A8\n\xDE\x3\xDE\x5\xDE\x17AB\n\xDE\x3\xDE\x3\xDE\x3\xDE\x5"+
		"\xDE\x17B0\n\xDE\x5\xDE\x17B2\n\xDE\x3\xDF\x3\xDF\x3\xDF\x3\xDF\x3\xDF"+
		"\x3\xDF\x3\xDF\x5\xDF\x17BB\n\xDF\x3\xDF\x3\xDF\x3\xDF\x3\xDF\x3\xDF\x5"+
		"\xDF\x17C2\n\xDF\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0"+
		"\x3\xE0\x3\xE0\x5\xE0\x17CE\n\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3"+
		"\xE0\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x5\xE1\x17DE"+
		"\n\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\a\xE1\x17E5\n\xE1\f\xE1\xE\xE1"+
		"\x17E8\v\xE1\x3\xE1\x3\xE1\x3\xE2\x3\xE2\x3\xE2\x3\xE2\x5\xE2\x17F0\n"+
		"\xE2\x3\xE2\x5\xE2\x17F3\n\xE2\x3\xE2\x3\xE2\x3\xE2\x5\xE2\x17F8\n\xE2"+
		"\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x5\xE3\x17FF\n\xE3\x5\xE3\x1801\n"+
		"\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x5\xE3\x1807\n\xE3\x5\xE3\x1809\n\xE3"+
		"\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x5\xE3\x1811\n\xE3\x5\xE3\x1813"+
		"\n\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x5\xE3\x1819\n\xE3\x5\xE3\x181B\n\xE3"+
		"\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x5\xE3\x1821\n\xE3\x5\xE3\x1823\n\xE3\x3"+
		"\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x5\xE3\x182A\n\xE3\x3\xE3\x5\xE3\x182D"+
		"\n\xE3\x5\xE3\x182F\n\xE3\x3\xE3\x5\xE3\x1832\n\xE3\x3\xE3\x3\xE3\x5\xE3"+
		"\x1836\n\xE3\x5\xE3\x1838\n\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x3"+
		"\xE3\x3\xE3\x5\xE3\x1841\n\xE3\x3\xE4\x3\xE4\x3\xE4\x3\xE4\x5\xE4\x1847"+
		"\n\xE4\x3\xE4\x3\xE4\x5\xE4\x184B\n\xE4\x3\xE5\x3\xE5\x3\xE5\x3\xE5\x3"+
		"\xE5\x3\xE5\x5\xE5\x1853\n\xE5\x3\xE5\x3\xE5\x3\xE5\x3\xE5\x3\xE5\x5\xE5"+
		"\x185A\n\xE5\x3\xE5\x3\xE5\x3\xE5\x3\xE5\x5\xE5\x1860\n\xE5\x5\xE5\x1862"+
		"\n\xE5\x3\xE6\x3\xE6\x3\xE6\x3\xE6\x3\xE7\x3\xE7\x3\xE7\x3\xE7\x3\xE7"+
		"\x5\xE7\x186D\n\xE7\x3\xE7\x3\xE7\x3\xE7\x5\xE7\x1872\n\xE7\x3\xE7\x3"+
		"\xE7\x3\xE7\x3\xE7\x5\xE7\x1878\n\xE7\x6\xE7\x187A\n\xE7\r\xE7\xE\xE7"+
		"\x187B\x3\xE7\x3\xE7\x3\xE8\x3\xE8\x3\xE8\x3\xE8\x3\xE8\x3\xE8\x5\xE8"+
		"\x1886\n\xE8\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x5\xE9\x188E\n"+
		"\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3"+
		"\xE9\x5\xE9\x189A\n\xE9\x3\xEA\x5\xEA\x189D\n\xEA\x3\xEA\x3\xEA\x3\xEA"+
		"\x3\xEA\x3\xEA\x3\xEA\x5\xEA\x18A5\n\xEA\x5\xEA\x18A7\n\xEA\x3\xEA\x5"+
		"\xEA\x18AA\n\xEA\x3\xEA\x3\xEA\x5\xEA\x18AE\n\xEA\x3\xEA\x5\xEA\x18B1"+
		"\n\xEA\x3\xEA\x3\xEA\x3\xEA\x3\xEA\x3\xEA\x6\xEA\x18B8\n\xEA\r\xEA\xE"+
		"\xEA\x18B9\x3\xEA\x5\xEA\x18BD\n\xEA\x3\xEA\x5\xEA\x18C0\n\xEA\x3\xEA"+
		"\x3\xEA\x3\xEB\x3\xEB\x3\xEB\x3\xEB\x5\xEB\x18C8\n\xEB\x3\xEB\x3\xEB\x6"+
		"\xEB\x18CC\n\xEB\r\xEB\xE\xEB\x18CD\x3\xEB\x3\xEB\x3\xEB\x3\xEB\x3\xEB"+
		"\x5\xEB\x18D5\n\xEB\x3\xEB\x3\xEB\x5\xEB\x18D9\n\xEB\x3\xEB\x3\xEB\x3"+
		"\xEB\x3\xEB\x3\xEB\x3\xEB\x3\xEB\x3\xEB\x3\xEB\x5\xEB\x18E4\n\xEB\x3\xEB"+
		"\x3\xEB\x6\xEB\x18E8\n\xEB\r\xEB\xE\xEB\x18E9\x5\xEB\x18EC\n\xEB\x3\xEC"+
		"\x3\xEC\x3\xEC\x3\xEC\x3\xEC\a\xEC\x18F3\n\xEC\f\xEC\xE\xEC\x18F6\v\xEC"+
		"\x3\xEC\x5\xEC\x18F9\n\xEC\x3\xED\x3\xED\x3\xED\x3\xED\x3\xED\x5\xED\x1900"+
		"\n\xED\x3\xED\x3\xED\x3\xED\x5\xED\x1905\n\xED\x3\xEE\x5\xEE\x1908\n\xEE"+
		"\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x5\xEE\x1910\n\xEE\x3\xEE\x3"+
		"\xEE\x5\xEE\x1914\n\xEE\x3\xEE\x5\xEE\x1917\n\xEE\x3\xEE\x3\xEE\x5\xEE"+
		"\x191B\n\xEE\x3\xEE\x5\xEE\x191E\n\xEE\x3\xEE\x3\xEE\x5\xEE\x1922\n\xEE"+
		"\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x5\xEE\x1929\n\xEE\x3\xEE\x3\xEE\x5"+
		"\xEE\x192D\n\xEE\x5\xEE\x192F\n\xEE\x5\xEE\x1931\n\xEE\x3\xEE\x5\xEE\x1934"+
		"\n\xEE\x3\xEE\x5\xEE\x1937\n\xEE\x3\xEE\x5\xEE\x193A\n\xEE\x3\xEF\x3\xEF"+
		"\x3\xEF\x3\xEF\x5\xEF\x1940\n\xEF\x3\xF0\x5\xF0\x1943\n\xF0\x3\xF0\x3"+
		"\xF0\x3\xF0\x3\xF0\x3\xF0\x3\xF0\x5\xF0\x194B\n\xF0\x5\xF0\x194D\n\xF0"+
		"\x3\xF0\x5\xF0\x1950\n\xF0\x3\xF0\x3\xF0\x5\xF0\x1954\n\xF0\x3\xF0\x5"+
		"\xF0\x1957\n\xF0\x3\xF0\x3\xF0\x3\xF0\x3\xF0\x5\xF0\x195D\n\xF0\x3\xF0"+
		"\x5\xF0\x1960\n\xF0\x3\xF0\x3\xF0\x5\xF0\x1964\n\xF0\x3\xF0\x5\xF0\x1967"+
		"\n\xF0\x3\xF0\x5\xF0\x196A\n\xF0\x3\xF1\x3\xF1\x3\xF1\x3\xF1\x3\xF1\x5"+
		"\xF1\x1971\n\xF1\x3\xF2\x5\xF2\x1974\n\xF2\x3\xF2\x3\xF2\x3\xF2\x3\xF2"+
		"\x5\xF2\x197A\n\xF2\x3\xF2\x3\xF2\x3\xF2\x3\xF2\x3\xF2\x3\xF2\x3\xF2\x3"+
		"\xF2\x5\xF2\x1984\n\xF2\x3\xF2\x5\xF2\x1987\n\xF2\x3\xF3\x5\xF3\x198A"+
		"\n\xF3\x3\xF3\x3\xF3\x3\xF4\x3\xF4\x5\xF4\x1990\n\xF4\x3\xF4\x5\xF4\x1993"+
		"\n\xF4\x3\xF4\x5\xF4\x1996\n\xF4\x3\xF4\x5\xF4\x1999\n\xF4\x3\xF5\x3\xF5"+
		"\x5\xF5\x199D\n\xF5\x3\xF6\x5\xF6\x19A0\n\xF6\x3\xF6\x3\xF6\x3\xF6\x3"+
		"\xF6\x3\xF6\x3\xF6\x5\xF6\x19A8\n\xF6\x5\xF6\x19AA\n\xF6\x3\xF6\x3\xF6"+
		"\x5\xF6\x19AE\n\xF6\x3\xF6\x5\xF6\x19B1\n\xF6\x3\xF6\x3\xF6\x3\xF6\x3"+
		"\xF6\a\xF6\x19B7\n\xF6\f\xF6\xE\xF6\x19BA\v\xF6\x3\xF6\x5\xF6\x19BD\n"+
		"\xF6\x3\xF6\x3\xF6\x5\xF6\x19C1\n\xF6\x3\xF6\x3\xF6\x3\xF6\x3\xF6\x3\xF6"+
		"\x5\xF6\x19C8\n\xF6\x3\xF6\x3\xF6\x5\xF6\x19CC\n\xF6\x5\xF6\x19CE\n\xF6"+
		"\x5\xF6\x19D0\n\xF6\x3\xF6\x5\xF6\x19D3\n\xF6\x3\xF6\x5\xF6\x19D6\n\xF6"+
		"\x3\xF6\x5\xF6\x19D9\n\xF6\x3\xF7\x3\xF7\x3\xF7\x3\xF7\a\xF7\x19DF\n\xF7"+
		"\f\xF7\xE\xF7\x19E2\v\xF7\x3\xF7\x3\xF7\x3\xF7\x5\xF7\x19E7\n\xF7\x3\xF7"+
		"\x3\xF7\x3\xF7\x3\xF7\x5\xF7\x19ED\n\xF7\x5\xF7\x19EF\n\xF7\x3\xF8\x3"+
		"\xF8\x5\xF8\x19F3\n\xF8\x3\xF8\x5\xF8\x19F6\n\xF8\x3\xF9\x3\xF9\x3\xF9"+
		"\x3\xF9\x3\xF9\x3\xF9\x5\xF9\x19FE\n\xF9\x3\xF9\x3\xF9\x5\xF9\x1A02\n"+
		"\xF9\x3\xF9\x3\xF9\x3\xF9\a\xF9\x1A07\n\xF9\f\xF9\xE\xF9\x1A0A\v\xF9\x5"+
		"\xF9\x1A0C\n\xF9\x3\xF9\x3\xF9\x3\xF9\x3\xF9\x3\xF9\a\xF9\x1A13\n\xF9"+
		"\f\xF9\xE\xF9\x1A16\v\xF9\x5\xF9\x1A18\n\xF9\x3\xF9\x3\xF9\x5\xF9\x1A1C"+
		"\n\xF9\x3\xF9\x3\xF9\x3\xF9\x3\xF9\a\xF9\x1A22\n\xF9\f\xF9\xE\xF9\x1A25"+
		"\v\xF9\x5\xF9\x1A27\n\xF9\x3\xFA\x3\xFA\x5\xFA\x1A2B\n\xFA\x3\xFA\x5\xFA"+
		"\x1A2E\n\xFA\x3\xFA\x3\xFA\x3\xFA\x3\xFA\x3\xFA\x3\xFA\x3\xFA\x3\xFA\x3"+
		"\xFA\x3\xFA\x3\xFA\x3\xFA\x5\xFA\x1A3C\n\xFA\x3\xFA\x3\xFA\x5\xFA\x1A40"+
		"\n\xFA\x3\xFA\x5\xFA\x1A43\n\xFA\x3\xFA\x3\xFA\x5\xFA\x1A47\n\xFA\x3\xFA"+
		"\x5\xFA\x1A4A\n\xFA\x3\xFB\x3\xFB\x3\xFB\x3\xFB\x3\xFB\x3\xFB\x3\xFB\x3"+
		"\xFB\x3\xFB\x5\xFB\x1A55\n\xFB\x3\xFC\x3\xFC\x3\xFC\x3\xFC\x5\xFC\x1A5B"+
		"\n\xFC\x3\xFC\x5\xFC\x1A5E\n\xFC\x3\xFD\x3\xFD\x3\xFD\x5\xFD\x1A63\n\xFD"+
		"\x5\xFD\x1A65\n\xFD\x3\xFD\x3\xFD\x3\xFD\x3\xFD\x3\xFD\x3\xFD\x5\xFD\x1A6D"+
		"\n\xFD\x3\xFD\x3\xFD\x5\xFD\x1A71\n\xFD\x3\xFD\x5\xFD\x1A74\n\xFD\x3\xFE"+
		"\x3\xFE\x5\xFE\x1A78\n\xFE\x3\xFE\x3\xFE\x3\xFE\x3\xFE\x3\xFE\x3\xFE\x3"+
		"\xFE\x3\xFE\x3\xFE\x3\xFE\x5\xFE\x1A84\n\xFE\x3\xFE\x5\xFE\x1A87\n\xFE"+
		"\x3\xFE\x3\xFE\x5\xFE\x1A8B\n\xFE\x3\xFE\x5\xFE\x1A8E\n\xFE\x3\xFF\x3"+
		"\xFF\x5\xFF\x1A92\n\xFF\x3\xFF\x3\xFF\x3\xFF\x3\xFF\x3\xFF\x3\xFF\x3\xFF"+
		"\x3\xFF\x3\xFF\x3\xFF\x3\xFF\x3\xFF\x3\xFF\x3\xFF\x5\xFF\x1AA2\n\xFF\x5"+
		"\xFF\x1AA4\n\xFF\x5\xFF\x1AA6\n\xFF\x3\xFF\x5\xFF\x1AA9\n\xFF\x3\xFF\x5"+
		"\xFF\x1AAC\n\xFF\x3\x100\x3\x100\x3\x100\x5\x100\x1AB1\n\x100\x3\x100"+
		"\x5\x100\x1AB4\n\x100\x3\x100\x3\x100\x3\x100\x3\x100\x5\x100\x1ABA\n"+
		"\x100\x3\x100\x5\x100\x1ABD\n\x100\x3\x100\x3\x100\x3\x100\a\x100\x1AC2"+
		"\n\x100\f\x100\xE\x100\x1AC5\v\x100\x3\x100\x5\x100\x1AC8\n\x100\x5\x100"+
		"\x1ACA\n\x100\x3\x100\x3\x100\x3\x100\x3\x100\a\x100\x1AD0\n\x100\f\x100"+
		"\xE\x100\x1AD3\v\x100\x5\x100\x1AD5\n\x100\x3\x100\x3\x100\x5\x100\x1AD9"+
		"\n\x100\x3\x100\x3\x100\x3\x100\a\x100\x1ADE\n\x100\f\x100\xE\x100\x1AE1"+
		"\v\x100\x5\x100\x1AE3\n\x100\x3\x101\x3\x101\x3\x101\x3\x101\x3\x101\x3"+
		"\x101\x3\x101\x3\x101\x3\x102\x3\x102\x5\x102\x1AEF\n\x102\x3\x103\x3"+
		"\x103\x3\x103\x5\x103\x1AF4\n\x103\x3\x103\x5\x103\x1AF7\n\x103\x3\x103"+
		"\x3\x103\x3\x103\x3\x103\x3\x103\x3\x103\x3\x103\x3\x103\a\x103\x1B01"+
		"\n\x103\f\x103\xE\x103\x1B04\v\x103\x5\x103\x1B06\n\x103\x3\x103\x3\x103"+
		"\x3\x103\x3\x103\x5\x103\x1B0C\n\x103\x3\x103\x3\x103\x3\x103\a\x103\x1B11"+
		"\n\x103\f\x103\xE\x103\x1B14\v\x103\x3\x103\x3\x103\x5\x103\x1B18\n\x103"+
		"\x3\x103\x3\x103\x3\x103\x5\x103\x1B1D\n\x103\x3\x103\x3\x103\x6\x103"+
		"\x1B21\n\x103\r\x103\xE\x103\x1B22\x3\x104\x3\x104\x5\x104\x1B27\n\x104"+
		"\x3\x105\x3\x105\x3\x106\x3\x106\x3\x106\x5\x106\x1B2E\n\x106\x3\x106"+
		"\x5\x106\x1B31\n\x106\x3\x106\x3\x106\x3\x106\x3\x106\x3\x106\x3\x106"+
		"\x5\x106\x1B39\n\x106\x3\x106\x3\x106\x3\x106\x3\x106\a\x106\x1B3F\n\x106"+
		"\f\x106\xE\x106\x1B42\v\x106\x5\x106\x1B44\n\x106\x3\x106\x3\x106\x3\x106"+
		"\x3\x106\a\x106\x1B4A\n\x106\f\x106\xE\x106\x1B4D\v\x106\x3\x106\x3\x106"+
		"\x6\x106\x1B51\n\x106\r\x106\xE\x106\x1B52\x3\x107\x3\x107\x3\x108\x3"+
		"\x108\x3\x108\x5\x108\x1B5A\n\x108\x3\x108\x5\x108\x1B5D\n\x108\x3\x108"+
		"\x3\x108\x3\x108\x3\x108\x3\x108\x3\x108\a\x108\x1B65\n\x108\f\x108\xE"+
		"\x108\x1B68\v\x108\x3\x108\x3\x108\x3\x108\x3\x108\x5\x108\x1B6E\n\x108"+
		"\x3\x108\x3\x108\x3\x108\x5\x108\x1B73\n\x108\x3\x108\x5\x108\x1B76\n"+
		"\x108\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109\a\x109\x1B7E\n\x109"+
		"\f\x109\xE\x109\x1B81\v\x109\x5\x109\x1B83\n\x109\x3\x109\x5\x109\x1B86"+
		"\n\x109\x3\x109\x3\x109\x3\x109\x5\x109\x1B8B\n\x109\x3\x109\x3\x109\x5"+
		"\x109\x1B8F\n\x109\x5\x109\x1B91\n\x109\x3\x10A\x3\x10A\x5\x10A\x1B95"+
		"\n\x10A\x3\x10A\x3\x10A\x3\x10A\x3\x10A\x3\x10A\a\x10A\x1B9C\n\x10A\f"+
		"\x10A\xE\x10A\x1B9F\v\x10A\x5\x10A\x1BA1\n\x10A\x3\x10A\x5\x10A\x1BA4"+
		"\n\x10A\x3\x10A\x3\x10A\x3\x10A\a\x10A\x1BA9\n\x10A\f\x10A\xE\x10A\x1BAC"+
		"\v\x10A\x3\x10A\x3\x10A\x5\x10A\x1BB0\n\x10A\x3\x10A\x3\x10A\x5\x10A\x1BB4"+
		"\n\x10A\x5\x10A\x1BB6\n\x10A\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3"+
		"\x10B\a\x10B\x1BBE\n\x10B\f\x10B\xE\x10B\x1BC1\v\x10B\x5\x10B\x1BC3\n"+
		"\x10B\x3\x10B\x5\x10B\x1BC6\n\x10B\x3\x10B\x3\x10B\x3\x10B\a\x10B\x1BCB"+
		"\n\x10B\f\x10B\xE\x10B\x1BCE\v\x10B\x3\x10B\x3\x10B\x3\x10B\x5\x10B\x1BD3"+
		"\n\x10B\x3\x10B\x3\x10B\x5\x10B\x1BD7\n\x10B\x3\x10C\x3\x10C\x5\x10C\x1BDB"+
		"\n\x10C\x3\x10C\x3\x10C\x3\x10C\x5\x10C\x1BE0\n\x10C\x3\x10C\x3\x10C\x5"+
		"\x10C\x1BE4\n\x10C\x3\x10C\x3\x10C\x3\x10C\x5\x10C\x1BE9\n\x10C\x3\x10C"+
		"\x5\x10C\x1BEC\n\x10C\x3\x10D\x3\x10D\x3\x10D\x5\x10D\x1BF1\n\x10D\x3"+
		"\x10E\x3\x10E\x3\x10E\x3\x10E\x3\x10E\x3\x10E\x3\x10E\x3\x10E\x3\x10E"+
		"\x3\x10E\x3\x10E\x3\x10E\x5\x10E\x1BFF\n\x10E\x3\x10F\x3\x10F\x3\x10F"+
		"\x3\x10F\x3\x10F\x3\x10F\x5\x10F\x1C07\n\x10F\x3\x10F\x3\x10F\x5\x10F"+
		"\x1C0B\n\x10F\x3\x10F\x3\x10F\x3\x10F\x3\x10F\x5\x10F\x1C11\n\x10F\x3"+
		"\x10F\x5\x10F\x1C14\n\x10F\x3\x110\x3\x110\x3\x110\x3\x110\x3\x110\x3"+
		"\x110\x3\x110\x3\x110\x3\x110\x5\x110\x1C1F\n\x110\x3\x111\x3\x111\x5"+
		"\x111\x1C23\n\x111\x3\x111\x3\x111\x3\x111\x5\x111\x1C28\n\x111\x3\x111"+
		"\x5\x111\x1C2B\n\x111\x3\x112\x3\x112\x3\x112\x3\x112\x3\x112\x3\x112"+
		"\x5\x112\x1C33\n\x112\x3\x112\a\x112\x1C36\n\x112\f\x112\xE\x112\x1C39"+
		"\v\x112\x3\x112\x5\x112\x1C3C\n\x112\x3\x112\x3\x112\x3\x112\x5\x112\x1C41"+
		"\n\x112\x3\x112\a\x112\x1C44\n\x112\f\x112\xE\x112\x1C47\v\x112\x3\x112"+
		"\x3\x112\x3\x112\x5\x112\x1C4C\n\x112\x3\x112\x3\x112\x3\x112\x5\x112"+
		"\x1C51\n\x112\x3\x112\x5\x112\x1C54\n\x112\x3\x113\x3\x113\x3\x113\x5"+
		"\x113\x1C59\n\x113\x3\x113\x3\x113\x3\x113\x3\x113\x5\x113\x1C5F\n\x113"+
		"\x3\x113\x3\x113\x5\x113\x1C63\n\x113\x3\x114\x3\x114\x3\x114\x3\x114"+
		"\x3\x114\a\x114\x1C6A\n\x114\f\x114\xE\x114\x1C6D\v\x114\x3\x114\x3\x114"+
		"\x3\x114\x3\x114\x3\x114\a\x114\x1C74\n\x114\f\x114\xE\x114\x1C77\v\x114"+
		"\x5\x114\x1C79\n\x114\x3\x115\x3\x115\x3\x115\x3\x115\x3\x115\x3\x115"+
		"\x3\x115\x5\x115\x1C82\n\x115\x3\x115\x3\x115\x3\x115\x3\x115\a\x115\x1C88"+
		"\n\x115\f\x115\xE\x115\x1C8B\v\x115\x5\x115\x1C8D\n\x115\x3\x115\x3\x115"+
		"\x3\x115\x3\x115\x3\x115\x5\x115\x1C94\n\x115\x3\x115\x5\x115\x1C97\n"+
		"\x115\x3\x116\x3\x116\x3\x117\x3\x117\x3\x117\x3\x117\x3\x117\x3\x117"+
		"\x3\x117\x3\x117\x3\x117\x3\x117\x3\x117\x3\x117\x3\x117\x3\x117\x3\x117"+
		"\x3\x117\x3\x117\x3\x117\x3\x117\a\x117\x1CAE\n\x117\f\x117\xE\x117\x1CB1"+
		"\v\x117\x3\x117\x3\x117\x3\x117\x3\x117\x3\x117\x3\x117\x3\x117\x3\x117"+
		"\x5\x117\x1CBB\n\x117\x3\x117\x3\x117\x3\x117\x3\x117\x3\x117\x3\x117"+
		"\x3\x117\x3\x117\x3\x117\x3\x117\x3\x117\x5\x117\x1CC8\n\x117\x3\x117"+
		"\x3\x117\x3\x117\x3\x117\x3\x117\a\x117\x1CCF\n\x117\f\x117\xE\x117\x1CD2"+
		"\v\x117\x3\x117\x3\x117\x3\x117\x3\x117\x3\x117\x5\x117\x1CD9\n\x117\x3"+
		"\x117\x3\x117\x3\x117\x3\x117\x3\x117\x3\x117\x5\x117\x1CE1\n\x117\x3"+
		"\x117\x3\x117\x3\x117\x3\x117\x5\x117\x1CE7\n\x117\x3\x117\x5\x117\x1CEA"+
		"\n\x117\x3\x118\x5\x118\x1CED\n\x118\x3\x118\x5\x118\x1CF0\n\x118\x3\x118"+
		"\x3\x118\x3\x118\x3\x118\x5\x118\x1CF6\n\x118\x3\x118\x3\x118\x5\x118"+
		"\x1CFA\n\x118\x3\x119\x3\x119\x3\x119\x3\x119\x3\x119\x3\x119\x5\x119"+
		"\x1D02\n\x119\x3\x119\x3\x119\x3\x119\x3\x119\x3\x119\x3\x119\x3\x11A"+
		"\x3\x11A\x3\x11A\x3\x11A\x5\x11A\x1D0E\n\x11A\x3\x11A\x3\x11A\x3\x11A"+
		"\x3\x11A\x3\x11A\x3\x11A\x3\x11A\x3\x11A\x3\x11A\x3\x11A\x5\x11A\x1D1A"+
		"\n\x11A\x3\x11A\x3\x11A\x5\x11A\x1D1E\n\x11A\x3\x11A\x5\x11A\x1D21\n\x11A"+
		"\x3\x11B\x3\x11B\x3\x11B\x3\x11B\x3\x11B\a\x11B\x1D28\n\x11B\f\x11B\xE"+
		"\x11B\x1D2B\v\x11B\x3\x11B\x3\x11B\x3\x11B\x5\x11B\x1D30\n\x11B\x3\x11B"+
		"\x3\x11B\x3\x11B\x3\x11B\x3\x11B\x3\x11B\a\x11B\x1D38\n\x11B\f\x11B\xE"+
		"\x11B\x1D3B\v\x11B\x3\x11B\x3\x11B\x3\x11B\x3\x11B\x3\x11B\x3\x11B\x5"+
		"\x11B\x1D43\n\x11B\x3\x11C\x3\x11C\x3\x11C\x3\x11C\x3\x11C\x3\x11C\x3"+
		"\x11C\x3\x11C\x5\x11C\x1D4D\n\x11C\x3\x11C\x3\x11C\x3\x11C\x3\x11C\x5"+
		"\x11C\x1D53\n\x11C\x3\x11C\x3\x11C\x3\x11C\x3\x11C\x5\x11C\x1D59\n\x11C"+
		"\x3\x11C\x3\x11C\x3\x11C\x3\x11C\x3\x11C\x5\x11C\x1D60\n\x11C\x3\x11C"+
		"\x3\x11C\x3\x11C\x3\x11C\x5\x11C\x1D66\n\x11C\x3\x11C\x3\x11C\x5\x11C"+
		"\x1D6A\n\x11C\x3\x11C\x3\x11C\x3\x11D\x3\x11D\x3\x11D\x3\x11D\x3\x11D"+
		"\x3\x11D\x3\x11D\x5\x11D\x1D75\n\x11D\x3\x11D\x3\x11D\x3\x11D\x3\x11D"+
		"\x3\x11D\x3\x11D\x3\x11D\x3\x11D\x3\x11D\x3\x11D\x3\x11D\x3\x11D\x3\x11D"+
		"\x5\x11D\x1D84\n\x11D\x5\x11D\x1D86\n\x11D\x3\x11E\x3\x11E\x3\x11F\x3"+
		"\x11F\x3\x11F\x3\x11F\x3\x11F\x3\x11F\x3\x11F\x3\x11F\x3\x11F\x3\x11F"+
		"\x3\x11F\x3\x11F\x3\x11F\x3\x11F\x3\x11F\x3\x11F\x3\x11F\x3\x11F\x3\x11F"+
		"\x3\x11F\x3\x11F\x3\x11F\x3\x11F\x3\x11F\x5\x11F\x1DA2\n\x11F\x3\x120"+
		"\x3\x120\x3\x120\x3\x120\x3\x121\x3\x121\x3\x121\x3\x121\x3\x121\x3\x121"+
		"\x3\x121\x3\x121\x3\x121\x5\x121\x1DB1\n\x121\x3\x121\x3\x121\x3\x121"+
		"\x3\x121\x3\x121\x3\x121\x5\x121\x1DB9\n\x121\x3\x122\x3\x122\x3\x122"+
		"\x3\x122\x3\x122\x3\x122\x3\x122\a\x122\x1DC2\n\x122\f\x122\xE\x122\x1DC5"+
		"\v\x122\a\x122\x1DC7\n\x122\f\x122\xE\x122\x1DCA\v\x122\x5\x122\x1DCC"+
		"\n\x122\x3\x123\x3\x123\x3\x123\x3\x123\x3\x123\x3\x123\x5\x123\x1DD4"+
		"\n\x123\x3\x124\x3\x124\x3\x124\x3\x124\x3\x125\x3\x125\x3\x125\x3\x125"+
		"\x5\x125\x1DDE\n\x125\x3\x126\x3\x126\x3\x126\x3\x126\x3\x126\x5\x126"+
		"\x1DE5\n\x126\x3\x126\x3\x126\x3\x126\x3\x126\x3\x126\x5\x126\x1DEC\n"+
		"\x126\x5\x126\x1DEE\n\x126\x3\x126\x3\x126\x3\x126\x3\x126\x3\x126\x3"+
		"\x126\x3\x126\x3\x126\x3\x126\x3\x126\x5\x126\x1DFA\n\x126\x3\x126\x3"+
		"\x126\x3\x126\x3\x126\x3\x126\x3\x126\x3\x126\x3\x126\x3\x126\x5\x126"+
		"\x1E05\n\x126\x3\x126\x3\x126\x5\x126\x1E09\n\x126\x3\x126\x3\x126\x3"+
		"\x126\x5\x126\x1E0E\n\x126\x3\x126\x5\x126\x1E11\n\x126\x5\x126\x1E13"+
		"\n\x126\x3\x126\x5\x126\x1E16\n\x126\x3\x126\x3\x126\x3\x126\x3\x126\x3"+
		"\x126\x3\x126\x3\x126\x3\x126\x3\x126\x3\x126\x5\x126\x1E22\n\x126\x5"+
		"\x126\x1E24\n\x126\x5\x126\x1E26\n\x126\x3\x126\x5\x126\x1E29\n\x126\x3"+
		"\x126\x3\x126\x3\x126\x5\x126\x1E2E\n\x126\x3\x126\x5\x126\x1E31\n\x126"+
		"\x3\x126\x3\x126\x3\x126\x5\x126\x1E36\n\x126\x3\x126\x3\x126\x3\x126"+
		"\x3\x126\x3\x126\x3\x126\x3\x126\x3\x126\x5\x126\x1E40\n\x126\x3\x126"+
		"\x3\x126\x5\x126\x1E44\n\x126\x3\x126\x3\x126\x3\x126\x5\x126\x1E49\n"+
		"\x126\x3\x126\x5\x126\x1E4C\n\x126\x5\x126\x1E4E\n\x126\x3\x126\x5\x126"+
		"\x1E51\n\x126\x3\x126\x3\x126\x3\x126\x3\x126\x3\x126\x3\x126\x3\x126"+
		"\x3\x126\x3\x126\x3\x126\x5\x126\x1E5D\n\x126\x5\x126\x1E5F\n\x126\x5"+
		"\x126\x1E61\n\x126\x3\x126\x5\x126\x1E64\n\x126\x3\x126\x3\x126\x3\x126"+
		"\x3\x126\x5\x126\x1E6A\n\x126\x3\x127\x3\x127\x3\x128\x3\x128\x3\x128"+
		"\x3\x128\x3\x128\x3\x128\x5\x128\x1E74\n\x128\x3\x129\x3\x129\x3\x12A"+
		"\x3\x12A\x3\x12B\x3\x12B\x3\x12C\x3\x12C\x3\x12C\x3\x12C\x3\x12C\x3\x12C"+
		"\x3\x12C\x3\x12C\x3\x12C\x3\x12C\x3\x12C\x3\x12C\x5\x12C\x1E88\n\x12C"+
		"\x3\x12D\x3\x12D\x3\x12D\x3\x12D\x5\x12D\x1E8E\n\x12D\x3\x12E\x3\x12E"+
		"\x3\x12F\x3\x12F\x3\x12F\x3\x12F\x3\x12F\x3\x130\x3\x130\x3\x131\x3\x131"+
		"\x3\x131\x3\x131\x3\x132\x3\x132\x3\x133\x3\x133\x3\x133\x3\x133\x3\x133"+
		"\x3\x133\x3\x133\x3\x133\x5\x133\x1EA7\n\x133\x5\x133\x1EA9\n\x133\x3"+
		"\x134\x3\x134\x3\x134\x3\x135\x3\x135\x3\x135\x3\x136\x3\x136\x3\x137"+
		"\x3\x137\x3\x138\x3\x138\x3\x139\x3\x139\x3\x139\x3\x139\x3\x13A\x3\x13A"+
		"\x3\x13A\x3\x13A\x3\x13A\x3\x13A\x3\x13A\x3\x13A\x5\x13A\x1EC3\n\x13A"+
		"\x3\x13A\x3\x13A\x3\x13A\x3\x13A\x5\x13A\x1EC9\n\x13A\x3\x13A\x3\x13A"+
		"\x3\x13A\x3\x13A\x3\x13A\x3\x13A\x3\x13A\x3\x13A\x3\x13A\x5\x13A\x1ED4"+
		"\n\x13A\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x5\x13B\x1EDC"+
		"\n\x13B\x3\x13B\x5\x13B\x1EDF\n\x13B\x3\x13C\x3\x13C\x3\x13C\x3\x13D\x3"+
		"\x13D\x3\x13D\x3\x13E\x3\x13E\x3\x13E\x3\x13E\x3\x13E\x3\x13E\x3\x13E"+
		"\x3\x13E\x3\x13E\x5\x13E\x1EF0\n\x13E\x3\x13F\x3\x13F\x3\x13F\x3\x13F"+
		"\x3\x13F\x3\x13F\x5\x13F\x1EF8\n\x13F\x3\x140\x3\x140\x3\x140\x3\x140"+
		"\x3\x140\x5\x140\x1EFF\n\x140\x3\x141\x3\x141\x3\x141\x3\x141\x3\x141"+
		"\x3\x141\x3\x141\x3\x141\x3\x141\x3\x141\x3\x141\x3\x141\x3\x141\x3\x141"+
		"\x3\x141\x3\x141\x3\x141\x3\x141\x3\x141\x3\x141\x3\x141\x5\x141\x1F16"+
		"\n\x141\x3\x142\x3\x142\x3\x142\x3\x142\x3\x142\x3\x143\x3\x143\x3\x143"+
		"\x3\x143\x3\x143\x3\x143\x5\x143\x1F23\n\x143\x3\x144\x3\x144\x3\x144"+
		"\x3\x144\x5\x144\x1F29\n\x144\x3\x144\x3\x144\x3\x144\a\x144\x1F2E\n\x144"+
		"\f\x144\xE\x144\x1F31\v\x144\x3\x144\x3\x144\x3\x144\a\x144\x1F36\n\x144"+
		"\f\x144\xE\x144\x1F39\v\x144\x5\x144\x1F3B\n\x144\x3\x144\x5\x144\x1F3E"+
		"\n\x144\x3\x145\x3\x145\x3\x145\x3\x145\x3\x146\x3\x146\x3\x146\x5\x146"+
		"\x1F47\n\x146\x3\x146\x3\x146\x3\x146\x3\x146\x3\x147\x3\x147\x3\x147"+
		"\x3\x147\x5\x147\x1F51\n\x147\x3\x147\x3\x147\x3\x147\a\x147\x1F56\n\x147"+
		"\f\x147\xE\x147\x1F59\v\x147\x3\x147\x5\x147\x1F5C\n\x147\x3\x148\x3\x148"+
		"\x5\x148\x1F60\n\x148\x3\x149\x3\x149\x3\x149\x3\x149\x5\x149\x1F66\n"+
		"\x149\x3\x149\x3\x149\x3\x149\a\x149\x1F6B\n\x149\f\x149\xE\x149\x1F6E"+
		"\v\x149\x3\x149\x5\x149\x1F71\n\x149\x3\x14A\x3\x14A\x3\x14A\x3\x14A\x5"+
		"\x14A\x1F77\n\x14A\x3\x14A\x3\x14A\x3\x14A\a\x14A\x1F7C\n\x14A\f\x14A"+
		"\xE\x14A\x1F7F\v\x14A\x3\x14A\x3\x14A\x3\x14A\x3\x14A\x5\x14A\x1F85\n"+
		"\x14A\x3\x14A\x5\x14A\x1F88\n\x14A\x3\x14B\x3\x14B\x3\x14B\x3\x14B\x5"+
		"\x14B\x1F8E\n\x14B\x3\x14B\x3\x14B\x3\x14B\a\x14B\x1F93\n\x14B\f\x14B"+
		"\xE\x14B\x1F96\v\x14B\x3\x14B\x5\x14B\x1F99\n\x14B\x3\x14C\x3\x14C\x3"+
		"\x14C\x5\x14C\x1F9E\n\x14C\x3\x14C\x3\x14C\x3\x14C\x5\x14C\x1FA3\n\x14C"+
		"\x3\x14C\x6\x14C\x1FA6\n\x14C\r\x14C\xE\x14C\x1FA7\x3\x14C\x3\x14C\x3"+
		"\x14D\x3\x14D\x3\x14D\x3\x14D\x5\x14D\x1FB0\n\x14D\x3\x14D\x3\x14D\x5"+
		"\x14D\x1FB4\n\x14D\x3\x14E\x3\x14E\x3\x14E\x3\x14E\x5\x14E\x1FBA\n\x14E"+
		"\x3\x14E\x3\x14E\x3\x14E\a\x14E\x1FBF\n\x14E\f\x14E\xE\x14E\x1FC2\v\x14E"+
		"\x3\x14E\x5\x14E\x1FC5\n\x14E\x3\x14F\x3\x14F\x3\x14F\x3\x14F\x3\x14F"+
		"\x3\x14F\x3\x14F\x3\x14F\x5\x14F\x1FCF\n\x14F\x5\x14F\x1FD1\n\x14F\x3"+
		"\x14F\x3\x14F\x3\x14F\x3\x14F\x3\x14F\x3\x14F\x5\x14F\x1FD9\n\x14F\x3"+
		"\x150\x3\x150\x3\x150\x3\x150\x5\x150\x1FDF\n\x150\x3\x150\x3\x150\x3"+
		"\x151\x3\x151\x5\x151\x1FE5\n\x151\x3\x152\x3\x152\x3\x152\x3\x152\x3"+
		"\x152\x3\x152\x3\x152\x3\x153\x3\x153\x3\x153\x3\x153\x3\x153\x3\x153"+
		"\x3\x153\x3\x153\x5\x153\x1FF6\n\x153\x3\x153\x3\x153\x5\x153\x1FFA\n"+
		"\x153\x3\x153\x3\x153\x3\x153\x3\x154\x3\x154\x3\x154\x5\x154\x2002\n"+
		"\x154\x3\x154\x3\x154\x5\x154\x2006\n\x154\x3\x154\x5\x154\x2009\n\x154"+
		"\x3\x154\x3\x154\x3\x154\x3\x154\a\x154\x200F\n\x154\f\x154\xE\x154\x2012"+
		"\v\x154\x3\x154\x5\x154\x2015\n\x154\x3\x154\x3\x154\x3\x154\x5\x154\x201A"+
		"\n\x154\x3\x154\x3\x154\x5\x154\x201E\n\x154\x3\x154\x3\x154\x3\x154\x3"+
		"\x154\x3\x154\x3\x154\a\x154\x2026\n\x154\f\x154\xE\x154\x2029\v\x154"+
		"\x3\x154\x3\x154\x5\x154\x202D\n\x154\x5\x154\x202F\n\x154\x3\x155\x3"+
		"\x155\x3\x155\x3\x155\x3\x155\x5\x155\x2036\n\x155\x3\x156\x3\x156\x5"+
		"\x156\x203A\n\x156\x3\x156\x3\x156\x5\x156\x203E\n\x156\x3\x156\x3\x156"+
		"\x5\x156\x2042\n\x156\x3\x156\x5\x156\x2045\n\x156\x3\x156\x3\x156\x5"+
		"\x156\x2049\n\x156\x3\x156\x3\x156\x3\x156\x3\x156\x5\x156\x204F\n\x156"+
		"\x3\x156\x3\x156\x5\x156\x2053\n\x156\x5\x156\x2055\n\x156\x3\x157\x3"+
		"\x157\x3\x157\x3\x157\x3\x157\x5\x157\x205C\n\x157\x3\x157\x3\x157\x3"+
		"\x157\a\x157\x2061\n\x157\f\x157\xE\x157\x2064\v\x157\x5\x157\x2066\n"+
		"\x157\x3\x157\x5\x157\x2069\n\x157\x3\x157\x3\x157\x3\x157\a\x157\x206E"+
		"\n\x157\f\x157\xE\x157\x2071\v\x157\x3\x157\x3\x157\x5\x157\x2075\n\x157"+
		"\x3\x157\x6\x157\x2078\n\x157\r\x157\xE\x157\x2079\x3\x157\x3\x157\x5"+
		"\x157\x207E\n\x157\x3\x157\x3\x157\x3\x157\x3\x157\x5\x157\x2084\n\x157"+
		"\x6\x157\x2086\n\x157\r\x157\xE\x157\x2087\x5\x157\x208A\n\x157\x3\x157"+
		"\x3\x157\x3\x157\x5\x157\x208F\n\x157\x3\x157\x6\x157\x2092\n\x157\r\x157"+
		"\xE\x157\x2093\x6\x157\x2096\n\x157\r\x157\xE\x157\x2097\x3\x157\x3\x157"+
		"\x3\x157\x5\x157\x209D\n\x157\x3\x157\x3\x157\x3\x157\x3\x157\x5\x157"+
		"\x20A3\n\x157\x6\x157\x20A5\n\x157\r\x157\xE\x157\x20A6\x6\x157\x20A9"+
		"\n\x157\r\x157\xE\x157\x20AA\x5\x157\x20AD\n\x157\x3\x157\x3\x157\x5\x157"+
		"\x20B1\n\x157\x3\x157\x3\x157\x5\x157\x20B5\n\x157\x3\x157\x3\x157\x5"+
		"\x157\x20B9\n\x157\x3\x157\x3\x157\x5\x157\x20BD\n\x157\x3\x157\x3\x157"+
		"\x3\x157\x3\x157\x5\x157\x20C3\n\x157\x3\x157\x5\x157\x20C6\n\x157\x3"+
		"\x157\x3\x157\x3\x157\x3\x157\x5\x157\x20CC\n\x157\x3\x157\x3\x157\x5"+
		"\x157\x20D0\n\x157\x3\x157\x3\x157\x5\x157\x20D4\n\x157\x3\x157\x3\x157"+
		"\x3\x157\x3\x157\x5\x157\x20DA\n\x157\x3\x157\x3\x157\x3\x157\x3\x157"+
		"\x5\x157\x20E0\n\x157\x5\x157\x20E2\n\x157\x3\x157\x5\x157\x20E5\n\x157"+
		"\x3\x157\x3\x157\x5\x157\x20E9\n\x157\x3\x157\x3\x157\x5\x157\x20ED\n"+
		"\x157\x3\x157\x3\x157\x5\x157\x20F1\n\x157\x3\x157\x3\x157\x3\x157\x3"+
		"\x157\x5\x157\x20F7\n\x157\x3\x157\x5\x157\x20FA\n\x157\x3\x157\x3\x157"+
		"\x3\x157\x3\x157\x5\x157\x2100\n\x157\x3\x157\x3\x157\x3\x157\x3\x157"+
		"\x5\x157\x2106\n\x157\x3\x157\x5\x157\x2109\n\x157\x3\x157\x3\x157\x3"+
		"\x157\x3\x157\x5\x157\x210F\n\x157\x3\x157\x5\x157\x2112\n\x157\x3\x157"+
		"\x3\x157\x3\x157\x3\x157\x5\x157\x2118\n\x157\x3\x157\x5\x157\x211B\n"+
		"\x157\x3\x157\x3\x157\x5\x157\x211F\n\x157\x3\x157\x3\x157\x5\x157\x2123"+
		"\n\x157\x3\x157\x3\x157\x5\x157\x2127\n\x157\x3\x157\x3\x157\x3\x157\x5"+
		"\x157\x212C\n\x157\x3\x157\x5\x157\x212F\n\x157\x3\x157\x3\x157\x5\x157"+
		"\x2133\n\x157\x3\x157\x3\x157\x5\x157\x2137\n\x157\x3\x157\x3\x157\x3"+
		"\x157\x3\x157\x3\x157\x3\x157\x3\x157\x3\x157\x3\x157\x3\x157\x3\x157"+
		"\x3\x157\x3\x157\x3\x157\x3\x157\x5\x157\x2148\n\x157\a\x157\x214A\n\x157"+
		"\f\x157\xE\x157\x214D\v\x157\x5\x157\x214F\n\x157\x3\x158\x3\x158\x3\x158"+
		"\x3\x158\x3\x158\x5\x158\x2156\n\x158\x3\x158\x6\x158\x2159\n\x158\r\x158"+
		"\xE\x158\x215A\x3\x158\x3\x158\x5\x158\x215F\n\x158\x3\x158\x3\x158\x3"+
		"\x158\x3\x158\x5\x158\x2165\n\x158\x6\x158\x2167\n\x158\r\x158\xE\x158"+
		"\x2168\x5\x158\x216B\n\x158\x3\x158\x3\x158\x3\x158\x5\x158\x2170\n\x158"+
		"\x3\x158\x6\x158\x2173\n\x158\r\x158\xE\x158\x2174\x6\x158\x2177\n\x158"+
		"\r\x158\xE\x158\x2178\x3\x158\x3\x158\x3\x158\x5\x158\x217E\n\x158\x3"+
		"\x158\x3\x158\x3\x158\x3\x158\x5\x158\x2184\n\x158\x6\x158\x2186\n\x158"+
		"\r\x158\xE\x158\x2187\x6\x158\x218A\n\x158\r\x158\xE\x158\x218B\x5\x158"+
		"\x218E\n\x158\x3\x158\x3\x158\x5\x158\x2192\n\x158\x3\x158\x3\x158\x5"+
		"\x158\x2196\n\x158\x3\x158\x3\x158\x5\x158\x219A\n\x158\x3\x158\x3\x158"+
		"\x5\x158\x219E\n\x158\x3\x158\x3\x158\x3\x158\x3\x158\x5\x158\x21A4\n"+
		"\x158\x3\x158\x5\x158\x21A7\n\x158\x3\x158\x3\x158\x3\x158\x3\x158\x5"+
		"\x158\x21AD\n\x158\x3\x158\x3\x158\x5\x158\x21B1\n\x158\x3\x158\x3\x158"+
		"\x5\x158\x21B5\n\x158\x3\x158\x3\x158\x3\x158\x3\x158\x5\x158\x21BB\n"+
		"\x158\x3\x158\x3\x158\x3\x158\x3\x158\x5\x158\x21C1\n\x158\x5\x158\x21C3"+
		"\n\x158\x3\x158\x5\x158\x21C6\n\x158\x3\x158\x3\x158\x5\x158\x21CA\n\x158"+
		"\x3\x158\x3\x158\x5\x158\x21CE\n\x158\x3\x158\x3\x158\x5\x158\x21D2\n"+
		"\x158\x3\x158\x3\x158\x3\x158\x3\x158\x5\x158\x21D8\n\x158\x3\x158\x5"+
		"\x158\x21DB\n\x158\x3\x158\x3\x158\x3\x158\x3\x158\x5\x158\x21E1\n\x158"+
		"\x3\x158\x3\x158\x3\x158\x3\x158\x5\x158\x21E7\n\x158\x3\x158\x5\x158"+
		"\x21EA\n\x158\x3\x158\x3\x158\x3\x158\x3\x158\x5\x158\x21F0\n\x158\x3"+
		"\x158\x5\x158\x21F3\n\x158\x3\x158\x3\x158\x3\x158\x3\x158\x5\x158\x21F9"+
		"\n\x158\x3\x158\x5\x158\x21FC\n\x158\x3\x158\x3\x158\x5\x158\x2200\n\x158"+
		"\x3\x158\x3\x158\x5\x158\x2204\n\x158\x3\x158\x3\x158\x5\x158\x2208\n"+
		"\x158\x3\x158\x3\x158\x3\x158\x5\x158\x220D\n\x158\x3\x158\x5\x158\x2210"+
		"\n\x158\x3\x158\x3\x158\x5\x158\x2214\n\x158\x3\x158\x3\x158\x5\x158\x2218"+
		"\n\x158\x3\x158\x3\x158\x3\x158\x3\x158\x5\x158\x221E\n\x158\x3\x158\x5"+
		"\x158\x2221\n\x158\x3\x158\x3\x158\x5\x158\x2225\n\x158\x3\x158\x3\x158"+
		"\x3\x158\x3\x158\x3\x158\x3\x158\x3\x158\x3\x158\x3\x158\x3\x158\x3\x158"+
		"\x3\x158\x3\x158\x3\x158\x3\x158\x5\x158\x2236\n\x158\a\x158\x2238\n\x158"+
		"\f\x158\xE\x158\x223B\v\x158\x5\x158\x223D\n\x158\x3\x159\x3\x159\x3\x159"+
		"\x3\x159\x3\x159\x3\x159\x3\x159\x3\x159\x3\x159\x3\x159\x3\x159\x3\x159"+
		"\x5\x159\x224B\n\x159\x3\x159\x3\x159\x3\x159\x3\x159\x5\x159\x2251\n"+
		"\x159\x3\x159\x3\x159\x3\x159\x3\x159\x3\x159\x3\x159\x5\x159\x2259\n"+
		"\x159\x3\x159\x3\x159\x3\x159\x3\x159\x3\x159\x6\x159\x2260\n\x159\r\x159"+
		"\xE\x159\x2261\x3\x159\x5\x159\x2265\n\x159\x3\x15A\x3\x15A\x3\x15A\x3"+
		"\x15A\x3\x15A\x3\x15A\x3\x15A\x3\x15A\x3\x15A\x3\x15A\x3\x15A\x3\x15A"+
		"\x3\x15A\x3\x15B\x3\x15B\x3\x15B\x3\x15B\x3\x15B\x3\x15B\x3\x15B\x3\x15B"+
		"\x3\x15B\x3\x15B\x3\x15B\x3\x15B\x3\x15B\x3\x15B\x3\x15C\x3\x15C\x3\x15C"+
		"\x3\x15C\x5\x15C\x2286\n\x15C\x3\x15D\x3\x15D\x5\x15D\x228A\n\x15D\x3"+
		"\x15D\x3\x15D\x5\x15D\x228E\n\x15D\x3\x15E\x3\x15E\x3\x15E\x3\x15E\x3"+
		"\x15E\x5\x15E\x2295\n\x15E\x3\x15F\x3\x15F\x3\x15F\x3\x15F\x3\x160\x3"+
		"\x160\x3\x160\x5\x160\x229E\n\x160\x3\x161\x3\x161\x3\x161\x3\x161\a\x161"+
		"\x22A4\n\x161\f\x161\xE\x161\x22A7\v\x161\x5\x161\x22A9\n\x161\x3\x161"+
		"\x5\x161\x22AC\n\x161\x3\x162\x3\x162\x5\x162\x22B0\n\x162\x3\x162\x3"+
		"\x162\x5\x162\x22B4\n\x162\x3\x162\x5\x162\x22B7\n\x162\x3\x162\x3\x162"+
		"\x3\x162\x3\x162\a\x162\x22BD\n\x162\f\x162\xE\x162\x22C0\v\x162\x3\x162"+
		"\x3\x162\x5\x162\x22C4\n\x162\x3\x162\x3\x162\x3\x162\x5\x162\x22C9\n"+
		"\x162\x3\x162\x3\x162\x5\x162\x22CD\n\x162\x5\x162\x22CF\n\x162\x3\x163"+
		"\x3\x163\x3\x163\a\x163\x22D4\n\x163\f\x163\xE\x163\x22D7\v\x163\x3\x163"+
		"\x3\x163\x3\x163\a\x163\x22DC\n\x163\f\x163\xE\x163\x22DF\v\x163\x5\x163"+
		"\x22E1\n\x163\x3\x164\x3\x164\x3\x164\x3\x164\x3\x165\x3\x165\x3\x166"+
		"\x3\x166\x3\x166\x5\x166\x22EC\n\x166\x3\x166\x3\x166\x3\x166\x5\x166"+
		"\x22F1\n\x166\x3\x167\x3\x167\x5\x167\x22F5\n\x167\x3\x167\x5\x167\x22F8"+
		"\n\x167\x3\x167\x3\x167\x5\x167\x22FC\n\x167\x3\x168\x3\x168\x5\x168\x2300"+
		"\n\x168\x3\x168\x3\x168\x3\x168\x5\x168\x2305\n\x168\x3\x168\x3\x168\x3"+
		"\x168\x3\x168\x3\x168\x5\x168\x230C\n\x168\x5\x168\x230E\n\x168\x3\x168"+
		"\x3\x168\x3\x168\x3\x168\x5\x168\x2314\n\x168\x3\x168\x5\x168\x2317\n"+
		"\x168\x3\x168\x3\x168\x3\x168\x3\x168\a\x168\x231D\n\x168\f\x168\xE\x168"+
		"\x2320\v\x168\x3\x168\x3\x168\x3\x168\x5\x168\x2325\n\x168\x3\x168\x3"+
		"\x168\x5\x168\x2329\n\x168\x3\x168\x5\x168\x232C\n\x168\x3\x168\x3\x168"+
		"\x3\x168\x3\x168\x3\x168\x3\x168\x3\x168\x5\x168\x2335\n\x168\x3\x168"+
		"\x5\x168\x2338\n\x168\x3\x168\x3\x168\x3\x168\x3\x168\x5\x168\x233E\n"+
		"\x168\x3\x169\x3\x169\x3\x169\x5\x169\x2343\n\x169\x3\x16A\x3\x16A\x3"+
		"\x16A\x3\x16A\x3\x16A\x5\x16A\x234A\n\x16A\x3\x16A\x3\x16A\x3\x16A\x5"+
		"\x16A\x234F\n\x16A\x3\x16A\x3\x16A\x3\x16A\x3\x16A\x3\x16A\x3\x16A\x5"+
		"\x16A\x2357\n\x16A\x3\x16B\x3\x16B\x3\x16B\x5\x16B\x235C\n\x16B\x3\x16B"+
		"\x3\x16B\x3\x16B\x3\x16B\x3\x16B\x3\x16B\x3\x16B\x3\x16B\x3\x16B\x3\x16B"+
		"\x5\x16B\x2368\n\x16B\x5\x16B\x236A\n\x16B\x3\x16C\x3\x16C\x3\x16C\x3"+
		"\x16C\x3\x16C\x3\x16C\x3\x16C\x3\x16C\x3\x16C\x5\x16C\x2375\n\x16C\x3"+
		"\x16D\x3\x16D\x3\x16D\x3\x16D\x3\x16D\x5\x16D\x237C\n\x16D\x3\x16D\x3"+
		"\x16D\x3\x16D\x3\x16D\x3\x16D\x3\x16D\a\x16D\x2384\n\x16D\f\x16D\xE\x16D"+
		"\x2387\v\x16D\x3\x16E\x3\x16E\x3\x16E\x3\x16E\x3\x16F\x3\x16F\x3\x16F"+
		"\x3\x16F\x3\x16F\x3\x16F\x3\x16F\x3\x16F\x3\x16F\x3\x16F\x3\x16F\x3\x16F"+
		"\x3\x16F\x3\x16F\x3\x16F\x3\x16F\x5\x16F\x239D\n\x16F\x3\x170\x3\x170"+
		"\x3\x170\x3\x170\x3\x170\x3\x170\x3\x170\x3\x170\x3\x170\x3\x170\x3\x170"+
		"\x5\x170\x23AA\n\x170\x3\x171\x3\x171\x3\x171\x3\x171\x3\x171\x3\x171"+
		"\x3\x171\x3\x171\x3\x171\x3\x171\x3\x171\x3\x171\x3\x171\x3\x171\x5\x171"+
		"\x23BA\n\x171\x3\x171\x3\x171\x3\x171\x5\x171\x23BF\n\x171\x3\x171\x3"+
		"\x171\x3\x171\x3\x171\x3\x171\x5\x171\x23C6\n\x171\x3\x171\x5\x171\x23C9"+
		"\n\x171\x6\x171\x23CB\n\x171\r\x171\xE\x171\x23CC\x5\x171\x23CF\n\x171"+
		"\x3\x172\x3\x172\x3\x172\x3\x172\x3\x172\x3\x172\x3\x172\x3\x172\x3\x172"+
		"\x3\x172\x3\x172\x3\x172\x3\x172\x3\x172\x3\x172\x5\x172\x23E0\n\x172"+
		"\x3\x173\x3\x173\x3\x174\x3\x174\x3\x174\x3\x174\x3\x174\x3\x174\x3\x174"+
		"\x3\x174\x3\x174\x3\x174\x3\x174\x5\x174\x23EF\n\x174\x3\x175\x3\x175"+
		"\x3\x175\x3\x175\x3\x175\x3\x175\x5\x175\x23F7\n\x175\x3\x175\x3\x175"+
		"\x3\x175\x3\x175\x3\x175\x3\x175\x3\x175\x5\x175\x2400\n\x175\x3\x175"+
		"\x3\x175\x3\x175\x3\x175\x3\x175\x3\x175\x5\x175\x2408\n\x175\x3\x176"+
		"\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x5\x176\x2410\n\x176\x3\x176"+
		"\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176"+
		"\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x5\x176\x2421\n\x176\x3\x176"+
		"\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176"+
		"\x3\x176\x5\x176\x242E\n\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176"+
		"\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x5\x176\x243A\n\x176\x3\x176"+
		"\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176"+
		"\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176"+
		"\x3\x176\x3\x176\x3\x176\x5\x176\x2452\n\x176\x3\x176\x3\x176\x3\x176"+
		"\x3\x176\x3\x176\x5\x176\x2459\n\x176\x3\x176\x3\x176\x5\x176\x245D\n"+
		"\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176"+
		"\x5\x176\x2467\n\x176\x3\x176\x3\x176\x5\x176\x246B\n\x176\x3\x176\x3"+
		"\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176"+
		"\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x5\x176\x247C\n\x176\x3\x176"+
		"\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176"+
		"\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176"+
		"\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176"+
		"\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176"+
		"\x5\x176\x24A3\n\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x5\x176"+
		"\x24AA\n\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x5\x176"+
		"\x24B2\n\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176"+
		"\x3\x176\x3\x176\x3\x176\x5\x176\x24BE\n\x176\x3\x176\x3\x176\x3\x176"+
		"\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176"+
		"\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x5\x176"+
		"\x24D4\n\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176"+
		"\x5\x176\x24DD\n\x176\x5\x176\x24DF\n\x176\x3\x177\x3\x177\x3\x177\x3"+
		"\x177\x5\x177\x24E5\n\x177\x3\x177\x3\x177\x3\x177\x5\x177\x24EA\n\x177"+
		"\x3\x177\x3\x177\x3\x177\x3\x177\x3\x177\x5\x177\x24F1\n\x177\x3\x177"+
		"\x3\x177\x3\x177\x3\x177\x3\x177\x3\x177\x3\x177\x3\x177\x3\x177\x3\x177"+
		"\x3\x177\x5\x177\x24FE\n\x177\x5\x177\x2500\n\x177\x5\x177\x2502\n\x177"+
		"\x3\x177\x5\x177\x2505\n\x177\x3\x177\x5\x177\x2508\n\x177\x3\x178\x3"+
		"\x178\x3\x178\x3\x178\x3\x178\x5\x178\x250F\n\x178\x3\x178\x5\x178\x2512"+
		"\n\x178\x3\x178\x3\x178\x3\x178\x3\x178\x5\x178\x2518\n\x178\x3\x178\x3"+
		"\x178\x3\x178\x5\x178\x251D\n\x178\x5\x178\x251F\n\x178\x3\x178\x5\x178"+
		"\x2522\n\x178\x3\x178\x3\x178\x3\x178\x3\x178\x5\x178\x2528\n\x178\x3"+
		"\x178\x3\x178\x3\x178\x3\x178\x3\x178\x3\x178\x5\x178\x2530\n\x178\x5"+
		"\x178\x2532\n\x178\x3\x178\x5\x178\x2535\n\x178\x3\x178\x3\x178\x5\x178"+
		"\x2539\n\x178\x3\x178\x5\x178\x253C\n\x178\x3\x178\x3\x178\x3\x178\x3"+
		"\x178\x3\x178\x3\x178\x3\x178\x3\x178\x5\x178\x2546\n\x178\x3\x178\x5"+
		"\x178\x2549\n\x178\x3\x178\x3\x178\x5\x178\x254D\n\x178\x3\x178\x5\x178"+
		"\x2550\n\x178\x3\x178\x3\x178\x3\x178\x3\x178\x5\x178\x2556\n\x178\x3"+
		"\x178\x5\x178\x2559\n\x178\x5\x178\x255B\n\x178\x3\x179\x3\x179\x5\x179"+
		"\x255F\n\x179\x3\x17A\x3\x17A\x5\x17A\x2563\n\x17A\x3\x17B\x3\x17B\x3"+
		"\x17B\x5\x17B\x2568\n\x17B\x3\x17C\x3\x17C\x5\x17C\x256C\n\x17C\x3\x17D"+
		"\x3\x17D\x3\x17D\x5\x17D\x2571\n\x17D\x3\x17E\x3\x17E\x3\x17E\x5\x17E"+
		"\x2576\n\x17E\x3\x17F\x3\x17F\x5\x17F\x257A\n\x17F\x3\x180\x3\x180\x3"+
		"\x181\x3\x181\x3\x181\x3\x181\x3\x181\x5\x181\x2583\n\x181\x3\x181\x3"+
		"\x181\x3\x181\x3\x181\x5\x181\x2589\n\x181\x3\x181\x3\x181\x3\x181\x3"+
		"\x181\x3\x181\a\x181\x2590\n\x181\f\x181\xE\x181\x2593\v\x181\x5\x181"+
		"\x2595\n\x181\x5\x181\x2597\n\x181\x3\x182\x3\x182\x3\x182\x3\x182\x3"+
		"\x182\x5\x182\x259E\n\x182\x3\x182\x5\x182\x25A1\n\x182\x3\x182\x3\x182"+
		"\x5\x182\x25A5\n\x182\x3\x183\x3\x183\x3\x184\x3\x184\x3\x184\x3\x184"+
		"\x5\x184\x25AD\n\x184\x3\x184\x5\x184\x25B0\n\x184\x3\x184\x3\x184\x3"+
		"\x184\x3\x184\a\x184\x25B6\n\x184\f\x184\xE\x184\x25B9\v\x184\x5\x184"+
		"\x25BB\n\x184\x3\x185\x3\x185\x3\x185\x3\x185\x3\x185\x3\x185\x3\x185"+
		"\x3\x185\x3\x185\x3\x185\x5\x185\x25C7\n\x185\x3\x186\x3\x186\x3\x186"+
		"\x3\x186\x3\x186\x5\x186\x25CE\n\x186\x3\x186\x3\x186\x5\x186\x25D2\n"+
		"\x186\x3\x186\x5\x186\x25D5\n\x186\x3\x186\x3\x186\x3\x186\x3\x186\a\x186"+
		"\x25DB\n\x186\f\x186\xE\x186\x25DE\v\x186\x5\x186\x25E0\n\x186\x3\x187"+
		"\x3\x187\x3\x187\x3\x187\x3\x187\x3\x187\x3\x187\x3\x187\x5\x187\x25EA"+
		"\n\x187\x3\x188\x3\x188\x3\x188\x3\x188\x5\x188\x25F0\n\x188\x3\x188\x3"+
		"\x188\x5\x188\x25F4\n\x188\x3\x188\x5\x188\x25F7\n\x188\x3\x188\x3\x188"+
		"\x3\x188\x3\x188\a\x188\x25FD\n\x188\f\x188\xE\x188\x2600\v\x188\x5\x188"+
		"\x2602\n\x188\x3\x189\x3\x189\x3\x189\x3\x189\x3\x189\x3\x189\x3\x189"+
		"\x3\x189\x3\x189\x5\x189\x260D\n\x189\x5\x189\x260F\n\x189\x3\x189\x3"+
		"\x189\x3\x189\x3\x189\x3\x189\a\x189\x2616\n\x189\f\x189\xE\x189\x2619"+
		"\v\x189\x5\x189\x261B\n\x189\x3\x18A\x3\x18A\x3\x18A\x3\x18A\x3\x18A\x5"+
		"\x18A\x2622\n\x18A\x3\x18A\x3\x18A\x3\x18A\x5\x18A\x2627\n\x18A\x3\x18A"+
		"\x3\x18A\x5\x18A\x262B\n\x18A\x3\x18A\x3\x18A\x3\x18A\x5\x18A\x2630\n"+
		"\x18A\x3\x18B\x3\x18B\x3\x18C\x3\x18C\x3\x18C\x3\x18C\x3\x18C\x3\x18C"+
		"\x3\x18C\x3\x18C\x3\x18C\x3\x18C\a\x18C\x263E\n\x18C\f\x18C\xE\x18C\x2641"+
		"\v\x18C\x5\x18C\x2643\n\x18C\x3\x18D\x3\x18D\x3\x18D\x3\x18D\x3\x18D\x5"+
		"\x18D\x264A\n\x18D\x3\x18D\x3\x18D\x5\x18D\x264E\n\x18D\x3\x18E\x3\x18E"+
		"\x3\x18E\x5\x18E\x2653\n\x18E\x3\x18F\x3\x18F\x3\x190\x3\x190\x3\x190"+
		"\x3\x190\x3\x190\x5\x190\x265C\n\x190\x3\x190\x3\x190\x5\x190\x2660\n"+
		"\x190\x3\x190\x3\x190\x3\x190\x3\x190\a\x190\x2666\n\x190\f\x190\xE\x190"+
		"\x2669\v\x190\x5\x190\x266B\n\x190\x3\x191\x3\x191\x3\x191\x3\x191\x3"+
		"\x191\x3\x191\x3\x191\x5\x191\x2674\n\x191\x3\x191\x5\x191\x2677\n\x191"+
		"\x3\x191\x3\x191\x5\x191\x267B\n\x191\x3\x192\x3\x192\x3\x192\x3\x192"+
		"\x3\x192\x3\x192\x3\x192\x5\x192\x2684\n\x192\x5\x192\x2686\n\x192\x3"+
		"\x192\x3\x192\x3\x192\x5\x192\x268B\n\x192\x3\x193\x3\x193\x3\x193\x3"+
		"\x193\x3\x193\x3\x193\x5\x193\x2693\n\x193\x3\x194\x3\x194\x3\x194\x3"+
		"\x194\x3\x194\x5\x194\x269A\n\x194\x3\x194\x3\x194\x5\x194\x269E\n\x194"+
		"\x3\x195\x3\x195\x3\x195\x3\x195\x3\x195\x3\x195\x3\x195\x3\x195\x3\x195"+
		"\x3\x195\x3\x195\x3\x195\x3\x195\x3\x195\x3\x195\x3\x195\x5\x195\x26B0"+
		"\n\x195\x3\x196\x3\x196\x3\x196\x3\x196\x3\x197\x3\x197\x5\x197\x26B8"+
		"\n\x197\x3\x197\x3\x197\x5\x197\x26BC\n\x197\x3\x197\x3\x197\x5\x197\x26C0"+
		"\n\x197\x3\x198\x3\x198\x3\x198\x3\x198\x5\x198\x26C6\n\x198\x3\x198\a"+
		"\x198\x26C9\n\x198\f\x198\xE\x198\x26CC\v\x198\x3\x198\x3\x198\x3\x199"+
		"\x3\x199\x3\x199\x3\x199\x5\x199\x26D4\n\x199\x3\x199\x5\x199\x26D7\n"+
		"\x199\x3\x199\x5\x199\x26DA\n\x199\x3\x199\x3\x199\x3\x199\x3\x199\x3"+
		"\x199\x3\x199\x3\x199\x3\x199\x3\x199\x5\x199\x26E5\n\x199\x3\x19A\x3"+
		"\x19A\x3\x19A\x5\x19A\x26EA\n\x19A\x3\x19A\x3\x19A\x3\x19A\x3\x19B\x3"+
		"\x19B\x3\x19B\x3\x19B\x3\x19C\x3\x19C\x5\x19C\x26F5\n\x19C\x3\x19C\a\x19C"+
		"\x26F8\n\x19C\f\x19C\xE\x19C\x26FB\v\x19C\x3\x19D\x3\x19D\x3\x19D\x5\x19D"+
		"\x2700\n\x19D\x3\x19E\x3\x19E\x3\x19E\x3\x19E\x5\x19E\x2706\n\x19E\x3"+
		"\x19E\x3\x19E\x3\x19E\x3\x19E\x5\x19E\x270C\n\x19E\x5\x19E\x270E\n\x19E"+
		"\x3\x19E\x3\x19E\x5\x19E\x2712\n\x19E\x3\x19E\x5\x19E\x2715\n\x19E\x3"+
		"\x19E\x3\x19E\x5\x19E\x2719\n\x19E\x3\x19E\x3\x19E\x5\x19E\x271D\n\x19E"+
		"\x3\x19E\x3\x19E\x3\x19E\x3\x19E\x3\x19E\x3\x19E\x5\x19E\x2725\n\x19E"+
		"\x3\x19E\x3\x19E\x3\x19E\x5\x19E\x272A\n\x19E\x5\x19E\x272C\n\x19E\x3"+
		"\x19E\x5\x19E\x272F\n\x19E\x3\x19E\a\x19E\x2732\n\x19E\f\x19E\xE\x19E"+
		"\x2735\v\x19E\x3\x19E\x3\x19E\x3\x19E\x3\x19E\x3\x19E\x3\x19E\x5\x19E"+
		"\x273D\n\x19E\x5\x19E\x273F\n\x19E\x3\x19F\x3\x19F\x3\x19F\x3\x19F\x3"+
		"\x19F\x3\x19F\x5\x19F\x2747\n\x19F\x3\x1A0\x3\x1A0\x5\x1A0\x274B\n\x1A0"+
		"\x3\x1A0\x3\x1A0\x3\x1A0\x5\x1A0\x2750\n\x1A0\x3\x1A0\x5\x1A0\x2753\n"+
		"\x1A0\x3\x1A0\x5\x1A0\x2756\n\x1A0\x3\x1A0\x3\x1A0\x3\x1A0\x3\x1A0\x5"+
		"\x1A0\x275C\n\x1A0\x3\x1A0\x3\x1A0\x3\x1A0\x3\x1A0\x3\x1A0\x3\x1A0\x5"+
		"\x1A0\x2764\n\x1A0\x3\x1A0\x3\x1A0\x3\x1A0\x3\x1A0\x3\x1A0\x3\x1A0\x5"+
		"\x1A0\x276C\n\x1A0\x3\x1A0\x5\x1A0\x276F\n\x1A0\x3\x1A0\x5\x1A0\x2772"+
		"\n\x1A0\x3\x1A1\x3\x1A1\x5\x1A1\x2776\n\x1A1\x3\x1A1\x3\x1A1\x3\x1A1\x5"+
		"\x1A1\x277B\n\x1A1\x3\x1A1\x5\x1A1\x277E\n\x1A1\x3\x1A1\x3\x1A1\x3\x1A1"+
		"\x3\x1A1\x5\x1A1\x2784\n\x1A1\x3\x1A1\x3\x1A1\x5\x1A1\x2788\n\x1A1\x3"+
		"\x1A1\x3\x1A1\x3\x1A1\x3\x1A1\x5\x1A1\x278E\n\x1A1\x3\x1A1\x3\x1A1\x3"+
		"\x1A1\x3\x1A1\x3\x1A1\x3\x1A1\x3\x1A1\x3\x1A1\x3\x1A1\x3\x1A1\x3\x1A1"+
		"\x3\x1A1\x3\x1A1\x3\x1A1\x3\x1A1\x3\x1A1\x3\x1A1\x3\x1A1\x3\x1A1\x3\x1A1"+
		"\x5\x1A1\x27A4\n\x1A1\x3\x1A1\x5\x1A1\x27A7\n\x1A1\x3\x1A1\x5\x1A1\x27AA"+
		"\n\x1A1\x5\x1A1\x27AC\n\x1A1\x3\x1A2\x3\x1A2\x3\x1A2\x3\x1A2\x3\x1A2\x5"+
		"\x1A2\x27B3\n\x1A2\x3\x1A2\x6\x1A2\x27B6\n\x1A2\r\x1A2\xE\x1A2\x27B7\x3"+
		"\x1A2\x3\x1A2\x3\x1A2\x3\x1A2\x3\x1A2\x3\x1A2\x3\x1A2\x3\x1A2\x6\x1A2"+
		"\x27C2\n\x1A2\r\x1A2\xE\x1A2\x27C3\x3\x1A2\x3\x1A2\x3\x1A2\x3\x1A2\x6"+
		"\x1A2\x27CA\n\x1A2\r\x1A2\xE\x1A2\x27CB\x3\x1A2\x3\x1A2\x3\x1A2\x3\x1A2"+
		"\x3\x1A2\x6\x1A2\x27D3\n\x1A2\r\x1A2\xE\x1A2\x27D4\x3\x1A2\x3\x1A2\x3"+
		"\x1A2\x3\x1A2\x3\x1A2\x3\x1A2\x3\x1A2\x5\x1A2\x27DE\n\x1A2\x3\x1A3\x3"+
		"\x1A3\x3\x1A3\x3\x1A3\x3\x1A3\x3\x1A3\x3\x1A3\x3\x1A3\x3\x1A3\x5\x1A3"+
		"\x27E9\n\x1A3\x3\x1A4\x3\x1A4\x3\x1A4\x3\x1A4\x3\x1A4\x3\x1A4\x3\x1A4"+
		"\x3\x1A4\x3\x1A4\x5\x1A4\x27F4\n\x1A4\x3\x1A5\x3\x1A5\x3\x1A5\x3\x1A5"+
		"\x3\x1A5\a\x1A5\x27FB\n\x1A5\f\x1A5\xE\x1A5\x27FE\v\x1A5\x3\x1A5\x3\x1A5"+
		"\x3\x1A6\x3\x1A6\x5\x1A6\x2804\n\x1A6\x3\x1A6\x3\x1A6\x3\x1A6\x3\x1A6"+
		"\x3\x1A6\x5\x1A6\x280B\n\x1A6\x3\x1A7\x3\x1A7\x3\x1A7\x3\x1A7\x3\x1A7"+
		"\x3\x1A7\x3\x1A7\x3\x1A7\x5\x1A7\x2815\n\x1A7\x3\x1A7\x3\x1A7\x5\x1A7"+
		"\x2819\n\x1A7\x5\x1A7\x281B\n\x1A7\x5\x1A7\x281D\n\x1A7\x3\x1A7\x5\x1A7"+
		"\x2820\n\x1A7\x3\x1A7\x5\x1A7\x2823\n\x1A7\x3\x1A7\x3\x1A7\x3\x1A7\x3"+
		"\x1A7\x3\x1A7\x3\x1A7\x3\x1A7\x3\x1A7\x3\x1A7\x5\x1A7\x282E\n\x1A7\x5"+
		"\x1A7\x2830\n\x1A7\x3\x1A7\x5\x1A7\x2833\n\x1A7\x5\x1A7\x2835\n\x1A7\x3"+
		"\x1A8\a\x1A8\x2838\n\x1A8\f\x1A8\xE\x1A8\x283B\v\x1A8\x3\x1A8\x3\x1A8"+
		"\x3\x1A8\x3\x1A9\x3\x1A9\x3\x1A9\x3\x1A9\x3\x1A9\x5\x1A9\x2845\n\x1A9"+
		"\x3\x1AA\x3\x1AA\x3\x1AA\x3\x1AA\x3\x1AA\x3\x1AA\x3\x1AA\x5\x1AA\x284E"+
		"\n\x1AA\x3\x1AA\x5\x1AA\x2851\n\x1AA\x3\x1AA\x5\x1AA\x2854\n\x1AA\x3\x1AA"+
		"\x3\x1AA\x3\x1AA\x3\x1AA\x3\x1AA\a\x1AA\x285B\n\x1AA\f\x1AA\xE\x1AA\x285E"+
		"\v\x1AA\x5\x1AA\x2860\n\x1AA\x3\x1AA\x5\x1AA\x2863\n\x1AA\x3\x1AB\x3\x1AB"+
		"\x3\x1AB\x3\x1AB\x3\x1AB\x5\x1AB\x286A\n\x1AB\x3\x1AB\x5\x1AB\x286D\n"+
		"\x1AB\x3\x1AB\x3\x1AB\x3\x1AB\x3\x1AB\x3\x1AB\x5\x1AB\x2874\n\x1AB\x3"+
		"\x1AB\x3\x1AB\x3\x1AB\x3\x1AB\x5\x1AB\x287A\n\x1AB\x3\x1AB\x3\x1AB\x3"+
		"\x1AB\x3\x1AB\x3\x1AB\x3\x1AB\x3\x1AB\x3\x1AB\x3\x1AB\x3\x1AB\x3\x1AB"+
		"\x3\x1AB\x3\x1AB\x5\x1AB\x2889\n\x1AB\x3\x1AB\x5\x1AB\x288C\n\x1AB\x3"+
		"\x1AB\x3\x1AB\x3\x1AB\x3\x1AB\x3\x1AB\x5\x1AB\x2893\n\x1AB\x3\x1AB\x3"+
		"\x1AB\x3\x1AB\x3\x1AB\a\x1AB\x2899\n\x1AB\f\x1AB\xE\x1AB\x289C\v\x1AB"+
		"\x3\x1AB\x3\x1AB\x3\x1AB\x3\x1AB\x5\x1AB\x28A2\n\x1AB\x3\x1AC\x3\x1AC"+
		"\x3\x1AD\x3\x1AD\x5\x1AD\x28A8\n\x1AD\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE"+
		"\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x5\x1AE\x28B3\n\x1AE\x3\x1AE"+
		"\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE"+
		"\x3\x1AE\x3\x1AE\x5\x1AE\x28C1\n\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE"+
		"\x3\x1AE\a\x1AE\x28C8\n\x1AE\f\x1AE\xE\x1AE\x28CB\v\x1AE\x3\x1AF\x3\x1AF"+
		"\x3\x1AF\x3\x1AF\x3\x1AF\x3\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x5\x1B0\x28D6"+
		"\n\x1B0\x3\x1B1\x3\x1B1\x3\x1B1\x6\x1B1\x28DB\n\x1B1\r\x1B1\xE\x1B1\x28DC"+
		"\x3\x1B1\x3\x1B1\x5\x1B1\x28E1\n\x1B1\x3\x1B1\x3\x1B1\x3\x1B1\x3\x1B1"+
		"\x6\x1B1\x28E7\n\x1B1\r\x1B1\xE\x1B1\x28E8\x3\x1B1\x3\x1B1\x5\x1B1\x28ED"+
		"\n\x1B1\x3\x1B1\x3\x1B1\x5\x1B1\x28F1\n\x1B1\x3\x1B2\x3\x1B2\x3\x1B2\x3"+
		"\x1B2\x5\x1B2\x28F7\n\x1B2\x3\x1B3\x3\x1B3\x3\x1B3\x3\x1B3\x3\x1B3\x3"+
		"\x1B3\x3\x1B3\x3\x1B3\x5\x1B3\x2901\n\x1B3\x3\x1B4\x3\x1B4\x3\x1B4\x3"+
		"\x1B4\x3\x1B4\x3\x1B4\x3\x1B4\x3\x1B4\x5\x1B4\x290B\n\x1B4\x3\x1B5\x3"+
		"\x1B5\x3\x1B6\x3\x1B6\x3\x1B6\x3\x1B6\a\x1B6\x2913\n\x1B6\f\x1B6\xE\x1B6"+
		"\x2916\v\x1B6\x3\x1B7\x3\x1B7\x3\x1B7\x3\x1B7\x3\x1B7\x5\x1B7\x291D\n"+
		"\x1B7\x3\x1B7\x3\x1B7\x3\x1B7\x3\x1B7\x3\x1B7\x3\x1B8\x3\x1B8\x3\x1B8"+
		"\x3\x1B8\x3\x1B8\x5\x1B8\x2929\n\x1B8\x3\x1B8\x3\x1B8\x3\x1B8\x3\x1B8"+
		"\x5\x1B8\x292F\n\x1B8\x3\x1B8\x3\x1B8\x5\x1B8\x2933\n\x1B8\x3\x1B8\x3"+
		"\x1B8\x3\x1B8\x3\x1B8\x3\x1B8\x3\x1B8\x3\x1B8\x3\x1B8\x5\x1B8\x293D\n"+
		"\x1B8\x3\x1B9\x3\x1B9\x5\x1B9\x2941\n\x1B9\x3\x1B9\x3\x1B9\x5\x1B9\x2945"+
		"\n\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9\x3\x1B9"+
		"\x5\x1B9\x294F\n\x1B9\x3\x1BA\x3\x1BA\a\x1BA\x2953\n\x1BA\f\x1BA\xE\x1BA"+
		"\x2956\v\x1BA\x3\x1BA\x3\x1BA\x3\x1BA\x3\x1BA\x3\x1BA\x5\x1BA\x295D\n"+
		"\x1BA\x3\x1BA\x3\x1BA\x3\x1BA\x3\x1BA\x3\x1BA\x3\x1BA\a\x1BA\x2965\n\x1BA"+
		"\f\x1BA\xE\x1BA\x2968\v\x1BA\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3"+
		"\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB"+
		"\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\a\x1BB\x297D\n\x1BB\f\x1BB\xE"+
		"\x1BB\x2980\v\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3"+
		"\x1BB\a\x1BB\x2989\n\x1BB\f\x1BB\xE\x1BB\x298C\v\x1BB\x3\x1BB\x3\x1BB"+
		"\x3\x1BB\x3\x1BB\x5\x1BB\x2992\n\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB"+
		"\a\x1BB\x2998\n\x1BB\f\x1BB\xE\x1BB\x299B\v\x1BB\x3\x1BB\x3\x1BB\x3\x1BB"+
		"\x3\x1BB\x5\x1BB\x29A1\n\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x5\x1BB"+
		"\x29A7\n\x1BB\x3\x1BC\x3\x1BC\x3\x1BC\x3\x1BC\x3\x1BC\x3\x1BC\x5\x1BC"+
		"\x29AF\n\x1BC\x3\x1BC\x5\x1BC\x29B2\n\x1BC\x5\x1BC\x29B4\n\x1BC\x3\x1BC"+
		"\x3\x1BC\x5\x1BC\x29B8\n\x1BC\x3\x1BC\a\x1BC\x29BB\n\x1BC\f\x1BC\xE\x1BC"+
		"\x29BE\v\x1BC\x5\x1BC\x29C0\n\x1BC\x3\x1BD\x3\x1BD\x5\x1BD\x29C4\n\x1BD"+
		"\x3\x1BD\x3\x1BD\x5\x1BD\x29C8\n\x1BD\x3\x1BD\x3\x1BD\x3\x1BD\x3\x1BD"+
		"\x3\x1BD\x5\x1BD\x29CF\n\x1BD\x3\x1BE\x3\x1BE\x5\x1BE\x29D3\n\x1BE\x3"+
		"\x1BE\x5\x1BE\x29D6\n\x1BE\x3\x1BE\x3\x1BE\x3\x1BE\x5\x1BE\x29DB\n\x1BE"+
		"\x3\x1BE\x3\x1BE\x5\x1BE\x29DF\n\x1BE\x3\x1BE\x3\x1BE\x5\x1BE\x29E3\n"+
		"\x1BE\x3\x1BE\x3\x1BE\x3\x1BE\x5\x1BE\x29E8\n\x1BE\x3\x1BE\x3\x1BE\x3"+
		"\x1BE\a\x1BE\x29ED\n\x1BE\f\x1BE\xE\x1BE\x29F0\v\x1BE\x5\x1BE\x29F2\n"+
		"\x1BE\x3\x1BE\x3\x1BE\x5\x1BE\x29F6\n\x1BE\x3\x1BF\x3\x1BF\x3\x1BF\x5"+
		"\x1BF\x29FB\n\x1BF\x3\x1BF\x3\x1BF\x5\x1BF\x29FF\n\x1BF\x3\x1C0\x3\x1C0"+
		"\x3\x1C0\x3\x1C0\x3\x1C0\x3\x1C0\x3\x1C0\x5\x1C0\x2A08\n\x1C0\x3\x1C1"+
		"\x3\x1C1\x3\x1C1\x3\x1C1\x3\x1C1\x5\x1C1\x2A0F\n\x1C1\x3\x1C2\x3\x1C2"+
		"\x3\x1C2\x3\x1C2\x3\x1C2\a\x1C2\x2A16\n\x1C2\f\x1C2\xE\x1C2\x2A19\v\x1C2"+
		"\x3\x1C2\x3\x1C2\x3\x1C2\x3\x1C2\x3\x1C2\x3\x1C2\x3\x1C2\x3\x1C2\x3\x1C2"+
		"\x5\x1C2\x2A24\n\x1C2\x5\x1C2\x2A26\n\x1C2\x3\x1C3\x3\x1C3\x3\x1C3\x3"+
		"\x1C3\x3\x1C3\x3\x1C3\x3\x1C3\x3\x1C3\x5\x1C3\x2A30\n\x1C3\x3\x1C3\x5"+
		"\x1C3\x2A33\n\x1C3\x3\x1C3\a\x1C3\x2A36\n\x1C3\f\x1C3\xE\x1C3\x2A39\v"+
		"\x1C3\x3\x1C3\x3\x1C3\x3\x1C3\x3\x1C3\x3\x1C3\x3\x1C3\x5\x1C3\x2A41\n"+
		"\x1C3\x5\x1C3\x2A43\n\x1C3\x5\x1C3\x2A45\n\x1C3\x3\x1C3\x3\x1C3\x3\x1C3"+
		"\x5\x1C3\x2A4A\n\x1C3\x5\x1C3\x2A4C\n\x1C3\x3\x1C3\x3\x1C3\x3\x1C3\x3"+
		"\x1C3\a\x1C3\x2A52\n\x1C3\f\x1C3\xE\x1C3\x2A55\v\x1C3\x3\x1C3\x3\x1C3"+
		"\x5\x1C3\x2A59\n\x1C3\x3\x1C3\x3\x1C3\x3\x1C3\x3\x1C3\x3\x1C3\x3\x1C3"+
		"\x5\x1C3\x2A61\n\x1C3\x3\x1C3\a\x1C3\x2A64\n\x1C3\f\x1C3\xE\x1C3\x2A67"+
		"\v\x1C3\x3\x1C3\x3\x1C3\x3\x1C3\x5\x1C3\x2A6C\n\x1C3\x5\x1C3\x2A6E\n\x1C3"+
		"\x3\x1C3\x3\x1C3\x3\x1C3\x3\x1C3\x3\x1C3\x3\x1C3\x3\x1C3\x3\x1C3\x5\x1C3"+
		"\x2A78\n\x1C3\x5\x1C3\x2A7A\n\x1C3\x3\x1C3\x3\x1C3\x5\x1C3\x2A7E\n\x1C3"+
		"\x3\x1C3\x3\x1C3\x5\x1C3\x2A82\n\x1C3\x5\x1C3\x2A84\n\x1C3\x3\x1C4\x3"+
		"\x1C4\x3\x1C4\x3\x1C4\x3\x1C4\x3\x1C4\x3\x1C4\x5\x1C4\x2A8D\n\x1C4\x5"+
		"\x1C4\x2A8F\n\x1C4\x3\x1C5\x3\x1C5\x3\x1C5\x5\x1C5\x2A94\n\x1C5\x3\x1C6"+
		"\x3\x1C6\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\a\x1C7\x2A9D\n\x1C7\f"+
		"\x1C7\xE\x1C7\x2AA0\v\x1C7\x3\x1C7\x3\x1C7\x3\x1C8\x3\x1C8\x3\x1C8\x3"+
		"\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8"+
		"\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8"+
		"\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\a\x1C8\x2ABF\n\x1C8\f"+
		"\x1C8\xE\x1C8\x2AC2\v\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3"+
		"\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8"+
		"\x3\x1C8\x5\x1C8\x2AD3\n\x1C8\x3\x1C9\x3\x1C9\x3\x1C9\x3\x1C9\x3\x1C9"+
		"\x5\x1C9\x2ADA\n\x1C9\x5\x1C9\x2ADC\n\x1C9\x3\x1CA\x3\x1CA\x3\x1CA\a\x1CA"+
		"\x2AE1\n\x1CA\f\x1CA\xE\x1CA\x2AE4\v\x1CA\x3\x1CB\x3\x1CB\x3\x1CB\x3\x1CB"+
		"\a\x1CB\x2AEA\n\x1CB\f\x1CB\xE\x1CB\x2AED\v\x1CB\x3\x1CB\x3\x1CB\x3\x1CC"+
		"\x3\x1CC\x3\x1CC\x5\x1CC\x2AF4\n\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC"+
		"\x5\x1CC\x2AFA\n\x1CC\x3\x1CD\x3\x1CD\x3\x1CD\x3\x1CD\x3\x1CD\x3\x1CD"+
		"\x5\x1CD\x2B02\n\x1CD\x3\x1CD\x5\x1CD\x2B05\n\x1CD\x3\x1CE\x3\x1CE\x3"+
		"\x1CE\x3\x1CE\x3\x1CE\x5\x1CE\x2B0C\n\x1CE\x3\x1CE\x3\x1CE\x3\x1CE\x3"+
		"\x1CE\x5\x1CE\x2B12\n\x1CE\x3\x1CE\x5\x1CE\x2B15\n\x1CE\x5\x1CE\x2B17"+
		"\n\x1CE\x3\x1CF\x3\x1CF\x3\x1CF\x3\x1CF\x3\x1CF\x3\x1CF\x5\x1CF\x2B1F"+
		"\n\x1CF\x5\x1CF\x2B21\n\x1CF\x3\x1D0\x3\x1D0\x3\x1D0\x3\x1D0\x3\x1D0\x3"+
		"\x1D0\x5\x1D0\x2B29\n\x1D0\x3\x1D0\x3\x1D0\x3\x1D0\x3\x1D0\x3\x1D0\x5"+
		"\x1D0\x2B30\n\x1D0\x3\x1D0\x3\x1D0\x3\x1D0\x3\x1D0\x3\x1D0\x3\x1D0\x5"+
		"\x1D0\x2B38\n\x1D0\x5\x1D0\x2B3A\n\x1D0\x3\x1D1\x3\x1D1\x3\x1D1\a\x1D1"+
		"\x2B3F\n\x1D1\f\x1D1\xE\x1D1\x2B42\v\x1D1\x3\x1D2\x3\x1D2\x3\x1D2\x3\x1D2"+
		"\x3\x1D2\x5\x1D2\x2B49\n\x1D2\x3\x1D3\x3\x1D3\a\x1D3\x2B4D\n\x1D3\f\x1D3"+
		"\xE\x1D3\x2B50\v\x1D3\x3\x1D3\x3\x1D3\x3\x1D3\x3\x1D3\a\x1D3\x2B56\n\x1D3"+
		"\f\x1D3\xE\x1D3\x2B59\v\x1D3\x5\x1D3\x2B5B\n\x1D3\x3\x1D4\x3\x1D4\x5\x1D4"+
		"\x2B5F\n\x1D4\x3\x1D4\x3\x1D4\x5\x1D4\x2B63\n\x1D4\x3\x1D4\x5\x1D4\x2B66"+
		"\n\x1D4\x3\x1D4\x3\x1D4\x5\x1D4\x2B6A\n\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x5"+
		"\x1D4\x2B6F\n\x1D4\x5\x1D4\x2B71\n\x1D4\x3\x1D4\x3\x1D4\x5\x1D4\x2B75"+
		"\n\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x5\x1D4\x2B7A\n\x1D4\x5\x1D4\x2B7C\n\x1D4"+
		"\x3\x1D4\x3\x1D4\x5\x1D4\x2B80\n\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x5\x1D4"+
		"\x2B85\n\x1D4\x5\x1D4\x2B87\n\x1D4\x3\x1D4\x3\x1D4\x5\x1D4\x2B8B\n\x1D4"+
		"\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x5\x1D4\x2B92\n\x1D4\x5\x1D4"+
		"\x2B94\n\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x5\x1D4\x2B9B\n"+
		"\x1D4\x5\x1D4\x2B9D\n\x1D4\x3\x1D5\x3\x1D5\x3\x1D5\x3\x1D5\x3\x1D5\x3"+
		"\x1D5\x3\x1D5\x5\x1D5\x2BA6\n\x1D5\x3\x1D5\x3\x1D5\x3\x1D5\x3\x1D5\x3"+
		"\x1D5\x3\x1D5\x5\x1D5\x2BAE\n\x1D5\x3\x1D5\x5\x1D5\x2BB1\n\x1D5\x3\x1D6"+
		"\x3\x1D6\x3\x1D6\x3\x1D6\x3\x1D6\x5\x1D6\x2BB8\n\x1D6\x3\x1D6\x3\x1D6"+
		"\x3\x1D6\x3\x1D6\x3\x1D6\x3\x1D6\x5\x1D6\x2BC0\n\x1D6\x3\x1D6\x5\x1D6"+
		"\x2BC3\n\x1D6\x3\x1D7\x3\x1D7\x3\x1D7\a\x1D7\x2BC8\n\x1D7\f\x1D7\xE\x1D7"+
		"\x2BCB\v\x1D7\x3\x1D8\x3\x1D8\x3\x1D8\x5\x1D8\x2BD0\n\x1D8\x3\x1D9\x3"+
		"\x1D9\x3\x1D9\a\x1D9\x2BD5\n\x1D9\f\x1D9\xE\x1D9\x2BD8\v\x1D9\x3\x1DA"+
		"\x3\x1DA\x3\x1DA\x5\x1DA\x2BDD\n\x1DA\x3\x1DB\x3\x1DB\x5\x1DB\x2BE1\n"+
		"\x1DB\x3\x1DC\x3\x1DC\x3\x1DC\x3\x1DC\x3\x1DC\x3\x1DC\x3\x1DC\x3\x1DC"+
		"\x3\x1DD\x3\x1DD\x3\x1DD\x3\x1DD\x3\x1DD\x3\x1DD\x3\x1DD\x3\x1DD\x3\x1DD"+
		"\x3\x1DD\x3\x1DE\x3\x1DE\x3\x1DE\x3\x1DE\x3\x1DE\x5\x1DE\x2BFA\n\x1DE"+
		"\x3\x1DF\x5\x1DF\x2BFD\n\x1DF\x3\x1DF\x3\x1DF\x5\x1DF\x2C01\n\x1DF\x5"+
		"\x1DF\x2C03\n\x1DF\x3\x1DF\x5\x1DF\x2C06\n\x1DF\x3\x1DF\x3\x1DF\x3\x1DF"+
		"\x3\x1DF\x3\x1DF\x3\x1E0\x3\x1E0\x3\x1E0\x3\x1E0\x3\x1E1\x3\x1E1\x3\x1E1"+
		"\x3\x1E1\x3\x1E2\x3\x1E2\x3\x1E2\x3\x1E2\x3\x1E3\x3\x1E3\x3\x1E3\x3\x1E3"+
		"\x3\x1E4\x3\x1E4\x3\x1E4\x3\x1E4\x3\x1E4\x3\x1E4\x3\x1E4\x3\x1E4\x3\x1E5"+
		"\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x3\x1E5"+
		"\x3\x1E6\x3\x1E6\x3\x1E6\a\x1E6\x2C32\n\x1E6\f\x1E6\xE\x1E6\x2C35\v\x1E6"+
		"\x3\x1E7\x3\x1E7\x5\x1E7\x2C39\n\x1E7\x3\x1E8\x3\x1E8\x3\x1E8\x3\x1E8"+
		"\x3\x1E8\x3\x1E8\x3\x1E8\x3\x1E8\x3\x1E8\x3\x1E8\x3\x1E8\x3\x1E8\x3\x1E8"+
		"\x3\x1E8\x3\x1E8\x3\x1E8\a\x1E8\x2C4B\n\x1E8\f\x1E8\xE\x1E8\x2C4E\v\x1E8"+
		"\x3\x1E8\x5\x1E8\x2C51\n\x1E8\x3\x1E8\x3\x1E8\x5\x1E8\x2C55\n\x1E8\x3"+
		"\x1E9\x3\x1E9\x3\x1E9\x3\x1E9\x3\x1EA\x3\x1EA\x3\x1EA\x3\x1EA\x3\x1EA"+
		"\x3\x1EA\a\x1EA\x2C61\n\x1EA\f\x1EA\xE\x1EA\x2C64\v\x1EA\x3\x1EA\x3\x1EA"+
		"\x3\x1EA\x3\x1EA\x3\x1EA\x3\x1EA\x3\x1EA\x5\x1EA\x2C6D\n\x1EA\x3\x1EB"+
		"\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x5\x1EB\x2C76\n\x1EB"+
		"\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x5\x1EB\x2C7C\n\x1EB\x3\x1EC\x3\x1EC"+
		"\x3\x1EC\x5\x1EC\x2C81\n\x1EC\x3\x1EC\x3\x1EC\x3\x1EC\x3\x1EC\x3\x1EC"+
		"\x3\x1EC\x3\x1EC\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED"+
		"\x3\x1ED\x3\x1ED\a\x1ED\x2C93\n\x1ED\f\x1ED\xE\x1ED\x2C96\v\x1ED\x3\x1ED"+
		"\x3\x1ED\x3\x1ED\x5\x1ED\x2C9B\n\x1ED\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED"+
		"\x3\x1ED\x5\x1ED\x2CA2\n\x1ED\x3\x1ED\x3\x1ED\x5\x1ED\x2CA6\n\x1ED\x3"+
		"\x1ED\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED"+
		"\x3\x1ED\x3\x1ED\a\x1ED\x2CB3\n\x1ED\f\x1ED\xE\x1ED\x2CB6\v\x1ED\x3\x1ED"+
		"\x3\x1ED\x3\x1ED\x5\x1ED\x2CBB\n\x1ED\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED"+
		"\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED"+
		"\x3\x1ED\x3\x1ED\x3\x1ED\x3\x1ED\x5\x1ED\x2CCE\n\x1ED\x3\x1EE\x3\x1EE"+
		"\x3\x1EE\x3\x1EE\x3\x1EE\x3\x1EE\x3\x1EE\a\x1EE\x2CD7\n\x1EE\f\x1EE\xE"+
		"\x1EE\x2CDA\v\x1EE\x3\x1EE\x3\x1EE\x3\x1EE\x3\x1EE\x3\x1EE\x3\x1EE\x3"+
		"\x1EE\x3\x1EE\x3\x1EE\x3\x1EE\x5\x1EE\x2CE6\n\x1EE\x3\x1EE\x3\x1EE\x3"+
		"\x1EE\x3\x1EE\x3\x1EE\x3\x1EE\x3\x1EE\x3\x1EE\x3\x1EE\x3\x1EE\x3\x1EE"+
		"\x3\x1EE\x3\x1EE\a\x1EE\x2CF5\n\x1EE\f\x1EE\xE\x1EE\x2CF8\v\x1EE\x3\x1EE"+
		"\x3\x1EE\x3\x1EE\x5\x1EE\x2CFD\n\x1EE\x3\x1EE\x3\x1EE\x3\x1EE\x3\x1EE"+
		"\x3\x1EE\x5\x1EE\x2D04\n\x1EE\x3\x1EE\x3\x1EE\x5\x1EE\x2D08\n\x1EE\x3"+
		"\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF"+
		"\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF"+
		"\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x5\x1EF\x2D23"+
		"\n\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF"+
		"\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF"+
		"\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF"+
		"\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF"+
		"\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF"+
		"\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF"+
		"\x3\x1EF\x3\x1EF\x3\x1EF\x5\x1EF\x2D5D\n\x1EF\x3\x1EF\x3\x1EF\x5\x1EF"+
		"\x2D61\n\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF"+
		"\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF"+
		"\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF"+
		"\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF"+
		"\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF"+
		"\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF"+
		"\x3\x1EF\x3\x1EF\x3\x1EF\x5\x1EF\x2D9A\n\x1EF\x5\x1EF\x2D9C\n\x1EF\x3"+
		"\x1F0\x3\x1F0\x3\x1F0\x3\x1F0\x5\x1F0\x2DA2\n\x1F0\x3\x1F1\x3\x1F1\x3"+
		"\x1F2\x3\x1F2\x3\x1F2\x3\x1F2\x3\x1F2\x3\x1F2\x3\x1F2\x5\x1F2\x2DAD\n"+
		"\x1F2\x3\x1F3\x3\x1F3\x3\x1F3\x3\x1F3\x3\x1F3\x3\x1F3\x3\x1F3\x5\x1F3"+
		"\x2DB6\n\x1F3\x3\x1F4\x3\x1F4\x3\x1F4\x3\x1F4\x3\x1F4\x3\x1F4\x3\x1F4"+
		"\x5\x1F4\x2DBF\n\x1F4\x3\x1F5\x3\x1F5\x3\x1F5\x3\x1F5\x3\x1F5\x3\x1F5"+
		"\x3\x1F5\x3\x1F5\x5\x1F5\x2DC9\n\x1F5\x3\x1F5\x3\x1F5\x3\x1F5\x3\x1F6"+
		"\x3\x1F6\x3\x1F6\x3\x1F6\x3\x1F6\x3\x1F6\x3\x1F6\x3\x1F7\x3\x1F7\x3\x1F7"+
		"\x3\x1F7\x3\x1F7\x3\x1F7\x3\x1F7\x5\x1F7\x2DDC\n\x1F7\x3\x1F7\x3\x1F7"+
		"\x3\x1F7\x3\x1F8\x3\x1F8\x3\x1F8\x3\x1F8\x3\x1F8\x3\x1F9\x3\x1F9\x3\x1F9"+
		"\x3\x1F9\x3\x1F9\x3\x1F9\x5\x1F9\x2DEC\n\x1F9\x3\x1F9\x3\x1F9\x3\x1F9"+
		"\x3\x1FA\x3\x1FA\x3\x1FA\x3\x1FA\x3\x1FA\x3\x1FB\x3\x1FB\x3\x1FB\x3\x1FB"+
		"\x3\x1FB\x3\x1FB\x5\x1FB\x2DFC\n\x1FB\x3\x1FB\x3\x1FB\x3\x1FB\x3\x1FC"+
		"\x3\x1FC\x3\x1FC\x3\x1FC\x3\x1FC\x3\x1FD\x3\x1FD\x3\x1FD\x3\x1FD\x3\x1FD"+
		"\x3\x1FD\x5\x1FD\x2E0C\n\x1FD\x3\x1FD\x3\x1FD\x3\x1FD\x3\x1FD\x3\x1FD"+
		"\x3\x1FD\x3\x1FE\x3\x1FE\x3\x1FE\x3\x1FE\x3\x1FE\x3\x1FF\x3\x1FF\x3\x1FF"+
		"\x3\x1FF\x3\x1FF\x3\x200\x5\x200\x2E1F\n\x200\x3\x200\x3\x200\x3\x201"+
		"\x5\x201\x2E24\n\x201\x3\x201\x3\x201\x3\x202\x3\x202\x5\x202\x2E2A\n"+
		"\x202\x3\x203\x5\x203\x2E2D\n\x203\x3\x203\x3\x203\x3\x203\x5\x203\x2E32"+
		"\n\x203\x3\x203\a\x203\x2E35\n\x203\f\x203\xE\x203\x2E38\v\x203\x3\x203"+
		"\x3\x203\x3\x204\x3\x204\x3\x204\x3\x204\x3\x205\x3\x205\x3\x205\x3\x205"+
		"\x5\x205\x2E44\n\x205\x3\x205\a\x205\x2E47\n\x205\f\x205\xE\x205\x2E4A"+
		"\v\x205\x3\x205\x3\x205\x3\x206\x5\x206\x2E4F\n\x206\x3\x206\x3\x206\x3"+
		"\x206\x3\x206\x3\x206\a\x206\x2E56\n\x206\f\x206\xE\x206\x2E59\v\x206"+
		"\x3\x206\x3\x206\x3\x206\x3\x206\x3\x206\a\x206\x2E60\n\x206\f\x206\xE"+
		"\x206\x2E63\v\x206\x5\x206\x2E65\n\x206\x3\x206\x3\x206\x3\x206\x3\x206"+
		"\x3\x206\x3\x206\x3\x206\x3\x206\x3\x206\x3\x206\a\x206\x2E71\n\x206\f"+
		"\x206\xE\x206\x2E74\v\x206\x3\x206\x3\x206\x3\x206\x5\x206\x2E79\n\x206"+
		"\x3\x206\x3\x206\x3\x206\x3\x206\x3\x206\x3\x206\x3\x206\x5\x206\x2E82"+
		"\n\x206\x3\x207\x3\x207\x5\x207\x2E86\n\x207\x3\x208\x3\x208\x3\x208\x3"+
		"\x208\a\x208\x2E8C\n\x208\f\x208\xE\x208\x2E8F\v\x208\x3\x208\x3\x208"+
		"\x3\x209\x3\x209\x5\x209\x2E95\n\x209\x3\x20A\x3\x20A\x3\x20A\x3\x20A"+
		"\x3\x20A\x3\x20A\x3\x20A\x3\x20A\x3\x20A\a\x20A\x2EA0\n\x20A\f\x20A\xE"+
		"\x20A\x2EA3\v\x20A\x3\x20B\x3\x20B\x3\x20B\a\x20B\x2EA8\n\x20B\f\x20B"+
		"\xE\x20B\x2EAB\v\x20B\x3\x20C\x3\x20C\x3\x20C\x3\x20C\x3\x20C\x3\x20C"+
		"\x3\x20C\x3\x20C\x3\x20C\x3\x20C\x5\x20C\x2EB7\n\x20C\x3\x20D\x3\x20D"+
		"\x3\x20D\x3\x20D\x3\x20D\x5\x20D\x2EBE\n\x20D\x3\x20D\x3\x20D\x3\x20D"+
		"\x3\x20D\x5\x20D\x2EC4\n\x20D\x3\x20D\x3\x20D\x5\x20D\x2EC8\n\x20D\x3"+
		"\x20D\x3\x20D\x3\x20D\x3\x20D\x3\x20D\x3\x20D\x3\x20D\x3\x20D\x3\x20D"+
		"\x3\x20D\x3\x20D\x3\x20D\x3\x20D\x3\x20D\x3\x20D\x5\x20D\x2ED9\n\x20D"+
		"\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E"+
		"\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x5\x20E\x2EE8\n\x20E\x5\x20E\x2EEA\n"+
		"\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E"+
		"\x3\x20E\x3\x20E\x3\x20E\x5\x20E\x2EF7\n\x20E\x3\x20E\x3\x20E\x3\x20E"+
		"\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E"+
		"\x3\x20E\x3\x20E\x5\x20E\x2F07\n\x20E\x3\x20E\x3\x20E\x3\x20E\x3\x20E"+
		"\x3\x20E\x3\x20E\x5\x20E\x2F0F\n\x20E\x3\x20E\x3\x20E\x5\x20E\x2F13\n"+
		"\x20E\x3\x20F\x5\x20F\x2F16\n\x20F\x3\x20F\x3\x20F\x3\x210\x3\x210\x3"+
		"\x210\x3\x210\x3\x210\x5\x210\x2F1F\n\x210\x3\x210\x5\x210\x2F22\n\x210"+
		"\x3\x210\x5\x210\x2F25\n\x210\x3\x210\x3\x210\x3\x211\x3\x211\x3\x211"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x5\x212\x2F32\n\x212"+
		"\x3\x213\x3\x213\x5\x213\x2F36\n\x213\x3\x214\x3\x214\x3\x214\x3\x214"+
		"\x3\x214\x3\x214\x5\x214\x2F3E\n\x214\x3\x215\x3\x215\x3\x215\x3\x215"+
		"\x5\x215\x2F44\n\x215\x3\x216\x3\x216\x3\x216\x3\x216\a\x216\x2F4A\n\x216"+
		"\f\x216\xE\x216\x2F4D\v\x216\x3\x216\x3\x216\x3\x216\x3\x216\x5\x216\x2F53"+
		"\n\x216\x3\x216\x3\x216\x3\x216\x3\x216\x5\x216\x2F59\n\x216\x3\x216\x3"+
		"\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216"+
		"\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x5\x216\x2F6B\n\x216"+
		"\x3\x217\x3\x217\x3\x217\x3\x217\x3\x217\x3\x217\x3\x217\x5\x217\x2F74"+
		"\n\x217\x3\x217\x3\x217\x3\x218\x3\x218\x5\x218\x2F7A\n\x218\x3\x219\x3"+
		"\x219\x3\x219\x3\x219\x5\x219\x2F80\n\x219\x3\x219\x5\x219\x2F83\n\x219"+
		"\x3\x219\x3\x219\x5\x219\x2F87\n\x219\x3\x219\x3\x219\x3\x219\a\x219\x2F8C"+
		"\n\x219\f\x219\xE\x219\x2F8F\v\x219\x3\x21A\x3\x21A\x3\x21A\x3\x21A\x3"+
		"\x21A\x5\x21A\x2F96\n\x21A\x3\x21A\x5\x21A\x2F99\n\x21A\x3\x21A\x3\x21A"+
		"\x3\x21A\x3\x21A\x5\x21A\x2F9F\n\x21A\x3\x21A\x3\x21A\x3\x21A\x3\x21A"+
		"\x5\x21A\x2FA5\n\x21A\x5\x21A\x2FA7\n\x21A\x3\x21A\x3\x21A\x3\x21A\x3"+
		"\x21A\x5\x21A\x2FAD\n\x21A\x3\x21A\x5\x21A\x2FB0\n\x21A\x5\x21A\x2FB2"+
		"\n\x21A\x3\x21A\x3\x21A\x3\x21A\x3\x21A\x5\x21A\x2FB8\n\x21A\x5\x21A\x2FBA"+
		"\n\x21A\x3\x21A\x3\x21A\x3\x21B\x3\x21B\x3\x21B\x3\x21B\x3\x21B\x3\x21B"+
		"\x3\x21B\x3\x21B\x3\x21B\x3\x21B\x5\x21B\x2FC8\n\x21B\x3\x21B\x3\x21B"+
		"\x3\x21B\x3\x21B\x3\x21B\x5\x21B\x2FCF\n\x21B\x3\x21B\x3\x21B\x3\x21C"+
		"\x3\x21C\x3\x21C\x3\x21C\x3\x21C\x5\x21C\x2FD8\n\x21C\x3\x21D\x3\x21D"+
		"\x3\x21D\x3\x21D\x3\x21D\x5\x21D\x2FDF\n\x21D\x3\x21E\x3\x21E\x3\x21E"+
		"\x3\x21E\x3\x21E\x3\x21E\x3\x21E\x3\x21E\x3\x21E\x3\x21E\x3\x21E\x3\x21E"+
		"\x3\x21E\x3\x21E\x3\x21E\x3\x21E\x5\x21E\x2FF1\n\x21E\x3\x21E\x3\x21E"+
		"\x3\x21E\x3\x21E\x3\x21E\x5\x21E\x2FF8\n\x21E\x3\x21E\x3\x21E\x3\x21F"+
		"\x3\x21F\x3\x21F\x5\x21F\x2FFF\n\x21F\x3\x21F\x3\x21F\x3\x21F\x3\x21F"+
		"\x3\x21F\x5\x21F\x3006\n\x21F\x3\x21F\x3\x21F\x3\x21F\x3\x21F\x5\x21F"+
		"\x300C\n\x21F\x3\x21F\x3\x21F\x3\x21F\x3\x21F\x3\x21F\x5\x21F\x3013\n"+
		"\x21F\x3\x21F\x5\x21F\x3016\n\x21F\x3\x220\x3\x220\x3\x220\x5\x220\x301B"+
		"\n\x220\x3\x220\x3\x220\x3\x221\x3\x221\x3\x221\x5\x221\x3022\n\x221\x3"+
		"\x221\x3\x221\x3\x222\x5\x222\x3027\n\x222\x3\x222\x3\x222\x5\x222\x302B"+
		"\n\x222\x3\x222\x3\x222\x3\x222\x5\x222\x3030\n\x222\x3\x223\x5\x223\x3033"+
		"\n\x223\x3\x223\x3\x223\x5\x223\x3037\n\x223\x3\x223\x3\x223\x5\x223\x303B"+
		"\n\x223\x3\x223\x3\x223\x3\x223\x5\x223\x3040\n\x223\x3\x224\x3\x224\x5"+
		"\x224\x3044\n\x224\x3\x225\x3\x225\x3\x225\x3\x225\x5\x225\x304A\n\x225"+
		"\x3\x225\x3\x225\x5\x225\x304E\n\x225\x3\x225\x3\x225\x5\x225\x3052\n"+
		"\x225\x3\x225\x3\x225\x3\x225\x5\x225\x3057\n\x225\x3\x225\x3\x225\x5"+
		"\x225\x305B\n\x225\x3\x225\x3\x225\x3\x225\x5\x225\x3060\n\x225\x3\x225"+
		"\x3\x225\x3\x225\x5\x225\x3065\n\x225\x3\x226\x3\x226\x5\x226\x3069\n"+
		"\x226\x3\x226\x3\x226\x3\x226\x5\x226\x306E\n\x226\a\x226\x3070\n\x226"+
		"\f\x226\xE\x226\x3073\v\x226\x3\x227\x3\x227\x3\x227\a\x227\x3078\n\x227"+
		"\f\x227\xE\x227\x307B\v\x227\x3\x228\x5\x228\x307E\n\x228\x3\x228\a\x228"+
		"\x3081\n\x228\f\x228\xE\x228\x3084\v\x228\x3\x228\x3\x228\x3\x229\x3\x229"+
		"\x3\x229\a\x229\x308B\n\x229\f\x229\xE\x229\x308E\v\x229\x3\x22A\x3\x22A"+
		"\x5\x22A\x3092\n\x22A\x3\x22B\x3\x22B\x3\x22C\x3\x22C\x3\x22D\x5\x22D"+
		"\x3099\n\x22D\x3\x22D\x3\x22D\x3\x22E\x3\x22E\x3\x22E\x3\x22E\x3\x22E"+
		"\x5\x22E\x30A2\n\x22E\x3\x22E\x3\x22E\x5\x22E\x30A6\n\x22E\x5\x22E\x30A8"+
		"\n\x22E\x3\x22F\x3\x22F\x3\x22F\x3\x22F\x3\x22F\x5\x22F\x30AF\n\x22F\x3"+
		"\x230\x3\x230\x3\x230\x3\x230\x3\x230\x3\x230\x3\x230\x3\x230\x3\x230"+
		"\x3\x230\x5\x230\x30BB\n\x230\x3\x231\x3\x231\x3\x231\x5\x231\x30C0\n"+
		"\x231\x3\x231\x3\x231\x3\x231\x3\x231\x3\x231\x3\x231\x3\x231\x3\x231"+
		"\x3\x231\x5\x231\x30CB\n\x231\x3\x231\x3\x231\x3\x231\x3\x231\x3\x231"+
		"\x3\x231\x3\x231\x3\x231\x5\x231\x30D5\n\x231\x5\x231\x30D7\n\x231\x3"+
		"\x231\x3\x231\x3\x231\x3\x231\x5\x231\x30DD\n\x231\x5\x231\x30DF\n\x231"+
		"\x3\x231\x3\x231\x3\x231\x5\x231\x30E4\n\x231\x5\x231\x30E6\n\x231\x3"+
		"\x231\x5\x231\x30E9\n\x231\x3\x232\x3\x232\x5\x232\x30ED\n\x232\x3\x233"+
		"\x3\x233\x5\x233\x30F1\n\x233\x3\x234\x3\x234\x3\x234\x3\x234\x5\x234"+
		"\x30F7\n\x234\x3\x234\x3\x234\x3\x234\x3\x234\x3\x234\x3\x234\x3\x234"+
		"\x5\x234\x3100\n\x234\x3\x234\x5\x234\x3103\n\x234\x5\x234\x3105\n\x234"+
		"\x3\x235\x5\x235\x3108\n\x235\x3\x235\x3\x235\x3\x235\x3\x235\x5\x235"+
		"\x310E\n\x235\x3\x235\x3\x235\x5\x235\x3112\n\x235\x3\x235\x5\x235\x3115"+
		"\n\x235\x3\x236\x3\x236\x3\x236\x3\x236\x3\x236\x3\x236\x3\x236\x5\x236"+
		"\x311E\n\x236\x3\x237\x3\x237\x3\x237\x3\x237\x3\x237\x3\x237\x3\x237"+
		"\x5\x237\x3127\n\x237\x3\x238\x3\x238\x3\x238\x3\x238\x3\x238\x3\x238"+
		"\x3\x238\x3\x238\x3\x238\x3\x238\x5\x238\x3133\n\x238\x3\x238\x5\x238"+
		"\x3136\n\x238\x3\x239\x3\x239\x3\x239\x3\x239\x3\x239\x3\x239\x3\x239"+
		"\x3\x239\x3\x239\x3\x239\x3\x239\x3\x239\x3\x239\x3\x239\x3\x239\x3\x239"+
		"\x3\x239\x3\x239\x3\x239\x3\x239\x3\x239\x3\x239\x3\x239\x3\x239\x3\x239"+
		"\x3\x239\x3\x239\x3\x239\x3\x239\x3\x239\x5\x239\x3156\n\x239\x3\x239"+
		"\x3\x239\x5\x239\x315A\n\x239\x3\x239\x5\x239\x315D\n\x239\x3\x23A\x3"+
		"\x23A\x3\x23A\x3\x23A\x5\x23A\x3163\n\x23A\x3\x23B\x3\x23B\x3\x23B\x5"+
		"\x23B\x3168\n\x23B\x3\x23B\x3\x23B\x5\x23B\x316C\n\x23B\x3\x23B\x3\x23B"+
		"\x5\x23B\x3170\n\x23B\x3\x23B\x3\x23B\x5\x23B\x3174\n\x23B\x3\x23C\x3"+
		"\x23C\x3\x23D\x3\x23D\x3\x23E\x3\x23E\x3\x23E\x3\x23E\x5\x23E\x317E\n"+
		"\x23E\x3\x23F\x3\x23F\x3\x240\x3\x240\x5\x240\x3184\n\x240\x3\x241\x3"+
		"\x241\x3\x241\x3\x241\x3\x241\x3\x241\x3\x241\x3\x241\x3\x241\x3\x241"+
		"\x3\x241\x3\x241\x3\x241\x3\x241\x3\x241\x5\x241\x3195\n\x241\x3\x242"+
		"\x3\x242\x3\x243\x3\x243\x5\x243\x319B\n\x243\x3\x243\x2\x2\x5`\x35A\x372"+
		"\x244\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16"+
		"\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2"+
		"\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2"+
		"J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2"+
		"h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2"+
		"\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2"+
		"\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2"+
		"\xAE\x2\xB0\x2\xB2\x2\xB4\x2\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2"+
		"\xC2\x2\xC4\x2\xC6\x2\xC8\x2\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2"+
		"\xD6\x2\xD8\x2\xDA\x2\xDC\x2\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2"+
		"\xEA\x2\xEC\x2\xEE\x2\xF0\x2\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2"+
		"\xFE\x2\x100\x2\x102\x2\x104\x2\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2"+
		"\x110\x2\x112\x2\x114\x2\x116\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120"+
		"\x2\x122\x2\x124\x2\x126\x2\x128\x2\x12A\x2\x12C\x2\x12E\x2\x130\x2\x132"+
		"\x2\x134\x2\x136\x2\x138\x2\x13A\x2\x13C\x2\x13E\x2\x140\x2\x142\x2\x144"+
		"\x2\x146\x2\x148\x2\x14A\x2\x14C\x2\x14E\x2\x150\x2\x152\x2\x154\x2\x156"+
		"\x2\x158\x2\x15A\x2\x15C\x2\x15E\x2\x160\x2\x162\x2\x164\x2\x166\x2\x168"+
		"\x2\x16A\x2\x16C\x2\x16E\x2\x170\x2\x172\x2\x174\x2\x176\x2\x178\x2\x17A"+
		"\x2\x17C\x2\x17E\x2\x180\x2\x182\x2\x184\x2\x186\x2\x188\x2\x18A\x2\x18C"+
		"\x2\x18E\x2\x190\x2\x192\x2\x194\x2\x196\x2\x198\x2\x19A\x2\x19C\x2\x19E"+
		"\x2\x1A0\x2\x1A2\x2\x1A4\x2\x1A6\x2\x1A8\x2\x1AA\x2\x1AC\x2\x1AE\x2\x1B0"+
		"\x2\x1B2\x2\x1B4\x2\x1B6\x2\x1B8\x2\x1BA\x2\x1BC\x2\x1BE\x2\x1C0\x2\x1C2"+
		"\x2\x1C4\x2\x1C6\x2\x1C8\x2\x1CA\x2\x1CC\x2\x1CE\x2\x1D0\x2\x1D2\x2\x1D4"+
		"\x2\x1D6\x2\x1D8\x2\x1DA\x2\x1DC\x2\x1DE\x2\x1E0\x2\x1E2\x2\x1E4\x2\x1E6"+
		"\x2\x1E8\x2\x1EA\x2\x1EC\x2\x1EE\x2\x1F0\x2\x1F2\x2\x1F4\x2\x1F6\x2\x1F8"+
		"\x2\x1FA\x2\x1FC\x2\x1FE\x2\x200\x2\x202\x2\x204\x2\x206\x2\x208\x2\x20A"+
		"\x2\x20C\x2\x20E\x2\x210\x2\x212\x2\x214\x2\x216\x2\x218\x2\x21A\x2\x21C"+
		"\x2\x21E\x2\x220\x2\x222\x2\x224\x2\x226\x2\x228\x2\x22A\x2\x22C\x2\x22E"+
		"\x2\x230\x2\x232\x2\x234\x2\x236\x2\x238\x2\x23A\x2\x23C\x2\x23E\x2\x240"+
		"\x2\x242\x2\x244\x2\x246\x2\x248\x2\x24A\x2\x24C\x2\x24E\x2\x250\x2\x252"+
		"\x2\x254\x2\x256\x2\x258\x2\x25A\x2\x25C\x2\x25E\x2\x260\x2\x262\x2\x264"+
		"\x2\x266\x2\x268\x2\x26A\x2\x26C\x2\x26E\x2\x270\x2\x272\x2\x274\x2\x276"+
		"\x2\x278\x2\x27A\x2\x27C\x2\x27E\x2\x280\x2\x282\x2\x284\x2\x286\x2\x288"+
		"\x2\x28A\x2\x28C\x2\x28E\x2\x290\x2\x292\x2\x294\x2\x296\x2\x298\x2\x29A"+
		"\x2\x29C\x2\x29E\x2\x2A0\x2\x2A2\x2\x2A4\x2\x2A6\x2\x2A8\x2\x2AA\x2\x2AC"+
		"\x2\x2AE\x2\x2B0\x2\x2B2\x2\x2B4\x2\x2B6\x2\x2B8\x2\x2BA\x2\x2BC\x2\x2BE"+
		"\x2\x2C0\x2\x2C2\x2\x2C4\x2\x2C6\x2\x2C8\x2\x2CA\x2\x2CC\x2\x2CE\x2\x2D0"+
		"\x2\x2D2\x2\x2D4\x2\x2D6\x2\x2D8\x2\x2DA\x2\x2DC\x2\x2DE\x2\x2E0\x2\x2E2"+
		"\x2\x2E4\x2\x2E6\x2\x2E8\x2\x2EA\x2\x2EC\x2\x2EE\x2\x2F0\x2\x2F2\x2\x2F4"+
		"\x2\x2F6\x2\x2F8\x2\x2FA\x2\x2FC\x2\x2FE\x2\x300\x2\x302\x2\x304\x2\x306"+
		"\x2\x308\x2\x30A\x2\x30C\x2\x30E\x2\x310\x2\x312\x2\x314\x2\x316\x2\x318"+
		"\x2\x31A\x2\x31C\x2\x31E\x2\x320\x2\x322\x2\x324\x2\x326\x2\x328\x2\x32A"+
		"\x2\x32C\x2\x32E\x2\x330\x2\x332\x2\x334\x2\x336\x2\x338\x2\x33A\x2\x33C"+
		"\x2\x33E\x2\x340\x2\x342\x2\x344\x2\x346\x2\x348\x2\x34A\x2\x34C\x2\x34E"+
		"\x2\x350\x2\x352\x2\x354\x2\x356\x2\x358\x2\x35A\x2\x35C\x2\x35E\x2\x360"+
		"\x2\x362\x2\x364\x2\x366\x2\x368\x2\x36A\x2\x36C\x2\x36E\x2\x370\x2\x372"+
		"\x2\x374\x2\x376\x2\x378\x2\x37A\x2\x37C\x2\x37E\x2\x380\x2\x382\x2\x384"+
		"\x2\x386\x2\x388\x2\x38A\x2\x38C\x2\x38E\x2\x390\x2\x392\x2\x394\x2\x396"+
		"\x2\x398\x2\x39A\x2\x39C\x2\x39E\x2\x3A0\x2\x3A2\x2\x3A4\x2\x3A6\x2\x3A8"+
		"\x2\x3AA\x2\x3AC\x2\x3AE\x2\x3B0\x2\x3B2\x2\x3B4\x2\x3B6\x2\x3B8\x2\x3BA"+
		"\x2\x3BC\x2\x3BE\x2\x3C0\x2\x3C2\x2\x3C4\x2\x3C6\x2\x3C8\x2\x3CA\x2\x3CC"+
		"\x2\x3CE\x2\x3D0\x2\x3D2\x2\x3D4\x2\x3D6\x2\x3D8\x2\x3DA\x2\x3DC\x2\x3DE"+
		"\x2\x3E0\x2\x3E2\x2\x3E4\x2\x3E6\x2\x3E8\x2\x3EA\x2\x3EC\x2\x3EE\x2\x3F0"+
		"\x2\x3F2\x2\x3F4\x2\x3F6\x2\x3F8\x2\x3FA\x2\x3FC\x2\x3FE\x2\x400\x2\x402"+
		"\x2\x404\x2\x406\x2\x408\x2\x40A\x2\x40C\x2\x40E\x2\x410\x2\x412\x2\x414"+
		"\x2\x416\x2\x418\x2\x41A\x2\x41C\x2\x41E\x2\x420\x2\x422\x2\x424\x2\x426"+
		"\x2\x428\x2\x42A\x2\x42C\x2\x42E\x2\x430\x2\x432\x2\x434\x2\x436\x2\x438"+
		"\x2\x43A\x2\x43C\x2\x43E\x2\x440\x2\x442\x2\x444\x2\x446\x2\x448\x2\x44A"+
		"\x2\x44C\x2\x44E\x2\x450\x2\x452\x2\x454\x2\x456\x2\x458\x2\x45A\x2\x45C"+
		"\x2\x45E\x2\x460\x2\x462\x2\x464\x2\x466\x2\x468\x2\x46A\x2\x46C\x2\x46E"+
		"\x2\x470\x2\x472\x2\x474\x2\x476\x2\x478\x2\x47A\x2\x47C\x2\x47E\x2\x480"+
		"\x2\x482\x2\x484\x2\x2\xA6\x3\x2\x445\x446\x4\x2\x445\x445\x448\x448\x4"+
		"\x2\xFE\xFE\x3DB\x3DC\x4\x2\x445\x446\x448\x448\x5\x2\x210\x210\x26E\x26E"+
		"\x37D\x37D\x5\x2\x442\x442\x445\x445\x448\x448\x5\x2\x14E\x14E\x34C\x34C"+
		"\x407\x407\x3\x2\x448\x449\x3\x2\x345\x349\x4\x2\xCA\xCA\x297\x297\x4"+
		"\x2\x27F\x27F\x351\x351\x5\x2\xDD\xDD\x27F\x27F\x351\x351\x4\x2\x12B\x12B"+
		"\x21B\x21B\x5\x2\xDD\xDD\x27F\x27F\x371\x371\x4\x2\x184\x184\x355\x355"+
		"\x4\x2\xDD\xDD\x371\x371\x5\x2\x264\x264\x2D1\x2D1\x35C\x35D\x4\x2\x287"+
		"\x287\x28D\x28D\x4\x2@@\x3C7\x3C7\x4\x2KK\x217\x217\x4\x2\x18\x18\x303"+
		"\x303\x5\x2\x18\x18\x259\x259\x301\x301\x4\x2%%\xC9\xC9\x4\x2\r\r\x11C"+
		"\x11C\x4\x2\x13F\x13F\x381\x381\x4\x2\x110\x110\x126\x126\x5\x2\x111\x111"+
		"\x3A3\x3A3\x3B4\x3B4\x4\x2\x111\x111\x127\x127\x5\x2\x18\x18\x2B5\x2B5"+
		"\x42F\x42F\x5\x2\x111\x111\x321\x321\x3BF\x3BF\x5\x2\x1ED\x1ED\x250\x250"+
		"\x278\x278\x4\x2\x446\x446\x448\x448\x4\x2\x1E8\x1E8\x232\x232\x5\x2\x1C"+
		"\x1C\x1F\x1F\x271\x271\x5\x2\x264\x264\x2C3\x2C3\x2C5\x2C5\x4\x2\x3A2"+
		"\x3A2\x3B2\x3B2\x4\x2\'\'\x29D\x29D\x4\x2\r\r\x37C\x37C\x4\x2\x203\x203"+
		"\x42A\x42A\x4\x2\x2E6\x2E6\x2EF\x2EF\x4\x2\x446\x446\x448\x449\x4\x2\x24C"+
		"\x24C\x404\x404\x4\x2\x239\x239\x39B\x39B\x4\x2\x110\x110\x308\x308\t"+
		"\x2\x100\x100\x142\x142\x1CE\x1CE\x306\x306\x30B\x30B\x366\x366\x409\x409"+
		"\x5\x2\x27F\x27F\x351\x351\x3CB\x3CB\x4\x2\x103\x103\x196\x196\x6\x2\x100"+
		"\x100\x1CE\x1CE\x366\x366\x409\x409\x4\x2\x65\x65\x16A\x16A\x4\x2\x1CE"+
		"\x1CE\x409\x409\x4\x2\x100\x100\x409\x409\x5\x2\x185\x185\x232\x232\x3D4"+
		"\x3D4\x4\x2\x403\x403\x446\x446\x5\x2\xBC\xBC\x154\x154\x389\x389\x4\x2"+
		"\xF7\xF7\x448\x448\x4\x2\xF7\xF7\x446\x446\x4\x2\x20B\x20B\x448\x448\x5"+
		"\x2\x185\x185\x1E8\x1E8\x232\x232\x4\x2\x16F\x16F\x17E\x17E\x5\x2\x1A7"+
		"\x1A7\x214\x214\x235\x235\x4\x2\x1FB\x1FB\x337\x337\x5\x2\x30\x30\x1CA"+
		"\x1CA\x3D2\x3D2\x4\x2\x264\x264\x2B2\x2B2\x5\x2\x2B7\x2B7\x2E0\x2E0\x415"+
		"\x415\x4\x2\x2DA\x2DA\x2DC\x2DC\x5\x2\x100\x100\x1CE\x1CE\x409\x409\x4"+
		"\x2\x15\x15\x16F\x16F\x5\x2\x2A1\x2A1\x2A3\x2A3\x2FB\x2FB\x4\x2\x2BB\x2BB"+
		"\x343\x343\x4\x2\x18\x18\x1C4\x1C4\x5\x2\x99\x99\x263\x263\x401\x401\x5"+
		"\x2\x12B\x12B\x352\x352\x421\x421\x5\x2GG\x110\x110\x3CB\x3CB\x4\x2\x87"+
		"\x87\x25A\x25A\x5\x2\x66\x66\x264\x264\x367\x367\x6\x2\x2FB\x2FB\x2FF"+
		"\x2FF\x301\x301\x303\x303\x5\x2\xEB\xEB\x1AC\x1AC\x23E\x23E\x4\x2\x191"+
		"\x191\x20B\x20B\x5\x2\x18\x18\x448\x448\x470\x471\x4\x2\x17F\x17F\x287"+
		"\x287\x5\x2\x124\x124\x288\x288\x28E\x28E\x4\x2\x301\x301\x303\x303\x5"+
		"\x2\x24B\x24B\x32C\x32C\x38D\x38D\x5\x2\x19\x19\x111\x111\x171\x171\x4"+
		"\x2\x32E\x32E\x3C4\x3C4\x4\x2\x171\x171\x38C\x38C\x5\x2pp\x17F\x17F\x38C"+
		"\x38C\x5\x2\x8E\x8E\x264\x264\x3E1\x3E1\x4\x2\x23E\x23E\x35F\x35F\x3\x2"+
		"\x159\x15A\x5\x2\x113\x113\x3D1\x3D1\x40C\x40C\x4\x2\xAA\xAA\x270\x270"+
		"\x4\x2\x1C9\x1C9\x262\x262\x4\x2\x269\x269\x38F\x38F\x4\x2\x178\x178\x25F"+
		"\x25F\x4\x2\x8E\x8E\x26F\x26F\x4\x2\xBD\xBD\x3B5\x3B5\x4\x2\x268\x268"+
		"\x336\x336\x4\x2\x209\x209\x26D\x26D\x4\x2\x11\x13\x3EF\x3EF\x4\x2\x211"+
		"\x211\x40F\x40F\x4\x2\x2A1\x2A1\x2A3\x2A3\x4\x2\x159\x159\x449\x449\x4"+
		"\x2\xF6\xF6\x12B\x12B\x4\x2\x149\x149\x3A5\x3A5\a\x2\x11\x13\x105\x105"+
		"\x108\x108\x2F5\x2F7\x3EE\x3EF\x4\x2\x26B\x26B\x377\x377\x4\x2\x42\x42"+
		"\x339\x339\x4\x2\xDD\xDD\x210\x210\x3\x2\x3E6\x3E7\x6\x2\"\"\x13A\x13A"+
		"\x272\x272\x3CE\x3CE\x3\x2\x315\x317\x4\x2!\"\x272\x272\x4\x2\x261\x261"+
		"\x315\x317\x6\x2XX\x273\x274\x374\x374\x41D\x41D\x6\x2#$\x156\x156\x272"+
		"\x272\x3CC\x3CC\x6\x2tt\x2A6\x2A6\x367\x367\x448\x448\x4\x2\x99\x99\x263"+
		"\x263\x4\x2\xB9\xB9\x117\x117\x4\x2::\xAD\xAD\x4\x2\x1CD\x1CD\x36B\x36B"+
		"\x4\x2\x17A\x17A\x359\x359\x6\x2\x121\x121\x157\x157\x1F0\x1F0\x3A7\x3A7"+
		"\x5\x2\x299\x299\x301\x301\x35A\x35A\x4\x2\x6\x6\x30F\x30F\x6\x2\x1D4"+
		"\x1D4\x2DF\x2DF\x3DB\x3DB\x436\x436\x12\x2)*,/\x38\x39\xAF\xAF\xD8\xD8"+
		"\x16D\x16D\x172\x172\x1BD\x1BD\x25B\x25B\x27E\x27E\x2B1\x2B1\x2ED\x2ED"+
		"\x311\x311\x385\x387\x433\x433\x472\x472\x3\x2\x466\x468\x5\x2\x458\x458"+
		"\x469\x46A\x46C\x46E\x3\x2\x469\x46A\x5\x2\x18\x18\x30\x30\x393\x393\x4"+
		"\x2\x18\x18\x114\x114\x4\x2\x446\x446\x44A\x44B\x4\x2\x33E\x33E\x343\x343"+
		"\x4\x2\x16B\x16B\x258\x258\x4\x2\x5\x5\x43B\x43B\x4\x2GG\x2B7\x2B7\x4"+
		"\x2\x19D\x19D\x29E\x29E\x5\x2\xAE\xAE\x19D\x19D\x239\x239\x5\x2\x19D\x19D"+
		"\x213\x213\x239\x239\x4\x2\x101\x101\x1CF\x1CF\x4\x2\x27A\x27A\x445\x446"+
		"\x5\x2\x17F\x17F\x1FB\x1FB\x337\x337\x6\x2\x19D\x19D\x213\x213\x239\x239"+
		"\x310\x310\x4\x2\xCD\xCD\x2A2\x2A2\x4\x2\xB8\xB8\x17D\x17D\x4\x2\x368"+
		"\x368\x36A\x36A\x3\x2\x474\x485\x5\x2\x102\x102\x2F3\x2F3\x344\x344\t"+
		"\x2UU\x21E\x21E\x23D\x23D\x3B0\x3B1\x3BE\x3BE\x418\x418\x41A\x41A\x4\x2"+
		"\xC5\xC5\xC7\xC7\x4\x2\x16C\x16C\x1F8\x1F8\x4\x2\x1F5\x1F5\x1F9\x1F9\x4"+
		"\x2\xCF\xCF\x2BE\x2BE\x3\x2\x2BC\x2BD\x4\x2;;\x106\x106\x4\x2\x2F2\x2F2"+
		"\x343\x343\x5\x2\x17F\x17F\x287\x287\x301\x301\x3\x2\x30D\x30E\x3\x2\x44A"+
		"\x44B\x4\x2\x446\x446\x44A\x44A\x94\x2\x3\x6\b\x17\x19$&&(/\x31\x39<\x45"+
		"GUX[]]_hjkmnppruxy{\x86\x88\x8C\x8E\x96\x98\x98\x9C\x9C\x9E\xA5\xA7\xAC"+
		"\xAE\xB4\xB6\xB6\xB9\xBB\xBD\xC1\xC3\xC8\xCA\xCC\xCE\xCF\xD8\xDC\xDF\xF2"+
		"\xF5\xF6\xF8\xFF\x101\x102\x104\x105\x107\x112\x116\x117\x11D\x11F\x121"+
		"\x122\x124\x12C\x12E\x12F\x131\x138\x13A\x13D\x13F\x141\x143\x143\x145"+
		"\x145\x147\x14C\x14E\x157\x15A\x16E\x170\x176\x178\x17B\x180\x183\x185"+
		"\x192\x195\x195\x197\x197\x199\x1A0\x1A2\x1A7\x1A9\x1AC\x1B0\x1B3\x1B5"+
		"\x1BE\x1C0\x1C3\x1C5\x1CA\x1CC\x1CD\x1CF\x1D1\x1D4\x1D5\x1D7\x1DF\x1E1"+
		"\x1ED\x1EF\x1F3\x1F5\x1FA\x1FC\x1FF\x202\x208\x20A\x238\x23A\x24D\x24F"+
		"\x24F\x251\x259\x25B\x25F\x261\x262\x264\x269\x26B\x278\x27B\x285\x288"+
		"\x289\x28B\x28C\x28E\x290\x293\x293\x297\x29B\x29F\x2A1\x2A3\x2A3\x2A5"+
		"\x2AE\x2B0\x2BA\x2BC\x2C6\x2C9\x2D0\x2D2\x2D2\x2D4\x2D9\x2DB\x2DB\x2DD"+
		"\x2E2\x2E4\x2E8\x2EB\x2EF\x2F1\x2F3\x2F5\x2F7\x2F9\x2FC\x2FE\x307\x309"+
		"\x30A\x30C\x31C\x31E\x329\x32C\x330\x332\x333\x336\x336\x338\x339\x33B"+
		"\x33E\x340\x341\x343\x34A\x34C\x34E\x350\x350\x352\x362\x364\x365\x367"+
		"\x367\x36B\x37A\x37D\x37D\x37F\x37F\x381\x388\x38A\x392\x394\x3A7\x3A9"+
		"\x3C9\x3CC\x3CC\x3CE\x3D6\x3D9\x3DE\x3E1\x3E5\x3E8\x3EB\x3ED\x3EF\x3F1"+
		"\x3F3\x3F5\x3FF\x402\x405\x407\x408\x40B\x40C\x40E\x40E\x410\x415\x417"+
		"\x41A\x41C\x41E\x420\x423\x425\x426\x42A\x42A\x42D\x431\x435\x43E\x46F"+
		"\x46F\x492\x495\x3\x2\x450\x457\a\x2\x185\x185\x1E8\x1E8\x232\x232\x3D4"+
		"\x3D4\x468\x468\x39F8\x2\x496\x3\x2\x2\x2\x4\x4B2\x3\x2\x2\x2\x6\x4B8"+
		"\x3\x2\x2\x2\b\x4D7\x3\x2\x2\x2\n\x4DE\x3\x2\x2\x2\f\x581\x3\x2\x2\x2"+
		"\xE\x588\x3\x2\x2\x2\x10\x596\x3\x2\x2\x2\x12\x598\x3\x2\x2\x2\x14\x5A6"+
		"\x3\x2\x2\x2\x16\x5AA\x3\x2\x2\x2\x18\x5B8\x3\x2\x2\x2\x1A\x5BA\x3\x2"+
		"\x2\x2\x1C\x5C1\x3\x2\x2\x2\x1E\x5CB\x3\x2\x2\x2 \x5D7\x3\x2\x2\x2\"\x5D9"+
		"\x3\x2\x2\x2$\x5DB\x3\x2\x2\x2&\x5DD\x3\x2\x2\x2(\x5FC\x3\x2\x2\x2*\x60D"+
		"\x3\x2\x2\x2,\x61A\x3\x2\x2\x2.\x649\x3\x2\x2\x2\x30\x64B\x3\x2\x2\x2"+
		"\x32\x65E\x3\x2\x2\x2\x34\x660\x3\x2\x2\x2\x36\x67D\x3\x2\x2\x2\x38\x68A"+
		"\x3\x2\x2\x2:\x69F\x3\x2\x2\x2<\x6AC\x3\x2\x2\x2>\x6B1\x3\x2\x2\x2@\x6B5"+
		"\x3\x2\x2\x2\x42\x6B9\x3\x2\x2\x2\x44\x6C4\x3\x2\x2\x2\x46\x6C9\x3\x2"+
		"\x2\x2H\x6CB\x3\x2\x2\x2J\x6D0\x3\x2\x2\x2L\x6D2\x3\x2\x2\x2N\x6D4\x3"+
		"\x2\x2\x2P\x6D7\x3\x2\x2\x2R\x6DB\x3\x2\x2\x2T\x6E1\x3\x2\x2\x2V\x6E3"+
		"\x3\x2\x2\x2X\x6E6\x3\x2\x2\x2Z\x6E8\x3\x2\x2\x2\\\x6EB\x3\x2\x2\x2^\x6F0"+
		"\x3\x2\x2\x2`\x6FB\x3\x2\x2\x2\x62\x704\x3\x2\x2\x2\x64\x708\x3\x2\x2"+
		"\x2\x66\x70A\x3\x2\x2\x2h\x710\x3\x2\x2\x2j\x712\x3\x2\x2\x2l\x714\x3"+
		"\x2\x2\x2n\x717\x3\x2\x2\x2p\x71F\x3\x2\x2\x2r\x721\x3\x2\x2\x2t\x723"+
		"\x3\x2\x2\x2v\x739\x3\x2\x2\x2x\x74C\x3\x2\x2\x2z\x754\x3\x2\x2\x2|\x758"+
		"\x3\x2\x2\x2~\x760\x3\x2\x2\x2\x80\x76F\x3\x2\x2\x2\x82\x771\x3\x2\x2"+
		"\x2\x84\x79D\x3\x2\x2\x2\x86\x7A6\x3\x2\x2\x2\x88\x7B3\x3\x2\x2\x2\x8A"+
		"\x7B5\x3\x2\x2\x2\x8C\x7B7\x3\x2\x2\x2\x8E\x7B9\x3\x2\x2\x2\x90\x7BD\x3"+
		"\x2\x2\x2\x92\x7C7\x3\x2\x2\x2\x94\x7D1\x3\x2\x2\x2\x96\x7FD\x3\x2\x2"+
		"\x2\x98\x814\x3\x2\x2\x2\x9A\x816\x3\x2\x2\x2\x9C\x818\x3\x2\x2\x2\x9E"+
		"\x875\x3\x2\x2\x2\xA0\x877\x3\x2\x2\x2\xA2\x87C\x3\x2\x2\x2\xA4\x87F\x3"+
		"\x2\x2\x2\xA6\x9E7\x3\x2\x2\x2\xA8\x9E9\x3\x2\x2\x2\xAA\x9EB\x3\x2\x2"+
		"\x2\xAC\x9ED\x3\x2\x2\x2\xAE\xA23\x3\x2\x2\x2\xB0\xA28\x3\x2\x2\x2\xB2"+
		"\xA54\x3\x2\x2\x2\xB4\xA6B\x3\x2\x2\x2\xB6\xA89\x3\x2\x2\x2\xB8\xA8D\x3"+
		"\x2\x2\x2\xBA\xA93\x3\x2\x2\x2\xBC\xA99\x3\x2\x2\x2\xBE\xA9D\x3\x2\x2"+
		"\x2\xC0\xAA1\x3\x2\x2\x2\xC2\xAA6\x3\x2\x2\x2\xC4\xAB4\x3\x2\x2\x2\xC6"+
		"\xABA\x3\x2\x2\x2\xC8\xABF\x3\x2\x2\x2\xCA\xAC5\x3\x2\x2\x2\xCC\xAD5\x3"+
		"\x2\x2\x2\xCE\xAD9\x3\x2\x2\x2\xD0\xADF\x3\x2\x2\x2\xD2\xAE5\x3\x2\x2"+
		"\x2\xD4\xAED\x3\x2\x2\x2\xD6\xAF3\x3\x2\x2\x2\xD8\xB02\x3\x2\x2\x2\xDA"+
		"\xB14\x3\x2\x2\x2\xDC\xB1B\x3\x2\x2\x2\xDE\xB20\x3\x2\x2\x2\xE0\xB2B\x3"+
		"\x2\x2\x2\xE2\xB30\x3\x2\x2\x2\xE4\xB34\x3\x2\x2\x2\xE6\xB38\x3\x2\x2"+
		"\x2\xE8\xB3D\x3\x2\x2\x2\xEA\xB42\x3\x2\x2\x2\xEC\xB47\x3\x2\x2\x2\xEE"+
		"\xB55\x3\x2\x2\x2\xF0\xB5B\x3\x2\x2\x2\xF2\xB60\x3\x2\x2\x2\xF4\xB68\x3"+
		"\x2\x2\x2\xF6\xB6C\x3\x2\x2\x2\xF8\xB7D\x3\x2\x2\x2\xFA\xB85\x3\x2\x2"+
		"\x2\xFC\xB8B\x3\x2\x2\x2\xFE\xB99\x3\x2\x2\x2\x100\xBAF\x3\x2\x2\x2\x102"+
		"\xBB4\x3\x2\x2\x2\x104\xBBA\x3\x2\x2\x2\x106\xBBF\x3\x2\x2\x2\x108\xBC3"+
		"\x3\x2\x2\x2\x10A\xBDF\x3\x2\x2\x2\x10C\xBEA\x3\x2\x2\x2\x10E\xBF3\x3"+
		"\x2\x2\x2\x110\xC00\x3\x2\x2\x2\x112\xC08\x3\x2\x2\x2\x114\xC0D\x3\x2"+
		"\x2\x2\x116\xC18\x3\x2\x2\x2\x118\xC36\x3\x2\x2\x2\x11A\xC54\x3\x2\x2"+
		"\x2\x11C\xC62\x3\x2\x2\x2\x11E\xC7A\x3\x2\x2\x2\x120\xC8A\x3\x2\x2\x2"+
		"\x122\xC97\x3\x2\x2\x2\x124\xCAA\x3\x2\x2\x2\x126\xCB7\x3\x2\x2\x2\x128"+
		"\xCC0\x3\x2\x2\x2\x12A\xD05\x3\x2\x2\x2\x12C\xD15\x3\x2\x2\x2\x12E\xD29"+
		"\x3\x2\x2\x2\x130\xD3A\x3\x2\x2\x2\x132\xD58\x3\x2\x2\x2\x134\xE4B\x3"+
		"\x2\x2\x2\x136\xE54\x3\x2\x2\x2\x138\xE8E\x3\x2\x2\x2\x13A\xEBF\x3\x2"+
		"\x2\x2\x13C\xEC1\x3\x2\x2\x2\x13E\xEEA\x3\x2\x2\x2\x140\xF1C\x3\x2\x2"+
		"\x2\x142\xF62\x3\x2\x2\x2\x144\xFA5\x3\x2\x2\x2\x146\xFB5\x3\x2\x2\x2"+
		"\x148\xFD1\x3\x2\x2\x2\x14A\xFE4\x3\x2\x2\x2\x14C\xFF9\x3\x2\x2\x2\x14E"+
		"\x1041\x3\x2\x2\x2\x150\x10A0\x3\x2\x2\x2\x152\x10B6\x3\x2\x2\x2\x154"+
		"\x10C2\x3\x2\x2\x2\x156\x10DE\x3\x2\x2\x2\x158\x10F3\x3\x2\x2\x2\x15A"+
		"\x110D\x3\x2\x2\x2\x15C\x1116\x3\x2\x2\x2\x15E\x1136\x3\x2\x2\x2\x160"+
		"\x1140\x3\x2\x2\x2\x162\x1150\x3\x2\x2\x2\x164\x115C\x3\x2\x2\x2\x166"+
		"\x1165\x3\x2\x2\x2\x168\x1176\x3\x2\x2\x2\x16A\x118E\x3\x2\x2\x2\x16C"+
		"\x11FA\x3\x2\x2\x2\x16E\x1214\x3\x2\x2\x2\x170\x1231\x3\x2\x2\x2\x172"+
		"\x1239\x3\x2\x2\x2\x174\x1251\x3\x2\x2\x2\x176\x1253\x3\x2\x2\x2\x178"+
		"\x125D\x3\x2\x2\x2\x17A\x1261\x3\x2\x2\x2\x17C\x126D\x3\x2\x2\x2\x17E"+
		"\x128A\x3\x2\x2\x2\x180\x1291\x3\x2\x2\x2\x182\x12BD\x3\x2\x2\x2\x184"+
		"\x12C8\x3\x2\x2\x2\x186\x12DB\x3\x2\x2\x2\x188\x1303\x3\x2\x2\x2\x18A"+
		"\x130A\x3\x2\x2\x2\x18C\x1317\x3\x2\x2\x2\x18E\x1329\x3\x2\x2\x2\x190"+
		"\x136F\x3\x2\x2\x2\x192\x139A\x3\x2\x2\x2\x194\x13D6\x3\x2\x2\x2\x196"+
		"\x145F\x3\x2\x2\x2\x198\x14EE\x3\x2\x2\x2\x19A\x150B\x3\x2\x2\x2\x19C"+
		"\x1528\x3\x2\x2\x2\x19E\x1597\x3\x2\x2\x2\x1A0\x15A4\x3\x2\x2\x2\x1A2"+
		"\x15AC\x3\x2\x2\x2\x1A4\x15B4\x3\x2\x2\x2\x1A6\x15CE\x3\x2\x2\x2\x1A8"+
		"\x15D2\x3\x2\x2\x2\x1AA\x15F0\x3\x2\x2\x2\x1AC\x160B\x3\x2\x2\x2\x1AE"+
		"\x161F\x3\x2\x2\x2\x1B0\x1644\x3\x2\x2\x2\x1B2\x1710\x3\x2\x2\x2\x1B4"+
		"\x172E\x3\x2\x2\x2\x1B6\x1730\x3\x2\x2\x2\x1B8\x1750\x3\x2\x2\x2\x1BA"+
		"\x177F\x3\x2\x2\x2\x1BC\x17B3\x3\x2\x2\x2\x1BE\x17C3\x3\x2\x2\x2\x1C0"+
		"\x17D5\x3\x2\x2\x2\x1C2\x17EB\x3\x2\x2\x2\x1C4\x17F9\x3\x2\x2\x2\x1C6"+
		"\x1842\x3\x2\x2\x2\x1C8\x1861\x3\x2\x2\x2\x1CA\x1863\x3\x2\x2\x2\x1CC"+
		"\x1867\x3\x2\x2\x2\x1CE\x1885\x3\x2\x2\x2\x1D0\x1887\x3\x2\x2\x2\x1D2"+
		"\x189C\x3\x2\x2\x2\x1D4\x18EB\x3\x2\x2\x2\x1D6\x18F8\x3\x2\x2\x2\x1D8"+
		"\x18FA\x3\x2\x2\x2\x1DA\x1907\x3\x2\x2\x2\x1DC\x193F\x3\x2\x2\x2\x1DE"+
		"\x1942\x3\x2\x2\x2\x1E0\x1970\x3\x2\x2\x2\x1E2\x1973\x3\x2\x2\x2\x1E4"+
		"\x1989\x3\x2\x2\x2\x1E6\x198D\x3\x2\x2\x2\x1E8\x199C\x3\x2\x2\x2\x1EA"+
		"\x199F\x3\x2\x2\x2\x1EC\x19DA\x3\x2\x2\x2\x1EE\x19F2\x3\x2\x2\x2\x1F0"+
		"\x19F7\x3\x2\x2\x2\x1F2\x1A28\x3\x2\x2\x2\x1F4\x1A4B\x3\x2\x2\x2\x1F6"+
		"\x1A56\x3\x2\x2\x2\x1F8\x1A5F\x3\x2\x2\x2\x1FA\x1A75\x3\x2\x2\x2\x1FC"+
		"\x1A8F\x3\x2\x2\x2\x1FE\x1AB3\x3\x2\x2\x2\x200\x1AE4\x3\x2\x2\x2\x202"+
		"\x1AEE\x3\x2\x2\x2\x204\x1AF6\x3\x2\x2\x2\x206\x1B26\x3\x2\x2\x2\x208"+
		"\x1B28\x3\x2\x2\x2\x20A\x1B30\x3\x2\x2\x2\x20C\x1B54\x3\x2\x2\x2\x20E"+
		"\x1B5C\x3\x2\x2\x2\x210\x1B77\x3\x2\x2\x2\x212\x1B92\x3\x2\x2\x2\x214"+
		"\x1BB7\x3\x2\x2\x2\x216\x1BD8\x3\x2\x2\x2\x218\x1BF0\x3\x2\x2\x2\x21A"+
		"\x1BFE\x3\x2\x2\x2\x21C\x1C00\x3\x2\x2\x2\x21E\x1C15\x3\x2\x2\x2\x220"+
		"\x1C20\x3\x2\x2\x2\x222\x1C2C\x3\x2\x2\x2\x224\x1C55\x3\x2\x2\x2\x226"+
		"\x1C64\x3\x2\x2\x2\x228\x1C7A\x3\x2\x2\x2\x22A\x1C98\x3\x2\x2\x2\x22C"+
		"\x1C9A\x3\x2\x2\x2\x22E\x1CEF\x3\x2\x2\x2\x230\x1CFB\x3\x2\x2\x2\x232"+
		"\x1D09\x3\x2\x2\x2\x234\x1D42\x3\x2\x2\x2\x236\x1D44\x3\x2\x2\x2\x238"+
		"\x1D85\x3\x2\x2\x2\x23A\x1D87\x3\x2\x2\x2\x23C\x1DA1\x3\x2\x2\x2\x23E"+
		"\x1DA3\x3\x2\x2\x2\x240\x1DB8\x3\x2\x2\x2\x242\x1DBA\x3\x2\x2\x2\x244"+
		"\x1DD3\x3\x2\x2\x2\x246\x1DD5\x3\x2\x2\x2\x248\x1DDD\x3\x2\x2\x2\x24A"+
		"\x1DDF\x3\x2\x2\x2\x24C\x1E6B\x3\x2\x2\x2\x24E\x1E73\x3\x2\x2\x2\x250"+
		"\x1E75\x3\x2\x2\x2\x252\x1E77\x3\x2\x2\x2\x254\x1E79\x3\x2\x2\x2\x256"+
		"\x1E87\x3\x2\x2\x2\x258\x1E8D\x3\x2\x2\x2\x25A\x1E8F\x3\x2\x2\x2\x25C"+
		"\x1E91\x3\x2\x2\x2\x25E\x1E96\x3\x2\x2\x2\x260\x1E98\x3\x2\x2\x2\x262"+
		"\x1E9C\x3\x2\x2\x2\x264\x1EA8\x3\x2\x2\x2\x266\x1EAA\x3\x2\x2\x2\x268"+
		"\x1EAD\x3\x2\x2\x2\x26A\x1EB0\x3\x2\x2\x2\x26C\x1EB2\x3\x2\x2\x2\x26E"+
		"\x1EB4\x3\x2\x2\x2\x270\x1EB6\x3\x2\x2\x2\x272\x1ED3\x3\x2\x2\x2\x274"+
		"\x1ED5\x3\x2\x2\x2\x276\x1EE0\x3\x2\x2\x2\x278\x1EE3\x3\x2\x2\x2\x27A"+
		"\x1EEF\x3\x2\x2\x2\x27C\x1EF7\x3\x2\x2\x2\x27E\x1EFE\x3\x2\x2\x2\x280"+
		"\x1F15\x3\x2\x2\x2\x282\x1F17\x3\x2\x2\x2\x284\x1F22\x3\x2\x2\x2\x286"+
		"\x1F24\x3\x2\x2\x2\x288\x1F3F\x3\x2\x2\x2\x28A\x1F46\x3\x2\x2\x2\x28C"+
		"\x1F4C\x3\x2\x2\x2\x28E\x1F5F\x3\x2\x2\x2\x290\x1F61\x3\x2\x2\x2\x292"+
		"\x1F72\x3\x2\x2\x2\x294\x1F89\x3\x2\x2\x2\x296\x1F9A\x3\x2\x2\x2\x298"+
		"\x1FAB\x3\x2\x2\x2\x29A\x1FB5\x3\x2\x2\x2\x29C\x1FC6\x3\x2\x2\x2\x29E"+
		"\x1FDA\x3\x2\x2\x2\x2A0\x1FE4\x3\x2\x2\x2\x2A2\x1FE6\x3\x2\x2\x2\x2A4"+
		"\x1FED\x3\x2\x2\x2\x2A6\x202E\x3\x2\x2\x2\x2A8\x2035\x3\x2\x2\x2\x2AA"+
		"\x2054\x3\x2\x2\x2\x2AC\x2056\x3\x2\x2\x2\x2AE\x2150\x3\x2\x2\x2\x2B0"+
		"\x223E\x3\x2\x2\x2\x2B2\x2266\x3\x2\x2\x2\x2B4\x2273\x3\x2\x2\x2\x2B6"+
		"\x2281\x3\x2\x2\x2\x2B8\x2289\x3\x2\x2\x2\x2BA\x228F\x3\x2\x2\x2\x2BC"+
		"\x2296\x3\x2\x2\x2\x2BE\x229A\x3\x2\x2\x2\x2C0\x229F\x3\x2\x2\x2\x2C2"+
		"\x22CE\x3\x2\x2\x2\x2C4\x22E0\x3\x2\x2\x2\x2C6\x22E2\x3\x2\x2\x2\x2C8"+
		"\x22E6\x3\x2\x2\x2\x2CA\x22F0\x3\x2\x2\x2\x2CC\x22F7\x3\x2\x2\x2\x2CE"+
		"\x233D\x3\x2\x2\x2\x2D0\x2342\x3\x2\x2\x2\x2D2\x2344\x3\x2\x2\x2\x2D4"+
		"\x2369\x3\x2\x2\x2\x2D6\x236B\x3\x2\x2\x2\x2D8\x237B\x3\x2\x2\x2\x2DA"+
		"\x2388\x3\x2\x2\x2\x2DC\x239C\x3\x2\x2\x2\x2DE\x23A9\x3\x2\x2\x2\x2E0"+
		"\x23CE\x3\x2\x2\x2\x2E2\x23DF\x3\x2\x2\x2\x2E4\x23E1\x3\x2\x2\x2\x2E6"+
		"\x23EE\x3\x2\x2\x2\x2E8\x2407\x3\x2\x2\x2\x2EA\x24DE\x3\x2\x2\x2\x2EC"+
		"\x2507\x3\x2\x2\x2\x2EE\x255A\x3\x2\x2\x2\x2F0\x255C\x3\x2\x2\x2\x2F2"+
		"\x2560\x3\x2\x2\x2\x2F4\x2564\x3\x2\x2\x2\x2F6\x2569\x3\x2\x2\x2\x2F8"+
		"\x256D\x3\x2\x2\x2\x2FA\x2572\x3\x2\x2\x2\x2FC\x2577\x3\x2\x2\x2\x2FE"+
		"\x257B\x3\x2\x2\x2\x300\x257D\x3\x2\x2\x2\x302\x2598\x3\x2\x2\x2\x304"+
		"\x25A6\x3\x2\x2\x2\x306\x25A8\x3\x2\x2\x2\x308\x25C6\x3\x2\x2\x2\x30A"+
		"\x25C8\x3\x2\x2\x2\x30C\x25E9\x3\x2\x2\x2\x30E\x25EB\x3\x2\x2\x2\x310"+
		"\x2603\x3\x2\x2\x2\x312\x261C\x3\x2\x2\x2\x314\x2631\x3\x2\x2\x2\x316"+
		"\x2633\x3\x2\x2\x2\x318\x2644\x3\x2\x2\x2\x31A\x264F\x3\x2\x2\x2\x31C"+
		"\x2654\x3\x2\x2\x2\x31E\x2656\x3\x2\x2\x2\x320\x266C\x3\x2\x2\x2\x322"+
		"\x267C\x3\x2\x2\x2\x324\x268C\x3\x2\x2\x2\x326\x2694\x3\x2\x2\x2\x328"+
		"\x269F\x3\x2\x2\x2\x32A\x26B1\x3\x2\x2\x2\x32C\x26B5\x3\x2\x2\x2\x32E"+
		"\x26C1\x3\x2\x2\x2\x330\x26E4\x3\x2\x2\x2\x332\x26E6\x3\x2\x2\x2\x334"+
		"\x26EE\x3\x2\x2\x2\x336\x26F2\x3\x2\x2\x2\x338\x26FF\x3\x2\x2\x2\x33A"+
		"\x2701\x3\x2\x2\x2\x33C\x2740\x3\x2\x2\x2\x33E\x274A\x3\x2\x2\x2\x340"+
		"\x2775\x3\x2\x2\x2\x342\x27DD\x3\x2\x2\x2\x344\x27DF\x3\x2\x2\x2\x346"+
		"\x27EA\x3\x2\x2\x2\x348\x27F5\x3\x2\x2\x2\x34A\x2803\x3\x2\x2\x2\x34C"+
		"\x2834\x3\x2\x2\x2\x34E\x2839\x3\x2\x2\x2\x350\x2844\x3\x2\x2\x2\x352"+
		"\x2846\x3\x2\x2\x2\x354\x28A1\x3\x2\x2\x2\x356\x28A3\x3\x2\x2\x2\x358"+
		"\x28A7\x3\x2\x2\x2\x35A\x28B2\x3\x2\x2\x2\x35C\x28CC\x3\x2\x2\x2\x35E"+
		"\x28D5\x3\x2\x2\x2\x360\x28F0\x3\x2\x2\x2\x362\x28F6\x3\x2\x2\x2\x364"+
		"\x2900\x3\x2\x2\x2\x366\x290A\x3\x2\x2\x2\x368\x290C\x3\x2\x2\x2\x36A"+
		"\x290E\x3\x2\x2\x2\x36C\x2917\x3\x2\x2\x2\x36E\x293C\x3\x2\x2\x2\x370"+
		"\x294E\x3\x2\x2\x2\x372\x2950\x3\x2\x2\x2\x374\x29A6\x3\x2\x2\x2\x376"+
		"\x29BF\x3\x2\x2\x2\x378\x29C7\x3\x2\x2\x2\x37A\x29D0\x3\x2\x2\x2\x37C"+
		"\x29F7\x3\x2\x2\x2\x37E\x2A07\x3\x2\x2\x2\x380\x2A0E\x3\x2\x2\x2\x382"+
		"\x2A10\x3\x2\x2\x2\x384\x2A83\x3\x2\x2\x2\x386\x2A85\x3\x2\x2\x2\x388"+
		"\x2A90\x3\x2\x2\x2\x38A\x2A95\x3\x2\x2\x2\x38C\x2A97\x3\x2\x2\x2\x38E"+
		"\x2AD2\x3\x2\x2\x2\x390\x2AD4\x3\x2\x2\x2\x392\x2ADD\x3\x2\x2\x2\x394"+
		"\x2AE5\x3\x2\x2\x2\x396\x2AF9\x3\x2\x2\x2\x398\x2B01\x3\x2\x2\x2\x39A"+
		"\x2B16\x3\x2\x2\x2\x39C\x2B20\x3\x2\x2\x2\x39E\x2B39\x3\x2\x2\x2\x3A0"+
		"\x2B3B\x3\x2\x2\x2\x3A2\x2B48\x3\x2\x2\x2\x3A4\x2B5A\x3\x2\x2\x2\x3A6"+
		"\x2B9C\x3\x2\x2\x2\x3A8\x2B9E\x3\x2\x2\x2\x3AA\x2BB2\x3\x2\x2\x2\x3AC"+
		"\x2BC4\x3\x2\x2\x2\x3AE\x2BCC\x3\x2\x2\x2\x3B0\x2BD1\x3\x2\x2\x2\x3B2"+
		"\x2BD9\x3\x2\x2\x2\x3B4\x2BE0\x3\x2\x2\x2\x3B6\x2BE2\x3\x2\x2\x2\x3B8"+
		"\x2BEA\x3\x2\x2\x2\x3BA\x2BF9\x3\x2\x2\x2\x3BC\x2C02\x3\x2\x2\x2\x3BE"+
		"\x2C0C\x3\x2\x2\x2\x3C0\x2C10\x3\x2\x2\x2\x3C2\x2C14\x3\x2\x2\x2\x3C4"+
		"\x2C18\x3\x2\x2\x2\x3C6\x2C1C\x3\x2\x2\x2\x3C8\x2C24\x3\x2\x2\x2\x3CA"+
		"\x2C2E\x3\x2\x2\x2\x3CC\x2C36\x3\x2\x2\x2\x3CE\x2C54\x3\x2\x2\x2\x3D0"+
		"\x2C56\x3\x2\x2\x2\x3D2\x2C6C\x3\x2\x2\x2\x3D4\x2C7B\x3\x2\x2\x2\x3D6"+
		"\x2C80\x3\x2\x2\x2\x3D8\x2CCD\x3\x2\x2\x2\x3DA\x2D07\x3\x2\x2\x2\x3DC"+
		"\x2D9B\x3\x2\x2\x2\x3DE\x2DA1\x3\x2\x2\x2\x3E0\x2DA3\x3\x2\x2\x2\x3E2"+
		"\x2DAC\x3\x2\x2\x2\x3E4\x2DB5\x3\x2\x2\x2\x3E6\x2DBE\x3\x2\x2\x2\x3E8"+
		"\x2DC8\x3\x2\x2\x2\x3EA\x2DCD\x3\x2\x2\x2\x3EC\x2DDB\x3\x2\x2\x2\x3EE"+
		"\x2DE0\x3\x2\x2\x2\x3F0\x2DEB\x3\x2\x2\x2\x3F2\x2DF0\x3\x2\x2\x2\x3F4"+
		"\x2DFB\x3\x2\x2\x2\x3F6\x2E00\x3\x2\x2\x2\x3F8\x2E0B\x3\x2\x2\x2\x3FA"+
		"\x2E13\x3\x2\x2\x2\x3FC\x2E18\x3\x2\x2\x2\x3FE\x2E1E\x3\x2\x2\x2\x400"+
		"\x2E23\x3\x2\x2\x2\x402\x2E27\x3\x2\x2\x2\x404\x2E2C\x3\x2\x2\x2\x406"+
		"\x2E3B\x3\x2\x2\x2\x408\x2E3F\x3\x2\x2\x2\x40A\x2E4E\x3\x2\x2\x2\x40C"+
		"\x2E85\x3\x2\x2\x2\x40E\x2E87\x3\x2\x2\x2\x410\x2E94\x3\x2\x2\x2\x412"+
		"\x2E96\x3\x2\x2\x2\x414\x2EA4\x3\x2\x2\x2\x416\x2EB6\x3\x2\x2\x2\x418"+
		"\x2ED8\x3\x2\x2\x2\x41A\x2F12\x3\x2\x2\x2\x41C\x2F15\x3\x2\x2\x2\x41E"+
		"\x2F19\x3\x2\x2\x2\x420\x2F28\x3\x2\x2\x2\x422\x2F31\x3\x2\x2\x2\x424"+
		"\x2F35\x3\x2\x2\x2\x426\x2F3D\x3\x2\x2\x2\x428\x2F43\x3\x2\x2\x2\x42A"+
		"\x2F6A\x3\x2\x2\x2\x42C\x2F6C\x3\x2\x2\x2\x42E\x2F79\x3\x2\x2\x2\x430"+
		"\x2F7B\x3\x2\x2\x2\x432\x2F90\x3\x2\x2\x2\x434\x2FCE\x3\x2\x2\x2\x436"+
		"\x2FD7\x3\x2\x2\x2\x438\x2FDE\x3\x2\x2\x2\x43A\x2FF7\x3\x2\x2\x2\x43C"+
		"\x3015\x3\x2\x2\x2\x43E\x301A\x3\x2\x2\x2\x440\x3021\x3\x2\x2\x2\x442"+
		"\x302F\x3\x2\x2\x2\x444\x303F\x3\x2\x2\x2\x446\x3043\x3\x2\x2\x2\x448"+
		"\x3064\x3\x2\x2\x2\x44A\x3066\x3\x2\x2\x2\x44C\x3074\x3\x2\x2\x2\x44E"+
		"\x3082\x3\x2\x2\x2\x450\x3087\x3\x2\x2\x2\x452\x3091\x3\x2\x2\x2\x454"+
		"\x3093\x3\x2\x2\x2\x456\x3095\x3\x2\x2\x2\x458\x3098\x3\x2\x2\x2\x45A"+
		"\x30A7\x3\x2\x2\x2\x45C\x30AE\x3\x2\x2\x2\x45E\x30B0\x3\x2\x2\x2\x460"+
		"\x30BC\x3\x2\x2\x2\x462\x30EC\x3\x2\x2\x2\x464\x30F0\x3\x2\x2\x2\x466"+
		"\x30F2\x3\x2\x2\x2\x468\x3107\x3\x2\x2\x2\x46A\x3116\x3\x2\x2\x2\x46C"+
		"\x3126\x3\x2\x2\x2\x46E\x3128\x3\x2\x2\x2\x470\x315C\x3\x2\x2\x2\x472"+
		"\x3162\x3\x2\x2\x2\x474\x3173\x3\x2\x2\x2\x476\x3175\x3\x2\x2\x2\x478"+
		"\x3177\x3\x2\x2\x2\x47A\x317D\x3\x2\x2\x2\x47C\x317F\x3\x2\x2\x2\x47E"+
		"\x3183\x3\x2\x2\x2\x480\x3194\x3\x2\x2\x2\x482\x3196\x3\x2\x2\x2\x484"+
		"\x3198\x3\x2\x2\x2\x486\x488\x5\x4\x3\x2\x487\x486\x3\x2\x2\x2\x488\x48B"+
		"\x3\x2\x2\x2\x489\x487\x3\x2\x2\x2\x489\x48A\x3\x2\x2\x2\x48A\x48C\x3"+
		"\x2\x2\x2\x48B\x489\x3\x2\x2\x2\x48C\x497\a\x2\x2\x3\x48D\x491\x5\x2C0"+
		"\x161\x2\x48E\x490\x5\x2F0\x179\x2\x48F\x48E\x3\x2\x2\x2\x490\x493\x3"+
		"\x2\x2\x2\x491\x48F\x3\x2\x2\x2\x491\x492\x3\x2\x2\x2\x492\x494\x3\x2"+
		"\x2\x2\x493\x491\x3\x2\x2\x2\x494\x495\a\x2\x2\x3\x495\x497\x3\x2\x2\x2"+
		"\x496\x489\x3\x2\x2\x2\x496\x48D\x3\x2\x2\x2\x497\x3\x3\x2\x2\x2\x498"+
		"\x4B3\x5\x2F0\x179\x2\x499\x49B\x5\x2C0\x161\x2\x49A\x499\x3\x2\x2\x2"+
		"\x49A\x49B\x3\x2\x2\x2\x49B\x4A2\x3\x2\x2\x2\x49C\x4A3\x5\x2F0\x179\x2"+
		"\x49D\x49F\x5\b\x5\x2\x49E\x49D\x3\x2\x2\x2\x49F\x4A0\x3\x2\x2\x2\x4A0"+
		"\x49E\x3\x2\x2\x2\x4A0\x4A1\x3\x2\x2\x2\x4A1\x4A3\x3\x2\x2\x2\x4A2\x49C"+
		"\x3\x2\x2\x2\x4A2\x49E\x3\x2\x2\x2\x4A3\x4A7\x3\x2\x2\x2\x4A4\x4A6\x5"+
		"\x2F2\x17A\x2\x4A5\x4A4\x3\x2\x2\x2\x4A6\x4A9\x3\x2\x2\x2\x4A7\x4A5\x3"+
		"\x2\x2\x2\x4A7\x4A8\x3\x2\x2\x2\x4A8\x4B3\x3\x2\x2\x2\x4A9\x4A7\x3\x2"+
		"\x2\x2\x4AA\x4AE\x5\x6\x4\x2\x4AB\x4AD\x5\x2F2\x17A\x2\x4AC\x4AB\x3\x2"+
		"\x2\x2\x4AD\x4B0\x3\x2\x2\x2\x4AE\x4AC\x3\x2\x2\x2\x4AE\x4AF\x3\x2\x2"+
		"\x2\x4AF\x4B3\x3\x2\x2\x2\x4B0\x4AE\x3\x2\x2\x2\x4B1\x4B3\x5\x2F2\x17A"+
		"\x2\x4B2\x498\x3\x2\x2\x2\x4B2\x49A\x3\x2\x2\x2\x4B2\x4AA\x3\x2\x2\x2"+
		"\x4B2\x4B1\x3\x2\x2\x2\x4B3\x5\x3\x2\x2\x2\x4B4\x4B9\x5\x20E\x108\x2\x4B5"+
		"\x4B9\x5\x1FE\x100\x2\x4B6\x4B9\x5\x202\x102\x2\x4B7\x4B9\x5\x228\x115"+
		"\x2\x4B8\x4B4\x3\x2\x2\x2\x4B8\x4B5\x3\x2\x2\x2\x4B8\x4B6\x3\x2\x2\x2"+
		"\x4B8\x4B7\x3\x2\x2\x2\x4B9\a\x3\x2\x2\x2\x4BA\x4BC\x5\n\x6\x2\x4BB\x4BD"+
		"\a\x463\x2\x2\x4BC\x4BB\x3\x2\x2\x2\x4BC\x4BD\x3\x2\x2\x2\x4BD\x4D8\x3"+
		"\x2\x2\x2\x4BE\x4C0\x5\x10\t\x2\x4BF\x4C1\a\x463\x2\x2\x4C0\x4BF\x3\x2"+
		"\x2\x2\x4C0\x4C1\x3\x2\x2\x2\x4C1\x4D8\x3\x2\x2\x2\x4C2\x4C4\x5\x32\x1A"+
		"\x2\x4C3\x4C5\a\x463\x2\x2\x4C4\x4C3\x3\x2\x2\x2\x4C4\x4C5\x3\x2\x2\x2"+
		"\x4C5\x4D8\x3\x2\x2\x2\x4C6\x4C8\x5\f\a\x2\x4C7\x4C9\a\x463\x2\x2\x4C8"+
		"\x4C7\x3\x2\x2\x2\x4C8\x4C9\x3\x2\x2\x2\x4C9\x4D8\x3\x2\x2\x2\x4CA\x4CC"+
		"\x5\x328\x195\x2\x4CB\x4CD\a\x463\x2\x2\x4CC\x4CB\x3\x2\x2\x2\x4CC\x4CD"+
		"\x3\x2\x2\x2\x4CD\x4D8\x3\x2\x2\x2\x4CE\x4D0\x5\x1E2\xF2\x2\x4CF\x4D1"+
		"\a\x463\x2\x2\x4D0\x4CF\x3\x2\x2\x2\x4D0\x4D1\x3\x2\x2\x2\x4D1\x4D8\x3"+
		"\x2\x2\x2\x4D2\x4D4\x5\xE\b\x2\x4D3\x4D5\a\x463\x2\x2\x4D4\x4D3\x3\x2"+
		"\x2\x2\x4D4\x4D5\x3\x2\x2\x2\x4D5\x4D8\x3\x2\x2\x2\x4D6\x4D8\a\x463\x2"+
		"\x2\x4D7\x4BA\x3\x2\x2\x2\x4D7\x4BE\x3\x2\x2\x2\x4D7\x4C2\x3\x2\x2\x2"+
		"\x4D7\x4C6\x3\x2\x2\x2\x4D7\x4CA\x3\x2\x2\x2\x4D7\x4CE\x3\x2\x2\x2\x4D7"+
		"\x4D2\x3\x2\x2\x2\x4D7\x4D6\x3\x2\x2\x2\x4D8\t\x3\x2\x2\x2\x4D9\x4DF\x5"+
		"\x1D2\xEA\x2\x4DA\x4DF\x5\x1DA\xEE\x2\x4DB\x4DF\x5\x1DE\xF0\x2\x4DC\x4DF"+
		"\x5\x1E4\xF3\x2\x4DD\x4DF\x5\x1EA\xF6\x2\x4DE\x4D9\x3\x2\x2\x2\x4DE\x4DA"+
		"\x3\x2\x2\x2\x4DE\x4DB\x3\x2\x2\x2\x4DE\x4DC\x3\x2\x2\x2\x4DE\x4DD\x3"+
		"\x2\x2\x2\x4DF\v\x3\x2\x2\x2\x4E0\x582\x5\x34\x1B\x2\x4E1\x582\x5> \x2"+
		"\x4E2\x582\x5x=\x2\x4E3\x582\x5\x86\x44\x2\x4E4\x582\x5\x92J\x2\x4E5\x582"+
		"\x5\x94K\x2\x4E6\x582\x5\x90I\x2\x4E7\x582\x5\xA2R\x2\x4E8\x582\x5\xB0"+
		"Y\x2\x4E9\x582\x5\xB2Z\x2\x4EA\x582\x5\x120\x91\x2\x4EB\x582\x5\x124\x93"+
		"\x2\x4EC\x582\x5\x232\x11A\x2\x4ED\x582\x5\x17A\xBE\x2\x4EE\x582\x5\x24A"+
		"\x126\x2\x4EF\x582\x5\x132\x9A\x2\x4F0\x582\x5\x13A\x9E\x2\x4F1\x582\x5"+
		"\x13C\x9F\x2\x4F2\x582\x5\x140\xA1\x2\x4F3\x582\x5\x144\xA3\x2\x4F4\x582"+
		"\x5\x148\xA5\x2\x4F5\x582\x5\x1F4\xFB\x2\x4F6\x582\x5\x150\xA9\x2\x4F7"+
		"\x582\x5\x154\xAB\x2\x4F8\x582\x5\x14C\xA7\x2\x4F9\x582\x5\x15C\xAF\x2"+
		"\x4FA\x582\x5\x158\xAD\x2\x4FB\x582\x5\x160\xB1\x2\x4FC\x582\x5\x162\xB2"+
		"\x2\x4FD\x582\x5\x164\xB3\x2\x4FE\x582\x5\x166\xB4\x2\x4FF\x582\x5\x16C"+
		"\xB7\x2\x500\x582\x5\x18A\xC6\x2\x501\x582\x5\x184\xC3\x2\x502\x582\x5"+
		"\x190\xC9\x2\x503\x582\x5\x194\xCB\x2\x504\x582\x5\x198\xCD\x2\x505\x582"+
		"\x5\x19C\xCF\x2\x506\x582\x5\x19E\xD0\x2\x507\x582\x5\x1A2\xD2\x2\x508"+
		"\x582\x5\x1A4\xD3\x2\x509\x582\x5\x1AA\xD6\x2\x50A\x582\x5\x1AC\xD7\x2"+
		"\x50B\x582\x5\x22C\x117\x2\x50C\x582\x5\x1B0\xD9\x2\x50D\x582\x5\x1B6"+
		"\xDC\x2\x50E\x582\x5\x1B8\xDD\x2\x50F\x582\x5\x38\x1D\x2\x510\x582\x5"+
		"t;\x2\x511\x582\x5\x82\x42\x2\x512\x582\x5\xB4[\x2\x513\x582\x5\x11E\x90"+
		"\x2\x514\x582\x5\x122\x92\x2\x515\x582\x5\x126\x94\x2\x516\x582\x5\x1F0"+
		"\xF9\x2\x517\x582\x5\x17E\xC0\x2\x518\x582\x5\x130\x99\x2\x519\x582\x5"+
		"\x13E\xA0\x2\x51A\x582\x5\x142\xA2\x2\x51B\x582\x5\x146\xA4\x2\x51C\x582"+
		"\x5\x14A\xA6\x2\x51D\x582\x5\x1F2\xFA\x2\x51E\x582\x5\x1F8\xFD\x2\x51F"+
		"\x582\x5\x1FA\xFE\x2\x520\x582\x5\x152\xAA\x2\x521\x582\x5\x156\xAC\x2"+
		"\x522\x582\x5\x14E\xA8\x2\x523\x582\x5\x15E\xB0\x2\x524\x582\x5\x15A\xAE"+
		"\x2\x525\x582\x5\xACW\x2\x526\x582\x5\x168\xB5\x2\x527\x582\x5\x16A\xB6"+
		"\x2\x528\x582\x5\x180\xC1\x2\x529\x582\x5\x182\xC2\x2\x52A\x582\x5\x186"+
		"\xC4\x2\x52B\x582\x5\x188\xC5\x2\x52C\x582\x5\x18C\xC7\x2\x52D\x582\x5"+
		"\x18E\xC8\x2\x52E\x582\x5\x192\xCA\x2\x52F\x582\x5\x196\xCC\x2\x530\x582"+
		"\x5\x19A\xCE\x2\x531\x582\x5\x1A0\xD1\x2\x532\x582\x5\x1A8\xD5\x2\x533"+
		"\x582\x5\x21E\x110\x2\x534\x582\x5\x1AE\xD8\x2\x535\x582\x5\x222\x112"+
		"\x2\x536\x582\x5\x29C\x14F\x2\x537\x582\x5\x1B2\xDA\x2\x538\x582\x5\x1B4"+
		"\xDB\x2\x539\x582\x5\x1BA\xDE\x2\x53A\x582\x5\x1FC\xFF\x2\x53B\x582\x5"+
		"\x1BC\xDF\x2\x53C\x582\x5\x1BE\xE0\x2\x53D\x582\x5\x1C0\xE1\x2\x53E\x582"+
		"\x5:\x1E\x2\x53F\x582\x5<\x1F\x2\x540\x582\x5v<\x2\x541\x582\x5\x84\x43"+
		"\x2\x542\x582\x5\xA0Q\x2\x543\x582\x5\xAEX\x2\x544\x582\x5\xB6\\\x2\x545"+
		"\x582\x5\xB8]\x2\x546\x582\x5\xBA^\x2\x547\x582\x5\xBC_\x2\x548\x582\x5"+
		"\xBE`\x2\x549\x582\x5\xC0\x61\x2\x54A\x582\x5\xC2\x62\x2\x54B\x582\x5"+
		"\xC4\x63\x2\x54C\x582\x5\xC6\x64\x2\x54D\x582\x5\xC8\x65\x2\x54E\x582"+
		"\x5\xF2z\x2\x54F\x582\x5\xCA\x66\x2\x550\x582\x5\xCCg\x2\x551\x582\x5"+
		"\xD8m\x2\x552\x582\x5\xDAn\x2\x553\x582\x5\xCEh\x2\x554\x582\x5\xD0i\x2"+
		"\x555\x582\x5\xD2j\x2\x556\x582\x5\xD4k\x2\x557\x582\x5\xD6l\x2\x558\x582"+
		"\x5\xDCo\x2\x559\x582\x5\xDEp\x2\x55A\x582\x5\xE0q\x2\x55B\x582\x5\x294"+
		"\x14B\x2\x55C\x582\x5\x286\x144\x2\x55D\x582\x5\xE2r\x2\x55E\x582\x5\xE4"+
		"s\x2\x55F\x582\x5\xE6t\x2\x560\x582\x5\xE8u\x2\x561\x582\x5\xEAv\x2\x562"+
		"\x582\x5\x28C\x147\x2\x563\x582\x5\xECw\x2\x564\x582\x5\xEEx\x2\x565\x582"+
		"\x5\xF0y\x2\x566\x582\x5\xF4{\x2\x567\x582\x5\xF6|\x2\x568\x582\x5\xF8"+
		"}\x2\x569\x582\x5\xFA~\x2\x56A\x582\x5\xFC\x7F\x2\x56B\x582\x5\xFE\x80"+
		"\x2\x56C\x582\x5\x100\x81\x2\x56D\x582\x5\x102\x82\x2\x56E\x582\x5\x104"+
		"\x83\x2\x56F\x582\x5\x106\x84\x2\x570\x582\x5\x108\x85\x2\x571\x582\x5"+
		"\x296\x14C\x2\x572\x582\x5\x10A\x86\x2\x573\x582\x5\x10C\x87\x2\x574\x582"+
		"\x5\x10E\x88\x2\x575\x582\x5\x298\x14D\x2\x576\x582\x5\x28E\x148\x2\x577"+
		"\x582\x5\x29E\x150\x2\x578\x582\x5\x110\x89\x2\x579\x582\x5\x29A\x14E"+
		"\x2\x57A\x582\x5\x112\x8A\x2\x57B\x582\x5\x114\x8B\x2\x57C\x582\x5\x116"+
		"\x8C\x2\x57D\x582\x5\x118\x8D\x2\x57E\x582\x5\x11A\x8E\x2\x57F\x582\x5"+
		"\x11C\x8F\x2\x580\x582\x5\x220\x111\x2\x581\x4E0\x3\x2\x2\x2\x581\x4E1"+
		"\x3\x2\x2\x2\x581\x4E2\x3\x2\x2\x2\x581\x4E3\x3\x2\x2\x2\x581\x4E4\x3"+
		"\x2\x2\x2\x581\x4E5\x3\x2\x2\x2\x581\x4E6\x3\x2\x2\x2\x581\x4E7\x3\x2"+
		"\x2\x2\x581\x4E8\x3\x2\x2\x2\x581\x4E9\x3\x2\x2\x2\x581\x4EA\x3\x2\x2"+
		"\x2\x581\x4EB\x3\x2\x2\x2\x581\x4EC\x3\x2\x2\x2\x581\x4ED\x3\x2\x2\x2"+
		"\x581\x4EE\x3\x2\x2\x2\x581\x4EF\x3\x2\x2\x2\x581\x4F0\x3\x2\x2\x2\x581"+
		"\x4F1\x3\x2\x2\x2\x581\x4F2\x3\x2\x2\x2\x581\x4F3\x3\x2\x2\x2\x581\x4F4"+
		"\x3\x2\x2\x2\x581\x4F5\x3\x2\x2\x2\x581\x4F6\x3\x2\x2\x2\x581\x4F7\x3"+
		"\x2\x2\x2\x581\x4F8\x3\x2\x2\x2\x581\x4F9\x3\x2\x2\x2\x581\x4FA\x3\x2"+
		"\x2\x2\x581\x4FB\x3\x2\x2\x2\x581\x4FC\x3\x2\x2\x2\x581\x4FD\x3\x2\x2"+
		"\x2\x581\x4FE\x3\x2\x2\x2\x581\x4FF\x3\x2\x2\x2\x581\x500\x3\x2\x2\x2"+
		"\x581\x501\x3\x2\x2\x2\x581\x502\x3\x2\x2\x2\x581\x503\x3\x2\x2\x2\x581"+
		"\x504\x3\x2\x2\x2\x581\x505\x3\x2\x2\x2\x581\x506\x3\x2\x2\x2\x581\x507"+
		"\x3\x2\x2\x2\x581\x508\x3\x2\x2\x2\x581\x509\x3\x2\x2\x2\x581\x50A\x3"+
		"\x2\x2\x2\x581\x50B\x3\x2\x2\x2\x581\x50C\x3\x2\x2\x2\x581\x50D\x3\x2"+
		"\x2\x2\x581\x50E\x3\x2\x2\x2\x581\x50F\x3\x2\x2\x2\x581\x510\x3\x2\x2"+
		"\x2\x581\x511\x3\x2\x2\x2\x581\x512\x3\x2\x2\x2\x581\x513\x3\x2\x2\x2"+
		"\x581\x514\x3\x2\x2\x2\x581\x515\x3\x2\x2\x2\x581\x516\x3\x2\x2\x2\x581"+
		"\x517\x3\x2\x2\x2\x581\x518\x3\x2\x2\x2\x581\x519\x3\x2\x2\x2\x581\x51A"+
		"\x3\x2\x2\x2\x581\x51B\x3\x2\x2\x2\x581\x51C\x3\x2\x2\x2\x581\x51D\x3"+
		"\x2\x2\x2\x581\x51E\x3\x2\x2\x2\x581\x51F\x3\x2\x2\x2\x581\x520\x3\x2"+
		"\x2\x2\x581\x521\x3\x2\x2\x2\x581\x522\x3\x2\x2\x2\x581\x523\x3\x2\x2"+
		"\x2\x581\x524\x3\x2\x2\x2\x581\x525\x3\x2\x2\x2\x581\x526\x3\x2\x2\x2"+
		"\x581\x527\x3\x2\x2\x2\x581\x528\x3\x2\x2\x2\x581\x529\x3\x2\x2\x2\x581"+
		"\x52A\x3\x2\x2\x2\x581\x52B\x3\x2\x2\x2\x581\x52C\x3\x2\x2\x2\x581\x52D"+
		"\x3\x2\x2\x2\x581\x52E\x3\x2\x2\x2\x581\x52F\x3\x2\x2\x2\x581\x530\x3"+
		"\x2\x2\x2\x581\x531\x3\x2\x2\x2\x581\x532\x3\x2\x2\x2\x581\x533\x3\x2"+
		"\x2\x2\x581\x534\x3\x2\x2\x2\x581\x535\x3\x2\x2\x2\x581\x536\x3\x2\x2"+
		"\x2\x581\x537\x3\x2\x2\x2\x581\x538\x3\x2\x2\x2\x581\x539\x3\x2\x2\x2"+
		"\x581\x53A\x3\x2\x2\x2\x581\x53B\x3\x2\x2\x2\x581\x53C\x3\x2\x2\x2\x581"+
		"\x53D\x3\x2\x2\x2\x581\x53E\x3\x2\x2\x2\x581\x53F\x3\x2\x2\x2\x581\x540"+
		"\x3\x2\x2\x2\x581\x541\x3\x2\x2\x2\x581\x542\x3\x2\x2\x2\x581\x543\x3"+
		"\x2\x2\x2\x581\x544\x3\x2\x2\x2\x581\x545\x3\x2\x2\x2\x581\x546\x3\x2"+
		"\x2\x2\x581\x547\x3\x2\x2\x2\x581\x548\x3\x2\x2\x2\x581\x549\x3\x2\x2"+
		"\x2\x581\x54A\x3\x2\x2\x2\x581\x54B\x3\x2\x2\x2\x581\x54C\x3\x2\x2\x2"+
		"\x581\x54D\x3\x2\x2\x2\x581\x54E\x3\x2\x2\x2\x581\x54F\x3\x2\x2\x2\x581"+
		"\x550\x3\x2\x2\x2\x581\x551\x3\x2\x2\x2\x581\x552\x3\x2\x2\x2\x581\x553"+
		"\x3\x2\x2\x2\x581\x554\x3\x2\x2\x2\x581\x555\x3\x2\x2\x2\x581\x556\x3"+
		"\x2\x2\x2\x581\x557\x3\x2\x2\x2\x581\x558\x3\x2\x2\x2\x581\x559\x3\x2"+
		"\x2\x2\x581\x55A\x3\x2\x2\x2\x581\x55B\x3\x2\x2\x2\x581\x55C\x3\x2\x2"+
		"\x2\x581\x55D\x3\x2\x2\x2\x581\x55E\x3\x2\x2\x2\x581\x55F\x3\x2\x2\x2"+
		"\x581\x560\x3\x2\x2\x2\x581\x561\x3\x2\x2\x2\x581\x562\x3\x2\x2\x2\x581"+
		"\x563\x3\x2\x2\x2\x581\x564\x3\x2\x2\x2\x581\x565\x3\x2\x2\x2\x581\x566"+
		"\x3\x2\x2\x2\x581\x567\x3\x2\x2\x2\x581\x568\x3\x2\x2\x2\x581\x569\x3"+
		"\x2\x2\x2\x581\x56A\x3\x2\x2\x2\x581\x56B\x3\x2\x2\x2\x581\x56C\x3\x2"+
		"\x2\x2\x581\x56D\x3\x2\x2\x2\x581\x56E\x3\x2\x2\x2\x581\x56F\x3\x2\x2"+
		"\x2\x581\x570\x3\x2\x2\x2\x581\x571\x3\x2\x2\x2\x581\x572\x3\x2\x2\x2"+
		"\x581\x573\x3\x2\x2\x2\x581\x574\x3\x2\x2\x2\x581\x575\x3\x2\x2\x2\x581"+
		"\x576\x3\x2\x2\x2\x581\x577\x3\x2\x2\x2\x581\x578\x3\x2\x2\x2\x581\x579"+
		"\x3\x2\x2\x2\x581\x57A\x3\x2\x2\x2\x581\x57B\x3\x2\x2\x2\x581\x57C\x3"+
		"\x2\x2\x2\x581\x57D\x3\x2\x2\x2\x581\x57E\x3\x2\x2\x2\x581\x57F\x3\x2"+
		"\x2\x2\x581\x580\x3\x2\x2\x2\x582\r\x3\x2\x2\x2\x583\x589\x5\x2AC\x157"+
		"\x2\x584\x589\x5\x2AE\x158\x2\x585\x589\x5\x2B0\x159\x2\x586\x589\x5\x2B2"+
		"\x15A\x2\x587\x589\x5\x2B4\x15B\x2\x588\x583\x3\x2\x2\x2\x588\x584\x3"+
		"\x2\x2\x2\x588\x585\x3\x2\x2\x2\x588\x586\x3\x2\x2\x2\x588\x587\x3\x2"+
		"\x2\x2\x589\xF\x3\x2\x2\x2\x58A\x597\x5\x12\n\x2\x58B\x597\x5\x14\v\x2"+
		"\x58C\x597\x5\x16\f\x2\x58D\x597\x5\x18\r\x2\x58E\x597\x5\x1C\xF\x2\x58F"+
		"\x597\x5,\x17\x2\x590\x597\x5.\x18\x2\x591\x597\x5\x1A\xE\x2\x592\x597"+
		"\x5\x1E\x10\x2\x593\x597\x5&\x14\x2\x594\x597\x5(\x15\x2\x595\x597\x5"+
		"*\x16\x2\x596\x58A\x3\x2\x2\x2\x596\x58B\x3\x2\x2\x2\x596\x58C\x3\x2\x2"+
		"\x2\x596\x58D\x3\x2\x2\x2\x596\x58E\x3\x2\x2\x2\x596\x58F\x3\x2\x2\x2"+
		"\x596\x590\x3\x2\x2\x2\x596\x591\x3\x2\x2\x2\x596\x592\x3\x2\x2\x2\x596"+
		"\x593\x3\x2\x2\x2\x596\x594\x3\x2\x2\x2\x596\x595\x3\x2\x2\x2\x597\x11"+
		"\x3\x2\x2\x2\x598\x59A\a\\\x2\x2\x599\x59B\a\x463\x2\x2\x59A\x599\x3\x2"+
		"\x2\x2\x59A\x59B\x3\x2\x2\x2\x59B\x59F\x3\x2\x2\x2\x59C\x59E\x5\b\x5\x2"+
		"\x59D\x59C\x3\x2\x2\x2\x59E\x5A1\x3\x2\x2\x2\x59F\x59D\x3\x2\x2\x2\x59F"+
		"\x5A0\x3\x2\x2\x2\x5A0\x5A2\x3\x2\x2\x2\x5A1\x59F\x3\x2\x2\x2\x5A2\x5A4"+
		"\a\x12D\x2\x2\x5A3\x5A5\a\x463\x2\x2\x5A4\x5A3\x3\x2\x2\x2\x5A4\x5A5\x3"+
		"\x2\x2\x2\x5A5\x13\x3\x2\x2\x2\x5A6\x5A8\ai\x2\x2\x5A7\x5A9\a\x463\x2"+
		"\x2\x5A8\x5A7\x3\x2\x2\x2\x5A8\x5A9\x3\x2\x2\x2\x5A9\x15\x3\x2\x2\x2\x5AA"+
		"\x5AC\a\xBC\x2\x2\x5AB\x5AD\a\x463\x2\x2\x5AC\x5AB\x3\x2\x2\x2\x5AC\x5AD"+
		"\x3\x2\x2\x2\x5AD\x17\x3\x2\x2\x2\x5AE\x5AF\a\x194\x2\x2\x5AF\x5B1\x5"+
		"\x47A\x23E\x2\x5B0\x5B2\a\x463\x2\x2\x5B1\x5B0\x3\x2\x2\x2\x5B1\x5B2\x3"+
		"\x2\x2\x2\x5B2\x5B9\x3\x2\x2\x2\x5B3\x5B4\x5\x47A\x23E\x2\x5B4\x5B6\a"+
		"\x464\x2\x2\x5B5\x5B7\a\x463\x2\x2\x5B6\x5B5\x3\x2\x2\x2\x5B6\x5B7\x3"+
		"\x2\x2\x2\x5B7\x5B9\x3\x2\x2\x2\x5B8\x5AE\x3\x2\x2\x2\x5B8\x5B3\x3\x2"+
		"\x2\x2\x5B9\x19\x3\x2\x2\x2\x5BA\x5BC\a\x331\x2\x2\x5BB\x5BD\x5\x35A\x1AE"+
		"\x2\x5BC\x5BB\x3\x2\x2\x2\x5BC\x5BD\x3\x2\x2\x2\x5BD\x5BF\x3\x2\x2\x2"+
		"\x5BE\x5C0\a\x463\x2\x2\x5BF\x5BE\x3\x2\x2\x2\x5BF\x5C0\x3\x2\x2\x2\x5C0"+
		"\x1B\x3\x2\x2\x2\x5C1\x5C2\a\x1B4\x2\x2\x5C2\x5C3\x5\x372\x1BA\x2\x5C3"+
		"\x5C6\x5\b\x5\x2\x5C4\x5C5\a\x123\x2\x2\x5C5\x5C7\x5\b\x5\x2\x5C6\x5C4"+
		"\x3\x2\x2\x2\x5C6\x5C7\x3\x2\x2\x2\x5C7\x5C9\x3\x2\x2\x2\x5C8\x5CA\a\x463"+
		"\x2\x2\x5C9\x5C8\x3\x2\x2\x2\x5C9\x5CA\x3\x2\x2\x2\x5CA\x1D\x3\x2\x2\x2"+
		"\x5CB\x5D2\a\x3D9\x2\x2\x5CC\x5CD\x5 \x11\x2\x5CD\x5CE\a\x462\x2\x2\x5CE"+
		"\x5CF\x5\"\x12\x2\x5CF\x5D0\a\x462\x2\x2\x5D0\x5D1\x5$\x13\x2\x5D1\x5D3"+
		"\x3\x2\x2\x2\x5D2\x5CC\x3\x2\x2\x2\x5D2\x5D3\x3\x2\x2\x2\x5D3\x5D5\x3"+
		"\x2\x2\x2\x5D4\x5D6\a\x463\x2\x2\x5D5\x5D4\x3\x2\x2\x2\x5D5\x5D6\x3\x2"+
		"\x2\x2\x5D6\x1F\x3\x2\x2\x2\x5D7\x5D8\t\x2\x2\x2\x5D8!\x3\x2\x2\x2\x5D9"+
		"\x5DA\t\x3\x2\x2\x5DA#\x3\x2\x2\x2\x5DB\x5DC\t\x2\x2\x2\x5DC%\x3\x2\x2"+
		"\x2\x5DD\x5DE\a\\\x2\x2\x5DE\x5E0\a\x3F2\x2\x2\x5DF\x5E1\a\x463\x2\x2"+
		"\x5E0\x5DF\x3\x2\x2\x2\x5E0\x5E1\x3\x2\x2\x2\x5E1\x5E3\x3\x2\x2\x2\x5E2"+
		"\x5E4\x5\b\x5\x2\x5E3\x5E2\x3\x2\x2\x2\x5E4\x5E5\x3\x2\x2\x2\x5E5\x5E3"+
		"\x3\x2\x2\x2\x5E5\x5E6\x3\x2\x2\x2\x5E6\x5E7\x3\x2\x2\x2\x5E7\x5E8\a\x12D"+
		"\x2\x2\x5E8\x5EA\a\x3F2\x2\x2\x5E9\x5EB\a\x463\x2\x2\x5EA\x5E9\x3\x2\x2"+
		"\x2\x5EA\x5EB\x3\x2\x2\x2\x5EB\x5EC\x3\x2\x2\x2\x5EC\x5ED\a\\\x2\x2\x5ED"+
		"\x5EF\a{\x2\x2\x5EE\x5F0\a\x463\x2\x2\x5EF\x5EE\x3\x2\x2\x2\x5EF\x5F0"+
		"\x3\x2\x2\x2\x5F0\x5F4\x3\x2\x2\x2\x5F1\x5F3\x5\b\x5\x2\x5F2\x5F1\x3\x2"+
		"\x2\x2\x5F3\x5F6\x3\x2\x2\x2\x5F4\x5F2\x3\x2\x2\x2\x5F4\x5F5\x3\x2\x2"+
		"\x2\x5F5\x5F7\x3\x2\x2\x2\x5F6\x5F4\x3\x2\x2\x2\x5F7\x5F8\a\x12D\x2\x2"+
		"\x5F8\x5FA\a{\x2\x2\x5F9\x5FB\a\x463\x2\x2\x5FA\x5F9\x3\x2\x2\x2\x5FA"+
		"\x5FB\x3\x2\x2\x2\x5FB\'\x3\x2\x2\x2\x5FC\x5FE\a\x424\x2\x2\x5FD\x5FF"+
		"\x5\x1E2\xF2\x2\x5FE\x5FD\x3\x2\x2\x2\x5FE\x5FF\x3\x2\x2\x2\x5FF\x601"+
		"\x3\x2\x2\x2\x600\x602\a\x462\x2\x2\x601\x600\x3\x2\x2\x2\x601\x602\x3"+
		"\x2\x2\x2\x602\x605\x3\x2\x2\x2\x603\x604\t\x4\x2\x2\x604\x606\x5\x1E8"+
		"\xF5\x2\x605\x603\x3\x2\x2\x2\x605\x606\x3\x2\x2\x2\x606\x608\x3\x2\x2"+
		"\x2\x607\x609\x5\x35A\x1AE\x2\x608\x607\x3\x2\x2\x2\x608\x609\x3\x2\x2"+
		"\x2\x609\x60B\x3\x2\x2\x2\x60A\x60C\a\x463\x2\x2\x60B\x60A\x3\x2\x2\x2"+
		"\x60B\x60C\x3\x2\x2\x2\x60C)\x3\x2\x2\x2\x60D\x60E\a\x429\x2\x2\x60E\x618"+
		"\x5\x372\x1BA\x2\x60F\x619\x5\b\x5\x2\x610\x612\ai\x2\x2\x611\x613\a\x463"+
		"\x2\x2\x612\x611\x3\x2\x2\x2\x612\x613\x3\x2\x2\x2\x613\x619\x3\x2\x2"+
		"\x2\x614\x616\a\xBC\x2\x2\x615\x617\a\x463\x2\x2\x616\x615\x3\x2\x2\x2"+
		"\x616\x617\x3\x2\x2\x2\x617\x619\x3\x2\x2\x2\x618\x60F\x3\x2\x2\x2\x618"+
		"\x610\x3\x2\x2\x2\x618\x614\x3\x2\x2\x2\x619+\x3\x2\x2\x2\x61A\x61D\a"+
		"\x2D3\x2\x2\x61B\x61E\x5\x35A\x1AE\x2\x61C\x61E\a\x442\x2\x2\x61D\x61B"+
		"\x3\x2\x2\x2\x61D\x61C\x3\x2\x2\x2\x61E\x623\x3\x2\x2\x2\x61F\x620\a\x462"+
		"\x2\x2\x620\x622\a\x445\x2\x2\x621\x61F\x3\x2\x2\x2\x622\x625\x3\x2\x2"+
		"\x2\x623\x621\x3\x2\x2\x2\x623\x624\x3\x2\x2\x2\x624\x627\x3\x2\x2\x2"+
		"\x625\x623\x3\x2\x2\x2\x626\x628\a\x463\x2\x2\x627\x626\x3\x2\x2\x2\x627"+
		"\x628\x3\x2\x2\x2\x628-\x3\x2\x2\x2\x629\x62A\a\x2F0\x2\x2\x62A\x62B\a"+
		"\x45E\x2\x2\x62B\x62C\t\x5\x2\x2\x62C\x62D\a\x462\x2\x2\x62D\x62E\x5\x358"+
		"\x1AD\x2\x62E\x62F\a\x462\x2\x2\x62F\x634\x5\x358\x1AD\x2\x630\x631\a"+
		"\x462\x2\x2\x631\x633\x5\x358\x1AD\x2\x632\x630\x3\x2\x2\x2\x633\x636"+
		"\x3\x2\x2\x2\x634\x632\x3\x2\x2\x2\x634\x635\x3\x2\x2\x2\x635\x637\x3"+
		"\x2\x2\x2\x636\x634\x3\x2\x2\x2\x637\x63A\a\x45F\x2\x2\x638\x639\a\x42B"+
		"\x2\x2\x639\x63B\t\x6\x2\x2\x63A\x638\x3\x2\x2\x2\x63A\x63B\x3\x2\x2\x2"+
		"\x63B\x63D\x3\x2\x2\x2\x63C\x63E\a\x463\x2\x2\x63D\x63C\x3\x2\x2\x2\x63D"+
		"\x63E\x3\x2\x2\x2\x63E\x64A\x3\x2\x2\x2\x63F\x640\a\x2F0\x2\x2\x640\x641"+
		"\a\x446\x2\x2\x641\x646\t\a\x2\x2\x642\x643\a\x462\x2\x2\x643\x645\t\x5"+
		"\x2\x2\x644\x642\x3\x2\x2\x2\x645\x648\x3\x2\x2\x2\x646\x644\x3\x2\x2"+
		"\x2\x646\x647\x3\x2\x2\x2\x647\x64A\x3\x2\x2\x2\x648\x646\x3\x2\x2\x2"+
		"\x649\x629\x3\x2\x2\x2\x649\x63F\x3\x2\x2\x2\x64A/\x3\x2\x2\x2\x64B\x64C"+
		"\a\x463\x2\x2\x64C\x31\x3\x2\x2\x2\x64D\x65F\x5\x2A6\x154\x2\x64E\x65F"+
		"\x5\x2BE\x160\x2\x64F\x65F\x5\x2AA\x156\x2\x650\x65F\x5\x1CE\xE8\x2\x651"+
		"\x65F\x5\x1CC\xE7\x2\x652\x65F\x5\x1C2\xE2\x2\x653\x65F\x5\x1C6\xE4\x2"+
		"\x654\x65F\x5\x2B6\x15C\x2\x655\x65F\x5\x1D0\xE9\x2\x656\x65F\x5\x2CE"+
		"\x168\x2\x657\x65F\x5\x2EC\x177\x2\x658\x65F\x5\x2EE\x178\x2\x659\x65F"+
		"\x5\x2F4\x17B\x2\x65A\x65F\x5\x2F6\x17C\x2\x65B\x65F\x5\x2F8\x17D\x2\x65C"+
		"\x65F\x5\x2FA\x17E\x2\x65D\x65F\x5\x2FC\x17F\x2\x65E\x64D\x3\x2\x2\x2"+
		"\x65E\x64E\x3\x2\x2\x2\x65E\x64F\x3\x2\x2\x2\x65E\x650\x3\x2\x2\x2\x65E"+
		"\x651\x3\x2\x2\x2\x65E\x652\x3\x2\x2\x2\x65E\x653\x3\x2\x2\x2\x65E\x654"+
		"\x3\x2\x2\x2\x65E\x655\x3\x2\x2\x2\x65E\x656\x3\x2\x2\x2\x65E\x657\x3"+
		"\x2\x2\x2\x65E\x658\x3\x2\x2\x2\x65E\x659\x3\x2\x2\x2\x65E\x65A\x3\x2"+
		"\x2\x2\x65E\x65B\x3\x2\x2\x2\x65E\x65C\x3\x2\x2\x2\x65E\x65D\x3\x2\x2"+
		"\x2\x65F\x33\x3\x2\x2\x2\x660\x661\a%\x2\x2\x661\x662\a\x32\x2\x2\x662"+
		"\x663\a\x339\x2\x2\x663\x664\x5\x47A\x23E\x2\x664\x66B\a\x42B\x2\x2\x665"+
		"\x667\a\x462\x2\x2\x666\x665\x3\x2\x2\x2\x666\x667\x3\x2\x2\x2\x667\x668"+
		"\x3\x2\x2\x2\x668\x669\a\x24D\x2\x2\x669\x66A\a\x44C\x2\x2\x66A\x66C\x5"+
		"\x47A\x23E\x2\x66B\x666\x3\x2\x2\x2\x66B\x66C\x3\x2\x2\x2\x66C\x673\x3"+
		"\x2\x2\x2\x66D\x66F\a\x462\x2\x2\x66E\x66D\x3\x2\x2\x2\x66E\x66F\x3\x2"+
		"\x2\x2\x66F\x670\x3\x2\x2\x2\x670\x671\a\x2B6\x2\x2\x671\x672\a\x44C\x2"+
		"\x2\x672\x674\a\x448\x2\x2\x673\x66E\x3\x2\x2\x2\x673\x674\x3\x2\x2\x2"+
		"\x674\x67B\x3\x2\x2\x2\x675\x677\a\x462\x2\x2\x676\x675\x3\x2\x2\x2\x676"+
		"\x677\x3\x2\x2\x2\x677\x678\x3\x2\x2\x2\x678\x679\a\xFC\x2\x2\x679\x67A"+
		"\a\x44C\x2\x2\x67A\x67C\x5\x47A\x23E\x2\x67B\x676\x3\x2\x2\x2\x67B\x67C"+
		"\x3\x2\x2\x2\x67C\x35\x3\x2\x2\x2\x67D\x67E\a%\x2\x2\x67E\x67F\a\x436"+
		"\x2\x2\x67F\x680\a\x351\x2\x2\x680\x684\a\x9C\x2\x2\x681\x682\x5\x47A"+
		"\x23E\x2\x682\x683\a\x459\x2\x2\x683\x685\x3\x2\x2\x2\x684\x681\x3\x2"+
		"\x2\x2\x684\x685\x3\x2\x2\x2\x685\x686\x3\x2\x2\x2\x686\x687\x5\x47A\x23E"+
		"\x2\x687\x688\a\r\x2\x2\x688\x689\a\x448\x2\x2\x689\x37\x3\x2\x2\x2\x68A"+
		"\x68B\a\xC9\x2\x2\x68B\x68C\a\x32\x2\x2\x68C\x68D\a\x339\x2\x2\x68D\x68E"+
		"\x5\x47A\x23E\x2\x68E\x695\a\x42B\x2\x2\x68F\x691\a\x462\x2\x2\x690\x68F"+
		"\x3\x2\x2\x2\x690\x691\x3\x2\x2\x2\x691\x692\x3\x2\x2\x2\x692\x693\a\x2B6"+
		"\x2\x2\x693\x694\a\x44C\x2\x2\x694\x696\a\x448\x2\x2\x695\x690\x3\x2\x2"+
		"\x2\x695\x696\x3\x2\x2\x2\x696\x69D\x3\x2\x2\x2\x697\x699\a\x462\x2\x2"+
		"\x698\x697\x3\x2\x2\x2\x698\x699\x3\x2\x2\x2\x699\x69A\x3\x2\x2\x2\x69A"+
		"\x69B\a\xFC\x2\x2\x69B\x69C\a\x44C\x2\x2\x69C\x69E\x5\x47A\x23E\x2\x69D"+
		"\x698\x3\x2\x2\x2\x69D\x69E\x3\x2\x2\x2\x69E\x39\x3\x2\x2\x2\x69F\x6A0"+
		"\a\x11C\x2\x2\x6A0\x6A3\a\x16\x2\x2\x6A1\x6A2\a\x1B4\x2\x2\x6A2\x6A4\a"+
		"\x144\x2\x2\x6A3\x6A1\x3\x2\x2\x2\x6A3\x6A4\x3\x2\x2\x2\x6A4\x6A8\x3\x2"+
		"\x2\x2\x6A5\x6A6\x5\x47A\x23E\x2\x6A6\x6A7\a\x459\x2\x2\x6A7\x6A9\x3\x2"+
		"\x2\x2\x6A8\x6A5\x3\x2\x2\x2\x6A8\x6A9\x3\x2\x2\x2\x6A9\x6AA\x3\x2\x2"+
		"\x2\x6AA\x6AB\x5\x47A\x23E\x2\x6AB;\x3\x2\x2\x2\x6AC\x6AD\a\x11C\x2\x2"+
		"\x6AD\x6AE\a\x32\x2\x2\x6AE\x6AF\a\x339\x2\x2\x6AF\x6B0\x5\x47A\x23E\x2"+
		"\x6B0=\x3\x2\x2\x2\x6B1\x6B2\x5@!\x2\x6B2\x6B3\x5\x47A\x23E\x2\x6B3\x6B4"+
		"\x5\x42\"\x2\x6B4?\x3\x2\x2\x2\x6B5\x6B6\a%\x2\x2\x6B6\x6B7\a=\x2\x2\x6B7"+
		"\x41\x3\x2\x2\x2\x6B8\x6BA\x5\x44#\x2\x6B9\x6B8\x3\x2\x2\x2\x6B9\x6BA"+
		"\x3\x2\x2\x2\x6BA\x6BC\x3\x2\x2\x2\x6BB\x6BD\x5Z.\x2\x6BC\x6BB\x3\x2\x2"+
		"\x2\x6BC\x6BD\x3\x2\x2\x2\x6BD\x6BF\x3\x2\x2\x2\x6BE\x6C0\x5H%\x2\x6BF"+
		"\x6BE\x3\x2\x2\x2\x6BF\x6C0\x3\x2\x2\x2\x6C0\x6C2\x3\x2\x2\x2\x6C1\x6C3"+
		"\x5N(\x2\x6C2\x6C1\x3\x2\x2\x2\x6C2\x6C3\x3\x2\x2\x2\x6C3\x43\x3\x2\x2"+
		"\x2\x6C4\x6C7\x5\x46$\x2\x6C5\x6C8\x5^\x30\x2\x6C6\x6C8\x5V,\x2\x6C7\x6C5"+
		"\x3\x2\x2\x2\x6C7\x6C6\x3\x2\x2\x2\x6C8\x45\x3\x2\x2\x2\x6C9\x6CA\a\x17E"+
		"\x2\x2\x6CAG\x3\x2\x2\x2\x6CB\x6CC\x5L\'\x2\x6CC\x6CD\x5J&\x2\x6CDI\x3"+
		"\x2\x2\x2\x6CE\x6D1\a\x18\x2\x2\x6CF\x6D1\x5p\x39\x2\x6D0\x6CE\x3\x2\x2"+
		"\x2\x6D0\x6CF\x3\x2\x2\x2\x6D1K\x3\x2\x2\x2\x6D2\x6D3\a\x11C\x2\x2\x6D3"+
		"M\x3\x2\x2\x2\x6D4\x6D5\x5P)\x2\x6D5\x6D6\x5R*\x2\x6D6O\x3\x2\x2\x2\x6D7"+
		"\x6D8\a\r\x2\x2\x6D8\x6D9\a\x159\x2\x2\x6D9\x6DA\a\x17E\x2\x2\x6DAQ\x3"+
		"\x2\x2\x2\x6DB\x6DF\x5T+\x2\x6DC\x6DD\x5X-\x2\x6DD\x6DE\x5\x47A\x23E\x2"+
		"\x6DE\x6E0\x3\x2\x2\x2\x6DF\x6DC\x3\x2\x2\x2\x6DF\x6E0\x3\x2\x2\x2\x6E0"+
		"S\x3\x2\x2\x2\x6E1\x6E2\a\x448\x2\x2\x6E2U\x3\x2\x2\x2\x6E3\x6E4\x5X-"+
		"\x2\x6E4\x6E5\x5\x47A\x23E\x2\x6E5W\x3\x2\x2\x2\x6E6\x6E7\a:\x2\x2\x6E7"+
		"Y\x3\x2\x2\x2\x6E8\x6E9\x5\\/\x2\x6E9\x6EA\x5`\x31\x2\x6EA[\x3\x2\x2\x2"+
		"\x6EB\x6EC\a\x42B\x2\x2\x6EC]\x3\x2\x2\x2\x6ED\x6F1\x5\x62\x32\x2\x6EE"+
		"\x6F1\x5l\x37\x2\x6EF\x6F1\a\x448\x2\x2\x6F0\x6ED\x3\x2\x2\x2\x6F0\x6EE"+
		"\x3\x2\x2\x2\x6F0\x6EF\x3\x2\x2\x2\x6F1_\x3\x2\x2\x2\x6F2\x6F3\b\x31\x1"+
		"\x2\x6F3\x6F4\a\x2C0\x2\x2\x6F4\x6F5\a\x44C\x2\x2\x6F5\x6FC\t\b\x2\x2"+
		"\x6F6\x6F7\a\x422\x2\x2\x6F7\x6F8\a\x44C\x2\x2\x6F8\x6FC\x5\x454\x22B"+
		"\x2\x6F9\x6FA\a\x3FD\x2\x2\x6FA\x6FC\a\xDC\x2\x2\x6FB\x6F2\x3\x2\x2\x2"+
		"\x6FB\x6F6\x3\x2\x2\x2\x6FB\x6F9\x3\x2\x2\x2\x6FC\x701\x3\x2\x2\x2\x6FD"+
		"\x6FE\f\x3\x2\x2\x6FE\x700\a\x462\x2\x2\x6FF\x6FD\x3\x2\x2\x2\x700\x703"+
		"\x3\x2\x2\x2\x701\x6FF\x3\x2\x2\x2\x701\x702\x3\x2\x2\x2\x702\x61\x3\x2"+
		"\x2\x2\x703\x701\x3\x2\x2\x2\x704\x705\x5\x66\x34\x2\x705\x706\x5\x64"+
		"\x33\x2\x706\x707\x5h\x35\x2\x707\x63\x3\x2\x2\x2\x708\x709\x5\x47A\x23E"+
		"\x2\x709\x65\x3\x2\x2\x2\x70A\x70B\a\x11A\x2\x2\x70Bg\x3\x2\x2\x2\x70C"+
		"\x70D\x5j\x36\x2\x70D\x70E\x5h\x35\x2\x70E\x711\x3\x2\x2\x2\x70F\x711"+
		"\x5\x47A\x23E\x2\x710\x70C\x3\x2\x2\x2\x710\x70F\x3\x2\x2\x2\x711i\x3"+
		"\x2\x2\x2\x712\x713\aV\x2\x2\x713k\x3\x2\x2\x2\x714\x715\x5n\x38\x2\x715"+
		"\x716\x5h\x35\x2\x716m\x3\x2\x2\x2\x717\x718\a\x46F\x2\x2\x718o\x3\x2"+
		"\x2\x2\x719\x71A\x5r:\x2\x71A\x71B\x5l\x37\x2\x71B\x71C\a\x443\x2\x2\x71C"+
		"\x71D\a\x462\x2\x2\x71D\x720\x3\x2\x2\x2\x71E\x720\x5l\x37\x2\x71F\x719"+
		"\x3\x2\x2\x2\x71F\x71E\x3\x2\x2\x2\x720q\x3\x2\x2\x2\x721\x722\a\x443"+
		"\x2\x2\x722s\x3\x2\x2\x2\x723\x724\a\xC9\x2\x2\x724\x725\a=\x2\x2\x725"+
		"\x728\x5\x47A\x23E\x2\x726\x727\a\x46\x2\x2\x727\x729\x5\x47A\x23E\x2"+
		"\x728\x726\x3\x2\x2\x2\x728\x729\x3\x2\x2\x2\x729\x72A\x3\x2\x2\x2\x72A"+
		"\x72F\a\x17E\x2\x2\x72B\x72D\a\x462\x2\x2\x72C\x72B\x3\x2\x2\x2\x72C\x72D"+
		"\x3\x2\x2\x2\x72D\x72E\x3\x2\x2\x2\x72E\x730\t\t\x2\x2\x72F\x72C\x3\x2"+
		"\x2\x2\x730\x731\x3\x2\x2\x2\x731\x72F\x3\x2\x2\x2\x731\x732\x3\x2\x2"+
		"\x2\x732\x737\x3\x2\x2\x2\x733\x734\a\x42B\x2\x2\x734\x735\a\x2C0\x2\x2"+
		"\x735\x736\a\x44C\x2\x2\x736\x738\t\b\x2\x2\x737\x733\x3\x2\x2\x2\x737"+
		"\x738\x3\x2\x2\x2\x738u\x3\x2\x2\x2\x739\x73A\a\x11C\x2\x2\x73A\x73D\a"+
		"=\x2\x2\x73B\x73C\a\x1B4\x2\x2\x73C\x73E\a\x144\x2\x2\x73D\x73B\x3\x2"+
		"\x2\x2\x73D\x73E\x3\x2\x2\x2\x73E\x743\x3\x2\x2\x2\x73F\x741\a\x462\x2"+
		"\x2\x740\x73F\x3\x2\x2\x2\x740\x741\x3\x2\x2\x2\x741\x742\x3\x2\x2\x2"+
		"\x742\x744\x5\x47A\x23E\x2\x743\x740\x3\x2\x2\x2\x744\x745\x3\x2\x2\x2"+
		"\x745\x743\x3\x2\x2\x2\x745\x746\x3\x2\x2\x2\x746\x74A\x3\x2\x2\x2\x747"+
		"\x748\a\x42B\x2\x2\x748\x749\a\x259\x2\x2\x749\x74B\a\x104\x2\x2\x74A"+
		"\x747\x3\x2\x2\x2\x74A\x74B\x3\x2\x2\x2\x74Bw\x3\x2\x2\x2\x74C\x74D\x5"+
		"z>\x2\x74D\x752\x5\x47A\x23E\x2\x74E\x753\x5|?\x2\x74F\x750\a\x313\x2"+
		"\x2\x750\x751\a\x2D7\x2\x2\x751\x753\a\x1EE\x2\x2\x752\x74E\x3\x2\x2\x2"+
		"\x752\x74F\x3\x2\x2\x2\x753y\x3\x2\x2\x2\x754\x755\a%\x2\x2\x755\x756"+
		"\a?\x2\x2\x756\x757\a\x1EE\x2\x2\x757{\x3\x2\x2\x2\x758\x759\x5~@\x2\x759"+
		"\x75C\x5\x80\x41\x2\x75A\x75B\a\x462\x2\x2\x75B\x75D\x5\x80\x41\x2\x75C"+
		"\x75A\x3\x2\x2\x2\x75C\x75D\x3\x2\x2\x2\x75D\x75E\x3\x2\x2\x2\x75E\x75F"+
		"\a\x45F\x2\x2\x75F}\x3\x2\x2\x2\x760\x761\a\x42B\x2\x2\x761\x762\a\x2D7"+
		"\x2\x2\x762\x763\a\x1EE\x2\x2\x763\x764\a\x45E\x2\x2\x764\x7F\x3\x2\x2"+
		"\x2\x765\x766\a\xF6\x2\x2\x766\x767\aq\x2\x2\x767\x768\a\x2B6\x2\x2\x768"+
		"\x769\a\x44C\x2\x2\x769\x770\a\x448\x2\x2\x76A\x76B\a\x12B\x2\x2\x76B"+
		"\x76C\aq\x2\x2\x76C\x76D\a\x2B6\x2\x2\x76D\x76E\a\x44C\x2\x2\x76E\x770"+
		"\a\x448\x2\x2\x76F\x765\x3\x2\x2\x2\x76F\x76A\x3\x2\x2\x2\x770\x81\x3"+
		"\x2\x2\x2\x771\x772\a\xC9\x2\x2\x772\x773\a?\x2\x2\x773\x774\a\x1EE\x2"+
		"\x2\x774\x777\x5\x47A\x23E\x2\x775\x776\a\x46\x2\x2\x776\x778\x5\x47A"+
		"\x23E\x2\x777\x775\x3\x2\x2\x2\x777\x778\x3\x2\x2\x2\x778\x786\x3\x2\x2"+
		"\x2\x779\x784\a\x17E\x2\x2\x77A\x77B\a\x159\x2\x2\x77B\x77C\a\x44C\x2"+
		"\x2\x77C\x785\a\x448\x2\x2\x77D\x77E\a\x141\x2\x2\x77E\x77F\a\x44C\x2"+
		"\x2\x77F\x785\a\x448\x2\x2\x780\x781\a=\x2\x2\x781\x785\x5\x47A\x23E\x2"+
		"\x782\x783\a\x2E1\x2\x2\x783\x785\x5\x47A\x23E\x2\x784\x77A\x3\x2\x2\x2"+
		"\x784\x77D\x3\x2\x2\x2\x784\x780\x3\x2\x2\x2\x784\x782\x3\x2\x2\x2\x785"+
		"\x787\x3\x2\x2\x2\x786\x779\x3\x2\x2\x2\x786\x787\x3\x2\x2\x2\x787\x794"+
		"\x3\x2\x2\x2\x788\x792\a\x42B\x2\x2\x789\x78A\a\x17\x2\x2\x78A\x78B\a"+
		"\x44C\x2\x2\x78B\x793\t\n\x2\x2\x78C\x78D\a\x2E2\x2\x2\x78D\x78E\a\x44C"+
		"\x2\x2\x78E\x793\a\x448\x2\x2\x78F\x790\a\xCB\x2\x2\x790\x791\a\x44C\x2"+
		"\x2\x791\x793\t\v\x2\x2\x792\x789\x3\x2\x2\x2\x792\x78C\x3\x2\x2\x2\x792"+
		"\x78F\x3\x2\x2\x2\x793\x795\x3\x2\x2\x2\x794\x788\x3\x2\x2\x2\x794\x795"+
		"\x3\x2\x2\x2\x795\x79B\x3\x2\x2\x2\x796\x797\a\x12B\x2\x2\x797\x798\a"+
		"q\x2\x2\x798\x799\a\x2B6\x2\x2\x799\x79A\a\x44C\x2\x2\x79A\x79C\a\x448"+
		"\x2\x2\x79B\x796\x3\x2\x2\x2\x79B\x79C\x3\x2\x2\x2\x79C\x83\x3\x2\x2\x2"+
		"\x79D\x79E\a\x11C\x2\x2\x79E\x79F\a?\x2\x2\x79F\x7A0\a\x1EE\x2\x2\x7A0"+
		"\x7A4\x5\x47A\x23E\x2\x7A1\x7A2\a\x313\x2\x2\x7A2\x7A3\a\x2E1\x2\x2\x7A3"+
		"\x7A5\a\x1EE\x2\x2\x7A4\x7A1\x3\x2\x2\x2\x7A4\x7A5\x3\x2\x2\x2\x7A5\x85"+
		"\x3\x2\x2\x2\x7A6\x7AA\x5\x8EH\x2\x7A7\x7A8\x5\x96L\x2\x7A8\x7A9\x5\x8C"+
		"G\x2\x7A9\x7AB\x3\x2\x2\x2\x7AA\x7A7\x3\x2\x2\x2\x7AA\x7AB\x3\x2\x2\x2"+
		"\x7AB\x7AC\x3\x2\x2\x2\x7AC\x7AD\x5\x434\x21B\x2\x7AD\x7AE\x5\x8A\x46"+
		"\x2\x7AE\x7AF\x5\x88\x45\x2\x7AF\x87\x3\x2\x2\x2\x7B0\x7B4\x5\x47A\x23E"+
		"\x2\x7B1\x7B2\a\x351\x2\x2\x7B2\x7B4\a\x2A6\x2\x2\x7B3\x7B0\x3\x2\x2\x2"+
		"\x7B3\x7B1\x3\x2\x2\x2\x7B4\x89\x3\x2\x2\x2\x7B5\x7B6\a\x3DF\x2\x2\x7B6"+
		"\x8B\x3\x2\x2\x2\x7B7\x7B8\a\x465\x2\x2\x7B8\x8D\x3\x2\x2\x2\x7B9\x7BA"+
		"\a%\x2\x2\x7BA\x7BB\a\x46\x2\x2\x7BB\x7BC\a\x28D\x2\x2\x7BC\x8F\x3\x2"+
		"\x2\x2\x7BD\x7C1\x5\x8EH\x2\x7BE\x7BF\x5\x98M\x2\x7BF\x7C0\x5\x8CG\x2"+
		"\x7C0\x7C2\x3\x2\x2\x2\x7C1\x7BE\x3\x2\x2\x2\x7C1\x7C2\x3\x2\x2\x2\x7C2"+
		"\x7C3\x3\x2\x2\x2\x7C3\x7C4\x5\x434\x21B\x2\x7C4\x7C5\x5\x8A\x46\x2\x7C5"+
		"\x7C6\x5\x88\x45\x2\x7C6\x91\x3\x2\x2\x2\x7C7\x7CB\x5\x8EH\x2\x7C8\x7C9"+
		"\x5\x9AN\x2\x7C9\x7CA\x5\x8CG\x2\x7CA\x7CC\x3\x2\x2\x2\x7CB\x7C8\x3\x2"+
		"\x2\x2\x7CB\x7CC\x3\x2\x2\x2\x7CC\x7CD\x3\x2\x2\x2\x7CD\x7CE\x5\x436\x21C"+
		"\x2\x7CE\x7CF\x5\x8A\x46\x2\x7CF\x7D0\x5\x88\x45\x2\x7D0\x93\x3\x2\x2"+
		"\x2\x7D1\x7D5\x5\x8EH\x2\x7D2\x7D3\x5\x9CO\x2\x7D3\x7D4\x5\x8CG\x2\x7D4"+
		"\x7D6\x3\x2\x2\x2\x7D5\x7D2\x3\x2\x2\x2\x7D5\x7D6\x3\x2\x2\x2\x7D6\x7D7"+
		"\x3\x2\x2\x2\x7D7\x7D8\x5\x438\x21D\x2\x7D8\x7D9\x5\x8A\x46\x2\x7D9\x7DA"+
		"\x5\x88\x45\x2\x7DA\x95\x3\x2\x2\x2\x7DB\x7FE\a\x27F\x2\x2\x7DC\x7FE\a"+
		"=\x2\x2\x7DD\x7DE\a?\x2\x2\x7DE\x7FE\a\x1EE\x2\x2\x7DF\x7E0\aS\x2\x2\x7E0"+
		"\x7FE\a\x198\x2\x2\x7E1\x7FE\a}\x2\x2\x7E2\x7FE\a\xBE\x2\x2\x7E3\x7FE"+
		"\a\x3F7\x2\x2\x7E4\x7FE\a\xDD\x2\x2\x7E5\x7FE\a\x12E\x2\x2\x7E6\x7E7\a"+
		"\x181\x2\x2\x7E7\x7FE\ay\x2\x2\x7E8\x7E9\a\x181\x2\x2\x7E9\x7FE\a\x3B3"+
		"\x2\x2\x7EA\x7EB\a\x23A\x2\x2\x7EB\x7FE\a\x3F7\x2\x2\x7EC\x7ED\a\x310"+
		"\x2\x2\x7ED\x7EE\a\x373\x2\x2\x7EE\x7FE\a\x63\x2\x2\x7EF\x7FE\a\x339\x2"+
		"\x2\x7F0\x7FE\a\x33D\x2\x2\x7F1\x7FE\a\x351\x2\x2\x7F2\x7F3\a\x35B\x2"+
		"\x2\x7F3\x7F4\a\x2E0\x2\x2\x7F4\x7FE\a\x204\x2\x2\x7F5\x7F6\a\x371\x2"+
		"\x2\x7F6\x7FE\a\x339\x2\x2\x7F7\x7FE\a\x373\x2\x2\x7F8\x7F9\a\x3C6\x2"+
		"\x2\x7F9\x7FE\a\x1EE\x2\x2\x7FA\x7FB\a\x436\x2\x2\x7FB\x7FC\a\x351\x2"+
		"\x2\x7FC\x7FE\a\x9C\x2\x2\x7FD\x7DB\x3\x2\x2\x2\x7FD\x7DC\x3\x2\x2\x2"+
		"\x7FD\x7DD\x3\x2\x2\x2\x7FD\x7DF\x3\x2\x2\x2\x7FD\x7E1\x3\x2\x2\x2\x7FD"+
		"\x7E2\x3\x2\x2\x2\x7FD\x7E3\x3\x2\x2\x2\x7FD\x7E4\x3\x2\x2\x2\x7FD\x7E5"+
		"\x3\x2\x2\x2\x7FD\x7E6\x3\x2\x2\x2\x7FD\x7E8\x3\x2\x2\x2\x7FD\x7EA\x3"+
		"\x2\x2\x2\x7FD\x7EC\x3\x2\x2\x2\x7FD\x7EF\x3\x2\x2\x2\x7FD\x7F0\x3\x2"+
		"\x2\x2\x7FD\x7F1\x3\x2\x2\x2\x7FD\x7F2\x3\x2\x2\x2\x7FD\x7F5\x3\x2\x2"+
		"\x2\x7FD\x7F7\x3\x2\x2\x2\x7FD\x7F8\x3\x2\x2\x2\x7FD\x7FA\x3\x2\x2\x2"+
		"\x7FE\x97\x3\x2\x2\x2\x7FF\x815\a\x27F\x2\x2\x800\x815\a=\x2\x2\x801\x802"+
		"\a?\x2\x2\x802\x815\a\x1EE\x2\x2\x803\x815\a}\x2\x2\x804\x815\a\x3F7\x2"+
		"\x2\x805\x815\a\xDD\x2\x2\x806\x807\a\x181\x2\x2\x807\x815\ay\x2\x2\x808"+
		"\x809\a\x181\x2\x2\x809\x815\a\x3B3\x2\x2\x80A\x815\a\x339\x2\x2\x80B"+
		"\x815\a\x351\x2\x2\x80C\x80D\a\x35B\x2\x2\x80D\x80E\a\x2E0\x2\x2\x80E"+
		"\x815\a\x204\x2\x2\x80F\x810\a\x3C6\x2\x2\x810\x815\a\x1EE\x2\x2\x811"+
		"\x812\a\x436\x2\x2\x812\x813\a\x351\x2\x2\x813\x815\a\x9C\x2\x2\x814\x7FF"+
		"\x3\x2\x2\x2\x814\x800\x3\x2\x2\x2\x814\x801\x3\x2\x2\x2\x814\x803\x3"+
		"\x2\x2\x2\x814\x804\x3\x2\x2\x2\x814\x805\x3\x2\x2\x2\x814\x806\x3\x2"+
		"\x2\x2\x814\x808\x3\x2\x2\x2\x814\x80A\x3\x2\x2\x2\x814\x80B\x3\x2\x2"+
		"\x2\x814\x80C\x3\x2\x2\x2\x814\x80F\x3\x2\x2\x2\x814\x811\x3\x2\x2\x2"+
		"\x815\x99\x3\x2\x2\x2\x816\x817\t\f\x2\x2\x817\x9B\x3\x2\x2\x2\x818\x819"+
		"\t\r\x2\x2\x819\x9D\x3\x2\x2\x2\x81A\x81B\a\x32\x2\x2\x81B\x876\a\x339"+
		"\x2\x2\x81C\x876\a=\x2\x2\x81D\x81E\a?\x2\x2\x81E\x876\a\x1EE\x2\x2\x81F"+
		"\x876\a\x42\x2\x2\x820\x821\aS\x2\x2\x821\x876\a\x198\x2\x2\x822\x823"+
		"\aj\x2\x2\x823\x876\a\x2D5\x2\x2\x824\x876\a}\x2\x2\x825\x826\a\x9D\x2"+
		"\x2\x826\x827\t\xE\x2\x2\x827\x876\a\x1EE\x2\x2\x828\x876\a\xBE\x2\x2"+
		"\x829\x876\a\xCC\x2\x2\x82A\x82B\a\xCE\x2\x2\x82B\x876\a\x2E1\x2\x2\x82C"+
		"\x83A\a\xDD\x2\x2\x82D\x82E\a\x42\x2\x2\x82E\x83B\a\x39A\x2\x2\x82F\x830"+
		"\a\x12B\x2\x2\x830\x83B\a\x1EE\x2\x2\x831\x832\a\x13B\x2\x2\x832\x83B"+
		"\a\x377\x2\x2\x833\x838\a\x356\x2\x2\x834\x839\a\xB1\x2\x2\x835\x839\a"+
		"\xCC\x2\x2\x836\x837\a\x326\x2\x2\x837\x839\a\x195\x2\x2\x838\x834\x3"+
		"\x2\x2\x2\x838\x835\x3\x2\x2\x2\x838\x836\x3\x2\x2\x2\x839\x83B\x3\x2"+
		"\x2\x2\x83A\x82D\x3\x2\x2\x2\x83A\x82F\x3\x2\x2\x2\x83A\x831\x3\x2\x2"+
		"\x2\x83A\x833\x3\x2\x2\x2\x83A\x83B\x3\x2\x2\x2\x83B\x876\x3\x2\x2\x2"+
		"\x83C\x876\a\x12E\x2\x2\x83D\x83E\a\x13B\x2\x2\x83E\x876\a\x377\x2\x2"+
		"\x83F\x840\a\x26B\x2\x2\x840\x876\t\xF\x2\x2\x841\x84C\a\x14D\x2\x2\x842"+
		"\x843\a\xDC\x2\x2\x843\x84D\a\x396\x2\x2\x844\x845\a\x159\x2\x2\x845\x84D"+
		"\a\x178\x2\x2\x846\x84D\a\x1FE\x2\x2\x847\x848\a\x326\x2\x2\x848\x84D"+
		"\a\x2CC\x2\x2\x849\x84D\a\x3CB\x2\x2\x84A\x84D\ay\x2\x2\x84B\x84D\a\x3B3"+
		"\x2\x2\x84C\x842\x3\x2\x2\x2\x84C\x844\x3\x2\x2\x2\x84C\x846\x3\x2\x2"+
		"\x2\x84C\x847\x3\x2\x2\x2\x84C\x849\x3\x2\x2\x2\x84C\x84A\x3\x2\x2\x2"+
		"\x84C\x84B\x3\x2\x2\x2\x84D\x876\x3\x2\x2\x2\x84E\x876\a\x211\x2\x2\x84F"+
		"\x850\a\x21B\x2\x2\x850\x876\a\x1EE\x2\x2\x851\x852\a\x23A\x2\x2\x852"+
		"\x876\a\x3F7\x2\x2\x853\x876\a\x27F\x2\x2\x854\x855\a\x2B3\x2\x2\x855"+
		"\x876\t\x10\x2\x2\x856\x857\a\x310\x2\x2\x857\x858\a\x373\x2\x2\x858\x876"+
		"\a\x63\x2\x2\x859\x85A\a\x326\x2\x2\x85A\x876\a\x195\x2\x2\x85B\x876\a"+
		"\x339\x2\x2\x85C\x876\a\x33D\x2\x2\x85D\x876\a\x351\x2\x2\x85E\x85F\a"+
		"\x35B\x2\x2\x85F\x860\a\x2E0\x2\x2\x860\x876\a\x204\x2\x2\x861\x867\a"+
		"\x371\x2\x2\x862\x864\a\x42\x2\x2\x863\x865\a\x39A\x2\x2\x864\x863\x3"+
		"\x2\x2\x2\x864\x865\x3\x2\x2\x2\x865\x868\x3\x2\x2\x2\x866\x868\a\x339"+
		"\x2\x2\x867\x862\x3\x2\x2\x2\x867\x866\x3\x2\x2\x2\x867\x868\x3\x2\x2"+
		"\x2\x868\x876\x3\x2\x2\x2\x869\x876\a\x373\x2\x2\x86A\x86B\a\x39C\x2\x2"+
		"\x86B\x876\a\x211\x2\x2\x86C\x86D\a\x3C6\x2\x2\x86D\x876\a\x1EE\x2\x2"+
		"\x86E\x86F\a\x3EC\x2\x2\x86F\x876\t\x11\x2\x2\x870\x876\a\x3F7\x2\x2\x871"+
		"\x876\a\x40F\x2\x2\x872\x873\a\x436\x2\x2\x873\x874\a\x351\x2\x2\x874"+
		"\x876\a\x9C\x2\x2\x875\x81A\x3\x2\x2\x2\x875\x81C\x3\x2\x2\x2\x875\x81D"+
		"\x3\x2\x2\x2\x875\x81F\x3\x2\x2\x2\x875\x820\x3\x2\x2\x2\x875\x822\x3"+
		"\x2\x2\x2\x875\x824\x3\x2\x2\x2\x875\x825\x3\x2\x2\x2\x875\x828\x3\x2"+
		"\x2\x2\x875\x829\x3\x2\x2\x2\x875\x82A\x3\x2\x2\x2\x875\x82C\x3\x2\x2"+
		"\x2\x875\x83C\x3\x2\x2\x2\x875\x83D\x3\x2\x2\x2\x875\x83F\x3\x2\x2\x2"+
		"\x875\x841\x3\x2\x2\x2\x875\x84E\x3\x2\x2\x2\x875\x84F\x3\x2\x2\x2\x875"+
		"\x851\x3\x2\x2\x2\x875\x853\x3\x2\x2\x2\x875\x854\x3\x2\x2\x2\x875\x856"+
		"\x3\x2\x2\x2\x875\x859\x3\x2\x2\x2\x875\x85B\x3\x2\x2\x2\x875\x85C\x3"+
		"\x2\x2\x2\x875\x85D\x3\x2\x2\x2\x875\x85E\x3\x2\x2\x2\x875\x861\x3\x2"+
		"\x2\x2\x875\x869\x3\x2\x2\x2\x875\x86A\x3\x2\x2\x2\x875\x86C\x3\x2\x2"+
		"\x2\x875\x86E\x3\x2\x2\x2\x875\x870\x3\x2\x2\x2\x875\x871\x3\x2\x2\x2"+
		"\x875\x872\x3\x2\x2\x2\x876\x9F\x3\x2\x2\x2\x877\x878\a\x11C\x2\x2\x878"+
		"\x879\aS\x2\x2\x879\x87A\a\x198\x2\x2\x87A\x87B\x5\x47A\x23E\x2\x87B\xA1"+
		"\x3\x2\x2\x2\x87C\x87D\x5\xA4S\x2\x87D\x87E\x5\xA6T\x2\x87E\xA3\x3\x2"+
		"\x2\x2\x87F\x880\a%\x2\x2\x880\x881\aS\x2\x2\x881\x882\a\x198\x2\x2\x882"+
		"\x883\x5\x47A\x23E\x2\x883\xA5\x3\x2\x2\x2\x884\x885\a\x37C\x2\x2\x885"+
		"\x895\a\x45E\x2\x2\x886\x887\aJ\x2\x2\x887\x888\a\x44C\x2\x2\x888\x896"+
		"\t\x12\x2\x2\x889\x88A\a\x153\x2\x2\x88A\x88B\a\x44C\x2\x2\x88B\x896\a"+
		"\x446\x2\x2\x88C\x88D\a\x1A3\x2\x2\x88D\x88E\a\x44C\x2\x2\x88E\x896\a"+
		"\x446\x2\x2\x88F\x890\a\xEF\x2\x2\x890\x891\a\x44C\x2\x2\x891\x896\t\x13"+
		"\x2\x2\x892\x893\a\x322\x2\x2\x893\x894\a\x44C\x2\x2\x894\x896\a\x446"+
		"\x2\x2\x895\x886\x3\x2\x2\x2\x895\x889\x3\x2\x2\x2\x895\x88C\x3\x2\x2"+
		"\x2\x895\x88F\x3\x2\x2\x2\x895\x892\x3\x2\x2\x2\x896\x897\x3\x2\x2\x2"+
		"\x897\x9E8\a\x45F\x2\x2\x898\x899\a\r\x2\x2\x899\x89A\a\xDD\x2\x2\x89A"+
		"\x9E8\x5\x47A\x23E\x2\x89B\x89C\a\x313\x2\x2\x89C\x89D\a\xDD\x2\x2\x89D"+
		"\x9E8\x5\x47A\x23E\x2\x89E\x89F\a\r\x2\x2\x89F\x8A0\a\x31B\x2\x2\x8A0"+
		"\x8A1\a\x28D\x2\x2\x8A1\x8A2\a\x448\x2\x2\x8A2\x8A3\a\x42B\x2\x2\x8A3"+
		"\x8A7\a\x45E\x2\x2\x8A4\x8A5\a\x12F\x2\x2\x8A5\x8A6\a\x44C\x2\x2\x8A6"+
		"\x8A8\a\x448\x2\x2\x8A7\x8A4\x3\x2\x2\x2\x8A7\x8A8\x3\x2\x2\x2\x8A8\x8AF"+
		"\x3\x2\x2\x2\x8A9\x8AB\a\x462\x2\x2\x8AA\x8A9\x3\x2\x2\x2\x8AA\x8AB\x3"+
		"\x2\x2\x2\x8AB\x8AC\x3\x2\x2\x2\x8AC\x8AD\aT\x2\x2\x8AD\x8AE\a\x44C\x2"+
		"\x2\x8AE\x8B0\t\x14\x2\x2\x8AF\x8AA\x3\x2\x2\x2\x8AF\x8B0\x3\x2\x2\x2"+
		"\x8B0\x8B7\x3\x2\x2\x2\x8B1\x8B3\a\x462\x2\x2\x8B2\x8B1\x3\x2\x2\x2\x8B2"+
		"\x8B3\x3\x2\x2\x2\x8B3\x8B4\x3\x2\x2\x2\x8B4\x8B5\a\x150\x2\x2\x8B5\x8B6"+
		"\a\x44C\x2\x2\x8B6\x8B8\t\x15\x2\x2\x8B7\x8B2\x3\x2\x2\x2\x8B7\x8B8\x3"+
		"\x2\x2\x2\x8B8\x8BF\x3\x2\x2\x2\x8B9\x8BB\a\x462\x2\x2\x8BA\x8B9\x3\x2"+
		"\x2\x2\x8BA\x8BB\x3\x2\x2\x2\x8BB\x8BC\x3\x2\x2\x2\x8BC\x8BD\a\x365\x2"+
		"\x2\x8BD\x8BE\a\x44C\x2\x2\x8BE\x8C0\t\x15\x2\x2\x8BF\x8BA\x3\x2\x2\x2"+
		"\x8BF\x8C0\x3\x2\x2\x2\x8C0\x8C7\x3\x2\x2\x2\x8C1\x8C3\a\x462\x2\x2\x8C2"+
		"\x8C1\x3\x2\x2\x2\x8C2\x8C3\x3\x2\x2\x2\x8C3\x8C4\x3\x2\x2\x2\x8C4\x8C5"+
		"\aY\x2\x2\x8C5\x8C6\a\x44C\x2\x2\x8C6\x8C8\a\x446\x2\x2\x8C7\x8C2\x3\x2"+
		"\x2\x2\x8C7\x8C8\x3\x2\x2\x2\x8C8\x8D2\x3\x2\x2\x2\x8C9\x8CB\a\x462\x2"+
		"\x2\x8CA\x8C9\x3\x2\x2\x2\x8CA\x8CB\x3\x2\x2\x2\x8CB\x8CC\x3\x2\x2\x2"+
		"\x8CC\x8CD\a\x2D2\x2\x2\x8CD\x8CE\a\x45E\x2\x2\x8CE\x8CF\a\x1A\x2\x2\x8CF"+
		"\x8D0\a\x44C\x2\x2\x8D0\x8D1\t\x16\x2\x2\x8D1\x8D3\a\x45F\x2\x2\x8D2\x8CA"+
		"\x3\x2\x2\x2\x8D2\x8D3\x3\x2\x2\x2\x8D3\x8DD\x3\x2\x2\x2\x8D4\x8D6\a\x462"+
		"\x2\x2\x8D5\x8D4\x3\x2\x2\x2\x8D5\x8D6\x3\x2\x2\x2\x8D6\x8D7\x3\x2\x2"+
		"\x2\x8D7\x8D8\a\x35E\x2\x2\x8D8\x8D9\a\x45E\x2\x2\x8D9\x8DA\a\x1A\x2\x2"+
		"\x8DA\x8DB\a\x44C\x2\x2\x8DB\x8DC\a\x301\x2\x2\x8DC\x8DE\a\x45F\x2\x2"+
		"\x8DD\x8D5\x3\x2\x2\x2\x8DD\x8DE\x3\x2\x2\x2\x8DE\x8DF\x3\x2\x2\x2\x8DF"+
		"\x9E8\a\x45F\x2\x2\x8E0\x8E1\a\x35E\x2\x2\x8E1\x8EA\a\x45E\x2\x2\x8E2"+
		"\x8E3\a\x1A\x2\x2\x8E3\x8E4\a\x44C\x2\x2\x8E4\x8EB\t\x17\x2\x2\x8E5\x8E6"+
		"\a\x302\x2\x2\x8E6\x8E7\a\x44C\x2\x2\x8E7\x8E8\a\x45E\x2\x2\x8E8\x8E9"+
		"\a\x448\x2\x2\x8E9\x8EB\a\x45F\x2\x2\x8EA\x8E2\x3\x2\x2\x2\x8EA\x8E5\x3"+
		"\x2\x2\x2\x8EB\x9E8\x3\x2\x2\x2\x8EC\x8ED\a\x2D2\x2\x2\x8ED\x904\a\x45E"+
		"\x2\x2\x8EE\x8EF\a\x1A\x2\x2\x8EF\x8F0\a\x44C\x2\x2\x8F0\x905\t\x17\x2"+
		"\x2\x8F1\x8F2\a\x302\x2\x2\x8F2\x8F3\a\x44C\x2\x2\x8F3\x8FE\a\x45E\x2"+
		"\x2\x8F4\x8F6\a\x462\x2\x2\x8F5\x8F4\x3\x2\x2\x2\x8F5\x8F6\x3\x2\x2\x2"+
		"\x8F6\x8F7\x3\x2\x2\x2\x8F7\x8F9\a\x448\x2\x2\x8F8\x8F5\x3\x2\x2\x2\x8F9"+
		"\x8FC\x3\x2\x2\x2\x8FA\x8F8\x3\x2\x2\x2\x8FA\x8FB\x3\x2\x2\x2\x8FB\x8FF"+
		"\x3\x2\x2\x2\x8FC\x8FA\x3\x2\x2\x2\x8FD\x8FF\a\x264\x2\x2\x8FE\x8FA\x3"+
		"\x2\x2\x2\x8FE\x8FD\x3\x2\x2\x2\x8FF\x900\x3\x2\x2\x2\x900\x905\a\x45F"+
		"\x2\x2\x901\x902\a\x37A\x2\x2\x902\x903\a\x44C\x2\x2\x903\x905\a\x446"+
		"\x2\x2\x904\x8EE\x3\x2\x2\x2\x904\x8F1\x3\x2\x2\x2\x904\x901\x3\x2\x2"+
		"\x2\x905\x9E8\x3\x2\x2\x2\x906\x907\a\x248\x2\x2\x907\x908\a\x31B\x2\x2"+
		"\x908\x909\a\x28D\x2\x2\x909\x943\a\x448\x2\x2\x90A\x90B\a\x42B\x2\x2"+
		"\x90B\x91B\a\x45E\x2\x2\x90C\x90D\a\x12F\x2\x2\x90D\x90E\a\x44C\x2\x2"+
		"\x90E\x91C\a\x448\x2\x2\x90F\x910\aT\x2\x2\x910\x911\a\x44C\x2\x2\x911"+
		"\x91C\t\x14\x2\x2\x912\x913\a\x150\x2\x2\x913\x914\a\x44C\x2\x2\x914\x91C"+
		"\t\x15\x2\x2\x915\x916\a\x365\x2\x2\x916\x917\a\x44C\x2\x2\x917\x91C\t"+
		"\x15\x2\x2\x918\x919\aY\x2\x2\x919\x91A\a\x44C\x2\x2\x91A\x91C\a\x446"+
		"\x2\x2\x91B\x90C\x3\x2\x2\x2\x91B\x90F\x3\x2\x2\x2\x91B\x912\x3\x2\x2"+
		"\x2\x91B\x915\x3\x2\x2\x2\x91B\x918\x3\x2\x2\x2\x91C\x944\x3\x2\x2\x2"+
		"\x91D\x91E\a\x35E\x2\x2\x91E\x927\a\x45E\x2\x2\x91F\x920\a\x1A\x2\x2\x920"+
		"\x921\a\x44C\x2\x2\x921\x928\t\x17\x2\x2\x922\x923\a\x302\x2\x2\x923\x924"+
		"\a\x44C\x2\x2\x924\x925\a\x45E\x2\x2\x925\x926\a\x448\x2\x2\x926\x928"+
		"\a\x45F\x2\x2\x927\x91F\x3\x2\x2\x2\x927\x922\x3\x2\x2\x2\x928\x944\x3"+
		"\x2\x2\x2\x929\x92A\a\x2D2\x2\x2\x92A\x941\a\x45E\x2\x2\x92B\x92C\a\x1A"+
		"\x2\x2\x92C\x92D\a\x44C\x2\x2\x92D\x942\t\x17\x2\x2\x92E\x92F\a\x302\x2"+
		"\x2\x92F\x930\a\x44C\x2\x2\x930\x93B\a\x45E\x2\x2\x931\x933\a\x462\x2"+
		"\x2\x932\x931\x3\x2\x2\x2\x932\x933\x3\x2\x2\x2\x933\x934\x3\x2\x2\x2"+
		"\x934\x936\a\x448\x2\x2\x935\x932\x3\x2\x2\x2\x936\x939\x3\x2\x2\x2\x937"+
		"\x935\x3\x2\x2\x2\x937\x938\x3\x2\x2\x2\x938\x93C\x3\x2\x2\x2\x939\x937"+
		"\x3\x2\x2\x2\x93A\x93C\a\x264\x2\x2\x93B\x937\x3\x2\x2\x2\x93B\x93A\x3"+
		"\x2\x2\x2\x93C\x93D\x3\x2\x2\x2\x93D\x942\a\x45F\x2\x2\x93E\x93F\a\x37A"+
		"\x2\x2\x93F\x940\a\x44C\x2\x2\x940\x942\a\x446\x2\x2\x941\x92B\x3\x2\x2"+
		"\x2\x941\x92E\x3\x2\x2\x2\x941\x93E\x3\x2\x2\x2\x942\x944\x3\x2\x2\x2"+
		"\x943\x90A\x3\x2\x2\x2\x943\x91D\x3\x2\x2\x2\x943\x929\x3\x2\x2\x2\x944"+
		"\x945\x3\x2\x2\x2\x945\x9E8\a\x45F\x2\x2\x946\x947\a\x313\x2\x2\x947\x948"+
		"\a\x31B\x2\x2\x948\x949\a\x28D\x2\x2\x949\x9E8\a\x448\x2\x2\x94A\x9E8"+
		"\a\x1E0\x2\x2\x94B\x94C\a\x1E0\x2\x2\x94C\x94D\aS\x2\x2\x94D\x94E\a\x198"+
		"\x2\x2\x94E\x965\a\x28D\x2\x2\x94F\x951\a\x462\x2\x2\x950\x94F\x3\x2\x2"+
		"\x2\x950\x951\x3\x2\x2\x2\x951\x952\x3\x2\x2\x2\x952\x953\a\x448\x2\x2"+
		"\x953\x954\a\x42B\x2\x2\x954\x955\a\x45E\x2\x2\x955\x956\a\x208\x2\x2"+
		"\x956\x957\a\x44C\x2\x2\x957\x958\a\x448\x2\x2\x958\x959\a\x462\x2\x2"+
		"\x959\x95A\aT\x2\x2\x95A\x95B\a\x44C\x2\x2\x95B\x95C\t\x14\x2\x2\x95C"+
		"\x95D\a\x462\x2\x2\x95D\x95E\a\x150\x2\x2\x95E\x95F\a\x44C\x2\x2\x95F"+
		"\x960\a\x217\x2\x2\x960\x961\a\x462\x2\x2\x961\x962\a\x365\x2\x2\x962"+
		"\x963\a\x44C\x2\x2\x963\x964\t\x15\x2\x2\x964\x966\a\x45F\x2\x2\x965\x950"+
		"\x3\x2\x2\x2\x966\x967\x3\x2\x2\x2\x967\x965\x3\x2\x2\x2\x967\x968\x3"+
		"\x2\x2\x2\x968\x9E8\x3\x2\x2\x2\x969\x96A\a\x248\x2\x2\x96A\x96B\aS\x2"+
		"\x2\x96B\x96C\a\x198\x2\x2\x96C\x98F\a\x28D\x2\x2\x96D\x96F\a\x462\x2"+
		"\x2\x96E\x96D\x3\x2\x2\x2\x96E\x96F\x3\x2\x2\x2\x96F\x970\x3\x2\x2\x2"+
		"\x970\x971\a\x448\x2\x2\x971\x972\a\x42B\x2\x2\x972\x973\a\x45E\x2\x2"+
		"\x973\x974\a\x208\x2\x2\x974\x975\a\x44C\x2\x2\x975\x97C\a\x448\x2\x2"+
		"\x976\x978\a\x462\x2\x2\x977\x976\x3\x2\x2\x2\x977\x978\x3\x2\x2\x2\x978"+
		"\x979\x3\x2\x2\x2\x979\x97A\aT\x2\x2\x97A\x97B\a\x44C\x2\x2\x97B\x97D"+
		"\t\x14\x2\x2\x97C\x977\x3\x2\x2\x2\x97C\x97D\x3\x2\x2\x2\x97D\x984\x3"+
		"\x2\x2\x2\x97E\x980\a\x462\x2\x2\x97F\x97E\x3\x2\x2\x2\x97F\x980\x3\x2"+
		"\x2\x2\x980\x981\x3\x2\x2\x2\x981\x982\a\x150\x2\x2\x982\x983\a\x44C\x2"+
		"\x2\x983\x985\a\x217\x2\x2\x984\x97F\x3\x2\x2\x2\x984\x985\x3\x2\x2\x2"+
		"\x985\x98C\x3\x2\x2\x2\x986\x988\a\x462\x2\x2\x987\x986\x3\x2\x2\x2\x987"+
		"\x988\x3\x2\x2\x2\x988\x989\x3\x2\x2\x2\x989\x98A\a\x365\x2\x2\x98A\x98B"+
		"\a\x44C\x2\x2\x98B\x98D\t\x15\x2\x2\x98C\x987\x3\x2\x2\x2\x98C\x98D\x3"+
		"\x2\x2\x2\x98D\x98E\x3\x2\x2\x2\x98E\x990\a\x45F\x2\x2\x98F\x96E\x3\x2"+
		"\x2\x2\x990\x991\x3\x2\x2\x2\x991\x98F\x3\x2\x2\x2\x991\x992\x3\x2\x2"+
		"\x2\x992\x9E8\x3\x2\x2\x2\x993\x994\a\x196\x2\x2\x994\x995\a\xC9\x2\x2"+
		"\x995\x996\a\x30\x2\x2\x996\x9E8\a\xDD\x2\x2\x997\x998\a\x103\x2\x2\x998"+
		"\x999\a\xC9\x2\x2\x999\x99A\a\x30\x2\x2\x99A\x9E8\a\xDD\x2\x2\x99B\x9E8"+
		"\a\x14F\x2\x2\x99C\x9E8\a\x175\x2\x2\x99D\x99E\a\r\x2\x2\x99E\x99F\a\x205"+
		"\x2\x2\x99F\x9A0\a\x448\x2\x2\x9A0\x9C4\a\x45E\x2\x2\x9A1\x9A2\a\x42B"+
		"\x2\x2\x9A2\x9A3\a\x10A\x2\x2\x9A3\x9A4\a\x28D\x2\x2\x9A4\x9A5\a\x45E"+
		"\x2\x2\x9A5\x9A6\x5\xA8U\x2\x9A6\x9A7\x5\xA8U\x2\x9A7\x9A8\a\x45F\x2\x2"+
		"\x9A8\x9C5\x3\x2\x2\x2\x9A9\x9AA\a\x42B\x2\x2\x9AA\x9AB\a\x1D5\x2\x2\x9AB"+
		"\x9B9\a\x45E\x2\x2\x9AC\x9AE\a\x462\x2\x2\x9AD\x9AC\x3\x2\x2\x2\x9AD\x9AE"+
		"\x3\x2\x2\x2\x9AE\x9AF\x3\x2\x2\x2\x9AF\x9B5\a\x45E\x2\x2\x9B0\x9B1\x5"+
		"\xA8U\x2\x9B1\x9B2\a\x462\x2\x2\x9B2\x9B3\x5\xA8U\x2\x9B3\x9B6\x3\x2\x2"+
		"\x2\x9B4\x9B6\x5\xAAV\x2\x9B5\x9B0\x3\x2\x2\x2\x9B5\x9B4\x3\x2\x2\x2\x9B6"+
		"\x9B7\x3\x2\x2\x2\x9B7\x9B8\a\x45F\x2\x2\x9B8\x9BA\x3\x2\x2\x2\x9B9\x9AD"+
		"\x3\x2\x2\x2\x9BA\x9BB\x3\x2\x2\x2\x9BB\x9B9\x3\x2\x2\x2\x9BB\x9BC\x3"+
		"\x2\x2\x2\x9BC\x9BD\x3\x2\x2\x2\x9BD\x9C2\a\x45F\x2\x2\x9BE\x9BF\a\x462"+
		"\x2\x2\x9BF\x9C0\a\x2CD\x2\x2\x9C0\x9C1\a\x44C\x2\x2\x9C1\x9C3\a\x446"+
		"\x2\x2\x9C2\x9BE\x3\x2\x2\x2\x9C2\x9C3\x3\x2\x2\x2\x9C3\x9C5\x3\x2\x2"+
		"\x2\x9C4\x9A1\x3\x2\x2\x2\x9C4\x9A9\x3\x2\x2\x2\x9C5\x9C6\x3\x2\x2\x2"+
		"\x9C6\x9C7\a\x45F\x2\x2\x9C7\x9E8\x3\x2\x2\x2\x9C8\x9C9\a\x248\x2\x2\x9C9"+
		"\x9D8\a\x205\x2\x2\x9CA\x9CB\a\r\x2\x2\x9CB\x9CC\a\x1D5\x2\x2\x9CC\x9D1"+
		"\a\x45E\x2\x2\x9CD\x9CE\x5\xA8U\x2\x9CE\x9CF\x5\xA8U\x2\x9CF\x9D2\x3\x2"+
		"\x2\x2\x9D0\x9D2\x5\xAAV\x2\x9D1\x9CD\x3\x2\x2\x2\x9D1\x9D0\x3\x2\x2\x2"+
		"\x9D2\x9D3\x3\x2\x2\x2\x9D3\x9D4\a\x45F\x2\x2\x9D4\x9D9\x3\x2\x2\x2\x9D5"+
		"\x9D6\a\x2CD\x2\x2\x9D6\x9D7\a\x44C\x2\x2\x9D7\x9D9\a\x446\x2\x2\x9D8"+
		"\x9CA\x3\x2\x2\x2\x9D8\x9D5\x3\x2\x2\x2\x9D9\x9E8\x3\x2\x2\x2\x9DA\x9DB"+
		"\a\x329\x2\x2\x9DB\x9DC\a\x205\x2\x2\x9DC\x9E8\a\x448\x2\x2\x9DD\x9DE"+
		"\a\x313\x2\x2\x9DE\x9DF\a\x205\x2\x2\x9DF\x9E8\a\x448\x2\x2\x9E0\x9E8"+
		"\a\x288\x2\x2\x9E1\x9E2\a\x42B\x2\x2\x9E2\x9E3\a\x45E\x2\x2\x9E3\x9E4"+
		"\a\x11F\x2\x2\x9E4\x9E5\a\x44C\x2\x2\x9E5\x9E6\a\x2C4\x2\x2\x9E6\x9E8"+
		"\a\x45F\x2\x2\x9E7\x884\x3\x2\x2\x2\x9E7\x898\x3\x2\x2\x2\x9E7\x89B\x3"+
		"\x2\x2\x2\x9E7\x89E\x3\x2\x2\x2\x9E7\x8E0\x3\x2\x2\x2\x9E7\x8EC\x3\x2"+
		"\x2\x2\x9E7\x906\x3\x2\x2\x2\x9E7\x946\x3\x2\x2\x2\x9E7\x94A\x3\x2\x2"+
		"\x2\x9E7\x94B\x3\x2\x2\x2\x9E7\x969\x3\x2\x2\x2\x9E7\x993\x3\x2\x2\x2"+
		"\x9E7\x997\x3\x2\x2\x2\x9E7\x99B\x3\x2\x2\x2\x9E7\x99C\x3\x2\x2\x2\x9E7"+
		"\x99D\x3\x2\x2\x2\x9E7\x9C8\x3\x2\x2\x2\x9E7\x9DA\x3\x2\x2\x2\x9E7\x9DD"+
		"\x3\x2\x2\x2\x9E7\x9E0\x3\x2\x2\x2\x9E7\x9E1\x3\x2\x2\x2\x9E8\xA7\x3\x2"+
		"\x2\x2\x9E9\x9EA\a\x448\x2\x2\x9EA\xA9\x3\x2\x2\x2\x9EB\x9EC\a\x448\x2"+
		"\x2\x9EC\xAB\x3\x2\x2\x2\x9ED\x9EE\t\x18\x2\x2\x9EE\x9EF\aj\x2\x2\x9EF"+
		"\x9F0\a\x2D5\x2\x2\x9F0\x9F1\x5\x47A\x23E\x2\x9F1\x9F2\a\x16F\x2\x2\x9F2"+
		"\x9F3\a\xC1\x2\x2\x9F3\x9F4\a\x37C\x2\x2\x9F4\x9FE\a\x45E\x2\x2\x9F5\x9F6"+
		"\a\xBF\x2\x2\x9F6\x9F9\a\x44C\x2\x2\x9F7\x9FA\x5\x47A\x23E\x2\x9F8\x9FA"+
		"\a\x30\x2\x2\x9F9\x9F7\x3\x2\x2\x2\x9F9\x9F8\x3\x2\x2\x2\x9FA\x9FC\x3"+
		"\x2\x2\x2\x9FB\x9FD\a\x462\x2\x2\x9FC\x9FB\x3\x2\x2\x2\x9FC\x9FD\x3\x2"+
		"\x2\x2\x9FD\x9FF\x3\x2\x2\x2\x9FE\x9F5\x3\x2\x2\x2\x9FE\x9FF\x3\x2\x2"+
		"\x2\x9FF\xA0C\x3\x2\x2\x2\xA00\xA01\a\x20C\x2\x2\xA01\xA07\a\x44C\x2\x2"+
		"\xA02\xA04\a\x11B\x2\x2\xA03\xA02\x3\x2\x2\x2\xA03\xA04\x3\x2\x2\x2\xA04"+
		"\xA05\x3\x2\x2\x2\xA05\xA08\x5\x47A\x23E\x2\xA06\xA08\a\x30\x2\x2\xA07"+
		"\xA03\x3\x2\x2\x2\xA07\xA06\x3\x2\x2\x2\xA08\xA0A\x3\x2\x2\x2\xA09\xA0B"+
		"\a\x462\x2\x2\xA0A\xA09\x3\x2\x2\x2\xA0A\xA0B\x3\x2\x2\x2\xA0B\xA0D\x3"+
		"\x2\x2\x2\xA0C\xA00\x3\x2\x2\x2\xA0C\xA0D\x3\x2\x2\x2\xA0D\xA17\x3\x2"+
		"\x2\x2\xA0E\xA0F\a\x312\x2\x2\xA0F\xA12\a\x44C\x2\x2\xA10\xA13\a\x448"+
		"\x2\x2\xA11\xA13\a\x30\x2\x2\xA12\xA10\x3\x2\x2\x2\xA12\xA11\x3\x2\x2"+
		"\x2\xA13\xA15\x3\x2\x2\x2\xA14\xA16\a\x462\x2\x2\xA15\xA14\x3\x2\x2\x2"+
		"\xA15\xA16\x3\x2\x2\x2\xA16\xA18\x3\x2\x2\x2\xA17\xA0E\x3\x2\x2\x2\xA17"+
		"\xA18\x3\x2\x2\x2\xA18\xA1F\x3\x2\x2\x2\xA19\xA1A\a\x2D6\x2\x2\xA1A\xA1D"+
		"\a\x44C\x2\x2\xA1B\xA1E\a\x446\x2\x2\xA1C\xA1E\a\xF7\x2\x2\xA1D\xA1B\x3"+
		"\x2\x2\x2\xA1D\xA1C\x3\x2\x2\x2\xA1E\xA20\x3\x2\x2\x2\xA1F\xA19\x3\x2"+
		"\x2\x2\xA1F\xA20\x3\x2\x2\x2\xA20\xA21\x3\x2\x2\x2\xA21\xA22\a\x45F\x2"+
		"\x2\xA22\xAD\x3\x2\x2\x2\xA23\xA24\a\x11C\x2\x2\xA24\xA25\aj\x2\x2\xA25"+
		"\xA26\a\x2D5\x2\x2\xA26\xA27\x5\x47A\x23E\x2\xA27\xAF\x3\x2\x2\x2\xA28"+
		"\xA29\a%\x2\x2\xA29\xA2A\a}\x2\x2\xA2A\xA52\x5\x47A\x23E\x2\xA2B\xA2C"+
		"\a\x313\x2\x2\xA2C\xA53\a\x2D8\x2\x2\xA2D\xA2E\a\x42B\x2\x2\xA2E\xA2F"+
		"\a\x2D7\x2\x2\xA2F\xA30\a\x1EE\x2\x2\xA30\xA47\a\x45E\x2\x2\xA31\xA32"+
		"\a\x159\x2\x2\xA32\xA33\a\x44C\x2\x2\xA33\xA35\a\x448\x2\x2\xA34\xA36"+
		"\a\x462\x2\x2\xA35\xA34\x3\x2\x2\x2\xA35\xA36\x3\x2\x2\x2\xA36\xA48\x3"+
		"\x2\x2\x2\xA37\xA38\a\xF6\x2\x2\xA38\xA39\aq\x2\x2\xA39\xA3A\a\x2B6\x2"+
		"\x2\xA3A\xA3B\a\x44C\x2\x2\xA3B\xA3D\a\x448\x2\x2\xA3C\xA3E\a\x462\x2"+
		"\x2\xA3D\xA3C\x3\x2\x2\x2\xA3D\xA3E\x3\x2\x2\x2\xA3E\xA48\x3\x2\x2\x2"+
		"\xA3F\xA40\a\x12B\x2\x2\xA40\xA41\aq\x2\x2\xA41\xA42\a\x2B6\x2\x2\xA42"+
		"\xA43\a\x44C\x2\x2\xA43\xA45\a\x448\x2\x2\xA44\xA46\a\x462\x2\x2\xA45"+
		"\xA44\x3\x2\x2\x2\xA45\xA46\x3\x2\x2\x2\xA46\xA48\x3\x2\x2\x2\xA47\xA31"+
		"\x3\x2\x2\x2\xA47\xA37\x3\x2\x2\x2\xA47\xA3F\x3\x2\x2\x2\xA48\xA49\x3"+
		"\x2\x2\x2\xA49\xA47\x3\x2\x2\x2\xA49\xA4A\x3\x2\x2\x2\xA4A\xA4B\x3\x2"+
		"\x2\x2\xA4B\xA53\a\x45F\x2\x2\xA4C\xA4D\a\x42B\x2\x2\xA4D\xA4E\a\f\x2"+
		"\x2\xA4E\xA4F\a\x16F\x2\x2\xA4F\xA50\a]\x2\x2\xA50\xA51\a\x44C\x2\x2\xA51"+
		"\xA53\t\x13\x2\x2\xA52\xA2B\x3\x2\x2\x2\xA52\xA2D\x3\x2\x2\x2\xA52\xA4C"+
		"\x3\x2\x2\x2\xA53\xB1\x3\x2\x2\x2\xA54\xA55\a%\x2\x2\xA55\xA56\a\x9D\x2"+
		"\x2\xA56\xA57\a\x12B\x2\x2\xA57\xA58\a\x1EE\x2\x2\xA58\xA59\x5\x47A\x23E"+
		"\x2\xA59\xA5A\t\x19\x2\x2\xA5A\xA5B\a\x415\x2\x2\xA5B\xA5C\a\x45E\x2\x2"+
		"\xA5C\xA5D\a\xA3\x2\x2\xA5D\xA5E\a\x44C\x2\x2\xA5E\xA67\x5\x47A\x23E\x2"+
		"\xA5F\xA60\a\x462\x2\x2\xA60\xA61\a\x17\x2\x2\xA61\xA62\a\x44C\x2\x2\xA62"+
		"\xA63\a\x448\x2\x2\xA63\xA64\a\x462\x2\x2\xA64\xA65\a\x12A\x2\x2\xA65"+
		"\xA66\a\x44C\x2\x2\xA66\xA68\a\x449\x2\x2\xA67\xA5F\x3\x2\x2\x2\xA67\xA68"+
		"\x3\x2\x2\x2\xA68\xA69\x3\x2\x2\x2\xA69\xA6A\a\x45F\x2\x2\xA6A\xB3\x3"+
		"\x2\x2\x2\xA6B\xA6C\a\xC9\x2\x2\xA6C\xA6D\a\x9D\x2\x2\xA6D\xA6E\a\x12B"+
		"\x2\x2\xA6E\xA6F\a\x1EE\x2\x2\xA6F\xA70\x5\x47A\x23E\x2\xA70\xA71\a\x42B"+
		"\x2\x2\xA71\xA85\a\x416\x2\x2\xA72\xA74\a\x45E\x2\x2\xA73\xA75\a\x462"+
		"\x2\x2\xA74\xA73\x3\x2\x2\x2\xA74\xA75\x3\x2\x2\x2\xA75\xA76\x3\x2\x2"+
		"\x2\xA76\xA77\a\xA3\x2\x2\xA77\xA78\a\x44C\x2\x2\xA78\xA79\x5\x47A\x23E"+
		"\x2\xA79\xA7A\a\x462\x2\x2\xA7A\xA7B\a\x17\x2\x2\xA7B\xA7C\a\x44C\x2\x2"+
		"\xA7C\xA7D\a\x448\x2\x2\xA7D\xA7E\a\x462\x2\x2\xA7E\xA7F\a\x12A\x2\x2"+
		"\xA7F\xA80\a\x44C\x2\x2\xA80\xA81\a\x449\x2\x2\xA81\xA83\a\x45F\x2\x2"+
		"\xA82\xA84\a\x462\x2\x2\xA83\xA82\x3\x2\x2\x2\xA83\xA84\x3\x2\x2\x2\xA84"+
		"\xA86\x3\x2\x2\x2\xA85\xA72\x3\x2\x2\x2\xA86\xA87\x3\x2\x2\x2\xA87\xA85"+
		"\x3\x2\x2\x2\xA87\xA88\x3\x2\x2\x2\xA88\xB5\x3\x2\x2\x2\xA89\xA8A\a\x11C"+
		"\x2\x2\xA8A\xA8B\a}\x2\x2\xA8B\xA8C\x5\x47A\x23E\x2\xA8C\xB7\x3\x2\x2"+
		"\x2\xA8D\xA8E\a\x11C\x2\x2\xA8E\xA8F\a\x9D\x2\x2\xA8F\xA90\a\x12B\x2\x2"+
		"\xA90\xA91\a\x1EE\x2\x2\xA91\xA92\x5\x47A\x23E\x2\xA92\xB9\x3\x2\x2\x2"+
		"\xA93\xA94\a\x11C\x2\x2\xA94\xA95\a\x9D\x2\x2\xA95\xA96\a\x21B\x2\x2\xA96"+
		"\xA97\a\x1EE\x2\x2\xA97\xA98\x5\x47A\x23E\x2\xA98\xBB\x3\x2\x2\x2\xA99"+
		"\xA9A\a\x11C\x2\x2\xA9A\xA9B\a\xBE\x2\x2\xA9B\xA9C\x5\x47A\x23E\x2\xA9C"+
		"\xBD\x3\x2\x2\x2\xA9D\xA9E\a\x11C\x2\x2\xA9E\xA9F\a\xCC\x2\x2\xA9F\xAA0"+
		"\x5\x47A\x23E\x2\xAA0\xBF\x3\x2\x2\x2\xAA1\xAA2\a\x11C\x2\x2\xAA2\xAA3"+
		"\a\xCE\x2\x2\xAA3\xAA4\a\x2E1\x2\x2\xAA4\xAA5\x5\x47A\x23E\x2\xAA5\xC1"+
		"\x3\x2\x2\x2\xAA6\xAA7\a\x11C\x2\x2\xAA7\xAAA\a\xDD\x2\x2\xAA8\xAA9\a"+
		"\x1B4\x2\x2\xAA9\xAAB\a\x144\x2\x2\xAAA\xAA8\x3\x2\x2\x2\xAAA\xAAB\x3"+
		"\x2\x2\x2\xAAB\xAB0\x3\x2\x2\x2\xAAC\xAAE\a\x462\x2\x2\xAAD\xAAC\x3\x2"+
		"\x2\x2\xAAD\xAAE\x3\x2\x2\x2\xAAE\xAAF\x3\x2\x2\x2\xAAF\xAB1\x5\x47A\x23E"+
		"\x2\xAB0\xAAD\x3\x2\x2\x2\xAB1\xAB2\x3\x2\x2\x2\xAB2\xAB0\x3\x2\x2\x2"+
		"\xAB2\xAB3\x3\x2\x2\x2\xAB3\xC3\x3\x2\x2\x2\xAB4\xAB5\a\x11C\x2\x2\xAB5"+
		"\xAB6\a\xDD\x2\x2\xAB6\xAB7\a\x42\x2\x2\xAB7\xAB8\a\x39A\x2\x2\xAB8\xAB9"+
		"\x5\x47A\x23E\x2\xAB9\xC5\x3\x2\x2\x2\xABA\xABB\a\x11C\x2\x2\xABB\xABC"+
		"\a\xDD\x2\x2\xABC\xABD\a\x12B\x2\x2\xABD\xABE\a\x1EE\x2\x2\xABE\xC7\x3"+
		"\x2\x2\x2\xABF\xAC0\a\x11C\x2\x2\xAC0\xAC1\a\xDD\x2\x2\xAC1\xAC2\a\x356"+
		"\x2\x2\xAC2\xAC3\a\xCC\x2\x2\xAC3\xAC4\x5\x47A\x23E\x2\xAC4\xC9\x3\x2"+
		"\x2\x2\xAC5\xAC6\a\x11C\x2\x2\xAC6\xAC9\a\xF7\x2\x2\xAC7\xAC8\a\x1B4\x2"+
		"\x2\xAC8\xACA\a\x144\x2\x2\xAC9\xAC7\x3\x2\x2\x2\xAC9\xACA\x3\x2\x2\x2"+
		"\xACA\xACC\x3\x2\x2\x2\xACB\xACD\a\x462\x2\x2\xACC\xACB\x3\x2\x2\x2\xACC"+
		"\xACD\x3\x2\x2\x2\xACD\xAD1\x3\x2\x2\x2\xACE\xACF\x5\x47A\x23E\x2\xACF"+
		"\xAD0\a\x459\x2\x2\xAD0\xAD2\x3\x2\x2\x2\xAD1\xACE\x3\x2\x2\x2\xAD1\xAD2"+
		"\x3\x2\x2\x2\xAD2\xAD3\x3\x2\x2\x2\xAD3\xAD4\x5\x47A\x23E\x2\xAD4\xCB"+
		"\x3\x2\x2\x2\xAD5\xAD6\a\x11C\x2\x2\xAD6\xAD7\a\x12E\x2\x2\xAD7\xAD8\x5"+
		"\x47A\x23E\x2\xAD8\xCD\x3\x2\x2\x2\xAD9\xADA\a\x11C\x2\x2\xADA\xADB\a"+
		"\x14D\x2\x2\xADB\xADC\a\xDC\x2\x2\xADC\xADD\a\x396\x2\x2\xADD\xADE\x5"+
		"\x47A\x23E\x2\xADE\xCF\x3\x2\x2\x2\xADF\xAE0\a\x11C\x2\x2\xAE0\xAE1\a"+
		"\x14D\x2\x2\xAE1\xAE2\a\x159\x2\x2\xAE2\xAE3\a\x178\x2\x2\xAE3\xAE4\x5"+
		"\x47A\x23E\x2\xAE4\xD1\x3\x2\x2\x2\xAE5\xAE6\a\x11C\x2\x2\xAE6\xAE7\a"+
		"\x14D\x2\x2\xAE7\xAE8\a\x1FE\x2\x2\xAE8\xAEB\x5\x47A\x23E\x2\xAE9\xAEA"+
		"\a\x46\x2\x2\xAEA\xAEC\x5\x47A\x23E\x2\xAEB\xAE9\x3\x2\x2\x2\xAEB\xAEC"+
		"\x3\x2\x2\x2\xAEC\xD3\x3\x2\x2\x2\xAED\xAEE\a\x11C\x2\x2\xAEE\xAEF\a\x14D"+
		"\x2\x2\xAEF\xAF0\a\x326\x2\x2\xAF0\xAF1\a\x2CC\x2\x2\xAF1\xAF2\x5\x47A"+
		"\x23E\x2\xAF2\xD5\x3\x2\x2\x2\xAF3\xAF4\a\x11C\x2\x2\xAF4\xAF5\a\x14D"+
		"\x2\x2\xAF5\xAF9\a\x3CB\x2\x2\xAF6\xAF7\x5\x47A\x23E\x2\xAF7\xAF8\a\x459"+
		"\x2\x2\xAF8\xAFA\x3\x2\x2\x2\xAF9\xAF6\x3\x2\x2\x2\xAF9\xAFA\x3\x2\x2"+
		"\x2\xAFA\xAFE\x3\x2\x2\x2\xAFB\xAFC\x5\x47A\x23E\x2\xAFC\xAFD\a\x459\x2"+
		"\x2\xAFD\xAFF\x3\x2\x2\x2\xAFE\xAFB\x3\x2\x2\x2\xAFE\xAFF\x3\x2\x2\x2"+
		"\xAFF\xB00\x3\x2\x2\x2\xB00\xB01\x5\x47A\x23E\x2\xB01\xD7\x3\x2\x2\x2"+
		"\xB02\xB03\a\x11C\x2\x2\xB03\xB04\a\x13B\x2\x2\xB04\xB09\a\x26B\x2\x2"+
		"\xB05\xB07\a\x462\x2\x2\xB06\xB05\x3\x2\x2\x2\xB06\xB07\x3\x2\x2\x2\xB07"+
		"\xB08\x3\x2\x2\x2\xB08\xB0A\x5\x47A\x23E\x2\xB09\xB06\x3\x2\x2\x2\xB0A"+
		"\xB0B\x3\x2\x2\x2\xB0B\xB09\x3\x2\x2\x2\xB0B\xB0C\x3\x2\x2\x2\xB0C\xB0D"+
		"\x3\x2\x2\x2\xB0D\xB12\a\x28D\x2\x2\xB0E\xB13\a\x371\x2\x2\xB0F\xB13\a"+
		"\xDD\x2\x2\xB10\xB11\a\x2EB\x2\x2\xB11\xB13\x5\x47A\x23E\x2\xB12\xB0E"+
		"\x3\x2\x2\x2\xB12\xB0F\x3\x2\x2\x2\xB12\xB10\x3\x2\x2\x2\xB13\xD9\x3\x2"+
		"\x2\x2\xB14\xB15\a\x11C\x2\x2\xB15\xB16\a\x13B\x2\x2\xB16\xB17\a\x377"+
		"\x2\x2\xB17\xB18\x5\x47A\x23E\x2\xB18\xB19\a\x28D\x2\x2\xB19\xB1A\a\x371"+
		"\x2\x2\xB1A\xDB\x3\x2\x2\x2\xB1B\xB1C\a\x11C\x2\x2\xB1C\xB1D\a\x181\x2"+
		"\x2\xB1D\xB1E\ay\x2\x2\xB1E\xB1F\x5\x47A\x23E\x2\xB1F\xDD\x3\x2\x2\x2"+
		"\xB20\xB21\a\x11C\x2\x2\xB21\xB22\a\x181\x2\x2\xB22\xB23\a\x1C4\x2\x2"+
		"\xB23\xB27\a\x28D\x2\x2\xB24\xB25\x5\x47A\x23E\x2\xB25\xB26\a\x459\x2"+
		"\x2\xB26\xB28\x3\x2\x2\x2\xB27\xB24\x3\x2\x2\x2\xB27\xB28\x3\x2\x2\x2"+
		"\xB28\xB29\x3\x2\x2\x2\xB29\xB2A\x5\x47A\x23E\x2\xB2A\xDF\x3\x2\x2\x2"+
		"\xB2B\xB2C\a\x11C\x2\x2\xB2C\xB2D\a\x181\x2\x2\xB2D\xB2E\a\x3B3\x2\x2"+
		"\xB2E\xB2F\x5\x47A\x23E\x2\xB2F\xE1\x3\x2\x2\x2\xB30\xB31\a\x11C\x2\x2"+
		"\xB31\xB32\a\x211\x2\x2\xB32\xB33\x5\x47A\x23E\x2\xB33\xE3\x3\x2\x2\x2"+
		"\xB34\xB35\a\x11C\x2\x2\xB35\xB36\a\x21B\x2\x2\xB36\xB37\a\x1EE\x2\x2"+
		"\xB37\xE5\x3\x2\x2\x2\xB38\xB39\a\x11C\x2\x2\xB39\xB3A\a\x23A\x2\x2\xB3A"+
		"\xB3B\a\x3F7\x2\x2\xB3B\xB3C\x5\x47A\x23E\x2\xB3C\xE7\x3\x2\x2\x2\xB3D"+
		"\xB3E\a\x11C\x2\x2\xB3E\xB3F\a\x2B3\x2\x2\xB3F\xB40\a\x184\x2\x2\xB40"+
		"\xB41\x5\x47A\x23E\x2\xB41\xE9\x3\x2\x2\x2\xB42\xB43\a\x11C\x2\x2\xB43"+
		"\xB44\a\x2B3\x2\x2\xB44\xB45\a\x355\x2\x2\xB45\xB46\x5\x47A\x23E\x2\xB46"+
		"\xEB\x3\x2\x2\x2\xB47\xB48\a\x11C\x2\x2\xB48\xB4C\a\x2EB\x2\x2\xB49\xB4A"+
		"\x5\x47A\x23E\x2\xB4A\xB4B\a\x459\x2\x2\xB4B\xB4D\x3\x2\x2\x2\xB4C\xB49"+
		"\x3\x2\x2\x2\xB4C\xB4D\x3\x2\x2\x2\xB4D\xB51\x3\x2\x2\x2\xB4E\xB4F\x5"+
		"\x47A\x23E\x2\xB4F\xB50\a\x459\x2\x2\xB50\xB52\x3\x2\x2\x2\xB51\xB4E\x3"+
		"\x2\x2\x2\xB51\xB52\x3\x2\x2\x2\xB52\xB53\x3\x2\x2\x2\xB53\xB54\x5\x47A"+
		"\x23E\x2\xB54\xED\x3\x2\x2\x2\xB55\xB56\a\x11C\x2\x2\xB56\xB57\a\x310"+
		"\x2\x2\xB57\xB58\a\x373\x2\x2\xB58\xB59\a\x63\x2\x2\xB59\xB5A\x5\x47A"+
		"\x23E\x2\xB5A\xEF\x3\x2\x2\x2\xB5B\xB5C\a\x11C\x2\x2\xB5C\xB5D\a\x326"+
		"\x2\x2\xB5D\xB5E\a\x2CC\x2\x2\xB5E\xB5F\x5\x47A\x23E\x2\xB5F\xF1\x3\x2"+
		"\x2\x2\xB60\xB61\a\x11C\x2\x2\xB61\xB64\a\x339\x2\x2\xB62\xB63\a\x1B4"+
		"\x2\x2\xB63\xB65\a\x144\x2\x2\xB64\xB62\x3\x2\x2\x2\xB64\xB65\x3\x2\x2"+
		"\x2\xB65\xB66\x3\x2\x2\x2\xB66\xB67\x5\x47A\x23E\x2\xB67\xF3\x3\x2\x2"+
		"\x2\xB68\xB69\a\x11C\x2\x2\xB69\xB6A\a\x33D\x2\x2\xB6A\xB6B\x5\x47A\x23E"+
		"\x2\xB6B\xF5\x3\x2\x2\x2\xB6C\xB6D\a\x11C\x2\x2\xB6D\xB70\a\x34B\x2\x2"+
		"\xB6E\xB6F\a\x1B4\x2\x2\xB6F\xB71\a\x144\x2\x2\xB70\xB6E\x3\x2\x2\x2\xB70"+
		"\xB71\x3\x2\x2\x2\xB71\xB7B\x3\x2\x2\x2\xB72\xB74\a\x462\x2\x2\xB73\xB72"+
		"\x3\x2\x2\x2\xB73\xB74\x3\x2\x2\x2\xB74\xB78\x3\x2\x2\x2\xB75\xB76\x5"+
		"\x47A\x23E\x2\xB76\xB77\a\x459\x2\x2\xB77\xB79\x3\x2\x2\x2\xB78\xB75\x3"+
		"\x2\x2\x2\xB78\xB79\x3\x2\x2\x2\xB79\xB7A\x3\x2\x2\x2\xB7A\xB7C\x5\x47A"+
		"\x23E\x2\xB7B\xB73\x3\x2\x2\x2\xB7B\xB7C\x3\x2\x2\x2\xB7C\xF7\x3\x2\x2"+
		"\x2\xB7D\xB7E\a\x11C\x2\x2\xB7E\xB81\a\x351\x2\x2\xB7F\xB80\a\x1B4\x2"+
		"\x2\xB80\xB82\a\x144\x2\x2\xB81\xB7F\x3\x2\x2\x2\xB81\xB82\x3\x2\x2\x2"+
		"\xB82\xB83\x3\x2\x2\x2\xB83\xB84\x5\x47A\x23E\x2\xB84\xF9\x3\x2\x2\x2"+
		"\xB85\xB86\a\x11C\x2\x2\xB86\xB87\a\x35B\x2\x2\xB87\xB88\a\x2E0\x2\x2"+
		"\xB88\xB89\a\x204\x2\x2\xB89\xB8A\x5\x47A\x23E\x2\xB8A\xFB\x3\x2\x2\x2"+
		"\xB8B\xB8C\a\x11C\x2\x2\xB8C\xB8D\a\x362\x2\x2\xB8D\xB90\a\x2CB\x2\x2"+
		"\xB8E\xB8F\a\x1B4\x2\x2\xB8F\xB91\a\x144\x2\x2\xB90\xB8E\x3\x2\x2\x2\xB90"+
		"\xB91\x3\x2\x2\x2\xB91\xB95\x3\x2\x2\x2\xB92\xB93\x5\x47A\x23E\x2\xB93"+
		"\xB94\a\x459\x2\x2\xB94\xB96\x3\x2\x2\x2\xB95\xB92\x3\x2\x2\x2\xB95\xB96"+
		"\x3\x2\x2\x2\xB96\xB97\x3\x2\x2\x2\xB97\xB98\x5\x47A\x23E\x2\xB98\xFD"+
		"\x3\x2\x2\x2\xB99\xB9A\a\x11C\x2\x2\xB9A\xB9D\a\x36E\x2\x2\xB9B\xB9C\a"+
		"\x1B4\x2\x2\xB9C\xB9E\a\x144\x2\x2\xB9D\xB9B\x3\x2\x2\x2\xB9D\xB9E\x3"+
		"\x2\x2\x2\xB9E\xBAD\x3\x2\x2\x2\xB9F\xBA1\a\x462\x2\x2\xBA0\xB9F\x3\x2"+
		"\x2\x2\xBA0\xBA1\x3\x2\x2\x2\xBA1\xBA5\x3\x2\x2\x2\xBA2\xBA3\x5\x47A\x23E"+
		"\x2\xBA3\xBA4\a\x459\x2\x2\xBA4\xBA6\x3\x2\x2\x2\xBA5\xBA2\x3\x2\x2\x2"+
		"\xBA5\xBA6\x3\x2\x2\x2\xBA6\xBAA\x3\x2\x2\x2\xBA7\xBA8\x5\x47A\x23E\x2"+
		"\xBA8\xBA9\a\x459\x2\x2\xBA9\xBAB\x3\x2\x2\x2\xBAA\xBA7\x3\x2\x2\x2\xBAA"+
		"\xBAB\x3\x2\x2\x2\xBAB\xBAC\x3\x2\x2\x2\xBAC\xBAE\x5\x47A\x23E\x2\xBAD"+
		"\xBA0\x3\x2\x2\x2\xBAD\xBAE\x3\x2\x2\x2\xBAE\xFF\x3\x2\x2\x2\xBAF\xBB0"+
		"\a\x11C\x2\x2\xBB0\xBB1\a\x371\x2\x2\xBB1\xBB2\a\x42\x2\x2\xBB2\xBB3\x5"+
		"\x47A\x23E\x2\xBB3\x101\x3\x2\x2\x2\xBB4\xBB5\a\x11C\x2\x2\xBB5\xBB6\a"+
		"\x371\x2\x2\xBB6\xBB7\a\x42\x2\x2\xBB7\xBB8\a\x39A\x2\x2\xBB8\xBB9\x5"+
		"\x47A\x23E\x2\xBB9\x103\x3\x2\x2\x2\xBBA\xBBB\a\x11C\x2\x2\xBBB\xBBC\a"+
		"\x371\x2\x2\xBBC\xBBD\a\x339\x2\x2\xBBD\xBBE\x5\x47A\x23E\x2\xBBE\x105"+
		"\x3\x2\x2\x2\xBBF\xBC0\a\x11C\x2\x2\xBC0\xBC1\a\x373\x2\x2\xBC1\xBC2\x5"+
		"\x47A\x23E\x2\xBC2\x107\x3\x2\x2\x2\xBC3\xBC5\a\x11C\x2\x2\xBC4\xBC6\a"+
		"\xC6\x2\x2\xBC5\xBC4\x3\x2\x2\x2\xBC5\xBC6\x3\x2\x2\x2\xBC6\xBC7\x3\x2"+
		"\x2\x2\xBC7\xBC8\a\x38B\x2\x2\xBC8\xBCC\a\x17E\x2\x2\xBC9\xBCA\x5\x47A"+
		"\x23E\x2\xBCA\xBCB\a\x459\x2\x2\xBCB\xBCD\x3\x2\x2\x2\xBCC\xBC9\x3\x2"+
		"\x2\x2\xBCC\xBCD\x3\x2\x2\x2\xBCD\xBCE\x3\x2\x2\x2\xBCE\xBCF\x5\x47A\x23E"+
		"\x2\xBCF\xBDB\aq\x2\x2\xBD0\xBD2\a\x462\x2\x2\xBD1\xBD0\x3\x2\x2\x2\xBD1"+
		"\xBD2\x3\x2\x2\x2\xBD2\xBD3\x3\x2\x2\x2\xBD3\xBD4\a}\x2\x2\xBD4\xBDC\x5"+
		"\x47A\x23E\x2\xBD5\xBD7\a\x462\x2\x2\xBD6\xBD5\x3\x2\x2\x2\xBD6\xBD7\x3"+
		"\x2\x2\x2\xBD7\xBD8\x3\x2\x2\x2\xBD8\xBD9\a?\x2\x2\xBD9\xBDA\a\x1EE\x2"+
		"\x2\xBDA\xBDC\x5\x47A\x23E\x2\xBDB\xBD1\x3\x2\x2\x2\xBDB\xBD6\x3\x2\x2"+
		"\x2\xBDC\xBDD\x3\x2\x2\x2\xBDD\xBDB\x3\x2\x2\x2\xBDD\xBDE\x3\x2\x2\x2"+
		"\xBDE\x109\x3\x2\x2\x2\xBDF\xBE0\a\x11C\x2\x2\xBE0\xBE4\a\x3A8\x2\x2\xBE1"+
		"\xBE2\x5\x47A\x23E\x2\xBE2\xBE3\a\x459\x2\x2\xBE3\xBE5\x3\x2\x2\x2\xBE4"+
		"\xBE1\x3\x2\x2\x2\xBE4\xBE5\x3\x2\x2\x2\xBE5\xBE6\x3\x2\x2\x2\xBE6\xBE7"+
		"\x5\x47A\x23E\x2\xBE7\xBE8\a\x459\x2\x2\xBE8\xBE9\x5\x47A\x23E\x2\xBE9"+
		"\x10B\x3\x2\x2\x2\xBEA\xBEB\a\x11C\x2\x2\xBEB\xBEC\a\x3C6\x2\x2\xBEC\xBED"+
		"\a\x1EE\x2\x2\xBED\xBF1\x5\x47A\x23E\x2\xBEE\xBEF\a\x313\x2\x2\xBEF\xBF0"+
		"\a\x2E1\x2\x2\xBF0\xBF2\a\x1EE\x2\x2\xBF1\xBEE\x3\x2\x2\x2\xBF1\xBF2\x3"+
		"\x2\x2\x2\xBF2\x10D\x3\x2\x2\x2\xBF3\xBF4\a\x11C\x2\x2\xBF4\xBF7\a\x3C8"+
		"\x2\x2\xBF5\xBF6\a\x1B4\x2\x2\xBF6\xBF8\a\x144\x2\x2\xBF7\xBF5\x3\x2\x2"+
		"\x2\xBF7\xBF8\x3\x2\x2\x2\xBF8\xBFC\x3\x2\x2\x2\xBF9\xBFA\x5\x47A\x23E"+
		"\x2\xBFA\xBFB\a\x459\x2\x2\xBFB\xBFD\x3\x2\x2\x2\xBFC\xBF9\x3\x2\x2\x2"+
		"\xBFC\xBFD\x3\x2\x2\x2\xBFD\xBFE\x3\x2\x2\x2\xBFE\xBFF\x5\x47A\x23E\x2"+
		"\xBFF\x10F\x3\x2\x2\x2\xC00\xC01\a\x11C\x2\x2\xC01\xC04\a\x40F\x2\x2\xC02"+
		"\xC03\a\x1B4\x2\x2\xC03\xC05\a\x144\x2\x2\xC04\xC02\x3\x2\x2\x2\xC04\xC05"+
		"\x3\x2\x2\x2\xC05\xC06\x3\x2\x2\x2\xC06\xC07\x5\x47A\x23E\x2\xC07\x111"+
		"\x3\x2\x2\x2\xC08\xC09\a\x11C\x2\x2\xC09\xC0A\a\x431\x2\x2\xC0A\xC0B\a"+
		"\x198\x2\x2\xC0B\xC0C\x5\x47A\x23E\x2\xC0C\x113\x3\x2\x2\x2\xC0D\xC0E"+
		"\a\x11C\x2\x2\xC0E\xC0F\a\x436\x2\x2\xC0F\xC10\a\x351\x2\x2\xC10\xC14"+
		"\a\x9C\x2\x2\xC11\xC12\x5\x47A\x23E\x2\xC12\xC13\a\x459\x2\x2\xC13\xC15"+
		"\x3\x2\x2\x2\xC14\xC11\x3\x2\x2\x2\xC14\xC15\x3\x2\x2\x2\xC15\xC16\x3"+
		"\x2\x2\x2\xC16\xC17\x5\x47A\x23E\x2\xC17\x115\x3\x2\x2\x2\xC18\xC19\a"+
		"\x110\x2\x2\xC19\xC28\a\x3EC\x2\x2\xC1A\xC1C\a\x462\x2\x2\xC1B\xC1A\x3"+
		"\x2\x2\x2\xC1B\xC1C\x3\x2\x2\x2\xC1C\xC20\x3\x2\x2\x2\xC1D\xC1E\x5\x47A"+
		"\x23E\x2\xC1E\xC1F\a\x459\x2\x2\xC1F\xC21\x3\x2\x2\x2\xC20\xC1D\x3\x2"+
		"\x2\x2\xC20\xC21\x3\x2\x2\x2\xC21\xC22\x3\x2\x2\x2\xC22\xC24\x5\x47A\x23E"+
		"\x2\xC23\xC1B\x3\x2\x2\x2\xC24\xC25\x3\x2\x2\x2\xC25\xC23\x3\x2\x2\x2"+
		"\xC25\xC26\x3\x2\x2\x2\xC26\xC29\x3\x2\x2\x2\xC27\xC29\a\x18\x2\x2\xC28"+
		"\xC23\x3\x2\x2\x2\xC28\xC27\x3\x2\x2\x2\xC29\xC2A\x3\x2\x2\x2\xC2A\xC34"+
		"\a\x28D\x2\x2\xC2B\xC2C\x5\x47A\x23E\x2\xC2C\xC2D\a\x459\x2\x2\xC2D\xC2F"+
		"\x3\x2\x2\x2\xC2E\xC2B\x3\x2\x2\x2\xC2E\xC2F\x3\x2\x2\x2\xC2F\xC30\x3"+
		"\x2\x2\x2\xC30\xC35\x5\x47A\x23E\x2\xC31\xC35\a\xDD\x2\x2\xC32\xC33\a"+
		"\x18\x2\x2\xC33\xC35\a\x371\x2\x2\xC34\xC2E\x3\x2\x2\x2\xC34\xC31\x3\x2"+
		"\x2\x2\xC34\xC32\x3\x2\x2\x2\xC35\x117\x3\x2\x2\x2\xC36\xC37\a\x126\x2"+
		"\x2\xC37\xC46\a\x3EC\x2\x2\xC38\xC3A\a\x462\x2\x2\xC39\xC38\x3\x2\x2\x2"+
		"\xC39\xC3A\x3\x2\x2\x2\xC3A\xC3E\x3\x2\x2\x2\xC3B\xC3C\x5\x47A\x23E\x2"+
		"\xC3C\xC3D\a\x459\x2\x2\xC3D\xC3F\x3\x2\x2\x2\xC3E\xC3B\x3\x2\x2\x2\xC3E"+
		"\xC3F\x3\x2\x2\x2\xC3F\xC40\x3\x2\x2\x2\xC40\xC42\x5\x47A\x23E\x2\xC41"+
		"\xC39\x3\x2\x2\x2\xC42\xC43\x3\x2\x2\x2\xC43\xC41\x3\x2\x2\x2\xC43\xC44"+
		"\x3\x2\x2\x2\xC44\xC47\x3\x2\x2\x2\xC45\xC47\a\x18\x2\x2\xC46\xC41\x3"+
		"\x2\x2\x2\xC46\xC45\x3\x2\x2\x2\xC47\xC48\x3\x2\x2\x2\xC48\xC52\a\x28D"+
		"\x2\x2\xC49\xC4A\x5\x47A\x23E\x2\xC4A\xC4B\a\x459\x2\x2\xC4B\xC4D\x3\x2"+
		"\x2\x2\xC4C\xC49\x3\x2\x2\x2\xC4C\xC4D\x3\x2\x2\x2\xC4D\xC4E\x3\x2\x2"+
		"\x2\xC4E\xC53\x5\x47A\x23E\x2\xC4F\xC53\a\xDD\x2\x2\xC50\xC51\a\x18\x2"+
		"\x2\xC51\xC53\a\x371\x2\x2\xC52\xC4C\x3\x2\x2\x2\xC52\xC4F\x3\x2\x2\x2"+
		"\xC52\xC50\x3\x2\x2\x2\xC53\x119\x3\x2\x2\x2\xC54\xC55\a\x20E\x2\x2\xC55"+
		"\xC56\a\x3CB\x2\x2\xC56\xC57\x5\x43C\x21F\x2\xC57\xC58\a\x1BF\x2\x2\xC58"+
		"\xC59\t\x1A\x2\x2\xC59\xC5D\a\x247\x2\x2\xC5A\xC5B\a\x423\x2\x2\xC5B\xC5E"+
		"\a\x446\x2\x2\xC5C\xC5E\a\x26E\x2\x2\xC5D\xC5A\x3\x2\x2\x2\xC5D\xC5C\x3"+
		"\x2\x2\x2\xC5D\xC5E\x3\x2\x2\x2\xC5E\xC60\x3\x2\x2\x2\xC5F\xC61\a\x463"+
		"\x2\x2\xC60\xC5F\x3\x2\x2\x2\xC60\xC61\x3\x2\x2\x2\xC61\x11B\x3\x2\x2"+
		"\x2\xC62\xC63\a\x3F0\x2\x2\xC63\xC64\a\x3CB\x2\x2\xC64\xC78\x5\x43C\x21F"+
		"\x2\xC65\xC66\a\x42B\x2\x2\xC66\xC67\a\x45E\x2\x2\xC67\xC68\a\x2B4\x2"+
		"\x2\xC68\xC72\a\x45E\x2\x2\xC69\xC6B\a\x462\x2\x2\xC6A\xC69\x3\x2\x2\x2"+
		"\xC6A\xC6B\x3\x2\x2\x2\xC6B\xC70\x3\x2\x2\x2\xC6C\xC71\a\x446\x2\x2\xC6D"+
		"\xC6E\a\x446\x2\x2\xC6E\xC6F\a\x3DF\x2\x2\xC6F\xC71\a\x446\x2\x2\xC70"+
		"\xC6C\x3\x2\x2\x2\xC70\xC6D\x3\x2\x2\x2\xC71\xC73\x3\x2\x2\x2\xC72\xC6A"+
		"\x3\x2\x2\x2\xC73\xC74\x3\x2\x2\x2\xC74\xC72\x3\x2\x2\x2\xC74\xC75\x3"+
		"\x2\x2\x2\xC75\xC76\x3\x2\x2\x2\xC76\xC77\a\x45F\x2\x2\xC77\xC79\a\x45F"+
		"\x2\x2\xC78\xC65\x3\x2\x2\x2\xC78\xC79\x3\x2\x2\x2\xC79\x11D\x3\x2\x2"+
		"\x2\xC7A\xC7B\a\xC9\x2\x2\xC7B\xC7C\a\x9D\x2\x2\xC7C\xC7D\a\x21B\x2\x2"+
		"\xC7D\xC7E\a\x1EE\x2\x2\xC7E\xC7F\x5\x47A\x23E\x2\xC7F\xC80\a\x42B\x2"+
		"\x2\xC80\xC81\a\x45E\x2\x2\xC81\xC82\a\x1F3\x2\x2\xC82\xC83\a\x44C\x2"+
		"\x2\xC83\xC84\a\x448\x2\x2\xC84\xC85\a\x462\x2\x2\xC85\xC86\a\x1F1\x2"+
		"\x2\xC86\xC87\a\x44C\x2\x2\xC87\xC88\a\x448\x2\x2\xC88\xC89\a\x45F\x2"+
		"\x2\xC89\x11F\x3\x2\x2\x2\xC8A\xC8B\a%\x2\x2\xC8B\xC8C\a\xCC\x2\x2\xC8C"+
		"\xC8D\x5\x47A\x23E\x2\xC8D\xC8E\a\x42B\x2\x2\xC8E\xC8F\a\x1AD\x2\x2\xC8F"+
		"\xC90\a\x44C\x2\x2\xC90\xC95\a\x448\x2\x2\xC91\xC92\a\x462\x2\x2\xC92"+
		"\xC93\a\x360\x2\x2\xC93\xC94\a\x44C\x2\x2\xC94\xC96\a\x448\x2\x2\xC95"+
		"\xC91\x3\x2\x2\x2\xC95\xC96\x3\x2\x2\x2\xC96\x121\x3\x2\x2\x2\xC97\xC98"+
		"\a\xC9\x2\x2\xC98\xC99\a\xCC\x2\x2\xC99\xC9A\x5\x47A\x23E\x2\xC9A\xC9B"+
		"\a\x42B\x2\x2\xC9B\xC9C\a\x1AD\x2\x2\xC9C\xC9D\a\x44C\x2\x2\xC9D\xCA2"+
		"\a\x448\x2\x2\xC9E\xC9F\a\x462\x2\x2\xC9F\xCA0\a\x360\x2\x2\xCA0\xCA1"+
		"\a\x44C\x2\x2\xCA1\xCA3\a\x448\x2\x2\xCA2\xC9E\x3\x2\x2\x2\xCA2\xCA3\x3"+
		"\x2\x2\x2\xCA3\xCA8\x3\x2\x2\x2\xCA4\xCA5\a\x16F\x2\x2\xCA5\xCA6\a\xCE"+
		"\x2\x2\xCA6\xCA7\a\x2E1\x2\x2\xCA7\xCA9\x5\x47A\x23E\x2\xCA8\xCA4\x3\x2"+
		"\x2\x2\xCA8\xCA9\x3\x2\x2\x2\xCA9\x123\x3\x2\x2\x2\xCAA\xCAB\a%\x2\x2"+
		"\xCAB\xCAC\a\xCE\x2\x2\xCAC\xCAD\a\x2E1\x2\x2\xCAD\xCB2\x5\x47A\x23E\x2"+
		"\xCAE\xCAF\a\x17E\x2\x2\xCAF\xCB0\a\x159\x2\x2\xCB0\xCB1\a\x44C\x2\x2"+
		"\xCB1\xCB3\a\x448\x2\x2\xCB2\xCAE\x3\x2\x2\x2\xCB2\xCB3\x3\x2\x2\x2\xCB3"+
		"\xCB5\x3\x2\x2\x2\xCB4\xCB6\t\x1B\x2\x2\xCB5\xCB4\x3\x2\x2\x2\xCB5\xCB6"+
		"\x3\x2\x2\x2\xCB6\x125\x3\x2\x2\x2\xCB7\xCB8\a\xC9\x2\x2\xCB8\xCB9\a\xCE"+
		"\x2\x2\xCB9\xCBA\a\x2E1\x2\x2\xCBA\xCBB\x5\x47A\x23E\x2\xCBB\xCBC\a\x17E"+
		"\x2\x2\xCBC\xCBD\a\x159\x2\x2\xCBD\xCBE\a\x44C\x2\x2\xCBE\xCBF\a\x448"+
		"\x2\x2\xCBF\x127\x3\x2\x2\x2\xCC0\xCC1\a\xC9\x2\x2\xCC1\xCC2\a\x12E\x2"+
		"\x2\xCC2\xCC5\x5\x47A\x23E\x2\xCC3\xCC4\a\x46\x2\x2\xCC4\xCC6\x5\x47A"+
		"\x23E\x2\xCC5\xCC3\x3\x2\x2\x2\xCC5\xCC6\x3\x2\x2\x2\xCC6\xCCA\x3\x2\x2"+
		"\x2\xCC7\xCC8\a\x3A6\x2\x2\xCC8\xCC9\a\x44C\x2\x2\xCC9\xCCB\t\x1C\x2\x2"+
		"\xCCA\xCC7\x3\x2\x2\x2\xCCA\xCCB\x3\x2\x2\x2\xCCB\xCCC\x3\x2\x2\x2\xCCC"+
		"\xCCD\a:\x2\x2\xCCD\xCCE\a\x3D5\x2\x2\xCCE\xCCF\a\x45E\x2\x2\xCCF\xCD0"+
		"\x5\x12E\x98\x2\xCD0\xD03\a\x45F\x2\x2\xCD1\xCD2\a\x16F\x2\x2\xCD2\xCD3"+
		"\a\x3F5\x2\x2\xCD3\xCD4\a\x45E\x2\x2\xCD4\xD04\a\x45F\x2\x2\xCD5\xCD6"+
		"\a\x16F\x2\x2\xCD6\xCD7\a\x375\x2\x2\xCD7\xCD8\a\x45E\x2\x2\xCD8\xCDD"+
		"\x5\x12C\x97\x2\xCD9\xCDB\a\x462\x2\x2\xCDA\xCD9\x3\x2\x2\x2\xCDA\xCDB"+
		"\x3\x2\x2\x2\xCDB\xCDC\x3\x2\x2\x2\xCDC\xCDE\x5\x12A\x96\x2\xCDD\xCDA"+
		"\x3\x2\x2\x2\xCDD\xCDE\x3\x2\x2\x2\xCDE\xCE5\x3\x2\x2\x2\xCDF\xCE1\a\x462"+
		"\x2\x2\xCE0\xCDF\x3\x2\x2\x2\xCE0\xCE1\x3\x2\x2\x2\xCE1\xCE2\x3\x2\x2"+
		"\x2\xCE2\xCE3\a\x23B\x2\x2\xCE3\xCE4\a\x44C\x2\x2\xCE4\xCE6\t\x1D\x2\x2"+
		"\xCE5\xCE0\x3\x2\x2\x2\xCE5\xCE6\x3\x2\x2\x2\xCE6\xCED\x3\x2\x2\x2\xCE7"+
		"\xCE9\a\x462\x2\x2\xCE8\xCE7\x3\x2\x2\x2\xCE8\xCE9\x3\x2\x2\x2\xCE9\xCEA"+
		"\x3\x2\x2\x2\xCEA\xCEB\a\x23C\x2\x2\xCEB\xCEC\a\x44C\x2\x2\xCEC\xCEE\a"+
		"\x446\x2\x2\xCED\xCE8\x3\x2\x2\x2\xCED\xCEE\x3\x2\x2\x2\xCEE\xCEF\x3\x2"+
		"\x2\x2\xCEF\xCF0\a\x45F\x2\x2\xCF0\xD04\x3\x2\x2\x2\xCF1\xCF2\a\x16F\x2"+
		"\x2\xCF2\xCF3\a\xDF\x2\x2\xCF3\xCF4\a\x45E\x2\x2\xCF4\xCF9\x5\x12C\x97"+
		"\x2\xCF5\xCF7\a\x462\x2\x2\xCF6\xCF5\x3\x2\x2\x2\xCF6\xCF7\x3\x2\x2\x2"+
		"\xCF7\xCF8\x3\x2\x2\x2\xCF8\xCFA\x5\x12A\x96\x2\xCF9\xCF6\x3\x2\x2\x2"+
		"\xCF9\xCFA\x3\x2\x2\x2\xCFA\xCFC\x3\x2\x2\x2\xCFB\xCFD\a\x462\x2\x2\xCFC"+
		"\xCFB\x3\x2\x2\x2\xCFC\xCFD\x3\x2\x2\x2\xCFD\xCFE\x3\x2\x2\x2\xCFE\xCFF"+
		"\a\x339\x2\x2\xCFF\xD00\a\x44C\x2\x2\xD00\xD01\t\x1E\x2\x2\xD01\xD02\a"+
		"\x45F\x2\x2\xD02\xD04\x3\x2\x2\x2\xD03\xCD1\x3\x2\x2\x2\xD03\xCD5\x3\x2"+
		"\x2\x2\xD03\xCF1\x3\x2\x2\x2\xD04\x129\x3\x2\x2\x2\xD05\xD06\a\x12B\x2"+
		"\x2\xD06\xD07\a\x44C\x2\x2\xD07\xD13\t\x1F\x2\x2\xD08\xD11\a\x17\x2\x2"+
		"\xD09\xD0B\a\x10\x2\x2\xD0A\xD0C\a\x2F6\x2\x2\xD0B\xD0A\x3\x2\x2\x2\xD0B"+
		"\xD0C\x3\x2\x2\x2\xD0C\xD12\x3\x2\x2\x2\xD0D\xD0F\a\x2F6\x2\x2\xD0E\xD10"+
		"\a\x10\x2\x2\xD0F\xD0E\x3\x2\x2\x2\xD0F\xD10\x3\x2\x2\x2\xD10\xD12\x3"+
		"\x2\x2\x2\xD11\xD09\x3\x2\x2\x2\xD11\xD0D\x3\x2\x2\x2\xD12\xD14\x3\x2"+
		"\x2\x2\xD13\xD08\x3\x2\x2\x2\xD13\xD14\x3\x2\x2\x2\xD14\x12B\x3\x2\x2"+
		"\x2\xD15\xD16\a\x45\x2\x2\xD16\xD27\a\x44C\x2\x2\xD17\xD19\a\x42A\x2\x2"+
		"\xD18\xD1A\t \x2\x2\xD19\xD18\x3\x2\x2\x2\xD19\xD1A\x3\x2\x2\x2\xD1A\xD1D"+
		"\x3\x2\x2\x2\xD1B\xD1C\a}\x2\x2\xD1C\xD1E\x5\x47A\x23E\x2\xD1D\xD1B\x3"+
		"\x2\x2\x2\xD1D\xD1E\x3\x2\x2\x2\xD1E\xD28\x3\x2\x2\x2\xD1F\xD20\a}\x2"+
		"\x2\xD20\xD22\x5\x47A\x23E\x2\xD21\xD23\a\x42A\x2\x2\xD22\xD21\x3\x2\x2"+
		"\x2\xD22\xD23\x3\x2\x2\x2\xD23\xD25\x3\x2\x2\x2\xD24\xD26\t \x2\x2\xD25"+
		"\xD24\x3\x2\x2\x2\xD25\xD26\x3\x2\x2\x2\xD26\xD28\x3\x2\x2\x2\xD27\xD17"+
		"\x3\x2\x2\x2\xD27\xD1F\x3\x2\x2\x2\xD28\x12D\x3\x2\x2\x2\xD29\xD2A\a\x207"+
		"\x2\x2\xD2A\xD2B\a\x44C\x2\x2\xD2B\xD38\a\x446\x2\x2\xD2C\xD2D\a\x462"+
		"\x2\x2\xD2D\xD2E\a\x206\x2\x2\xD2E\xD36\a\x44C\x2\x2\xD2F\xD37\a\x18\x2"+
		"\x2\xD30\xD33\a\x45E\x2\x2\xD31\xD34\a\x470\x2\x2\xD32\xD34\a\x448\x2"+
		"\x2\xD33\xD31\x3\x2\x2\x2\xD33\xD32\x3\x2\x2\x2\xD34\xD35\x3\x2\x2\x2"+
		"\xD35\xD37\a\x45F\x2\x2\xD36\xD2F\x3\x2\x2\x2\xD36\xD30\x3\x2\x2\x2\xD37"+
		"\xD39\x3\x2\x2\x2\xD38\xD2C\x3\x2\x2\x2\xD38\xD39\x3\x2\x2\x2\xD39\x12F"+
		"\x3\x2\x2\x2\xD3A\xD3B\a\xC9\x2\x2\xD3B\xD3C\a\x13B\x2\x2\xD3C\xD3D\a"+
		"\x26B\x2\x2\xD3D\xD3E\x5\x47A\x23E\x2\xD3E\xD43\a\x28D\x2\x2\xD3F\xD44"+
		"\a\x371\x2\x2\xD40\xD44\a\xDD\x2\x2\xD41\xD42\a\x2EB\x2\x2\xD42\xD44\x5"+
		"\x47A\x23E\x2\xD43\xD3F\x3\x2\x2\x2\xD43\xD40\x3\x2\x2\x2\xD43\xD41\x3"+
		"\x2\x2\x2\xD44\xD47\x3\x2\x2\x2\xD45\xD46\a\x42B\x2\x2\xD46\xD48\a\x155"+
		"\x2\x2\xD47\xD45\x3\x2\x2\x2\xD47\xD48\x3\x2\x2\x2\xD48\xD49\x3\x2\x2"+
		"\x2\xD49\xD4E\a\x16F\x2\x2\xD4A\xD4C\a\x462\x2\x2\xD4B\xD4A\x3\x2\x2\x2"+
		"\xD4B\xD4C\x3\x2\x2\x2\xD4C\xD4D\x3\x2\x2\x2\xD4D\xD4F\x5\x47A\x23E\x2"+
		"\xD4E\xD4B\x3\x2\x2\x2\xD4F\xD50\x3\x2\x2\x2\xD50\xD4E\x3\x2\x2\x2\xD50"+
		"\xD51\x3\x2\x2\x2\xD51\xD52\x3\x2\x2\x2\xD52\xD53\a\x3DF\x2\x2\xD53\xD54"+
		"\a\x373\x2\x2\xD54\xD55\a\x448\x2\x2\xD55\xD56\a\x462\x2\x2\xD56\xD57"+
		"\a\x448\x2\x2\xD57\x131\x3\x2\x2\x2\xD58\xD59\t\x18\x2\x2\xD59\xD5A\a"+
		"\x13B\x2\x2\xD5A\xD5B\a\x377\x2\x2\xD5B\xD5C\x5\x47A\x23E\x2\xD5C\xD5D"+
		"\a\x28D\x2\x2\xD5D\xDA1\a\x371\x2\x2\xD5E\xD60\a\x462\x2\x2\xD5F\xD5E"+
		"\x3\x2\x2\x2\xD5F\xD60\x3\x2\x2\x2\xD60\xD61\x3\x2\x2\x2\xD61\xD62\a\r"+
		"\x2\x2\xD62\xD66\a\x13B\x2\x2\xD63\xD64\x5\x47A\x23E\x2\xD64\xD65\a\x459"+
		"\x2\x2\xD65\xD67\x3\x2\x2\x2\xD66\xD63\x3\x2\x2\x2\xD66\xD67\x3\x2\x2"+
		"\x2\xD67\xD68\x3\x2\x2\x2\xD68\xD69\x5\x47A\x23E\x2\xD69\xD6A\a\x459\x2"+
		"\x2\xD6A\xD6B\x5\x47A\x23E\x2\xD6B\xD9C\x3\x2\x2\x2\xD6C\xD7A\a\x45E\x2"+
		"\x2\xD6D\xD77\a\x37C\x2\x2\xD6E\xD70\a\x462\x2\x2\xD6F\xD6E\x3\x2\x2\x2"+
		"\xD6F\xD70\x3\x2\x2\x2\xD70\xD71\x3\x2\x2\x2\xD71\xD72\x5\x47A\x23E\x2"+
		"\xD72\xD73\a\x44C\x2\x2\xD73\xD74\t!\x2\x2\xD74\xD76\x3\x2\x2\x2\xD75"+
		"\xD6F\x3\x2\x2\x2\xD76\xD79\x3\x2\x2\x2\xD77\xD75\x3\x2\x2\x2\xD77\xD78"+
		"\x3\x2\x2\x2\xD78\xD7B\x3\x2\x2\x2\xD79\xD77\x3\x2\x2\x2\xD7A\xD6D\x3"+
		"\x2\x2\x2\xD7A\xD7B\x3\x2\x2\x2\xD7B\xD90\x3\x2\x2\x2\xD7C\xD7D\a\n\x2"+
		"\x2\xD7D\xD8A\a\x45E\x2\x2\xD7E\xD80\a\x462\x2\x2\xD7F\xD7E\x3\x2\x2\x2"+
		"\xD7F\xD80\x3\x2\x2\x2\xD80\xD84\x3\x2\x2\x2\xD81\xD82\x5\x47A\x23E\x2"+
		"\xD82\xD83\a\x459\x2\x2\xD83\xD85\x3\x2\x2\x2\xD84\xD81\x3\x2\x2\x2\xD84"+
		"\xD85\x3\x2\x2\x2\xD85\xD86\x3\x2\x2\x2\xD86\xD87\x5\x47A\x23E\x2\xD87"+
		"\xD88\a\x459\x2\x2\xD88\xD89\x5\x47A\x23E\x2\xD89\xD8B\x3\x2\x2\x2\xD8A"+
		"\xD7F\x3\x2\x2\x2\xD8B\xD8C\x3\x2\x2\x2\xD8C\xD8A\x3\x2\x2\x2\xD8C\xD8D"+
		"\x3\x2\x2\x2\xD8D\xD8E\x3\x2\x2\x2\xD8E\xD8F\a\x45F\x2\x2\xD8F\xD91\x3"+
		"\x2\x2\x2\xD90\xD7C\x3\x2\x2\x2\xD91\xD92\x3\x2\x2\x2\xD92\xD90\x3\x2"+
		"\x2\x2\xD92\xD93\x3\x2\x2\x2\xD93\xD96\x3\x2\x2\x2\xD94\xD95\a\x428\x2"+
		"\x2\xD95\xD97\x5\x134\x9B\x2\xD96\xD94\x3\x2\x2\x2\xD96\xD97\x3\x2\x2"+
		"\x2\xD97\xD98\x3\x2\x2\x2\xD98\xD99\a\x45F\x2\x2\xD99\xD9B\x3\x2\x2\x2"+
		"\xD9A\xD6C\x3\x2\x2\x2\xD9B\xD9E\x3\x2\x2\x2\xD9C\xD9A\x3\x2\x2\x2\xD9C"+
		"\xD9D\x3\x2\x2\x2\xD9D\xDA0\x3\x2\x2\x2\xD9E\xD9C\x3\x2\x2\x2\xD9F\xD5F"+
		"\x3\x2\x2\x2\xDA0\xDA3\x3\x2\x2\x2\xDA1\xD9F\x3\x2\x2\x2\xDA1\xDA2\x3"+
		"\x2\x2\x2\xDA2\xDB4\x3\x2\x2\x2\xDA3\xDA1\x3\x2\x2\x2\xDA4\xDA6\a\x462"+
		"\x2\x2\xDA5\xDA4\x3\x2\x2\x2\xDA5\xDA6\x3\x2\x2\x2\xDA6\xDA7\x3\x2\x2"+
		"\x2\xDA7\xDA8\a\x11C\x2\x2\xDA8\xDAC\a\x13B\x2\x2\xDA9\xDAA\x5\x47A\x23E"+
		"\x2\xDAA\xDAB\a\x459\x2\x2\xDAB\xDAD\x3\x2\x2\x2\xDAC\xDA9\x3\x2\x2\x2"+
		"\xDAC\xDAD\x3\x2\x2\x2\xDAD\xDAE\x3\x2\x2\x2\xDAE\xDAF\x5\x47A\x23E\x2"+
		"\xDAF\xDB0\a\x459\x2\x2\xDB0\xDB1\x5\x47A\x23E\x2\xDB1\xDB3\x3\x2\x2\x2"+
		"\xDB2\xDA5\x3\x2\x2\x2\xDB3\xDB6\x3\x2\x2\x2\xDB4\xDB2\x3\x2\x2\x2\xDB4"+
		"\xDB5\x3\x2\x2\x2\xDB5\xDE0\x3\x2\x2\x2\xDB6\xDB4\x3\x2\x2\x2\xDB7\xDB8"+
		"\a\r\x2\x2\xDB8\xDBC\a\x3D2\x2\x2\xDB9\xDBA\x5\x47A\x23E\x2\xDBA\xDBB"+
		"\a\x459\x2\x2\xDBB\xDBD\x3\x2\x2\x2\xDBC\xDB9\x3\x2\x2\x2\xDBC\xDBD\x3"+
		"\x2\x2\x2\xDBD\xDBE\x3\x2\x2\x2\xDBE\xDBF\x5\x47A\x23E\x2\xDBF\xDC0\a"+
		"\x459\x2\x2\xDC0\xDC1\x5\x47A\x23E\x2\xDC1\xDDB\x3\x2\x2\x2\xDC2\xDC3"+
		"\a\x45E\x2\x2\xDC3\xDD3\a\x37C\x2\x2\xDC4\xDC6\a\x462\x2\x2\xDC5\xDC4"+
		"\x3\x2\x2\x2\xDC5\xDC6\x3\x2\x2\x2\xDC6\xDC7\x3\x2\x2\x2\xDC7\xDC8\x5"+
		"\x47A\x23E\x2\xDC8\xDD1\a\x44C\x2\x2\xDC9\xDCB\a\x45E\x2\x2\xDCA\xDC9"+
		"\x3\x2\x2\x2\xDCA\xDCB\x3\x2\x2\x2\xDCB\xDCC\x3\x2\x2\x2\xDCC\xDCE\a\x446"+
		"\x2\x2\xDCD\xDCF\a\x45F\x2\x2\xDCE\xDCD\x3\x2\x2\x2\xDCE\xDCF\x3\x2\x2"+
		"\x2\xDCF\xDD2\x3\x2\x2\x2\xDD0\xDD2\a\x448\x2\x2\xDD1\xDCA\x3\x2\x2\x2"+
		"\xDD1\xDD0\x3\x2\x2\x2\xDD2\xDD4\x3\x2\x2\x2\xDD3\xDC5\x3\x2\x2\x2\xDD4"+
		"\xDD5\x3\x2\x2\x2\xDD5\xDD3\x3\x2\x2\x2\xDD5\xDD6\x3\x2\x2\x2\xDD6\xDD7"+
		"\x3\x2\x2\x2\xDD7\xDD8\a\x45F\x2\x2\xDD8\xDDA\x3\x2\x2\x2\xDD9\xDC2\x3"+
		"\x2\x2\x2\xDDA\xDDD\x3\x2\x2\x2\xDDB\xDD9\x3\x2\x2\x2\xDDB\xDDC\x3\x2"+
		"\x2\x2\xDDC\xDDF\x3\x2\x2\x2\xDDD\xDDB\x3\x2\x2\x2\xDDE\xDB7\x3\x2\x2"+
		"\x2\xDDF\xDE2\x3\x2\x2\x2\xDE0\xDDE\x3\x2\x2\x2\xDE0\xDE1\x3\x2\x2\x2"+
		"\xDE1\xDF0\x3\x2\x2\x2\xDE2\xDE0\x3\x2\x2\x2\xDE3\xDE4\a\x11C\x2\x2\xDE4"+
		"\xDE8\a\x3D2\x2\x2\xDE5\xDE6\x5\x47A\x23E\x2\xDE6\xDE7\a\x459\x2\x2\xDE7"+
		"\xDE9\x3\x2\x2\x2\xDE8\xDE5\x3\x2\x2\x2\xDE8\xDE9\x3\x2\x2\x2\xDE9\xDEA"+
		"\x3\x2\x2\x2\xDEA\xDEB\x5\x47A\x23E\x2\xDEB\xDEC\a\x459\x2\x2\xDEC\xDED"+
		"\x5\x47A\x23E\x2\xDED\xDEF\x3\x2\x2\x2\xDEE\xDE3\x3\x2\x2\x2\xDEF\xDF2"+
		"\x3\x2\x2\x2\xDF0\xDEE\x3\x2\x2\x2\xDF0\xDF1\x3\x2\x2\x2\xDF1\xE34\x3"+
		"\x2\x2\x2\xDF2\xDF0\x3\x2\x2\x2\xDF3\xDF4\a\x42B\x2\x2\xDF4\xDFC\a\x45E"+
		"\x2\x2\xDF5\xDF7\a\x462\x2\x2\xDF6\xDF5\x3\x2\x2\x2\xDF6\xDF7\x3\x2\x2"+
		"\x2\xDF7\xDF8\x3\x2\x2\x2\xDF8\xDF9\a\x22B\x2\x2\xDF9\xDFA\a\x44C\x2\x2"+
		"\xDFA\xDFB\a\x446\x2\x2\xDFB\xDFD\t\"\x2\x2\xDFC\xDF6\x3\x2\x2\x2\xDFC"+
		"\xDFD\x3\x2\x2\x2\xDFD\xE04\x3\x2\x2\x2\xDFE\xE00\a\x462\x2\x2\xDFF\xDFE"+
		"\x3\x2\x2\x2\xDFF\xE00\x3\x2\x2\x2\xE00\xE01\x3\x2\x2\x2\xE01\xE02\a\x13C"+
		"\x2\x2\xE02\xE03\a\x44C\x2\x2\xE03\xE05\t#\x2\x2\xE04\xDFF\x3\x2\x2\x2"+
		"\xE04\xE05\x3\x2\x2\x2\xE05\xE10\x3\x2\x2\x2\xE06\xE08\a\x462\x2\x2\xE07"+
		"\xE06\x3\x2\x2\x2\xE07\xE08\x3\x2\x2\x2\xE08\xE09\x3\x2\x2\x2\xE09\xE0A"+
		"\a\x225\x2\x2\xE0A\xE0E\a\x44C\x2\x2\xE0B\xE0C\a\x446\x2\x2\xE0C\xE0F"+
		"\a\x35F\x2\x2\xE0D\xE0F\a\x1C8\x2\x2\xE0E\xE0B\x3\x2\x2\x2\xE0E\xE0D\x3"+
		"\x2\x2\x2\xE0F\xE11\x3\x2\x2\x2\xE10\xE07\x3\x2\x2\x2\xE10\xE11\x3\x2"+
		"\x2\x2\xE11\xE19\x3\x2\x2\x2\xE12\xE14\a\x462\x2\x2\xE13\xE12\x3\x2\x2"+
		"\x2\xE13\xE14\x3\x2\x2\x2\xE14\xE15\x3\x2\x2\x2\xE15\xE16\a\x228\x2\x2"+
		"\xE16\xE17\a\x44C\x2\x2\xE17\xE18\a\x446\x2\x2\xE18\xE1A\t\"\x2\x2\xE19"+
		"\xE13\x3\x2\x2\x2\xE19\xE1A\x3\x2\x2\x2\xE1A\xE21\x3\x2\x2\x2\xE1B\xE1D"+
		"\a\x462\x2\x2\xE1C\xE1B\x3\x2\x2\x2\xE1C\xE1D\x3\x2\x2\x2\xE1D\xE1E\x3"+
		"\x2\x2\x2\xE1E\xE1F\a\x238\x2\x2\xE1F\xE20\a\x44C\x2\x2\xE20\xE22\t$\x2"+
		"\x2\xE21\xE1C\x3\x2\x2\x2\xE21\xE22\x3\x2\x2\x2\xE22\xE29\x3\x2\x2\x2"+
		"\xE23\xE25\a\x462\x2\x2\xE24\xE23\x3\x2\x2\x2\xE24\xE25\x3\x2\x2\x2\xE25"+
		"\xE26\x3\x2\x2\x2\xE26\xE27\a\x3E5\x2\x2\xE27\xE28\a\x44C\x2\x2\xE28\xE2A"+
		"\t\x13\x2\x2\xE29\xE24\x3\x2\x2\x2\xE29\xE2A\x3\x2\x2\x2\xE2A\xE31\x3"+
		"\x2\x2\x2\xE2B\xE2D\a\x462\x2\x2\xE2C\xE2B\x3\x2\x2\x2\xE2C\xE2D\x3\x2"+
		"\x2\x2\xE2D\xE2E\x3\x2\x2\x2\xE2E\xE2F\a\x3A4\x2\x2\xE2F\xE30\a\x44C\x2"+
		"\x2\xE30\xE32\t\x13\x2\x2\xE31\xE2C\x3\x2\x2\x2\xE31\xE32\x3\x2\x2\x2"+
		"\xE32\xE33\x3\x2\x2\x2\xE33\xE35\a\x45F\x2\x2\xE34\xDF3\x3\x2\x2\x2\xE34"+
		"\xE35\x3\x2\x2\x2\xE35\xE39\x3\x2\x2\x2\xE36\xE37\a\x3A6\x2\x2\xE37\xE38"+
		"\a\x44C\x2\x2\xE38\xE3A\t%\x2\x2\xE39\xE36\x3\x2\x2\x2\xE39\xE3A\x3\x2"+
		"\x2\x2\xE3A\x133\x3\x2\x2\x2\xE3B\xE3D\a\x462\x2\x2\xE3C\xE3B\x3\x2\x2"+
		"\x2\xE3C\xE3D\x3\x2\x2\x2\xE3D\xE3F\x3\x2\x2\x2\xE3E\xE40\t&\x2\x2\xE3F"+
		"\xE3E\x3\x2\x2\x2\xE3F\xE40\x3\x2\x2\x2\xE40\xE42\x3\x2\x2\x2\xE41\xE43"+
		"\a\x26A\x2\x2\xE42\xE41\x3\x2\x2\x2\xE42\xE43\x3\x2\x2\x2\xE43\xE49\x3"+
		"\x2\x2\x2\xE44\xE4A\x5\x136\x9C\x2\xE45\xE46\a\x45E\x2\x2\xE46\xE47\x5"+
		"\x134\x9B\x2\xE47\xE48\a\x45F\x2\x2\xE48\xE4A\x3\x2\x2\x2\xE49\xE44\x3"+
		"\x2\x2\x2\xE49\xE45\x3\x2\x2\x2\xE4A\xE4C\x3\x2\x2\x2\xE4B\xE3C\x3\x2"+
		"\x2\x2\xE4C\xE4D\x3\x2\x2\x2\xE4D\xE4B\x3\x2\x2\x2\xE4D\xE4E\x3\x2\x2"+
		"\x2\xE4E\x135\x3\x2\x2\x2\xE4F\xE55\x5\x138\x9D\x2\xE50\xE51\a\x45E\x2"+
		"\x2\xE51\xE52\x5\x134\x9B\x2\xE52\xE53\a\x45F\x2\x2\xE53\xE55\x3\x2\x2"+
		"\x2\xE54\xE4F\x3\x2\x2\x2\xE54\xE50\x3\x2\x2\x2\xE55\x137\x3\x2\x2\x2"+
		"\xE56\xE73\x5\x47A\x23E\x2\xE57\xE62\x5\x47A\x23E\x2\xE58\xE59\x5\x47A"+
		"\x23E\x2\xE59\xE5A\a\x459\x2\x2\xE5A\xE5C\x3\x2\x2\x2\xE5B\xE58\x3\x2"+
		"\x2\x2\xE5B\xE5C\x3\x2\x2\x2\xE5C\xE5D\x3\x2\x2\x2\xE5D\xE5E\x5\x47A\x23E"+
		"\x2\xE5E\xE5F\a\x459\x2\x2\xE5F\xE60\x5\x47A\x23E\x2\xE60\xE62\x3\x2\x2"+
		"\x2\xE61\xE57\x3\x2\x2\x2\xE61\xE5B\x3\x2\x2\x2\xE62\xE6E\x3\x2\x2\x2"+
		"\xE63\xE6F\a\x44C\x2\x2\xE64\xE65\a\x44E\x2\x2\xE65\xE6F\a\x44D\x2\x2"+
		"\xE66\xE67\a\x44F\x2\x2\xE67\xE6F\a\x44C\x2\x2\xE68\xE6F\a\x44D\x2\x2"+
		"\xE69\xE6A\a\x44D\x2\x2\xE6A\xE6F\a\x44C\x2\x2\xE6B\xE6F\a\x44E\x2\x2"+
		"\xE6C\xE6D\a\x44E\x2\x2\xE6D\xE6F\a\x44C\x2\x2\xE6E\xE63\x3\x2\x2\x2\xE6E"+
		"\xE64\x3\x2\x2\x2\xE6E\xE66\x3\x2\x2\x2\xE6E\xE68\x3\x2\x2\x2\xE6E\xE69"+
		"\x3\x2\x2\x2\xE6E\xE6B\x3\x2\x2\x2\xE6E\xE6C\x3\x2\x2\x2\xE6F\xE70\x3"+
		"\x2\x2\x2\xE70\xE71\t!\x2\x2\xE71\xE73\x3\x2\x2\x2\xE72\xE56\x3\x2\x2"+
		"\x2\xE72\xE61\x3\x2\x2\x2\xE73\xE8F\x3\x2\x2\x2\xE74\xE75\x5\x47A\x23E"+
		"\x2\xE75\xE76\a\x459\x2\x2\xE76\xE78\x3\x2\x2\x2\xE77\xE74\x3\x2\x2\x2"+
		"\xE77\xE78\x3\x2\x2\x2\xE78\xE79\x3\x2\x2\x2\xE79\xE7A\x5\x47A\x23E\x2"+
		"\xE7A\xE7B\a\x459\x2\x2\xE7B\xE7C\x5\x47A\x23E\x2\xE7C\xE8A\a\x45E\x2"+
		"\x2\xE7D\xE8B\x5\x47A\x23E\x2\xE7E\xE7F\x5\x47A\x23E\x2\xE7F\xE80\a\x459"+
		"\x2\x2\xE80\xE82\x3\x2\x2\x2\xE81\xE7E\x3\x2\x2\x2\xE81\xE82\x3\x2\x2"+
		"\x2\xE82\xE83\x3\x2\x2\x2\xE83\xE84\x5\x47A\x23E\x2\xE84\xE85\a\x459\x2"+
		"\x2\xE85\xE86\x5\x47A\x23E\x2\xE86\xE87\x3\x2\x2\x2\xE87\xE88\a\x462\x2"+
		"\x2\xE88\xE89\t!\x2\x2\xE89\xE8B\x3\x2\x2\x2\xE8A\xE7D\x3\x2\x2\x2\xE8A"+
		"\xE81\x3\x2\x2\x2\xE8B\xE8C\x3\x2\x2\x2\xE8C\xE8D\a\x45F\x2\x2\xE8D\xE8F"+
		"\x3\x2\x2\x2\xE8E\xE72\x3\x2\x2\x2\xE8E\xE77\x3\x2\x2\x2\xE8F\x139\x3"+
		"\x2\x2\x2\xE90\xE91\a%\x2\x2\xE91\xE92\a\x14D\x2\x2\xE92\xE93\a\xDC\x2"+
		"\x2\xE93\xE94\a\x396\x2\x2\xE94\xE95\x5\x47A\x23E\x2\xE95\xEA5\a\x37C"+
		"\x2\x2\xE96\xE97\a\x20D\x2\x2\xE97\xE98\a\x44C\x2\x2\xE98\xE9A\a\x448"+
		"\x2\x2\xE99\xE9B\a\x462\x2\x2\xE9A\xE99\x3\x2\x2\x2\xE9A\xE9B\x3\x2\x2"+
		"\x2\xE9B\xEA6\x3\x2\x2\x2\xE9C\xE9D\a\x328\x2\x2\xE9D\xE9E\a\x44C\x2\x2"+
		"\xE9E\xEA0\a\x448\x2\x2\xE9F\xEA1\a\x462\x2\x2\xEA0\xE9F\x3\x2\x2\x2\xEA0"+
		"\xEA1\x3\x2\x2\x2\xEA1\xEA6\x3\x2\x2\x2\xEA2\xEA3\a\xCC\x2\x2\xEA3\xEA4"+
		"\a\x44C\x2\x2\xEA4\xEA6\x5\x47A\x23E\x2\xEA5\xE96\x3\x2\x2\x2\xEA5\xE9C"+
		"\x3\x2\x2\x2\xEA5\xEA2\x3\x2\x2\x2\xEA6\xEA7\x3\x2\x2\x2\xEA7\xEA5\x3"+
		"\x2\x2\x2\xEA7\xEA8\x3\x2\x2\x2\xEA8\xEC0\x3\x2\x2\x2\xEA9\xEAA\a%\x2"+
		"\x2\xEAA\xEAB\a\x14D\x2\x2\xEAB\xEAC\a\xDC\x2\x2\xEAC\xEAD\a\x396\x2\x2"+
		"\xEAD\xEAE\x5\x47A\x23E\x2\xEAE\xEAF\a\x42B\x2\x2\xEAF\xEB0\a\x45E\x2"+
		"\x2\xEB0\xEB1\a\x3F7\x2\x2\xEB1\xEB2\a\x44C\x2\x2\xEB2\xEB3\a\x64\x2\x2"+
		"\xEB3\xEB4\a\x462\x2\x2\xEB4\xEB5\a\x20D\x2\x2\xEB5\xEB6\a\x44C\x2\x2"+
		"\xEB6\xEBB\a\x448\x2\x2\xEB7\xEB8\a\x462\x2\x2\xEB8\xEB9\a\xCC\x2\x2\xEB9"+
		"\xEBA\a\x44C\x2\x2\xEBA\xEBC\x5\x47A\x23E\x2\xEBB\xEB7\x3\x2\x2\x2\xEBB"+
		"\xEBC\x3\x2\x2\x2\xEBC\xEBD\x3\x2\x2\x2\xEBD\xEBE\a\x45F\x2\x2\xEBE\xEC0"+
		"\x3\x2\x2\x2\xEBF\xE90\x3\x2\x2\x2\xEBF\xEA9\x3\x2\x2\x2\xEC0\x13B\x3"+
		"\x2\x2\x2\xEC1\xEC2\a%\x2\x2\xEC2\xEC3\a\x14D\x2\x2\xEC3\xEC4\a\x1FE\x2"+
		"\x2\xEC4\xEC7\x5\x47A\x23E\x2\xEC5\xEC6\a\x46\x2\x2\xEC6\xEC8\x5\x47A"+
		"\x23E\x2\xEC7\xEC5\x3\x2\x2\x2\xEC7\xEC8\x3\x2\x2\x2\xEC8\xEC9\x3\x2\x2"+
		"\x2\xEC9\xECA\t\'\x2\x2\xECA\xECB\a\x45E\x2\x2\xECB\xECC\a\xB9\x2\x2\xECC"+
		"\xED0\a\x44C\x2\x2\xECD\xED1\a\x448\x2\x2\xECE\xED1\a\x449\x2\x2\xECF"+
		"\xED1\a\x264\x2\x2\xED0\xECD\x3\x2\x2\x2\xED0\xECE\x3\x2\x2\x2\xED0\xECF"+
		"\x3\x2\x2\x2\xED1\xED2\x3\x2\x2\x2\xED2\xED3\a\x462\x2\x2\xED3\xED4\a"+
		"\x2C9\x2\x2\xED4\xED6\a\x44C\x2\x2\xED5\xED7\t(\x2\x2\xED6\xED5\x3\x2"+
		"\x2\x2\xED6\xED7\x3\x2\x2\x2\xED7\xED8\x3\x2\x2\x2\xED8\xED9\a\x45F\x2"+
		"\x2\xED9\xEDA\x3\x2\x2\x2\xEDA\xEE4\a\x42B\x2\x2\xEDB\xEDD\a\x462\x2\x2"+
		"\xEDC\xEDB\x3\x2\x2\x2\xEDC\xEDD\x3\x2\x2\x2\xEDD\xEDE\x3\x2\x2\x2\xEDE"+
		"\xEDF\a\x1F6\x2\x2\xEDF\xEE0\a\x44C\x2\x2\xEE0\xEE5\t)\x2\x2\xEE1\xEE2"+
		"\a\xE5\x2\x2\xEE2\xEE3\a\x44C\x2\x2\xEE3\xEE5\x5\x47A\x23E\x2\xEE4\xEDC"+
		"\x3\x2\x2\x2\xEE4\xEE1\x3\x2\x2\x2\xEE5\xEE6\x3\x2\x2\x2\xEE6\xEE4\x3"+
		"\x2\x2\x2\xEE6\xEE7\x3\x2\x2\x2\xEE7\xEE8\x3\x2\x2\x2\xEE8\xEE9\a\x45F"+
		"\x2\x2\xEE9\x13D\x3\x2\x2\x2\xEEA\xEEB\a\xC9\x2\x2\xEEB\xEEC\a\x14D\x2"+
		"\x2\xEEC\xEED\a\x1FE\x2\x2\xEED\xEF0\x5\x47A\x23E\x2\xEEE\xEEF\a\x46\x2"+
		"\x2\xEEF\xEF1\x5\x47A\x23E\x2\xEF0\xEEE\x3\x2\x2\x2\xEF0\xEF1\x3\x2\x2"+
		"\x2\xEF1\xEF2\x3\x2\x2\x2\xEF2\xEF4\a\x17E\x2\x2\xEF3\xEF5\a\x462\x2\x2"+
		"\xEF4\xEF3\x3\x2\x2\x2\xEF4\xEF5\x3\x2\x2\x2\xEF5\xEF7\x3\x2\x2\x2\xEF6"+
		"\xEF8\a\x45E\x2\x2\xEF7\xEF6\x3\x2\x2\x2\xEF7\xEF8\x3\x2\x2\x2\xEF8\xEFB"+
		"\x3\x2\x2\x2\xEF9\xEFA\a\xB9\x2\x2\xEFA\xEFC\a\x44C\x2\x2\xEFB\xEF9\x3"+
		"\x2\x2\x2\xEFB\xEFC\x3\x2\x2\x2\xEFC\xF00\x3\x2\x2\x2\xEFD\xF01\a\x448"+
		"\x2\x2\xEFE\xF01\a\x449\x2\x2\xEFF\xF01\a\x264\x2\x2\xF00\xEFD\x3\x2\x2"+
		"\x2\xF00\xEFE\x3\x2\x2\x2\xF00\xEFF\x3\x2\x2\x2\xF01\xF09\x3\x2\x2\x2"+
		"\xF02\xF03\a\x462\x2\x2\xF03\xF04\a\x2C9\x2\x2\xF04\xF06\a\x44C\x2\x2"+
		"\xF05\xF07\t(\x2\x2\xF06\xF05\x3\x2\x2\x2\xF06\xF07\x3\x2\x2\x2\xF07\xF08"+
		"\x3\x2\x2\x2\xF08\xF0A\a\x45F\x2\x2\xF09\xF02\x3\x2\x2\x2\xF09\xF0A\x3"+
		"\x2\x2\x2\xF0A\xF1A\x3\x2\x2\x2\xF0B\xF15\a\x42B\x2\x2\xF0C\xF0E\a\x462"+
		"\x2\x2\xF0D\xF0C\x3\x2\x2\x2\xF0D\xF0E\x3\x2\x2\x2\xF0E\xF0F\x3\x2\x2"+
		"\x2\xF0F\xF10\a\x1F6\x2\x2\xF10\xF11\a\x44C\x2\x2\xF11\xF16\t)\x2\x2\xF12"+
		"\xF13\a\xE5\x2\x2\xF13\xF14\a\x44C\x2\x2\xF14\xF16\x5\x47A\x23E\x2\xF15"+
		"\xF0D\x3\x2\x2\x2\xF15\xF12\x3\x2\x2\x2\xF16\xF17\x3\x2\x2\x2\xF17\xF15"+
		"\x3\x2\x2\x2\xF17\xF18\x3\x2\x2\x2\xF18\xF19\x3\x2\x2\x2\xF19\xF1B\a\x45F"+
		"\x2\x2\xF1A\xF0B\x3\x2\x2\x2\xF1A\xF1B\x3\x2\x2\x2\xF1B\x13F\x3\x2\x2"+
		"\x2\xF1C\xF1D\a%\x2\x2\xF1D\xF1E\a\x14D\x2\x2\xF1E\xF1F\a\x326\x2\x2\xF1F"+
		"\xF22\a\x2CC\x2\x2\xF20\xF23\x5\x47A\x23E\x2\xF21\xF23\a\xF9\x2\x2\xF22"+
		"\xF20\x3\x2\x2\x2\xF22\xF21\x3\x2\x2\x2\xF23\xF24\x3\x2\x2\x2\xF24\xF25"+
		"\a\x42B\x2\x2\xF25\xF26\a\x45E\x2\x2\xF26\xF27\a\x224\x2\x2\xF27\xF28"+
		"\a\x44C\x2\x2\xF28\xF4E\a\x446\x2\x2\xF29\xF2B\a\x462\x2\x2\xF2A\xF29"+
		"\x3\x2\x2\x2\xF2A\xF2B\x3\x2\x2\x2\xF2B\xF2C\x3\x2\x2\x2\xF2C\xF2D\a\x14"+
		"\x2\x2\xF2D\xF2E\a\xC8\x2\x2\xF2E\xF3C\a\x44C\x2\x2\xF2F\xF3D\aG\x2\x2"+
		"\xF30\xF32\a\x462\x2\x2\xF31\xF30\x3\x2\x2\x2\xF31\xF32\x3\x2\x2\x2\xF32"+
		"\xF33\x3\x2\x2\x2\xF33\xF34\a\x446\x2\x2\xF34\xF35\a\x3DF\x2\x2\xF35\xF39"+
		"\a\x446\x2\x2\xF36\xF37\a\x462\x2\x2\xF37\xF39\a\x446\x2\x2\xF38\xF31"+
		"\x3\x2\x2\x2\xF38\xF36\x3\x2\x2\x2\xF39\xF3A\x3\x2\x2\x2\xF3A\xF38\x3"+
		"\x2\x2\x2\xF3A\xF3B\x3\x2\x2\x2\xF3B\xF3D\x3\x2\x2\x2\xF3C\xF2F\x3\x2"+
		"\x2\x2\xF3C\xF38\x3\x2\x2\x2\xF3D\xF4F\x3\x2\x2\x2\xF3E\xF3F\a\x27C\x2"+
		"\x2\xF3F\xF4A\a\x44C\x2\x2\xF40\xF42\a\x462\x2\x2\xF41\xF40\x3\x2\x2\x2"+
		"\xF41\xF42\x3\x2\x2\x2\xF42\xF43\x3\x2\x2\x2\xF43\xF44\a\x446\x2\x2\xF44"+
		"\xF45\a\x3DF\x2\x2\xF45\xF4B\a\x446\x2\x2\xF46\xF48\a\x462\x2\x2\xF47"+
		"\xF46\x3\x2\x2\x2\xF47\xF48\x3\x2\x2\x2\xF48\xF49\x3\x2\x2\x2\xF49\xF4B"+
		"\a\x446\x2\x2\xF4A\xF41\x3\x2\x2\x2\xF4A\xF47\x3\x2\x2\x2\xF4B\xF4C\x3"+
		"\x2\x2\x2\xF4C\xF4A\x3\x2\x2\x2\xF4C\xF4D\x3\x2\x2\x2\xF4D\xF4F\x3\x2"+
		"\x2\x2\xF4E\xF2A\x3\x2\x2\x2\xF4E\xF3E\x3\x2\x2\x2\xF4F\xF56\x3\x2\x2"+
		"\x2\xF50\xF52\a\x462\x2\x2\xF51\xF50\x3\x2\x2\x2\xF51\xF52\x3\x2\x2\x2"+
		"\xF52\xF53\x3\x2\x2\x2\xF53\xF54\a\x22C\x2\x2\xF54\xF55\a\x44C\x2\x2\xF55"+
		"\xF57\a\x446\x2\x2\xF56\xF51\x3\x2\x2\x2\xF56\xF57\x3\x2\x2\x2\xF57\xF5E"+
		"\x3\x2\x2\x2\xF58\xF5A\a\x462\x2\x2\xF59\xF58\x3\x2\x2\x2\xF59\xF5A\x3"+
		"\x2\x2\x2\xF5A\xF5B\x3\x2\x2\x2\xF5B\xF5C\a\x22E\x2\x2\xF5C\xF5D\a\x44C"+
		"\x2\x2\xF5D\xF5F\a\x446\x2\x2\xF5E\xF59\x3\x2\x2\x2\xF5E\xF5F\x3\x2\x2"+
		"\x2\xF5F\xF60\x3\x2\x2\x2\xF60\xF61\a\x45F\x2\x2\xF61\x141\x3\x2\x2\x2"+
		"\xF62\xF63\a\xC9\x2\x2\xF63\xF64\a\x14D\x2\x2\xF64\xF65\a\x326\x2\x2\xF65"+
		"\xF66\a\x2CC\x2\x2\xF66\xF67\x5\x47A\x23E\x2\xF67\xF68\a\x42B\x2\x2\xF68"+
		"\xF69\a\x45E\x2\x2\xF69\xF6A\a\x224\x2\x2\xF6A\xF6B\a\x44C\x2\x2\xF6B"+
		"\xF91\a\x446\x2\x2\xF6C\xF6E\a\x462\x2\x2\xF6D\xF6C\x3\x2\x2\x2\xF6D\xF6E"+
		"\x3\x2\x2\x2\xF6E\xF6F\x3\x2\x2\x2\xF6F\xF70\a\x14\x2\x2\xF70\xF71\a\xC8"+
		"\x2\x2\xF71\xF7F\a\x44C\x2\x2\xF72\xF80\aG\x2\x2\xF73\xF75\a\x462\x2\x2"+
		"\xF74\xF73\x3\x2\x2\x2\xF74\xF75\x3\x2\x2\x2\xF75\xF76\x3\x2\x2\x2\xF76"+
		"\xF77\a\x446\x2\x2\xF77\xF78\a\x3DF\x2\x2\xF78\xF7C\a\x446\x2\x2\xF79"+
		"\xF7A\a\x462\x2\x2\xF7A\xF7C\a\x446\x2\x2\xF7B\xF74\x3\x2\x2\x2\xF7B\xF79"+
		"\x3\x2\x2\x2\xF7C\xF7D\x3\x2\x2\x2\xF7D\xF7B\x3\x2\x2\x2\xF7D\xF7E\x3"+
		"\x2\x2\x2\xF7E\xF80\x3\x2\x2\x2\xF7F\xF72\x3\x2\x2\x2\xF7F\xF7B\x3\x2"+
		"\x2\x2\xF80\xF92\x3\x2\x2\x2\xF81\xF82\a\x27C\x2\x2\xF82\xF8D\a\x44C\x2"+
		"\x2\xF83\xF85\a\x462\x2\x2\xF84\xF83\x3\x2\x2\x2\xF84\xF85\x3\x2\x2\x2"+
		"\xF85\xF86\x3\x2\x2\x2\xF86\xF87\a\x446\x2\x2\xF87\xF88\a\x3DF\x2\x2\xF88"+
		"\xF8E\a\x446\x2\x2\xF89\xF8B\a\x462\x2\x2\xF8A\xF89\x3\x2\x2\x2\xF8A\xF8B"+
		"\x3\x2\x2\x2\xF8B\xF8C\x3\x2\x2\x2\xF8C\xF8E\a\x446\x2\x2\xF8D\xF84\x3"+
		"\x2\x2\x2\xF8D\xF8A\x3\x2\x2\x2\xF8E\xF8F\x3\x2\x2\x2\xF8F\xF8D\x3\x2"+
		"\x2\x2\xF8F\xF90\x3\x2\x2\x2\xF90\xF92\x3\x2\x2\x2\xF91\xF6D\x3\x2\x2"+
		"\x2\xF91\xF81\x3\x2\x2\x2\xF92\xF99\x3\x2\x2\x2\xF93\xF95\a\x462\x2\x2"+
		"\xF94\xF93\x3\x2\x2\x2\xF94\xF95\x3\x2\x2\x2\xF95\xF96\x3\x2\x2\x2\xF96"+
		"\xF97\a\x22C\x2\x2\xF97\xF98\a\x44C\x2\x2\xF98\xF9A\a\x446\x2\x2\xF99"+
		"\xF94\x3\x2\x2\x2\xF99\xF9A\x3\x2\x2\x2\xF9A\xFA1\x3\x2\x2\x2\xF9B\xF9D"+
		"\a\x462\x2\x2\xF9C\xF9B\x3\x2\x2\x2\xF9C\xF9D\x3\x2\x2\x2\xF9D\xF9E\x3"+
		"\x2\x2\x2\xF9E\xF9F\a\x22E\x2\x2\xF9F\xFA0\a\x44C\x2\x2\xFA0\xFA2\a\x446"+
		"\x2\x2\xFA1\xF9C\x3\x2\x2\x2\xFA1\xFA2\x3\x2\x2\x2\xFA2\xFA3\x3\x2\x2"+
		"\x2\xFA3\xFA4\a\x45F\x2\x2\xFA4\x143\x3\x2\x2\x2\xFA5\xFA6\a%\x2\x2\xFA6"+
		"\xFA7\a\x181\x2\x2\xFA7\xFA8\ay\x2\x2\xFA8\xFB3\x5\x47A\x23E\x2\xFA9\xFAE"+
		"\a\x305\x2\x2\xFAA\xFAB\a\x42B\x2\x2\xFAB\xFAC\a\b\x2\x2\xFAC\xFAD\a\x44C"+
		"\x2\x2\xFAD\xFAF\t\x13\x2\x2\xFAE\xFAA\x3\x2\x2\x2\xFAE\xFAF\x3\x2\x2"+
		"\x2\xFAF\xFB4\x3\x2\x2\x2\xFB0\xFB4\a\x314\x2\x2\xFB1\xFB2\a:\x2\x2\xFB2"+
		"\xFB4\a\xF7\x2\x2\xFB3\xFA9\x3\x2\x2\x2\xFB3\xFB0\x3\x2\x2\x2\xFB3\xFB1"+
		"\x3\x2\x2\x2\xFB4\x145\x3\x2\x2\x2\xFB5\xFB6\a\xC9\x2\x2\xFB6\xFB7\a\x181"+
		"\x2\x2\xFB7\xFB8\ay\x2\x2\xFB8\xFBC\x5\x47A\x23E\x2\xFB9\xFBA\a\x28D\x2"+
		"\x2\xFBA\xFBB\a\x15A\x2\x2\xFBB\xFBD\x5\x47A\x23E\x2\xFBC\xFB9\x3\x2\x2"+
		"\x2\xFBC\xFBD\x3\x2\x2\x2\xFBD\xFC1\x3\x2\x2\x2\xFBE\xFBF\a\x1BF\x2\x2"+
		"\xFBF\xFC0\a\x2B7\x2\x2\xFC0\xFC2\a\x448\x2\x2\xFC1\xFBE\x3\x2\x2\x2\xFC1"+
		"\xFC2\x3\x2\x2\x2\xFC2\xFC7\x3\x2\x2\x2\xFC3\xFC4\a\x42B\x2\x2\xFC4\xFC5"+
		"\a\b\x2\x2\xFC5\xFC6\a\x44C\x2\x2\xFC6\xFC8\t\x13\x2\x2\xFC7\xFC3\x3\x2"+
		"\x2\x2\xFC7\xFC8\x3\x2\x2\x2\xFC8\xFCB\x3\x2\x2\x2\xFC9\xFCA\a:\x2\x2"+
		"\xFCA\xFCC\a\xF7\x2\x2\xFCB\xFC9\x3\x2\x2\x2\xFCB\xFCC\x3\x2\x2\x2\xFCC"+
		"\xFCF\x3\x2\x2\x2\xFCD\xFCE\a\x46\x2\x2\xFCE\xFD0\x5\x47A\x23E\x2\xFCF"+
		"\xFCD\x3\x2\x2\x2\xFCF\xFD0\x3\x2\x2\x2\xFD0\x147\x3\x2\x2\x2\xFD1\xFD2"+
		"\a%\x2\x2\xFD2\xFD3\a\x181\x2\x2\xFD3\xFD4\a\x3B3\x2\x2\xFD4\xFE2\x5\x47A"+
		"\x23E\x2\xFD5\xFD6\a\r\x2\x2\xFD6\xFD7\a\x448\x2\x2\xFD7\xFD8\a\x1F6\x2"+
		"\x2\xFD8\xFE3\t*\x2\x2\xFD9\xFE0\a\x11C\x2\x2\xFDA\xFDB\a\x448\x2\x2\xFDB"+
		"\xFDC\a\x1F6\x2\x2\xFDC\xFE1\t*\x2\x2\xFDD\xFDE\a\x18\x2\x2\xFDE\xFE1"+
		"\t*\x2\x2\xFDF\xFE1\a\x18\x2\x2\xFE0\xFDA\x3\x2\x2\x2\xFE0\xFDD\x3\x2"+
		"\x2\x2\xFE0\xFDF\x3\x2\x2\x2\xFE1\xFE3\x3\x2\x2\x2\xFE2\xFD5\x3\x2\x2"+
		"\x2\xFE2\xFD9\x3\x2\x2\x2\xFE3\x149\x3\x2\x2\x2\xFE4\xFE5\a\xC9\x2\x2"+
		"\xFE5\xFE6\a\x181\x2\x2\xFE6\xFE7\a\x3B3\x2\x2\xFE7\xFF3\x5\x47A\x23E"+
		"\x2\xFE8\xFF1\a\x17E\x2\x2\xFE9\xFEA\x5\x47A\x23E\x2\xFEA\xFEB\a\x459"+
		"\x2\x2\xFEB\xFED\x3\x2\x2\x2\xFEC\xFE9\x3\x2\x2\x2\xFEC\xFED\x3\x2\x2"+
		"\x2\xFED\xFEE\x3\x2\x2\x2\xFEE\xFF2\x5\x47A\x23E\x2\xFEF\xFF0\a\x3C9\x2"+
		"\x2\xFF0\xFF2\a\x3B3\x2\x2\xFF1\xFEC\x3\x2\x2\x2\xFF1\xFEF\x3\x2\x2\x2"+
		"\xFF2\xFF4\x3\x2\x2\x2\xFF3\xFE8\x3\x2\x2\x2\xFF3\xFF4\x3\x2\x2\x2\xFF4"+
		"\xFF7\x3\x2\x2\x2\xFF5\xFF6\a\x46\x2\x2\xFF6\xFF8\x5\x47A\x23E\x2\xFF7"+
		"\xFF5\x3\x2\x2\x2\xFF7\xFF8\x3\x2\x2\x2\xFF8\x14B\x3\x2\x2\x2\xFF9\xFFA"+
		"\a%\x2\x2\xFFA\xFFB\a\x211\x2\x2\xFFB\x103F\x5\x47A\x23E\x2\xFFC\xFFE"+
		"\t\x1B\x2\x2\xFFD\xFFC\x3\x2\x2\x2\xFFD\xFFE\x3\x2\x2\x2\xFFE\x1040\x3"+
		"\x2\x2\x2\xFFF\x100D\a\x42B\x2\x2\x1000\x1001\a\x2B6\x2\x2\x1001\x1005"+
		"\a\x44C\x2\x2\x1002\x1006\a\x448\x2\x2\x1003\x1004\a\x449\x2\x2\x1004"+
		"\x1006\a\x19E\x2\x2\x1005\x1002\x3\x2\x2\x2\x1005\x1003\x3\x2\x2\x2\x1006"+
		"\x100A\x3\x2\x2\x2\x1007\x1009\t+\x2\x2\x1008\x1007\x3\x2\x2\x2\x1009"+
		"\x100C\x3\x2\x2\x2\x100A\x1008\x3\x2\x2\x2\x100A\x100B\x3\x2\x2\x2\x100B"+
		"\x100E\x3\x2\x2\x2\x100C\x100A\x3\x2\x2\x2\x100D\x1000\x3\x2\x2\x2\x100D"+
		"\x100E\x3\x2\x2\x2\x100E\x1018\x3\x2\x2\x2\x100F\x1010\a\x28C\x2\x2\x1010"+
		"\x1011\a\x44C\x2\x2\x1011\x1015\a\x448\x2\x2\x1012\x1014\t+\x2\x2\x1013"+
		"\x1012\x3\x2\x2\x2\x1014\x1017\x3\x2\x2\x2\x1015\x1013\x3\x2\x2\x2\x1015"+
		"\x1016\x3\x2\x2\x2\x1016\x1019\x3\x2\x2\x2\x1017\x1015\x3\x2\x2\x2\x1018"+
		"\x100F\x3\x2\x2\x2\x1018\x1019\x3\x2\x2\x2\x1019\x101D\x3\x2\x2\x2\x101A"+
		"\x101B\a\xF8\x2\x2\x101B\x101C\a\x44C\x2\x2\x101C\x101E\x5\x47A\x23E\x2"+
		"\x101D\x101A\x3\x2\x2\x2\x101D\x101E\x3\x2\x2\x2\x101E\x1022\x3\x2\x2"+
		"\x2\x101F\x1020\a\xFB\x2\x2\x1020\x1021\a\x44C\x2\x2\x1021\x1023\x5\x47A"+
		"\x23E\x2\x1022\x101F\x3\x2\x2\x2\x1022\x1023\x3\x2\x2\x2\x1023\x1027\x3"+
		"\x2\x2\x2\x1024\x1025\a\x24D\x2\x2\x1025\x1026\a\x44C\x2\x2\x1026\x1028"+
		"\x5\x47A\x23E\x2\x1027\x1024\x3\x2\x2\x2\x1027\x1028\x3\x2\x2\x2\x1028"+
		"\x102C\x3\x2\x2\x2\x1029\x102A\a\x92\x2\x2\x102A\x102B\a\x44C\x2\x2\x102B"+
		"\x102D\t\x13\x2\x2\x102C\x1029\x3\x2\x2\x2\x102C\x102D\x3\x2\x2\x2\x102D"+
		"\x1031\x3\x2\x2\x2\x102E\x102F\a\x91\x2\x2\x102F\x1030\a\x44C\x2\x2\x1030"+
		"\x1032\t\x13\x2\x2\x1031\x102E\x3\x2\x2\x2\x1031\x1032\x3\x2\x2\x2\x1032"+
		"\x1036\x3\x2\x2\x2\x1033\x1034\a\xCC\x2\x2\x1034\x1035\a\x44C\x2\x2\x1035"+
		"\x1037\x5\x47A\x23E\x2\x1036\x1033\x3\x2\x2\x2\x1036\x1037\x3\x2\x2\x2"+
		"\x1037\x103A\x3\x2\x2\x2\x1038\x1039\a\x259\x2\x2\x1039\x103B\a\xCC\x2"+
		"\x2\x103A\x1038\x3\x2\x2\x2\x103A\x103B\x3\x2\x2\x2\x103B\x1040\x3\x2"+
		"\x2\x2\x103C\x103D\t\x19\x2\x2\x103D\x103E\a\xCC\x2\x2\x103E\x1040\x5"+
		"\x47A\x23E\x2\x103F\xFFD\x3\x2\x2\x2\x103F\xFFF\x3\x2\x2\x2\x103F\x103C"+
		"\x3\x2\x2\x2\x1040\x14D\x3\x2\x2\x2\x1041\x1042\a\xC9\x2\x2\x1042\x1043"+
		"\a\x211\x2\x2\x1043\x109E\x5\x47A\x23E\x2\x1044\x1052\a\x42B\x2\x2\x1045"+
		"\x1046\a\x2B6\x2\x2\x1046\x104A\a\x44C\x2\x2\x1047\x104B\a\x448\x2\x2"+
		"\x1048\x1049\a\x449\x2\x2\x1049\x104B\a\x19E\x2\x2\x104A\x1047\x3\x2\x2"+
		"\x2\x104A\x1048\x3\x2\x2\x2\x104B\x104F\x3\x2\x2\x2\x104C\x104E\t+\x2"+
		"\x2\x104D\x104C\x3\x2\x2\x2\x104E\x1051\x3\x2\x2\x2\x104F\x104D\x3\x2"+
		"\x2\x2\x104F\x1050\x3\x2\x2\x2\x1050\x1053\x3\x2\x2\x2\x1051\x104F\x3"+
		"\x2\x2\x2\x1052\x1045\x3\x2\x2\x2\x1052\x1053\x3\x2\x2\x2\x1053\x105A"+
		"\x3\x2\x2\x2\x1054\x1056\a\x462\x2\x2\x1055\x1054\x3\x2\x2\x2\x1055\x1056"+
		"\x3\x2\x2\x2\x1056\x1057\x3\x2\x2\x2\x1057\x1058\a\x38A\x2\x2\x1058\x1059"+
		"\a\x44C\x2\x2\x1059\x105B\a\x449\x2\x2\x105A\x1055\x3\x2\x2\x2\x105A\x105B"+
		"\x3\x2\x2\x2\x105B\x1062\x3\x2\x2\x2\x105C\x105E\a\x462\x2\x2\x105D\x105C"+
		"\x3\x2\x2\x2\x105D\x105E\x3\x2\x2\x2\x105E\x105F\x3\x2\x2\x2\x105F\x1060"+
		"\a\xF8\x2\x2\x1060\x1061\a\x44C\x2\x2\x1061\x1063\x5\x47A\x23E\x2\x1062"+
		"\x105D\x3\x2\x2\x2\x1062\x1063\x3\x2\x2\x2\x1063\x106A\x3\x2\x2\x2\x1064"+
		"\x1066\a\x462\x2\x2\x1065\x1064\x3\x2\x2\x2\x1065\x1066\x3\x2\x2\x2\x1066"+
		"\x1067\x3\x2\x2\x2\x1067\x1068\a\xFB\x2\x2\x1068\x1069\a\x44C\x2\x2\x1069"+
		"\x106B\x5\x47A\x23E\x2\x106A\x1065\x3\x2\x2\x2\x106A\x106B\x3\x2\x2\x2"+
		"\x106B\x1072\x3\x2\x2\x2\x106C\x106E\a\x462\x2\x2\x106D\x106C\x3\x2\x2"+
		"\x2\x106D\x106E\x3\x2\x2\x2\x106E\x106F\x3\x2\x2\x2\x106F\x1070\a\x91"+
		"\x2\x2\x1070\x1071\a\x44C\x2\x2\x1071\x1073\t\x13\x2\x2\x1072\x106D\x3"+
		"\x2\x2\x2\x1072\x1073\x3\x2\x2\x2\x1073\x107A\x3\x2\x2\x2\x1074\x1076"+
		"\a\x462\x2\x2\x1075\x1074\x3\x2\x2\x2\x1075\x1076\x3\x2\x2\x2\x1076\x1077"+
		"\x3\x2\x2\x2\x1077\x1078\a\x92\x2\x2\x1078\x1079\a\x44C\x2\x2\x1079\x107B"+
		"\t\x13\x2\x2\x107A\x1075\x3\x2\x2\x2\x107A\x107B\x3\x2\x2\x2\x107B\x1082"+
		"\x3\x2\x2\x2\x107C\x107E\a\x462\x2\x2\x107D\x107C\x3\x2\x2\x2\x107D\x107E"+
		"\x3\x2\x2\x2\x107E\x107F\x3\x2\x2\x2\x107F\x1080\a\xCC\x2\x2\x1080\x1081"+
		"\a\x44C\x2\x2\x1081\x1083\x5\x47A\x23E\x2\x1082\x107D\x3\x2\x2\x2\x1082"+
		"\x1083\x3\x2\x2\x2\x1083\x109F\x3\x2\x2\x2\x1084\x109C\a\x17E\x2\x2\x1085"+
		"\x1086\a\x42A\x2\x2\x1086\x108D\a\x42B\x2\x2\x1087\x1089\a\x462\x2\x2"+
		"\x1088\x1087\x3\x2\x2\x2\x1088\x1089\x3\x2\x2\x2\x1089\x108A\x3\x2\x2"+
		"\x2\x108A\x108B\a\xF8\x2\x2\x108B\x108C\a\x44C\x2\x2\x108C\x108E\x5\x47A"+
		"\x23E\x2\x108D\x1088\x3\x2\x2\x2\x108D\x108E\x3\x2\x2\x2\x108E\x1095\x3"+
		"\x2\x2\x2\x108F\x1091\a\x462\x2\x2\x1090\x108F\x3\x2\x2\x2\x1090\x1091"+
		"\x3\x2\x2\x2\x1091\x1092\x3\x2\x2\x2\x1092\x1093\a\xFB\x2\x2\x1093\x1094"+
		"\a\x44C\x2\x2\x1094\x1096\a\x448\x2\x2\x1095\x1090\x3\x2\x2\x2\x1095\x1096"+
		"\x3\x2\x2\x2\x1096\x109D\x3\x2\x2\x2\x1097\x1098\a}\x2\x2\x1098\x109D"+
		"\x5\x47A\x23E\x2\x1099\x109A\a?\x2\x2\x109A\x109B\a\x1EE\x2\x2\x109B\x109D"+
		"\x5\x47A\x23E\x2\x109C\x1085\x3\x2\x2\x2\x109C\x1097\x3\x2\x2\x2\x109C"+
		"\x1099\x3\x2\x2\x2\x109D\x109F\x3\x2\x2\x2\x109E\x1044\x3\x2\x2\x2\x109E"+
		"\x1084\x3\x2\x2\x2\x109F\x14F\x3\x2\x2\x2\x10A0\x10A1\a%\x2\x2\x10A1\x10A2"+
		"\a\x211\x2\x2\x10A2\x10B4\x5\x47A\x23E\x2\x10A3\x10A5\t\x1B\x2\x2\x10A4"+
		"\x10A3\x3\x2\x2\x2\x10A4\x10A5\x3\x2\x2\x2\x10A5\x10B5\x3\x2\x2\x2\x10A6"+
		"\x10B2\a\x42B\x2\x2\x10A7\x10A8\a\x2B6\x2\x2\x10A8\x10A9\a\x44C\x2\x2"+
		"\x10A9\x10AD\a\x448\x2\x2\x10AA\x10AB\a\x28C\x2\x2\x10AB\x10AC\a\x44C"+
		"\x2\x2\x10AC\x10AE\a\x448\x2\x2\x10AD\x10AA\x3\x2\x2\x2\x10AD\x10AE\x3"+
		"\x2\x2\x2\x10AE\x10B3\x3\x2\x2\x2\x10AF\x10B0\a\x24D\x2\x2\x10B0\x10B1"+
		"\a\x44C\x2\x2\x10B1\x10B3\x5\x47A\x23E\x2\x10B2\x10A7\x3\x2\x2\x2\x10B2"+
		"\x10AF\x3\x2\x2\x2\x10B3\x10B5\x3\x2\x2\x2\x10B4\x10A4\x3\x2\x2\x2\x10B4"+
		"\x10A6\x3\x2\x2\x2\x10B5\x151\x3\x2\x2\x2\x10B6\x10B7\a\xC9\x2\x2\x10B7"+
		"\x10B8\a\x211\x2\x2\x10B8\x10B9\x5\x47A\x23E\x2\x10B9\x10BA\a\x42B\x2"+
		"\x2\x10BA\x10BB\a\x2B6\x2\x2\x10BB\x10BC\a\x44C\x2\x2\x10BC\x10C0\a\x448"+
		"\x2\x2\x10BD\x10BE\a\x38A\x2\x2\x10BE\x10BF\a\x44C\x2\x2\x10BF\x10C1\a"+
		"\x449\x2\x2\x10C0\x10BD\x3\x2\x2\x2\x10C0\x10C1\x3\x2\x2\x2\x10C1\x153"+
		"\x3\x2\x2\x2\x10C2\x10C3\a%\x2\x2\x10C3\x10C4\a\x211\x2\x2\x10C4\x10DC"+
		"\x5\x47A\x23E\x2\x10C5\x10C7\t\x1B\x2\x2\x10C6\x10C5\x3\x2\x2\x2\x10C6"+
		"\x10C7\x3\x2\x2\x2\x10C7\x10DD\x3\x2\x2\x2\x10C8\x10DA\a\x42B\x2\x2\x10C9"+
		"\x10CA\a\x2B6\x2\x2\x10CA\x10CB\a\x44C\x2\x2\x10CB\x10D5\a\x448\x2\x2"+
		"\x10CC\x10CD\a\x28C\x2\x2\x10CD\x10CE\a\x44C\x2\x2\x10CE\x10D2\a\x448"+
		"\x2\x2\x10CF\x10D1\t+\x2\x2\x10D0\x10CF\x3\x2\x2\x2\x10D1\x10D4\x3\x2"+
		"\x2\x2\x10D2\x10D0\x3\x2\x2\x2\x10D2\x10D3\x3\x2\x2\x2\x10D3\x10D6\x3"+
		"\x2\x2\x2\x10D4\x10D2\x3\x2\x2\x2\x10D5\x10CC\x3\x2\x2\x2\x10D5\x10D6"+
		"\x3\x2\x2\x2\x10D6\x10DB\x3\x2\x2\x2\x10D7\x10D8\a\x24D\x2\x2\x10D8\x10D9"+
		"\a\x44C\x2\x2\x10D9\x10DB\x5\x47A\x23E\x2\x10DA\x10C9\x3\x2\x2\x2\x10DA"+
		"\x10D7\x3\x2\x2\x2\x10DB\x10DD\x3\x2\x2\x2\x10DC\x10C6\x3\x2\x2\x2\x10DC"+
		"\x10C8\x3\x2\x2\x2\x10DD\x155\x3\x2\x2\x2\x10DE\x10DF\a\xC9\x2\x2\x10DF"+
		"\x10E0\a\x211\x2\x2\x10E0\x10F1\x5\x47A\x23E\x2\x10E1\x10E2\a\x42B\x2"+
		"\x2\x10E2\x10E3\a\x2B6\x2\x2\x10E3\x10E4\a\x44C\x2\x2\x10E4\x10E6\a\x448"+
		"\x2\x2\x10E5\x10E7\a\x24C\x2\x2\x10E6\x10E5\x3\x2\x2\x2\x10E6\x10E7\x3"+
		"\x2\x2\x2\x10E7\x10ED\x3\x2\x2\x2\x10E8\x10E9\a\x92\x2\x2\x10E9\x10EB"+
		"\a\x44C\x2\x2\x10EA\x10EC\t\x13\x2\x2\x10EB\x10EA\x3\x2\x2\x2\x10EB\x10EC"+
		"\x3\x2\x2\x2\x10EC\x10EE\x3\x2\x2\x2\x10ED\x10E8\x3\x2\x2\x2\x10ED\x10EE"+
		"\x3\x2\x2\x2\x10EE\x10F2\x3\x2\x2\x2\x10EF\x10F0\a\x17E\x2\x2\x10F0\x10F2"+
		"\a\x42A\x2\x2\x10F1\x10E1\x3\x2\x2\x2\x10F1\x10EF\x3\x2\x2\x2\x10F2\x157"+
		"\x3\x2\x2\x2\x10F3\x10F4\a%\x2\x2\x10F4\x10F5\a\x21B\x2\x2\x10F5\x110B"+
		"\a\x1EE\x2\x2\x10F6\x10F8\a\x170\x2\x2\x10F7\x10F6\x3\x2\x2\x2\x10F7\x10F8"+
		"\x3\x2\x2\x2\x10F8\x10F9\x3\x2\x2\x2\x10F9\x10FA\a\x30C\x2\x2\x10FA\x10FB"+
		"\a\x42B\x2\x2\x10FB\x10FC\a\x12B\x2\x2\x10FC\x10FD\aq\x2\x2\x10FD\x10FE"+
		"\a\x2B6\x2\x2\x10FE\x10FF\a\x44C\x2\x2\x10FF\x110C\a\x448\x2\x2\x1100"+
		"\x1101\t\x19\x2\x2\x1101\x1102\a\x12B\x2\x2\x1102\x1109\aq\x2\x2\x1103"+
		"\x1104\a\x373\x2\x2\x1104\x1105\a\x21B\x2\x2\x1105\x110A\a\x1EE\x2\x2"+
		"\x1106\x1107\a\x2B6\x2\x2\x1107\x1108\a\x44C\x2\x2\x1108\x110A\a\x448"+
		"\x2\x2\x1109\x1103\x3\x2\x2\x2\x1109\x1106\x3\x2\x2\x2\x110A\x110C\x3"+
		"\x2\x2\x2\x110B\x10F7\x3\x2\x2\x2\x110B\x1100\x3\x2\x2\x2\x110C\x159\x3"+
		"\x2\x2\x2\x110D\x110E\a\xC9\x2\x2\x110E\x110F\a\x21B\x2\x2\x110F\x1110"+
		"\a\x1EE\x2\x2\x1110\x1111\a\x12B\x2\x2\x1111\x1112\aq\x2\x2\x1112\x1113"+
		"\a\x2B6\x2\x2\x1113\x1114\a\x44C\x2\x2\x1114\x1115\a\x448\x2\x2\x1115"+
		"\x15B\x3\x2\x2\x2\x1116\x1117\a%\x2\x2\x1117\x1118\a\x21B\x2\x2\x1118"+
		"\x1134\a\x1EE\x2\x2\x1119\x111B\a\x170\x2\x2\x111A\x1119\x3\x2\x2\x2\x111A"+
		"\x111B\x3\x2\x2\x2\x111B\x111C\x3\x2\x2\x2\x111C\x111D\a\x30C\x2\x2\x111D"+
		"\x111E\a\x42B\x2\x2\x111E\x111F\a\x12B\x2\x2\x111F\x1120\aq\x2\x2\x1120"+
		"\x1121\a\x2B6\x2\x2\x1121\x1122\a\x44C\x2\x2\x1122\x1135\a\x448\x2\x2"+
		"\x1123\x1124\a\r\x2\x2\x1124\x1125\a\x12B\x2\x2\x1125\x112C\aq\x2\x2\x1126"+
		"\x1127\a\x373\x2\x2\x1127\x1128\a\x21B\x2\x2\x1128\x112D\a\x1EE\x2\x2"+
		"\x1129\x112A\a\x2B6\x2\x2\x112A\x112B\a\x44C\x2\x2\x112B\x112D\a\x448"+
		"\x2\x2\x112C\x1126\x3\x2\x2\x2\x112C\x1129\x3\x2\x2\x2\x112D\x1135\x3"+
		"\x2\x2\x2\x112E\x112F\a\x11C\x2\x2\x112F\x1130\a\x12B\x2\x2\x1130\x1131"+
		"\aq\x2\x2\x1131\x1132\a\x2B6\x2\x2\x1132\x1133\a\x44C\x2\x2\x1133\x1135"+
		"\a\x448\x2\x2\x1134\x111A\x3\x2\x2\x2\x1134\x1123\x3\x2\x2\x2\x1134\x112E"+
		"\x3\x2\x2\x2\x1135\x15D\x3\x2\x2\x2\x1136\x1137\a\xC9\x2\x2\x1137\x1138"+
		"\a\x21B\x2\x2\x1138\x113E\a\x1EE\x2\x2\x1139\x113A\a\x12B\x2\x2\x113A"+
		"\x113B\aq\x2\x2\x113B\x113C\a\x2B6\x2\x2\x113C\x113D\a\x44C\x2\x2\x113D"+
		"\x113F\a\x448\x2\x2\x113E\x1139\x3\x2\x2\x2\x113E\x113F\x3\x2\x2\x2\x113F"+
		"\x15F\x3\x2\x2\x2\x1140\x1141\a%\x2\x2\x1141\x1142\a\x23A\x2\x2\x1142"+
		"\x1143\a\x3F7\x2\x2\x1143\x1144\x5\x47A\x23E\x2\x1144\x1145\a\x413\x2"+
		"\x2\x1145\x114E\a\x44C\x2\x2\x1146\x114F\a\x264\x2\x2\x1147\x114F\a\x125"+
		"\x2\x2\x1148\x114F\a\x426\x2\x2\x1149\x114A\a\x414\x2\x2\x114A\x114B\a"+
		"\x42B\x2\x2\x114B\x114C\a\x351\x2\x2\x114C\x114D\a\x9C\x2\x2\x114D\x114F"+
		"\x5\x47A\x23E\x2\x114E\x1146\x3\x2\x2\x2\x114E\x1147\x3\x2\x2\x2\x114E"+
		"\x1148\x3\x2\x2\x2\x114E\x1149\x3\x2\x2\x2\x114F\x161\x3\x2\x2\x2\x1150"+
		"\x1151\a%\x2\x2\x1151\x1152\a\x2B3\x2\x2\x1152\x1153\a\x184\x2\x2\x1153"+
		"\x1154\x5\x47A\x23E\x2\x1154\x1155\a\x45E\x2\x2\x1155\x1156\a\x45F\x2"+
		"\x2\x1156\x1157\t,\x2\x2\x1157\x1158\a\x2F2\x2\x2\x1158\x1159\a\x45E\x2"+
		"\x2\x1159\x115A\a\x446\x2\x2\x115A\x115B\a\x45F\x2\x2\x115B\x163\x3\x2"+
		"\x2\x2\x115C\x115D\a%\x2\x2\x115D\x115E\a\x2B3\x2\x2\x115E\x115F\a\x355"+
		"\x2\x2\x115F\x1160\x5\x47A\x23E\x2\x1160\x1161\a\x258\x2\x2\x1161\x1163"+
		"\a\x40E\x2\x2\x1162\x1164\x5\x47A\x23E\x2\x1163\x1162\x3\x2\x2\x2\x1163"+
		"\x1164\x3\x2\x2\x2\x1164\x165\x3\x2\x2\x2\x1165\x1166\a%\x2\x2\x1166\x1167"+
		"\a\x310\x2\x2\x1167\x1168\a\x373\x2\x2\x1168\x1169\a\x63\x2\x2\x1169\x116A"+
		"\x5\x47A\x23E\x2\x116A\x116E\a\x42B\x2\x2\x116B\x116C\a\x40F\x2\x2\x116C"+
		"\x116D\a\x44C\x2\x2\x116D\x116F\x5\x47A\x23E\x2\x116E\x116B\x3\x2\x2\x2"+
		"\x116E\x116F\x3\x2\x2\x2\x116F\x1174\x3\x2\x2\x2\x1170\x1171\a\x462\x2"+
		"\x2\x1171\x1172\a(\x2\x2\x1172\x1173\a\x44C\x2\x2\x1173\x1175\t\x13\x2"+
		"\x2\x1174\x1170\x3\x2\x2\x2\x1174\x1175\x3\x2\x2\x2\x1175\x167\x3\x2\x2"+
		"\x2\x1176\x1177\a\xC9\x2\x2\x1177\x1178\a\x310\x2\x2\x1178\x1179\a\x373"+
		"\x2\x2\x1179\x117A\a\x63\x2\x2\x117A\x117D\x5\x47A\x23E\x2\x117B\x117C"+
		"\a\x46\x2\x2\x117C\x117E\x5\x47A\x23E\x2\x117D\x117B\x3\x2\x2\x2\x117D"+
		"\x117E\x3\x2\x2\x2\x117E\x117F\x3\x2\x2\x2\x117F\x1180\a\x3DF\x2\x2\x1180"+
		"\x1181\a\x373\x2\x2\x1181\x1182\a\x448\x2\x2\x1182\x1186\a\x42B\x2\x2"+
		"\x1183\x1184\a\x40F\x2\x2\x1184\x1185\a\x44C\x2\x2\x1185\x1187\x5\x47A"+
		"\x23E\x2\x1186\x1183\x3\x2\x2\x2\x1186\x1187\x3\x2\x2\x2\x1187\x118C\x3"+
		"\x2\x2\x2\x1188\x1189\a\x462\x2\x2\x1189\x118A\a(\x2\x2\x118A\x118B\a"+
		"\x44C\x2\x2\x118B\x118D\t\x13\x2\x2\x118C\x1188\x3\x2\x2\x2\x118C\x118D"+
		"\x3\x2\x2\x2\x118D\x169\x3\x2\x2\x2\x118E\x118F\a\xC9\x2\x2\x118F\x1190"+
		"\a\x326\x2\x2\x1190\x1191\a\x2CC\x2\x2\x1191\x11F8\x5\x47A\x23E\x2\x1192"+
		"\x1193\a\x42B\x2\x2\x1193\x119A\a\x45E\x2\x2\x1194\x1196\a\x462\x2\x2"+
		"\x1195\x1194\x3\x2\x2\x2\x1195\x1196\x3\x2\x2\x2\x1196\x1197\x3\x2\x2"+
		"\x2\x1197\x1198\a\x241\x2\x2\x1198\x1199\a\x44C\x2\x2\x1199\x119B\a\x446"+
		"\x2\x2\x119A\x1195\x3\x2\x2\x2\x119A\x119B\x3\x2\x2\x2\x119B\x11A2\x3"+
		"\x2\x2\x2\x119C\x119E\a\x462\x2\x2\x119D\x119C\x3\x2\x2\x2\x119D\x119E"+
		"\x3\x2\x2\x2\x119E\x119F\x3\x2\x2\x2\x119F\x11A0\a\x224\x2\x2\x11A0\x11A1"+
		"\a\x44C\x2\x2\x11A1\x11A3\a\x446\x2\x2\x11A2\x119D\x3\x2\x2\x2\x11A2\x11A3"+
		"\x3\x2\x2\x2\x11A3\x11AA\x3\x2\x2\x2\x11A4\x11A6\a\x462\x2\x2\x11A5\x11A4"+
		"\x3\x2\x2\x2\x11A5\x11A6\x3\x2\x2\x2\x11A6\x11A7\x3\x2\x2\x2\x11A7\x11A8"+
		"\au\x2\x2\x11A8\x11A9\a\x44C\x2\x2\x11A9\x11AB\a\x446\x2\x2\x11AA\x11A5"+
		"\x3\x2\x2\x2\x11AA\x11AB\x3\x2\x2\x2\x11AB\x11D5\x3\x2\x2\x2\x11AC\x11AE"+
		"\a\x462\x2\x2\x11AD\x11AC\x3\x2\x2\x2\x11AD\x11AE\x3\x2\x2\x2\x11AE\x11AF"+
		"\x3\x2\x2\x2\x11AF\x11B0\a\x14\x2\x2\x11B0\x11B1\a\x350\x2\x2\x11B1\x11D3"+
		"\a\x44C\x2\x2\x11B2\x11D4\aG\x2\x2\x11B3\x11BD\a\x45E\x2\x2\x11B4\x11B6"+
		"\a\x462\x2\x2\x11B5\x11B4\x3\x2\x2\x2\x11B5\x11B6\x3\x2\x2\x2\x11B6\x11BB"+
		"\x3\x2\x2\x2\x11B7\x11BC\a\x446\x2\x2\x11B8\x11B9\a\x446\x2\x2\x11B9\x11BA"+
		"\a\x3DF\x2\x2\x11BA\x11BC\a\x446\x2\x2\x11BB\x11B7\x3\x2\x2\x2\x11BB\x11B8"+
		"\x3\x2\x2\x2\x11BC\x11BE\x3\x2\x2\x2\x11BD\x11B5\x3\x2\x2\x2\x11BE\x11BF"+
		"\x3\x2\x2\x2\x11BF\x11BD\x3\x2\x2\x2\x11BF\x11C0\x3\x2\x2\x2\x11C0\x11C1"+
		"\x3\x2\x2\x2\x11C1\x11D4\a\x45F\x2\x2\x11C2\x11C3\a\x27C\x2\x2\x11C3\x11C4"+
		"\a\x44C\x2\x2\x11C4\x11CE\a\x45E\x2\x2\x11C5\x11C7\a\x462\x2\x2\x11C6"+
		"\x11C5\x3\x2\x2\x2\x11C6\x11C7\x3\x2\x2\x2\x11C7\x11CC\x3\x2\x2\x2\x11C8"+
		"\x11CD\a\x446\x2\x2\x11C9\x11CA\a\x446\x2\x2\x11CA\x11CB\a\x3DF\x2\x2"+
		"\x11CB\x11CD\a\x446\x2\x2\x11CC\x11C8\x3\x2\x2\x2\x11CC\x11C9\x3\x2\x2"+
		"\x2\x11CD\x11CF\x3\x2\x2\x2\x11CE\x11C6\x3\x2\x2\x2\x11CF\x11D0\x3\x2"+
		"\x2\x2\x11D0\x11CE\x3\x2\x2\x2\x11D0\x11D1\x3\x2\x2\x2\x11D1\x11D2\x3"+
		"\x2\x2\x2\x11D2\x11D4\a\x45F\x2\x2\x11D3\x11B2\x3\x2\x2\x2\x11D3\x11B3"+
		"\x3\x2\x2\x2\x11D3\x11C2\x3\x2\x2\x2\x11D4\x11D6\x3\x2\x2\x2\x11D5\x11AD"+
		"\x3\x2\x2\x2\x11D5\x11D6\x3\x2\x2\x2\x11D6\x11DD\x3\x2\x2\x2\x11D7\x11D9"+
		"\a\x462\x2\x2\x11D8\x11D7\x3\x2\x2\x2\x11D8\x11D9\x3\x2\x2\x2\x11D9\x11DA"+
		"\x3\x2\x2\x2\x11DA\x11DB\a\x243\x2\x2\x11DB\x11DC\a\x44C\x2\x2\x11DC\x11DE"+
		"\a\x446\x2\x2\x11DD\x11D8\x3\x2\x2\x2\x11DD\x11DE\x3\x2\x2\x2\x11DE\x11E5"+
		"\x3\x2\x2\x2\x11DF\x11E1\a\x462\x2\x2\x11E0\x11DF\x3\x2\x2\x2\x11E0\x11E1"+
		"\x3\x2\x2\x2\x11E1\x11E2\x3\x2\x2\x2\x11E2\x11E3\a\x22C\x2\x2\x11E3\x11E4"+
		"\a\x44C\x2\x2\x11E4\x11E6\a\x446\x2\x2\x11E5\x11E0\x3\x2\x2\x2\x11E5\x11E6"+
		"\x3\x2\x2\x2\x11E6\x11ED\x3\x2\x2\x2\x11E7\x11E9\a\x462\x2\x2\x11E8\x11E7"+
		"\x3\x2\x2\x2\x11E8\x11E9\x3\x2\x2\x2\x11E9\x11EA\x3\x2\x2\x2\x11EA\x11EB"+
		"\a\x242\x2\x2\x11EB\x11EC\a\x44C\x2\x2\x11EC\x11EE\a\x446\x2\x2\x11ED"+
		"\x11E8\x3\x2\x2\x2\x11ED\x11EE\x3\x2\x2\x2\x11EE\x11F5\x3\x2\x2\x2\x11EF"+
		"\x11F1\a\x462\x2\x2\x11F0\x11EF\x3\x2\x2\x2\x11F0\x11F1\x3\x2\x2\x2\x11F1"+
		"\x11F2\x3\x2\x2\x2\x11F2\x11F3\a\x22A\x2\x2\x11F3\x11F4\a\x44C\x2\x2\x11F4"+
		"\x11F6\a\x446\x2\x2\x11F5\x11F0\x3\x2\x2\x2\x11F5\x11F6\x3\x2\x2\x2\x11F6"+
		"\x11F7\x3\x2\x2\x2\x11F7\x11F9\a\x45F\x2\x2\x11F8\x1192\x3\x2\x2\x2\x11F8"+
		"\x11F9\x3\x2\x2\x2\x11F9\x16B\x3\x2\x2\x2\x11FA\x11FB\a%\x2\x2\x11FB\x11FC"+
		"\a\x326\x2\x2\x11FC\x1212\a\x195\x2\x2\x11FD\x1213\t-\x2\x2\x11FE\x11FF"+
		"\a\x42B\x2\x2\x11FF\x1200\a\x45E\x2\x2\x1200\x1201\a\x93\x2\x2\x1201\x1207"+
		"\a\x44C\x2\x2\x1202\x1203\x5\x47A\x23E\x2\x1203\x1204\a\x459\x2\x2\x1204"+
		"\x1205\x5\x47A\x23E\x2\x1205\x1208\x3\x2\x2\x2\x1206\x1208\a\x27A\x2\x2"+
		"\x1207\x1202\x3\x2\x2\x2\x1207\x1206\x3\x2\x2\x2\x1208\x1209\x3\x2\x2"+
		"\x2\x1209\x1213\a\x45F\x2\x2\x120A\x120B\a\x325\x2\x2\x120B\x1213\a\x3A8"+
		"\x2\x2\x120C\x120D\a\x42B\x2\x2\x120D\x120E\a\x45E\x2\x2\x120E\x120F\a"+
		"\x22D\x2\x2\x120F\x1210\a\x44C\x2\x2\x1210\x1211\a\x446\x2\x2\x1211\x1213"+
		"\a\x45F\x2\x2\x1212\x11FD\x3\x2\x2\x2\x1212\x11FE\x3\x2\x2\x2\x1212\x120A"+
		"\x3\x2\x2\x2\x1212\x120C\x3\x2\x2\x2\x1213\x16D\x3\x2\x2\x2\x1214\x1215"+
		"\a%\x2\x2\x1215\x1216\a\xDD\x2\x2\x1216\x1217\a\x42\x2\x2\x1217\x1218"+
		"\a\x39A\x2\x2\x1218\x121D\x5\x47A\x23E\x2\x1219\x121A\a\x16F\x2\x2\x121A"+
		"\x121B\a\x371\x2\x2\x121B\x121C\a\x42\x2\x2\x121C\x121E\x5\x47A\x23E\x2"+
		"\x121D\x1219\x3\x2\x2\x2\x121D\x121E\x3\x2\x2\x2\x121E\x1227\x3\x2\x2"+
		"\x2\x121F\x1224\x5\x170\xB9\x2\x1220\x1221\a\x462\x2\x2\x1221\x1223\x5"+
		"\x170\xB9\x2\x1222\x1220\x3\x2\x2\x2\x1223\x1226\x3\x2\x2\x2\x1224\x1222"+
		"\x3\x2\x2\x2\x1224\x1225\x3\x2\x2\x2\x1225\x1228\x3\x2\x2\x2\x1226\x1224"+
		"\x3\x2\x2\x2\x1227\x121F\x3\x2\x2\x2\x1227\x1228\x3\x2\x2\x2\x1228\x122F"+
		"\x3\x2\x2\x2\x1229\x122A\a\x42B\x2\x2\x122A\x122B\a\x45E\x2\x2\x122B\x122C"+
		"\a\x3A6\x2\x2\x122C\x122D\a\x44C\x2\x2\x122D\x122E\t\x13\x2\x2\x122E\x1230"+
		"\a\x45F\x2\x2\x122F\x1229\x3\x2\x2\x2\x122F\x1230\x3\x2\x2\x2\x1230\x16F"+
		"\x3\x2\x2\x2\x1231\x1232\t\x19\x2\x2\x1232\x1235\a\x45E\x2\x2\x1233\x1236"+
		"\x5\x172\xBA\x2\x1234\x1236\x5\x47A\x23E\x2\x1235\x1233\x3\x2\x2\x2\x1235"+
		"\x1234\x3\x2\x2\x2\x1236\x1237\x3\x2\x2\x2\x1237\x1238\a\x45F\x2\x2\x1238"+
		"\x171\x3\x2\x2\x2\x1239\x123E\x5\x174\xBB\x2\x123A\x123B\a\x462\x2\x2"+
		"\x123B\x123D\x5\x174\xBB\x2\x123C\x123A\x3\x2\x2\x2\x123D\x1240\x3\x2"+
		"\x2\x2\x123E\x123C\x3\x2\x2\x2\x123E\x123F\x3\x2\x2\x2\x123F\x1241\x3"+
		"\x2\x2\x2\x1240\x123E\x3\x2\x2\x2\x1241\x1245\a\x28D\x2\x2\x1242\x1243"+
		"\x5\x176\xBC\x2\x1243\x1244\a\x465\x2\x2\x1244\x1246\x3\x2\x2\x2\x1245"+
		"\x1242\x3\x2\x2\x2\x1245\x1246\x3\x2\x2\x2\x1246\x1247\x3\x2\x2\x2\x1247"+
		"\x1248\x5\x178\xBD\x2\x1248\x1249\aq\x2\x2\x1249\x124E\x5\x2D0\x169\x2"+
		"\x124A\x124B\a\x462\x2\x2\x124B\x124D\x5\x2D0\x169\x2\x124C\x124A\x3\x2"+
		"\x2\x2\x124D\x1250\x3\x2\x2\x2\x124E\x124C\x3\x2\x2\x2\x124E\x124F\x3"+
		"\x2\x2\x2\x124F\x173\x3\x2\x2\x2\x1250\x124E\x3\x2\x2\x2\x1251\x1252\t"+
		".\x2\x2\x1252\x175\x3\x2\x2\x2\x1253\x1254\t/\x2\x2\x1254\x177\x3\x2\x2"+
		"\x2\x1255\x1256\x5\x47A\x23E\x2\x1256\x1257\a\x459\x2\x2\x1257\x1259\x3"+
		"\x2\x2\x2\x1258\x1255\x3\x2\x2\x2\x1258\x1259\x3\x2\x2\x2\x1259\x125A"+
		"\x3\x2\x2\x2\x125A\x125B\x5\x47A\x23E\x2\x125B\x125C\a\x459\x2\x2\x125C"+
		"\x125E\x3\x2\x2\x2\x125D\x1258\x3\x2\x2\x2\x125D\x125E\x3\x2\x2\x2\x125E"+
		"\x125F\x3\x2\x2\x2\x125F\x1260\x5\x47A\x23E\x2\x1260\x179\x3\x2\x2\x2"+
		"\x1261\x1262\a%\x2\x2\x1262\x1263\a\x339\x2\x2\x1263\x126B\x5\x47A\x23E"+
		"\x2\x1264\x1265\t\x19\x2\x2\x1265\x1266\a\x236\x2\x2\x1266\x126C\x5\x47A"+
		"\x23E\x2\x1267\x1268\a\x42B\x2\x2\x1268\x1269\a\x24D\x2\x2\x1269\x126A"+
		"\a\x44C\x2\x2\x126A\x126C\x5\x47A\x23E\x2\x126B\x1264\x3\x2\x2\x2\x126B"+
		"\x1267\x3\x2\x2\x2\x126C\x17B\x3\x2\x2\x2\x126D\x126E\a\xC9\x2\x2\x126E"+
		"\x126F\a\xDD\x2\x2\x126F\x1270\a\x42\x2\x2\x1270\x1271\a\x39A\x2\x2\x1271"+
		"\x1276\x5\x47A\x23E\x2\x1272\x1273\a\x16F\x2\x2\x1273\x1274\a\x371\x2"+
		"\x2\x1274\x1275\a\x42\x2\x2\x1275\x1277\x5\x47A\x23E\x2\x1276\x1272\x3"+
		"\x2\x2\x2\x1276\x1277\x3\x2\x2\x2\x1277\x1280\x3\x2\x2\x2\x1278\x127D"+
		"\x5\x170\xB9\x2\x1279\x127A\a\x462\x2\x2\x127A\x127C\x5\x170\xB9\x2\x127B"+
		"\x1279\x3\x2\x2\x2\x127C\x127F\x3\x2\x2\x2\x127D\x127B\x3\x2\x2\x2\x127D"+
		"\x127E\x3\x2\x2\x2\x127E\x1281\x3\x2\x2\x2\x127F\x127D\x3\x2\x2\x2\x1280"+
		"\x1278\x3\x2\x2\x2\x1280\x1281\x3\x2\x2\x2\x1281\x1288\x3\x2\x2\x2\x1282"+
		"\x1283\a\x42B\x2\x2\x1283\x1284\a\x45E\x2\x2\x1284\x1285\a\x3A6\x2\x2"+
		"\x1285\x1286\a\x44C\x2\x2\x1286\x1287\t\x13\x2\x2\x1287\x1289\a\x45F\x2"+
		"\x2\x1288\x1282\x3\x2\x2\x2\x1288\x1289\x3\x2\x2\x2\x1289\x17D\x3\x2\x2"+
		"\x2\x128A\x128B\a\xC9\x2\x2\x128B\x128C\a\x339\x2\x2\x128C\x128F\x5\x47A"+
		"\x23E\x2\x128D\x128E\a\x46\x2\x2\x128E\x1290\x5\x47A\x23E\x2\x128F\x128D"+
		"\x3\x2\x2\x2\x128F\x1290\x3\x2\x2\x2\x1290\x17F\x3\x2\x2\x2\x1291\x1292"+
		"\a\xC9\x2\x2\x1292\x1293\a\x33D\x2\x2\x1293\x1296\x5\x47A\x23E\x2\x1294"+
		"\x1295\a\x46\x2\x2\x1295\x1297\x5\x47A\x23E\x2\x1296\x1294\x3\x2\x2\x2"+
		"\x1296\x1297\x3\x2\x2\x2\x1297\x1298\x3\x2\x2\x2\x1298\x129F\a\x42B\x2"+
		"\x2\x1299\x129B\a\x462\x2\x2\x129A\x1299\x3\x2\x2\x2\x129A\x129B\x3\x2"+
		"\x2\x2\x129B\x129C\x3\x2\x2\x2\x129C\x129D\a\x376\x2\x2\x129D\x129E\a"+
		"\x44C\x2\x2\x129E\x12A0\a\x448\x2\x2\x129F\x129A\x3\x2\x2\x2\x129F\x12A0"+
		"\x3\x2\x2\x2\x12A0\x12A7\x3\x2\x2\x2\x12A1\x12A3\a\x462\x2\x2\x12A2\x12A1"+
		"\x3\x2\x2\x2\x12A2\x12A3\x3\x2\x2\x2\x12A3\x12A4\x3\x2\x2\x2\x12A4\x12A5"+
		"\ak\x2\x2\x12A5\x12A6\a\x44C\x2\x2\x12A6\x12A8\a\x448\x2\x2\x12A7\x12A2"+
		"\x3\x2\x2\x2\x12A7\x12A8\x3\x2\x2\x2\x12A8\x12AF\x3\x2\x2\x2\x12A9\x12AB"+
		"\a\x462\x2\x2\x12AA\x12A9\x3\x2\x2\x2\x12AA\x12AB\x3\x2\x2\x2\x12AB\x12AC"+
		"\x3\x2\x2\x2\x12AC\x12AD\a\x1FF\x2\x2\x12AD\x12AE\a\x44C\x2\x2\x12AE\x12B0"+
		"\a\x446\x2\x2\x12AF\x12AA\x3\x2\x2\x2\x12AF\x12B0\x3\x2\x2\x2\x12B0\x12B2"+
		"\x3\x2\x2\x2\x12B1\x12B3\a\x462\x2\x2\x12B2\x12B1\x3\x2\x2\x2\x12B2\x12B3"+
		"\x3\x2\x2\x2\x12B3\x12B4\x3\x2\x2\x2\x12B4\x12B5\a\xE\x2\x2\x12B5\x12B6"+
		"\a\x44C\x2\x2\x12B6\x12BB\a\x448\x2\x2\x12B7\x12B8\a\x462\x2\x2\x12B8"+
		"\x12B9\a\x245\x2\x2\x12B9\x12BA\a\x44C\x2\x2\x12BA\x12BC\a\x448\x2\x2"+
		"\x12BB\x12B7\x3\x2\x2\x2\x12BB\x12BC\x3\x2\x2\x2\x12BC\x181\x3\x2\x2\x2"+
		"\x12BD\x12BE\a\xC9\x2\x2\x12BE\x12C2\a\x34B\x2\x2\x12BF\x12C0\x5\x47A"+
		"\x23E\x2\x12C0\x12C1\a\x459\x2\x2\x12C1\x12C3\x3\x2\x2\x2\x12C2\x12BF"+
		"\x3\x2\x2\x2\x12C2\x12C3\x3\x2\x2\x2\x12C3\x12C4\x3\x2\x2\x2\x12C4\x12C5"+
		"\x5\x47A\x23E\x2\x12C5\x12C6\a:\x2\x2\x12C6\x12C7\x5\x372\x1BA\x2\x12C7"+
		"\x183\x3\x2\x2\x2\x12C8\x12C9\a%\x2\x2\x12C9\x12CA\a\x351\x2\x2\x12CA"+
		"\x12CB\x5\x47A\x23E\x2\x12CB\x12D4\a\x3E9\x2\x2\x12CC\x12D2\a\x27F\x2"+
		"\x2\x12CD\x12D2\a\x3F7\x2\x2\x12CE\x12CF\a\x436\x2\x2\x12CF\x12D0\a\x351"+
		"\x2\x2\x12D0\x12D2\a\x9C\x2\x2\x12D1\x12CC\x3\x2\x2\x2\x12D1\x12CD\x3"+
		"\x2\x2\x2\x12D1\x12CE\x3\x2\x2\x2\x12D2\x12D3\x3\x2\x2\x2\x12D3\x12D5"+
		"\a\x465\x2\x2\x12D4\x12D1\x3\x2\x2\x2\x12D4\x12D5\x3\x2\x2\x2\x12D5\x12D6"+
		"\x3\x2\x2\x2\x12D6\x12D9\x5\x47A\x23E\x2\x12D7\x12D8\a\x459\x2\x2\x12D8"+
		"\x12DA\x5\x47A\x23E\x2\x12D9\x12D7\x3\x2\x2\x2\x12D9\x12DA\x3\x2\x2\x2"+
		"\x12DA\x185\x3\x2\x2\x2\x12DB\x12DC\a\xC9\x2\x2\x12DC\x12E4\a\x351\x2"+
		"\x2\x12DD\x12E5\x5\x47A\x23E\x2\x12DE\x12DF\a\x46\x2\x2\x12DF\x12E5\x5"+
		"\x47A\x23E\x2\x12E0\x12E1\x5\x47A\x23E\x2\x12E1\x12E2\a\x46\x2\x2\x12E2"+
		"\x12E3\x5\x47A\x23E\x2\x12E3\x12E5\x3\x2\x2\x2\x12E4\x12DD\x3\x2\x2\x2"+
		"\x12E4\x12DE\x3\x2\x2\x2\x12E4\x12E0\x3\x2\x2\x2\x12E5\x1300\x3\x2\x2"+
		"\x2\x12E6\x12FF\x5\x222\x112\x2\x12E7\x12FF\x5\x228\x115\x2\x12E8\x12E9"+
		"\t\x30\x2\x2\x12E9\x12EA\t\x31\x2\x2\x12EA\x12ED\a\x28D\x2\x2\x12EB\x12EC"+
		"\a\x351\x2\x2\x12EC\x12EE\a\x465\x2\x2\x12ED\x12EB\x3\x2\x2\x2\x12ED\x12EE"+
		"\x3\x2\x2\x2\x12EE\x12EF\x3\x2\x2\x2\x12EF\x12F0\x5\x47A\x23E\x2\x12F0"+
		"\x12F1\a\x3DF\x2\x2\x12F1\x12F2\x5\x47A\x23E\x2\x12F2\x12FF\x3\x2\x2\x2"+
		"\x12F3\x12F4\a\x335\x2\x2\x12F4\x12F5\t\x31\x2\x2\x12F5\x12F8\a\x28D\x2"+
		"\x2\x12F6\x12F7\a\x351\x2\x2\x12F7\x12F9\a\x465\x2\x2\x12F8\x12F6\x3\x2"+
		"\x2\x2\x12F8\x12F9\x3\x2\x2\x2\x12F9\x12FA\x3\x2\x2\x2\x12FA\x12FB\x5"+
		"\x47A\x23E\x2\x12FB\x12FC\a\x17E\x2\x2\x12FC\x12FD\x5\x47A\x23E\x2\x12FD"+
		"\x12FF\x3\x2\x2\x2\x12FE\x12E6\x3\x2\x2\x2\x12FE\x12E7\x3\x2\x2\x2\x12FE"+
		"\x12E8\x3\x2\x2\x2\x12FE\x12F3\x3\x2\x2\x2\x12FF\x1302\x3\x2\x2\x2\x1300"+
		"\x12FE\x3\x2\x2\x2\x1300\x1301\x3\x2\x2\x2\x1301\x187\x3\x2\x2\x2\x1302"+
		"\x1300\x3\x2\x2\x2\x1303\x1304\a\xC9\x2\x2\x1304\x1305\a\x351\x2\x2\x1305"+
		"\x1308\x5\x47A\x23E\x2\x1306\x1307\a\x46\x2\x2\x1307\x1309\x5\x47A\x23E"+
		"\x2\x1308\x1306\x3\x2\x2\x2\x1308\x1309\x3\x2\x2\x2\x1309\x189\x3\x2\x2"+
		"\x2\x130A\x130B\a%\x2\x2\x130B\x130C\a\x351\x2\x2\x130C\x130D\x5\x47A"+
		"\x23E\x2\x130D\x1310\a\x3E9\x2\x2\x130E\x130F\a\x27F\x2\x2\x130F\x1311"+
		"\a\x465\x2\x2\x1310\x130E\x3\x2\x2\x2\x1310\x1311\x3\x2\x2\x2\x1311\x1312"+
		"\x3\x2\x2\x2\x1312\x1315\x5\x47A\x23E\x2\x1313\x1314\a\x459\x2\x2\x1314"+
		"\x1316\a\x447\x2\x2\x1315\x1313\x3\x2\x2\x2\x1315\x1316\x3\x2\x2\x2\x1316"+
		"\x18B\x3\x2\x2\x2\x1317\x1318\a\xC9\x2\x2\x1318\x1319\a\x35B\x2\x2\x1319"+
		"\x131A\a\x2E0\x2\x2\x131A\x131B\a\x204\x2\x2\x131B\x1323\x5\x47A\x23E"+
		"\x2\x131C\x1320\a\x17E\x2\x2\x131D\x131E\x5\x47A\x23E\x2\x131E\x131F\a"+
		"\x459\x2\x2\x131F\x1321\x3\x2\x2\x2\x1320\x131D\x3\x2\x2\x2\x1320\x1321"+
		"\x3\x2\x2\x2\x1321\x1322\x3\x2\x2\x2\x1322\x1324\x5\x47A\x23E\x2\x1323"+
		"\x131C\x3\x2\x2\x2\x1323\x1324\x3\x2\x2\x2\x1324\x1327\x3\x2\x2\x2\x1325"+
		"\x1326\a\x46\x2\x2\x1326\x1328\x5\x47A\x23E\x2\x1327\x1325\x3\x2\x2\x2"+
		"\x1327\x1328\x3\x2\x2\x2\x1328\x18D\x3\x2\x2\x2\x1329\x132A\a\xC9\x2\x2"+
		"\x132A\x132B\a\x362\x2\x2\x132B\x132F\a\x2CB\x2\x2\x132C\x132D\x5\x47A"+
		"\x23E\x2\x132D\x132E\a\x459\x2\x2\x132E\x1330\x3\x2\x2\x2\x132F\x132C"+
		"\x3\x2\x2\x2\x132F\x1330\x3\x2\x2\x2\x1330\x1331\x3\x2\x2\x2\x1331\x135A"+
		"\x5\x47A\x23E\x2\x1332\x1334\a\x462\x2\x2\x1333\x1332\x3\x2\x2\x2\x1333"+
		"\x1334\x3\x2\x2\x2\x1334\x1335\x3\x2\x2\x2\x1335\x1337\a\r\x2\x2\x1336"+
		"\x1338\t\x32\x2\x2\x1337\x1336\x3\x2\x2\x2\x1337\x1338\x3\x2\x2\x2\x1338"+
		"\x1339\x3\x2\x2\x2\x1339\x133A\a\x2D0\x2\x2\x133A\x133B\x5\x47A\x23E\x2"+
		"\x133B\x133C\a\x459\x2\x2\x133C\x133D\x5\x47A\x23E\x2\x133D\x1342\a\x45E"+
		"\x2\x2\x133E\x1340\a\x462\x2\x2\x133F\x133E\x3\x2\x2\x2\x133F\x1340\x3"+
		"\x2\x2\x2\x1340\x1341\x3\x2\x2\x2\x1341\x1343\x5\x47A\x23E\x2\x1342\x133F"+
		"\x3\x2\x2\x2\x1343\x1344\x3\x2\x2\x2\x1344\x1342\x3\x2\x2\x2\x1344\x1345"+
		"\x3\x2\x2\x2\x1345\x1346\x3\x2\x2\x2\x1346\x1347\a\x45F\x2\x2\x1347\x1348"+
		"\a\x28D\x2\x2\x1348\x1349\x5\x47A\x23E\x2\x1349\x134A\a\x459\x2\x2\x134A"+
		"\x1357\x5\x47A\x23E\x2\x134B\x134D\a\x462\x2\x2\x134C\x134B\x3\x2\x2\x2"+
		"\x134C\x134D\x3\x2\x2\x2\x134D\x134E\x3\x2\x2\x2\x134E\x134F\a\x15\x2"+
		"\x2\x134F\x1356\t\x33\x2\x2\x1350\x1352\a\x462\x2\x2\x1351\x1350\x3\x2"+
		"\x2\x2\x1351\x1352\x3\x2\x2\x2\x1352\x1353\x3\x2\x2\x2\x1353\x1354\a["+
		"\x2\x2\x1354\x1356\t\x34\x2\x2\x1355\x134C\x3\x2\x2\x2\x1355\x1351\x3"+
		"\x2\x2\x2\x1356\x1359\x3\x2\x2\x2\x1357\x1355\x3\x2\x2\x2\x1357\x1358"+
		"\x3\x2\x2\x2\x1358\x135B\x3\x2\x2\x2\x1359\x1357\x3\x2\x2\x2\x135A\x1333"+
		"\x3\x2\x2\x2\x135B\x135C\x3\x2\x2\x2\x135C\x135A\x3\x2\x2\x2\x135C\x135D"+
		"\x3\x2\x2\x2\x135D\x1368\x3\x2\x2\x2\x135E\x135F\a\x42B\x2\x2\x135F\x1360"+
		"\a\x45E\x2\x2\x1360\x1361\a\x3A6\x2\x2\x1361\x1362\a\x44C\x2\x2\x1362"+
		"\x1365\t\x13\x2\x2\x1363\x1364\a\x352\x2\x2\x1364\x1366\t\x13\x2\x2\x1365"+
		"\x1363\x3\x2\x2\x2\x1365\x1366\x3\x2\x2\x2\x1366\x1367\x3\x2\x2\x2\x1367"+
		"\x1369\a\x45F\x2\x2\x1368\x135E\x3\x2\x2\x2\x1368\x1369\x3\x2\x2\x2\x1369"+
		"\x136D\x3\x2\x2\x2\x136A\x136B\a\x26A\x2\x2\x136B\x136C\a\x16F\x2\x2\x136C"+
		"\x136E\a\x31D\x2\x2\x136D\x136A\x3\x2\x2\x2\x136D\x136E\x3\x2\x2\x2\x136E"+
		"\x18F\x3\x2\x2\x2\x136F\x1370\a%\x2\x2\x1370\x1374\a\x36E\x2\x2\x1371"+
		"\x1372\x5\x47A\x23E\x2\x1372\x1373\a\x459\x2\x2\x1373\x1375\x3\x2\x2\x2"+
		"\x1374\x1371\x3\x2\x2\x2\x1374\x1375\x3\x2\x2\x2\x1375\x1376\x3\x2\x2"+
		"\x2\x1376\x137C\x5\x47A\x23E\x2\x1377\x137A\a\x329\x2\x2\x1378\x1379\a"+
		"\x42B\x2\x2\x1379\x137B\a\x446\x2\x2\x137A\x1378\x3\x2\x2\x2\x137A\x137B"+
		"\x3\x2\x2\x2\x137B\x137D\x3\x2\x2\x2\x137C\x1377\x3\x2\x2\x2\x137C\x137D"+
		"\x3\x2\x2\x2\x137D\x1381\x3\x2\x2\x2\x137E\x137F\a\x1C2\x2\x2\x137F\x1380"+
		"\aq\x2\x2\x1380\x1382\a\x446\x2\x2\x1381\x137E\x3\x2\x2\x2\x1381\x1382"+
		"\x3\x2\x2\x2\x1382\x1387\x3\x2\x2\x2\x1383\x1384\a\x23F\x2\x2\x1384\x1388"+
		"\a\x446\x2\x2\x1385\x1386\a\x259\x2\x2\x1386\x1388\a\x23F\x2\x2\x1387"+
		"\x1383\x3\x2\x2\x2\x1387\x1385\x3\x2\x2\x2\x1387\x1388\x3\x2\x2\x2\x1388"+
		"\x138D\x3\x2\x2\x2\x1389\x138A\a\x223\x2\x2\x138A\x138E\a\x446\x2\x2\x138B"+
		"\x138C\a\x259\x2\x2\x138C\x138E\a\x223\x2\x2\x138D\x1389\x3\x2\x2\x2\x138D"+
		"\x138B\x3\x2\x2\x2\x138D\x138E\x3\x2\x2\x2\x138E\x1392\x3\x2\x2\x2\x138F"+
		"\x1393\a\xDB\x2\x2\x1390\x1391\a\x259\x2\x2\x1391\x1393\a\xDB\x2\x2\x1392"+
		"\x138F\x3\x2\x2\x2\x1392\x1390\x3\x2\x2\x2\x1392\x1393\x3\x2\x2\x2\x1393"+
		"\x1398\x3\x2\x2\x2\x1394\x1395\ar\x2\x2\x1395\x1399\a\x446\x2\x2\x1396"+
		"\x1397\a\x259\x2\x2\x1397\x1399\ar\x2\x2\x1398\x1394\x3\x2\x2\x2\x1398"+
		"\x1396\x3\x2\x2\x2\x1398\x1399\x3\x2\x2\x2\x1399\x191\x3\x2\x2\x2\x139A"+
		"\x139B\a\xC9\x2\x2\x139B\x139F\a\x36E\x2\x2\x139C\x139D\x5\x47A\x23E\x2"+
		"\x139D\x139E\a\x459\x2\x2\x139E\x13A0\x3\x2\x2\x2\x139F\x139C\x3\x2\x2"+
		"\x2\x139F\x13A0\x3\x2\x2\x2\x13A0\x13A1\x3\x2\x2\x2\x13A1\x13A4\x5\x47A"+
		"\x23E\x2\x13A2\x13A3\a:\x2\x2\x13A3\x13A5\x5\x470\x239\x2\x13A4\x13A2"+
		"\x3\x2\x2\x2\x13A4\x13A5\x3\x2\x2\x2\x13A5\x13A9\x3\x2\x2\x2\x13A6\x13A7"+
		"\a\x3A2\x2\x2\x13A7\x13A8\a\x42B\x2\x2\x13A8\x13AA\a\x446\x2\x2\x13A9"+
		"\x13A6\x3\x2\x2\x2\x13A9\x13AA\x3\x2\x2\x2\x13AA\x13B1\x3\x2\x2\x2\x13AB"+
		"\x13AC\a\x1C2\x2\x2\x13AC\x13AE\aq\x2\x2\x13AD\x13AF\a\x46A\x2\x2\x13AE"+
		"\x13AD\x3\x2\x2\x2\x13AE\x13AF\x3\x2\x2\x2\x13AF\x13B0\x3\x2\x2\x2\x13B0"+
		"\x13B2\a\x446\x2\x2\x13B1\x13AB\x3\x2\x2\x2\x13B1\x13B2\x3\x2\x2\x2\x13B2"+
		"\x13BC\x3\x2\x2\x2\x13B3\x13B8\a\x23F\x2\x2\x13B4\x13B6\a\x46A\x2\x2\x13B5"+
		"\x13B4\x3\x2\x2\x2\x13B5\x13B6\x3\x2\x2\x2\x13B6\x13B7\x3\x2\x2\x2\x13B7"+
		"\x13B9\a\x446\x2\x2\x13B8\x13B5\x3\x2\x2\x2\x13B8\x13B9\x3\x2\x2\x2\x13B9"+
		"\x13BD\x3\x2\x2\x2\x13BA\x13BB\a\x259\x2\x2\x13BB\x13BD\a\x23F\x2\x2\x13BC"+
		"\x13B3\x3\x2\x2\x2\x13BC\x13BA\x3\x2\x2\x2\x13BC\x13BD\x3\x2\x2\x2\x13BD"+
		"\x13C7\x3\x2\x2\x2\x13BE\x13C3\a\x223\x2\x2\x13BF\x13C1\a\x46A\x2\x2\x13C0"+
		"\x13BF\x3\x2\x2\x2\x13C0\x13C1\x3\x2\x2\x2\x13C1\x13C2\x3\x2\x2\x2\x13C2"+
		"\x13C4\a\x446\x2\x2\x13C3\x13C0\x3\x2\x2\x2\x13C3\x13C4\x3\x2\x2\x2\x13C4"+
		"\x13C8\x3\x2\x2\x2\x13C5\x13C6\a\x259\x2\x2\x13C6\x13C8\a\x223\x2\x2\x13C7"+
		"\x13BE\x3\x2\x2\x2\x13C7\x13C5\x3\x2\x2\x2\x13C7\x13C8\x3\x2\x2\x2\x13C8"+
		"\x13CC\x3\x2\x2\x2\x13C9\x13CD\a\xDB\x2\x2\x13CA\x13CB\a\x259\x2\x2\x13CB"+
		"\x13CD\a\xDB\x2\x2\x13CC\x13C9\x3\x2\x2\x2\x13CC\x13CA\x3\x2\x2\x2\x13CC"+
		"\x13CD\x3\x2\x2\x2\x13CD\x13D4\x3\x2\x2\x2\x13CE\x13D0\ar\x2\x2\x13CF"+
		"\x13D1\a\x446\x2\x2\x13D0\x13CF\x3\x2\x2\x2\x13D0\x13D1\x3\x2\x2\x2\x13D1"+
		"\x13D5\x3\x2\x2\x2\x13D2\x13D3\a\x259\x2\x2\x13D3\x13D5\ar\x2\x2\x13D4"+
		"\x13CE\x3\x2\x2\x2\x13D4\x13D2\x3\x2\x2\x2\x13D4\x13D5\x3\x2\x2\x2\x13D5"+
		"\x193\x3\x2\x2\x2\x13D6\x13D7\a%\x2\x2\x13D7\x13D8\a\x371\x2\x2\x13D8"+
		"\x13D9\a\x42\x2\x2\x13D9\x145D\x5\x47A\x23E\x2\x13DA\x1407\a\x3DF\x2\x2"+
		"\x13DB\x13DC\a\x159\x2\x2\x13DC\x1401\a\x45E\x2\x2\x13DD\x13DF\a\x462"+
		"\x2\x2\x13DE\x13DD\x3\x2\x2\x2\x13DE\x13DF\x3\x2\x2\x2\x13DF\x13E0\x3"+
		"\x2\x2\x2\x13E0\x13E1\a\x160\x2\x2\x13E1\x13E2\a\x44C\x2\x2\x13E2\x1400"+
		"\a\x448\x2\x2\x13E3\x13E5\a\x462\x2\x2\x13E4\x13E3\x3\x2\x2\x2\x13E4\x13E5"+
		"\x3\x2\x2\x2\x13E5\x13E6\x3\x2\x2\x2\x13E6\x13E7\a\x221\x2\x2\x13E7\x13EB"+
		"\a\x44C\x2\x2\x13E8\x13E9\a\x446\x2\x2\x13E9\x13EC\t\x35\x2\x2\x13EA\x13EC"+
		"\a\x403\x2\x2\x13EB\x13E8\x3\x2\x2\x2\x13EB\x13EA\x3\x2\x2\x2\x13EC\x1400"+
		"\x3\x2\x2\x2\x13ED\x13EF\a\x462\x2\x2\x13EE\x13ED\x3\x2\x2\x2\x13EE\x13EF"+
		"\x3\x2\x2\x2\x13EF\x13F0\x3\x2\x2\x2\x13F0\x13F1\a\x230\x2\x2\x13F1\x13F2"+
		"\a\x44C\x2\x2\x13F2\x1400\t\x36\x2\x2\x13F3\x13F5\a\x462\x2\x2\x13F4\x13F3"+
		"\x3\x2\x2\x2\x13F4\x13F5\x3\x2\x2\x2\x13F5\x13F6\x3\x2\x2\x2\x13F6\x13F7"+
		"\a\x229\x2\x2\x13F7\x13F8\a\x44C\x2\x2\x13F8\x1400\a\x446\x2\x2\x13F9"+
		"\x13FB\a\x462\x2\x2\x13FA\x13F9\x3\x2\x2\x2\x13FA\x13FB\x3\x2\x2\x2\x13FB"+
		"\x13FC\x3\x2\x2\x2\x13FC\x13FD\a\x324\x2\x2\x13FD\x13FE\a\x44C\x2\x2\x13FE"+
		"\x1400\t\x13\x2\x2\x13FF\x13DE\x3\x2\x2\x2\x13FF\x13E4\x3\x2\x2\x2\x13FF"+
		"\x13EE\x3\x2\x2\x2\x13FF\x13F4\x3\x2\x2\x2\x13FF\x13FA\x3\x2\x2\x2\x1400"+
		"\x1403\x3\x2\x2\x2\x1401\x13FF\x3\x2\x2\x2\x1401\x1402\x3\x2\x2\x2\x1402"+
		"\x1404\x3\x2\x2\x2\x1403\x1401\x3\x2\x2\x2\x1404\x1408\a\x45F\x2\x2\x1405"+
		"\x1408\a\x33\x2\x2\x1406\x1408\a\x364\x2\x2\x1407\x13DB\x3\x2\x2\x2\x1407"+
		"\x1405\x3\x2\x2\x2\x1407\x1406\x3\x2\x2\x2\x1408\x140A\x3\x2\x2\x2\x1409"+
		"\x13DA\x3\x2\x2\x2\x1409\x140A\x3\x2\x2\x2\x140A\x1425\x3\x2\x2\x2\x140B"+
		"\x140C\a\x42B\x2\x2\x140C\x1421\a\x45E\x2\x2\x140D\x140F\a\x462\x2\x2"+
		"\x140E\x140D\x3\x2\x2\x2\x140E\x140F\x3\x2\x2\x2\x140F\x1410\x3\x2\x2"+
		"\x2\x1410\x1411\a\x2EC\x2\x2\x1411\x1412\a\x44C\x2\x2\x1412\x1420\a\x446"+
		"\x2\x2\x1413\x1415\a\x462\x2\x2\x1414\x1413\x3\x2\x2\x2\x1414\x1415\x3"+
		"\x2\x2\x2\x1415\x1416\x3\x2\x2\x2\x1416\x1417\a\x290\x2\x2\x1417\x1418"+
		"\a\x44C\x2\x2\x1418\x1420\t\x37\x2\x2\x1419\x141B\a\x462\x2\x2\x141A\x1419"+
		"\x3\x2\x2\x2\x141A\x141B\x3\x2\x2\x2\x141B\x141C\x3\x2\x2\x2\x141C\x141D"+
		"\a\x3A6\x2\x2\x141D\x141E\a\x44C\x2\x2\x141E\x1420\t\x13\x2\x2\x141F\x140E"+
		"\x3\x2\x2\x2\x141F\x1414\x3\x2\x2\x2\x141F\x141A\x3\x2\x2\x2\x1420\x1423"+
		"\x3\x2\x2\x2\x1421\x141F\x3\x2\x2\x2\x1421\x1422\x3\x2\x2\x2\x1422\x1424"+
		"\x3\x2\x2\x2\x1423\x1421\x3\x2\x2\x2\x1424\x1426\a\x45F\x2\x2\x1425\x140B"+
		"\x3\x2\x2\x2\x1425\x1426\x3\x2\x2\x2\x1426\x1455\x3\x2\x2\x2\x1427\x1453"+
		"\a\x428\x2\x2\x1428\x142A\a\x462\x2\x2\x1429\x1428\x3\x2\x2\x2\x1429\x142A"+
		"\x3\x2\x2\x2\x142A\x142C\x3\x2\x2\x2\x142B\x142D\a\x26A\x2\x2\x142C\x142B"+
		"\x3\x2\x2\x2\x142C\x142D\x3\x2\x2\x2\x142D\x142E\x3\x2\x2\x2\x142E\x143A"+
		"\x5\x47A\x23E\x2\x142F\x143B\a\x44C\x2\x2\x1430\x1431\a\x44E\x2\x2\x1431"+
		"\x143B\a\x44D\x2\x2\x1432\x1433\a\x44F\x2\x2\x1433\x143B\a\x44C\x2\x2"+
		"\x1434\x143B\a\x44D\x2\x2\x1435\x1436\a\x44D\x2\x2\x1436\x143B\a\x44C"+
		"\x2\x2\x1437\x143B\a\x44E\x2\x2\x1438\x1439\a\x44E\x2\x2\x1439\x143B\a"+
		"\x44C\x2\x2\x143A\x142F\x3\x2\x2\x2\x143A\x1430\x3\x2\x2\x2\x143A\x1432"+
		"\x3\x2\x2\x2\x143A\x1434\x3\x2\x2\x2\x143A\x1435\x3\x2\x2\x2\x143A\x1437"+
		"\x3\x2\x2\x2\x143A\x1438\x3\x2\x2\x2\x143B\x143C\x3\x2\x2\x2\x143C\x143D"+
		"\t!\x2\x2\x143D\x1454\x3\x2\x2\x2\x143E\x1440\a\x462\x2\x2\x143F\x143E"+
		"\x3\x2\x2\x2\x143F\x1440\x3\x2\x2\x2\x1440\x1441\x3\x2\x2\x2\x1441\x1443"+
		"\t&\x2\x2\x1442\x1444\a\x26A\x2\x2\x1443\x1442\x3\x2\x2\x2\x1443\x1444"+
		"\x3\x2\x2\x2\x1444\x1450\x3\x2\x2\x2\x1445\x1451\a\x44C\x2\x2\x1446\x1447"+
		"\a\x44E\x2\x2\x1447\x1451\a\x44D\x2\x2\x1448\x1449\a\x44F\x2\x2\x1449"+
		"\x1451\a\x44C\x2\x2\x144A\x1451\a\x44D\x2\x2\x144B\x144C\a\x44D\x2\x2"+
		"\x144C\x1451\a\x44C\x2\x2\x144D\x1451\a\x44E\x2\x2\x144E\x144F\a\x44E"+
		"\x2\x2\x144F\x1451\a\x44C\x2\x2\x1450\x1445\x3\x2\x2\x2\x1450\x1446\x3"+
		"\x2\x2\x2\x1450\x1448\x3\x2\x2\x2\x1450\x144A\x3\x2\x2\x2\x1450\x144B"+
		"\x3\x2\x2\x2\x1450\x144D\x3\x2\x2\x2\x1450\x144E\x3\x2\x2\x2\x1451\x1452"+
		"\x3\x2\x2\x2\x1452\x1454\t!\x2\x2\x1453\x1429\x3\x2\x2\x2\x1453\x143F"+
		"\x3\x2\x2\x2\x1454\x1456\x3\x2\x2\x2\x1455\x1427\x3\x2\x2\x2\x1455\x1456"+
		"\x3\x2\x2\x2\x1456\x145E\x3\x2\x2\x2\x1457\x1458\a\x313\x2\x2\x1458\x145E"+
		"\a\x428\x2\x2\x1459\x145A\a\x248\x2\x2\x145A\x145B\a\x24D\x2\x2\x145B"+
		"\x145C\a\x44C\x2\x2\x145C\x145E\x5\x47A\x23E\x2\x145D\x1409\x3\x2\x2\x2"+
		"\x145D\x1457\x3\x2\x2\x2\x145D\x1459\x3\x2\x2\x2\x145E\x195\x3\x2\x2\x2"+
		"\x145F\x1460\a\xC9\x2\x2\x1460\x1461\a\x371\x2\x2\x1461\x1462\a\x42\x2"+
		"\x2\x1462\x14EC\x5\x47A\x23E\x2\x1463\x1490\a\x3DF\x2\x2\x1464\x1465\a"+
		"\x159\x2\x2\x1465\x148A\a\x45E\x2\x2\x1466\x1468\a\x462\x2\x2\x1467\x1466"+
		"\x3\x2\x2\x2\x1467\x1468\x3\x2\x2\x2\x1468\x1469\x3\x2\x2\x2\x1469\x146A"+
		"\a\x160\x2\x2\x146A\x146B\a\x44C\x2\x2\x146B\x1489\a\x448\x2\x2\x146C"+
		"\x146E\a\x462\x2\x2\x146D\x146C\x3\x2\x2\x2\x146D\x146E\x3\x2\x2\x2\x146E"+
		"\x146F\x3\x2\x2\x2\x146F\x1470\a\x221\x2\x2\x1470\x1474\a\x44C\x2\x2\x1471"+
		"\x1472\a\x446\x2\x2\x1472\x1475\t\x35\x2\x2\x1473\x1475\a\x403\x2\x2\x1474"+
		"\x1471\x3\x2\x2\x2\x1474\x1473\x3\x2\x2\x2\x1475\x1489\x3\x2\x2\x2\x1476"+
		"\x1478\a\x462\x2\x2\x1477\x1476\x3\x2\x2\x2\x1477\x1478\x3\x2\x2\x2\x1478"+
		"\x1479\x3\x2\x2\x2\x1479\x147A\a\x230\x2\x2\x147A\x147B\a\x44C\x2\x2\x147B"+
		"\x1489\t\x36\x2\x2\x147C\x147E\a\x462\x2\x2\x147D\x147C\x3\x2\x2\x2\x147D"+
		"\x147E\x3\x2\x2\x2\x147E\x147F\x3\x2\x2\x2\x147F\x1480\a\x229\x2\x2\x1480"+
		"\x1481\a\x44C\x2\x2\x1481\x1489\a\x446\x2\x2\x1482\x1484\a\x462\x2\x2"+
		"\x1483\x1482\x3\x2\x2\x2\x1483\x1484\x3\x2\x2\x2\x1484\x1485\x3\x2\x2"+
		"\x2\x1485\x1486\a\x324\x2\x2\x1486\x1487\a\x44C\x2\x2\x1487\x1489\t\x13"+
		"\x2\x2\x1488\x1467\x3\x2\x2\x2\x1488\x146D\x3\x2\x2\x2\x1488\x1477\x3"+
		"\x2\x2\x2\x1488\x147D\x3\x2\x2\x2\x1488\x1483\x3\x2\x2\x2\x1489\x148C"+
		"\x3\x2\x2\x2\x148A\x1488\x3\x2\x2\x2\x148A\x148B\x3\x2\x2\x2\x148B\x148D"+
		"\x3\x2\x2\x2\x148C\x148A\x3\x2\x2\x2\x148D\x1491\a\x45F\x2\x2\x148E\x1491"+
		"\a\x33\x2\x2\x148F\x1491\a\x364\x2\x2\x1490\x1464\x3\x2\x2\x2\x1490\x148E"+
		"\x3\x2\x2\x2\x1490\x148F\x3\x2\x2\x2\x1491\x1493\x3\x2\x2\x2\x1492\x1463"+
		"\x3\x2\x2\x2\x1492\x1493\x3\x2\x2\x2\x1493\x14B4\x3\x2\x2\x2\x1494\x1495"+
		"\a\x42B\x2\x2\x1495\x14B0\a\x45E\x2\x2\x1496\x1498\a\x462\x2\x2\x1497"+
		"\x1496\x3\x2\x2\x2\x1497\x1498\x3\x2\x2\x2\x1498\x1499\x3\x2\x2\x2\x1499"+
		"\x149A\a\x2EC\x2\x2\x149A\x149B\a\x44C\x2\x2\x149B\x14AF\a\x446\x2\x2"+
		"\x149C\x149E\a\x462\x2\x2\x149D\x149C\x3\x2\x2\x2\x149D\x149E\x3\x2\x2"+
		"\x2\x149E\x149F\x3\x2\x2\x2\x149F\x14A0\a\x290\x2\x2\x14A0\x14A1\a\x44C"+
		"\x2\x2\x14A1\x14AF\t\x37\x2\x2\x14A2\x14A4\a\x462\x2\x2\x14A3\x14A2\x3"+
		"\x2\x2\x2\x14A3\x14A4\x3\x2\x2\x2\x14A4\x14A5\x3\x2\x2\x2\x14A5\x14A6"+
		"\a\x3A6\x2\x2\x14A6\x14A7\a\x44C\x2\x2\x14A7\x14AF\t\x13\x2\x2\x14A8\x14AA"+
		"\a\x462\x2\x2\x14A9\x14A8\x3\x2\x2\x2\x14A9\x14AA\x3\x2\x2\x2\x14AA\x14AB"+
		"\x3\x2\x2\x2\x14AB\x14AC\a\x43\x2\x2\x14AC\x14AD\a\x44C\x2\x2\x14AD\x14AF"+
		"\x5\x47A\x23E\x2\x14AE\x1497\x3\x2\x2\x2\x14AE\x149D\x3\x2\x2\x2\x14AE"+
		"\x14A3\x3\x2\x2\x2\x14AE\x14A9\x3\x2\x2\x2\x14AF\x14B2\x3\x2\x2\x2\x14B0"+
		"\x14AE\x3\x2\x2\x2\x14B0\x14B1\x3\x2\x2\x2\x14B1\x14B3\x3\x2\x2\x2\x14B2"+
		"\x14B0\x3\x2\x2\x2\x14B3\x14B5\a\x45F\x2\x2\x14B4\x1494\x3\x2\x2\x2\x14B4"+
		"\x14B5\x3\x2\x2\x2\x14B5\x14E4\x3\x2\x2\x2\x14B6\x14E2\a\x428\x2\x2\x14B7"+
		"\x14B9\a\x462\x2\x2\x14B8\x14B7\x3\x2\x2\x2\x14B8\x14B9\x3\x2\x2\x2\x14B9"+
		"\x14BB\x3\x2\x2\x2\x14BA\x14BC\a\x26A\x2\x2\x14BB\x14BA\x3\x2\x2\x2\x14BB"+
		"\x14BC\x3\x2\x2\x2\x14BC\x14BD\x3\x2\x2\x2\x14BD\x14C9\x5\x47A\x23E\x2"+
		"\x14BE\x14CA\a\x44C\x2\x2\x14BF\x14C0\a\x44E\x2\x2\x14C0\x14CA\a\x44D"+
		"\x2\x2\x14C1\x14C2\a\x44F\x2\x2\x14C2\x14CA\a\x44C\x2\x2\x14C3\x14CA\a"+
		"\x44D\x2\x2\x14C4\x14C5\a\x44D\x2\x2\x14C5\x14CA\a\x44C\x2\x2\x14C6\x14CA"+
		"\a\x44E\x2\x2\x14C7\x14C8\a\x44E\x2\x2\x14C8\x14CA\a\x44C\x2\x2\x14C9"+
		"\x14BE\x3\x2\x2\x2\x14C9\x14BF\x3\x2\x2\x2\x14C9\x14C1\x3\x2\x2\x2\x14C9"+
		"\x14C3\x3\x2\x2\x2\x14C9\x14C4\x3\x2\x2\x2\x14C9\x14C6\x3\x2\x2\x2\x14C9"+
		"\x14C7\x3\x2\x2\x2\x14CA\x14CB\x3\x2\x2\x2\x14CB\x14CC\t!\x2\x2\x14CC"+
		"\x14E3\x3\x2\x2\x2\x14CD\x14CF\a\x462\x2\x2\x14CE\x14CD\x3\x2\x2\x2\x14CE"+
		"\x14CF\x3\x2\x2\x2\x14CF\x14D0\x3\x2\x2\x2\x14D0\x14D2\t&\x2\x2\x14D1"+
		"\x14D3\a\x26A\x2\x2\x14D2\x14D1\x3\x2\x2\x2\x14D2\x14D3\x3\x2\x2\x2\x14D3"+
		"\x14DF\x3\x2\x2\x2\x14D4\x14E0\a\x44C\x2\x2\x14D5\x14D6\a\x44E\x2\x2\x14D6"+
		"\x14E0\a\x44D\x2\x2\x14D7\x14D8\a\x44F\x2\x2\x14D8\x14E0\a\x44C\x2\x2"+
		"\x14D9\x14E0\a\x44D\x2\x2\x14DA\x14DB\a\x44D\x2\x2\x14DB\x14E0\a\x44C"+
		"\x2\x2\x14DC\x14E0\a\x44E\x2\x2\x14DD\x14DE\a\x44E\x2\x2\x14DE\x14E0\a"+
		"\x44C\x2\x2\x14DF\x14D4\x3\x2\x2\x2\x14DF\x14D5\x3\x2\x2\x2\x14DF\x14D7"+
		"\x3\x2\x2\x2\x14DF\x14D9\x3\x2\x2\x2\x14DF\x14DA\x3\x2\x2\x2\x14DF\x14DC"+
		"\x3\x2\x2\x2\x14DF\x14DD\x3\x2\x2\x2\x14E0\x14E1\x3\x2\x2\x2\x14E1\x14E3"+
		"\t!\x2\x2\x14E2\x14B8\x3\x2\x2\x2\x14E2\x14CE\x3\x2\x2\x2\x14E3\x14E5"+
		"\x3\x2\x2\x2\x14E4\x14B6\x3\x2\x2\x2\x14E4\x14E5\x3\x2\x2\x2\x14E5\x14ED"+
		"\x3\x2\x2\x2\x14E6\x14E7\a\x313\x2\x2\x14E7\x14ED\a\x428\x2\x2\x14E8\x14E9"+
		"\a\x248\x2\x2\x14E9\x14EA\a\x24D\x2\x2\x14EA\x14EB\a\x44C\x2\x2\x14EB"+
		"\x14ED\x5\x47A\x23E\x2\x14EC\x1492\x3\x2\x2\x2\x14EC\x14E6\x3\x2\x2\x2"+
		"\x14EC\x14E8\x3\x2\x2\x2\x14ED\x197\x3\x2\x2\x2\x14EE\x14EF\a%\x2\x2\x14EF"+
		"\x14F0\a\x371\x2\x2\x14F0\x14F1\a\x42\x2\x2\x14F1\x14F2\a\x39A\x2\x2\x14F2"+
		"\x14F7\x5\x47A\x23E\x2\x14F3\x14F4\a\x16F\x2\x2\x14F4\x14F5\a\x371\x2"+
		"\x2\x14F5\x14F6\a\x42\x2\x2\x14F6\x14F8\x5\x47A\x23E\x2\x14F7\x14F3\x3"+
		"\x2\x2\x2\x14F7\x14F8\x3\x2\x2\x2\x14F8\x1500\x3\x2\x2\x2\x14F9\x14FA"+
		"\t\x19\x2\x2\x14FA\x14FB\a\x45E\x2\x2\x14FB\x14FC\x5\x47A\x23E\x2\x14FC"+
		"\x14FD\a\x45F\x2\x2\x14FD\x14FF\x3\x2\x2\x2\x14FE\x14F9\x3\x2\x2\x2\x14FF"+
		"\x1502\x3\x2\x2\x2\x1500\x14FE\x3\x2\x2\x2\x1500\x1501\x3\x2\x2\x2\x1501"+
		"\x1509\x3\x2\x2\x2\x1502\x1500\x3\x2\x2\x2\x1503\x1504\a\x42B\x2\x2\x1504"+
		"\x1505\a\x45E\x2\x2\x1505\x1506\a\x3A6\x2\x2\x1506\x1507\a\x44C\x2\x2"+
		"\x1507\x1508\t\x13\x2\x2\x1508\x150A\a\x45F\x2\x2\x1509\x1503\x3\x2\x2"+
		"\x2\x1509\x150A\x3\x2\x2\x2\x150A\x199\x3\x2\x2\x2\x150B\x150C\a\xC9\x2"+
		"\x2\x150C\x150D\a\x371\x2\x2\x150D\x150E\a\x42\x2\x2\x150E\x150F\a\x39A"+
		"\x2\x2\x150F\x1514\x5\x47A\x23E\x2\x1510\x1511\a\x16F\x2\x2\x1511\x1512"+
		"\a\x371\x2\x2\x1512\x1513\a\x42\x2\x2\x1513\x1515\x5\x47A\x23E\x2\x1514"+
		"\x1510\x3\x2\x2\x2\x1514\x1515\x3\x2\x2\x2\x1515\x151D\x3\x2\x2\x2\x1516"+
		"\x1517\a\r\x2\x2\x1517\x1518\a\x45E\x2\x2\x1518\x1519\x5\x47A\x23E\x2"+
		"\x1519\x151A\a\x45F\x2\x2\x151A\x151C\x3\x2\x2\x2\x151B\x1516\x3\x2\x2"+
		"\x2\x151C\x151F\x3\x2\x2\x2\x151D\x151B\x3\x2\x2\x2\x151D\x151E\x3\x2"+
		"\x2\x2\x151E\x1526\x3\x2\x2\x2\x151F\x151D\x3\x2\x2\x2\x1520\x1521\a\x42B"+
		"\x2\x2\x1521\x1522\a\x45E\x2\x2\x1522\x1523\a\x3A6\x2\x2\x1523\x1524\a"+
		"\x44C\x2\x2\x1524\x1525\t\x13\x2\x2\x1525\x1527\a\x45F\x2\x2\x1526\x1520"+
		"\x3\x2\x2\x2\x1526\x1527\x3\x2\x2\x2\x1527\x19B\x3\x2\x2\x2\x1528\x1529"+
		"\a%\x2\x2\x1529\x152A\a\x371\x2\x2\x152A\x152B\a\xB1\x2\x2\x152B\x1595"+
		"\a\x37C\x2\x2\x152C\x152D\a\x2DE\x2\x2\x152D\x1551\a\x14\x2\x2\x152E\x152F"+
		"\a\xC8\x2\x2\x152F\x153F\a\x44C\x2\x2\x1530\x1540\aG\x2\x2\x1531\x1533"+
		"\a\x462\x2\x2\x1532\x1531\x3\x2\x2\x2\x1532\x1533\x3\x2\x2\x2\x1533\x1534"+
		"\x3\x2\x2\x2\x1534\x153C\a\x446\x2\x2\x1535\x1537\a\x462\x2\x2\x1536\x1535"+
		"\x3\x2\x2\x2\x1536\x1537\x3\x2\x2\x2\x1537\x1538\x3\x2\x2\x2\x1538\x1539"+
		"\a\x446\x2\x2\x1539\x153A\a\x3DF\x2\x2\x153A\x153C\a\x446\x2\x2\x153B"+
		"\x1532\x3\x2\x2\x2\x153B\x1536\x3\x2\x2\x2\x153C\x153D\x3\x2\x2\x2\x153D"+
		"\x153B\x3\x2\x2\x2\x153D\x153E\x3\x2\x2\x2\x153E\x1540\x3\x2\x2\x2\x153F"+
		"\x1530\x3\x2\x2\x2\x153F\x153B\x3\x2\x2\x2\x1540\x1552\x3\x2\x2\x2\x1541"+
		"\x1542\a\x27C\x2\x2\x1542\x154D\a\x44C\x2\x2\x1543\x1545\a\x462\x2\x2"+
		"\x1544\x1543\x3\x2\x2\x2\x1544\x1545\x3\x2\x2\x2\x1545\x1546\x3\x2\x2"+
		"\x2\x1546\x154E\a\x446\x2\x2\x1547\x1549\a\x462\x2\x2\x1548\x1547\x3\x2"+
		"\x2\x2\x1548\x1549\x3\x2\x2\x2\x1549\x154A\x3\x2\x2\x2\x154A\x154B\a\x446"+
		"\x2\x2\x154B\x154C\a\x3DF\x2\x2\x154C\x154E\a\x446\x2\x2\x154D\x1544\x3"+
		"\x2\x2\x2\x154D\x1548\x3\x2\x2\x2\x154E\x154F\x3\x2\x2\x2\x154F\x154D"+
		"\x3\x2\x2\x2\x154F\x1550\x3\x2\x2\x2\x1550\x1552\x3\x2\x2\x2\x1551\x152E"+
		"\x3\x2\x2\x2\x1551\x1541\x3\x2\x2\x2\x1552\x1596\x3\x2\x2\x2\x1553\x1554"+
		"\a\x10B\x2\x2\x1554\x1564\a\x210\x2\x2\x1555\x1565\a\x28D\x2\x2\x1556"+
		"\x1565\a\x287\x2\x2\x1557\x1558\a\x2B7\x2\x2\x1558\x1559\a\x44C\x2\x2"+
		"\x1559\x1565\t\x38\x2\x2\x155A\x155B\a\x231\x2\x2\x155B\x155F\a\x44C\x2"+
		"\x2\x155C\x155D\a\x446\x2\x2\x155D\x1560\a\x232\x2\x2\x155E\x1560\a\xF7"+
		"\x2\x2\x155F\x155C\x3\x2\x2\x2\x155F\x155E\x3\x2\x2\x2\x1560\x1565\x3"+
		"\x2\x2\x2\x1561\x1562\a\x229\x2\x2\x1562\x1563\a\x44C\x2\x2\x1563\x1565"+
		"\t\x39\x2\x2\x1564\x1555\x3\x2\x2\x2\x1564\x1556\x3\x2\x2\x2\x1564\x1557"+
		"\x3\x2\x2\x2\x1564\x155A\x3\x2\x2\x2\x1564\x1561\x3\x2\x2\x2\x1565\x1596"+
		"\x3\x2\x2\x2\x1566\x1567\a\x14F\x2\x2\x1567\x1568\a\x98\x2\x2\x1568\x157A"+
		"\a\x2E0\x2\x2\x1569\x156A\a\x41C\x2\x2\x156A\x156B\a\x44C\x2\x2\x156B"+
		"\x157B\t\x38\x2\x2\x156C\x156D\a\x39D\x2\x2\x156D\x156E\a\x44C\x2\x2\x156E"+
		"\x157B\t\x38\x2\x2\x156F\x1570\a\x39E\x2\x2\x1570\x1571\a\x44C\x2\x2\x1571"+
		"\x157B\t\x38\x2\x2\x1572\x1573\a\x39F\x2\x2\x1573\x157B\t\x38\x2\x2\x1574"+
		"\x1575\a\x152\x2\x2\x1575\x1576\a\x44C\x2\x2\x1576\x157B\t\x38\x2\x2\x1577"+
		"\x1578\a\x1A2\x2\x2\x1578\x1579\a\x44C\x2\x2\x1579\x157B\t\x39\x2\x2\x157A"+
		"\x1569\x3\x2\x2\x2\x157A\x156C\x3\x2\x2\x2\x157A\x156F\x3\x2\x2\x2\x157A"+
		"\x1572\x3\x2\x2\x2\x157A\x1574\x3\x2\x2\x2\x157A\x1577\x3\x2\x2\x2\x157B"+
		"\x1596\x3\x2\x2\x2\x157C\x157D\a\x19C\x2\x2\x157D\x157E\a\x98\x2\x2\x157E"+
		"\x157F\a\xBA\x2\x2\x157F\x1580\a\x44C\x2\x2\x1580\x1596\t:\x2\x2\x1581"+
		"\x1582\am\x2\x2\x1582\x1583\a\x2CC\x2\x2\x1583\x1590\a\x14C\x2\x2\x1584"+
		"\x1585\a\x28D\x2\x2\x1585\x1586\a\x45E\x2\x2\x1586\x1587\a\x15F\x2\x2"+
		"\x1587\x1588\a\x44C\x2\x2\x1588\x1589\a\x448\x2\x2\x1589\x158A\a\x462"+
		"\x2\x2\x158A\x158B\a\x38E\x2\x2\x158B\x158C\a\x44C\x2\x2\x158C\x158D\a"+
		"\x446\x2\x2\x158D\x158E\t;\x2\x2\x158E\x1591\a\x45F\x2\x2\x158F\x1591"+
		"\a\x287\x2\x2\x1590\x1584\x3\x2\x2\x2\x1590\x158F\x3\x2\x2\x2\x1591\x1596"+
		"\x3\x2\x2\x2\x1592\x1593\a\x37C\x2\x2\x1593\x1594\a\x392\x2\x2\x1594\x1596"+
		"\t\x13\x2\x2\x1595\x152C\x3\x2\x2\x2\x1595\x1553\x3\x2\x2\x2\x1595\x1566"+
		"\x3\x2\x2\x2\x1595\x157C\x3\x2\x2\x2\x1595\x1581\x3\x2\x2\x2\x1595\x1592"+
		"\x3\x2\x2\x2\x1596\x19D\x3\x2\x2\x2\x1597\x1598\a%\x2\x2\x1598\x1599\a"+
		"\x371\x2\x2\x1599\x159A\a\x339\x2\x2\x159A\x15A2\x5\x47A\x23E\x2\x159B"+
		"\x159C\t\x19\x2\x2\x159C\x159D\a\x236\x2\x2\x159D\x15A3\x5\x47A\x23E\x2"+
		"\x159E\x159F\a\x42B\x2\x2\x159F\x15A0\a\x24D\x2\x2\x15A0\x15A1\a\x44C"+
		"\x2\x2\x15A1\x15A3\x5\x47A\x23E\x2\x15A2\x159B\x3\x2\x2\x2\x15A2\x159E"+
		"\x3\x2\x2\x2\x15A3\x19F\x3\x2\x2\x2\x15A4\x15A5\a\xC9\x2\x2\x15A5\x15A6"+
		"\a\x371\x2\x2\x15A6\x15A7\a\x339\x2\x2\x15A7\x15AA\x5\x47A\x23E\x2\x15A8"+
		"\x15A9\a\x46\x2\x2\x15A9\x15AB\x5\x47A\x23E\x2\x15AA\x15A8\x3\x2\x2\x2"+
		"\x15AA\x15AB\x3\x2\x2\x2\x15AB\x1A1\x3\x2\x2\x2\x15AC\x15AD\a%\x2\x2\x15AD"+
		"\x15AE\a\x371\x2\x2\x15AE\x15AF\a\x339\x2\x2\x15AF\x15B0\x5\x47A\x23E"+
		"\x2\x15B0\x15B1\t\x19\x2\x2\x15B1\x15B2\a\x236\x2\x2\x15B2\x15B3\x5\x47A"+
		"\x23E\x2\x15B3\x1A3\x3\x2\x2\x2\x15B4\x15B5\a%\x2\x2\x15B5\x15B6\a\x373"+
		"\x2\x2\x15B6\x15BF\x5\x47A\x23E\x2\x15B7\x15B8\a\x28D\x2\x2\x15B8\x15BC"+
		"\a\x2EB\x2\x2\x15B9\x15BA\x5\x47A\x23E\x2\x15BA\x15BB\a\x459\x2\x2\x15BB"+
		"\x15BD\x3\x2\x2\x2\x15BC\x15B9\x3\x2\x2\x2\x15BC\x15BD\x3\x2\x2\x2\x15BD"+
		"\x15BE\x3\x2\x2\x2\x15BE\x15C0\x5\x47A\x23E\x2\x15BF\x15B7\x3\x2\x2\x2"+
		"\x15BF\x15C0\x3\x2\x2\x2\x15C0\x15CC\x3\x2\x2\x2\x15C1\x15C2\a\x45E\x2"+
		"\x2\x15C2\x15C7\x5\x1A6\xD4\x2\x15C3\x15C4\a\x462\x2\x2\x15C4\x15C6\x5"+
		"\x1A6\xD4\x2\x15C5\x15C3\x3\x2\x2\x2\x15C6\x15C9\x3\x2\x2\x2\x15C7\x15C5"+
		"\x3\x2\x2\x2\x15C7\x15C8\x3\x2\x2\x2\x15C8\x15CA\x3\x2\x2\x2\x15C9\x15C7"+
		"\x3\x2\x2\x2\x15CA\x15CB\a\x45F\x2\x2\x15CB\x15CD\x3\x2\x2\x2\x15CC\x15C1"+
		"\x3\x2\x2\x2\x15CC\x15CD\x3\x2\x2\x2\x15CD\x1A5\x3\x2\x2\x2\x15CE\x15CF"+
		"\t\x19\x2\x2\x15CF\x15D0\a\xBE\x2\x2\x15D0\x15D1\x5\x47A\x23E\x2\x15D1"+
		"\x1A7\x3\x2\x2\x2\x15D2\x15D3\a\xC9\x2\x2\x15D3\x15D4\a\x373\x2\x2\x15D4"+
		"\x15D7\x5\x47A\x23E\x2\x15D5\x15D6\a\x46\x2\x2\x15D6\x15D8\x5\x47A\x23E"+
		"\x2\x15D7\x15D5\x3\x2\x2\x2\x15D7\x15D8\x3\x2\x2\x2\x15D8\x15D9\x3\x2"+
		"\x2\x2\x15D9\x15DA\a\x28D\x2\x2\x15DA\x15DE\a\x2EB\x2\x2\x15DB\x15DC\x5"+
		"\x47A\x23E\x2\x15DC\x15DD\a\x459\x2\x2\x15DD\x15DF\x3\x2\x2\x2\x15DE\x15DB"+
		"\x3\x2\x2\x2\x15DE\x15DF\x3\x2\x2\x2\x15DF\x15E0\x3\x2\x2\x2\x15E0\x15EE"+
		"\x5\x47A\x23E\x2\x15E1\x15E9\a\x45E\x2\x2\x15E2\x15E4\a\x462\x2\x2\x15E3"+
		"\x15E2\x3\x2\x2\x2\x15E3\x15E4\x3\x2\x2\x2\x15E4\x15E7\x3\x2\x2\x2\x15E5"+
		"\x15E8\x5\x47A\x23E\x2\x15E6\x15E8\a\xF7\x2\x2\x15E7\x15E5\x3\x2\x2\x2"+
		"\x15E7\x15E6\x3\x2\x2\x2\x15E8\x15EA\x3\x2\x2\x2\x15E9\x15E3\x3\x2\x2"+
		"\x2\x15EA\x15EB\x3\x2\x2\x2\x15EB\x15E9\x3\x2\x2\x2\x15EB\x15EC\x3\x2"+
		"\x2\x2\x15EC\x15ED\x3\x2\x2\x2\x15ED\x15EF\a\x45F\x2\x2\x15EE\x15E1\x3"+
		"\x2\x2\x2\x15EE\x15EF\x3\x2\x2\x2\x15EF\x1A9\x3\x2\x2\x2\x15F0\x15F1\a"+
		"%\x2\x2\x15F1\x15F2\a\x373\x2\x2\x15F2\x15F3\a\x21B\x2\x2\x15F3\x1609"+
		"\a\x1EE\x2\x2\x15F4\x15F6\a\x170\x2\x2\x15F5\x15F4\x3\x2\x2\x2\x15F5\x15F6"+
		"\x3\x2\x2\x2\x15F6\x15F7\x3\x2\x2\x2\x15F7\x160A\a\x30C\x2\x2\x15F8\x1607"+
		"\a\x42B\x2\x2\x15F9\x15FA\a\x28B\x2\x2\x15FA\x15FB\a\x44C\x2\x2\x15FB"+
		"\x15FC\a\x448\x2\x2\x15FC\x15FD\a\x462\x2\x2\x15FD\x15FE\a\x28C\x2\x2"+
		"\x15FE\x15FF\a\x44C\x2\x2\x15FF\x1608\a\x448\x2\x2\x1600\x1601\a\x255"+
		"\x2\x2\x1601\x1602\a\x44C\x2\x2\x1602\x1603\a\x448\x2\x2\x1603\x1604\a"+
		"\x462\x2\x2\x1604\x1605\a\x257\x2\x2\x1605\x1606\a\x44C\x2\x2\x1606\x1608"+
		"\a\x448\x2\x2\x1607\x15F9\x3\x2\x2\x2\x1607\x1600\x3\x2\x2\x2\x1607\x1608"+
		"\x3\x2\x2\x2\x1608\x160A\x3\x2\x2\x2\x1609\x15F5\x3\x2\x2\x2\x1609\x15F8"+
		"\x3\x2\x2\x2\x160A\x1AB\x3\x2\x2\x2\x160B\x160C\a%\x2\x2\x160C\x160D\a"+
		"\x3C6\x2\x2\x160D\x160E\a\x1EE\x2\x2\x160E\x160F\x5\x47A\x23E\x2\x160F"+
		"\x1610\t\x19\x2\x2\x1610\x1611\a\x12B\x2\x2\x1611\x161D\aq\x2\x2\x1612"+
		"\x1613\a}\x2\x2\x1613\x161E\x5\x47A\x23E\x2\x1614\x1615\a\x2B6\x2\x2\x1615"+
		"\x1616\a\x44C\x2\x2\x1616\x161E\a\x448\x2\x2\x1617\x1618\a\x3C6\x2\x2"+
		"\x1618\x1619\a\x1EE\x2\x2\x1619\x161E\x5\x47A\x23E\x2\x161A\x161B\a?\x2"+
		"\x2\x161B\x161C\a\x1EE\x2\x2\x161C\x161E\x5\x47A\x23E\x2\x161D\x1612\x3"+
		"\x2\x2\x2\x161D\x1614\x3\x2\x2\x2\x161D\x1617\x3\x2\x2\x2\x161D\x161A"+
		"\x3\x2\x2\x2\x161E\x1AD\x3\x2\x2\x2\x161F\x1620\a\xC9\x2\x2\x1620\x1624"+
		"\a\x3C8\x2\x2\x1621\x1622\x5\x47A\x23E\x2\x1622\x1623\a\x459\x2\x2\x1623"+
		"\x1625\x3\x2\x2\x2\x1624\x1621\x3\x2\x2\x2\x1624\x1625\x3\x2\x2\x2\x1625"+
		"\x1626\x3\x2\x2\x2\x1626\x1627\x5\x47A\x23E\x2\x1627\x1642\a\x16F\x2\x2"+
		"\x1628\x1629\x5\x47A\x23E\x2\x1629\x162A\a\x459\x2\x2\x162A\x162C\x3\x2"+
		"\x2\x2\x162B\x1628\x3\x2\x2\x2\x162B\x162C\x3\x2\x2\x2\x162C\x1630\x3"+
		"\x2\x2\x2\x162D\x162E\x5\x47A\x23E\x2\x162E\x162F\a\x459\x2\x2\x162F\x1631"+
		"\x3\x2\x2\x2\x1630\x162D\x3\x2\x2\x2\x1630\x1631\x3\x2\x2\x2\x1631\x1635"+
		"\x3\x2\x2\x2\x1632\x1633\x5\x47A\x23E\x2\x1633\x1634\a\x459\x2\x2\x1634"+
		"\x1636\x3\x2\x2\x2\x1635\x1632\x3\x2\x2\x2\x1635\x1636\x3\x2\x2\x2\x1636"+
		"\x1637\x3\x2\x2\x2\x1637\x1643\x5\x47A\x23E\x2\x1638\x1639\x5\x47A\x23E"+
		"\x2\x1639\x163A\a\x459\x2\x2\x163A\x163C\x3\x2\x2\x2\x163B\x1638\x3\x2"+
		"\x2\x2\x163B\x163C\x3\x2\x2\x2\x163C\x1640\x3\x2\x2\x2\x163D\x163E\x5"+
		"\x47A\x23E\x2\x163E\x163F\a\x459\x2\x2\x163F\x1641\x3\x2\x2\x2\x1640\x163D"+
		"\x3\x2\x2\x2\x1640\x1641\x3\x2\x2\x2\x1641\x1643\x3\x2\x2\x2\x1642\x162B"+
		"\x3\x2\x2\x2\x1642\x163B\x3\x2\x2\x2\x1643\x1AF\x3\x2\x2\x2\x1644\x1645"+
		"\a%\x2\x2\x1645\x1646\a\x40F\x2\x2\x1646\x1647\x5\x47A\x23E\x2\x1647\x167A"+
		"\a\x42B\x2\x2\x1648\x164A\a\x462\x2\x2\x1649\x1648\x3\x2\x2\x2\x1649\x164A"+
		"\x3\x2\x2\x2\x164A\x164B\x3\x2\x2\x2\x164B\x164C\a\x24D\x2\x2\x164C\x164D"+
		"\a\x44C\x2\x2\x164D\x167B\x5\x47A\x23E\x2\x164E\x1650\a\x462\x2\x2\x164F"+
		"\x164E\x3\x2\x2\x2\x164F\x1650\x3\x2\x2\x2\x1650\x1651\x3\x2\x2\x2\x1651"+
		"\x1652\a\xFC\x2\x2\x1652\x1655\a\x44C\x2\x2\x1653\x1656\x5\x47A\x23E\x2"+
		"\x1654\x1656\a\x27A\x2\x2\x1655\x1653\x3\x2\x2\x2\x1655\x1654\x3\x2\x2"+
		"\x2\x1656\x167B\x3\x2\x2\x2\x1657\x1659\a\x462\x2\x2\x1658\x1657\x3\x2"+
		"\x2\x2\x1658\x1659\x3\x2\x2\x2\x1659\x165A\x3\x2\x2\x2\x165A\x165B\a\x211"+
		"\x2\x2\x165B\x165C\a\x44C\x2\x2\x165C\x167B\x5\x47A\x23E\x2\x165D\x165F"+
		"\a\x462\x2\x2\x165E\x165D\x3\x2\x2\x2\x165E\x165F\x3\x2\x2\x2\x165F\x1660"+
		"\x3\x2\x2\x2\x1660\x1661\a\x2B6\x2\x2\x1661\x1662\a\x44C\x2\x2\x1662\x1666"+
		"\a\x448\x2\x2\x1663\x1664\a\x28C\x2\x2\x1664\x1665\a\x44C\x2\x2\x1665"+
		"\x1667\a\x448\x2\x2\x1666\x1663\x3\x2\x2\x2\x1667\x1668\x3\x2\x2\x2\x1668"+
		"\x1666\x3\x2\x2\x2\x1668\x1669\x3\x2\x2\x2\x1669\x167B\x3\x2\x2\x2\x166A"+
		"\x166C\a\x462\x2\x2\x166B\x166A\x3\x2\x2\x2\x166B\x166C\x3\x2\x2\x2\x166C"+
		"\x166D\x3\x2\x2\x2\x166D\x166E\a\xFB\x2\x2\x166E\x1672\a\x44C\x2\x2\x166F"+
		"\x1673\a\x264\x2\x2\x1670\x1673\a\x446\x2\x2\x1671\x1673\x5\x47A\x23E"+
		"\x2\x1672\x166F\x3\x2\x2\x2\x1672\x1670\x3\x2\x2\x2\x1672\x1671\x3\x2"+
		"\x2\x2\x1673\x167B\x3\x2\x2\x2\x1674\x1676\a\x462\x2\x2\x1675\x1674\x3"+
		"\x2\x2\x2\x1675\x1676\x3\x2\x2\x2\x1676\x1677\x3\x2\x2\x2\x1677\x1678"+
		"\a\x1B\x2\x2\x1678\x1679\a\x44C\x2\x2\x1679\x167B\t\x13\x2\x2\x167A\x1649"+
		"\x3\x2\x2\x2\x167A\x164F\x3\x2\x2\x2\x167A\x1658\x3\x2\x2\x2\x167A\x165E"+
		"\x3\x2\x2\x2\x167A\x166B\x3\x2\x2\x2\x167A\x1675\x3\x2\x2\x2\x167B\x167C"+
		"\x3\x2\x2\x2\x167C\x167A\x3\x2\x2\x2\x167C\x167D\x3\x2\x2\x2\x167D\x1B1"+
		"\x3\x2\x2\x2\x167E\x167F\a\xC9\x2\x2\x167F\x1680\a\x40F\x2\x2\x1680\x1684"+
		"\x5\x47A\x23E\x2\x1681\x1682\t<\x2\x2\x1682\x1683\a\x211\x2\x2\x1683\x1685"+
		"\x5\x47A\x23E\x2\x1684\x1681\x3\x2\x2\x2\x1684\x1685\x3\x2\x2\x2\x1685"+
		"\x1698\x3\x2\x2\x2\x1686\x1695\a\x42B\x2\x2\x1687\x1689\a\x462\x2\x2\x1688"+
		"\x1687\x3\x2\x2\x2\x1688\x1689\x3\x2\x2\x2\x1689\x168A\x3\x2\x2\x2\x168A"+
		"\x168B\a\xFC\x2\x2\x168B\x168C\a\x44C\x2\x2\x168C\x1694\x5\x47A\x23E\x2"+
		"\x168D\x168F\a\x462\x2\x2\x168E\x168D\x3\x2\x2\x2\x168E\x168F\x3\x2\x2"+
		"\x2\x168F\x1690\x3\x2\x2\x2\x1690\x1691\a\x1B\x2\x2\x1691\x1692\a\x44C"+
		"\x2\x2\x1692\x1694\t\x13\x2\x2\x1693\x1688\x3\x2\x2\x2\x1693\x168E\x3"+
		"\x2\x2\x2\x1694\x1697\x3\x2\x2\x2\x1695\x1693\x3\x2\x2\x2\x1695\x1696"+
		"\x3\x2\x2\x2\x1696\x1699\x3\x2\x2\x2\x1697\x1695\x3\x2\x2\x2\x1698\x1686"+
		"\x3\x2\x2\x2\x1698\x1699\x3\x2\x2\x2\x1699\x1711\x3\x2\x2\x2\x169A\x169B"+
		"\a\xC9\x2\x2\x169B\x16EC\a\x40F\x2\x2\x169C\x16BF\x5\x47A\x23E\x2\x169D"+
		"\x16BC\a\x42B\x2\x2\x169E\x16A0\a\x462\x2\x2\x169F\x169E\x3\x2\x2\x2\x169F"+
		"\x16A0\x3\x2\x2\x2\x16A0\x16A1\x3\x2\x2\x2\x16A1\x16A2\a\xFC\x2\x2\x16A2"+
		"\x16A3\a\x44C\x2\x2\x16A3\x16BB\x5\x47A\x23E\x2\x16A4\x16A6\a\x462\x2"+
		"\x2\x16A5\x16A4\x3\x2\x2\x2\x16A5\x16A6\x3\x2\x2\x2\x16A6\x16A7\x3\x2"+
		"\x2\x2\x16A7\x16A8\a\xFB\x2\x2\x16A8\x16AC\a\x44C\x2\x2\x16A9\x16AD\a"+
		"\x264\x2\x2\x16AA\x16AD\a\x446\x2\x2\x16AB\x16AD\x5\x47A\x23E\x2\x16AC"+
		"\x16A9\x3\x2\x2\x2\x16AC\x16AA\x3\x2\x2\x2\x16AC\x16AB\x3\x2\x2\x2\x16AD"+
		"\x16BB\x3\x2\x2\x2\x16AE\x16B0\a\x462\x2\x2\x16AF\x16AE\x3\x2\x2\x2\x16AF"+
		"\x16B0\x3\x2\x2\x2\x16B0\x16B1\x3\x2\x2\x2\x16B1\x16B2\a\x38A\x2\x2\x16B2"+
		"\x16B3\a\x44C\x2\x2\x16B3\x16BB\a\x449\x2\x2\x16B4\x16B6\a\x462\x2\x2"+
		"\x16B5\x16B4\x3\x2\x2\x2\x16B5\x16B6\x3\x2\x2\x2\x16B6\x16B7\x3\x2\x2"+
		"\x2\x16B7\x16B8\a\x1B\x2\x2\x16B8\x16B9\a\x44C\x2\x2\x16B9\x16BB\t\x13"+
		"\x2\x2\x16BA\x169F\x3\x2\x2\x2\x16BA\x16A5\x3\x2\x2\x2\x16BA\x16AF\x3"+
		"\x2\x2\x2\x16BA\x16B5\x3\x2\x2\x2\x16BB\x16BE\x3\x2\x2\x2\x16BC\x16BA"+
		"\x3\x2\x2\x2\x16BC\x16BD\x3\x2\x2\x2\x16BD\x16C0\x3\x2\x2\x2\x16BE\x16BC"+
		"\x3\x2\x2\x2\x16BF\x169D\x3\x2\x2\x2\x16BF\x16C0\x3\x2\x2\x2\x16C0\x16ED"+
		"\x3\x2\x2\x2\x16C1\x16C2\x5\x47A\x23E\x2\x16C2\x16C3\a\x42B\x2\x2\x16C3"+
		"\x16C4\a\x2B6\x2\x2\x16C4\x16C5\a\x44C\x2\x2\x16C5\x16E4\a\x448\x2\x2"+
		"\x16C6\x16C8\a\x462\x2\x2\x16C7\x16C6\x3\x2\x2\x2\x16C7\x16C8\x3\x2\x2"+
		"\x2\x16C8\x16C9\x3\x2\x2\x2\x16C9\x16CA\a\xFC\x2\x2\x16CA\x16CB\a\x44C"+
		"\x2\x2\x16CB\x16E3\x5\x47A\x23E\x2\x16CC\x16CE\a\x462\x2\x2\x16CD\x16CC"+
		"\x3\x2\x2\x2\x16CD\x16CE\x3\x2\x2\x2\x16CE\x16CF\x3\x2\x2\x2\x16CF\x16D0"+
		"\a\xFB\x2\x2\x16D0\x16D4\a\x44C\x2\x2\x16D1\x16D5\a\x264\x2\x2\x16D2\x16D5"+
		"\a\x446\x2\x2\x16D3\x16D5\x5\x47A\x23E\x2\x16D4\x16D1\x3\x2\x2\x2\x16D4"+
		"\x16D2\x3\x2\x2\x2\x16D4\x16D3\x3\x2\x2\x2\x16D5\x16E3\x3\x2\x2\x2\x16D6"+
		"\x16D8\a\x462\x2\x2\x16D7\x16D6\x3\x2\x2\x2\x16D7\x16D8\x3\x2\x2\x2\x16D8"+
		"\x16D9\x3\x2\x2\x2\x16D9\x16DA\a\x38A\x2\x2\x16DA\x16DB\a\x44C\x2\x2\x16DB"+
		"\x16E3\a\x449\x2\x2\x16DC\x16DE\a\x462\x2\x2\x16DD\x16DC\x3\x2\x2\x2\x16DD"+
		"\x16DE\x3\x2\x2\x2\x16DE\x16DF\x3\x2\x2\x2\x16DF\x16E0\a\x1B\x2\x2\x16E0"+
		"\x16E1\a\x44C\x2\x2\x16E1\x16E3\t\x13\x2\x2\x16E2\x16C7\x3\x2\x2\x2\x16E2"+
		"\x16CD\x3\x2\x2\x2\x16E2\x16D7\x3\x2\x2\x2\x16E2\x16DD\x3\x2\x2\x2\x16E3"+
		"\x16E6\x3\x2\x2\x2\x16E4\x16E2\x3\x2\x2\x2\x16E4\x16E5\x3\x2\x2\x2\x16E5"+
		"\x16ED\x3\x2\x2\x2\x16E6\x16E4\x3\x2\x2\x2\x16E7\x16E8\x5\x47A\x23E\x2"+
		"\x16E8\x16E9\a\x17E\x2\x2\x16E9\x16EA\a\x14D\x2\x2\x16EA\x16EB\a\x2E1"+
		"\x2\x2\x16EB\x16ED\x3\x2\x2\x2\x16EC\x169C\x3\x2\x2\x2\x16EC\x16C1\x3"+
		"\x2\x2\x2\x16EC\x16E7\x3\x2\x2\x2\x16ED\x1711\x3\x2\x2\x2\x16EE\x16EF"+
		"\a\xC9\x2\x2\x16EF\x16F0\a\x40F\x2\x2\x16F0\x170B\x5\x47A\x23E\x2\x16F1"+
		"\x16F2\a\x42D\x2\x2\x16F2\x1701\a\x211\x2\x2\x16F3\x16F5\a\x462\x2\x2"+
		"\x16F4\x16F3\x3\x2\x2\x2\x16F4\x16F5\x3\x2\x2\x2\x16F5\x16F6\x3\x2\x2"+
		"\x2\x16F6\x16F7\a\xFC\x2\x2\x16F7\x16F8\a\x44C\x2\x2\x16F8\x1700\x5\x47A"+
		"\x23E\x2\x16F9\x16FB\a\x462\x2\x2\x16FA\x16F9\x3\x2\x2\x2\x16FA\x16FB"+
		"\x3\x2\x2\x2\x16FB\x16FC\x3\x2\x2\x2\x16FC\x16FD\a\x1B\x2\x2\x16FD\x16FE"+
		"\a\x44C\x2\x2\x16FE\x1700\t\x13\x2\x2\x16FF\x16F4\x3\x2\x2\x2\x16FF\x16FA"+
		"\x3\x2\x2\x2\x1700\x1703\x3\x2\x2\x2\x1701\x16FF\x3\x2\x2\x2\x1701\x1702"+
		"\x3\x2\x2\x2\x1702\x170C\x3\x2\x2\x2\x1703\x1701\x3\x2\x2\x2\x1704\x1705"+
		"\t<\x2\x2\x1705\x1706\a}\x2\x2\x1706\x170C\x5\x47A\x23E\x2\x1707\x1708"+
		"\t<\x2\x2\x1708\x1709\a?\x2\x2\x1709\x170A\a\x1EE\x2\x2\x170A\x170C\x5"+
		"\x47A\x23E\x2\x170B\x16F1\x3\x2\x2\x2\x170B\x1704\x3\x2\x2\x2\x170B\x1707"+
		"\x3\x2\x2\x2\x170C\x1711\x3\x2\x2\x2\x170D\x170E\a\xC9\x2\x2\x170E\x170F"+
		"\a\x40F\x2\x2\x170F\x1711\x5\x47A\x23E\x2\x1710\x167E\x3\x2\x2\x2\x1710"+
		"\x169A\x3\x2\x2\x2\x1710\x16EE\x3\x2\x2\x2\x1710\x170D\x3\x2\x2\x2\x1711"+
		"\x1B3\x3\x2\x2\x2\x1712\x1713\a\xC9\x2\x2\x1713\x1714\a\x40F\x2\x2\x1714"+
		"\x171A\x5\x47A\x23E\x2\x1715\x1716\t<\x2\x2\x1716\x1717\a\x211\x2\x2\x1717"+
		"\x171B\x5\x47A\x23E\x2\x1718\x1719\a\x42D\x2\x2\x1719\x171B\a\x211\x2"+
		"\x2\x171A\x1715\x3\x2\x2\x2\x171A\x1718\x3\x2\x2\x2\x171A\x171B\x3\x2"+
		"\x2\x2\x171B\x1720\x3\x2\x2\x2\x171C\x171D\a\x42B\x2\x2\x171D\x171E\a"+
		"\xFC\x2\x2\x171E\x171F\a\x44C\x2\x2\x171F\x1721\x5\x47A\x23E\x2\x1720"+
		"\x171C\x3\x2\x2\x2\x1720\x1721\x3\x2\x2\x2\x1721\x172F\x3\x2\x2\x2\x1722"+
		"\x1723\a\xC9\x2\x2\x1723\x1724\a\x40F\x2\x2\x1724\x1725\x5\x47A\x23E\x2"+
		"\x1725\x1726\a\x17E\x2\x2\x1726\x1727\a\x14D\x2\x2\x1727\x172C\a\x2E1"+
		"\x2\x2\x1728\x1729\a\x42B\x2\x2\x1729\x172A\a\xFC\x2\x2\x172A\x172B\a"+
		"\x44C\x2\x2\x172B\x172D\x5\x47A\x23E\x2\x172C\x1728\x3\x2\x2\x2\x172C"+
		"\x172D\x3\x2\x2\x2\x172D\x172F\x3\x2\x2\x2\x172E\x1712\x3\x2\x2\x2\x172E"+
		"\x1722\x3\x2\x2\x2\x172F\x1B5\x3\x2\x2\x2\x1730\x1731\a%\x2\x2\x1731\x1732"+
		"\a\x40F\x2\x2\x1732\x1733\x5\x47A\x23E\x2\x1733\x174C\a\x42B\x2\x2\x1734"+
		"\x1736\a\x462\x2\x2\x1735\x1734\x3\x2\x2\x2\x1735\x1736\x3\x2\x2\x2\x1736"+
		"\x1737\x3\x2\x2\x2\x1737\x1738\a\x24D\x2\x2\x1738\x1739\a\x44C\x2\x2\x1739"+
		"\x174D\x5\x47A\x23E\x2\x173A\x173C\a\x462\x2\x2\x173B\x173A\x3\x2\x2\x2"+
		"\x173B\x173C\x3\x2\x2\x2\x173C\x173D\x3\x2\x2\x2\x173D\x173E\a\xFC\x2"+
		"\x2\x173E\x173F\a\x44C\x2\x2\x173F\x174D\x5\x47A\x23E\x2\x1740\x1742\a"+
		"\x462\x2\x2\x1741\x1740\x3\x2\x2\x2\x1741\x1742\x3\x2\x2\x2\x1742\x1743"+
		"\x3\x2\x2\x2\x1743\x1744\a\x211\x2\x2\x1744\x1745\a\x44C\x2\x2\x1745\x174D"+
		"\x5\x47A\x23E\x2\x1746\x1748\a\x462\x2\x2\x1747\x1746\x3\x2\x2\x2\x1747"+
		"\x1748\x3\x2\x2\x2\x1748\x1749\x3\x2\x2\x2\x1749\x174A\a\x1B\x2\x2\x174A"+
		"\x174B\a\x44C\x2\x2\x174B\x174D\t\x13\x2\x2\x174C\x1735\x3\x2\x2\x2\x174C"+
		"\x173B\x3\x2\x2\x2\x174C\x1741\x3\x2\x2\x2\x174C\x1747\x3\x2\x2\x2\x174D"+
		"\x174E\x3\x2\x2\x2\x174E\x174C\x3\x2\x2\x2\x174E\x174F\x3\x2\x2\x2\x174F"+
		"\x1B7\x3\x2\x2\x2\x1750\x1751\a%\x2\x2\x1751\x1752\a\x431\x2\x2\x1752"+
		"\x1755\a\x198\x2\x2\x1753\x1756\x5\x47A\x23E\x2\x1754\x1756\a\xF9\x2\x2"+
		"\x1755\x1753\x3\x2\x2\x2\x1755\x1754\x3\x2\x2\x2\x1756\x1776\x3\x2\x2"+
		"\x2\x1757\x1758\a\x42B\x2\x2\x1758\x1771\a\x45E\x2\x2\x1759\x175A\a\x1BE"+
		"\x2\x2\x175A\x175B\a\x44C\x2\x2\x175B\x1772\t=\x2\x2\x175C\x175E\a\x462"+
		"\x2\x2\x175D\x175C\x3\x2\x2\x2\x175D\x175E\x3\x2\x2\x2\x175E\x175F\x3"+
		"\x2\x2\x2\x175F\x1760\a\x31F\x2\x2\x1760\x1761\a\x44C\x2\x2\x1761\x1772"+
		"\a\x446\x2\x2\x1762\x1764\a\x462\x2\x2\x1763\x1762\x3\x2\x2\x2\x1763\x1764"+
		"\x3\x2\x2\x2\x1764\x1765\x3\x2\x2\x2\x1765\x1766\a\x31E\x2\x2\x1766\x1767"+
		"\a\x44C\x2\x2\x1767\x1772\a\x446\x2\x2\x1768\x1769\a\x320\x2\x2\x1769"+
		"\x176A\a\x44C\x2\x2\x176A\x1772\a\x446\x2\x2\x176B\x176C\a\x226\x2\x2"+
		"\x176C\x176D\a\x44C\x2\x2\x176D\x1772\a\x446\x2\x2\x176E\x176F\a\x19B"+
		"\x2\x2\x176F\x1770\a\x44C\x2\x2\x1770\x1772\a\x446\x2\x2\x1771\x1759\x3"+
		"\x2\x2\x2\x1771\x175D\x3\x2\x2\x2\x1771\x1763\x3\x2\x2\x2\x1771\x1768"+
		"\x3\x2\x2\x2\x1771\x176B\x3\x2\x2\x2\x1771\x176E\x3\x2\x2\x2\x1772\x1773"+
		"\x3\x2\x2\x2\x1773\x1771\x3\x2\x2\x2\x1773\x1774\x3\x2\x2\x2\x1774\x1775"+
		"\x3\x2\x2\x2\x1775\x1777\a\x45F\x2\x2\x1776\x1757\x3\x2\x2\x2\x1776\x1777"+
		"\x3\x2\x2\x2\x1777\x177D\x3\x2\x2\x2\x1778\x177B\a\x412\x2\x2\x1779\x177C"+
		"\x5\x47A\x23E\x2\x177A\x177C\a\xF9\x2\x2\x177B\x1779\x3\x2\x2\x2\x177B"+
		"\x177A\x3\x2\x2\x2\x177C\x177E\x3\x2\x2\x2\x177D\x1778\x3\x2\x2\x2\x177D"+
		"\x177E\x3\x2\x2\x2\x177E\x1B9\x3\x2\x2\x2\x177F\x1780\a\xC9\x2\x2\x1780"+
		"\x1781\a\x431\x2\x2\x1781\x1782\a\x198\x2\x2\x1782\x17A2\x5\x47A\x23E"+
		"\x2\x1783\x1784\a\x42B\x2\x2\x1784\x179D\a\x45E\x2\x2\x1785\x1786\a\x1BE"+
		"\x2\x2\x1786\x1787\a\x44C\x2\x2\x1787\x179E\t=\x2\x2\x1788\x178A\a\x462"+
		"\x2\x2\x1789\x1788\x3\x2\x2\x2\x1789\x178A\x3\x2\x2\x2\x178A\x178B\x3"+
		"\x2\x2\x2\x178B\x178C\a\x31F\x2\x2\x178C\x178D\a\x44C\x2\x2\x178D\x179E"+
		"\a\x446\x2\x2\x178E\x1790\a\x462\x2\x2\x178F\x178E\x3\x2\x2\x2\x178F\x1790"+
		"\x3\x2\x2\x2\x1790\x1791\x3\x2\x2\x2\x1791\x1792\a\x31E\x2\x2\x1792\x1793"+
		"\a\x44C\x2\x2\x1793\x179E\a\x446\x2\x2\x1794\x1795\a\x320\x2\x2\x1795"+
		"\x1796\a\x44C\x2\x2\x1796\x179E\a\x446\x2\x2\x1797\x1798\a\x226\x2\x2"+
		"\x1798\x1799\a\x44C\x2\x2\x1799\x179E\a\x446\x2\x2\x179A\x179B\a\x19B"+
		"\x2\x2\x179B\x179C\a\x44C\x2\x2\x179C\x179E\a\x446\x2\x2\x179D\x1785\x3"+
		"\x2\x2\x2\x179D\x1789\x3\x2\x2\x2\x179D\x178F\x3\x2\x2\x2\x179D\x1794"+
		"\x3\x2\x2\x2\x179D\x1797\x3\x2\x2\x2\x179D\x179A\x3\x2\x2\x2\x179E\x179F"+
		"\x3\x2\x2\x2\x179F\x179D\x3\x2\x2\x2\x179F\x17A0\x3\x2\x2\x2\x17A0\x17A1"+
		"\x3\x2\x2\x2\x17A1\x17A3\a\x45F\x2\x2\x17A2\x1783\x3\x2\x2\x2\x17A2\x17A3"+
		"\x3\x2\x2\x2\x17A3\x17B1\x3\x2\x2\x2\x17A4\x17A7\a\x412\x2\x2\x17A5\x17A8"+
		"\x5\x47A\x23E\x2\x17A6\x17A8\a\xF9\x2\x2\x17A7\x17A5\x3\x2\x2\x2\x17A7"+
		"\x17A6\x3\x2\x2\x2\x17A7\x17A8\x3\x2\x2\x2\x17A8\x17AF\x3\x2\x2\x2\x17A9"+
		"\x17AB\a\x462\x2\x2\x17AA\x17A9\x3\x2\x2\x2\x17AA\x17AB\x3\x2\x2\x2\x17AB"+
		"\x17AC\x3\x2\x2\x2\x17AC\x17AD\a\x14D\x2\x2\x17AD\x17B0\x5\x47A\x23E\x2"+
		"\x17AE\x17B0\a\xF9\x2\x2\x17AF\x17AA\x3\x2\x2\x2\x17AF\x17AE\x3\x2\x2"+
		"\x2\x17AF\x17B0\x3\x2\x2\x2\x17B0\x17B2\x3\x2\x2\x2\x17B1\x17A4\x3\x2"+
		"\x2\x2\x17B1\x17B2\x3\x2\x2\x2\x17B2\x1BB\x3\x2\x2\x2\x17B3\x17B4\a\xC9"+
		"\x2\x2\x17B4\x17B5\a\x436\x2\x2\x17B5\x17B6\a\x351\x2\x2\x17B6\x17BA\a"+
		"\x9C\x2\x2\x17B7\x17B8\x5\x47A\x23E\x2\x17B8\x17B9\a\x459\x2\x2\x17B9"+
		"\x17BB\x3\x2\x2\x2\x17BA\x17B7\x3\x2\x2\x2\x17BA\x17BB\x3\x2\x2\x2\x17BB"+
		"\x17BC\x3\x2\x2\x2\x17BC\x17BD\x5\x47A\x23E\x2\x17BD\x17C1\a:\x2\x2\x17BE"+
		"\x17C2\a\x448\x2\x2\x17BF\x17C2\x5\x47A\x23E\x2\x17C0\x17C2\a\x445\x2"+
		"\x2\x17C1\x17BE\x3\x2\x2\x2\x17C1\x17BF\x3\x2\x2\x2\x17C1\x17C0\x3\x2"+
		"\x2\x2\x17C2\x1BD\x3\x2\x2\x2\x17C3\x17C4\a\xC9\x2\x2\x17C4\x17C5\a\x2B3"+
		"\x2\x2\x17C5\x17C6\a\x184\x2\x2\x17C6\x17C7\x5\x47A\x23E\x2\x17C7\x17C8"+
		"\a\x45E\x2\x2\x17C8\x17C9\x5\x470\x239\x2\x17C9\x17CA\a\x45F\x2\x2\x17CA"+
		"\x17CB\a:\x2\x2\x17CB\x17CD\a\x2F2\x2\x2\x17CC\x17CE\t>\x2\x2\x17CD\x17CC"+
		"\x3\x2\x2\x2\x17CD\x17CE\x3\x2\x2\x2\x17CE\x17CF\x3\x2\x2\x2\x17CF\x17D0"+
		"\a\x16F\x2\x2\x17D0\x17D1\a\x416\x2\x2\x17D1\x17D2\a\x45E\x2\x2\x17D2"+
		"\x17D3\x5\x414\x20B\x2\x17D3\x17D4\a\x45F\x2\x2\x17D4\x1BF\x3\x2\x2\x2"+
		"\x17D5\x17D6\a\xC9\x2\x2\x17D6\x17D7\a\x2B3\x2\x2\x17D7\x17D8\a\x355\x2"+
		"\x2\x17D8\x17D9\x5\x47A\x23E\x2\x17D9\x17DA\a:\x2\x2\x17DA\x17DB\a\x2B3"+
		"\x2\x2\x17DB\x17DD\x5\x47A\x23E\x2\x17DC\x17DE\a\x18\x2\x2\x17DD\x17DC"+
		"\x3\x2\x2\x2\x17DD\x17DE\x3\x2\x2\x2\x17DE\x17DF\x3\x2\x2\x2\x17DF\x17E0"+
		"\a\x3DF\x2\x2\x17E0\x17E1\a\x45E\x2\x2\x17E1\x17E6\x5\x47A\x23E\x2\x17E2"+
		"\x17E3\a\x462\x2\x2\x17E3\x17E5\x5\x47A\x23E\x2\x17E4\x17E2\x3\x2\x2\x2"+
		"\x17E5\x17E8\x3\x2\x2\x2\x17E6\x17E4\x3\x2\x2\x2\x17E6\x17E7\x3\x2\x2"+
		"\x2\x17E7\x17E9\x3\x2\x2\x2\x17E8\x17E6\x3\x2\x2\x2\x17E9\x17EA\a\x45F"+
		"\x2\x2\x17EA\x1C1\x3\x2\x2\x2\x17EB\x17EC\a\xC9\x2\x2\x17EC\x17EF\a\x2EB"+
		"\x2\x2\x17ED\x17F0\x5\x43A\x21E\x2\x17EE\x17F0\x5\x47A\x23E\x2\x17EF\x17ED"+
		"\x3\x2\x2\x2\x17EF\x17EE\x3\x2\x2\x2\x17F0\x17F2\x3\x2\x2\x2\x17F1\x17F3"+
		"\x5\x1C4\xE3\x2\x17F2\x17F1\x3\x2\x2\x2\x17F2\x17F3\x3\x2\x2\x2\x17F3"+
		"\x17F7\x3\x2\x2\x2\x17F4\x17F5\a\x28D\x2\x2\x17F5\x17F8\x5\x47A\x23E\x2"+
		"\x17F6\x17F8\a\xF7\x2\x2\x17F7\x17F4\x3\x2\x2\x2\x17F7\x17F6\x3\x2\x2"+
		"\x2\x17F7\x17F8\x3\x2\x2\x2\x17F8\x1C3\x3\x2\x2\x2\x17F9\x1800\a\x42B"+
		"\x2\x2\x17FA\x17FB\a\x3AE\x2\x2\x17FB\x17FC\a\x44C\x2\x2\x17FC\x17FE\t"+
		"\x13\x2\x2\x17FD\x17FF\a\x462\x2\x2\x17FE\x17FD\x3\x2\x2\x2\x17FE\x17FF"+
		"\x3\x2\x2\x2\x17FF\x1801\x3\x2\x2\x2\x1800\x17FA\x3\x2\x2\x2\x1800\x1801"+
		"\x3\x2\x2\x2\x1801\x1808\x3\x2\x2\x2\x1802\x1803\a\x330\x2\x2\x1803\x1804"+
		"\a\x44C\x2\x2\x1804\x1806\t\x13\x2\x2\x1805\x1807\a\x462\x2\x2\x1806\x1805"+
		"\x3\x2\x2\x2\x1806\x1807\x3\x2\x2\x2\x1807\x1809\x3\x2\x2\x2\x1808\x1802"+
		"\x3\x2\x2\x2\x1808\x1809\x3\x2\x2\x2\x1809\x1837\x3\x2\x2\x2\x180A\x180B"+
		"\a\v\x2\x2\x180B\x1831\a\x45E\x2\x2\x180C\x180D\a\x3AE\x2\x2\x180D\x180E"+
		"\a\x44C\x2\x2\x180E\x1810\t\x13\x2\x2\x180F\x1811\a\x462\x2\x2\x1810\x180F"+
		"\x3\x2\x2\x2\x1810\x1811\x3\x2\x2\x2\x1811\x1813\x3\x2\x2\x2\x1812\x180C"+
		"\x3\x2\x2\x2\x1812\x1813\x3\x2\x2\x2\x1813\x181A\x3\x2\x2\x2\x1814\x1815"+
		"\a\x2DD\x2\x2\x1815\x1816\a\x44C\x2\x2\x1816\x1818\x5\x442\x222\x2\x1817"+
		"\x1819\a\x462\x2\x2\x1818\x1817\x3\x2\x2\x2\x1818\x1819\x3\x2\x2\x2\x1819"+
		"\x181B\x3\x2\x2\x2\x181A\x1814\x3\x2\x2\x2\x181A\x181B\x3\x2\x2\x2\x181B"+
		"\x1822\x3\x2\x2\x2\x181C\x181D\a\x22F\x2\x2\x181D\x181E\a\x44C\x2\x2\x181E"+
		"\x1820\a\x446\x2\x2\x181F\x1821\a\x462\x2\x2\x1820\x181F\x3\x2\x2\x2\x1820"+
		"\x1821\x3\x2\x2\x2\x1821\x1823\x3\x2\x2\x2\x1822\x181C\x3\x2\x2\x2\x1822"+
		"\x1823\x3\x2\x2\x2\x1823\x182E\x3\x2\x2\x2\x1824\x1825\a\x142\x2\x2\x1825"+
		"\x1829\a:\x2\x2\x1826\x182A\a\x367\x2\x2\x1827\x182A\a\x448\x2\x2\x1828"+
		"\x182A\a\x2A6\x2\x2\x1829\x1826\x3\x2\x2\x2\x1829\x1827\x3\x2\x2\x2\x1829"+
		"\x1828\x3\x2\x2\x2\x182A\x182C\x3\x2\x2\x2\x182B\x182D\a\x462\x2\x2\x182C"+
		"\x182B\x3\x2\x2\x2\x182C\x182D\x3\x2\x2\x2\x182D\x182F\x3\x2\x2\x2\x182E"+
		"\x1824\x3\x2\x2\x2\x182E\x182F\x3\x2\x2\x2\x182F\x1832\x3\x2\x2\x2\x1830"+
		"\x1832\a\x11C\x2\x2\x1831\x1812\x3\x2\x2\x2\x1831\x1830\x3\x2\x2\x2\x1832"+
		"\x1833\x3\x2\x2\x2\x1833\x1835\a\x45F\x2\x2\x1834\x1836\a\x462\x2\x2\x1835"+
		"\x1834\x3\x2\x2\x2\x1835\x1836\x3\x2\x2\x2\x1836\x1838\x3\x2\x2\x2\x1837"+
		"\x180A\x3\x2\x2\x2\x1837\x1838\x3\x2\x2\x2\x1838\x1840\x3\x2\x2\x2\x1839"+
		"\x183A\a\x2CA\x2\x2\x183A\x183B\a\x45E\x2\x2\x183B\x183C\a\x3AE\x2\x2"+
		"\x183C\x183D\a\x44C\x2\x2\x183D\x183E\t\x13\x2\x2\x183E\x183F\x3\x2\x2"+
		"\x2\x183F\x1841\a\x45F\x2\x2\x1840\x1839\x3\x2\x2\x2\x1840\x1841\x3\x2"+
		"\x2\x2\x1841\x1C5\x3\x2\x2\x2\x1842\x1843\a%\x2\x2\x1843\x1846\a\x2EB"+
		"\x2\x2\x1844\x1847\x5\x43A\x21E\x2\x1845\x1847\x5\x47A\x23E\x2\x1846\x1844"+
		"\x3\x2\x2\x2\x1846\x1845\x3\x2\x2\x2\x1847\x184A\x3\x2\x2\x2\x1848\x184B"+
		"\x5\x1C4\xE3\x2\x1849\x184B\x5\x1C8\xE5\x2\x184A\x1848\x3\x2\x2\x2\x184A"+
		"\x1849\x3\x2\x2\x2\x184B\x1C7\x3\x2\x2\x2\x184C\x1852\a\x305\x2\x2\x184D"+
		"\x184E\a\x42B\x2\x2\x184E\x184F\a\x45E\x2\x2\x184F\x1850\x5\x1CA\xE6\x2"+
		"\x1850\x1851\a\x45F\x2\x2\x1851\x1853\x3\x2\x2\x2\x1852\x184D\x3\x2\x2"+
		"\x2\x1852\x1853\x3\x2\x2\x2\x1853\x1862\x3\x2\x2\x2\x1854\x1859\a\x314"+
		"\x2\x2\x1855\x1856\a\x42B\x2\x2\x1856\x1857\a\x20A\x2\x2\x1857\x1858\a"+
		"\x44C\x2\x2\x1858\x185A\x5\x454\x22B\x2\x1859\x1855\x3\x2\x2\x2\x1859"+
		"\x185A\x3\x2\x2\x2\x185A\x1862\x3\x2\x2\x2\x185B\x185C\a\x24A\x2\x2\x185C"+
		"\x185F\a\x3DF\x2\x2\x185D\x1860\x5\x47A\x23E\x2\x185E\x1860\a\xF7\x2\x2"+
		"\x185F\x185D\x3\x2\x2\x2\x185F\x185E\x3\x2\x2\x2\x1860\x1862\x3\x2\x2"+
		"\x2\x1861\x184C\x3\x2\x2\x2\x1861\x1854\x3\x2\x2\x2\x1861\x185B\x3\x2"+
		"\x2\x2\x1862\x1C9\x3\x2\x2\x2\x1863\x1864\a\x21F\x2\x2\x1864\x1865\a\x44C"+
		"\x2\x2\x1865\x1866\a\x446\x2\x2\x1866\x1CB\x3\x2\x2\x2\x1867\x1868\a\xC9"+
		"\x2\x2\x1868\x1869\a\xBE\x2\x2\x1869\x186C\x5\x462\x232\x2\x186A\x186B"+
		"\a\x46\x2\x2\x186B\x186D\x5\x47A\x23E\x2\x186C\x186A\x3\x2\x2\x2\x186C"+
		"\x186D\x3\x2\x2\x2\x186D\x186E\x3\x2\x2\x2\x186E\x1879\a\x45E\x2\x2\x186F"+
		"\x1872\x5\x47A\x23E\x2\x1870\x1872\a\xF7\x2\x2\x1871\x186F\x3\x2\x2\x2"+
		"\x1871\x1870\x3\x2\x2\x2\x1872\x1873\x3\x2\x2\x2\x1873\x1874\a\x36D\x2"+
		"\x2\x1874\x1875\aq\x2\x2\x1875\x1877\t?\x2\x2\x1876\x1878\a\x462\x2\x2"+
		"\x1877\x1876\x3\x2\x2\x2\x1877\x1878\x3\x2\x2\x2\x1878\x187A\x3\x2\x2"+
		"\x2\x1879\x1871\x3\x2\x2\x2\x187A\x187B\x3\x2\x2\x2\x187B\x1879\x3\x2"+
		"\x2\x2\x187B\x187C\x3\x2\x2\x2\x187C\x187D\x3\x2\x2\x2\x187D\x187E\a\x45F"+
		"\x2\x2\x187E\x1CD\x3\x2\x2\x2\x187F\x1886\x5\x45E\x230\x2\x1880\x1886"+
		"\x5\x460\x231\x2\x1881\x1886\x5\x466\x234\x2\x1882\x1886\x5\x46A\x236"+
		"\x2\x1883\x1886\x5\x46E\x238\x2\x1884\x1886\x5\x468\x235\x2\x1885\x187F"+
		"\x3\x2\x2\x2\x1885\x1880\x3\x2\x2\x2\x1885\x1881\x3\x2\x2\x2\x1885\x1882"+
		"\x3\x2\x2\x2\x1885\x1883\x3\x2\x2\x2\x1885\x1884\x3\x2\x2\x2\x1886\x1CF"+
		"\x3\x2\x2\x2\x1887\x1888\a\xC9\x2\x2\x1888\x1889\a\x23A\x2\x2\x1889\x188A"+
		"\a\x3F7\x2\x2\x188A\x188D\x5\x47A\x23E\x2\x188B\x188C\a\x46\x2\x2\x188C"+
		"\x188E\x5\x47A\x23E\x2\x188D\x188B\x3\x2\x2\x2\x188D\x188E\x3\x2\x2\x2"+
		"\x188E\x188F\x3\x2\x2\x2\x188F\x1890\a\x413\x2\x2\x1890\x1899\a\x44C\x2"+
		"\x2\x1891\x189A\a\x264\x2\x2\x1892\x189A\a\x125\x2\x2\x1893\x189A\a\x426"+
		"\x2\x2\x1894\x1895\a\x414\x2\x2\x1895\x1896\a\x42B\x2\x2\x1896\x1897\a"+
		"\x351\x2\x2\x1897\x1898\a\x9C\x2\x2\x1898\x189A\x5\x47A\x23E\x2\x1899"+
		"\x1891\x3\x2\x2\x2\x1899\x1892\x3\x2\x2\x2\x1899\x1893\x3\x2\x2\x2\x1899"+
		"\x1894\x3\x2\x2\x2\x189A\x1D1\x3\x2\x2\x2\x189B\x189D\x5\x36A\x1B6\x2"+
		"\x189C\x189B\x3\x2\x2\x2\x189C\x189D\x3\x2\x2\x2\x189D\x189E\x3\x2\x2"+
		"\x2\x189E\x18A6\a\x239\x2\x2\x189F\x18A0\a\x3E0\x2\x2\x18A0\x18A1\a\x45E"+
		"\x2\x2\x18A1\x18A2\x5\x35A\x1AE\x2\x18A2\x18A4\a\x45F\x2\x2\x18A3\x18A5"+
		"\a\x2BB\x2\x2\x18A4\x18A3\x3\x2\x2\x2\x18A4\x18A5\x3\x2\x2\x2\x18A5\x18A7"+
		"\x3\x2\x2\x2\x18A6\x189F\x3\x2\x2\x2\x18A6\x18A7\x3\x2\x2\x2\x18A7\x18A9"+
		"\x3\x2\x2\x2\x18A8\x18AA\a\x1D3\x2\x2\x18A9\x18A8\x3\x2\x2\x2\x18A9\x18AA"+
		"\x3\x2\x2\x2\x18AA\x18AB\x3\x2\x2\x2\x18AB\x18AD\x5\x446\x224\x2\x18AC"+
		"\x18AE\x5\x408\x205\x2\x18AD\x18AC\x3\x2\x2\x2\x18AD\x18AE\x3\x2\x2\x2"+
		"\x18AE\x18B0\x3\x2\x2\x2\x18AF\x18B1\x5\x400\x201\x2\x18B0\x18AF\x3\x2"+
		"\x2\x2\x18B0\x18B1\x3\x2\x2\x2\x18B1\x18B2\x3\x2\x2\x2\x18B2\x18B3\a\x412"+
		"\x2\x2\x18B3\x18B4\x5\x3A0\x1D1\x2\x18B4\x18B5\a\x28D\x2\x2\x18B5\x18B7"+
		"\x5\x372\x1BA\x2\x18B6\x18B8\x5\x1D4\xEB\x2\x18B7\x18B6\x3\x2\x2\x2\x18B8"+
		"\x18B9\x3\x2\x2\x2\x18B9\x18B7\x3\x2\x2\x2\x18B9\x18BA\x3\x2\x2\x2\x18BA"+
		"\x18BC\x3\x2\x2\x2\x18BB\x18BD\x5\x1EC\xF7\x2\x18BC\x18BB\x3\x2\x2\x2"+
		"\x18BC\x18BD\x3\x2\x2\x2\x18BD\x18BF\x3\x2\x2\x2\x18BE\x18C0\x5\x38C\x1C7"+
		"\x2\x18BF\x18BE\x3\x2\x2\x2\x18BF\x18C0\x3\x2\x2\x2\x18C0\x18C1\x3\x2"+
		"\x2\x2\x18C1\x18C2\a\x463\x2\x2\x18C2\x1D3\x3\x2\x2\x2\x18C3\x18C4\a\x427"+
		"\x2\x2\x18C4\x18C7\a\x21C\x2\x2\x18C5\x18C6\a\'\x2\x2\x18C6\x18C8\x5\x372"+
		"\x1BA\x2\x18C7\x18C5\x3\x2\x2\x2\x18C7\x18C8\x3\x2\x2\x2\x18C8\x18C9\x3"+
		"\x2\x2\x2\x18C9\x18CA\a\x3D8\x2\x2\x18CA\x18CC\x5\x1D6\xEC\x2\x18CB\x18C3"+
		"\x3\x2\x2\x2\x18CC\x18CD\x3\x2\x2\x2\x18CD\x18CB\x3\x2\x2\x2\x18CD\x18CE"+
		"\x3\x2\x2\x2\x18CE\x18EC\x3\x2\x2\x2\x18CF\x18D0\a\x427\x2\x2\x18D0\x18D1"+
		"\a\x26A\x2\x2\x18D1\x18D4\a\x21C\x2\x2\x18D2\x18D3\aq\x2\x2\x18D3\x18D5"+
		"\a\x3D2\x2\x2\x18D4\x18D2\x3\x2\x2\x2\x18D4\x18D5\x3\x2\x2\x2\x18D5\x18D8"+
		"\x3\x2\x2\x2\x18D6\x18D7\a\'\x2\x2\x18D7\x18D9\x5\x372\x1BA\x2\x18D8\x18D6"+
		"\x3\x2\x2\x2\x18D8\x18D9\x3\x2\x2\x2\x18D9\x18DA\x3\x2\x2\x2\x18DA\x18DB"+
		"\a\x3D8\x2\x2\x18DB\x18EC\x5\x1D8\xED\x2\x18DC\x18DD\a\x427\x2\x2\x18DD"+
		"\x18DE\a\x26A\x2\x2\x18DE\x18DF\a\x21C\x2\x2\x18DF\x18E0\aq\x2\x2\x18E0"+
		"\x18E3\a\x396\x2\x2\x18E1\x18E2\a\'\x2\x2\x18E2\x18E4\x5\x372\x1BA\x2"+
		"\x18E3\x18E1\x3\x2\x2\x2\x18E3\x18E4\x3\x2\x2\x2\x18E4\x18E5\x3\x2\x2"+
		"\x2\x18E5\x18E6\a\x3D8\x2\x2\x18E6\x18E8\x5\x1D6\xEC\x2\x18E7\x18DC\x3"+
		"\x2\x2\x2\x18E8\x18E9\x3\x2\x2\x2\x18E9\x18E7\x3\x2\x2\x2\x18E9\x18EA"+
		"\x3\x2\x2\x2\x18EA\x18EC\x3\x2\x2\x2\x18EB\x18CB\x3\x2\x2\x2\x18EB\x18CF"+
		"\x3\x2\x2\x2\x18EB\x18E7\x3\x2\x2\x2\x18EC\x1D5\x3\x2\x2\x2\x18ED\x18EE"+
		"\a\x409\x2\x2\x18EE\x18EF\a\x37C\x2\x2\x18EF\x18F4\x5\x370\x1B9\x2\x18F0"+
		"\x18F1\a\x462\x2\x2\x18F1\x18F3\x5\x370\x1B9\x2\x18F2\x18F0\x3\x2\x2\x2"+
		"\x18F3\x18F6\x3\x2\x2\x2\x18F4\x18F2\x3\x2\x2\x2\x18F4\x18F5\x3\x2\x2"+
		"\x2\x18F5\x18F9\x3\x2\x2\x2\x18F6\x18F4\x3\x2\x2\x2\x18F7\x18F9\a\x100"+
		"\x2\x2\x18F8\x18ED\x3\x2\x2\x2\x18F8\x18F7\x3\x2\x2\x2\x18F9\x1D7\x3\x2"+
		"\x2\x2\x18FA\x18FF\a\x1CE\x2\x2\x18FB\x18FC\a\x45E\x2\x2\x18FC\x18FD\x5"+
		"\x450\x229\x2\x18FD\x18FE\a\x45F\x2\x2\x18FE\x1900\x3\x2\x2\x2\x18FF\x18FB"+
		"\x3\x2\x2\x2\x18FF\x1900\x3\x2\x2\x2\x1900\x1904\x3\x2\x2\x2\x1901\x1905"+
		"\x5\x412\x20A\x2\x1902\x1903\a\xF7\x2\x2\x1903\x1905\a\x416\x2\x2\x1904"+
		"\x1901\x3\x2\x2\x2\x1904\x1902\x3\x2\x2\x2\x1905\x1D9\x3\x2\x2\x2\x1906"+
		"\x1908\x5\x36A\x1B6\x2\x1907\x1906\x3\x2\x2\x2\x1907\x1908\x3\x2\x2\x2"+
		"\x1908\x1909\x3\x2\x2\x2\x1909\x1913\a\x100\x2\x2\x190A\x190B\a\x3E0\x2"+
		"\x2\x190B\x190C\a\x45E\x2\x2\x190C\x190D\x5\x35A\x1AE\x2\x190D\x190F\a"+
		"\x45F\x2\x2\x190E\x1910\a\x2BB\x2\x2\x190F\x190E\x3\x2\x2\x2\x190F\x1910"+
		"\x3\x2\x2\x2\x1910\x1914\x3\x2\x2\x2\x1911\x1912\a\x3E0\x2\x2\x1912\x1914"+
		"\a\x446\x2\x2\x1913\x190A\x3\x2\x2\x2\x1913\x1911\x3\x2\x2\x2\x1913\x1914"+
		"\x3\x2\x2\x2\x1914\x1916\x3\x2\x2\x2\x1915\x1917\a\x17E\x2\x2\x1916\x1915"+
		"\x3\x2\x2\x2\x1916\x1917\x3\x2\x2\x2\x1917\x1918\x3\x2\x2\x2\x1918\x191A"+
		"\x5\x1DC\xEF\x2\x1919\x191B\x5\x408\x205\x2\x191A\x1919\x3\x2\x2\x2\x191A"+
		"\x191B\x3\x2\x2\x2\x191B\x191D\x3\x2\x2\x2\x191C\x191E\x5\x1EC\xF7\x2"+
		"\x191D\x191C\x3\x2\x2\x2\x191D\x191E\x3\x2\x2\x2\x191E\x1921\x3\x2\x2"+
		"\x2\x191F\x1920\a\x17E\x2\x2\x1920\x1922\x5\x3A0\x1D1\x2\x1921\x191F\x3"+
		"\x2\x2\x2\x1921\x1922\x3\x2\x2\x2\x1922\x1930\x3\x2\x2\x2\x1923\x192E"+
		"\a\x428\x2\x2\x1924\x192F\x5\x372\x1BA\x2\x1925\x1926\a\xD0\x2\x2\x1926"+
		"\x192C\a\x286\x2\x2\x1927\x1929\a\x191\x2\x2\x1928\x1927\x3\x2\x2\x2\x1928"+
		"\x1929\x3\x2\x2\x2\x1929\x192A\x3\x2\x2\x2\x192A\x192D\x5\x452\x22A\x2"+
		"\x192B\x192D\a\x445\x2\x2\x192C\x1928\x3\x2\x2\x2\x192C\x192B\x3\x2\x2"+
		"\x2\x192D\x192F\x3\x2\x2\x2\x192E\x1924\x3\x2\x2\x2\x192E\x1925\x3\x2"+
		"\x2\x2\x192F\x1931\x3\x2\x2\x2\x1930\x1923\x3\x2\x2\x2\x1930\x1931\x3"+
		"\x2\x2\x2\x1931\x1933\x3\x2\x2\x2\x1932\x1934\x5\x384\x1C3\x2\x1933\x1932"+
		"\x3\x2\x2\x2\x1933\x1934\x3\x2\x2\x2\x1934\x1936\x3\x2\x2\x2\x1935\x1937"+
		"\x5\x38C\x1C7\x2\x1936\x1935\x3\x2\x2\x2\x1936\x1937\x3\x2\x2\x2\x1937"+
		"\x1939\x3\x2\x2\x2\x1938\x193A\a\x463\x2\x2\x1939\x1938\x3\x2\x2\x2\x1939"+
		"\x193A\x3\x2\x2\x2\x193A\x1DB\x3\x2\x2\x2\x193B\x1940\x5\x446\x224\x2"+
		"\x193C\x1940\x5\x402\x202\x2\x193D\x1940\x5\x2A0\x151\x2\x193E\x1940\a"+
		"\x445\x2\x2\x193F\x193B\x3\x2\x2\x2\x193F\x193C\x3\x2\x2\x2\x193F\x193D"+
		"\x3\x2\x2\x2\x193F\x193E\x3\x2\x2\x2\x1940\x1DD\x3\x2\x2\x2\x1941\x1943"+
		"\x5\x36A\x1B6\x2\x1942\x1941\x3\x2\x2\x2\x1942\x1943\x3\x2\x2\x2\x1943"+
		"\x1944\x3\x2\x2\x2\x1944\x194C\a\x1CE\x2\x2\x1945\x1946\a\x3E0\x2\x2\x1946"+
		"\x1947\a\x45E\x2\x2\x1947\x1948\x5\x35A\x1AE\x2\x1948\x194A\a\x45F\x2"+
		"\x2\x1949\x194B\a\x2BB\x2\x2\x194A\x1949\x3\x2\x2\x2\x194A\x194B\x3\x2"+
		"\x2\x2\x194B\x194D\x3\x2\x2\x2\x194C\x1945\x3\x2\x2\x2\x194C\x194D\x3"+
		"\x2\x2\x2\x194D\x194F\x3\x2\x2\x2\x194E\x1950\a\x1D3\x2\x2\x194F\x194E"+
		"\x3\x2\x2\x2\x194F\x1950\x3\x2\x2\x2\x1950\x1953\x3\x2\x2\x2\x1951\x1954"+
		"\x5\x446\x224\x2\x1952\x1954\x5\x2A0\x151\x2\x1953\x1951\x3\x2\x2\x2\x1953"+
		"\x1952\x3\x2\x2\x2\x1954\x1956\x3\x2\x2\x2\x1955\x1957\x5\x408\x205\x2"+
		"\x1956\x1955\x3\x2\x2\x2\x1956\x1957\x3\x2\x2\x2\x1957\x195C\x3\x2\x2"+
		"\x2\x1958\x1959\a\x45E\x2\x2\x1959\x195A\x5\x44C\x227\x2\x195A\x195B\a"+
		"\x45F\x2\x2\x195B\x195D\x3\x2\x2\x2\x195C\x1958\x3\x2\x2\x2\x195C\x195D"+
		"\x3\x2\x2\x2\x195D\x195F\x3\x2\x2\x2\x195E\x1960\x5\x1EC\xF7\x2\x195F"+
		"\x195E\x3\x2\x2\x2\x195F\x1960\x3\x2\x2\x2\x1960\x1961\x3\x2\x2\x2\x1961"+
		"\x1963\x5\x1E0\xF1\x2\x1962\x1964\x5\x384\x1C3\x2\x1963\x1962\x3\x2\x2"+
		"\x2\x1963\x1964\x3\x2\x2\x2\x1964\x1966\x3\x2\x2\x2\x1965\x1967\x5\x38C"+
		"\x1C7\x2\x1966\x1965\x3\x2\x2\x2\x1966\x1967\x3\x2\x2\x2\x1967\x1969\x3"+
		"\x2\x2\x2\x1968\x196A\a\x463\x2\x2\x1969\x1968\x3\x2\x2\x2\x1969\x196A"+
		"\x3\x2\x2\x2\x196A\x1DF\x3\x2\x2\x2\x196B\x1971\x5\x412\x20A\x2\x196C"+
		"\x1971\x5\x3D2\x1EA\x2\x196D\x1971\x5\x2BE\x160\x2\x196E\x196F\a\xF7\x2"+
		"\x2\x196F\x1971\a\x416\x2\x2\x1970\x196B\x3\x2\x2\x2\x1970\x196C\x3\x2"+
		"\x2\x2\x1970\x196D\x3\x2\x2\x2\x1970\x196E\x3\x2\x2\x2\x1971\x1E1\x3\x2"+
		"\x2\x2\x1972\x1974\a\x45E\x2\x2\x1973\x1972\x3\x2\x2\x2\x1973\x1974\x3"+
		"\x2\x2\x2\x1974\x1975\x3\x2\x2\x2\x1975\x1979\a\x306\x2\x2\x1976\x197A"+
		"\a\x18\x2\x2\x1977\x197A\a\x114\x2\x2\x1978\x197A\x5\x37C\x1BF\x2\x1979"+
		"\x1976\x3\x2\x2\x2\x1979\x1977\x3\x2\x2\x2\x1979\x1978\x3\x2\x2\x2\x197A"+
		"\x197B\x3\x2\x2\x2\x197B\x197C\x5\x39E\x1D0\x2\x197C\x197D\a\x17E\x2\x2"+
		"\x197D\x1983\x5\x43A\x21E\x2\x197E\x197F\a\x1D3\x2\x2\x197F\x1980\x5\x47A"+
		"\x23E\x2\x1980\x1981\a\x428\x2\x2\x1981\x1982\x5\x372\x1BA\x2\x1982\x1984"+
		"\x3\x2\x2\x2\x1983\x197E\x3\x2\x2\x2\x1983\x1984\x3\x2\x2\x2\x1984\x1986"+
		"\x3\x2\x2\x2\x1985\x1987\a\x45F\x2\x2\x1986\x1985\x3\x2\x2\x2\x1986\x1987"+
		"\x3\x2\x2\x2\x1987\x1E3\x3\x2\x2\x2\x1988\x198A\x5\x36A\x1B6\x2\x1989"+
		"\x1988\x3\x2\x2\x2\x1989\x198A\x3\x2\x2\x2\x198A\x198B\x3\x2\x2\x2\x198B"+
		"\x198C\x5\x1E6\xF4\x2\x198C\x1E5\x3\x2\x2\x2\x198D\x198F\x5\x376\x1BC"+
		"\x2\x198E\x1990\x5\x382\x1C2\x2\x198F\x198E\x3\x2\x2\x2\x198F\x1990\x3"+
		"\x2\x2\x2\x1990\x1992\x3\x2\x2\x2\x1991\x1993\x5\x384\x1C3\x2\x1992\x1991"+
		"\x3\x2\x2\x2\x1992\x1993\x3\x2\x2\x2\x1993\x1995\x3\x2\x2\x2\x1994\x1996"+
		"\x5\x38C\x1C7\x2\x1995\x1994\x3\x2\x2\x2\x1995\x1996\x3\x2\x2\x2\x1996"+
		"\x1998\x3\x2\x2\x2\x1997\x1999\a\x463\x2\x2\x1998\x1997\x3\x2\x2\x2\x1998"+
		"\x1999\x3\x2\x2\x2\x1999\x1E7\x3\x2\x2\x2\x199A\x199D\a\x445\x2\x2\x199B"+
		"\x199D\x5\x474\x23B\x2\x199C\x199A\x3\x2\x2\x2\x199C\x199B\x3\x2\x2\x2"+
		"\x199D\x1E9\x3\x2\x2\x2\x199E\x19A0\x5\x36A\x1B6\x2\x199F\x199E\x3\x2"+
		"\x2\x2\x199F\x19A0\x3\x2\x2\x2\x19A0\x19A1\x3\x2\x2\x2\x19A1\x19A9\a\x409"+
		"\x2\x2\x19A2\x19A3\a\x3E0\x2\x2\x19A3\x19A4\a\x45E\x2\x2\x19A4\x19A5\x5"+
		"\x35A\x1AE\x2\x19A5\x19A7\a\x45F\x2\x2\x19A6\x19A8\a\x2BB\x2\x2\x19A7"+
		"\x19A6\x3\x2\x2\x2\x19A7\x19A8\x3\x2\x2\x2\x19A8\x19AA\x3\x2\x2\x2\x19A9"+
		"\x19A2\x3\x2\x2\x2\x19A9\x19AA\x3\x2\x2\x2\x19AA\x19AD\x3\x2\x2\x2\x19AB"+
		"\x19AE\x5\x446\x224\x2\x19AC\x19AE\x5\x2A0\x151\x2\x19AD\x19AB\x3\x2\x2"+
		"\x2\x19AD\x19AC\x3\x2\x2\x2\x19AE\x19B0\x3\x2\x2\x2\x19AF\x19B1\x5\x404"+
		"\x203\x2\x19B0\x19AF\x3\x2\x2\x2\x19B0\x19B1\x3\x2\x2\x2\x19B1\x19B2\x3"+
		"\x2\x2\x2\x19B2\x19B3\a\x37C\x2\x2\x19B3\x19B8\x5\x36E\x1B8\x2\x19B4\x19B5"+
		"\a\x462\x2\x2\x19B5\x19B7\x5\x36E\x1B8\x2\x19B6\x19B4\x3\x2\x2\x2\x19B7"+
		"\x19BA\x3\x2\x2\x2\x19B8\x19B6\x3\x2\x2\x2\x19B8\x19B9\x3\x2\x2\x2\x19B9"+
		"\x19BC\x3\x2\x2\x2\x19BA\x19B8\x3\x2\x2\x2\x19BB\x19BD\x5\x1EC\xF7\x2"+
		"\x19BC\x19BB\x3\x2\x2\x2\x19BC\x19BD\x3\x2\x2\x2\x19BD\x19C0\x3\x2\x2"+
		"\x2\x19BE\x19BF\a\x17E\x2\x2\x19BF\x19C1\x5\x3A0\x1D1\x2\x19C0\x19BE\x3"+
		"\x2\x2\x2\x19C0\x19C1\x3\x2\x2\x2\x19C1\x19CF\x3\x2\x2\x2\x19C2\x19CD"+
		"\a\x428\x2\x2\x19C3\x19CE\x5\x372\x1BA\x2\x19C4\x19C5\a\xD0\x2\x2\x19C5"+
		"\x19CB\a\x286\x2\x2\x19C6\x19C8\a\x191\x2\x2\x19C7\x19C6\x3\x2\x2\x2\x19C7"+
		"\x19C8\x3\x2\x2\x2\x19C8\x19C9\x3\x2\x2\x2\x19C9\x19CC\x5\x452\x22A\x2"+
		"\x19CA\x19CC\a\x445\x2\x2\x19CB\x19C7\x3\x2\x2\x2\x19CB\x19CA\x3\x2\x2"+
		"\x2\x19CC\x19CE\x3\x2\x2\x2\x19CD\x19C3\x3\x2\x2\x2\x19CD\x19C4\x3\x2"+
		"\x2\x2\x19CE\x19D0\x3\x2\x2\x2\x19CF\x19C2\x3\x2\x2\x2\x19CF\x19D0\x3"+
		"\x2\x2\x2\x19D0\x19D2\x3\x2\x2\x2\x19D1\x19D3\x5\x384\x1C3\x2\x19D2\x19D1"+
		"\x3\x2\x2\x2\x19D2\x19D3\x3\x2\x2\x2\x19D3\x19D5\x3\x2\x2\x2\x19D4\x19D6"+
		"\x5\x38C\x1C7\x2\x19D5\x19D4\x3\x2\x2\x2\x19D5\x19D6\x3\x2\x2\x2\x19D6"+
		"\x19D8\x3\x2\x2\x2\x19D7\x19D9\a\x463\x2\x2\x19D8\x19D7\x3\x2\x2\x2\x19D8"+
		"\x19D9\x3\x2\x2\x2\x19D9\x1EB\x3\x2\x2\x2\x19DA\x19DB\a\x2A3\x2\x2\x19DB"+
		"\x19E0\x5\x1EE\xF8\x2\x19DC\x19DD\a\x462\x2\x2\x19DD\x19DF\x5\x1EE\xF8"+
		"\x2\x19DE\x19DC\x3\x2\x2\x2\x19DF\x19E2\x3\x2\x2\x2\x19E0\x19DE\x3\x2"+
		"\x2\x2\x19E0\x19E1\x3\x2\x2\x2\x19E1\x19EE\x3\x2\x2\x2\x19E2\x19E0\x3"+
		"\x2\x2\x2\x19E3\x19E6\a\x1D3\x2\x2\x19E4\x19E7\a\x445\x2\x2\x19E5\x19E7"+
		"\x5\x43C\x21F\x2\x19E6\x19E4\x3\x2\x2\x2\x19E6\x19E5\x3\x2\x2\x2\x19E7"+
		"\x19EC\x3\x2\x2\x2\x19E8\x19E9\a\x45E\x2\x2\x19E9\x19EA\x5\x450\x229\x2"+
		"\x19EA\x19EB\a\x45F\x2\x2\x19EB\x19ED\x3\x2\x2\x2\x19EC\x19E8\x3\x2\x2"+
		"\x2\x19EC\x19ED\x3\x2\x2\x2\x19ED\x19EF\x3\x2\x2\x2\x19EE\x19E3\x3\x2"+
		"\x2\x2\x19EE\x19EF\x3\x2\x2\x2\x19EF\x1ED\x3\x2\x2\x2\x19F0\x19F3\x5\x35A"+
		"\x1AE\x2\x19F1\x19F3\x5\x396\x1CC\x2\x19F2\x19F0\x3\x2\x2\x2\x19F2\x19F1"+
		"\x3\x2\x2\x2\x19F3\x19F5\x3\x2\x2\x2\x19F4\x19F6\x5\x3FE\x200\x2\x19F5"+
		"\x19F4\x3\x2\x2\x2\x19F5\x19F6\x3\x2\x2\x2\x19F6\x1EF\x3\x2\x2\x2\x19F7"+
		"\x19F8\a\xC9\x2\x2\x19F8\x19F9\a\xDD\x2\x2\x19F9\x19FD\x5\x47A\x23E\x2"+
		"\x19FA\x19FB\a\xB6\x2\x2\x19FB\x19FC\a\x44C\x2\x2\x19FC\x19FE\t@\x2\x2"+
		"\x19FD\x19FA\x3\x2\x2\x2\x19FD\x19FE\x3\x2\x2\x2\x19FE\x1A0B\x3\x2\x2"+
		"\x2\x19FF\x1A01\a\x28D\x2\x2\x1A00\x1A02\a\x2D1\x2\x2\x1A01\x1A00\x3\x2"+
		"\x2\x2\x1A01\x1A02\x3\x2\x2\x2\x1A02\x1A03\x3\x2\x2\x2\x1A03\x1A08\x5"+
		"\x42E\x218\x2\x1A04\x1A05\a\x462\x2\x2\x1A05\x1A07\x5\x42E\x218\x2\x1A06"+
		"\x1A04\x3\x2\x2\x2\x1A07\x1A0A\x3\x2\x2\x2\x1A08\x1A06\x3\x2\x2\x2\x1A08"+
		"\x1A09\x3\x2\x2\x2\x1A09\x1A0C\x3\x2\x2\x2\x1A0A\x1A08\x3\x2\x2\x2\x1A0B"+
		"\x19FF\x3\x2\x2\x2\x1A0B\x1A0C\x3\x2\x2\x2\x1A0C\x1A17\x3\x2\x2\x2\x1A0D"+
		"\x1A0E\a\x210\x2\x2\x1A0E\x1A0F\a\x28D\x2\x2\x1A0F\x1A14\x5\x42E\x218"+
		"\x2\x1A10\x1A11\a\x462\x2\x2\x1A11\x1A13\x5\x42E\x218\x2\x1A12\x1A10\x3"+
		"\x2\x2\x2\x1A13\x1A16\x3\x2\x2\x2\x1A14\x1A12\x3\x2\x2\x2\x1A14\x1A15"+
		"\x3\x2\x2\x2\x1A15\x1A18\x3\x2\x2\x2\x1A16\x1A14\x3\x2\x2\x2\x1A17\x1A0D"+
		"\x3\x2\x2\x2\x1A17\x1A18\x3\x2\x2\x2\x1A18\x1A1B\x3\x2\x2\x2\x1A19\x1A1A"+
		"\a\x9B\x2\x2\x1A1A\x1A1C\x5\x47A\x23E\x2\x1A1B\x1A19\x3\x2\x2\x2\x1A1B"+
		"\x1A1C\x3\x2\x2\x2\x1A1C\x1A26\x3\x2\x2\x2\x1A1D\x1A1E\a\x42B\x2\x2\x1A1E"+
		"\x1A23\x5\x42A\x216\x2\x1A1F\x1A20\a\x462\x2\x2\x1A20\x1A22\x5\x42A\x216"+
		"\x2\x1A21\x1A1F\x3\x2\x2\x2\x1A22\x1A25\x3\x2\x2\x2\x1A23\x1A21\x3\x2"+
		"\x2\x2\x1A23\x1A24\x3\x2\x2\x2\x1A24\x1A27\x3\x2\x2\x2\x1A25\x1A23\x3"+
		"\x2\x2\x2\x1A26\x1A1D\x3\x2\x2\x2\x1A26\x1A27\x3\x2\x2\x2\x1A27\x1F1\x3"+
		"\x2\x2\x2\x1A28\x1A2A\a\xC9\x2\x2\x1A29\x1A2B\a\x401\x2\x2\x1A2A\x1A29"+
		"\x3\x2\x2\x2\x1A2A\x1A2B\x3\x2\x2\x2\x1A2B\x1A2D\x3\x2\x2\x2\x1A2C\x1A2E"+
		"\x5\x456\x22C\x2\x1A2D\x1A2C\x3\x2\x2\x2\x1A2D\x1A2E\x3\x2\x2\x2\x1A2E"+
		"\x1A2F\x3\x2\x2\x2\x1A2F\x1A30\a\x1C4\x2\x2\x1A30\x1A31\x5\x47A\x23E\x2"+
		"\x1A31\x1A32\a\x28D\x2\x2\x1A32\x1A33\x5\x43C\x21F\x2\x1A33\x1A34\a\x45E"+
		"\x2\x2\x1A34\x1A35\x5\x44A\x226\x2\x1A35\x1A3B\a\x45F\x2\x2\x1A36\x1A37"+
		"\a\x1C0\x2\x2\x1A37\x1A38\a\x45E\x2\x2\x1A38\x1A39\x5\x450\x229\x2\x1A39"+
		"\x1A3A\a\x45F\x2\x2\x1A3A\x1A3C\x3\x2\x2\x2\x1A3B\x1A36\x3\x2\x2\x2\x1A3B"+
		"\x1A3C\x3\x2\x2\x2\x1A3C\x1A3F\x3\x2\x2\x2\x1A3D\x1A3E\a\x428\x2\x2\x1A3E"+
		"\x1A40\x5\x372\x1BA\x2\x1A3F\x1A3D\x3\x2\x2\x2\x1A3F\x1A40\x3\x2\x2\x2"+
		"\x1A40\x1A42\x3\x2\x2\x2\x1A41\x1A43\x5\x348\x1A5\x2\x1A42\x1A41\x3\x2"+
		"\x2\x2\x1A42\x1A43\x3\x2\x2\x2\x1A43\x1A46\x3\x2\x2\x2\x1A44\x1A45\a\x28D"+
		"\x2\x2\x1A45\x1A47\x5\x47A\x23E\x2\x1A46\x1A44\x3\x2\x2\x2\x1A46\x1A47"+
		"\x3\x2\x2\x2\x1A47\x1A49\x3\x2\x2\x2\x1A48\x1A4A\a\x463\x2\x2\x1A49\x1A48"+
		"\x3\x2\x2\x2\x1A49\x1A4A\x3\x2\x2\x2\x1A4A\x1F3\x3\x2\x2\x2\x1A4B\x1A4C"+
		"\a%\x2\x2\x1A4C\x1A4D\a\x1C4\x2\x2\x1A4D\x1A4E\x5\x47A\x23E\x2\x1A4E\x1A4F"+
		"\a\x28D\x2\x2\x1A4F\x1A54\x5\x43C\x21F\x2\x1A50\x1A55\a\x110\x2\x2\x1A51"+
		"\x1A55\a\x2B9\x2\x2\x1A52\x1A55\a\x3\x2\x2\x1A53\x1A55\x5\x1F6\xFC\x2"+
		"\x1A54\x1A50\x3\x2\x2\x2\x1A54\x1A51\x3\x2\x2\x2\x1A54\x1A52\x3\x2\x2"+
		"\x2\x1A54\x1A53\x3\x2\x2\x2\x1A55\x1F5\x3\x2\x2\x2\x1A56\x1A5A\a\x305"+
		"\x2\x2\x1A57\x1A58\a\x2B3\x2\x2\x1A58\x1A59\a\x44C\x2\x2\x1A59\x1A5B\a"+
		"\x18\x2\x2\x1A5A\x1A57\x3\x2\x2\x2\x1A5A\x1A5B\x3\x2\x2\x2\x1A5B\x1A5D"+
		"\x3\x2\x2\x2\x1A5C\x1A5E\x5\x348\x1A5\x2\x1A5D\x1A5C\x3\x2\x2\x2\x1A5D"+
		"\x1A5E\x3\x2\x2\x2\x1A5E\x1F7\x3\x2\x2\x2\x1A5F\x1A64\a\xC9\x2\x2\x1A60"+
		"\x1A65\a\x99\x2\x2\x1A61\x1A63\a\x263\x2\x2\x1A62\x1A61\x3\x2\x2\x2\x1A62"+
		"\x1A63\x3\x2\x2\x2\x1A63\x1A65\x3\x2\x2\x2\x1A64\x1A60\x3\x2\x2\x2\x1A64"+
		"\x1A62\x3\x2\x2\x2\x1A65\x1A66\x3\x2\x2\x2\x1A66\x1A67\a\xA0\x2\x2\x1A67"+
		"\x1A68\a\x1C4\x2\x2\x1A68\x1A69\x5\x47A\x23E\x2\x1A69\x1A6A\a\x28D\x2"+
		"\x2\x1A6A\x1A6C\x5\x43C\x21F\x2\x1A6B\x1A6D\x5\x348\x1A5\x2\x1A6C\x1A6B"+
		"\x3\x2\x2\x2\x1A6C\x1A6D\x3\x2\x2\x2\x1A6D\x1A70\x3\x2\x2\x2\x1A6E\x1A6F"+
		"\a\x28D\x2\x2\x1A6F\x1A71\x5\x47A\x23E\x2\x1A70\x1A6E\x3\x2\x2\x2\x1A70"+
		"\x1A71\x3\x2\x2\x2\x1A71\x1A73\x3\x2\x2\x2\x1A72\x1A74\a\x463\x2\x2\x1A73"+
		"\x1A72\x3\x2\x2\x2\x1A73\x1A74\x3\x2\x2\x2\x1A74\x1F9\x3\x2\x2\x2\x1A75"+
		"\x1A77\a\xC9\x2\x2\x1A76\x1A78\a\x263\x2\x2\x1A77\x1A76\x3\x2\x2\x2\x1A77"+
		"\x1A78\x3\x2\x2\x2\x1A78\x1A79\x3\x2\x2\x2\x1A79\x1A7A\a\xA0\x2\x2\x1A7A"+
		"\x1A7B\a\x1C4\x2\x2\x1A7B\x1A7C\x5\x47A\x23E\x2\x1A7C\x1A7D\a\x28D\x2"+
		"\x2\x1A7D\x1A7E\x5\x43C\x21F\x2\x1A7E\x1A7F\a\x45E\x2\x2\x1A7F\x1A80\x5"+
		"\x44A\x226\x2\x1A80\x1A83\a\x45F\x2\x2\x1A81\x1A82\a\x428\x2\x2\x1A82"+
		"\x1A84\x5\x372\x1BA\x2\x1A83\x1A81\x3\x2\x2\x2\x1A83\x1A84\x3\x2\x2\x2"+
		"\x1A84\x1A86\x3\x2\x2\x2\x1A85\x1A87\x5\x348\x1A5\x2\x1A86\x1A85\x3\x2"+
		"\x2\x2\x1A86\x1A87\x3\x2\x2\x2\x1A87\x1A8A\x3\x2\x2\x2\x1A88\x1A89\a\x28D"+
		"\x2\x2\x1A89\x1A8B\x5\x47A\x23E\x2\x1A8A\x1A88\x3\x2\x2\x2\x1A8A\x1A8B"+
		"\x3\x2\x2\x2\x1A8B\x1A8D\x3\x2\x2\x2\x1A8C\x1A8E\a\x463\x2\x2\x1A8D\x1A8C"+
		"\x3\x2\x2\x2\x1A8D\x1A8E\x3\x2\x2\x2\x1A8E\x1FB\x3\x2\x2\x2\x1A8F\x1A91"+
		"\a\xC9\x2\x2\x1A90\x1A92\a\x2D1\x2\x2\x1A91\x1A90\x3\x2\x2\x2\x1A91\x1A92"+
		"\x3\x2\x2\x2\x1A92\x1A93\x3\x2\x2\x2\x1A93\x1A94\a\x436\x2\x2\x1A94\x1A95"+
		"\a\x1C4\x2\x2\x1A95\x1A96\x5\x47A\x23E\x2\x1A96\x1A97\a\x28D\x2\x2\x1A97"+
		"\x1A98\x5\x43C\x21F\x2\x1A98\x1A99\a\x45E\x2\x2\x1A99\x1A9A\x5\x47A\x23E"+
		"\x2\x1A9A\x1AA5\a\x45F\x2\x2\x1A9B\x1A9C\a\x412\x2\x2\x1A9C\x1A9D\a\x436"+
		"\x2\x2\x1A9D\x1A9E\a\x1C4\x2\x2\x1A9E\x1AA3\x5\x47A\x23E\x2\x1A9F\x1AA1"+
		"\a\x16F\x2\x2\x1AA0\x1AA2\t\x41\x2\x2\x1AA1\x1AA0\x3\x2\x2\x2\x1AA1\x1AA2"+
		"\x3\x2\x2\x2\x1AA2\x1AA4\x3\x2\x2\x2\x1AA3\x1A9F\x3\x2\x2\x2\x1AA3\x1AA4"+
		"\x3\x2\x2\x2\x1AA4\x1AA6\x3\x2\x2\x2\x1AA5\x1A9B\x3\x2\x2\x2\x1AA5\x1AA6"+
		"\x3\x2\x2\x2\x1AA6\x1AA8\x3\x2\x2\x2\x1AA7\x1AA9\x5\x348\x1A5\x2\x1AA8"+
		"\x1AA7\x3\x2\x2\x2\x1AA8\x1AA9\x3\x2\x2\x2\x1AA9\x1AAB\x3\x2\x2\x2\x1AAA"+
		"\x1AAC\a\x463\x2\x2\x1AAB\x1AAA\x3\x2\x2\x2\x1AAB\x1AAC\x3\x2\x2\x2\x1AAC"+
		"\x1FD\x3\x2\x2\x2\x1AAD\x1AB0\a\xC9\x2\x2\x1AAE\x1AAF\a\x29D\x2\x2\x1AAF"+
		"\x1AB1\a%\x2\x2\x1AB0\x1AAE\x3\x2\x2\x2\x1AB0\x1AB1\x3\x2\x2\x2\x1AB1"+
		"\x1AB4\x3\x2\x2\x2\x1AB2\x1AB4\a%\x2\x2\x1AB3\x1AAD\x3\x2\x2\x2\x1AB3"+
		"\x1AB2\x3\x2\x2\x2\x1AB4\x1AB5\x3\x2\x2\x2\x1AB5\x1AB6\t\x42\x2\x2\x1AB6"+
		"\x1AB9\x5\x440\x221\x2\x1AB7\x1AB8\a\x463\x2\x2\x1AB8\x1ABA\a\x446\x2"+
		"\x2\x1AB9\x1AB7\x3\x2\x2\x2\x1AB9\x1ABA\x3\x2\x2\x2\x1ABA\x1AC9\x3\x2"+
		"\x2\x2\x1ABB\x1ABD\a\x45E\x2\x2\x1ABC\x1ABB\x3\x2\x2\x2\x1ABC\x1ABD\x3"+
		"\x2\x2\x2\x1ABD\x1ABE\x3\x2\x2\x2\x1ABE\x1AC3\x5\x216\x10C\x2\x1ABF\x1AC0"+
		"\a\x462\x2\x2\x1AC0\x1AC2\x5\x216\x10C\x2\x1AC1\x1ABF\x3\x2\x2\x2\x1AC2"+
		"\x1AC5\x3\x2\x2\x2\x1AC3\x1AC1\x3\x2\x2\x2\x1AC3\x1AC4\x3\x2\x2\x2\x1AC4"+
		"\x1AC7\x3\x2\x2\x2\x1AC5\x1AC3\x3\x2\x2\x2\x1AC6\x1AC8\a\x45F\x2\x2\x1AC7"+
		"\x1AC6\x3\x2\x2\x2\x1AC7\x1AC8\x3\x2\x2\x2\x1AC8\x1ACA\x3\x2\x2\x2\x1AC9"+
		"\x1ABC\x3\x2\x2\x2\x1AC9\x1ACA\x3\x2\x2\x2\x1ACA\x1AD4\x3\x2\x2\x2\x1ACB"+
		"\x1ACC\a\x42B\x2\x2\x1ACC\x1AD1\x5\x218\x10D\x2\x1ACD\x1ACE\a\x462\x2"+
		"\x2\x1ACE\x1AD0\x5\x218\x10D\x2\x1ACF\x1ACD\x3\x2\x2\x2\x1AD0\x1AD3\x3"+
		"\x2\x2\x2\x1AD1\x1ACF\x3\x2\x2\x2\x1AD1\x1AD2\x3\x2\x2\x2\x1AD2\x1AD5"+
		"\x3\x2\x2\x2\x1AD3\x1AD1\x3\x2\x2\x2\x1AD4\x1ACB\x3\x2\x2\x2\x1AD4\x1AD5"+
		"\x3\x2\x2\x2\x1AD5\x1AD8\x3\x2\x2\x2\x1AD6\x1AD7\a\x16F\x2\x2\x1AD7\x1AD9"+
		"\a\x31D\x2\x2\x1AD8\x1AD6\x3\x2\x2\x2\x1AD8\x1AD9\x3\x2\x2\x2\x1AD9\x1ADA"+
		"\x3\x2\x2\x2\x1ADA\x1AE2\a:\x2\x2\x1ADB\x1AE3\x5\x200\x101\x2\x1ADC\x1ADE"+
		"\x5\b\x5\x2\x1ADD\x1ADC\x3\x2\x2\x2\x1ADE\x1AE1\x3\x2\x2\x2\x1ADF\x1ADD"+
		"\x3\x2\x2\x2\x1ADF\x1AE0\x3\x2\x2\x2\x1AE0\x1AE3\x3\x2\x2\x2\x1AE1\x1ADF"+
		"\x3\x2\x2\x2\x1AE2\x1ADB\x3\x2\x2\x2\x1AE2\x1ADF\x3\x2\x2\x2\x1AE3\x1FF"+
		"\x3\x2\x2\x2\x1AE4\x1AE5\a\x14D\x2\x2\x1AE5\x1AE6\a\x24D\x2\x2\x1AE6\x1AE7"+
		"\x5\x47A\x23E\x2\x1AE7\x1AE8\a\x459\x2\x2\x1AE8\x1AE9\x5\x47A\x23E\x2"+
		"\x1AE9\x1AEA\a\x459\x2\x2\x1AEA\x1AEB\x5\x47A\x23E\x2\x1AEB\x201\x3\x2"+
		"\x2\x2\x1AEC\x1AEF\x5\x204\x103\x2\x1AED\x1AEF\x5\x20A\x106\x2\x1AEE\x1AEC"+
		"\x3\x2\x2\x2\x1AEE\x1AED\x3\x2\x2\x2\x1AEF\x203\x3\x2\x2\x2\x1AF0\x1AF3"+
		"\a\xC9\x2\x2\x1AF1\x1AF2\a\x29D\x2\x2\x1AF2\x1AF4\a%\x2\x2\x1AF3\x1AF1"+
		"\x3\x2\x2\x2\x1AF3\x1AF4\x3\x2\x2\x2\x1AF4\x1AF7\x3\x2\x2\x2\x1AF5\x1AF7"+
		"\a%\x2\x2\x1AF6\x1AF0\x3\x2\x2\x2\x1AF6\x1AF5\x3\x2\x2\x2\x1AF7\x1AF8"+
		"\x3\x2\x2\x2\x1AF8\x1AF9\a\x3EC\x2\x2\x1AF9\x1AFA\x5\x43E\x220\x2\x1AFA"+
		"\x1AFB\a\x28D\x2\x2\x1AFB\x1B05\x5\x43C\x21F\x2\x1AFC\x1AFD\a\x42B\x2"+
		"\x2\x1AFD\x1B02\x5\x206\x104\x2\x1AFE\x1AFF\a\x462\x2\x2\x1AFF\x1B01\x5"+
		"\x206\x104\x2\x1B00\x1AFE\x3\x2\x2\x2\x1B01\x1B04\x3\x2\x2\x2\x1B02\x1B00"+
		"\x3\x2\x2\x2\x1B02\x1B03\x3\x2\x2\x2\x1B03\x1B06\x3\x2\x2\x2\x1B04\x1B02"+
		"\x3\x2\x2\x2\x1B05\x1AFC\x3\x2\x2\x2\x1B05\x1B06\x3\x2\x2\x2\x1B06\x1B0B"+
		"\x3\x2\x2\x2\x1B07\x1B0C\a\x16F\x2\x2\x1B08\x1B0C\a\x15\x2\x2\x1B09\x1B0A"+
		"\a\x1D0\x2\x2\x1B0A\x1B0C\a\x286\x2\x2\x1B0B\x1B07\x3\x2\x2\x2\x1B0B\x1B08"+
		"\x3\x2\x2\x2\x1B0B\x1B09\x3\x2\x2\x2\x1B0C\x1B0D\x3\x2\x2\x2\x1B0D\x1B12"+
		"\x5\x208\x105\x2\x1B0E\x1B0F\a\x462\x2\x2\x1B0F\x1B11\x5\x208\x105\x2"+
		"\x1B10\x1B0E\x3\x2\x2\x2\x1B11\x1B14\x3\x2\x2\x2\x1B12\x1B10\x3\x2\x2"+
		"\x2\x1B12\x1B13\x3\x2\x2\x2\x1B13\x1B17\x3\x2\x2\x2\x1B14\x1B12\x3\x2"+
		"\x2\x2\x1B15\x1B16\a\x42B\x2\x2\x1B16\x1B18\a\x31\x2\x2\x1B17\x1B15\x3"+
		"\x2\x2\x2\x1B17\x1B18\x3\x2\x2\x2\x1B18\x1B1C\x3\x2\x2\x2\x1B19\x1B1A"+
		"\a\x26A\x2\x2\x1B1A\x1B1B\a\x16F\x2\x2\x1B1B\x1B1D\a\x31D\x2\x2\x1B1C"+
		"\x1B19\x3\x2\x2\x2\x1B1C\x1B1D\x3\x2\x2\x2\x1B1D\x1B1E\x3\x2\x2\x2\x1B1E"+
		"\x1B20\a:\x2\x2\x1B1F\x1B21\x5\b\x5\x2\x1B20\x1B1F\x3\x2\x2\x2\x1B21\x1B22"+
		"\x3\x2\x2\x2\x1B22\x1B20\x3\x2\x2\x2\x1B22\x1B23\x3\x2\x2\x2\x1B23\x205"+
		"\x3\x2\x2\x2\x1B24\x1B27\a\x12B\x2\x2\x1B25\x1B27\x5\x32A\x196\x2\x1B26"+
		"\x1B24\x3\x2\x2\x2\x1B26\x1B25\x3\x2\x2\x2\x1B27\x207\x3\x2\x2\x2\x1B28"+
		"\x1B29\t\x43\x2\x2\x1B29\x209\x3\x2\x2\x2\x1B2A\x1B2D\a\xC9\x2\x2\x1B2B"+
		"\x1B2C\a\x29D\x2\x2\x1B2C\x1B2E\a%\x2\x2\x1B2D\x1B2B\x3\x2\x2\x2\x1B2D"+
		"\x1B2E\x3\x2\x2\x2\x1B2E\x1B31\x3\x2\x2\x2\x1B2F\x1B31\a%\x2\x2\x1B30"+
		"\x1B2A\x3\x2\x2\x2\x1B30\x1B2F\x3\x2\x2\x2\x1B31\x1B32\x3\x2\x2\x2\x1B32"+
		"\x1B33\a\x3EC\x2\x2\x1B33\x1B34\x5\x43E\x220\x2\x1B34\x1B38\a\x28D\x2"+
		"\x2\x1B35\x1B36\a\x18\x2\x2\x1B36\x1B39\a\x371\x2\x2\x1B37\x1B39\a\xDD"+
		"\x2\x2\x1B38\x1B35\x3\x2\x2\x2\x1B38\x1B37\x3\x2\x2\x2\x1B39\x1B43\x3"+
		"\x2\x2\x2\x1B3A\x1B3B\a\x42B\x2\x2\x1B3B\x1B40\x5\x206\x104\x2\x1B3C\x1B3D"+
		"\a\x462\x2\x2\x1B3D\x1B3F\x5\x206\x104\x2\x1B3E\x1B3C\x3\x2\x2\x2\x1B3F"+
		"\x1B42\x3\x2\x2\x2\x1B40\x1B3E\x3\x2\x2\x2\x1B40\x1B41\x3\x2\x2\x2\x1B41"+
		"\x1B44\x3\x2\x2\x2\x1B42\x1B40\x3\x2\x2\x2\x1B43\x1B3A\x3\x2\x2\x2\x1B43"+
		"\x1B44\x3\x2\x2\x2\x1B44\x1B45\x3\x2\x2\x2\x1B45\x1B46\t\x44\x2\x2\x1B46"+
		"\x1B4B\x5\x20C\x107\x2\x1B47\x1B48\a\x462\x2\x2\x1B48\x1B4A\x5\x20C\x107"+
		"\x2\x1B49\x1B47\x3\x2\x2\x2\x1B4A\x1B4D\x3\x2\x2\x2\x1B4B\x1B49\x3\x2"+
		"\x2\x2\x1B4B\x1B4C\x3\x2\x2\x2\x1B4C\x1B4E\x3\x2\x2\x2\x1B4D\x1B4B\x3"+
		"\x2\x2\x2\x1B4E\x1B50\a:\x2\x2\x1B4F\x1B51\x5\b\x5\x2\x1B50\x1B4F\x3\x2"+
		"\x2\x2\x1B51\x1B52\x3\x2\x2\x2\x1B52\x1B50\x3\x2\x2\x2\x1B52\x1B53\x3"+
		"\x2\x2\x2\x1B53\x20B\x3\x2\x2\x2\x1B54\x1B55\x5\x47C\x23F\x2\x1B55\x20D"+
		"\x3\x2\x2\x2\x1B56\x1B59\a\xC9\x2\x2\x1B57\x1B58\a\x29D\x2\x2\x1B58\x1B5A"+
		"\a%\x2\x2\x1B59\x1B57\x3\x2\x2\x2\x1B59\x1B5A\x3\x2\x2\x2\x1B5A\x1B5D"+
		"\x3\x2\x2\x2\x1B5B\x1B5D\a%\x2\x2\x1B5C\x1B56\x3\x2\x2\x2\x1B5C\x1B5B"+
		"\x3\x2\x2\x2\x1B5D\x1B5E\x3\x2\x2\x2\x1B5E\x1B5F\a\x184\x2\x2\x1B5F\x1B6D"+
		"\x5\x440\x221\x2\x1B60\x1B61\a\x45E\x2\x2\x1B61\x1B66\x5\x216\x10C\x2"+
		"\x1B62\x1B63\a\x462\x2\x2\x1B63\x1B65\x5\x216\x10C\x2\x1B64\x1B62\x3\x2"+
		"\x2\x2\x1B65\x1B68\x3\x2\x2\x2\x1B66\x1B64\x3\x2\x2\x2\x1B66\x1B67\x3"+
		"\x2\x2\x2\x1B67\x1B69\x3\x2\x2\x2\x1B68\x1B66\x3\x2\x2\x2\x1B69\x1B6A"+
		"\a\x45F\x2\x2\x1B6A\x1B6E\x3\x2\x2\x2\x1B6B\x1B6C\a\x45E\x2\x2\x1B6C\x1B6E"+
		"\a\x45F\x2\x2\x1B6D\x1B60\x3\x2\x2\x2\x1B6D\x1B6B\x3\x2\x2\x2\x1B6E\x1B72"+
		"\x3\x2\x2\x2\x1B6F\x1B73\x5\x210\x109\x2\x1B70\x1B73\x5\x212\x10A\x2\x1B71"+
		"\x1B73\x5\x214\x10B\x2\x1B72\x1B6F\x3\x2\x2\x2\x1B72\x1B70\x3\x2\x2\x2"+
		"\x1B72\x1B71\x3\x2\x2\x2\x1B73\x1B75\x3\x2\x2\x2\x1B74\x1B76\a\x463\x2"+
		"\x2\x1B75\x1B74\x3\x2\x2\x2\x1B75\x1B76\x3\x2\x2\x2\x1B76\x20F\x3\x2\x2"+
		"\x2\x1B77\x1B78\a\x332\x2\x2\x1B78\x1B82\a\x3CB\x2\x2\x1B79\x1B7A\a\x42B"+
		"\x2\x2\x1B7A\x1B7F\x5\x21A\x10E\x2\x1B7B\x1B7C\a\x462\x2\x2\x1B7C\x1B7E"+
		"\x5\x21A\x10E\x2\x1B7D\x1B7B\x3\x2\x2\x2\x1B7E\x1B81\x3\x2\x2\x2\x1B7F"+
		"\x1B7D\x3\x2\x2\x2\x1B7F\x1B80\x3\x2\x2\x2\x1B80\x1B83\x3\x2\x2\x2\x1B81"+
		"\x1B7F\x3\x2\x2\x2\x1B82\x1B79\x3\x2\x2\x2\x1B82\x1B83\x3\x2\x2\x2\x1B83"+
		"\x1B85\x3\x2\x2\x2\x1B84\x1B86\a:\x2\x2\x1B85\x1B84\x3\x2\x2\x2\x1B85"+
		"\x1B86\x3\x2\x2\x2\x1B86\x1B90\x3\x2\x2\x2\x1B87\x1B91\x5\x200\x101\x2"+
		"\x1B88\x1B8A\a\x331\x2\x2\x1B89\x1B8B\a\x45E\x2\x2\x1B8A\x1B89\x3\x2\x2"+
		"\x2\x1B8A\x1B8B\x3\x2\x2\x2\x1B8B\x1B8C\x3\x2\x2\x2\x1B8C\x1B8E\x5\x1E4"+
		"\xF3\x2\x1B8D\x1B8F\a\x45F\x2\x2\x1B8E\x1B8D\x3\x2\x2\x2\x1B8E\x1B8F\x3"+
		"\x2\x2\x2\x1B8F\x1B91\x3\x2\x2\x2\x1B90\x1B87\x3\x2\x2\x2\x1B90\x1B88"+
		"\x3\x2\x2\x2\x1B91\x211\x3\x2\x2\x2\x1B92\x1B94\a\x332\x2\x2\x1B93\x1B95"+
		"\a\x445\x2\x2\x1B94\x1B93\x3\x2\x2\x2\x1B94\x1B95\x3\x2\x2\x2\x1B95\x1B96"+
		"\x3\x2\x2\x2\x1B96\x1BA0\x5\x32E\x198\x2\x1B97\x1B98\a\x42B\x2\x2\x1B98"+
		"\x1B9D\x5\x21A\x10E\x2\x1B99\x1B9A\a\x462\x2\x2\x1B9A\x1B9C\x5\x21A\x10E"+
		"\x2\x1B9B\x1B99\x3\x2\x2\x2\x1B9C\x1B9F\x3\x2\x2\x2\x1B9D\x1B9B\x3\x2"+
		"\x2\x2\x1B9D\x1B9E\x3\x2\x2\x2\x1B9E\x1BA1\x3\x2\x2\x2\x1B9F\x1B9D\x3"+
		"\x2\x2\x2\x1BA0\x1B97\x3\x2\x2\x2\x1BA0\x1BA1\x3\x2\x2\x2\x1BA1\x1BA3"+
		"\x3\x2\x2\x2\x1BA2\x1BA4\a:\x2\x2\x1BA3\x1BA2\x3\x2\x2\x2\x1BA3\x1BA4"+
		"\x3\x2\x2\x2\x1BA4\x1BB5\x3\x2\x2\x2\x1BA5\x1BB6\x5\x200\x101\x2\x1BA6"+
		"\x1BAA\a\\\x2\x2\x1BA7\x1BA9\x5\b\x5\x2\x1BA8\x1BA7\x3\x2\x2\x2\x1BA9"+
		"\x1BAC\x3\x2\x2\x2\x1BAA\x1BA8\x3\x2\x2\x2\x1BAA\x1BAB\x3\x2\x2\x2\x1BAB"+
		"\x1BAD\x3\x2\x2\x2\x1BAC\x1BAA\x3\x2\x2\x2\x1BAD\x1BAF\a\x331\x2\x2\x1BAE"+
		"\x1BB0\a\x463\x2\x2\x1BAF\x1BAE\x3\x2\x2\x2\x1BAF\x1BB0\x3\x2\x2\x2\x1BB0"+
		"\x1BB1\x3\x2\x2\x2\x1BB1\x1BB3\a\x12D\x2\x2\x1BB2\x1BB4\a\x463\x2\x2\x1BB3"+
		"\x1BB2\x3\x2\x2\x2\x1BB3\x1BB4\x3\x2\x2\x2\x1BB4\x1BB6\x3\x2\x2\x2\x1BB5"+
		"\x1BA5\x3\x2\x2\x2\x1BB5\x1BA6\x3\x2\x2\x2\x1BB6\x213\x3\x2\x2\x2\x1BB7"+
		"\x1BB8\a\x332\x2\x2\x1BB8\x1BC2\x5\x470\x239\x2\x1BB9\x1BBA\a\x42B\x2"+
		"\x2\x1BBA\x1BBF\x5\x21A\x10E\x2\x1BBB\x1BBC\a\x462\x2\x2\x1BBC\x1BBE\x5"+
		"\x21A\x10E\x2\x1BBD\x1BBB\x3\x2\x2\x2\x1BBE\x1BC1\x3\x2\x2\x2\x1BBF\x1BBD"+
		"\x3\x2\x2\x2\x1BBF\x1BC0\x3\x2\x2\x2\x1BC0\x1BC3\x3\x2\x2\x2\x1BC1\x1BBF"+
		"\x3\x2\x2\x2\x1BC2\x1BB9\x3\x2\x2\x2\x1BC2\x1BC3\x3\x2\x2\x2\x1BC3\x1BC5"+
		"\x3\x2\x2\x2\x1BC4\x1BC6\a:\x2\x2\x1BC5\x1BC4\x3\x2\x2\x2\x1BC5\x1BC6"+
		"\x3\x2\x2\x2\x1BC6\x1BD6\x3\x2\x2\x2\x1BC7\x1BD7\x5\x200\x101\x2\x1BC8"+
		"\x1BCC\a\\\x2\x2\x1BC9\x1BCB\x5\b\x5\x2\x1BCA\x1BC9\x3\x2\x2\x2\x1BCB"+
		"\x1BCE\x3\x2\x2\x2\x1BCC\x1BCA\x3\x2\x2\x2\x1BCC\x1BCD\x3\x2\x2\x2\x1BCD"+
		"\x1BCF\x3\x2\x2\x2\x1BCE\x1BCC\x3\x2\x2\x2\x1BCF\x1BD0\a\x331\x2\x2\x1BD0"+
		"\x1BD2\x5\x35A\x1AE\x2\x1BD1\x1BD3\a\x463\x2\x2\x1BD2\x1BD1\x3\x2\x2\x2"+
		"\x1BD2\x1BD3\x3\x2\x2\x2\x1BD3\x1BD4\x3\x2\x2\x2\x1BD4\x1BD5\a\x12D\x2"+
		"\x2\x1BD5\x1BD7\x3\x2\x2\x2\x1BD6\x1BC7\x3\x2\x2\x2\x1BD6\x1BC8\x3\x2"+
		"\x2\x2\x1BD7\x215\x3\x2\x2\x2\x1BD8\x1BDA\a\x445\x2\x2\x1BD9\x1BDB\a:"+
		"\x2\x2\x1BDA\x1BD9\x3\x2\x2\x2\x1BDA\x1BDB\x3\x2\x2\x2\x1BDB\x1BDF\x3"+
		"\x2\x2\x2\x1BDC\x1BDD\x5\x47A\x23E\x2\x1BDD\x1BDE\a\x459\x2\x2\x1BDE\x1BE0"+
		"\x3\x2\x2\x2\x1BDF\x1BDC\x3\x2\x2\x2\x1BDF\x1BE0\x3\x2\x2\x2\x1BE0\x1BE1"+
		"\x3\x2\x2\x2\x1BE1\x1BE3\x5\x470\x239\x2\x1BE2\x1BE4\a\x41B\x2\x2\x1BE3"+
		"\x1BE2\x3\x2\x2\x2\x1BE3\x1BE4\x3\x2\x2\x2\x1BE4\x1BE8\x3\x2\x2\x2\x1BE5"+
		"\x1BE6\a\x44C\x2\x2\x1BE6\x1BE9\x5\x472\x23A\x2\x1BE7\x1BE9\a\x27A\x2"+
		"\x2\x1BE8\x1BE5\x3\x2\x2\x2\x1BE8\x1BE7\x3\x2\x2\x2\x1BE8\x1BE9\x3\x2"+
		"\x2\x2\x1BE9\x1BEB\x3\x2\x2\x2\x1BEA\x1BEC\t\x45\x2\x2\x1BEB\x1BEA\x3"+
		"\x2\x2\x2\x1BEB\x1BEC\x3\x2\x2\x2\x1BEC\x217\x3\x2\x2\x2\x1BED\x1BF1\a"+
		"\x12B\x2\x2\x1BEE\x1BF1\a\x307\x2\x2\x1BEF\x1BF1\x5\x32A\x196\x2\x1BF0"+
		"\x1BED\x3\x2\x2\x2\x1BF0\x1BEE\x3\x2\x2\x2\x1BF0\x1BEF\x3\x2\x2\x2\x1BF1"+
		"\x219\x3\x2\x2\x2\x1BF2\x1BFF\a\x12B\x2\x2\x1BF3\x1BFF\a\x352\x2\x2\x1BF4"+
		"\x1BF5\a\x332\x2\x2\x1BF5\x1BF6\a\x27A\x2\x2\x1BF6\x1BF7\a\x28D\x2\x2"+
		"\x1BF7\x1BF8\a\x27A\x2\x2\x1BF8\x1BFF\a\x1CC\x2\x2\x1BF9\x1BFA\as\x2\x2"+
		"\x1BFA\x1BFB\a\x28D\x2\x2\x1BFB\x1BFC\a\x27A\x2\x2\x1BFC\x1BFF\a\x1CC"+
		"\x2\x2\x1BFD\x1BFF\x5\x32A\x196\x2\x1BFE\x1BF2\x3\x2\x2\x2\x1BFE\x1BF3"+
		"\x3\x2\x2\x2\x1BFE\x1BF4\x3\x2\x2\x2\x1BFE\x1BF9\x3\x2\x2\x2\x1BFE\x1BFD"+
		"\x3\x2\x2\x2\x1BFF\x21B\x3\x2\x2\x2\x1C00\x1C06\a\x42B\x2\x2\x1C01\x1C07"+
		"\a\x180\x2\x2\x1C02\x1C03\a\x34E\x2\x2\x1C03\x1C04\a\x446\x2\x2\x1C04"+
		"\x1C07\t\x46\x2\x2\x1C05\x1C07\a\x3AD\x2\x2\x1C06\x1C01\x3\x2\x2\x2\x1C06"+
		"\x1C02\x3\x2\x2\x2\x1C06\x1C05\x3\x2\x2\x2\x1C07\x1C0A\x3\x2\x2\x2\x1C08"+
		"\x1C09\a\x462\x2\x2\x1C09\x1C0B\a\x266\x2\x2\x1C0A\x1C08\x3\x2\x2\x2\x1C0A"+
		"\x1C0B\x3\x2\x2\x2\x1C0B\x1C10\x3\x2\x2\x2\x1C0C\x1C0D\a\x462\x2\x2\x1C0D"+
		"\x1C0E\a\x1C3\x2\x2\x1C0E\x1C0F\a\x44C\x2\x2\x1C0F\x1C11\x5\x454\x22B"+
		"\x2\x1C10\x1C0C\x3\x2\x2\x2\x1C10\x1C11\x3\x2\x2\x2\x1C11\x1C13\x3\x2"+
		"\x2\x2\x1C12\x1C14\a\x463\x2\x2\x1C13\x1C12\x3\x2\x2\x2\x1C13\x1C14\x3"+
		"\x2\x2\x2\x1C14\x21D\x3\x2\x2\x2\x1C15\x1C16\a\xC9\x2\x2\x1C16\x1C17\a"+
		"\x3A8\x2\x2\x1C17\x1C18\x5\x47A\x23E\x2\x1C18\x1C19\a\x28D\x2\x2\x1C19"+
		"\x1C1A\x5\x43C\x21F\x2\x1C1A\x1C1B\a\x45E\x2\x2\x1C1B\x1C1C\x5\x450\x229"+
		"\x2\x1C1C\x1C1E\a\x45F\x2\x2\x1C1D\x1C1F\x5\x21C\x10F\x2\x1C1E\x1C1D\x3"+
		"\x2\x2\x2\x1C1E\x1C1F\x3\x2\x2\x2\x1C1F\x21F\x3\x2\x2\x2\x1C20\x1C22\a"+
		"\x409\x2\x2\x1C21\x1C23\tG\x2\x2\x1C22\x1C21\x3\x2\x2\x2\x1C22\x1C23\x3"+
		"\x2\x2\x2\x1C23\x1C24\x3\x2\x2\x2\x1C24\x1C25\a\x3A8\x2\x2\x1C25\x1C27"+
		"\x5\x43A\x21E\x2\x1C26\x1C28\x5\x47A\x23E\x2\x1C27\x1C26\x3\x2\x2\x2\x1C27"+
		"\x1C28\x3\x2\x2\x2\x1C28\x1C2A\x3\x2\x2\x2\x1C29\x1C2B\x5\x21C\x10F\x2"+
		"\x1C2A\x1C29\x3\x2\x2\x2\x1C2A\x1C2B\x3\x2\x2\x2\x1C2B\x221\x3\x2\x2\x2"+
		"\x1C2C\x1C2D\a\xC9\x2\x2\x1C2D\x1C2E\a\x3CB\x2\x2\x1C2E\x1C2F\x5\x43C"+
		"\x21F\x2\x1C2F\x1C30\a\x45E\x2\x2\x1C30\x1C37\x5\x336\x19C\x2\x1C31\x1C33"+
		"\a\x462\x2\x2\x1C32\x1C31\x3\x2\x2\x2\x1C32\x1C33\x3\x2\x2\x2\x1C33\x1C34"+
		"\x3\x2\x2\x2\x1C34\x1C36\x5\x224\x113\x2\x1C35\x1C32\x3\x2\x2\x2\x1C36"+
		"\x1C39\x3\x2\x2\x2\x1C37\x1C35\x3\x2\x2\x2\x1C37\x1C38\x3\x2\x2\x2\x1C38"+
		"\x1C3B\x3\x2\x2\x2\x1C39\x1C37\x3\x2\x2\x2\x1C3A\x1C3C\a\x462\x2\x2\x1C3B"+
		"\x1C3A\x3\x2\x2\x2\x1C3B\x1C3C\x3\x2\x2\x2\x1C3C\x1C3D\x3\x2\x2\x2\x1C3D"+
		"\x1C40\a\x45F\x2\x2\x1C3E\x1C3F\a\x20E\x2\x2\x1C3F\x1C41\x5\x47C\x23F"+
		"\x2\x1C40\x1C3E\x3\x2\x2\x2\x1C40\x1C41\x3\x2\x2\x2\x1C41\x1C45\x3\x2"+
		"\x2\x2\x1C42\x1C44\x5\x226\x114\x2\x1C43\x1C42\x3\x2\x2\x2\x1C44\x1C47"+
		"\x3\x2\x2\x2\x1C45\x1C43\x3\x2\x2\x2\x1C45\x1C46\x3\x2\x2\x2\x1C46\x1C4B"+
		"\x3\x2\x2\x2\x1C47\x1C45\x3\x2\x2\x2\x1C48\x1C49\a\x28D\x2\x2\x1C49\x1C4C"+
		"\x5\x47A\x23E\x2\x1C4A\x1C4C\a\xF7\x2\x2\x1C4B\x1C48\x3\x2\x2\x2\x1C4B"+
		"\x1C4A\x3\x2\x2\x2\x1C4B\x1C4C\x3\x2\x2\x2\x1C4C\x1C50\x3\x2\x2\x2\x1C4D"+
		"\x1C4E\a\x3D6\x2\x2\x1C4E\x1C51\x5\x47A\x23E\x2\x1C4F\x1C51\a\xF7\x2\x2"+
		"\x1C50\x1C4D\x3\x2\x2\x2\x1C50\x1C4F\x3\x2\x2\x2\x1C50\x1C51\x3\x2\x2"+
		"\x2\x1C51\x1C53\x3\x2\x2\x2\x1C52\x1C54\a\x463\x2\x2\x1C53\x1C52\x3\x2"+
		"\x2\x2\x1C53\x1C54\x3\x2\x2\x2\x1C54\x223\x3\x2\x2\x2\x1C55\x1C56\a\x1C4"+
		"\x2\x2\x1C56\x1C58\x5\x47A\x23E\x2\x1C57\x1C59\tH\x2\x2\x1C58\x1C57\x3"+
		"\x2\x2\x2\x1C58\x1C59\x3\x2\x2\x2\x1C59\x1C5A\x3\x2\x2\x2\x1C5A\x1C5B"+
		"\a\x45E\x2\x2\x1C5B\x1C5C\x5\x44A\x226\x2\x1C5C\x1C5E\a\x45F\x2\x2\x1C5D"+
		"\x1C5F\x5\x348\x1A5\x2\x1C5E\x1C5D\x3\x2\x2\x2\x1C5E\x1C5F\x3\x2\x2\x2"+
		"\x1C5F\x1C62\x3\x2\x2\x2\x1C60\x1C61\a\x28D\x2\x2\x1C61\x1C63\x5\x47A"+
		"\x23E\x2\x1C62\x1C60\x3\x2\x2\x2\x1C62\x1C63\x3\x2\x2\x2\x1C63\x225\x3"+
		"\x2\x2\x2\x1C64\x1C78\a\x42B\x2\x2\x1C65\x1C66\a\x45E\x2\x2\x1C66\x1C6B"+
		"\x5\x34A\x1A6\x2\x1C67\x1C68\a\x462\x2\x2\x1C68\x1C6A\x5\x34A\x1A6\x2"+
		"\x1C69\x1C67\x3\x2\x2\x2\x1C6A\x1C6D\x3\x2\x2\x2\x1C6B\x1C69\x3\x2\x2"+
		"\x2\x1C6B\x1C6C\x3\x2\x2\x2\x1C6C\x1C6E\x3\x2\x2\x2\x1C6D\x1C6B\x3\x2"+
		"\x2\x2\x1C6E\x1C6F\a\x45F\x2\x2\x1C6F\x1C79\x3\x2\x2\x2\x1C70\x1C75\x5"+
		"\x34A\x1A6\x2\x1C71\x1C72\a\x462\x2\x2\x1C72\x1C74\x5\x34A\x1A6\x2\x1C73"+
		"\x1C71\x3\x2\x2\x2\x1C74\x1C77\x3\x2\x2\x2\x1C75\x1C73\x3\x2\x2\x2\x1C75"+
		"\x1C76\x3\x2\x2\x2\x1C76\x1C79\x3\x2\x2\x2\x1C77\x1C75\x3\x2\x2\x2\x1C78"+
		"\x1C65\x3\x2\x2\x2\x1C78\x1C70\x3\x2\x2\x2\x1C79\x227\x3\x2\x2\x2\x1C7A"+
		"\x1C7B\a\xC9\x2\x2\x1C7B\x1C7C\a\x41F\x2\x2\x1C7C\x1C81\x5\x43E\x220\x2"+
		"\x1C7D\x1C7E\a\x45E\x2\x2\x1C7E\x1C7F\x5\x450\x229\x2\x1C7F\x1C80\a\x45F"+
		"\x2\x2\x1C80\x1C82\x3\x2\x2\x2\x1C81\x1C7D\x3\x2\x2\x2\x1C81\x1C82\x3"+
		"\x2\x2\x2\x1C82\x1C8C\x3\x2\x2\x2\x1C83\x1C84\a\x42B\x2\x2\x1C84\x1C89"+
		"\x5\x22A\x116\x2\x1C85\x1C86\a\x462\x2\x2\x1C86\x1C88\x5\x22A\x116\x2"+
		"\x1C87\x1C85\x3\x2\x2\x2\x1C88\x1C8B\x3\x2\x2\x2\x1C89\x1C87\x3\x2\x2"+
		"\x2\x1C89\x1C8A\x3\x2\x2\x2\x1C8A\x1C8D\x3\x2\x2\x2\x1C8B\x1C89\x3\x2"+
		"\x2\x2\x1C8C\x1C83\x3\x2\x2\x2\x1C8C\x1C8D\x3\x2\x2\x2\x1C8D\x1C8E\x3"+
		"\x2\x2\x2\x1C8E\x1C8F\a:\x2\x2\x1C8F\x1C93\x5\x1E4\xF3\x2\x1C90\x1C91"+
		"\a\x42B\x2\x2\x1C91\x1C92\a\x87\x2\x2\x1C92\x1C94\a\x29C\x2\x2\x1C93\x1C90"+
		"\x3\x2\x2\x2\x1C93\x1C94\x3\x2\x2\x2\x1C94\x1C96\x3\x2\x2\x2\x1C95\x1C97"+
		"\a\x463\x2\x2\x1C96\x1C95\x3\x2\x2\x2\x1C96\x1C97\x3\x2\x2\x2\x1C97\x229"+
		"\x3\x2\x2\x2\x1C98\x1C99\tI\x2\x2\x1C99\x22B\x3\x2\x2\x2\x1C9A\x1C9B\a"+
		"%\x2\x2\x1C9B\x1C9C\a\x3CB\x2\x2\x1C9C\x1CE6\x5\x43C\x21F\x2\x1C9D\x1C9E"+
		"\a\x37C\x2\x2\x1C9E\x1C9F\a\x45E\x2\x2\x1C9F\x1CA0\a\x20F\x2\x2\x1CA0"+
		"\x1CA1\a\x44C\x2\x2\x1CA1\x1CA2\tJ\x2\x2\x1CA2\x1CE7\a\x45F\x2\x2\x1CA3"+
		"\x1CA4\a\r\x2\x2\x1CA4\x1CE7\x5\x336\x19C\x2\x1CA5\x1CA6\a%\x2\x2\x1CA6"+
		"\x1CA7\a\x9D\x2\x2\x1CA7\x1CE7\x5\x33A\x19E\x2\x1CA8\x1CA9\a\x11C\x2\x2"+
		"\x1CA9\x1CAA\a\x9D\x2\x2\x1CAA\x1CAF\x5\x47A\x23E\x2\x1CAB\x1CAC\a\x462"+
		"\x2\x2\x1CAC\x1CAE\x5\x47A\x23E\x2\x1CAD\x1CAB\x3\x2\x2\x2\x1CAE\x1CB1"+
		"\x3\x2\x2\x2\x1CAF\x1CAD\x3\x2\x2\x2\x1CAF\x1CB0\x3\x2\x2\x2\x1CB0\x1CE7"+
		"\x3\x2\x2\x2\x1CB1\x1CAF\x3\x2\x2\x2\x1CB2\x1CB3\a\x11C\x2\x2\x1CB3\x1CB4"+
		"\a\xB5\x2\x2\x1CB4\x1CE7\x5\x47A\x23E\x2\x1CB5\x1CB6\a\x42B\x2\x2\x1CB6"+
		"\x1CB7\tK\x2\x2\x1CB7\x1CBA\a\r\x2\x2\x1CB8\x1CB9\a\xB5\x2\x2\x1CB9\x1CBB"+
		"\x5\x47A\x23E\x2\x1CBA\x1CB8\x3\x2\x2\x2\x1CBA\x1CBB\x3\x2\x2\x2\x1CBB"+
		"\x1CD8\x3\x2\x2\x2\x1CBC\x1CBD\a\x177\x2\x2\x1CBD\x1CBE\a\x1EE\x2\x2\x1CBE"+
		"\x1CBF\a\x45E\x2\x2\x1CBF\x1CC0\x5\x450\x229\x2\x1CC0\x1CC1\a\x45F\x2"+
		"\x2\x1CC1\x1CC2\a\x30B\x2\x2\x1CC2\x1CC7\x5\x43C\x21F\x2\x1CC3\x1CC4\a"+
		"\x45E\x2\x2\x1CC4\x1CC5\x5\x450\x229\x2\x1CC5\x1CC6\a\x45F\x2\x2\x1CC6"+
		"\x1CC8\x3\x2\x2\x2\x1CC7\x1CC3\x3\x2\x2\x2\x1CC7\x1CC8\x3\x2\x2\x2\x1CC8"+
		"\x1CD0\x3\x2\x2\x2\x1CC9\x1CCF\x5\x344\x1A3\x2\x1CCA\x1CCF\x5\x346\x1A4"+
		"\x2\x1CCB\x1CCC\a\x26A\x2\x2\x1CCC\x1CCD\a\x16F\x2\x2\x1CCD\x1CCF\a\x31D"+
		"\x2\x2\x1CCE\x1CC9\x3\x2\x2\x2\x1CCE\x1CCA\x3\x2\x2\x2\x1CCE\x1CCB\x3"+
		"\x2\x2\x2\x1CCF\x1CD2\x3\x2\x2\x2\x1CD0\x1CCE\x3\x2\x2\x2\x1CD0\x1CD1"+
		"\x3\x2\x2\x2\x1CD1\x1CD9\x3\x2\x2\x2\x1CD2\x1CD0\x3\x2\x2\x2\x1CD3\x1CD4"+
		"\a\x87\x2\x2\x1CD4\x1CD5\a\x45E\x2\x2\x1CD5\x1CD6\x5\x372\x1BA\x2\x1CD6"+
		"\x1CD7\a\x45F\x2\x2\x1CD7\x1CD9\x3\x2\x2\x2\x1CD8\x1CBC\x3\x2\x2\x2\x1CD8"+
		"\x1CD3\x3\x2\x2\x2\x1CD9\x1CE7\x3\x2\x2\x2\x1CDA\x1CDB\tK\x2\x2\x1CDB"+
		"\x1CDC\a\xB5\x2\x2\x1CDC\x1CE7\x5\x47A\x23E\x2\x1CDD\x1CDE\t\x1B\x2\x2"+
		"\x1CDE\x1CE0\a\x3EC\x2\x2\x1CDF\x1CE1\x5\x47A\x23E\x2\x1CE0\x1CDF\x3\x2"+
		"\x2\x2\x1CE0\x1CE1\x3\x2\x2\x2\x1CE1\x1CE7\x3\x2\x2\x2\x1CE2\x1CE3\a\x305"+
		"\x2\x2\x1CE3\x1CE7\x5\x226\x114\x2\x1CE4\x1CE5\a\x3C5\x2\x2\x1CE5\x1CE7"+
		"\x5\x22E\x118\x2\x1CE6\x1C9D\x3\x2\x2\x2\x1CE6\x1CA3\x3\x2\x2\x2\x1CE6"+
		"\x1CA5\x3\x2\x2\x2\x1CE6\x1CA8\x3\x2\x2\x2\x1CE6\x1CB2\x3\x2\x2\x2\x1CE6"+
		"\x1CB5\x3\x2\x2\x2\x1CE6\x1CDA\x3\x2\x2\x2\x1CE6\x1CDD\x3\x2\x2\x2\x1CE6"+
		"\x1CE2\x3\x2\x2\x2\x1CE6\x1CE4\x3\x2\x2\x2\x1CE7\x1CE9\x3\x2\x2\x2\x1CE8"+
		"\x1CEA\a\x463\x2\x2\x1CE9\x1CE8\x3\x2\x2\x2\x1CE9\x1CEA\x3\x2\x2\x2\x1CEA"+
		"\x22D\x3\x2\x2\x2\x1CEB\x1CED\a\x2B3\x2\x2\x1CEC\x1CEB\x3\x2\x2\x2\x1CEC"+
		"\x1CED\x3\x2\x2\x2\x1CED\x1CEE\x3\x2\x2\x2\x1CEE\x1CF0\x5\x35A\x1AE\x2"+
		"\x1CEF\x1CEC\x3\x2\x2\x2\x1CEF\x1CF0\x3\x2\x2\x2\x1CF0\x1CF1\x3\x2\x2"+
		"\x2\x1CF1\x1CF2\a\x3DF\x2\x2\x1CF2\x1CF5\x5\x43C\x21F\x2\x1CF3\x1CF4\a"+
		"\x2B3\x2\x2\x1CF4\x1CF6\x5\x35A\x1AE\x2\x1CF5\x1CF3\x3\x2\x2\x2\x1CF5"+
		"\x1CF6\x3\x2\x2\x2\x1CF6\x1CF9\x3\x2\x2\x2\x1CF7\x1CF8\a\x42B\x2\x2\x1CF8"+
		"\x1CFA\x5\x230\x119\x2\x1CF9\x1CF7\x3\x2\x2\x2\x1CF9\x1CFA\x3\x2\x2\x2"+
		"\x1CFA\x22F\x3\x2\x2\x2\x1CFB\x1CFC\a\x425\x2\x2\x1CFC\x1CFD\a\x45E\x2"+
		"\x2\x1CFD\x1CFE\a\x227\x2\x2\x1CFE\x1CFF\a\x44C\x2\x2\x1CFF\x1D01\x5\x1E8"+
		"\xF5\x2\x1D00\x1D02\a\x23E\x2\x2\x1D01\x1D00\x3\x2\x2\x2\x1D01\x1D02\x3"+
		"\x2\x2\x2\x1D02\x1D03\x3\x2\x2\x2\x1D03\x1D04\a\x462\x2\x2\x1D04\x1D05"+
		"\a\x4\x2\x2\x1D05\x1D06\a\x44C\x2\x2\x1D06\x1D07\tL\x2\x2\x1D07\x1D08"+
		"\a\x45F\x2\x2\x1D08\x231\x3\x2\x2\x2\x1D09\x1D0A\a%\x2\x2\x1D0A\x1D0D"+
		"\a\xDD\x2\x2\x1D0B\x1D0E\x5\x47A\x23E\x2\x1D0C\x1D0E\a\xD0\x2\x2\x1D0D"+
		"\x1D0B\x3\x2\x2\x2\x1D0D\x1D0C\x3\x2\x2\x2\x1D0E\x1D1D\x3\x2\x2\x2\x1D0F"+
		"\x1D10\a\x248\x2\x2\x1D10\x1D11\a\x24D\x2\x2\x1D11\x1D12\a\x44C\x2\x2"+
		"\x1D12\x1D1E\x5\x47A\x23E\x2\x1D13\x1D14\a\x9B\x2\x2\x1D14\x1D1E\x5\x47A"+
		"\x23E\x2\x1D15\x1D16\a\x37C\x2\x2\x1D16\x1D19\x5\x23C\x11F\x2\x1D17\x1D18"+
		"\a\x42B\x2\x2\x1D18\x1D1A\x5\x284\x143\x2\x1D19\x1D17\x3\x2\x2\x2\x1D19"+
		"\x1D1A\x3\x2\x2\x2\x1D1A\x1D1E\x3\x2\x2\x2\x1D1B\x1D1E\x5\x234\x11B\x2"+
		"\x1D1C\x1D1E\x5\x238\x11D\x2\x1D1D\x1D0F\x3\x2\x2\x2\x1D1D\x1D13\x3\x2"+
		"\x2\x2\x1D1D\x1D15\x3\x2\x2\x2\x1D1D\x1D1B\x3\x2\x2\x2\x1D1D\x1D1C\x3"+
		"\x2\x2\x2\x1D1E\x1D20\x3\x2\x2\x2\x1D1F\x1D21\a\x463\x2\x2\x1D20\x1D1F"+
		"\x3\x2\x2\x2\x1D20\x1D21\x3\x2\x2\x2\x1D21\x233\x3\x2\x2\x2\x1D22\x1D23"+
		"\a\r\x2\x2\x1D23\x1D24\a\x159\x2\x2\x1D24\x1D29\x5\x236\x11C\x2\x1D25"+
		"\x1D26\a\x462\x2\x2\x1D26\x1D28\x5\x236\x11C\x2\x1D27\x1D25\x3\x2\x2\x2"+
		"\x1D28\x1D2B\x3\x2\x2\x2\x1D29\x1D27\x3\x2\x2\x2\x1D29\x1D2A\x3\x2\x2"+
		"\x2\x1D2A\x1D2F\x3\x2\x2\x2\x1D2B\x1D29\x3\x2\x2\x2\x1D2C\x1D2D\a\x3DF"+
		"\x2\x2\x1D2D\x1D2E\a\x15A\x2\x2\x1D2E\x1D30\x5\x47A\x23E\x2\x1D2F\x1D2C"+
		"\x3\x2\x2\x2\x1D2F\x1D30\x3\x2\x2\x2\x1D30\x1D43\x3\x2\x2\x2\x1D31\x1D32"+
		"\a\r\x2\x2\x1D32\x1D33\a\x210\x2\x2\x1D33\x1D34\a\x159\x2\x2\x1D34\x1D39"+
		"\x5\x236\x11C\x2\x1D35\x1D36\a\x462\x2\x2\x1D36\x1D38\x5\x236\x11C\x2"+
		"\x1D37\x1D35\x3\x2\x2\x2\x1D38\x1D3B\x3\x2\x2\x2\x1D39\x1D37\x3\x2\x2"+
		"\x2\x1D39\x1D3A\x3\x2\x2\x2\x1D3A\x1D43\x3\x2\x2\x2\x1D3B\x1D39\x3\x2"+
		"\x2\x2\x1D3C\x1D3D\a\x313\x2\x2\x1D3D\x1D3E\a\x159\x2\x2\x1D3E\x1D43\x5"+
		"\x47A\x23E\x2\x1D3F\x1D40\a\x248\x2\x2\x1D40\x1D41\a\x159\x2\x2\x1D41"+
		"\x1D43\x5\x236\x11C\x2\x1D42\x1D22\x3\x2\x2\x2\x1D42\x1D31\x3\x2\x2\x2"+
		"\x1D42\x1D3C\x3\x2\x2\x2\x1D42\x1D3F\x3\x2\x2\x2\x1D43\x235\x3\x2\x2\x2"+
		"\x1D44\x1D45\a\x45E\x2\x2\x1D45\x1D46\a\x24D\x2\x2\x1D46\x1D47\a\x44C"+
		"\x2\x2\x1D47\x1D4C\x5\x47E\x240\x2\x1D48\x1D49\a\x462\x2\x2\x1D49\x1D4A"+
		"\a\x253\x2\x2\x1D4A\x1D4B\a\x44C\x2\x2\x1D4B\x1D4D\x5\x47E\x240\x2\x1D4C"+
		"\x1D48\x3\x2\x2\x2\x1D4C\x1D4D\x3\x2\x2\x2\x1D4D\x1D52\x3\x2\x2\x2\x1D4E"+
		"\x1D4F\a\x462\x2\x2\x1D4F\x1D50\a\x15F\x2\x2\x1D50\x1D51\a\x44C\x2\x2"+
		"\x1D51\x1D53\a\x448\x2\x2\x1D52\x1D4E\x3\x2\x2\x2\x1D52\x1D53\x3\x2\x2"+
		"\x2\x1D53\x1D58\x3\x2\x2\x2\x1D54\x1D55\a\x462\x2\x2\x1D55\x1D56\a\x38E"+
		"\x2\x2\x1D56\x1D57\a\x44C\x2\x2\x1D57\x1D59\x5\x484\x243\x2\x1D58\x1D54"+
		"\x3\x2\x2\x2\x1D58\x1D59\x3\x2\x2\x2\x1D59\x1D5F\x3\x2\x2\x2\x1D5A\x1D5B"+
		"\a\x462\x2\x2\x1D5B\x1D5C\a\x221\x2\x2\x1D5C\x1D5D\a\x44C\x2\x2\x1D5D"+
		"\x1D60\x5\x484\x243\x2\x1D5E\x1D60\a\x403\x2\x2\x1D5F\x1D5A\x3\x2\x2\x2"+
		"\x1D5F\x1D5E\x3\x2\x2\x2\x1D5F\x1D60\x3\x2\x2\x2\x1D60\x1D65\x3\x2\x2"+
		"\x2\x1D61\x1D62\a\x462\x2\x2\x1D62\x1D63\a\x15E\x2\x2\x1D63\x1D64\a\x44C"+
		"\x2\x2\x1D64\x1D66\x5\x484\x243\x2\x1D65\x1D61\x3\x2\x2\x2\x1D65\x1D66"+
		"\x3\x2\x2\x2\x1D66\x1D69\x3\x2\x2\x2\x1D67\x1D68\a\x462\x2\x2\x1D68\x1D6A"+
		"\a\x288\x2\x2\x1D69\x1D67\x3\x2\x2\x2\x1D69\x1D6A\x3\x2\x2\x2\x1D6A\x1D6B"+
		"\x3\x2\x2\x2\x1D6B\x1D6C\a\x45F\x2\x2\x1D6C\x237\x3\x2\x2\x2\x1D6D\x1D6E"+
		"\a\r\x2\x2\x1D6E\x1D6F\a\x15A\x2\x2\x1D6F\x1D74\x5\x47A\x23E\x2\x1D70"+
		"\x1D71\a\xB7\x2\x2\x1D71\x1D75\a\x163\x2\x2\x1D72\x1D73\a\xB7\x2\x2\x1D73"+
		"\x1D75\a\x237\x2\x2\x1D74\x1D70\x3\x2\x2\x2\x1D74\x1D72\x3\x2\x2\x2\x1D74"+
		"\x1D75\x3\x2\x2\x2\x1D75\x1D86\x3\x2\x2\x2\x1D76\x1D77\a\x313\x2\x2\x1D77"+
		"\x1D78\a\x15A\x2\x2\x1D78\x1D86\x5\x47A\x23E\x2\x1D79\x1D7A\a\x248\x2"+
		"\x2\x1D7A\x1D7B\a\x15A\x2\x2\x1D7B\x1D83\x5\x47A\x23E\x2\x1D7C\x1D84\x5"+
		"\x23A\x11E\x2\x1D7D\x1D84\a\xF7\x2\x2\x1D7E\x1D7F\a\x24D\x2\x2\x1D7F\x1D80"+
		"\a\x44C\x2\x2\x1D80\x1D84\x5\x47A\x23E\x2\x1D81\x1D84\aI\x2\x2\x1D82\x1D84"+
		"\aH\x2\x2\x1D83\x1D7C\x3\x2\x2\x2\x1D83\x1D7D\x3\x2\x2\x2\x1D83\x1D7E"+
		"\x3\x2\x2\x2\x1D83\x1D81\x3\x2\x2\x2\x1D83\x1D82\x3\x2\x2\x2\x1D84\x1D86"+
		"\x3\x2\x2\x2\x1D85\x1D6D\x3\x2\x2\x2\x1D85\x1D76\x3\x2\x2\x2\x1D85\x1D79"+
		"\x3\x2\x2\x2\x1D86\x239\x3\x2\x2\x2\x1D87\x1D88\tM\x2\x2\x1D88\x23B\x3"+
		"\x2\x2\x2\x1D89\x1DA2\x5\x240\x121\x2\x1D8A\x1DA2\x5\x242\x122\x2\x1D8B"+
		"\x1DA2\x5\x246\x124\x2\x1D8C\x1DA2\x5\x248\x125\x2\x1D8D\x1DA2\x5\x24C"+
		"\x127\x2\x1D8E\x1DA2\x5\x266\x134\x2\x1D8F\x1DA2\x5\x268\x135\x2\x1D90"+
		"\x1DA2\x5\x26A\x136\x2\x1D91\x1DA2\x5\x26C\x137\x2\x1D92\x1DA2\x5\x26E"+
		"\x138\x2\x1D93\x1DA2\x5\x270\x139\x2\x1D94\x1DA2\x5\x272\x13A\x2\x1D95"+
		"\x1D96\a\x163\x2\x2\x1D96\x1DA2\x5\x42C\x217\x2\x1D97\x1DA2\x5\x274\x13B"+
		"\x2\x1D98\x1DA2\x5\x276\x13C\x2\x1D99\x1DA2\x5\x278\x13D\x2\x1D9A\x1DA2"+
		"\x5\x23E\x120\x2\x1D9B\x1DA2\x5\x27A\x13E\x2\x1D9C\x1DA2\x5\x27C\x13F"+
		"\x2\x1D9D\x1DA2\x5\x27E\x140\x2\x1D9E\x1DA2\x5\x280\x141\x2\x1D9F\x1DA2"+
		"\x5\x282\x142\x2\x1DA0\x1DA2\x5\x284\x143\x2\x1DA1\x1D89\x3\x2\x2\x2\x1DA1"+
		"\x1D8A\x3\x2\x2\x2\x1DA1\x1D8B\x3\x2\x2\x2\x1DA1\x1D8C\x3\x2\x2\x2\x1DA1"+
		"\x1D8D\x3\x2\x2\x2\x1DA1\x1D8E\x3\x2\x2\x2\x1DA1\x1D8F\x3\x2\x2\x2\x1DA1"+
		"\x1D90\x3\x2\x2\x2\x1DA1\x1D91\x3\x2\x2\x2\x1DA1\x1D92\x3\x2\x2\x2\x1DA1"+
		"\x1D93\x3\x2\x2\x2\x1DA1\x1D94\x3\x2\x2\x2\x1DA1\x1D95\x3\x2\x2\x2\x1DA1"+
		"\x1D97\x3\x2\x2\x2\x1DA1\x1D98\x3\x2\x2\x2\x1DA1\x1D99\x3\x2\x2\x2\x1DA1"+
		"\x1D9A\x3\x2\x2\x2\x1DA1\x1D9B\x3\x2\x2\x2\x1DA1\x1D9C\x3\x2\x2\x2\x1DA1"+
		"\x1D9D\x3\x2\x2\x2\x1DA1\x1D9E\x3\x2\x2\x2\x1DA1\x1D9F\x3\x2\x2\x2\x1DA1"+
		"\x1DA0\x3\x2\x2\x2\x1DA2\x23D\x3\x2\x2\x2\x1DA3\x1DA4\a\x2E9\x2\x2\x1DA4"+
		"\x1DA5\a\x44C\x2\x2\x1DA5\x1DA6\x5\x454\x22B\x2\x1DA6\x23F\x3\x2\x2\x2"+
		"\x1DA7\x1DA8\aM\x2\x2\x1DA8\x1DB9\x5\x454\x22B\x2\x1DA9\x1DAA\aN\x2\x2"+
		"\x1DAA\x1DB9\a\x287\x2\x2\x1DAB\x1DB0\a\x28D\x2\x2\x1DAC\x1DAD\a\x1C3"+
		"\x2\x2\x1DAD\x1DAE\a\x44C\x2\x2\x1DAE\x1DB1\a\x28D\x2\x2\x1DAF\x1DB1\a"+
		"\x287\x2\x2\x1DB0\x1DAC\x3\x2\x2\x2\x1DB0\x1DAF\x3\x2\x2\x2\x1DB1\x1DB9"+
		"\x3\x2\x2\x2\x1DB2\x1DB3\aP\x2\x2\x1DB3\x1DB9\x5\x454\x22B\x2\x1DB4\x1DB5"+
		"\aQ\x2\x2\x1DB5\x1DB9\x5\x454\x22B\x2\x1DB6\x1DB7\aR\x2\x2\x1DB7\x1DB9"+
		"\t\x13\x2\x2\x1DB8\x1DA7\x3\x2\x2\x2\x1DB8\x1DA9\x3\x2\x2\x2\x1DB8\x1DAB"+
		"\x3\x2\x2\x2\x1DB8\x1DB2\x3\x2\x2\x2\x1DB8\x1DB4\x3\x2\x2\x2\x1DB8\x1DB6"+
		"\x3\x2\x2\x2\x1DB9\x241\x3\x2\x2\x2\x1DBA\x1DBB\a\x84\x2\x2\x1DBB\x1DCB"+
		"\a\x44C\x2\x2\x1DBC\x1DCC\a\x287\x2\x2\x1DBD\x1DC8\a\x28D\x2\x2\x1DBE"+
		"\x1DC3\x5\x244\x123\x2\x1DBF\x1DC0\a\x462\x2\x2\x1DC0\x1DC2\x5\x244\x123"+
		"\x2\x1DC1\x1DBF\x3\x2\x2\x2\x1DC2\x1DC5\x3\x2\x2\x2\x1DC3\x1DC1\x3\x2"+
		"\x2\x2\x1DC3\x1DC4\x3\x2\x2\x2\x1DC4\x1DC7\x3\x2\x2\x2\x1DC5\x1DC3\x3"+
		"\x2\x2\x2\x1DC6\x1DBE\x3\x2\x2\x2\x1DC7\x1DCA\x3\x2\x2\x2\x1DC8\x1DC6"+
		"\x3\x2\x2\x2\x1DC8\x1DC9\x3\x2\x2\x2\x1DC9\x1DCC\x3\x2\x2\x2\x1DCA\x1DC8"+
		"\x3\x2\x2\x2\x1DCB\x1DBC\x3\x2\x2\x2\x1DCB\x1DBD\x3\x2\x2\x2\x1DCC\x243"+
		"\x3\x2\x2\x2\x1DCD\x1DCE\aL\x2\x2\x1DCE\x1DCF\a\x44C\x2\x2\x1DCF\x1DD4"+
		"\x5\x454\x22B\x2\x1DD0\x1DD1\a\x83\x2\x2\x1DD1\x1DD2\a\x44C\x2\x2\x1DD2"+
		"\x1DD4\tN\x2\x2\x1DD3\x1DCD\x3\x2\x2\x2\x1DD3\x1DD0\x3\x2\x2\x2\x1DD4"+
		"\x245\x3\x2\x2\x2\x1DD5\x1DD6\a\xB6\x2\x2\x1DD6\x1DD7\a\x44C\x2\x2\x1DD7"+
		"\x1DD8\t@\x2\x2\x1DD8\x247\x3\x2\x2\x2\x1DD9\x1DDA\a\xD8\x2\x2\x1DDA\x1DDE"+
		"\x5\x454\x22B\x2\x1DDB\x1DDC\a\xD9\x2\x2\x1DDC\x1DDE\tO\x2\x2\x1DDD\x1DD9"+
		"\x3\x2\x2\x2\x1DDD\x1DDB\x3\x2\x2\x2\x1DDE\x249\x3\x2\x2\x2\x1DDF\x1DE0"+
		"\a%\x2\x2\x1DE0\x1DE1\a\x12E\x2\x2\x1DE1\x1DE4\x5\x47A\x23E\x2\x1DE2\x1DE3"+
		"\a\x46\x2\x2\x1DE3\x1DE5\x5\x47A\x23E\x2\x1DE4\x1DE2\x3\x2\x2\x2\x1DE4"+
		"\x1DE5\x3\x2\x2\x2\x1DE5\x1DED\x3\x2\x2\x2\x1DE6\x1DE7\a\x3A6\x2\x2\x1DE7"+
		"\x1DEB\a\x44C\x2\x2\x1DE8\x1DEC\a\x3A3\x2\x2\x1DE9\x1DEC\a\x3B4\x2\x2"+
		"\x1DEA\x1DEC\a\x111\x2\x2\x1DEB\x1DE8\x3\x2\x2\x2\x1DEB\x1DE9\x3\x2\x2"+
		"\x2\x1DEB\x1DEA\x3\x2\x2\x2\x1DEC\x1DEE\x3\x2\x2\x2\x1DED\x1DE6\x3\x2"+
		"\x2\x2\x1DED\x1DEE\x3\x2\x2\x2\x1DEE\x1DEF\x3\x2\x2\x2\x1DEF\x1DF0\a:"+
		"\x2\x2\x1DF0\x1DF1\a\x3D5\x2\x2\x1DF1\x1DF2\a\x45E\x2\x2\x1DF2\x1DF3\a"+
		"\x207\x2\x2\x1DF3\x1DF4\a\x44C\x2\x2\x1DF4\x1DF9\a\x446\x2\x2\x1DF5\x1DF6"+
		"\a\x462\x2\x2\x1DF6\x1DF7\a\x206\x2\x2\x1DF7\x1DF8\a\x44C\x2\x2\x1DF8"+
		"\x1DFA\tP\x2\x2\x1DF9\x1DF5\x3\x2\x2\x2\x1DF9\x1DFA\x3\x2\x2\x2\x1DFA"+
		"\x1DFB\x3\x2\x2\x2\x1DFB\x1E69\a\x45F\x2\x2\x1DFC\x1E6A\a\x3F5\x2\x2\x1DFD"+
		"\x1DFE\a\x16F\x2\x2\x1DFE\x1DFF\a\x375\x2\x2\x1DFF\x1E00\a\x45E\x2\x2"+
		"\x1E00\x1E01\a\x45\x2\x2\x1E01\x1E12\a\x44C\x2\x2\x1E02\x1E04\a\x42A\x2"+
		"\x2\x1E03\x1E05\t \x2\x2\x1E04\x1E03\x3\x2\x2\x2\x1E04\x1E05\x3\x2\x2"+
		"\x2\x1E05\x1E08\x3\x2\x2\x2\x1E06\x1E07\a}\x2\x2\x1E07\x1E09\x5\x47A\x23E"+
		"\x2\x1E08\x1E06\x3\x2\x2\x2\x1E08\x1E09\x3\x2\x2\x2\x1E09\x1E13\x3\x2"+
		"\x2\x2\x1E0A\x1E0B\a}\x2\x2\x1E0B\x1E0D\x5\x47A\x23E\x2\x1E0C\x1E0E\a"+
		"\x42A\x2\x2\x1E0D\x1E0C\x3\x2\x2\x2\x1E0D\x1E0E\x3\x2\x2\x2\x1E0E\x1E10"+
		"\x3\x2\x2\x2\x1E0F\x1E11\t \x2\x2\x1E10\x1E0F\x3\x2\x2\x2\x1E10\x1E11"+
		"\x3\x2\x2\x2\x1E11\x1E13\x3\x2\x2\x2\x1E12\x1E02\x3\x2\x2\x2\x1E12\x1E0A"+
		"\x3\x2\x2\x2\x1E13\x1E25\x3\x2\x2\x2\x1E14\x1E16\a\x462\x2\x2\x1E15\x1E14"+
		"\x3\x2\x2\x2\x1E15\x1E16\x3\x2\x2\x2\x1E16\x1E17\x3\x2\x2\x2\x1E17\x1E18"+
		"\a\x12B\x2\x2\x1E18\x1E19\a\x44C\x2\x2\x1E19\x1E23\t\x1F\x2\x2\x1E1A\x1E21"+
		"\a\x17\x2\x2\x1E1B\x1E22\a\x10\x2\x2\x1E1C\x1E22\a\x2F6\x2\x2\x1E1D\x1E1E"+
		"\a\x10\x2\x2\x1E1E\x1E22\a\x2F6\x2\x2\x1E1F\x1E20\a\x2F6\x2\x2\x1E20\x1E22"+
		"\a\x10\x2\x2\x1E21\x1E1B\x3\x2\x2\x2\x1E21\x1E1C\x3\x2\x2\x2\x1E21\x1E1D"+
		"\x3\x2\x2\x2\x1E21\x1E1F\x3\x2\x2\x2\x1E22\x1E24\x3\x2\x2\x2\x1E23\x1E1A"+
		"\x3\x2\x2\x2\x1E23\x1E24\x3\x2\x2\x2\x1E24\x1E26\x3\x2\x2\x2\x1E25\x1E15"+
		"\x3\x2\x2\x2\x1E25\x1E26\x3\x2\x2\x2\x1E26\x1E2D\x3\x2\x2\x2\x1E27\x1E29"+
		"\a\x462\x2\x2\x1E28\x1E27\x3\x2\x2\x2\x1E28\x1E29\x3\x2\x2\x2\x1E29\x1E2A"+
		"\x3\x2\x2\x2\x1E2A\x1E2B\a\x23B\x2\x2\x1E2B\x1E2C\a\x44C\x2\x2\x1E2C\x1E2E"+
		"\t\x1D\x2\x2\x1E2D\x1E28\x3\x2\x2\x2\x1E2D\x1E2E\x3\x2\x2\x2\x1E2E\x1E35"+
		"\x3\x2\x2\x2\x1E2F\x1E31\a\x462\x2\x2\x1E30\x1E2F\x3\x2\x2\x2\x1E30\x1E31"+
		"\x3\x2\x2\x2\x1E31\x1E32\x3\x2\x2\x2\x1E32\x1E33\a\x23C\x2\x2\x1E33\x1E34"+
		"\a\x44C\x2\x2\x1E34\x1E36\a\x446\x2\x2\x1E35\x1E30\x3\x2\x2\x2\x1E35\x1E36"+
		"\x3\x2\x2\x2\x1E36\x1E37\x3\x2\x2\x2\x1E37\x1E6A\a\x45F\x2\x2\x1E38\x1E39"+
		"\a\x16F\x2\x2\x1E39\x1E3A\a\xDF\x2\x2\x1E3A\x1E3B\a\x45E\x2\x2\x1E3B\x1E3C"+
		"\a\x45\x2\x2\x1E3C\x1E4D\a\x44C\x2\x2\x1E3D\x1E3F\a\x42A\x2\x2\x1E3E\x1E40"+
		"\t \x2\x2\x1E3F\x1E3E\x3\x2\x2\x2\x1E3F\x1E40\x3\x2\x2\x2\x1E40\x1E43"+
		"\x3\x2\x2\x2\x1E41\x1E42\a}\x2\x2\x1E42\x1E44\x5\x47A\x23E\x2\x1E43\x1E41"+
		"\x3\x2\x2\x2\x1E43\x1E44\x3\x2\x2\x2\x1E44\x1E4E\x3\x2\x2\x2\x1E45\x1E46"+
		"\a}\x2\x2\x1E46\x1E48\x5\x47A\x23E\x2\x1E47\x1E49\a\x42A\x2\x2\x1E48\x1E47"+
		"\x3\x2\x2\x2\x1E48\x1E49\x3\x2\x2\x2\x1E49\x1E4B\x3\x2\x2\x2\x1E4A\x1E4C"+
		"\t \x2\x2\x1E4B\x1E4A\x3\x2\x2\x2\x1E4B\x1E4C\x3\x2\x2\x2\x1E4C\x1E4E"+
		"\x3\x2\x2\x2\x1E4D\x1E3D\x3\x2\x2\x2\x1E4D\x1E45\x3\x2\x2\x2\x1E4E\x1E60"+
		"\x3\x2\x2\x2\x1E4F\x1E51\a\x462\x2\x2\x1E50\x1E4F\x3\x2\x2\x2\x1E50\x1E51"+
		"\x3\x2\x2\x2\x1E51\x1E52\x3\x2\x2\x2\x1E52\x1E53\a\x12B\x2\x2\x1E53\x1E54"+
		"\a\x44C\x2\x2\x1E54\x1E5E\t\x1F\x2\x2\x1E55\x1E5C\a\x17\x2\x2\x1E56\x1E5D"+
		"\a\x10\x2\x2\x1E57\x1E5D\a\x2F6\x2\x2\x1E58\x1E59\a\x10\x2\x2\x1E59\x1E5D"+
		"\a\x2F6\x2\x2\x1E5A\x1E5B\a\x2F6\x2\x2\x1E5B\x1E5D\a\x10\x2\x2\x1E5C\x1E56"+
		"\x3\x2\x2\x2\x1E5C\x1E57\x3\x2\x2\x2\x1E5C\x1E58\x3\x2\x2\x2\x1E5C\x1E5A"+
		"\x3\x2\x2\x2\x1E5D\x1E5F\x3\x2\x2\x2\x1E5E\x1E55\x3\x2\x2\x2\x1E5E\x1E5F"+
		"\x3\x2\x2\x2\x1E5F\x1E61\x3\x2\x2\x2\x1E60\x1E50\x3\x2\x2\x2\x1E60\x1E61"+
		"\x3\x2\x2\x2\x1E61\x1E63\x3\x2\x2\x2\x1E62\x1E64\a\x462\x2\x2\x1E63\x1E62"+
		"\x3\x2\x2\x2\x1E63\x1E64\x3\x2\x2\x2\x1E64\x1E65\x3\x2\x2\x2\x1E65\x1E66"+
		"\a\x339\x2\x2\x1E66\x1E67\a\x44C\x2\x2\x1E67\x1E68\t\x1E\x2\x2\x1E68\x1E6A"+
		"\a\x45F\x2\x2\x1E69\x1DFC\x3\x2\x2\x2\x1E69\x1DFD\x3\x2\x2\x2\x1E69\x1E38"+
		"\x3\x2\x2\x2\x1E6A\x24B\x3\x2\x2\x2\x1E6B\x1E6C\x5\x24E\x128\x2\x1E6C"+
		"\x24D\x3\x2\x2\x2\x1E6D\x1E6E\x5\x250\x129\x2\x1E6E\x1E6F\x5\x256\x12C"+
		"\x2\x1E6F\x1E74\x3\x2\x2\x2\x1E70\x1E71\x5\x252\x12A\x2\x1E71\x1E72\x5"+
		"\x258\x12D\x2\x1E72\x1E74\x3\x2\x2\x2\x1E73\x1E6D\x3\x2\x2\x2\x1E73\x1E70"+
		"\x3\x2\x2\x2\x1E74\x24F\x3\x2\x2\x2\x1E75\x1E76\a\x2B5\x2\x2\x1E76\x251"+
		"\x3\x2\x2\x2\x1E77\x1E78\a\x42F\x2\x2\x1E78\x253\x3\x2\x2\x2\x1E79\x1E7A"+
		"\a\x44C\x2\x2\x1E7A\x255\x3\x2\x2\x2\x1E7B\x1E7C\x5\x254\x12B\x2\x1E7C"+
		"\x1E7D\x5\x25C\x12F\x2\x1E7D\x1E88\x3\x2\x2\x2\x1E7E\x1E88\a\x14F\x2\x2"+
		"\x1E7F\x1E88\a\x176\x2\x2\x1E80\x1E88\a\x287\x2\x2\x1E81\x1E88\a\x32E"+
		"\x2\x2\x1E82\x1E83\a\x34D\x2\x2\x1E83\x1E88\tQ\x2\x2\x1E84\x1E88\a\x3C4"+
		"\x2\x2\x1E85\x1E86\a\x3DC\x2\x2\x1E86\x1E88\a\x446\x2\x2\x1E87\x1E7B\x3"+
		"\x2\x2\x2\x1E87\x1E7E\x3\x2\x2\x2\x1E87\x1E7F\x3\x2\x2\x2\x1E87\x1E80"+
		"\x3\x2\x2\x2\x1E87\x1E81\x3\x2\x2\x2\x1E87\x1E82\x3\x2\x2\x2\x1E87\x1E84"+
		"\x3\x2\x2\x2\x1E87\x1E85\x3\x2\x2\x2\x1E88\x257\x3\x2\x2\x2\x1E89\x1E8A"+
		"\x5\x254\x12B\x2\x1E8A\x1E8B\x5\x25A\x12E\x2\x1E8B\x1E8E\x3\x2\x2\x2\x1E8C"+
		"\x1E8E\a\x287\x2\x2\x1E8D\x1E89\x3\x2\x2\x2\x1E8D\x1E8C\x3\x2\x2\x2\x1E8E"+
		"\x259\x3\x2\x2\x2\x1E8F\x1E90\x5\x25C\x12F\x2\x1E90\x25B\x3\x2\x2\x2\x1E91"+
		"\x1E92\x5\x260\x131\x2\x1E92\x1E93\x5\x264\x133\x2\x1E93\x1E94\x5\x25E"+
		"\x130\x2\x1E94\x1E95\x5\x262\x132\x2\x1E95\x25D\x3\x2\x2\x2\x1E96\x1E97"+
		"\a\x464\x2\x2\x1E97\x25F\x3\x2\x2\x2\x1E98\x1E99\a\x3D5\x2\x2\x1E99\x1E9A"+
		"\a\x464\x2\x2\x1E9A\x1E9B\a\x11B\x2\x2\x1E9B\x261\x3\x2\x2\x2\x1E9C\x1E9D"+
		"\a\x446\x2\x2\x1E9D\x263\x3\x2\x2\x2\x1E9E\x1E9F\x5\x47A\x23E\x2\x1E9F"+
		"\x1EA0\a\x459\x2\x2\x1EA0\x1EA1\x5\x264\x133\x2\x1EA1\x1EA9\x3\x2\x2\x2"+
		"\x1EA2\x1EA3\x5\x47A\x23E\x2\x1EA3\x1EA4\a\x459\x2\x2\x1EA4\x1EA7\x3\x2"+
		"\x2\x2\x1EA5\x1EA7\x5\x47A\x23E\x2\x1EA6\x1EA2\x3\x2\x2\x2\x1EA6\x1EA5"+
		"\x3\x2\x2\x2\x1EA7\x1EA9\x3\x2\x2\x2\x1EA8\x1E9E\x3\x2\x2\x2\x1EA8\x1EA6"+
		"\x3\x2\x2\x2\x1EA9\x265\x3\x2\x2\x2\x1EAA\x1EAB\a\xEA\x2\x2\x1EAB\x1EAC"+
		"\x5\x454\x22B\x2\x1EAC\x267\x3\x2\x2\x2\x1EAD\x1EAE\a\x12B\x2\x2\x1EAE"+
		"\x1EAF\x5\x454\x22B\x2\x1EAF\x269\x3\x2\x2\x2\x1EB0\x1EB1\tR\x2\x2\x1EB1"+
		"\x26B\x3\x2\x2\x2\x1EB2\x1EB3\tS\x2\x2\x1EB3\x26D\x3\x2\x2\x2\x1EB4\x1EB5"+
		"\tT\x2\x2\x1EB5\x26F\x3\x2\x2\x2\x1EB6\x1EB7\a\xFF\x2\x2\x1EB7\x1EB8\a"+
		"\x44C\x2\x2\x1EB8\x1EB9\tU\x2\x2\x1EB9\x271\x3\x2\x2\x2\x1EBA\x1EBB\a"+
		"\xEE\x2\x2\x1EBB\x1ED4\x5\x454\x22B\x2\x1EBC\x1EBD\a\x3F1\x2\x2\x1EBD"+
		"\x1ED4\x5\x454\x22B\x2\x1EBE\x1EBF\a\xFB\x2\x2\x1EBF\x1EC2\a\x44C\x2\x2"+
		"\x1EC0\x1EC3\x5\x47A\x23E\x2\x1EC1\x1EC3\a\x448\x2\x2\x1EC2\x1EC0\x3\x2"+
		"\x2\x2\x1EC2\x1EC1\x3\x2\x2\x2\x1EC3\x1ED4\x3\x2\x2\x2\x1EC4\x1EC5\a\xFA"+
		"\x2\x2\x1EC5\x1EC8\a\x44C\x2\x2\x1EC6\x1EC9\x5\x47A\x23E\x2\x1EC7\x1EC9"+
		"\a\x448\x2\x2\x1EC8\x1EC6\x3\x2\x2\x2\x1EC8\x1EC7\x3\x2\x2\x2\x1EC9\x1ED4"+
		"\x3\x2\x2\x2\x1ECA\x1ECB\a\x251\x2\x2\x1ECB\x1ECC\a\x44C\x2\x2\x1ECC\x1ED4"+
		"\t\x13\x2\x2\x1ECD\x1ECE\a\x3EA\x2\x2\x1ECE\x1ECF\a\x44C\x2\x2\x1ECF\x1ED4"+
		"\t\x13\x2\x2\x1ED0\x1ED1\a\x3F6\x2\x2\x1ED1\x1ED2\a\x44C\x2\x2\x1ED2\x1ED4"+
		"\a\x446\x2\x2\x1ED3\x1EBA\x3\x2\x2\x2\x1ED3\x1EBC\x3\x2\x2\x2\x1ED3\x1EBE"+
		"\x3\x2\x2\x2\x1ED3\x1EC4\x3\x2\x2\x2\x1ED3\x1ECA\x3\x2\x2\x2\x1ED3\x1ECD"+
		"\x3\x2\x2\x2\x1ED3\x1ED0\x3\x2\x2\x2\x1ED4\x273\x3\x2\x2\x2\x1ED5\x1EDE"+
		"\a\x19C\x2\x2\x1ED6\x1ED7\aS\x2\x2\x1ED7\x1ED8\a\x198\x2\x2\x1ED8\x1ED9"+
		"\a\x44C\x2\x2\x1ED9\x1EDC\x5\x47A\x23E\x2\x1EDA\x1EDC\a\x287\x2\x2\x1EDB"+
		"\x1ED6\x3\x2\x2\x2\x1EDB\x1EDA\x3\x2\x2\x2\x1EDC\x1EDF\x3\x2\x2\x2\x1EDD"+
		"\x1EDF\tV\x2\x2\x1EDE\x1EDB\x3\x2\x2\x2\x1EDE\x1EDD\x3\x2\x2\x2\x1EDF"+
		"\x275\x3\x2\x2\x2\x1EE0\x1EE1\a\x246\x2\x2\x1EE1\x1EE2\t\x13\x2\x2\x1EE2"+
		"\x277\x3\x2\x2\x2\x1EE3\x1EE4\a\x2AD\x2\x2\x1EE4\x1EE5\tW\x2\x2\x1EE5"+
		"\x279\x3\x2\x2\x2\x1EE6\x1EE7\a\x309\x2\x2\x1EE7\x1EF0\tX\x2\x2\x1EE8"+
		"\x1EE9\a\x3E1\x2\x2\x1EE9\x1EF0\x5\x454\x22B\x2\x1EEA\x1EEB\a\a\x2\x2"+
		"\x1EEB\x1EEC\a\x44C\x2\x2\x1EEC\x1EF0\x5\x454\x22B\x2\x1EED\x1EEE\a\x2AB"+
		"\x2\x2\x1EEE\x1EF0\tY\x2\x2\x1EEF\x1EE6\x3\x2\x2\x2\x1EEF\x1EE8\x3\x2"+
		"\x2\x2\x1EEF\x1EEA\x3\x2\x2\x2\x1EEF\x1EED\x3\x2\x2\x2\x1EF0\x27B\x3\x2"+
		"\x2\x2\x1EF1\x1EF8\a\x128\x2\x2\x1EF2\x1EF8\a\x112\x2\x2\x1EF3\x1EF8\a"+
		"\x256\x2\x2\x1EF4\x1EF8\a\x132\x2\x2\x1EF5\x1EF6\a\x1A9\x2\x2\x1EF6\x1EF8"+
		"\x5\x454\x22B\x2\x1EF7\x1EF1\x3\x2\x2\x2\x1EF7\x1EF2\x3\x2\x2\x2\x1EF7"+
		"\x1EF3\x3\x2\x2\x2\x1EF7\x1EF4\x3\x2\x2\x2\x1EF7\x1EF5\x3\x2\x2\x2\x1EF8"+
		"\x27D\x3\x2\x2\x2\x1EF9\x1EFA\a \x2\x2\x1EFA\x1EFF\x5\x454\x22B\x2\x1EFB"+
		"\x1EFC\a\x300\x2\x2\x1EFC\x1EFF\t\x13\x2\x2\x1EFD\x1EFF\t\x13\x2\x2\x1EFE"+
		"\x1EF9\x3\x2\x2\x2\x1EFE\x1EFB\x3\x2\x2\x2\x1EFE\x1EFD\x3\x2\x2\x2\x1EFF"+
		"\x27F\x3\x2\x2\x2\x1F00\x1F01\a+\x2\x2\x1F01\x1F16\x5\x454\x22B\x2\x1F02"+
		"\x1F03\a*\x2\x2\x1F03\x1F16\x5\x454\x22B\x2\x1F04\x1F05\a.\x2\x2\x1F05"+
		"\x1F16\x5\x454\x22B\x2\x1F06\x1F07\a/\x2\x2\x1F07\x1F16\x5\x454\x22B\x2"+
		"\x1F08\x1F09\a\x38\x2\x2\x1F09\x1F16\x5\x454\x22B\x2\x1F0A\x1F0B\a\xA8"+
		"\x2\x2\x1F0B\x1F0C\a\x44C\x2\x2\x1F0C\x1F16\a\x446\x2\x2\x1F0D\x1F0E\a"+
		"\xAF\x2\x2\x1F0E\x1F16\x5\x454\x22B\x2\x1F0F\x1F10\a\x27E\x2\x2\x1F10"+
		"\x1F16\x5\x454\x22B\x2\x1F11\x1F12\a\x2ED\x2\x2\x1F12\x1F16\x5\x454\x22B"+
		"\x2\x1F13\x1F14\a\x30A\x2\x2\x1F14\x1F16\x5\x454\x22B\x2\x1F15\x1F00\x3"+
		"\x2\x2\x2\x1F15\x1F02\x3\x2\x2\x2\x1F15\x1F04\x3\x2\x2\x2\x1F15\x1F06"+
		"\x3\x2\x2\x2\x1F15\x1F08\x3\x2\x2\x2\x1F15\x1F0A\x3\x2\x2\x2\x1F15\x1F0D"+
		"\x3\x2\x2\x2\x1F15\x1F0F\x3\x2\x2\x2\x1F15\x1F11\x3\x2\x2\x2\x1F15\x1F13"+
		"\x3\x2\x2\x2\x1F16\x281\x3\x2\x2\x2\x1F17\x1F18\a\x3D3\x2\x2\x1F18\x1F19"+
		"\a\x44C\x2\x2\x1F19\x1F1A\a\x446\x2\x2\x1F1A\x1F1B\tZ\x2\x2\x1F1B\x283"+
		"\x3\x2\x2\x2\x1F1C\x1F1D\a\x33A\x2\x2\x1F1D\x1F1E\a\x15\x2\x2\x1F1E\x1F23"+
		"\a\x446\x2\x2\x1F1F\x1F20\a\x33A\x2\x2\x1F20\x1F23\a\x1BB\x2\x2\x1F21"+
		"\x1F23\a\x276\x2\x2\x1F22\x1F1C\x3\x2\x2\x2\x1F22\x1F1F\x3\x2\x2\x2\x1F22"+
		"\x1F21\x3\x2\x2\x2\x1F23\x285\x3\x2\x2\x2\x1F24\x1F25\a\x11C\x2\x2\x1F25"+
		"\x1F28\a\x1C4\x2\x2\x1F26\x1F27\a\x1B4\x2\x2\x1F27\x1F29\a\x144\x2\x2"+
		"\x1F28\x1F26\x3\x2\x2\x2\x1F28\x1F29\x3\x2\x2\x2\x1F29\x1F3A\x3\x2\x2"+
		"\x2\x1F2A\x1F2F\x5\x288\x145\x2\x1F2B\x1F2C\a\x462\x2\x2\x1F2C\x1F2E\x5"+
		"\x288\x145\x2\x1F2D\x1F2B\x3\x2\x2\x2\x1F2E\x1F31\x3\x2\x2\x2\x1F2F\x1F2D"+
		"\x3\x2\x2\x2\x1F2F\x1F30\x3\x2\x2\x2\x1F30\x1F3B\x3\x2\x2\x2\x1F31\x1F2F"+
		"\x3\x2\x2\x2\x1F32\x1F37\x5\x28A\x146\x2\x1F33\x1F34\a\x462\x2\x2\x1F34"+
		"\x1F36\x5\x28A\x146\x2\x1F35\x1F33\x3\x2\x2\x2\x1F36\x1F39\x3\x2\x2\x2"+
		"\x1F37\x1F35\x3\x2\x2\x2\x1F37\x1F38\x3\x2\x2\x2\x1F38\x1F3B\x3\x2\x2"+
		"\x2\x1F39\x1F37\x3\x2\x2\x2\x1F3A\x1F2A\x3\x2\x2\x2\x1F3A\x1F32\x3\x2"+
		"\x2\x2\x1F3B\x1F3D\x3\x2\x2\x2\x1F3C\x1F3E\a\x463\x2\x2\x1F3D\x1F3C\x3"+
		"\x2\x2\x2\x1F3D\x1F3E\x3\x2\x2\x2\x1F3E\x287\x3\x2\x2\x2\x1F3F\x1F40\x5"+
		"\x47A\x23E\x2\x1F40\x1F41\a\x28D\x2\x2\x1F41\x1F42\x5\x43A\x21E\x2\x1F42"+
		"\x289\x3\x2\x2\x2\x1F43\x1F44\x5\x47A\x23E\x2\x1F44\x1F45\a\x459\x2\x2"+
		"\x1F45\x1F47\x3\x2\x2\x2\x1F46\x1F43\x3\x2\x2\x2\x1F46\x1F47\x3\x2\x2"+
		"\x2\x1F47\x1F48\x3\x2\x2\x2\x1F48\x1F49\x5\x47A\x23E\x2\x1F49\x1F4A\a"+
		"\x459\x2\x2\x1F4A\x1F4B\x5\x47A\x23E\x2\x1F4B\x28B\x3\x2\x2\x2\x1F4C\x1F4D"+
		"\a\x11C\x2\x2\x1F4D\x1F50\t\x42\x2\x2\x1F4E\x1F4F\a\x1B4\x2\x2\x1F4F\x1F51"+
		"\a\x144\x2\x2\x1F50\x1F4E\x3\x2\x2\x2\x1F50\x1F51\x3\x2\x2\x2\x1F51\x1F52"+
		"\x3\x2\x2\x2\x1F52\x1F57\x5\x440\x221\x2\x1F53\x1F54\a\x462\x2\x2\x1F54"+
		"\x1F56\x5\x440\x221\x2\x1F55\x1F53\x3\x2\x2\x2\x1F56\x1F59\x3\x2\x2\x2"+
		"\x1F57\x1F55\x3\x2\x2\x2\x1F57\x1F58\x3\x2\x2\x2\x1F58\x1F5B\x3\x2\x2"+
		"\x2\x1F59\x1F57\x3\x2\x2\x2\x1F5A\x1F5C\a\x463\x2\x2\x1F5B\x1F5A\x3\x2"+
		"\x2\x2\x1F5B\x1F5C\x3\x2\x2\x2\x1F5C\x28D\x3\x2\x2\x2\x1F5D\x1F60\x5\x290"+
		"\x149\x2\x1F5E\x1F60\x5\x292\x14A\x2\x1F5F\x1F5D\x3\x2\x2\x2\x1F5F\x1F5E"+
		"\x3\x2\x2\x2\x1F60\x28F\x3\x2\x2\x2\x1F61\x1F62\a\x11C\x2\x2\x1F62\x1F65"+
		"\a\x3EC\x2\x2\x1F63\x1F64\a\x1B4\x2\x2\x1F64\x1F66\a\x144\x2\x2\x1F65"+
		"\x1F63\x3\x2\x2\x2\x1F65\x1F66\x3\x2\x2\x2\x1F66\x1F67\x3\x2\x2\x2\x1F67"+
		"\x1F6C\x5\x43E\x220\x2\x1F68\x1F69\a\x462\x2\x2\x1F69\x1F6B\x5\x43E\x220"+
		"\x2\x1F6A\x1F68\x3\x2\x2\x2\x1F6B\x1F6E\x3\x2\x2\x2\x1F6C\x1F6A\x3\x2"+
		"\x2\x2\x1F6C\x1F6D\x3\x2\x2\x2\x1F6D\x1F70\x3\x2\x2\x2\x1F6E\x1F6C\x3"+
		"\x2\x2\x2\x1F6F\x1F71\a\x463\x2\x2\x1F70\x1F6F\x3\x2\x2\x2\x1F70\x1F71"+
		"\x3\x2\x2\x2\x1F71\x291\x3\x2\x2\x2\x1F72\x1F73\a\x11C\x2\x2\x1F73\x1F76"+
		"\a\x3EC\x2\x2\x1F74\x1F75\a\x1B4\x2\x2\x1F75\x1F77\a\x144\x2\x2\x1F76"+
		"\x1F74\x3\x2\x2\x2\x1F76\x1F77\x3\x2\x2\x2\x1F77\x1F78\x3\x2\x2\x2\x1F78"+
		"\x1F7D\x5\x43E\x220\x2\x1F79\x1F7A\a\x462\x2\x2\x1F7A\x1F7C\x5\x43E\x220"+
		"\x2\x1F7B\x1F79\x3\x2\x2\x2\x1F7C\x1F7F\x3\x2\x2\x2\x1F7D\x1F7B\x3\x2"+
		"\x2\x2\x1F7D\x1F7E\x3\x2\x2\x2\x1F7E\x1F80\x3\x2\x2\x2\x1F7F\x1F7D\x3"+
		"\x2\x2\x2\x1F80\x1F84\a\x28D\x2\x2\x1F81\x1F85\a\xDD\x2\x2\x1F82\x1F83"+
		"\a\x18\x2\x2\x1F83\x1F85\a\x371\x2\x2\x1F84\x1F81\x3\x2\x2\x2\x1F84\x1F82"+
		"\x3\x2\x2\x2\x1F85\x1F87\x3\x2\x2\x2\x1F86\x1F88\a\x463\x2\x2\x1F87\x1F86"+
		"\x3\x2\x2\x2\x1F87\x1F88\x3\x2\x2\x2\x1F88\x293\x3\x2\x2\x2\x1F89\x1F8A"+
		"\a\x11C\x2\x2\x1F8A\x1F8D\a\x184\x2\x2\x1F8B\x1F8C\a\x1B4\x2\x2\x1F8C"+
		"\x1F8E\a\x144\x2\x2\x1F8D\x1F8B\x3\x2\x2\x2\x1F8D\x1F8E\x3\x2\x2\x2\x1F8E"+
		"\x1F8F\x3\x2\x2\x2\x1F8F\x1F94\x5\x440\x221\x2\x1F90\x1F91\a\x462\x2\x2"+
		"\x1F91\x1F93\x5\x440\x221\x2\x1F92\x1F90\x3\x2\x2\x2\x1F93\x1F96\x3\x2"+
		"\x2\x2\x1F94\x1F92\x3\x2\x2\x2\x1F94\x1F95\x3\x2\x2\x2\x1F95\x1F98\x3"+
		"\x2\x2\x2\x1F96\x1F94\x3\x2\x2\x2\x1F97\x1F99\a\x463\x2\x2\x1F98\x1F97"+
		"\x3\x2\x2\x2\x1F98\x1F99\x3\x2\x2\x2\x1F99\x295\x3\x2\x2\x2\x1F9A\x1F9B"+
		"\a\x11C\x2\x2\x1F9B\x1FA5\a\x3A8\x2\x2\x1F9C\x1F9E\a\x462\x2\x2\x1F9D"+
		"\x1F9C\x3\x2\x2\x2\x1F9D\x1F9E\x3\x2\x2\x2\x1F9E\x1FA2\x3\x2\x2\x2\x1F9F"+
		"\x1FA0\x5\x43C\x21F\x2\x1FA0\x1FA1\a\x459\x2\x2\x1FA1\x1FA3\x3\x2\x2\x2"+
		"\x1FA2\x1F9F\x3\x2\x2\x2\x1FA2\x1FA3\x3\x2\x2\x2\x1FA3\x1FA4\x3\x2\x2"+
		"\x2\x1FA4\x1FA6\x5\x47A\x23E\x2\x1FA5\x1F9D\x3\x2\x2\x2\x1FA6\x1FA7\x3"+
		"\x2\x2\x2\x1FA7\x1FA5\x3\x2\x2\x2\x1FA7\x1FA8\x3\x2\x2\x2\x1FA8\x1FA9"+
		"\x3\x2\x2\x2\x1FA9\x1FAA\a\x463\x2\x2\x1FAA\x297\x3\x2\x2\x2\x1FAB\x1FAC"+
		"\a\x11C\x2\x2\x1FAC\x1FAF\a\x3CB\x2\x2\x1FAD\x1FAE\a\x1B4\x2\x2\x1FAE"+
		"\x1FB0\a\x144\x2\x2\x1FAF\x1FAD\x3\x2\x2\x2\x1FAF\x1FB0\x3\x2\x2\x2\x1FB0"+
		"\x1FB1\x3\x2\x2\x2\x1FB1\x1FB3\x5\x43C\x21F\x2\x1FB2\x1FB4\a\x463\x2\x2"+
		"\x1FB3\x1FB2\x3\x2\x2\x2\x1FB3\x1FB4\x3\x2\x2\x2\x1FB4\x299\x3\x2\x2\x2"+
		"\x1FB5\x1FB6\a\x11C\x2\x2\x1FB6\x1FB9\a\x41F\x2\x2\x1FB7\x1FB8\a\x1B4"+
		"\x2\x2\x1FB8\x1FBA\a\x144\x2\x2\x1FB9\x1FB7\x3\x2\x2\x2\x1FB9\x1FBA\x3"+
		"\x2\x2\x2\x1FBA\x1FBB\x3\x2\x2\x2\x1FBB\x1FC0\x5\x43E\x220\x2\x1FBC\x1FBD"+
		"\a\x462\x2\x2\x1FBD\x1FBF\x5\x43E\x220\x2\x1FBE\x1FBC\x3\x2\x2\x2\x1FBF"+
		"\x1FC2\x3\x2\x2\x2\x1FC0\x1FBE\x3\x2\x2\x2\x1FC0\x1FC1\x3\x2\x2\x2\x1FC1"+
		"\x1FC4\x3\x2\x2\x2\x1FC2\x1FC0\x3\x2\x2\x2\x1FC3\x1FC5\a\x463\x2\x2\x1FC4"+
		"\x1FC3\x3\x2\x2\x2\x1FC4\x1FC5\x3\x2\x2\x2\x1FC5\x29B\x3\x2\x2\x2\x1FC6"+
		"\x1FC7\a\xC9\x2\x2\x1FC7\x1FC8\a\x3F7\x2\x2\x1FC8\x1FD0\x5\x43E\x220\x2"+
		"\x1FC9\x1FCA\a\x17E\x2\x2\x1FCA\x1FCE\x5\x470\x239\x2\x1FCB\x1FCF\x5\x472"+
		"\x23A\x2\x1FCC\x1FCD\a\x26A\x2\x2\x1FCD\x1FCF\a\x27A\x2\x2\x1FCE\x1FCB"+
		"\x3\x2\x2\x2\x1FCE\x1FCC\x3\x2\x2\x2\x1FCF\x1FD1\x3\x2\x2\x2\x1FD0\x1FC9"+
		"\x3\x2\x2\x2\x1FD0\x1FD1\x3\x2\x2\x2\x1FD1\x1FD8\x3\x2\x2\x2\x1FD2\x1FD3"+
		"\a:\x2\x2\x1FD3\x1FD4\a\x3CB\x2\x2\x1FD4\x1FD5\a\x45E\x2\x2\x1FD5\x1FD6"+
		"\x5\x336\x19C\x2\x1FD6\x1FD7\a\x45F\x2\x2\x1FD7\x1FD9\x3\x2\x2\x2\x1FD8"+
		"\x1FD2\x3\x2\x2\x2\x1FD8\x1FD9\x3\x2\x2\x2\x1FD9\x29D\x3\x2\x2\x2\x1FDA"+
		"\x1FDB\a\x11C\x2\x2\x1FDB\x1FDE\a\x3F7\x2\x2\x1FDC\x1FDD\a\x1B4\x2\x2"+
		"\x1FDD\x1FDF\a\x144\x2\x2\x1FDE\x1FDC\x3\x2\x2\x2\x1FDE\x1FDF\x3\x2\x2"+
		"\x2\x1FDF\x1FE0\x3\x2\x2\x2\x1FE0\x1FE1\x5\x43E\x220\x2\x1FE1\x29F\x3"+
		"\x2\x2\x2\x1FE2\x1FE5\x5\x2A2\x152\x2\x1FE3\x1FE5\x5\x2A4\x153\x2\x1FE4"+
		"\x1FE2\x3\x2\x2\x2\x1FE4\x1FE3\x3\x2\x2\x2\x1FE5\x2A1\x3\x2\x2\x2\x1FE6"+
		"\x1FE7\a\x294\x2\x2\x1FE7\x1FE8\a\x45E\x2\x2\x1FE8\x1FE9\x5\x47A\x23E"+
		"\x2\x1FE9\x1FEA\a\x462\x2\x2\x1FEA\x1FEB\a\x448\x2\x2\x1FEB\x1FEC\a\x45F"+
		"\x2\x2\x1FEC\x2A3\x3\x2\x2\x2\x1FED\x1FEE\a\x292\x2\x2\x1FEE\x1FEF\a\x45E"+
		"\x2\x2\x1FEF\x1FF0\a\x448\x2\x2\x1FF0\x1FF1\a\x462\x2\x2\x1FF1\x1FF2\a"+
		"\x448\x2\x2\x1FF2\x1FF3\a\x45F\x2\x2\x1FF3\x1FF5\a\x459\x2\x2\x1FF4\x1FF6"+
		"\x5\x47A\x23E\x2\x1FF5\x1FF4\x3\x2\x2\x2\x1FF5\x1FF6\x3\x2\x2\x2\x1FF6"+
		"\x1FF7\x3\x2\x2\x2\x1FF7\x1FF9\a\x459\x2\x2\x1FF8\x1FFA\x5\x47A\x23E\x2"+
		"\x1FF9\x1FF8\x3\x2\x2\x2\x1FF9\x1FFA\x3\x2\x2\x2\x1FFA\x1FFB\x3\x2\x2"+
		"\x2\x1FFB\x1FFC\a\x459\x2\x2\x1FFC\x1FFD\x5\x47A\x23E\x2\x1FFD\x2A5\x3"+
		"\x2\x2\x2\x1FFE\x1FFF\a\xF4\x2\x2\x1FFF\x2001\a\x445\x2\x2\x2000\x2002"+
		"\a:\x2\x2\x2001\x2000\x3\x2\x2\x2\x2001\x2002\x3\x2\x2\x2\x2002\x2005"+
		"\x3\x2\x2\x2\x2003\x2006\x5\x32E\x198\x2\x2004\x2006\x5\x43C\x21F\x2\x2005"+
		"\x2003\x3\x2\x2\x2\x2005\x2004\x3\x2\x2\x2\x2006\x2008\x3\x2\x2\x2\x2007"+
		"\x2009\a\x463\x2\x2\x2008\x2007\x3\x2\x2\x2\x2008\x2009\x3\x2\x2\x2\x2009"+
		"\x202F\x3\x2\x2\x2\x200A\x200B\a\xF4\x2\x2\x200B\x2010\x5\x32C\x197\x2"+
		"\x200C\x200D\a\x462\x2\x2\x200D\x200F\x5\x32C\x197\x2\x200E\x200C\x3\x2"+
		"\x2\x2\x200F\x2012\x3\x2\x2\x2\x2010\x200E\x3\x2\x2\x2\x2010\x2011\x3"+
		"\x2\x2\x2\x2011\x2014\x3\x2\x2\x2\x2012\x2010\x3\x2\x2\x2\x2013\x2015"+
		"\a\x463\x2\x2\x2014\x2013\x3\x2\x2\x2\x2014\x2015\x3\x2\x2\x2\x2015\x202F"+
		"\x3\x2\x2\x2\x2016\x2017\a\xF4\x2\x2\x2017\x2019\a\x445\x2\x2\x2018\x201A"+
		"\a:\x2\x2\x2019\x2018\x3\x2\x2\x2\x2019\x201A\x3\x2\x2\x2\x201A\x201B"+
		"\x3\x2\x2\x2\x201B\x201D\x5\x332\x19A\x2\x201C\x201E\a\x463\x2\x2\x201D"+
		"\x201C\x3\x2\x2\x2\x201D\x201E\x3\x2\x2\x2\x201E\x202F\x3\x2\x2\x2\x201F"+
		"\x2020\a\x42B\x2\x2\x2020\x2021\a\x438\x2\x2\x2021\x2022\a\x45E\x2\x2"+
		"\x2022\x2027\x5\x2A8\x155\x2\x2023\x2024\a\x462\x2\x2\x2024\x2026\x5\x2A8"+
		"\x155\x2\x2025\x2023\x3\x2\x2\x2\x2026\x2029\x3\x2\x2\x2\x2027\x2025\x3"+
		"\x2\x2\x2\x2027\x2028\x3\x2\x2\x2\x2028\x202A\x3\x2\x2\x2\x2029\x2027"+
		"\x3\x2\x2\x2\x202A\x202C\a\x45F\x2\x2\x202B\x202D\a\x463\x2\x2\x202C\x202B"+
		"\x3\x2\x2\x2\x202C\x202D\x3\x2\x2\x2\x202D\x202F\x3\x2\x2\x2\x202E\x1FFE"+
		"\x3\x2\x2\x2\x202E\x200A\x3\x2\x2\x2\x202E\x2016\x3\x2\x2\x2\x202E\x201F"+
		"\x3\x2\x2\x2\x202F\x2A7\x3\x2\x2\x2\x2030\x2031\a\x448\x2\x2\x2031\x2032"+
		"\a:\x2\x2\x2032\x2036\x5\x47A\x23E\x2\x2033\x2034\a\xF7\x2\x2\x2034\x2036"+
		"\a\x448\x2\x2\x2035\x2030\x3\x2\x2\x2\x2035\x2033\x3\x2\x2\x2\x2036\x2A9"+
		"\x3\x2\x2\x2\x2037\x2039\a\x97\x2\x2\x2038\x203A\a\x191\x2\x2\x2039\x2038"+
		"\x3\x2\x2\x2\x2039\x203A\x3\x2\x2\x2\x203A\x203B\x3\x2\x2\x2\x203B\x203D"+
		"\x5\x452\x22A\x2\x203C\x203E\a\x463\x2\x2\x203D\x203C\x3\x2\x2\x2\x203D"+
		"\x203E\x3\x2\x2\x2\x203E\x2055\x3\x2\x2\x2\x203F\x2041\a\xF3\x2\x2\x2040"+
		"\x2042\a\x191\x2\x2\x2041\x2040\x3\x2\x2\x2\x2041\x2042\x3\x2\x2\x2\x2042"+
		"\x2044\x3\x2\x2\x2\x2043\x2045\a\xD7\x2\x2\x2044\x2043\x3\x2\x2\x2\x2044"+
		"\x2045\x3\x2\x2\x2\x2045\x2046\x3\x2\x2\x2\x2046\x2048\x5\x452\x22A\x2"+
		"\x2047\x2049\a\x463\x2\x2\x2048\x2047\x3\x2\x2\x2\x2048\x2049\x3\x2\x2"+
		"\x2\x2049\x2055\x3\x2\x2\x2\x204A\x2055\x5\x34C\x1A7\x2\x204B\x2055\x5"+
		"\x352\x1AA\x2\x204C\x204E\a\x291\x2\x2\x204D\x204F\a\x191\x2\x2\x204E"+
		"\x204D\x3\x2\x2\x2\x204E\x204F\x3\x2\x2\x2\x204F\x2050\x3\x2\x2\x2\x2050"+
		"\x2052\x5\x452\x22A\x2\x2051\x2053\a\x463\x2\x2\x2052\x2051\x3\x2\x2\x2"+
		"\x2052\x2053\x3\x2\x2\x2\x2053\x2055\x3\x2\x2\x2\x2054\x2037\x3\x2\x2"+
		"\x2\x2054\x203F\x3\x2\x2\x2\x2054\x204A\x3\x2\x2\x2\x2054\x204B\x3\x2"+
		"\x2\x2\x2054\x204C\x3\x2\x2\x2\x2055\x2AB\x3\x2\x2\x2\x2056\x2057\aW\x2"+
		"\x2\x2057\x2058\a\xDD\x2\x2\x2058\x2065\x5\x47A\x23E\x2\x2059\x2062\a"+
		"\x304\x2\x2\x205A\x205C\a\x462\x2\x2\x205B\x205A\x3\x2\x2\x2\x205B\x205C"+
		"\x3\x2\x2\x2\x205C\x205D\x3\x2\x2\x2\x205D\x205E\t[\x2\x2\x205E\x205F"+
		"\a\x44C\x2\x2\x205F\x2061\a\x448\x2\x2\x2060\x205B\x3\x2\x2\x2\x2061\x2064"+
		"\x3\x2\x2\x2\x2062\x2060\x3\x2\x2\x2\x2062\x2063\x3\x2\x2\x2\x2063\x2066"+
		"\x3\x2\x2\x2\x2064\x2062\x3\x2\x2\x2\x2065\x2059\x3\x2\x2\x2\x2065\x2066"+
		"\x3\x2\x2\x2\x2066\x206F\x3\x2\x2\x2\x2067\x2069\a\x462\x2\x2\x2068\x2067"+
		"\x3\x2\x2\x2\x2068\x2069\x3\x2\x2\x2\x2069\x206A\x3\x2\x2\x2\x206A\x206B"+
		"\t[\x2\x2\x206B\x206C\a\x44C\x2\x2\x206C\x206E\a\x448\x2\x2\x206D\x2068"+
		"\x3\x2\x2\x2\x206E\x2071\x3\x2\x2\x2\x206F\x206D\x3\x2\x2\x2\x206F\x2070"+
		"\x3\x2\x2\x2\x2070\x2089\x3\x2\x2\x2\x2071\x206F\x3\x2\x2\x2\x2072\x2077"+
		"\a\x3DF\x2\x2\x2073\x2075\a\x462\x2\x2\x2074\x2073\x3\x2\x2\x2\x2074\x2075"+
		"\x3\x2\x2\x2\x2075\x2076\x3\x2\x2\x2\x2076\x2078\x5\x47A\x23E\x2\x2077"+
		"\x2074\x3\x2\x2\x2\x2078\x2079\x3\x2\x2\x2\x2079\x2077\x3\x2\x2\x2\x2079"+
		"\x207A\x3\x2\x2\x2\x207A\x208A\x3\x2\x2\x2\x207B\x2085\a\x3DF\x2\x2\x207C"+
		"\x207E\a\x462\x2\x2\x207D\x207C\x3\x2\x2\x2\x207D\x207E\x3\x2\x2\x2\x207E"+
		"\x207F\x3\x2\x2\x2\x207F\x2080\t\\\x2\x2\x2080\x2083\a\x44C\x2\x2\x2081"+
		"\x2084\a\x448\x2\x2\x2082\x2084\x5\x47A\x23E\x2\x2083\x2081\x3\x2\x2\x2"+
		"\x2083\x2082\x3\x2\x2\x2\x2084\x2086\x3\x2\x2\x2\x2085\x207D\x3\x2\x2"+
		"\x2\x2086\x2087\x3\x2\x2\x2\x2087\x2085\x3\x2\x2\x2\x2087\x2088\x3\x2"+
		"\x2\x2\x2088\x208A\x3\x2\x2\x2\x2089\x2072\x3\x2\x2\x2\x2089\x207B\x3"+
		"\x2\x2\x2\x208A\x20AC\x3\x2\x2\x2\x208B\x208C\a\x244\x2\x2\x208C\x2091"+
		"\a\x3DF\x2\x2\x208D\x208F\a\x462\x2\x2\x208E\x208D\x3\x2\x2\x2\x208E\x208F"+
		"\x3\x2\x2\x2\x208F\x2090\x3\x2\x2\x2\x2090\x2092\x5\x47A\x23E\x2\x2091"+
		"\x208E\x3\x2\x2\x2\x2092\x2093\x3\x2\x2\x2\x2093\x2091\x3\x2\x2\x2\x2093"+
		"\x2094\x3\x2\x2\x2\x2094\x2096\x3\x2\x2\x2\x2095\x208B\x3\x2\x2\x2\x2096"+
		"\x2097\x3\x2\x2\x2\x2097\x2095\x3\x2\x2\x2\x2097\x2098\x3\x2\x2\x2\x2098"+
		"\x20AD\x3\x2\x2\x2\x2099\x209A\a\x244\x2\x2\x209A\x20A4\a\x3DF\x2\x2\x209B"+
		"\x209D\a\x462\x2\x2\x209C\x209B\x3\x2\x2\x2\x209C\x209D\x3\x2\x2\x2\x209D"+
		"\x209E\x3\x2\x2\x2\x209E\x209F\t\\\x2\x2\x209F\x20A2\a\x44C\x2\x2\x20A0"+
		"\x20A3\a\x448\x2\x2\x20A1\x20A3\x5\x47A\x23E\x2\x20A2\x20A0\x3\x2\x2\x2"+
		"\x20A2\x20A1\x3\x2\x2\x2\x20A3\x20A5\x3\x2\x2\x2\x20A4\x209C\x3\x2\x2"+
		"\x2\x20A5\x20A6\x3\x2\x2\x2\x20A6\x20A4\x3\x2\x2\x2\x20A6\x20A7\x3\x2"+
		"\x2\x2\x20A7\x20A9\x3\x2\x2\x2\x20A8\x2099\x3\x2\x2\x2\x20A9\x20AA\x3"+
		"\x2\x2\x2\x20AA\x20A8\x3\x2\x2\x2\x20AA\x20AB\x3\x2\x2\x2\x20AB\x20AD"+
		"\x3\x2\x2\x2\x20AC\x2095\x3\x2\x2\x2\x20AC\x20A8\x3\x2\x2\x2\x20AC\x20AD"+
		"\x3\x2\x2\x2\x20AD\x214E\x3\x2\x2\x2\x20AE\x214B\a\x42B\x2\x2\x20AF\x20B1"+
		"\a\x462\x2\x2\x20B0\x20AF\x3\x2\x2\x2\x20B0\x20B1\x3\x2\x2\x2\x20B1\x20B2"+
		"\x3\x2\x2\x2\x20B2\x214A\a\x10E\x2\x2\x20B3\x20B5\a\x462\x2\x2\x20B4\x20B3"+
		"\x3\x2\x2\x2\x20B4\x20B5\x3\x2\x2\x2\x20B5\x20B6\x3\x2\x2\x2\x20B6\x214A"+
		"\a\xC4\x2\x2\x20B7\x20B9\a\x462\x2\x2\x20B8\x20B7\x3\x2\x2\x2\x20B8\x20B9"+
		"\x3\x2\x2\x2\x20B9\x20BA\x3\x2\x2\x2\x20BA\x214A\t]\x2\x2\x20BB\x20BD"+
		"\a\x462\x2\x2\x20BC\x20BB\x3\x2\x2\x2\x20BC\x20BD\x3\x2\x2\x2\x20BD\x20BE"+
		"\x3\x2\x2\x2\x20BE\x20BF\a\x107\x2\x2\x20BF\x20C2\a\x44C\x2\x2\x20C0\x20C3"+
		"\a\x448\x2\x2\x20C1\x20C3\x5\x47A\x23E\x2\x20C2\x20C0\x3\x2\x2\x2\x20C2"+
		"\x20C1\x3\x2\x2\x2\x20C3\x214A\x3\x2\x2\x2\x20C4\x20C6\a\x462\x2\x2\x20C5"+
		"\x20C4\x3\x2\x2\x2\x20C5\x20C6\x3\x2\x2\x2\x20C6\x20C7\x3\x2\x2\x2\x20C7"+
		"\x20C8\a\x24D\x2\x2\x20C8\x20C9\a\x44C\x2\x2\x20C9\x214A\x5\x47A\x23E"+
		"\x2\x20CA\x20CC\a\x462\x2\x2\x20CB\x20CA\x3\x2\x2\x2\x20CB\x20CC\x3\x2"+
		"\x2\x2\x20CC\x20CD\x3\x2\x2\x2\x20CD\x214A\a\xCC\x2\x2\x20CE\x20D0\a\x462"+
		"\x2\x2\x20CF\x20CE\x3\x2\x2\x2\x20CF\x20D0\x3\x2\x2\x2\x20D0\x20D1\x3"+
		"\x2\x2\x2\x20D1\x214A\a\x168\x2\x2\x20D2\x20D4\a\x462\x2\x2\x20D3\x20D2"+
		"\x3\x2\x2\x2\x20D3\x20D4\x3\x2\x2\x2\x20D4\x20E1\x3\x2\x2\x2\x20D5\x20D6"+
		"\a\x148\x2\x2\x20D6\x20D9\a\x44C\x2\x2\x20D7\x20DA\a\x448\x2\x2\x20D8"+
		"\x20DA\x5\x47A\x23E\x2\x20D9\x20D7\x3\x2\x2\x2\x20D9\x20D8\x3\x2\x2\x2"+
		"\x20DA\x20E2\x3\x2\x2\x2\x20DB\x20DC\a\x32F\x2\x2\x20DC\x20DF\a\x44C\x2"+
		"\x2\x20DD\x20E0\a\x446\x2\x2\x20DE\x20E0\x5\x47A\x23E\x2\x20DF\x20DD\x3"+
		"\x2\x2\x2\x20DF\x20DE\x3\x2\x2\x2\x20E0\x20E2\x3\x2\x2\x2\x20E1\x20D5"+
		"\x3\x2\x2\x2\x20E1\x20DB\x3\x2\x2\x2\x20E2\x214A\x3\x2\x2\x2\x20E3\x20E5"+
		"\a\x462\x2\x2\x20E4\x20E3\x3\x2\x2\x2\x20E4\x20E5\x3\x2\x2\x2\x20E5\x20E6"+
		"\x3\x2\x2\x2\x20E6\x214A\t^\x2\x2\x20E7\x20E9\a\x462\x2\x2\x20E8\x20E7"+
		"\x3\x2\x2\x2\x20E8\x20E9\x3\x2\x2\x2\x20E9\x20EA\x3\x2\x2\x2\x20EA\x214A"+
		"\t_\x2\x2\x20EB\x20ED\a\x462\x2\x2\x20EC\x20EB\x3\x2\x2\x2\x20EC\x20ED"+
		"\x3\x2\x2\x2\x20ED\x20EE\x3\x2\x2\x2\x20EE\x214A\t`\x2\x2\x20EF\x20F1"+
		"\a\x462\x2\x2\x20F0\x20EF\x3\x2\x2\x2\x20F0\x20F1\x3\x2\x2\x2\x20F1\x20F2"+
		"\x3\x2\x2\x2\x20F2\x20F3\a\x233\x2\x2\x20F3\x20F6\a\x44C\x2\x2\x20F4\x20F7"+
		"\a\x448\x2\x2\x20F5\x20F7\x5\x47A\x23E\x2\x20F6\x20F4\x3\x2\x2\x2\x20F6"+
		"\x20F5\x3\x2\x2\x2\x20F7\x214A\x3\x2\x2\x2\x20F8\x20FA\a\x462\x2\x2\x20F9"+
		"\x20F8\x3\x2\x2\x2\x20F9\x20FA\x3\x2\x2\x2\x20FA\x20FB\x3\x2\x2\x2\x20FB"+
		"\x20FC\a\x234\x2\x2\x20FC\x20FD\a\x44C\x2\x2\x20FD\x214A\a\x448\x2\x2"+
		"\x20FE\x2100\a\x462\x2\x2\x20FF\x20FE\x3\x2\x2\x2\x20FF\x2100\x3\x2\x2"+
		"\x2\x2100\x2101\x3\x2\x2\x2\x2101\x2102\ah\x2\x2\x2102\x2105\a\x44C\x2"+
		"\x2\x2103\x2106\a\x446\x2\x2\x2104\x2106\x5\x47A\x23E\x2\x2105\x2103\x3"+
		"\x2\x2\x2\x2105\x2104\x3\x2\x2\x2\x2106\x214A\x3\x2\x2\x2\x2107\x2109"+
		"\a\x462\x2\x2\x2108\x2107\x3\x2\x2\x2\x2108\x2109\x3\x2\x2\x2\x2109\x210A"+
		"\x3\x2\x2\x2\x210A\x210B\an\x2\x2\x210B\x210E\a\x44C\x2\x2\x210C\x210F"+
		"\a\x446\x2\x2\x210D\x210F\x5\x47A\x23E\x2\x210E\x210C\x3\x2\x2\x2\x210E"+
		"\x210D\x3\x2\x2\x2\x210F\x214A\x3\x2\x2\x2\x2110\x2112\a\x462\x2\x2\x2111"+
		"\x2110\x3\x2\x2\x2\x2111\x2112\x3\x2\x2\x2\x2112\x2113\x3\x2\x2\x2\x2113"+
		"\x2114\a\x222\x2\x2\x2114\x2117\a\x44C\x2\x2\x2115\x2118\a\x446\x2\x2"+
		"\x2116\x2118\x5\x47A\x23E\x2\x2117\x2115\x3\x2\x2\x2\x2117\x2116\x3\x2"+
		"\x2\x2\x2118\x214A\x3\x2\x2\x2\x2119\x211B\a\x462\x2\x2\x211A\x2119\x3"+
		"\x2\x2\x2\x211A\x211B\x3\x2\x2\x2\x211B\x211C\x3\x2\x2\x2\x211C\x214A"+
		"\t\x61\x2\x2\x211D\x211F\a\x462\x2\x2\x211E\x211D\x3\x2\x2\x2\x211E\x211F"+
		"\x3\x2\x2\x2\x211F\x2120\x3\x2\x2\x2\x2120\x214A\t\x62\x2\x2\x2121\x2123"+
		"\a\x462\x2\x2\x2122\x2121\x3\x2\x2\x2\x2122\x2123\x3\x2\x2\x2\x2123\x2124"+
		"\x3\x2\x2\x2\x2124\x214A\a\x329\x2\x2\x2125\x2127\a\x462\x2\x2\x2126\x2125"+
		"\x3\x2\x2\x2\x2126\x2127\x3\x2\x2\x2\x2127\x2128\x3\x2\x2\x2\x2128\x212B"+
		"\a\x3AB\x2\x2\x2129\x212A\a\x44C\x2\x2\x212A\x212C\a\x446\x2\x2\x212B"+
		"\x2129\x3\x2\x2\x2\x212B\x212C\x3\x2\x2\x2\x212C\x214A\x3\x2\x2\x2\x212D"+
		"\x212F\a\x462\x2\x2\x212E\x212D\x3\x2\x2\x2\x212E\x212F\x3\x2\x2\x2\x212F"+
		"\x2130\x3\x2\x2\x2\x2130\x214A\t\x63\x2\x2\x2131\x2133\a\x462\x2\x2\x2132"+
		"\x2131\x3\x2\x2\x2\x2132\x2133\x3\x2\x2\x2\x2133\x2134\x3\x2\x2\x2\x2134"+
		"\x214A\t\x64\x2\x2\x2135\x2137\a\x462\x2\x2\x2136\x2135\x3\x2\x2\x2\x2136"+
		"\x2137\x3\x2\x2\x2\x2137\x2138\x3\x2\x2\x2\x2138\x2139\a\x12B\x2\x2\x2139"+
		"\x213A\a\x45E\x2\x2\x213A\x213B\a\x17\x2\x2\x213B\x213C\a\x44C\x2\x2\x213C"+
		"\x213D\t\x65\x2\x2\x213D\x213E\a\x462\x2\x2\x213E\x213F\a\x371\x2\x2\x213F"+
		"\x2140\a}\x2\x2\x2140\x2147\a\x44C\x2\x2\x2141\x2148\x5\x47A\x23E\x2\x2142"+
		"\x2143\a\x371\x2\x2\x2143\x2144\a?\x2\x2\x2144\x2145\a\x1EE\x2\x2\x2145"+
		"\x2146\a\x44C\x2\x2\x2146\x2148\x5\x47A\x23E\x2\x2147\x2141\x3\x2\x2\x2"+
		"\x2147\x2142\x3\x2\x2\x2\x2148\x214A\x3\x2\x2\x2\x2149\x20B0\x3\x2\x2"+
		"\x2\x2149\x20B4\x3\x2\x2\x2\x2149\x20B8\x3\x2\x2\x2\x2149\x20BC\x3\x2"+
		"\x2\x2\x2149\x20C5\x3\x2\x2\x2\x2149\x20CB\x3\x2\x2\x2\x2149\x20CF\x3"+
		"\x2\x2\x2\x2149\x20D3\x3\x2\x2\x2\x2149\x20E4\x3\x2\x2\x2\x2149\x20E8"+
		"\x3\x2\x2\x2\x2149\x20EC\x3\x2\x2\x2\x2149\x20F0\x3\x2\x2\x2\x2149\x20F9"+
		"\x3\x2\x2\x2\x2149\x20FF\x3\x2\x2\x2\x2149\x2108\x3\x2\x2\x2\x2149\x2111"+
		"\x3\x2\x2\x2\x2149\x211A\x3\x2\x2\x2\x2149\x211E\x3\x2\x2\x2\x2149\x2122"+
		"\x3\x2\x2\x2\x2149\x2126\x3\x2\x2\x2\x2149\x212E\x3\x2\x2\x2\x2149\x2132"+
		"\x3\x2\x2\x2\x2149\x2136\x3\x2\x2\x2\x214A\x214D\x3\x2\x2\x2\x214B\x2149"+
		"\x3\x2\x2\x2\x214B\x214C\x3\x2\x2\x2\x214C\x214F\x3\x2\x2\x2\x214D\x214B"+
		"\x3\x2\x2\x2\x214E\x20AE\x3\x2\x2\x2\x214E\x214F\x3\x2\x2\x2\x214F\x2AD"+
		"\x3\x2\x2\x2\x2150\x2151\aW\x2\x2\x2151\x2152\a\x210\x2\x2\x2152\x216A"+
		"\x5\x47A\x23E\x2\x2153\x2158\a\x3DF\x2\x2\x2154\x2156\a\x462\x2\x2\x2155"+
		"\x2154\x3\x2\x2\x2\x2155\x2156\x3\x2\x2\x2\x2156\x2157\x3\x2\x2\x2\x2157"+
		"\x2159\x5\x47A\x23E\x2\x2158\x2155\x3\x2\x2\x2\x2159\x215A\x3\x2\x2\x2"+
		"\x215A\x2158\x3\x2\x2\x2\x215A\x215B\x3\x2\x2\x2\x215B\x216B\x3\x2\x2"+
		"\x2\x215C\x2166\a\x3DF\x2\x2\x215D\x215F\a\x462\x2\x2\x215E\x215D\x3\x2"+
		"\x2\x2\x215E\x215F\x3\x2\x2\x2\x215F\x2160\x3\x2\x2\x2\x2160\x2161\t\\"+
		"\x2\x2\x2161\x2164\a\x44C\x2\x2\x2162\x2165\a\x448\x2\x2\x2163\x2165\x5"+
		"\x47A\x23E\x2\x2164\x2162\x3\x2\x2\x2\x2164\x2163\x3\x2\x2\x2\x2165\x2167"+
		"\x3\x2\x2\x2\x2166\x215E\x3\x2\x2\x2\x2167\x2168\x3\x2\x2\x2\x2168\x2166"+
		"\x3\x2\x2\x2\x2168\x2169\x3\x2\x2\x2\x2169\x216B\x3\x2\x2\x2\x216A\x2153"+
		"\x3\x2\x2\x2\x216A\x215C\x3\x2\x2\x2\x216B\x218D\x3\x2\x2\x2\x216C\x216D"+
		"\a\x244\x2\x2\x216D\x2172\a\x3DF\x2\x2\x216E\x2170\a\x462\x2\x2\x216F"+
		"\x216E\x3\x2\x2\x2\x216F\x2170\x3\x2\x2\x2\x2170\x2171\x3\x2\x2\x2\x2171"+
		"\x2173\x5\x47A\x23E\x2\x2172\x216F\x3\x2\x2\x2\x2173\x2174\x3\x2\x2\x2"+
		"\x2174\x2172\x3\x2\x2\x2\x2174\x2175\x3\x2\x2\x2\x2175\x2177\x3\x2\x2"+
		"\x2\x2176\x216C\x3\x2\x2\x2\x2177\x2178\x3\x2\x2\x2\x2178\x2176\x3\x2"+
		"\x2\x2\x2178\x2179\x3\x2\x2\x2\x2179\x218E\x3\x2\x2\x2\x217A\x217B\a\x244"+
		"\x2\x2\x217B\x2185\a\x3DF\x2\x2\x217C\x217E\a\x462\x2\x2\x217D\x217C\x3"+
		"\x2\x2\x2\x217D\x217E\x3\x2\x2\x2\x217E\x217F\x3\x2\x2\x2\x217F\x2180"+
		"\t\\\x2\x2\x2180\x2183\a\x44C\x2\x2\x2181\x2184\a\x448\x2\x2\x2182\x2184"+
		"\x5\x47A\x23E\x2\x2183\x2181\x3\x2\x2\x2\x2183\x2182\x3\x2\x2\x2\x2184"+
		"\x2186\x3\x2\x2\x2\x2185\x217D\x3\x2\x2\x2\x2186\x2187\x3\x2\x2\x2\x2187"+
		"\x2185\x3\x2\x2\x2\x2187\x2188\x3\x2\x2\x2\x2188\x218A\x3\x2\x2\x2\x2189"+
		"\x217A\x3\x2\x2\x2\x218A\x218B\x3\x2\x2\x2\x218B\x2189\x3\x2\x2\x2\x218B"+
		"\x218C\x3\x2\x2\x2\x218C\x218E\x3\x2\x2\x2\x218D\x2176\x3\x2\x2\x2\x218D"+
		"\x2189\x3\x2\x2\x2\x218D\x218E\x3\x2\x2\x2\x218E\x223C\x3\x2\x2\x2\x218F"+
		"\x2239\a\x42B\x2\x2\x2190\x2192\a\x462\x2\x2\x2191\x2190\x3\x2\x2\x2\x2191"+
		"\x2192\x3\x2\x2\x2\x2192\x2193\x3\x2\x2\x2\x2193\x2238\a\x10E\x2\x2\x2194"+
		"\x2196\a\x462\x2\x2\x2195\x2194\x3\x2\x2\x2\x2195\x2196\x3\x2\x2\x2\x2196"+
		"\x2197\x3\x2\x2\x2\x2197\x2238\a\xC4\x2\x2\x2198\x219A\a\x462\x2\x2\x2199"+
		"\x2198\x3\x2\x2\x2\x2199\x219A\x3\x2\x2\x2\x219A\x219B\x3\x2\x2\x2\x219B"+
		"\x2238\t]\x2\x2\x219C\x219E\a\x462\x2\x2\x219D\x219C\x3\x2\x2\x2\x219D"+
		"\x219E\x3\x2\x2\x2\x219E\x219F\x3\x2\x2\x2\x219F\x21A0\a\x107\x2\x2\x21A0"+
		"\x21A3\a\x44C\x2\x2\x21A1\x21A4\a\x448\x2\x2\x21A2\x21A4\x5\x47A\x23E"+
		"\x2\x21A3\x21A1\x3\x2\x2\x2\x21A3\x21A2\x3\x2\x2\x2\x21A4\x2238\x3\x2"+
		"\x2\x2\x21A5\x21A7\a\x462\x2\x2\x21A6\x21A5\x3\x2\x2\x2\x21A6\x21A7\x3"+
		"\x2\x2\x2\x21A7\x21A8\x3\x2\x2\x2\x21A8\x21A9\a\x24D\x2\x2\x21A9\x21AA"+
		"\a\x44C\x2\x2\x21AA\x2238\x5\x47A\x23E\x2\x21AB\x21AD\a\x462\x2\x2\x21AC"+
		"\x21AB\x3\x2\x2\x2\x21AC\x21AD\x3\x2\x2\x2\x21AD\x21AE\x3\x2\x2\x2\x21AE"+
		"\x2238\a\xCC\x2\x2\x21AF\x21B1\a\x462\x2\x2\x21B0\x21AF\x3\x2\x2\x2\x21B0"+
		"\x21B1\x3\x2\x2\x2\x21B1\x21B2\x3\x2\x2\x2\x21B2\x2238\a\x168\x2\x2\x21B3"+
		"\x21B5\a\x462\x2\x2\x21B4\x21B3\x3\x2\x2\x2\x21B4\x21B5\x3\x2\x2\x2\x21B5"+
		"\x21C2\x3\x2\x2\x2\x21B6\x21B7\a\x148\x2\x2\x21B7\x21BA\a\x44C\x2\x2\x21B8"+
		"\x21BB\a\x448\x2\x2\x21B9\x21BB\x5\x47A\x23E\x2\x21BA\x21B8\x3\x2\x2\x2"+
		"\x21BA\x21B9\x3\x2\x2\x2\x21BB\x21C3\x3\x2\x2\x2\x21BC\x21BD\a\x32F\x2"+
		"\x2\x21BD\x21C0\a\x44C\x2\x2\x21BE\x21C1\a\x446\x2\x2\x21BF\x21C1\x5\x47A"+
		"\x23E\x2\x21C0\x21BE\x3\x2\x2\x2\x21C0\x21BF\x3\x2\x2\x2\x21C1\x21C3\x3"+
		"\x2\x2\x2\x21C2\x21B6\x3\x2\x2\x2\x21C2\x21BC\x3\x2\x2\x2\x21C3\x2238"+
		"\x3\x2\x2\x2\x21C4\x21C6\a\x462\x2\x2\x21C5\x21C4\x3\x2\x2\x2\x21C5\x21C6"+
		"\x3\x2\x2\x2\x21C6\x21C7\x3\x2\x2\x2\x21C7\x2238\t^\x2\x2\x21C8\x21CA"+
		"\a\x462\x2\x2\x21C9\x21C8\x3\x2\x2\x2\x21C9\x21CA\x3\x2\x2\x2\x21CA\x21CB"+
		"\x3\x2\x2\x2\x21CB\x2238\t_\x2\x2\x21CC\x21CE\a\x462\x2\x2\x21CD\x21CC"+
		"\x3\x2\x2\x2\x21CD\x21CE\x3\x2\x2\x2\x21CE\x21CF\x3\x2\x2\x2\x21CF\x2238"+
		"\t`\x2\x2\x21D0\x21D2\a\x462\x2\x2\x21D1\x21D0\x3\x2\x2\x2\x21D1\x21D2"+
		"\x3\x2\x2\x2\x21D2\x21D3\x3\x2\x2\x2\x21D3\x21D4\a\x233\x2\x2\x21D4\x21D7"+
		"\a\x44C\x2\x2\x21D5\x21D8\a\x448\x2\x2\x21D6\x21D8\x5\x47A\x23E\x2\x21D7"+
		"\x21D5\x3\x2\x2\x2\x21D7\x21D6\x3\x2\x2\x2\x21D8\x2238\x3\x2\x2\x2\x21D9"+
		"\x21DB\a\x462\x2\x2\x21DA\x21D9\x3\x2\x2\x2\x21DA\x21DB\x3\x2\x2\x2\x21DB"+
		"\x21DC\x3\x2\x2\x2\x21DC\x21DD\a\x234\x2\x2\x21DD\x21DE\a\x44C\x2\x2\x21DE"+
		"\x2238\a\x448\x2\x2\x21DF\x21E1\a\x462\x2\x2\x21E0\x21DF\x3\x2\x2\x2\x21E0"+
		"\x21E1\x3\x2\x2\x2\x21E1\x21E2\x3\x2\x2\x2\x21E2\x21E3\ah\x2\x2\x21E3"+
		"\x21E6\a\x44C\x2\x2\x21E4\x21E7\a\x446\x2\x2\x21E5\x21E7\x5\x47A\x23E"+
		"\x2\x21E6\x21E4\x3\x2\x2\x2\x21E6\x21E5\x3\x2\x2\x2\x21E7\x2238\x3\x2"+
		"\x2\x2\x21E8\x21EA\a\x462\x2\x2\x21E9\x21E8\x3\x2\x2\x2\x21E9\x21EA\x3"+
		"\x2\x2\x2\x21EA\x21EB\x3\x2\x2\x2\x21EB\x21EC\an\x2\x2\x21EC\x21EF\a\x44C"+
		"\x2\x2\x21ED\x21F0\a\x446\x2\x2\x21EE\x21F0\x5\x47A\x23E\x2\x21EF\x21ED"+
		"\x3\x2\x2\x2\x21EF\x21EE\x3\x2\x2\x2\x21F0\x2238\x3\x2\x2\x2\x21F1\x21F3"+
		"\a\x462\x2\x2\x21F2\x21F1\x3\x2\x2\x2\x21F2\x21F3\x3\x2\x2\x2\x21F3\x21F4"+
		"\x3\x2\x2\x2\x21F4\x21F5\a\x222\x2\x2\x21F5\x21F8\a\x44C\x2\x2\x21F6\x21F9"+
		"\a\x446\x2\x2\x21F7\x21F9\x5\x47A\x23E\x2\x21F8\x21F6\x3\x2\x2\x2\x21F8"+
		"\x21F7\x3\x2\x2\x2\x21F9\x2238\x3\x2\x2\x2\x21FA\x21FC\a\x462\x2\x2\x21FB"+
		"\x21FA\x3\x2\x2\x2\x21FB\x21FC\x3\x2\x2\x2\x21FC\x21FD\x3\x2\x2\x2\x21FD"+
		"\x2238\t\x61\x2\x2\x21FE\x2200\a\x462\x2\x2\x21FF\x21FE\x3\x2\x2\x2\x21FF"+
		"\x2200\x3\x2\x2\x2\x2200\x2201\x3\x2\x2\x2\x2201\x2238\t\x62\x2\x2\x2202"+
		"\x2204\a\x462\x2\x2\x2203\x2202\x3\x2\x2\x2\x2203\x2204\x3\x2\x2\x2\x2204"+
		"\x2205\x3\x2\x2\x2\x2205\x2238\a\x329\x2\x2\x2206\x2208\a\x462\x2\x2\x2207"+
		"\x2206\x3\x2\x2\x2\x2207\x2208\x3\x2\x2\x2\x2208\x2209\x3\x2\x2\x2\x2209"+
		"\x220C\a\x3AB\x2\x2\x220A\x220B\a\x44C\x2\x2\x220B\x220D\a\x446\x2\x2"+
		"\x220C\x220A\x3\x2\x2\x2\x220C\x220D\x3\x2\x2\x2\x220D\x2238\x3\x2\x2"+
		"\x2\x220E\x2210\a\x462\x2\x2\x220F\x220E\x3\x2\x2\x2\x220F\x2210\x3\x2"+
		"\x2\x2\x2210\x2211\x3\x2\x2\x2\x2211\x2238\t\x63\x2\x2\x2212\x2214\a\x462"+
		"\x2\x2\x2213\x2212\x3\x2\x2\x2\x2213\x2214\x3\x2\x2\x2\x2214\x2215\x3"+
		"\x2\x2\x2\x2215\x2238\t\x64\x2\x2\x2216\x2218\a\x462\x2\x2\x2217\x2216"+
		"\x3\x2\x2\x2\x2217\x2218\x3\x2\x2\x2\x2218\x221D\x3\x2\x2\x2\x2219\x221E"+
		"\a\x267\x2\x2\x221A\x221B\a\x3A1\x2\x2\x221B\x221C\a\x44C\x2\x2\x221C"+
		"\x221E\a\x448\x2\x2\x221D\x2219\x3\x2\x2\x2\x221D\x221A\x3\x2\x2\x2\x221E"+
		"\x2238\x3\x2\x2\x2\x221F\x2221\a\x462\x2\x2\x2220\x221F\x3\x2\x2\x2\x2220"+
		"\x2221\x3\x2\x2\x2\x2221\x2222\x3\x2\x2\x2\x2222\x2238\a\x275\x2\x2\x2223"+
		"\x2225\a\x462\x2\x2\x2224\x2223\x3\x2\x2\x2\x2224\x2225\x3\x2\x2\x2\x2225"+
		"\x2226\x3\x2\x2\x2\x2226\x2227\a\x12B\x2\x2\x2227\x2228\a\x45E\x2\x2\x2228"+
		"\x2229\a\x17\x2\x2\x2229\x222A\a\x44C\x2\x2\x222A\x222B\t\x65\x2\x2\x222B"+
		"\x222C\a\x462\x2\x2\x222C\x222D\a\x371\x2\x2\x222D\x222E\a}\x2\x2\x222E"+
		"\x2235\a\x44C\x2\x2\x222F\x2236\x5\x47A\x23E\x2\x2230\x2231\a\x371\x2"+
		"\x2\x2231\x2232\a?\x2\x2\x2232\x2233\a\x1EE\x2\x2\x2233\x2234\a\x44C\x2"+
		"\x2\x2234\x2236\x5\x47A\x23E\x2\x2235\x222F\x3\x2\x2\x2\x2235\x2230\x3"+
		"\x2\x2\x2\x2236\x2238\x3\x2\x2\x2\x2237\x2191\x3\x2\x2\x2\x2237\x2195"+
		"\x3\x2\x2\x2\x2237\x2199\x3\x2\x2\x2\x2237\x219D\x3\x2\x2\x2\x2237\x21A6"+
		"\x3\x2\x2\x2\x2237\x21AC\x3\x2\x2\x2\x2237\x21B0\x3\x2\x2\x2\x2237\x21B4"+
		"\x3\x2\x2\x2\x2237\x21C5\x3\x2\x2\x2\x2237\x21C9\x3\x2\x2\x2\x2237\x21CD"+
		"\x3\x2\x2\x2\x2237\x21D1\x3\x2\x2\x2\x2237\x21DA\x3\x2\x2\x2\x2237\x21E0"+
		"\x3\x2\x2\x2\x2237\x21E9\x3\x2\x2\x2\x2237\x21F2\x3\x2\x2\x2\x2237\x21FB"+
		"\x3\x2\x2\x2\x2237\x21FF\x3\x2\x2\x2\x2237\x2203\x3\x2\x2\x2\x2237\x2207"+
		"\x3\x2\x2\x2\x2237\x220F\x3\x2\x2\x2\x2237\x2213\x3\x2\x2\x2\x2237\x2217"+
		"\x3\x2\x2\x2\x2237\x2220\x3\x2\x2\x2\x2237\x2224\x3\x2\x2\x2\x2238\x223B"+
		"\x3\x2\x2\x2\x2239\x2237\x3\x2\x2\x2\x2239\x223A\x3\x2\x2\x2\x223A\x223D"+
		"\x3\x2\x2\x2\x223B\x2239\x3\x2\x2\x2\x223C\x218F\x3\x2\x2\x2\x223C\x223D"+
		"\x3\x2\x2\x2\x223D\x2AF\x3\x2\x2\x2\x223E\x223F\aW\x2\x2\x223F\x2240\a"+
		"}\x2\x2\x2240\x2241\x5\x47A\x23E\x2\x2241\x2242\a\x3DF\x2\x2\x2242\x2243"+
		"\a\x159\x2\x2\x2243\x2244\a\x44C\x2\x2\x2244\x2264\a\x448\x2\x2\x2245"+
		"\x2246\a\x42B\x2\x2\x2246\x2247\a\x2D7\x2\x2\x2247\x2248\a\x1EE\x2\x2"+
		"\x2248\x225F\a\x45E\x2\x2\x2249\x224B\a\x462\x2\x2\x224A\x2249\x3\x2\x2"+
		"\x2\x224A\x224B\x3\x2\x2\x2\x224B\x224C\x3\x2\x2\x2\x224C\x224D\a\x159"+
		"\x2\x2\x224D\x224E\a\x44C\x2\x2\x224E\x2260\a\x448\x2\x2\x224F\x2251\a"+
		"\x462\x2\x2\x2250\x224F\x3\x2\x2\x2\x2250\x2251\x3\x2\x2\x2\x2251\x2252"+
		"\x3\x2\x2\x2\x2252\x2253\a\x12B\x2\x2\x2253\x2254\aq\x2\x2\x2254\x2255"+
		"\a\x2B6\x2\x2\x2255\x2256\a\x44C\x2\x2\x2256\x2260\a\x448\x2\x2\x2257"+
		"\x2259\a\x462\x2\x2\x2258\x2257\x3\x2\x2\x2\x2258\x2259\x3\x2\x2\x2\x2259"+
		"\x225A\x3\x2\x2\x2\x225A\x225B\a\xF6\x2\x2\x225B\x225C\aq\x2\x2\x225C"+
		"\x225D\a\x2B6\x2\x2\x225D\x225E\a\x44C\x2\x2\x225E\x2260\a\x448\x2\x2"+
		"\x225F\x224A\x3\x2\x2\x2\x225F\x2250\x3\x2\x2\x2\x225F\x2258\x3\x2\x2"+
		"\x2\x2260\x2261\x3\x2\x2\x2\x2261\x225F\x3\x2\x2\x2\x2261\x2262\x3\x2"+
		"\x2\x2\x2262\x2263\x3\x2\x2\x2\x2263\x2265\a\x45F\x2\x2\x2264\x2245\x3"+
		"\x2\x2\x2\x2264\x2265\x3\x2\x2\x2\x2265\x2B1\x3\x2\x2\x2\x2266\x2267\a"+
		"W\x2\x2\x2267\x2268\a\x21B\x2\x2\x2268\x2269\a\x1EE\x2\x2\x2269\x226A"+
		"\a\x3DF\x2\x2\x226A\x226B\a\x159\x2\x2\x226B\x226C\a\x44C\x2\x2\x226C"+
		"\x226D\a\x448\x2\x2\x226D\x226E\a\x12B\x2\x2\x226E\x226F\aq\x2\x2\x226F"+
		"\x2270\a\x2B6\x2\x2\x2270\x2271\a\x44C\x2\x2\x2271\x2272\a\x448\x2\x2"+
		"\x2272\x2B3\x3\x2\x2\x2\x2273\x2274\aW\x2\x2\x2274\x2275\a\x373\x2\x2"+
		"\x2275\x2276\a\x21B\x2\x2\x2276\x2277\a\x1EE\x2\x2\x2277\x2278\a\x3DF"+
		"\x2\x2\x2278\x2279\a\x159\x2\x2\x2279\x227A\a\x44C\x2\x2\x227A\x227B\a"+
		"\x448\x2\x2\x227B\x227C\a\x12B\x2\x2\x227C\x227D\aq\x2\x2\x227D\x227E"+
		"\a\x2B6\x2\x2\x227E\x227F\a\x44C\x2\x2\x227F\x2280\a\x448\x2\x2\x2280"+
		"\x2B5\x3\x2\x2\x2\x2281\x2285\a\x1F4\x2\x2\x2282\x2286\x5\x2B8\x15D\x2"+
		"\x2283\x2286\x5\x2BA\x15E\x2\x2284\x2286\x5\x2BC\x15F\x2\x2285\x2282\x3"+
		"\x2\x2\x2\x2285\x2283\x3\x2\x2\x2\x2285\x2284\x3\x2\x2\x2\x2286\x2B7\x3"+
		"\x2\x2\x2\x2287\x228A\t!\x2\x2\x2288\x228A\a\x408\x2\x2\x2289\x2287\x3"+
		"\x2\x2\x2\x2289\x2288\x3\x2\x2\x2\x228A\x228D\x3\x2\x2\x2\x228B\x228C"+
		"\a\x42B\x2\x2\x228C\x228E\a\x3AF\x2\x2\x228D\x228B\x3\x2\x2\x2\x228D\x228E"+
		"\x3\x2\x2\x2\x228E\x2B9\x3\x2\x2\x2\x228F\x2290\a\x2E7\x2\x2\x2290\x2291"+
		"\a\x26B\x2\x2\x2291\x2294\a\x3BC\x2\x2\x2292\x2295\a\x18\x2\x2\x2293\x2295"+
		"\a\x446\x2\x2\x2294\x2292\x3\x2\x2\x2\x2294\x2293\x3\x2\x2\x2\x2295\x2BB"+
		"\x3\x2\x2\x2\x2296\x2297\a\x3AB\x2\x2\x2297\x2298\a\x1DF\x2\x2\x2298\x2299"+
		"\a\x446\x2\x2\x2299\x2BD\x3\x2\x2\x2\x229A\x229B\a\x142\x2\x2\x229B\x229D"+
		"\x5\x2C2\x162\x2\x229C\x229E\a\x463\x2\x2\x229D\x229C\x3\x2\x2\x2\x229D"+
		"\x229E\x3\x2\x2\x2\x229E\x2BF\x3\x2\x2\x2\x229F\x22A8\x5\x444\x223\x2"+
		"\x22A0\x22A5\x5\x2C4\x163\x2\x22A1\x22A2\a\x462\x2\x2\x22A2\x22A4\x5\x2C4"+
		"\x163\x2\x22A3\x22A1\x3\x2\x2\x2\x22A4\x22A7\x3\x2\x2\x2\x22A5\x22A3\x3"+
		"\x2\x2\x2\x22A5\x22A6\x3\x2\x2\x2\x22A6\x22A9\x3\x2\x2\x2\x22A7\x22A5"+
		"\x3\x2\x2\x2\x22A8\x22A0\x3\x2\x2\x2\x22A8\x22A9\x3\x2\x2\x2\x22A9\x22AB"+
		"\x3\x2\x2\x2\x22AA\x22AC\a\x463\x2\x2\x22AB\x22AA\x3\x2\x2\x2\x22AB\x22AC"+
		"\x3\x2\x2\x2\x22AC\x2C1\x3\x2\x2\x2\x22AD\x22AE\a\x445\x2\x2\x22AE\x22B0"+
		"\a\x44C\x2\x2\x22AF\x22AD\x3\x2\x2\x2\x22AF\x22B0\x3\x2\x2\x2\x22B0\x22B3"+
		"\x3\x2\x2\x2\x22B1\x22B4\x5\x444\x223\x2\x22B2\x22B4\x5\x2CC\x167\x2\x22B3"+
		"\x22B1\x3\x2\x2\x2\x22B3\x22B2\x3\x2\x2\x2\x22B4\x22B6\x3\x2\x2\x2\x22B5"+
		"\x22B7\x5\x2C4\x163\x2\x22B6\x22B5\x3\x2\x2\x2\x22B6\x22B7\x3\x2\x2\x2"+
		"\x22B7\x22CF\x3\x2\x2\x2\x22B8\x22B9\a\x45E\x2\x2\x22B9\x22BE\x5\x2CC"+
		"\x167\x2\x22BA\x22BB\a\x462\x2\x2\x22BB\x22BD\x5\x2CC\x167\x2\x22BC\x22BA"+
		"\x3\x2\x2\x2\x22BD\x22C0\x3\x2\x2\x2\x22BE\x22BC\x3\x2\x2\x2\x22BE\x22BF"+
		"\x3\x2\x2\x2\x22BF\x22C1\x3\x2\x2\x2\x22C0\x22BE\x3\x2\x2\x2\x22C1\x22C8"+
		"\a\x45F\x2\x2\x22C2\x22C4\a:\x2\x2\x22C3\x22C2\x3\x2\x2\x2\x22C3\x22C4"+
		"\x3\x2\x2\x2\x22C4\x22C5\x3\x2\x2\x2\x22C5\x22C6\t\x66\x2\x2\x22C6\x22C7"+
		"\a\x44C\x2\x2\x22C7\x22C9\a\x448\x2\x2\x22C8\x22C3\x3\x2\x2\x2\x22C8\x22C9"+
		"\x3\x2\x2\x2\x22C9\x22CC\x3\x2\x2\x2\x22CA\x22CB\a\x41\x2\x2\x22CB\x22CD"+
		"\x5\x47A\x23E\x2\x22CC\x22CA\x3\x2\x2\x2\x22CC\x22CD\x3\x2\x2\x2\x22CD"+
		"\x22CF\x3\x2\x2\x2\x22CE\x22AF\x3\x2\x2\x2\x22CE\x22B8\x3\x2\x2\x2\x22CF"+
		"\x2C3\x3\x2\x2\x2\x22D0\x22D5\x5\x2C8\x165\x2\x22D1\x22D2\a\x462\x2\x2"+
		"\x22D2\x22D4\x5\x2C4\x163\x2\x22D3\x22D1\x3\x2\x2\x2\x22D4\x22D7\x3\x2"+
		"\x2\x2\x22D5\x22D3\x3\x2\x2\x2\x22D5\x22D6\x3\x2\x2\x2\x22D6\x22E1\x3"+
		"\x2\x2\x2\x22D7\x22D5\x3\x2\x2\x2\x22D8\x22DD\x5\x2C6\x164\x2\x22D9\x22DA"+
		"\a\x462\x2\x2\x22DA\x22DC\x5\x2C6\x164\x2\x22DB\x22D9\x3\x2\x2\x2\x22DC"+
		"\x22DF\x3\x2\x2\x2\x22DD\x22DB\x3\x2\x2\x2\x22DD\x22DE\x3\x2\x2\x2\x22DE"+
		"\x22E1\x3\x2\x2\x2\x22DF\x22DD\x3\x2\x2\x2\x22E0\x22D0\x3\x2\x2\x2\x22E0"+
		"\x22D8\x3\x2\x2\x2\x22E1\x2C5\x3\x2\x2\x2\x22E2\x22E3\a\x445\x2\x2\x22E3"+
		"\x22E4\a\x44C\x2\x2\x22E4\x22E5\x5\x2CA\x166\x2\x22E5\x2C7\x3\x2\x2\x2"+
		"\x22E6\x22E7\x5\x2CA\x166\x2\x22E7\x2C9\x3\x2\x2\x2\x22E8\x22F1\x5\x474"+
		"\x23B\x2\x22E9\x22EB\a\x445\x2\x2\x22EA\x22EC\tg\x2\x2\x22EB\x22EA\x3"+
		"\x2\x2\x2\x22EB\x22EC\x3\x2\x2\x2\x22EC\x22F1\x3\x2\x2\x2\x22ED\x22F1"+
		"\x5\x47A\x23E\x2\x22EE\x22F1\a\xF7\x2\x2\x22EF\x22F1\a\x27A\x2\x2\x22F0"+
		"\x22E8\x3\x2\x2\x2\x22F0\x22E9\x3\x2\x2\x2\x22F0\x22ED\x3\x2\x2\x2\x22F0"+
		"\x22EE\x3\x2\x2\x2\x22F0\x22EF\x3\x2\x2\x2\x22F1\x2CB\x3\x2\x2\x2\x22F2"+
		"\x22F4\a\x445\x2\x2\x22F3\x22F5\tg\x2\x2\x22F4\x22F3\x3\x2\x2\x2\x22F4"+
		"\x22F5\x3\x2\x2\x2\x22F5\x22F8\x3\x2\x2\x2\x22F6\x22F8\a\x448\x2\x2\x22F7"+
		"\x22F2\x3\x2\x2\x2\x22F7\x22F6\x3\x2\x2\x2\x22F8\x22FB\x3\x2\x2\x2\x22F9"+
		"\x22FA\a\x469\x2\x2\x22FA\x22FC\x5\x2CC\x167\x2\x22FB\x22F9\x3\x2\x2\x2"+
		"\x22FB\x22FC\x3\x2\x2\x2\x22FC\x2CD\x3\x2\x2\x2\x22FD\x22FF\x5\x32A\x196"+
		"\x2\x22FE\x2300\a\x463\x2\x2\x22FF\x22FE\x3\x2\x2\x2\x22FF\x2300\x3\x2"+
		"\x2\x2\x2300\x233E\x3\x2\x2\x2\x2301\x230D\a\x196\x2\x2\x2302\x2304\a"+
		"\x18\x2\x2\x2303\x2305\a\x2D9\x2\x2\x2304\x2303\x3\x2\x2\x2\x2304\x2305"+
		"\x3\x2\x2\x2\x2305\x230E\x3\x2\x2\x2\x2306\x230B\x5\x2EA\x176\x2\x2307"+
		"\x2308\a\x45E\x2\x2\x2308\x2309\x5\x450\x229\x2\x2309\x230A\a\x45F\x2"+
		"\x2\x230A\x230C\x3\x2\x2\x2\x230B\x2307\x3\x2\x2\x2\x230B\x230C\x3\x2"+
		"\x2\x2\x230C\x230E\x3\x2\x2\x2\x230D\x2302\x3\x2\x2\x2\x230D\x2306\x3"+
		"\x2\x2\x2\x230E\x2316\x3\x2\x2\x2\x230F\x2313\a\x28D\x2\x2\x2310\x2311"+
		"\x5\x9EP\x2\x2311\x2312\a\x465\x2\x2\x2312\x2314\x3\x2\x2\x2\x2313\x2310"+
		"\x3\x2\x2\x2\x2313\x2314\x3\x2\x2\x2\x2314\x2315\x3\x2\x2\x2\x2315\x2317"+
		"\x5\x43C\x21F\x2\x2316\x230F\x3\x2\x2\x2\x2316\x2317\x3\x2\x2\x2\x2317"+
		"\x2318\x3\x2\x2\x2\x2318\x2319\a\x3DF\x2\x2\x2319\x231E\x5\x2D0\x169\x2"+
		"\x231A\x231B\a\x462\x2\x2\x231B\x231D\x5\x2D0\x169\x2\x231C\x231A\x3\x2"+
		"\x2\x2\x231D\x2320\x3\x2\x2\x2\x231E\x231C\x3\x2\x2\x2\x231E\x231F\x3"+
		"\x2\x2\x2\x231F\x2324\x3\x2\x2\x2\x2320\x231E\x3\x2\x2\x2\x2321\x2322"+
		"\a\x42B\x2\x2\x2322\x2323\a\x196\x2\x2\x2323\x2325\a\x29C\x2\x2\x2324"+
		"\x2321\x3\x2\x2\x2\x2324\x2325\x3\x2\x2\x2\x2325\x2328\x3\x2\x2\x2\x2326"+
		"\x2327\a:\x2\x2\x2327\x2329\x5\x2D0\x169\x2\x2328\x2326\x3\x2\x2\x2\x2328"+
		"\x2329\x3\x2\x2\x2\x2329\x232B\x3\x2\x2\x2\x232A\x232C\a\x463\x2\x2\x232B"+
		"\x232A\x3\x2\x2\x2\x232B\x232C\x3\x2\x2\x2\x232C\x233E\x3\x2\x2\x2\x232D"+
		"\x2334\a\x334\x2\x2\x232E\x232F\a\x45E\x2\x2\x232F\x2330\a\x42B\x2\x2"+
		"\x2330\x2331\a\xC3\x2\x2\x2331\x2332\a\x44C\x2\x2\x2332\x2333\a\x445\x2"+
		"\x2\x2333\x2335\a\x45F\x2\x2\x2334\x232E\x3\x2\x2\x2\x2334\x2335\x3\x2"+
		"\x2\x2\x2335\x2337\x3\x2\x2\x2\x2336\x2338\a\x463\x2\x2\x2337\x2336\x3"+
		"\x2\x2\x2\x2337\x2338\x3\x2\x2\x2\x2338\x233E\x3\x2\x2\x2\x2339\x233E"+
		"\x5\x2DC\x16F\x2\x233A\x233E\x5\x2DE\x170\x2\x233B\x233E\x5\x2E0\x171"+
		"\x2\x233C\x233E\x5\x2D2\x16A\x2\x233D\x22FD\x3\x2\x2\x2\x233D\x2301\x3"+
		"\x2\x2\x2\x233D\x232D\x3\x2\x2\x2\x233D\x2339\x3\x2\x2\x2\x233D\x233A"+
		"\x3\x2\x2\x2\x233D\x233B\x3\x2\x2\x2\x233D\x233C\x3\x2\x2\x2\x233E\x2CF"+
		"\x3\x2\x2\x2\x233F\x2343\x3\x2\x2\x2\x2340\x2343\x5\x47A\x23E\x2\x2341"+
		"\x2343\a\x2E3\x2\x2\x2342\x233F\x3\x2\x2\x2\x2342\x2340\x3\x2\x2\x2\x2342"+
		"\x2341\x3\x2\x2\x2\x2343\x2D1\x3\x2\x2\x2\x2344\x2345\a\xC9\x2\x2\x2345"+
		"\x2346\a}\x2\x2\x2346\x2349\x5\x47A\x23E\x2\x2347\x2348\a\x46\x2\x2\x2348"+
		"\x234A\x5\x47A\x23E\x2\x2349\x2347\x3\x2\x2\x2\x2349\x234A\x3\x2\x2\x2"+
		"\x234A\x234E\x3\x2\x2\x2\x234B\x234C\a\x17E\x2\x2\x234C\x234F\x5\x2D4"+
		"\x16B\x2\x234D\x234F\x5\x2D8\x16D\x2\x234E\x234B\x3\x2\x2\x2\x234E\x234D"+
		"\x3\x2\x2\x2\x234F\x2356\x3\x2\x2\x2\x2350\x2351\a\f\x2\x2\x2351\x2352"+
		"\a\x16F\x2\x2\x2352\x2353\a\\\x2\x2\x2353\x2354\a\x10C\x2\x2\x2354\x2355"+
		"\a\x44C\x2\x2\x2355\x2357\x5\x454\x22B\x2\x2356\x2350\x3\x2\x2\x2\x2356"+
		"\x2357\x3\x2\x2\x2\x2357\x2D3\x3\x2\x2\x2\x2358\x2359\a=\x2\x2\x2359\x236A"+
		"\x5\x47A\x23E\x2\x235A\x235C\a\x140\x2\x2\x235B\x235A\x3\x2\x2\x2\x235B"+
		"\x235C\x3\x2\x2\x2\x235C\x235D\x3\x2\x2\x2\x235D\x235E\a\x159\x2\x2\x235E"+
		"\x235F\a\x44C\x2\x2\x235F\x2367\a\x448\x2\x2\x2360\x2361\a\x42B\x2\x2"+
		"\x2361\x2362\a\x2D7\x2\x2\x2362\x2363\a\x1EE\x2\x2\x2363\x2364\a\x45E"+
		"\x2\x2\x2364\x2365\x5\x2D6\x16C\x2\x2365\x2366\a\x45F\x2\x2\x2366\x2368"+
		"\x3\x2\x2\x2\x2367\x2360\x3\x2\x2\x2\x2367\x2368\x3\x2\x2\x2\x2368\x236A"+
		"\x3\x2\x2\x2\x2369\x2358\x3\x2\x2\x2\x2369\x235B\x3\x2\x2\x2\x236A\x2D5"+
		"\x3\x2\x2\x2\x236B\x236C\th\x2\x2\x236C\x236D\a\x44C\x2\x2\x236D\x2374"+
		"\a\x448\x2\x2\x236E\x236F\a\x462\x2\x2\x236F\x2370\ti\x2\x2\x2370\x2371"+
		"\aq\x2\x2\x2371\x2372\a\x2B6\x2\x2\x2372\x2373\a\x44C\x2\x2\x2373\x2375"+
		"\a\x448\x2\x2\x2374\x236E\x3\x2\x2\x2\x2374\x2375\x3\x2\x2\x2\x2375\x2D7"+
		"\x3\x2\x2\x2\x2376\x2377\a\x12B\x2\x2\x2377\x2378\aq\x2\x2\x2378\x2379"+
		"\a\x2B6\x2\x2\x2379\x237A\a\x44C\x2\x2\x237A\x237C\a\x448\x2\x2\x237B"+
		"\x2376\x3\x2\x2\x2\x237B\x237C\x3\x2\x2\x2\x237C\x237D\x3\x2\x2\x2\x237D"+
		"\x237E\a\x42B\x2\x2\x237E\x237F\a\x3BA\x2\x2\x237F\x2380\a\x44C\x2\x2"+
		"\x2380\x2385\a\x448\x2\x2\x2381\x2382\a\x462\x2\x2\x2382\x2384\x5\x2DA"+
		"\x16E\x2\x2383\x2381\x3\x2\x2\x2\x2384\x2387\x3\x2\x2\x2\x2385\x2383\x3"+
		"\x2\x2\x2\x2385\x2386\x3\x2\x2\x2\x2386\x2D9\x3\x2\x2\x2\x2387\x2385\x3"+
		"\x2\x2\x2\x2388\x2389\tj\x2\x2\x2389\x238A\a\x44C\x2\x2\x238A\x238B\a"+
		"\x448\x2\x2\x238B\x2DB\x3\x2\x2\x2\x238C\x238D\a\x291\x2\x2\x238D\x238E"+
		"\a\x3C6\x2\x2\x238E\x238F\a\x1EE\x2\x2\x238F\x2390\x5\x47A\x23E\x2\x2390"+
		"\x2391\a\xF6\x2\x2\x2391\x2392\aq\x2\x2\x2392\x2393\x5\x2E8\x175\x2\x2393"+
		"\x239D\x3\x2\x2\x2\x2394\x2395\a\x291\x2\x2\x2395\x2396\a\x21B\x2\x2\x2396"+
		"\x2397\a\x1EE\x2\x2\x2397\x2398\a\xF6\x2\x2\x2398\x2399\aq\x2\x2\x2399"+
		"\x239A\a\x2B6\x2\x2\x239A\x239B\a\x44C\x2\x2\x239B\x239D\a\x448\x2\x2"+
		"\x239C\x238C\x3\x2\x2\x2\x239C\x2394\x3\x2\x2\x2\x239D\x2DD\x3\x2\x2\x2"+
		"\x239E\x239F\a\x97\x2\x2\x239F\x23A0\a\x3C6\x2\x2\x23A0\x23A1\a\x1EE\x2"+
		"\x2\x23A1\x23AA\x5\x47A\x23E\x2\x23A2\x23A3\a\x97\x2\x2\x23A3\x23A4\a"+
		"\x18\x2\x2\x23A4\x23A5\a\x3C6\x2\x2\x23A5\x23AA\a\x1EF\x2\x2\x23A6\x23A7"+
		"\a\x97\x2\x2\x23A7\x23A8\a\x21B\x2\x2\x23A8\x23AA\a\x1EE\x2\x2\x23A9\x239E"+
		"\x3\x2\x2\x2\x23A9\x23A2\x3\x2\x2\x2\x23A9\x23A6\x3\x2\x2\x2\x23AA\x2DF"+
		"\x3\x2\x2\x2\x23AB\x23AC\a\xC9\x2\x2\x23AC\x23AD\a\x21B\x2\x2\x23AD\x23AE"+
		"\a\x1EE\x2\x2\x23AE\x23AF\a\x12B\x2\x2\x23AF\x23B0\aq\x2\x2\x23B0\x23B1"+
		"\a\x2B6\x2\x2\x23B1\x23B2\a\x44C\x2\x2\x23B2\x23CF\a\x448\x2\x2\x23B3"+
		"\x23B4\a\xC9\x2\x2\x23B4\x23B5\a\x3C6\x2\x2\x23B5\x23B6\a\x1EE\x2\x2\x23B6"+
		"\x23B9\x5\x47A\x23E\x2\x23B7\x23B8\a\x46\x2\x2\x23B8\x23BA\x5\x47A\x23E"+
		"\x2\x23B9\x23B7\x3\x2\x2\x2\x23B9\x23BA\x3\x2\x2\x2\x23BA\x23BE\x3\x2"+
		"\x2\x2\x23BB\x23BC\a\x17E\x2\x2\x23BC\x23BD\a\x2E1\x2\x2\x23BD\x23BF\x5"+
		"\x47A\x23E\x2\x23BE\x23BB\x3\x2\x2\x2\x23BE\x23BF\x3\x2\x2\x2\x23BF\x23C0"+
		"\x3\x2\x2\x2\x23C0\x23CA\a\x42B\x2\x2\x23C1\x23C6\x5\x2E2\x172\x2\x23C2"+
		"\x23C3\a\x12B\x2\x2\x23C3\x23C4\aq\x2\x2\x23C4\x23C6\x5\x2E6\x174\x2\x23C5"+
		"\x23C1\x3\x2\x2\x2\x23C5\x23C2\x3\x2\x2\x2\x23C6\x23C8\x3\x2\x2\x2\x23C7"+
		"\x23C9\a\x462\x2\x2\x23C8\x23C7\x3\x2\x2\x2\x23C8\x23C9\x3\x2\x2\x2\x23C9"+
		"\x23CB\x3\x2\x2\x2\x23CA\x23C5\x3\x2\x2\x2\x23CB\x23CC\x3\x2\x2\x2\x23CC"+
		"\x23CA\x3\x2\x2\x2\x23CC\x23CD\x3\x2\x2\x2\x23CD\x23CF\x3\x2\x2\x2\x23CE"+
		"\x23AB\x3\x2\x2\x2\x23CE\x23B3\x3\x2\x2\x2\x23CF\x2E1\x3\x2\x2\x2\x23D0"+
		"\x23D1\a\x1F2\x2\x2\x23D1\x23D2\a\x44C\x2\x2\x23D2\x23E0\a\x448\x2\x2"+
		"\x23D3\x23D4\a\x17\x2\x2\x23D4\x23D5\a\x44C\x2\x2\x23D5\x23E0\x5\x2E4"+
		"\x173\x2\x23D6\x23D7\a\x1B0\x2\x2\x23D7\x23D8\a\x44C\x2\x2\x23D8\x23E0"+
		"\a\x448\x2\x2\x23D9\x23DA\a\x2E2\x2\x2\x23DA\x23DB\a\x44C\x2\x2\x23DB"+
		"\x23E0\a\x448\x2\x2\x23DC\x23DD\a\xCB\x2\x2\x23DD\x23DE\a\x44C\x2\x2\x23DE"+
		"\x23E0\t\v\x2\x2\x23DF\x23D0\x3\x2\x2\x2\x23DF\x23D3\x3\x2\x2\x2\x23DF"+
		"\x23D6\x3\x2\x2\x2\x23DF\x23D9\x3\x2\x2\x2\x23DF\x23DC\x3\x2\x2\x2\x23E0"+
		"\x2E3\x3\x2\x2\x2\x23E1\x23E2\tk\x2\x2\x23E2\x2E5\x3\x2\x2\x2\x23E3\x23E4"+
		"\a}\x2\x2\x23E4\x23EF\x5\x47A\x23E\x2\x23E5\x23E6\a?\x2\x2\x23E6\x23E7"+
		"\a\x1EE\x2\x2\x23E7\x23EF\x5\x47A\x23E\x2\x23E8\x23E9\a\x3C6\x2\x2\x23E9"+
		"\x23EA\a\x1EE\x2\x2\x23EA\x23EF\x5\x47A\x23E\x2\x23EB\x23EC\a\x2B6\x2"+
		"\x2\x23EC\x23ED\a\x44C\x2\x2\x23ED\x23EF\a\x448\x2\x2\x23EE\x23E3\x3\x2"+
		"\x2\x2\x23EE\x23E5\x3\x2\x2\x2\x23EE\x23E8\x3\x2\x2\x2\x23EE\x23EB\x3"+
		"\x2\x2\x2\x23EF\x2E7\x3\x2\x2\x2\x23F0\x23F1\a}\x2\x2\x23F1\x23F6\x5\x47A"+
		"\x23E\x2\x23F2\x23F3\a\x42B\x2\x2\x23F3\x23F4\a\x2B6\x2\x2\x23F4\x23F5"+
		"\a\x44C\x2\x2\x23F5\x23F7\a\x448\x2\x2\x23F6\x23F2\x3\x2\x2\x2\x23F6\x23F7"+
		"\x3\x2\x2\x2\x23F7\x2408\x3\x2\x2\x2\x23F8\x23F9\a?\x2\x2\x23F9\x23FA"+
		"\a\x1EE\x2\x2\x23FA\x23FF\x5\x47A\x23E\x2\x23FB\x23FC\a\x42B\x2\x2\x23FC"+
		"\x23FD\a\x2B6\x2\x2\x23FD\x23FE\a\x44C\x2\x2\x23FE\x2400\a\x448\x2\x2"+
		"\x23FF\x23FB\x3\x2\x2\x2\x23FF\x2400\x3\x2\x2\x2\x2400\x2408\x3\x2\x2"+
		"\x2\x2401\x2402\a\x3C6\x2\x2\x2402\x2403\a\x1EE\x2\x2\x2403\x2408\x5\x47A"+
		"\x23E\x2\x2404\x2405\a\x2B6\x2\x2\x2405\x2406\a\x44C\x2\x2\x2406\x2408"+
		"\a\x448\x2\x2\x2407\x23F0\x3\x2\x2\x2\x2407\x23F8\x3\x2\x2\x2\x2407\x2401"+
		"\x3\x2\x2\x2\x2407\x2404\x3\x2\x2\x2\x2408\x2E9\x3\x2\x2\x2\x2409\x240F"+
		"\a\xF\x2\x2\x240A\x240B\ao\x2\x2\x240B\x2410\a\x298\x2\x2\x240C\x240D"+
		"\a\xDD\x2\x2\x240D\x240E\ao\x2\x2\x240E\x2410\a\x298\x2\x2\x240F\x240A"+
		"\x3\x2\x2\x2\x240F\x240C\x3\x2\x2\x2\x2410\x24DF\x3\x2\x2\x2\x2411\x2458"+
		"\a%\x2\x2\x2412\x2451\a\x30\x2\x2\x2413\x2414\a\x32\x2\x2\x2414\x2452"+
		"\a\x339\x2\x2\x2415\x2452\a=\x2\x2\x2416\x2417\a?\x2\x2\x2417\x2452\a"+
		"\x1EE\x2\x2\x2418\x2419\aS\x2\x2\x2419\x2452\a\x198\x2\x2\x241A\x2452"+
		"\a}\x2\x2\x241B\x2420\a\x9D\x2\x2\x241C\x241D\a\x12B\x2\x2\x241D\x2421"+
		"\a\x1EE\x2\x2\x241E\x241F\a\x21B\x2\x2\x241F\x2421\a\x1EE\x2\x2\x2420"+
		"\x241C\x3\x2\x2\x2\x2420\x241E\x3\x2\x2\x2\x2421\x2452\x3\x2\x2\x2\x2422"+
		"\x2452\a\xB3\x2\x2\x2423\x2452\a\xBE\x2\x2\x2424\x2452\a\xCC\x2\x2\x2425"+
		"\x242D\a\xDD\x2\x2\x2426\x242E\a\x42\x2\x2\x2427\x2428\a\xF2\x2\x2\x2428"+
		"\x242E\a\x3EC\x2\x2\x2429\x242A\a\x13B\x2\x2\x242A\x242E\tl\x2\x2\x242B"+
		"\x242C\a\x356\x2\x2\x242C\x242E\a\xB1\x2\x2\x242D\x2426\x3\x2\x2\x2\x242D"+
		"\x2427\x3\x2\x2\x2\x242D\x2429\x3\x2\x2\x2\x242D\x242B\x3\x2\x2\x2\x242D"+
		"\x242E\x3\x2\x2\x2\x242E\x2452\x3\x2\x2\x2\x242F\x2452\a\xE2\x2\x2\x2430"+
		"\x2452\a\x12E\x2\x2\x2431\x2432\a\x13B\x2\x2\x2432\x2452\tl\x2\x2\x2433"+
		"\x2439\a\x14D\x2\x2\x2434\x2435\a\xDC\x2\x2\x2435\x243A\a\x396\x2\x2\x2436"+
		"\x2437\a\x159\x2\x2\x2437\x243A\a\x178\x2\x2\x2438\x243A\a\x1FE\x2\x2"+
		"\x2439\x2434\x3\x2\x2\x2\x2439\x2436\x3\x2\x2\x2\x2439\x2438\x3\x2\x2"+
		"\x2\x243A\x2452\x3\x2\x2\x2\x243B\x243C\a\x181\x2\x2\x243C\x2452\ay\x2"+
		"\x2\x243D\x243E\a\x202\x2\x2\x243E\x2452\a\x371\x2\x2\x243F\x2452\a\x211"+
		"\x2\x2\x2440\x2452\a\x219\x2\x2\x2441\x2442\a\x23A\x2\x2\x2442\x2452\a"+
		"\x3F7\x2\x2\x2443\x2444\a\x310\x2\x2\x2444\x2445\a\x373\x2\x2\x2445\x2452"+
		"\a\x63\x2\x2\x2446\x2452\a\x339\x2\x2\x2447\x2452\a\x33D\x2\x2\x2448\x2452"+
		"\a\x351\x2\x2\x2449\x244A\a\x362\x2\x2\x244A\x2452\a\x2CB\x2\x2\x244B"+
		"\x244C\a\x371\x2\x2\x244C\x2452\tm\x2\x2\x244D\x2452\a\x373\x2\x2\x244E"+
		"\x244F\a\x3C6\x2\x2\x244F\x2452\a\x1EE\x2\x2\x2450\x2452\a\x40F\x2\x2"+
		"\x2451\x2413\x3\x2\x2\x2\x2451\x2415\x3\x2\x2\x2\x2451\x2416\x3\x2\x2"+
		"\x2\x2451\x2418\x3\x2\x2\x2\x2451\x241A\x3\x2\x2\x2\x2451\x241B\x3\x2"+
		"\x2\x2\x2451\x2422\x3\x2\x2\x2\x2451\x2423\x3\x2\x2\x2\x2451\x2424\x3"+
		"\x2\x2\x2\x2451\x2425\x3\x2\x2\x2\x2451\x242F\x3\x2\x2\x2\x2451\x2430"+
		"\x3\x2\x2\x2\x2451\x2431\x3\x2\x2\x2\x2451\x2433\x3\x2\x2\x2\x2451\x243B"+
		"\x3\x2\x2\x2\x2451\x243D\x3\x2\x2\x2\x2451\x243F\x3\x2\x2\x2\x2451\x2440"+
		"\x3\x2\x2\x2\x2451\x2441\x3\x2\x2\x2\x2451\x2443\x3\x2\x2\x2\x2451\x2446"+
		"\x3\x2\x2\x2\x2451\x2447\x3\x2\x2\x2\x2451\x2448\x3\x2\x2\x2\x2451\x2449"+
		"\x3\x2\x2\x2\x2451\x244B\x3\x2\x2\x2\x2451\x244D\x3\x2\x2\x2\x2451\x244E"+
		"\x3\x2\x2\x2\x2451\x2450\x3\x2\x2\x2\x2452\x2459\x3\x2\x2\x2\x2453\x2459"+
		"\a\x327\x2\x2\x2454\x2455\a\x371\x2\x2\x2455\x2459\a\x3A6\x2\x2\x2456"+
		"\x2459\a\x37F\x2\x2\x2457\x2459\a\x3E3\x2\x2\x2458\x2412\x3\x2\x2\x2\x2458"+
		"\x2453\x3\x2\x2\x2\x2458\x2454\x3\x2\x2\x2\x2458\x2456\x3\x2\x2\x2\x2458"+
		"\x2457\x3\x2\x2\x2\x2458\x2459\x3\x2\x2\x2\x2459\x24DF\x3\x2\x2\x2\x245A"+
		"\x245C\a\x44\x2\x2\x245B\x245D\a\x371\x2\x2\x245C\x245B\x3\x2\x2\x2\x245C"+
		"\x245D\x3\x2\x2\x2\x245D\x24DF\x3\x2\x2\x2\x245E\x245F\aW\x2\x2\x245F"+
		"\x24DF\tn\x2\x2\x2460\x24DF\a\x8D\x2\x2\x2461\x2466\a\xB2\x2\x2\x2462"+
		"\x2463\a\x30\x2\x2\x2463\x2467\a\xDD\x2\x2\x2464\x2467\a\x31D\x2\x2\x2465"+
		"\x2467\a\x39C\x2\x2\x2466\x2462\x3\x2\x2\x2\x2466\x2464\x3\x2\x2\x2\x2466"+
		"\x2465\x3\x2\x2\x2\x2466\x2467\x3\x2\x2\x2\x2467\x24DF\x3\x2\x2\x2\x2468"+
		"\x246A\a\xC0\x2\x2\x2469\x246B\a\x371\x2\x2\x246A\x2469\x3\x2\x2\x2\x246A"+
		"\x246B\x3\x2\x2\x2\x246B\x24DF\x3\x2\x2\x2\x246C\x24A2\a\xC9\x2\x2\x246D"+
		"\x24A3\a\x16\x2\x2\x246E\x246F\a\x30\x2\x2\x246F\x24A3\a\xDD\x2\x2\x2470"+
		"\x24A3\a=\x2\x2\x2471\x2472\a?\x2\x2\x2472\x24A3\a\x1EE\x2\x2\x2473\x2474"+
		"\aS\x2\x2\x2474\x24A3\a\x198\x2\x2\x2475\x24A3\a}\x2\x2\x2476\x24A3\a"+
		"\xBE\x2\x2\x2477\x247B\a\xDD\x2\x2\x2478\x2479\a\xF2\x2\x2\x2479\x247A"+
		"\a\x13B\x2\x2\x247A\x247C\a\x26B\x2\x2\x247B\x2478\x3\x2\x2\x2\x247B\x247C"+
		"\x3\x2\x2\x2\x247C\x24A3\x3\x2\x2\x2\x247D\x247E\a\xF2\x2\x2\x247E\x247F"+
		"\a\x13B\x2\x2\x247F\x24A3\a\x26B\x2\x2\x2480\x24A3\a\xF7\x2\x2\x2481\x24A3"+
		"\a\x12E\x2\x2\x2482\x2483\a\x14D\x2\x2\x2483\x24A3\a\x1FE\x2\x2\x2484"+
		"\x2485\a\x181\x2\x2\x2485\x24A3\ay\x2\x2\x2486\x24A3\a\x184\x2\x2\x2487"+
		"\x2488\a\x23A\x2\x2\x2488\x24A3\a\x3F7\x2\x2\x2489\x24A3\a\x2DC\x2\x2"+
		"\x248A\x24A3\a\x2EB\x2\x2\x248B\x248C\a\x310\x2\x2\x248C\x248D\a\x373"+
		"\x2\x2\x248D\x24A3\a\x63\x2\x2\x248E\x24A3\a\x339\x2\x2\x248F\x24A3\a"+
		"\x33D\x2\x2\x2490\x24A3\a\x34B\x2\x2\x2491\x24A3\a\x351\x2\x2\x2492\x24A3"+
		"\a\x36E\x2\x2\x2493\x2494\a\x371\x2\x2\x2494\x24A3\a\x339\x2\x2\x2495"+
		"\x24A3\a\x373\x2\x2\x2496\x2497\a\x3C6\x2\x2\x2497\x24A3\a\x1EE\x2\x2"+
		"\x2498\x24A3\a\x3C8\x2\x2\x2499\x24A3\a\x3CB\x2\x2\x249A\x249B\a\x3E3"+
		"\x2\x2\x249B\x249C\a\x13B\x2\x2\x249C\x24A3\a\x26B\x2\x2\x249D\x24A3\a"+
		"\x3F7\x2\x2\x249E\x24A3\a\x41F\x2\x2\x249F\x24A0\a\x436\x2\x2\x24A0\x24A1"+
		"\a\x351\x2\x2\x24A1\x24A3\a\x9C\x2\x2\x24A2\x246D\x3\x2\x2\x2\x24A2\x246E"+
		"\x3\x2\x2\x2\x24A2\x2470\x3\x2\x2\x2\x24A2\x2471\x3\x2\x2\x2\x24A2\x2473"+
		"\x3\x2\x2\x2\x24A2\x2475\x3\x2\x2\x2\x24A2\x2476\x3\x2\x2\x2\x24A2\x2477"+
		"\x3\x2\x2\x2\x24A2\x247D\x3\x2\x2\x2\x24A2\x2480\x3\x2\x2\x2\x24A2\x2481"+
		"\x3\x2\x2\x2\x24A2\x2482\x3\x2\x2\x2\x24A2\x2484\x3\x2\x2\x2\x24A2\x2486"+
		"\x3\x2\x2\x2\x24A2\x2487\x3\x2\x2\x2\x24A2\x2489\x3\x2\x2\x2\x24A2\x248A"+
		"\x3\x2\x2\x2\x24A2\x248B\x3\x2\x2\x2\x24A2\x248E\x3\x2\x2\x2\x24A2\x248F"+
		"\x3\x2\x2\x2\x24A2\x2490\x3\x2\x2\x2\x24A2\x2491\x3\x2\x2\x2\x24A2\x2492"+
		"\x3\x2\x2\x2\x24A2\x2493\x3\x2\x2\x2\x24A2\x2495\x3\x2\x2\x2\x24A2\x2496"+
		"\x3\x2\x2\x2\x24A2\x2498\x3\x2\x2\x2\x24A2\x2499\x3\x2\x2\x2\x24A2\x249A"+
		"\x3\x2\x2\x2\x24A2\x249D\x3\x2\x2\x2\x24A2\x249E\x3\x2\x2\x2\x24A2\x249F"+
		"\x3\x2\x2\x2\x24A3\x24DF\x3\x2\x2\x2\x24A4\x24DF\a\x100\x2\x2\x24A5\x24A9"+
		"\a\x142\x2\x2\x24A6\x24A7\a\x30\x2\x2\x24A7\x24A8\a\x14D\x2\x2\x24A8\x24AA"+
		"\a\x358\x2\x2\x24A9\x24A6\x3\x2\x2\x2\x24A9\x24AA\x3\x2\x2\x2\x24AA\x24DF"+
		"\x3\x2\x2\x2\x24AB\x24AC\a\x14D\x2\x2\x24AC\x24AD\a\t\x2\x2\x24AD\x24DF"+
		"\a=\x2\x2\x24AE\x24B1\a\x1BC\x2\x2\x24AF\x24B0\a\x30\x2\x2\x24B0\x24B2"+
		"\a\x211\x2\x2\x24B1\x24AF\x3\x2\x2\x2\x24B1\x24B2\x3\x2\x2\x2\x24B2\x24DF"+
		"\x3\x2\x2\x2\x24B3\x24DF\a\x1CE\x2\x2\x24B4\x24B5\a\x1F4\x2\x2\x24B5\x24B6"+
		"\a\xDD\x2\x2\x24B6\x24DF\a\xB3\x2\x2\x24B7\x24DF\a\x306\x2\x2\x24B8\x24DF"+
		"\a\x30B\x2\x2\x24B9\x24BD\a\x366\x2\x2\x24BA\x24BB\a\x18\x2\x2\x24BB\x24BC"+
		"\a\x40F\x2\x2\x24BC\x24BE\a\x361\x2\x2\x24BD\x24BA\x3\x2\x2\x2\x24BD\x24BE"+
		"\x3\x2\x2\x2\x24BE\x24DF\x3\x2\x2\x2\x24BF\x24DF\a\x36C\x2\x2\x24C0\x24DF"+
		"\a\x384\x2\x2\x24C1\x24DF\a\x389\x2\x2\x24C2\x24C3\a\x3BB\x2\x2\x24C3"+
		"\x24C4\a\x2E7\x2\x2\x24C4\x24DF\a\x26C\x2\x2\x24C5\x24C6\a\x3D0\x2\x2"+
		"\x24C6\x24DF\a\x2A7\x2\x2\x24C7\x24DF\a\x405\x2\x2\x24C8\x24C9\a\x407"+
		"\x2\x2\x24C9\x24DF\a=\x2\x2\x24CA\x24DF\a\x409\x2\x2\x24CB\x24DC\a\x41F"+
		"\x2\x2\x24CC\x24D3\a\x30\x2\x2\x24CD\x24D4\a\xDD\x2\x2\x24CE\x24D4\a\xFD"+
		"\x2\x2\x24CF\x24D0\a\x9D\x2\x2\x24D0\x24D1\t\xE\x2\x2\x24D1\x24D2\a\x1EE"+
		"\x2\x2\x24D2\x24D4\a\xFD\x2\x2\x24D3\x24CD\x3\x2\x2\x2\x24D3\x24CE\x3"+
		"\x2\x2\x2\x24D3\x24CF\x3\x2\x2\x2\x24D4\x24DD\x3\x2\x2\x2\x24D5\x24D6"+
		"\a\x80\x2\x2\x24D6\x24DD\a\x3E4\x2\x2\x24D7\x24D8\a\xDD\x2\x2\x24D8\x24DD"+
		"\a\x3A6\x2\x2\x24D9\x24DD\a\xFD\x2\x2\x24DA\x24DB\a\x371\x2\x2\x24DB\x24DD"+
		"\a\x3A6\x2\x2\x24DC\x24CC\x3\x2\x2\x2\x24DC\x24D5\x3\x2\x2\x2\x24DC\x24D7"+
		"\x3\x2\x2\x2\x24DC\x24D9\x3\x2\x2\x2\x24DC\x24DA\x3\x2\x2\x2\x24DD\x24DF"+
		"\x3\x2\x2\x2\x24DE\x2409\x3\x2\x2\x2\x24DE\x2411\x3\x2\x2\x2\x24DE\x245A"+
		"\x3\x2\x2\x2\x24DE\x245E\x3\x2\x2\x2\x24DE\x2460\x3\x2\x2\x2\x24DE\x2461"+
		"\x3\x2\x2\x2\x24DE\x2468\x3\x2\x2\x2\x24DE\x246C\x3\x2\x2\x2\x24DE\x24A4"+
		"\x3\x2\x2\x2\x24DE\x24A5\x3\x2\x2\x2\x24DE\x24AB\x3\x2\x2\x2\x24DE\x24AE"+
		"\x3\x2\x2\x2\x24DE\x24B3\x3\x2\x2\x2\x24DE\x24B4\x3\x2\x2\x2\x24DE\x24B7"+
		"\x3\x2\x2\x2\x24DE\x24B8\x3\x2\x2\x2\x24DE\x24B9\x3\x2\x2\x2\x24DE\x24BF"+
		"\x3\x2\x2\x2\x24DE\x24C0\x3\x2\x2\x2\x24DE\x24C1\x3\x2\x2\x2\x24DE\x24C2"+
		"\x3\x2\x2\x2\x24DE\x24C5\x3\x2\x2\x2\x24DE\x24C7\x3\x2\x2\x2\x24DE\x24C8"+
		"\x3\x2\x2\x2\x24DE\x24CA\x3\x2\x2\x2\x24DE\x24CB\x3\x2\x2\x2\x24DF\x2EB"+
		"\x3\x2\x2\x2\x24E0\x24E1\a\x37C\x2\x2\x24E1\x24E4\a\x445\x2\x2\x24E2\x24E3"+
		"\a\x459\x2\x2\x24E3\x24E5\x5\x47A\x23E\x2\x24E4\x24E2\x3\x2\x2\x2\x24E4"+
		"\x24E5\x3\x2\x2\x2\x24E5\x24E6\x3\x2\x2\x2\x24E6\x24E7\a\x44C\x2\x2\x24E7"+
		"\x24E9\x5\x35A\x1AE\x2\x24E8\x24EA\a\x463\x2\x2\x24E9\x24E8\x3\x2\x2\x2"+
		"\x24E9\x24EA\x3\x2\x2\x2\x24EA\x2508\x3\x2\x2\x2\x24EB\x24EC\a\x37C\x2"+
		"\x2\x24EC\x24ED\a\x445\x2\x2\x24ED\x24EE\x5\x482\x242\x2\x24EE\x24F0\x5"+
		"\x35A\x1AE\x2\x24EF\x24F1\a\x463\x2\x2\x24F0\x24EF\x3\x2\x2\x2\x24F0\x24F1"+
		"\x3\x2\x2\x2\x24F1\x2508\x3\x2\x2\x2\x24F2\x24F3\a\x37C\x2\x2\x24F3\x24F4"+
		"\a\x445\x2\x2\x24F4\x24F5\a\x44C\x2\x2\x24F5\x24F6\a\xD7\x2\x2\x24F6\x2501"+
		"\x5\x34E\x1A8\x2\x24F7\x24FF\a\x16F\x2\x2\x24F8\x24F9\a\x2F8\x2\x2\x24F9"+
		"\x2500\a\x28F\x2\x2\x24FA\x24FD\a\x409\x2\x2\x24FB\x24FC\a\x286\x2\x2"+
		"\x24FC\x24FE\x5\x450\x229\x2\x24FD\x24FB\x3\x2\x2\x2\x24FD\x24FE\x3\x2"+
		"\x2\x2\x24FE\x2500\x3\x2\x2\x2\x24FF\x24F8\x3\x2\x2\x2\x24FF\x24FA\x3"+
		"\x2\x2\x2\x2500\x2502\x3\x2\x2\x2\x2501\x24F7\x3\x2\x2\x2\x2501\x2502"+
		"\x3\x2\x2\x2\x2502\x2504\x3\x2\x2\x2\x2503\x2505\a\x463\x2\x2\x2504\x2503"+
		"\x3\x2\x2\x2\x2504\x2505\x3\x2\x2\x2\x2505\x2508\x3\x2\x2\x2\x2506\x2508"+
		"\x5\x354\x1AB\x2\x2507\x24E0\x3\x2\x2\x2\x2507\x24EB\x3\x2\x2\x2\x2507"+
		"\x24F2\x3\x2\x2\x2\x2507\x2506\x3\x2\x2\x2\x2508\x2ED\x3\x2\x2\x2\x2509"+
		"\x250A\a\\\x2\x2\x250A\x250B\a\x115\x2\x2\x250B\x250E\to\x2\x2\x250C\x250F"+
		"\x5\x47A\x23E\x2\x250D\x250F\a\x445\x2\x2\x250E\x250C\x3\x2\x2\x2\x250E"+
		"\x250D\x3\x2\x2\x2\x250E\x250F\x3\x2\x2\x2\x250F\x2511\x3\x2\x2\x2\x2510"+
		"\x2512\a\x463\x2\x2\x2511\x2510\x3\x2\x2\x2\x2511\x2512\x3\x2\x2\x2\x2512"+
		"\x255B\x3\x2\x2\x2\x2513\x2514\a\\\x2\x2\x2514\x251E\to\x2\x2\x2515\x2518"+
		"\x5\x47A\x23E\x2\x2516\x2518\a\x445\x2\x2\x2517\x2515\x3\x2\x2\x2\x2517"+
		"\x2516\x3\x2\x2\x2\x2518\x251C\x3\x2\x2\x2\x2519\x251A\a\x42B\x2\x2\x251A"+
		"\x251B\a\x218\x2\x2\x251B\x251D\a\x448\x2\x2\x251C\x2519\x3\x2\x2\x2\x251C"+
		"\x251D\x3\x2\x2\x2\x251D\x251F\x3\x2\x2\x2\x251E\x2517\x3\x2\x2\x2\x251E"+
		"\x251F\x3\x2\x2\x2\x251F\x2521\x3\x2\x2\x2\x2520\x2522\a\x463\x2\x2\x2521"+
		"\x2520\x3\x2\x2\x2\x2521\x2522\x3\x2\x2\x2\x2522\x255B\x3\x2\x2\x2\x2523"+
		"\x2524\a\xA6\x2\x2\x2524\x2531\to\x2\x2\x2525\x2528\x5\x47A\x23E\x2\x2526"+
		"\x2528\a\x445\x2\x2\x2527\x2525\x3\x2\x2\x2\x2527\x2526\x3\x2\x2\x2\x2528"+
		"\x252F\x3\x2\x2\x2\x2529\x252A\a\x42B\x2\x2\x252A\x252B\a\x45E\x2\x2\x252B"+
		"\x252C\a\xFF\x2\x2\x252C\x252D\a\x44C\x2\x2\x252D\x252E\t\x13\x2\x2\x252E"+
		"\x2530\a\x45F\x2\x2\x252F\x2529\x3\x2\x2\x2\x252F\x2530\x3\x2\x2\x2\x2530"+
		"\x2532\x3\x2\x2\x2\x2531\x2527\x3\x2\x2\x2\x2531\x2532\x3\x2\x2\x2\x2532"+
		"\x2534\x3\x2\x2\x2\x2533\x2535\a\x463\x2\x2\x2534\x2533\x3\x2\x2\x2\x2534"+
		"\x2535\x3\x2\x2\x2\x2535\x255B\x3\x2\x2\x2\x2536\x2538\a\xA6\x2\x2\x2537"+
		"\x2539\a\x430\x2\x2\x2538\x2537\x3\x2\x2\x2\x2538\x2539\x3\x2\x2\x2\x2539"+
		"\x253B\x3\x2\x2\x2\x253A\x253C\a\x463\x2\x2\x253B\x253A\x3\x2\x2\x2\x253B"+
		"\x253C\x3\x2\x2\x2\x253C\x255B\x3\x2\x2\x2\x253D\x253E\a\xA6\x2\x2\x253E"+
		"\x255B\x5\x47A\x23E\x2\x253F\x2540\a\x33A\x2\x2\x2540\x255B\x5\x47A\x23E"+
		"\x2\x2541\x2542\a\x33A\x2\x2\x2542\x2545\to\x2\x2\x2543\x2546\x5\x47A"+
		"\x23E\x2\x2544\x2546\a\x445\x2\x2\x2545\x2543\x3\x2\x2\x2\x2545\x2544"+
		"\x3\x2\x2\x2\x2545\x2546\x3\x2\x2\x2\x2546\x2548\x3\x2\x2\x2\x2547\x2549"+
		"\a\x463\x2\x2\x2548\x2547\x3\x2\x2\x2\x2548\x2549\x3\x2\x2\x2\x2549\x255B"+
		"\x3\x2\x2\x2\x254A\x254C\a\x33A\x2\x2\x254B\x254D\a\x430\x2\x2\x254C\x254B"+
		"\x3\x2\x2\x2\x254C\x254D\x3\x2\x2\x2\x254D\x254F\x3\x2\x2\x2\x254E\x2550"+
		"\a\x463\x2\x2\x254F\x254E\x3\x2\x2\x2\x254F\x2550\x3\x2\x2\x2\x2550\x255B"+
		"\x3\x2\x2\x2\x2551\x2552\a\x34F\x2\x2\x2552\x2555\to\x2\x2\x2553\x2556"+
		"\x5\x47A\x23E\x2\x2554\x2556\a\x445\x2\x2\x2555\x2553\x3\x2\x2\x2\x2555"+
		"\x2554\x3\x2\x2\x2\x2555\x2556\x3\x2\x2\x2\x2556\x2558\x3\x2\x2\x2\x2557"+
		"\x2559\a\x463\x2\x2\x2558\x2557\x3\x2\x2\x2\x2558\x2559\x3\x2\x2\x2\x2559"+
		"\x255B\x3\x2\x2\x2\x255A\x2509\x3\x2\x2\x2\x255A\x2513\x3\x2\x2\x2\x255A"+
		"\x2523\x3\x2\x2\x2\x255A\x2536\x3\x2\x2\x2\x255A\x253D\x3\x2\x2\x2\x255A"+
		"\x253F\x3\x2\x2\x2\x255A\x2541\x3\x2\x2\x2\x255A\x254A\x3\x2\x2\x2\x255A"+
		"\x2551\x3\x2\x2\x2\x255B\x2EF\x3\x2\x2\x2\x255C\x255E\a\x193\x2\x2\x255D"+
		"\x255F\a\x446\x2\x2\x255E\x255D\x3\x2\x2\x2\x255E\x255F\x3\x2\x2\x2\x255F"+
		"\x2F1\x3\x2\x2\x2\x2560\x2562\a\x192\x2\x2\x2561\x2563\a\x446\x2\x2\x2562"+
		"\x2561\x3\x2\x2\x2\x2562\x2563\x3\x2\x2\x2\x2563\x2F3\x3\x2\x2\x2\x2564"+
		"\x2565\a\x40D\x2\x2\x2565\x2567\x5\x47A\x23E\x2\x2566\x2568\a\x463\x2"+
		"\x2\x2567\x2566\x3\x2\x2\x2\x2567\x2568\x3\x2\x2\x2\x2568\x2F5\x3\x2\x2"+
		"\x2\x2569\x256B\a\x380\x2\x2\x256A\x256C\a\x448\x2\x2\x256B\x256A\x3\x2"+
		"\x2\x2\x256B\x256C\x3\x2\x2\x2\x256C\x2F7\x3\x2\x2\x2\x256D\x2570\a\x308"+
		"\x2\x2\x256E\x256F\a\x42B\x2\x2\x256F\x2571\a\x2A5\x2\x2\x2570\x256E\x3"+
		"\x2\x2\x2\x2570\x2571\x3\x2\x2\x2\x2571\x2F9\x3\x2\x2\x2\x2572\x2575\a"+
		"\x389\x2\x2\x2573\x2574\a\x42B\x2\x2\x2574\x2576\a\x26E\x2\x2\x2575\x2573"+
		"\x3\x2\x2\x2\x2575\x2576\x3\x2\x2\x2\x2576\x2FB\x3\x2\x2\x2\x2577\x2579"+
		"\a\x8D\x2\x2\x2578\x257A\a\x446\x2\x2\x2579\x2578\x3\x2\x2\x2\x2579\x257A"+
		"\x3\x2\x2\x2\x257A\x2FD\x3\x2\x2\x2\x257B\x257C\tp\x2\x2\x257C\x2FF\x3"+
		"\x2\x2\x2\x257D\x2596\a\x88\x2\x2\x257E\x2582\a\x45E\x2\x2\x257F\x2583"+
		"\x5\x47A\x23E\x2\x2580\x2583\a\x448\x2\x2\x2581\x2583\a\x446\x2\x2\x2582"+
		"\x257F\x3\x2\x2\x2\x2582\x2580\x3\x2\x2\x2\x2582\x2581\x3\x2\x2\x2\x2583"+
		"\x2588\x3\x2\x2\x2\x2584\x2585\a\x462\x2\x2\x2585\x2589\a\x261\x2\x2\x2586"+
		"\x2587\a\x462\x2\x2\x2587\x2589\tq\x2\x2\x2588\x2584\x3\x2\x2\x2\x2588"+
		"\x2586\x3\x2\x2\x2\x2588\x2589\x3\x2\x2\x2\x2589\x258A\x3\x2\x2\x2\x258A"+
		"\x2594\a\x45F\x2\x2\x258B\x258C\a\x42B\x2\x2\x258C\x2591\x5\x2FE\x180"+
		"\x2\x258D\x258E\a\x462\x2\x2\x258E\x2590\x5\x2FE\x180\x2\x258F\x258D\x3"+
		"\x2\x2\x2\x2590\x2593\x3\x2\x2\x2\x2591\x258F\x3\x2\x2\x2\x2591\x2592"+
		"\x3\x2\x2\x2\x2592\x2595\x3\x2\x2\x2\x2593\x2591\x3\x2\x2\x2\x2594\x258B"+
		"\x3\x2\x2\x2\x2594\x2595\x3\x2\x2\x2\x2595\x2597\x3\x2\x2\x2\x2596\x257E"+
		"\x3\x2\x2\x2\x2596\x2597\x3\x2\x2\x2\x2597\x301\x3\x2\x2\x2\x2598\x25A0"+
		"\a\x89\x2\x2\x2599\x259D\a\x45E\x2\x2\x259A\x259E\x5\x47A\x23E\x2\x259B"+
		"\x259E\a\x448\x2\x2\x259C\x259E\a\x446\x2\x2\x259D\x259A\x3\x2\x2\x2\x259D"+
		"\x259B\x3\x2\x2\x2\x259D\x259C\x3\x2\x2\x2\x259E\x259F\x3\x2\x2\x2\x259F"+
		"\x25A1\a\x45F\x2\x2\x25A0\x2599\x3\x2\x2\x2\x25A0\x25A1\x3\x2\x2\x2\x25A1"+
		"\x25A4\x3\x2\x2\x2\x25A2\x25A3\a\x42B\x2\x2\x25A3\x25A5\a\x272\x2\x2\x25A4"+
		"\x25A2\x3\x2\x2\x2\x25A4\x25A5\x3\x2\x2\x2\x25A5\x303\x3\x2\x2\x2\x25A6"+
		"\x25A7\tr\x2\x2\x25A7\x305\x3\x2\x2\x2\x25A8\x25AF\a\x8A\x2\x2\x25A9\x25AC"+
		"\a\x45E\x2\x2\x25AA\x25AD\x5\x47A\x23E\x2\x25AB\x25AD\a\x448\x2\x2\x25AC"+
		"\x25AA\x3\x2\x2\x2\x25AC\x25AB\x3\x2\x2\x2\x25AD\x25AE\x3\x2\x2\x2\x25AE"+
		"\x25B0\a\x45F\x2\x2\x25AF\x25A9\x3\x2\x2\x2\x25AF\x25B0\x3\x2\x2\x2\x25B0"+
		"\x25BA\x3\x2\x2\x2\x25B1\x25B2\a\x42B\x2\x2\x25B2\x25B7\x5\x304\x183\x2"+
		"\x25B3\x25B4\a\x462\x2\x2\x25B4\x25B6\x5\x304\x183\x2\x25B5\x25B3\x3\x2"+
		"\x2\x2\x25B6\x25B9\x3\x2\x2\x2\x25B7\x25B5\x3\x2\x2\x2\x25B7\x25B8\x3"+
		"\x2\x2\x2\x25B8\x25BB\x3\x2\x2\x2\x25B9\x25B7\x3\x2\x2\x2\x25BA\x25B1"+
		"\x3\x2\x2\x2\x25BA\x25BB\x3\x2\x2\x2\x25BB\x307\x3\x2\x2\x2\x25BC\x25C7"+
		"\a\"\x2\x2\x25BD\x25C7\a\x14B\x2\x2\x25BE\x25C7\a\x272\x2\x2\x25BF\x25C7"+
		"\a\x3CE\x2\x2\x25C0\x25C7\a\x13A\x2\x2\x25C1\x25C7\a\x2C6\x2\x2\x25C2"+
		"\x25C7\a\xE4\x2\x2\x25C3\x25C4\a\x21F\x2\x2\x25C4\x25C5\a\x44C\x2\x2\x25C5"+
		"\x25C7\a\x446\x2\x2\x25C6\x25BC\x3\x2\x2\x2\x25C6\x25BD\x3\x2\x2\x2\x25C6"+
		"\x25BE\x3\x2\x2\x2\x25C6\x25BF\x3\x2\x2\x2\x25C6\x25C0\x3\x2\x2\x2\x25C6"+
		"\x25C1\x3\x2\x2\x2\x25C6\x25C2\x3\x2\x2\x2\x25C6\x25C3\x3\x2\x2\x2\x25C7"+
		"\x309\x3\x2\x2\x2\x25C8\x25D4\a\x8B\x2\x2\x25C9\x25CD\a\x45E\x2\x2\x25CA"+
		"\x25CE\x5\x47A\x23E\x2\x25CB\x25CE\a\x448\x2\x2\x25CC\x25CE\a\x446\x2"+
		"\x2\x25CD\x25CA\x3\x2\x2\x2\x25CD\x25CB\x3\x2\x2\x2\x25CD\x25CC\x3\x2"+
		"\x2\x2\x25CE\x25D1\x3\x2\x2\x2\x25CF\x25D0\a\x462\x2\x2\x25D0\x25D2\t"+
		"s\x2\x2\x25D1\x25CF\x3\x2\x2\x2\x25D1\x25D2\x3\x2\x2\x2\x25D2\x25D3\x3"+
		"\x2\x2\x2\x25D3\x25D5\a\x45F\x2\x2\x25D4\x25C9\x3\x2\x2\x2\x25D4\x25D5"+
		"\x3\x2\x2\x2\x25D5\x25DF\x3\x2\x2\x2\x25D6\x25D7\a\x42B\x2\x2\x25D7\x25DC"+
		"\x5\x308\x185\x2\x25D8\x25D9\a\x462\x2\x2\x25D9\x25DB\x5\x308\x185\x2"+
		"\x25DA\x25D8\x3\x2\x2\x2\x25DB\x25DE\x3\x2\x2\x2\x25DC\x25DA\x3\x2\x2"+
		"\x2\x25DC\x25DD\x3\x2\x2\x2\x25DD\x25E0\x3\x2\x2\x2\x25DE\x25DC\x3\x2"+
		"\x2\x2\x25DF\x25D6\x3\x2\x2\x2\x25DF\x25E0\x3\x2\x2\x2\x25E0\x30B\x3\x2"+
		"\x2\x2\x25E1\x25EA\a\"\x2\x2\x25E2\x25EA\a\x272\x2\x2\x25E3\x25EA\a\x3CE"+
		"\x2\x2\x25E4\x25EA\a\x13A\x2\x2\x25E5\x25EA\a\x2C6\x2\x2\x25E6\x25E7\a"+
		"\x21F\x2\x2\x25E7\x25E8\a\x44C\x2\x2\x25E8\x25EA\a\x446\x2\x2\x25E9\x25E1"+
		"\x3\x2\x2\x2\x25E9\x25E2\x3\x2\x2\x2\x25E9\x25E3\x3\x2\x2\x2\x25E9\x25E4"+
		"\x3\x2\x2\x2\x25E9\x25E5\x3\x2\x2\x2\x25E9\x25E6\x3\x2\x2\x2\x25EA\x30D"+
		"\x3\x2\x2\x2\x25EB\x25F6\a\x8C\x2\x2\x25EC\x25EF\a\x45E\x2\x2\x25ED\x25F0"+
		"\a\x446\x2\x2\x25EE\x25F0\a\x448\x2\x2\x25EF\x25ED\x3\x2\x2\x2\x25EF\x25EE"+
		"\x3\x2\x2\x2\x25F0\x25F3\x3\x2\x2\x2\x25F1\x25F2\a\x462\x2\x2\x25F2\x25F4"+
		"\ts\x2\x2\x25F3\x25F1\x3\x2\x2\x2\x25F3\x25F4\x3\x2\x2\x2\x25F4\x25F5"+
		"\x3\x2\x2\x2\x25F5\x25F7\a\x45F\x2\x2\x25F6\x25EC\x3\x2\x2\x2\x25F6\x25F7"+
		"\x3\x2\x2\x2\x25F7\x2601\x3\x2\x2\x2\x25F8\x25F9\a\x42B\x2\x2\x25F9\x25FE"+
		"\x5\x30C\x187\x2\x25FA\x25FB\a\x462\x2\x2\x25FB\x25FD\x5\x30C\x187\x2"+
		"\x25FC\x25FA\x3\x2\x2\x2\x25FD\x2600\x3\x2\x2\x2\x25FE\x25FC\x3\x2\x2"+
		"\x2\x25FE\x25FF\x3\x2\x2\x2\x25FF\x2602\x3\x2\x2\x2\x2600\x25FE\x3\x2"+
		"\x2\x2\x2601\x25F8\x3\x2\x2\x2\x2601\x2602\x3\x2\x2\x2\x2602\x30F\x3\x2"+
		"\x2\x2\x2603\x2604\a\x90\x2\x2\x2604\x2605\a\x45E\x2\x2\x2605\x260E\a"+
		"\x448\x2\x2\x2606\x260C\a\x462\x2\x2\x2607\x260D\a\x261\x2\x2\x2608\x260D"+
		"\x5\x35A\x1AE\x2\x2609\x260D\a\x315\x2\x2\x260A\x260D\a\x316\x2\x2\x260B"+
		"\x260D\a\x317\x2\x2\x260C\x2607\x3\x2\x2\x2\x260C\x2608\x3\x2\x2\x2\x260C"+
		"\x2609\x3\x2\x2\x2\x260C\x260A\x3\x2\x2\x2\x260C\x260B\x3\x2\x2\x2\x260D"+
		"\x260F\x3\x2\x2\x2\x260E\x2606\x3\x2\x2\x2\x260E\x260F\x3\x2\x2\x2\x260F"+
		"\x2610\x3\x2\x2\x2\x2610\x261A\a\x45F\x2\x2\x2611\x2612\a\x42B\x2\x2\x2612"+
		"\x2617\x5\x308\x185\x2\x2613\x2614\a\x462\x2\x2\x2614\x2616\x5\x308\x185"+
		"\x2\x2615\x2613\x3\x2\x2\x2\x2616\x2619\x3\x2\x2\x2\x2617\x2615\x3\x2"+
		"\x2\x2\x2617\x2618\x3\x2\x2\x2\x2618\x261B\x3\x2\x2\x2\x2619\x2617\x3"+
		"\x2\x2\x2\x261A\x2611\x3\x2\x2\x2\x261A\x261B\x3\x2\x2\x2\x261B\x311\x3"+
		"\x2\x2\x2\x261C\x261D\a\x94\x2\x2\x261D\x2621\a\x45E\x2\x2\x261E\x2622"+
		"\x5\x47A\x23E\x2\x261F\x2622\a\x448\x2\x2\x2620\x2622\a\x446\x2\x2\x2621"+
		"\x261E\x3\x2\x2\x2\x2621\x261F\x3\x2\x2\x2\x2621\x2620\x3\x2\x2\x2\x2622"+
		"\x2623\x3\x2\x2\x2\x2623\x2626\a\x462\x2\x2\x2624\x2627\x5\x47A\x23E\x2"+
		"\x2625\x2627\a\x448\x2\x2\x2626\x2624\x3\x2\x2\x2\x2626\x2625\x3\x2\x2"+
		"\x2\x2627\x262A\x3\x2\x2\x2\x2628\x2629\a\x462\x2\x2\x2629\x262B\a\x446"+
		"\x2\x2\x262A\x2628\x3\x2\x2\x2\x262A\x262B\x3\x2\x2\x2\x262B\x262C\x3"+
		"\x2\x2\x2\x262C\x262F\a\x45F\x2\x2\x262D\x262E\a\x42B\x2\x2\x262E\x2630"+
		"\a\x272\x2\x2\x262F\x262D\x3\x2\x2\x2\x262F\x2630\x3\x2\x2\x2\x2630\x313"+
		"\x3\x2\x2\x2\x2631\x2632\tt\x2\x2\x2632\x315\x3\x2\x2\x2\x2633\x2634\a"+
		"\x96\x2\x2\x2634\x2635\a\x45E\x2\x2\x2635\x2636\x5\x47A\x23E\x2\x2636"+
		"\x2637\a\x462\x2\x2\x2637\x2638\x5\x47A\x23E\x2\x2638\x2642\a\x45F\x2"+
		"\x2\x2639\x263A\a\x42B\x2\x2\x263A\x263F\x5\x314\x18B\x2\x263B\x263C\a"+
		"\x462\x2\x2\x263C\x263E\x5\x314\x18B\x2\x263D\x263B\x3\x2\x2\x2\x263E"+
		"\x2641\x3\x2\x2\x2\x263F\x263D\x3\x2\x2\x2\x263F\x2640\x3\x2\x2\x2\x2640"+
		"\x2643\x3\x2\x2\x2\x2641\x263F\x3\x2\x2\x2\x2642\x2639\x3\x2\x2\x2\x2642"+
		"\x2643\x3\x2\x2\x2\x2643\x317\x3\x2\x2\x2\x2644\x2649\a\x2BA\x2\x2\x2645"+
		"\x2646\a\x45E\x2\x2\x2646\x2647\x5\x47A\x23E\x2\x2647\x2648\a\x45F\x2"+
		"\x2\x2648\x264A\x3\x2\x2\x2\x2649\x2645\x3\x2\x2\x2\x2649\x264A\x3\x2"+
		"\x2\x2\x264A\x264D\x3\x2\x2\x2\x264B\x264C\a\x42B\x2\x2\x264C\x264E\a"+
		"\x1B8\x2\x2\x264D\x264B\x3\x2\x2\x2\x264D\x264E\x3\x2\x2\x2\x264E\x319"+
		"\x3\x2\x2\x2\x264F\x2652\a\x2DB\x2\x2\x2650\x2651\a\x42B\x2\x2\x2651\x2653"+
		"\a\x272\x2\x2\x2652\x2650\x3\x2\x2\x2\x2652\x2653\x3\x2\x2\x2\x2653\x31B"+
		"\x3\x2\x2\x2\x2654\x2655\tu\x2\x2\x2655\x31D\x3\x2\x2\x2\x2656\x265F\a"+
		"\x383\x2\x2\x2657\x2658\a\x45E\x2\x2\x2658\x265B\x5\x35A\x1AE\x2\x2659"+
		"\x265A\a\x462\x2\x2\x265A\x265C\x5\x35A\x1AE\x2\x265B\x2659\x3\x2\x2\x2"+
		"\x265B\x265C\x3\x2\x2\x2\x265C\x265D\x3\x2\x2\x2\x265D\x265E\a\x45F\x2"+
		"\x2\x265E\x2660\x3\x2\x2\x2\x265F\x2657\x3\x2\x2\x2\x265F\x2660\x3\x2"+
		"\x2\x2\x2660\x266A\x3\x2\x2\x2\x2661\x2662\a\x42B\x2\x2\x2662\x2667\x5"+
		"\x31C\x18F\x2\x2663\x2664\a\x462\x2\x2\x2664\x2666\x5\x31C\x18F\x2\x2665"+
		"\x2663\x3\x2\x2\x2\x2666\x2669\x3\x2\x2\x2\x2667\x2665\x3\x2\x2\x2\x2667"+
		"\x2668\x3\x2\x2\x2\x2668\x266B\x3\x2\x2\x2\x2669\x2667\x3\x2\x2\x2\x266A"+
		"\x2661\x3\x2\x2\x2\x266A\x266B\x3\x2\x2\x2\x266B\x31F\x3\x2\x2\x2\x266C"+
		"\x2676\a\x388\x2\x2\x266D\x266E\a\x45E\x2\x2\x266E\x266F\a\x38E\x2\x2"+
		"\x266F\x2673\a\x44C\x2\x2\x2670\x2671\a\x446\x2\x2\x2671\x2674\t\x35\x2"+
		"\x2\x2672\x2674\a\xF7\x2\x2\x2673\x2670\x3\x2\x2\x2\x2673\x2672\x3\x2"+
		"\x2\x2\x2674\x2675\x3\x2\x2\x2\x2675\x2677\a\x45F\x2\x2\x2676\x266D\x3"+
		"\x2\x2\x2\x2676\x2677\x3\x2\x2\x2\x2677\x267A\x3\x2\x2\x2\x2678\x2679"+
		"\a\x42B\x2\x2\x2679\x267B\a\x272\x2\x2\x267A\x2678\x3\x2\x2\x2\x267A\x267B"+
		"\x3\x2\x2\x2\x267B\x321\x3\x2\x2\x2\x267C\x267D\a\xED\x2\x2\x267D\x267E"+
		"\a\x45E\x2\x2\x267E\x2685\x5\x47E\x240\x2\x267F\x2680\a\x462\x2\x2\x2680"+
		"\x2683\x5\x47E\x240\x2\x2681\x2682\a\x462\x2\x2\x2682\x2684\x5\x35A\x1AE"+
		"\x2\x2683\x2681\x3\x2\x2\x2\x2683\x2684\x3\x2\x2\x2\x2684\x2686\x3\x2"+
		"\x2\x2\x2685\x267F\x3\x2\x2\x2\x2685\x2686\x3\x2\x2\x2\x2686\x2687\x3"+
		"\x2\x2\x2\x2687\x268A\a\x45F\x2\x2\x2688\x2689\a\x42B\x2\x2\x2689\x268B"+
		"\a\x272\x2\x2\x268A\x2688\x3\x2\x2\x2\x268A\x268B\x3\x2\x2\x2\x268B\x323"+
		"\x3\x2\x2\x2\x268C\x268D\x5\x47A\x23E\x2\x268D\x268E\a\x45E\x2\x2\x268E"+
		"\x268F\a\x17B\x2\x2\x268F\x2692\a\x45F\x2\x2\x2690\x2691\a\x42B\x2\x2"+
		"\x2691\x2693\a\x272\x2\x2\x2692\x2690\x3\x2\x2\x2\x2692\x2693\x3\x2\x2"+
		"\x2\x2693\x325\x3\x2\x2\x2\x2694\x2699\a\x11D\x2\x2\x2695\x2696\a\x45E"+
		"\x2\x2\x2696\x269A\a\xAD\x2\x2\x2697\x2698\a\x18\x2\x2\x2698\x269A\a\x45F"+
		"\x2\x2\x2699\x2695\x3\x2\x2\x2\x2699\x2697\x3\x2\x2\x2\x2699\x269A\x3"+
		"\x2\x2\x2\x269A\x269D\x3\x2\x2\x2\x269B\x269C\a\x42B\x2\x2\x269C\x269E"+
		"\a\x272\x2\x2\x269D\x269B\x3\x2\x2\x2\x269D\x269E\x3\x2\x2\x2\x269E\x327"+
		"\x3\x2\x2\x2\x269F\x26AF\a\xEC\x2\x2\x26A0\x26B0\x5\x300\x181\x2\x26A1"+
		"\x26B0\x5\x302\x182\x2\x26A2\x26B0\x5\x306\x184\x2\x26A3\x26B0\x5\x30A"+
		"\x186\x2\x26A4\x26B0\x5\x30E\x188\x2\x26A5\x26B0\x5\x310\x189\x2\x26A6"+
		"\x26B0\x5\x312\x18A\x2\x26A7\x26B0\x5\x316\x18C\x2\x26A8\x26B0\x5\x322"+
		"\x192\x2\x26A9\x26B0\x5\x324\x193\x2\x26AA\x26B0\x5\x326\x194\x2\x26AB"+
		"\x26B0\x5\x318\x18D\x2\x26AC\x26B0\x5\x31A\x18E\x2\x26AD\x26B0\x5\x31E"+
		"\x190\x2\x26AE\x26B0\x5\x320\x191\x2\x26AF\x26A0\x3\x2\x2\x2\x26AF\x26A1"+
		"\x3\x2\x2\x2\x26AF\x26A2\x3\x2\x2\x2\x26AF\x26A3\x3\x2\x2\x2\x26AF\x26A4"+
		"\x3\x2\x2\x2\x26AF\x26A5\x3\x2\x2\x2\x26AF\x26A6\x3\x2\x2\x2\x26AF\x26A7"+
		"\x3\x2\x2\x2\x26AF\x26A8\x3\x2\x2\x2\x26AF\x26A9\x3\x2\x2\x2\x26AF\x26AA"+
		"\x3\x2\x2\x2\x26AF\x26AB\x3\x2\x2\x2\x26AF\x26AC\x3\x2\x2\x2\x26AF\x26AD"+
		"\x3\x2\x2\x2\x26AF\x26AE\x3\x2\x2\x2\x26B0\x329\x3\x2\x2\x2\x26B1\x26B2"+
		"\a\x142\x2\x2\x26B2\x26B3\a:\x2\x2\x26B3\x26B4\tv\x2\x2\x26B4\x32B\x3"+
		"\x2\x2\x2\x26B5\x26B7\a\x445\x2\x2\x26B6\x26B8\a:\x2\x2\x26B7\x26B6\x3"+
		"\x2\x2\x2\x26B7\x26B8\x3\x2\x2\x2\x26B8\x26BB\x3\x2\x2\x2\x26B9\x26BC"+
		"\x5\x43C\x21F\x2\x26BA\x26BC\x5\x470\x239\x2\x26BB\x26B9\x3\x2\x2\x2\x26BB"+
		"\x26BA\x3\x2\x2\x2\x26BC\x26BF\x3\x2\x2\x2\x26BD\x26BE\a\x44C\x2\x2\x26BE"+
		"\x26C0\x5\x35A\x1AE\x2\x26BF\x26BD\x3\x2\x2\x2\x26BF\x26C0\x3\x2\x2\x2"+
		"\x26C0\x32D\x3\x2\x2\x2\x26C1\x26C2\a\x3CB\x2\x2\x26C2\x26C3\a\x45E\x2"+
		"\x2\x26C3\x26CA\x5\x336\x19C\x2\x26C4\x26C6\a\x462\x2\x2\x26C5\x26C4\x3"+
		"\x2\x2\x2\x26C5\x26C6\x3\x2\x2\x2\x26C6\x26C7\x3\x2\x2\x2\x26C7\x26C9"+
		"\x5\x330\x199\x2\x26C8\x26C5\x3\x2\x2\x2\x26C9\x26CC\x3\x2\x2\x2\x26CA"+
		"\x26C8\x3\x2\x2\x2\x26CA\x26CB\x3\x2\x2\x2\x26CB\x26CD\x3\x2\x2\x2\x26CC"+
		"\x26CA\x3\x2\x2\x2\x26CD\x26CE\a\x45F\x2\x2\x26CE\x32F\x3\x2\x2\x2\x26CF"+
		"\x26D0\a\x2D1\x2\x2\x26D0\x26D4\a\x1EE\x2\x2\x26D1\x26D2\a\x1C4\x2\x2"+
		"\x26D2\x26D4\x5\x47A\x23E\x2\x26D3\x26CF\x3\x2\x2\x2\x26D3\x26D1\x3\x2"+
		"\x2\x2\x26D4\x26D6\x3\x2\x2\x2\x26D5\x26D7\tw\x2\x2\x26D6\x26D5\x3\x2"+
		"\x2\x2\x26D6\x26D7\x3\x2\x2\x2\x26D7\x26DA\x3\x2\x2\x2\x26D8\x26DA\a\x401"+
		"\x2\x2\x26D9\x26D3\x3\x2\x2\x2\x26D9\x26D8\x3\x2\x2\x2\x26DA\x26DB\x3"+
		"\x2\x2\x2\x26DB\x26DC\a\x45E\x2\x2\x26DC\x26DD\x5\x44A\x226\x2\x26DD\x26DE"+
		"\a\x45F\x2\x2\x26DE\x26E5\x3\x2\x2\x2\x26DF\x26E0\a\x87\x2\x2\x26E0\x26E1"+
		"\a\x45E\x2\x2\x26E1\x26E2\x5\x372\x1BA\x2\x26E2\x26E3\a\x45F\x2\x2\x26E3"+
		"\x26E5\x3\x2\x2\x2\x26E4\x26D9\x3\x2\x2\x2\x26E4\x26DF\x3\x2\x2\x2\x26E5"+
		"\x331\x3\x2\x2\x2\x26E6\x26E7\a\x436\x2\x2\x26E7\x26E9\a\x45E\x2\x2\x26E8"+
		"\x26EA\tx\x2\x2\x26E9\x26E8\x3\x2\x2\x2\x26E9\x26EA\x3\x2\x2\x2\x26EA"+
		"\x26EB\x3\x2\x2\x2\x26EB\x26EC\x5\x334\x19B\x2\x26EC\x26ED\a\x45F\x2\x2"+
		"\x26ED\x333\x3\x2\x2\x2\x26EE\x26EF\a\x447\x2\x2\x26EF\x26F0\a\x459\x2"+
		"\x2\x26F0\x26F1\a\x447\x2\x2\x26F1\x335\x3\x2\x2\x2\x26F2\x26F9\x5\x338"+
		"\x19D\x2\x26F3\x26F5\a\x462\x2\x2\x26F4\x26F3\x3\x2\x2\x2\x26F4\x26F5"+
		"\x3\x2\x2\x2\x26F5\x26F6\x3\x2\x2\x2\x26F6\x26F8\x5\x338\x19D\x2\x26F7"+
		"\x26F4\x3\x2\x2\x2\x26F8\x26FB\x3\x2\x2\x2\x26F9\x26F7\x3\x2\x2\x2\x26F9"+
		"\x26FA\x3\x2\x2\x2\x26FA\x337\x3\x2\x2\x2\x26FB\x26F9\x3\x2\x2\x2\x26FC"+
		"\x2700\x5\x33A\x19E\x2\x26FD\x2700\x5\x33C\x19F\x2\x26FE\x2700\x5\x340"+
		"\x1A1\x2\x26FF\x26FC\x3\x2\x2\x2\x26FF\x26FD\x3\x2\x2\x2\x26FF\x26FE\x3"+
		"\x2\x2\x2\x2700\x339\x3\x2\x2\x2\x2701\x270D\x5\x47A\x23E\x2\x2702\x2703"+
		"\x5\x47A\x23E\x2\x2703\x2704\a\x459\x2\x2\x2704\x2706\x3\x2\x2\x2\x2705"+
		"\x2702\x3\x2\x2\x2\x2705\x2706\x3\x2\x2\x2\x2706\x2707\x3\x2\x2\x2\x2707"+
		"\x270E\x5\x470\x239\x2\x2708\x2709\a:\x2\x2\x2709\x270B\x5\x35A\x1AE\x2"+
		"\x270A\x270C\a\x2C1\x2\x2\x270B\x270A\x3\x2\x2\x2\x270B\x270C\x3\x2\x2"+
		"\x2\x270C\x270E\x3\x2\x2\x2\x270D\x2705\x3\x2\x2\x2\x270D\x2708\x3\x2"+
		"\x2\x2\x270E\x2711\x3\x2\x2\x2\x270F\x2710\a\x9B\x2\x2\x2710\x2712\x5"+
		"\x47A\x23E\x2\x2711\x270F\x3\x2\x2\x2\x2711\x2712\x3\x2\x2\x2\x2712\x2714"+
		"\x3\x2\x2\x2\x2713\x2715\x5\x458\x22D\x2\x2714\x2713\x3\x2\x2\x2\x2714"+
		"\x2715\x3\x2\x2\x2\x2715\x272B\x3\x2\x2\x2\x2716\x2717\a\xB5\x2\x2\x2717"+
		"\x2719\x5\x47A\x23E\x2\x2718\x2716\x3\x2\x2\x2\x2718\x2719\x3\x2\x2\x2"+
		"\x2719\x271A\x3\x2\x2\x2\x271A\x271C\x5\x45A\x22E\x2\x271B\x271D\x5\x45A"+
		"\x22E\x2\x271C\x271B\x3\x2\x2\x2\x271C\x271D\x3\x2\x2\x2\x271D\x272C\x3"+
		"\x2\x2\x2\x271E\x2724\a\x1AD\x2\x2\x271F\x2720\a\x45E\x2\x2\x2720\x2721"+
		"\a\x446\x2\x2\x2721\x2722\a\x462\x2\x2\x2722\x2723\a\x446\x2\x2\x2723"+
		"\x2725\a\x45F\x2\x2\x2724\x271F\x3\x2\x2\x2\x2724\x2725\x3\x2\x2\x2\x2725"+
		"\x2729\x3\x2\x2\x2\x2726\x2727\a\x26A\x2\x2\x2727\x2728\a\x16F\x2\x2\x2728"+
		"\x272A\a\x31D\x2\x2\x2729\x2726\x3\x2\x2\x2\x2729\x272A\x3\x2\x2\x2\x272A"+
		"\x272C\x3\x2\x2\x2\x272B\x2718\x3\x2\x2\x2\x272B\x271E\x3\x2\x2\x2\x272B"+
		"\x272C\x3\x2\x2\x2\x272C\x272E\x3\x2\x2\x2\x272D\x272F\a\x342\x2\x2\x272E"+
		"\x272D\x3\x2\x2\x2\x272E\x272F\x3\x2\x2\x2\x272F\x2733\x3\x2\x2\x2\x2730"+
		"\x2732\x5\x33E\x1A0\x2\x2731\x2730\x3\x2\x2\x2\x2732\x2735\x3\x2\x2\x2"+
		"\x2733\x2731\x3\x2\x2\x2\x2733\x2734\x3\x2\x2\x2\x2734\x273E\x3\x2\x2"+
		"\x2\x2735\x2733\x3\x2\x2\x2\x2736\x273C\a\x1AD\x2\x2\x2737\x2738\a\x45E"+
		"\x2\x2\x2738\x2739\a\x446\x2\x2\x2739\x273A\a\x462\x2\x2\x273A\x273B\a"+
		"\x446\x2\x2\x273B\x273D\a\x45F\x2\x2\x273C\x2737\x3\x2\x2\x2\x273C\x273D"+
		"\x3\x2\x2\x2\x273D\x273F\x3\x2\x2\x2\x273E\x2736\x3\x2\x2\x2\x273E\x273F"+
		"\x3\x2\x2\x2\x273F\x33B\x3\x2\x2\x2\x2740\x2741\x5\x47A\x23E\x2\x2741"+
		"\x2742\ty\x2\x2\x2742\x2746\x5\x35A\x1AE\x2\x2743\x2747\a\x21D\x2\x2\x2744"+
		"\x2745\a\x26A\x2\x2\x2745\x2747\a\x21D\x2\x2\x2746\x2743\x3\x2\x2\x2\x2746"+
		"\x2744\x3\x2\x2\x2\x2746\x2747\x3\x2\x2\x2\x2747\x33D\x3\x2\x2\x2\x2748"+
		"\x2749\a\xB5\x2\x2\x2749\x274B\x5\x47A\x23E\x2\x274A\x2748\x3\x2\x2\x2"+
		"\x274A\x274B\x3\x2\x2\x2\x274B\x2771\x3\x2\x2\x2\x274C\x274D\a\x2D1\x2"+
		"\x2\x274D\x2750\a\x1EE\x2\x2\x274E\x2750\a\x401\x2\x2\x274F\x274C\x3\x2"+
		"\x2\x2\x274F\x274E\x3\x2\x2\x2\x2750\x2752\x3\x2\x2\x2\x2751\x2753\x5"+
		"\x456\x22C\x2\x2752\x2751\x3\x2\x2\x2\x2752\x2753\x3\x2\x2\x2\x2753\x2755"+
		"\x3\x2\x2\x2\x2754\x2756\x5\x348\x1A5\x2\x2755\x2754\x3\x2\x2\x2\x2755"+
		"\x2756\x3\x2\x2\x2\x2756\x2772\x3\x2\x2\x2\x2757\x275B\a\x87\x2\x2\x2758"+
		"\x2759\a\x26A\x2\x2\x2759\x275A\a\x16F\x2\x2\x275A\x275C\a\x31D\x2\x2"+
		"\x275B\x2758\x3\x2\x2\x2\x275B\x275C\x3\x2\x2\x2\x275C\x275D\x3\x2\x2"+
		"\x2\x275D\x275E\a\x45E\x2\x2\x275E\x275F\x5\x372\x1BA\x2\x275F\x2760\a"+
		"\x45F\x2\x2\x2760\x2772\x3\x2\x2\x2\x2761\x2762\a\x177\x2\x2\x2762\x2764"+
		"\a\x1EE\x2\x2\x2763\x2761\x3\x2\x2\x2\x2763\x2764\x3\x2\x2\x2\x2764\x2765"+
		"\x3\x2\x2\x2\x2765\x2766\a\x30B\x2\x2\x2766\x2767\x5\x43C\x21F\x2\x2767"+
		"\x2768\a\x45E\x2\x2\x2768\x2769\x5\x450\x229\x2\x2769\x276B\a\x45F\x2"+
		"\x2\x276A\x276C\x5\x344\x1A3\x2\x276B\x276A\x3\x2\x2\x2\x276B\x276C\x3"+
		"\x2\x2\x2\x276C\x276E\x3\x2\x2\x2\x276D\x276F\x5\x346\x1A4\x2\x276E\x276D"+
		"\x3\x2\x2\x2\x276E\x276F\x3\x2\x2\x2\x276F\x2772\x3\x2\x2\x2\x2770\x2772"+
		"\x5\x458\x22D\x2\x2771\x274F\x3\x2\x2\x2\x2771\x2757\x3\x2\x2\x2\x2771"+
		"\x2763\x3\x2\x2\x2\x2771\x2770\x3\x2\x2\x2\x2772\x33F\x3\x2\x2\x2\x2773"+
		"\x2774\a\xB5\x2\x2\x2774\x2776\x5\x47A\x23E\x2\x2775\x2773\x3\x2\x2\x2"+
		"\x2775\x2776\x3\x2\x2\x2\x2776\x27AB\x3\x2\x2\x2\x2777\x2778\a\x2D1\x2"+
		"\x2\x2778\x277B\a\x1EE\x2\x2\x2779\x277B\a\x401\x2\x2\x277A\x2777\x3\x2"+
		"\x2\x2\x277A\x2779\x3\x2\x2\x2\x277B\x277D\x3\x2\x2\x2\x277C\x277E\x5"+
		"\x456\x22C\x2\x277D\x277C\x3\x2\x2\x2\x277D\x277E\x3\x2\x2\x2\x277E\x277F"+
		"\x3\x2\x2\x2\x277F\x2780\a\x45E\x2\x2\x2780\x2781\x5\x44A\x226\x2\x2781"+
		"\x2783\a\x45F\x2\x2\x2782\x2784\x5\x348\x1A5\x2\x2783\x2782\x3\x2\x2\x2"+
		"\x2783\x2784\x3\x2\x2\x2\x2784\x2787\x3\x2\x2\x2\x2785\x2786\a\x28D\x2"+
		"\x2\x2786\x2788\x5\x47A\x23E\x2\x2787\x2785\x3\x2\x2\x2\x2787\x2788\x3"+
		"\x2\x2\x2\x2788\x27AC\x3\x2\x2\x2\x2789\x278D\a\x87\x2\x2\x278A\x278B"+
		"\a\x26A\x2\x2\x278B\x278C\a\x16F\x2\x2\x278C\x278E\a\x31D\x2\x2\x278D"+
		"\x278A\x3\x2\x2\x2\x278D\x278E\x3\x2\x2\x2\x278E\x278F\x3\x2\x2\x2\x278F"+
		"\x2790\a\x45E\x2\x2\x2790\x2791\x5\x372\x1BA\x2\x2791\x2792\a\x45F\x2"+
		"\x2\x2792\x27AC\x3\x2\x2\x2\x2793\x2794\a\xF7\x2\x2\x2794\x2795\x5\x342"+
		"\x1A2\x2\x2795\x2796\a\x16F\x2\x2\x2796\x2797\x5\x47A\x23E\x2\x2797\x27AC"+
		"\x3\x2\x2\x2\x2798\x2799\a\x177\x2\x2\x2799\x279A\a\x1EE\x2\x2\x279A\x279B"+
		"\a\x45E\x2\x2\x279B\x279C\x5\x450\x229\x2\x279C\x279D\a\x45F\x2\x2\x279D"+
		"\x279E\a\x30B\x2\x2\x279E\x27A3\x5\x43C\x21F\x2\x279F\x27A0\a\x45E\x2"+
		"\x2\x27A0\x27A1\x5\x450\x229\x2\x27A1\x27A2\a\x45F\x2\x2\x27A2\x27A4\x3"+
		"\x2\x2\x2\x27A3\x279F\x3\x2\x2\x2\x27A3\x27A4\x3\x2\x2\x2\x27A4\x27A6"+
		"\x3\x2\x2\x2\x27A5\x27A7\x5\x344\x1A3\x2\x27A6\x27A5\x3\x2\x2\x2\x27A6"+
		"\x27A7\x3\x2\x2\x2\x27A7\x27A9\x3\x2\x2\x2\x27A8\x27AA\x5\x346\x1A4\x2"+
		"\x27A9\x27A8\x3\x2\x2\x2\x27A9\x27AA\x3\x2\x2\x2\x27AA\x27AC\x3\x2\x2"+
		"\x2\x27AB\x277A\x3\x2\x2\x2\x27AB\x2789\x3\x2\x2\x2\x27AB\x2793\x3\x2"+
		"\x2\x2\x27AB\x2798\x3\x2\x2\x2\x27AC\x341\x3\x2\x2\x2\x27AD\x27DE\a\x27A"+
		"\x2\x2\x27AE\x27DE\a\x448\x2\x2\x27AF\x27DE\a\x469\x2\x2\x27B0\x27DE\x5"+
		"\x3D4\x1EB\x2\x27B1\x27B3\a\x46A\x2\x2\x27B2\x27B1\x3\x2\x2\x2\x27B2\x27B3"+
		"\x3\x2\x2\x2\x27B3\x27B5\x3\x2\x2\x2\x27B4\x27B6\a\x446\x2\x2\x27B5\x27B4"+
		"\x3\x2\x2\x2\x27B6\x27B7\x3\x2\x2\x2\x27B7\x27B5\x3\x2\x2\x2\x27B7\x27B8"+
		"\x3\x2\x2\x2\x27B8\x27DE\x3\x2\x2\x2\x27B9\x27BA\a\x45E\x2\x2\x27BA\x27BB"+
		"\x5\x342\x1A2\x2\x27BB\x27BC\a\x45F\x2\x2\x27BC\x27DE\x3\x2\x2\x2\x27BD"+
		"\x27BE\a\x45E\x2\x2\x27BE\x27BF\a\x45E\x2\x2\x27BF\x27C1\a\x45E\x2\x2"+
		"\x27C0\x27C2\a\x446\x2\x2\x27C1\x27C0\x3\x2\x2\x2\x27C2\x27C3\x3\x2\x2"+
		"\x2\x27C3\x27C1\x3\x2\x2\x2\x27C3\x27C4\x3\x2\x2\x2\x27C4\x27C5\x3\x2"+
		"\x2\x2\x27C5\x27C6\a\x45F\x2\x2\x27C6\x27C7\a\x467\x2\x2\x27C7\x27C9\a"+
		"\x45E\x2\x2\x27C8\x27CA\a\x446\x2\x2\x27C9\x27C8\x3\x2\x2\x2\x27CA\x27CB"+
		"\x3\x2\x2\x2\x27CB\x27C9\x3\x2\x2\x2\x27CB\x27CC\x3\x2\x2\x2\x27CC\x27CD"+
		"\x3\x2\x2\x2\x27CD\x27CE\a\x45F\x2\x2\x27CE\x27CF\a\x45F\x2\x2\x27CF\x27D0"+
		"\a\x467\x2\x2\x27D0\x27D2\a\x45E\x2\x2\x27D1\x27D3\a\x446\x2\x2\x27D2"+
		"\x27D1\x3\x2\x2\x2\x27D3\x27D4\x3\x2\x2\x2\x27D4\x27D2\x3\x2\x2\x2\x27D4"+
		"\x27D5\x3\x2\x2\x2\x27D5\x27D6\x3\x2\x2\x2\x27D6\x27D7\a\x45F\x2\x2\x27D7"+
		"\x27DE\a\x45F\x2\x2\x27D8\x27D9\a\x258\x2\x2\x27D9\x27DA\a\x415\x2\x2"+
		"\x27DA\x27DB\a\x16F\x2\x2\x27DB\x27DE\x5\x43C\x21F\x2\x27DC\x27DE\x5\x35A"+
		"\x1AE\x2\x27DD\x27AD\x3\x2\x2\x2\x27DD\x27AE\x3\x2\x2\x2\x27DD\x27AF\x3"+
		"\x2\x2\x2\x27DD\x27B0\x3\x2\x2\x2\x27DD\x27B2\x3\x2\x2\x2\x27DD\x27B9"+
		"\x3\x2\x2\x2\x27DD\x27BD\x3\x2\x2\x2\x27DD\x27D8\x3\x2\x2\x2\x27DD\x27DC"+
		"\x3\x2\x2\x2\x27DE\x343\x3\x2\x2\x2\x27DF\x27E0\a\x28D\x2\x2\x27E0\x27E8"+
		"\a\x100\x2\x2\x27E1\x27E2\a\x259\x2\x2\x27E2\x27E9\a\n\x2\x2\x27E3\x27E9"+
		"\av\x2\x2\x27E4\x27E5\a\x37C\x2\x2\x27E5\x27E9\a\x27A\x2\x2\x27E6\x27E7"+
		"\a\x37C\x2\x2\x27E7\x27E9\a\xF7\x2\x2\x27E8\x27E1\x3\x2\x2\x2\x27E8\x27E3"+
		"\x3\x2\x2\x2\x27E8\x27E4\x3\x2\x2\x2\x27E8\x27E6\x3\x2\x2\x2\x27E9\x345"+
		"\x3\x2\x2\x2\x27EA\x27EB\a\x28D\x2\x2\x27EB\x27F3\a\x409\x2\x2\x27EC\x27ED"+
		"\a\x259\x2\x2\x27ED\x27F4\a\n\x2\x2\x27EE\x27F4\av\x2\x2\x27EF\x27F0\a"+
		"\x37C\x2\x2\x27F0\x27F4\a\x27A\x2\x2\x27F1\x27F2\a\x37C\x2\x2\x27F2\x27F4"+
		"\a\xF7\x2\x2\x27F3\x27EC\x3\x2\x2\x2\x27F3\x27EE\x3\x2\x2\x2\x27F3\x27EF"+
		"\x3\x2\x2\x2\x27F3\x27F1\x3\x2\x2\x2\x27F4\x347\x3\x2\x2\x2\x27F5\x27F6"+
		"\a\x42B\x2\x2\x27F6\x27F7\a\x45E\x2\x2\x27F7\x27FC\x5\x34A\x1A6\x2\x27F8"+
		"\x27F9\a\x462\x2\x2\x27F9\x27FB\x5\x34A\x1A6\x2\x27FA\x27F8\x3\x2\x2\x2"+
		"\x27FB\x27FE\x3\x2\x2\x2\x27FC\x27FA\x3\x2\x2\x2\x27FC\x27FD\x3\x2\x2"+
		"\x2\x27FD\x27FF\x3\x2\x2\x2\x27FE\x27FC\x3\x2\x2\x2\x27FF\x2800\a\x45F"+
		"\x2\x2\x2800\x349\x3\x2\x2\x2\x2801\x2804\x5\x47C\x23F\x2\x2802\x2804"+
		"\x5\x478\x23D\x2\x2803\x2801\x3\x2\x2\x2\x2803\x2802\x3\x2\x2\x2\x2804"+
		"\x2805\x3\x2\x2\x2\x2805\x280A\a\x44C\x2\x2\x2806\x280B\x5\x47C\x23F\x2"+
		"\x2807\x280B\x5\x478\x23D\x2\x2808\x280B\x5\x454\x22B\x2\x2809\x280B\a"+
		"\x446\x2\x2\x280A\x2806\x3\x2\x2\x2\x280A\x2807\x3\x2\x2\x2\x280A\x2808"+
		"\x3\x2\x2\x2\x280A\x2809\x3\x2\x2\x2\x280B\x34B\x3\x2\x2\x2\x280C\x280D"+
		"\a\xF4\x2\x2\x280D\x280E\x5\x452\x22A\x2\x280E\x281C\a\xD7\x2\x2\x280F"+
		"\x281A\x5\x34E\x1A8\x2\x2810\x2818\a\x16F\x2\x2\x2811\x2814\a\x409\x2"+
		"\x2\x2812\x2813\a\x286\x2\x2\x2813\x2815\x5\x450\x229\x2\x2814\x2812\x3"+
		"\x2\x2\x2\x2814\x2815\x3\x2\x2\x2\x2815\x2819\x3\x2\x2\x2\x2816\x2817"+
		"\a\x2F8\x2\x2\x2817\x2819\a\x28F\x2\x2\x2818\x2811\x3\x2\x2\x2\x2818\x2816"+
		"\x3\x2\x2\x2\x2818\x2819\x3\x2\x2\x2\x2819\x281B\x3\x2\x2\x2\x281A\x2810"+
		"\x3\x2\x2\x2\x281A\x281B\x3\x2\x2\x2\x281B\x281D\x3\x2\x2\x2\x281C\x280F"+
		"\x3\x2\x2\x2\x281C\x281D\x3\x2\x2\x2\x281D\x2835\x3\x2\x2\x2\x281E\x2820"+
		"\tz\x2\x2\x281F\x281E\x3\x2\x2\x2\x281F\x2820\x3\x2\x2\x2\x2820\x2822"+
		"\x3\x2\x2\x2\x2821\x2823\a\x359\x2\x2\x2822\x2821\x3\x2\x2\x2\x2822\x2823"+
		"\x3\x2\x2\x2\x2823\x2824\x3\x2\x2\x2\x2824\x2825\a\xD7\x2\x2\x2825\x2826"+
		"\a\x16F\x2\x2\x2826\x282F\x5\x1E4\xF3\x2\x2827\x282D\a\x16F\x2\x2\x2828"+
		"\x2829\a\x2F8\x2\x2\x2829\x282E\a\x28F\x2\x2\x282A\x282E\a\x409\x2\x2"+
		"\x282B\x282C\a\x286\x2\x2\x282C\x282E\x5\x450\x229\x2\x282D\x2828\x3\x2"+
		"\x2\x2\x282D\x282A\x3\x2\x2\x2\x282D\x282B\x3\x2\x2\x2\x282E\x2830\x3"+
		"\x2\x2\x2\x282F\x2827\x3\x2\x2\x2\x282F\x2830\x3\x2\x2\x2\x2830\x2832"+
		"\x3\x2\x2\x2\x2831\x2833\a\x463\x2\x2\x2832\x2831\x3\x2\x2\x2\x2832\x2833"+
		"\x3\x2\x2\x2\x2833\x2835\x3\x2\x2\x2\x2834\x280C\x3\x2\x2\x2\x2834\x281F"+
		"\x3\x2\x2\x2\x2835\x34D\x3\x2\x2\x2\x2836\x2838\x5\x350\x1A9\x2\x2837"+
		"\x2836\x3\x2\x2\x2\x2838\x283B\x3\x2\x2\x2\x2839\x2837\x3\x2\x2\x2\x2839"+
		"\x283A\x3\x2\x2\x2\x283A\x283C\x3\x2\x2\x2\x283B\x2839\x3\x2\x2\x2\x283C"+
		"\x283D\a\x16F\x2\x2\x283D\x283E\x5\x1E4\xF3\x2\x283E\x34F\x3\x2\x2\x2"+
		"\x283F\x2845\tO\x2\x2\x2840\x2845\t{\x2\x2\x2841\x2845\t|\x2\x2\x2842"+
		"\x2845\t}\x2\x2\x2843\x2845\a\x3FB\x2\x2\x2844\x283F\x3\x2\x2\x2\x2844"+
		"\x2840\x3\x2\x2\x2\x2844\x2841\x3\x2\x2\x2\x2844\x2842\x3\x2\x2\x2\x2844"+
		"\x2843\x3\x2\x2\x2\x2845\x351\x3\x2\x2\x2\x2846\x2850\a\x158\x2\x2\x2847"+
		"\x284E\a\x258\x2\x2\x2848\x284E\a\x2D4\x2\x2\x2849\x284E\a\x16B\x2\x2"+
		"\x284A\x284E\a\x1F7\x2\x2\x284B\x284C\t~\x2\x2\x284C\x284E\x5\x35A\x1AE"+
		"\x2\x284D\x2847\x3\x2\x2\x2\x284D\x2848\x3\x2\x2\x2\x284D\x2849\x3\x2"+
		"\x2\x2\x284D\x284A\x3\x2\x2\x2\x284D\x284B\x3\x2\x2\x2\x284D\x284E\x3"+
		"\x2\x2\x2\x284E\x284F\x3\x2\x2\x2\x284F\x2851\a\x17E\x2\x2\x2850\x284D"+
		"\x3\x2\x2\x2\x2850\x2851\x3\x2\x2\x2\x2851\x2853\x3\x2\x2\x2\x2852\x2854"+
		"\a\x191\x2\x2\x2853\x2852\x3\x2\x2\x2\x2853\x2854\x3\x2\x2\x2\x2854\x2855"+
		"\x3\x2\x2\x2\x2855\x285F\x5\x452\x22A\x2\x2856\x2857\a\x1D3\x2\x2\x2857"+
		"\x285C\a\x445\x2\x2\x2858\x2859\a\x462\x2\x2\x2859\x285B\a\x445\x2\x2"+
		"\x285A\x2858\x3\x2\x2\x2\x285B\x285E\x3\x2\x2\x2\x285C\x285A\x3\x2\x2"+
		"\x2\x285C\x285D\x3\x2\x2\x2\x285D\x2860\x3\x2\x2\x2\x285E\x285C\x3\x2"+
		"\x2\x2\x285F\x2856\x3\x2\x2\x2\x285F\x2860\x3\x2\x2\x2\x2860\x2862\x3"+
		"\x2\x2\x2\x2861\x2863\a\x463\x2\x2\x2862\x2861\x3\x2\x2\x2\x2862\x2863"+
		"\x3\x2\x2\x2\x2863\x353\x3\x2\x2\x2\x2864\x2865\a\x37C\x2\x2\x2865\x2869"+
		"\x5\x47A\x23E\x2\x2866\x286A\x5\x47A\x23E\x2\x2867\x286A\x5\x358\x1AD"+
		"\x2\x2868\x286A\x5\x454\x22B\x2\x2869\x2866\x3\x2\x2\x2\x2869\x2867\x3"+
		"\x2\x2\x2\x2869\x2868\x3\x2\x2\x2\x286A\x286C\x3\x2\x2\x2\x286B\x286D"+
		"\a\x463\x2\x2\x286C\x286B\x3\x2\x2\x2\x286C\x286D\x3\x2\x2\x2\x286D\x28A2"+
		"\x3\x2\x2\x2\x286E\x286F\a\x37C\x2\x2\x286F\x2870\a\x3A8\x2\x2\x2870\x2871"+
		"\t\x7F\x2\x2\x2871\x2873\x5\x454\x22B\x2\x2872\x2874\a\x463\x2\x2\x2873"+
		"\x2872\x3\x2\x2\x2\x2873\x2874\x3\x2\x2\x2\x2874\x28A2\x3\x2\x2\x2\x2875"+
		"\x2876\a\x37C\x2\x2\x2876\x2877\a\x33F\x2\x2\x2877\x2879\t\x2\x2\x2\x2878"+
		"\x287A\a\x463\x2\x2\x2879\x2878\x3\x2\x2\x2\x2879\x287A\x3\x2\x2\x2\x287A"+
		"\x28A2\x3\x2\x2\x2\x287B\x287C\a\x37C\x2\x2\x287C\x287D\a\x3E7\x2\x2\x287D"+
		"\x287E\a\x1DB\x2\x2\x287E\x2888\a\x1FD\x2\x2\x287F\x2880\a\x2F8\x2\x2"+
		"\x2880\x2889\a\x3FE\x2\x2\x2881\x2882\a\x2F8\x2\x2\x2882\x2889\a\xA7\x2"+
		"\x2\x2883\x2884\a\x318\x2\x2\x2884\x2889\a\x2F8\x2\x2\x2885\x2889\a\x391"+
		"\x2\x2\x2886\x2889\a\x370\x2\x2\x2887\x2889\a\x446\x2\x2\x2888\x287F\x3"+
		"\x2\x2\x2\x2888\x2881\x3\x2\x2\x2\x2888\x2883\x3\x2\x2\x2\x2888\x2885"+
		"\x3\x2\x2\x2\x2888\x2886\x3\x2\x2\x2\x2888\x2887\x3\x2\x2\x2\x2889\x288B"+
		"\x3\x2\x2\x2\x288A\x288C\a\x463\x2\x2\x288B\x288A\x3\x2\x2\x2\x288B\x288C"+
		"\x3\x2\x2\x2\x288C\x28A2\x3\x2\x2\x2\x288D\x288E\a\x37C\x2\x2\x288E\x288F"+
		"\a\x1AF\x2\x2\x288F\x2890\x5\x43C\x21F\x2\x2890\x2892\x5\x454\x22B\x2"+
		"\x2891\x2893\a\x463\x2\x2\x2892\x2891\x3\x2\x2\x2\x2892\x2893\x3\x2\x2"+
		"\x2\x2893\x28A2\x3\x2\x2\x2\x2894\x2895\a\x37C\x2\x2\x2895\x289A\x5\x356"+
		"\x1AC\x2\x2896\x2897\a\x462\x2\x2\x2897\x2899\x5\x356\x1AC\x2\x2898\x2896"+
		"\x3\x2\x2\x2\x2899\x289C\x3\x2\x2\x2\x289A\x2898\x3\x2\x2\x2\x289A\x289B"+
		"\x3\x2\x2\x2\x289B\x289D\x3\x2\x2\x2\x289C\x289A\x3\x2\x2\x2\x289D\x289E"+
		"\x5\x454\x22B\x2\x289E\x28A2\x3\x2\x2\x2\x289F\x28A0\a\x37C\x2\x2\x28A0"+
		"\x28A2\x5\x3F4\x1FB\x2\x28A1\x2864\x3\x2\x2\x2\x28A1\x286E\x3\x2\x2\x2"+
		"\x28A1\x2875\x3\x2\x2\x2\x28A1\x287B\x3\x2\x2\x2\x28A1\x288D\x3\x2\x2"+
		"\x2\x28A1\x2894\x3\x2\x2\x2\x28A1\x289F\x3\x2\x2\x2\x28A2\x355\x3\x2\x2"+
		"\x2\x28A3\x28A4\t\x80\x2\x2\x28A4\x357\x3\x2\x2\x2\x28A5\x28A8\x5\x474"+
		"\x23B\x2\x28A6\x28A8\a\x445\x2\x2\x28A7\x28A5\x3\x2\x2\x2\x28A7\x28A6"+
		"\x3\x2\x2\x2\x28A8\x359\x3\x2\x2\x2\x28A9\x28AA\b\x1AE\x1\x2\x28AA\x28B3"+
		"\x5\x35E\x1B0\x2\x28AB\x28B3\x5\x3D4\x1EB\x2\x28AC\x28B3\x5\x360\x1B1"+
		"\x2\x28AD\x28B3\x5\x448\x225\x2\x28AE\x28B3\x5\x364\x1B3\x2\x28AF\x28B3"+
		"\x5\x362\x1B2\x2\x28B0\x28B3\x5\x41E\x210\x2\x28B1\x28B3\a\x473\x2\x2"+
		"\x28B2\x28A9\x3\x2\x2\x2\x28B2\x28AB\x3\x2\x2\x2\x28B2\x28AC\x3\x2\x2"+
		"\x2\x28B2\x28AD\x3\x2\x2\x2\x28B2\x28AE\x3\x2\x2\x2\x28B2\x28AF\x3\x2"+
		"\x2\x2\x28B2\x28B0\x3\x2\x2\x2\x28B2\x28B1\x3\x2\x2\x2\x28B3\x28C9\x3"+
		"\x2\x2\x2\x28B4\x28B5\f\a\x2\x2\x28B5\x28B6\t\x81\x2\x2\x28B6\x28C8\x5"+
		"\x35A\x1AE\b\x28B7\x28B8\f\x6\x2\x2\x28B8\x28B9\t\x82\x2\x2\x28B9\x28C8"+
		"\x5\x35A\x1AE\a\x28BA\x28BB\f\r\x2\x2\x28BB\x28C0\a\x459\x2\x2\x28BC\x28C1"+
		"\x5\x3EA\x1F6\x2\x28BD\x28C1\x5\x3EE\x1F8\x2\x28BE\x28C1\x5\x3F2\x1FA"+
		"\x2\x28BF\x28C1\x5\x3F6\x1FC\x2\x28C0\x28BC\x3\x2\x2\x2\x28C0\x28BD\x3"+
		"\x2\x2\x2\x28C0\x28BE\x3\x2\x2\x2\x28C0\x28BF\x3\x2\x2\x2\x28C1\x28C8"+
		"\x3\x2\x2\x2\x28C2\x28C3\f\f\x2\x2\x28C3\x28C4\a\x9B\x2\x2\x28C4\x28C8"+
		"\x5\x47A\x23E\x2\x28C5\x28C6\f\x5\x2\x2\x28C6\x28C8\x5\x35C\x1AF\x2\x28C7"+
		"\x28B4\x3\x2\x2\x2\x28C7\x28B7\x3\x2\x2\x2\x28C7\x28BA\x3\x2\x2\x2\x28C7"+
		"\x28C2\x3\x2\x2\x2\x28C7\x28C5\x3\x2\x2\x2\x28C8\x28CB\x3\x2\x2\x2\x28C9"+
		"\x28C7\x3\x2\x2\x2\x28C9\x28CA\x3\x2\x2\x2\x28CA\x35B\x3\x2\x2\x2\x28CB"+
		"\x28C9\x3\x2\x2\x2\x28CC\x28CD\a\x41\x2\x2\x28CD\x28CE\a\x3DB\x2\x2\x28CE"+
		"\x28CF\a\x43C\x2\x2\x28CF\x28D0\x5\x35A\x1AE\x2\x28D0\x35D\x3\x2\x2\x2"+
		"\x28D1\x28D6\a\xF7\x2\x2\x28D2\x28D6\a\x27A\x2\x2\x28D3\x28D6\a\x445\x2"+
		"\x2\x28D4\x28D6\x5\x474\x23B\x2\x28D5\x28D1\x3\x2\x2\x2\x28D5\x28D2\x3"+
		"\x2\x2\x2\x28D5\x28D3\x3\x2\x2\x2\x28D5\x28D4\x3\x2\x2\x2\x28D6\x35F\x3"+
		"\x2\x2\x2\x28D7\x28D8\aw\x2\x2\x28D8\x28DA\x5\x35A\x1AE\x2\x28D9\x28DB"+
		"\x5\x3FA\x1FE\x2\x28DA\x28D9\x3\x2\x2\x2\x28DB\x28DC\x3\x2\x2\x2\x28DC"+
		"\x28DA\x3\x2\x2\x2\x28DC\x28DD\x3\x2\x2\x2\x28DD\x28E0\x3\x2\x2\x2\x28DE"+
		"\x28DF\a\x123\x2\x2\x28DF\x28E1\x5\x35A\x1AE\x2\x28E0\x28DE\x3\x2\x2\x2"+
		"\x28E0\x28E1\x3\x2\x2\x2\x28E1\x28E2\x3\x2\x2\x2\x28E2\x28E3\a\x12D\x2"+
		"\x2\x28E3\x28F1\x3\x2\x2\x2\x28E4\x28E6\aw\x2\x2\x28E5\x28E7\x5\x3FC\x1FF"+
		"\x2\x28E6\x28E5\x3\x2\x2\x2\x28E7\x28E8\x3\x2\x2\x2\x28E8\x28E6\x3\x2"+
		"\x2\x2\x28E8\x28E9\x3\x2\x2\x2\x28E9\x28EC\x3\x2\x2\x2\x28EA\x28EB\a\x123"+
		"\x2\x2\x28EB\x28ED\x5\x35A\x1AE\x2\x28EC\x28EA\x3\x2\x2\x2\x28EC\x28ED"+
		"\x3\x2\x2\x2\x28ED\x28EE\x3\x2\x2\x2\x28EE\x28EF\a\x12D\x2\x2\x28EF\x28F1"+
		"\x3\x2\x2\x2\x28F0\x28D7\x3\x2\x2\x2\x28F0\x28E4\x3\x2\x2\x2\x28F1\x361"+
		"\x3\x2\x2\x2\x28F2\x28F3\a\x46B\x2\x2\x28F3\x28F7\x5\x35A\x1AE\x2\x28F4"+
		"\x28F5\t\x83\x2\x2\x28F5\x28F7\x5\x35A\x1AE\x2\x28F6\x28F2\x3\x2\x2\x2"+
		"\x28F6\x28F4\x3\x2\x2\x2\x28F7\x363\x3\x2\x2\x2\x28F8\x28F9\a\x45E\x2"+
		"\x2\x28F9\x28FA\x5\x35A\x1AE\x2\x28FA\x28FB\a\x45F\x2\x2\x28FB\x2901\x3"+
		"\x2\x2\x2\x28FC\x28FD\a\x45E\x2\x2\x28FD\x28FE\x5\x368\x1B5\x2\x28FE\x28FF"+
		"\a\x45F\x2\x2\x28FF\x2901\x3\x2\x2\x2\x2900\x28F8\x3\x2\x2\x2\x2900\x28FC"+
		"\x3\x2\x2\x2\x2901\x365\x3\x2\x2\x2\x2902\x290B\a\x27A\x2\x2\x2903\x290B"+
		"\x5\x474\x23B\x2\x2904\x290B\x5\x3D4\x1EB\x2\x2905\x290B\a\x445\x2\x2"+
		"\x2906\x2907\a\x45E\x2\x2\x2907\x2908\x5\x366\x1B4\x2\x2908\x2909\a\x45F"+
		"\x2\x2\x2909\x290B\x3\x2\x2\x2\x290A\x2902\x3\x2\x2\x2\x290A\x2903\x3"+
		"\x2\x2\x2\x290A\x2904\x3\x2\x2\x2\x290A\x2905\x3\x2\x2\x2\x290A\x2906"+
		"\x3\x2\x2\x2\x290B\x367\x3\x2\x2\x2\x290C\x290D\x5\x1E6\xF4\x2\x290D\x369"+
		"\x3\x2\x2\x2\x290E\x290F\a\x42B\x2\x2\x290F\x2914\x5\x36C\x1B7\x2\x2910"+
		"\x2911\a\x462\x2\x2\x2911\x2913\x5\x36C\x1B7\x2\x2912\x2910\x3\x2\x2\x2"+
		"\x2913\x2916\x3\x2\x2\x2\x2914\x2912\x3\x2\x2\x2\x2914\x2915\x3\x2\x2"+
		"\x2\x2915\x36B\x3\x2\x2\x2\x2916\x2914\x3\x2\x2\x2\x2917\x291C\x5\x47A"+
		"\x23E\x2\x2918\x2919\a\x45E\x2\x2\x2919\x291A\x5\x450\x229\x2\x291A\x291B"+
		"\a\x45F\x2\x2\x291B\x291D\x3\x2\x2\x2\x291C\x2918\x3\x2\x2\x2\x291C\x291D"+
		"\x3\x2\x2\x2\x291D\x291E\x3\x2\x2\x2\x291E\x291F\a:\x2\x2\x291F\x2920"+
		"\a\x45E\x2\x2\x2920\x2921\x5\x1E6\xF4\x2\x2921\x2922\a\x45F\x2\x2\x2922"+
		"\x36D\x3\x2\x2\x2\x2923\x2924\a\x445\x2\x2\x2924\x2925\a\x44C\x2\x2\x2925"+
		"\x2928\x5\x448\x225\x2\x2926\x2929\a\x44C\x2\x2\x2927\x2929\x5\x482\x242"+
		"\x2\x2928\x2926\x3\x2\x2\x2\x2928\x2927\x3\x2\x2\x2\x2929\x292A\x3\x2"+
		"\x2\x2\x292A\x292B\x5\x35A\x1AE\x2\x292B\x293D\x3\x2\x2\x2\x292C\x292F"+
		"\x5\x448\x225\x2\x292D\x292F\a\x445\x2\x2\x292E\x292C\x3\x2\x2\x2\x292E"+
		"\x292D\x3\x2\x2\x2\x292F\x2932\x3\x2\x2\x2\x2930\x2933\a\x44C\x2\x2\x2931"+
		"\x2933\x5\x482\x242\x2\x2932\x2930\x3\x2\x2\x2\x2932\x2931\x3\x2\x2\x2"+
		"\x2933\x2934\x3\x2\x2\x2\x2934\x293D\x5\x35A\x1AE\x2\x2935\x2936\x5\x47A"+
		"\x23E\x2\x2936\x2937\a\x459\x2\x2\x2937\x2938\x5\x47A\x23E\x2\x2938\x2939"+
		"\a\x45E\x2\x2\x2939\x293A\x5\x414\x20B\x2\x293A\x293B\a\x45F\x2\x2\x293B"+
		"\x293D\x3\x2\x2\x2\x293C\x2923\x3\x2\x2\x2\x293C\x292E\x3\x2\x2\x2\x293C"+
		"\x2935\x3\x2\x2\x2\x293D\x36F\x3\x2\x2\x2\x293E\x2941\x5\x448\x225\x2"+
		"\x293F\x2941\a\x445\x2\x2\x2940\x293E\x3\x2\x2\x2\x2940\x293F\x3\x2\x2"+
		"\x2\x2941\x2944\x3\x2\x2\x2\x2942\x2945\a\x44C\x2\x2\x2943\x2945\x5\x482"+
		"\x242\x2\x2944\x2942\x3\x2\x2\x2\x2944\x2943\x3\x2\x2\x2\x2945\x2946\x3"+
		"\x2\x2\x2\x2946\x294F\x5\x35A\x1AE\x2\x2947\x2948\x5\x47A\x23E\x2\x2948"+
		"\x2949\a\x459\x2\x2\x2949\x294A\x5\x47A\x23E\x2\x294A\x294B\a\x45E\x2"+
		"\x2\x294B\x294C\x5\x414\x20B\x2\x294C\x294D\a\x45F\x2\x2\x294D\x294F\x3"+
		"\x2\x2\x2\x294E\x2940\x3\x2\x2\x2\x294E\x2947\x3\x2\x2\x2\x294F\x371\x3"+
		"\x2\x2\x2\x2950\x2954\b\x1BA\x1\x2\x2951\x2953\a\x26A\x2\x2\x2952\x2951"+
		"\x3\x2\x2\x2\x2953\x2956\x3\x2\x2\x2\x2954\x2952\x3\x2\x2\x2\x2954\x2955"+
		"\x3\x2\x2\x2\x2955\x295C\x3\x2\x2\x2\x2956\x2954\x3\x2\x2\x2\x2957\x295D"+
		"\x5\x374\x1BB\x2\x2958\x2959\a\x45E\x2\x2\x2959\x295A\x5\x372\x1BA\x2"+
		"\x295A\x295B\a\x45F\x2\x2\x295B\x295D\x3\x2\x2\x2\x295C\x2957\x3\x2\x2"+
		"\x2\x295C\x2958\x3\x2\x2\x2\x295D\x2966\x3\x2\x2\x2\x295E\x295F\f\x4\x2"+
		"\x2\x295F\x2960\a\'\x2\x2\x2960\x2965\x5\x372\x1BA\x5\x2961\x2962\f\x3"+
		"\x2\x2\x2962\x2963\a\x29D\x2\x2\x2963\x2965\x5\x372\x1BA\x4\x2964\x295E"+
		"\x3\x2\x2\x2\x2964\x2961\x3\x2\x2\x2\x2965\x2968\x3\x2\x2\x2\x2966\x2964"+
		"\x3\x2\x2\x2\x2966\x2967\x3\x2\x2\x2\x2967\x373\x3\x2\x2\x2\x2968\x2966"+
		"\x3\x2\x2\x2\x2969\x296A\a\x144\x2\x2\x296A\x296B\a\x45E\x2\x2\x296B\x296C"+
		"\x5\x368\x1B5\x2\x296C\x296D\a\x45F\x2\x2\x296D\x29A7\x3\x2\x2\x2\x296E"+
		"\x29A7\x5\x3DA\x1EE\x2\x296F\x2970\x5\x35A\x1AE\x2\x2970\x2971\x5\x480"+
		"\x241\x2\x2971\x2972\x5\x35A\x1AE\x2\x2972\x29A7\x3\x2\x2\x2\x2973\x2974"+
		"\x5\x35A\x1AE\x2\x2974\x2975\x5\x480\x241\x2\x2975\x2976\t\x84\x2\x2\x2976"+
		"\x2977\a\x45E\x2\x2\x2977\x2978\x5\x368\x1B5\x2\x2978\x2979\a\x45F\x2"+
		"\x2\x2979\x29A7\x3\x2\x2\x2\x297A\x297E\x5\x35A\x1AE\x2\x297B\x297D\a"+
		"\x26A\x2\x2\x297C\x297B\x3\x2\x2\x2\x297D\x2980\x3\x2\x2\x2\x297E\x297C"+
		"\x3\x2\x2\x2\x297E\x297F\x3\x2\x2\x2\x297F\x2981\x3\x2\x2\x2\x2980\x297E"+
		"\x3\x2\x2\x2\x2981\x2982\a^\x2\x2\x2982\x2983\x5\x35A\x1AE\x2\x2983\x2984"+
		"\a\'\x2\x2\x2984\x2985\x5\x35A\x1AE\x2\x2985\x29A7\x3\x2\x2\x2\x2986\x298A"+
		"\x5\x35A\x1AE\x2\x2987\x2989\a\x26A\x2\x2\x2988\x2987\x3\x2\x2\x2\x2989"+
		"\x298C\x3\x2\x2\x2\x298A\x2988\x3\x2\x2\x2\x298A\x298B\x3\x2\x2\x2\x298B"+
		"\x298D\x3\x2\x2\x2\x298C\x298A\x3\x2\x2\x2\x298D\x298E\a\x1BF\x2\x2\x298E"+
		"\x2991\a\x45E\x2\x2\x298F\x2992\x5\x368\x1B5\x2\x2990\x2992\x5\x414\x20B"+
		"\x2\x2991\x298F\x3\x2\x2\x2\x2991\x2990\x3\x2\x2\x2\x2992\x2993\x3\x2"+
		"\x2\x2\x2993\x2994\a\x45F\x2\x2\x2994\x29A7\x3\x2\x2\x2\x2995\x2999\x5"+
		"\x35A\x1AE\x2\x2996\x2998\a\x26A\x2\x2\x2997\x2996\x3\x2\x2\x2\x2998\x299B"+
		"\x3\x2\x2\x2\x2999\x2997\x3\x2\x2\x2\x2999\x299A\x3\x2\x2\x2\x299A\x299C"+
		"\x3\x2\x2\x2\x299B\x2999\x3\x2\x2\x2\x299C\x299D\a\x200\x2\x2\x299D\x29A0"+
		"\x5\x35A\x1AE\x2\x299E\x299F\a\x139\x2\x2\x299F\x29A1\x5\x35A\x1AE\x2"+
		"\x29A0\x299E\x3\x2\x2\x2\x29A0\x29A1\x3\x2\x2\x2\x29A1\x29A7\x3\x2\x2"+
		"\x2\x29A2\x29A3\x5\x35A\x1AE\x2\x29A3\x29A4\a\x1D6\x2\x2\x29A4\x29A5\x5"+
		"\x458\x22D\x2\x29A5\x29A7\x3\x2\x2\x2\x29A6\x2969\x3\x2\x2\x2\x29A6\x296E"+
		"\x3\x2\x2\x2\x29A6\x296F\x3\x2\x2\x2\x29A6\x2973\x3\x2\x2\x2\x29A6\x297A"+
		"\x3\x2\x2\x2\x29A6\x2986\x3\x2\x2\x2\x29A6\x2995\x3\x2\x2\x2\x29A6\x29A2"+
		"\x3\x2\x2\x2\x29A7\x375\x3\x2\x2\x2\x29A8\x29B4\x5\x37A\x1BE\x2\x29A9"+
		"\x29AA\a\x45E\x2\x2\x29AA\x29AB\x5\x376\x1BC\x2\x29AB\x29B1\a\x45F\x2"+
		"\x2\x29AC\x29AE\a\x400\x2\x2\x29AD\x29AF\a\x18\x2\x2\x29AE\x29AD\x3\x2"+
		"\x2\x2\x29AE\x29AF\x3\x2\x2\x2\x29AF\x29B0\x3\x2\x2\x2\x29B0\x29B2\x5"+
		"\x376\x1BC\x2\x29B1\x29AC\x3\x2\x2\x2\x29B1\x29B2\x3\x2\x2\x2\x29B2\x29B4"+
		"\x3\x2\x2\x2\x29B3\x29A8\x3\x2\x2\x2\x29B3\x29A9\x3\x2\x2\x2\x29B4\x29C0"+
		"\x3\x2\x2\x2\x29B5\x29B7\x5\x37A\x1BE\x2\x29B6\x29B8\x5\x382\x1C2\x2\x29B7"+
		"\x29B6\x3\x2\x2\x2\x29B7\x29B8\x3\x2\x2\x2\x29B8\x29BC\x3\x2\x2\x2\x29B9"+
		"\x29BB\x5\x378\x1BD\x2\x29BA\x29B9\x3\x2\x2\x2\x29BB\x29BE\x3\x2\x2\x2"+
		"\x29BC\x29BA\x3\x2\x2\x2\x29BC\x29BD\x3\x2\x2\x2\x29BD\x29C0\x3\x2\x2"+
		"\x2\x29BE\x29BC\x3\x2\x2\x2\x29BF\x29B3\x3\x2\x2\x2\x29BF\x29B5\x3\x2"+
		"\x2\x2\x29C0\x377\x3\x2\x2\x2\x29C1\x29C3\a\x400\x2\x2\x29C2\x29C4\a\x18"+
		"\x2\x2\x29C3\x29C2\x3\x2\x2\x2\x29C3\x29C4\x3\x2\x2\x2\x29C4\x29C8\x3"+
		"\x2\x2\x2\x29C5\x29C8\a\x13E\x2\x2\x29C6\x29C8\a\x1D2\x2\x2\x29C7\x29C1"+
		"\x3\x2\x2\x2\x29C7\x29C5\x3\x2\x2\x2\x29C7\x29C6\x3\x2\x2\x2\x29C8\x29CE"+
		"\x3\x2\x2\x2\x29C9\x29CF\x5\x37A\x1BE\x2\x29CA\x29CB\a\x45E\x2\x2\x29CB"+
		"\x29CC\x5\x376\x1BC\x2\x29CC\x29CD\a\x45F\x2\x2\x29CD\x29CF\x3\x2\x2\x2"+
		"\x29CE\x29C9\x3\x2\x2\x2\x29CE\x29CA\x3\x2\x2\x2\x29CF\x379\x3\x2\x2\x2"+
		"\x29D0\x29D2\a\x366\x2\x2\x29D1\x29D3\t\x85\x2\x2\x29D2\x29D1\x3\x2\x2"+
		"\x2\x29D2\x29D3\x3\x2\x2\x2\x29D3\x29D5\x3\x2\x2\x2\x29D4\x29D6\x5\x37C"+
		"\x1BF\x2\x29D5\x29D4\x3\x2\x2\x2\x29D5\x29D6\x3\x2\x2\x2\x29D6\x29D7\x3"+
		"\x2\x2\x2\x29D7\x29DA\x5\x392\x1CA\x2\x29D8\x29D9\a\x1D3\x2\x2\x29D9\x29DB"+
		"\x5\x43C\x21F\x2\x29DA\x29D8\x3\x2\x2\x2\x29DA\x29DB\x3\x2\x2\x2\x29DB"+
		"\x29DE\x3\x2\x2\x2\x29DC\x29DD\a\x17E\x2\x2\x29DD\x29DF\x5\x3A0\x1D1\x2"+
		"\x29DE\x29DC\x3\x2\x2\x2\x29DE\x29DF\x3\x2\x2\x2\x29DF\x29E2\x3\x2\x2"+
		"\x2\x29E0\x29E1\a\x428\x2\x2\x29E1\x29E3\x5\x372\x1BA\x2\x29E2\x29E0\x3"+
		"\x2\x2\x2\x29E2\x29E3\x3\x2\x2\x2\x29E3\x29F1\x3\x2\x2\x2\x29E4\x29E5"+
		"\a\x198\x2\x2\x29E5\x29E7\aq\x2\x2\x29E6\x29E8\a\x18\x2\x2\x29E7\x29E6"+
		"\x3\x2\x2\x2\x29E7\x29E8\x3\x2\x2\x2\x29E8\x29E9\x3\x2\x2\x2\x29E9\x29EE"+
		"\x5\x38A\x1C6\x2\x29EA\x29EB\a\x462\x2\x2\x29EB\x29ED\x5\x38A\x1C6\x2"+
		"\x29EC\x29EA\x3\x2\x2\x2\x29ED\x29F0\x3\x2\x2\x2\x29EE\x29EC\x3\x2\x2"+
		"\x2\x29EE\x29EF\x3\x2\x2\x2\x29EF\x29F2\x3\x2\x2\x2\x29F0\x29EE\x3\x2"+
		"\x2\x2\x29F1\x29E4\x3\x2\x2\x2\x29F1\x29F2\x3\x2\x2\x2\x29F2\x29F5\x3"+
		"\x2\x2\x2\x29F3\x29F4\a\x1A1\x2\x2\x29F4\x29F6\x5\x372\x1BA\x2\x29F5\x29F3"+
		"\x3\x2\x2\x2\x29F5\x29F6\x3\x2\x2\x2\x29F6\x37B\x3\x2\x2\x2\x29F7\x29FA"+
		"\a\x3E0\x2\x2\x29F8\x29FB\x5\x37E\x1C0\x2\x29F9\x29FB\x5\x380\x1C1\x2"+
		"\x29FA\x29F8\x3\x2\x2\x2\x29FA\x29F9\x3\x2\x2\x2\x29FB\x29FE\x3\x2\x2"+
		"\x2\x29FC\x29FD\a\x42B\x2\x2\x29FD\x29FF\a\x3DA\x2\x2\x29FE\x29FC\x3\x2"+
		"\x2\x2\x29FE\x29FF\x3\x2\x2\x2\x29FF\x37D\x3\x2\x2\x2\x2A00\x2A01\t\x86"+
		"\x2\x2\x2A01\x2A08\a\x2BB\x2\x2\x2A02\x2A03\a\x45E\x2\x2\x2A03\x2A04\x5"+
		"\x35A\x1AE\x2\x2A04\x2A05\a\x45F\x2\x2\x2A05\x2A06\a\x2BB\x2\x2\x2A06"+
		"\x2A08\x3\x2\x2\x2\x2A07\x2A00\x3\x2\x2\x2\x2A07\x2A02\x3\x2\x2\x2\x2A08"+
		"\x37F\x3\x2\x2\x2\x2A09\x2A0F\a\x446\x2\x2\x2A0A\x2A0B\a\x45E\x2\x2\x2A0B"+
		"\x2A0C\x5\x35A\x1AE\x2\x2A0C\x2A0D\a\x45F\x2\x2\x2A0D\x2A0F\x3\x2\x2\x2"+
		"\x2A0E\x2A09\x3\x2\x2\x2\x2A0E\x2A0A\x3\x2\x2\x2\x2A0F\x381\x3\x2\x2\x2"+
		"\x2A10\x2A11\a\x29E\x2\x2\x2A11\x2A12\aq\x2\x2\x2A12\x2A17\x5\x388\x1C5"+
		"\x2\x2A13\x2A14\a\x462\x2\x2\x2A14\x2A16\x5\x388\x1C5\x2\x2A15\x2A13\x3"+
		"\x2\x2\x2\x2A16\x2A19\x3\x2\x2\x2\x2A17\x2A15\x3\x2\x2\x2\x2A17\x2A18"+
		"\x3\x2\x2\x2\x2A18\x2A25\x3\x2\x2\x2\x2A19\x2A17\x3\x2\x2\x2\x2A1A\x2A1B"+
		"\a\x289\x2\x2\x2A1B\x2A1C\x5\x35A\x1AE\x2\x2A1C\x2A23\t\x87\x2\x2\x2A1D"+
		"\x2A1E\a\x158\x2\x2\x2A1E\x2A1F\t\x88\x2\x2\x2A1F\x2A20\x5\x35A\x1AE\x2"+
		"\x2A20\x2A21\t\x87\x2\x2\x2A21\x2A22\a\x28F\x2\x2\x2A22\x2A24\x3\x2\x2"+
		"\x2\x2A23\x2A1D\x3\x2\x2\x2\x2A23\x2A24\x3\x2\x2\x2\x2A24\x2A26\x3\x2"+
		"\x2\x2\x2A25\x2A1A\x3\x2\x2\x2\x2A25\x2A26\x3\x2\x2\x2\x2A26\x383\x3\x2"+
		"\x2\x2\x2A27\x2A28\a\x16F\x2\x2\x2A28\x2A84\al\x2\x2\x2A29\x2A2A\a\x16F"+
		"\x2\x2\x2A2A\x2A32\a\x436\x2\x2\x2A2B\x2A2F\a\x2F4\x2\x2\x2A2C\x2A2D\a"+
		"\x45E\x2\x2\x2A2D\x2A2E\a\x448\x2\x2\x2A2E\x2A30\a\x45F\x2\x2\x2A2F\x2A2C"+
		"\x3\x2\x2\x2\x2A2F\x2A30\x3\x2\x2\x2\x2A30\x2A33\x3\x2\x2\x2\x2A31\x2A33"+
		"\aG\x2\x2\x2A32\x2A2B\x3\x2\x2\x2\x2A32\x2A31\x3\x2\x2\x2\x2A33\x2A37"+
		"\x3\x2\x2\x2\x2A34\x2A36\x5\x386\x1C4\x2\x2A35\x2A34\x3\x2\x2\x2\x2A36"+
		"\x2A39\x3\x2\x2\x2\x2A37\x2A35\x3\x2\x2\x2\x2A37\x2A38\x3\x2\x2\x2\x2A38"+
		"\x2A44\x3\x2\x2\x2\x2A39\x2A37\x3\x2\x2\x2\x2A3A\x2A42\a\x462\x2\x2\x2A3B"+
		"\x2A43\a\x437\x2\x2\x2A3C\x2A40\a\x439\x2\x2\x2A3D\x2A3E\a\x45E\x2\x2"+
		"\x2A3E\x2A3F\a\x448\x2\x2\x2A3F\x2A41\a\x45F\x2\x2\x2A40\x2A3D\x3\x2\x2"+
		"\x2\x2A40\x2A41\x3\x2\x2\x2\x2A41\x2A43\x3\x2\x2\x2\x2A42\x2A3B\x3\x2"+
		"\x2\x2\x2A42\x2A3C\x3\x2\x2\x2\x2A43\x2A45\x3\x2\x2\x2\x2A44\x2A3A\x3"+
		"\x2\x2\x2\x2A44\x2A45\x3\x2\x2\x2\x2A45\x2A4B\x3\x2\x2\x2\x2A46\x2A47"+
		"\a\x462\x2\x2\x2A47\x2A49\a\x122\x2\x2\x2A48\x2A4A\t\x89\x2\x2\x2A49\x2A48"+
		"\x3\x2\x2\x2\x2A49\x2A4A\x3\x2\x2\x2\x2A4A\x2A4C\x3\x2\x2\x2\x2A4B\x2A46"+
		"\x3\x2\x2\x2\x2A4B\x2A4C\x3\x2\x2\x2\x2A4C\x2A84\x3\x2\x2\x2\x2A4D\x2A4E"+
		"\a\x16F\x2\x2\x2A4E\x2A4F\a\x436\x2\x2\x2A4F\x2A53\a\x14A\x2\x2\x2A50"+
		"\x2A52\x5\x386\x1C4\x2\x2A51\x2A50\x3\x2\x2\x2\x2A52\x2A55\x3\x2\x2\x2"+
		"\x2A53\x2A51\x3\x2\x2\x2\x2A53\x2A54\x3\x2\x2\x2\x2A54\x2A58\x3\x2\x2"+
		"\x2\x2A55\x2A53\x3\x2\x2\x2\x2A56\x2A57\a\x462\x2\x2\x2A57\x2A59\a\x437"+
		"\x2\x2\x2A58\x2A56\x3\x2\x2\x2\x2A58\x2A59\x3\x2\x2\x2\x2A59\x2A84\x3"+
		"\x2\x2\x2\x2A5A\x2A5B\a\x16F\x2\x2\x2A5B\x2A5C\a\x436\x2\x2\x2A5C\x2A60"+
		"\a\x2B7\x2\x2\x2A5D\x2A5E\a\x45E\x2\x2\x2A5E\x2A5F\a\x448\x2\x2\x2A5F"+
		"\x2A61\a\x45F\x2\x2\x2A60\x2A5D\x3\x2\x2\x2\x2A60\x2A61\x3\x2\x2\x2\x2A61"+
		"\x2A65\x3\x2\x2\x2\x2A62\x2A64\x5\x386\x1C4\x2\x2A63\x2A62\x3\x2\x2\x2"+
		"\x2A64\x2A67\x3\x2\x2\x2\x2A65\x2A63\x3\x2\x2\x2\x2A65\x2A66\x3\x2\x2"+
		"\x2\x2A66\x2A6D\x3\x2\x2\x2\x2A67\x2A65\x3\x2\x2\x2\x2A68\x2A69\a\x462"+
		"\x2\x2\x2A69\x2A6B\a\x122\x2\x2\x2A6A\x2A6C\t\x89\x2\x2\x2A6B\x2A6A\x3"+
		"\x2\x2\x2\x2A6B\x2A6C\x3\x2\x2\x2\x2A6C\x2A6E\x3\x2\x2\x2\x2A6D\x2A68"+
		"\x3\x2\x2\x2\x2A6D\x2A6E\x3\x2\x2\x2\x2A6E\x2A84\x3\x2\x2\x2\x2A6F\x2A70"+
		"\a\x16F\x2\x2\x2A70\x2A71\a\x1E1\x2\x2\x2A71\x2A79\t\x8A\x2\x2\x2A72\x2A73"+
		"\a\x462\x2\x2\x2A73\x2A77\a\x33B\x2\x2\x2A74\x2A75\a\x45E\x2\x2\x2A75"+
		"\x2A76\a\x448\x2\x2\x2A76\x2A78\a\x45F\x2\x2\x2A77\x2A74\x3\x2\x2\x2\x2A77"+
		"\x2A78\x3\x2\x2\x2\x2A78\x2A7A\x3\x2\x2\x2\x2A79\x2A72\x3\x2\x2\x2\x2A79"+
		"\x2A7A\x3\x2\x2\x2\x2A7A\x2A7D\x3\x2\x2\x2\x2A7B\x2A7C\a\x462\x2\x2\x2A7C"+
		"\x2A7E\a\x1C1\x2\x2\x2A7D\x2A7B\x3\x2\x2\x2\x2A7D\x2A7E\x3\x2\x2\x2\x2A7E"+
		"\x2A81\x3\x2\x2\x2\x2A7F\x2A80\a\x462\x2\x2\x2A80\x2A82\a\x42E\x2\x2\x2A81"+
		"\x2A7F\x3\x2\x2\x2\x2A81\x2A82\x3\x2\x2\x2\x2A82\x2A84\x3\x2\x2\x2\x2A83"+
		"\x2A27\x3\x2\x2\x2\x2A83\x2A29\x3\x2\x2\x2\x2A83\x2A4D\x3\x2\x2\x2\x2A83"+
		"\x2A5A\x3\x2\x2\x2\x2A83\x2A6F\x3\x2\x2\x2\x2A84\x385\x3\x2\x2\x2\x2A85"+
		"\x2A8E\a\x462\x2\x2\x2A86\x2A8F\a`\x2\x2\x2A87\x2A8F\a\x3F7\x2\x2\x2A88"+
		"\x2A8C\a\x33B\x2\x2\x2A89\x2A8A\a\x45E\x2\x2\x2A8A\x2A8B\a\x448\x2\x2"+
		"\x2A8B\x2A8D\a\x45F\x2\x2\x2A8C\x2A89\x3\x2\x2\x2\x2A8C\x2A8D\x3\x2\x2"+
		"\x2\x2A8D\x2A8F\x3\x2\x2\x2\x2A8E\x2A86\x3\x2\x2\x2\x2A8E\x2A87\x3\x2"+
		"\x2\x2\x2A8E\x2A88\x3\x2\x2\x2\x2A8F\x387\x3\x2\x2\x2\x2A90\x2A93\x5\x35A"+
		"\x1AE\x2\x2A91\x2A94\a;\x2\x2\x2A92\x2A94\a\x106\x2\x2\x2A93\x2A91\x3"+
		"\x2\x2\x2\x2A93\x2A92\x3\x2\x2\x2\x2A93\x2A94\x3\x2\x2\x2\x2A94\x389\x3"+
		"\x2\x2\x2\x2A95\x2A96\x5\x35A\x1AE\x2\x2A96\x38B\x3\x2\x2\x2\x2A97\x2A98"+
		"\a\x29C\x2\x2\x2A98\x2A99\a\x45E\x2\x2\x2A99\x2A9E\x5\x38E\x1C8\x2\x2A9A"+
		"\x2A9B\a\x462\x2\x2\x2A9B\x2A9D\x5\x38E\x1C8\x2\x2A9C\x2A9A\x3\x2\x2\x2"+
		"\x2A9D\x2AA0\x3\x2\x2\x2\x2A9E\x2A9C\x3\x2\x2\x2\x2A9E\x2A9F\x3\x2\x2"+
		"\x2\x2A9F\x2AA1\x3\x2\x2\x2\x2AA0\x2A9E\x3\x2\x2\x2\x2AA1\x2AA2\a\x45F"+
		"\x2\x2\x2AA2\x38D\x3\x2\x2\x2\x2AA3\x2AA4\a\x156\x2\x2\x2AA4\x2AD3\a\x446"+
		"\x2\x2\x2AA5\x2AA6\t\x8B\x2\x2\x2AA6\x2AD3\a\x198\x2\x2\x2AA7\x2AA8\t"+
		"\x8C\x2\x2\x2AA8\x2AD3\a\x400\x2\x2\x2AA9\x2AAA\t\x8D\x2\x2\x2AAA\x2AD3"+
		"\a\x1E0\x2\x2\x2AAB\x2AAC\a\x147\x2\x2\x2AAC\x2AD3\a\x420\x2\x2\x2AAD"+
		"\x2AAE\a\x170\x2\x2\x2AAE\x2AD3\a\x29E\x2\x2\x2AAF\x2AD3\a\x1B7\x2\x2"+
		"\x2AB0\x2AB1\a\x1E9\x2\x2\x2AB1\x2AD3\a\x2C8\x2\x2\x2AB2\x2AB3\a\x1EB"+
		"\x2\x2\x2AB3\x2AD3\a\x2C8\x2\x2\x2AB4\x2AB5\a\x21F\x2\x2\x2AB5\x2AD3\a"+
		"\x446\x2\x2\x2AB6\x2AB7\a\x220\x2\x2\x2AB7\x2AD3\a\x446\x2\x2\x2AB8\x2AB9"+
		"\a\x29A\x2\x2\x2AB9\x2ABA\a\x16F\x2\x2\x2ABA\x2ABB\a\x45E\x2\x2\x2ABB"+
		"\x2AC0\x5\x390\x1C9\x2\x2ABC\x2ABD\a\x462\x2\x2\x2ABD\x2ABF\x5\x390\x1C9"+
		"\x2\x2ABE\x2ABC\x3\x2\x2\x2\x2ABF\x2AC2\x3\x2\x2\x2\x2AC0\x2ABE\x3\x2"+
		"\x2\x2\x2AC0\x2AC1\x3\x2\x2\x2\x2AC1\x2AC3\x3\x2\x2\x2\x2AC2\x2AC0\x3"+
		"\x2\x2\x2\x2AC3\x2AC4\a\x45F\x2\x2\x2AC4\x2AD3\x3\x2\x2\x2\x2AC5\x2AC6"+
		"\a\x29A\x2\x2\x2AC6\x2AC7\a\x16F\x2\x2\x2AC7\x2AD3\a\x402\x2\x2\x2AC8"+
		"\x2AC9\a\x2AD\x2\x2\x2AC9\x2AD3\tW\x2\x2\x2ACA\x2ACB\a\x2EA\x2\x2\x2ACB"+
		"\x2AD3\a\x446\x2\x2\x2ACC\x2AD3\a\x307\x2\x2\x2ACD\x2ACE\a\x338\x2\x2"+
		"\x2ACE\x2AD3\a\x2C8\x2\x2\x2ACF\x2AD0\a\x40D\x2\x2\x2AD0\x2AD1\a\x2C8"+
		"\x2\x2\x2AD1\x2AD3\a\x448\x2\x2\x2AD2\x2AA3\x3\x2\x2\x2\x2AD2\x2AA5\x3"+
		"\x2\x2\x2\x2AD2\x2AA7\x3\x2\x2\x2\x2AD2\x2AA9\x3\x2\x2\x2\x2AD2\x2AAB"+
		"\x3\x2\x2\x2\x2AD2\x2AAD\x3\x2\x2\x2\x2AD2\x2AAF\x3\x2\x2\x2\x2AD2\x2AB0"+
		"\x3\x2\x2\x2\x2AD2\x2AB2\x3\x2\x2\x2\x2AD2\x2AB4\x3\x2\x2\x2\x2AD2\x2AB6"+
		"\x3\x2\x2\x2\x2AD2\x2AB8\x3\x2\x2\x2\x2AD2\x2AC5\x3\x2\x2\x2\x2AD2\x2AC8"+
		"\x3\x2\x2\x2\x2AD2\x2ACA\x3\x2\x2\x2\x2AD2\x2ACC\x3\x2\x2\x2\x2AD2\x2ACD"+
		"\x3\x2\x2\x2\x2AD2\x2ACF\x3\x2\x2\x2\x2AD3\x38F\x3\x2\x2\x2\x2AD4\x2ADB"+
		"\a\x445\x2\x2\x2AD5\x2ADC\a\x402\x2\x2\x2AD6\x2AD9\a\x44C\x2\x2\x2AD7"+
		"\x2ADA\x5\x474\x23B\x2\x2AD8\x2ADA\a\x27A\x2\x2\x2AD9\x2AD7\x3\x2\x2\x2"+
		"\x2AD9\x2AD8\x3\x2\x2\x2\x2ADA\x2ADC\x3\x2\x2\x2\x2ADB\x2AD5\x3\x2\x2"+
		"\x2\x2ADB\x2AD6\x3\x2\x2\x2\x2ADC\x391\x3\x2\x2\x2\x2ADD\x2AE2\x5\x39E"+
		"\x1D0\x2\x2ADE\x2ADF\a\x462\x2\x2\x2ADF\x2AE1\x5\x39E\x1D0\x2\x2AE0\x2ADE"+
		"\x3\x2\x2\x2\x2AE1\x2AE4\x3\x2\x2\x2\x2AE2\x2AE0\x3\x2\x2\x2\x2AE2\x2AE3"+
		"\x3\x2\x2\x2\x2AE3\x393\x3\x2\x2\x2\x2AE4\x2AE2\x3\x2\x2\x2\x2AE5\x2AE6"+
		"\a\x45E\x2\x2\x2AE6\x2AEB\x5\x2CC\x167\x2\x2AE7\x2AE8\a\x462\x2\x2\x2AE8"+
		"\x2AEA\x5\x2CC\x167\x2\x2AE9\x2AE7\x3\x2\x2\x2\x2AEA\x2AED\x3\x2\x2\x2"+
		"\x2AEB\x2AE9\x3\x2\x2\x2\x2AEB\x2AEC\x3\x2\x2\x2\x2AEC\x2AEE\x3\x2\x2"+
		"\x2\x2AED\x2AEB\x3\x2\x2\x2\x2AEE\x2AEF\a\x45F\x2\x2\x2AEF\x395\x3\x2"+
		"\x2\x2\x2AF0\x2AF1\x5\x43C\x21F\x2\x2AF1\x2AF2\a\x459\x2\x2\x2AF2\x2AF4"+
		"\x3\x2\x2\x2\x2AF3\x2AF0\x3\x2\x2\x2\x2AF3\x2AF4\x3\x2\x2\x2\x2AF4\x2AF5"+
		"\x3\x2\x2\x2\x2AF5\x2AFA\a\x466\x2\x2\x2AF6\x2AF7\t\x8E\x2\x2\x2AF7\x2AF8"+
		"\a\x459\x2\x2\x2AF8\x2AFA\a\x466\x2\x2\x2AF9\x2AF3\x3\x2\x2\x2\x2AF9\x2AF6"+
		"\x3\x2\x2\x2\x2AFA\x397\x3\x2\x2\x2\x2AFB\x2B02\x5\x448\x225\x2\x2AFC"+
		"\x2AFD\a\x45D\x2\x2\x2AFD\x2B02\a\x1AD\x2\x2\x2AFE\x2AFF\a\x45D\x2\x2"+
		"\x2AFF\x2B02\a\x341\x2\x2\x2B00\x2B02\a\x27A\x2\x2\x2B01\x2AFB\x3\x2\x2"+
		"\x2\x2B01\x2AFC\x3\x2\x2\x2\x2B01\x2AFE\x3\x2\x2\x2\x2B01\x2B00\x3\x2"+
		"\x2\x2\x2B02\x2B04\x3\x2\x2\x2\x2B03\x2B05\x5\x3FE\x200\x2\x2B04\x2B03"+
		"\x3\x2\x2\x2\x2B04\x2B05\x3\x2\x2\x2\x2B05\x399\x3\x2\x2\x2\x2B06\x2B07"+
		"\x5\x47A\x23E\x2\x2B07\x2B08\a\x459\x2\x2\x2B08\x2B09\x5\x47A\x23E\x2"+
		"\x2B09\x2B0B\x5\x394\x1CB\x2\x2B0A\x2B0C\x5\x3FE\x200\x2\x2B0B\x2B0A\x3"+
		"\x2\x2\x2\x2B0B\x2B0C\x3\x2\x2\x2\x2B0C\x2B17\x3\x2\x2\x2\x2B0D\x2B0E"+
		"\x5\x47A\x23E\x2\x2B0E\x2B0F\a\x465\x2\x2\x2B0F\x2B11\x5\x47A\x23E\x2"+
		"\x2B10\x2B12\x5\x394\x1CB\x2\x2B11\x2B10\x3\x2\x2\x2\x2B11\x2B12\x3\x2"+
		"\x2\x2\x2B12\x2B14\x3\x2\x2\x2\x2B13\x2B15\x5\x3FE\x200\x2\x2B14\x2B13"+
		"\x3\x2\x2\x2\x2B14\x2B15\x3\x2\x2\x2\x2B15\x2B17\x3\x2\x2\x2\x2B16\x2B06"+
		"\x3\x2\x2\x2\x2B16\x2B0D\x3\x2\x2\x2\x2B17\x39B\x3\x2\x2\x2\x2B18\x2B19"+
		"\x5\x410\x209\x2\x2B19\x2B1A\a\x44C\x2\x2\x2B1A\x2B1B\x5\x35A\x1AE\x2"+
		"\x2B1B\x2B21\x3\x2\x2\x2\x2B1C\x2B1E\x5\x35A\x1AE\x2\x2B1D\x2B1F\x5\x3FE"+
		"\x200\x2\x2B1E\x2B1D\x3\x2\x2\x2\x2B1E\x2B1F\x3\x2\x2\x2\x2B1F\x2B21\x3"+
		"\x2\x2\x2\x2B20\x2B18\x3\x2\x2\x2\x2B20\x2B1C\x3\x2\x2\x2\x2B21\x39D\x3"+
		"\x2\x2\x2\x2B22\x2B3A\x5\x396\x1CC\x2\x2B23\x2B3A\x5\x398\x1CD\x2\x2B24"+
		"\x2B3A\x5\x39A\x1CE\x2\x2B25\x2B28\a\x445\x2\x2\x2B26\x2B29\x5\x482\x242"+
		"\x2\x2B27\x2B29\a\x44C\x2\x2\x2B28\x2B26\x3\x2\x2\x2\x2B28\x2B27\x3\x2"+
		"\x2\x2\x2B29\x2B2F\x3\x2\x2\x2\x2B2A\x2B30\x5\x35A\x1AE\x2\x2B2B\x2B2C"+
		"\a\x258\x2\x2\x2B2C\x2B2D\a\x415\x2\x2\x2B2D\x2B2E\a\x16F\x2\x2\x2B2E"+
		"\x2B30\x5\x43C\x21F\x2\x2B2F\x2B2A\x3\x2\x2\x2\x2B2F\x2B2B\x3\x2\x2\x2"+
		"\x2B30\x2B3A\x3\x2\x2\x2\x2B31\x2B3A\x5\x39C\x1CF\x2\x2B32\x2B33\a\x258"+
		"\x2\x2\x2B33\x2B34\a\x415\x2\x2\x2B34\x2B35\a\x16F\x2\x2\x2B35\x2B37\x5"+
		"\x43C\x21F\x2\x2B36\x2B38\x5\x3FE\x200\x2\x2B37\x2B36\x3\x2\x2\x2\x2B37"+
		"\x2B38\x3\x2\x2\x2\x2B38\x2B3A\x3\x2\x2\x2\x2B39\x2B22\x3\x2\x2\x2\x2B39"+
		"\x2B23\x3\x2\x2\x2\x2B39\x2B24\x3\x2\x2\x2\x2B39\x2B25\x3\x2\x2\x2\x2B39"+
		"\x2B31\x3\x2\x2\x2\x2B39\x2B32\x3\x2\x2\x2\x2B3A\x39F\x3\x2\x2\x2\x2B3B"+
		"\x2B40\x5\x3A2\x1D2\x2\x2B3C\x2B3D\a\x462\x2\x2\x2B3D\x2B3F\x5\x3A2\x1D2"+
		"\x2\x2B3E\x2B3C\x3\x2\x2\x2\x2B3F\x2B42\x3\x2\x2\x2\x2B40\x2B3E\x3\x2"+
		"\x2\x2\x2B40\x2B41\x3\x2\x2\x2\x2B41\x3A1\x3\x2\x2\x2\x2B42\x2B40\x3\x2"+
		"\x2\x2\x2B43\x2B49\x5\x3A4\x1D3\x2\x2B44\x2B45\a\x45E\x2\x2\x2B45\x2B46"+
		"\x5\x3A2\x1D2\x2\x2B46\x2B47\a\x45F\x2\x2\x2B47\x2B49\x3\x2\x2\x2\x2B48"+
		"\x2B43\x3\x2\x2\x2\x2B48\x2B44\x3\x2\x2\x2\x2B49\x3A3\x3\x2\x2\x2\x2B4A"+
		"\x2B4E\x5\x3A6\x1D4\x2\x2B4B\x2B4D\x5\x3BA\x1DE\x2\x2B4C\x2B4B\x3\x2\x2"+
		"\x2\x2B4D\x2B50\x3\x2\x2\x2\x2B4E\x2B4C\x3\x2\x2\x2\x2B4E\x2B4F\x3\x2"+
		"\x2\x2\x2B4F\x2B5B\x3\x2\x2\x2\x2B50\x2B4E\x3\x2\x2\x2\x2B51\x2B52\a\x45E"+
		"\x2\x2\x2B52\x2B53\x5\x3A4\x1D3\x2\x2B53\x2B57\a\x45F\x2\x2\x2B54\x2B56"+
		"\x5\x3BA\x1DE\x2\x2B55\x2B54\x3\x2\x2\x2\x2B56\x2B59\x3\x2\x2\x2\x2B57"+
		"\x2B55\x3\x2\x2\x2\x2B57\x2B58\x3\x2\x2\x2\x2B58\x2B5B\x3\x2\x2\x2\x2B59"+
		"\x2B57\x3\x2\x2\x2\x2B5A\x2B4A\x3\x2\x2\x2\x2B5A\x2B51\x3\x2\x2\x2\x2B5B"+
		"\x3A5\x3\x2\x2\x2\x2B5C\x2B5E\x5\x3CC\x1E7\x2\x2B5D\x2B5F\x5\x400\x201"+
		"\x2\x2B5E\x2B5D\x3\x2\x2\x2\x2B5E\x2B5F\x3\x2\x2\x2\x2B5F\x2B9D\x3\x2"+
		"\x2\x2\x2B60\x2B62\x5\x43A\x21E\x2\x2B61\x2B63\x5\x404\x203\x2\x2B62\x2B61"+
		"\x3\x2\x2\x2\x2B62\x2B63\x3\x2\x2\x2\x2B63\x2B65\x3\x2\x2\x2\x2B64\x2B66"+
		"\x5\x400\x201\x2\x2B65\x2B64\x3\x2\x2\x2\x2B65\x2B66\x3\x2\x2\x2\x2B66"+
		"\x2B9D\x3\x2\x2\x2\x2B67\x2B69\x5\x3CE\x1E8\x2\x2B68\x2B6A\x5\x400\x201"+
		"\x2\x2B69\x2B68\x3\x2\x2\x2\x2B69\x2B6A\x3\x2\x2\x2\x2B6A\x2B9D\x3\x2"+
		"\x2\x2\x2B6B\x2B70\x5\x3D2\x1EA\x2\x2B6C\x2B6E\x5\x400\x201\x2\x2B6D\x2B6F"+
		"\x5\x40E\x208\x2\x2B6E\x2B6D\x3\x2\x2\x2\x2B6E\x2B6F\x3\x2\x2\x2\x2B6F"+
		"\x2B71\x3\x2\x2\x2\x2B70\x2B6C\x3\x2\x2\x2\x2B70\x2B71\x3\x2\x2\x2\x2B71"+
		"\x2B9D\x3\x2\x2\x2\x2B72\x2B74\x5\x3B4\x1DB\x2\x2B73\x2B75\x5\x400\x201"+
		"\x2\x2B74\x2B73\x3\x2\x2\x2\x2B74\x2B75\x3\x2\x2\x2\x2B75\x2B9D\x3\x2"+
		"\x2\x2\x2B76\x2B7B\x5\x3D4\x1EB\x2\x2B77\x2B79\x5\x400\x201\x2\x2B78\x2B7A"+
		"\x5\x40E\x208\x2\x2B79\x2B78\x3\x2\x2\x2\x2B79\x2B7A\x3\x2\x2\x2\x2B7A"+
		"\x2B7C\x3\x2\x2\x2\x2B7B\x2B77\x3\x2\x2\x2\x2B7B\x2B7C\x3\x2\x2\x2\x2B7C"+
		"\x2B9D\x3\x2\x2\x2\x2B7D\x2B7F\a\x445\x2\x2\x2B7E\x2B80\x5\x400\x201\x2"+
		"\x2B7F\x2B7E\x3\x2\x2\x2\x2B7F\x2B80\x3\x2\x2\x2\x2B80\x2B9D\x3\x2\x2"+
		"\x2\x2B81\x2B86\x5\x3F8\x1FD\x2\x2B82\x2B84\x5\x400\x201\x2\x2B83\x2B85"+
		"\x5\x40E\x208\x2\x2B84\x2B83\x3\x2\x2\x2\x2B84\x2B85\x3\x2\x2\x2\x2B85"+
		"\x2B87\x3\x2\x2\x2\x2B86\x2B82\x3\x2\x2\x2\x2B86\x2B87\x3\x2\x2\x2\x2B87"+
		"\x2B9D\x3\x2\x2\x2\x2B88\x2B8A\x5\x2A2\x152\x2\x2B89\x2B8B\x5\x400\x201"+
		"\x2\x2B8A\x2B89\x3\x2\x2\x2\x2B8A\x2B8B\x3\x2\x2\x2\x2B8B\x2B9D\x3\x2"+
		"\x2\x2\x2B8C\x2B8D\a\x445\x2\x2\x2B8D\x2B8E\a\x459\x2\x2\x2B8E\x2B93\x5"+
		"\x3D4\x1EB\x2\x2B8F\x2B91\x5\x400\x201\x2\x2B90\x2B92\x5\x40E\x208\x2"+
		"\x2B91\x2B90\x3\x2\x2\x2\x2B91\x2B92\x3\x2\x2\x2\x2B92\x2B94\x3\x2\x2"+
		"\x2\x2B93\x2B8F\x3\x2\x2\x2\x2B93\x2B94\x3\x2\x2\x2\x2B94\x2B9D\x3\x2"+
		"\x2\x2\x2B95\x2B9D\x5\x3A8\x1D5\x2\x2B96\x2B9D\x5\x3AA\x1D6\x2\x2B97\x2B98"+
		"\a\x465\x2\x2\x2B98\x2B9A\x5\x3D4\x1EB\x2\x2B99\x2B9B\x5\x400\x201\x2"+
		"\x2B9A\x2B99\x3\x2\x2\x2\x2B9A\x2B9B\x3\x2\x2\x2\x2B9B\x2B9D\x3\x2\x2"+
		"\x2\x2B9C\x2B5C\x3\x2\x2\x2\x2B9C\x2B60\x3\x2\x2\x2\x2B9C\x2B67\x3\x2"+
		"\x2\x2\x2B9C\x2B6B\x3\x2\x2\x2\x2B9C\x2B72\x3\x2\x2\x2\x2B9C\x2B76\x3"+
		"\x2\x2\x2\x2B9C\x2B7D\x3\x2\x2\x2\x2B9C\x2B81\x3\x2\x2\x2\x2B9C\x2B88"+
		"\x3\x2\x2\x2\x2B9C\x2B8C\x3\x2\x2\x2\x2B9C\x2B95\x3\x2\x2\x2\x2B9C\x2B96"+
		"\x3\x2\x2\x2\x2B9C\x2B97\x3\x2\x2\x2\x2B9D\x3A7\x3\x2\x2\x2\x2B9E\x2B9F"+
		"\a\x296\x2\x2\x2B9F\x2BA0\a\x45E\x2\x2\x2BA0\x2BA1\x5\x35A\x1AE\x2\x2BA1"+
		"\x2BA2\a\x462\x2\x2\x2BA2\x2BA5\x5\x35A\x1AE\x2\x2BA3\x2BA4\a\x462\x2"+
		"\x2\x2BA4\x2BA6\x5\x35A\x1AE\x2\x2BA5\x2BA3\x3\x2\x2\x2\x2BA5\x2BA6\x3"+
		"\x2\x2\x2\x2BA6\x2BA7\x3\x2\x2\x2\x2BA7\x2BAD\a\x45F\x2\x2\x2BA8\x2BA9"+
		"\a\x42B\x2\x2\x2BA9\x2BAA\a\x45E\x2\x2\x2BAA\x2BAB\x5\x3B0\x1D9\x2\x2BAB"+
		"\x2BAC\a\x45F\x2\x2\x2BAC\x2BAE\x3\x2\x2\x2\x2BAD\x2BA8\x3\x2\x2\x2\x2BAD"+
		"\x2BAE\x3\x2\x2\x2\x2BAE\x2BB0\x3\x2\x2\x2\x2BAF\x2BB1\x5\x400\x201\x2"+
		"\x2BB0\x2BAF\x3\x2\x2\x2\x2BB0\x2BB1\x3\x2\x2\x2\x2BB1\x3A9\x3\x2\x2\x2"+
		"\x2BB2\x2BB3\a\x293\x2\x2\x2BB3\x2BB4\a\x45E\x2\x2\x2BB4\x2BB7\x5\x35A"+
		"\x1AE\x2\x2BB5\x2BB6\a\x462\x2\x2\x2BB6\x2BB8\x5\x35A\x1AE\x2\x2BB7\x2BB5"+
		"\x3\x2\x2\x2\x2BB7\x2BB8\x3\x2\x2\x2\x2BB8\x2BB9\x3\x2\x2\x2\x2BB9\x2BBF"+
		"\a\x45F\x2\x2\x2BBA\x2BBB\a\x42B\x2\x2\x2BBB\x2BBC\a\x45E\x2\x2\x2BBC"+
		"\x2BBD\x5\x3AC\x1D7\x2\x2BBD\x2BBE\a\x45F\x2\x2\x2BBE\x2BC0\x3\x2\x2\x2"+
		"\x2BBF\x2BBA\x3\x2\x2\x2\x2BBF\x2BC0\x3\x2\x2\x2\x2BC0\x2BC2\x3\x2\x2"+
		"\x2\x2BC1\x2BC3\x5\x400\x201\x2\x2BC2\x2BC1\x3\x2\x2\x2\x2BC2\x2BC3\x3"+
		"\x2\x2\x2\x2BC3\x3AB\x3\x2\x2\x2\x2BC4\x2BC9\x5\x3AE\x1D8\x2\x2BC5\x2BC6"+
		"\a\x462\x2\x2\x2BC6\x2BC8\x5\x3AE\x1D8\x2\x2BC7\x2BC5\x3\x2\x2\x2\x2BC8"+
		"\x2BCB\x3\x2\x2\x2\x2BC9\x2BC7\x3\x2\x2\x2\x2BC9\x2BCA\x3\x2\x2\x2\x2BCA"+
		"\x3AD\x3\x2\x2\x2\x2BCB\x2BC9\x3\x2\x2\x2\x2BCC\x2BCF\x5\x3B2\x1DA\x2"+
		"\x2BCD\x2BCE\a:\x2\x2\x2BCE\x2BD0\a\x1E1\x2\x2\x2BCF\x2BCD\x3\x2\x2\x2"+
		"\x2BCF\x2BD0\x3\x2\x2\x2\x2BD0\x3AF\x3\x2\x2\x2\x2BD1\x2BD6\x5\x3B2\x1DA"+
		"\x2\x2BD2\x2BD3\a\x462\x2\x2\x2BD3\x2BD5\x5\x3B2\x1DA\x2\x2BD4\x2BD2\x3"+
		"\x2\x2\x2\x2BD5\x2BD8\x3\x2\x2\x2\x2BD6\x2BD4\x3\x2\x2\x2\x2BD6\x2BD7"+
		"\x3\x2\x2\x2\x2BD7\x3B1\x3\x2\x2\x2\x2BD8\x2BD6\x3\x2\x2\x2\x2BD9\x2BDA"+
		"\x5\x47A\x23E\x2\x2BDA\x2BDC\x5\x470\x239\x2\x2BDB\x2BDD\a\x448\x2\x2"+
		"\x2BDC\x2BDB\x3\x2\x2\x2\x2BDC\x2BDD\x3\x2\x2\x2\x2BDD\x3B3\x3\x2\x2\x2"+
		"\x2BDE\x2BE1\x5\x3B6\x1DC\x2\x2BDF\x2BE1\x5\x3B8\x1DD\x2\x2BE0\x2BDE\x3"+
		"\x2\x2\x2\x2BE0\x2BDF\x3\x2\x2\x2\x2BE1\x3B5\x3\x2\x2\x2\x2BE2\x2BE3\a"+
		"\x82\x2\x2\x2BE3\x2BE4\a\x45E\x2\x2\x2BE4\x2BE5\a\x81\x2\x2\x2BE5\x2BE6"+
		"\x5\x43C\x21F\x2\x2BE6\x2BE7\a\x462\x2\x2\x2BE7\x2BE8\t\x8F\x2\x2\x2BE8"+
		"\x2BE9\a\x45F\x2\x2\x2BE9\x3B7\x3\x2\x2\x2\x2BEA\x2BEB\a\x82\x2\x2\x2BEB"+
		"\x2BEC\a\x45E\x2\x2\x2BEC\x2BED\a\x41E\x2\x2\x2BED\x2BEE\x5\x43C\x21F"+
		"\x2\x2BEE\x2BEF\a\x462\x2\x2\x2BEF\x2BF0\x5\x3CA\x1E6\x2\x2BF0\x2BF1\a"+
		"\x462\x2\x2\x2BF1\x2BF2\x5\x392\x1CA\x2\x2BF2\x2BF3\a\x45F\x2\x2\x2BF3"+
		"\x3B9\x3\x2\x2\x2\x2BF4\x2BFA\x5\x3BC\x1DF\x2\x2BF5\x2BFA\x5\x3BE\x1E0"+
		"\x2\x2BF6\x2BFA\x5\x3C0\x1E1\x2\x2BF7\x2BFA\x5\x3C2\x1E2\x2\x2BF8\x2BFA"+
		"\x5\x3C4\x1E3\x2\x2BF9\x2BF4\x3\x2\x2\x2\x2BF9\x2BF5\x3\x2\x2\x2\x2BF9"+
		"\x2BF6\x3\x2\x2\x2\x2BF9\x2BF7\x3\x2\x2\x2\x2BF9\x2BF8\x3\x2\x2\x2\x2BFA"+
		"\x3BB\x3\x2\x2\x2\x2BFB\x2BFD\a\x1CB\x2\x2\x2BFC\x2BFB\x3\x2\x2\x2\x2BFC"+
		"\x2BFD\x3\x2\x2\x2\x2BFD\x2C03\x3\x2\x2\x2\x2BFE\x2C00\t\x90\x2\x2\x2BFF"+
		"\x2C01\a\x2A2\x2\x2\x2C00\x2BFF\x3\x2\x2\x2\x2C00\x2C01\x3\x2\x2\x2\x2C01"+
		"\x2C03\x3\x2\x2\x2\x2C02\x2BFC\x3\x2\x2\x2\x2C02\x2BFE\x3\x2\x2\x2\x2C03"+
		"\x2C05\x3\x2\x2\x2\x2C04\x2C06\t\x91\x2\x2\x2C05\x2C04\x3\x2\x2\x2\x2C05"+
		"\x2C06\x3\x2\x2\x2\x2C06\x2C07\x3\x2\x2\x2\x2C07\x2C08\a\x1E0\x2\x2\x2C08"+
		"\x2C09\x5\x3A2\x1D2\x2\x2C09\x2C0A\a\x28D\x2\x2\x2C0A\x2C0B\x5\x372\x1BA"+
		"\x2\x2C0B\x3BD\x3\x2\x2\x2\x2C0C\x2C0D\a\xCD\x2\x2\x2C0D\x2C0E\a\x1E0"+
		"\x2\x2\x2C0E\x2C0F\x5\x3A2\x1D2\x2\x2C0F\x3BF\x3\x2\x2\x2\x2C10\x2C11"+
		"\t\x92\x2\x2\x2C11\x2C12\a\x36\x2\x2\x2C12\x2C13\x5\x3A2\x1D2\x2\x2C13"+
		"\x3C1\x3\x2\x2\x2\x2C14\x2C15\a\x2C7\x2\x2\x2C15\x2C16\x5\x3C6\x1E4\x2"+
		"\x2C16\x2C17\x5\x400\x201\x2\x2C17\x3C3\x3\x2\x2\x2\x2C18\x2C19\a\x406"+
		"\x2\x2\x2C19\x2C1A\x5\x3C8\x1E5\x2\x2C1A\x2C1B\x5\x400\x201\x2\x2C1B\x3C5"+
		"\x3\x2\x2\x2\x2C1C\x2C1D\a\x45E\x2\x2\x2C1D\x2C1E\x5\x418\x20D\x2\x2C1E"+
		"\x2C1F\a\x16F\x2\x2\x2C1F\x2C20\x5\x448\x225\x2\x2C20\x2C21\a\x1BF\x2"+
		"\x2\x2C21\x2C22\x5\x40E\x208\x2\x2C22\x2C23\a\x45F\x2\x2\x2C23\x3C7\x3"+
		"\x2\x2\x2\x2C24\x2C25\a\x45E\x2\x2\x2C25\x2C26\x5\x35A\x1AE\x2\x2C26\x2C27"+
		"\a\x16F\x2\x2\x2C27\x2C28\x5\x448\x225\x2\x2C28\x2C29\a\x1BF\x2\x2\x2C29"+
		"\x2C2A\a\x45E\x2\x2\x2C2A\x2C2B\x5\x3CA\x1E6\x2\x2C2B\x2C2C\a\x45F\x2"+
		"\x2\x2C2C\x2C2D\a\x45F\x2\x2\x2C2D\x3C9\x3\x2\x2\x2\x2C2E\x2C33\x5\x448"+
		"\x225\x2\x2C2F\x2C30\a\x462\x2\x2\x2C30\x2C32\x5\x448\x225\x2\x2C31\x2C2F"+
		"\x3\x2\x2\x2\x2C32\x2C35\x3\x2\x2\x2\x2C33\x2C31\x3\x2\x2\x2\x2C33\x2C34"+
		"\x3\x2\x2\x2\x2C34\x3CB\x3\x2\x2\x2\x2C35\x2C33\x3\x2\x2\x2\x2C36\x2C38"+
		"\x5\x43C\x21F\x2\x2C37\x2C39\x5\x404\x203\x2\x2C38\x2C37\x3\x2\x2\x2\x2C38"+
		"\x2C39\x3\x2\x2\x2\x2C39\x3CD\x3\x2\x2\x2\x2C3A\x2C3B\a\x295\x2\x2\x2C3B"+
		"\x2C3C\a\x45E\x2\x2\x2C3C\x2C3D\a\x448\x2\x2\x2C3D\x2C3E\a\x462\x2\x2"+
		"\x2C3E\x2C3F\a\x448\x2\x2\x2C3F\x2C40\a\x462\x2\x2\x2C40\x2C41\a\x448"+
		"\x2\x2\x2C41\x2C55\a\x45F\x2\x2\x2C42\x2C43\a\x295\x2\x2\x2C43\x2C44\a"+
		"\x45E\x2\x2\x2C44\x2C45\ao\x2\x2\x2C45\x2C46\a\x448\x2\x2\x2C46\x2C50"+
		"\a\x462\x2\x2\x2C47\x2C4C\x5\x3D0\x1E9\x2\x2C48\x2C49\a\x462\x2\x2\x2C49"+
		"\x2C4B\x5\x3D0\x1E9\x2\x2C4A\x2C48\x3\x2\x2\x2\x2C4B\x2C4E\x3\x2\x2\x2"+
		"\x2C4C\x2C4A\x3\x2\x2\x2\x2C4C\x2C4D\x3\x2\x2\x2\x2C4D\x2C51\x3\x2\x2"+
		"\x2\x2C4E\x2C4C\x3\x2\x2\x2\x2C4F\x2C51\x5\x47A\x23E\x2\x2C50\x2C47\x3"+
		"\x2\x2\x2\x2C50\x2C4F\x3\x2\x2\x2\x2C51\x2C52\x3\x2\x2\x2\x2C52\x2C53"+
		"\a\x45F\x2\x2\x2C53\x2C55\x3\x2\x2\x2\x2C54\x2C3A\x3\x2\x2\x2\x2C54\x2C42"+
		"\x3\x2\x2\x2\x2C55\x3CF\x3\x2\x2\x2\x2C56\x2C57\x5\x47A\x23E\x2\x2C57"+
		"\x2C58\a\x44C\x2\x2\x2C58\x2C59\t!\x2\x2\x2C59\x3D1\x3\x2\x2\x2\x2C5A"+
		"\x2C6D\x5\x368\x1B5\x2\x2C5B\x2C5C\a\x45E\x2\x2\x2C5C\x2C62\x5\x368\x1B5"+
		"\x2\x2C5D\x2C5E\a\x400\x2\x2\x2C5E\x2C5F\a\x18\x2\x2\x2C5F\x2C61\x5\x368"+
		"\x1B5\x2\x2C60\x2C5D\x3\x2\x2\x2\x2C61\x2C64\x3\x2\x2\x2\x2C62\x2C60\x3"+
		"\x2\x2\x2\x2C62\x2C63\x3\x2\x2\x2\x2C63\x2C65\x3\x2\x2\x2\x2C64\x2C62"+
		"\x3\x2\x2\x2\x2C65\x2C66\a\x45F\x2\x2\x2C66\x2C6D\x3\x2\x2\x2\x2C67\x2C6D"+
		"\x5\x412\x20A\x2\x2C68\x2C69\a\x45E\x2\x2\x2C69\x2C6A\x5\x412\x20A\x2"+
		"\x2C6A\x2C6B\a\x45F\x2\x2\x2C6B\x2C6D\x3\x2\x2\x2\x2C6C\x2C5A\x3\x2\x2"+
		"\x2\x2C6C\x2C5B\x3\x2\x2\x2\x2C6C\x2C67\x3\x2\x2\x2\x2C6C\x2C68\x3\x2"+
		"\x2\x2\x2C6D\x3D3\x3\x2\x2\x2\x2C6E\x2C7C\x5\x416\x20C\x2\x2C6F\x2C7C"+
		"\x5\x418\x20D\x2\x2C70\x2C7C\x5\x41A\x20E\x2\x2C71\x2C7C\x5\x3DC\x1EF"+
		"\x2\x2C72\x2C73\x5\x45C\x22F\x2\x2C73\x2C75\a\x45E\x2\x2\x2C74\x2C76\x5"+
		"\x414\x20B\x2\x2C75\x2C74\x3\x2\x2\x2\x2C75\x2C76\x3\x2\x2\x2\x2C76\x2C77"+
		"\x3\x2\x2\x2\x2C77\x2C78\a\x45F\x2\x2\x2C78\x2C7C\x3\x2\x2\x2\x2C79\x2C7C"+
		"\x5\x3D8\x1ED\x2\x2C7A\x2C7C\x5\x3D6\x1EC\x2\x2C7B\x2C6E\x3\x2\x2\x2\x2C7B"+
		"\x2C6F\x3\x2\x2\x2\x2C7B\x2C70\x3\x2\x2\x2\x2C7B\x2C71\x3\x2\x2\x2\x2C7B"+
		"\x2C72\x3\x2\x2\x2\x2C7B\x2C79\x3\x2\x2\x2\x2C7B\x2C7A\x3\x2\x2\x2\x2C7C"+
		"\x3D5\x3\x2\x2\x2\x2C7D\x2C7E\x5\x47A\x23E\x2\x2C7E\x2C7F\a\x459\x2\x2"+
		"\x2C7F\x2C81\x3\x2\x2\x2\x2C80\x2C7D\x3\x2\x2\x2\x2C80\x2C81\x3\x2\x2"+
		"\x2\x2C81\x2C82\x3\x2\x2\x2\x2C82\x2C83\a\x118\x2\x2\x2C83\x2C84\a\x459"+
		"\x2\x2\x2C84\x2C85\x5\x47A\x23E\x2\x2C85\x2C86\a\x45E\x2\x2\x2C86\x2C87"+
		"\x5\x35A\x1AE\x2\x2C87\x2C88\a\x45F\x2\x2\x2C88\x3D7\x3\x2\x2\x2\x2C89"+
		"\x2C8A\t\x93\x2\x2\x2C8A\x2C8B\a\x45E\x2\x2\x2C8B\x2C8C\x5\x43C\x21F\x2"+
		"\x2C8C\x2C9A\a\x462\x2\x2\x2C8D\x2C9B\x5\x448\x225\x2\x2C8E\x2C8F\a\x45E"+
		"\x2\x2\x2C8F\x2C94\x5\x448\x225\x2\x2C90\x2C91\a\x462\x2\x2\x2C91\x2C93"+
		"\x5\x448\x225\x2\x2C92\x2C90\x3\x2\x2\x2\x2C93\x2C96\x3\x2\x2\x2\x2C94"+
		"\x2C92\x3\x2\x2\x2\x2C94\x2C95\x3\x2\x2\x2\x2C95\x2C97\x3\x2\x2\x2\x2C96"+
		"\x2C94\x3\x2\x2\x2\x2C97\x2C98\a\x45F\x2\x2\x2C98\x2C9B\x3\x2\x2\x2\x2C99"+
		"\x2C9B\a\x466\x2\x2\x2C9A\x2C8D\x3\x2\x2\x2\x2C9A\x2C8E\x3\x2\x2\x2\x2C9A"+
		"\x2C99\x3\x2\x2\x2\x2C9B\x2C9C\x3\x2\x2\x2\x2C9C\x2C9D\a\x462\x2\x2\x2C9D"+
		"\x2CA1\x5\x35A\x1AE\x2\x2C9E\x2C9F\a\x462\x2\x2\x2C9F\x2CA0\a\x1F6\x2"+
		"\x2\x2CA0\x2CA2\x5\x35A\x1AE\x2\x2CA1\x2C9E\x3\x2\x2\x2\x2CA1\x2CA2\x3"+
		"\x2\x2\x2\x2CA2\x2CA5\x3\x2\x2\x2\x2CA3\x2CA4\a\x462\x2\x2\x2CA4\x2CA6"+
		"\x5\x35A\x1AE\x2\x2CA5\x2CA3\x3\x2\x2\x2\x2CA5\x2CA6\x3\x2\x2\x2\x2CA6"+
		"\x2CA7\x3\x2\x2\x2\x2CA7\x2CA8\a\x45F\x2\x2\x2CA8\x2CCE\x3\x2\x2\x2\x2CA9"+
		"\x2CAA\t\x94\x2\x2\x2CAA\x2CAB\a\x45E\x2\x2\x2CAB\x2CAC\x5\x43C\x21F\x2"+
		"\x2CAC\x2CBA\a\x462\x2\x2\x2CAD\x2CBB\x5\x448\x225\x2\x2CAE\x2CAF\a\x45E"+
		"\x2\x2\x2CAF\x2CB4\x5\x448\x225\x2\x2CB0\x2CB1\a\x462\x2\x2\x2CB1\x2CB3"+
		"\x5\x448\x225\x2\x2CB2\x2CB0\x3\x2\x2\x2\x2CB3\x2CB6\x3\x2\x2\x2\x2CB4"+
		"\x2CB2\x3\x2\x2\x2\x2CB4\x2CB5\x3\x2\x2\x2\x2CB5\x2CB7\x3\x2\x2\x2\x2CB6"+
		"\x2CB4\x3\x2\x2\x2\x2CB7\x2CB8\a\x45F\x2\x2\x2CB8\x2CBB\x3\x2\x2\x2\x2CB9"+
		"\x2CBB\a\x466\x2\x2\x2CBA\x2CAD\x3\x2\x2\x2\x2CBA\x2CAE\x3\x2\x2\x2\x2CBA"+
		"\x2CB9\x3\x2\x2\x2\x2CBB\x2CBC\x3\x2\x2\x2\x2CBC\x2CBD\a\x462\x2\x2\x2CBD"+
		"\x2CBE\x5\x35A\x1AE\x2\x2CBE\x2CBF\a\x45F\x2\x2\x2CBF\x2CCE\x3\x2\x2\x2"+
		"\x2CC0\x2CC1\a\x369\x2\x2\x2CC1\x2CC2\a\x45E\x2\x2\x2CC2\x2CC3\x5\x43C"+
		"\x21F\x2\x2CC3\x2CC4\a\x462\x2\x2\x2CC4\x2CC5\x5\x448\x225\x2\x2CC5\x2CC6"+
		"\a\x462\x2\x2\x2CC6\x2CC7\x5\x35A\x1AE\x2\x2CC7\x2CC8\a\x462\x2\x2\x2CC8"+
		"\x2CC9\x5\x448\x225\x2\x2CC9\x2CCA\a\x462\x2\x2\x2CCA\x2CCB\x5\x35A\x1AE"+
		"\x2\x2CCB\x2CCC\a\x45F\x2\x2\x2CCC\x2CCE\x3\x2\x2\x2\x2CCD\x2C89\x3\x2"+
		"\x2\x2\x2CCD\x2CA9\x3\x2\x2\x2\x2CCD\x2CC0\x3\x2\x2\x2\x2CCE\x3D9\x3\x2"+
		"\x2\x2\x2CCF\x2CD0\a\xB7\x2\x2\x2CD0\x2CE5\a\x45E\x2\x2\x2CD1\x2CE6\x5"+
		"\x448\x225\x2\x2CD2\x2CD3\a\x45E\x2\x2\x2CD3\x2CD8\x5\x448\x225\x2\x2CD4"+
		"\x2CD5\a\x462\x2\x2\x2CD5\x2CD7\x5\x448\x225\x2\x2CD6\x2CD4\x3\x2\x2\x2"+
		"\x2CD7\x2CDA\x3\x2\x2\x2\x2CD8\x2CD6\x3\x2\x2\x2\x2CD8\x2CD9\x3\x2\x2"+
		"\x2\x2CD9\x2CDB\x3\x2\x2\x2\x2CDA\x2CD8\x3\x2\x2\x2\x2CDB\x2CDC\a\x45F"+
		"\x2\x2\x2CDC\x2CE6\x3\x2\x2\x2\x2CDD\x2CE6\a\x466\x2\x2\x2CDE\x2CDF\a"+
		"\x2E0\x2\x2\x2CDF\x2CE0\a\x45E\x2\x2\x2CE0\x2CE1\x5\x448\x225\x2\x2CE1"+
		"\x2CE2\a\x462\x2\x2\x2CE2\x2CE3\x5\x35A\x1AE\x2\x2CE3\x2CE4\a\x45F\x2"+
		"\x2\x2CE4\x2CE6\x3\x2\x2\x2\x2CE5\x2CD1\x3\x2\x2\x2\x2CE5\x2CD2\x3\x2"+
		"\x2\x2\x2CE5\x2CDD\x3\x2\x2\x2\x2CE5\x2CDE\x3\x2\x2\x2\x2CE6\x2CE7\x3"+
		"\x2\x2\x2\x2CE7\x2CE8\a\x462\x2\x2\x2CE8\x2CE9\x5\x35A\x1AE\x2\x2CE9\x2CEA"+
		"\a\x45F\x2\x2\x2CEA\x2D08\x3\x2\x2\x2\x2CEB\x2CEC\a\x17C\x2\x2\x2CEC\x2CED"+
		"\a\x45E\x2\x2\x2CED\x2CEE\x5\x43C\x21F\x2\x2CEE\x2CFC\a\x462\x2\x2\x2CEF"+
		"\x2CFD\x5\x448\x225\x2\x2CF0\x2CF1\a\x45E\x2\x2\x2CF1\x2CF6\x5\x448\x225"+
		"\x2\x2CF2\x2CF3\a\x462\x2\x2\x2CF3\x2CF5\x5\x448\x225\x2\x2CF4\x2CF2\x3"+
		"\x2\x2\x2\x2CF5\x2CF8\x3\x2\x2\x2\x2CF6\x2CF4\x3\x2\x2\x2\x2CF6\x2CF7"+
		"\x3\x2\x2\x2\x2CF7\x2CF9\x3\x2\x2\x2\x2CF8\x2CF6\x3\x2\x2\x2\x2CF9\x2CFA"+
		"\a\x45F\x2\x2\x2CFA\x2CFD\x3\x2\x2\x2\x2CFB\x2CFD\a\x466\x2\x2\x2CFC\x2CEF"+
		"\x3\x2\x2\x2\x2CFC\x2CF0\x3\x2\x2\x2\x2CFC\x2CFB\x3\x2\x2\x2\x2CFD\x2CFE"+
		"\x3\x2\x2\x2\x2CFE\x2CFF\a\x462\x2\x2\x2CFF\x2D03\x5\x35A\x1AE\x2\x2D00"+
		"\x2D01\a\x462\x2\x2\x2D01\x2D02\a\x1F6\x2\x2\x2D02\x2D04\x5\x35A\x1AE"+
		"\x2\x2D03\x2D00\x3\x2\x2\x2\x2D03\x2D04\x3\x2\x2\x2\x2D04\x2D05\x3\x2"+
		"\x2\x2\x2D05\x2D06\a\x45F\x2\x2\x2D06\x2D08\x3\x2\x2\x2\x2D07\x2CCF\x3"+
		"\x2\x2\x2\x2D07\x2CEB\x3\x2\x2\x2\x2D08\x3DB\x3\x2\x2\x2\x2D09\x2D0A\a"+
		"\x61\x2\x2\x2D0A\x2D0B\a\x45E\x2\x2\x2D0B\x2D0C\a\x466\x2\x2\x2D0C\x2D9C"+
		"\a\x45F\x2\x2\x2D0D\x2D0E\ax\x2\x2\x2D0E\x2D0F\a\x45E\x2\x2\x2D0F\x2D10"+
		"\x5\x35A\x1AE\x2\x2D10\x2D11\a:\x2\x2\x2D11\x2D12\x5\x470\x239\x2\x2D12"+
		"\x2D13\a\x45F\x2\x2\x2D13\x2D9C\x3\x2\x2\x2\x2D14\x2D15\a\x3F3\x2\x2\x2D15"+
		"\x2D16\a\x45E\x2\x2\x2D16\x2D17\x5\x35A\x1AE\x2\x2D17\x2D18\a:\x2\x2\x2D18"+
		"\x2D19\x5\x470\x239\x2\x2D19\x2D1A\a\x45F\x2\x2\x2D1A\x2D9C\x3\x2\x2\x2"+
		"\x2D1B\x2D1C\a\xC2\x2\x2\x2D1C\x2D1D\a\x45E\x2\x2\x2D1D\x2D1E\x5\x470"+
		"\x239\x2\x2D1E\x2D1F\a\x462\x2\x2\x2D1F\x2D22\x5\x35A\x1AE\x2\x2D20\x2D21"+
		"\a\x462\x2\x2\x2D21\x2D23\x5\x35A\x1AE\x2\x2D22\x2D20\x3\x2\x2\x2\x2D22"+
		"\x2D23\x3\x2\x2\x2\x2D23\x2D24\x3\x2\x2\x2\x2D24\x2D25\a\x45F\x2\x2\x2D25"+
		"\x2D9C\x3\x2\x2\x2\x2D26\x2D27\a\x8E\x2\x2\x2D27\x2D28\a\x45E\x2\x2\x2D28"+
		"\x2D29\a\x466\x2\x2\x2D29\x2D9C\a\x45F\x2\x2\x2D2A\x2D2B\a\x9A\x2\x2\x2D2B"+
		"\x2D2C\a\x45E\x2\x2\x2D2C\x2D2D\x5\x414\x20B\x2\x2D2D\x2D2E\a\x45F\x2"+
		"\x2\x2D2E\x2D9C\x3\x2\x2\x2\x2D2F\x2D9C\a\xD4\x2\x2\x2D30\x2D9C\a\xD6"+
		"\x2\x2\x2D31\x2D32\a\xE6\x2\x2\x2D32\x2D33\a\x45E\x2\x2\x2D33\x2D34\a"+
		"\x447\x2\x2\x2D34\x2D35\a\x462\x2\x2\x2D35\x2D36\x5\x35A\x1AE\x2\x2D36"+
		"\x2D37\a\x462\x2\x2\x2D37\x2D38\x5\x35A\x1AE\x2\x2D38\x2D39\a\x45F\x2"+
		"\x2\x2D39\x2D9C\x3\x2\x2\x2\x2D3A\x2D3B\a\xE7\x2\x2\x2D3B\x2D3C\a\x45E"+
		"\x2\x2\x2D3C\x2D3D\a\x447\x2\x2\x2D3D\x2D3E\a\x462\x2\x2\x2D3E\x2D3F\x5"+
		"\x35A\x1AE\x2\x2D3F\x2D40\a\x462\x2\x2\x2D40\x2D41\x5\x35A\x1AE\x2\x2D41"+
		"\x2D42\a\x45F\x2\x2\x2D42\x2D9C\x3\x2\x2\x2\x2D43\x2D44\a\xE8\x2\x2\x2D44"+
		"\x2D45\a\x45E\x2\x2\x2D45\x2D46\a\x447\x2\x2\x2D46\x2D47\a\x462\x2\x2"+
		"\x2D47\x2D48\x5\x35A\x1AE\x2\x2D48\x2D49\a\x45F\x2\x2\x2D49\x2D9C\x3\x2"+
		"\x2\x2\x2D4A\x2D4B\a\xE9\x2\x2\x2D4B\x2D4C\a\x45E\x2\x2\x2D4C\x2D4D\a"+
		"\x447\x2\x2\x2D4D\x2D4E\a\x462\x2\x2\x2D4E\x2D4F\x5\x35A\x1AE\x2\x2D4F"+
		"\x2D50\a\x45F\x2\x2\x2D50\x2D9C\x3\x2\x2\x2\x2D51\x2D52\a\x18A\x2\x2\x2D52"+
		"\x2D53\a\x45E\x2\x2\x2D53\x2D9C\a\x45F\x2\x2\x2D54\x2D55\a\x18F\x2\x2"+
		"\x2D55\x2D56\a\x45E\x2\x2\x2D56\x2D9C\a\x45F\x2\x2\x2D57\x2D58\a\x1AD"+
		"\x2\x2\x2D58\x2D59\a\x45E\x2\x2\x2D59\x2D5C\x5\x470\x239\x2\x2D5A\x2D5B"+
		"\a\x462\x2\x2\x2D5B\x2D5D\a\x446\x2\x2\x2D5C\x2D5A\x3\x2\x2\x2\x2D5C\x2D5D"+
		"\x3\x2\x2\x2\x2D5D\x2D60\x3\x2\x2\x2\x2D5E\x2D5F\a\x462\x2\x2\x2D5F\x2D61"+
		"\a\x446\x2\x2\x2D60\x2D5E\x3\x2\x2\x2\x2D60\x2D61\x3\x2\x2\x2\x2D61\x2D62"+
		"\x3\x2\x2\x2\x2D62\x2D63\a\x45F\x2\x2\x2D63\x2D9C\x3\x2\x2\x2\x2D64\x2D65"+
		"\a\x240\x2\x2\x2D65\x2D66\a\x45E\x2\x2\x2D66\x2D9C\a\x45F\x2\x2\x2D67"+
		"\x2D68\a\x279\x2\x2\x2D68\x2D69\a\x45E\x2\x2\x2D69\x2D6A\x5\x35A\x1AE"+
		"\x2\x2D6A\x2D6B\a\x462\x2\x2\x2D6B\x2D6C\x5\x35A\x1AE\x2\x2D6C\x2D6D\a"+
		"\x45F\x2\x2\x2D6D\x2D9C\x3\x2\x2\x2\x2D6E\x2D6F\a\x3B9\x2\x2\x2D6F\x2D70"+
		"\a\x45E\x2\x2\x2D70\x2D71\x5\x35A\x1AE\x2\x2D71\x2D72\a\x462\x2\x2\x2D72"+
		"\x2D73\a\x446\x2\x2\x2D73\x2D74\a\x462\x2\x2\x2D74\x2D75\a\x446\x2\x2"+
		"\x2D75\x2D76\a\x462\x2\x2\x2D76\x2D77\x5\x35A\x1AE\x2\x2D77\x2D78\a\x45F"+
		"\x2\x2\x2D78\x2D9C\x3\x2\x2\x2\x2D79\x2D9C\a\x37B\x2\x2\x2D7A\x2D9C\a"+
		"\x3CA\x2\x2\x2D7B\x2D9C\a\x40F\x2\x2\x2D7C\x2D7D\a\x1D9\x2\x2\x2D7D\x2D7E"+
		"\a\x45E\x2\x2\x2D7E\x2D7F\x5\x35A\x1AE\x2\x2D7F\x2D80\a\x462\x2\x2\x2D80"+
		"\x2D81\x5\x35A\x1AE\x2\x2D81\x2D82\a\x45F\x2\x2\x2D82\x2D9C\x3\x2\x2\x2"+
		"\x2D83\x2D9C\x5\x3DE\x1F0\x2\x2D84\x2D85\a\x1BA\x2\x2\x2D85\x2D86\a\x45E"+
		"\x2\x2\x2D86\x2D87\x5\x372\x1BA\x2\x2D87\x2D88\a\x462\x2\x2\x2D88\x2D89"+
		"\x5\x35A\x1AE\x2\x2D89\x2D8A\a\x462\x2\x2\x2D8A\x2D8B\x5\x35A\x1AE\x2"+
		"\x2D8B\x2D8C\a\x45F\x2\x2\x2D8C\x2D9C\x3\x2\x2\x2\x2D8D\x2D8E\a\x3B7\x2"+
		"\x2\x2D8E\x2D8F\a\x45E\x2\x2\x2D8F\x2D90\x5\x35A\x1AE\x2\x2D90\x2D91\a"+
		"\x462\x2\x2\x2D91\x2D92\x5\x35A\x1AE\x2\x2D92\x2D99\a\x45F\x2\x2\x2D93"+
		"\x2D94\a\x42C\x2\x2\x2D94\x2D95\a\x198\x2\x2\x2D95\x2D96\a\x45E\x2\x2"+
		"\x2D96\x2D97\x5\x382\x1C2\x2\x2D97\x2D98\a\x45F\x2\x2\x2D98\x2D9A\x3\x2"+
		"\x2\x2\x2D99\x2D93\x3\x2\x2\x2\x2D99\x2D9A\x3\x2\x2\x2\x2D9A\x2D9C\x3"+
		"\x2\x2\x2\x2D9B\x2D09\x3\x2\x2\x2\x2D9B\x2D0D\x3\x2\x2\x2\x2D9B\x2D14"+
		"\x3\x2\x2\x2\x2D9B\x2D1B\x3\x2\x2\x2\x2D9B\x2D26\x3\x2\x2\x2\x2D9B\x2D2A"+
		"\x3\x2\x2\x2\x2D9B\x2D2F\x3\x2\x2\x2\x2D9B\x2D30\x3\x2\x2\x2\x2D9B\x2D31"+
		"\x3\x2\x2\x2\x2D9B\x2D3A\x3\x2\x2\x2\x2D9B\x2D43\x3\x2\x2\x2\x2D9B\x2D4A"+
		"\x3\x2\x2\x2\x2D9B\x2D51\x3\x2\x2\x2\x2D9B\x2D54\x3\x2\x2\x2\x2D9B\x2D57"+
		"\x3\x2\x2\x2\x2D9B\x2D64\x3\x2\x2\x2\x2D9B\x2D67\x3\x2\x2\x2\x2D9B\x2D6E"+
		"\x3\x2\x2\x2\x2D9B\x2D79\x3\x2\x2\x2\x2D9B\x2D7A\x3\x2\x2\x2\x2D9B\x2D7B"+
		"\x3\x2\x2\x2\x2D9B\x2D7C\x3\x2\x2\x2\x2D9B\x2D83\x3\x2\x2\x2\x2D9B\x2D84"+
		"\x3\x2\x2\x2\x2D9B\x2D8D\x3\x2\x2\x2\x2D9C\x3DD\x3\x2\x2\x2\x2D9D\x2DA2"+
		"\x5\x3E8\x1F5\x2\x2D9E\x2DA2\x5\x3EC\x1F7\x2\x2D9F\x2DA2\x5\x3F0\x1F9"+
		"\x2\x2DA0\x2DA2\x5\x3F4\x1FB\x2\x2DA1\x2D9D\x3\x2\x2\x2\x2DA1\x2D9E\x3"+
		"\x2\x2\x2\x2DA1\x2D9F\x3\x2\x2\x2\x2DA1\x2DA0\x3\x2\x2\x2\x2DA2\x3DF\x3"+
		"\x2\x2\x2\x2DA3\x2DA4\t\x95\x2\x2\x2DA4\x3E1\x3\x2\x2\x2\x2DA5\x2DAD\x5"+
		"\x3E0\x1F1\x2\x2DA6\x2DAD\a\x486\x2\x2\x2DA7\x2DAD\a\x487\x2\x2\x2DA8"+
		"\x2DAD\a\x488\x2\x2\x2DA9\x2DAD\a\x489\x2\x2\x2DAA\x2DAD\a\x48A\x2\x2"+
		"\x2DAB\x2DAD\a\x48B\x2\x2\x2DAC\x2DA5\x3\x2\x2\x2\x2DAC\x2DA6\x3\x2\x2"+
		"\x2\x2DAC\x2DA7\x3\x2\x2\x2\x2DAC\x2DA8\x3\x2\x2\x2\x2DAC\x2DA9\x3\x2"+
		"\x2\x2\x2DAC\x2DAA\x3\x2\x2\x2\x2DAC\x2DAB\x3\x2\x2\x2\x2DAD\x3E3\x3\x2"+
		"\x2\x2\x2DAE\x2DB6\x5\x3E2\x1F2\x2\x2DAF\x2DB6\a\x48C\x2\x2\x2DB0\x2DB6"+
		"\a\x48D\x2\x2\x2DB1\x2DB6\a\x48E\x2\x2\x2DB2\x2DB6\a\x48F\x2\x2\x2DB3"+
		"\x2DB6\a\x490\x2\x2\x2DB4\x2DB6\a\x491\x2\x2\x2DB5\x2DAE\x3\x2\x2\x2\x2DB5"+
		"\x2DAF\x3\x2\x2\x2\x2DB5\x2DB0\x3\x2\x2\x2\x2DB5\x2DB1\x3\x2\x2\x2\x2DB5"+
		"\x2DB2\x3\x2\x2\x2\x2DB5\x2DB3\x3\x2\x2\x2\x2DB5\x2DB4\x3\x2\x2\x2\x2DB6"+
		"\x3E5\x3\x2\x2\x2\x2DB7\x2DBF\x5\x3E0\x1F1\x2\x2DB8\x2DBF\a\x486\x2\x2"+
		"\x2DB9\x2DBF\a\x487\x2\x2\x2DBA\x2DBF\a\x488\x2\x2\x2DBB\x2DBF\a\x489"+
		"\x2\x2\x2DBC\x2DBF\a\x490\x2\x2\x2DBD\x2DBF\a\x491\x2\x2\x2DBE\x2DB7\x3"+
		"\x2\x2\x2\x2DBE\x2DB8\x3\x2\x2\x2\x2DBE\x2DB9\x3\x2\x2\x2\x2DBE\x2DBA"+
		"\x3\x2\x2\x2\x2DBE\x2DBB\x3\x2\x2\x2\x2DBE\x2DBC\x3\x2\x2\x2\x2DBE\x2DBD"+
		"\x3\x2\x2\x2\x2DBF\x3E7\x3\x2\x2\x2\x2DC0\x2DC9\a\x445\x2\x2\x2DC1\x2DC9"+
		"\x5\x47A\x23E\x2\x2DC2\x2DC9\a\x13D\x2\x2\x2DC3\x2DC9\x5\x3EC\x1F7\x2"+
		"\x2DC4\x2DC5\a\x45E\x2\x2\x2DC5\x2DC6\x5\x368\x1B5\x2\x2DC6\x2DC7\a\x45F"+
		"\x2\x2\x2DC7\x2DC9\x3\x2\x2\x2\x2DC8\x2DC0\x3\x2\x2\x2\x2DC8\x2DC1\x3"+
		"\x2\x2\x2\x2DC8\x2DC2\x3\x2\x2\x2\x2DC8\x2DC3\x3\x2\x2\x2\x2DC8\x2DC4"+
		"\x3\x2\x2\x2\x2DC9\x2DCA\x3\x2\x2\x2\x2DCA\x2DCB\a\x459\x2\x2\x2DCB\x2DCC"+
		"\x5\x3EA\x1F6\x2\x2DCC\x3E9\x3\x2\x2\x2\x2DCD\x2DCE\a\x415\x2\x2\x2DCE"+
		"\x2DCF\a\x45E\x2\x2\x2DCF\x2DD0\a\x448\x2\x2\x2DD0\x2DD1\a\x462\x2\x2"+
		"\x2DD1\x2DD2\a\x448\x2\x2\x2DD2\x2DD3\a\x45F\x2\x2\x2DD3\x3EB\x3\x2\x2"+
		"\x2\x2DD4\x2DDC\a\x445\x2\x2\x2DD5\x2DDC\x5\x47A\x23E\x2\x2DD6\x2DDC\x5"+
		"\x43A\x21E\x2\x2DD7\x2DD8\a\x45E\x2\x2\x2DD8\x2DD9\x5\x368\x1B5\x2\x2DD9"+
		"\x2DDA\a\x45F\x2\x2\x2DDA\x2DDC\x3\x2\x2\x2\x2DDB\x2DD4\x3\x2\x2\x2\x2DDB"+
		"\x2DD5\x3\x2\x2\x2\x2DDB\x2DD6\x3\x2\x2\x2\x2DDB\x2DD7\x3\x2\x2\x2\x2DDC"+
		"\x2DDD\x3\x2\x2\x2\x2DDD\x2DDE\a\x459\x2\x2\x2DDE\x2DDF\x5\x3EE\x1F8\x2"+
		"\x2DDF\x3ED\x3\x2\x2\x2\x2DE0\x2DE1\a\x2E7\x2\x2\x2DE1\x2DE2\a\x45E\x2"+
		"\x2\x2DE2\x2DE3\a\x448\x2\x2\x2DE3\x2DE4\a\x45F\x2\x2\x2DE4\x3EF\x3\x2"+
		"\x2\x2\x2DE5\x2DEC\a\x445\x2\x2\x2DE6\x2DEC\x5\x47A\x23E\x2\x2DE7\x2DE8"+
		"\a\x45E\x2\x2\x2DE8\x2DE9\x5\x368\x1B5\x2\x2DE9\x2DEA\a\x45F\x2\x2\x2DEA"+
		"\x2DEC\x3\x2\x2\x2\x2DEB\x2DE5\x3\x2\x2\x2\x2DEB\x2DE6\x3\x2\x2\x2\x2DEB"+
		"\x2DE7\x3\x2\x2\x2\x2DEC\x2DED\x3\x2\x2\x2\x2DED\x2DEE\a\x459\x2\x2\x2DEE"+
		"\x2DEF\x5\x3F2\x1FA\x2\x2DEF\x3F1\x3\x2\x2\x2\x2DF0\x2DF1\a\x143\x2\x2"+
		"\x2DF1\x2DF2\a\x45E\x2\x2\x2DF2\x2DF3\a\x448\x2\x2\x2DF3\x2DF4\a\x45F"+
		"\x2\x2\x2DF4\x3F3\x3\x2\x2\x2\x2DF5\x2DFC\a\x445\x2\x2\x2DF6\x2DFC\x5"+
		"\x47A\x23E\x2\x2DF7\x2DF8\a\x45E\x2\x2\x2DF8\x2DF9\x5\x368\x1B5\x2\x2DF9"+
		"\x2DFA\a\x45F\x2\x2\x2DFA\x2DFC\x3\x2\x2\x2\x2DFB\x2DF5\x3\x2\x2\x2\x2DFB"+
		"\x2DF6\x3\x2\x2\x2\x2DFB\x2DF7\x3\x2\x2\x2\x2DFC\x2DFD\x3\x2\x2\x2\x2DFD"+
		"\x2DFE\a\x459\x2\x2\x2DFE\x2DFF\x5\x3F6\x1FC\x2\x2DFF\x3F5\x3\x2\x2\x2"+
		"\x2E00\x2E01\a\x248\x2\x2\x2E01\x2E02\a\x45E\x2\x2\x2E02\x2E03\a\x448"+
		"\x2\x2\x2E03\x2E04\a\x45F\x2\x2\x2E04\x3F7\x3\x2\x2\x2\x2E05\x2E0C\a\x445"+
		"\x2\x2\x2E06\x2E0C\x5\x47A\x23E\x2\x2E07\x2E08\a\x45E\x2\x2\x2E08\x2E09"+
		"\x5\x368\x1B5\x2\x2E09\x2E0A\a\x45F\x2\x2\x2E0A\x2E0C\x3\x2\x2\x2\x2E0B"+
		"\x2E05\x3\x2\x2\x2\x2E0B\x2E06\x3\x2\x2\x2\x2E0B\x2E07\x3\x2\x2\x2\x2E0C"+
		"\x2E0D\x3\x2\x2\x2\x2E0D\x2E0E\a\x459\x2\x2\x2E0E\x2E0F\a\x25C\x2\x2\x2E0F"+
		"\x2E10\a\x45E\x2\x2\x2E10\x2E11\a\x448\x2\x2\x2E11\x2E12\a\x45F\x2\x2"+
		"\x2E12\x3F9\x3\x2\x2\x2\x2E13\x2E14\a\x427\x2\x2\x2E14\x2E15\x5\x35A\x1AE"+
		"\x2\x2E15\x2E16\a\x3D8\x2\x2\x2E16\x2E17\x5\x35A\x1AE\x2\x2E17\x3FB\x3"+
		"\x2\x2\x2\x2E18\x2E19\a\x427\x2\x2\x2E19\x2E1A\x5\x372\x1BA\x2\x2E1A\x2E1B"+
		"\a\x3D8\x2\x2\x2E1B\x2E1C\x5\x35A\x1AE\x2\x2E1C\x3FD\x3\x2\x2\x2\x2E1D"+
		"\x2E1F\a:\x2\x2\x2E1E\x2E1D\x3\x2\x2\x2\x2E1E\x2E1F\x3\x2\x2\x2\x2E1F"+
		"\x2E20\x3\x2\x2\x2\x2E20\x2E21\x5\x410\x209\x2\x2E21\x3FF\x3\x2\x2\x2"+
		"\x2E22\x2E24\a:\x2\x2\x2E23\x2E22\x3\x2\x2\x2\x2E23\x2E24\x3\x2\x2\x2"+
		"\x2E24\x2E25\x3\x2\x2\x2\x2E25\x2E26\x5\x402\x202\x2\x2E26\x401\x3\x2"+
		"\x2\x2\x2E27\x2E29\x5\x47A\x23E\x2\x2E28\x2E2A\x5\x404\x203\x2\x2E29\x2E28"+
		"\x3\x2\x2\x2\x2E29\x2E2A\x3\x2\x2\x2\x2E2A\x403\x3\x2\x2\x2\x2E2B\x2E2D"+
		"\a\x42B\x2\x2\x2E2C\x2E2B\x3\x2\x2\x2\x2E2C\x2E2D\x3\x2\x2\x2\x2E2D\x2E2E"+
		"\x3\x2\x2\x2\x2E2E\x2E2F\a\x45E\x2\x2\x2E2F\x2E36\x5\x40A\x206\x2\x2E30"+
		"\x2E32\a\x462\x2\x2\x2E31\x2E30\x3\x2\x2\x2\x2E31\x2E32\x3\x2\x2\x2\x2E32"+
		"\x2E33\x3\x2\x2\x2\x2E33\x2E35\x5\x40A\x206\x2\x2E34\x2E31\x3\x2\x2\x2"+
		"\x2E35\x2E38\x3\x2\x2\x2\x2E36\x2E34\x3\x2\x2\x2\x2E36\x2E37\x3\x2\x2"+
		"\x2\x2E37\x2E39\x3\x2\x2\x2\x2E38\x2E36\x3\x2\x2\x2\x2E39\x2E3A\a\x45F"+
		"\x2\x2\x2E3A\x405\x3\x2\x2\x2\x2E3B\x2E3C\a\x45E\x2\x2\x2E3C\x2E3D\x5"+
		"\x40A\x206\x2\x2E3D\x2E3E\a\x45F\x2\x2\x2E3E\x407\x3\x2\x2\x2\x2E3F\x2E40"+
		"\a\x42B\x2\x2\x2E40\x2E41\a\x45E\x2\x2\x2E41\x2E48\x5\x40A\x206\x2\x2E42"+
		"\x2E44\a\x462\x2\x2\x2E43\x2E42\x3\x2\x2\x2\x2E43\x2E44\x3\x2\x2\x2\x2E44"+
		"\x2E45\x3\x2\x2\x2\x2E45\x2E47\x5\x40A\x206\x2\x2E46\x2E43\x3\x2\x2\x2"+
		"\x2E47\x2E4A\x3\x2\x2\x2\x2E48\x2E46\x3\x2\x2\x2\x2E48\x2E49\x3\x2\x2"+
		"\x2\x2E49\x2E4B\x3\x2\x2\x2\x2E4A\x2E48\x3\x2\x2\x2\x2E4B\x2E4C\a\x45F"+
		"\x2\x2\x2E4C\x409\x3\x2\x2\x2\x2E4D\x2E4F\a\x25E\x2\x2\x2E4E\x2E4D\x3"+
		"\x2\x2\x2\x2E4E\x2E4F\x3\x2\x2\x2\x2E4F\x2E81\x3\x2\x2\x2\x2E50\x2E64"+
		"\a\x1C4\x2\x2\x2E51\x2E52\a\x45E\x2\x2\x2E52\x2E57\x5\x40C\x207\x2\x2E53"+
		"\x2E54\a\x462\x2\x2\x2E54\x2E56\x5\x40C\x207\x2\x2E55\x2E53\x3\x2\x2\x2"+
		"\x2E56\x2E59\x3\x2\x2\x2\x2E57\x2E55\x3\x2\x2\x2\x2E57\x2E58\x3\x2\x2"+
		"\x2\x2E58\x2E5A\x3\x2\x2\x2\x2E59\x2E57\x3\x2\x2\x2\x2E5A\x2E5B\a\x45F"+
		"\x2\x2\x2E5B\x2E65\x3\x2\x2\x2\x2E5C\x2E61\x5\x40C\x207\x2\x2E5D\x2E5E"+
		"\a\x462\x2\x2\x2E5E\x2E60\x5\x40C\x207\x2\x2E5F\x2E5D\x3\x2\x2\x2\x2E60"+
		"\x2E63\x3\x2\x2\x2\x2E61\x2E5F\x3\x2\x2\x2\x2E61\x2E62\x3\x2\x2\x2\x2E62"+
		"\x2E65\x3\x2\x2\x2\x2E63\x2E61\x3\x2\x2\x2\x2E64\x2E51\x3\x2\x2\x2\x2E64"+
		"\x2E5C\x3\x2\x2\x2\x2E65\x2E82\x3\x2\x2\x2\x2E66\x2E67\a\x1C4\x2\x2\x2E67"+
		"\x2E68\a\x44C\x2\x2\x2E68\x2E82\x5\x40C\x207\x2\x2E69\x2E78\a\x174\x2"+
		"\x2\x2E6A\x2E6B\a\x45E\x2\x2\x2E6B\x2E6C\x5\x40C\x207\x2\x2E6C\x2E6D\a"+
		"\x45E\x2\x2\x2E6D\x2E72\a\x447\x2\x2\x2E6E\x2E6F\a\x462\x2\x2\x2E6F\x2E71"+
		"\a\x447\x2\x2\x2E70\x2E6E\x3\x2\x2\x2\x2E71\x2E74\x3\x2\x2\x2\x2E72\x2E70"+
		"\x3\x2\x2\x2\x2E72\x2E73\x3\x2\x2\x2\x2E73\x2E75\x3\x2\x2\x2\x2E74\x2E72"+
		"\x3\x2\x2\x2\x2E75\x2E76\a\x45F\x2\x2\x2E76\x2E77\a\x45F\x2\x2\x2E77\x2E79"+
		"\x3\x2\x2\x2\x2E78\x2E6A\x3\x2\x2\x2\x2E78\x2E79\x3\x2\x2\x2\x2E79\x2E82"+
		"\x3\x2\x2\x2\x2E7A\x2E82\a\x370\x2\x2\x2E7B\x2E82\a\x391\x2\x2\x2E7C\x2E7D"+
		"\a\x399\x2\x2\x2E7D\x2E7E\a\x44C\x2\x2\x2E7E\x2E82\a\x446\x2\x2\x2E7F"+
		"\x2E82\a\x1A8\x2\x2\x2E80\x2E82\a\x447\x2\x2\x2E81\x2E50\x3\x2\x2\x2\x2E81"+
		"\x2E66\x3\x2\x2\x2\x2E81\x2E69\x3\x2\x2\x2\x2E81\x2E7A\x3\x2\x2\x2\x2E81"+
		"\x2E7B\x3\x2\x2\x2\x2E81\x2E7C\x3\x2\x2\x2\x2E81\x2E7F\x3\x2\x2\x2\x2E81"+
		"\x2E80\x3\x2\x2\x2\x2E82\x40B\x3\x2\x2\x2\x2E83\x2E86\x5\x47A\x23E\x2"+
		"\x2E84\x2E86\a\x446\x2\x2\x2E85\x2E83\x3\x2\x2\x2\x2E85\x2E84\x3\x2\x2"+
		"\x2\x2E86\x40D\x3\x2\x2\x2\x2E87\x2E88\a\x45E\x2\x2\x2E88\x2E8D\x5\x410"+
		"\x209\x2\x2E89\x2E8A\a\x462\x2\x2\x2E8A\x2E8C\x5\x410\x209\x2\x2E8B\x2E89"+
		"\x3\x2\x2\x2\x2E8C\x2E8F\x3\x2\x2\x2\x2E8D\x2E8B\x3\x2\x2\x2\x2E8D\x2E8E"+
		"\x3\x2\x2\x2\x2E8E\x2E90\x3\x2\x2\x2\x2E8F\x2E8D\x3\x2\x2\x2\x2E90\x2E91"+
		"\a\x45F\x2\x2\x2E91\x40F\x3\x2\x2\x2\x2E92\x2E95\x5\x47A\x23E\x2\x2E93"+
		"\x2E95\a\x448\x2\x2\x2E94\x2E92\x3\x2\x2\x2\x2E94\x2E93\x3\x2\x2\x2\x2E95"+
		"\x411\x3\x2\x2\x2\x2E96\x2E97\a\x416\x2\x2\x2E97\x2E98\a\x45E\x2\x2\x2E98"+
		"\x2E99\x5\x414\x20B\x2\x2E99\x2EA1\a\x45F\x2\x2\x2E9A\x2E9B\a\x462\x2"+
		"\x2\x2E9B\x2E9C\a\x45E\x2\x2\x2E9C\x2E9D\x5\x414\x20B\x2\x2E9D\x2E9E\a"+
		"\x45F\x2\x2\x2E9E\x2EA0\x3\x2\x2\x2\x2E9F\x2E9A\x3\x2\x2\x2\x2EA0\x2EA3"+
		"\x3\x2\x2\x2\x2EA1\x2E9F\x3\x2\x2\x2\x2EA1\x2EA2\x3\x2\x2\x2\x2EA2\x413"+
		"\x3\x2\x2\x2\x2EA3\x2EA1\x3\x2\x2\x2\x2EA4\x2EA9\x5\x35A\x1AE\x2\x2EA5"+
		"\x2EA6\a\x462\x2\x2\x2EA6\x2EA8\x5\x35A\x1AE\x2\x2EA7\x2EA5\x3\x2\x2\x2"+
		"\x2EA8\x2EAB\x3\x2\x2\x2\x2EA9\x2EA7\x3\x2\x2\x2\x2EA9\x2EAA\x3\x2\x2"+
		"\x2\x2EAA\x415\x3\x2\x2\x2\x2EAB\x2EA9\x3\x2\x2\x2\x2EAC\x2EAD\t\x96\x2"+
		"\x2\x2EAD\x2EAE\a\x45E\x2\x2\x2EAE\x2EAF\a\x45F\x2\x2\x2EAF\x2EB7\x5\x41E"+
		"\x210\x2\x2EB0\x2EB1\a\x277\x2\x2\x2EB1\x2EB2\a\x45E\x2\x2\x2EB2\x2EB3"+
		"\x5\x35A\x1AE\x2\x2EB3\x2EB4\a\x45F\x2\x2\x2EB4\x2EB5\x5\x41E\x210\x2"+
		"\x2EB5\x2EB7\x3\x2\x2\x2\x2EB6\x2EAC\x3\x2\x2\x2\x2EB6\x2EB0\x3\x2\x2"+
		"\x2\x2EB7\x417\x3\x2\x2\x2\x2EB8\x2EB9\t\x97\x2\x2\x2EB9\x2EBA\a\x45E"+
		"\x2\x2\x2EBA\x2EBB\x5\x41C\x20F\x2\x2EBB\x2EBD\a\x45F\x2\x2\x2EBC\x2EBE"+
		"\x5\x41E\x210\x2\x2EBD\x2EBC\x3\x2\x2\x2\x2EBD\x2EBE\x3\x2\x2\x2\x2EBE"+
		"\x2ED9\x3\x2\x2\x2\x2EBF\x2EC0\t\x98\x2\x2\x2EC0\x2EC3\a\x45E\x2\x2\x2EC1"+
		"\x2EC4\a\x466\x2\x2\x2EC2\x2EC4\x5\x41C\x20F\x2\x2EC3\x2EC1\x3\x2\x2\x2"+
		"\x2EC3\x2EC2\x3\x2\x2\x2\x2EC4\x2EC5\x3\x2\x2\x2\x2EC5\x2EC7\a\x45F\x2"+
		"\x2\x2EC6\x2EC8\x5\x41E\x210\x2\x2EC7\x2EC6\x3\x2\x2\x2\x2EC7\x2EC8\x3"+
		"\x2\x2\x2\x2EC8\x2ED9\x3\x2\x2\x2\x2EC9\x2ECA\a\x8F\x2\x2\x2ECA\x2ECB"+
		"\a\x45E\x2\x2\x2ECB\x2ECC\x5\x41C\x20F\x2\x2ECC\x2ECD\a\x45F\x2\x2\x2ECD"+
		"\x2ED9\x3\x2\x2\x2\x2ECE\x2ECF\a\x199\x2\x2\x2ECF\x2ED0\a\x45E\x2\x2\x2ED0"+
		"\x2ED1\x5\x35A\x1AE\x2\x2ED1\x2ED2\a\x45F\x2\x2\x2ED2\x2ED9\x3\x2\x2\x2"+
		"\x2ED3\x2ED4\a\x19A\x2\x2\x2ED4\x2ED5\a\x45E\x2\x2\x2ED5\x2ED6\x5\x414"+
		"\x20B\x2\x2ED6\x2ED7\a\x45F\x2\x2\x2ED7\x2ED9\x3\x2\x2\x2\x2ED8\x2EB8"+
		"\x3\x2\x2\x2\x2ED8\x2EBF\x3\x2\x2\x2\x2ED8\x2EC9\x3\x2\x2\x2\x2ED8\x2ECE"+
		"\x3\x2\x2\x2\x2ED8\x2ED3\x3\x2\x2\x2\x2ED9\x419\x3\x2\x2\x2\x2EDA\x2EDB"+
		"\t\x99\x2\x2\x2EDB\x2EDC\a\x45E\x2\x2\x2EDC\x2EDD\x5\x35A\x1AE\x2\x2EDD"+
		"\x2EDE\a\x45F\x2\x2\x2EDE\x2EDF\x5\x41E\x210\x2\x2EDF\x2F13\x3\x2\x2\x2"+
		"\x2EE0\x2EE1\t\x9A\x2\x2\x2EE1\x2EE2\a\x45E\x2\x2\x2EE2\x2EE9\x5\x35A"+
		"\x1AE\x2\x2EE3\x2EE4\a\x462\x2\x2\x2EE4\x2EE7\x5\x35A\x1AE\x2\x2EE5\x2EE6"+
		"\a\x462\x2\x2\x2EE6\x2EE8\x5\x35A\x1AE\x2\x2EE7\x2EE5\x3\x2\x2\x2\x2EE7"+
		"\x2EE8\x3\x2\x2\x2\x2EE8\x2EEA\x3\x2\x2\x2\x2EE9\x2EE3\x3\x2\x2\x2\x2EE9"+
		"\x2EEA\x3\x2\x2\x2\x2EEA\x2EEB\x3\x2\x2\x2\x2EEB\x2EEC\a\x45F\x2\x2\x2EEC"+
		"\x2EED\x5\x41E\x210\x2\x2EED\x2F13\x3\x2\x2\x2\x2EEE\x2EEF\t\x9B\x2\x2"+
		"\x2EEF\x2EF0\a\x45E\x2\x2\x2EF0\x2EF1\a\x45F\x2\x2\x2EF1\x2EF2\a\x2A4"+
		"\x2\x2\x2EF2\x2EF6\a\x45E\x2\x2\x2EF3\x2EF4\a\x2B3\x2\x2\x2EF4\x2EF5\a"+
		"q\x2\x2\x2EF5\x2EF7\x5\x414\x20B\x2\x2EF6\x2EF3\x3\x2\x2\x2\x2EF6\x2EF7"+
		"\x3\x2\x2\x2\x2EF7\x2EF8\x3\x2\x2\x2\x2EF8\x2EF9\x5\x382\x1C2\x2\x2EF9"+
		"\x2EFA\a\x45F\x2\x2\x2EFA\x2F13\x3\x2\x2\x2\x2EFB\x2EFC\t\x9C\x2\x2\x2EFC"+
		"\x2EFD\a\x45E\x2\x2\x2EFD\x2EFE\x5\x35A\x1AE\x2\x2EFE\x2EFF\a\x45F\x2"+
		"\x2\x2EFF\x2F00\a\x42C\x2\x2\x2F00\x2F01\a\x198\x2\x2\x2F01\x2F02\a\x45E"+
		"\x2\x2\x2F02\x2F03\a\x29E\x2\x2\x2F03\x2F04\aq\x2\x2\x2F04\x2F06\x5\x35A"+
		"\x1AE\x2\x2F05\x2F07\t\x9D\x2\x2\x2F06\x2F05\x3\x2\x2\x2\x2F06\x2F07\x3"+
		"\x2\x2\x2\x2F07\x2F08\x3\x2\x2\x2\x2F08\x2F09\a\x45F\x2\x2\x2F09\x2F0A"+
		"\a\x2A4\x2\x2\x2F0A\x2F0E\a\x45E\x2\x2\x2F0B\x2F0C\a\x2B3\x2\x2\x2F0C"+
		"\x2F0D\aq\x2\x2\x2F0D\x2F0F\x5\x414\x20B\x2\x2F0E\x2F0B\x3\x2\x2\x2\x2F0E"+
		"\x2F0F\x3\x2\x2\x2\x2F0F\x2F10\x3\x2\x2\x2\x2F10\x2F11\a\x45F\x2\x2\x2F11"+
		"\x2F13\x3\x2\x2\x2\x2F12\x2EDA\x3\x2\x2\x2\x2F12\x2EE0\x3\x2\x2\x2\x2F12"+
		"\x2EEE\x3\x2\x2\x2\x2F12\x2EFB\x3\x2\x2\x2\x2F13\x41B\x3\x2\x2\x2\x2F14"+
		"\x2F16\t\x85\x2\x2\x2F15\x2F14\x3\x2\x2\x2\x2F15\x2F16\x3\x2\x2\x2\x2F16"+
		"\x2F17\x3\x2\x2\x2\x2F17\x2F18\x5\x35A\x1AE\x2\x2F18\x41D\x3\x2\x2\x2"+
		"\x2F19\x2F1A\a\x2A4\x2\x2\x2F1A\x2F1E\a\x45E\x2\x2\x2F1B\x2F1C\a\x2B3"+
		"\x2\x2\x2F1C\x2F1D\aq\x2\x2\x2F1D\x2F1F\x5\x414\x20B\x2\x2F1E\x2F1B\x3"+
		"\x2\x2\x2\x2F1E\x2F1F\x3\x2\x2\x2\x2F1F\x2F21\x3\x2\x2\x2\x2F20\x2F22"+
		"\x5\x382\x1C2\x2\x2F21\x2F20\x3\x2\x2\x2\x2F21\x2F22\x3\x2\x2\x2\x2F22"+
		"\x2F24\x3\x2\x2\x2\x2F23\x2F25\x5\x420\x211\x2\x2F24\x2F23\x3\x2\x2\x2"+
		"\x2F24\x2F25\x3\x2\x2\x2\x2F25\x2F26\x3\x2\x2\x2\x2F26\x2F27\a\x45F\x2"+
		"\x2\x2F27\x41F\x3\x2\x2\x2\x2F28\x2F29\t\x9E\x2\x2\x2F29\x2F2A\x5\x422"+
		"\x212\x2\x2F2A\x421\x3\x2\x2\x2\x2F2B\x2F32\x5\x426\x214\x2\x2F2C\x2F2D"+
		"\a^\x2\x2\x2F2D\x2F2E\x5\x424\x213\x2\x2F2E\x2F2F\a\'\x2\x2\x2F2F\x2F30"+
		"\x5\x424\x213\x2\x2F30\x2F32\x3\x2\x2\x2\x2F31\x2F2B\x3\x2\x2\x2\x2F31"+
		"\x2F2C\x3\x2\x2\x2\x2F32\x423\x3\x2\x2\x2\x2F33\x2F36\x5\x426\x214\x2"+
		"\x2F34\x2F36\x5\x428\x215\x2\x2F35\x2F33\x3\x2\x2\x2\x2F35\x2F34\x3\x2"+
		"\x2\x2\x2F36\x425\x3\x2\x2\x2\x2F37\x2F38\a\x3FC\x2\x2\x2F38\x2F3E\a\x2CE"+
		"\x2\x2\x2F39\x2F3A\a\x446\x2\x2\x2F3A\x2F3E\a\x2CE\x2\x2\x2F3B\x2F3C\a"+
		"\xD0\x2\x2\x2F3C\x2F3E\a\x33E\x2\x2\x2F3D\x2F37\x3\x2\x2\x2\x2F3D\x2F39"+
		"\x3\x2\x2\x2\x2F3D\x2F3B\x3\x2\x2\x2\x2F3E\x427\x3\x2\x2\x2\x2F3F\x2F40"+
		"\a\x3FC\x2\x2\x2F40\x2F44\a\x16E\x2\x2\x2F41\x2F42\a\x446\x2\x2\x2F42"+
		"\x2F44\a\x16E\x2\x2\x2F43\x2F3F\x3\x2\x2\x2\x2F43\x2F41\x3\x2\x2\x2\x2F44"+
		"\x429\x3\x2\x2\x2\x2F45\x2F46\a\x163\x2\x2\x2F46\x2F4B\x5\x42C\x217\x2"+
		"\x2F47\x2F48\a\x462\x2\x2\x2F48\x2F4A\x5\x42C\x217\x2\x2F49\x2F47\x3\x2"+
		"\x2\x2\x2F4A\x2F4D\x3\x2\x2\x2\x2F4B\x2F49\x3\x2\x2\x2\x2F4B\x2F4C\x3"+
		"\x2\x2\x2\x2F4C\x2F6B\x3\x2\x2\x2\x2F4D\x2F4B\x3\x2\x2\x2\x2F4E\x2F4F"+
		"\a\xFB\x2\x2\x2F4F\x2F52\a\x44C\x2\x2\x2F50\x2F53\x5\x47A\x23E\x2\x2F51"+
		"\x2F53\a\x448\x2\x2\x2F52\x2F50\x3\x2\x2\x2\x2F52\x2F51\x3\x2\x2\x2\x2F53"+
		"\x2F6B\x3\x2\x2\x2\x2F54\x2F55\a\xFA\x2\x2\x2F55\x2F58\a\x44C\x2\x2\x2F56"+
		"\x2F59\x5\x47A\x23E\x2\x2F57\x2F59\a\x448\x2\x2\x2F58\x2F56\x3\x2\x2\x2"+
		"\x2F58\x2F57\x3\x2\x2\x2\x2F59\x2F6B\x3\x2\x2\x2\x2F5A\x2F5B\a\x251\x2"+
		"\x2\x2F5B\x2F5C\a\x44C\x2\x2\x2F5C\x2F6B\t\x13\x2\x2\x2F5D\x2F5E\a\x3EA"+
		"\x2\x2\x2F5E\x2F5F\a\x44C\x2\x2\x2F5F\x2F6B\t\x13\x2\x2\x2F60\x2F61\a"+
		"\x3F6\x2\x2\x2F61\x2F62\a\x44C\x2\x2\x2F62\x2F6B\a\x446\x2\x2\x2F63\x2F64"+
		"\a\xEE\x2\x2\x2F64\x2F6B\t\x13\x2\x2\x2F65\x2F66\a\x3F1\x2\x2\x2F66\x2F6B"+
		"\t\x13\x2\x2\x2F67\x2F68\az\x2\x2\x2F68\x2F69\a\x44C\x2\x2\x2F69\x2F6B"+
		"\a\xDE\x2\x2\x2F6A\x2F45\x3\x2\x2\x2\x2F6A\x2F4E\x3\x2\x2\x2\x2F6A\x2F54"+
		"\x3\x2\x2\x2\x2F6A\x2F5A\x3\x2\x2\x2\x2F6A\x2F5D\x3\x2\x2\x2\x2F6A\x2F60"+
		"\x3\x2\x2\x2\x2F6A\x2F63\x3\x2\x2\x2\x2F6A\x2F65\x3\x2\x2\x2\x2F6A\x2F67"+
		"\x3\x2\x2\x2\x2F6B\x42B\x3\x2\x2\x2\x2F6C\x2F73\a\x45E\x2\x2\x2F6D\x2F6E"+
		"\a\x265\x2\x2\x2F6E\x2F6F\a\x44C\x2\x2\x2F6F\x2F74\t\x9F\x2\x2\x2F70\x2F71"+
		"\a\x10F\x2\x2\x2F71\x2F72\a\x44C\x2\x2\x2F72\x2F74\a\x448\x2\x2\x2F73"+
		"\x2F6D\x3\x2\x2\x2\x2F73\x2F70\x3\x2\x2\x2\x2F74\x2F75\x3\x2\x2\x2\x2F75"+
		"\x2F76\a\x45F\x2\x2\x2F76\x42D\x3\x2\x2\x2\x2F77\x2F7A\x5\x430\x219\x2"+
		"\x2F78\x2F7A\x5\x432\x21A\x2\x2F79\x2F77\x3\x2\x2\x2\x2F79\x2F78\x3\x2"+
		"\x2\x2\x2F7A\x42F\x3\x2\x2\x2\x2F7B\x2F7C\a\x15A\x2\x2\x2F7C\x2F7F\x5"+
		"\x47A\x23E\x2\x2F7D\x2F7E\a\xB7\x2\x2\x2F7E\x2F80\a\x163\x2\x2\x2F7F\x2F7D"+
		"\x3\x2\x2\x2\x2F7F\x2F80\x3\x2\x2\x2\x2F80\x2F82\x3\x2\x2\x2\x2F81\x2F83"+
		"\a\xF7\x2\x2\x2F82\x2F81\x3\x2\x2\x2\x2F82\x2F83\x3\x2\x2\x2\x2F83\x2F86"+
		"\x3\x2\x2\x2\x2F84\x2F85\a\xB7\x2\x2\x2F85\x2F87\a\x237\x2\x2\x2F86\x2F84"+
		"\x3\x2\x2\x2\x2F86\x2F87\x3\x2\x2\x2\x2F87\x2F88\x3\x2\x2\x2\x2F88\x2F8D"+
		"\x5\x432\x21A\x2\x2F89\x2F8A\a\x462\x2\x2\x2F8A\x2F8C\x5\x432\x21A\x2"+
		"\x2F8B\x2F89\x3\x2\x2\x2\x2F8C\x2F8F\x3\x2\x2\x2\x2F8D\x2F8B\x3\x2\x2"+
		"\x2\x2F8D\x2F8E\x3\x2\x2\x2\x2F8E\x431\x3\x2\x2\x2\x2F8F\x2F8D\x3\x2\x2"+
		"\x2\x2F90\x2F91\a\x45E\x2\x2\x2F91\x2F92\a\x24D\x2\x2\x2F92\x2F95\a\x44C"+
		"\x2\x2\x2F93\x2F96\x5\x47A\x23E\x2\x2F94\x2F96\a\x448\x2\x2\x2F95\x2F93"+
		"\x3\x2\x2\x2\x2F95\x2F94\x3\x2\x2\x2\x2F96\x2F98\x3\x2\x2\x2\x2F97\x2F99"+
		"\a\x462\x2\x2\x2F98\x2F97\x3\x2\x2\x2\x2F98\x2F99\x3\x2\x2\x2\x2F99\x2F9A"+
		"\x3\x2\x2\x2\x2F9A\x2F9B\a\x15F\x2\x2\x2F9B\x2F9C\a\x44C\x2\x2\x2F9C\x2F9E"+
		"\a\x448\x2\x2\x2F9D\x2F9F\a\x462\x2\x2\x2F9E\x2F9D\x3\x2\x2\x2\x2F9E\x2F9F"+
		"\x3\x2\x2\x2\x2F9F\x2FA6\x3\x2\x2\x2\x2FA0\x2FA1\a\x38E\x2\x2\x2FA1\x2FA2"+
		"\a\x44C\x2\x2\x2FA2\x2FA4\x5\x484\x243\x2\x2FA3\x2FA5\a\x462\x2\x2\x2FA4"+
		"\x2FA3\x3\x2\x2\x2\x2FA4\x2FA5\x3\x2\x2\x2\x2FA5\x2FA7\x3\x2\x2\x2\x2FA6"+
		"\x2FA0\x3\x2\x2\x2\x2FA6\x2FA7\x3\x2\x2\x2\x2FA7\x2FB1\x3\x2\x2\x2\x2FA8"+
		"\x2FA9\a\x221\x2\x2\x2FA9\x2FAC\a\x44C\x2\x2\x2FAA\x2FAD\x5\x484\x243"+
		"\x2\x2FAB\x2FAD\a\x403\x2\x2\x2FAC\x2FAA\x3\x2\x2\x2\x2FAC\x2FAB\x3\x2"+
		"\x2\x2\x2FAD\x2FAF\x3\x2\x2\x2\x2FAE\x2FB0\a\x462\x2\x2\x2FAF\x2FAE\x3"+
		"\x2\x2\x2\x2FAF\x2FB0\x3\x2\x2\x2\x2FB0\x2FB2\x3\x2\x2\x2\x2FB1\x2FA8"+
		"\x3\x2\x2\x2\x2FB1\x2FB2\x3\x2\x2\x2\x2FB2\x2FB9\x3\x2\x2\x2\x2FB3\x2FB4"+
		"\a\x15E\x2\x2\x2FB4\x2FB5\a\x44C\x2\x2\x2FB5\x2FB7\x5\x484\x243\x2\x2FB6"+
		"\x2FB8\a\x462\x2\x2\x2FB7\x2FB6\x3\x2\x2\x2\x2FB7\x2FB8\x3\x2\x2\x2\x2FB8"+
		"\x2FBA\x3\x2\x2\x2\x2FB9\x2FB3\x3\x2\x2\x2\x2FB9\x2FBA\x3\x2\x2\x2\x2FBA"+
		"\x2FBB\x3\x2\x2\x2\x2FBB\x2FBC\a\x45F\x2\x2\x2FBC\x433\x3\x2\x2\x2\x2FBD"+
		"\x2FBE\x5\x47A\x23E\x2\x2FBE\x2FBF\a\x459\x2\x2\x2FBF\x2FC0\x5\x47A\x23E"+
		"\x2\x2FC0\x2FC1\a\x459\x2\x2\x2FC1\x2FC2\x5\x47A\x23E\x2\x2FC2\x2FC3\a"+
		"\x459\x2\x2\x2FC3\x2FCF\x3\x2\x2\x2\x2FC4\x2FC5\x5\x47A\x23E\x2\x2FC5"+
		"\x2FC7\a\x459\x2\x2\x2FC6\x2FC8\x5\x47A\x23E\x2\x2FC7\x2FC6\x3\x2\x2\x2"+
		"\x2FC7\x2FC8\x3\x2\x2\x2\x2FC8\x2FC9\x3\x2\x2\x2\x2FC9\x2FCA\a\x459\x2"+
		"\x2\x2FCA\x2FCF\x3\x2\x2\x2\x2FCB\x2FCC\x5\x47A\x23E\x2\x2FCC\x2FCD\a"+
		"\x459\x2\x2\x2FCD\x2FCF\x3\x2\x2\x2\x2FCE\x2FBD\x3\x2\x2\x2\x2FCE\x2FC4"+
		"\x3\x2\x2\x2\x2FCE\x2FCB\x3\x2\x2\x2\x2FCE\x2FCF\x3\x2\x2\x2\x2FCF\x2FD0"+
		"\x3\x2\x2\x2\x2FD0\x2FD1\x5\x47A\x23E\x2\x2FD1\x435\x3\x2\x2\x2\x2FD2"+
		"\x2FD8\x5\x47A\x23E\x2\x2FD3\x2FD4\x5\x47A\x23E\x2\x2FD4\x2FD5\a\x459"+
		"\x2\x2\x2FD5\x2FD6\x5\x47A\x23E\x2\x2FD6\x2FD8\x3\x2\x2\x2\x2FD7\x2FD2"+
		"\x3\x2\x2\x2\x2FD7\x2FD3\x3\x2\x2\x2\x2FD8\x437\x3\x2\x2\x2\x2FD9\x2FDF"+
		"\x5\x47A\x23E\x2\x2FDA\x2FDB\x5\x47A\x23E\x2\x2FDB\x2FDC\a\x459\x2\x2"+
		"\x2FDC\x2FDD\x5\x47A\x23E\x2\x2FDD\x2FDF\x3\x2\x2\x2\x2FDE\x2FD9\x3\x2"+
		"\x2\x2\x2FDE\x2FDA\x3\x2\x2\x2\x2FDF\x439\x3\x2\x2\x2\x2FE0\x2FE1\x5\x47A"+
		"\x23E\x2\x2FE1\x2FE2\a\x459\x2\x2\x2FE2\x2FE3\a\x459\x2\x2\x2FE3\x2FE4"+
		"\x5\x47A\x23E\x2\x2FE4\x2FE5\a\x459\x2\x2\x2FE5\x2FF8\x3\x2\x2\x2\x2FE6"+
		"\x2FE7\x5\x47A\x23E\x2\x2FE7\x2FE8\a\x459\x2\x2\x2FE8\x2FE9\x5\x47A\x23E"+
		"\x2\x2FE9\x2FEA\a\x459\x2\x2\x2FEA\x2FEB\x5\x47A\x23E\x2\x2FEB\x2FEC\a"+
		"\x459\x2\x2\x2FEC\x2FF8\x3\x2\x2\x2\x2FED\x2FEE\x5\x47A\x23E\x2\x2FEE"+
		"\x2FF0\a\x459\x2\x2\x2FEF\x2FF1\x5\x47A\x23E\x2\x2FF0\x2FEF\x3\x2\x2\x2"+
		"\x2FF0\x2FF1\x3\x2\x2\x2\x2FF1\x2FF2\x3\x2\x2\x2\x2FF2\x2FF3\a\x459\x2"+
		"\x2\x2FF3\x2FF8\x3\x2\x2\x2\x2FF4\x2FF5\x5\x47A\x23E\x2\x2FF5\x2FF6\a"+
		"\x459\x2\x2\x2FF6\x2FF8\x3\x2\x2\x2\x2FF7\x2FE0\x3\x2\x2\x2\x2FF7\x2FE6"+
		"\x3\x2\x2\x2\x2FF7\x2FED\x3\x2\x2\x2\x2FF7\x2FF4\x3\x2\x2\x2\x2FF7\x2FF8"+
		"\x3\x2\x2\x2\x2FF8\x2FF9\x3\x2\x2\x2\x2FF9\x2FFA\x5\x47A\x23E\x2\x2FFA"+
		"\x43B\x3\x2\x2\x2\x2FFB\x2FFC\x5\x47A\x23E\x2\x2FFC\x2FFE\a\x459\x2\x2"+
		"\x2FFD\x2FFF\x5\x47A\x23E\x2\x2FFE\x2FFD\x3\x2\x2\x2\x2FFE\x2FFF\x3\x2"+
		"\x2\x2\x2FFF\x3000\x3\x2\x2\x2\x3000\x3001\a\x459\x2\x2\x3001\x3006\x3"+
		"\x2\x2\x2\x3002\x3003\x5\x47A\x23E\x2\x3003\x3004\a\x459\x2\x2\x3004\x3006"+
		"\x3\x2\x2\x2\x3005\x2FFB\x3\x2\x2\x2\x3005\x3002\x3\x2\x2\x2\x3005\x3006"+
		"\x3\x2\x2\x2\x3006\x3007\x3\x2\x2\x2\x3007\x3016\x5\x47A\x23E\x2\x3008"+
		"\x3009\x5\x47A\x23E\x2\x3009\x300B\a\x459\x2\x2\x300A\x300C\x5\x47A\x23E"+
		"\x2\x300B\x300A\x3\x2\x2\x2\x300B\x300C\x3\x2\x2\x2\x300C\x300D\x3\x2"+
		"\x2\x2\x300D\x300E\a\x459\x2\x2\x300E\x3013\x3\x2\x2\x2\x300F\x3010\x5"+
		"\x47A\x23E\x2\x3010\x3011\a\x459\x2\x2\x3011\x3013\x3\x2\x2\x2\x3012\x3008"+
		"\x3\x2\x2\x2\x3012\x300F\x3\x2\x2\x2\x3012\x3013\x3\x2\x2\x2\x3013\x3014"+
		"\x3\x2\x2\x2\x3014\x3016\ag\x2\x2\x3015\x3005\x3\x2\x2\x2\x3015\x3012"+
		"\x3\x2\x2\x2\x3016\x43D\x3\x2\x2\x2\x3017\x3018\x5\x47A\x23E\x2\x3018"+
		"\x3019\a\x459\x2\x2\x3019\x301B\x3\x2\x2\x2\x301A\x3017\x3\x2\x2\x2\x301A"+
		"\x301B\x3\x2\x2\x2\x301B\x301C\x3\x2\x2\x2\x301C\x301D\x5\x47A\x23E\x2"+
		"\x301D\x43F\x3\x2\x2\x2\x301E\x301F\x5\x47A\x23E\x2\x301F\x3020\a\x459"+
		"\x2\x2\x3020\x3022\x3\x2\x2\x2\x3021\x301E\x3\x2\x2\x2\x3021\x3022\x3"+
		"\x2\x2\x2\x3022\x3023\x3\x2\x2\x2\x3023\x3024\x5\x47A\x23E\x2\x3024\x441"+
		"\x3\x2\x2\x2\x3025\x3027\x5\x47A\x23E\x2\x3026\x3025\x3\x2\x2\x2\x3026"+
		"\x3027\x3\x2\x2\x2\x3027\x3028\x3\x2\x2\x2\x3028\x302A\a\x459\x2\x2\x3029"+
		"\x302B\x5\x47A\x23E\x2\x302A\x3029\x3\x2\x2\x2\x302A\x302B\x3\x2\x2\x2"+
		"\x302B\x302C\x3\x2\x2\x2\x302C\x302D\a\x459\x2\x2\x302D\x3030\x5\x47A"+
		"\x23E\x2\x302E\x3030\x5\x440\x221\x2\x302F\x3026\x3\x2\x2\x2\x302F\x302E"+
		"\x3\x2\x2\x2\x3030\x443\x3\x2\x2\x2\x3031\x3033\x5\x47A\x23E\x2\x3032"+
		"\x3031\x3\x2\x2\x2\x3032\x3033\x3\x2\x2\x2\x3033\x3034\x3\x2\x2\x2\x3034"+
		"\x3036\a\x459\x2\x2\x3035\x3037\x5\x47A\x23E\x2\x3036\x3035\x3\x2\x2\x2"+
		"\x3036\x3037\x3\x2\x2\x2\x3037\x3038\x3\x2\x2\x2\x3038\x303A\a\x459\x2"+
		"\x2\x3039\x303B\x5\x47A\x23E\x2\x303A\x3039\x3\x2\x2\x2\x303A\x303B\x3"+
		"\x2\x2\x2\x303B\x303C\x3\x2\x2\x2\x303C\x303D\a\x459\x2\x2\x303D\x3040"+
		"\x5\x47A\x23E\x2\x303E\x3040\x5\x442\x222\x2\x303F\x3032\x3\x2\x2\x2\x303F"+
		"\x303E\x3\x2\x2\x2\x3040\x445\x3\x2\x2\x2\x3041\x3044\x5\x43A\x21E\x2"+
		"\x3042\x3044\a\x445\x2\x2\x3043\x3041\x3\x2\x2\x2\x3043\x3042\x3\x2\x2"+
		"\x2\x3044\x447\x3\x2\x2\x2\x3045\x3046\t\x8E\x2\x2\x3046\x3047\a\x459"+
		"\x2\x2\x3047\x3065\x5\x47A\x23E\x2\x3048\x304A\x5\x47A\x23E\x2\x3049\x3048"+
		"\x3\x2\x2\x2\x3049\x304A\x3\x2\x2\x2\x304A\x304B\x3\x2\x2\x2\x304B\x304D"+
		"\a\x459\x2\x2\x304C\x304E\x5\x47A\x23E\x2\x304D\x304C\x3\x2\x2\x2\x304D"+
		"\x304E\x3\x2\x2\x2\x304E\x304F\x3\x2\x2\x2\x304F\x3051\a\x459\x2\x2\x3050"+
		"\x3052\x5\x47A\x23E\x2\x3051\x3050\x3\x2\x2\x2\x3051\x3052\x3\x2\x2\x2"+
		"\x3052\x3053\x3\x2\x2\x2\x3053\x3054\a\x459\x2\x2\x3054\x3065\x5\x47A"+
		"\x23E\x2\x3055\x3057\x5\x47A\x23E\x2\x3056\x3055\x3\x2\x2\x2\x3056\x3057"+
		"\x3\x2\x2\x2\x3057\x3058\x3\x2\x2\x2\x3058\x305A\a\x459\x2\x2\x3059\x305B"+
		"\x5\x47A\x23E\x2\x305A\x3059\x3\x2\x2\x2\x305A\x305B\x3\x2\x2\x2\x305B"+
		"\x305C\x3\x2\x2\x2\x305C\x305D\a\x459\x2\x2\x305D\x3065\x5\x47A\x23E\x2"+
		"\x305E\x3060\x5\x47A\x23E\x2\x305F\x305E\x3\x2\x2\x2\x305F\x3060\x3\x2"+
		"\x2\x2\x3060\x3061\x3\x2\x2\x2\x3061\x3062\a\x459\x2\x2\x3062\x3065\x5"+
		"\x47A\x23E\x2\x3063\x3065\x5\x47A\x23E\x2\x3064\x3045\x3\x2\x2\x2\x3064"+
		"\x3049\x3\x2\x2\x2\x3064\x3056\x3\x2\x2\x2\x3064\x305F\x3\x2\x2\x2\x3064"+
		"\x3063\x3\x2\x2\x2\x3065\x449\x3\x2\x2\x2\x3066\x3068\x5\x47A\x23E\x2"+
		"\x3067\x3069\t\x9D\x2\x2\x3068\x3067\x3\x2\x2\x2\x3068\x3069\x3\x2\x2"+
		"\x2\x3069\x3071\x3\x2\x2\x2\x306A\x306B\a\x462\x2\x2\x306B\x306D\x5\x47A"+
		"\x23E\x2\x306C\x306E\t\x9D\x2\x2\x306D\x306C\x3\x2\x2\x2\x306D\x306E\x3"+
		"\x2\x2\x2\x306E\x3070\x3\x2\x2\x2\x306F\x306A\x3\x2\x2\x2\x3070\x3073"+
		"\x3\x2\x2\x2\x3071\x306F\x3\x2\x2\x2\x3071\x3072\x3\x2\x2\x2\x3072\x44B"+
		"\x3\x2\x2\x2\x3073\x3071\x3\x2\x2\x2\x3074\x3079\x5\x44E\x228\x2\x3075"+
		"\x3076\a\x462\x2\x2\x3076\x3078\x5\x44E\x228\x2\x3077\x3075\x3\x2\x2\x2"+
		"\x3078\x307B\x3\x2\x2\x2\x3079\x3077\x3\x2\x2\x2\x3079\x307A\x3\x2\x2"+
		"\x2\x307A\x44D\x3\x2\x2\x2\x307B\x3079\x3\x2\x2\x2\x307C\x307E\x5\x47A"+
		"\x23E\x2\x307D\x307C\x3\x2\x2\x2\x307D\x307E\x3\x2\x2\x2\x307E\x307F\x3"+
		"\x2\x2\x2\x307F\x3081\a\x459\x2\x2\x3080\x307D\x3\x2\x2\x2\x3081\x3084"+
		"\x3\x2\x2\x2\x3082\x3080\x3\x2\x2\x2\x3082\x3083\x3\x2\x2\x2\x3083\x3085"+
		"\x3\x2\x2\x2\x3084\x3082\x3\x2\x2\x2\x3085\x3086\x5\x47A\x23E\x2\x3086"+
		"\x44F\x3\x2\x2\x2\x3087\x308C\x5\x47A\x23E\x2\x3088\x3089\a\x462\x2\x2"+
		"\x3089\x308B\x5\x47A\x23E\x2\x308A\x3088\x3\x2\x2\x2\x308B\x308E\x3\x2"+
		"\x2\x2\x308C\x308A\x3\x2\x2\x2\x308C\x308D\x3\x2\x2\x2\x308D\x451\x3\x2"+
		"\x2\x2\x308E\x308C\x3\x2\x2\x2\x308F\x3092\x5\x47A\x23E\x2\x3090\x3092"+
		"\a\x445\x2\x2\x3091\x308F\x3\x2\x2\x2\x3091\x3090\x3\x2\x2\x2\x3092\x453"+
		"\x3\x2\x2\x2\x3093\x3094\t\x13\x2\x2\x3094\x455\x3\x2\x2\x2\x3095\x3096"+
		"\tw\x2\x2\x3096\x457\x3\x2\x2\x2\x3097\x3099\a\x26A\x2\x2\x3098\x3097"+
		"\x3\x2\x2\x2\x3098\x3099\x3\x2\x2\x2\x3099\x309A\x3\x2\x2\x2\x309A\x309B"+
		"\a\x27A\x2\x2\x309B\x459\x3\x2\x2\x2\x309C\x30A8\x5\x458\x22D\x2\x309D"+
		"\x309E\a\xF7\x2\x2\x309E\x30A1\x5\x366\x1B4\x2\x309F\x30A0\a\x9B\x2\x2"+
		"\x30A0\x30A2\x5\x47A\x23E\x2\x30A1\x309F\x3\x2\x2\x2\x30A1\x30A2\x3\x2"+
		"\x2\x2\x30A2\x30A5\x3\x2\x2\x2\x30A3\x30A4\a\x42B\x2\x2\x30A4\x30A6\a"+
		"\x416\x2\x2\x30A5\x30A3\x3\x2\x2\x2\x30A5\x30A6\x3\x2\x2\x2\x30A6\x30A8"+
		"\x3\x2\x2\x2\x30A7\x309C\x3\x2\x2\x2\x30A7\x309D\x3\x2\x2\x2\x30A8\x45B"+
		"\x3\x2\x2\x2\x30A9\x30AF\x5\x444\x223\x2\x30AA\x30AF\a\x337\x2\x2\x30AB"+
		"\x30AF\a\x1FB\x2\x2\x30AC\x30AF\a\x61\x2\x2\x30AD\x30AF\a\x8E\x2\x2\x30AE"+
		"\x30A9\x3\x2\x2\x2\x30AE\x30AA\x3\x2\x2\x2\x30AE\x30AB\x3\x2\x2\x2\x30AE"+
		"\x30AC\x3\x2\x2\x2\x30AE\x30AD\x3\x2\x2\x2\x30AF\x45D\x3\x2\x2\x2\x30B0"+
		"\x30B1\a\\\x2\x2\x30B1\x30B2\a\xC1\x2\x2\x30B2\x30B3\a\x3DD\x2\x2\x30B3"+
		"\x30B4\a\x45E\x2\x2\x30B4\x30B5\a\x445\x2\x2\x30B5\x30B6\a\x45F\x2\x2"+
		"\x30B6\x30B7\a\x3DC\x2\x2\x30B7\x30B8\a\x44C\x2\x2\x30B8\x30BA\x5\x1E8"+
		"\xF5\x2\x30B9\x30BB\a\x463\x2\x2\x30BA\x30B9\x3\x2\x2\x2\x30BA\x30BB\x3"+
		"\x2\x2\x2\x30BB\x45F\x3\x2\x2\x2\x30BC\x30BD\a\\\x2\x2\x30BD\x30BF\a\x10C"+
		"\x2\x2\x30BE\x30C0\a\xC1\x2\x2\x30BF\x30BE\x3\x2\x2\x2\x30BF\x30C0\x3"+
		"\x2\x2\x2\x30C0\x30C1\x3\x2\x2\x2\x30C1\x30C2\a\x445\x2\x2\x30C2\x30C3"+
		"\a\x17E\x2\x2\x30C3\x30C4\a\x373\x2\x2\x30C4\x30C5\x5\x464\x233\x2\x30C5"+
		"\x30C6\a\x3DF\x2\x2\x30C6\x30C7\a\x373\x2\x2\x30C7\x30CA\x5\x464\x233"+
		"\x2\x30C8\x30C9\a\x462\x2\x2\x30C9\x30CB\a\x448\x2\x2\x30CA\x30C8\x3\x2"+
		"\x2\x2\x30CA\x30CB\x3\x2\x2\x2\x30CB\x30CC\x3\x2\x2\x2\x30CC\x30CD\a\x28D"+
		"\x2\x2\x30CD\x30CE\a\xBE\x2\x2\x30CE\x30E5\x5\x462\x232\x2\x30CF\x30D6"+
		"\a\x42B\x2\x2\x30D0\x30D1\t\xA0\x2\x2\x30D1\x30D2\a\x44C\x2\x2\x30D2\x30D4"+
		"\a\x445\x2\x2\x30D3\x30D5\a\x462\x2\x2\x30D4\x30D3\x3\x2\x2\x2\x30D4\x30D5"+
		"\x3\x2\x2\x2\x30D5\x30D7\x3\x2\x2\x2\x30D6\x30D0\x3\x2\x2\x2\x30D6\x30D7"+
		"\x3\x2\x2\x2\x30D7\x30DE\x3\x2\x2\x2\x30D8\x30D9\a\x1FF\x2\x2\x30D9\x30DA"+
		"\a\x44C\x2\x2\x30DA\x30DC\t\x2\x2\x2\x30DB\x30DD\a\x462\x2\x2\x30DC\x30DB"+
		"\x3\x2\x2\x2\x30DC\x30DD\x3\x2\x2\x2\x30DD\x30DF\x3\x2\x2\x2\x30DE\x30D8"+
		"\x3\x2\x2\x2\x30DE\x30DF\x3\x2\x2\x2\x30DF\x30E3\x3\x2\x2\x2\x30E0\x30E1"+
		"\a\x12B\x2\x2\x30E1\x30E2\a\x44C\x2\x2\x30E2\x30E4\t\x13\x2\x2\x30E3\x30E0"+
		"\x3\x2\x2\x2\x30E3\x30E4\x3\x2\x2\x2\x30E4\x30E6\x3\x2\x2\x2\x30E5\x30CF"+
		"\x3\x2\x2\x2\x30E5\x30E6\x3\x2\x2\x2\x30E6\x30E8\x3\x2\x2\x2\x30E7\x30E9"+
		"\a\x463\x2\x2\x30E8\x30E7\x3\x2\x2\x2\x30E8\x30E9\x3\x2\x2\x2\x30E9\x461"+
		"\x3\x2\x2\x2\x30EA\x30ED\x5\x47A\x23E\x2\x30EB\x30ED\x5\x35A\x1AE\x2\x30EC"+
		"\x30EA\x3\x2\x2\x2\x30EC\x30EB\x3\x2\x2\x2\x30ED\x463\x3\x2\x2\x2\x30EE"+
		"\x30F1\x5\x47A\x23E\x2\x30EF\x30F1\x5\x35A\x1AE\x2\x30F0\x30EE\x3\x2\x2"+
		"\x2\x30F0\x30EF\x3\x2\x2\x2\x30F1\x465\x3\x2\x2\x2\x30F2\x30F3\a\x12D"+
		"\x2\x2\x30F3\x30F4\a\xC1\x2\x2\x30F4\x30F6\a\x445\x2\x2\x30F5\x30F7\a"+
		"\x463\x2\x2\x30F6\x30F5\x3\x2\x2\x2\x30F6\x30F7\x3\x2\x2\x2\x30F7\x3104"+
		"\x3\x2\x2\x2\x30F8\x30FF\a\x42B\x2\x2\x30F9\x30FA\a\x131\x2\x2\x30FA\x30FB"+
		"\a\x44C\x2\x2\x30FB\x30FC\t\x3\x2\x2\x30FC\x30FD\a\x107\x2\x2\x30FD\x30FE"+
		"\a\x44C\x2\x2\x30FE\x3100\t\x3\x2\x2\x30FF\x30F9\x3\x2\x2\x2\x30FF\x3100"+
		"\x3\x2\x2\x2\x3100\x3102\x3\x2\x2\x2\x3101\x3103\a\x95\x2\x2\x3102\x3101"+
		"\x3\x2\x2\x2\x3102\x3103\x3\x2\x2\x2\x3103\x3105\x3\x2\x2\x2\x3104\x30F8"+
		"\x3\x2\x2\x2\x3104\x3105\x3\x2\x2\x2\x3105\x467\x3\x2\x2\x2\x3106\x3108"+
		"\a\x424\x2\x2\x3107\x3106\x3\x2\x2\x2\x3107\x3108\x3\x2\x2\x2\x3108\x3109"+
		"\x3\x2\x2\x2\x3109\x310A\a\x45E\x2\x2\x310A\x310B\x5\x46A\x236\x2\x310B"+
		"\x3111\a\x45F\x2\x2\x310C\x310E\a\x462\x2\x2\x310D\x310C\x3\x2\x2\x2\x310D"+
		"\x310E\x3\x2\x2\x2\x310E\x310F\x3\x2\x2\x2\x310F\x3110\a\x3DC\x2\x2\x3110"+
		"\x3112\x5\x1E8\xF5\x2\x3111\x310D\x3\x2\x2\x2\x3111\x3112\x3\x2\x2\x2"+
		"\x3112\x3114\x3\x2\x2\x2\x3113\x3115\a\x463\x2\x2\x3114\x3113\x3\x2\x2"+
		"\x2\x3114\x3115\x3\x2\x2\x2\x3115\x469\x3\x2\x2\x2\x3116\x3117\a\x187"+
		"\x2\x2\x3117\x3118\a\xC1\x2\x2\x3118\x3119\a\x198\x2\x2\x3119\x311A\t"+
		"\x3\x2\x2\x311A\x311B\a\x17E\x2\x2\x311B\x311D\x5\x46C\x237\x2\x311C\x311E"+
		"\a\x463\x2\x2\x311D\x311C\x3\x2\x2\x2\x311D\x311E\x3\x2\x2\x2\x311E\x46B"+
		"\x3\x2\x2\x2\x311F\x3120\x5\x47A\x23E\x2\x3120\x3121\a\x459\x2\x2\x3121"+
		"\x3122\x5\x47A\x23E\x2\x3122\x3123\a\x459\x2\x2\x3123\x3124\x5\x47A\x23E"+
		"\x2\x3124\x3127\x3\x2\x2\x2\x3125\x3127\x5\x47A\x23E\x2\x3126\x311F\x3"+
		"\x2\x2\x2\x3126\x3125\x3\x2\x2\x2\x3127\x46D\x3\x2\x2\x2\x3128\x3129\a"+
		"\x36C\x2\x2\x3129\x312A\a\x28D\x2\x2\x312A\x312B\a\xC1\x2\x2\x312B\x312C"+
		"\t\x3\x2\x2\x312C\x312D\a\x23A\x2\x2\x312D\x312E\a\x3F7\x2\x2\x312E\x3132"+
		"\x5\x35A\x1AE\x2\x312F\x3130\a\x45E\x2\x2\x3130\x3131\t\x3\x2\x2\x3131"+
		"\x3133\a\x45F\x2\x2\x3132\x312F\x3\x2\x2\x2\x3132\x3133\x3\x2\x2\x2\x3133"+
		"\x3135\x3\x2\x2\x2\x3134\x3136\a\x463\x2\x2\x3135\x3134\x3\x2\x2\x2\x3135"+
		"\x3136\x3\x2\x2\x2\x3136\x46F\x3\x2\x2\x2\x3137\x3138\x5\x47A\x23E\x2"+
		"\x3138\x3139\a\x45E\x2\x2\x3139\x313A\a\x21E\x2\x2\x313A\x313B\a\x45F"+
		"\x2\x2\x313B\x315D\x3\x2\x2\x2\x313C\x313D\x5\x47A\x23E\x2\x313D\x313E"+
		"\a\x45E\x2\x2\x313E\x313F\a\x446\x2\x2\x313F\x3140\a\x462\x2\x2\x3140"+
		"\x3141\a\x446\x2\x2\x3141\x3142\a\x45F\x2\x2\x3142\x315D\x3\x2\x2\x2\x3143"+
		"\x3144\x5\x47A\x23E\x2\x3144\x3145\a\x45E\x2\x2\x3145\x3146\a\x446\x2"+
		"\x2\x3146\x3147\a\x45F\x2\x2\x3147\x315D\x3\x2\x2\x2\x3148\x3149\x5\x47A"+
		"\x23E\x2\x3149\x314A\a\x45E\x2\x2\x314A\x314B\tx\x2\x2\x314B\x314C\x5"+
		"\x43C\x21F\x2\x314C\x314D\a\x45F\x2\x2\x314D\x315D\x3\x2\x2\x2\x314E\x314F"+
		"\x5\x47A\x23E\x2\x314F\x3155\a\x1AD\x2\x2\x3150\x3151\a\x45E\x2\x2\x3151"+
		"\x3152\a\x446\x2\x2\x3152\x3153\a\x462\x2\x2\x3153\x3154\a\x446\x2\x2"+
		"\x3154\x3156\a\x45F\x2\x2\x3155\x3150\x3\x2\x2\x2\x3155\x3156\x3\x2\x2"+
		"\x2\x3156\x315D\x3\x2\x2\x2\x3157\x3159\a\x119\x2\x2\x3158\x315A\a\x2CF"+
		"\x2\x2\x3159\x3158\x3\x2\x2\x2\x3159\x315A\x3\x2\x2\x2\x315A\x315D\x3"+
		"\x2\x2\x2\x315B\x315D\x5\x47A\x23E\x2\x315C\x3137\x3\x2\x2\x2\x315C\x313C"+
		"\x3\x2\x2\x2\x315C\x3143\x3\x2\x2\x2\x315C\x3148\x3\x2\x2\x2\x315C\x314E"+
		"\x3\x2\x2\x2\x315C\x3157\x3\x2\x2\x2\x315C\x315B\x3\x2\x2\x2\x315D\x471"+
		"\x3\x2\x2\x2\x315E\x3163\a\x27A\x2\x2\x315F\x3163\a\xF7\x2\x2\x3160\x3163"+
		"\x5\x474\x23B\x2\x3161\x3163\x5\x47A\x23E\x2\x3162\x315E\x3\x2\x2\x2\x3162"+
		"\x315F\x3\x2\x2\x2\x3162\x3160\x3\x2\x2\x2\x3162\x3161\x3\x2\x2\x2\x3163"+
		"\x473\x3\x2\x2\x2\x3164\x3174\a\x448\x2\x2\x3165\x3174\a\x449\x2\x2\x3166"+
		"\x3168\x5\x476\x23C\x2\x3167\x3166\x3\x2\x2\x2\x3167\x3168\x3\x2\x2\x2"+
		"\x3168\x3169\x3\x2\x2\x2\x3169\x3174\a\x446\x2\x2\x316A\x316C\x5\x476"+
		"\x23C\x2\x316B\x316A\x3\x2\x2\x2\x316B\x316C\x3\x2\x2\x2\x316C\x316D\x3"+
		"\x2\x2\x2\x316D\x3174\t\xA1\x2\x2\x316E\x3170\x5\x476\x23C\x2\x316F\x316E"+
		"\x3\x2\x2\x2\x316F\x3170\x3\x2\x2\x2\x3170\x3171\x3\x2\x2\x2\x3171\x3172"+
		"\a\x45D\x2\x2\x3172\x3174\t\xA2\x2\x2\x3173\x3164\x3\x2\x2\x2\x3173\x3165"+
		"\x3\x2\x2\x2\x3173\x3167\x3\x2\x2\x2\x3173\x316B\x3\x2\x2\x2\x3173\x316F"+
		"\x3\x2\x2\x2\x3174\x475\x3\x2\x2\x2\x3175\x3176\t\x83\x2\x2\x3176\x477"+
		"\x3\x2\x2\x2\x3177\x3178\t\xA3\x2\x2\x3178\x479\x3\x2\x2\x2\x3179\x317E"+
		"\a\x447\x2\x2\x317A\x317E\a\x442\x2\x2\x317B\x317E\a\x444\x2\x2\x317C"+
		"\x317E\x5\x478\x23D\x2\x317D\x3179\x3\x2\x2\x2\x317D\x317A\x3\x2\x2\x2"+
		"\x317D\x317B\x3\x2\x2\x2\x317D\x317C\x3\x2\x2\x2\x317E\x47B\x3\x2\x2\x2"+
		"\x317F\x3180\a\x447\x2\x2\x3180\x47D\x3\x2\x2\x2\x3181\x3184\x5\x47A\x23E"+
		"\x2\x3182\x3184\a\x448\x2\x2\x3183\x3181\x3\x2\x2\x2\x3183\x3182\x3\x2"+
		"\x2\x2\x3184\x47F\x3\x2\x2\x2\x3185\x3195\a\x44C\x2\x2\x3186\x3195\a\x44D"+
		"\x2\x2\x3187\x3195\a\x44E\x2\x2\x3188\x3189\a\x44E\x2\x2\x3189\x3195\a"+
		"\x44C\x2\x2\x318A\x318B\a\x44D\x2\x2\x318B\x3195\a\x44C\x2\x2\x318C\x318D"+
		"\a\x44E\x2\x2\x318D\x3195\a\x44D\x2\x2\x318E\x318F\a\x44F\x2\x2\x318F"+
		"\x3195\a\x44C\x2\x2\x3190\x3191\a\x44F\x2\x2\x3191\x3195\a\x44D\x2\x2"+
		"\x3192\x3193\a\x44F\x2\x2\x3193\x3195\a\x44E\x2\x2\x3194\x3185\x3\x2\x2"+
		"\x2\x3194\x3186\x3\x2\x2\x2\x3194\x3187\x3\x2\x2\x2\x3194\x3188\x3\x2"+
		"\x2\x2\x3194\x318A\x3\x2\x2\x2\x3194\x318C\x3\x2\x2\x2\x3194\x318E\x3"+
		"\x2\x2\x2\x3194\x3190\x3\x2\x2\x2\x3194\x3192\x3\x2\x2\x2\x3195\x481\x3"+
		"\x2\x2\x2\x3196\x3197\t\xA4\x2\x2\x3197\x483\x3\x2\x2\x2\x3198\x319A\a"+
		"\x446\x2\x2\x3199\x319B\t\xA5\x2\x2\x319A\x3199\x3\x2\x2\x2\x319A\x319B"+
		"\x3\x2\x2\x2\x319B\x485\x3\x2\x2\x2\x6EA\x489\x491\x496\x49A\x4A0\x4A2"+
		"\x4A7\x4AE\x4B2\x4B8\x4BC\x4C0\x4C4\x4C8\x4CC\x4D0\x4D4\x4D7\x4DE\x581"+
		"\x588\x596\x59A\x59F\x5A4\x5A8\x5AC\x5B1\x5B6\x5B8\x5BC\x5BF\x5C6\x5C9"+
		"\x5D2\x5D5\x5E0\x5E5\x5EA\x5EF\x5F4\x5FA\x5FE\x601\x605\x608\x60B\x612"+
		"\x616\x618\x61D\x623\x627\x634\x63A\x63D\x646\x649\x65E\x666\x66B\x66E"+
		"\x673\x676\x67B\x684\x690\x695\x698\x69D\x6A3\x6A8\x6B9\x6BC\x6BF\x6C2"+
		"\x6C7\x6D0\x6DF\x6F0\x6FB\x701\x710\x71F\x728\x72C\x731\x737\x73D\x740"+
		"\x745\x74A\x752\x75C\x76F\x777\x784\x786\x792\x794\x79B\x7A4\x7AA\x7B3"+
		"\x7C1\x7CB\x7D5\x7FD\x814\x838\x83A\x84C\x864\x867\x875\x895\x8A7\x8AA"+
		"\x8AF\x8B2\x8B7\x8BA\x8BF\x8C2\x8C7\x8CA\x8D2\x8D5\x8DD\x8EA\x8F5\x8FA"+
		"\x8FE\x904\x91B\x927\x932\x937\x93B\x941\x943\x950\x967\x96E\x977\x97C"+
		"\x97F\x984\x987\x98C\x991\x9AD\x9B5\x9BB\x9C2\x9C4\x9D1\x9D8\x9E7\x9F9"+
		"\x9FC\x9FE\xA03\xA07\xA0A\xA0C\xA12\xA15\xA17\xA1D\xA1F\xA35\xA3D\xA45"+
		"\xA47\xA49\xA52\xA67\xA74\xA83\xA87\xAAA\xAAD\xAB2\xAC9\xACC\xAD1\xAEB"+
		"\xAF9\xAFE\xB06\xB0B\xB12\xB27\xB4C\xB51\xB64\xB70\xB73\xB78\xB7B\xB81"+
		"\xB90\xB95\xB9D\xBA0\xBA5\xBAA\xBAD\xBC5\xBCC\xBD1\xBD6\xBDB\xBDD\xBE4"+
		"\xBF1\xBF7\xBFC\xC04\xC14\xC1B\xC20\xC25\xC28\xC2E\xC34\xC39\xC3E\xC43"+
		"\xC46\xC4C\xC52\xC5D\xC60\xC6A\xC70\xC74\xC78\xC95\xCA2\xCA8\xCB2\xCB5"+
		"\xCC5\xCCA\xCDA\xCDD\xCE0\xCE5\xCE8\xCED\xCF6\xCF9\xCFC\xD03\xD0B\xD0F"+
		"\xD11\xD13\xD19\xD1D\xD22\xD25\xD27\xD33\xD36\xD38\xD43\xD47\xD4B\xD50"+
		"\xD5F\xD66\xD6F\xD77\xD7A\xD7F\xD84\xD8C\xD92\xD96\xD9C\xDA1\xDA5\xDAC"+
		"\xDB4\xDBC\xDC5\xDCA\xDCE\xDD1\xDD5\xDDB\xDE0\xDE8\xDF0\xDF6\xDFC\xDFF"+
		"\xE04\xE07\xE0E\xE10\xE13\xE19\xE1C\xE21\xE24\xE29\xE2C\xE31\xE34\xE39"+
		"\xE3C\xE3F\xE42\xE49\xE4D\xE54\xE5B\xE61\xE6E\xE72\xE77\xE81\xE8A\xE8E"+
		"\xE9A\xEA0\xEA5\xEA7\xEBB\xEBF\xEC7\xED0\xED6\xEDC\xEE4\xEE6\xEF0\xEF4"+
		"\xEF7\xEFB\xF00\xF06\xF09\xF0D\xF15\xF17\xF1A\xF22\xF2A\xF31\xF38\xF3A"+
		"\xF3C\xF41\xF47\xF4A\xF4C\xF4E\xF51\xF56\xF59\xF5E\xF6D\xF74\xF7B\xF7D"+
		"\xF7F\xF84\xF8A\xF8D\xF8F\xF91\xF94\xF99\xF9C\xFA1\xFAE\xFB3\xFBC\xFC1"+
		"\xFC7\xFCB\xFCF\xFE0\xFE2\xFEC\xFF1\xFF3\xFF7\xFFD\x1005\x100A\x100D\x1015"+
		"\x1018\x101D\x1022\x1027\x102C\x1031\x1036\x103A\x103F\x104A\x104F\x1052"+
		"\x1055\x105A\x105D\x1062\x1065\x106A\x106D\x1072\x1075\x107A\x107D\x1082"+
		"\x1088\x108D\x1090\x1095\x109C\x109E\x10A4\x10AD\x10B2\x10B4\x10C0\x10C6"+
		"\x10D2\x10D5\x10DA\x10DC\x10E6\x10EB\x10ED\x10F1\x10F7\x1109\x110B\x111A"+
		"\x112C\x1134\x113E\x114E\x1163\x116E\x1174\x117D\x1186\x118C\x1195\x119A"+
		"\x119D\x11A2\x11A5\x11AA\x11AD\x11B5\x11BB\x11BF\x11C6\x11CC\x11D0\x11D3"+
		"\x11D5\x11D8\x11DD\x11E0\x11E5\x11E8\x11ED\x11F0\x11F5\x11F8\x1207\x1212"+
		"\x121D\x1224\x1227\x122F\x1235\x123E\x1245\x124E\x1258\x125D\x126B\x1276"+
		"\x127D\x1280\x1288\x128F\x1296\x129A\x129F\x12A2\x12A7\x12AA\x12AF\x12B2"+
		"\x12BB\x12C2\x12D1\x12D4\x12D9\x12E4\x12ED\x12F8\x12FE\x1300\x1308\x1310"+
		"\x1315\x1320\x1323\x1327\x132F\x1333\x1337\x133F\x1344\x134C\x1351\x1355"+
		"\x1357\x135C\x1365\x1368\x136D\x1374\x137A\x137C\x1381\x1387\x138D\x1392"+
		"\x1398\x139F\x13A4\x13A9\x13AE\x13B1\x13B5\x13B8\x13BC\x13C0\x13C3\x13C7"+
		"\x13CC\x13D0\x13D4\x13DE\x13E4\x13EB\x13EE\x13F4\x13FA\x13FF\x1401\x1407"+
		"\x1409\x140E\x1414\x141A\x141F\x1421\x1425\x1429\x142C\x143A\x143F\x1443"+
		"\x1450\x1453\x1455\x145D\x1467\x146D\x1474\x1477\x147D\x1483\x1488\x148A"+
		"\x1490\x1492\x1497\x149D\x14A3\x14A9\x14AE\x14B0\x14B4\x14B8\x14BB\x14C9"+
		"\x14CE\x14D2\x14DF\x14E2\x14E4\x14EC\x14F7\x1500\x1509\x1514\x151D\x1526"+
		"\x1532\x1536\x153B\x153D\x153F\x1544\x1548\x154D\x154F\x1551\x155F\x1564"+
		"\x157A\x1590\x1595\x15A2\x15AA\x15BC\x15BF\x15C7\x15CC\x15D7\x15DE\x15E3"+
		"\x15E7\x15EB\x15EE\x15F5\x1607\x1609\x161D\x1624\x162B\x1630\x1635\x163B"+
		"\x1640\x1642\x1649\x164F\x1655\x1658\x165E\x1668\x166B\x1672\x1675\x167A"+
		"\x167C\x1684\x1688\x168E\x1693\x1695\x1698\x169F\x16A5\x16AC\x16AF\x16B5"+
		"\x16BA\x16BC\x16BF\x16C7\x16CD\x16D4\x16D7\x16DD\x16E2\x16E4\x16EC\x16F4"+
		"\x16FA\x16FF\x1701\x170B\x1710\x171A\x1720\x172C\x172E\x1735\x173B\x1741"+
		"\x1747\x174C\x174E\x1755\x175D\x1763\x1771\x1773\x1776\x177B\x177D\x1789"+
		"\x178F\x179D\x179F\x17A2\x17A7\x17AA\x17AF\x17B1\x17BA\x17C1\x17CD\x17DD"+
		"\x17E6\x17EF\x17F2\x17F7\x17FE\x1800\x1806\x1808\x1810\x1812\x1818\x181A"+
		"\x1820\x1822\x1829\x182C\x182E\x1831\x1835\x1837\x1840\x1846\x184A\x1852"+
		"\x1859\x185F\x1861\x186C\x1871\x1877\x187B\x1885\x188D\x1899\x189C\x18A4"+
		"\x18A6\x18A9\x18AD\x18B0\x18B9\x18BC\x18BF\x18C7\x18CD\x18D4\x18D8\x18E3"+
		"\x18E9\x18EB\x18F4\x18F8\x18FF\x1904\x1907\x190F\x1913\x1916\x191A\x191D"+
		"\x1921\x1928\x192C\x192E\x1930\x1933\x1936\x1939\x193F\x1942\x194A\x194C"+
		"\x194F\x1953\x1956\x195C\x195F\x1963\x1966\x1969\x1970\x1973\x1979\x1983"+
		"\x1986\x1989\x198F\x1992\x1995\x1998\x199C\x199F\x19A7\x19A9\x19AD\x19B0"+
		"\x19B8\x19BC\x19C0\x19C7\x19CB\x19CD\x19CF\x19D2\x19D5\x19D8\x19E0\x19E6"+
		"\x19EC\x19EE\x19F2\x19F5\x19FD\x1A01\x1A08\x1A0B\x1A14\x1A17\x1A1B\x1A23"+
		"\x1A26\x1A2A\x1A2D\x1A3B\x1A3F\x1A42\x1A46\x1A49\x1A54\x1A5A\x1A5D\x1A62"+
		"\x1A64\x1A6C\x1A70\x1A73\x1A77\x1A83\x1A86\x1A8A\x1A8D\x1A91\x1AA1\x1AA3"+
		"\x1AA5\x1AA8\x1AAB\x1AB0\x1AB3\x1AB9\x1ABC\x1AC3\x1AC7\x1AC9\x1AD1\x1AD4"+
		"\x1AD8\x1ADF\x1AE2\x1AEE\x1AF3\x1AF6\x1B02\x1B05\x1B0B\x1B12\x1B17\x1B1C"+
		"\x1B22\x1B26\x1B2D\x1B30\x1B38\x1B40\x1B43\x1B4B\x1B52\x1B59\x1B5C\x1B66"+
		"\x1B6D\x1B72\x1B75\x1B7F\x1B82\x1B85\x1B8A\x1B8E\x1B90\x1B94\x1B9D\x1BA0"+
		"\x1BA3\x1BAA\x1BAF\x1BB3\x1BB5\x1BBF\x1BC2\x1BC5\x1BCC\x1BD2\x1BD6\x1BDA"+
		"\x1BDF\x1BE3\x1BE8\x1BEB\x1BF0\x1BFE\x1C06\x1C0A\x1C10\x1C13\x1C1E\x1C22"+
		"\x1C27\x1C2A\x1C32\x1C37\x1C3B\x1C40\x1C45\x1C4B\x1C50\x1C53\x1C58\x1C5E"+
		"\x1C62\x1C6B\x1C75\x1C78\x1C81\x1C89\x1C8C\x1C93\x1C96\x1CAF\x1CBA\x1CC7"+
		"\x1CCE\x1CD0\x1CD8\x1CE0\x1CE6\x1CE9\x1CEC\x1CEF\x1CF5\x1CF9\x1D01\x1D0D"+
		"\x1D19\x1D1D\x1D20\x1D29\x1D2F\x1D39\x1D42\x1D4C\x1D52\x1D58\x1D5F\x1D65"+
		"\x1D69\x1D74\x1D83\x1D85\x1DA1\x1DB0\x1DB8\x1DC3\x1DC8\x1DCB\x1DD3\x1DDD"+
		"\x1DE4\x1DEB\x1DED\x1DF9\x1E04\x1E08\x1E0D\x1E10\x1E12\x1E15\x1E21\x1E23"+
		"\x1E25\x1E28\x1E2D\x1E30\x1E35\x1E3F\x1E43\x1E48\x1E4B\x1E4D\x1E50\x1E5C"+
		"\x1E5E\x1E60\x1E63\x1E69\x1E73\x1E87\x1E8D\x1EA6\x1EA8\x1EC2\x1EC8\x1ED3"+
		"\x1EDB\x1EDE\x1EEF\x1EF7\x1EFE\x1F15\x1F22\x1F28\x1F2F\x1F37\x1F3A\x1F3D"+
		"\x1F46\x1F50\x1F57\x1F5B\x1F5F\x1F65\x1F6C\x1F70\x1F76\x1F7D\x1F84\x1F87"+
		"\x1F8D\x1F94\x1F98\x1F9D\x1FA2\x1FA7\x1FAF\x1FB3\x1FB9\x1FC0\x1FC4\x1FCE"+
		"\x1FD0\x1FD8\x1FDE\x1FE4\x1FF5\x1FF9\x2001\x2005\x2008\x2010\x2014\x2019"+
		"\x201D\x2027\x202C\x202E\x2035\x2039\x203D\x2041\x2044\x2048\x204E\x2052"+
		"\x2054\x205B\x2062\x2065\x2068\x206F\x2074\x2079\x207D\x2083\x2087\x2089"+
		"\x208E\x2093\x2097\x209C\x20A2\x20A6\x20AA\x20AC\x20B0\x20B4\x20B8\x20BC"+
		"\x20C2\x20C5\x20CB\x20CF\x20D3\x20D9\x20DF\x20E1\x20E4\x20E8\x20EC\x20F0"+
		"\x20F6\x20F9\x20FF\x2105\x2108\x210E\x2111\x2117\x211A\x211E\x2122\x2126"+
		"\x212B\x212E\x2132\x2136\x2147\x2149\x214B\x214E\x2155\x215A\x215E\x2164"+
		"\x2168\x216A\x216F\x2174\x2178\x217D\x2183\x2187\x218B\x218D\x2191\x2195"+
		"\x2199\x219D\x21A3\x21A6\x21AC\x21B0\x21B4\x21BA\x21C0\x21C2\x21C5\x21C9"+
		"\x21CD\x21D1\x21D7\x21DA\x21E0\x21E6\x21E9\x21EF\x21F2\x21F8\x21FB\x21FF"+
		"\x2203\x2207\x220C\x220F\x2213\x2217\x221D\x2220\x2224\x2235\x2237\x2239"+
		"\x223C\x224A\x2250\x2258\x225F\x2261\x2264\x2285\x2289\x228D\x2294\x229D"+
		"\x22A5\x22A8\x22AB\x22AF\x22B3\x22B6\x22BE\x22C3\x22C8\x22CC\x22CE\x22D5"+
		"\x22DD\x22E0\x22EB\x22F0\x22F4\x22F7\x22FB\x22FF\x2304\x230B\x230D\x2313"+
		"\x2316\x231E\x2324\x2328\x232B\x2334\x2337\x233D\x2342\x2349\x234E\x2356"+
		"\x235B\x2367\x2369\x2374\x237B\x2385\x239C\x23A9\x23B9\x23BE\x23C5\x23C8"+
		"\x23CC\x23CE\x23DF\x23EE\x23F6\x23FF\x2407\x240F\x2420\x242D\x2439\x2451"+
		"\x2458\x245C\x2466\x246A\x247B\x24A2\x24A9\x24B1\x24BD\x24D3\x24DC\x24DE"+
		"\x24E4\x24E9\x24F0\x24FD\x24FF\x2501\x2504\x2507\x250E\x2511\x2517\x251C"+
		"\x251E\x2521\x2527\x252F\x2531\x2534\x2538\x253B\x2545\x2548\x254C\x254F"+
		"\x2555\x2558\x255A\x255E\x2562\x2567\x256B\x2570\x2575\x2579\x2582\x2588"+
		"\x2591\x2594\x2596\x259D\x25A0\x25A4\x25AC\x25AF\x25B7\x25BA\x25C6\x25CD"+
		"\x25D1\x25D4\x25DC\x25DF\x25E9\x25EF\x25F3\x25F6\x25FE\x2601\x260C\x260E"+
		"\x2617\x261A\x2621\x2626\x262A\x262F\x263F\x2642\x2649\x264D\x2652\x265B"+
		"\x265F\x2667\x266A\x2673\x2676\x267A\x2683\x2685\x268A\x2692\x2699\x269D"+
		"\x26AF\x26B7\x26BB\x26BF\x26C5\x26CA\x26D3\x26D6\x26D9\x26E4\x26E9\x26F4"+
		"\x26F9\x26FF\x2705\x270B\x270D\x2711\x2714\x2718\x271C\x2724\x2729\x272B"+
		"\x272E\x2733\x273C\x273E\x2746\x274A\x274F\x2752\x2755\x275B\x2763\x276B"+
		"\x276E\x2771\x2775\x277A\x277D\x2783\x2787\x278D\x27A3\x27A6\x27A9\x27AB"+
		"\x27B2\x27B7\x27C3\x27CB\x27D4\x27DD\x27E8\x27F3\x27FC\x2803\x280A\x2814"+
		"\x2818\x281A\x281C\x281F\x2822\x282D\x282F\x2832\x2834\x2839\x2844\x284D"+
		"\x2850\x2853\x285C\x285F\x2862\x2869\x286C\x2873\x2879\x2888\x288B\x2892"+
		"\x289A\x28A1\x28A7\x28B2\x28C0\x28C7\x28C9\x28D5\x28DC\x28E0\x28E8\x28EC"+
		"\x28F0\x28F6\x2900\x290A\x2914\x291C\x2928\x292E\x2932\x293C\x2940\x2944"+
		"\x294E\x2954\x295C\x2964\x2966\x297E\x298A\x2991\x2999\x29A0\x29A6\x29AE"+
		"\x29B1\x29B3\x29B7\x29BC\x29BF\x29C3\x29C7\x29CE\x29D2\x29D5\x29DA\x29DE"+
		"\x29E2\x29E7\x29EE\x29F1\x29F5\x29FA\x29FE\x2A07\x2A0E\x2A17\x2A23\x2A25"+
		"\x2A2F\x2A32\x2A37\x2A40\x2A42\x2A44\x2A49\x2A4B\x2A53\x2A58\x2A60\x2A65"+
		"\x2A6B\x2A6D\x2A77\x2A79\x2A7D\x2A81\x2A83\x2A8C\x2A8E\x2A93\x2A9E\x2AC0"+
		"\x2AD2\x2AD9\x2ADB\x2AE2\x2AEB\x2AF3\x2AF9\x2B01\x2B04\x2B0B\x2B11\x2B14"+
		"\x2B16\x2B1E\x2B20\x2B28\x2B2F\x2B37\x2B39\x2B40\x2B48\x2B4E\x2B57\x2B5A"+
		"\x2B5E\x2B62\x2B65\x2B69\x2B6E\x2B70\x2B74\x2B79\x2B7B\x2B7F\x2B84\x2B86"+
		"\x2B8A\x2B91\x2B93\x2B9A\x2B9C\x2BA5\x2BAD\x2BB0\x2BB7\x2BBF\x2BC2\x2BC9"+
		"\x2BCF\x2BD6\x2BDC\x2BE0\x2BF9\x2BFC\x2C00\x2C02\x2C05\x2C33\x2C38\x2C4C"+
		"\x2C50\x2C54\x2C62\x2C6C\x2C75\x2C7B\x2C80\x2C94\x2C9A\x2CA1\x2CA5\x2CB4"+
		"\x2CBA\x2CCD\x2CD8\x2CE5\x2CF6\x2CFC\x2D03\x2D07\x2D22\x2D5C\x2D60\x2D99"+
		"\x2D9B\x2DA1\x2DAC\x2DB5\x2DBE\x2DC8\x2DDB\x2DEB\x2DFB\x2E0B\x2E1E\x2E23"+
		"\x2E29\x2E2C\x2E31\x2E36\x2E43\x2E48\x2E4E\x2E57\x2E61\x2E64\x2E72\x2E78"+
		"\x2E81\x2E85\x2E8D\x2E94\x2EA1\x2EA9\x2EB6\x2EBD\x2EC3\x2EC7\x2ED8\x2EE7"+
		"\x2EE9\x2EF6\x2F06\x2F0E\x2F12\x2F15\x2F1E\x2F21\x2F24\x2F31\x2F35\x2F3D"+
		"\x2F43\x2F4B\x2F52\x2F58\x2F6A\x2F73\x2F79\x2F7F\x2F82\x2F86\x2F8D\x2F95"+
		"\x2F98\x2F9E\x2FA4\x2FA6\x2FAC\x2FAF\x2FB1\x2FB7\x2FB9\x2FC7\x2FCE\x2FD7"+
		"\x2FDE\x2FF0\x2FF7\x2FFE\x3005\x300B\x3012\x3015\x301A\x3021\x3026\x302A"+
		"\x302F\x3032\x3036\x303A\x303F\x3043\x3049\x304D\x3051\x3056\x305A\x305F"+
		"\x3064\x3068\x306D\x3071\x3079\x307D\x3082\x308C\x3091\x3098\x30A1\x30A5"+
		"\x30A7\x30AE\x30BA\x30BF\x30CA\x30D4\x30D6\x30DC\x30DE\x30E3\x30E5\x30E8"+
		"\x30EC\x30F0\x30F6\x30FF\x3102\x3104\x3107\x310D\x3111\x3114\x311D\x3126"+
		"\x3132\x3135\x3155\x3159\x315C\x3162\x3167\x316B\x316F\x3173\x317D\x3183"+
		"\x3194\x319A";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace SqlSchemaCompare.Core.TSql
