//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\GitHub\SqlSchemaCompare\SqlSchemaCompareGenerator\SqlSchemaCompareGenerator.Console\TSqlParser.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SqlSchemaCompare.Core.TSql {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class TSqlParser : Parser {
	public const int
		ABORT=1, ABORT_AFTER_WAIT=2, ABSENT=3, ABSOLUTE=4, ACCELERATED_DATABASE_RECOVERY=5, 
		ACCENT_SENSITIVITY=6, ACCESS=7, ACTION=8, ACTIVATION=9, ACTIVE=10, ADD=11, 
		ADDRESS=12, ADMINISTER=13, AES=14, AES_128=15, AES_192=16, AES_256=17, 
		AFFINITY=18, AFTER=19, AGGREGATE=20, ALGORITHM=21, ALL=22, ALLOWED=23, 
		ALLOW_CONNECTIONS=24, ALLOW_ENCRYPTED_VALUE_MODIFICATIONS=25, ALLOW_MULTIPLE_EVENT_LOSS=26, 
		ALLOW_PAGE_LOCKS=27, ALLOW_ROW_LOCKS=28, ALLOW_SINGLE_EVENT_LOSS=29, ALLOW_SNAPSHOT_ISOLATION=30, 
		ALL_CONSTRAINTS=31, ALL_ERRORMSGS=32, ALL_INDEXES=33, ALL_LEVELS=34, ALTER=35, 
		ALWAYS=36, AND=37, ANONYMOUS=38, ANSI_DEFAULTS=39, ANSI_NULLS=40, ANSI_NULL_DEFAULT=41, 
		ANSI_NULL_DFLT_OFF=42, ANSI_NULL_DFLT_ON=43, ANSI_PADDING=44, ANSI_WARNINGS=45, 
		ANY=46, APPEND=47, APPLICATION=48, APPLICATION_LOG=49, APPLOCK_MODE=50, 
		APPLOCK_TEST=51, APPLY=52, APP_NAME=53, ARITHABORT=54, ARITHIGNORE=55, 
		AS=56, ASC=57, ASCII=58, ASSEMBLY=59, ASSEMBLYPROPERTY=60, ASYMMETRIC=61, 
		ASYNCHRONOUS_COMMIT=62, AT_KEYWORD=63, AUDIT=64, AUDIT_GUID=65, AUTHENTICATE=66, 
		AUTHENTICATION=67, AUTHORIZATION=68, AUTO=69, AUTOGROW_ALL_FILES=70, AUTOGROW_SINGLE_FILE=71, 
		AUTOMATED_BACKUP_PREFERENCE=72, AUTOMATIC=73, AUTO_CLEANUP=74, AUTO_CLOSE=75, 
		AUTO_CREATE_STATISTICS=76, AUTO_DROP=77, AUTO_SHRINK=78, AUTO_UPDATE_STATISTICS=79, 
		AUTO_UPDATE_STATISTICS_ASYNC=80, AVAILABILITY=81, AVAILABILITY_MODE=82, 
		AVG=83, BACKSLASH=84, BACKUP=85, BACKUP_CLONEDB=86, BACKUP_PRIORITY=87, 
		BASE64=88, BEFORE=89, BEGIN=90, BEGIN_DIALOG=91, BETWEEN=92, BIGINT=93, 
		BINARY_BASE64=94, BINARY_CHECKSUM=95, BINARY_KEYWORD=96, BINDING=97, BLOB_STORAGE=98, 
		BLOCK=99, BLOCKERS=100, BLOCKING_HIERARCHY=101, BLOCKSIZE=102, BREAK=103, 
		BROKER=104, BROKER_INSTANCE=105, BROWSE=106, BUFFER=107, BUFFERCOUNT=108, 
		BULK=109, BULK_LOGGED=110, BY=111, CACHE=112, CALLED=113, CALLER=114, 
		CAP_CPU_PERCENT=115, CASCADE=116, CASE=117, CAST=118, CATALOG=119, CATALOG_COLLATION=120, 
		CATCH=121, CERTENCODED=122, CERTIFICATE=123, CERTPRIVATEKEY=124, CERT_ID=125, 
		CHANGE=126, CHANGES=127, CHANGETABLE=128, CHANGE_RETENTION=129, CHANGE_TRACKING=130, 
		CHAR=131, CHARINDEX=132, CHECK=133, CHECKALLOC=134, CHECKCATALOG=135, 
		CHECKCONSTRAINTS=136, CHECKDB=137, CHECKFILEGROUP=138, CHECKPOINT=139, 
		CHECKSUM=140, CHECKSUM_AGG=141, CHECKTABLE=142, CHECK_EXPIRATION=143, 
		CHECK_POLICY=144, CLASSIFIER_FUNCTION=145, CLEANTABLE=146, CLEANUP=147, 
		CLEANUP_POLICY=148, CLONEDATABASE=149, CLOSE=150, CLUSTER=151, CLUSTERED=152, 
		COALESCE=153, COLLATE=154, COLLECTION=155, COLUMN=156, COLUMNPROPERTY=157, 
		COLUMNS=158, COLUMNSTORE=159, COLUMNSTORE_ARCHIVE=160, COLUMN_ENCRYPTION_KEY=161, 
		COLUMN_MASTER_KEY=162, COL_LENGTH=163, COL_NAME=164, COMMIT=165, COMMITTED=166, 
		COMPATIBILITY_LEVEL=167, COMPRESS=168, COMPRESSION=169, COMPRESSION_DELAY=170, 
		COMPRESS_ALL_ROW_GROUPS=171, COMPUTE=172, CONCAT=173, CONCAT_NULL_YIELDS_NULL=174, 
		CONCAT_WS=175, CONFIGURATION=176, CONNECT=177, CONNECTION=178, CONNECTIONPROPERTY=179, 
		CONSTRAINT=180, CONTAINMENT=181, CONTAINS=182, CONTAINSTABLE=183, CONTENT=184, 
		CONTEXT=185, CONTEXT_INFO=186, CONTINUE=187, CONTINUE_AFTER_ERROR=188, 
		CONTRACT=189, CONTRACT_NAME=190, CONTROL=191, CONVERSATION=192, CONVERT=193, 
		COOKIE=194, COPY_ONLY=195, COUNT=196, COUNTER=197, COUNT_BIG=198, CPU=199, 
		CREATE=200, CREATE_NEW=201, CREATION_DISPOSITION=202, CREDENTIAL=203, 
		CROSS=204, CRYPTOGRAPHIC=205, CUME_DIST=206, CURRENT=207, CURRENT_DATE=208, 
		CURRENT_REQUEST_ID=209, CURRENT_TIME=210, CURRENT_TIMESTAMP=211, CURRENT_TRANSACTION_ID=212, 
		CURRENT_USER=213, CURSOR=214, CURSOR_CLOSE_ON_COMMIT=215, CURSOR_DEFAULT=216, 
		CURSOR_STATUS=217, CYCLE=218, DATA=219, DATABASE=220, DATABASE_DEFAULT=221, 
		DATABASE_MIRRORING=222, DATABASE_PRINCIPAL_ID=223, DATALENGTH=224, DATASPACE=225, 
		DATA_COMPRESSION=226, DATA_FLUSH_INTERVAL_SECONDS=227, DATA_PURITY=228, 
		DATA_SOURCE=229, DATEADD=230, DATEDIFF=231, DATENAME=232, DATEPART=233, 
		DATE_CORRELATION_OPTIMIZATION=234, DAYS=235, DBCC=236, DBREINDEX=237, 
		DB_CHAINING=238, DB_FAILOVER=239, DB_ID=240, DB_NAME=241, DDL=242, DEALLOCATE=243, 
		DECLARE=244, DECOMPRESS=245, DECRYPTION=246, DEFAULT=247, DEFAULT_DATABASE=248, 
		DEFAULT_DOUBLE_QUOTE=249, DEFAULT_FULLTEXT_LANGUAGE=250, DEFAULT_LANGUAGE=251, 
		DEFAULT_SCHEMA=252, DEFINITION=253, DELAY=254, DELAYED_DURABILITY=255, 
		DELETE=256, DELETED=257, DENSE_RANK=258, DENY=259, DEPENDENTS=260, DES=261, 
		DESC=262, DESCRIPTION=263, DESX=264, DETERMINISTIC=265, DHCP=266, DIAGNOSTICS=267, 
		DIALOG=268, DIFFERENCE=269, DIFFERENTIAL=270, DIRECTORY_NAME=271, DISABLE=272, 
		DISABLED=273, DISABLE_BROKER=274, DISK=275, DISTINCT=276, DISTRIBUTED=277, 
		DISTRIBUTION=278, DOCUMENT=279, DOLLAR_PARTITION=280, DOUBLE=281, DOUBLE_BACK_SLASH=282, 
		DOUBLE_FORWARD_SLASH=283, DROP=284, DROPCLEANBUFFERS=285, DROP_EXISTING=286, 
		DTC_SUPPORT=287, DUMP=288, DYNAMIC=289, EDITION=290, ELEMENTS=291, ELSE=292, 
		EMERGENCY=293, EMPTY=294, ENABLE=295, ENABLED=296, ENABLE_BROKER=297, 
		ENCRYPTED=298, ENCRYPTED_VALUE=299, ENCRYPTION=300, ENCRYPTION_TYPE=301, 
		END=302, ENDPOINT=303, ENDPOINT_URL=304, ERRLVL=305, ERROR=306, ERROR_BROKER_CONVERSATIONS=307, 
		ERROR_LINE=308, ERROR_MESSAGE=309, ERROR_NUMBER=310, ERROR_PROCEDURE=311, 
		ERROR_SEVERITY=312, ERROR_STATE=313, ESCAPE=314, ESTIMATEONLY=315, EVENT=316, 
		EVENT_RETENTION_MODE=317, EVENTDATA=318, EXCEPT=319, EXCLUSIVE=320, EXECUTABLE=321, 
		EXECUTABLE_FILE=322, EXECUTE=323, EXIST=324, EXISTS=325, EXIST_SQUARE_BRACKET=326, 
		EXIT=327, EXPAND=328, EXPIREDATE=329, EXPIRY_DATE=330, EXPLICIT=331, EXTENDED_LOGICAL_CHECKS=332, 
		EXTENSION=333, EXTERNAL=334, EXTERNAL_ACCESS=335, FAILOVER=336, FAILOVER_MODE=337, 
		FAILURE=338, FAILURECONDITIONLEVEL=339, FAILURE_CONDITION_LEVEL=340, FAIL_OPERATION=341, 
		FAN_IN=342, FAST=343, FAST_FORWARD=344, FETCH=345, FILE=346, FILEGROUP=347, 
		FILEGROUPPROPERTY=348, FILEGROUP_ID=349, FILEGROUP_NAME=350, FILEGROWTH=351, 
		FILENAME=352, FILEPATH=353, FILEPROPERTY=354, FILEPROPERTYEX=355, FILESTREAM=356, 
		FILESTREAM_ON=357, FILE_ID=358, FILE_IDEX=359, FILE_NAME=360, FILE_SNAPSHOT=361, 
		FILLFACTOR=362, FILTER=363, FIRST=364, FIRST_VALUE=365, FMTONLY=366, FOLLOWING=367, 
		FOR=368, FORCE=369, FORCED=370, FORCEPLAN=371, FORCESCAN=372, FORCESEEK=373, 
		FORCE_FAILOVER_ALLOW_DATA_LOSS=374, FORCE_SERVICE_ALLOW_DATA_LOSS=375, 
		FOREIGN=376, FORMAT=377, FORMATMESSAGE=378, FORWARD_ONLY=379, FREE=380, 
		FREETEXT=381, FREETEXTTABLE=382, FROM=383, FULL=384, FULLSCAN=385, FULLTEXT=386, 
		FULLTEXTCATALOGPROPERTY=387, FULLTEXTSERVICEPROPERTY=388, FUNCTION=389, 
		GB=390, GENERATED=391, GET=392, GETANCESTOR=393, GETANSINULL=394, GETDATE=395, 
		GETDESCENDANT=396, GETLEVEL=397, GETREPARENTEDVALUE=398, GETROOT=399, 
		GETUTCDATE=400, GET_FILESTREAM_TRANSACTION_CONTEXT=401, GLOBAL=402, GO=403, 
		GO_BATCH=404, GOTO=405, GOVERNOR=406, GRANT=407, GREATEST=408, GROUP=409, 
		GROUPING=410, GROUPING_ID=411, GROUP_MAX_REQUESTS=412, HADR=413, HASH=414, 
		HASHED=415, HAS_DBACCESS=416, HAS_PERMS_BY_NAME=417, HAVING=418, HEALTHCHECKTIMEOUT=419, 
		HEALTH_CHECK_TIMEOUT=420, HEAP=421, HIDDEN_KEYWORD=422, HIERARCHYID=423, 
		HIGH=424, HOLDLOCK=425, HONOR_BROKER_PRIORITY=426, HOST_ID=427, HOST_NAME=428, 
		HOURS=429, IDENTITY=430, IDENTITYCOL=431, IDENTITY_INSERT=432, IDENTITY_VALUE=433, 
		IDENT_CURRENT=434, IDENT_INCR=435, IDENT_SEED=436, IF=437, IGNORE_CONSTRAINTS=438, 
		IGNORE_DUP_KEY=439, IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=440, IGNORE_REPLICATED_TABLE_CACHE=441, 
		IGNORE_TRIGGERS=442, IIF=443, IMMEDIATE=444, IMPERSONATE=445, IMPLICIT_TRANSACTIONS=446, 
		IMPORTANCE=447, IN=448, INCLUDE=449, INCLUDE_NULL_VALUES=450, INCREMENT=451, 
		INCREMENTAL=452, INDEX=453, INDEXKEY_PROPERTY=454, INDEXPROPERTY=455, 
		INDEX_COL=456, INFINITE=457, INIT=458, INITIATOR=459, INNER=460, INPUT=461, 
		INSENSITIVE=462, INSERT=463, INSERTED=464, INSTEAD=465, INT=466, INTERSECT=467, 
		INTERVAL_LENGTH_MINUTES=468, INTO=469, IO=470, IP=471, IS=472, ISDESCENDANTOF=473, 
		ISJSON=474, ISNULL=475, ISNUMERIC=476, ISOLATION=477, IS_MEMBER=478, IS_ROLEMEMBER=479, 
		IS_SRVROLEMEMBER=480, JOB=481, JOIN=482, JSON=483, JSON_ARRAY=484, JSON_MODIFY=485, 
		JSON_OBJECT=486, JSON_PATH_EXISTS=487, JSON_QUERY=488, JSON_VALUE=489, 
		KB=490, KEEP=491, KEEPDEFAULTS=492, KEEPFIXED=493, KEEPIDENTITY=494, KERBEROS=495, 
		KEY=496, KEYS=497, KEYSET=498, KEY_PATH=499, KEY_SOURCE=500, KEY_STORE_PROVIDER_NAME=501, 
		KILL=502, LAG=503, LANGUAGE=504, LAST=505, LAST_VALUE=506, LEAD=507, LEAST=508, 
		LEDGER=509, LEFT=510, LEN=511, LEVEL=512, LIBRARY=513, LIFETIME=514, LIKE=515, 
		LINENO=516, LINKED=517, LINUX=518, LIST=519, LISTENER=520, LISTENER_IP=521, 
		LISTENER_PORT=522, LISTENER_URL=523, LOAD=524, LOB_COMPACTION=525, LOCAL=526, 
		LOCAL_SERVICE_NAME=527, LOCATION=528, LOCK=529, LOCK_ESCALATION=530, LOG=531, 
		LOGIN=532, LOGINPROPERTY=533, LOOP=534, LOW=535, LOWER=536, LTRIM=537, 
		MANUAL=538, MARK=539, MASK=540, MASKED=541, MASTER=542, MATCHED=543, MATERIALIZED=544, 
		MAX=545, MAXDOP=546, MAXRECURSION=547, MAXSIZE=548, MAXTRANSFER=549, MAXVALUE=550, 
		MAX_CPU_PERCENT=551, MAX_DISPATCH_LATENCY=552, MAX_DOP=553, MAX_DURATION=554, 
		MAX_EVENT_SIZE=555, MAX_FILES=556, MAX_IOPS_PER_VOLUME=557, MAX_MEMORY=558, 
		MAX_MEMORY_PERCENT=559, MAX_OUTSTANDING_IO_PER_VOLUME=560, MAX_PLANS_PER_QUERY=561, 
		MAX_PROCESSES=562, MAX_QUEUE_READERS=563, MAX_ROLLOVER_FILES=564, MAX_SIZE=565, 
		MAX_STORAGE_SIZE_MB=566, MB=567, MEDIADESCRIPTION=568, MEDIANAME=569, 
		MEDIUM=570, MEMBER=571, MEMORY_OPTIMIZED_DATA=572, MEMORY_PARTITION_MODE=573, 
		MERGE=574, MESSAGE=575, MESSAGE_FORWARDING=576, MESSAGE_FORWARD_SIZE=577, 
		MIN=578, MINUTES=579, MINVALUE=580, MIN_ACTIVE_ROWVERSION=581, MIN_CPU_PERCENT=582, 
		MIN_IOPS_PER_VOLUME=583, MIN_MEMORY_PERCENT=584, MIRROR=585, MIRROR_ADDRESS=586, 
		MIXED_PAGE_ALLOCATION=587, MODE=588, MODIFY=589, MODIFY_SQUARE_BRACKET=590, 
		MOVE=591, MULTI_USER=592, MUST_CHANGE=593, NAME=594, NATIONAL=595, NCHAR=596, 
		NEGOTIATE=597, NESTED_TRIGGERS=598, NEWID=599, NEWNAME=600, NEWSEQUENTIALID=601, 
		NEW_ACCOUNT=602, NEW_BROKER=603, NEW_PASSWORD=604, NEXT=605, NO=606, NOCHECK=607, 
		NOCOUNT=608, NODES=609, NOEXEC=610, NOEXPAND=611, NOFORMAT=612, NOHOLDLOCK=613, 
		NOINDEX=614, NOINIT=615, NONCLUSTERED=616, NONE=617, NON_TRANSACTED_ACCESS=618, 
		NORECOMPUTE=619, NORECOVERY=620, NOREWIND=621, NOSKIP=622, NOT=623, NOTIFICATION=624, 
		NOTIFICATIONS=625, NOUNLOAD=626, NOWAIT=627, NO_CHECKSUM=628, NO_COMPRESSION=629, 
		NO_EVENT_LOSS=630, NO_INFOMSGS=631, NO_QUERYSTORE=632, NO_STATISTICS=633, 
		NO_TRUNCATE=634, NO_WAIT=635, NTILE=636, NTLM=637, NULLIF=638, NULL_=639, 
		NULL_DOUBLE_QUOTE=640, NUMANODE=641, NUMBER=642, NUMERIC_ROUNDABORT=643, 
		OBJECT=644, OBJECTPROPERTY=645, OBJECTPROPERTYEX=646, OBJECT_DEFINITION=647, 
		OBJECT_ID=648, OBJECT_NAME=649, OBJECT_SCHEMA_NAME=650, OF=651, OFF=652, 
		OFFLINE=653, OFFSET=654, OFFSETS=655, OLD_ACCOUNT=656, OLD_PASSWORD=657, 
		ON=658, ONLINE=659, ONLY=660, ON_FAILURE=661, OPEN=662, OPENDATASOURCE=663, 
		OPENJSON=664, OPENQUERY=665, OPENROWSET=666, OPENXML=667, OPEN_EXISTING=668, 
		OPERATIONS=669, OPERATION_MODE=670, OPTIMISTIC=671, OPTIMIZE=672, OPTIMIZE_FOR_SEQUENTIAL_KEY=673, 
		OPTION=674, OR=675, ORDER=676, ORIGINAL_DB_NAME=677, ORIGINAL_LOGIN=678, 
		OUT=679, OUTER=680, OUTPUT=681, OVER=682, OVERRIDE=683, OWNER=684, OWNERSHIP=685, 
		PAD_INDEX=686, PAGE=687, PAGECOUNT=688, PAGE_VERIFY=689, PAGLOCK=690, 
		PARAMETERIZATION=691, PARAM_NODE=692, PARSE=693, PARSENAME=694, PARSEONLY=695, 
		PARTIAL=696, PARTITION=697, PARTITIONS=698, PARTNER=699, PASSWORD=700, 
		PATH=701, PATINDEX=702, PAUSE=703, PDW_SHOWSPACEUSED=704, PERCENT=705, 
		PERCENTILE_CONT=706, PERCENTILE_DISC=707, PERCENT_RANK=708, PERMISSIONS=709, 
		PERMISSION_SET=710, PERSISTED=711, PERSIST_SAMPLE_PERCENT=712, PER_CPU=713, 
		PER_DB=714, PER_NODE=715, PHYSICAL_ONLY=716, PIVOT=717, PLAN=718, PLATFORM=719, 
		POISON_MESSAGE_HANDLING=720, POLICY=721, POOL=722, PORT=723, PRECEDING=724, 
		PRECISION=725, PREDICATE=726, PRIMARY=727, PRIMARY_ROLE=728, PRINT=729, 
		PRIOR=730, PRIORITY=731, PRIORITY_LEVEL=732, PRIVATE=733, PRIVATE_KEY=734, 
		PRIVILEGES=735, PROC=736, PROCCACHE=737, PROCEDURE=738, PROCEDURE_NAME=739, 
		PROCESS=740, PROFILE=741, PROPERTY=742, PROVIDER=743, PROVIDER_KEY_NAME=744, 
		PUBLIC=745, PWDCOMPARE=746, PWDENCRYPT=747, PYTHON=748, QUERY=749, QUERY_CAPTURE_MODE=750, 
		QUERY_SQUARE_BRACKET=751, QUERY_STORE=752, QUERYTRACEON=753, QUEUE=754, 
		QUEUE_DELAY=755, QUOTED_IDENTIFIER=756, QUOTENAME=757, R=758, RAISERROR=759, 
		RANDOMIZED=760, RANGE=761, RANK=762, RAW=763, RC2=764, RC4=765, RC4_128=766, 
		READ=767, READCOMMITTED=768, READCOMMITTEDLOCK=769, READONLY=770, READPAST=771, 
		READTEXT=772, READUNCOMMITTED=773, READWRITE=774, READ_COMMITTED_SNAPSHOT=775, 
		READ_ONLY=776, READ_ONLY_ROUTING_LIST=777, READ_WRITE=778, READ_WRITE_FILEGROUPS=779, 
		REBUILD=780, RECEIVE=781, RECOMPILE=782, RECONFIGURE=783, RECOVERY=784, 
		RECURSIVE_TRIGGERS=785, REFERENCES=786, REGENERATE=787, RELATED_CONVERSATION=788, 
		RELATED_CONVERSATION_GROUP=789, RELATIVE=790, REMOTE=791, REMOTE_PROC_TRANSACTIONS=792, 
		REMOTE_SERVICE_NAME=793, REMOVE=794, REORGANIZE=795, REPAIR_ALLOW_DATA_LOSS=796, 
		REPAIR_FAST=797, REPAIR_REBUILD=798, REPEATABLE=799, REPEATABLEREAD=800, 
		REPLACE=801, REPLICA=802, REPLICATE=803, REPLICATION=804, REQUEST_MAX_CPU_TIME_SEC=805, 
		REQUEST_MAX_MEMORY_GRANT_PERCENT=806, REQUEST_MEMORY_GRANT_TIMEOUT_SEC=807, 
		REQUIRED=808, REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT=809, RESAMPLE=810, 
		RESERVE_DISK_SPACE=811, RESET=812, RESOURCE=813, RESOURCES=814, RESOURCE_MANAGER_LOCATION=815, 
		RESTART=816, RESTORE=817, RESTRICT=818, RESTRICTED_USER=819, RESUMABLE=820, 
		RESUME=821, RETAINDAYS=822, RETENTION=823, RETURN=824, RETURNS=825, REVERSE=826, 
		REVERT=827, REVOKE=828, REWIND=829, RIGHT=830, ROBUST=831, ROLE=832, ROLLBACK=833, 
		ROOT=834, ROUND_ROBIN=835, ROUTE=836, ROW=837, ROWCOUNT=838, ROWCOUNT_BIG=839, 
		ROWGUID=840, ROWGUIDCOL=841, ROWS=842, ROW_NUMBER=843, RSA_1024=844, RSA_2048=845, 
		RSA_3072=846, RSA_4096=847, RSA_512=848, RTRIM=849, RULE=850, SAFE=851, 
		SAFETY=852, SAMPLE=853, SAVE=854, SCHEDULER=855, SCHEMA=856, SCHEMABINDING=857, 
		SCHEMA_ID=858, SCHEMA_NAME=859, SCHEME=860, SCOPED=861, SCOPE_IDENTITY=862, 
		SCRIPT=863, SCROLL=864, SCROLL_LOCKS=865, SEARCH=866, SECONDARY=867, SECONDARY_ONLY=868, 
		SECONDARY_ROLE=869, SECONDS=870, SECRET=871, SECURABLES=872, SECURITY=873, 
		SECURITYAUDIT=874, SECURITY_LOG=875, SEEDING_MODE=876, SELECT=877, SELF=878, 
		SEMANTICKEYPHRASETABLE=879, SEMANTICSIMILARITYDETAILSTABLE=880, SEMANTICSIMILARITYTABLE=881, 
		SEMI_SENSITIVE=882, SEND=883, SENT=884, SEQUENCE=885, SEQUENCE_NUMBER=886, 
		SERIALIZABLE=887, SERVER=888, SERVERPROPERTY=889, SERVICE=890, SERVICEBROKER=891, 
		SERVICE_BROKER=892, SERVICE_NAME=893, SERVICE_OBJECTIVE=894, SESSION=895, 
		SESSIONPROPERTY=896, SESSION_CONTEXT=897, SESSION_TIMEOUT=898, SESSION_USER=899, 
		SET=900, SETERROR=901, SETS=902, SETTINGS=903, SETUSER=904, SHARE=905, 
		SHARED=906, SHOWCONTIG=907, SHOWPLAN=908, SHOWPLAN_ALL=909, SHOWPLAN_TEXT=910, 
		SHOWPLAN_XML=911, SHRINKLOG=912, SHUTDOWN=913, SID=914, SIGNATURE=915, 
		SIMPLE=916, SINGLE_USER=917, SIZE=918, SIZE_BASED_CLEANUP_MODE=919, SKIP_KEYWORD=920, 
		SMALLINT=921, SNAPSHOT=922, SOFTNUMA=923, SOME=924, SORT_IN_TEMPDB=925, 
		SOUNDEX=926, SOURCE=927, SPACE_KEYWORD=928, SPARSE=929, SPATIAL_WINDOW_MAX_CELLS=930, 
		SPECIFICATION=931, SPLIT=932, SQL=933, SQLDUMPERFLAGS=934, SQLDUMPERPATH=935, 
		SQLDUMPERTIMEOUT=936, SQL_VARIANT_PROPERTY=937, STALE_QUERY_THRESHOLD_DAYS=938, 
		STANDBY=939, START=940, STARTED=941, STARTUP_STATE=942, START_DATE=943, 
		STATE=944, STATIC=945, STATISTICS=946, STATISTICS_INCREMENTAL=947, STATISTICS_NORECOMPUTE=948, 
		STATS=949, STATS_DATE=950, STATS_STREAM=951, STATUS=952, STATUSONLY=953, 
		STDEV=954, STDEVP=955, STOP=956, STOPLIST=957, STOPPED=958, STOP_ON_ERROR=959, 
		STR=960, STRING_AGG=961, STRING_ESCAPE=962, STUFF=963, SUBJECT=964, SUBSCRIBE=965, 
		SUBSCRIPTION=966, SUBSTRING=967, SUM=968, SUPPORTED=969, SUSER_ID=970, 
		SUSER_NAME=971, SUSER_SID=972, SUSER_SNAME=973, SUSPEND=974, SWITCH=975, 
		SYMMETRIC=976, SYNCHRONOUS_COMMIT=977, SYNONYM=978, SYSTEM=979, SYSTEM_USER=980, 
		TABLE=981, TABLERESULTS=982, TABLESAMPLE=983, TABLOCK=984, TABLOCKX=985, 
		TAKE=986, TAPE=987, TARGET=988, TARGET_RECOVERY_TIME=989, TB=990, TCP=991, 
		TEXTIMAGE_ON=992, TEXTSIZE=993, THEN=994, THROW=995, TIES=996, TIME=997, 
		TIMEOUT=998, TIMER=999, TINYINT=1000, TO=1001, TOP=1002, TORN_PAGE_DETECTION=1003, 
		TOSTRING=1004, TRACE=1005, TRACKING=1006, TRACK_CAUSALITY=1007, TRAN=1008, 
		TRANSACTION=1009, TRANSACTION_ID=1010, TRANSFER=1011, TRANSFORM_NOISE_WORDS=1012, 
		TRANSLATE=1013, TRIGGER=1014, TRIM=1015, TRIPLE_DES=1016, TRIPLE_DES_3KEY=1017, 
		TRUNCATE=1018, TRUSTWORTHY=1019, TRY=1020, TRY_CAST=1021, TSEQUAL=1022, 
		TSQL=1023, TWO_DIGIT_YEAR_CUTOFF=1024, TYPE=1025, TYPEPROPERTY=1026, TYPE_ID=1027, 
		TYPE_NAME=1028, TYPE_WARNING=1029, UNBOUNDED=1030, UNCHECKED=1031, UNCOMMITTED=1032, 
		UNICODE=1033, UNION=1034, UNIQUE=1035, UNKNOWN=1036, UNLIMITED=1037, UNLOCK=1038, 
		UNMASK=1039, UNPIVOT=1040, UNSAFE=1041, UOW=1042, UPDATE=1043, UPDATETEXT=1044, 
		UPPER=1045, URL=1046, USE=1047, USED=1048, USER=1049, USER_ID=1050, USER_NAME=1051, 
		USING=1052, VALIDATION=1053, VALID_XML=1054, VALUE=1055, VALUES=1056, 
		VALUE_SQUARE_BRACKET=1057, VAR=1058, VARBINARY_KEYWORD=1059, VARP=1060, 
		VARYING=1061, VERBOSELOGGING=1062, VERIFY_CLONEDB=1063, VERSION=1064, 
		VIEW=1065, VIEWS=1066, VIEW_METADATA=1067, VISIBILITY=1068, WAIT=1069, 
		WAITFOR=1070, WAIT_AT_LOW_PRIORITY=1071, WELL_FORMED_XML=1072, WAIT_STATS_CAPTURE_MODE=1073, 
		WHEN=1074, WHERE=1075, WHILE=1076, WINDOWS=1077, WITH=1078, WITHIN=1079, 
		WITHOUT=1080, WITHOUT_ARRAY_WRAPPER=1081, WITNESS=1082, WORK=1083, WORKLOAD=1084, 
		WRITETEXT=1085, XACT_ABORT=1086, XACT_STATE=1087, XLOCK=1088, XML=1089, 
		XMLDATA=1090, XMLNAMESPACES=1091, XMLSCHEMA=1092, XML_COMPRESSION=1093, 
		XSINIL=1094, ZONE=1095, ABS=1096, ACOS=1097, ASIN=1098, ATAN=1099, ATN2=1100, 
		CEILING=1101, COS=1102, COT=1103, DEGREES=1104, EXP=1105, FLOOR=1106, 
		LOG10=1107, PI=1108, POWER=1109, RADIANS=1110, RAND=1111, ROUND=1112, 
		SIGN=1113, SIN=1114, SQRT=1115, SQUARE=1116, TAN=1117, VARCHAR=1118, NVARCHAR=1119, 
		SPACE=1120, COMMENT=1121, LINE_COMMENT=1122, DOUBLE_QUOTE_ID=1123, SINGLE_QUOTE=1124, 
		SQUARE_BRACKET_ID=1125, LOCAL_ID=1126, DECIMAL=1127, ID=1128, STRING=1129, 
		BINARY=1130, FLOAT=1131, REAL=1132, EQUAL=1133, GREATER=1134, LESS=1135, 
		EXCLAMATION=1136, PLUS_ASSIGN=1137, MINUS_ASSIGN=1138, MULT_ASSIGN=1139, 
		DIV_ASSIGN=1140, MOD_ASSIGN=1141, AND_ASSIGN=1142, XOR_ASSIGN=1143, OR_ASSIGN=1144, 
		DOUBLE_BAR=1145, DOT=1146, UNDERLINE=1147, AT=1148, SHARP=1149, DOLLAR=1150, 
		LR_BRACKET=1151, RR_BRACKET=1152, LS_BRACKET=1153, RS_BRACKET=1154, COMMA=1155, 
		SEMI=1156, COLON=1157, DOUBLE_COLON=1158, STAR=1159, DIVIDE=1160, MODULE=1161, 
		PLUS=1162, MINUS=1163, BIT_NOT=1164, BIT_OR=1165, BIT_AND=1166, BIT_XOR=1167, 
		DISK_DRIVE=1168, IPV4_ADDR=1169, IPV6_ADDR=1170, NOEXEol=1171, DOLLAR_ACTION=1172, 
		PLACEHOLDER=1173, YEAR=1174, YEAR_ABBR=1175, QUARTER=1176, QUARTER_ABBR=1177, 
		MONTH=1178, MONTH_ABBR=1179, DAY=1180, DAY_ABBR=1181, WEEK=1182, WEEK_ABBR=1183, 
		HOUR=1184, HOUR_ABBR=1185, MINUTE=1186, MINUTE_ABBR=1187, SECOND=1188, 
		SECOND_ABBR=1189, MILLISECOND=1190, MILLISECOND_ABBR=1191, DAYOFYEAR=1192, 
		DAYOFYEAR_ABBR=1193, MICROSECOND=1194, MICROSECOND_ABBR=1195, NANOSECOND=1196, 
		NANOSECOND_ABBR=1197, WEEKDAY=1198, WEEKDAY_ABBR=1199, TZOFFSET=1200, 
		TZOFFSET_ABBR=1201, ISO_WEEK=1202, ISO_WEEK_ABBR=1203, DATABASEPROPERTYEX=1204, 
		NOLOCK=1205, ROWLOCK=1206, UPDLOCK=1207;
	public const int
		RULE_tsql_file = 0, RULE_batch = 1, RULE_batch_level_statement = 2, RULE_sql_clauses = 3, 
		RULE_dml_clause = 4, RULE_ddl_clause = 5, RULE_backup_statement = 6, RULE_cfl_statement = 7, 
		RULE_block_statement = 8, RULE_break_statement = 9, RULE_continue_statement = 10, 
		RULE_goto_statement = 11, RULE_return_statement = 12, RULE_if_statement = 13, 
		RULE_throw_statement = 14, RULE_throw_error_number = 15, RULE_throw_message = 16, 
		RULE_throw_state = 17, RULE_try_catch_statement = 18, RULE_waitfor_statement = 19, 
		RULE_while_statement = 20, RULE_print_statement = 21, RULE_raiseerror_statement = 22, 
		RULE_empty_statement = 23, RULE_another_statement = 24, RULE_alter_application_role = 25, 
		RULE_alter_xml_schema_collection = 26, RULE_create_application_role = 27, 
		RULE_drop_aggregate = 28, RULE_drop_application_role = 29, RULE_alter_assembly = 30, 
		RULE_alter_assembly_start = 31, RULE_alter_assembly_clause = 32, RULE_alter_assembly_from_clause = 33, 
		RULE_alter_assembly_from_clause_start = 34, RULE_alter_assembly_drop_clause = 35, 
		RULE_alter_assembly_drop_multiple_files = 36, RULE_alter_assembly_drop = 37, 
		RULE_alter_assembly_add_clause = 38, RULE_alter_asssembly_add_clause_start = 39, 
		RULE_alter_assembly_client_file_clause = 40, RULE_alter_assembly_file_name = 41, 
		RULE_alter_assembly_file_bits = 42, RULE_alter_assembly_as = 43, RULE_alter_assembly_with_clause = 44, 
		RULE_alter_assembly_with = 45, RULE_client_assembly_specifier = 46, RULE_assembly_option = 47, 
		RULE_network_file_share = 48, RULE_network_computer = 49, RULE_network_file_start = 50, 
		RULE_file_path = 51, RULE_file_directory_path_separator = 52, RULE_local_file = 53, 
		RULE_local_drive = 54, RULE_multiple_local_files = 55, RULE_multiple_local_file_start = 56, 
		RULE_create_assembly = 57, RULE_drop_assembly = 58, RULE_alter_asymmetric_key = 59, 
		RULE_alter_asymmetric_key_start = 60, RULE_asymmetric_key_option = 61, 
		RULE_asymmetric_key_option_start = 62, RULE_asymmetric_key_password_change_option = 63, 
		RULE_create_asymmetric_key = 64, RULE_drop_asymmetric_key = 65, RULE_alter_authorization = 66, 
		RULE_authorization_grantee = 67, RULE_entity_to = 68, RULE_colon_colon = 69, 
		RULE_alter_authorization_start = 70, RULE_alter_authorization_for_sql_database = 71, 
		RULE_alter_authorization_for_azure_dw = 72, RULE_alter_authorization_for_parallel_dw = 73, 
		RULE_class_type = 74, RULE_class_type_for_sql_database = 75, RULE_class_type_for_azure_dw = 76, 
		RULE_class_type_for_parallel_dw = 77, RULE_class_type_for_grant = 78, 
		RULE_drop_availability_group = 79, RULE_alter_availability_group = 80, 
		RULE_alter_availability_group_start = 81, RULE_alter_availability_group_options = 82, 
		RULE_ip_v4_failover = 83, RULE_ip_v6_failover = 84, RULE_create_or_alter_broker_priority = 85, 
		RULE_drop_broker_priority = 86, RULE_alter_certificate = 87, RULE_alter_column_encryption_key = 88, 
		RULE_create_column_encryption_key = 89, RULE_drop_certificate = 90, RULE_drop_column_encryption_key = 91, 
		RULE_drop_column_master_key = 92, RULE_drop_contract = 93, RULE_drop_credential = 94, 
		RULE_drop_cryptograhic_provider = 95, RULE_drop_database = 96, RULE_drop_database_audit_specification = 97, 
		RULE_drop_database_encryption_key = 98, RULE_drop_database_scoped_credential = 99, 
		RULE_drop_default = 100, RULE_drop_endpoint = 101, RULE_drop_external_data_source = 102, 
		RULE_drop_external_file_format = 103, RULE_drop_external_library = 104, 
		RULE_drop_external_resource_pool = 105, RULE_drop_external_table = 106, 
		RULE_drop_event_notifications = 107, RULE_drop_event_session = 108, RULE_drop_fulltext_catalog = 109, 
		RULE_drop_fulltext_index = 110, RULE_drop_fulltext_stoplist = 111, RULE_drop_login = 112, 
		RULE_drop_master_key = 113, RULE_drop_message_type = 114, RULE_drop_partition_function = 115, 
		RULE_drop_partition_scheme = 116, RULE_drop_queue = 117, RULE_drop_remote_service_binding = 118, 
		RULE_drop_resource_pool = 119, RULE_drop_db_role = 120, RULE_drop_route = 121, 
		RULE_drop_rule = 122, RULE_drop_schema = 123, RULE_drop_search_property_list = 124, 
		RULE_drop_security_policy = 125, RULE_drop_sequence = 126, RULE_drop_server_audit = 127, 
		RULE_drop_server_audit_specification = 128, RULE_drop_server_role = 129, 
		RULE_drop_service = 130, RULE_drop_signature = 131, RULE_drop_statistics_name_azure_dw_and_pdw = 132, 
		RULE_drop_symmetric_key = 133, RULE_drop_synonym = 134, RULE_drop_user = 135, 
		RULE_drop_workload_group = 136, RULE_drop_xml_schema_collection = 137, 
		RULE_disable_trigger = 138, RULE_enable_trigger = 139, RULE_lock_table = 140, 
		RULE_truncate_table = 141, RULE_create_column_master_key = 142, RULE_alter_credential = 143, 
		RULE_create_credential = 144, RULE_alter_cryptographic_provider = 145, 
		RULE_create_cryptographic_provider = 146, RULE_create_endpoint = 147, 
		RULE_endpoint_encryption_alogorithm_clause = 148, RULE_endpoint_authentication_clause = 149, 
		RULE_endpoint_listener_clause = 150, RULE_create_event_notification = 151, 
		RULE_create_or_alter_event_session = 152, RULE_event_session_predicate_expression = 153, 
		RULE_event_session_predicate_factor = 154, RULE_event_session_predicate_leaf = 155, 
		RULE_alter_external_data_source = 156, RULE_alter_external_library = 157, 
		RULE_create_external_library = 158, RULE_alter_external_resource_pool = 159, 
		RULE_create_external_resource_pool = 160, RULE_alter_fulltext_catalog = 161, 
		RULE_create_fulltext_catalog = 162, RULE_alter_fulltext_stoplist = 163, 
		RULE_create_fulltext_stoplist = 164, RULE_alter_login_sql_server = 165, 
		RULE_create_login_sql_server = 166, RULE_alter_login_azure_sql = 167, 
		RULE_create_login_azure_sql = 168, RULE_alter_login_azure_sql_dw_and_pdw = 169, 
		RULE_create_login_pdw = 170, RULE_alter_master_key_sql_server = 171, RULE_create_master_key_sql_server = 172, 
		RULE_alter_master_key_azure_sql = 173, RULE_create_master_key_azure_sql = 174, 
		RULE_alter_message_type = 175, RULE_alter_partition_function = 176, RULE_alter_partition_scheme = 177, 
		RULE_alter_remote_service_binding = 178, RULE_create_remote_service_binding = 179, 
		RULE_create_resource_pool = 180, RULE_alter_resource_governor = 181, RULE_alter_database_audit_specification = 182, 
		RULE_audit_action_spec_group = 183, RULE_audit_action_specification = 184, 
		RULE_action_specification = 185, RULE_audit_class_name = 186, RULE_audit_securable = 187, 
		RULE_alter_db_role = 188, RULE_create_database_audit_specification = 189, 
		RULE_create_db_role = 190, RULE_create_route = 191, RULE_create_rule = 192, 
		RULE_alter_schema_sql = 193, RULE_create_schema = 194, RULE_create_schema_azure_sql_dw_and_pdw = 195, 
		RULE_alter_schema_azure_sql_dw_and_pdw = 196, RULE_create_search_property_list = 197, 
		RULE_create_security_policy = 198, RULE_alter_sequence = 199, RULE_create_sequence = 200, 
		RULE_alter_server_audit = 201, RULE_create_server_audit = 202, RULE_alter_server_audit_specification = 203, 
		RULE_create_server_audit_specification = 204, RULE_alter_server_configuration = 205, 
		RULE_alter_server_role = 206, RULE_create_server_role = 207, RULE_alter_server_role_pdw = 208, 
		RULE_alter_service = 209, RULE_opt_arg_clause = 210, RULE_create_service = 211, 
		RULE_alter_service_master_key = 212, RULE_alter_symmetric_key = 213, RULE_create_synonym = 214, 
		RULE_alter_user = 215, RULE_create_user = 216, RULE_create_user_azure_sql_dw = 217, 
		RULE_alter_user_azure_sql = 218, RULE_alter_workload_group = 219, RULE_create_workload_group = 220, 
		RULE_create_xml_schema_collection = 221, RULE_create_partition_function = 222, 
		RULE_create_partition_scheme = 223, RULE_create_queue = 224, RULE_queue_settings = 225, 
		RULE_alter_queue = 226, RULE_queue_action = 227, RULE_queue_rebuild_options = 228, 
		RULE_create_contract = 229, RULE_conversation_statement = 230, RULE_message_statement = 231, 
		RULE_merge_statement = 232, RULE_when_matches = 233, RULE_merge_matched = 234, 
		RULE_merge_not_matched = 235, RULE_delete_statement = 236, RULE_delete_statement_from = 237, 
		RULE_insert_statement = 238, RULE_insert_statement_value = 239, RULE_receive_statement = 240, 
		RULE_select_statement_standalone = 241, RULE_select_statement = 242, RULE_time = 243, 
		RULE_update_statement = 244, RULE_output_clause = 245, RULE_output_dml_list_elem = 246, 
		RULE_create_database = 247, RULE_create_database_azure = 248, RULE_create_database_azure_options = 249, 
		RULE_create_index = 250, RULE_create_index_options = 251, RULE_relational_index_option = 252, 
		RULE_alter_index = 253, RULE_resumable_index_options = 254, RULE_resumable_index_option = 255, 
		RULE_reorganize_partition = 256, RULE_reorganize_options = 257, RULE_reorganize_option = 258, 
		RULE_set_index_options = 259, RULE_set_index_option = 260, RULE_rebuild_partition = 261, 
		RULE_rebuild_index_options = 262, RULE_rebuild_index_option = 263, RULE_single_partition_rebuild_index_options = 264, 
		RULE_single_partition_rebuild_index_option = 265, RULE_on_partitions = 266, 
		RULE_create_columnstore_index = 267, RULE_create_columnstore_index_options = 268, 
		RULE_columnstore_index_option = 269, RULE_create_nonclustered_columnstore_index = 270, 
		RULE_create_xml_index = 271, RULE_xml_index_options = 272, RULE_xml_index_option = 273, 
		RULE_create_or_alter_procedure = 274, RULE_as_external_name = 275, RULE_create_or_alter_trigger = 276, 
		RULE_create_or_alter_dml_trigger = 277, RULE_dml_trigger_option = 278, 
		RULE_dml_trigger_operation = 279, RULE_create_or_alter_ddl_trigger = 280, 
		RULE_ddl_trigger_operation = 281, RULE_create_or_alter_function = 282, 
		RULE_func_body_returns_select = 283, RULE_func_body_returns_table = 284, 
		RULE_func_body_returns_scalar = 285, RULE_procedure_param_default_value = 286, 
		RULE_procedure_param = 287, RULE_procedure_option = 288, RULE_function_option = 289, 
		RULE_partition_with = 290, RULE_create_statistics = 291, RULE_update_statistics = 292, 
		RULE_update_statistics_options = 293, RULE_update_statistics_option = 294, 
		RULE_create_table = 295, RULE_table_indices = 296, RULE_table_options = 297, 
		RULE_table_option = 298, RULE_create_table_index_options = 299, RULE_create_table_index_option = 300, 
		RULE_create_view = 301, RULE_view_attribute = 302, RULE_alter_table = 303, 
		RULE_switch_partition = 304, RULE_low_priority_lock_wait = 305, RULE_alter_database = 306, 
		RULE_add_or_modify_files = 307, RULE_filespec = 308, RULE_add_or_modify_filegroups = 309, 
		RULE_filegroup_updatability_option = 310, RULE_database_optionspec = 311, 
		RULE_query_store_options = 312, RULE_query_store_options_Azure = 313, 
		RULE_query_store_option_Azure = 314, RULE_auto_option = 315, RULE_change_tracking_option = 316, 
		RULE_change_tracking_option_list = 317, RULE_containment_option = 318, 
		RULE_cursor_option = 319, RULE_alter_endpoint = 320, RULE_database_mirroring_option = 321, 
		RULE_mirroring_set_option = 322, RULE_mirroring_partner = 323, RULE_mirroring_witness = 324, 
		RULE_witness_partner_equal = 325, RULE_partner_option = 326, RULE_witness_option = 327, 
		RULE_witness_server = 328, RULE_partner_server = 329, RULE_mirroring_host_port_seperator = 330, 
		RULE_partner_server_tcp_prefix = 331, RULE_port_number = 332, RULE_host = 333, 
		RULE_date_correlation_optimization_option = 334, RULE_db_encryption_option = 335, 
		RULE_db_state_option = 336, RULE_db_update_option = 337, RULE_db_user_access_option = 338, 
		RULE_delayed_durability_option = 339, RULE_external_access_option = 340, 
		RULE_hadr_options = 341, RULE_mixed_page_allocation_option = 342, RULE_parameterization_option = 343, 
		RULE_recovery_option = 344, RULE_service_broker_option = 345, RULE_snapshot_option = 346, 
		RULE_sql_option = 347, RULE_target_recovery_time_option = 348, RULE_termination = 349, 
		RULE_drop_index = 350, RULE_drop_relational_or_xml_or_spatial_index = 351, 
		RULE_drop_backward_compatible_index = 352, RULE_drop_procedure = 353, 
		RULE_drop_trigger = 354, RULE_drop_dml_trigger = 355, RULE_drop_ddl_trigger = 356, 
		RULE_drop_function = 357, RULE_drop_statistics = 358, RULE_drop_table = 359, 
		RULE_drop_view = 360, RULE_create_type = 361, RULE_drop_type = 362, RULE_rowset_function_limited = 363, 
		RULE_openquery = 364, RULE_opendatasource = 365, RULE_declare_statement = 366, 
		RULE_xml_declaration = 367, RULE_cursor_statement = 368, RULE_backup_database = 369, 
		RULE_backup_log = 370, RULE_backup_certificate = 371, RULE_backup_master_key = 372, 
		RULE_backup_service_master_key = 373, RULE_kill_statement = 374, RULE_kill_process = 375, 
		RULE_kill_query_notification = 376, RULE_kill_stats_job = 377, RULE_execute_statement = 378, 
		RULE_execute_body_batch = 379, RULE_execute_body = 380, RULE_execute_statement_arg = 381, 
		RULE_execute_statement_arg_named = 382, RULE_execute_statement_arg_unnamed = 383, 
		RULE_execute_parameter = 384, RULE_execute_var_string = 385, RULE_security_statement = 386, 
		RULE_principal_id = 387, RULE_create_certificate = 388, RULE_existing_keys = 389, 
		RULE_private_key_options = 390, RULE_generate_new_keys = 391, RULE_date_options = 392, 
		RULE_open_key = 393, RULE_close_key = 394, RULE_create_key = 395, RULE_key_options = 396, 
		RULE_algorithm = 397, RULE_encryption_mechanism = 398, RULE_decryption_mechanism = 399, 
		RULE_grant_permission = 400, RULE_set_statement = 401, RULE_transaction_statement = 402, 
		RULE_go_batch_statement = 403, RULE_go_statement = 404, RULE_use_statement = 405, 
		RULE_setuser_statement = 406, RULE_reconfigure_statement = 407, RULE_shutdown_statement = 408, 
		RULE_checkpoint_statement = 409, RULE_dbcc_checkalloc_option = 410, RULE_dbcc_checkalloc = 411, 
		RULE_dbcc_checkcatalog = 412, RULE_dbcc_checkconstraints_option = 413, 
		RULE_dbcc_checkconstraints = 414, RULE_dbcc_checkdb_table_option = 415, 
		RULE_dbcc_checkdb = 416, RULE_dbcc_checkfilegroup_option = 417, RULE_dbcc_checkfilegroup = 418, 
		RULE_dbcc_checktable = 419, RULE_dbcc_cleantable = 420, RULE_dbcc_clonedatabase_option = 421, 
		RULE_dbcc_clonedatabase = 422, RULE_dbcc_pdw_showspaceused = 423, RULE_dbcc_proccache = 424, 
		RULE_dbcc_showcontig_option = 425, RULE_dbcc_showcontig = 426, RULE_dbcc_shrinklog = 427, 
		RULE_dbcc_dbreindex = 428, RULE_dbcc_dll_free = 429, RULE_dbcc_dropcleanbuffers = 430, 
		RULE_dbcc_clause = 431, RULE_execute_clause = 432, RULE_declare_local = 433, 
		RULE_table_type_definition = 434, RULE_table_type_indices = 435, RULE_xml_type_definition = 436, 
		RULE_xml_schema_collection = 437, RULE_column_def_table_constraints = 438, 
		RULE_column_def_table_constraint = 439, RULE_column_definition = 440, 
		RULE_column_definition_element = 441, RULE_column_modifier = 442, RULE_materialized_column_definition = 443, 
		RULE_column_constraint = 444, RULE_column_index = 445, RULE_on_partition_or_filegroup = 446, 
		RULE_table_constraint = 447, RULE_default_value_columns = 448, RULE_connection_node = 449, 
		RULE_primary_key_options = 450, RULE_foreign_key_options = 451, RULE_check_constraint = 452, 
		RULE_on_delete = 453, RULE_on_update = 454, RULE_alter_table_index_options = 455, 
		RULE_index_options = 456, RULE_index_option = 457, RULE_alter_table_index_option = 458, 
		RULE_declare_cursor = 459, RULE_declare_set_cursor_common = 460, RULE_declare_set_cursor_common_partial = 461, 
		RULE_fetch_cursor = 462, RULE_set_special = 463, RULE_special_list = 464, 
		RULE_constant_LOCAL_ID = 465, RULE_expression = 466, RULE_parameter = 467, 
		RULE_time_zone = 468, RULE_primitive_expression = 469, RULE_case_expression = 470, 
		RULE_unary_operator_expression = 471, RULE_bracket_expression = 472, RULE_constant_expression = 473, 
		RULE_subquery = 474, RULE_with_expression = 475, RULE_common_table_expression = 476, 
		RULE_update_elem = 477, RULE_update_elem_merge = 478, RULE_search_condition = 479, 
		RULE_predicate = 480, RULE_query_expression = 481, RULE_sql_union = 482, 
		RULE_query_specification = 483, RULE_top_clause = 484, RULE_top_percent = 485, 
		RULE_top_count = 486, RULE_order_by_clause = 487, RULE_for_clause = 488, 
		RULE_xml_common_directives = 489, RULE_order_by_expression = 490, RULE_group_by_item = 491, 
		RULE_option_clause = 492, RULE_option = 493, RULE_optimize_for_arg = 494, 
		RULE_select_list = 495, RULE_udt_method_arguments = 496, RULE_asterisk = 497, 
		RULE_column_elem = 498, RULE_udt_elem = 499, RULE_expression_elem = 500, 
		RULE_select_list_elem = 501, RULE_table_sources = 502, RULE_table_source = 503, 
		RULE_table_source_item_joined = 504, RULE_table_source_item = 505, RULE_open_xml = 506, 
		RULE_open_json = 507, RULE_json_declaration = 508, RULE_json_column_declaration = 509, 
		RULE_schema_declaration = 510, RULE_column_declaration = 511, RULE_change_table = 512, 
		RULE_change_table_changes = 513, RULE_change_table_version = 514, RULE_join_part = 515, 
		RULE_join_on = 516, RULE_cross_join = 517, RULE_apply_ = 518, RULE_pivot = 519, 
		RULE_unpivot = 520, RULE_pivot_clause = 521, RULE_unpivot_clause = 522, 
		RULE_full_column_name_list = 523, RULE_table_name_with_hint = 524, RULE_rowset_function = 525, 
		RULE_bulk_option = 526, RULE_derived_table = 527, RULE_function_call = 528, 
		RULE_partition_function = 529, RULE_freetext_function = 530, RULE_freetext_predicate = 531, 
		RULE_built_in_functions = 532, RULE_xml_data_type_methods = 533, RULE_dateparts_9 = 534, 
		RULE_dateparts_12 = 535, RULE_dateparts_15 = 536, RULE_dateparts_datetrunc = 537, 
		RULE_value_method = 538, RULE_value_call = 539, RULE_query_method = 540, 
		RULE_query_call = 541, RULE_exist_method = 542, RULE_exist_call = 543, 
		RULE_modify_method = 544, RULE_modify_call = 545, RULE_hierarchyid_call = 546, 
		RULE_hierarchyid_static_method = 547, RULE_nodes_method = 548, RULE_switch_section = 549, 
		RULE_switch_search_condition_section = 550, RULE_as_column_alias = 551, 
		RULE_as_table_alias = 552, RULE_table_alias = 553, RULE_with_table_hints = 554, 
		RULE_deprecated_table_hint = 555, RULE_sybase_legacy_hints = 556, RULE_sybase_legacy_hint = 557, 
		RULE_insert_with_table_hints = 558, RULE_table_hint = 559, RULE_index_value = 560, 
		RULE_column_alias_list = 561, RULE_column_alias = 562, RULE_table_value_constructor = 563, 
		RULE_expression_list_ = 564, RULE_ranking_windowed_function = 565, RULE_aggregate_windowed_function = 566, 
		RULE_analytic_windowed_function = 567, RULE_all_distinct_expression = 568, 
		RULE_over_clause = 569, RULE_row_or_range_clause = 570, RULE_window_frame_extent = 571, 
		RULE_window_frame_bound = 572, RULE_window_frame_preceding = 573, RULE_window_frame_following = 574, 
		RULE_create_database_option = 575, RULE_database_filestream_option = 576, 
		RULE_database_file_spec = 577, RULE_file_group = 578, RULE_file_spec = 579, 
		RULE_entity_name = 580, RULE_entity_name_for_azure_dw = 581, RULE_entity_name_for_parallel_dw = 582, 
		RULE_full_table_name = 583, RULE_table_name = 584, RULE_simple_name = 585, 
		RULE_func_proc_name_schema = 586, RULE_func_proc_name_database_schema = 587, 
		RULE_func_proc_name_server_database_schema = 588, RULE_ddl_object = 589, 
		RULE_full_column_name = 590, RULE_column_name_list_with_order = 591, RULE_insert_column_name_list = 592, 
		RULE_insert_column_id = 593, RULE_column_name_list = 594, RULE_cursor_name = 595, 
		RULE_on_off = 596, RULE_clustered = 597, RULE_null_notnull = 598, RULE_null_or_default = 599, 
		RULE_scalar_function_name = 600, RULE_begin_conversation_timer = 601, 
		RULE_begin_conversation_dialog = 602, RULE_contract_name = 603, RULE_service_name = 604, 
		RULE_end_conversation = 605, RULE_waitfor_conversation = 606, RULE_get_conversation = 607, 
		RULE_queue_id = 608, RULE_send_conversation = 609, RULE_data_type = 610, 
		RULE_default_value = 611, RULE_constant = 612, RULE_sign = 613, RULE_primitive_constant = 614, 
		RULE_keyword = 615, RULE_id_ = 616, RULE_simple_id = 617, RULE_id_or_string = 618, 
		RULE_comparison_operator = 619, RULE_assignment_operator = 620, RULE_file_size = 621;
	public static readonly string[] ruleNames = {
		"tsql_file", "batch", "batch_level_statement", "sql_clauses", "dml_clause", 
		"ddl_clause", "backup_statement", "cfl_statement", "block_statement", 
		"break_statement", "continue_statement", "goto_statement", "return_statement", 
		"if_statement", "throw_statement", "throw_error_number", "throw_message", 
		"throw_state", "try_catch_statement", "waitfor_statement", "while_statement", 
		"print_statement", "raiseerror_statement", "empty_statement", "another_statement", 
		"alter_application_role", "alter_xml_schema_collection", "create_application_role", 
		"drop_aggregate", "drop_application_role", "alter_assembly", "alter_assembly_start", 
		"alter_assembly_clause", "alter_assembly_from_clause", "alter_assembly_from_clause_start", 
		"alter_assembly_drop_clause", "alter_assembly_drop_multiple_files", "alter_assembly_drop", 
		"alter_assembly_add_clause", "alter_asssembly_add_clause_start", "alter_assembly_client_file_clause", 
		"alter_assembly_file_name", "alter_assembly_file_bits", "alter_assembly_as", 
		"alter_assembly_with_clause", "alter_assembly_with", "client_assembly_specifier", 
		"assembly_option", "network_file_share", "network_computer", "network_file_start", 
		"file_path", "file_directory_path_separator", "local_file", "local_drive", 
		"multiple_local_files", "multiple_local_file_start", "create_assembly", 
		"drop_assembly", "alter_asymmetric_key", "alter_asymmetric_key_start", 
		"asymmetric_key_option", "asymmetric_key_option_start", "asymmetric_key_password_change_option", 
		"create_asymmetric_key", "drop_asymmetric_key", "alter_authorization", 
		"authorization_grantee", "entity_to", "colon_colon", "alter_authorization_start", 
		"alter_authorization_for_sql_database", "alter_authorization_for_azure_dw", 
		"alter_authorization_for_parallel_dw", "class_type", "class_type_for_sql_database", 
		"class_type_for_azure_dw", "class_type_for_parallel_dw", "class_type_for_grant", 
		"drop_availability_group", "alter_availability_group", "alter_availability_group_start", 
		"alter_availability_group_options", "ip_v4_failover", "ip_v6_failover", 
		"create_or_alter_broker_priority", "drop_broker_priority", "alter_certificate", 
		"alter_column_encryption_key", "create_column_encryption_key", "drop_certificate", 
		"drop_column_encryption_key", "drop_column_master_key", "drop_contract", 
		"drop_credential", "drop_cryptograhic_provider", "drop_database", "drop_database_audit_specification", 
		"drop_database_encryption_key", "drop_database_scoped_credential", "drop_default", 
		"drop_endpoint", "drop_external_data_source", "drop_external_file_format", 
		"drop_external_library", "drop_external_resource_pool", "drop_external_table", 
		"drop_event_notifications", "drop_event_session", "drop_fulltext_catalog", 
		"drop_fulltext_index", "drop_fulltext_stoplist", "drop_login", "drop_master_key", 
		"drop_message_type", "drop_partition_function", "drop_partition_scheme", 
		"drop_queue", "drop_remote_service_binding", "drop_resource_pool", "drop_db_role", 
		"drop_route", "drop_rule", "drop_schema", "drop_search_property_list", 
		"drop_security_policy", "drop_sequence", "drop_server_audit", "drop_server_audit_specification", 
		"drop_server_role", "drop_service", "drop_signature", "drop_statistics_name_azure_dw_and_pdw", 
		"drop_symmetric_key", "drop_synonym", "drop_user", "drop_workload_group", 
		"drop_xml_schema_collection", "disable_trigger", "enable_trigger", "lock_table", 
		"truncate_table", "create_column_master_key", "alter_credential", "create_credential", 
		"alter_cryptographic_provider", "create_cryptographic_provider", "create_endpoint", 
		"endpoint_encryption_alogorithm_clause", "endpoint_authentication_clause", 
		"endpoint_listener_clause", "create_event_notification", "create_or_alter_event_session", 
		"event_session_predicate_expression", "event_session_predicate_factor", 
		"event_session_predicate_leaf", "alter_external_data_source", "alter_external_library", 
		"create_external_library", "alter_external_resource_pool", "create_external_resource_pool", 
		"alter_fulltext_catalog", "create_fulltext_catalog", "alter_fulltext_stoplist", 
		"create_fulltext_stoplist", "alter_login_sql_server", "create_login_sql_server", 
		"alter_login_azure_sql", "create_login_azure_sql", "alter_login_azure_sql_dw_and_pdw", 
		"create_login_pdw", "alter_master_key_sql_server", "create_master_key_sql_server", 
		"alter_master_key_azure_sql", "create_master_key_azure_sql", "alter_message_type", 
		"alter_partition_function", "alter_partition_scheme", "alter_remote_service_binding", 
		"create_remote_service_binding", "create_resource_pool", "alter_resource_governor", 
		"alter_database_audit_specification", "audit_action_spec_group", "audit_action_specification", 
		"action_specification", "audit_class_name", "audit_securable", "alter_db_role", 
		"create_database_audit_specification", "create_db_role", "create_route", 
		"create_rule", "alter_schema_sql", "create_schema", "create_schema_azure_sql_dw_and_pdw", 
		"alter_schema_azure_sql_dw_and_pdw", "create_search_property_list", "create_security_policy", 
		"alter_sequence", "create_sequence", "alter_server_audit", "create_server_audit", 
		"alter_server_audit_specification", "create_server_audit_specification", 
		"alter_server_configuration", "alter_server_role", "create_server_role", 
		"alter_server_role_pdw", "alter_service", "opt_arg_clause", "create_service", 
		"alter_service_master_key", "alter_symmetric_key", "create_synonym", "alter_user", 
		"create_user", "create_user_azure_sql_dw", "alter_user_azure_sql", "alter_workload_group", 
		"create_workload_group", "create_xml_schema_collection", "create_partition_function", 
		"create_partition_scheme", "create_queue", "queue_settings", "alter_queue", 
		"queue_action", "queue_rebuild_options", "create_contract", "conversation_statement", 
		"message_statement", "merge_statement", "when_matches", "merge_matched", 
		"merge_not_matched", "delete_statement", "delete_statement_from", "insert_statement", 
		"insert_statement_value", "receive_statement", "select_statement_standalone", 
		"select_statement", "time", "update_statement", "output_clause", "output_dml_list_elem", 
		"create_database", "create_database_azure", "create_database_azure_options", 
		"create_index", "create_index_options", "relational_index_option", "alter_index", 
		"resumable_index_options", "resumable_index_option", "reorganize_partition", 
		"reorganize_options", "reorganize_option", "set_index_options", "set_index_option", 
		"rebuild_partition", "rebuild_index_options", "rebuild_index_option", 
		"single_partition_rebuild_index_options", "single_partition_rebuild_index_option", 
		"on_partitions", "create_columnstore_index", "create_columnstore_index_options", 
		"columnstore_index_option", "create_nonclustered_columnstore_index", "create_xml_index", 
		"xml_index_options", "xml_index_option", "create_or_alter_procedure", 
		"as_external_name", "create_or_alter_trigger", "create_or_alter_dml_trigger", 
		"dml_trigger_option", "dml_trigger_operation", "create_or_alter_ddl_trigger", 
		"ddl_trigger_operation", "create_or_alter_function", "func_body_returns_select", 
		"func_body_returns_table", "func_body_returns_scalar", "procedure_param_default_value", 
		"procedure_param", "procedure_option", "function_option", "partition_with", 
		"create_statistics", "update_statistics", "update_statistics_options", 
		"update_statistics_option", "create_table", "table_indices", "table_options", 
		"table_option", "create_table_index_options", "create_table_index_option", 
		"create_view", "view_attribute", "alter_table", "switch_partition", "low_priority_lock_wait", 
		"alter_database", "add_or_modify_files", "filespec", "add_or_modify_filegroups", 
		"filegroup_updatability_option", "database_optionspec", "query_store_options", 
		"query_store_options_Azure", "query_store_option_Azure", "auto_option", 
		"change_tracking_option", "change_tracking_option_list", "containment_option", 
		"cursor_option", "alter_endpoint", "database_mirroring_option", "mirroring_set_option", 
		"mirroring_partner", "mirroring_witness", "witness_partner_equal", "partner_option", 
		"witness_option", "witness_server", "partner_server", "mirroring_host_port_seperator", 
		"partner_server_tcp_prefix", "port_number", "host", "date_correlation_optimization_option", 
		"db_encryption_option", "db_state_option", "db_update_option", "db_user_access_option", 
		"delayed_durability_option", "external_access_option", "hadr_options", 
		"mixed_page_allocation_option", "parameterization_option", "recovery_option", 
		"service_broker_option", "snapshot_option", "sql_option", "target_recovery_time_option", 
		"termination", "drop_index", "drop_relational_or_xml_or_spatial_index", 
		"drop_backward_compatible_index", "drop_procedure", "drop_trigger", "drop_dml_trigger", 
		"drop_ddl_trigger", "drop_function", "drop_statistics", "drop_table", 
		"drop_view", "create_type", "drop_type", "rowset_function_limited", "openquery", 
		"opendatasource", "declare_statement", "xml_declaration", "cursor_statement", 
		"backup_database", "backup_log", "backup_certificate", "backup_master_key", 
		"backup_service_master_key", "kill_statement", "kill_process", "kill_query_notification", 
		"kill_stats_job", "execute_statement", "execute_body_batch", "execute_body", 
		"execute_statement_arg", "execute_statement_arg_named", "execute_statement_arg_unnamed", 
		"execute_parameter", "execute_var_string", "security_statement", "principal_id", 
		"create_certificate", "existing_keys", "private_key_options", "generate_new_keys", 
		"date_options", "open_key", "close_key", "create_key", "key_options", 
		"algorithm", "encryption_mechanism", "decryption_mechanism", "grant_permission", 
		"set_statement", "transaction_statement", "go_batch_statement", "go_statement", 
		"use_statement", "setuser_statement", "reconfigure_statement", "shutdown_statement", 
		"checkpoint_statement", "dbcc_checkalloc_option", "dbcc_checkalloc", "dbcc_checkcatalog", 
		"dbcc_checkconstraints_option", "dbcc_checkconstraints", "dbcc_checkdb_table_option", 
		"dbcc_checkdb", "dbcc_checkfilegroup_option", "dbcc_checkfilegroup", "dbcc_checktable", 
		"dbcc_cleantable", "dbcc_clonedatabase_option", "dbcc_clonedatabase", 
		"dbcc_pdw_showspaceused", "dbcc_proccache", "dbcc_showcontig_option", 
		"dbcc_showcontig", "dbcc_shrinklog", "dbcc_dbreindex", "dbcc_dll_free", 
		"dbcc_dropcleanbuffers", "dbcc_clause", "execute_clause", "declare_local", 
		"table_type_definition", "table_type_indices", "xml_type_definition", 
		"xml_schema_collection", "column_def_table_constraints", "column_def_table_constraint", 
		"column_definition", "column_definition_element", "column_modifier", "materialized_column_definition", 
		"column_constraint", "column_index", "on_partition_or_filegroup", "table_constraint", 
		"default_value_columns", "connection_node", "primary_key_options", "foreign_key_options", 
		"check_constraint", "on_delete", "on_update", "alter_table_index_options", 
		"index_options", "index_option", "alter_table_index_option", "declare_cursor", 
		"declare_set_cursor_common", "declare_set_cursor_common_partial", "fetch_cursor", 
		"set_special", "special_list", "constant_LOCAL_ID", "expression", "parameter", 
		"time_zone", "primitive_expression", "case_expression", "unary_operator_expression", 
		"bracket_expression", "constant_expression", "subquery", "with_expression", 
		"common_table_expression", "update_elem", "update_elem_merge", "search_condition", 
		"predicate", "query_expression", "sql_union", "query_specification", "top_clause", 
		"top_percent", "top_count", "order_by_clause", "for_clause", "xml_common_directives", 
		"order_by_expression", "group_by_item", "option_clause", "option", "optimize_for_arg", 
		"select_list", "udt_method_arguments", "asterisk", "column_elem", "udt_elem", 
		"expression_elem", "select_list_elem", "table_sources", "table_source", 
		"table_source_item_joined", "table_source_item", "open_xml", "open_json", 
		"json_declaration", "json_column_declaration", "schema_declaration", "column_declaration", 
		"change_table", "change_table_changes", "change_table_version", "join_part", 
		"join_on", "cross_join", "apply_", "pivot", "unpivot", "pivot_clause", 
		"unpivot_clause", "full_column_name_list", "table_name_with_hint", "rowset_function", 
		"bulk_option", "derived_table", "function_call", "partition_function", 
		"freetext_function", "freetext_predicate", "built_in_functions", "xml_data_type_methods", 
		"dateparts_9", "dateparts_12", "dateparts_15", "dateparts_datetrunc", 
		"value_method", "value_call", "query_method", "query_call", "exist_method", 
		"exist_call", "modify_method", "modify_call", "hierarchyid_call", "hierarchyid_static_method", 
		"nodes_method", "switch_section", "switch_search_condition_section", "as_column_alias", 
		"as_table_alias", "table_alias", "with_table_hints", "deprecated_table_hint", 
		"sybase_legacy_hints", "sybase_legacy_hint", "insert_with_table_hints", 
		"table_hint", "index_value", "column_alias_list", "column_alias", "table_value_constructor", 
		"expression_list_", "ranking_windowed_function", "aggregate_windowed_function", 
		"analytic_windowed_function", "all_distinct_expression", "over_clause", 
		"row_or_range_clause", "window_frame_extent", "window_frame_bound", "window_frame_preceding", 
		"window_frame_following", "create_database_option", "database_filestream_option", 
		"database_file_spec", "file_group", "file_spec", "entity_name", "entity_name_for_azure_dw", 
		"entity_name_for_parallel_dw", "full_table_name", "table_name", "simple_name", 
		"func_proc_name_schema", "func_proc_name_database_schema", "func_proc_name_server_database_schema", 
		"ddl_object", "full_column_name", "column_name_list_with_order", "insert_column_name_list", 
		"insert_column_id", "column_name_list", "cursor_name", "on_off", "clustered", 
		"null_notnull", "null_or_default", "scalar_function_name", "begin_conversation_timer", 
		"begin_conversation_dialog", "contract_name", "service_name", "end_conversation", 
		"waitfor_conversation", "get_conversation", "queue_id", "send_conversation", 
		"data_type", "default_value", "constant", "sign", "primitive_constant", 
		"keyword", "id_", "simple_id", "id_or_string", "comparison_operator", 
		"assignment_operator", "file_size"
	};

	private static readonly string[] _LiteralNames = {
		null, "'ABORT'", "'ABORT_AFTER_WAIT'", "'ABSENT'", "'ABSOLUTE'", "'ACCELERATED_DATABASE_RECOVERY'", 
		"'ACCENT_SENSITIVITY'", "'ACCESS'", "'ACTION'", "'ACTIVATION'", "'ACTIVE'", 
		"'ADD'", "'ADDRESS'", "'ADMINISTER'", "'AES'", "'AES_128'", "'AES_192'", 
		"'AES_256'", "'AFFINITY'", "'AFTER'", "'AGGREGATE'", "'ALGORITHM'", "'ALL'", 
		"'ALLOWED'", "'ALLOW_CONNECTIONS'", "'ALLOW_ENCRYPTED_VALUE_MODIFICATIONS'", 
		"'ALLOW_MULTIPLE_EVENT_LOSS'", "'ALLOW_PAGE_LOCKS'", "'ALLOW_ROW_LOCKS'", 
		"'ALLOW_SINGLE_EVENT_LOSS'", "'ALLOW_SNAPSHOT_ISOLATION'", "'ALL_CONSTRAINTS'", 
		"'ALL_ERRORMSGS'", "'ALL_INDEXES'", "'ALL_LEVELS'", "'ALTER'", "'ALWAYS'", 
		"'AND'", "'ANONYMOUS'", "'ANSI_DEFAULTS'", "'ANSI_NULLS'", "'ANSI_NULL_DEFAULT'", 
		"'ANSI_NULL_DFLT_OFF'", "'ANSI_NULL_DFLT_ON'", "'ANSI_PADDING'", "'ANSI_WARNINGS'", 
		"'ANY'", "'APPEND'", "'APPLICATION'", "'APPLICATION_LOG'", "'APPLOCK_MODE'", 
		"'APPLOCK_TEST'", "'APPLY'", "'APP_NAME'", "'ARITHABORT'", "'ARITHIGNORE'", 
		"'AS'", "'ASC'", "'ASCII'", "'ASSEMBLY'", "'ASSEMBLYPROPERTY'", "'ASYMMETRIC'", 
		"'ASYNCHRONOUS_COMMIT'", "'AT'", "'AUDIT'", "'AUDIT_GUID'", "'AUTHENTICATE'", 
		"'AUTHENTICATION'", "'AUTHORIZATION'", "'AUTO'", "'AUTOGROW_ALL_FILES'", 
		"'AUTOGROW_SINGLE_FILE'", "'AUTOMATED_BACKUP_PREFERENCE'", "'AUTOMATIC'", 
		"'AUTO_CLEANUP'", "'AUTO_CLOSE'", "'AUTO_CREATE_STATISTICS'", "'AUTO_DROP'", 
		"'AUTO_SHRINK'", "'AUTO_UPDATE_STATISTICS'", "'AUTO_UPDATE_STATISTICS_ASYNC'", 
		"'AVAILABILITY'", "'AVAILABILITY_MODE'", "'AVG'", "'\\'", "'BACKUP'", 
		"'BACKUP_CLONEDB'", "'BACKUP_PRIORITY'", "'BASE64'", "'BEFORE'", "'BEGIN'", 
		"'BEGIN_DIALOG'", "'BETWEEN'", "'BIGINT'", "'BINARY BASE64'", "'BINARY_CHECKSUM'", 
		"'BINARY'", "'BINDING'", "'BLOB_STORAGE'", "'BLOCK'", "'BLOCKERS'", "'BLOCKING_HIERARCHY'", 
		"'BLOCKSIZE'", "'BREAK'", "'BROKER'", "'BROKER_INSTANCE'", "'BROWSE'", 
		"'BUFFER'", "'BUFFERCOUNT'", "'BULK'", "'BULK_LOGGED'", "'BY'", "'CACHE'", 
		"'CALLED'", "'CALLER'", "'CAP_CPU_PERCENT'", "'CASCADE'", "'CASE'", "'CAST'", 
		"'CATALOG'", "'CATALOG_COLLATION'", "'CATCH'", "'CERTENCODED'", "'CERTIFICATE'", 
		"'CERTPRIVATEKEY'", "'CERT_ID'", "'CHANGE'", "'CHANGES'", "'CHANGETABLE'", 
		"'CHANGE_RETENTION'", "'CHANGE_TRACKING'", "'CHAR'", "'CHARINDEX'", "'CHECK'", 
		"'CHECKALLOC'", "'CHECKCATALOG'", "'CHECKCONSTRAINTS'", "'CHECKDB'", "'CHECKFILEGROUP'", 
		"'CHECKPOINT'", "'CHECKSUM'", "'CHECKSUM_AGG'", "'CHECKTABLE'", "'CHECK_EXPIRATION'", 
		"'CHECK_POLICY'", "'CLASSIFIER_FUNCTION'", "'CLEANTABLE'", "'CLEANUP'", 
		"'CLEANUP_POLICY'", "'CLONEDATABASE'", "'CLOSE'", "'CLUSTER'", "'CLUSTERED'", 
		"'COALESCE'", "'COLLATE'", "'COLLECTION'", "'COLUMN'", "'COLUMNPROPERTY'", 
		"'COLUMNS'", "'COLUMNSTORE'", "'COLUMNSTORE_ARCHIVE'", "'COLUMN_ENCRYPTION_KEY'", 
		"'COLUMN_MASTER_KEY'", "'COL_LENGTH'", "'COL_NAME'", "'COMMIT'", "'COMMITTED'", 
		"'COMPATIBILITY_LEVEL'", "'COMPRESS'", "'COMPRESSION'", "'COMPRESSION_DELAY'", 
		"'COMPRESS_ALL_ROW_GROUPS'", "'COMPUTE'", "'CONCAT'", "'CONCAT_NULL_YIELDS_NULL'", 
		"'CONCAT_WS'", "'CONFIGURATION'", "'CONNECT'", "'CONNECTION'", "'CONNECTIONPROPERTY'", 
		"'CONSTRAINT'", "'CONTAINMENT'", "'CONTAINS'", "'CONTAINSTABLE'", "'CONTENT'", 
		"'CONTEXT'", "'CONTEXT_INFO'", "'CONTINUE'", "'CONTINUE_AFTER_ERROR'", 
		"'CONTRACT'", "'CONTRACT_NAME'", "'CONTROL'", "'CONVERSATION'", "'TRY_ CONVERT'", 
		"'COOKIE'", "'COPY_ONLY'", "'COUNT'", "'COUNTER'", "'COUNT_BIG'", "'CPU'", 
		"'CREATE'", "'CREATE_NEW'", "'CREATION_DISPOSITION'", "'CREDENTIAL'", 
		"'CROSS'", "'CRYPTOGRAPHIC'", "'CUME_DIST'", "'CURRENT'", "'CURRENT_DATE'", 
		"'CURRENT_REQUEST_ID'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_TRANSACTION_ID'", 
		"'CURRENT_USER'", "'CURSOR'", "'CURSOR_CLOSE_ON_COMMIT'", "'CURSOR_DEFAULT'", 
		"'CURSOR_STATUS'", "'CYCLE'", "'DATA'", "'DATABASE'", "'DATABASE_DEFAULT'", 
		"'DATABASE_MIRRORING'", "'DATABASE_PRINCIPAL_ID'", "'DATALENGTH'", "'DATASPACE'", 
		"'DATA_COMPRESSION'", "'DATA_FLUSH_INTERVAL_SECONDS'", "'DATA_PURITY'", 
		"'DATA_SOURCE'", "'DATEADD'", "'DATEDIFF'", "'DATENAME'", "'DATEPART'", 
		"'DATE_CORRELATION_OPTIMIZATION'", "'DAYS'", "'DBCC'", "'DBREINDEX'", 
		"'DB_CHAINING'", "'DB_FAILOVER'", "'DB_ID'", "'DB_NAME'", "'DDL'", "'DEALLOCATE'", 
		"'DECLARE'", "'DECOMPRESS'", "'DECRYPTION'", "'DEFAULT'", "'DEFAULT_DATABASE'", 
		null, "'DEFAULT_FULLTEXT_LANGUAGE'", "'DEFAULT_LANGUAGE'", "'DEFAULT_SCHEMA'", 
		"'DEFINITION'", "'DELAY'", "'DELAYED_DURABILITY'", "'DELETE'", "'DELETED'", 
		"'DENSE_RANK'", "'DENY'", "'DEPENDENTS'", "'DES'", "'DESC'", "'DESCRIPTION'", 
		"'DESX'", "'DETERMINISTIC'", "'DHCP'", "'DIAGNOSTICS'", "'DIALOG'", "'DIFFERENCE'", 
		"'DIFFERENTIAL'", "'DIRECTORY_NAME'", "'DISABLE'", "'DISABLED'", "'DISABLE_BROKER'", 
		"'DISK'", "'DISTINCT'", "'DISTRIBUTED'", "'DISTRIBUTION'", "'DOCUMENT'", 
		"'$PARTITION'", "'DOUBLE'", "'\\\\'", "'//'", "'DROP'", "'DROPCLEANBUFFERS'", 
		"'DROP_EXISTING'", "'DTC_SUPPORT'", "'DUMP'", "'DYNAMIC'", "'EDITION'", 
		"'ELEMENTS'", "'ELSE'", "'EMERGENCY'", "'EMPTY'", "'ENABLE'", "'ENABLED'", 
		"'ENABLE_BROKER'", "'ENCRYPTED'", "'ENCRYPTED_VALUE'", "'ENCRYPTION'", 
		"'ENCRYPTION_TYPE'", "'END'", "'ENDPOINT'", "'ENDPOINT_URL'", "'ERRLVL'", 
		"'ERROR'", "'ERROR_BROKER_CONVERSATIONS'", "'ERROR_LINE'", "'ERROR_MESSAGE'", 
		"'ERROR_NUMBER'", "'ERROR_PROCEDURE'", "'ERROR_SEVERITY'", "'ERROR_STATE'", 
		"'ESCAPE'", "'ESTIMATEONLY'", "'EVENT'", "'EVENT_RETENTION_MODE'", null, 
		"'EXCEPT'", "'EXCLUSIVE'", "'EXECUTABLE'", "'EXECUTABLE_FILE'", null, 
		"'EXIST'", "'EXISTS'", "'[EXIST]'", "'EXIT'", "'EXPAND'", "'EXPIREDATE'", 
		"'EXPIRY_DATE'", "'EXPLICIT'", "'EXTENDED_LOGICAL_CHECKS'", "'EXTENSION'", 
		"'EXTERNAL'", "'EXTERNAL_ACCESS'", "'FAILOVER'", "'FAILOVER_MODE'", "'FAILURE'", 
		"'FAILURECONDITIONLEVEL'", "'FAILURE_CONDITION_LEVEL'", "'FAIL_OPERATION'", 
		"'FAN_IN'", "'FAST'", "'FAST_FORWARD'", "'FETCH'", "'FILE'", "'FILEGROUP'", 
		"'FILEGROUPPROPERTY'", "'FILEGROUP_ID'", "'FILEGROUP_NAME'", "'FILEGROWTH'", 
		"'FILENAME'", "'FILEPATH'", "'FILEPROPERTY'", "'FILEPROPERTYEX'", "'FILESTREAM'", 
		"'FILESTREAM_ON'", "'FILE_ID'", "'FILE_IDEX'", "'FILE_NAME'", "'FILE_SNAPSHOT'", 
		"'FILLFACTOR'", "'FILTER'", "'FIRST'", "'FIRST_VALUE'", "'FMTONLY'", "'FOLLOWING'", 
		"'FOR'", "'FORCE'", "'FORCED'", "'FORCEPLAN'", "'FORCESCAN'", "'FORCESEEK'", 
		"'FORCE_FAILOVER_ALLOW_DATA_LOSS'", "'FORCE_SERVICE_ALLOW_DATA_LOSS'", 
		"'FOREIGN'", "'FORMAT'", "'FORMATMESSAGE'", "'FORWARD_ONLY'", "'FREE'", 
		"'FREETEXT'", "'FREETEXTTABLE'", "'FROM'", "'FULL'", "'FULLSCAN'", "'FULLTEXT'", 
		"'FULLTEXTCATALOGPROPERTY'", "'FULLTEXTSERVICEPROPERTY'", "'FUNCTION'", 
		"'GB'", "'GENERATED'", "'GET'", "'GETANCESTOR'", "'GETANSINULL'", "'GETDATE'", 
		"'GETDESCENDANT'", "'GETLEVEL'", "'GETREPARENTEDVALUE'", "'GETROOT'", 
		"'GETUTCDATE'", "'GET_FILESTREAM_TRANSACTION_CONTEXT'", "'GLOBAL'", "'GO'", 
		null, "'GOTO'", "'GOVERNOR'", "'GRANT'", "'GREATEST'", "'GROUP'", "'GROUPING'", 
		"'GROUPING_ID'", "'GROUP_MAX_REQUESTS'", "'HADR'", "'HASH'", "'HASHED'", 
		"'HAS_DBACCESS'", "'HAS_PERMS_BY_NAME'", "'HAVING'", "'HEALTHCHECKTIMEOUT'", 
		"'HEALTH_CHECK_TIMEOUT'", "'HEAP'", "'HIDDEN'", "'HIERARCHYID'", "'HIGH'", 
		"'HOLDLOCK'", "'HONOR_BROKER_PRIORITY'", "'HOST_ID'", "'HOST_NAME'", "'HOURS'", 
		"'IDENTITY'", "'IDENTITYCOL'", "'IDENTITY_INSERT'", "'IDENTITY_VALUE'", 
		"'IDENT_CURRENT'", "'IDENT_INCR'", "'IDENT_SEED'", "'IF'", "'IGNORE_CONSTRAINTS'", 
		"'IGNORE_DUP_KEY'", "'IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX'", "'IGNORE_REPLICATED_TABLE_CACHE'", 
		"'IGNORE_TRIGGERS'", "'IIF'", "'IMMEDIATE'", "'IMPERSONATE'", "'IMPLICIT_TRANSACTIONS'", 
		"'IMPORTANCE'", "'IN'", "'INCLUDE'", "'INCLUDE_NULL_VALUES'", "'INCREMENT'", 
		"'INCREMENTAL'", "'INDEX'", "'INDEXKEY_PROPERTY'", "'INDEXPROPERTY'", 
		"'INDEX_COL'", "'INFINITE'", "'INIT'", "'INITIATOR'", "'INNER'", "'INPUT'", 
		"'INSENSITIVE'", "'INSERT'", "'INSERTED'", "'INSTEAD'", "'INT'", "'INTERSECT'", 
		"'INTERVAL_LENGTH_MINUTES'", "'INTO'", "'IO'", "'IP'", "'IS'", "'ISDESCENDANTOF'", 
		"'ISJSON'", "'ISNULL'", "'ISNUMERIC'", "'ISOLATION'", "'IS_MEMBER'", "'IS_ROLEMEMBER'", 
		"'IS_SRVROLEMEMBER'", "'JOB'", "'JOIN'", "'JSON'", "'JSON_ARRAY'", "'JSON_MODIFY'", 
		"'JSON_OBJECT'", "'JSON_PATH_EXISTS'", "'JSON_QUERY'", "'JSON_VALUE'", 
		"'KB'", "'KEEP'", "'KEEPDEFAULTS'", "'KEEPFIXED'", "'KEEPIDENTITY'", "'KERBEROS'", 
		"'KEY'", "'KEYS'", "'KEYSET'", "'KEY_PATH'", "'KEY_SOURCE'", "'KEY_STORE_PROVIDER_NAME'", 
		"'KILL'", "'LAG'", "'LANGUAGE'", "'LAST'", "'LAST_VALUE'", "'LEAD'", "'LEAST'", 
		"'LEDGER'", "'LEFT'", "'LEN'", "'LEVEL'", "'LIBRARY'", "'LIFETIME'", "'LIKE'", 
		"'LINENO'", "'LINKED'", "'LINUX'", "'LIST'", "'LISTENER'", "'LISTENER_IP'", 
		"'LISTENER_PORT'", "'LISTENER_URL'", "'LOAD'", "'LOB_COMPACTION'", "'LOCAL'", 
		"'LOCAL_SERVICE_NAME'", "'LOCATION'", "'LOCK'", "'LOCK_ESCALATION'", "'LOG'", 
		"'LOGIN'", "'LOGINPROPERTY'", "'LOOP'", "'LOW'", "'LOWER'", "'LTRIM'", 
		"'MANUAL'", "'MARK'", "'MASK'", "'MASKED'", "'MASTER'", "'MATCHED'", "'MATERIALIZED'", 
		"'MAX'", "'MAXDOP'", "'MAXRECURSION'", "'MAXSIZE'", "'MAXTRANSFER'", "'MAXVALUE'", 
		"'MAX_CPU_PERCENT'", "'MAX_DISPATCH_LATENCY'", "'MAX_DOP'", "'MAX_DURATION'", 
		"'MAX_EVENT_SIZE'", "'MAX_FILES'", "'MAX_IOPS_PER_VOLUME'", "'MAX_MEMORY'", 
		"'MAX_MEMORY_PERCENT'", "'MAX_OUTSTANDING_IO_PER_VOLUME'", "'MAX_PLANS_PER_QUERY'", 
		"'MAX_PROCESSES'", "'MAX_QUEUE_READERS'", "'MAX_ROLLOVER_FILES'", "'MAX_SIZE'", 
		"'MAX_STORAGE_SIZE_MB'", "'MB'", "'MEDIADESCRIPTION'", "'MEDIANAME'", 
		"'MEDIUM'", "'MEMBER'", "'MEMORY_OPTIMIZED_DATA'", "'MEMORY_PARTITION_MODE'", 
		"'MERGE'", "'MESSAGE'", "'MESSAGE_FORWARDING'", "'MESSAGE_FORWARD_SIZE'", 
		"'MIN'", "'MINUTES'", "'MINVALUE'", "'MIN_ACTIVE_ROWVERSION'", "'MIN_CPU_PERCENT'", 
		"'MIN_IOPS_PER_VOLUME'", "'MIN_MEMORY_PERCENT'", "'MIRROR'", "'MIRROR_ADDRESS'", 
		"'MIXED_PAGE_ALLOCATION'", "'MODE'", "'MODIFY'", "'[MODIFY]'", "'MOVE'", 
		"'MULTI_USER'", "'MUST_CHANGE'", "'NAME'", "'NATIONAL'", "'NCHAR'", "'NEGOTIATE'", 
		"'NESTED_TRIGGERS'", "'NEWID'", "'NEWNAME'", "'NEWSEQUENTIALID'", "'NEW_ACCOUNT'", 
		"'NEW_BROKER'", "'NEW_PASSWORD'", "'NEXT'", "'NO'", "'NOCHECK'", "'NOCOUNT'", 
		"'NODES'", "'NOEXEC'", "'NOEXPAND'", "'NOFORMAT'", "'NOHOLDLOCK'", "'NOINDEX'", 
		"'NOINIT'", "'NONCLUSTERED'", "'NONE'", "'NON_TRANSACTED_ACCESS'", "'NORECOMPUTE'", 
		"'NORECOVERY'", "'NOREWIND'", "'NOSKIP'", "'NOT'", "'NOTIFICATION'", "'NOTIFICATIONS'", 
		"'NOUNLOAD'", "'NOWAIT'", "'NO_CHECKSUM'", "'NO_COMPRESSION'", "'NO_EVENT_LOSS'", 
		"'NO_INFOMSGS'", "'NO_QUERYSTORE'", "'NO_STATISTICS'", "'NO_TRUNCATE'", 
		"'NO_WAIT'", "'NTILE'", "'NTLM'", "'NULLIF'", "'NULL'", null, "'NUMANODE'", 
		"'NUMBER'", "'NUMERIC_ROUNDABORT'", "'OBJECT'", "'OBJECTPROPERTY'", "'OBJECTPROPERTYEX'", 
		"'OBJECT_DEFINITION'", "'OBJECT_ID'", "'OBJECT_NAME'", "'OBJECT_SCHEMA_NAME'", 
		"'OF'", "'OFF'", "'OFFLINE'", "'OFFSET'", "'OFFSETS'", "'OLD_ACCOUNT'", 
		"'OLD_PASSWORD'", "'ON'", "'ONLINE'", "'ONLY'", "'ON_FAILURE'", "'OPEN'", 
		"'OPENDATASOURCE'", "'OPENJSON'", "'OPENQUERY'", "'OPENROWSET'", "'OPENXML'", 
		"'OPEN_EXISTING'", "'OPERATIONS'", "'OPERATION_MODE'", "'OPTIMISTIC'", 
		"'OPTIMIZE'", "'OPTIMIZE_FOR_SEQUENTIAL_KEY'", "'OPTION'", "'OR'", "'ORDER'", 
		"'ORIGINAL_DB_NAME'", "'ORIGINAL_LOGIN'", "'OUT'", "'OUTER'", "'OUTPUT'", 
		"'OVER'", "'OVERRIDE'", "'OWNER'", "'OWNERSHIP'", "'PAD_INDEX'", "'PAGE'", 
		"'PAGECOUNT'", "'PAGE_VERIFY'", "'PAGLOCK'", "'PARAMETERIZATION'", "'PARAM_NODE'", 
		null, "'PARSENAME'", "'PARSEONLY'", "'PARTIAL'", "'PARTITION'", "'PARTITIONS'", 
		"'PARTNER'", "'PASSWORD'", "'PATH'", "'PATINDEX'", "'PAUSE'", "'PDW_SHOWSPACEUSED'", 
		"'PERCENT'", "'PERCENTILE_CONT'", "'PERCENTILE_DISC'", "'PERCENT_RANK'", 
		"'PERMISSIONS'", "'PERMISSION_SET'", "'PERSISTED'", "'PERSIST_SAMPLE_PERCENT'", 
		"'PER_CPU'", "'PER_DB'", "'PER_NODE'", "'PHYSICAL_ONLY'", "'PIVOT'", "'PLAN'", 
		"'PLATFORM'", "'POISON_MESSAGE_HANDLING'", "'POLICY'", "'POOL'", "'PORT'", 
		"'PRECEDING'", "'PRECISION'", "'PREDICATE'", "'PRIMARY'", "'PRIMARY_ROLE'", 
		"'PRINT'", "'PRIOR'", "'PRIORITY'", "'PRIORITY_LEVEL'", "'PRIVATE'", "'PRIVATE_KEY'", 
		"'PRIVILEGES'", "'PROC'", "'PROCCACHE'", "'PROCEDURE'", "'PROCEDURE_NAME'", 
		"'PROCESS'", "'PROFILE'", "'PROPERTY'", "'PROVIDER'", "'PROVIDER_KEY_NAME'", 
		"'PUBLIC'", "'PWDCOMPARE'", "'PWDENCRYPT'", "'PYTHON'", "'QUERY'", "'QUERY_CAPTURE_MODE'", 
		"'[QUERY]'", "'QUERY_STORE'", "'QUERYTRACEON'", "'QUEUE'", "'QUEUE_DELAY'", 
		"'QUOTED_IDENTIFIER'", "'QUOTENAME'", "'R'", "'RAISERROR'", "'RANDOMIZED'", 
		"'RANGE'", "'RANK'", "'RAW'", "'RC2'", "'RC4'", "'RC4_128'", "'READ'", 
		"'READCOMMITTED'", "'READCOMMITTEDLOCK'", "'READONLY'", "'READPAST'", 
		"'READTEXT'", "'READUNCOMMITTED'", "'READWRITE'", "'READ_COMMITTED_SNAPSHOT'", 
		"'READ_ONLY'", "'READ_ONLY_ROUTING_LIST'", "'READ_WRITE'", "'READ_WRITE_FILEGROUPS'", 
		"'REBUILD'", "'RECEIVE'", "'RECOMPILE'", "'RECONFIGURE'", "'RECOVERY'", 
		"'RECURSIVE_TRIGGERS'", "'REFERENCES'", "'REGENERATE'", "'RELATED_CONVERSATION'", 
		"'RELATED_CONVERSATION_GROUP'", "'RELATIVE'", "'REMOTE'", "'REMOTE_PROC_TRANSACTIONS'", 
		"'REMOTE_SERVICE_NAME'", "'REMOVE'", "'REORGANIZE'", "'REPAIR_ALLOW_DATA_LOSS'", 
		"'REPAIR_FAST'", "'REPAIR_REBUILD'", "'REPEATABLE'", "'REPEATABLEREAD'", 
		"'REPLACE'", "'REPLICA'", "'REPLICATE'", "'REPLICATION'", "'REQUEST_MAX_CPU_TIME_SEC'", 
		"'REQUEST_MAX_MEMORY_GRANT_PERCENT'", "'REQUEST_MEMORY_GRANT_TIMEOUT_SEC'", 
		"'REQUIRED'", "'REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT'", "'RESAMPLE'", 
		"'RESERVE_DISK_SPACE'", "'RESET'", "'RESOURCE'", "'RESOURCES'", "'RESOURCE_MANAGER_LOCATION'", 
		"'RESTART'", "'RESTORE'", "'RESTRICT'", "'RESTRICTED_USER'", "'RESUMABLE'", 
		"'RESUME'", "'RETAINDAYS'", "'RETENTION'", "'RETURN'", "'RETURNS'", "'REVERSE'", 
		"'REVERT'", "'REVOKE'", "'REWIND'", "'RIGHT'", "'ROBUST'", "'ROLE'", "'ROLLBACK'", 
		"'ROOT'", "'ROUND_ROBIN'", "'ROUTE'", "'ROW'", "'ROWCOUNT'", "'ROWCOUNT_BIG'", 
		"'ROWGUID'", "'ROWGUIDCOL'", "'ROWS'", "'ROW_NUMBER'", "'RSA_1024'", "'RSA_2048'", 
		"'RSA_3072'", "'RSA_4096'", "'RSA_512'", "'RTRIM'", "'RULE'", "'SAFE'", 
		"'SAFETY'", "'SAMPLE'", "'SAVE'", "'SCHEDULER'", "'SCHEMA'", "'SCHEMABINDING'", 
		"'SCHEMA_ID'", "'SCHEMA_NAME'", "'SCHEME'", "'SCOPED'", "'SCOPE_IDENTITY'", 
		"'SCRIPT'", "'SCROLL'", "'SCROLL_LOCKS'", "'SEARCH'", "'SECONDARY'", "'SECONDARY_ONLY'", 
		"'SECONDARY_ROLE'", "'SECONDS'", "'SECRET'", "'SECURABLES'", "'SECURITY'", 
		"'SECURITYAUDIT'", "'SECURITY_LOG'", "'SEEDING_MODE'", "'SELECT'", "'SELF'", 
		"'SEMANTICKEYPHRASETABLE'", "'SEMANTICSIMILARITYDETAILSTABLE'", "'SEMANTICSIMILARITYTABLE'", 
		"'SEMI_SENSITIVE'", "'SEND'", "'SENT'", "'SEQUENCE'", "'SEQUENCE_NUMBER'", 
		"'SERIALIZABLE'", "'SERVER'", "'SERVERPROPERTY'", "'SERVICE'", "'SERVICEBROKER'", 
		"'SERVICE_BROKER'", "'SERVICE_NAME'", "'SERVICE_OBJECTIVE'", "'SESSION'", 
		"'SESSIONPROPERTY'", "'SESSION_CONTEXT'", "'SESSION_TIMEOUT'", "'SESSION_USER'", 
		"'SET'", "'SETERROR'", "'SETS'", "'SETTINGS'", "'SETUSER'", "'SHARE'", 
		"'SHARED'", "'SHOWCONTIG'", "'SHOWPLAN'", "'SHOWPLAN_ALL'", "'SHOWPLAN_TEXT'", 
		"'SHOWPLAN_XML'", "'SHRINKLOG'", "'SHUTDOWN'", "'SID'", "'SIGNATURE'", 
		"'SIMPLE'", "'SINGLE_USER'", "'SIZE'", "'SIZE_BASED_CLEANUP_MODE'", "'SKIP'", 
		"'SMALLINT'", "'SNAPSHOT'", "'SOFTNUMA'", "'SOME'", "'SORT_IN_TEMPDB'", 
		"'SOUNDEX'", "'SOURCE'", "'SPACE'", "'SPARSE'", "'SPATIAL_WINDOW_MAX_CELLS'", 
		"'SPECIFICATION'", "'SPLIT'", "'SQL'", "'SQLDUMPERFLAGS'", "'SQLDUMPERPATH'", 
		"'SQLDUMPERTIMEOUT'", "'SQL_VARIANT_PROPERTY'", "'STALE_QUERY_THRESHOLD_DAYS'", 
		"'STANDBY'", "'START'", "'STARTED'", "'STARTUP_STATE'", "'START_DATE'", 
		"'STATE'", "'STATIC'", "'STATISTICS'", "'STATISTICS_INCREMENTAL'", "'STATISTICS_NORECOMPUTE'", 
		"'STATS'", "'STATS_DATE'", "'STATS_STREAM'", "'STATUS'", "'STATUSONLY'", 
		"'STDEV'", "'STDEVP'", "'STOP'", "'STOPLIST'", "'STOPPED'", "'STOP_ON_ERROR'", 
		"'STR'", "'STRING_AGG'", "'STRING_ESCAPE'", "'STUFF'", "'SUBJECT'", "'SUBSCRIBE'", 
		"'SUBSCRIPTION'", "'SUBSTRING'", "'SUM'", "'SUPPORTED'", "'SUSER_ID'", 
		"'SUSER_NAME'", "'SUSER_SID'", "'SUSER_SNAME'", "'SUSPEND'", "'SWITCH'", 
		"'SYMMETRIC'", "'SYNCHRONOUS_COMMIT'", "'SYNONYM'", "'SYSTEM'", "'SYSTEM_USER'", 
		"'TABLE'", "'TABLERESULTS'", "'TABLESAMPLE'", "'TABLOCK'", "'TABLOCKX'", 
		"'TAKE'", "'TAPE'", "'TARGET'", "'TARGET_RECOVERY_TIME'", "'TB'", "'TCP'", 
		"'TEXTIMAGE_ON'", "'TEXTSIZE'", "'THEN'", "'THROW'", "'TIES'", "'TIME'", 
		"'TIMEOUT'", "'TIMER'", "'TINYINT'", "'TO'", "'TOP'", "'TORN_PAGE_DETECTION'", 
		"'TOSTRING'", "'TRACE'", "'TRACKING'", "'TRACK_CAUSALITY'", "'TRAN'", 
		"'TRANSACTION'", "'TRANSACTION_ID'", "'TRANSFER'", "'TRANSFORM_NOISE_WORDS'", 
		"'TRANSLATE'", "'TRIGGER'", "'TRIM'", "'TRIPLE_DES'", "'TRIPLE_DES_3KEY'", 
		"'TRUNCATE'", "'TRUSTWORTHY'", "'TRY'", "'TRY_CAST'", "'TSEQUAL'", "'TSQL'", 
		"'TWO_DIGIT_YEAR_CUTOFF'", "'TYPE'", "'TYPEPROPERTY'", "'TYPE_ID'", "'TYPE_NAME'", 
		"'TYPE_WARNING'", "'UNBOUNDED'", "'UNCHECKED'", "'UNCOMMITTED'", "'UNICODE'", 
		"'UNION'", "'UNIQUE'", "'UNKNOWN'", "'UNLIMITED'", "'UNLOCK'", "'UNMASK'", 
		"'UNPIVOT'", "'UNSAFE'", "'UOW'", "'UPDATE'", "'UPDATETEXT'", "'UPPER'", 
		"'URL'", "'USE'", "'USED'", "'USER'", "'USER_ID'", "'USER_NAME'", "'USING'", 
		"'VALIDATION'", "'VALID_XML'", "'VALUE'", "'VALUES'", "'[VALUE]'", "'VAR'", 
		"'VARBINARY'", "'VARP'", "'VARYING'", "'VERBOSELOGGING'", "'VERIFY_CLONEDB'", 
		"'VERSION'", "'VIEW'", "'VIEWS'", "'VIEW_METADATA'", "'VISIBILITY'", "'WAIT'", 
		"'WAITFOR'", "'WAIT_AT_LOW_PRIORITY'", "'WELL_FORMED_XML'", "'WAIT_STATS_CAPTURE_MODE'", 
		"'WHEN'", "'WHERE'", "'WHILE'", "'WINDOWS'", "'WITH'", "'WITHIN'", "'WITHOUT'", 
		"'WITHOUT_ARRAY_WRAPPER'", "'WITNESS'", "'WORK'", "'WORKLOAD'", "'WRITETEXT'", 
		"'XACT_ABORT'", "'XACT_STATE'", "'XLOCK'", "'XML'", "'XMLDATA'", "'XMLNAMESPACES'", 
		"'XMLSCHEMA'", "'XML_COMPRESSION'", "'XSINIL'", "'ZONE'", "'ABS'", "'ACOS'", 
		"'ASIN'", "'ATAN'", "'ATN2'", "'CEILING'", "'COS'", "'COT'", "'DEGREES'", 
		"'EXP'", "'FLOOR'", "'LOG10'", "'PI'", "'POWER'", "'RADIANS'", "'RAND'", 
		"'ROUND'", "'SIGN'", "'SIN'", "'SQRT'", "'SQUARE'", "'TAN'", "'VARCHAR'", 
		"'NVARCHAR'", null, null, null, null, "'''", null, null, null, null, null, 
		null, null, null, "'='", "'>'", "'<'", "'!'", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'&='", "'^='", "'|='", "'||'", "'.'", "'_'", "'@'", "'#'", 
		"'$'", "'('", "')'", "'['", "']'", "','", "';'", "':'", "'::'", "'*'", 
		"'/'", "'%'", "'+'", "'-'", "'~'", "'|'", "'&'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ABORT", "ABORT_AFTER_WAIT", "ABSENT", "ABSOLUTE", "ACCELERATED_DATABASE_RECOVERY", 
		"ACCENT_SENSITIVITY", "ACCESS", "ACTION", "ACTIVATION", "ACTIVE", "ADD", 
		"ADDRESS", "ADMINISTER", "AES", "AES_128", "AES_192", "AES_256", "AFFINITY", 
		"AFTER", "AGGREGATE", "ALGORITHM", "ALL", "ALLOWED", "ALLOW_CONNECTIONS", 
		"ALLOW_ENCRYPTED_VALUE_MODIFICATIONS", "ALLOW_MULTIPLE_EVENT_LOSS", "ALLOW_PAGE_LOCKS", 
		"ALLOW_ROW_LOCKS", "ALLOW_SINGLE_EVENT_LOSS", "ALLOW_SNAPSHOT_ISOLATION", 
		"ALL_CONSTRAINTS", "ALL_ERRORMSGS", "ALL_INDEXES", "ALL_LEVELS", "ALTER", 
		"ALWAYS", "AND", "ANONYMOUS", "ANSI_DEFAULTS", "ANSI_NULLS", "ANSI_NULL_DEFAULT", 
		"ANSI_NULL_DFLT_OFF", "ANSI_NULL_DFLT_ON", "ANSI_PADDING", "ANSI_WARNINGS", 
		"ANY", "APPEND", "APPLICATION", "APPLICATION_LOG", "APPLOCK_MODE", "APPLOCK_TEST", 
		"APPLY", "APP_NAME", "ARITHABORT", "ARITHIGNORE", "AS", "ASC", "ASCII", 
		"ASSEMBLY", "ASSEMBLYPROPERTY", "ASYMMETRIC", "ASYNCHRONOUS_COMMIT", "AT_KEYWORD", 
		"AUDIT", "AUDIT_GUID", "AUTHENTICATE", "AUTHENTICATION", "AUTHORIZATION", 
		"AUTO", "AUTOGROW_ALL_FILES", "AUTOGROW_SINGLE_FILE", "AUTOMATED_BACKUP_PREFERENCE", 
		"AUTOMATIC", "AUTO_CLEANUP", "AUTO_CLOSE", "AUTO_CREATE_STATISTICS", "AUTO_DROP", 
		"AUTO_SHRINK", "AUTO_UPDATE_STATISTICS", "AUTO_UPDATE_STATISTICS_ASYNC", 
		"AVAILABILITY", "AVAILABILITY_MODE", "AVG", "BACKSLASH", "BACKUP", "BACKUP_CLONEDB", 
		"BACKUP_PRIORITY", "BASE64", "BEFORE", "BEGIN", "BEGIN_DIALOG", "BETWEEN", 
		"BIGINT", "BINARY_BASE64", "BINARY_CHECKSUM", "BINARY_KEYWORD", "BINDING", 
		"BLOB_STORAGE", "BLOCK", "BLOCKERS", "BLOCKING_HIERARCHY", "BLOCKSIZE", 
		"BREAK", "BROKER", "BROKER_INSTANCE", "BROWSE", "BUFFER", "BUFFERCOUNT", 
		"BULK", "BULK_LOGGED", "BY", "CACHE", "CALLED", "CALLER", "CAP_CPU_PERCENT", 
		"CASCADE", "CASE", "CAST", "CATALOG", "CATALOG_COLLATION", "CATCH", "CERTENCODED", 
		"CERTIFICATE", "CERTPRIVATEKEY", "CERT_ID", "CHANGE", "CHANGES", "CHANGETABLE", 
		"CHANGE_RETENTION", "CHANGE_TRACKING", "CHAR", "CHARINDEX", "CHECK", "CHECKALLOC", 
		"CHECKCATALOG", "CHECKCONSTRAINTS", "CHECKDB", "CHECKFILEGROUP", "CHECKPOINT", 
		"CHECKSUM", "CHECKSUM_AGG", "CHECKTABLE", "CHECK_EXPIRATION", "CHECK_POLICY", 
		"CLASSIFIER_FUNCTION", "CLEANTABLE", "CLEANUP", "CLEANUP_POLICY", "CLONEDATABASE", 
		"CLOSE", "CLUSTER", "CLUSTERED", "COALESCE", "COLLATE", "COLLECTION", 
		"COLUMN", "COLUMNPROPERTY", "COLUMNS", "COLUMNSTORE", "COLUMNSTORE_ARCHIVE", 
		"COLUMN_ENCRYPTION_KEY", "COLUMN_MASTER_KEY", "COL_LENGTH", "COL_NAME", 
		"COMMIT", "COMMITTED", "COMPATIBILITY_LEVEL", "COMPRESS", "COMPRESSION", 
		"COMPRESSION_DELAY", "COMPRESS_ALL_ROW_GROUPS", "COMPUTE", "CONCAT", "CONCAT_NULL_YIELDS_NULL", 
		"CONCAT_WS", "CONFIGURATION", "CONNECT", "CONNECTION", "CONNECTIONPROPERTY", 
		"CONSTRAINT", "CONTAINMENT", "CONTAINS", "CONTAINSTABLE", "CONTENT", "CONTEXT", 
		"CONTEXT_INFO", "CONTINUE", "CONTINUE_AFTER_ERROR", "CONTRACT", "CONTRACT_NAME", 
		"CONTROL", "CONVERSATION", "CONVERT", "COOKIE", "COPY_ONLY", "COUNT", 
		"COUNTER", "COUNT_BIG", "CPU", "CREATE", "CREATE_NEW", "CREATION_DISPOSITION", 
		"CREDENTIAL", "CROSS", "CRYPTOGRAPHIC", "CUME_DIST", "CURRENT", "CURRENT_DATE", 
		"CURRENT_REQUEST_ID", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_TRANSACTION_ID", 
		"CURRENT_USER", "CURSOR", "CURSOR_CLOSE_ON_COMMIT", "CURSOR_DEFAULT", 
		"CURSOR_STATUS", "CYCLE", "DATA", "DATABASE", "DATABASE_DEFAULT", "DATABASE_MIRRORING", 
		"DATABASE_PRINCIPAL_ID", "DATALENGTH", "DATASPACE", "DATA_COMPRESSION", 
		"DATA_FLUSH_INTERVAL_SECONDS", "DATA_PURITY", "DATA_SOURCE", "DATEADD", 
		"DATEDIFF", "DATENAME", "DATEPART", "DATE_CORRELATION_OPTIMIZATION", "DAYS", 
		"DBCC", "DBREINDEX", "DB_CHAINING", "DB_FAILOVER", "DB_ID", "DB_NAME", 
		"DDL", "DEALLOCATE", "DECLARE", "DECOMPRESS", "DECRYPTION", "DEFAULT", 
		"DEFAULT_DATABASE", "DEFAULT_DOUBLE_QUOTE", "DEFAULT_FULLTEXT_LANGUAGE", 
		"DEFAULT_LANGUAGE", "DEFAULT_SCHEMA", "DEFINITION", "DELAY", "DELAYED_DURABILITY", 
		"DELETE", "DELETED", "DENSE_RANK", "DENY", "DEPENDENTS", "DES", "DESC", 
		"DESCRIPTION", "DESX", "DETERMINISTIC", "DHCP", "DIAGNOSTICS", "DIALOG", 
		"DIFFERENCE", "DIFFERENTIAL", "DIRECTORY_NAME", "DISABLE", "DISABLED", 
		"DISABLE_BROKER", "DISK", "DISTINCT", "DISTRIBUTED", "DISTRIBUTION", "DOCUMENT", 
		"DOLLAR_PARTITION", "DOUBLE", "DOUBLE_BACK_SLASH", "DOUBLE_FORWARD_SLASH", 
		"DROP", "DROPCLEANBUFFERS", "DROP_EXISTING", "DTC_SUPPORT", "DUMP", "DYNAMIC", 
		"EDITION", "ELEMENTS", "ELSE", "EMERGENCY", "EMPTY", "ENABLE", "ENABLED", 
		"ENABLE_BROKER", "ENCRYPTED", "ENCRYPTED_VALUE", "ENCRYPTION", "ENCRYPTION_TYPE", 
		"END", "ENDPOINT", "ENDPOINT_URL", "ERRLVL", "ERROR", "ERROR_BROKER_CONVERSATIONS", 
		"ERROR_LINE", "ERROR_MESSAGE", "ERROR_NUMBER", "ERROR_PROCEDURE", "ERROR_SEVERITY", 
		"ERROR_STATE", "ESCAPE", "ESTIMATEONLY", "EVENT", "EVENT_RETENTION_MODE", 
		"EVENTDATA", "EXCEPT", "EXCLUSIVE", "EXECUTABLE", "EXECUTABLE_FILE", "EXECUTE", 
		"EXIST", "EXISTS", "EXIST_SQUARE_BRACKET", "EXIT", "EXPAND", "EXPIREDATE", 
		"EXPIRY_DATE", "EXPLICIT", "EXTENDED_LOGICAL_CHECKS", "EXTENSION", "EXTERNAL", 
		"EXTERNAL_ACCESS", "FAILOVER", "FAILOVER_MODE", "FAILURE", "FAILURECONDITIONLEVEL", 
		"FAILURE_CONDITION_LEVEL", "FAIL_OPERATION", "FAN_IN", "FAST", "FAST_FORWARD", 
		"FETCH", "FILE", "FILEGROUP", "FILEGROUPPROPERTY", "FILEGROUP_ID", "FILEGROUP_NAME", 
		"FILEGROWTH", "FILENAME", "FILEPATH", "FILEPROPERTY", "FILEPROPERTYEX", 
		"FILESTREAM", "FILESTREAM_ON", "FILE_ID", "FILE_IDEX", "FILE_NAME", "FILE_SNAPSHOT", 
		"FILLFACTOR", "FILTER", "FIRST", "FIRST_VALUE", "FMTONLY", "FOLLOWING", 
		"FOR", "FORCE", "FORCED", "FORCEPLAN", "FORCESCAN", "FORCESEEK", "FORCE_FAILOVER_ALLOW_DATA_LOSS", 
		"FORCE_SERVICE_ALLOW_DATA_LOSS", "FOREIGN", "FORMAT", "FORMATMESSAGE", 
		"FORWARD_ONLY", "FREE", "FREETEXT", "FREETEXTTABLE", "FROM", "FULL", "FULLSCAN", 
		"FULLTEXT", "FULLTEXTCATALOGPROPERTY", "FULLTEXTSERVICEPROPERTY", "FUNCTION", 
		"GB", "GENERATED", "GET", "GETANCESTOR", "GETANSINULL", "GETDATE", "GETDESCENDANT", 
		"GETLEVEL", "GETREPARENTEDVALUE", "GETROOT", "GETUTCDATE", "GET_FILESTREAM_TRANSACTION_CONTEXT", 
		"GLOBAL", "GO", "GO_BATCH", "GOTO", "GOVERNOR", "GRANT", "GREATEST", "GROUP", 
		"GROUPING", "GROUPING_ID", "GROUP_MAX_REQUESTS", "HADR", "HASH", "HASHED", 
		"HAS_DBACCESS", "HAS_PERMS_BY_NAME", "HAVING", "HEALTHCHECKTIMEOUT", "HEALTH_CHECK_TIMEOUT", 
		"HEAP", "HIDDEN_KEYWORD", "HIERARCHYID", "HIGH", "HOLDLOCK", "HONOR_BROKER_PRIORITY", 
		"HOST_ID", "HOST_NAME", "HOURS", "IDENTITY", "IDENTITYCOL", "IDENTITY_INSERT", 
		"IDENTITY_VALUE", "IDENT_CURRENT", "IDENT_INCR", "IDENT_SEED", "IF", "IGNORE_CONSTRAINTS", 
		"IGNORE_DUP_KEY", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", "IGNORE_REPLICATED_TABLE_CACHE", 
		"IGNORE_TRIGGERS", "IIF", "IMMEDIATE", "IMPERSONATE", "IMPLICIT_TRANSACTIONS", 
		"IMPORTANCE", "IN", "INCLUDE", "INCLUDE_NULL_VALUES", "INCREMENT", "INCREMENTAL", 
		"INDEX", "INDEXKEY_PROPERTY", "INDEXPROPERTY", "INDEX_COL", "INFINITE", 
		"INIT", "INITIATOR", "INNER", "INPUT", "INSENSITIVE", "INSERT", "INSERTED", 
		"INSTEAD", "INT", "INTERSECT", "INTERVAL_LENGTH_MINUTES", "INTO", "IO", 
		"IP", "IS", "ISDESCENDANTOF", "ISJSON", "ISNULL", "ISNUMERIC", "ISOLATION", 
		"IS_MEMBER", "IS_ROLEMEMBER", "IS_SRVROLEMEMBER", "JOB", "JOIN", "JSON", 
		"JSON_ARRAY", "JSON_MODIFY", "JSON_OBJECT", "JSON_PATH_EXISTS", "JSON_QUERY", 
		"JSON_VALUE", "KB", "KEEP", "KEEPDEFAULTS", "KEEPFIXED", "KEEPIDENTITY", 
		"KERBEROS", "KEY", "KEYS", "KEYSET", "KEY_PATH", "KEY_SOURCE", "KEY_STORE_PROVIDER_NAME", 
		"KILL", "LAG", "LANGUAGE", "LAST", "LAST_VALUE", "LEAD", "LEAST", "LEDGER", 
		"LEFT", "LEN", "LEVEL", "LIBRARY", "LIFETIME", "LIKE", "LINENO", "LINKED", 
		"LINUX", "LIST", "LISTENER", "LISTENER_IP", "LISTENER_PORT", "LISTENER_URL", 
		"LOAD", "LOB_COMPACTION", "LOCAL", "LOCAL_SERVICE_NAME", "LOCATION", "LOCK", 
		"LOCK_ESCALATION", "LOG", "LOGIN", "LOGINPROPERTY", "LOOP", "LOW", "LOWER", 
		"LTRIM", "MANUAL", "MARK", "MASK", "MASKED", "MASTER", "MATCHED", "MATERIALIZED", 
		"MAX", "MAXDOP", "MAXRECURSION", "MAXSIZE", "MAXTRANSFER", "MAXVALUE", 
		"MAX_CPU_PERCENT", "MAX_DISPATCH_LATENCY", "MAX_DOP", "MAX_DURATION", 
		"MAX_EVENT_SIZE", "MAX_FILES", "MAX_IOPS_PER_VOLUME", "MAX_MEMORY", "MAX_MEMORY_PERCENT", 
		"MAX_OUTSTANDING_IO_PER_VOLUME", "MAX_PLANS_PER_QUERY", "MAX_PROCESSES", 
		"MAX_QUEUE_READERS", "MAX_ROLLOVER_FILES", "MAX_SIZE", "MAX_STORAGE_SIZE_MB", 
		"MB", "MEDIADESCRIPTION", "MEDIANAME", "MEDIUM", "MEMBER", "MEMORY_OPTIMIZED_DATA", 
		"MEMORY_PARTITION_MODE", "MERGE", "MESSAGE", "MESSAGE_FORWARDING", "MESSAGE_FORWARD_SIZE", 
		"MIN", "MINUTES", "MINVALUE", "MIN_ACTIVE_ROWVERSION", "MIN_CPU_PERCENT", 
		"MIN_IOPS_PER_VOLUME", "MIN_MEMORY_PERCENT", "MIRROR", "MIRROR_ADDRESS", 
		"MIXED_PAGE_ALLOCATION", "MODE", "MODIFY", "MODIFY_SQUARE_BRACKET", "MOVE", 
		"MULTI_USER", "MUST_CHANGE", "NAME", "NATIONAL", "NCHAR", "NEGOTIATE", 
		"NESTED_TRIGGERS", "NEWID", "NEWNAME", "NEWSEQUENTIALID", "NEW_ACCOUNT", 
		"NEW_BROKER", "NEW_PASSWORD", "NEXT", "NO", "NOCHECK", "NOCOUNT", "NODES", 
		"NOEXEC", "NOEXPAND", "NOFORMAT", "NOHOLDLOCK", "NOINDEX", "NOINIT", "NONCLUSTERED", 
		"NONE", "NON_TRANSACTED_ACCESS", "NORECOMPUTE", "NORECOVERY", "NOREWIND", 
		"NOSKIP", "NOT", "NOTIFICATION", "NOTIFICATIONS", "NOUNLOAD", "NOWAIT", 
		"NO_CHECKSUM", "NO_COMPRESSION", "NO_EVENT_LOSS", "NO_INFOMSGS", "NO_QUERYSTORE", 
		"NO_STATISTICS", "NO_TRUNCATE", "NO_WAIT", "NTILE", "NTLM", "NULLIF", 
		"NULL_", "NULL_DOUBLE_QUOTE", "NUMANODE", "NUMBER", "NUMERIC_ROUNDABORT", 
		"OBJECT", "OBJECTPROPERTY", "OBJECTPROPERTYEX", "OBJECT_DEFINITION", "OBJECT_ID", 
		"OBJECT_NAME", "OBJECT_SCHEMA_NAME", "OF", "OFF", "OFFLINE", "OFFSET", 
		"OFFSETS", "OLD_ACCOUNT", "OLD_PASSWORD", "ON", "ONLINE", "ONLY", "ON_FAILURE", 
		"OPEN", "OPENDATASOURCE", "OPENJSON", "OPENQUERY", "OPENROWSET", "OPENXML", 
		"OPEN_EXISTING", "OPERATIONS", "OPERATION_MODE", "OPTIMISTIC", "OPTIMIZE", 
		"OPTIMIZE_FOR_SEQUENTIAL_KEY", "OPTION", "OR", "ORDER", "ORIGINAL_DB_NAME", 
		"ORIGINAL_LOGIN", "OUT", "OUTER", "OUTPUT", "OVER", "OVERRIDE", "OWNER", 
		"OWNERSHIP", "PAD_INDEX", "PAGE", "PAGECOUNT", "PAGE_VERIFY", "PAGLOCK", 
		"PARAMETERIZATION", "PARAM_NODE", "PARSE", "PARSENAME", "PARSEONLY", "PARTIAL", 
		"PARTITION", "PARTITIONS", "PARTNER", "PASSWORD", "PATH", "PATINDEX", 
		"PAUSE", "PDW_SHOWSPACEUSED", "PERCENT", "PERCENTILE_CONT", "PERCENTILE_DISC", 
		"PERCENT_RANK", "PERMISSIONS", "PERMISSION_SET", "PERSISTED", "PERSIST_SAMPLE_PERCENT", 
		"PER_CPU", "PER_DB", "PER_NODE", "PHYSICAL_ONLY", "PIVOT", "PLAN", "PLATFORM", 
		"POISON_MESSAGE_HANDLING", "POLICY", "POOL", "PORT", "PRECEDING", "PRECISION", 
		"PREDICATE", "PRIMARY", "PRIMARY_ROLE", "PRINT", "PRIOR", "PRIORITY", 
		"PRIORITY_LEVEL", "PRIVATE", "PRIVATE_KEY", "PRIVILEGES", "PROC", "PROCCACHE", 
		"PROCEDURE", "PROCEDURE_NAME", "PROCESS", "PROFILE", "PROPERTY", "PROVIDER", 
		"PROVIDER_KEY_NAME", "PUBLIC", "PWDCOMPARE", "PWDENCRYPT", "PYTHON", "QUERY", 
		"QUERY_CAPTURE_MODE", "QUERY_SQUARE_BRACKET", "QUERY_STORE", "QUERYTRACEON", 
		"QUEUE", "QUEUE_DELAY", "QUOTED_IDENTIFIER", "QUOTENAME", "R", "RAISERROR", 
		"RANDOMIZED", "RANGE", "RANK", "RAW", "RC2", "RC4", "RC4_128", "READ", 
		"READCOMMITTED", "READCOMMITTEDLOCK", "READONLY", "READPAST", "READTEXT", 
		"READUNCOMMITTED", "READWRITE", "READ_COMMITTED_SNAPSHOT", "READ_ONLY", 
		"READ_ONLY_ROUTING_LIST", "READ_WRITE", "READ_WRITE_FILEGROUPS", "REBUILD", 
		"RECEIVE", "RECOMPILE", "RECONFIGURE", "RECOVERY", "RECURSIVE_TRIGGERS", 
		"REFERENCES", "REGENERATE", "RELATED_CONVERSATION", "RELATED_CONVERSATION_GROUP", 
		"RELATIVE", "REMOTE", "REMOTE_PROC_TRANSACTIONS", "REMOTE_SERVICE_NAME", 
		"REMOVE", "REORGANIZE", "REPAIR_ALLOW_DATA_LOSS", "REPAIR_FAST", "REPAIR_REBUILD", 
		"REPEATABLE", "REPEATABLEREAD", "REPLACE", "REPLICA", "REPLICATE", "REPLICATION", 
		"REQUEST_MAX_CPU_TIME_SEC", "REQUEST_MAX_MEMORY_GRANT_PERCENT", "REQUEST_MEMORY_GRANT_TIMEOUT_SEC", 
		"REQUIRED", "REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT", "RESAMPLE", 
		"RESERVE_DISK_SPACE", "RESET", "RESOURCE", "RESOURCES", "RESOURCE_MANAGER_LOCATION", 
		"RESTART", "RESTORE", "RESTRICT", "RESTRICTED_USER", "RESUMABLE", "RESUME", 
		"RETAINDAYS", "RETENTION", "RETURN", "RETURNS", "REVERSE", "REVERT", "REVOKE", 
		"REWIND", "RIGHT", "ROBUST", "ROLE", "ROLLBACK", "ROOT", "ROUND_ROBIN", 
		"ROUTE", "ROW", "ROWCOUNT", "ROWCOUNT_BIG", "ROWGUID", "ROWGUIDCOL", "ROWS", 
		"ROW_NUMBER", "RSA_1024", "RSA_2048", "RSA_3072", "RSA_4096", "RSA_512", 
		"RTRIM", "RULE", "SAFE", "SAFETY", "SAMPLE", "SAVE", "SCHEDULER", "SCHEMA", 
		"SCHEMABINDING", "SCHEMA_ID", "SCHEMA_NAME", "SCHEME", "SCOPED", "SCOPE_IDENTITY", 
		"SCRIPT", "SCROLL", "SCROLL_LOCKS", "SEARCH", "SECONDARY", "SECONDARY_ONLY", 
		"SECONDARY_ROLE", "SECONDS", "SECRET", "SECURABLES", "SECURITY", "SECURITYAUDIT", 
		"SECURITY_LOG", "SEEDING_MODE", "SELECT", "SELF", "SEMANTICKEYPHRASETABLE", 
		"SEMANTICSIMILARITYDETAILSTABLE", "SEMANTICSIMILARITYTABLE", "SEMI_SENSITIVE", 
		"SEND", "SENT", "SEQUENCE", "SEQUENCE_NUMBER", "SERIALIZABLE", "SERVER", 
		"SERVERPROPERTY", "SERVICE", "SERVICEBROKER", "SERVICE_BROKER", "SERVICE_NAME", 
		"SERVICE_OBJECTIVE", "SESSION", "SESSIONPROPERTY", "SESSION_CONTEXT", 
		"SESSION_TIMEOUT", "SESSION_USER", "SET", "SETERROR", "SETS", "SETTINGS", 
		"SETUSER", "SHARE", "SHARED", "SHOWCONTIG", "SHOWPLAN", "SHOWPLAN_ALL", 
		"SHOWPLAN_TEXT", "SHOWPLAN_XML", "SHRINKLOG", "SHUTDOWN", "SID", "SIGNATURE", 
		"SIMPLE", "SINGLE_USER", "SIZE", "SIZE_BASED_CLEANUP_MODE", "SKIP_KEYWORD", 
		"SMALLINT", "SNAPSHOT", "SOFTNUMA", "SOME", "SORT_IN_TEMPDB", "SOUNDEX", 
		"SOURCE", "SPACE_KEYWORD", "SPARSE", "SPATIAL_WINDOW_MAX_CELLS", "SPECIFICATION", 
		"SPLIT", "SQL", "SQLDUMPERFLAGS", "SQLDUMPERPATH", "SQLDUMPERTIMEOUT", 
		"SQL_VARIANT_PROPERTY", "STALE_QUERY_THRESHOLD_DAYS", "STANDBY", "START", 
		"STARTED", "STARTUP_STATE", "START_DATE", "STATE", "STATIC", "STATISTICS", 
		"STATISTICS_INCREMENTAL", "STATISTICS_NORECOMPUTE", "STATS", "STATS_DATE", 
		"STATS_STREAM", "STATUS", "STATUSONLY", "STDEV", "STDEVP", "STOP", "STOPLIST", 
		"STOPPED", "STOP_ON_ERROR", "STR", "STRING_AGG", "STRING_ESCAPE", "STUFF", 
		"SUBJECT", "SUBSCRIBE", "SUBSCRIPTION", "SUBSTRING", "SUM", "SUPPORTED", 
		"SUSER_ID", "SUSER_NAME", "SUSER_SID", "SUSER_SNAME", "SUSPEND", "SWITCH", 
		"SYMMETRIC", "SYNCHRONOUS_COMMIT", "SYNONYM", "SYSTEM", "SYSTEM_USER", 
		"TABLE", "TABLERESULTS", "TABLESAMPLE", "TABLOCK", "TABLOCKX", "TAKE", 
		"TAPE", "TARGET", "TARGET_RECOVERY_TIME", "TB", "TCP", "TEXTIMAGE_ON", 
		"TEXTSIZE", "THEN", "THROW", "TIES", "TIME", "TIMEOUT", "TIMER", "TINYINT", 
		"TO", "TOP", "TORN_PAGE_DETECTION", "TOSTRING", "TRACE", "TRACKING", "TRACK_CAUSALITY", 
		"TRAN", "TRANSACTION", "TRANSACTION_ID", "TRANSFER", "TRANSFORM_NOISE_WORDS", 
		"TRANSLATE", "TRIGGER", "TRIM", "TRIPLE_DES", "TRIPLE_DES_3KEY", "TRUNCATE", 
		"TRUSTWORTHY", "TRY", "TRY_CAST", "TSEQUAL", "TSQL", "TWO_DIGIT_YEAR_CUTOFF", 
		"TYPE", "TYPEPROPERTY", "TYPE_ID", "TYPE_NAME", "TYPE_WARNING", "UNBOUNDED", 
		"UNCHECKED", "UNCOMMITTED", "UNICODE", "UNION", "UNIQUE", "UNKNOWN", "UNLIMITED", 
		"UNLOCK", "UNMASK", "UNPIVOT", "UNSAFE", "UOW", "UPDATE", "UPDATETEXT", 
		"UPPER", "URL", "USE", "USED", "USER", "USER_ID", "USER_NAME", "USING", 
		"VALIDATION", "VALID_XML", "VALUE", "VALUES", "VALUE_SQUARE_BRACKET", 
		"VAR", "VARBINARY_KEYWORD", "VARP", "VARYING", "VERBOSELOGGING", "VERIFY_CLONEDB", 
		"VERSION", "VIEW", "VIEWS", "VIEW_METADATA", "VISIBILITY", "WAIT", "WAITFOR", 
		"WAIT_AT_LOW_PRIORITY", "WELL_FORMED_XML", "WAIT_STATS_CAPTURE_MODE", 
		"WHEN", "WHERE", "WHILE", "WINDOWS", "WITH", "WITHIN", "WITHOUT", "WITHOUT_ARRAY_WRAPPER", 
		"WITNESS", "WORK", "WORKLOAD", "WRITETEXT", "XACT_ABORT", "XACT_STATE", 
		"XLOCK", "XML", "XMLDATA", "XMLNAMESPACES", "XMLSCHEMA", "XML_COMPRESSION", 
		"XSINIL", "ZONE", "ABS", "ACOS", "ASIN", "ATAN", "ATN2", "CEILING", "COS", 
		"COT", "DEGREES", "EXP", "FLOOR", "LOG10", "PI", "POWER", "RADIANS", "RAND", 
		"ROUND", "SIGN", "SIN", "SQRT", "SQUARE", "TAN", "VARCHAR", "NVARCHAR", 
		"SPACE", "COMMENT", "LINE_COMMENT", "DOUBLE_QUOTE_ID", "SINGLE_QUOTE", 
		"SQUARE_BRACKET_ID", "LOCAL_ID", "DECIMAL", "ID", "STRING", "BINARY", 
		"FLOAT", "REAL", "EQUAL", "GREATER", "LESS", "EXCLAMATION", "PLUS_ASSIGN", 
		"MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", 
		"XOR_ASSIGN", "OR_ASSIGN", "DOUBLE_BAR", "DOT", "UNDERLINE", "AT", "SHARP", 
		"DOLLAR", "LR_BRACKET", "RR_BRACKET", "LS_BRACKET", "RS_BRACKET", "COMMA", 
		"SEMI", "COLON", "DOUBLE_COLON", "STAR", "DIVIDE", "MODULE", "PLUS", "MINUS", 
		"BIT_NOT", "BIT_OR", "BIT_AND", "BIT_XOR", "DISK_DRIVE", "IPV4_ADDR", 
		"IPV6_ADDR", "NOEXEol", "DOLLAR_ACTION", "PLACEHOLDER", "YEAR", "YEAR_ABBR", 
		"QUARTER", "QUARTER_ABBR", "MONTH", "MONTH_ABBR", "DAY", "DAY_ABBR", "WEEK", 
		"WEEK_ABBR", "HOUR", "HOUR_ABBR", "MINUTE", "MINUTE_ABBR", "SECOND", "SECOND_ABBR", 
		"MILLISECOND", "MILLISECOND_ABBR", "DAYOFYEAR", "DAYOFYEAR_ABBR", "MICROSECOND", 
		"MICROSECOND_ABBR", "NANOSECOND", "NANOSECOND_ABBR", "WEEKDAY", "WEEKDAY_ABBR", 
		"TZOFFSET", "TZOFFSET_ABBR", "ISO_WEEK", "ISO_WEEK_ABBR", "DATABASEPROPERTYEX", 
		"NOLOCK", "ROWLOCK", "UPDLOCK"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TSqlParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public TSqlParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class Tsql_fileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(TSqlParser.Eof, 0); }
		public BatchContext[] batch() {
			return GetRuleContexts<BatchContext>();
		}
		public BatchContext batch(int i) {
			return GetRuleContext<BatchContext>(i);
		}
		public Execute_body_batchContext execute_body_batch() {
			return GetRuleContext<Execute_body_batchContext>(0);
		}
		public Go_batch_statementContext[] go_batch_statement() {
			return GetRuleContexts<Go_batch_statementContext>();
		}
		public Go_batch_statementContext go_batch_statement(int i) {
			return GetRuleContext<Go_batch_statementContext>(i);
		}
		public Tsql_fileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsql_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTsql_file(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTsql_file(this);
		}
	}

	[RuleVersion(0)]
	public Tsql_fileContext tsql_file() {
		Tsql_fileContext _localctx = new Tsql_fileContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_tsql_file);
		try {
			int _alt;
			State = 1260;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1247;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1244; batch();
						}
						} 
					}
					State = 1249;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
				}
				State = 1250; Match(Eof);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1251; execute_body_batch();
				State = 1255;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1252; go_batch_statement();
						}
						} 
					}
					State = 1257;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
				}
				State = 1258; Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BatchContext : ParserRuleContext {
		public Go_batch_statementContext go_batch_statement() {
			return GetRuleContext<Go_batch_statementContext>(0);
		}
		public Execute_body_batchContext execute_body_batch() {
			return GetRuleContext<Execute_body_batchContext>(0);
		}
		public Go_statementContext[] go_statement() {
			return GetRuleContexts<Go_statementContext>();
		}
		public Go_statementContext go_statement(int i) {
			return GetRuleContext<Go_statementContext>(i);
		}
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public Batch_level_statementContext batch_level_statement() {
			return GetRuleContext<Batch_level_statementContext>(0);
		}
		public BatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_batch; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBatch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBatch(this);
		}
	}

	[RuleVersion(0)]
	public BatchContext batch() {
		BatchContext _localctx = new BatchContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_batch);
		try {
			int _alt;
			State = 1288;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1262; go_batch_statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1264;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
				case 1:
					{
					State = 1263; execute_body_batch();
					}
					break;
				}
				State = 1272;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
				case 1:
					{
					State = 1266; go_batch_statement();
					}
					break;

				case 2:
					{
					State = 1268;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 1267; sql_clauses();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1270;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;
				}
				State = 1277;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1274; go_statement();
						}
						} 
					}
					State = 1279;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1280; batch_level_statement();
				State = 1284;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1281; go_statement();
						}
						} 
					}
					State = 1286;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1287; go_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Batch_level_statementContext : ParserRuleContext {
		public Create_or_alter_functionContext create_or_alter_function() {
			return GetRuleContext<Create_or_alter_functionContext>(0);
		}
		public Create_or_alter_procedureContext create_or_alter_procedure() {
			return GetRuleContext<Create_or_alter_procedureContext>(0);
		}
		public Create_or_alter_triggerContext create_or_alter_trigger() {
			return GetRuleContext<Create_or_alter_triggerContext>(0);
		}
		public Create_viewContext create_view() {
			return GetRuleContext<Create_viewContext>(0);
		}
		public Batch_level_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_batch_level_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBatch_level_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBatch_level_statement(this);
		}
	}

	[RuleVersion(0)]
	public Batch_level_statementContext batch_level_statement() {
		Batch_level_statementContext _localctx = new Batch_level_statementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_batch_level_statement);
		try {
			State = 1294;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1290; create_or_alter_function();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1291; create_or_alter_procedure();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1292; create_or_alter_trigger();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1293; create_view();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_clausesContext : ParserRuleContext {
		public Dml_clauseContext dml_clause() {
			return GetRuleContext<Dml_clauseContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Cfl_statementContext cfl_statement() {
			return GetRuleContext<Cfl_statementContext>(0);
		}
		public Another_statementContext another_statement() {
			return GetRuleContext<Another_statementContext>(0);
		}
		public Ddl_clauseContext ddl_clause() {
			return GetRuleContext<Ddl_clauseContext>(0);
		}
		public Dbcc_clauseContext dbcc_clause() {
			return GetRuleContext<Dbcc_clauseContext>(0);
		}
		public Receive_statementContext receive_statement() {
			return GetRuleContext<Receive_statementContext>(0);
		}
		public Backup_statementContext backup_statement() {
			return GetRuleContext<Backup_statementContext>(0);
		}
		public Sql_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_clauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSql_clauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSql_clauses(this);
		}
	}

	[RuleVersion(0)]
	public Sql_clausesContext sql_clauses() {
		Sql_clausesContext _localctx = new Sql_clausesContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_sql_clauses);
		try {
			State = 1325;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1296; dml_clause();
				State = 1298;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
				case 1:
					{
					State = 1297; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1300; cfl_statement();
				State = 1302;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
				case 1:
					{
					State = 1301; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1304; another_statement();
				State = 1306;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
				case 1:
					{
					State = 1305; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1308; ddl_clause();
				State = 1310;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
				case 1:
					{
					State = 1309; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1312; dbcc_clause();
				State = 1314;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
				case 1:
					{
					State = 1313; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1316; receive_statement();
				State = 1318;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
				case 1:
					{
					State = 1317; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1320; backup_statement();
				State = 1322;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
				case 1:
					{
					State = 1321; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1324; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_clauseContext : ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return GetRuleContext<Merge_statementContext>(0);
		}
		public Delete_statementContext delete_statement() {
			return GetRuleContext<Delete_statementContext>(0);
		}
		public Insert_statementContext insert_statement() {
			return GetRuleContext<Insert_statementContext>(0);
		}
		public Select_statement_standaloneContext select_statement_standalone() {
			return GetRuleContext<Select_statement_standaloneContext>(0);
		}
		public Update_statementContext update_statement() {
			return GetRuleContext<Update_statementContext>(0);
		}
		public Dml_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDml_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDml_clause(this);
		}
	}

	[RuleVersion(0)]
	public Dml_clauseContext dml_clause() {
		Dml_clauseContext _localctx = new Dml_clauseContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_dml_clause);
		try {
			State = 1332;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1327; merge_statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1328; delete_statement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1329; insert_statement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1330; select_statement_standalone();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1331; update_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_clauseContext : ParserRuleContext {
		public Alter_application_roleContext alter_application_role() {
			return GetRuleContext<Alter_application_roleContext>(0);
		}
		public Alter_assemblyContext alter_assembly() {
			return GetRuleContext<Alter_assemblyContext>(0);
		}
		public Alter_asymmetric_keyContext alter_asymmetric_key() {
			return GetRuleContext<Alter_asymmetric_keyContext>(0);
		}
		public Alter_authorizationContext alter_authorization() {
			return GetRuleContext<Alter_authorizationContext>(0);
		}
		public Alter_authorization_for_azure_dwContext alter_authorization_for_azure_dw() {
			return GetRuleContext<Alter_authorization_for_azure_dwContext>(0);
		}
		public Alter_authorization_for_parallel_dwContext alter_authorization_for_parallel_dw() {
			return GetRuleContext<Alter_authorization_for_parallel_dwContext>(0);
		}
		public Alter_authorization_for_sql_databaseContext alter_authorization_for_sql_database() {
			return GetRuleContext<Alter_authorization_for_sql_databaseContext>(0);
		}
		public Alter_availability_groupContext alter_availability_group() {
			return GetRuleContext<Alter_availability_groupContext>(0);
		}
		public Alter_certificateContext alter_certificate() {
			return GetRuleContext<Alter_certificateContext>(0);
		}
		public Alter_column_encryption_keyContext alter_column_encryption_key() {
			return GetRuleContext<Alter_column_encryption_keyContext>(0);
		}
		public Alter_credentialContext alter_credential() {
			return GetRuleContext<Alter_credentialContext>(0);
		}
		public Alter_cryptographic_providerContext alter_cryptographic_provider() {
			return GetRuleContext<Alter_cryptographic_providerContext>(0);
		}
		public Alter_databaseContext alter_database() {
			return GetRuleContext<Alter_databaseContext>(0);
		}
		public Alter_database_audit_specificationContext alter_database_audit_specification() {
			return GetRuleContext<Alter_database_audit_specificationContext>(0);
		}
		public Alter_db_roleContext alter_db_role() {
			return GetRuleContext<Alter_db_roleContext>(0);
		}
		public Alter_endpointContext alter_endpoint() {
			return GetRuleContext<Alter_endpointContext>(0);
		}
		public Alter_external_data_sourceContext alter_external_data_source() {
			return GetRuleContext<Alter_external_data_sourceContext>(0);
		}
		public Alter_external_libraryContext alter_external_library() {
			return GetRuleContext<Alter_external_libraryContext>(0);
		}
		public Alter_external_resource_poolContext alter_external_resource_pool() {
			return GetRuleContext<Alter_external_resource_poolContext>(0);
		}
		public Alter_fulltext_catalogContext alter_fulltext_catalog() {
			return GetRuleContext<Alter_fulltext_catalogContext>(0);
		}
		public Alter_fulltext_stoplistContext alter_fulltext_stoplist() {
			return GetRuleContext<Alter_fulltext_stoplistContext>(0);
		}
		public Alter_indexContext alter_index() {
			return GetRuleContext<Alter_indexContext>(0);
		}
		public Alter_login_azure_sqlContext alter_login_azure_sql() {
			return GetRuleContext<Alter_login_azure_sqlContext>(0);
		}
		public Alter_login_azure_sql_dw_and_pdwContext alter_login_azure_sql_dw_and_pdw() {
			return GetRuleContext<Alter_login_azure_sql_dw_and_pdwContext>(0);
		}
		public Alter_login_sql_serverContext alter_login_sql_server() {
			return GetRuleContext<Alter_login_sql_serverContext>(0);
		}
		public Alter_master_key_azure_sqlContext alter_master_key_azure_sql() {
			return GetRuleContext<Alter_master_key_azure_sqlContext>(0);
		}
		public Alter_master_key_sql_serverContext alter_master_key_sql_server() {
			return GetRuleContext<Alter_master_key_sql_serverContext>(0);
		}
		public Alter_message_typeContext alter_message_type() {
			return GetRuleContext<Alter_message_typeContext>(0);
		}
		public Alter_partition_functionContext alter_partition_function() {
			return GetRuleContext<Alter_partition_functionContext>(0);
		}
		public Alter_partition_schemeContext alter_partition_scheme() {
			return GetRuleContext<Alter_partition_schemeContext>(0);
		}
		public Alter_remote_service_bindingContext alter_remote_service_binding() {
			return GetRuleContext<Alter_remote_service_bindingContext>(0);
		}
		public Alter_resource_governorContext alter_resource_governor() {
			return GetRuleContext<Alter_resource_governorContext>(0);
		}
		public Alter_schema_azure_sql_dw_and_pdwContext alter_schema_azure_sql_dw_and_pdw() {
			return GetRuleContext<Alter_schema_azure_sql_dw_and_pdwContext>(0);
		}
		public Alter_schema_sqlContext alter_schema_sql() {
			return GetRuleContext<Alter_schema_sqlContext>(0);
		}
		public Alter_sequenceContext alter_sequence() {
			return GetRuleContext<Alter_sequenceContext>(0);
		}
		public Alter_server_auditContext alter_server_audit() {
			return GetRuleContext<Alter_server_auditContext>(0);
		}
		public Alter_server_audit_specificationContext alter_server_audit_specification() {
			return GetRuleContext<Alter_server_audit_specificationContext>(0);
		}
		public Alter_server_configurationContext alter_server_configuration() {
			return GetRuleContext<Alter_server_configurationContext>(0);
		}
		public Alter_server_roleContext alter_server_role() {
			return GetRuleContext<Alter_server_roleContext>(0);
		}
		public Alter_server_role_pdwContext alter_server_role_pdw() {
			return GetRuleContext<Alter_server_role_pdwContext>(0);
		}
		public Alter_serviceContext alter_service() {
			return GetRuleContext<Alter_serviceContext>(0);
		}
		public Alter_service_master_keyContext alter_service_master_key() {
			return GetRuleContext<Alter_service_master_keyContext>(0);
		}
		public Alter_symmetric_keyContext alter_symmetric_key() {
			return GetRuleContext<Alter_symmetric_keyContext>(0);
		}
		public Alter_tableContext alter_table() {
			return GetRuleContext<Alter_tableContext>(0);
		}
		public Alter_userContext alter_user() {
			return GetRuleContext<Alter_userContext>(0);
		}
		public Alter_user_azure_sqlContext alter_user_azure_sql() {
			return GetRuleContext<Alter_user_azure_sqlContext>(0);
		}
		public Alter_workload_groupContext alter_workload_group() {
			return GetRuleContext<Alter_workload_groupContext>(0);
		}
		public Alter_xml_schema_collectionContext alter_xml_schema_collection() {
			return GetRuleContext<Alter_xml_schema_collectionContext>(0);
		}
		public Create_application_roleContext create_application_role() {
			return GetRuleContext<Create_application_roleContext>(0);
		}
		public Create_assemblyContext create_assembly() {
			return GetRuleContext<Create_assemblyContext>(0);
		}
		public Create_asymmetric_keyContext create_asymmetric_key() {
			return GetRuleContext<Create_asymmetric_keyContext>(0);
		}
		public Create_column_encryption_keyContext create_column_encryption_key() {
			return GetRuleContext<Create_column_encryption_keyContext>(0);
		}
		public Create_column_master_keyContext create_column_master_key() {
			return GetRuleContext<Create_column_master_keyContext>(0);
		}
		public Create_columnstore_indexContext create_columnstore_index() {
			return GetRuleContext<Create_columnstore_indexContext>(0);
		}
		public Create_credentialContext create_credential() {
			return GetRuleContext<Create_credentialContext>(0);
		}
		public Create_cryptographic_providerContext create_cryptographic_provider() {
			return GetRuleContext<Create_cryptographic_providerContext>(0);
		}
		public Create_databaseContext create_database() {
			return GetRuleContext<Create_databaseContext>(0);
		}
		public Create_database_azureContext create_database_azure() {
			return GetRuleContext<Create_database_azureContext>(0);
		}
		public Create_database_audit_specificationContext create_database_audit_specification() {
			return GetRuleContext<Create_database_audit_specificationContext>(0);
		}
		public Create_db_roleContext create_db_role() {
			return GetRuleContext<Create_db_roleContext>(0);
		}
		public Create_endpointContext create_endpoint() {
			return GetRuleContext<Create_endpointContext>(0);
		}
		public Create_event_notificationContext create_event_notification() {
			return GetRuleContext<Create_event_notificationContext>(0);
		}
		public Create_external_libraryContext create_external_library() {
			return GetRuleContext<Create_external_libraryContext>(0);
		}
		public Create_external_resource_poolContext create_external_resource_pool() {
			return GetRuleContext<Create_external_resource_poolContext>(0);
		}
		public Create_fulltext_catalogContext create_fulltext_catalog() {
			return GetRuleContext<Create_fulltext_catalogContext>(0);
		}
		public Create_fulltext_stoplistContext create_fulltext_stoplist() {
			return GetRuleContext<Create_fulltext_stoplistContext>(0);
		}
		public Create_indexContext create_index() {
			return GetRuleContext<Create_indexContext>(0);
		}
		public Create_login_azure_sqlContext create_login_azure_sql() {
			return GetRuleContext<Create_login_azure_sqlContext>(0);
		}
		public Create_login_pdwContext create_login_pdw() {
			return GetRuleContext<Create_login_pdwContext>(0);
		}
		public Create_login_sql_serverContext create_login_sql_server() {
			return GetRuleContext<Create_login_sql_serverContext>(0);
		}
		public Create_master_key_azure_sqlContext create_master_key_azure_sql() {
			return GetRuleContext<Create_master_key_azure_sqlContext>(0);
		}
		public Create_master_key_sql_serverContext create_master_key_sql_server() {
			return GetRuleContext<Create_master_key_sql_serverContext>(0);
		}
		public Create_nonclustered_columnstore_indexContext create_nonclustered_columnstore_index() {
			return GetRuleContext<Create_nonclustered_columnstore_indexContext>(0);
		}
		public Create_or_alter_broker_priorityContext create_or_alter_broker_priority() {
			return GetRuleContext<Create_or_alter_broker_priorityContext>(0);
		}
		public Create_or_alter_event_sessionContext create_or_alter_event_session() {
			return GetRuleContext<Create_or_alter_event_sessionContext>(0);
		}
		public Create_partition_functionContext create_partition_function() {
			return GetRuleContext<Create_partition_functionContext>(0);
		}
		public Create_partition_schemeContext create_partition_scheme() {
			return GetRuleContext<Create_partition_schemeContext>(0);
		}
		public Create_remote_service_bindingContext create_remote_service_binding() {
			return GetRuleContext<Create_remote_service_bindingContext>(0);
		}
		public Create_resource_poolContext create_resource_pool() {
			return GetRuleContext<Create_resource_poolContext>(0);
		}
		public Create_routeContext create_route() {
			return GetRuleContext<Create_routeContext>(0);
		}
		public Create_ruleContext create_rule() {
			return GetRuleContext<Create_ruleContext>(0);
		}
		public Create_schemaContext create_schema() {
			return GetRuleContext<Create_schemaContext>(0);
		}
		public Create_schema_azure_sql_dw_and_pdwContext create_schema_azure_sql_dw_and_pdw() {
			return GetRuleContext<Create_schema_azure_sql_dw_and_pdwContext>(0);
		}
		public Create_search_property_listContext create_search_property_list() {
			return GetRuleContext<Create_search_property_listContext>(0);
		}
		public Create_security_policyContext create_security_policy() {
			return GetRuleContext<Create_security_policyContext>(0);
		}
		public Create_sequenceContext create_sequence() {
			return GetRuleContext<Create_sequenceContext>(0);
		}
		public Create_server_auditContext create_server_audit() {
			return GetRuleContext<Create_server_auditContext>(0);
		}
		public Create_server_audit_specificationContext create_server_audit_specification() {
			return GetRuleContext<Create_server_audit_specificationContext>(0);
		}
		public Create_server_roleContext create_server_role() {
			return GetRuleContext<Create_server_roleContext>(0);
		}
		public Create_serviceContext create_service() {
			return GetRuleContext<Create_serviceContext>(0);
		}
		public Create_statisticsContext create_statistics() {
			return GetRuleContext<Create_statisticsContext>(0);
		}
		public Create_synonymContext create_synonym() {
			return GetRuleContext<Create_synonymContext>(0);
		}
		public Create_tableContext create_table() {
			return GetRuleContext<Create_tableContext>(0);
		}
		public Create_typeContext create_type() {
			return GetRuleContext<Create_typeContext>(0);
		}
		public Create_userContext create_user() {
			return GetRuleContext<Create_userContext>(0);
		}
		public Create_user_azure_sql_dwContext create_user_azure_sql_dw() {
			return GetRuleContext<Create_user_azure_sql_dwContext>(0);
		}
		public Create_workload_groupContext create_workload_group() {
			return GetRuleContext<Create_workload_groupContext>(0);
		}
		public Create_xml_indexContext create_xml_index() {
			return GetRuleContext<Create_xml_indexContext>(0);
		}
		public Create_xml_schema_collectionContext create_xml_schema_collection() {
			return GetRuleContext<Create_xml_schema_collectionContext>(0);
		}
		public Disable_triggerContext disable_trigger() {
			return GetRuleContext<Disable_triggerContext>(0);
		}
		public Drop_aggregateContext drop_aggregate() {
			return GetRuleContext<Drop_aggregateContext>(0);
		}
		public Drop_application_roleContext drop_application_role() {
			return GetRuleContext<Drop_application_roleContext>(0);
		}
		public Drop_assemblyContext drop_assembly() {
			return GetRuleContext<Drop_assemblyContext>(0);
		}
		public Drop_asymmetric_keyContext drop_asymmetric_key() {
			return GetRuleContext<Drop_asymmetric_keyContext>(0);
		}
		public Drop_availability_groupContext drop_availability_group() {
			return GetRuleContext<Drop_availability_groupContext>(0);
		}
		public Drop_broker_priorityContext drop_broker_priority() {
			return GetRuleContext<Drop_broker_priorityContext>(0);
		}
		public Drop_certificateContext drop_certificate() {
			return GetRuleContext<Drop_certificateContext>(0);
		}
		public Drop_column_encryption_keyContext drop_column_encryption_key() {
			return GetRuleContext<Drop_column_encryption_keyContext>(0);
		}
		public Drop_column_master_keyContext drop_column_master_key() {
			return GetRuleContext<Drop_column_master_keyContext>(0);
		}
		public Drop_contractContext drop_contract() {
			return GetRuleContext<Drop_contractContext>(0);
		}
		public Drop_credentialContext drop_credential() {
			return GetRuleContext<Drop_credentialContext>(0);
		}
		public Drop_cryptograhic_providerContext drop_cryptograhic_provider() {
			return GetRuleContext<Drop_cryptograhic_providerContext>(0);
		}
		public Drop_databaseContext drop_database() {
			return GetRuleContext<Drop_databaseContext>(0);
		}
		public Drop_database_audit_specificationContext drop_database_audit_specification() {
			return GetRuleContext<Drop_database_audit_specificationContext>(0);
		}
		public Drop_database_encryption_keyContext drop_database_encryption_key() {
			return GetRuleContext<Drop_database_encryption_keyContext>(0);
		}
		public Drop_database_scoped_credentialContext drop_database_scoped_credential() {
			return GetRuleContext<Drop_database_scoped_credentialContext>(0);
		}
		public Drop_db_roleContext drop_db_role() {
			return GetRuleContext<Drop_db_roleContext>(0);
		}
		public Drop_defaultContext drop_default() {
			return GetRuleContext<Drop_defaultContext>(0);
		}
		public Drop_endpointContext drop_endpoint() {
			return GetRuleContext<Drop_endpointContext>(0);
		}
		public Drop_event_notificationsContext drop_event_notifications() {
			return GetRuleContext<Drop_event_notificationsContext>(0);
		}
		public Drop_event_sessionContext drop_event_session() {
			return GetRuleContext<Drop_event_sessionContext>(0);
		}
		public Drop_external_data_sourceContext drop_external_data_source() {
			return GetRuleContext<Drop_external_data_sourceContext>(0);
		}
		public Drop_external_file_formatContext drop_external_file_format() {
			return GetRuleContext<Drop_external_file_formatContext>(0);
		}
		public Drop_external_libraryContext drop_external_library() {
			return GetRuleContext<Drop_external_libraryContext>(0);
		}
		public Drop_external_resource_poolContext drop_external_resource_pool() {
			return GetRuleContext<Drop_external_resource_poolContext>(0);
		}
		public Drop_external_tableContext drop_external_table() {
			return GetRuleContext<Drop_external_tableContext>(0);
		}
		public Drop_fulltext_catalogContext drop_fulltext_catalog() {
			return GetRuleContext<Drop_fulltext_catalogContext>(0);
		}
		public Drop_fulltext_indexContext drop_fulltext_index() {
			return GetRuleContext<Drop_fulltext_indexContext>(0);
		}
		public Drop_fulltext_stoplistContext drop_fulltext_stoplist() {
			return GetRuleContext<Drop_fulltext_stoplistContext>(0);
		}
		public Drop_functionContext drop_function() {
			return GetRuleContext<Drop_functionContext>(0);
		}
		public Drop_indexContext drop_index() {
			return GetRuleContext<Drop_indexContext>(0);
		}
		public Drop_loginContext drop_login() {
			return GetRuleContext<Drop_loginContext>(0);
		}
		public Drop_master_keyContext drop_master_key() {
			return GetRuleContext<Drop_master_keyContext>(0);
		}
		public Drop_message_typeContext drop_message_type() {
			return GetRuleContext<Drop_message_typeContext>(0);
		}
		public Drop_partition_functionContext drop_partition_function() {
			return GetRuleContext<Drop_partition_functionContext>(0);
		}
		public Drop_partition_schemeContext drop_partition_scheme() {
			return GetRuleContext<Drop_partition_schemeContext>(0);
		}
		public Drop_procedureContext drop_procedure() {
			return GetRuleContext<Drop_procedureContext>(0);
		}
		public Drop_queueContext drop_queue() {
			return GetRuleContext<Drop_queueContext>(0);
		}
		public Drop_remote_service_bindingContext drop_remote_service_binding() {
			return GetRuleContext<Drop_remote_service_bindingContext>(0);
		}
		public Drop_resource_poolContext drop_resource_pool() {
			return GetRuleContext<Drop_resource_poolContext>(0);
		}
		public Drop_routeContext drop_route() {
			return GetRuleContext<Drop_routeContext>(0);
		}
		public Drop_ruleContext drop_rule() {
			return GetRuleContext<Drop_ruleContext>(0);
		}
		public Drop_schemaContext drop_schema() {
			return GetRuleContext<Drop_schemaContext>(0);
		}
		public Drop_search_property_listContext drop_search_property_list() {
			return GetRuleContext<Drop_search_property_listContext>(0);
		}
		public Drop_security_policyContext drop_security_policy() {
			return GetRuleContext<Drop_security_policyContext>(0);
		}
		public Drop_sequenceContext drop_sequence() {
			return GetRuleContext<Drop_sequenceContext>(0);
		}
		public Drop_server_auditContext drop_server_audit() {
			return GetRuleContext<Drop_server_auditContext>(0);
		}
		public Drop_server_audit_specificationContext drop_server_audit_specification() {
			return GetRuleContext<Drop_server_audit_specificationContext>(0);
		}
		public Drop_server_roleContext drop_server_role() {
			return GetRuleContext<Drop_server_roleContext>(0);
		}
		public Drop_serviceContext drop_service() {
			return GetRuleContext<Drop_serviceContext>(0);
		}
		public Drop_signatureContext drop_signature() {
			return GetRuleContext<Drop_signatureContext>(0);
		}
		public Drop_statisticsContext drop_statistics() {
			return GetRuleContext<Drop_statisticsContext>(0);
		}
		public Drop_statistics_name_azure_dw_and_pdwContext drop_statistics_name_azure_dw_and_pdw() {
			return GetRuleContext<Drop_statistics_name_azure_dw_and_pdwContext>(0);
		}
		public Drop_symmetric_keyContext drop_symmetric_key() {
			return GetRuleContext<Drop_symmetric_keyContext>(0);
		}
		public Drop_synonymContext drop_synonym() {
			return GetRuleContext<Drop_synonymContext>(0);
		}
		public Drop_tableContext drop_table() {
			return GetRuleContext<Drop_tableContext>(0);
		}
		public Drop_triggerContext drop_trigger() {
			return GetRuleContext<Drop_triggerContext>(0);
		}
		public Drop_typeContext drop_type() {
			return GetRuleContext<Drop_typeContext>(0);
		}
		public Drop_userContext drop_user() {
			return GetRuleContext<Drop_userContext>(0);
		}
		public Drop_viewContext drop_view() {
			return GetRuleContext<Drop_viewContext>(0);
		}
		public Drop_workload_groupContext drop_workload_group() {
			return GetRuleContext<Drop_workload_groupContext>(0);
		}
		public Drop_xml_schema_collectionContext drop_xml_schema_collection() {
			return GetRuleContext<Drop_xml_schema_collectionContext>(0);
		}
		public Enable_triggerContext enable_trigger() {
			return GetRuleContext<Enable_triggerContext>(0);
		}
		public Lock_tableContext lock_table() {
			return GetRuleContext<Lock_tableContext>(0);
		}
		public Truncate_tableContext truncate_table() {
			return GetRuleContext<Truncate_tableContext>(0);
		}
		public Update_statisticsContext update_statistics() {
			return GetRuleContext<Update_statisticsContext>(0);
		}
		public Ddl_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDdl_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDdl_clause(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_clauseContext ddl_clause() {
		Ddl_clauseContext _localctx = new Ddl_clauseContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_ddl_clause);
		try {
			State = 1500;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1334; alter_application_role();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1335; alter_assembly();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1336; alter_asymmetric_key();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1337; alter_authorization();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1338; alter_authorization_for_azure_dw();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1339; alter_authorization_for_parallel_dw();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1340; alter_authorization_for_sql_database();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1341; alter_availability_group();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1342; alter_certificate();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1343; alter_column_encryption_key();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1344; alter_credential();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1345; alter_cryptographic_provider();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1346; alter_database();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1347; alter_database_audit_specification();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1348; alter_db_role();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1349; alter_endpoint();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1350; alter_external_data_source();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1351; alter_external_library();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1352; alter_external_resource_pool();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1353; alter_fulltext_catalog();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1354; alter_fulltext_stoplist();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1355; alter_index();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1356; alter_login_azure_sql();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1357; alter_login_azure_sql_dw_and_pdw();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1358; alter_login_sql_server();
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1359; alter_master_key_azure_sql();
				}
				break;

			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1360; alter_master_key_sql_server();
				}
				break;

			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1361; alter_message_type();
				}
				break;

			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1362; alter_partition_function();
				}
				break;

			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1363; alter_partition_scheme();
				}
				break;

			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 1364; alter_remote_service_binding();
				}
				break;

			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 1365; alter_resource_governor();
				}
				break;

			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 1366; alter_schema_azure_sql_dw_and_pdw();
				}
				break;

			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 1367; alter_schema_sql();
				}
				break;

			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 1368; alter_sequence();
				}
				break;

			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 1369; alter_server_audit();
				}
				break;

			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 1370; alter_server_audit_specification();
				}
				break;

			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 1371; alter_server_configuration();
				}
				break;

			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 1372; alter_server_role();
				}
				break;

			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 1373; alter_server_role_pdw();
				}
				break;

			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 1374; alter_service();
				}
				break;

			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 1375; alter_service_master_key();
				}
				break;

			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 1376; alter_symmetric_key();
				}
				break;

			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 1377; alter_table();
				}
				break;

			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 1378; alter_user();
				}
				break;

			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 1379; alter_user_azure_sql();
				}
				break;

			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 1380; alter_workload_group();
				}
				break;

			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 1381; alter_xml_schema_collection();
				}
				break;

			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 1382; create_application_role();
				}
				break;

			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 1383; create_assembly();
				}
				break;

			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 1384; create_asymmetric_key();
				}
				break;

			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 1385; create_column_encryption_key();
				}
				break;

			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 1386; create_column_master_key();
				}
				break;

			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 1387; create_columnstore_index();
				}
				break;

			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 1388; create_credential();
				}
				break;

			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 1389; create_cryptographic_provider();
				}
				break;

			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 1390; create_database();
				}
				break;

			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 1391; create_database_azure();
				}
				break;

			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 1392; create_database_audit_specification();
				}
				break;

			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 1393; create_db_role();
				}
				break;

			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 1394; create_endpoint();
				}
				break;

			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 1395; create_event_notification();
				}
				break;

			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 1396; create_external_library();
				}
				break;

			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 1397; create_external_resource_pool();
				}
				break;

			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 1398; create_fulltext_catalog();
				}
				break;

			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 1399; create_fulltext_stoplist();
				}
				break;

			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 1400; create_index();
				}
				break;

			case 68:
				EnterOuterAlt(_localctx, 68);
				{
				State = 1401; create_login_azure_sql();
				}
				break;

			case 69:
				EnterOuterAlt(_localctx, 69);
				{
				State = 1402; create_login_pdw();
				}
				break;

			case 70:
				EnterOuterAlt(_localctx, 70);
				{
				State = 1403; create_login_sql_server();
				}
				break;

			case 71:
				EnterOuterAlt(_localctx, 71);
				{
				State = 1404; create_master_key_azure_sql();
				}
				break;

			case 72:
				EnterOuterAlt(_localctx, 72);
				{
				State = 1405; create_master_key_sql_server();
				}
				break;

			case 73:
				EnterOuterAlt(_localctx, 73);
				{
				State = 1406; create_nonclustered_columnstore_index();
				}
				break;

			case 74:
				EnterOuterAlt(_localctx, 74);
				{
				State = 1407; create_or_alter_broker_priority();
				}
				break;

			case 75:
				EnterOuterAlt(_localctx, 75);
				{
				State = 1408; create_or_alter_event_session();
				}
				break;

			case 76:
				EnterOuterAlt(_localctx, 76);
				{
				State = 1409; create_partition_function();
				}
				break;

			case 77:
				EnterOuterAlt(_localctx, 77);
				{
				State = 1410; create_partition_scheme();
				}
				break;

			case 78:
				EnterOuterAlt(_localctx, 78);
				{
				State = 1411; create_remote_service_binding();
				}
				break;

			case 79:
				EnterOuterAlt(_localctx, 79);
				{
				State = 1412; create_resource_pool();
				}
				break;

			case 80:
				EnterOuterAlt(_localctx, 80);
				{
				State = 1413; create_route();
				}
				break;

			case 81:
				EnterOuterAlt(_localctx, 81);
				{
				State = 1414; create_rule();
				}
				break;

			case 82:
				EnterOuterAlt(_localctx, 82);
				{
				State = 1415; create_schema();
				}
				break;

			case 83:
				EnterOuterAlt(_localctx, 83);
				{
				State = 1416; create_schema_azure_sql_dw_and_pdw();
				}
				break;

			case 84:
				EnterOuterAlt(_localctx, 84);
				{
				State = 1417; create_search_property_list();
				}
				break;

			case 85:
				EnterOuterAlt(_localctx, 85);
				{
				State = 1418; create_security_policy();
				}
				break;

			case 86:
				EnterOuterAlt(_localctx, 86);
				{
				State = 1419; create_sequence();
				}
				break;

			case 87:
				EnterOuterAlt(_localctx, 87);
				{
				State = 1420; create_server_audit();
				}
				break;

			case 88:
				EnterOuterAlt(_localctx, 88);
				{
				State = 1421; create_server_audit_specification();
				}
				break;

			case 89:
				EnterOuterAlt(_localctx, 89);
				{
				State = 1422; create_server_role();
				}
				break;

			case 90:
				EnterOuterAlt(_localctx, 90);
				{
				State = 1423; create_service();
				}
				break;

			case 91:
				EnterOuterAlt(_localctx, 91);
				{
				State = 1424; create_statistics();
				}
				break;

			case 92:
				EnterOuterAlt(_localctx, 92);
				{
				State = 1425; create_synonym();
				}
				break;

			case 93:
				EnterOuterAlt(_localctx, 93);
				{
				State = 1426; create_table();
				}
				break;

			case 94:
				EnterOuterAlt(_localctx, 94);
				{
				State = 1427; create_type();
				}
				break;

			case 95:
				EnterOuterAlt(_localctx, 95);
				{
				State = 1428; create_user();
				}
				break;

			case 96:
				EnterOuterAlt(_localctx, 96);
				{
				State = 1429; create_user_azure_sql_dw();
				}
				break;

			case 97:
				EnterOuterAlt(_localctx, 97);
				{
				State = 1430; create_workload_group();
				}
				break;

			case 98:
				EnterOuterAlt(_localctx, 98);
				{
				State = 1431; create_xml_index();
				}
				break;

			case 99:
				EnterOuterAlt(_localctx, 99);
				{
				State = 1432; create_xml_schema_collection();
				}
				break;

			case 100:
				EnterOuterAlt(_localctx, 100);
				{
				State = 1433; disable_trigger();
				}
				break;

			case 101:
				EnterOuterAlt(_localctx, 101);
				{
				State = 1434; drop_aggregate();
				}
				break;

			case 102:
				EnterOuterAlt(_localctx, 102);
				{
				State = 1435; drop_application_role();
				}
				break;

			case 103:
				EnterOuterAlt(_localctx, 103);
				{
				State = 1436; drop_assembly();
				}
				break;

			case 104:
				EnterOuterAlt(_localctx, 104);
				{
				State = 1437; drop_asymmetric_key();
				}
				break;

			case 105:
				EnterOuterAlt(_localctx, 105);
				{
				State = 1438; drop_availability_group();
				}
				break;

			case 106:
				EnterOuterAlt(_localctx, 106);
				{
				State = 1439; drop_broker_priority();
				}
				break;

			case 107:
				EnterOuterAlt(_localctx, 107);
				{
				State = 1440; drop_certificate();
				}
				break;

			case 108:
				EnterOuterAlt(_localctx, 108);
				{
				State = 1441; drop_column_encryption_key();
				}
				break;

			case 109:
				EnterOuterAlt(_localctx, 109);
				{
				State = 1442; drop_column_master_key();
				}
				break;

			case 110:
				EnterOuterAlt(_localctx, 110);
				{
				State = 1443; drop_contract();
				}
				break;

			case 111:
				EnterOuterAlt(_localctx, 111);
				{
				State = 1444; drop_credential();
				}
				break;

			case 112:
				EnterOuterAlt(_localctx, 112);
				{
				State = 1445; drop_cryptograhic_provider();
				}
				break;

			case 113:
				EnterOuterAlt(_localctx, 113);
				{
				State = 1446; drop_database();
				}
				break;

			case 114:
				EnterOuterAlt(_localctx, 114);
				{
				State = 1447; drop_database_audit_specification();
				}
				break;

			case 115:
				EnterOuterAlt(_localctx, 115);
				{
				State = 1448; drop_database_encryption_key();
				}
				break;

			case 116:
				EnterOuterAlt(_localctx, 116);
				{
				State = 1449; drop_database_scoped_credential();
				}
				break;

			case 117:
				EnterOuterAlt(_localctx, 117);
				{
				State = 1450; drop_db_role();
				}
				break;

			case 118:
				EnterOuterAlt(_localctx, 118);
				{
				State = 1451; drop_default();
				}
				break;

			case 119:
				EnterOuterAlt(_localctx, 119);
				{
				State = 1452; drop_endpoint();
				}
				break;

			case 120:
				EnterOuterAlt(_localctx, 120);
				{
				State = 1453; drop_event_notifications();
				}
				break;

			case 121:
				EnterOuterAlt(_localctx, 121);
				{
				State = 1454; drop_event_session();
				}
				break;

			case 122:
				EnterOuterAlt(_localctx, 122);
				{
				State = 1455; drop_external_data_source();
				}
				break;

			case 123:
				EnterOuterAlt(_localctx, 123);
				{
				State = 1456; drop_external_file_format();
				}
				break;

			case 124:
				EnterOuterAlt(_localctx, 124);
				{
				State = 1457; drop_external_library();
				}
				break;

			case 125:
				EnterOuterAlt(_localctx, 125);
				{
				State = 1458; drop_external_resource_pool();
				}
				break;

			case 126:
				EnterOuterAlt(_localctx, 126);
				{
				State = 1459; drop_external_table();
				}
				break;

			case 127:
				EnterOuterAlt(_localctx, 127);
				{
				State = 1460; drop_fulltext_catalog();
				}
				break;

			case 128:
				EnterOuterAlt(_localctx, 128);
				{
				State = 1461; drop_fulltext_index();
				}
				break;

			case 129:
				EnterOuterAlt(_localctx, 129);
				{
				State = 1462; drop_fulltext_stoplist();
				}
				break;

			case 130:
				EnterOuterAlt(_localctx, 130);
				{
				State = 1463; drop_function();
				}
				break;

			case 131:
				EnterOuterAlt(_localctx, 131);
				{
				State = 1464; drop_index();
				}
				break;

			case 132:
				EnterOuterAlt(_localctx, 132);
				{
				State = 1465; drop_login();
				}
				break;

			case 133:
				EnterOuterAlt(_localctx, 133);
				{
				State = 1466; drop_master_key();
				}
				break;

			case 134:
				EnterOuterAlt(_localctx, 134);
				{
				State = 1467; drop_message_type();
				}
				break;

			case 135:
				EnterOuterAlt(_localctx, 135);
				{
				State = 1468; drop_partition_function();
				}
				break;

			case 136:
				EnterOuterAlt(_localctx, 136);
				{
				State = 1469; drop_partition_scheme();
				}
				break;

			case 137:
				EnterOuterAlt(_localctx, 137);
				{
				State = 1470; drop_procedure();
				}
				break;

			case 138:
				EnterOuterAlt(_localctx, 138);
				{
				State = 1471; drop_queue();
				}
				break;

			case 139:
				EnterOuterAlt(_localctx, 139);
				{
				State = 1472; drop_remote_service_binding();
				}
				break;

			case 140:
				EnterOuterAlt(_localctx, 140);
				{
				State = 1473; drop_resource_pool();
				}
				break;

			case 141:
				EnterOuterAlt(_localctx, 141);
				{
				State = 1474; drop_route();
				}
				break;

			case 142:
				EnterOuterAlt(_localctx, 142);
				{
				State = 1475; drop_rule();
				}
				break;

			case 143:
				EnterOuterAlt(_localctx, 143);
				{
				State = 1476; drop_schema();
				}
				break;

			case 144:
				EnterOuterAlt(_localctx, 144);
				{
				State = 1477; drop_search_property_list();
				}
				break;

			case 145:
				EnterOuterAlt(_localctx, 145);
				{
				State = 1478; drop_security_policy();
				}
				break;

			case 146:
				EnterOuterAlt(_localctx, 146);
				{
				State = 1479; drop_sequence();
				}
				break;

			case 147:
				EnterOuterAlt(_localctx, 147);
				{
				State = 1480; drop_server_audit();
				}
				break;

			case 148:
				EnterOuterAlt(_localctx, 148);
				{
				State = 1481; drop_server_audit_specification();
				}
				break;

			case 149:
				EnterOuterAlt(_localctx, 149);
				{
				State = 1482; drop_server_role();
				}
				break;

			case 150:
				EnterOuterAlt(_localctx, 150);
				{
				State = 1483; drop_service();
				}
				break;

			case 151:
				EnterOuterAlt(_localctx, 151);
				{
				State = 1484; drop_signature();
				}
				break;

			case 152:
				EnterOuterAlt(_localctx, 152);
				{
				State = 1485; drop_statistics();
				}
				break;

			case 153:
				EnterOuterAlt(_localctx, 153);
				{
				State = 1486; drop_statistics_name_azure_dw_and_pdw();
				}
				break;

			case 154:
				EnterOuterAlt(_localctx, 154);
				{
				State = 1487; drop_symmetric_key();
				}
				break;

			case 155:
				EnterOuterAlt(_localctx, 155);
				{
				State = 1488; drop_synonym();
				}
				break;

			case 156:
				EnterOuterAlt(_localctx, 156);
				{
				State = 1489; drop_table();
				}
				break;

			case 157:
				EnterOuterAlt(_localctx, 157);
				{
				State = 1490; drop_trigger();
				}
				break;

			case 158:
				EnterOuterAlt(_localctx, 158);
				{
				State = 1491; drop_type();
				}
				break;

			case 159:
				EnterOuterAlt(_localctx, 159);
				{
				State = 1492; drop_user();
				}
				break;

			case 160:
				EnterOuterAlt(_localctx, 160);
				{
				State = 1493; drop_view();
				}
				break;

			case 161:
				EnterOuterAlt(_localctx, 161);
				{
				State = 1494; drop_workload_group();
				}
				break;

			case 162:
				EnterOuterAlt(_localctx, 162);
				{
				State = 1495; drop_xml_schema_collection();
				}
				break;

			case 163:
				EnterOuterAlt(_localctx, 163);
				{
				State = 1496; enable_trigger();
				}
				break;

			case 164:
				EnterOuterAlt(_localctx, 164);
				{
				State = 1497; lock_table();
				}
				break;

			case 165:
				EnterOuterAlt(_localctx, 165);
				{
				State = 1498; truncate_table();
				}
				break;

			case 166:
				EnterOuterAlt(_localctx, 166);
				{
				State = 1499; update_statistics();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_statementContext : ParserRuleContext {
		public Backup_databaseContext backup_database() {
			return GetRuleContext<Backup_databaseContext>(0);
		}
		public Backup_logContext backup_log() {
			return GetRuleContext<Backup_logContext>(0);
		}
		public Backup_certificateContext backup_certificate() {
			return GetRuleContext<Backup_certificateContext>(0);
		}
		public Backup_master_keyContext backup_master_key() {
			return GetRuleContext<Backup_master_keyContext>(0);
		}
		public Backup_service_master_keyContext backup_service_master_key() {
			return GetRuleContext<Backup_service_master_keyContext>(0);
		}
		public Backup_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_statement(this);
		}
	}

	[RuleVersion(0)]
	public Backup_statementContext backup_statement() {
		Backup_statementContext _localctx = new Backup_statementContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_backup_statement);
		try {
			State = 1507;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1502; backup_database();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1503; backup_log();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1504; backup_certificate();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1505; backup_master_key();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1506; backup_service_master_key();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cfl_statementContext : ParserRuleContext {
		public Block_statementContext block_statement() {
			return GetRuleContext<Block_statementContext>(0);
		}
		public Break_statementContext break_statement() {
			return GetRuleContext<Break_statementContext>(0);
		}
		public Continue_statementContext continue_statement() {
			return GetRuleContext<Continue_statementContext>(0);
		}
		public Goto_statementContext goto_statement() {
			return GetRuleContext<Goto_statementContext>(0);
		}
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public Print_statementContext print_statement() {
			return GetRuleContext<Print_statementContext>(0);
		}
		public Raiseerror_statementContext raiseerror_statement() {
			return GetRuleContext<Raiseerror_statementContext>(0);
		}
		public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public Throw_statementContext throw_statement() {
			return GetRuleContext<Throw_statementContext>(0);
		}
		public Try_catch_statementContext try_catch_statement() {
			return GetRuleContext<Try_catch_statementContext>(0);
		}
		public Waitfor_statementContext waitfor_statement() {
			return GetRuleContext<Waitfor_statementContext>(0);
		}
		public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		public Cfl_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cfl_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCfl_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCfl_statement(this);
		}
	}

	[RuleVersion(0)]
	public Cfl_statementContext cfl_statement() {
		Cfl_statementContext _localctx = new Cfl_statementContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_cfl_statement);
		try {
			State = 1521;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1509; block_statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1510; break_statement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1511; continue_statement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1512; goto_statement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1513; if_statement();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1514; print_statement();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1515; raiseerror_statement();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1516; return_statement();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1517; throw_statement();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1518; try_catch_statement();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1519; waitfor_statement();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1520; while_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_statementContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public Block_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBlock_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBlock_statement(this);
		}
	}

	[RuleVersion(0)]
	public Block_statementContext block_statement() {
		Block_statementContext _localctx = new Block_statementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_block_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1523; Match(BEGIN);
			State = 1525;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				State = 1524; Match(SEMI);
				}
				break;
			}
			State = 1530;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,23,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1527; sql_clauses();
					}
					} 
				}
				State = 1532;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,23,_ctx);
			}
			State = 1533; Match(END);
			State = 1535;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				State = 1534; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Break_statementContext : ParserRuleContext {
		public ITerminalNode BREAK() { return GetToken(TSqlParser.BREAK, 0); }
		public Break_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBreak_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBreak_statement(this);
		}
	}

	[RuleVersion(0)]
	public Break_statementContext break_statement() {
		Break_statementContext _localctx = new Break_statementContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_break_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1537; Match(BREAK);
			State = 1539;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				State = 1538; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Continue_statementContext : ParserRuleContext {
		public ITerminalNode CONTINUE() { return GetToken(TSqlParser.CONTINUE, 0); }
		public Continue_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continue_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterContinue_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitContinue_statement(this);
		}
	}

	[RuleVersion(0)]
	public Continue_statementContext continue_statement() {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_continue_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1541; Match(CONTINUE);
			State = 1543;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				State = 1542; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Goto_statementContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(TSqlParser.GOTO, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Goto_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goto_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGoto_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGoto_statement(this);
		}
	}

	[RuleVersion(0)]
	public Goto_statementContext goto_statement() {
		Goto_statementContext _localctx = new Goto_statementContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_goto_statement);
		try {
			State = 1555;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1545; Match(GOTO);
				State = 1546; id_();
				State = 1548;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
				case 1:
					{
					State = 1547; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1550; id_();
				State = 1551; Match(COLON);
				State = 1553;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
				case 1:
					{
					State = 1552; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_return_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1557; Match(RETURN);
			State = 1559;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 1558; expression(0);
				}
				break;
			}
			State = 1562;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				State = 1561; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(TSqlParser.ELSE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1564; Match(IF);
			State = 1565; search_condition(0);
			State = 1566; sql_clauses();
			State = 1569;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				State = 1567; Match(ELSE);
				State = 1568; sql_clauses();
				}
				break;
			}
			State = 1572;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				State = 1571; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_statementContext : ParserRuleContext {
		public ITerminalNode THROW() { return GetToken(TSqlParser.THROW, 0); }
		public Throw_error_numberContext throw_error_number() {
			return GetRuleContext<Throw_error_numberContext>(0);
		}
		public Throw_messageContext throw_message() {
			return GetRuleContext<Throw_messageContext>(0);
		}
		public Throw_stateContext throw_state() {
			return GetRuleContext<Throw_stateContext>(0);
		}
		public Throw_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterThrow_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitThrow_statement(this);
		}
	}

	[RuleVersion(0)]
	public Throw_statementContext throw_statement() {
		Throw_statementContext _localctx = new Throw_statementContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_throw_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1574; Match(THROW);
			State = 1581;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				State = 1575; throw_error_number();
				State = 1576; Match(COMMA);
				State = 1577; throw_message();
				State = 1578; Match(COMMA);
				State = 1579; throw_state();
				}
				break;
			}
			State = 1584;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				{
				State = 1583; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_error_numberContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_error_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_error_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterThrow_error_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitThrow_error_number(this);
		}
	}

	[RuleVersion(0)]
	public Throw_error_numberContext throw_error_number() {
		Throw_error_numberContext _localctx = new Throw_error_numberContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_throw_error_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1586;
			_la = _input.La(1);
			if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_messageContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_messageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_message; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterThrow_message(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitThrow_message(this);
		}
	}

	[RuleVersion(0)]
	public Throw_messageContext throw_message() {
		Throw_messageContext _localctx = new Throw_messageContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_throw_message);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1588;
			_la = _input.La(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_stateContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_stateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_state; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterThrow_state(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitThrow_state(this);
		}
	}

	[RuleVersion(0)]
	public Throw_stateContext throw_state() {
		Throw_stateContext _localctx = new Throw_stateContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_throw_state);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1590;
			_la = _input.La(1);
			if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_catch_statementContext : ParserRuleContext {
		public Sql_clausesContext try_clauses;
		public Sql_clausesContext catch_clauses;
		public ITerminalNode[] BEGIN() { return GetTokens(TSqlParser.BEGIN); }
		public ITerminalNode BEGIN(int i) {
			return GetToken(TSqlParser.BEGIN, i);
		}
		public ITerminalNode[] TRY() { return GetTokens(TSqlParser.TRY); }
		public ITerminalNode TRY(int i) {
			return GetToken(TSqlParser.TRY, i);
		}
		public ITerminalNode[] END() { return GetTokens(TSqlParser.END); }
		public ITerminalNode END(int i) {
			return GetToken(TSqlParser.END, i);
		}
		public ITerminalNode[] CATCH() { return GetTokens(TSqlParser.CATCH); }
		public ITerminalNode CATCH(int i) {
			return GetToken(TSqlParser.CATCH, i);
		}
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public Try_catch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_catch_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTry_catch_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTry_catch_statement(this);
		}
	}

	[RuleVersion(0)]
	public Try_catch_statementContext try_catch_statement() {
		Try_catch_statementContext _localctx = new Try_catch_statementContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_try_catch_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1592; Match(BEGIN);
			State = 1593; Match(TRY);
			State = 1595;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				State = 1594; Match(SEMI);
				}
				break;
			}
			State = 1598;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1597; _localctx.try_clauses = sql_clauses();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1600;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 1602; Match(END);
			State = 1603; Match(TRY);
			State = 1605;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				State = 1604; Match(SEMI);
				}
				break;
			}
			State = 1607; Match(BEGIN);
			State = 1608; Match(CATCH);
			State = 1610;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
			case 1:
				{
				State = 1609; Match(SEMI);
				}
				break;
			}
			State = 1615;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,40,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1612; _localctx.catch_clauses = sql_clauses();
					}
					} 
				}
				State = 1617;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,40,_ctx);
			}
			State = 1618; Match(END);
			State = 1619; Match(CATCH);
			State = 1621;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				{
				State = 1620; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Waitfor_statementContext : ParserRuleContext {
		public ITerminalNode WAITFOR() { return GetToken(TSqlParser.WAITFOR, 0); }
		public Receive_statementContext receive_statement() {
			return GetRuleContext<Receive_statementContext>(0);
		}
		public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DELAY() { return GetToken(TSqlParser.DELAY, 0); }
		public ITerminalNode TIME() { return GetToken(TSqlParser.TIME, 0); }
		public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public Waitfor_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitfor_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWaitfor_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWaitfor_statement(this);
		}
	}

	[RuleVersion(0)]
	public Waitfor_statementContext waitfor_statement() {
		Waitfor_statementContext _localctx = new Waitfor_statementContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_waitfor_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1623; Match(WAITFOR);
			State = 1625;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				State = 1624; receive_statement();
				}
				break;
			}
			State = 1628;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				State = 1627; Match(COMMA);
				}
				break;
			}
			State = 1632;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				State = 1630;
				_la = _input.La(1);
				if ( !(_la==DELAY || _la==TIME || _la==TIMEOUT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1631; time();
				}
				break;
			}
			State = 1635;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				{
				State = 1634; expression(0);
				}
				break;
			}
			State = 1638;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				State = 1637; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(TSqlParser.WHILE, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Sql_clausesContext sql_clauses() {
			return GetRuleContext<Sql_clausesContext>(0);
		}
		public ITerminalNode BREAK() { return GetToken(TSqlParser.BREAK, 0); }
		public ITerminalNode CONTINUE() { return GetToken(TSqlParser.CONTINUE, 0); }
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1640; Match(WHILE);
			State = 1641; search_condition(0);
			State = 1651;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
			case 1:
				{
				State = 1642; sql_clauses();
				}
				break;

			case 2:
				{
				State = 1643; Match(BREAK);
				State = 1645;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
				case 1:
					{
					State = 1644; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 1647; Match(CONTINUE);
				State = 1649;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
				case 1:
					{
					State = 1648; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_statementContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(TSqlParser.PRINT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DOUBLE_QUOTE_ID() { return GetToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public Print_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrint_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrint_statement(this);
		}
	}

	[RuleVersion(0)]
	public Print_statementContext print_statement() {
		Print_statementContext _localctx = new Print_statementContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_print_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1653; Match(PRINT);
			State = 1656;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
			case 1:
				{
				State = 1654; expression(0);
				}
				break;

			case 2:
				{
				State = 1655; Match(DOUBLE_QUOTE_ID);
				}
				break;
			}
			State = 1662;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,51,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1658; Match(COMMA);
					State = 1659; Match(LOCAL_ID);
					}
					} 
				}
				State = 1664;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,51,_ctx);
			}
			State = 1666;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
			case 1:
				{
				State = 1665; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raiseerror_statementContext : ParserRuleContext {
		public IToken msg;
		public Constant_LOCAL_IDContext severity;
		public Constant_LOCAL_IDContext state;
		public IToken formatstring;
		public IToken argument;
		public ITerminalNode RAISERROR() { return GetToken(TSqlParser.RAISERROR, 0); }
		public Constant_LOCAL_IDContext[] constant_LOCAL_ID() {
			return GetRuleContexts<Constant_LOCAL_IDContext>();
		}
		public Constant_LOCAL_IDContext constant_LOCAL_ID(int i) {
			return GetRuleContext<Constant_LOCAL_IDContext>(i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode SETERROR() { return GetToken(TSqlParser.SETERROR, 0); }
		public ITerminalNode NOWAIT() { return GetToken(TSqlParser.NOWAIT, 0); }
		public ITerminalNode DOUBLE_QUOTE_ID() { return GetToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public Raiseerror_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseerror_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRaiseerror_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRaiseerror_statement(this);
		}
	}

	[RuleVersion(0)]
	public Raiseerror_statementContext raiseerror_statement() {
		Raiseerror_statementContext _localctx = new Raiseerror_statementContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_raiseerror_statement);
		int _la;
		try {
			int _alt;
			State = 1700;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1668; Match(RAISERROR);
				State = 1669; Match(LR_BRACKET);
				State = 1670;
				_localctx.msg = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 1126)) & ~0x3f) == 0 && ((1L << (_la - 1126)) & ((1L << (LOCAL_ID - 1126)) | (1L << (DECIMAL - 1126)) | (1L << (STRING - 1126)))) != 0)) ) {
					_localctx.msg = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1671; Match(COMMA);
				State = 1672; _localctx.severity = constant_LOCAL_ID();
				State = 1673; Match(COMMA);
				State = 1674; _localctx.state = constant_LOCAL_ID();
				State = 1679;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,53,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1675; Match(COMMA);
						State = 1676; constant_LOCAL_ID();
						}
						} 
					}
					State = 1681;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,53,_ctx);
				}
				State = 1682; Match(RR_BRACKET);
				State = 1685;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
				case 1:
					{
					State = 1683; Match(WITH);
					State = 1684;
					_la = _input.La(1);
					if ( !(_la==LOG || _la==NOWAIT || _la==SETERROR) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 1688;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,55,_ctx) ) {
				case 1:
					{
					State = 1687; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1690; Match(RAISERROR);
				State = 1691; Match(DECIMAL);
				State = 1692;
				_localctx.formatstring = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (DOUBLE_QUOTE_ID - 1123)) | (1L << (LOCAL_ID - 1123)) | (1L << (STRING - 1123)))) != 0)) ) {
					_localctx.formatstring = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1697;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,56,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1693; Match(COMMA);
						State = 1694;
						_localctx.argument = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 1126)) & ~0x3f) == 0 && ((1L << (_la - 1126)) & ((1L << (LOCAL_ID - 1126)) | (1L << (DECIMAL - 1126)) | (1L << (STRING - 1126)))) != 0)) ) {
							_localctx.argument = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						} 
					}
					State = 1699;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,56,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_statementContext : ParserRuleContext {
		public Empty_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEmpty_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEmpty_statement(this);
		}
	}

	[RuleVersion(0)]
	public Empty_statementContext empty_statement() {
		Empty_statementContext _localctx = new Empty_statementContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_empty_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1702; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Another_statementContext : ParserRuleContext {
		public Alter_queueContext alter_queue() {
			return GetRuleContext<Alter_queueContext>(0);
		}
		public Checkpoint_statementContext checkpoint_statement() {
			return GetRuleContext<Checkpoint_statementContext>(0);
		}
		public Conversation_statementContext conversation_statement() {
			return GetRuleContext<Conversation_statementContext>(0);
		}
		public Create_contractContext create_contract() {
			return GetRuleContext<Create_contractContext>(0);
		}
		public Create_queueContext create_queue() {
			return GetRuleContext<Create_queueContext>(0);
		}
		public Cursor_statementContext cursor_statement() {
			return GetRuleContext<Cursor_statementContext>(0);
		}
		public Declare_statementContext declare_statement() {
			return GetRuleContext<Declare_statementContext>(0);
		}
		public Execute_statementContext execute_statement() {
			return GetRuleContext<Execute_statementContext>(0);
		}
		public Kill_statementContext kill_statement() {
			return GetRuleContext<Kill_statementContext>(0);
		}
		public Message_statementContext message_statement() {
			return GetRuleContext<Message_statementContext>(0);
		}
		public Reconfigure_statementContext reconfigure_statement() {
			return GetRuleContext<Reconfigure_statementContext>(0);
		}
		public Security_statementContext security_statement() {
			return GetRuleContext<Security_statementContext>(0);
		}
		public Set_statementContext set_statement() {
			return GetRuleContext<Set_statementContext>(0);
		}
		public Setuser_statementContext setuser_statement() {
			return GetRuleContext<Setuser_statementContext>(0);
		}
		public Shutdown_statementContext shutdown_statement() {
			return GetRuleContext<Shutdown_statementContext>(0);
		}
		public Transaction_statementContext transaction_statement() {
			return GetRuleContext<Transaction_statementContext>(0);
		}
		public Use_statementContext use_statement() {
			return GetRuleContext<Use_statementContext>(0);
		}
		public Another_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_another_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAnother_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAnother_statement(this);
		}
	}

	[RuleVersion(0)]
	public Another_statementContext another_statement() {
		Another_statementContext _localctx = new Another_statementContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_another_statement);
		try {
			State = 1721;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1704; alter_queue();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1705; checkpoint_statement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1706; conversation_statement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1707; create_contract();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1708; create_queue();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1709; cursor_statement();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1710; declare_statement();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1711; execute_statement();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1712; kill_statement();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1713; message_statement();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1714; reconfigure_statement();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1715; security_statement();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1716; set_statement();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1717; setuser_statement();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1718; shutdown_statement();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1719; transaction_statement();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1720; use_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_application_roleContext : ParserRuleContext {
		public Id_Context appliction_role;
		public Id_Context new_application_role_name;
		public IToken application_role_password;
		public Id_Context app_role_default_schema;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode DEFAULT_SCHEMA() { return GetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_application_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_application_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_application_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_application_role(this);
		}
	}

	[RuleVersion(0)]
	public Alter_application_roleContext alter_application_role() {
		Alter_application_roleContext _localctx = new Alter_application_roleContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_alter_application_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1723; Match(ALTER);
			State = 1724; Match(APPLICATION);
			State = 1725; Match(ROLE);
			State = 1726; _localctx.appliction_role = id_();
			State = 1727; Match(WITH);
			State = 1734;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,60,_ctx) ) {
			case 1:
				{
				State = 1729;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,59,_ctx) ) {
				case 1:
					{
					State = 1728; Match(COMMA);
					}
					break;
				}
				State = 1731; Match(NAME);
				State = 1732; Match(EQUAL);
				State = 1733; _localctx.new_application_role_name = id_();
				}
				break;
			}
			State = 1742;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,62,_ctx) ) {
			case 1:
				{
				State = 1737;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
				case 1:
					{
					State = 1736; Match(COMMA);
					}
					break;
				}
				State = 1739; Match(PASSWORD);
				State = 1740; Match(EQUAL);
				State = 1741; _localctx.application_role_password = Match(STRING);
				}
				break;
			}
			State = 1750;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,64,_ctx) ) {
			case 1:
				{
				State = 1745;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
				case 1:
					{
					State = 1744; Match(COMMA);
					}
					break;
				}
				State = 1747; Match(DEFAULT_SCHEMA);
				State = 1748; Match(EQUAL);
				State = 1749; _localctx.app_role_default_schema = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_xml_schema_collectionContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Alter_xml_schema_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_xml_schema_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_xml_schema_collection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_xml_schema_collection(this);
		}
	}

	[RuleVersion(0)]
	public Alter_xml_schema_collectionContext alter_xml_schema_collection() {
		Alter_xml_schema_collectionContext _localctx = new Alter_xml_schema_collectionContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_alter_xml_schema_collection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1752; Match(ALTER);
			State = 1753; Match(XML);
			State = 1754; Match(SCHEMA);
			State = 1755; Match(COLLECTION);
			State = 1759;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
			case 1:
				{
				State = 1756; id_();
				State = 1757; Match(DOT);
				}
				break;
			}
			State = 1761; id_();
			State = 1762; Match(ADD);
			State = 1763; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_application_roleContext : ParserRuleContext {
		public Id_Context appliction_role;
		public IToken application_role_password;
		public Id_Context app_role_default_schema;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode DEFAULT_SCHEMA() { return GetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_application_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_application_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_application_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_application_role(this);
		}
	}

	[RuleVersion(0)]
	public Create_application_roleContext create_application_role() {
		Create_application_roleContext _localctx = new Create_application_roleContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_create_application_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1765; Match(CREATE);
			State = 1766; Match(APPLICATION);
			State = 1767; Match(ROLE);
			State = 1768; _localctx.appliction_role = id_();
			State = 1769; Match(WITH);
			State = 1776;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,67,_ctx) ) {
			case 1:
				{
				State = 1771;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
				case 1:
					{
					State = 1770; Match(COMMA);
					}
					break;
				}
				State = 1773; Match(PASSWORD);
				State = 1774; Match(EQUAL);
				State = 1775; _localctx.application_role_password = Match(STRING);
				}
				break;
			}
			State = 1784;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,69,_ctx) ) {
			case 1:
				{
				State = 1779;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
				case 1:
					{
					State = 1778; Match(COMMA);
					}
					break;
				}
				State = 1781; Match(DEFAULT_SCHEMA);
				State = 1782; Match(EQUAL);
				State = 1783; _localctx.app_role_default_schema = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_aggregateContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context aggregate_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode AGGREGATE() { return GetToken(TSqlParser.AGGREGATE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_aggregateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_aggregate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_aggregate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_aggregate(this);
		}
	}

	[RuleVersion(0)]
	public Drop_aggregateContext drop_aggregate() {
		Drop_aggregateContext _localctx = new Drop_aggregateContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_drop_aggregate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1786; Match(DROP);
			State = 1787; Match(AGGREGATE);
			State = 1790;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
			case 1:
				{
				State = 1788; Match(IF);
				State = 1789; Match(EXISTS);
				}
				break;
			}
			State = 1795;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
			case 1:
				{
				State = 1792; _localctx.schema_name = id_();
				State = 1793; Match(DOT);
				}
				break;
			}
			State = 1797; _localctx.aggregate_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_application_roleContext : ParserRuleContext {
		public Id_Context rolename;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_application_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_application_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_application_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_application_role(this);
		}
	}

	[RuleVersion(0)]
	public Drop_application_roleContext drop_application_role() {
		Drop_application_roleContext _localctx = new Drop_application_roleContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_drop_application_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1799; Match(DROP);
			State = 1800; Match(APPLICATION);
			State = 1801; Match(ROLE);
			State = 1802; _localctx.rolename = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assemblyContext : ParserRuleContext {
		public Id_Context assembly_name;
		public Alter_assembly_startContext alter_assembly_start() {
			return GetRuleContext<Alter_assembly_startContext>(0);
		}
		public Alter_assembly_clauseContext alter_assembly_clause() {
			return GetRuleContext<Alter_assembly_clauseContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Alter_assemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assemblyContext alter_assembly() {
		Alter_assemblyContext _localctx = new Alter_assemblyContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_alter_assembly);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1804; alter_assembly_start();
			State = 1805; _localctx.assembly_name = id_();
			State = 1806; alter_assembly_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_startContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public Alter_assembly_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_start(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_startContext alter_assembly_start() {
		Alter_assembly_startContext _localctx = new Alter_assembly_startContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_alter_assembly_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1808; Match(ALTER);
			State = 1809; Match(ASSEMBLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_clauseContext : ParserRuleContext {
		public Alter_assembly_from_clauseContext alter_assembly_from_clause() {
			return GetRuleContext<Alter_assembly_from_clauseContext>(0);
		}
		public Alter_assembly_with_clauseContext alter_assembly_with_clause() {
			return GetRuleContext<Alter_assembly_with_clauseContext>(0);
		}
		public Alter_assembly_drop_clauseContext alter_assembly_drop_clause() {
			return GetRuleContext<Alter_assembly_drop_clauseContext>(0);
		}
		public Alter_assembly_add_clauseContext alter_assembly_add_clause() {
			return GetRuleContext<Alter_assembly_add_clauseContext>(0);
		}
		public Alter_assembly_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_clause(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_clauseContext alter_assembly_clause() {
		Alter_assembly_clauseContext _localctx = new Alter_assembly_clauseContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_alter_assembly_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1812;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				State = 1811; alter_assembly_from_clause();
				}
				break;
			}
			State = 1815;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,73,_ctx) ) {
			case 1:
				{
				State = 1814; alter_assembly_with_clause();
				}
				break;
			}
			State = 1818;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				State = 1817; alter_assembly_drop_clause();
				}
				break;
			}
			State = 1821;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
			case 1:
				{
				State = 1820; alter_assembly_add_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_from_clauseContext : ParserRuleContext {
		public Alter_assembly_from_clause_startContext alter_assembly_from_clause_start() {
			return GetRuleContext<Alter_assembly_from_clause_startContext>(0);
		}
		public Client_assembly_specifierContext client_assembly_specifier() {
			return GetRuleContext<Client_assembly_specifierContext>(0);
		}
		public Alter_assembly_file_bitsContext alter_assembly_file_bits() {
			return GetRuleContext<Alter_assembly_file_bitsContext>(0);
		}
		public Alter_assembly_from_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_from_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_from_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_from_clause(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_from_clauseContext alter_assembly_from_clause() {
		Alter_assembly_from_clauseContext _localctx = new Alter_assembly_from_clauseContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_alter_assembly_from_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1823; alter_assembly_from_clause_start();
			State = 1826;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,76,_ctx) ) {
			case 1:
				{
				State = 1824; client_assembly_specifier();
				}
				break;

			case 2:
				{
				State = 1825; alter_assembly_file_bits();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_from_clause_startContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Alter_assembly_from_clause_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_from_clause_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_from_clause_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_from_clause_start(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_from_clause_startContext alter_assembly_from_clause_start() {
		Alter_assembly_from_clause_startContext _localctx = new Alter_assembly_from_clause_startContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_alter_assembly_from_clause_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1828; Match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_drop_clauseContext : ParserRuleContext {
		public Alter_assembly_dropContext alter_assembly_drop() {
			return GetRuleContext<Alter_assembly_dropContext>(0);
		}
		public Alter_assembly_drop_multiple_filesContext alter_assembly_drop_multiple_files() {
			return GetRuleContext<Alter_assembly_drop_multiple_filesContext>(0);
		}
		public Alter_assembly_drop_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_drop_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_drop_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_drop_clause(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_drop_clauseContext alter_assembly_drop_clause() {
		Alter_assembly_drop_clauseContext _localctx = new Alter_assembly_drop_clauseContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_alter_assembly_drop_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1830; alter_assembly_drop();
			State = 1831; alter_assembly_drop_multiple_files();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_drop_multiple_filesContext : ParserRuleContext {
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Multiple_local_filesContext multiple_local_files() {
			return GetRuleContext<Multiple_local_filesContext>(0);
		}
		public Alter_assembly_drop_multiple_filesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_drop_multiple_files; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_drop_multiple_files(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_drop_multiple_files(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_drop_multiple_filesContext alter_assembly_drop_multiple_files() {
		Alter_assembly_drop_multiple_filesContext _localctx = new Alter_assembly_drop_multiple_filesContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_alter_assembly_drop_multiple_files);
		try {
			State = 1835;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,77,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1833; Match(ALL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1834; multiple_local_files();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_dropContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Alter_assembly_dropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_drop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_drop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_drop(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_dropContext alter_assembly_drop() {
		Alter_assembly_dropContext _localctx = new Alter_assembly_dropContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_alter_assembly_drop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1837; Match(DROP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_add_clauseContext : ParserRuleContext {
		public Alter_asssembly_add_clause_startContext alter_asssembly_add_clause_start() {
			return GetRuleContext<Alter_asssembly_add_clause_startContext>(0);
		}
		public Alter_assembly_client_file_clauseContext alter_assembly_client_file_clause() {
			return GetRuleContext<Alter_assembly_client_file_clauseContext>(0);
		}
		public Alter_assembly_add_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_add_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_add_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_add_clause(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_add_clauseContext alter_assembly_add_clause() {
		Alter_assembly_add_clauseContext _localctx = new Alter_assembly_add_clauseContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_alter_assembly_add_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1839; alter_asssembly_add_clause_start();
			State = 1840; alter_assembly_client_file_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_asssembly_add_clause_startContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Alter_asssembly_add_clause_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_asssembly_add_clause_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_asssembly_add_clause_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_asssembly_add_clause_start(this);
		}
	}

	[RuleVersion(0)]
	public Alter_asssembly_add_clause_startContext alter_asssembly_add_clause_start() {
		Alter_asssembly_add_clause_startContext _localctx = new Alter_asssembly_add_clause_startContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_alter_asssembly_add_clause_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1842; Match(ADD);
			State = 1843; Match(FILE);
			State = 1844; Match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_client_file_clauseContext : ParserRuleContext {
		public Alter_assembly_file_nameContext alter_assembly_file_name() {
			return GetRuleContext<Alter_assembly_file_nameContext>(0);
		}
		public Alter_assembly_asContext alter_assembly_as() {
			return GetRuleContext<Alter_assembly_asContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Alter_assembly_client_file_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_client_file_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_client_file_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_client_file_clause(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_client_file_clauseContext alter_assembly_client_file_clause() {
		Alter_assembly_client_file_clauseContext _localctx = new Alter_assembly_client_file_clauseContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_alter_assembly_client_file_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1846; alter_assembly_file_name();
			State = 1850;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,78,_ctx) ) {
			case 1:
				{
				State = 1847; alter_assembly_as();
				State = 1848; id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_file_nameContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Alter_assembly_file_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_file_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_file_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_file_name(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_file_nameContext alter_assembly_file_name() {
		Alter_assembly_file_nameContext _localctx = new Alter_assembly_file_nameContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_alter_assembly_file_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1852; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_file_bitsContext : ParserRuleContext {
		public Alter_assembly_asContext alter_assembly_as() {
			return GetRuleContext<Alter_assembly_asContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Alter_assembly_file_bitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_file_bits; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_file_bits(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_file_bits(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_file_bitsContext alter_assembly_file_bits() {
		Alter_assembly_file_bitsContext _localctx = new Alter_assembly_file_bitsContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_alter_assembly_file_bits);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1854; alter_assembly_as();
			State = 1855; id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_asContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Alter_assembly_asContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_as; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_as(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_as(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_asContext alter_assembly_as() {
		Alter_assembly_asContext _localctx = new Alter_assembly_asContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_alter_assembly_as);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1857; Match(AS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_with_clauseContext : ParserRuleContext {
		public Alter_assembly_withContext alter_assembly_with() {
			return GetRuleContext<Alter_assembly_withContext>(0);
		}
		public Assembly_optionContext assembly_option() {
			return GetRuleContext<Assembly_optionContext>(0);
		}
		public Alter_assembly_with_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_with_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_with_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_with_clause(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_with_clauseContext alter_assembly_with_clause() {
		Alter_assembly_with_clauseContext _localctx = new Alter_assembly_with_clauseContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_alter_assembly_with_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1859; alter_assembly_with();
			State = 1860; assembly_option(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_withContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Alter_assembly_withContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_with; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_with(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_with(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_withContext alter_assembly_with() {
		Alter_assembly_withContext _localctx = new Alter_assembly_withContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_alter_assembly_with);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1862; Match(WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Client_assembly_specifierContext : ParserRuleContext {
		public Network_file_shareContext network_file_share() {
			return GetRuleContext<Network_file_shareContext>(0);
		}
		public Local_fileContext local_file() {
			return GetRuleContext<Local_fileContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Client_assembly_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_client_assembly_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClient_assembly_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClient_assembly_specifier(this);
		}
	}

	[RuleVersion(0)]
	public Client_assembly_specifierContext client_assembly_specifier() {
		Client_assembly_specifierContext _localctx = new Client_assembly_specifierContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_client_assembly_specifier);
		try {
			State = 1867;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,79,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1864; network_file_share();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1865; local_file();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1866; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assembly_optionContext : ParserRuleContext {
		public ITerminalNode PERMISSION_SET() { return GetToken(TSqlParser.PERMISSION_SET, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode SAFE() { return GetToken(TSqlParser.SAFE, 0); }
		public ITerminalNode EXTERNAL_ACCESS() { return GetToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		public ITerminalNode UNSAFE() { return GetToken(TSqlParser.UNSAFE, 0); }
		public ITerminalNode VISIBILITY() { return GetToken(TSqlParser.VISIBILITY, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode UNCHECKED() { return GetToken(TSqlParser.UNCHECKED, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public Assembly_optionContext assembly_option() {
			return GetRuleContext<Assembly_optionContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Assembly_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assembly_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAssembly_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAssembly_option(this);
		}
	}

	[RuleVersion(0)]
	public Assembly_optionContext assembly_option() {
		return assembly_option(0);
	}

	private Assembly_optionContext assembly_option(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Assembly_optionContext _localctx = new Assembly_optionContext(_ctx, _parentState);
		Assembly_optionContext _prevctx = _localctx;
		int _startState = 94;
		EnterRecursionRule(_localctx, 94, RULE_assembly_option, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1878;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				State = 1870; Match(PERMISSION_SET);
				State = 1871; Match(EQUAL);
				State = 1872;
				_la = _input.La(1);
				if ( !(_la==EXTERNAL_ACCESS || _la==SAFE || _la==UNSAFE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				{
				State = 1873; Match(VISIBILITY);
				State = 1874; Match(EQUAL);
				State = 1875; on_off();
				}
				break;

			case 3:
				{
				State = 1876; Match(UNCHECKED);
				State = 1877; Match(DATA);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 1884;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,81,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Assembly_optionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_assembly_option);
					State = 1880;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 1881; Match(COMMA);
					}
					} 
				}
				State = 1886;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,81,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Network_file_shareContext : ParserRuleContext {
		public Network_file_startContext network_file_start() {
			return GetRuleContext<Network_file_startContext>(0);
		}
		public Network_computerContext network_computer() {
			return GetRuleContext<Network_computerContext>(0);
		}
		public File_pathContext file_path() {
			return GetRuleContext<File_pathContext>(0);
		}
		public Network_file_shareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_network_file_share; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNetwork_file_share(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNetwork_file_share(this);
		}
	}

	[RuleVersion(0)]
	public Network_file_shareContext network_file_share() {
		Network_file_shareContext _localctx = new Network_file_shareContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_network_file_share);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1887; network_file_start();
			State = 1888; network_computer();
			State = 1889; file_path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Network_computerContext : ParserRuleContext {
		public Id_Context computer_name;
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Network_computerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_network_computer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNetwork_computer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNetwork_computer(this);
		}
	}

	[RuleVersion(0)]
	public Network_computerContext network_computer() {
		Network_computerContext _localctx = new Network_computerContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_network_computer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1891; _localctx.computer_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Network_file_startContext : ParserRuleContext {
		public ITerminalNode DOUBLE_BACK_SLASH() { return GetToken(TSqlParser.DOUBLE_BACK_SLASH, 0); }
		public Network_file_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_network_file_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNetwork_file_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNetwork_file_start(this);
		}
	}

	[RuleVersion(0)]
	public Network_file_startContext network_file_start() {
		Network_file_startContext _localctx = new Network_file_startContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_network_file_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1893; Match(DOUBLE_BACK_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_pathContext : ParserRuleContext {
		public File_directory_path_separatorContext file_directory_path_separator() {
			return GetRuleContext<File_directory_path_separatorContext>(0);
		}
		public File_pathContext file_path() {
			return GetRuleContext<File_pathContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public File_pathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_path; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_path(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_path(this);
		}
	}

	[RuleVersion(0)]
	public File_pathContext file_path() {
		File_pathContext _localctx = new File_pathContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_file_path);
		try {
			State = 1899;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,82,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1895; file_directory_path_separator();
				State = 1896; file_path();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1898; id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_directory_path_separatorContext : ParserRuleContext {
		public File_directory_path_separatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_directory_path_separator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_directory_path_separator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_directory_path_separator(this);
		}
	}

	[RuleVersion(0)]
	public File_directory_path_separatorContext file_directory_path_separator() {
		File_directory_path_separatorContext _localctx = new File_directory_path_separatorContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_file_directory_path_separator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1901; Match(BACKSLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_fileContext : ParserRuleContext {
		public Local_driveContext local_drive() {
			return GetRuleContext<Local_driveContext>(0);
		}
		public File_pathContext file_path() {
			return GetRuleContext<File_pathContext>(0);
		}
		public Local_fileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLocal_file(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLocal_file(this);
		}
	}

	[RuleVersion(0)]
	public Local_fileContext local_file() {
		Local_fileContext _localctx = new Local_fileContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_local_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1903; local_drive();
			State = 1904; file_path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_driveContext : ParserRuleContext {
		public ITerminalNode DISK_DRIVE() { return GetToken(TSqlParser.DISK_DRIVE, 0); }
		public Local_driveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_drive; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLocal_drive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLocal_drive(this);
		}
	}

	[RuleVersion(0)]
	public Local_driveContext local_drive() {
		Local_driveContext _localctx = new Local_driveContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_local_drive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1906; Match(DISK_DRIVE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiple_local_filesContext : ParserRuleContext {
		public Multiple_local_file_startContext multiple_local_file_start() {
			return GetRuleContext<Multiple_local_file_startContext>(0);
		}
		public Local_fileContext local_file() {
			return GetRuleContext<Local_fileContext>(0);
		}
		public ITerminalNode SINGLE_QUOTE() { return GetToken(TSqlParser.SINGLE_QUOTE, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Multiple_local_filesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiple_local_files; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMultiple_local_files(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMultiple_local_files(this);
		}
	}

	[RuleVersion(0)]
	public Multiple_local_filesContext multiple_local_files() {
		Multiple_local_filesContext _localctx = new Multiple_local_filesContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_multiple_local_files);
		try {
			State = 1914;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,83,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1908; multiple_local_file_start();
				State = 1909; local_file();
				State = 1910; Match(SINGLE_QUOTE);
				State = 1911; Match(COMMA);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1913; local_file();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiple_local_file_startContext : ParserRuleContext {
		public ITerminalNode SINGLE_QUOTE() { return GetToken(TSqlParser.SINGLE_QUOTE, 0); }
		public Multiple_local_file_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiple_local_file_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMultiple_local_file_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMultiple_local_file_start(this);
		}
	}

	[RuleVersion(0)]
	public Multiple_local_file_startContext multiple_local_file_start() {
		Multiple_local_file_startContext _localctx = new Multiple_local_file_startContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_multiple_local_file_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1916; Match(SINGLE_QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_assemblyContext : ParserRuleContext {
		public Id_Context assembly_name;
		public Id_Context owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PERMISSION_SET() { return GetToken(TSqlParser.PERMISSION_SET, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] BINARY() { return GetTokens(TSqlParser.BINARY); }
		public ITerminalNode BINARY(int i) {
			return GetToken(TSqlParser.BINARY, i);
		}
		public ITerminalNode SAFE() { return GetToken(TSqlParser.SAFE, 0); }
		public ITerminalNode EXTERNAL_ACCESS() { return GetToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		public ITerminalNode UNSAFE() { return GetToken(TSqlParser.UNSAFE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_assemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_assembly; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_assembly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_assembly(this);
		}
	}

	[RuleVersion(0)]
	public Create_assemblyContext create_assembly() {
		Create_assemblyContext _localctx = new Create_assemblyContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_create_assembly);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1918; Match(CREATE);
			State = 1919; Match(ASSEMBLY);
			State = 1920; _localctx.assembly_name = id_();
			State = 1923;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,84,_ctx) ) {
			case 1:
				{
				State = 1921; Match(AUTHORIZATION);
				State = 1922; _localctx.owner_name = id_();
				}
				break;
			}
			State = 1925; Match(FROM);
			State = 1930;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1927;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,85,_ctx) ) {
					case 1:
						{
						State = 1926; Match(COMMA);
						}
						break;
					}
					State = 1929;
					_la = _input.La(1);
					if ( !(_la==STRING || _la==BINARY) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1932;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,86,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 1938;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				State = 1934; Match(WITH);
				State = 1935; Match(PERMISSION_SET);
				State = 1936; Match(EQUAL);
				State = 1937;
				_la = _input.La(1);
				if ( !(_la==EXTERNAL_ACCESS || _la==SAFE || _la==UNSAFE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_assemblyContext : ParserRuleContext {
		public Id_Context assembly_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode DEPENDENTS() { return GetToken(TSqlParser.DEPENDENTS, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_assemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_assembly; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_assembly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_assembly(this);
		}
	}

	[RuleVersion(0)]
	public Drop_assemblyContext drop_assembly() {
		Drop_assemblyContext _localctx = new Drop_assemblyContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_drop_assembly);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1940; Match(DROP);
			State = 1941; Match(ASSEMBLY);
			State = 1944;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,88,_ctx) ) {
			case 1:
				{
				State = 1942; Match(IF);
				State = 1943; Match(EXISTS);
				}
				break;
			}
			State = 1950;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1947;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,89,_ctx) ) {
					case 1:
						{
						State = 1946; Match(COMMA);
						}
						break;
					}
					State = 1949; _localctx.assembly_name = id_();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1952;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,90,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 1957;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				State = 1954; Match(WITH);
				State = 1955; Match(NO);
				State = 1956; Match(DEPENDENTS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_asymmetric_keyContext : ParserRuleContext {
		public Id_Context Asym_Key_Name;
		public Alter_asymmetric_key_startContext alter_asymmetric_key_start() {
			return GetRuleContext<Alter_asymmetric_key_startContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Asymmetric_key_optionContext asymmetric_key_option() {
			return GetRuleContext<Asymmetric_key_optionContext>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Alter_asymmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_asymmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_asymmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_asymmetric_key(this);
		}
	}

	[RuleVersion(0)]
	public Alter_asymmetric_keyContext alter_asymmetric_key() {
		Alter_asymmetric_keyContext _localctx = new Alter_asymmetric_keyContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_alter_asymmetric_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1959; alter_asymmetric_key_start();
			State = 1960; _localctx.Asym_Key_Name = id_();
			State = 1965;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,92,_ctx) ) {
			case 1:
				{
				State = 1961; asymmetric_key_option();
				}
				break;

			case 2:
				{
				State = 1962; Match(REMOVE);
				State = 1963; Match(PRIVATE);
				State = 1964; Match(KEY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_asymmetric_key_startContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Alter_asymmetric_key_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_asymmetric_key_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_asymmetric_key_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_asymmetric_key_start(this);
		}
	}

	[RuleVersion(0)]
	public Alter_asymmetric_key_startContext alter_asymmetric_key_start() {
		Alter_asymmetric_key_startContext _localctx = new Alter_asymmetric_key_startContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_alter_asymmetric_key_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1967; Match(ALTER);
			State = 1968; Match(ASYMMETRIC);
			State = 1969; Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asymmetric_key_optionContext : ParserRuleContext {
		public Asymmetric_key_option_startContext asymmetric_key_option_start() {
			return GetRuleContext<Asymmetric_key_option_startContext>(0);
		}
		public Asymmetric_key_password_change_optionContext[] asymmetric_key_password_change_option() {
			return GetRuleContexts<Asymmetric_key_password_change_optionContext>();
		}
		public Asymmetric_key_password_change_optionContext asymmetric_key_password_change_option(int i) {
			return GetRuleContext<Asymmetric_key_password_change_optionContext>(i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Asymmetric_key_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asymmetric_key_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAsymmetric_key_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAsymmetric_key_option(this);
		}
	}

	[RuleVersion(0)]
	public Asymmetric_key_optionContext asymmetric_key_option() {
		Asymmetric_key_optionContext _localctx = new Asymmetric_key_optionContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_asymmetric_key_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1971; asymmetric_key_option_start();
			State = 1972; asymmetric_key_password_change_option();
			State = 1975;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				State = 1973; Match(COMMA);
				State = 1974; asymmetric_key_password_change_option();
				}
				break;
			}
			State = 1977; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asymmetric_key_option_startContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Asymmetric_key_option_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asymmetric_key_option_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAsymmetric_key_option_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAsymmetric_key_option_start(this);
		}
	}

	[RuleVersion(0)]
	public Asymmetric_key_option_startContext asymmetric_key_option_start() {
		Asymmetric_key_option_startContext _localctx = new Asymmetric_key_option_startContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_asymmetric_key_option_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1979; Match(WITH);
			State = 1980; Match(PRIVATE);
			State = 1981; Match(KEY);
			State = 1982; Match(LR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asymmetric_key_password_change_optionContext : ParserRuleContext {
		public ITerminalNode DECRYPTION() { return GetToken(TSqlParser.DECRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public Asymmetric_key_password_change_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asymmetric_key_password_change_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAsymmetric_key_password_change_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAsymmetric_key_password_change_option(this);
		}
	}

	[RuleVersion(0)]
	public Asymmetric_key_password_change_optionContext asymmetric_key_password_change_option() {
		Asymmetric_key_password_change_optionContext _localctx = new Asymmetric_key_password_change_optionContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_asymmetric_key_password_change_option);
		try {
			State = 1994;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,94,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1984; Match(DECRYPTION);
				State = 1985; Match(BY);
				State = 1986; Match(PASSWORD);
				State = 1987; Match(EQUAL);
				State = 1988; Match(STRING);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1989; Match(ENCRYPTION);
				State = 1990; Match(BY);
				State = 1991; Match(PASSWORD);
				State = 1992; Match(EQUAL);
				State = 1993; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_asymmetric_keyContext : ParserRuleContext {
		public Id_Context Asym_Key_Nam;
		public Id_Context database_principal_name;
		public Id_Context Assembly_Name;
		public Id_Context Provider_Name;
		public IToken provider_key_name;
		public IToken asymmetric_key_password;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode EXECUTABLE_FILE() { return GetToken(TSqlParser.EXECUTABLE_FILE, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode PROVIDER_KEY_NAME() { return GetToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public ITerminalNode CREATION_DISPOSITION() { return GetToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public ITerminalNode RSA_4096() { return GetToken(TSqlParser.RSA_4096, 0); }
		public ITerminalNode RSA_3072() { return GetToken(TSqlParser.RSA_3072, 0); }
		public ITerminalNode RSA_2048() { return GetToken(TSqlParser.RSA_2048, 0); }
		public ITerminalNode RSA_1024() { return GetToken(TSqlParser.RSA_1024, 0); }
		public ITerminalNode RSA_512() { return GetToken(TSqlParser.RSA_512, 0); }
		public ITerminalNode CREATE_NEW() { return GetToken(TSqlParser.CREATE_NEW, 0); }
		public ITerminalNode OPEN_EXISTING() { return GetToken(TSqlParser.OPEN_EXISTING, 0); }
		public Create_asymmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_asymmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_asymmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_asymmetric_key(this);
		}
	}

	[RuleVersion(0)]
	public Create_asymmetric_keyContext create_asymmetric_key() {
		Create_asymmetric_keyContext _localctx = new Create_asymmetric_keyContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_create_asymmetric_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1996; Match(CREATE);
			State = 1997; Match(ASYMMETRIC);
			State = 1998; Match(KEY);
			State = 1999; _localctx.Asym_Key_Nam = id_();
			State = 2002;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,95,_ctx) ) {
			case 1:
				{
				State = 2000; Match(AUTHORIZATION);
				State = 2001; _localctx.database_principal_name = id_();
				}
				break;
			}
			State = 2017;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,97,_ctx) ) {
			case 1:
				{
				State = 2004; Match(FROM);
				State = 2015;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,96,_ctx) ) {
				case 1:
					{
					State = 2005; Match(FILE);
					State = 2006; Match(EQUAL);
					State = 2007; Match(STRING);
					}
					break;

				case 2:
					{
					State = 2008; Match(EXECUTABLE_FILE);
					State = 2009; Match(EQUAL);
					State = 2010; Match(STRING);
					}
					break;

				case 3:
					{
					State = 2011; Match(ASSEMBLY);
					State = 2012; _localctx.Assembly_Name = id_();
					}
					break;

				case 4:
					{
					State = 2013; Match(PROVIDER);
					State = 2014; _localctx.Provider_Name = id_();
					}
					break;
				}
				}
				break;
			}
			State = 2031;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,99,_ctx) ) {
			case 1:
				{
				State = 2019; Match(WITH);
				State = 2029;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,98,_ctx) ) {
				case 1:
					{
					State = 2020; Match(ALGORITHM);
					State = 2021; Match(EQUAL);
					State = 2022;
					_la = _input.La(1);
					if ( !(((((_la - 844)) & ~0x3f) == 0 && ((1L << (_la - 844)) & ((1L << (RSA_1024 - 844)) | (1L << (RSA_2048 - 844)) | (1L << (RSA_3072 - 844)) | (1L << (RSA_4096 - 844)) | (1L << (RSA_512 - 844)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 2:
					{
					State = 2023; Match(PROVIDER_KEY_NAME);
					State = 2024; Match(EQUAL);
					State = 2025; _localctx.provider_key_name = Match(STRING);
					}
					break;

				case 3:
					{
					State = 2026; Match(CREATION_DISPOSITION);
					State = 2027; Match(EQUAL);
					State = 2028;
					_la = _input.La(1);
					if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;
			}
			State = 2038;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,100,_ctx) ) {
			case 1:
				{
				State = 2033; Match(ENCRYPTION);
				State = 2034; Match(BY);
				State = 2035; Match(PASSWORD);
				State = 2036; Match(EQUAL);
				State = 2037; _localctx.asymmetric_key_password = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_asymmetric_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Drop_asymmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_asymmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_asymmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_asymmetric_key(this);
		}
	}

	[RuleVersion(0)]
	public Drop_asymmetric_keyContext drop_asymmetric_key() {
		Drop_asymmetric_keyContext _localctx = new Drop_asymmetric_keyContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_drop_asymmetric_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2040; Match(DROP);
			State = 2041; Match(ASYMMETRIC);
			State = 2042; Match(KEY);
			State = 2043; _localctx.key_name = id_();
			State = 2047;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,101,_ctx) ) {
			case 1:
				{
				State = 2044; Match(REMOVE);
				State = 2045; Match(PROVIDER);
				State = 2046; Match(KEY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorizationContext : ParserRuleContext {
		public Entity_nameContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return GetRuleContext<Alter_authorization_startContext>(0);
		}
		public Entity_toContext entity_to() {
			return GetRuleContext<Entity_toContext>(0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return GetRuleContext<Authorization_granteeContext>(0);
		}
		public Entity_nameContext entity_name() {
			return GetRuleContext<Entity_nameContext>(0);
		}
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public Colon_colonContext colon_colon() {
			return GetRuleContext<Colon_colonContext>(0);
		}
		public Alter_authorizationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorizationContext alter_authorization() {
		Alter_authorizationContext _localctx = new Alter_authorizationContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_alter_authorization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2049; alter_authorization_start();
			State = 2053;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,102,_ctx) ) {
			case 1:
				{
				State = 2050; class_type();
				State = 2051; colon_colon();
				}
				break;
			}
			State = 2055; _localctx.entity = entity_name();
			State = 2056; entity_to();
			State = 2057; authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Authorization_granteeContext : ParserRuleContext {
		public Id_Context principal_name;
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode OWNER() { return GetToken(TSqlParser.OWNER, 0); }
		public Authorization_granteeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_authorization_grantee; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAuthorization_grantee(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAuthorization_grantee(this);
		}
	}

	[RuleVersion(0)]
	public Authorization_granteeContext authorization_grantee() {
		Authorization_granteeContext _localctx = new Authorization_granteeContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_authorization_grantee);
		try {
			State = 2062;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,103,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2059; _localctx.principal_name = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2060; Match(SCHEMA);
				State = 2061; Match(OWNER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_toContext : ParserRuleContext {
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public Entity_toContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_to; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEntity_to(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEntity_to(this);
		}
	}

	[RuleVersion(0)]
	public Entity_toContext entity_to() {
		Entity_toContext _localctx = new Entity_toContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_entity_to);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2064; Match(TO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Colon_colonContext : ParserRuleContext {
		public ITerminalNode DOUBLE_COLON() { return GetToken(TSqlParser.DOUBLE_COLON, 0); }
		public Colon_colonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colon_colon; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColon_colon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColon_colon(this);
		}
	}

	[RuleVersion(0)]
	public Colon_colonContext colon_colon() {
		Colon_colonContext _localctx = new Colon_colonContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_colon_colon);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2066; Match(DOUBLE_COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorization_startContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Alter_authorization_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization_start(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorization_startContext alter_authorization_start() {
		Alter_authorization_startContext _localctx = new Alter_authorization_startContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_alter_authorization_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2068; Match(ALTER);
			State = 2069; Match(AUTHORIZATION);
			State = 2070; Match(ON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorization_for_sql_databaseContext : ParserRuleContext {
		public Entity_nameContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return GetRuleContext<Alter_authorization_startContext>(0);
		}
		public Entity_toContext entity_to() {
			return GetRuleContext<Entity_toContext>(0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return GetRuleContext<Authorization_granteeContext>(0);
		}
		public Entity_nameContext entity_name() {
			return GetRuleContext<Entity_nameContext>(0);
		}
		public Class_type_for_sql_databaseContext class_type_for_sql_database() {
			return GetRuleContext<Class_type_for_sql_databaseContext>(0);
		}
		public Colon_colonContext colon_colon() {
			return GetRuleContext<Colon_colonContext>(0);
		}
		public Alter_authorization_for_sql_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization_for_sql_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization_for_sql_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization_for_sql_database(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorization_for_sql_databaseContext alter_authorization_for_sql_database() {
		Alter_authorization_for_sql_databaseContext _localctx = new Alter_authorization_for_sql_databaseContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_alter_authorization_for_sql_database);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2072; alter_authorization_start();
			State = 2076;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,104,_ctx) ) {
			case 1:
				{
				State = 2073; class_type_for_sql_database();
				State = 2074; colon_colon();
				}
				break;
			}
			State = 2078; _localctx.entity = entity_name();
			State = 2079; entity_to();
			State = 2080; authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorization_for_azure_dwContext : ParserRuleContext {
		public Entity_name_for_azure_dwContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return GetRuleContext<Alter_authorization_startContext>(0);
		}
		public Entity_toContext entity_to() {
			return GetRuleContext<Entity_toContext>(0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return GetRuleContext<Authorization_granteeContext>(0);
		}
		public Entity_name_for_azure_dwContext entity_name_for_azure_dw() {
			return GetRuleContext<Entity_name_for_azure_dwContext>(0);
		}
		public Class_type_for_azure_dwContext class_type_for_azure_dw() {
			return GetRuleContext<Class_type_for_azure_dwContext>(0);
		}
		public Colon_colonContext colon_colon() {
			return GetRuleContext<Colon_colonContext>(0);
		}
		public Alter_authorization_for_azure_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization_for_azure_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization_for_azure_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization_for_azure_dw(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorization_for_azure_dwContext alter_authorization_for_azure_dw() {
		Alter_authorization_for_azure_dwContext _localctx = new Alter_authorization_for_azure_dwContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_alter_authorization_for_azure_dw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2082; alter_authorization_start();
			State = 2086;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,105,_ctx) ) {
			case 1:
				{
				State = 2083; class_type_for_azure_dw();
				State = 2084; colon_colon();
				}
				break;
			}
			State = 2088; _localctx.entity = entity_name_for_azure_dw();
			State = 2089; entity_to();
			State = 2090; authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorization_for_parallel_dwContext : ParserRuleContext {
		public Entity_name_for_parallel_dwContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return GetRuleContext<Alter_authorization_startContext>(0);
		}
		public Entity_toContext entity_to() {
			return GetRuleContext<Entity_toContext>(0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return GetRuleContext<Authorization_granteeContext>(0);
		}
		public Entity_name_for_parallel_dwContext entity_name_for_parallel_dw() {
			return GetRuleContext<Entity_name_for_parallel_dwContext>(0);
		}
		public Class_type_for_parallel_dwContext class_type_for_parallel_dw() {
			return GetRuleContext<Class_type_for_parallel_dwContext>(0);
		}
		public Colon_colonContext colon_colon() {
			return GetRuleContext<Colon_colonContext>(0);
		}
		public Alter_authorization_for_parallel_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization_for_parallel_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization_for_parallel_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization_for_parallel_dw(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorization_for_parallel_dwContext alter_authorization_for_parallel_dw() {
		Alter_authorization_for_parallel_dwContext _localctx = new Alter_authorization_for_parallel_dwContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_alter_authorization_for_parallel_dw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2092; alter_authorization_start();
			State = 2096;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,106,_ctx) ) {
			case 1:
				{
				State = 2093; class_type_for_parallel_dw();
				State = 2094; colon_colon();
				}
				break;
			}
			State = 2098; _localctx.entity = entity_name_for_parallel_dw();
			State = 2099; entity_to();
			State = 2100; authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_typeContext : ParserRuleContext {
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Class_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type(this);
		}
	}

	[RuleVersion(0)]
	public Class_typeContext class_type() {
		Class_typeContext _localctx = new Class_typeContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_class_type);
		try {
			State = 2136;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,107,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2102; Match(OBJECT);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2103; Match(ASSEMBLY);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2104; Match(ASYMMETRIC);
				State = 2105; Match(KEY);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2106; Match(AVAILABILITY);
				State = 2107; Match(GROUP);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2108; Match(CERTIFICATE);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2109; Match(CONTRACT);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2110; Match(TYPE);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2111; Match(DATABASE);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2112; Match(ENDPOINT);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2113; Match(FULLTEXT);
				State = 2114; Match(CATALOG);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2115; Match(FULLTEXT);
				State = 2116; Match(STOPLIST);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2117; Match(MESSAGE);
				State = 2118; Match(TYPE);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2119; Match(REMOTE);
				State = 2120; Match(SERVICE);
				State = 2121; Match(BINDING);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2122; Match(ROLE);
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2123; Match(ROUTE);
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2124; Match(SCHEMA);
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2125; Match(SEARCH);
				State = 2126; Match(PROPERTY);
				State = 2127; Match(LIST);
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2128; Match(SERVER);
				State = 2129; Match(ROLE);
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2130; Match(SERVICE);
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2131; Match(SYMMETRIC);
				State = 2132; Match(KEY);
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2133; Match(XML);
				State = 2134; Match(SCHEMA);
				State = 2135; Match(COLLECTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_type_for_sql_databaseContext : ParserRuleContext {
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Class_type_for_sql_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type_for_sql_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type_for_sql_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type_for_sql_database(this);
		}
	}

	[RuleVersion(0)]
	public Class_type_for_sql_databaseContext class_type_for_sql_database() {
		Class_type_for_sql_databaseContext _localctx = new Class_type_for_sql_databaseContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_class_type_for_sql_database);
		try {
			State = 2159;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,108,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2138; Match(OBJECT);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2139; Match(ASSEMBLY);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2140; Match(ASYMMETRIC);
				State = 2141; Match(KEY);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2142; Match(CERTIFICATE);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2143; Match(TYPE);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2144; Match(DATABASE);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2145; Match(FULLTEXT);
				State = 2146; Match(CATALOG);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2147; Match(FULLTEXT);
				State = 2148; Match(STOPLIST);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2149; Match(ROLE);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2150; Match(SCHEMA);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2151; Match(SEARCH);
				State = 2152; Match(PROPERTY);
				State = 2153; Match(LIST);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2154; Match(SYMMETRIC);
				State = 2155; Match(KEY);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2156; Match(XML);
				State = 2157; Match(SCHEMA);
				State = 2158; Match(COLLECTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_type_for_azure_dwContext : ParserRuleContext {
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public Class_type_for_azure_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type_for_azure_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type_for_azure_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type_for_azure_dw(this);
		}
	}

	[RuleVersion(0)]
	public Class_type_for_azure_dwContext class_type_for_azure_dw() {
		Class_type_for_azure_dwContext _localctx = new Class_type_for_azure_dwContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_class_type_for_azure_dw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2161;
			_la = _input.La(1);
			if ( !(_la==OBJECT || _la==SCHEMA) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_type_for_parallel_dwContext : ParserRuleContext {
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public Class_type_for_parallel_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type_for_parallel_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type_for_parallel_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type_for_parallel_dw(this);
		}
	}

	[RuleVersion(0)]
	public Class_type_for_parallel_dwContext class_type_for_parallel_dw() {
		Class_type_for_parallel_dwContext _localctx = new Class_type_for_parallel_dwContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_class_type_for_parallel_dw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2163;
			_la = _input.La(1);
			if ( !(_la==DATABASE || _la==OBJECT || _la==SCHEMA) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_type_for_grantContext : ParserRuleContext {
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode BROKER() { return GetToken(TSqlParser.BROKER, 0); }
		public ITerminalNode PRIORITY() { return GetToken(TSqlParser.PRIORITY, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		public ITerminalNode SCOPED() { return GetToken(TSqlParser.SCOPED, 0); }
		public ITerminalNode CONFIGURATION() { return GetToken(TSqlParser.CONFIGURATION, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode GOVERNOR() { return GetToken(TSqlParser.GOVERNOR, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode FORMAT() { return GetToken(TSqlParser.FORMAT, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public ITerminalNode SQL() { return GetToken(TSqlParser.SQL, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Class_type_for_grantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type_for_grant; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type_for_grant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type_for_grant(this);
		}
	}

	[RuleVersion(0)]
	public Class_type_for_grantContext class_type_for_grant() {
		Class_type_for_grantContext _localctx = new Class_type_for_grantContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_class_type_for_grant);
		int _la;
		try {
			State = 2256;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,114,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2165; Match(APPLICATION);
				State = 2166; Match(ROLE);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2167; Match(ASSEMBLY);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2168; Match(ASYMMETRIC);
				State = 2169; Match(KEY);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2170; Match(AUDIT);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2171; Match(AVAILABILITY);
				State = 2172; Match(GROUP);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2173; Match(BROKER);
				State = 2174; Match(PRIORITY);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2175; Match(CERTIFICATE);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2176; Match(COLUMN);
				State = 2177;
				_la = _input.La(1);
				if ( !(_la==ENCRYPTION || _la==MASTER) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2178; Match(KEY);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2179; Match(CONTRACT);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2180; Match(CREDENTIAL);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2181; Match(CRYPTOGRAPHIC);
				State = 2182; Match(PROVIDER);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2183; Match(DATABASE);
				State = 2197;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,110,_ctx) ) {
				case 1:
					{
					State = 2184; Match(AUDIT);
					State = 2185; Match(SPECIFICATION);
					}
					break;

				case 2:
					{
					State = 2186; Match(ENCRYPTION);
					State = 2187; Match(KEY);
					}
					break;

				case 3:
					{
					State = 2188; Match(EVENT);
					State = 2189; Match(SESSION);
					}
					break;

				case 4:
					{
					State = 2190; Match(SCOPED);
					State = 2195;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,109,_ctx) ) {
					case 1:
						{
						State = 2191; Match(CONFIGURATION);
						}
						break;

					case 2:
						{
						State = 2192; Match(CREDENTIAL);
						}
						break;

					case 3:
						{
						State = 2193; Match(RESOURCE);
						State = 2194; Match(GOVERNOR);
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2199; Match(ENDPOINT);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2200; Match(EVENT);
				State = 2201; Match(SESSION);
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2202; Match(NOTIFICATION);
				State = 2203;
				_la = _input.La(1);
				if ( !(_la==DATABASE || _la==OBJECT || _la==SERVER) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2204; Match(EXTERNAL);
				State = 2215;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,111,_ctx) ) {
				case 1:
					{
					State = 2205; Match(DATA);
					State = 2206; Match(SOURCE);
					}
					break;

				case 2:
					{
					State = 2207; Match(FILE);
					State = 2208; Match(FORMAT);
					}
					break;

				case 3:
					{
					State = 2209; Match(LIBRARY);
					}
					break;

				case 4:
					{
					State = 2210; Match(RESOURCE);
					State = 2211; Match(POOL);
					}
					break;

				case 5:
					{
					State = 2212; Match(TABLE);
					}
					break;

				case 6:
					{
					State = 2213; Match(CATALOG);
					}
					break;

				case 7:
					{
					State = 2214; Match(STOPLIST);
					}
					break;
				}
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2217; Match(LOGIN);
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2218; Match(MASTER);
				State = 2219; Match(KEY);
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2220; Match(MESSAGE);
				State = 2221; Match(TYPE);
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2222; Match(OBJECT);
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2223; Match(PARTITION);
				State = 2224;
				_la = _input.La(1);
				if ( !(_la==FUNCTION || _la==SCHEME) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 2225; Match(REMOTE);
				State = 2226; Match(SERVICE);
				State = 2227; Match(BINDING);
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 2228; Match(RESOURCE);
				State = 2229; Match(GOVERNOR);
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 2230; Match(ROLE);
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 2231; Match(ROUTE);
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 2232; Match(SCHEMA);
				}
				break;

			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 2233; Match(SEARCH);
				State = 2234; Match(PROPERTY);
				State = 2235; Match(LIST);
				}
				break;

			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 2236; Match(SERVER);
				State = 2242;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,113,_ctx) ) {
				case 1:
					{
					{
					State = 2237; Match(AUDIT);
					State = 2239;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,112,_ctx) ) {
					case 1:
						{
						State = 2238; Match(SPECIFICATION);
						}
						break;
					}
					}
					}
					break;

				case 2:
					{
					State = 2241; Match(ROLE);
					}
					break;
				}
				}
				break;

			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 2244; Match(SERVICE);
				}
				break;

			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 2245; Match(SQL);
				State = 2246; Match(LOGIN);
				}
				break;

			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 2247; Match(SYMMETRIC);
				State = 2248; Match(KEY);
				}
				break;

			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 2249; Match(TRIGGER);
				State = 2250;
				_la = _input.La(1);
				if ( !(_la==DATABASE || _la==SERVER) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 2251; Match(TYPE);
				}
				break;

			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 2252; Match(USER);
				}
				break;

			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 2253; Match(XML);
				State = 2254; Match(SCHEMA);
				State = 2255; Match(COLLECTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_availability_groupContext : ParserRuleContext {
		public Id_Context group_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_availability_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_availability_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_availability_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_availability_group(this);
		}
	}

	[RuleVersion(0)]
	public Drop_availability_groupContext drop_availability_group() {
		Drop_availability_groupContext _localctx = new Drop_availability_groupContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_drop_availability_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2258; Match(DROP);
			State = 2259; Match(AVAILABILITY);
			State = 2260; Match(GROUP);
			State = 2261; _localctx.group_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_availability_groupContext : ParserRuleContext {
		public Alter_availability_group_startContext alter_availability_group_start() {
			return GetRuleContext<Alter_availability_group_startContext>(0);
		}
		public Alter_availability_group_optionsContext alter_availability_group_options() {
			return GetRuleContext<Alter_availability_group_optionsContext>(0);
		}
		public Alter_availability_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_availability_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_availability_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_availability_group(this);
		}
	}

	[RuleVersion(0)]
	public Alter_availability_groupContext alter_availability_group() {
		Alter_availability_groupContext _localctx = new Alter_availability_groupContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_alter_availability_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2263; alter_availability_group_start();
			State = 2264; alter_availability_group_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_availability_group_startContext : ParserRuleContext {
		public Id_Context group_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Alter_availability_group_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_availability_group_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_availability_group_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_availability_group_start(this);
		}
	}

	[RuleVersion(0)]
	public Alter_availability_group_startContext alter_availability_group_start() {
		Alter_availability_group_startContext _localctx = new Alter_availability_group_startContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_alter_availability_group_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2266; Match(ALTER);
			State = 2267; Match(AVAILABILITY);
			State = 2268; Match(GROUP);
			State = 2269; _localctx.group_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_availability_group_optionsContext : ParserRuleContext {
		public IToken milliseconds;
		public Id_Context database_name;
		public IToken server_instance;
		public IToken session_timeout;
		public IToken ag_name;
		public IToken ag_name_modified;
		public IToken listener_name;
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode AUTOMATED_BACKUP_PREFERENCE() { return GetToken(TSqlParser.AUTOMATED_BACKUP_PREFERENCE, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode FAILURE_CONDITION_LEVEL() { return GetToken(TSqlParser.FAILURE_CONDITION_LEVEL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode HEALTH_CHECK_TIMEOUT() { return GetToken(TSqlParser.HEALTH_CHECK_TIMEOUT, 0); }
		public ITerminalNode DB_FAILOVER() { return GetToken(TSqlParser.DB_FAILOVER, 0); }
		public ITerminalNode REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT() { return GetToken(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0); }
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public ITerminalNode SECONDARY_ONLY() { return GetToken(TSqlParser.SECONDARY_ONLY, 0); }
		public ITerminalNode SECONDARY() { return GetToken(TSqlParser.SECONDARY, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode REPLICA() { return GetToken(TSqlParser.REPLICA, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] WITH() { return GetTokens(TSqlParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(TSqlParser.WITH, i);
		}
		public ITerminalNode ENDPOINT_URL() { return GetToken(TSqlParser.ENDPOINT_URL, 0); }
		public ITerminalNode[] AVAILABILITY_MODE() { return GetTokens(TSqlParser.AVAILABILITY_MODE); }
		public ITerminalNode AVAILABILITY_MODE(int i) {
			return GetToken(TSqlParser.AVAILABILITY_MODE, i);
		}
		public ITerminalNode[] FAILOVER_MODE() { return GetTokens(TSqlParser.FAILOVER_MODE); }
		public ITerminalNode FAILOVER_MODE(int i) {
			return GetToken(TSqlParser.FAILOVER_MODE, i);
		}
		public ITerminalNode[] SEEDING_MODE() { return GetTokens(TSqlParser.SEEDING_MODE); }
		public ITerminalNode SEEDING_MODE(int i) {
			return GetToken(TSqlParser.SEEDING_MODE, i);
		}
		public ITerminalNode BACKUP_PRIORITY() { return GetToken(TSqlParser.BACKUP_PRIORITY, 0); }
		public ITerminalNode PRIMARY_ROLE() { return GetToken(TSqlParser.PRIMARY_ROLE, 0); }
		public ITerminalNode[] ALLOW_CONNECTIONS() { return GetTokens(TSqlParser.ALLOW_CONNECTIONS); }
		public ITerminalNode ALLOW_CONNECTIONS(int i) {
			return GetToken(TSqlParser.ALLOW_CONNECTIONS, i);
		}
		public ITerminalNode SECONDARY_ROLE() { return GetToken(TSqlParser.SECONDARY_ROLE, 0); }
		public ITerminalNode[] SYNCHRONOUS_COMMIT() { return GetTokens(TSqlParser.SYNCHRONOUS_COMMIT); }
		public ITerminalNode SYNCHRONOUS_COMMIT(int i) {
			return GetToken(TSqlParser.SYNCHRONOUS_COMMIT, i);
		}
		public ITerminalNode[] ASYNCHRONOUS_COMMIT() { return GetTokens(TSqlParser.ASYNCHRONOUS_COMMIT); }
		public ITerminalNode ASYNCHRONOUS_COMMIT(int i) {
			return GetToken(TSqlParser.ASYNCHRONOUS_COMMIT, i);
		}
		public ITerminalNode[] AUTOMATIC() { return GetTokens(TSqlParser.AUTOMATIC); }
		public ITerminalNode AUTOMATIC(int i) {
			return GetToken(TSqlParser.AUTOMATIC, i);
		}
		public ITerminalNode[] MANUAL() { return GetTokens(TSqlParser.MANUAL); }
		public ITerminalNode MANUAL(int i) {
			return GetToken(TSqlParser.MANUAL, i);
		}
		public ITerminalNode READ_WRITE() { return GetToken(TSqlParser.READ_WRITE, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode READ_ONLY_ROUTING_LIST() { return GetToken(TSqlParser.READ_ONLY_ROUTING_LIST, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode SESSION_TIMEOUT() { return GetToken(TSqlParser.SESSION_TIMEOUT, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode JOIN() { return GetToken(TSqlParser.JOIN, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode[] LISTENER_URL() { return GetTokens(TSqlParser.LISTENER_URL); }
		public ITerminalNode LISTENER_URL(int i) {
			return GetToken(TSqlParser.LISTENER_URL, i);
		}
		public ITerminalNode GRANT() { return GetToken(TSqlParser.GRANT, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ANY() { return GetToken(TSqlParser.ANY, 0); }
		public ITerminalNode DENY() { return GetToken(TSqlParser.DENY, 0); }
		public ITerminalNode FAILOVER() { return GetToken(TSqlParser.FAILOVER, 0); }
		public ITerminalNode FORCE_FAILOVER_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode LISTENER() { return GetToken(TSqlParser.LISTENER, 0); }
		public ITerminalNode DHCP() { return GetToken(TSqlParser.DHCP, 0); }
		public ITerminalNode IP() { return GetToken(TSqlParser.IP, 0); }
		public Ip_v4_failoverContext[] ip_v4_failover() {
			return GetRuleContexts<Ip_v4_failoverContext>();
		}
		public Ip_v4_failoverContext ip_v4_failover(int i) {
			return GetRuleContext<Ip_v4_failoverContext>(i);
		}
		public ITerminalNode PORT() { return GetToken(TSqlParser.PORT, 0); }
		public Ip_v6_failoverContext[] ip_v6_failover() {
			return GetRuleContexts<Ip_v6_failoverContext>();
		}
		public Ip_v6_failoverContext ip_v6_failover(int i) {
			return GetRuleContext<Ip_v6_failoverContext>(i);
		}
		public ITerminalNode RESTART() { return GetToken(TSqlParser.RESTART, 0); }
		public ITerminalNode OFFLINE() { return GetToken(TSqlParser.OFFLINE, 0); }
		public ITerminalNode DTC_SUPPORT() { return GetToken(TSqlParser.DTC_SUPPORT, 0); }
		public ITerminalNode PER_DB() { return GetToken(TSqlParser.PER_DB, 0); }
		public Alter_availability_group_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_availability_group_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_availability_group_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_availability_group_options(this);
		}
	}

	[RuleVersion(0)]
	public Alter_availability_group_optionsContext alter_availability_group_options() {
		Alter_availability_group_optionsContext _localctx = new Alter_availability_group_optionsContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_alter_availability_group_options);
		int _la;
		try {
			int _alt;
			State = 2626;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,158,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2271; Match(SET);
				State = 2272; Match(LR_BRACKET);
				{
				State = 2288;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,115,_ctx) ) {
				case 1:
					{
					State = 2273; Match(AUTOMATED_BACKUP_PREFERENCE);
					State = 2274; Match(EQUAL);
					State = 2275;
					_la = _input.La(1);
					if ( !(_la==NONE || _la==PRIMARY || _la==SECONDARY || _la==SECONDARY_ONLY) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 2:
					{
					State = 2276; Match(FAILURE_CONDITION_LEVEL);
					State = 2277; Match(EQUAL);
					State = 2278; Match(DECIMAL);
					}
					break;

				case 3:
					{
					State = 2279; Match(HEALTH_CHECK_TIMEOUT);
					State = 2280; Match(EQUAL);
					State = 2281; _localctx.milliseconds = Match(DECIMAL);
					}
					break;

				case 4:
					{
					State = 2282; Match(DB_FAILOVER);
					State = 2283; Match(EQUAL);
					State = 2284;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 5:
					{
					State = 2285; Match(REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT);
					State = 2286; Match(EQUAL);
					State = 2287; Match(DECIMAL);
					}
					break;
				}
				State = 2290; Match(RR_BRACKET);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2291; Match(ADD);
				State = 2292; Match(DATABASE);
				State = 2293; _localctx.database_name = id_();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2294; Match(REMOVE);
				State = 2295; Match(DATABASE);
				State = 2296; _localctx.database_name = id_();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2297; Match(ADD);
				State = 2298; Match(REPLICA);
				State = 2299; Match(ON);
				State = 2300; _localctx.server_instance = Match(STRING);
				{
				State = 2301; Match(WITH);
				State = 2302; Match(LR_BRACKET);
				{
				State = 2306;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,116,_ctx) ) {
				case 1:
					{
					State = 2303; Match(ENDPOINT_URL);
					State = 2304; Match(EQUAL);
					State = 2305; Match(STRING);
					}
					break;
				}
				State = 2314;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,118,_ctx) ) {
				case 1:
					{
					State = 2309;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,117,_ctx) ) {
					case 1:
						{
						State = 2308; Match(COMMA);
						}
						break;
					}
					State = 2311; Match(AVAILABILITY_MODE);
					State = 2312; Match(EQUAL);
					State = 2313;
					_la = _input.La(1);
					if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 2322;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,120,_ctx) ) {
				case 1:
					{
					State = 2317;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,119,_ctx) ) {
					case 1:
						{
						State = 2316; Match(COMMA);
						}
						break;
					}
					State = 2319; Match(FAILOVER_MODE);
					State = 2320; Match(EQUAL);
					State = 2321;
					_la = _input.La(1);
					if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 2330;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,122,_ctx) ) {
				case 1:
					{
					State = 2325;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,121,_ctx) ) {
					case 1:
						{
						State = 2324; Match(COMMA);
						}
						break;
					}
					State = 2327; Match(SEEDING_MODE);
					State = 2328; Match(EQUAL);
					State = 2329;
					_la = _input.La(1);
					if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 2338;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,124,_ctx) ) {
				case 1:
					{
					State = 2333;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,123,_ctx) ) {
					case 1:
						{
						State = 2332; Match(COMMA);
						}
						break;
					}
					State = 2335; Match(BACKUP_PRIORITY);
					State = 2336; Match(EQUAL);
					State = 2337; Match(DECIMAL);
					}
					break;
				}
				State = 2349;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,126,_ctx) ) {
				case 1:
					{
					State = 2341;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,125,_ctx) ) {
					case 1:
						{
						State = 2340; Match(COMMA);
						}
						break;
					}
					State = 2343; Match(PRIMARY_ROLE);
					State = 2344; Match(LR_BRACKET);
					State = 2345; Match(ALLOW_CONNECTIONS);
					State = 2346; Match(EQUAL);
					State = 2347;
					_la = _input.La(1);
					if ( !(_la==ALL || _la==READ_WRITE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 2348; Match(RR_BRACKET);
					}
					break;
				}
				State = 2360;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,128,_ctx) ) {
				case 1:
					{
					State = 2352;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,127,_ctx) ) {
					case 1:
						{
						State = 2351; Match(COMMA);
						}
						break;
					}
					State = 2354; Match(SECONDARY_ROLE);
					State = 2355; Match(LR_BRACKET);
					State = 2356; Match(ALLOW_CONNECTIONS);
					State = 2357; Match(EQUAL);
					{
					State = 2358; Match(READ_ONLY);
					}
					State = 2359; Match(RR_BRACKET);
					}
					break;
				}
				}
				}
				State = 2362; Match(RR_BRACKET);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2363; Match(SECONDARY_ROLE);
				State = 2364; Match(LR_BRACKET);
				State = 2373;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,129,_ctx) ) {
				case 1:
					{
					State = 2365; Match(ALLOW_CONNECTIONS);
					State = 2366; Match(EQUAL);
					State = 2367;
					_la = _input.La(1);
					if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 2:
					{
					State = 2368; Match(READ_ONLY_ROUTING_LIST);
					State = 2369; Match(EQUAL);
					{
					State = 2370; Match(LR_BRACKET);
					{
					{
					State = 2371; Match(STRING);
					}
					}
					State = 2372; Match(RR_BRACKET);
					}
					}
					break;
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2375; Match(PRIMARY_ROLE);
				State = 2376; Match(LR_BRACKET);
				State = 2399;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,133,_ctx) ) {
				case 1:
					{
					State = 2377; Match(ALLOW_CONNECTIONS);
					State = 2378; Match(EQUAL);
					State = 2379;
					_la = _input.La(1);
					if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 2:
					{
					State = 2380; Match(READ_ONLY_ROUTING_LIST);
					State = 2381; Match(EQUAL);
					{
					State = 2382; Match(LR_BRACKET);
					State = 2393;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,132,_ctx) ) {
					case 1:
						{
						State = 2389;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,131,_ctx);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
							if ( _alt==1 ) {
								{
								{
								State = 2384;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,130,_ctx) ) {
								case 1:
									{
									State = 2383; Match(COMMA);
									}
									break;
								}
								State = 2386; Match(STRING);
								}
								} 
							}
							State = 2391;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,131,_ctx);
						}
						}
						break;

					case 2:
						{
						State = 2392; Match(NONE);
						}
						break;
					}
					State = 2395; Match(RR_BRACKET);
					}
					}
					break;

				case 3:
					{
					State = 2396; Match(SESSION_TIMEOUT);
					State = 2397; Match(EQUAL);
					State = 2398; _localctx.session_timeout = Match(DECIMAL);
					}
					break;
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2401; Match(MODIFY);
				State = 2402; Match(REPLICA);
				State = 2403; Match(ON);
				State = 2404; _localctx.server_instance = Match(STRING);
				State = 2462;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,140,_ctx) ) {
				case 1:
					{
					State = 2405; Match(WITH);
					State = 2406; Match(LR_BRACKET);
					State = 2422;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,134,_ctx) ) {
					case 1:
						{
						State = 2407; Match(ENDPOINT_URL);
						State = 2408; Match(EQUAL);
						State = 2409; Match(STRING);
						}
						break;

					case 2:
						{
						State = 2410; Match(AVAILABILITY_MODE);
						State = 2411; Match(EQUAL);
						State = 2412;
						_la = _input.La(1);
						if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 3:
						{
						State = 2413; Match(FAILOVER_MODE);
						State = 2414; Match(EQUAL);
						State = 2415;
						_la = _input.La(1);
						if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 4:
						{
						State = 2416; Match(SEEDING_MODE);
						State = 2417; Match(EQUAL);
						State = 2418;
						_la = _input.La(1);
						if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 5:
						{
						State = 2419; Match(BACKUP_PRIORITY);
						State = 2420; Match(EQUAL);
						State = 2421; Match(DECIMAL);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 2424; Match(SECONDARY_ROLE);
					State = 2425; Match(LR_BRACKET);
					State = 2434;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,135,_ctx) ) {
					case 1:
						{
						State = 2426; Match(ALLOW_CONNECTIONS);
						State = 2427; Match(EQUAL);
						State = 2428;
						_la = _input.La(1);
						if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 2:
						{
						State = 2429; Match(READ_ONLY_ROUTING_LIST);
						State = 2430; Match(EQUAL);
						{
						State = 2431; Match(LR_BRACKET);
						{
						{
						State = 2432; Match(STRING);
						}
						}
						State = 2433; Match(RR_BRACKET);
						}
						}
						break;
					}
					}
					break;

				case 3:
					{
					State = 2436; Match(PRIMARY_ROLE);
					State = 2437; Match(LR_BRACKET);
					State = 2460;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,139,_ctx) ) {
					case 1:
						{
						State = 2438; Match(ALLOW_CONNECTIONS);
						State = 2439; Match(EQUAL);
						State = 2440;
						_la = _input.La(1);
						if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 2:
						{
						State = 2441; Match(READ_ONLY_ROUTING_LIST);
						State = 2442; Match(EQUAL);
						{
						State = 2443; Match(LR_BRACKET);
						State = 2454;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,138,_ctx) ) {
						case 1:
							{
							State = 2450;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,137,_ctx);
							while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
								if ( _alt==1 ) {
									{
									{
									State = 2445;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,136,_ctx) ) {
									case 1:
										{
										State = 2444; Match(COMMA);
										}
										break;
									}
									State = 2447; Match(STRING);
									}
									} 
								}
								State = 2452;
								_errHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(_input,137,_ctx);
							}
							}
							break;

						case 2:
							{
							State = 2453; Match(NONE);
							}
							break;
						}
						State = 2456; Match(RR_BRACKET);
						}
						}
						break;

					case 3:
						{
						State = 2457; Match(SESSION_TIMEOUT);
						State = 2458; Match(EQUAL);
						State = 2459; _localctx.session_timeout = Match(DECIMAL);
						}
						break;
					}
					}
					break;
				}
				State = 2464; Match(RR_BRACKET);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2465; Match(REMOVE);
				State = 2466; Match(REPLICA);
				State = 2467; Match(ON);
				State = 2468; Match(STRING);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2469; Match(JOIN);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2470; Match(JOIN);
				State = 2471; Match(AVAILABILITY);
				State = 2472; Match(GROUP);
				State = 2473; Match(ON);
				State = 2496;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2475;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,141,_ctx) ) {
						case 1:
							{
							State = 2474; Match(COMMA);
							}
							break;
						}
						State = 2477; _localctx.ag_name = Match(STRING);
						State = 2478; Match(WITH);
						State = 2479; Match(LR_BRACKET);
						{
						State = 2480; Match(LISTENER_URL);
						State = 2481; Match(EQUAL);
						State = 2482; Match(STRING);
						State = 2483; Match(COMMA);
						State = 2484; Match(AVAILABILITY_MODE);
						State = 2485; Match(EQUAL);
						State = 2486;
						_la = _input.La(1);
						if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2487; Match(COMMA);
						State = 2488; Match(FAILOVER_MODE);
						State = 2489; Match(EQUAL);
						State = 2490; Match(MANUAL);
						State = 2491; Match(COMMA);
						State = 2492; Match(SEEDING_MODE);
						State = 2493; Match(EQUAL);
						State = 2494;
						_la = _input.La(1);
						if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2495; Match(RR_BRACKET);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2498;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,142,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2500; Match(MODIFY);
				State = 2501; Match(AVAILABILITY);
				State = 2502; Match(GROUP);
				State = 2503; Match(ON);
				State = 2538;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2505;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,143,_ctx) ) {
						case 1:
							{
							State = 2504; Match(COMMA);
							}
							break;
						}
						State = 2507; _localctx.ag_name_modified = Match(STRING);
						State = 2508; Match(WITH);
						State = 2509; Match(LR_BRACKET);
						{
						State = 2510; Match(LISTENER_URL);
						State = 2511; Match(EQUAL);
						State = 2512; Match(STRING);
						State = 2519;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,145,_ctx) ) {
						case 1:
							{
							State = 2514;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,144,_ctx) ) {
							case 1:
								{
								State = 2513; Match(COMMA);
								}
								break;
							}
							State = 2516; Match(AVAILABILITY_MODE);
							State = 2517; Match(EQUAL);
							State = 2518;
							_la = _input.La(1);
							if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;
						}
						State = 2527;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,147,_ctx) ) {
						case 1:
							{
							State = 2522;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,146,_ctx) ) {
							case 1:
								{
								State = 2521; Match(COMMA);
								}
								break;
							}
							State = 2524; Match(FAILOVER_MODE);
							State = 2525; Match(EQUAL);
							State = 2526; Match(MANUAL);
							}
							break;
						}
						State = 2535;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,149,_ctx) ) {
						case 1:
							{
							State = 2530;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,148,_ctx) ) {
							case 1:
								{
								State = 2529; Match(COMMA);
								}
								break;
							}
							State = 2532; Match(SEEDING_MODE);
							State = 2533; Match(EQUAL);
							State = 2534;
							_la = _input.La(1);
							if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;
						}
						State = 2537; Match(RR_BRACKET);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2540;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,150,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2542; Match(GRANT);
				State = 2543; Match(CREATE);
				State = 2544; Match(ANY);
				State = 2545; Match(DATABASE);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2546; Match(DENY);
				State = 2547; Match(CREATE);
				State = 2548; Match(ANY);
				State = 2549; Match(DATABASE);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2550; Match(FAILOVER);
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2551; Match(FORCE_FAILOVER_ALLOW_DATA_LOSS);
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2552; Match(ADD);
				State = 2553; Match(LISTENER);
				State = 2554; _localctx.listener_name = Match(STRING);
				State = 2555; Match(LR_BRACKET);
				State = 2591;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,155,_ctx) ) {
				case 1:
					{
					State = 2556; Match(WITH);
					State = 2557; Match(DHCP);
					{
					State = 2558; Match(ON);
					State = 2559; Match(LR_BRACKET);
					State = 2560; ip_v4_failover();
					State = 2561; ip_v4_failover();
					State = 2562; Match(RR_BRACKET);
					}
					}
					break;

				case 2:
					{
					State = 2564; Match(WITH);
					State = 2565; Match(IP);
					State = 2566; Match(LR_BRACKET);
					{
					State = 2580;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 2568;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,151,_ctx) ) {
							case 1:
								{
								State = 2567; Match(COMMA);
								}
								break;
							}
							State = 2570; Match(LR_BRACKET);
							State = 2576;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,152,_ctx) ) {
							case 1:
								{
								State = 2571; ip_v4_failover();
								State = 2572; Match(COMMA);
								State = 2573; ip_v4_failover();
								}
								break;

							case 2:
								{
								State = 2575; ip_v6_failover();
								}
								break;
							}
							State = 2578; Match(RR_BRACKET);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 2582;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,153,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					State = 2584; Match(RR_BRACKET);
					State = 2589;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,154,_ctx) ) {
					case 1:
						{
						State = 2585; Match(COMMA);
						State = 2586; Match(PORT);
						State = 2587; Match(EQUAL);
						State = 2588; Match(DECIMAL);
						}
						break;
					}
					}
					}
					break;
				}
				State = 2593; Match(RR_BRACKET);
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2595; Match(MODIFY);
				State = 2596; Match(LISTENER);
				State = 2611;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,157,_ctx) ) {
				case 1:
					{
					State = 2597; Match(ADD);
					State = 2598; Match(IP);
					State = 2599; Match(LR_BRACKET);
					State = 2604;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,156,_ctx) ) {
					case 1:
						{
						State = 2600; ip_v4_failover();
						State = 2601; ip_v4_failover();
						}
						break;

					case 2:
						{
						State = 2603; ip_v6_failover();
						}
						break;
					}
					State = 2606; Match(RR_BRACKET);
					}
					break;

				case 2:
					{
					State = 2608; Match(PORT);
					State = 2609; Match(EQUAL);
					State = 2610; Match(DECIMAL);
					}
					break;
				}
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2613; Match(RESTART);
				State = 2614; Match(LISTENER);
				State = 2615; Match(STRING);
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2616; Match(REMOVE);
				State = 2617; Match(LISTENER);
				State = 2618; Match(STRING);
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2619; Match(OFFLINE);
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2620; Match(WITH);
				State = 2621; Match(LR_BRACKET);
				State = 2622; Match(DTC_SUPPORT);
				State = 2623; Match(EQUAL);
				State = 2624; Match(PER_DB);
				State = 2625; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ip_v4_failoverContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Ip_v4_failoverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ip_v4_failover; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIp_v4_failover(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIp_v4_failover(this);
		}
	}

	[RuleVersion(0)]
	public Ip_v4_failoverContext ip_v4_failover() {
		Ip_v4_failoverContext _localctx = new Ip_v4_failoverContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_ip_v4_failover);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2628; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ip_v6_failoverContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Ip_v6_failoverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ip_v6_failover; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIp_v6_failover(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIp_v6_failover(this);
		}
	}

	[RuleVersion(0)]
	public Ip_v6_failoverContext ip_v6_failover() {
		Ip_v6_failoverContext _localctx = new Ip_v6_failoverContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_ip_v6_failover);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2630; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_broker_priorityContext : ParserRuleContext {
		public Id_Context ConversationPriorityName;
		public IToken RemoteServiceName;
		public IToken PriorityValue;
		public ITerminalNode BROKER() { return GetToken(TSqlParser.BROKER, 0); }
		public ITerminalNode PRIORITY() { return GetToken(TSqlParser.PRIORITY, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode CONTRACT_NAME() { return GetToken(TSqlParser.CONTRACT_NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode LOCAL_SERVICE_NAME() { return GetToken(TSqlParser.LOCAL_SERVICE_NAME, 0); }
		public ITerminalNode REMOTE_SERVICE_NAME() { return GetToken(TSqlParser.REMOTE_SERVICE_NAME, 0); }
		public ITerminalNode PRIORITY_LEVEL() { return GetToken(TSqlParser.PRIORITY_LEVEL, 0); }
		public ITerminalNode[] ANY() { return GetTokens(TSqlParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(TSqlParser.ANY, i);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode DOUBLE_FORWARD_SLASH() { return GetToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0); }
		public Create_or_alter_broker_priorityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_broker_priority; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_broker_priority(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_broker_priority(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_broker_priorityContext create_or_alter_broker_priority() {
		Create_or_alter_broker_priorityContext _localctx = new Create_or_alter_broker_priorityContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_create_or_alter_broker_priority);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2632;
			_la = _input.La(1);
			if ( !(_la==ALTER || _la==CREATE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 2633; Match(BROKER);
			State = 2634; Match(PRIORITY);
			State = 2635; _localctx.ConversationPriorityName = id_();
			State = 2636; Match(FOR);
			State = 2637; Match(CONVERSATION);
			State = 2638; Match(SET);
			State = 2639; Match(LR_BRACKET);
			State = 2649;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,161,_ctx) ) {
			case 1:
				{
				State = 2640; Match(CONTRACT_NAME);
				State = 2641; Match(EQUAL);
				State = 2644;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,159,_ctx) ) {
				case 1:
					{
					{
					State = 2642; id_();
					}
					}
					break;

				case 2:
					{
					State = 2643; Match(ANY);
					}
					break;
				}
				State = 2647;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,160,_ctx) ) {
				case 1:
					{
					State = 2646; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 2663;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,165,_ctx) ) {
			case 1:
				{
				State = 2651; Match(LOCAL_SERVICE_NAME);
				State = 2652; Match(EQUAL);
				State = 2658;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,163,_ctx) ) {
				case 1:
					{
					State = 2654;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,162,_ctx) ) {
					case 1:
						{
						State = 2653; Match(DOUBLE_FORWARD_SLASH);
						}
						break;
					}
					State = 2656; id_();
					}
					break;

				case 2:
					{
					State = 2657; Match(ANY);
					}
					break;
				}
				State = 2661;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,164,_ctx) ) {
				case 1:
					{
					State = 2660; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 2674;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,168,_ctx) ) {
			case 1:
				{
				State = 2665; Match(REMOTE_SERVICE_NAME);
				State = 2666; Match(EQUAL);
				State = 2669;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,166,_ctx) ) {
				case 1:
					{
					State = 2667; _localctx.RemoteServiceName = Match(STRING);
					}
					break;

				case 2:
					{
					State = 2668; Match(ANY);
					}
					break;
				}
				State = 2672;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,167,_ctx) ) {
				case 1:
					{
					State = 2671; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 2682;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,170,_ctx) ) {
			case 1:
				{
				State = 2676; Match(PRIORITY_LEVEL);
				State = 2677; Match(EQUAL);
				State = 2680;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,169,_ctx) ) {
				case 1:
					{
					State = 2678; _localctx.PriorityValue = Match(DECIMAL);
					}
					break;

				case 2:
					{
					State = 2679; Match(DEFAULT);
					}
					break;
				}
				}
				break;
			}
			State = 2684; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_broker_priorityContext : ParserRuleContext {
		public Id_Context ConversationPriorityName;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode BROKER() { return GetToken(TSqlParser.BROKER, 0); }
		public ITerminalNode PRIORITY() { return GetToken(TSqlParser.PRIORITY, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_broker_priorityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_broker_priority; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_broker_priority(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_broker_priority(this);
		}
	}

	[RuleVersion(0)]
	public Drop_broker_priorityContext drop_broker_priority() {
		Drop_broker_priorityContext _localctx = new Drop_broker_priorityContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_drop_broker_priority);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2686; Match(DROP);
			State = 2687; Match(BROKER);
			State = 2688; Match(PRIORITY);
			State = 2689; _localctx.ConversationPriorityName = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_certificateContext : ParserRuleContext {
		public Id_Context certificate_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode PRIVATE_KEY() { return GetToken(TSqlParser.PRIVATE_KEY, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode ACTIVE() { return GetToken(TSqlParser.ACTIVE, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode BEGIN_DIALOG() { return GetToken(TSqlParser.BEGIN_DIALOG, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode[] FILE() { return GetTokens(TSqlParser.FILE); }
		public ITerminalNode FILE(int i) {
			return GetToken(TSqlParser.FILE, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] DECRYPTION() { return GetTokens(TSqlParser.DECRYPTION); }
		public ITerminalNode DECRYPTION(int i) {
			return GetToken(TSqlParser.DECRYPTION, i);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public ITerminalNode[] PASSWORD() { return GetTokens(TSqlParser.PASSWORD); }
		public ITerminalNode PASSWORD(int i) {
			return GetToken(TSqlParser.PASSWORD, i);
		}
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_certificateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_certificate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_certificate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_certificate(this);
		}
	}

	[RuleVersion(0)]
	public Alter_certificateContext alter_certificate() {
		Alter_certificateContext _localctx = new Alter_certificateContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_alter_certificate);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2691; Match(ALTER);
			State = 2692; Match(CERTIFICATE);
			State = 2693; _localctx.certificate_name = id_();
			State = 2733;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,176,_ctx) ) {
			case 1:
				{
				State = 2694; Match(REMOVE);
				State = 2695; Match(PRIVATE_KEY);
				}
				break;

			case 2:
				{
				State = 2696; Match(WITH);
				State = 2697; Match(PRIVATE);
				State = 2698; Match(KEY);
				State = 2699; Match(LR_BRACKET);
				State = 2722;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 2722;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,174,_ctx) ) {
						case 1:
							{
							State = 2700; Match(FILE);
							State = 2701; Match(EQUAL);
							State = 2702; Match(STRING);
							State = 2704;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,171,_ctx) ) {
							case 1:
								{
								State = 2703; Match(COMMA);
								}
								break;
							}
							}
							break;

						case 2:
							{
							State = 2706; Match(DECRYPTION);
							State = 2707; Match(BY);
							State = 2708; Match(PASSWORD);
							State = 2709; Match(EQUAL);
							State = 2710; Match(STRING);
							State = 2712;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,172,_ctx) ) {
							case 1:
								{
								State = 2711; Match(COMMA);
								}
								break;
							}
							}
							break;

						case 3:
							{
							State = 2714; Match(ENCRYPTION);
							State = 2715; Match(BY);
							State = 2716; Match(PASSWORD);
							State = 2717; Match(EQUAL);
							State = 2718; Match(STRING);
							State = 2720;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,173,_ctx) ) {
							case 1:
								{
								State = 2719; Match(COMMA);
								}
								break;
							}
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2724;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,175,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 2726; Match(RR_BRACKET);
				}
				break;

			case 3:
				{
				State = 2727; Match(WITH);
				State = 2728; Match(ACTIVE);
				State = 2729; Match(FOR);
				State = 2730; Match(BEGIN_DIALOG);
				State = 2731; Match(EQUAL);
				State = 2732;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_column_encryption_keyContext : ParserRuleContext {
		public Id_Context column_encryption_key;
		public Id_Context column_master_key_name;
		public IToken algorithm_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode COLUMN_MASTER_KEY() { return GetToken(TSqlParser.COLUMN_MASTER_KEY, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode ENCRYPTED_VALUE() { return GetToken(TSqlParser.ENCRYPTED_VALUE, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Alter_column_encryption_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_column_encryption_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_column_encryption_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_column_encryption_key(this);
		}
	}

	[RuleVersion(0)]
	public Alter_column_encryption_keyContext alter_column_encryption_key() {
		Alter_column_encryption_keyContext _localctx = new Alter_column_encryption_keyContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_alter_column_encryption_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2735; Match(ALTER);
			State = 2736; Match(COLUMN);
			State = 2737; Match(ENCRYPTION);
			State = 2738; Match(KEY);
			State = 2739; _localctx.column_encryption_key = id_();
			State = 2740;
			_la = _input.La(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 2741; Match(VALUE);
			State = 2742; Match(LR_BRACKET);
			State = 2743; Match(COLUMN_MASTER_KEY);
			State = 2744; Match(EQUAL);
			State = 2745; _localctx.column_master_key_name = id_();
			State = 2754;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,177,_ctx) ) {
			case 1:
				{
				State = 2746; Match(COMMA);
				State = 2747; Match(ALGORITHM);
				State = 2748; Match(EQUAL);
				State = 2749; _localctx.algorithm_name = Match(STRING);
				State = 2750; Match(COMMA);
				State = 2751; Match(ENCRYPTED_VALUE);
				State = 2752; Match(EQUAL);
				State = 2753; Match(BINARY);
				}
				break;
			}
			State = 2756; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_column_encryption_keyContext : ParserRuleContext {
		public Id_Context column_encryption_key;
		public Id_Context column_master_key_name;
		public IToken algorithm_name;
		public IToken encrypted_value;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] COLUMN_MASTER_KEY() { return GetTokens(TSqlParser.COLUMN_MASTER_KEY); }
		public ITerminalNode COLUMN_MASTER_KEY(int i) {
			return GetToken(TSqlParser.COLUMN_MASTER_KEY, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] ALGORITHM() { return GetTokens(TSqlParser.ALGORITHM); }
		public ITerminalNode ALGORITHM(int i) {
			return GetToken(TSqlParser.ALGORITHM, i);
		}
		public ITerminalNode[] ENCRYPTED_VALUE() { return GetTokens(TSqlParser.ENCRYPTED_VALUE); }
		public ITerminalNode ENCRYPTED_VALUE(int i) {
			return GetToken(TSqlParser.ENCRYPTED_VALUE, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] BINARY() { return GetTokens(TSqlParser.BINARY); }
		public ITerminalNode BINARY(int i) {
			return GetToken(TSqlParser.BINARY, i);
		}
		public Create_column_encryption_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_column_encryption_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_column_encryption_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_column_encryption_key(this);
		}
	}

	[RuleVersion(0)]
	public Create_column_encryption_keyContext create_column_encryption_key() {
		Create_column_encryption_keyContext _localctx = new Create_column_encryption_keyContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_create_column_encryption_key);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2758; Match(CREATE);
			State = 2759; Match(COLUMN);
			State = 2760; Match(ENCRYPTION);
			State = 2761; Match(KEY);
			State = 2762; _localctx.column_encryption_key = id_();
			State = 2763; Match(WITH);
			State = 2764; Match(VALUES);
			State = 2784;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2765; Match(LR_BRACKET);
					State = 2767;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,178,_ctx) ) {
					case 1:
						{
						State = 2766; Match(COMMA);
						}
						break;
					}
					State = 2769; Match(COLUMN_MASTER_KEY);
					State = 2770; Match(EQUAL);
					State = 2771; _localctx.column_master_key_name = id_();
					State = 2772; Match(COMMA);
					State = 2773; Match(ALGORITHM);
					State = 2774; Match(EQUAL);
					State = 2775; _localctx.algorithm_name = Match(STRING);
					State = 2776; Match(COMMA);
					State = 2777; Match(ENCRYPTED_VALUE);
					State = 2778; Match(EQUAL);
					State = 2779; _localctx.encrypted_value = Match(BINARY);
					State = 2780; Match(RR_BRACKET);
					State = 2782;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,179,_ctx) ) {
					case 1:
						{
						State = 2781; Match(COMMA);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2786;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,180,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_certificateContext : ParserRuleContext {
		public Id_Context certificate_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_certificateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_certificate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_certificate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_certificate(this);
		}
	}

	[RuleVersion(0)]
	public Drop_certificateContext drop_certificate() {
		Drop_certificateContext _localctx = new Drop_certificateContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_drop_certificate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2788; Match(DROP);
			State = 2789; Match(CERTIFICATE);
			State = 2790; _localctx.certificate_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_column_encryption_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_column_encryption_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_column_encryption_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_column_encryption_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_column_encryption_key(this);
		}
	}

	[RuleVersion(0)]
	public Drop_column_encryption_keyContext drop_column_encryption_key() {
		Drop_column_encryption_keyContext _localctx = new Drop_column_encryption_keyContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_drop_column_encryption_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2792; Match(DROP);
			State = 2793; Match(COLUMN);
			State = 2794; Match(ENCRYPTION);
			State = 2795; Match(KEY);
			State = 2796; _localctx.key_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_column_master_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_column_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_column_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_column_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_column_master_key(this);
		}
	}

	[RuleVersion(0)]
	public Drop_column_master_keyContext drop_column_master_key() {
		Drop_column_master_keyContext _localctx = new Drop_column_master_keyContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_drop_column_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2798; Match(DROP);
			State = 2799; Match(COLUMN);
			State = 2800; Match(MASTER);
			State = 2801; Match(KEY);
			State = 2802; _localctx.key_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_contractContext : ParserRuleContext {
		public Id_Context dropped_contract_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_contractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_contract; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_contract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_contract(this);
		}
	}

	[RuleVersion(0)]
	public Drop_contractContext drop_contract() {
		Drop_contractContext _localctx = new Drop_contractContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_drop_contract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2804; Match(DROP);
			State = 2805; Match(CONTRACT);
			State = 2806; _localctx.dropped_contract_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_credentialContext : ParserRuleContext {
		public Id_Context credential_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_credentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_credential; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_credential(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_credential(this);
		}
	}

	[RuleVersion(0)]
	public Drop_credentialContext drop_credential() {
		Drop_credentialContext _localctx = new Drop_credentialContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_drop_credential);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2808; Match(DROP);
			State = 2809; Match(CREDENTIAL);
			State = 2810; _localctx.credential_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_cryptograhic_providerContext : ParserRuleContext {
		public Id_Context provider_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_cryptograhic_providerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_cryptograhic_provider; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_cryptograhic_provider(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_cryptograhic_provider(this);
		}
	}

	[RuleVersion(0)]
	public Drop_cryptograhic_providerContext drop_cryptograhic_provider() {
		Drop_cryptograhic_providerContext _localctx = new Drop_cryptograhic_providerContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_drop_cryptograhic_provider);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2812; Match(DROP);
			State = 2813; Match(CRYPTOGRAPHIC);
			State = 2814; Match(PROVIDER);
			State = 2815; _localctx.provider_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_databaseContext : ParserRuleContext {
		public Id_Context database_name_or_database_snapshot_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_database(this);
		}
	}

	[RuleVersion(0)]
	public Drop_databaseContext drop_database() {
		Drop_databaseContext _localctx = new Drop_databaseContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_drop_database);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2817; Match(DROP);
			State = 2818; Match(DATABASE);
			State = 2821;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,181,_ctx) ) {
			case 1:
				{
				State = 2819; Match(IF);
				State = 2820; Match(EXISTS);
				}
				break;
			}
			State = 2827;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2824;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,182,_ctx) ) {
					case 1:
						{
						State = 2823; Match(COMMA);
						}
						break;
					}
					State = 2826; _localctx.database_name_or_database_snapshot_name = id_();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2829;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,183,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_database_audit_specificationContext : ParserRuleContext {
		public Id_Context audit_specification_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_database_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_database_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_database_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_database_audit_specification(this);
		}
	}

	[RuleVersion(0)]
	public Drop_database_audit_specificationContext drop_database_audit_specification() {
		Drop_database_audit_specificationContext _localctx = new Drop_database_audit_specificationContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_drop_database_audit_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2831; Match(DROP);
			State = 2832; Match(DATABASE);
			State = 2833; Match(AUDIT);
			State = 2834; Match(SPECIFICATION);
			State = 2835; _localctx.audit_specification_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_database_encryption_keyContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Drop_database_encryption_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_database_encryption_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_database_encryption_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_database_encryption_key(this);
		}
	}

	[RuleVersion(0)]
	public Drop_database_encryption_keyContext drop_database_encryption_key() {
		Drop_database_encryption_keyContext _localctx = new Drop_database_encryption_keyContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_drop_database_encryption_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2837; Match(DROP);
			State = 2838; Match(DATABASE);
			State = 2839; Match(ENCRYPTION);
			State = 2840; Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_database_scoped_credentialContext : ParserRuleContext {
		public Id_Context credential_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode SCOPED() { return GetToken(TSqlParser.SCOPED, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_database_scoped_credentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_database_scoped_credential; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_database_scoped_credential(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_database_scoped_credential(this);
		}
	}

	[RuleVersion(0)]
	public Drop_database_scoped_credentialContext drop_database_scoped_credential() {
		Drop_database_scoped_credentialContext _localctx = new Drop_database_scoped_credentialContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_drop_database_scoped_credential);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2842; Match(DROP);
			State = 2843; Match(DATABASE);
			State = 2844; Match(SCOPED);
			State = 2845; Match(CREDENTIAL);
			State = 2846; _localctx.credential_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_defaultContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context default_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_default; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_default(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_default(this);
		}
	}

	[RuleVersion(0)]
	public Drop_defaultContext drop_default() {
		Drop_defaultContext _localctx = new Drop_defaultContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_drop_default);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2848; Match(DROP);
			State = 2849; Match(DEFAULT);
			State = 2852;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,184,_ctx) ) {
			case 1:
				{
				State = 2850; Match(IF);
				State = 2851; Match(EXISTS);
				}
				break;
			}
			{
			State = 2855;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,185,_ctx) ) {
			case 1:
				{
				State = 2854; Match(COMMA);
				}
				break;
			}
			State = 2860;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,186,_ctx) ) {
			case 1:
				{
				State = 2857; _localctx.schema_name = id_();
				State = 2858; Match(DOT);
				}
				break;
			}
			State = 2862; _localctx.default_name = id_();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_endpointContext : ParserRuleContext {
		public Id_Context endPointName;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_endpointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_endpoint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_endpoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_endpoint(this);
		}
	}

	[RuleVersion(0)]
	public Drop_endpointContext drop_endpoint() {
		Drop_endpointContext _localctx = new Drop_endpointContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_drop_endpoint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2864; Match(DROP);
			State = 2865; Match(ENDPOINT);
			State = 2866; _localctx.endPointName = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_data_sourceContext : ParserRuleContext {
		public Id_Context external_data_source_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_external_data_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_data_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_data_source(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_data_source(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_data_sourceContext drop_external_data_source() {
		Drop_external_data_sourceContext _localctx = new Drop_external_data_sourceContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_drop_external_data_source);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2868; Match(DROP);
			State = 2869; Match(EXTERNAL);
			State = 2870; Match(DATA);
			State = 2871; Match(SOURCE);
			State = 2872; _localctx.external_data_source_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_file_formatContext : ParserRuleContext {
		public Id_Context external_file_format_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode FORMAT() { return GetToken(TSqlParser.FORMAT, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_external_file_formatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_file_format; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_file_format(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_file_format(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_file_formatContext drop_external_file_format() {
		Drop_external_file_formatContext _localctx = new Drop_external_file_formatContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_drop_external_file_format);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2874; Match(DROP);
			State = 2875; Match(EXTERNAL);
			State = 2876; Match(FILE);
			State = 2877; Match(FORMAT);
			State = 2878; _localctx.external_file_format_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_libraryContext : ParserRuleContext {
		public Id_Context library_name;
		public Id_Context owner_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Drop_external_libraryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_library; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_library(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_library(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_libraryContext drop_external_library() {
		Drop_external_libraryContext _localctx = new Drop_external_libraryContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_drop_external_library);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2880; Match(DROP);
			State = 2881; Match(EXTERNAL);
			State = 2882; Match(LIBRARY);
			State = 2883; _localctx.library_name = id_();
			State = 2886;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,187,_ctx) ) {
			case 1:
				{
				State = 2884; Match(AUTHORIZATION);
				State = 2885; _localctx.owner_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_resource_poolContext : ParserRuleContext {
		public Id_Context pool_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_external_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_resource_pool(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_resource_poolContext drop_external_resource_pool() {
		Drop_external_resource_poolContext _localctx = new Drop_external_resource_poolContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_drop_external_resource_pool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2888; Match(DROP);
			State = 2889; Match(EXTERNAL);
			State = 2890; Match(RESOURCE);
			State = 2891; Match(POOL);
			State = 2892; _localctx.pool_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_tableContext : ParserRuleContext {
		public Id_Context database_name;
		public Id_Context schema_name;
		public Id_Context table;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Drop_external_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_table(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_tableContext drop_external_table() {
		Drop_external_tableContext _localctx = new Drop_external_tableContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_drop_external_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2894; Match(DROP);
			State = 2895; Match(EXTERNAL);
			State = 2896; Match(TABLE);
			State = 2900;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				State = 2897; _localctx.database_name = id_();
				State = 2898; Match(DOT);
				}
				break;
			}
			State = 2905;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,189,_ctx) ) {
			case 1:
				{
				State = 2902; _localctx.schema_name = id_();
				State = 2903; Match(DOT);
				}
				break;
			}
			State = 2907; _localctx.table = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_event_notificationsContext : ParserRuleContext {
		public Id_Context notification_name;
		public Id_Context queue_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_event_notificationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_event_notifications; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_event_notifications(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_event_notifications(this);
		}
	}

	[RuleVersion(0)]
	public Drop_event_notificationsContext drop_event_notifications() {
		Drop_event_notificationsContext _localctx = new Drop_event_notificationsContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_drop_event_notifications);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2909; Match(DROP);
			State = 2910; Match(EVENT);
			State = 2911; Match(NOTIFICATION);
			State = 2916;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2913;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,190,_ctx) ) {
					case 1:
						{
						State = 2912; Match(COMMA);
						}
						break;
					}
					State = 2915; _localctx.notification_name = id_();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2918;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,191,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 2920; Match(ON);
			State = 2925;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,192,_ctx) ) {
			case 1:
				{
				State = 2921; Match(SERVER);
				}
				break;

			case 2:
				{
				State = 2922; Match(DATABASE);
				}
				break;

			case 3:
				{
				State = 2923; Match(QUEUE);
				State = 2924; _localctx.queue_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_event_sessionContext : ParserRuleContext {
		public Id_Context event_session_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_event_sessionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_event_session; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_event_session(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_event_session(this);
		}
	}

	[RuleVersion(0)]
	public Drop_event_sessionContext drop_event_session() {
		Drop_event_sessionContext _localctx = new Drop_event_sessionContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_drop_event_session);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2927; Match(DROP);
			State = 2928; Match(EVENT);
			State = 2929; Match(SESSION);
			State = 2930; _localctx.event_session_name = id_();
			State = 2931; Match(ON);
			State = 2932; Match(SERVER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_fulltext_catalogContext : ParserRuleContext {
		public Id_Context catalog_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_fulltext_catalogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_fulltext_catalog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_fulltext_catalog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_fulltext_catalog(this);
		}
	}

	[RuleVersion(0)]
	public Drop_fulltext_catalogContext drop_fulltext_catalog() {
		Drop_fulltext_catalogContext _localctx = new Drop_fulltext_catalogContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_drop_fulltext_catalog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2934; Match(DROP);
			State = 2935; Match(FULLTEXT);
			State = 2936; Match(CATALOG);
			State = 2937; _localctx.catalog_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_fulltext_indexContext : ParserRuleContext {
		public Id_Context schema;
		public Id_Context table;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_fulltext_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_fulltext_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_fulltext_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_fulltext_index(this);
		}
	}

	[RuleVersion(0)]
	public Drop_fulltext_indexContext drop_fulltext_index() {
		Drop_fulltext_indexContext _localctx = new Drop_fulltext_indexContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_drop_fulltext_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2939; Match(DROP);
			State = 2940; Match(FULLTEXT);
			State = 2941; Match(INDEX);
			State = 2942; Match(ON);
			State = 2946;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,193,_ctx) ) {
			case 1:
				{
				State = 2943; _localctx.schema = id_();
				State = 2944; Match(DOT);
				}
				break;
			}
			State = 2948; _localctx.table = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_fulltext_stoplistContext : ParserRuleContext {
		public Id_Context stoplist_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_fulltext_stoplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_fulltext_stoplist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_fulltext_stoplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_fulltext_stoplist(this);
		}
	}

	[RuleVersion(0)]
	public Drop_fulltext_stoplistContext drop_fulltext_stoplist() {
		Drop_fulltext_stoplistContext _localctx = new Drop_fulltext_stoplistContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_drop_fulltext_stoplist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2950; Match(DROP);
			State = 2951; Match(FULLTEXT);
			State = 2952; Match(STOPLIST);
			State = 2953; _localctx.stoplist_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_loginContext : ParserRuleContext {
		public Id_Context login_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_loginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_login; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_login(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_login(this);
		}
	}

	[RuleVersion(0)]
	public Drop_loginContext drop_login() {
		Drop_loginContext _localctx = new Drop_loginContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_drop_login);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2955; Match(DROP);
			State = 2956; Match(LOGIN);
			State = 2957; _localctx.login_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_master_keyContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Drop_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_master_key(this);
		}
	}

	[RuleVersion(0)]
	public Drop_master_keyContext drop_master_key() {
		Drop_master_keyContext _localctx = new Drop_master_keyContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_drop_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2959; Match(DROP);
			State = 2960; Match(MASTER);
			State = 2961; Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_message_typeContext : ParserRuleContext {
		public Id_Context message_type_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_message_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_message_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_message_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_message_type(this);
		}
	}

	[RuleVersion(0)]
	public Drop_message_typeContext drop_message_type() {
		Drop_message_typeContext _localctx = new Drop_message_typeContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_drop_message_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2963; Match(DROP);
			State = 2964; Match(MESSAGE);
			State = 2965; Match(TYPE);
			State = 2966; _localctx.message_type_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_partition_functionContext : ParserRuleContext {
		public Id_Context partition_function_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_partition_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_partition_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_partition_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_partition_function(this);
		}
	}

	[RuleVersion(0)]
	public Drop_partition_functionContext drop_partition_function() {
		Drop_partition_functionContext _localctx = new Drop_partition_functionContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_drop_partition_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2968; Match(DROP);
			State = 2969; Match(PARTITION);
			State = 2970; Match(FUNCTION);
			State = 2971; _localctx.partition_function_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_partition_schemeContext : ParserRuleContext {
		public Id_Context partition_scheme_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_partition_schemeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_partition_scheme; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_partition_scheme(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_partition_scheme(this);
		}
	}

	[RuleVersion(0)]
	public Drop_partition_schemeContext drop_partition_scheme() {
		Drop_partition_schemeContext _localctx = new Drop_partition_schemeContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_drop_partition_scheme);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2973; Match(DROP);
			State = 2974; Match(PARTITION);
			State = 2975; Match(SCHEME);
			State = 2976; _localctx.partition_scheme_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_queueContext : ParserRuleContext {
		public Id_Context database_name;
		public Id_Context schema_name;
		public Id_Context queue_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Drop_queueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_queue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_queue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_queue(this);
		}
	}

	[RuleVersion(0)]
	public Drop_queueContext drop_queue() {
		Drop_queueContext _localctx = new Drop_queueContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_drop_queue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2978; Match(DROP);
			State = 2979; Match(QUEUE);
			State = 2983;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,194,_ctx) ) {
			case 1:
				{
				State = 2980; _localctx.database_name = id_();
				State = 2981; Match(DOT);
				}
				break;
			}
			State = 2988;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,195,_ctx) ) {
			case 1:
				{
				State = 2985; _localctx.schema_name = id_();
				State = 2986; Match(DOT);
				}
				break;
			}
			State = 2990; _localctx.queue_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_remote_service_bindingContext : ParserRuleContext {
		public Id_Context binding_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_remote_service_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_remote_service_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_remote_service_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_remote_service_binding(this);
		}
	}

	[RuleVersion(0)]
	public Drop_remote_service_bindingContext drop_remote_service_binding() {
		Drop_remote_service_bindingContext _localctx = new Drop_remote_service_bindingContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_drop_remote_service_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2992; Match(DROP);
			State = 2993; Match(REMOTE);
			State = 2994; Match(SERVICE);
			State = 2995; Match(BINDING);
			State = 2996; _localctx.binding_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_resource_poolContext : ParserRuleContext {
		public Id_Context pool_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_resource_pool(this);
		}
	}

	[RuleVersion(0)]
	public Drop_resource_poolContext drop_resource_pool() {
		Drop_resource_poolContext _localctx = new Drop_resource_poolContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_drop_resource_pool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2998; Match(DROP);
			State = 2999; Match(RESOURCE);
			State = 3000; Match(POOL);
			State = 3001; _localctx.pool_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_db_roleContext : ParserRuleContext {
		public Id_Context role_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_db_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_db_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_db_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_db_role(this);
		}
	}

	[RuleVersion(0)]
	public Drop_db_roleContext drop_db_role() {
		Drop_db_roleContext _localctx = new Drop_db_roleContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_drop_db_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3003; Match(DROP);
			State = 3004; Match(ROLE);
			State = 3007;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				State = 3005; Match(IF);
				State = 3006; Match(EXISTS);
				}
				break;
			}
			State = 3009; _localctx.role_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_routeContext : ParserRuleContext {
		public Id_Context route_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_routeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_route; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_route(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_route(this);
		}
	}

	[RuleVersion(0)]
	public Drop_routeContext drop_route() {
		Drop_routeContext _localctx = new Drop_routeContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_drop_route);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3011; Match(DROP);
			State = 3012; Match(ROUTE);
			State = 3013; _localctx.route_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_ruleContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context rule_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode RULE() { return GetToken(TSqlParser.RULE, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_rule; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_rule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_rule(this);
		}
	}

	[RuleVersion(0)]
	public Drop_ruleContext drop_rule() {
		Drop_ruleContext _localctx = new Drop_ruleContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_drop_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3015; Match(DROP);
			State = 3016; Match(RULE);
			State = 3019;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,197,_ctx) ) {
			case 1:
				{
				State = 3017; Match(IF);
				State = 3018; Match(EXISTS);
				}
				break;
			}
			State = 3030;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,200,_ctx) ) {
			case 1:
				{
				State = 3022;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,198,_ctx) ) {
				case 1:
					{
					State = 3021; Match(COMMA);
					}
					break;
				}
				State = 3027;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,199,_ctx) ) {
				case 1:
					{
					State = 3024; _localctx.schema_name = id_();
					State = 3025; Match(DOT);
					}
					break;
				}
				State = 3029; _localctx.rule_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_schemaContext : ParserRuleContext {
		public Id_Context schema_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_schema(this);
		}
	}

	[RuleVersion(0)]
	public Drop_schemaContext drop_schema() {
		Drop_schemaContext _localctx = new Drop_schemaContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_drop_schema);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3032; Match(DROP);
			State = 3033; Match(SCHEMA);
			State = 3036;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,201,_ctx) ) {
			case 1:
				{
				State = 3034; Match(IF);
				State = 3035; Match(EXISTS);
				}
				break;
			}
			State = 3038; _localctx.schema_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_search_property_listContext : ParserRuleContext {
		public Id_Context property_list_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_search_property_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_search_property_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_search_property_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_search_property_list(this);
		}
	}

	[RuleVersion(0)]
	public Drop_search_property_listContext drop_search_property_list() {
		Drop_search_property_listContext _localctx = new Drop_search_property_listContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_drop_search_property_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3040; Match(DROP);
			State = 3041; Match(SEARCH);
			State = 3042; Match(PROPERTY);
			State = 3043; Match(LIST);
			State = 3044; _localctx.property_list_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_security_policyContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context security_policy_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SECURITY() { return GetToken(TSqlParser.SECURITY, 0); }
		public ITerminalNode POLICY() { return GetToken(TSqlParser.POLICY, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_security_policyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_security_policy; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_security_policy(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_security_policy(this);
		}
	}

	[RuleVersion(0)]
	public Drop_security_policyContext drop_security_policy() {
		Drop_security_policyContext _localctx = new Drop_security_policyContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_drop_security_policy);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3046; Match(DROP);
			State = 3047; Match(SECURITY);
			State = 3048; Match(POLICY);
			State = 3051;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,202,_ctx) ) {
			case 1:
				{
				State = 3049; Match(IF);
				State = 3050; Match(EXISTS);
				}
				break;
			}
			State = 3056;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,203,_ctx) ) {
			case 1:
				{
				State = 3053; _localctx.schema_name = id_();
				State = 3054; Match(DOT);
				}
				break;
			}
			State = 3058; _localctx.security_policy_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_sequenceContext : ParserRuleContext {
		public Id_Context database_name;
		public Id_Context schema_name;
		public Id_Context sequence_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_sequence; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_sequence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_sequence(this);
		}
	}

	[RuleVersion(0)]
	public Drop_sequenceContext drop_sequence() {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_drop_sequence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3060; Match(DROP);
			State = 3061; Match(SEQUENCE);
			State = 3064;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,204,_ctx) ) {
			case 1:
				{
				State = 3062; Match(IF);
				State = 3063; Match(EXISTS);
				}
				break;
			}
			State = 3080;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,208,_ctx) ) {
			case 1:
				{
				State = 3067;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,205,_ctx) ) {
				case 1:
					{
					State = 3066; Match(COMMA);
					}
					break;
				}
				State = 3072;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,206,_ctx) ) {
				case 1:
					{
					State = 3069; _localctx.database_name = id_();
					State = 3070; Match(DOT);
					}
					break;
				}
				State = 3077;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,207,_ctx) ) {
				case 1:
					{
					State = 3074; _localctx.schema_name = id_();
					State = 3075; Match(DOT);
					}
					break;
				}
				State = 3079; _localctx.sequence_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_server_auditContext : ParserRuleContext {
		public Id_Context audit_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_server_auditContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_server_audit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_server_audit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_server_audit(this);
		}
	}

	[RuleVersion(0)]
	public Drop_server_auditContext drop_server_audit() {
		Drop_server_auditContext _localctx = new Drop_server_auditContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_drop_server_audit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3082; Match(DROP);
			State = 3083; Match(SERVER);
			State = 3084; Match(AUDIT);
			State = 3085; _localctx.audit_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_server_audit_specificationContext : ParserRuleContext {
		public Id_Context audit_specification_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_server_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_server_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_server_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_server_audit_specification(this);
		}
	}

	[RuleVersion(0)]
	public Drop_server_audit_specificationContext drop_server_audit_specification() {
		Drop_server_audit_specificationContext _localctx = new Drop_server_audit_specificationContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_drop_server_audit_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3087; Match(DROP);
			State = 3088; Match(SERVER);
			State = 3089; Match(AUDIT);
			State = 3090; Match(SPECIFICATION);
			State = 3091; _localctx.audit_specification_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_server_roleContext : ParserRuleContext {
		public Id_Context role_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_server_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_server_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_server_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_server_role(this);
		}
	}

	[RuleVersion(0)]
	public Drop_server_roleContext drop_server_role() {
		Drop_server_roleContext _localctx = new Drop_server_roleContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_drop_server_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3093; Match(DROP);
			State = 3094; Match(SERVER);
			State = 3095; Match(ROLE);
			State = 3096; _localctx.role_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_serviceContext : ParserRuleContext {
		public Id_Context dropped_service_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_serviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_service; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_service(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_service(this);
		}
	}

	[RuleVersion(0)]
	public Drop_serviceContext drop_service() {
		Drop_serviceContext _localctx = new Drop_serviceContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_drop_service);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3098; Match(DROP);
			State = 3099; Match(SERVICE);
			State = 3100; _localctx.dropped_service_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_signatureContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context module_name;
		public Id_Context cert_name;
		public Id_Context Asym_key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SIGNATURE() { return GetToken(TSqlParser.SIGNATURE, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode COUNTER() { return GetToken(TSqlParser.COUNTER, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode[] CERTIFICATE() { return GetTokens(TSqlParser.CERTIFICATE); }
		public ITerminalNode CERTIFICATE(int i) {
			return GetToken(TSqlParser.CERTIFICATE, i);
		}
		public ITerminalNode[] ASYMMETRIC() { return GetTokens(TSqlParser.ASYMMETRIC); }
		public ITerminalNode ASYMMETRIC(int i) {
			return GetToken(TSqlParser.ASYMMETRIC, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_signature(this);
		}
	}

	[RuleVersion(0)]
	public Drop_signatureContext drop_signature() {
		Drop_signatureContext _localctx = new Drop_signatureContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_drop_signature);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3102; Match(DROP);
			State = 3104;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,209,_ctx) ) {
			case 1:
				{
				State = 3103; Match(COUNTER);
				}
				break;
			}
			State = 3106; Match(SIGNATURE);
			State = 3107; Match(FROM);
			State = 3111;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,210,_ctx) ) {
			case 1:
				{
				State = 3108; _localctx.schema_name = id_();
				State = 3109; Match(DOT);
				}
				break;
			}
			State = 3113; _localctx.module_name = id_();
			State = 3114; Match(BY);
			State = 3126;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 3126;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,213,_ctx) ) {
					case 1:
						{
						State = 3116;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,211,_ctx) ) {
						case 1:
							{
							State = 3115; Match(COMMA);
							}
							break;
						}
						State = 3118; Match(CERTIFICATE);
						State = 3119; _localctx.cert_name = id_();
						}
						break;

					case 2:
						{
						State = 3121;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,212,_ctx) ) {
						case 1:
							{
							State = 3120; Match(COMMA);
							}
							break;
						}
						State = 3123; Match(ASYMMETRIC);
						State = 3124; Match(KEY);
						State = 3125; _localctx.Asym_key_name = id_();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3128;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,214,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_statistics_name_azure_dw_and_pdwContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context object_name;
		public Id_Context statistics_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Drop_statistics_name_azure_dw_and_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_statistics_name_azure_dw_and_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_statistics_name_azure_dw_and_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_statistics_name_azure_dw_and_pdw(this);
		}
	}

	[RuleVersion(0)]
	public Drop_statistics_name_azure_dw_and_pdwContext drop_statistics_name_azure_dw_and_pdw() {
		Drop_statistics_name_azure_dw_and_pdwContext _localctx = new Drop_statistics_name_azure_dw_and_pdwContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_drop_statistics_name_azure_dw_and_pdw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3130; Match(DROP);
			State = 3131; Match(STATISTICS);
			State = 3135;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,215,_ctx) ) {
			case 1:
				{
				State = 3132; _localctx.schema_name = id_();
				State = 3133; Match(DOT);
				}
				break;
			}
			State = 3137; _localctx.object_name = id_();
			State = 3138; Match(DOT);
			State = 3139; _localctx.statistics_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_symmetric_keyContext : ParserRuleContext {
		public Id_Context symmetric_key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Drop_symmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_symmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_symmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_symmetric_key(this);
		}
	}

	[RuleVersion(0)]
	public Drop_symmetric_keyContext drop_symmetric_key() {
		Drop_symmetric_keyContext _localctx = new Drop_symmetric_keyContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_drop_symmetric_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3141; Match(DROP);
			State = 3142; Match(SYMMETRIC);
			State = 3143; Match(KEY);
			State = 3144; _localctx.symmetric_key_name = id_();
			State = 3148;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,216,_ctx) ) {
			case 1:
				{
				State = 3145; Match(REMOVE);
				State = 3146; Match(PROVIDER);
				State = 3147; Match(KEY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_synonymContext : ParserRuleContext {
		public Id_Context schema;
		public Id_Context synonym_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SYNONYM() { return GetToken(TSqlParser.SYNONYM, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_synonymContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_synonym; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_synonym(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_synonym(this);
		}
	}

	[RuleVersion(0)]
	public Drop_synonymContext drop_synonym() {
		Drop_synonymContext _localctx = new Drop_synonymContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_drop_synonym);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3150; Match(DROP);
			State = 3151; Match(SYNONYM);
			State = 3154;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,217,_ctx) ) {
			case 1:
				{
				State = 3152; Match(IF);
				State = 3153; Match(EXISTS);
				}
				break;
			}
			State = 3159;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,218,_ctx) ) {
			case 1:
				{
				State = 3156; _localctx.schema = id_();
				State = 3157; Match(DOT);
				}
				break;
			}
			State = 3161; _localctx.synonym_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_userContext : ParserRuleContext {
		public Id_Context user_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_userContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_user; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_user(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_user(this);
		}
	}

	[RuleVersion(0)]
	public Drop_userContext drop_user() {
		Drop_userContext _localctx = new Drop_userContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_drop_user);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3163; Match(DROP);
			State = 3164; Match(USER);
			State = 3167;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,219,_ctx) ) {
			case 1:
				{
				State = 3165; Match(IF);
				State = 3166; Match(EXISTS);
				}
				break;
			}
			State = 3169; _localctx.user_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_workload_groupContext : ParserRuleContext {
		public Id_Context group_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode WORKLOAD() { return GetToken(TSqlParser.WORKLOAD, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_workload_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_workload_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_workload_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_workload_group(this);
		}
	}

	[RuleVersion(0)]
	public Drop_workload_groupContext drop_workload_group() {
		Drop_workload_groupContext _localctx = new Drop_workload_groupContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_drop_workload_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3171; Match(DROP);
			State = 3172; Match(WORKLOAD);
			State = 3173; Match(GROUP);
			State = 3174; _localctx.group_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_xml_schema_collectionContext : ParserRuleContext {
		public Id_Context relational_schema;
		public Id_Context sql_identifier;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_xml_schema_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_xml_schema_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_xml_schema_collection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_xml_schema_collection(this);
		}
	}

	[RuleVersion(0)]
	public Drop_xml_schema_collectionContext drop_xml_schema_collection() {
		Drop_xml_schema_collectionContext _localctx = new Drop_xml_schema_collectionContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_drop_xml_schema_collection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3176; Match(DROP);
			State = 3177; Match(XML);
			State = 3178; Match(SCHEMA);
			State = 3179; Match(COLLECTION);
			State = 3183;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,220,_ctx) ) {
			case 1:
				{
				State = 3180; _localctx.relational_schema = id_();
				State = 3181; Match(DOT);
				}
				break;
			}
			State = 3185; _localctx.sql_identifier = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Disable_triggerContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context trigger_name;
		public Id_Context schema_id;
		public Id_Context object_name;
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Disable_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disable_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDisable_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDisable_trigger(this);
		}
	}

	[RuleVersion(0)]
	public Disable_triggerContext disable_trigger() {
		Disable_triggerContext _localctx = new Disable_triggerContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_disable_trigger);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3187; Match(DISABLE);
			State = 3188; Match(TRIGGER);
			State = 3203;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,224,_ctx) ) {
			case 1:
				{
				State = 3198;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3190;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,221,_ctx) ) {
						case 1:
							{
							State = 3189; Match(COMMA);
							}
							break;
						}
						State = 3195;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,222,_ctx) ) {
						case 1:
							{
							State = 3192; _localctx.schema_name = id_();
							State = 3193; Match(DOT);
							}
							break;
						}
						State = 3197; _localctx.trigger_name = id_();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3200;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,223,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				{
				State = 3202; Match(ALL);
				}
				break;
			}
			State = 3205; Match(ON);
			State = 3215;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,226,_ctx) ) {
			case 1:
				{
				State = 3209;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,225,_ctx) ) {
				case 1:
					{
					State = 3206; _localctx.schema_id = id_();
					State = 3207; Match(DOT);
					}
					break;
				}
				State = 3211; _localctx.object_name = id_();
				}
				break;

			case 2:
				{
				State = 3212; Match(DATABASE);
				}
				break;

			case 3:
				{
				State = 3213; Match(ALL);
				State = 3214; Match(SERVER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enable_triggerContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context trigger_name;
		public Id_Context schema_id;
		public Id_Context object_name;
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Enable_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enable_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEnable_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEnable_trigger(this);
		}
	}

	[RuleVersion(0)]
	public Enable_triggerContext enable_trigger() {
		Enable_triggerContext _localctx = new Enable_triggerContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_enable_trigger);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3217; Match(ENABLE);
			State = 3218; Match(TRIGGER);
			State = 3233;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,230,_ctx) ) {
			case 1:
				{
				State = 3228;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3220;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,227,_ctx) ) {
						case 1:
							{
							State = 3219; Match(COMMA);
							}
							break;
						}
						State = 3225;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,228,_ctx) ) {
						case 1:
							{
							State = 3222; _localctx.schema_name = id_();
							State = 3223; Match(DOT);
							}
							break;
						}
						State = 3227; _localctx.trigger_name = id_();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3230;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,229,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				{
				State = 3232; Match(ALL);
				}
				break;
			}
			State = 3235; Match(ON);
			State = 3245;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,232,_ctx) ) {
			case 1:
				{
				State = 3239;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,231,_ctx) ) {
				case 1:
					{
					State = 3236; _localctx.schema_id = id_();
					State = 3237; Match(DOT);
					}
					break;
				}
				State = 3241; _localctx.object_name = id_();
				}
				break;

			case 2:
				{
				State = 3242; Match(DATABASE);
				}
				break;

			case 3:
				{
				State = 3243; Match(ALL);
				State = 3244; Match(SERVER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lock_tableContext : ParserRuleContext {
		public IToken seconds;
		public ITerminalNode LOCK() { return GetToken(TSqlParser.LOCK, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public ITerminalNode MODE() { return GetToken(TSqlParser.MODE, 0); }
		public ITerminalNode SHARE() { return GetToken(TSqlParser.SHARE, 0); }
		public ITerminalNode EXCLUSIVE() { return GetToken(TSqlParser.EXCLUSIVE, 0); }
		public ITerminalNode WAIT() { return GetToken(TSqlParser.WAIT, 0); }
		public ITerminalNode NOWAIT() { return GetToken(TSqlParser.NOWAIT, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Lock_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLock_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLock_table(this);
		}
	}

	[RuleVersion(0)]
	public Lock_tableContext lock_table() {
		Lock_tableContext _localctx = new Lock_tableContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_lock_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3247; Match(LOCK);
			State = 3248; Match(TABLE);
			State = 3249; table_name();
			State = 3250; Match(IN);
			State = 3251;
			_la = _input.La(1);
			if ( !(_la==EXCLUSIVE || _la==SHARE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 3252; Match(MODE);
			State = 3256;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,233,_ctx) ) {
			case 1:
				{
				State = 3253; Match(WAIT);
				State = 3254; _localctx.seconds = Match(DECIMAL);
				}
				break;

			case 2:
				{
				State = 3255; Match(NOWAIT);
				}
				break;
			}
			State = 3259;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,234,_ctx) ) {
			case 1:
				{
				State = 3258; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Truncate_tableContext : ParserRuleContext {
		public ITerminalNode TRUNCATE() { return GetToken(TSqlParser.TRUNCATE, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode PARTITIONS() { return GetToken(TSqlParser.PARTITIONS, 0); }
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Truncate_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncate_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTruncate_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTruncate_table(this);
		}
	}

	[RuleVersion(0)]
	public Truncate_tableContext truncate_table() {
		Truncate_tableContext _localctx = new Truncate_tableContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_truncate_table);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3261; Match(TRUNCATE);
			State = 3262; Match(TABLE);
			State = 3263; table_name();
			State = 3283;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,238,_ctx) ) {
			case 1:
				{
				State = 3264; Match(WITH);
				State = 3265; Match(LR_BRACKET);
				State = 3266; Match(PARTITIONS);
				State = 3267; Match(LR_BRACKET);
				State = 3277;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3269;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,235,_ctx) ) {
						case 1:
							{
							State = 3268; Match(COMMA);
							}
							break;
						}
						State = 3275;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,236,_ctx) ) {
						case 1:
							{
							State = 3271; Match(DECIMAL);
							}
							break;

						case 2:
							{
							State = 3272; Match(DECIMAL);
							State = 3273; Match(TO);
							State = 3274; Match(DECIMAL);
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3279;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,237,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 3281; Match(RR_BRACKET);
				State = 3282; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_column_master_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public IToken key_store_provider_name;
		public IToken key_path;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode KEY_STORE_PROVIDER_NAME() { return GetToken(TSqlParser.KEY_STORE_PROVIDER_NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode KEY_PATH() { return GetToken(TSqlParser.KEY_PATH, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Create_column_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_column_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_column_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_column_master_key(this);
		}
	}

	[RuleVersion(0)]
	public Create_column_master_keyContext create_column_master_key() {
		Create_column_master_keyContext _localctx = new Create_column_master_keyContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_create_column_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3285; Match(CREATE);
			State = 3286; Match(COLUMN);
			State = 3287; Match(MASTER);
			State = 3288; Match(KEY);
			State = 3289; _localctx.key_name = id_();
			State = 3290; Match(WITH);
			State = 3291; Match(LR_BRACKET);
			State = 3292; Match(KEY_STORE_PROVIDER_NAME);
			State = 3293; Match(EQUAL);
			State = 3294; _localctx.key_store_provider_name = Match(STRING);
			State = 3295; Match(COMMA);
			State = 3296; Match(KEY_PATH);
			State = 3297; Match(EQUAL);
			State = 3298; _localctx.key_path = Match(STRING);
			State = 3299; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_credentialContext : ParserRuleContext {
		public Id_Context credential_name;
		public IToken identity_name;
		public IToken secret;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode SECRET() { return GetToken(TSqlParser.SECRET, 0); }
		public Alter_credentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_credential; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_credential(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_credential(this);
		}
	}

	[RuleVersion(0)]
	public Alter_credentialContext alter_credential() {
		Alter_credentialContext _localctx = new Alter_credentialContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_alter_credential);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3301; Match(ALTER);
			State = 3302; Match(CREDENTIAL);
			State = 3303; _localctx.credential_name = id_();
			State = 3304; Match(WITH);
			State = 3305; Match(IDENTITY);
			State = 3306; Match(EQUAL);
			State = 3307; _localctx.identity_name = Match(STRING);
			State = 3312;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,239,_ctx) ) {
			case 1:
				{
				State = 3308; Match(COMMA);
				State = 3309; Match(SECRET);
				State = 3310; Match(EQUAL);
				State = 3311; _localctx.secret = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_credentialContext : ParserRuleContext {
		public Id_Context credential_name;
		public IToken identity_name;
		public IToken secret;
		public Id_Context cryptographic_provider_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode SECRET() { return GetToken(TSqlParser.SECRET, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Create_credentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_credential; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_credential(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_credential(this);
		}
	}

	[RuleVersion(0)]
	public Create_credentialContext create_credential() {
		Create_credentialContext _localctx = new Create_credentialContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_create_credential);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3314; Match(CREATE);
			State = 3315; Match(CREDENTIAL);
			State = 3316; _localctx.credential_name = id_();
			State = 3317; Match(WITH);
			State = 3318; Match(IDENTITY);
			State = 3319; Match(EQUAL);
			State = 3320; _localctx.identity_name = Match(STRING);
			State = 3325;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,240,_ctx) ) {
			case 1:
				{
				State = 3321; Match(COMMA);
				State = 3322; Match(SECRET);
				State = 3323; Match(EQUAL);
				State = 3324; _localctx.secret = Match(STRING);
				}
				break;
			}
			State = 3331;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,241,_ctx) ) {
			case 1:
				{
				State = 3327; Match(FOR);
				State = 3328; Match(CRYPTOGRAPHIC);
				State = 3329; Match(PROVIDER);
				State = 3330; _localctx.cryptographic_provider_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_cryptographic_providerContext : ParserRuleContext {
		public Id_Context provider_name;
		public IToken crypto_provider_ddl_file;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public Alter_cryptographic_providerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_cryptographic_provider; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_cryptographic_provider(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_cryptographic_provider(this);
		}
	}

	[RuleVersion(0)]
	public Alter_cryptographic_providerContext alter_cryptographic_provider() {
		Alter_cryptographic_providerContext _localctx = new Alter_cryptographic_providerContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_alter_cryptographic_provider);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3333; Match(ALTER);
			State = 3334; Match(CRYPTOGRAPHIC);
			State = 3335; Match(PROVIDER);
			State = 3336; _localctx.provider_name = id_();
			State = 3341;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,242,_ctx) ) {
			case 1:
				{
				State = 3337; Match(FROM);
				State = 3338; Match(FILE);
				State = 3339; Match(EQUAL);
				State = 3340; _localctx.crypto_provider_ddl_file = Match(STRING);
				}
				break;
			}
			State = 3344;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,243,_ctx) ) {
			case 1:
				{
				State = 3343;
				_la = _input.La(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_cryptographic_providerContext : ParserRuleContext {
		public Id_Context provider_name;
		public IToken path_of_DLL;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Create_cryptographic_providerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_cryptographic_provider; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_cryptographic_provider(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_cryptographic_provider(this);
		}
	}

	[RuleVersion(0)]
	public Create_cryptographic_providerContext create_cryptographic_provider() {
		Create_cryptographic_providerContext _localctx = new Create_cryptographic_providerContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_create_cryptographic_provider);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3346; Match(CREATE);
			State = 3347; Match(CRYPTOGRAPHIC);
			State = 3348; Match(PROVIDER);
			State = 3349; _localctx.provider_name = id_();
			State = 3350; Match(FROM);
			State = 3351; Match(FILE);
			State = 3352; Match(EQUAL);
			State = 3353; _localctx.path_of_DLL = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_endpointContext : ParserRuleContext {
		public Id_Context endpointname;
		public Id_Context login;
		public IToken state;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode TCP() { return GetToken(TSqlParser.TCP, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public Endpoint_listener_clauseContext endpoint_listener_clause() {
			return GetRuleContext<Endpoint_listener_clauseContext>(0);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode TSQL() { return GetToken(TSqlParser.TSQL, 0); }
		public ITerminalNode SERVICE_BROKER() { return GetToken(TSqlParser.SERVICE_BROKER, 0); }
		public Endpoint_authentication_clauseContext endpoint_authentication_clause() {
			return GetRuleContext<Endpoint_authentication_clauseContext>(0);
		}
		public ITerminalNode DATABASE_MIRRORING() { return GetToken(TSqlParser.DATABASE_MIRRORING, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode WITNESS() { return GetToken(TSqlParser.WITNESS, 0); }
		public ITerminalNode PARTNER() { return GetToken(TSqlParser.PARTNER, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode STARTED() { return GetToken(TSqlParser.STARTED, 0); }
		public ITerminalNode STOPPED() { return GetToken(TSqlParser.STOPPED, 0); }
		public ITerminalNode[] DISABLED() { return GetTokens(TSqlParser.DISABLED); }
		public ITerminalNode DISABLED(int i) {
			return GetToken(TSqlParser.DISABLED, i);
		}
		public Endpoint_encryption_alogorithm_clauseContext endpoint_encryption_alogorithm_clause() {
			return GetRuleContext<Endpoint_encryption_alogorithm_clauseContext>(0);
		}
		public ITerminalNode MESSAGE_FORWARDING() { return GetToken(TSqlParser.MESSAGE_FORWARDING, 0); }
		public ITerminalNode MESSAGE_FORWARD_SIZE() { return GetToken(TSqlParser.MESSAGE_FORWARD_SIZE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode ENABLED() { return GetToken(TSqlParser.ENABLED, 0); }
		public Create_endpointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_endpoint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_endpoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_endpoint(this);
		}
	}

	[RuleVersion(0)]
	public Create_endpointContext create_endpoint() {
		Create_endpointContext _localctx = new Create_endpointContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_create_endpoint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3355; Match(CREATE);
			State = 3356; Match(ENDPOINT);
			State = 3357; _localctx.endpointname = id_();
			State = 3360;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,244,_ctx) ) {
			case 1:
				{
				State = 3358; Match(AUTHORIZATION);
				State = 3359; _localctx.login = id_();
				}
				break;
			}
			State = 3365;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,245,_ctx) ) {
			case 1:
				{
				State = 3362; Match(STATE);
				State = 3363; Match(EQUAL);
				State = 3364;
				_localctx.state = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==DISABLED || _la==STARTED || _la==STOPPED) ) {
					_localctx.state = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 3367; Match(AS);
			State = 3368; Match(TCP);
			State = 3369; Match(LR_BRACKET);
			State = 3370; endpoint_listener_clause();
			State = 3371; Match(RR_BRACKET);
			State = 3422;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,255,_ctx) ) {
			case 1:
				{
				State = 3372; Match(FOR);
				State = 3373; Match(TSQL);
				State = 3374; Match(LR_BRACKET);
				State = 3375; Match(RR_BRACKET);
				}
				break;

			case 2:
				{
				State = 3376; Match(FOR);
				State = 3377; Match(SERVICE_BROKER);
				State = 3378; Match(LR_BRACKET);
				State = 3379; endpoint_authentication_clause();
				State = 3384;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,247,_ctx) ) {
				case 1:
					{
					State = 3381;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,246,_ctx) ) {
					case 1:
						{
						State = 3380; Match(COMMA);
						}
						break;
					}
					State = 3383; endpoint_encryption_alogorithm_clause();
					}
					break;
				}
				State = 3392;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,249,_ctx) ) {
				case 1:
					{
					State = 3387;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,248,_ctx) ) {
					case 1:
						{
						State = 3386; Match(COMMA);
						}
						break;
					}
					State = 3389; Match(MESSAGE_FORWARDING);
					State = 3390; Match(EQUAL);
					State = 3391;
					_la = _input.La(1);
					if ( !(_la==DISABLED || _la==ENABLED) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3400;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,251,_ctx) ) {
				case 1:
					{
					State = 3395;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,250,_ctx) ) {
					case 1:
						{
						State = 3394; Match(COMMA);
						}
						break;
					}
					State = 3397; Match(MESSAGE_FORWARD_SIZE);
					State = 3398; Match(EQUAL);
					State = 3399; Match(DECIMAL);
					}
					break;
				}
				State = 3402; Match(RR_BRACKET);
				}
				break;

			case 3:
				{
				State = 3404; Match(FOR);
				State = 3405; Match(DATABASE_MIRRORING);
				State = 3406; Match(LR_BRACKET);
				State = 3407; endpoint_authentication_clause();
				State = 3412;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,253,_ctx) ) {
				case 1:
					{
					State = 3409;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,252,_ctx) ) {
					case 1:
						{
						State = 3408; Match(COMMA);
						}
						break;
					}
					State = 3411; endpoint_encryption_alogorithm_clause();
					}
					break;
				}
				State = 3415;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,254,_ctx) ) {
				case 1:
					{
					State = 3414; Match(COMMA);
					}
					break;
				}
				State = 3417; Match(ROLE);
				State = 3418; Match(EQUAL);
				State = 3419;
				_la = _input.La(1);
				if ( !(_la==ALL || _la==PARTNER || _la==WITNESS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 3420; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Endpoint_encryption_alogorithm_clauseContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DISABLED() { return GetToken(TSqlParser.DISABLED, 0); }
		public ITerminalNode SUPPORTED() { return GetToken(TSqlParser.SUPPORTED, 0); }
		public ITerminalNode REQUIRED() { return GetToken(TSqlParser.REQUIRED, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode AES() { return GetToken(TSqlParser.AES, 0); }
		public ITerminalNode RC4() { return GetToken(TSqlParser.RC4, 0); }
		public Endpoint_encryption_alogorithm_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpoint_encryption_alogorithm_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEndpoint_encryption_alogorithm_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEndpoint_encryption_alogorithm_clause(this);
		}
	}

	[RuleVersion(0)]
	public Endpoint_encryption_alogorithm_clauseContext endpoint_encryption_alogorithm_clause() {
		Endpoint_encryption_alogorithm_clauseContext _localctx = new Endpoint_encryption_alogorithm_clauseContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_endpoint_encryption_alogorithm_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3424; Match(ENCRYPTION);
			State = 3425; Match(EQUAL);
			State = 3426;
			_la = _input.La(1);
			if ( !(_la==DISABLED || _la==REQUIRED || _la==SUPPORTED) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 3438;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,259,_ctx) ) {
			case 1:
				{
				State = 3427; Match(ALGORITHM);
				State = 3436;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,258,_ctx) ) {
				case 1:
					{
					State = 3428; Match(AES);
					State = 3430;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,256,_ctx) ) {
					case 1:
						{
						State = 3429; Match(RC4);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 3432; Match(RC4);
					State = 3434;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,257,_ctx) ) {
					case 1:
						{
						State = 3433; Match(AES);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Endpoint_authentication_clauseContext : ParserRuleContext {
		public Id_Context cert_name;
		public ITerminalNode AUTHENTICATION() { return GetToken(TSqlParser.AUTHENTICATION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode NTLM() { return GetToken(TSqlParser.NTLM, 0); }
		public ITerminalNode KERBEROS() { return GetToken(TSqlParser.KERBEROS, 0); }
		public ITerminalNode NEGOTIATE() { return GetToken(TSqlParser.NEGOTIATE, 0); }
		public Endpoint_authentication_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpoint_authentication_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEndpoint_authentication_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEndpoint_authentication_clause(this);
		}
	}

	[RuleVersion(0)]
	public Endpoint_authentication_clauseContext endpoint_authentication_clause() {
		Endpoint_authentication_clauseContext _localctx = new Endpoint_authentication_clauseContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_endpoint_authentication_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3440; Match(AUTHENTICATION);
			State = 3441; Match(EQUAL);
			State = 3458;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,264,_ctx) ) {
			case 1:
				{
				State = 3442; Match(WINDOWS);
				State = 3444;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,260,_ctx) ) {
				case 1:
					{
					State = 3443;
					_la = _input.La(1);
					if ( !(_la==KERBEROS || _la==NEGOTIATE || _la==NTLM) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3448;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,261,_ctx) ) {
				case 1:
					{
					State = 3446; Match(CERTIFICATE);
					State = 3447; _localctx.cert_name = id_();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 3450; Match(CERTIFICATE);
				State = 3451; _localctx.cert_name = id_();
				State = 3453;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,262,_ctx) ) {
				case 1:
					{
					State = 3452; Match(WINDOWS);
					}
					break;
				}
				State = 3456;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,263,_ctx) ) {
				case 1:
					{
					State = 3455;
					_la = _input.La(1);
					if ( !(_la==KERBEROS || _la==NEGOTIATE || _la==NTLM) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Endpoint_listener_clauseContext : ParserRuleContext {
		public IToken port;
		public IToken ipv4;
		public IToken ipv6;
		public ITerminalNode LISTENER_PORT() { return GetToken(TSqlParser.LISTENER_PORT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode LISTENER_IP() { return GetToken(TSqlParser.LISTENER_IP, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode IPV4_ADDR() { return GetToken(TSqlParser.IPV4_ADDR, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Endpoint_listener_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpoint_listener_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEndpoint_listener_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEndpoint_listener_clause(this);
		}
	}

	[RuleVersion(0)]
	public Endpoint_listener_clauseContext endpoint_listener_clause() {
		Endpoint_listener_clauseContext _localctx = new Endpoint_listener_clauseContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_endpoint_listener_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3460; Match(LISTENER_PORT);
			State = 3461; Match(EQUAL);
			State = 3462; _localctx.port = Match(DECIMAL);
			State = 3475;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,267,_ctx) ) {
			case 1:
				{
				State = 3463; Match(COMMA);
				State = 3464; Match(LISTENER_IP);
				State = 3465; Match(EQUAL);
				State = 3473;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,266,_ctx) ) {
				case 1:
					{
					State = 3466; Match(ALL);
					}
					break;

				case 2:
					{
					State = 3467; Match(LR_BRACKET);
					State = 3470;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,265,_ctx) ) {
					case 1:
						{
						State = 3468; _localctx.ipv4 = Match(IPV4_ADDR);
						}
						break;

					case 2:
						{
						State = 3469; _localctx.ipv6 = Match(STRING);
						}
						break;
					}
					State = 3472; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_event_notificationContext : ParserRuleContext {
		public Id_Context event_notification_name;
		public Id_Context queue_name;
		public Id_Context event_type_or_group;
		public IToken broker_service;
		public IToken broker_service_specifier_or_current_database;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FAN_IN() { return GetToken(TSqlParser.FAN_IN, 0); }
		public Create_event_notificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_event_notification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_event_notification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_event_notification(this);
		}
	}

	[RuleVersion(0)]
	public Create_event_notificationContext create_event_notification() {
		Create_event_notificationContext _localctx = new Create_event_notificationContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_create_event_notification);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3477; Match(CREATE);
			State = 3478; Match(EVENT);
			State = 3479; Match(NOTIFICATION);
			State = 3480; _localctx.event_notification_name = id_();
			State = 3481; Match(ON);
			State = 3486;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,268,_ctx) ) {
			case 1:
				{
				State = 3482; Match(SERVER);
				}
				break;

			case 2:
				{
				State = 3483; Match(DATABASE);
				}
				break;

			case 3:
				{
				State = 3484; Match(QUEUE);
				State = 3485; _localctx.queue_name = id_();
				}
				break;
			}
			State = 3490;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,269,_ctx) ) {
			case 1:
				{
				State = 3488; Match(WITH);
				State = 3489; Match(FAN_IN);
				}
				break;
			}
			State = 3492; Match(FOR);
			State = 3497;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 3494;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,270,_ctx) ) {
					case 1:
						{
						State = 3493; Match(COMMA);
						}
						break;
					}
					State = 3496; _localctx.event_type_or_group = id_();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3499;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,271,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 3501; Match(TO);
			State = 3502; Match(SERVICE);
			State = 3503; _localctx.broker_service = Match(STRING);
			State = 3504; Match(COMMA);
			State = 3505; _localctx.broker_service_specifier_or_current_database = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_event_sessionContext : ParserRuleContext {
		public Id_Context event_session_name;
		public Id_Context event_module_guid;
		public Id_Context event_package_name;
		public Id_Context event_name;
		public Id_Context event_customizable_attributue;
		public Id_Context action_name;
		public Id_Context target_name;
		public Id_Context target_parameter_name;
		public IToken max_memory;
		public IToken max_dispatch_latency_seconds;
		public IToken max_event_size;
		public ITerminalNode[] EVENT() { return GetTokens(TSqlParser.EVENT); }
		public ITerminalNode EVENT(int i) {
			return GetToken(TSqlParser.EVENT, i);
		}
		public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		public ITerminalNode[] DROP() { return GetTokens(TSqlParser.DROP); }
		public ITerminalNode DROP(int i) {
			return GetToken(TSqlParser.DROP, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode[] TARGET() { return GetTokens(TSqlParser.TARGET); }
		public ITerminalNode TARGET(int i) {
			return GetToken(TSqlParser.TARGET, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode START() { return GetToken(TSqlParser.START, 0); }
		public ITerminalNode STOP() { return GetToken(TSqlParser.STOP, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] SET() { return GetTokens(TSqlParser.SET); }
		public ITerminalNode SET(int i) {
			return GetToken(TSqlParser.SET, i);
		}
		public ITerminalNode MAX_MEMORY() { return GetToken(TSqlParser.MAX_MEMORY, 0); }
		public ITerminalNode EVENT_RETENTION_MODE() { return GetToken(TSqlParser.EVENT_RETENTION_MODE, 0); }
		public ITerminalNode MAX_DISPATCH_LATENCY() { return GetToken(TSqlParser.MAX_DISPATCH_LATENCY, 0); }
		public ITerminalNode MAX_EVENT_SIZE() { return GetToken(TSqlParser.MAX_EVENT_SIZE, 0); }
		public ITerminalNode MEMORY_PARTITION_MODE() { return GetToken(TSqlParser.MEMORY_PARTITION_MODE, 0); }
		public ITerminalNode TRACK_CAUSALITY() { return GetToken(TSqlParser.TRACK_CAUSALITY, 0); }
		public ITerminalNode STARTUP_STATE() { return GetToken(TSqlParser.STARTUP_STATE, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] KB() { return GetTokens(TSqlParser.KB); }
		public ITerminalNode KB(int i) {
			return GetToken(TSqlParser.KB, i);
		}
		public ITerminalNode[] MB() { return GetTokens(TSqlParser.MB); }
		public ITerminalNode MB(int i) {
			return GetToken(TSqlParser.MB, i);
		}
		public ITerminalNode ALLOW_SINGLE_EVENT_LOSS() { return GetToken(TSqlParser.ALLOW_SINGLE_EVENT_LOSS, 0); }
		public ITerminalNode ALLOW_MULTIPLE_EVENT_LOSS() { return GetToken(TSqlParser.ALLOW_MULTIPLE_EVENT_LOSS, 0); }
		public ITerminalNode NO_EVENT_LOSS() { return GetToken(TSqlParser.NO_EVENT_LOSS, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode PER_NODE() { return GetToken(TSqlParser.PER_NODE, 0); }
		public ITerminalNode PER_CPU() { return GetToken(TSqlParser.PER_CPU, 0); }
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode SECONDS() { return GetToken(TSqlParser.SECONDS, 0); }
		public ITerminalNode INFINITE() { return GetToken(TSqlParser.INFINITE, 0); }
		public ITerminalNode[] ACTION() { return GetTokens(TSqlParser.ACTION); }
		public ITerminalNode ACTION(int i) {
			return GetToken(TSqlParser.ACTION, i);
		}
		public ITerminalNode[] WHERE() { return GetTokens(TSqlParser.WHERE); }
		public ITerminalNode WHERE(int i) {
			return GetToken(TSqlParser.WHERE, i);
		}
		public Event_session_predicate_expressionContext[] event_session_predicate_expression() {
			return GetRuleContexts<Event_session_predicate_expressionContext>();
		}
		public Event_session_predicate_expressionContext event_session_predicate_expression(int i) {
			return GetRuleContext<Event_session_predicate_expressionContext>(i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Create_or_alter_event_sessionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_event_session; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_event_session(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_event_session(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_event_sessionContext create_or_alter_event_session() {
		Create_or_alter_event_sessionContext _localctx = new Create_or_alter_event_sessionContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_create_or_alter_event_session);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3507;
			_la = _input.La(1);
			if ( !(_la==ALTER || _la==CREATE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 3508; Match(EVENT);
			State = 3509; Match(SESSION);
			State = 3510; _localctx.event_session_name = id_();
			State = 3511; Match(ON);
			State = 3512; Match(SERVER);
			State = 3580;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,283,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 3514;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,272,_ctx) ) {
					case 1:
						{
						State = 3513; Match(COMMA);
						}
						break;
					}
					State = 3516; Match(ADD);
					State = 3517; Match(EVENT);
					{
					State = 3521;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,273,_ctx) ) {
					case 1:
						{
						State = 3518; _localctx.event_module_guid = id_();
						State = 3519; Match(DOT);
						}
						break;
					}
					State = 3523; _localctx.event_package_name = id_();
					State = 3524; Match(DOT);
					State = 3525; _localctx.event_name = id_();
					}
					State = 3575;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,282,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 3527; Match(LR_BRACKET);
							State = 3541;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,276,_ctx) ) {
							case 1:
								{
								State = 3528; Match(SET);
								State = 3538;
								_errHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(_input,275,_ctx);
								while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
									if ( _alt==1 ) {
										{
										{
										State = 3530;
										_errHandler.Sync(this);
										switch ( Interpreter.AdaptivePredict(_input,274,_ctx) ) {
										case 1:
											{
											State = 3529; Match(COMMA);
											}
											break;
										}
										State = 3532; _localctx.event_customizable_attributue = id_();
										State = 3533; Match(EQUAL);
										State = 3534;
										_la = _input.La(1);
										if ( !(_la==DECIMAL || _la==STRING) ) {
										_errHandler.RecoverInline(this);
										} else {
											if (_input.La(1) == TokenConstants.Eof) {
												matchedEOF = true;
											}

											_errHandler.ReportMatch(this);
											Consume();
										}
										}
										} 
									}
									State = 3540;
									_errHandler.Sync(this);
									_alt = Interpreter.AdaptivePredict(_input,275,_ctx);
								}
								}
								break;
							}
							State = 3563;
							_errHandler.Sync(this);
							_alt = 1;
							do {
								switch (_alt) {
								case 1:
									{
									{
									State = 3543; Match(ACTION);
									State = 3544; Match(LR_BRACKET);
									State = 3557;
									_errHandler.Sync(this);
									_alt = 1;
									do {
										switch (_alt) {
										case 1:
											{
											{
											State = 3546;
											_errHandler.Sync(this);
											switch ( Interpreter.AdaptivePredict(_input,277,_ctx) ) {
											case 1:
												{
												State = 3545; Match(COMMA);
												}
												break;
											}
											State = 3551;
											_errHandler.Sync(this);
											switch ( Interpreter.AdaptivePredict(_input,278,_ctx) ) {
											case 1:
												{
												State = 3548; _localctx.event_module_guid = id_();
												State = 3549; Match(DOT);
												}
												break;
											}
											State = 3553; _localctx.event_package_name = id_();
											State = 3554; Match(DOT);
											State = 3555; _localctx.action_name = id_();
											}
											}
											break;
										default:
											throw new NoViableAltException(this);
										}
										State = 3559;
										_errHandler.Sync(this);
										_alt = Interpreter.AdaptivePredict(_input,279,_ctx);
									} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
									State = 3561; Match(RR_BRACKET);
									}
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								State = 3565;
								_errHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(_input,280,_ctx);
							} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
							State = 3569;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,281,_ctx) ) {
							case 1:
								{
								State = 3567; Match(WHERE);
								State = 3568; event_session_predicate_expression();
								}
								break;
							}
							State = 3571; Match(RR_BRACKET);
							}
							} 
						}
						State = 3577;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,282,_ctx);
					}
					}
					} 
				}
				State = 3582;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,283,_ctx);
			}
			State = 3599;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,286,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 3584;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,284,_ctx) ) {
					case 1:
						{
						State = 3583; Match(COMMA);
						}
						break;
					}
					State = 3586; Match(DROP);
					State = 3587; Match(EVENT);
					State = 3591;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,285,_ctx) ) {
					case 1:
						{
						State = 3588; _localctx.event_module_guid = id_();
						State = 3589; Match(DOT);
						}
						break;
					}
					State = 3593; _localctx.event_package_name = id_();
					State = 3594; Match(DOT);
					State = 3595; _localctx.event_name = id_();
					}
					} 
				}
				State = 3601;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,286,_ctx);
			}
			State = 3643;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,294,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					{
					State = 3602; Match(ADD);
					State = 3603; Match(TARGET);
					State = 3607;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,287,_ctx) ) {
					case 1:
						{
						State = 3604; _localctx.event_module_guid = id_();
						State = 3605; Match(DOT);
						}
						break;
					}
					State = 3609; _localctx.event_package_name = id_();
					State = 3610; Match(DOT);
					State = 3611; _localctx.target_name = id_();
					}
					State = 3638;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,293,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 3613; Match(LR_BRACKET);
							State = 3614; Match(SET);
							State = 3630;
							_errHandler.Sync(this);
							_alt = 1;
							do {
								switch (_alt) {
								case 1:
									{
									{
									State = 3616;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,288,_ctx) ) {
									case 1:
										{
										State = 3615; Match(COMMA);
										}
										break;
									}
									State = 3618; _localctx.target_parameter_name = id_();
									State = 3619; Match(EQUAL);
									State = 3628;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,291,_ctx) ) {
									case 1:
										{
										State = 3621;
										_errHandler.Sync(this);
										switch ( Interpreter.AdaptivePredict(_input,289,_ctx) ) {
										case 1:
											{
											State = 3620; Match(LR_BRACKET);
											}
											break;
										}
										State = 3623; Match(DECIMAL);
										State = 3625;
										_errHandler.Sync(this);
										switch ( Interpreter.AdaptivePredict(_input,290,_ctx) ) {
										case 1:
											{
											State = 3624; Match(RR_BRACKET);
											}
											break;
										}
										}
										break;

									case 2:
										{
										State = 3627; Match(STRING);
										}
										break;
									}
									}
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								State = 3632;
								_errHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(_input,292,_ctx);
							} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
							State = 3634; Match(RR_BRACKET);
							}
							} 
						}
						State = 3640;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,293,_ctx);
					}
					}
					} 
				}
				State = 3645;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,294,_ctx);
			}
			State = 3659;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,296,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 3646; Match(DROP);
					State = 3647; Match(TARGET);
					State = 3651;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,295,_ctx) ) {
					case 1:
						{
						State = 3648; _localctx.event_module_guid = id_();
						State = 3649; Match(DOT);
						}
						break;
					}
					State = 3653; _localctx.event_package_name = id_();
					State = 3654; Match(DOT);
					State = 3655; _localctx.target_name = id_();
					}
					} 
				}
				State = 3661;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,296,_ctx);
			}
			State = 3727;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,312,_ctx) ) {
			case 1:
				{
				State = 3662; Match(WITH);
				State = 3663; Match(LR_BRACKET);
				State = 3671;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,298,_ctx) ) {
				case 1:
					{
					State = 3665;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,297,_ctx) ) {
					case 1:
						{
						State = 3664; Match(COMMA);
						}
						break;
					}
					State = 3667; Match(MAX_MEMORY);
					State = 3668; Match(EQUAL);
					State = 3669; _localctx.max_memory = Match(DECIMAL);
					State = 3670;
					_la = _input.La(1);
					if ( !(_la==KB || _la==MB) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3679;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,300,_ctx) ) {
				case 1:
					{
					State = 3674;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,299,_ctx) ) {
					case 1:
						{
						State = 3673; Match(COMMA);
						}
						break;
					}
					State = 3676; Match(EVENT_RETENTION_MODE);
					State = 3677; Match(EQUAL);
					State = 3678;
					_la = _input.La(1);
					if ( !(_la==ALLOW_MULTIPLE_EVENT_LOSS || _la==ALLOW_SINGLE_EVENT_LOSS || _la==NO_EVENT_LOSS) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3691;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,303,_ctx) ) {
				case 1:
					{
					State = 3682;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,301,_ctx) ) {
					case 1:
						{
						State = 3681; Match(COMMA);
						}
						break;
					}
					State = 3684; Match(MAX_DISPATCH_LATENCY);
					State = 3685; Match(EQUAL);
					State = 3689;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,302,_ctx) ) {
					case 1:
						{
						State = 3686; _localctx.max_dispatch_latency_seconds = Match(DECIMAL);
						State = 3687; Match(SECONDS);
						}
						break;

					case 2:
						{
						State = 3688; Match(INFINITE);
						}
						break;
					}
					}
					break;
				}
				State = 3700;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,305,_ctx) ) {
				case 1:
					{
					State = 3694;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,304,_ctx) ) {
					case 1:
						{
						State = 3693; Match(COMMA);
						}
						break;
					}
					State = 3696; Match(MAX_EVENT_SIZE);
					State = 3697; Match(EQUAL);
					State = 3698; _localctx.max_event_size = Match(DECIMAL);
					State = 3699;
					_la = _input.La(1);
					if ( !(_la==KB || _la==MB) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3708;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,307,_ctx) ) {
				case 1:
					{
					State = 3703;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,306,_ctx) ) {
					case 1:
						{
						State = 3702; Match(COMMA);
						}
						break;
					}
					State = 3705; Match(MEMORY_PARTITION_MODE);
					State = 3706; Match(EQUAL);
					State = 3707;
					_la = _input.La(1);
					if ( !(_la==NONE || _la==PER_CPU || _la==PER_NODE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3716;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,309,_ctx) ) {
				case 1:
					{
					State = 3711;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,308,_ctx) ) {
					case 1:
						{
						State = 3710; Match(COMMA);
						}
						break;
					}
					State = 3713; Match(TRACK_CAUSALITY);
					State = 3714; Match(EQUAL);
					State = 3715;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3724;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,311,_ctx) ) {
				case 1:
					{
					State = 3719;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,310,_ctx) ) {
					case 1:
						{
						State = 3718; Match(COMMA);
						}
						break;
					}
					State = 3721; Match(STARTUP_STATE);
					State = 3722; Match(EQUAL);
					State = 3723;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3726; Match(RR_BRACKET);
				}
				break;
			}
			State = 3732;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,313,_ctx) ) {
			case 1:
				{
				State = 3729; Match(STATE);
				State = 3730; Match(EQUAL);
				State = 3731;
				_la = _input.La(1);
				if ( !(_la==START || _la==STOP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_session_predicate_expressionContext : ParserRuleContext {
		public Event_session_predicate_factorContext[] event_session_predicate_factor() {
			return GetRuleContexts<Event_session_predicate_factorContext>();
		}
		public Event_session_predicate_factorContext event_session_predicate_factor(int i) {
			return GetRuleContext<Event_session_predicate_factorContext>(i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public Event_session_predicate_expressionContext[] event_session_predicate_expression() {
			return GetRuleContexts<Event_session_predicate_expressionContext>();
		}
		public Event_session_predicate_expressionContext event_session_predicate_expression(int i) {
			return GetRuleContext<Event_session_predicate_expressionContext>(i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] NOT() { return GetTokens(TSqlParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(TSqlParser.NOT, i);
		}
		public ITerminalNode[] AND() { return GetTokens(TSqlParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(TSqlParser.AND, i);
		}
		public ITerminalNode[] OR() { return GetTokens(TSqlParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(TSqlParser.OR, i);
		}
		public Event_session_predicate_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_session_predicate_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEvent_session_predicate_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEvent_session_predicate_expression(this);
		}
	}

	[RuleVersion(0)]
	public Event_session_predicate_expressionContext event_session_predicate_expression() {
		Event_session_predicate_expressionContext _localctx = new Event_session_predicate_expressionContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_event_session_predicate_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3750;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 3735;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,314,_ctx) ) {
					case 1:
						{
						State = 3734; Match(COMMA);
						}
						break;
					}
					State = 3738;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,315,_ctx) ) {
					case 1:
						{
						State = 3737;
						_la = _input.La(1);
						if ( !(_la==AND || _la==OR) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					State = 3741;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,316,_ctx) ) {
					case 1:
						{
						State = 3740; Match(NOT);
						}
						break;
					}
					State = 3748;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,317,_ctx) ) {
					case 1:
						{
						State = 3743; event_session_predicate_factor();
						}
						break;

					case 2:
						{
						State = 3744; Match(LR_BRACKET);
						State = 3745; event_session_predicate_expression();
						State = 3746; Match(RR_BRACKET);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3752;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,318,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_session_predicate_factorContext : ParserRuleContext {
		public Event_session_predicate_leafContext event_session_predicate_leaf() {
			return GetRuleContext<Event_session_predicate_leafContext>(0);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Event_session_predicate_expressionContext event_session_predicate_expression() {
			return GetRuleContext<Event_session_predicate_expressionContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Event_session_predicate_factorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_session_predicate_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEvent_session_predicate_factor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEvent_session_predicate_factor(this);
		}
	}

	[RuleVersion(0)]
	public Event_session_predicate_factorContext event_session_predicate_factor() {
		Event_session_predicate_factorContext _localctx = new Event_session_predicate_factorContext(_ctx, State);
		EnterRule(_localctx, 308, RULE_event_session_predicate_factor);
		try {
			State = 3759;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,319,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3754; event_session_predicate_leaf();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3755; Match(LR_BRACKET);
				State = 3756; event_session_predicate_expression();
				State = 3757; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_session_predicate_leafContext : ParserRuleContext {
		public Id_Context event_field_name;
		public Id_Context event_module_guid;
		public Id_Context event_package_name;
		public Id_Context predicate_source_name;
		public Id_Context predicate_compare_name;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode GREATER() { return GetToken(TSqlParser.GREATER, 0); }
		public ITerminalNode LESS() { return GetToken(TSqlParser.LESS, 0); }
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode EXCLAMATION() { return GetToken(TSqlParser.EXCLAMATION, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Event_session_predicate_leafContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_session_predicate_leaf; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEvent_session_predicate_leaf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEvent_session_predicate_leaf(this);
		}
	}

	[RuleVersion(0)]
	public Event_session_predicate_leafContext event_session_predicate_leaf() {
		Event_session_predicate_leafContext _localctx = new Event_session_predicate_leafContext(_ctx, State);
		EnterRule(_localctx, 310, RULE_event_session_predicate_leaf);
		int _la;
		try {
			State = 3817;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,327,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3789;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,323,_ctx) ) {
				case 1:
					{
					State = 3761; _localctx.event_field_name = id_();
					}
					break;

				case 2:
					{
					State = 3772;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,321,_ctx) ) {
					case 1:
						{
						State = 3762; _localctx.event_field_name = id_();
						}
						break;

					case 2:
						{
						{
						State = 3766;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,320,_ctx) ) {
						case 1:
							{
							State = 3763; _localctx.event_module_guid = id_();
							State = 3764; Match(DOT);
							}
							break;
						}
						State = 3768; _localctx.event_package_name = id_();
						State = 3769; Match(DOT);
						State = 3770; _localctx.predicate_source_name = id_();
						}
						}
						break;
					}
					State = 3785;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,322,_ctx) ) {
					case 1:
						{
						State = 3774; Match(EQUAL);
						}
						break;

					case 2:
						{
						{
						State = 3775; Match(LESS);
						State = 3776; Match(GREATER);
						}
						}
						break;

					case 3:
						{
						{
						State = 3777; Match(EXCLAMATION);
						State = 3778; Match(EQUAL);
						}
						}
						break;

					case 4:
						{
						State = 3779; Match(GREATER);
						}
						break;

					case 5:
						{
						{
						State = 3780; Match(GREATER);
						State = 3781; Match(EQUAL);
						}
						}
						break;

					case 6:
						{
						State = 3782; Match(LESS);
						}
						break;

					case 7:
						{
						State = 3783; Match(LESS);
						State = 3784; Match(EQUAL);
						}
						break;
					}
					State = 3787;
					_la = _input.La(1);
					if ( !(_la==DECIMAL || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3794;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,324,_ctx) ) {
				case 1:
					{
					State = 3791; _localctx.event_module_guid = id_();
					State = 3792; Match(DOT);
					}
					break;
				}
				State = 3796; _localctx.event_package_name = id_();
				State = 3797; Match(DOT);
				State = 3798; _localctx.predicate_compare_name = id_();
				State = 3799; Match(LR_BRACKET);
				State = 3813;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,326,_ctx) ) {
				case 1:
					{
					State = 3800; _localctx.event_field_name = id_();
					}
					break;

				case 2:
					{
					{
					State = 3804;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,325,_ctx) ) {
					case 1:
						{
						State = 3801; _localctx.event_module_guid = id_();
						State = 3802; Match(DOT);
						}
						break;
					}
					State = 3806; _localctx.event_package_name = id_();
					State = 3807; Match(DOT);
					State = 3808; _localctx.predicate_source_name = id_();
					}
					State = 3810; Match(COMMA);
					State = 3811;
					_la = _input.La(1);
					if ( !(_la==DECIMAL || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3815; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_external_data_sourceContext : ParserRuleContext {
		public Id_Context data_source_name;
		public IToken location;
		public IToken resource_manager_location;
		public Id_Context credential_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] LOCATION() { return GetTokens(TSqlParser.LOCATION); }
		public ITerminalNode LOCATION(int i) {
			return GetToken(TSqlParser.LOCATION, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] RESOURCE_MANAGER_LOCATION() { return GetTokens(TSqlParser.RESOURCE_MANAGER_LOCATION); }
		public ITerminalNode RESOURCE_MANAGER_LOCATION(int i) {
			return GetToken(TSqlParser.RESOURCE_MANAGER_LOCATION, i);
		}
		public ITerminalNode[] CREDENTIAL() { return GetTokens(TSqlParser.CREDENTIAL); }
		public ITerminalNode CREDENTIAL(int i) {
			return GetToken(TSqlParser.CREDENTIAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode BLOB_STORAGE() { return GetToken(TSqlParser.BLOB_STORAGE, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Alter_external_data_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_external_data_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_external_data_source(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_external_data_source(this);
		}
	}

	[RuleVersion(0)]
	public Alter_external_data_sourceContext alter_external_data_source() {
		Alter_external_data_sourceContext _localctx = new Alter_external_data_sourceContext(_ctx, State);
		EnterRule(_localctx, 312, RULE_alter_external_data_source);
		try {
			int _alt;
			State = 3866;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,333,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3819; Match(ALTER);
				State = 3820; Match(EXTERNAL);
				State = 3821; Match(DATA);
				State = 3822; Match(SOURCE);
				State = 3823; _localctx.data_source_name = id_();
				State = 3824; Match(SET);
				State = 3840;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 3840;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,330,_ctx) ) {
						case 1:
							{
							State = 3825; Match(LOCATION);
							State = 3826; Match(EQUAL);
							State = 3827; _localctx.location = Match(STRING);
							State = 3829;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,328,_ctx) ) {
							case 1:
								{
								State = 3828; Match(COMMA);
								}
								break;
							}
							}
							break;

						case 2:
							{
							State = 3831; Match(RESOURCE_MANAGER_LOCATION);
							State = 3832; Match(EQUAL);
							State = 3833; _localctx.resource_manager_location = Match(STRING);
							State = 3835;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,329,_ctx) ) {
							case 1:
								{
								State = 3834; Match(COMMA);
								}
								break;
							}
							}
							break;

						case 3:
							{
							State = 3837; Match(CREDENTIAL);
							State = 3838; Match(EQUAL);
							State = 3839; _localctx.credential_name = id_();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3842;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,331,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3844; Match(ALTER);
				State = 3845; Match(EXTERNAL);
				State = 3846; Match(DATA);
				State = 3847; Match(SOURCE);
				State = 3848; _localctx.data_source_name = id_();
				State = 3849; Match(WITH);
				State = 3850; Match(LR_BRACKET);
				State = 3851; Match(TYPE);
				State = 3852; Match(EQUAL);
				State = 3853; Match(BLOB_STORAGE);
				State = 3854; Match(COMMA);
				State = 3855; Match(LOCATION);
				State = 3856; Match(EQUAL);
				State = 3857; _localctx.location = Match(STRING);
				State = 3862;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,332,_ctx) ) {
				case 1:
					{
					State = 3858; Match(COMMA);
					State = 3859; Match(CREDENTIAL);
					State = 3860; Match(EQUAL);
					State = 3861; _localctx.credential_name = id_();
					}
					break;
				}
				State = 3864; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_external_libraryContext : ParserRuleContext {
		public Id_Context library_name;
		public Id_Context owner_name;
		public IToken client_library;
		public Id_Context external_data_source_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode PLATFORM() { return GetToken(TSqlParser.PLATFORM, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode[] LANGUAGE() { return GetTokens(TSqlParser.LANGUAGE); }
		public ITerminalNode LANGUAGE(int i) {
			return GetToken(TSqlParser.LANGUAGE, i);
		}
		public ITerminalNode[] DATA_SOURCE() { return GetTokens(TSqlParser.DATA_SOURCE); }
		public ITerminalNode DATA_SOURCE(int i) {
			return GetToken(TSqlParser.DATA_SOURCE, i);
		}
		public ITerminalNode[] R() { return GetTokens(TSqlParser.R); }
		public ITerminalNode R(int i) {
			return GetToken(TSqlParser.R, i);
		}
		public ITerminalNode[] PYTHON() { return GetTokens(TSqlParser.PYTHON); }
		public ITerminalNode PYTHON(int i) {
			return GetToken(TSqlParser.PYTHON, i);
		}
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode LINUX() { return GetToken(TSqlParser.LINUX, 0); }
		public Alter_external_libraryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_external_library; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_external_library(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_external_library(this);
		}
	}

	[RuleVersion(0)]
	public Alter_external_libraryContext alter_external_library() {
		Alter_external_libraryContext _localctx = new Alter_external_libraryContext(_ctx, State);
		EnterRule(_localctx, 314, RULE_alter_external_library);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3868; Match(ALTER);
			State = 3869; Match(EXTERNAL);
			State = 3870; Match(LIBRARY);
			State = 3871; _localctx.library_name = id_();
			State = 3874;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,334,_ctx) ) {
			case 1:
				{
				State = 3872; Match(AUTHORIZATION);
				State = 3873; _localctx.owner_name = id_();
				}
				break;
			}
			State = 3876;
			_la = _input.La(1);
			if ( !(_la==ADD || _la==SET) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			{
			State = 3877; Match(LR_BRACKET);
			State = 3878; Match(CONTENT);
			State = 3879; Match(EQUAL);
			State = 3883;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,335,_ctx) ) {
			case 1:
				{
				State = 3880; _localctx.client_library = Match(STRING);
				}
				break;

			case 2:
				{
				State = 3881; Match(BINARY);
				}
				break;

			case 3:
				{
				State = 3882; Match(NONE);
				}
				break;
			}
			{
			State = 3885; Match(COMMA);
			State = 3886; Match(PLATFORM);
			State = 3887; Match(EQUAL);
			State = 3889;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,336,_ctx) ) {
			case 1:
				{
				State = 3888;
				_la = _input.La(1);
				if ( !(_la==LINUX || _la==WINDOWS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 3891; Match(RR_BRACKET);
			}
			State = 3893; Match(WITH);
			State = 3903;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 3903;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,338,_ctx) ) {
					case 1:
						{
						State = 3895;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,337,_ctx) ) {
						case 1:
							{
							State = 3894; Match(COMMA);
							}
							break;
						}
						State = 3897; Match(LANGUAGE);
						State = 3898; Match(EQUAL);
						State = 3899;
						_la = _input.La(1);
						if ( !(_la==PYTHON || _la==R) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 2:
						{
						State = 3900; Match(DATA_SOURCE);
						State = 3901; Match(EQUAL);
						State = 3902; _localctx.external_data_source_name = id_();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3905;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,339,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 3907; Match(RR_BRACKET);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_external_libraryContext : ParserRuleContext {
		public Id_Context library_name;
		public Id_Context owner_name;
		public IToken client_library;
		public Id_Context external_data_source_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode PLATFORM() { return GetToken(TSqlParser.PLATFORM, 0); }
		public ITerminalNode[] LANGUAGE() { return GetTokens(TSqlParser.LANGUAGE); }
		public ITerminalNode LANGUAGE(int i) {
			return GetToken(TSqlParser.LANGUAGE, i);
		}
		public ITerminalNode[] DATA_SOURCE() { return GetTokens(TSqlParser.DATA_SOURCE); }
		public ITerminalNode DATA_SOURCE(int i) {
			return GetToken(TSqlParser.DATA_SOURCE, i);
		}
		public ITerminalNode[] R() { return GetTokens(TSqlParser.R); }
		public ITerminalNode R(int i) {
			return GetToken(TSqlParser.R, i);
		}
		public ITerminalNode[] PYTHON() { return GetTokens(TSqlParser.PYTHON); }
		public ITerminalNode PYTHON(int i) {
			return GetToken(TSqlParser.PYTHON, i);
		}
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode LINUX() { return GetToken(TSqlParser.LINUX, 0); }
		public Create_external_libraryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_external_library; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_external_library(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_external_library(this);
		}
	}

	[RuleVersion(0)]
	public Create_external_libraryContext create_external_library() {
		Create_external_libraryContext _localctx = new Create_external_libraryContext(_ctx, State);
		EnterRule(_localctx, 316, RULE_create_external_library);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3909; Match(CREATE);
			State = 3910; Match(EXTERNAL);
			State = 3911; Match(LIBRARY);
			State = 3912; _localctx.library_name = id_();
			State = 3915;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,340,_ctx) ) {
			case 1:
				{
				State = 3913; Match(AUTHORIZATION);
				State = 3914; _localctx.owner_name = id_();
				}
				break;
			}
			State = 3917; Match(FROM);
			{
			State = 3919;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,341,_ctx) ) {
			case 1:
				{
				State = 3918; Match(COMMA);
				}
				break;
			}
			State = 3922;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,342,_ctx) ) {
			case 1:
				{
				State = 3921; Match(LR_BRACKET);
				}
				break;
			}
			State = 3926;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,343,_ctx) ) {
			case 1:
				{
				State = 3924; Match(CONTENT);
				State = 3925; Match(EQUAL);
				}
				break;
			}
			State = 3931;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,344,_ctx) ) {
			case 1:
				{
				State = 3928; _localctx.client_library = Match(STRING);
				}
				break;

			case 2:
				{
				State = 3929; Match(BINARY);
				}
				break;

			case 3:
				{
				State = 3930; Match(NONE);
				}
				break;
			}
			State = 3940;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,346,_ctx) ) {
			case 1:
				{
				State = 3933; Match(COMMA);
				State = 3934; Match(PLATFORM);
				State = 3935; Match(EQUAL);
				State = 3937;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,345,_ctx) ) {
				case 1:
					{
					State = 3936;
					_la = _input.La(1);
					if ( !(_la==LINUX || _la==WINDOWS) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3939; Match(RR_BRACKET);
				}
				break;
			}
			}
			State = 3957;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,350,_ctx) ) {
			case 1:
				{
				State = 3942; Match(WITH);
				State = 3952;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 3952;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,348,_ctx) ) {
						case 1:
							{
							State = 3944;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,347,_ctx) ) {
							case 1:
								{
								State = 3943; Match(COMMA);
								}
								break;
							}
							State = 3946; Match(LANGUAGE);
							State = 3947; Match(EQUAL);
							State = 3948;
							_la = _input.La(1);
							if ( !(_la==PYTHON || _la==R) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 2:
							{
							State = 3949; Match(DATA_SOURCE);
							State = 3950; Match(EQUAL);
							State = 3951; _localctx.external_data_source_name = id_();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3954;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,349,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 3956; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_external_resource_poolContext : ParserRuleContext {
		public Id_Context pool_name;
		public IToken max_cpu_percent;
		public IToken max_memory_percent;
		public IToken max_processes;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode MAX_CPU_PERCENT() { return GetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode DEFAULT_DOUBLE_QUOTE() { return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0); }
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode CPU() { return GetToken(TSqlParser.CPU, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode MAX_MEMORY_PERCENT() { return GetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public ITerminalNode MAX_PROCESSES() { return GetToken(TSqlParser.MAX_PROCESSES, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Alter_external_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_external_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_external_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_external_resource_pool(this);
		}
	}

	[RuleVersion(0)]
	public Alter_external_resource_poolContext alter_external_resource_pool() {
		Alter_external_resource_poolContext _localctx = new Alter_external_resource_poolContext(_ctx, State);
		EnterRule(_localctx, 318, RULE_alter_external_resource_pool);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3959; Match(ALTER);
			State = 3960; Match(EXTERNAL);
			State = 3961; Match(RESOURCE);
			State = 3962; Match(POOL);
			State = 3965;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,351,_ctx) ) {
			case 1:
				{
				State = 3963; _localctx.pool_name = id_();
				}
				break;

			case 2:
				{
				State = 3964; Match(DEFAULT_DOUBLE_QUOTE);
				}
				break;
			}
			State = 3967; Match(WITH);
			State = 3968; Match(LR_BRACKET);
			State = 3969; Match(MAX_CPU_PERCENT);
			State = 3970; Match(EQUAL);
			State = 3971; _localctx.max_cpu_percent = Match(DECIMAL);
			State = 4009;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,361,_ctx) ) {
			case 1:
				{
				State = 3973;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,352,_ctx) ) {
				case 1:
					{
					State = 3972; Match(COMMA);
					}
					break;
				}
				State = 3975; Match(AFFINITY);
				State = 3976; Match(CPU);
				State = 3977; Match(EQUAL);
				State = 3991;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,356,_ctx) ) {
				case 1:
					{
					State = 3978; Match(AUTO);
					}
					break;

				case 2:
					{
					State = 3987;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							State = 3987;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,354,_ctx) ) {
							case 1:
								{
								State = 3980;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,353,_ctx) ) {
								case 1:
									{
									State = 3979; Match(COMMA);
									}
									break;
								}
								State = 3982; Match(DECIMAL);
								State = 3983; Match(TO);
								State = 3984; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 3985; Match(COMMA);
								State = 3986; Match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 3989;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,355,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 3993; Match(NUMANODE);
				State = 3994; Match(EQUAL);
				State = 4005;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 4005;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,359,_ctx) ) {
						case 1:
							{
							State = 3996;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,357,_ctx) ) {
							case 1:
								{
								State = 3995; Match(COMMA);
								}
								break;
							}
							State = 3998; Match(DECIMAL);
							State = 3999; Match(TO);
							State = 4000; Match(DECIMAL);
							}
							break;

						case 2:
							{
							State = 4002;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,358,_ctx) ) {
							case 1:
								{
								State = 4001; Match(COMMA);
								}
								break;
							}
							State = 4004; Match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 4007;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,360,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 4017;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,363,_ctx) ) {
			case 1:
				{
				State = 4012;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,362,_ctx) ) {
				case 1:
					{
					State = 4011; Match(COMMA);
					}
					break;
				}
				State = 4014; Match(MAX_MEMORY_PERCENT);
				State = 4015; Match(EQUAL);
				State = 4016; _localctx.max_memory_percent = Match(DECIMAL);
				}
				break;
			}
			State = 4025;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,365,_ctx) ) {
			case 1:
				{
				State = 4020;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,364,_ctx) ) {
				case 1:
					{
					State = 4019; Match(COMMA);
					}
					break;
				}
				State = 4022; Match(MAX_PROCESSES);
				State = 4023; Match(EQUAL);
				State = 4024; _localctx.max_processes = Match(DECIMAL);
				}
				break;
			}
			State = 4027; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_external_resource_poolContext : ParserRuleContext {
		public Id_Context pool_name;
		public IToken max_cpu_percent;
		public IToken max_memory_percent;
		public IToken max_processes;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode MAX_CPU_PERCENT() { return GetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode CPU() { return GetToken(TSqlParser.CPU, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public ITerminalNode MAX_MEMORY_PERCENT() { return GetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public ITerminalNode MAX_PROCESSES() { return GetToken(TSqlParser.MAX_PROCESSES, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Create_external_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_external_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_external_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_external_resource_pool(this);
		}
	}

	[RuleVersion(0)]
	public Create_external_resource_poolContext create_external_resource_pool() {
		Create_external_resource_poolContext _localctx = new Create_external_resource_poolContext(_ctx, State);
		EnterRule(_localctx, 320, RULE_create_external_resource_pool);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4029; Match(CREATE);
			State = 4030; Match(EXTERNAL);
			State = 4031; Match(RESOURCE);
			State = 4032; Match(POOL);
			State = 4033; _localctx.pool_name = id_();
			State = 4034; Match(WITH);
			State = 4035; Match(LR_BRACKET);
			State = 4036; Match(MAX_CPU_PERCENT);
			State = 4037; Match(EQUAL);
			State = 4038; _localctx.max_cpu_percent = Match(DECIMAL);
			State = 4076;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,375,_ctx) ) {
			case 1:
				{
				State = 4040;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,366,_ctx) ) {
				case 1:
					{
					State = 4039; Match(COMMA);
					}
					break;
				}
				State = 4042; Match(AFFINITY);
				State = 4043; Match(CPU);
				State = 4044; Match(EQUAL);
				State = 4058;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,370,_ctx) ) {
				case 1:
					{
					State = 4045; Match(AUTO);
					}
					break;

				case 2:
					{
					State = 4054;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							State = 4054;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,368,_ctx) ) {
							case 1:
								{
								State = 4047;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,367,_ctx) ) {
								case 1:
									{
									State = 4046; Match(COMMA);
									}
									break;
								}
								State = 4049; Match(DECIMAL);
								State = 4050; Match(TO);
								State = 4051; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 4052; Match(COMMA);
								State = 4053; Match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 4056;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,369,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 4060; Match(NUMANODE);
				State = 4061; Match(EQUAL);
				State = 4072;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 4072;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,373,_ctx) ) {
						case 1:
							{
							State = 4063;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,371,_ctx) ) {
							case 1:
								{
								State = 4062; Match(COMMA);
								}
								break;
							}
							State = 4065; Match(DECIMAL);
							State = 4066; Match(TO);
							State = 4067; Match(DECIMAL);
							}
							break;

						case 2:
							{
							State = 4069;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,372,_ctx) ) {
							case 1:
								{
								State = 4068; Match(COMMA);
								}
								break;
							}
							State = 4071; Match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 4074;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,374,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 4084;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,377,_ctx) ) {
			case 1:
				{
				State = 4079;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,376,_ctx) ) {
				case 1:
					{
					State = 4078; Match(COMMA);
					}
					break;
				}
				State = 4081; Match(MAX_MEMORY_PERCENT);
				State = 4082; Match(EQUAL);
				State = 4083; _localctx.max_memory_percent = Match(DECIMAL);
				}
				break;
			}
			State = 4092;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,379,_ctx) ) {
			case 1:
				{
				State = 4087;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,378,_ctx) ) {
				case 1:
					{
					State = 4086; Match(COMMA);
					}
					break;
				}
				State = 4089; Match(MAX_PROCESSES);
				State = 4090; Match(EQUAL);
				State = 4091; _localctx.max_processes = Match(DECIMAL);
				}
				break;
			}
			State = 4094; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_fulltext_catalogContext : ParserRuleContext {
		public Id_Context catalog_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		public ITerminalNode REORGANIZE() { return GetToken(TSqlParser.REORGANIZE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ACCENT_SENSITIVITY() { return GetToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Alter_fulltext_catalogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_fulltext_catalog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_fulltext_catalog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_fulltext_catalog(this);
		}
	}

	[RuleVersion(0)]
	public Alter_fulltext_catalogContext alter_fulltext_catalog() {
		Alter_fulltext_catalogContext _localctx = new Alter_fulltext_catalogContext(_ctx, State);
		EnterRule(_localctx, 322, RULE_alter_fulltext_catalog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4096; Match(ALTER);
			State = 4097; Match(FULLTEXT);
			State = 4098; Match(CATALOG);
			State = 4099; _localctx.catalog_name = id_();
			State = 4110;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,381,_ctx) ) {
			case 1:
				{
				State = 4100; Match(REBUILD);
				State = 4105;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,380,_ctx) ) {
				case 1:
					{
					State = 4101; Match(WITH);
					State = 4102; Match(ACCENT_SENSITIVITY);
					State = 4103; Match(EQUAL);
					State = 4104;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 4107; Match(REORGANIZE);
				}
				break;

			case 3:
				{
				State = 4108; Match(AS);
				State = 4109; Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_fulltext_catalogContext : ParserRuleContext {
		public Id_Context catalog_name;
		public Id_Context filegroup;
		public IToken rootpath;
		public Id_Context owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ACCENT_SENSITIVITY() { return GetToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_fulltext_catalogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_fulltext_catalog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_fulltext_catalog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_fulltext_catalog(this);
		}
	}

	[RuleVersion(0)]
	public Create_fulltext_catalogContext create_fulltext_catalog() {
		Create_fulltext_catalogContext _localctx = new Create_fulltext_catalogContext(_ctx, State);
		EnterRule(_localctx, 324, RULE_create_fulltext_catalog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4112; Match(CREATE);
			State = 4113; Match(FULLTEXT);
			State = 4114; Match(CATALOG);
			State = 4115; _localctx.catalog_name = id_();
			State = 4119;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,382,_ctx) ) {
			case 1:
				{
				State = 4116; Match(ON);
				State = 4117; Match(FILEGROUP);
				State = 4118; _localctx.filegroup = id_();
				}
				break;
			}
			State = 4124;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,383,_ctx) ) {
			case 1:
				{
				State = 4121; Match(IN);
				State = 4122; Match(PATH);
				State = 4123; _localctx.rootpath = Match(STRING);
				}
				break;
			}
			State = 4130;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,384,_ctx) ) {
			case 1:
				{
				State = 4126; Match(WITH);
				State = 4127; Match(ACCENT_SENSITIVITY);
				State = 4128; Match(EQUAL);
				State = 4129;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 4134;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,385,_ctx) ) {
			case 1:
				{
				State = 4132; Match(AS);
				State = 4133; Match(DEFAULT);
				}
				break;
			}
			State = 4138;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,386,_ctx) ) {
			case 1:
				{
				State = 4136; Match(AUTHORIZATION);
				State = 4137; _localctx.owner_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_fulltext_stoplistContext : ParserRuleContext {
		public Id_Context stoplist_name;
		public IToken stopword;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode LANGUAGE() { return GetToken(TSqlParser.LANGUAGE, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Alter_fulltext_stoplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_fulltext_stoplist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_fulltext_stoplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_fulltext_stoplist(this);
		}
	}

	[RuleVersion(0)]
	public Alter_fulltext_stoplistContext alter_fulltext_stoplist() {
		Alter_fulltext_stoplistContext _localctx = new Alter_fulltext_stoplistContext(_ctx, State);
		EnterRule(_localctx, 326, RULE_alter_fulltext_stoplist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4140; Match(ALTER);
			State = 4141; Match(FULLTEXT);
			State = 4142; Match(STOPLIST);
			State = 4143; _localctx.stoplist_name = id_();
			State = 4157;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,388,_ctx) ) {
			case 1:
				{
				State = 4144; Match(ADD);
				State = 4145; _localctx.stopword = Match(STRING);
				State = 4146; Match(LANGUAGE);
				State = 4147;
				_la = _input.La(1);
				if ( !(((((_la - 1127)) & ~0x3f) == 0 && ((1L << (_la - 1127)) & ((1L << (DECIMAL - 1127)) | (1L << (STRING - 1127)) | (1L << (BINARY - 1127)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				{
				State = 4148; Match(DROP);
				State = 4155;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,387,_ctx) ) {
				case 1:
					{
					State = 4149; _localctx.stopword = Match(STRING);
					State = 4150; Match(LANGUAGE);
					State = 4151;
					_la = _input.La(1);
					if ( !(((((_la - 1127)) & ~0x3f) == 0 && ((1L << (_la - 1127)) & ((1L << (DECIMAL - 1127)) | (1L << (STRING - 1127)) | (1L << (BINARY - 1127)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 2:
					{
					State = 4152; Match(ALL);
					State = 4153;
					_la = _input.La(1);
					if ( !(((((_la - 1127)) & ~0x3f) == 0 && ((1L << (_la - 1127)) & ((1L << (DECIMAL - 1127)) | (1L << (STRING - 1127)) | (1L << (BINARY - 1127)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 3:
					{
					State = 4154; Match(ALL);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_fulltext_stoplistContext : ParserRuleContext {
		public Id_Context stoplist_name;
		public Id_Context database_name;
		public Id_Context source_stoplist_name;
		public Id_Context owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode[] STOPLIST() { return GetTokens(TSqlParser.STOPLIST); }
		public ITerminalNode STOPLIST(int i) {
			return GetToken(TSqlParser.STOPLIST, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode SYSTEM() { return GetToken(TSqlParser.SYSTEM, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Create_fulltext_stoplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_fulltext_stoplist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_fulltext_stoplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_fulltext_stoplist(this);
		}
	}

	[RuleVersion(0)]
	public Create_fulltext_stoplistContext create_fulltext_stoplist() {
		Create_fulltext_stoplistContext _localctx = new Create_fulltext_stoplistContext(_ctx, State);
		EnterRule(_localctx, 328, RULE_create_fulltext_stoplist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4159; Match(CREATE);
			State = 4160; Match(FULLTEXT);
			State = 4161; Match(STOPLIST);
			State = 4162; _localctx.stoplist_name = id_();
			State = 4174;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,391,_ctx) ) {
			case 1:
				{
				State = 4163; Match(FROM);
				State = 4172;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,390,_ctx) ) {
				case 1:
					{
					State = 4167;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,389,_ctx) ) {
					case 1:
						{
						State = 4164; _localctx.database_name = id_();
						State = 4165; Match(DOT);
						}
						break;
					}
					State = 4169; _localctx.source_stoplist_name = id_();
					}
					break;

				case 2:
					{
					State = 4170; Match(SYSTEM);
					State = 4171; Match(STOPLIST);
					}
					break;
				}
				}
				break;
			}
			State = 4178;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,392,_ctx) ) {
			case 1:
				{
				State = 4176; Match(AUTHORIZATION);
				State = 4177; _localctx.owner_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_login_sql_serverContext : ParserRuleContext {
		public Id_Context login_name;
		public IToken password;
		public IToken password_hash;
		public IToken old_password;
		public Id_Context default_database;
		public Id_Context default_laguage;
		public Id_Context credential_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] CREDENTIAL() { return GetTokens(TSqlParser.CREDENTIAL); }
		public ITerminalNode CREDENTIAL(int i) {
			return GetToken(TSqlParser.CREDENTIAL, i);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode DEFAULT_DATABASE() { return GetToken(TSqlParser.DEFAULT_DATABASE, 0); }
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode CHECK_POLICY() { return GetToken(TSqlParser.CHECK_POLICY, 0); }
		public ITerminalNode CHECK_EXPIRATION() { return GetToken(TSqlParser.CHECK_EXPIRATION, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode HASHED() { return GetToken(TSqlParser.HASHED, 0); }
		public ITerminalNode[] MUST_CHANGE() { return GetTokens(TSqlParser.MUST_CHANGE); }
		public ITerminalNode MUST_CHANGE(int i) {
			return GetToken(TSqlParser.MUST_CHANGE, i);
		}
		public ITerminalNode[] UNLOCK() { return GetTokens(TSqlParser.UNLOCK); }
		public ITerminalNode UNLOCK(int i) {
			return GetToken(TSqlParser.UNLOCK, i);
		}
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public Alter_login_sql_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_login_sql_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_login_sql_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_login_sql_server(this);
		}
	}

	[RuleVersion(0)]
	public Alter_login_sql_serverContext alter_login_sql_server() {
		Alter_login_sql_serverContext _localctx = new Alter_login_sql_serverContext(_ctx, State);
		EnterRule(_localctx, 330, RULE_alter_login_sql_server);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4180; Match(ALTER);
			State = 4181; Match(LOGIN);
			State = 4182; _localctx.login_name = id_();
			State = 4250;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,406,_ctx) ) {
			case 1:
				{
				State = 4184;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,393,_ctx) ) {
				case 1:
					{
					State = 4183;
					_la = _input.La(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 4186; Match(WITH);
				State = 4200;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,396,_ctx) ) {
				case 1:
					{
					{
					State = 4187; Match(PASSWORD);
					State = 4188; Match(EQUAL);
					State = 4192;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,394,_ctx) ) {
					case 1:
						{
						State = 4189; _localctx.password = Match(STRING);
						}
						break;

					case 2:
						{
						State = 4190; _localctx.password_hash = Match(BINARY);
						State = 4191; Match(HASHED);
						}
						break;
					}
					}
					State = 4197;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,395,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 4194;
							_la = _input.La(1);
							if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							} 
						}
						State = 4199;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,395,_ctx);
					}
					}
					break;
				}
				State = 4211;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,398,_ctx) ) {
				case 1:
					{
					State = 4202; Match(OLD_PASSWORD);
					State = 4203; Match(EQUAL);
					State = 4204; _localctx.old_password = Match(STRING);
					State = 4208;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,397,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 4205;
							_la = _input.La(1);
							if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							} 
						}
						State = 4210;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,397,_ctx);
					}
					}
					break;
				}
				State = 4216;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,399,_ctx) ) {
				case 1:
					{
					State = 4213; Match(DEFAULT_DATABASE);
					State = 4214; Match(EQUAL);
					State = 4215; _localctx.default_database = id_();
					}
					break;
				}
				State = 4221;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,400,_ctx) ) {
				case 1:
					{
					State = 4218; Match(DEFAULT_LANGUAGE);
					State = 4219; Match(EQUAL);
					State = 4220; _localctx.default_laguage = id_();
					}
					break;
				}
				State = 4226;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,401,_ctx) ) {
				case 1:
					{
					State = 4223; Match(NAME);
					State = 4224; Match(EQUAL);
					State = 4225; _localctx.login_name = id_();
					}
					break;
				}
				State = 4231;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,402,_ctx) ) {
				case 1:
					{
					State = 4228; Match(CHECK_POLICY);
					State = 4229; Match(EQUAL);
					State = 4230;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 4236;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,403,_ctx) ) {
				case 1:
					{
					State = 4233; Match(CHECK_EXPIRATION);
					State = 4234; Match(EQUAL);
					State = 4235;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 4241;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,404,_ctx) ) {
				case 1:
					{
					State = 4238; Match(CREDENTIAL);
					State = 4239; Match(EQUAL);
					State = 4240; _localctx.credential_name = id_();
					}
					break;
				}
				State = 4245;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,405,_ctx) ) {
				case 1:
					{
					State = 4243; Match(NO);
					State = 4244; Match(CREDENTIAL);
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 4247;
				_la = _input.La(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 4248; Match(CREDENTIAL);
				State = 4249; _localctx.credential_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_login_sql_serverContext : ParserRuleContext {
		public Id_Context login_name;
		public IToken password;
		public IToken password_hash;
		public IToken sid;
		public Id_Context default_database;
		public Id_Context default_laguage;
		public Id_Context credential_name;
		public IToken default_language;
		public Id_Context certname;
		public Id_Context asym_key_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode SID() { return GetToken(TSqlParser.SID, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode DEFAULT_DATABASE() { return GetToken(TSqlParser.DEFAULT_DATABASE, 0); }
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode CHECK_EXPIRATION() { return GetToken(TSqlParser.CHECK_EXPIRATION, 0); }
		public ITerminalNode CHECK_POLICY() { return GetToken(TSqlParser.CHECK_POLICY, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode[] BINARY() { return GetTokens(TSqlParser.BINARY); }
		public ITerminalNode BINARY(int i) {
			return GetToken(TSqlParser.BINARY, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode HASHED() { return GetToken(TSqlParser.HASHED, 0); }
		public ITerminalNode[] MUST_CHANGE() { return GetTokens(TSqlParser.MUST_CHANGE); }
		public ITerminalNode MUST_CHANGE(int i) {
			return GetToken(TSqlParser.MUST_CHANGE, i);
		}
		public ITerminalNode[] UNLOCK() { return GetTokens(TSqlParser.UNLOCK); }
		public ITerminalNode UNLOCK(int i) {
			return GetToken(TSqlParser.UNLOCK, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Create_login_sql_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_login_sql_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_login_sql_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_login_sql_server(this);
		}
	}

	[RuleVersion(0)]
	public Create_login_sql_serverContext create_login_sql_server() {
		Create_login_sql_serverContext _localctx = new Create_login_sql_serverContext(_ctx, State);
		EnterRule(_localctx, 332, RULE_create_login_sql_server);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4252; Match(CREATE);
			State = 4253; Match(LOGIN);
			State = 4254; _localctx.login_name = id_();
			State = 4345;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,427,_ctx) ) {
			case 1:
				{
				State = 4255; Match(WITH);
				State = 4269;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,409,_ctx) ) {
				case 1:
					{
					{
					State = 4256; Match(PASSWORD);
					State = 4257; Match(EQUAL);
					State = 4261;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,407,_ctx) ) {
					case 1:
						{
						State = 4258; _localctx.password = Match(STRING);
						}
						break;

					case 2:
						{
						State = 4259; _localctx.password_hash = Match(BINARY);
						State = 4260; Match(HASHED);
						}
						break;
					}
					}
					State = 4266;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,408,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 4263;
							_la = _input.La(1);
							if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							} 
						}
						State = 4268;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,408,_ctx);
					}
					}
					break;
				}
				State = 4277;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,411,_ctx) ) {
				case 1:
					{
					State = 4272;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,410,_ctx) ) {
					case 1:
						{
						State = 4271; Match(COMMA);
						}
						break;
					}
					State = 4274; Match(SID);
					State = 4275; Match(EQUAL);
					State = 4276; _localctx.sid = Match(BINARY);
					}
					break;
				}
				State = 4285;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,413,_ctx) ) {
				case 1:
					{
					State = 4280;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,412,_ctx) ) {
					case 1:
						{
						State = 4279; Match(COMMA);
						}
						break;
					}
					State = 4282; Match(DEFAULT_DATABASE);
					State = 4283; Match(EQUAL);
					State = 4284; _localctx.default_database = id_();
					}
					break;
				}
				State = 4293;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,415,_ctx) ) {
				case 1:
					{
					State = 4288;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,414,_ctx) ) {
					case 1:
						{
						State = 4287; Match(COMMA);
						}
						break;
					}
					State = 4290; Match(DEFAULT_LANGUAGE);
					State = 4291; Match(EQUAL);
					State = 4292; _localctx.default_laguage = id_();
					}
					break;
				}
				State = 4301;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,417,_ctx) ) {
				case 1:
					{
					State = 4296;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,416,_ctx) ) {
					case 1:
						{
						State = 4295; Match(COMMA);
						}
						break;
					}
					State = 4298; Match(CHECK_EXPIRATION);
					State = 4299; Match(EQUAL);
					State = 4300;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 4309;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,419,_ctx) ) {
				case 1:
					{
					State = 4304;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,418,_ctx) ) {
					case 1:
						{
						State = 4303; Match(COMMA);
						}
						break;
					}
					State = 4306; Match(CHECK_POLICY);
					State = 4307; Match(EQUAL);
					State = 4308;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 4317;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,421,_ctx) ) {
				case 1:
					{
					State = 4312;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,420,_ctx) ) {
					case 1:
						{
						State = 4311; Match(COMMA);
						}
						break;
					}
					State = 4314; Match(CREDENTIAL);
					State = 4315; Match(EQUAL);
					State = 4316; _localctx.credential_name = id_();
					}
					break;
				}
				}
				break;

			case 2:
				{
				{
				State = 4319; Match(FROM);
				State = 4343;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,426,_ctx) ) {
				case 1:
					{
					State = 4320; Match(WINDOWS);
					{
					State = 4321; Match(WITH);
					State = 4328;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,423,_ctx) ) {
					case 1:
						{
						State = 4323;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,422,_ctx) ) {
						case 1:
							{
							State = 4322; Match(COMMA);
							}
							break;
						}
						State = 4325; Match(DEFAULT_DATABASE);
						State = 4326; Match(EQUAL);
						State = 4327; _localctx.default_database = id_();
						}
						break;
					}
					State = 4336;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,425,_ctx) ) {
					case 1:
						{
						State = 4331;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,424,_ctx) ) {
						case 1:
							{
							State = 4330; Match(COMMA);
							}
							break;
						}
						State = 4333; Match(DEFAULT_LANGUAGE);
						State = 4334; Match(EQUAL);
						State = 4335; _localctx.default_language = Match(STRING);
						}
						break;
					}
					}
					}
					break;

				case 2:
					{
					State = 4338; Match(CERTIFICATE);
					State = 4339; _localctx.certname = id_();
					}
					break;

				case 3:
					{
					State = 4340; Match(ASYMMETRIC);
					State = 4341; Match(KEY);
					State = 4342; _localctx.asym_key_name = id_();
					}
					break;
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_login_azure_sqlContext : ParserRuleContext {
		public Id_Context login_name;
		public IToken password;
		public IToken old_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public Alter_login_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_login_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_login_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_login_azure_sql(this);
		}
	}

	[RuleVersion(0)]
	public Alter_login_azure_sqlContext alter_login_azure_sql() {
		Alter_login_azure_sqlContext _localctx = new Alter_login_azure_sqlContext(_ctx, State);
		EnterRule(_localctx, 334, RULE_alter_login_azure_sql);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4347; Match(ALTER);
			State = 4348; Match(LOGIN);
			State = 4349; _localctx.login_name = id_();
			State = 4367;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,431,_ctx) ) {
			case 1:
				{
				State = 4351;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,428,_ctx) ) {
				case 1:
					{
					State = 4350;
					_la = _input.La(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 4353; Match(WITH);
				State = 4365;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,430,_ctx) ) {
				case 1:
					{
					State = 4354; Match(PASSWORD);
					State = 4355; Match(EQUAL);
					State = 4356; _localctx.password = Match(STRING);
					State = 4360;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,429,_ctx) ) {
					case 1:
						{
						State = 4357; Match(OLD_PASSWORD);
						State = 4358; Match(EQUAL);
						State = 4359; _localctx.old_password = Match(STRING);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 4362; Match(NAME);
					State = 4363; Match(EQUAL);
					State = 4364; _localctx.login_name = id_();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_login_azure_sqlContext : ParserRuleContext {
		public Id_Context login_name;
		public IToken sid;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode SID() { return GetToken(TSqlParser.SID, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public Create_login_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_login_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_login_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_login_azure_sql(this);
		}
	}

	[RuleVersion(0)]
	public Create_login_azure_sqlContext create_login_azure_sql() {
		Create_login_azure_sqlContext _localctx = new Create_login_azure_sqlContext(_ctx, State);
		EnterRule(_localctx, 336, RULE_create_login_azure_sql);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4369; Match(CREATE);
			State = 4370; Match(LOGIN);
			State = 4371; _localctx.login_name = id_();
			State = 4372; Match(WITH);
			State = 4373; Match(PASSWORD);
			State = 4374; Match(EQUAL);
			State = 4375; Match(STRING);
			State = 4379;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,432,_ctx) ) {
			case 1:
				{
				State = 4376; Match(SID);
				State = 4377; Match(EQUAL);
				State = 4378; _localctx.sid = Match(BINARY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_login_azure_sql_dw_and_pdwContext : ParserRuleContext {
		public Id_Context login_name;
		public IToken password;
		public IToken old_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public ITerminalNode[] MUST_CHANGE() { return GetTokens(TSqlParser.MUST_CHANGE); }
		public ITerminalNode MUST_CHANGE(int i) {
			return GetToken(TSqlParser.MUST_CHANGE, i);
		}
		public ITerminalNode[] UNLOCK() { return GetTokens(TSqlParser.UNLOCK); }
		public ITerminalNode UNLOCK(int i) {
			return GetToken(TSqlParser.UNLOCK, i);
		}
		public Alter_login_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_login_azure_sql_dw_and_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_login_azure_sql_dw_and_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_login_azure_sql_dw_and_pdw(this);
		}
	}

	[RuleVersion(0)]
	public Alter_login_azure_sql_dw_and_pdwContext alter_login_azure_sql_dw_and_pdw() {
		Alter_login_azure_sql_dw_and_pdwContext _localctx = new Alter_login_azure_sql_dw_and_pdwContext(_ctx, State);
		EnterRule(_localctx, 338, RULE_alter_login_azure_sql_dw_and_pdw);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4381; Match(ALTER);
			State = 4382; Match(LOGIN);
			State = 4383; _localctx.login_name = id_();
			State = 4407;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,437,_ctx) ) {
			case 1:
				{
				State = 4385;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,433,_ctx) ) {
				case 1:
					{
					State = 4384;
					_la = _input.La(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 4387; Match(WITH);
				State = 4405;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,436,_ctx) ) {
				case 1:
					{
					State = 4388; Match(PASSWORD);
					State = 4389; Match(EQUAL);
					State = 4390; _localctx.password = Match(STRING);
					State = 4400;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,435,_ctx) ) {
					case 1:
						{
						State = 4391; Match(OLD_PASSWORD);
						State = 4392; Match(EQUAL);
						State = 4393; _localctx.old_password = Match(STRING);
						State = 4397;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,434,_ctx);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
							if ( _alt==1 ) {
								{
								{
								State = 4394;
								_la = _input.La(1);
								if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								} 
							}
							State = 4399;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,434,_ctx);
						}
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 4402; Match(NAME);
					State = 4403; Match(EQUAL);
					State = 4404; _localctx.login_name = id_();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_login_pdwContext : ParserRuleContext {
		public Id_Context loginName;
		public IToken password;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode MUST_CHANGE() { return GetToken(TSqlParser.MUST_CHANGE, 0); }
		public ITerminalNode CHECK_POLICY() { return GetToken(TSqlParser.CHECK_POLICY, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_login_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_login_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_login_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_login_pdw(this);
		}
	}

	[RuleVersion(0)]
	public Create_login_pdwContext create_login_pdw() {
		Create_login_pdwContext _localctx = new Create_login_pdwContext(_ctx, State);
		EnterRule(_localctx, 340, RULE_create_login_pdw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4409; Match(CREATE);
			State = 4410; Match(LOGIN);
			State = 4411; _localctx.loginName = id_();
			State = 4428;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,441,_ctx) ) {
			case 1:
				{
				State = 4412; Match(WITH);
				{
				State = 4413; Match(PASSWORD);
				State = 4414; Match(EQUAL);
				State = 4415; _localctx.password = Match(STRING);
				State = 4417;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,438,_ctx) ) {
				case 1:
					{
					State = 4416; Match(MUST_CHANGE);
					}
					break;
				}
				State = 4424;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,440,_ctx) ) {
				case 1:
					{
					State = 4419; Match(CHECK_POLICY);
					State = 4420; Match(EQUAL);
					State = 4422;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,439,_ctx) ) {
					case 1:
						{
						State = 4421;
						_la = _input.La(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				}
				break;

			case 2:
				{
				State = 4426; Match(FROM);
				State = 4427; Match(WINDOWS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_master_key_sql_serverContext : ParserRuleContext {
		public IToken password;
		public IToken encryption_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] MASTER() { return GetTokens(TSqlParser.MASTER); }
		public ITerminalNode MASTER(int i) {
			return GetToken(TSqlParser.MASTER, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public ITerminalNode REGENERATE() { return GetToken(TSqlParser.REGENERATE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public Alter_master_key_sql_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_master_key_sql_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_master_key_sql_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_master_key_sql_server(this);
		}
	}

	[RuleVersion(0)]
	public Alter_master_key_sql_serverContext alter_master_key_sql_server() {
		Alter_master_key_sql_serverContext _localctx = new Alter_master_key_sql_serverContext(_ctx, State);
		EnterRule(_localctx, 342, RULE_alter_master_key_sql_server);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4430; Match(ALTER);
			State = 4431; Match(MASTER);
			State = 4432; Match(KEY);
			State = 4454;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,444,_ctx) ) {
			case 1:
				{
				State = 4434;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,442,_ctx) ) {
				case 1:
					{
					State = 4433; Match(FORCE);
					}
					break;
				}
				State = 4436; Match(REGENERATE);
				State = 4437; Match(WITH);
				State = 4438; Match(ENCRYPTION);
				State = 4439; Match(BY);
				State = 4440; Match(PASSWORD);
				State = 4441; Match(EQUAL);
				State = 4442; _localctx.password = Match(STRING);
				}
				break;

			case 2:
				{
				State = 4443;
				_la = _input.La(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 4444; Match(ENCRYPTION);
				State = 4445; Match(BY);
				State = 4452;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,443,_ctx) ) {
				case 1:
					{
					State = 4446; Match(SERVICE);
					State = 4447; Match(MASTER);
					State = 4448; Match(KEY);
					}
					break;

				case 2:
					{
					State = 4449; Match(PASSWORD);
					State = 4450; Match(EQUAL);
					State = 4451; _localctx.encryption_password = Match(STRING);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_master_key_sql_serverContext : ParserRuleContext {
		public IToken password;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Create_master_key_sql_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_master_key_sql_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_master_key_sql_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_master_key_sql_server(this);
		}
	}

	[RuleVersion(0)]
	public Create_master_key_sql_serverContext create_master_key_sql_server() {
		Create_master_key_sql_serverContext _localctx = new Create_master_key_sql_serverContext(_ctx, State);
		EnterRule(_localctx, 344, RULE_create_master_key_sql_server);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4456; Match(CREATE);
			State = 4457; Match(MASTER);
			State = 4458; Match(KEY);
			State = 4459; Match(ENCRYPTION);
			State = 4460; Match(BY);
			State = 4461; Match(PASSWORD);
			State = 4462; Match(EQUAL);
			State = 4463; _localctx.password = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_master_key_azure_sqlContext : ParserRuleContext {
		public IToken password;
		public IToken encryption_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] MASTER() { return GetTokens(TSqlParser.MASTER); }
		public ITerminalNode MASTER(int i) {
			return GetToken(TSqlParser.MASTER, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public ITerminalNode REGENERATE() { return GetToken(TSqlParser.REGENERATE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public Alter_master_key_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_master_key_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_master_key_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_master_key_azure_sql(this);
		}
	}

	[RuleVersion(0)]
	public Alter_master_key_azure_sqlContext alter_master_key_azure_sql() {
		Alter_master_key_azure_sqlContext _localctx = new Alter_master_key_azure_sqlContext(_ctx, State);
		EnterRule(_localctx, 346, RULE_alter_master_key_azure_sql);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4465; Match(ALTER);
			State = 4466; Match(MASTER);
			State = 4467; Match(KEY);
			State = 4495;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,447,_ctx) ) {
			case 1:
				{
				State = 4469;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,445,_ctx) ) {
				case 1:
					{
					State = 4468; Match(FORCE);
					}
					break;
				}
				State = 4471; Match(REGENERATE);
				State = 4472; Match(WITH);
				State = 4473; Match(ENCRYPTION);
				State = 4474; Match(BY);
				State = 4475; Match(PASSWORD);
				State = 4476; Match(EQUAL);
				State = 4477; _localctx.password = Match(STRING);
				}
				break;

			case 2:
				{
				State = 4478; Match(ADD);
				State = 4479; Match(ENCRYPTION);
				State = 4480; Match(BY);
				State = 4487;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,446,_ctx) ) {
				case 1:
					{
					State = 4481; Match(SERVICE);
					State = 4482; Match(MASTER);
					State = 4483; Match(KEY);
					}
					break;

				case 2:
					{
					State = 4484; Match(PASSWORD);
					State = 4485; Match(EQUAL);
					State = 4486; _localctx.encryption_password = Match(STRING);
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 4489; Match(DROP);
				State = 4490; Match(ENCRYPTION);
				State = 4491; Match(BY);
				State = 4492; Match(PASSWORD);
				State = 4493; Match(EQUAL);
				State = 4494; _localctx.encryption_password = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_master_key_azure_sqlContext : ParserRuleContext {
		public IToken password;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Create_master_key_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_master_key_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_master_key_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_master_key_azure_sql(this);
		}
	}

	[RuleVersion(0)]
	public Create_master_key_azure_sqlContext create_master_key_azure_sql() {
		Create_master_key_azure_sqlContext _localctx = new Create_master_key_azure_sqlContext(_ctx, State);
		EnterRule(_localctx, 348, RULE_create_master_key_azure_sql);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4497; Match(CREATE);
			State = 4498; Match(MASTER);
			State = 4499; Match(KEY);
			State = 4505;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,448,_ctx) ) {
			case 1:
				{
				State = 4500; Match(ENCRYPTION);
				State = 4501; Match(BY);
				State = 4502; Match(PASSWORD);
				State = 4503; Match(EQUAL);
				State = 4504; _localctx.password = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_message_typeContext : ParserRuleContext {
		public Id_Context message_type_name;
		public Id_Context schema_collection_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode VALIDATION() { return GetToken(TSqlParser.VALIDATION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode EMPTY() { return GetToken(TSqlParser.EMPTY, 0); }
		public ITerminalNode WELL_FORMED_XML() { return GetToken(TSqlParser.WELL_FORMED_XML, 0); }
		public ITerminalNode VALID_XML() { return GetToken(TSqlParser.VALID_XML, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Alter_message_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_message_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_message_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_message_type(this);
		}
	}

	[RuleVersion(0)]
	public Alter_message_typeContext alter_message_type() {
		Alter_message_typeContext _localctx = new Alter_message_typeContext(_ctx, State);
		EnterRule(_localctx, 350, RULE_alter_message_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4507; Match(ALTER);
			State = 4508; Match(MESSAGE);
			State = 4509; Match(TYPE);
			State = 4510; _localctx.message_type_name = id_();
			State = 4511; Match(VALIDATION);
			State = 4512; Match(EQUAL);
			State = 4521;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,449,_ctx) ) {
			case 1:
				{
				State = 4513; Match(NONE);
				}
				break;

			case 2:
				{
				State = 4514; Match(EMPTY);
				}
				break;

			case 3:
				{
				State = 4515; Match(WELL_FORMED_XML);
				}
				break;

			case 4:
				{
				State = 4516; Match(VALID_XML);
				State = 4517; Match(WITH);
				State = 4518; Match(SCHEMA);
				State = 4519; Match(COLLECTION);
				State = 4520; _localctx.schema_collection_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_partition_functionContext : ParserRuleContext {
		public Id_Context partition_function_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode RANGE() { return GetToken(TSqlParser.RANGE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode SPLIT() { return GetToken(TSqlParser.SPLIT, 0); }
		public ITerminalNode MERGE() { return GetToken(TSqlParser.MERGE, 0); }
		public Alter_partition_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_partition_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_partition_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_partition_function(this);
		}
	}

	[RuleVersion(0)]
	public Alter_partition_functionContext alter_partition_function() {
		Alter_partition_functionContext _localctx = new Alter_partition_functionContext(_ctx, State);
		EnterRule(_localctx, 352, RULE_alter_partition_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4523; Match(ALTER);
			State = 4524; Match(PARTITION);
			State = 4525; Match(FUNCTION);
			State = 4526; _localctx.partition_function_name = id_();
			State = 4527; Match(LR_BRACKET);
			State = 4528; Match(RR_BRACKET);
			State = 4529;
			_la = _input.La(1);
			if ( !(_la==MERGE || _la==SPLIT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 4530; Match(RANGE);
			State = 4531; Match(LR_BRACKET);
			State = 4532; Match(DECIMAL);
			State = 4533; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_partition_schemeContext : ParserRuleContext {
		public Id_Context partition_scheme_name;
		public Id_Context file_group_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public ITerminalNode USED() { return GetToken(TSqlParser.USED, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Alter_partition_schemeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_partition_scheme; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_partition_scheme(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_partition_scheme(this);
		}
	}

	[RuleVersion(0)]
	public Alter_partition_schemeContext alter_partition_scheme() {
		Alter_partition_schemeContext _localctx = new Alter_partition_schemeContext(_ctx, State);
		EnterRule(_localctx, 354, RULE_alter_partition_scheme);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4535; Match(ALTER);
			State = 4536; Match(PARTITION);
			State = 4537; Match(SCHEME);
			State = 4538; _localctx.partition_scheme_name = id_();
			State = 4539; Match(NEXT);
			State = 4540; Match(USED);
			State = 4542;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,450,_ctx) ) {
			case 1:
				{
				State = 4541; _localctx.file_group_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_remote_service_bindingContext : ParserRuleContext {
		public Id_Context binding_name;
		public Id_Context user_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode ANONYMOUS() { return GetToken(TSqlParser.ANONYMOUS, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Alter_remote_service_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_remote_service_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_remote_service_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_remote_service_binding(this);
		}
	}

	[RuleVersion(0)]
	public Alter_remote_service_bindingContext alter_remote_service_binding() {
		Alter_remote_service_bindingContext _localctx = new Alter_remote_service_bindingContext(_ctx, State);
		EnterRule(_localctx, 356, RULE_alter_remote_service_binding);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4544; Match(ALTER);
			State = 4545; Match(REMOTE);
			State = 4546; Match(SERVICE);
			State = 4547; Match(BINDING);
			State = 4548; _localctx.binding_name = id_();
			State = 4549; Match(WITH);
			State = 4553;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,451,_ctx) ) {
			case 1:
				{
				State = 4550; Match(USER);
				State = 4551; Match(EQUAL);
				State = 4552; _localctx.user_name = id_();
				}
				break;
			}
			State = 4559;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,452,_ctx) ) {
			case 1:
				{
				State = 4555; Match(COMMA);
				State = 4556; Match(ANONYMOUS);
				State = 4557; Match(EQUAL);
				State = 4558;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_remote_service_bindingContext : ParserRuleContext {
		public Id_Context binding_name;
		public Id_Context owner_name;
		public IToken remote_service_name;
		public Id_Context user_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode[] SERVICE() { return GetTokens(TSqlParser.SERVICE); }
		public ITerminalNode SERVICE(int i) {
			return GetToken(TSqlParser.SERVICE, i);
		}
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode ANONYMOUS() { return GetToken(TSqlParser.ANONYMOUS, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_remote_service_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_remote_service_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_remote_service_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_remote_service_binding(this);
		}
	}

	[RuleVersion(0)]
	public Create_remote_service_bindingContext create_remote_service_binding() {
		Create_remote_service_bindingContext _localctx = new Create_remote_service_bindingContext(_ctx, State);
		EnterRule(_localctx, 358, RULE_create_remote_service_binding);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4561; Match(CREATE);
			State = 4562; Match(REMOTE);
			State = 4563; Match(SERVICE);
			State = 4564; Match(BINDING);
			State = 4565; _localctx.binding_name = id_();
			State = 4568;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,453,_ctx) ) {
			case 1:
				{
				State = 4566; Match(AUTHORIZATION);
				State = 4567; _localctx.owner_name = id_();
				}
				break;
			}
			State = 4570; Match(TO);
			State = 4571; Match(SERVICE);
			State = 4572; _localctx.remote_service_name = Match(STRING);
			State = 4573; Match(WITH);
			State = 4577;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,454,_ctx) ) {
			case 1:
				{
				State = 4574; Match(USER);
				State = 4575; Match(EQUAL);
				State = 4576; _localctx.user_name = id_();
				}
				break;
			}
			State = 4583;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,455,_ctx) ) {
			case 1:
				{
				State = 4579; Match(COMMA);
				State = 4580; Match(ANONYMOUS);
				State = 4581; Match(EQUAL);
				State = 4582;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_resource_poolContext : ParserRuleContext {
		public Id_Context pool_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode MIN_CPU_PERCENT() { return GetToken(TSqlParser.MIN_CPU_PERCENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode MAX_CPU_PERCENT() { return GetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public ITerminalNode CAP_CPU_PERCENT() { return GetToken(TSqlParser.CAP_CPU_PERCENT, 0); }
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode SCHEDULER() { return GetToken(TSqlParser.SCHEDULER, 0); }
		public ITerminalNode MIN_MEMORY_PERCENT() { return GetToken(TSqlParser.MIN_MEMORY_PERCENT, 0); }
		public ITerminalNode MAX_MEMORY_PERCENT() { return GetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public ITerminalNode MIN_IOPS_PER_VOLUME() { return GetToken(TSqlParser.MIN_IOPS_PER_VOLUME, 0); }
		public ITerminalNode MAX_IOPS_PER_VOLUME() { return GetToken(TSqlParser.MAX_IOPS_PER_VOLUME, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Create_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_resource_pool(this);
		}
	}

	[RuleVersion(0)]
	public Create_resource_poolContext create_resource_pool() {
		Create_resource_poolContext _localctx = new Create_resource_poolContext(_ctx, State);
		EnterRule(_localctx, 360, RULE_create_resource_pool);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4585; Match(CREATE);
			State = 4586; Match(RESOURCE);
			State = 4587; Match(POOL);
			State = 4588; _localctx.pool_name = id_();
			State = 4691;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,479,_ctx) ) {
			case 1:
				{
				State = 4589; Match(WITH);
				State = 4590; Match(LR_BRACKET);
				State = 4597;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,457,_ctx) ) {
				case 1:
					{
					State = 4592;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,456,_ctx) ) {
					case 1:
						{
						State = 4591; Match(COMMA);
						}
						break;
					}
					State = 4594; Match(MIN_CPU_PERCENT);
					State = 4595; Match(EQUAL);
					State = 4596; Match(DECIMAL);
					}
					break;
				}
				State = 4605;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,459,_ctx) ) {
				case 1:
					{
					State = 4600;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,458,_ctx) ) {
					case 1:
						{
						State = 4599; Match(COMMA);
						}
						break;
					}
					State = 4602; Match(MAX_CPU_PERCENT);
					State = 4603; Match(EQUAL);
					State = 4604; Match(DECIMAL);
					}
					break;
				}
				State = 4613;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,461,_ctx) ) {
				case 1:
					{
					State = 4608;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,460,_ctx) ) {
					case 1:
						{
						State = 4607; Match(COMMA);
						}
						break;
					}
					State = 4610; Match(CAP_CPU_PERCENT);
					State = 4611; Match(EQUAL);
					State = 4612; Match(DECIMAL);
					}
					break;
				}
				State = 4656;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,470,_ctx) ) {
				case 1:
					{
					State = 4616;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,462,_ctx) ) {
					case 1:
						{
						State = 4615; Match(COMMA);
						}
						break;
					}
					State = 4618; Match(AFFINITY);
					State = 4619; Match(SCHEDULER);
					State = 4620; Match(EQUAL);
					State = 4654;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,469,_ctx) ) {
					case 1:
						{
						State = 4621; Match(AUTO);
						}
						break;

					case 2:
						{
						State = 4622; Match(LR_BRACKET);
						State = 4632;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 4624;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,463,_ctx) ) {
								case 1:
									{
									State = 4623; Match(COMMA);
									}
									break;
								}
								State = 4630;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,464,_ctx) ) {
								case 1:
									{
									State = 4626; Match(DECIMAL);
									}
									break;

								case 2:
									{
									State = 4627; Match(DECIMAL);
									State = 4628; Match(TO);
									State = 4629; Match(DECIMAL);
									}
									break;
								}
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 4634;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,465,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						State = 4636; Match(RR_BRACKET);
						}
						break;

					case 3:
						{
						State = 4637; Match(NUMANODE);
						State = 4638; Match(EQUAL);
						State = 4639; Match(LR_BRACKET);
						State = 4649;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 4641;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,466,_ctx) ) {
								case 1:
									{
									State = 4640; Match(COMMA);
									}
									break;
								}
								State = 4647;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,467,_ctx) ) {
								case 1:
									{
									State = 4643; Match(DECIMAL);
									}
									break;

								case 2:
									{
									State = 4644; Match(DECIMAL);
									State = 4645; Match(TO);
									State = 4646; Match(DECIMAL);
									}
									break;
								}
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 4651;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,468,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						State = 4653; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				State = 4664;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,472,_ctx) ) {
				case 1:
					{
					State = 4659;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,471,_ctx) ) {
					case 1:
						{
						State = 4658; Match(COMMA);
						}
						break;
					}
					State = 4661; Match(MIN_MEMORY_PERCENT);
					State = 4662; Match(EQUAL);
					State = 4663; Match(DECIMAL);
					}
					break;
				}
				State = 4672;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,474,_ctx) ) {
				case 1:
					{
					State = 4667;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,473,_ctx) ) {
					case 1:
						{
						State = 4666; Match(COMMA);
						}
						break;
					}
					State = 4669; Match(MAX_MEMORY_PERCENT);
					State = 4670; Match(EQUAL);
					State = 4671; Match(DECIMAL);
					}
					break;
				}
				State = 4680;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,476,_ctx) ) {
				case 1:
					{
					State = 4675;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,475,_ctx) ) {
					case 1:
						{
						State = 4674; Match(COMMA);
						}
						break;
					}
					State = 4677; Match(MIN_IOPS_PER_VOLUME);
					State = 4678; Match(EQUAL);
					State = 4679; Match(DECIMAL);
					}
					break;
				}
				State = 4688;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,478,_ctx) ) {
				case 1:
					{
					State = 4683;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,477,_ctx) ) {
					case 1:
						{
						State = 4682; Match(COMMA);
						}
						break;
					}
					State = 4685; Match(MAX_IOPS_PER_VOLUME);
					State = 4686; Match(EQUAL);
					State = 4687; Match(DECIMAL);
					}
					break;
				}
				State = 4690; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_resource_governorContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context function_name;
		public IToken max_outstanding_io_per_volume;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode GOVERNOR() { return GetToken(TSqlParser.GOVERNOR, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode CLASSIFIER_FUNCTION() { return GetToken(TSqlParser.CLASSIFIER_FUNCTION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode RESET() { return GetToken(TSqlParser.RESET, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public ITerminalNode MAX_OUTSTANDING_IO_PER_VOLUME() { return GetToken(TSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode RECONFIGURE() { return GetToken(TSqlParser.RECONFIGURE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Alter_resource_governorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_resource_governor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_resource_governor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_resource_governor(this);
		}
	}

	[RuleVersion(0)]
	public Alter_resource_governorContext alter_resource_governor() {
		Alter_resource_governorContext _localctx = new Alter_resource_governorContext(_ctx, State);
		EnterRule(_localctx, 362, RULE_alter_resource_governor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4693; Match(ALTER);
			State = 4694; Match(RESOURCE);
			State = 4695; Match(GOVERNOR);
			State = 4717;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,481,_ctx) ) {
			case 1:
				{
				State = 4696;
				_la = _input.La(1);
				if ( !(_la==DISABLE || _la==RECONFIGURE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				{
				State = 4697; Match(WITH);
				State = 4698; Match(LR_BRACKET);
				State = 4699; Match(CLASSIFIER_FUNCTION);
				State = 4700; Match(EQUAL);
				State = 4706;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,480,_ctx) ) {
				case 1:
					{
					State = 4701; _localctx.schema_name = id_();
					State = 4702; Match(DOT);
					State = 4703; _localctx.function_name = id_();
					}
					break;

				case 2:
					{
					State = 4705; Match(NULL_);
					}
					break;
				}
				State = 4708; Match(RR_BRACKET);
				}
				break;

			case 3:
				{
				State = 4709; Match(RESET);
				State = 4710; Match(STATISTICS);
				}
				break;

			case 4:
				{
				State = 4711; Match(WITH);
				State = 4712; Match(LR_BRACKET);
				State = 4713; Match(MAX_OUTSTANDING_IO_PER_VOLUME);
				State = 4714; Match(EQUAL);
				State = 4715; _localctx.max_outstanding_io_per_volume = Match(DECIMAL);
				State = 4716; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_database_audit_specificationContext : ParserRuleContext {
		public Id_Context audit_specification_name;
		public Id_Context audit_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode[] AUDIT() { return GetTokens(TSqlParser.AUDIT); }
		public ITerminalNode AUDIT(int i) {
			return GetToken(TSqlParser.AUDIT, i);
		}
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public Audit_action_spec_groupContext[] audit_action_spec_group() {
			return GetRuleContexts<Audit_action_spec_groupContext>();
		}
		public Audit_action_spec_groupContext audit_action_spec_group(int i) {
			return GetRuleContext<Audit_action_spec_groupContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Alter_database_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_database_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_database_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_database_audit_specification(this);
		}
	}

	[RuleVersion(0)]
	public Alter_database_audit_specificationContext alter_database_audit_specification() {
		Alter_database_audit_specificationContext _localctx = new Alter_database_audit_specificationContext(_ctx, State);
		EnterRule(_localctx, 364, RULE_alter_database_audit_specification);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4719; Match(ALTER);
			State = 4720; Match(DATABASE);
			State = 4721; Match(AUDIT);
			State = 4722; Match(SPECIFICATION);
			State = 4723; _localctx.audit_specification_name = id_();
			State = 4728;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,482,_ctx) ) {
			case 1:
				{
				State = 4724; Match(FOR);
				State = 4725; Match(SERVER);
				State = 4726; Match(AUDIT);
				State = 4727; _localctx.audit_name = id_();
				}
				break;
			}
			State = 4738;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,484,_ctx) ) {
			case 1:
				{
				State = 4730; audit_action_spec_group();
				State = 4735;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,483,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 4731; Match(COMMA);
						State = 4732; audit_action_spec_group();
						}
						} 
					}
					State = 4737;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,483,_ctx);
				}
				}
				break;
			}
			State = 4746;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,485,_ctx) ) {
			case 1:
				{
				State = 4740; Match(WITH);
				State = 4741; Match(LR_BRACKET);
				State = 4742; Match(STATE);
				State = 4743; Match(EQUAL);
				State = 4744;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 4745; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Audit_action_spec_groupContext : ParserRuleContext {
		public Id_Context audit_action_group_name;
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Audit_action_specificationContext audit_action_specification() {
			return GetRuleContext<Audit_action_specificationContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Audit_action_spec_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_audit_action_spec_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAudit_action_spec_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAudit_action_spec_group(this);
		}
	}

	[RuleVersion(0)]
	public Audit_action_spec_groupContext audit_action_spec_group() {
		Audit_action_spec_groupContext _localctx = new Audit_action_spec_groupContext(_ctx, State);
		EnterRule(_localctx, 366, RULE_audit_action_spec_group);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4748;
			_la = _input.La(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 4749; Match(LR_BRACKET);
			State = 4752;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,486,_ctx) ) {
			case 1:
				{
				State = 4750; audit_action_specification();
				}
				break;

			case 2:
				{
				State = 4751; _localctx.audit_action_group_name = id_();
				}
				break;
			}
			State = 4754; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Audit_action_specificationContext : ParserRuleContext {
		public Action_specificationContext[] action_specification() {
			return GetRuleContexts<Action_specificationContext>();
		}
		public Action_specificationContext action_specification(int i) {
			return GetRuleContext<Action_specificationContext>(i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Audit_securableContext audit_securable() {
			return GetRuleContext<Audit_securableContext>(0);
		}
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public Principal_idContext[] principal_id() {
			return GetRuleContexts<Principal_idContext>();
		}
		public Principal_idContext principal_id(int i) {
			return GetRuleContext<Principal_idContext>(i);
		}
		public Audit_class_nameContext audit_class_name() {
			return GetRuleContext<Audit_class_nameContext>(0);
		}
		public Audit_action_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_audit_action_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAudit_action_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAudit_action_specification(this);
		}
	}

	[RuleVersion(0)]
	public Audit_action_specificationContext audit_action_specification() {
		Audit_action_specificationContext _localctx = new Audit_action_specificationContext(_ctx, State);
		EnterRule(_localctx, 368, RULE_audit_action_specification);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4756; action_specification();
			State = 4761;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,487,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 4757; Match(COMMA);
					State = 4758; action_specification();
					}
					} 
				}
				State = 4763;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,487,_ctx);
			}
			State = 4764; Match(ON);
			State = 4768;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,488,_ctx) ) {
			case 1:
				{
				State = 4765; audit_class_name();
				State = 4766; Match(DOUBLE_COLON);
				}
				break;
			}
			State = 4770; audit_securable();
			State = 4771; Match(BY);
			State = 4772; principal_id();
			State = 4777;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,489,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 4773; Match(COMMA);
					State = 4774; principal_id();
					}
					} 
				}
				State = 4779;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,489,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Action_specificationContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(TSqlParser.SELECT, 0); }
		public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		public ITerminalNode RECEIVE() { return GetToken(TSqlParser.RECEIVE, 0); }
		public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		public Action_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAction_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAction_specification(this);
		}
	}

	[RuleVersion(0)]
	public Action_specificationContext action_specification() {
		Action_specificationContext _localctx = new Action_specificationContext(_ctx, State);
		EnterRule(_localctx, 370, RULE_action_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4780;
			_la = _input.La(1);
			if ( !(_la==DELETE || _la==EXECUTE || _la==INSERT || _la==RECEIVE || _la==REFERENCES || _la==SELECT || _la==UPDATE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Audit_class_nameContext : ParserRuleContext {
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Audit_class_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_audit_class_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAudit_class_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAudit_class_name(this);
		}
	}

	[RuleVersion(0)]
	public Audit_class_nameContext audit_class_name() {
		Audit_class_nameContext _localctx = new Audit_class_nameContext(_ctx, State);
		EnterRule(_localctx, 372, RULE_audit_class_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4782;
			_la = _input.La(1);
			if ( !(_la==OBJECT || _la==SCHEMA || _la==TABLE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Audit_securableContext : ParserRuleContext {
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Audit_securableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_audit_securable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAudit_securable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAudit_securable(this);
		}
	}

	[RuleVersion(0)]
	public Audit_securableContext audit_securable() {
		Audit_securableContext _localctx = new Audit_securableContext(_ctx, State);
		EnterRule(_localctx, 374, RULE_audit_securable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4792;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,491,_ctx) ) {
			case 1:
				{
				State = 4787;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,490,_ctx) ) {
				case 1:
					{
					State = 4784; id_();
					State = 4785; Match(DOT);
					}
					break;
				}
				State = 4789; id_();
				State = 4790; Match(DOT);
				}
				break;
			}
			State = 4794; id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_db_roleContext : ParserRuleContext {
		public Id_Context role_name;
		public Id_Context database_principal;
		public Id_Context new_role_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode MEMBER() { return GetToken(TSqlParser.MEMBER, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Alter_db_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_db_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_db_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_db_role(this);
		}
	}

	[RuleVersion(0)]
	public Alter_db_roleContext alter_db_role() {
		Alter_db_roleContext _localctx = new Alter_db_roleContext(_ctx, State);
		EnterRule(_localctx, 376, RULE_alter_db_role);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4796; Match(ALTER);
			State = 4797; Match(ROLE);
			State = 4798; _localctx.role_name = id_();
			State = 4806;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,492,_ctx) ) {
			case 1:
				{
				State = 4799;
				_la = _input.La(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 4800; Match(MEMBER);
				State = 4801; _localctx.database_principal = id_();
				}
				break;

			case 2:
				{
				State = 4802; Match(WITH);
				State = 4803; Match(NAME);
				State = 4804; Match(EQUAL);
				State = 4805; _localctx.new_role_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_database_audit_specificationContext : ParserRuleContext {
		public Id_Context audit_specification_name;
		public Id_Context audit_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode[] AUDIT() { return GetTokens(TSqlParser.AUDIT); }
		public ITerminalNode AUDIT(int i) {
			return GetToken(TSqlParser.AUDIT, i);
		}
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public Audit_action_spec_groupContext[] audit_action_spec_group() {
			return GetRuleContexts<Audit_action_spec_groupContext>();
		}
		public Audit_action_spec_groupContext audit_action_spec_group(int i) {
			return GetRuleContext<Audit_action_spec_groupContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_database_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_database_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_database_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_database_audit_specification(this);
		}
	}

	[RuleVersion(0)]
	public Create_database_audit_specificationContext create_database_audit_specification() {
		Create_database_audit_specificationContext _localctx = new Create_database_audit_specificationContext(_ctx, State);
		EnterRule(_localctx, 378, RULE_create_database_audit_specification);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4808; Match(CREATE);
			State = 4809; Match(DATABASE);
			State = 4810; Match(AUDIT);
			State = 4811; Match(SPECIFICATION);
			State = 4812; _localctx.audit_specification_name = id_();
			State = 4817;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,493,_ctx) ) {
			case 1:
				{
				State = 4813; Match(FOR);
				State = 4814; Match(SERVER);
				State = 4815; Match(AUDIT);
				State = 4816; _localctx.audit_name = id_();
				}
				break;
			}
			State = 4827;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,495,_ctx) ) {
			case 1:
				{
				State = 4819; audit_action_spec_group();
				State = 4824;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,494,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 4820; Match(COMMA);
						State = 4821; audit_action_spec_group();
						}
						} 
					}
					State = 4826;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,494,_ctx);
				}
				}
				break;
			}
			State = 4835;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,496,_ctx) ) {
			case 1:
				{
				State = 4829; Match(WITH);
				State = 4830; Match(LR_BRACKET);
				State = 4831; Match(STATE);
				State = 4832; Match(EQUAL);
				State = 4833;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 4834; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_db_roleContext : ParserRuleContext {
		public Id_Context role_name;
		public Id_Context owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_db_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_db_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_db_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_db_role(this);
		}
	}

	[RuleVersion(0)]
	public Create_db_roleContext create_db_role() {
		Create_db_roleContext _localctx = new Create_db_roleContext(_ctx, State);
		EnterRule(_localctx, 380, RULE_create_db_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4837; Match(CREATE);
			State = 4838; Match(ROLE);
			State = 4839; _localctx.role_name = id_();
			State = 4842;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,497,_ctx) ) {
			case 1:
				{
				State = 4840; Match(AUTHORIZATION);
				State = 4841; _localctx.owner_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_routeContext : ParserRuleContext {
		public Id_Context route_name;
		public Id_Context owner_name;
		public IToken route_service_name;
		public IToken broker_instance_identifier;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ADDRESS() { return GetToken(TSqlParser.ADDRESS, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode SERVICE_NAME() { return GetToken(TSqlParser.SERVICE_NAME, 0); }
		public ITerminalNode BROKER_INSTANCE() { return GetToken(TSqlParser.BROKER_INSTANCE, 0); }
		public ITerminalNode LIFETIME() { return GetToken(TSqlParser.LIFETIME, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode MIRROR_ADDRESS() { return GetToken(TSqlParser.MIRROR_ADDRESS, 0); }
		public Create_routeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_route; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_route(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_route(this);
		}
	}

	[RuleVersion(0)]
	public Create_routeContext create_route() {
		Create_routeContext _localctx = new Create_routeContext(_ctx, State);
		EnterRule(_localctx, 382, RULE_create_route);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4844; Match(CREATE);
			State = 4845; Match(ROUTE);
			State = 4846; _localctx.route_name = id_();
			State = 4849;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,498,_ctx) ) {
			case 1:
				{
				State = 4847; Match(AUTHORIZATION);
				State = 4848; _localctx.owner_name = id_();
				}
				break;
			}
			State = 4851; Match(WITH);
			State = 4858;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,500,_ctx) ) {
			case 1:
				{
				State = 4853;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,499,_ctx) ) {
				case 1:
					{
					State = 4852; Match(COMMA);
					}
					break;
				}
				State = 4855; Match(SERVICE_NAME);
				State = 4856; Match(EQUAL);
				State = 4857; _localctx.route_service_name = Match(STRING);
				}
				break;
			}
			State = 4866;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,502,_ctx) ) {
			case 1:
				{
				State = 4861;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,501,_ctx) ) {
				case 1:
					{
					State = 4860; Match(COMMA);
					}
					break;
				}
				State = 4863; Match(BROKER_INSTANCE);
				State = 4864; Match(EQUAL);
				State = 4865; _localctx.broker_instance_identifier = Match(STRING);
				}
				break;
			}
			State = 4874;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,504,_ctx) ) {
			case 1:
				{
				State = 4869;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,503,_ctx) ) {
				case 1:
					{
					State = 4868; Match(COMMA);
					}
					break;
				}
				State = 4871; Match(LIFETIME);
				State = 4872; Match(EQUAL);
				State = 4873; Match(DECIMAL);
				}
				break;
			}
			State = 4877;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,505,_ctx) ) {
			case 1:
				{
				State = 4876; Match(COMMA);
				}
				break;
			}
			State = 4879; Match(ADDRESS);
			State = 4880; Match(EQUAL);
			State = 4881; Match(STRING);
			State = 4886;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,506,_ctx) ) {
			case 1:
				{
				State = 4882; Match(COMMA);
				State = 4883; Match(MIRROR_ADDRESS);
				State = 4884; Match(EQUAL);
				State = 4885; Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_ruleContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context rule_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode RULE() { return GetToken(TSqlParser.RULE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Create_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_rule; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_rule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_rule(this);
		}
	}

	[RuleVersion(0)]
	public Create_ruleContext create_rule() {
		Create_ruleContext _localctx = new Create_ruleContext(_ctx, State);
		EnterRule(_localctx, 384, RULE_create_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4888; Match(CREATE);
			State = 4889; Match(RULE);
			State = 4893;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,507,_ctx) ) {
			case 1:
				{
				State = 4890; _localctx.schema_name = id_();
				State = 4891; Match(DOT);
				}
				break;
			}
			State = 4895; _localctx.rule_name = id_();
			State = 4896; Match(AS);
			State = 4897; search_condition(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_sqlContext : ParserRuleContext {
		public Id_Context schema_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] SCHEMA() { return GetTokens(TSqlParser.SCHEMA); }
		public ITerminalNode SCHEMA(int i) {
			return GetToken(TSqlParser.SCHEMA, i);
		}
		public ITerminalNode TRANSFER() { return GetToken(TSqlParser.TRANSFER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode DOUBLE_COLON() { return GetToken(TSqlParser.DOUBLE_COLON, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Alter_schema_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_sql(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_sqlContext alter_schema_sql() {
		Alter_schema_sqlContext _localctx = new Alter_schema_sqlContext(_ctx, State);
		EnterRule(_localctx, 386, RULE_alter_schema_sql);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4899; Match(ALTER);
			State = 4900; Match(SCHEMA);
			State = 4901; _localctx.schema_name = id_();
			State = 4902; Match(TRANSFER);
			State = 4911;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,509,_ctx) ) {
			case 1:
				{
				State = 4908;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,508,_ctx) ) {
				case 1:
					{
					State = 4903; Match(OBJECT);
					}
					break;

				case 2:
					{
					State = 4904; Match(TYPE);
					}
					break;

				case 3:
					{
					State = 4905; Match(XML);
					State = 4906; Match(SCHEMA);
					State = 4907; Match(COLLECTION);
					}
					break;
				}
				State = 4910; Match(DOUBLE_COLON);
				}
				break;
			}
			State = 4913; id_();
			State = 4916;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,510,_ctx) ) {
			case 1:
				{
				State = 4914; Match(DOT);
				State = 4915; id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_schemaContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context owner_name;
		public Id_Context object_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode[] SCHEMA() { return GetTokens(TSqlParser.SCHEMA); }
		public ITerminalNode SCHEMA(int i) {
			return GetToken(TSqlParser.SCHEMA, i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Create_tableContext[] create_table() {
			return GetRuleContexts<Create_tableContext>();
		}
		public Create_tableContext create_table(int i) {
			return GetRuleContext<Create_tableContext>(i);
		}
		public Create_viewContext[] create_view() {
			return GetRuleContexts<Create_viewContext>();
		}
		public Create_viewContext create_view(int i) {
			return GetRuleContext<Create_viewContext>(i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public ITerminalNode[] REVOKE() { return GetTokens(TSqlParser.REVOKE); }
		public ITerminalNode REVOKE(int i) {
			return GetToken(TSqlParser.REVOKE, i);
		}
		public ITerminalNode[] FROM() { return GetTokens(TSqlParser.FROM); }
		public ITerminalNode FROM(int i) {
			return GetToken(TSqlParser.FROM, i);
		}
		public ITerminalNode[] GRANT() { return GetTokens(TSqlParser.GRANT); }
		public ITerminalNode GRANT(int i) {
			return GetToken(TSqlParser.GRANT, i);
		}
		public ITerminalNode[] DENY() { return GetTokens(TSqlParser.DENY); }
		public ITerminalNode DENY(int i) {
			return GetToken(TSqlParser.DENY, i);
		}
		public ITerminalNode[] SELECT() { return GetTokens(TSqlParser.SELECT); }
		public ITerminalNode SELECT(int i) {
			return GetToken(TSqlParser.SELECT, i);
		}
		public ITerminalNode[] INSERT() { return GetTokens(TSqlParser.INSERT); }
		public ITerminalNode INSERT(int i) {
			return GetToken(TSqlParser.INSERT, i);
		}
		public ITerminalNode[] DELETE() { return GetTokens(TSqlParser.DELETE); }
		public ITerminalNode DELETE(int i) {
			return GetToken(TSqlParser.DELETE, i);
		}
		public ITerminalNode[] UPDATE() { return GetTokens(TSqlParser.UPDATE); }
		public ITerminalNode UPDATE(int i) {
			return GetToken(TSqlParser.UPDATE, i);
		}
		public ITerminalNode[] DOUBLE_COLON() { return GetTokens(TSqlParser.DOUBLE_COLON); }
		public ITerminalNode DOUBLE_COLON(int i) {
			return GetToken(TSqlParser.DOUBLE_COLON, i);
		}
		public Create_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_schema(this);
		}
	}

	[RuleVersion(0)]
	public Create_schemaContext create_schema() {
		Create_schemaContext _localctx = new Create_schemaContext(_ctx, State);
		EnterRule(_localctx, 388, RULE_create_schema);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4918; Match(CREATE);
			State = 4919; Match(SCHEMA);
			State = 4927;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,511,_ctx) ) {
			case 1:
				{
				State = 4920; _localctx.schema_name = id_();
				}
				break;

			case 2:
				{
				State = 4921; Match(AUTHORIZATION);
				State = 4922; _localctx.owner_name = id_();
				}
				break;

			case 3:
				{
				State = 4923; _localctx.schema_name = id_();
				State = 4924; Match(AUTHORIZATION);
				State = 4925; _localctx.owner_name = id_();
				}
				break;
			}
			State = 4955;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,515,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 4953;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,514,_ctx) ) {
					case 1:
						{
						State = 4929; create_table();
						}
						break;

					case 2:
						{
						State = 4930; create_view();
						}
						break;

					case 3:
						{
						State = 4931;
						_la = _input.La(1);
						if ( !(_la==DENY || _la==GRANT) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 4932;
						_la = _input.La(1);
						if ( !(_la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 4933; Match(ON);
						State = 4936;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,512,_ctx) ) {
						case 1:
							{
							State = 4934; Match(SCHEMA);
							State = 4935; Match(DOUBLE_COLON);
							}
							break;
						}
						State = 4938; _localctx.object_name = id_();
						State = 4939; Match(TO);
						State = 4940; _localctx.owner_name = id_();
						}
						break;

					case 4:
						{
						State = 4942; Match(REVOKE);
						State = 4943;
						_la = _input.La(1);
						if ( !(_la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 4944; Match(ON);
						State = 4947;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,513,_ctx) ) {
						case 1:
							{
							State = 4945; Match(SCHEMA);
							State = 4946; Match(DOUBLE_COLON);
							}
							break;
						}
						State = 4949; _localctx.object_name = id_();
						State = 4950; Match(FROM);
						State = 4951; _localctx.owner_name = id_();
						}
						break;
					}
					} 
				}
				State = 4957;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,515,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_schema_azure_sql_dw_and_pdwContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_schema_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_schema_azure_sql_dw_and_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_schema_azure_sql_dw_and_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_schema_azure_sql_dw_and_pdw(this);
		}
	}

	[RuleVersion(0)]
	public Create_schema_azure_sql_dw_and_pdwContext create_schema_azure_sql_dw_and_pdw() {
		Create_schema_azure_sql_dw_and_pdwContext _localctx = new Create_schema_azure_sql_dw_and_pdwContext(_ctx, State);
		EnterRule(_localctx, 390, RULE_create_schema_azure_sql_dw_and_pdw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4958; Match(CREATE);
			State = 4959; Match(SCHEMA);
			State = 4960; _localctx.schema_name = id_();
			State = 4963;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,516,_ctx) ) {
			case 1:
				{
				State = 4961; Match(AUTHORIZATION);
				State = 4962; _localctx.owner_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_azure_sql_dw_and_pdwContext : ParserRuleContext {
		public Id_Context schema_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode TRANSFER() { return GetToken(TSqlParser.TRANSFER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode DOUBLE_COLON() { return GetToken(TSqlParser.DOUBLE_COLON, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public Alter_schema_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_azure_sql_dw_and_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_azure_sql_dw_and_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_azure_sql_dw_and_pdw(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_azure_sql_dw_and_pdwContext alter_schema_azure_sql_dw_and_pdw() {
		Alter_schema_azure_sql_dw_and_pdwContext _localctx = new Alter_schema_azure_sql_dw_and_pdwContext(_ctx, State);
		EnterRule(_localctx, 392, RULE_alter_schema_azure_sql_dw_and_pdw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4965; Match(ALTER);
			State = 4966; Match(SCHEMA);
			State = 4967; _localctx.schema_name = id_();
			State = 4968; Match(TRANSFER);
			State = 4971;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,517,_ctx) ) {
			case 1:
				{
				State = 4969; Match(OBJECT);
				State = 4970; Match(DOUBLE_COLON);
				}
				break;
			}
			State = 4973; id_();
			State = 4976;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,518,_ctx) ) {
			case 1:
				{
				State = 4974; Match(DOT);
				State = 4975; Match(ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_search_property_listContext : ParserRuleContext {
		public Id_Context new_list_name;
		public Id_Context database_name;
		public Id_Context source_list_name;
		public Id_Context owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Create_search_property_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_search_property_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_search_property_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_search_property_list(this);
		}
	}

	[RuleVersion(0)]
	public Create_search_property_listContext create_search_property_list() {
		Create_search_property_listContext _localctx = new Create_search_property_listContext(_ctx, State);
		EnterRule(_localctx, 394, RULE_create_search_property_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4978; Match(CREATE);
			State = 4979; Match(SEARCH);
			State = 4980; Match(PROPERTY);
			State = 4981; Match(LIST);
			State = 4982; _localctx.new_list_name = id_();
			State = 4990;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,520,_ctx) ) {
			case 1:
				{
				State = 4983; Match(FROM);
				State = 4987;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,519,_ctx) ) {
				case 1:
					{
					State = 4984; _localctx.database_name = id_();
					State = 4985; Match(DOT);
					}
					break;
				}
				State = 4989; _localctx.source_list_name = id_();
				}
				break;
			}
			State = 4994;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,521,_ctx) ) {
			case 1:
				{
				State = 4992; Match(AUTHORIZATION);
				State = 4993; _localctx.owner_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_security_policyContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context security_policy_name;
		public Id_Context tvf_schema_name;
		public Id_Context security_predicate_function_name;
		public Id_Context column_name_or_arguments;
		public Id_Context table_schema_name;
		public Id_Context name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SECURITY() { return GetToken(TSqlParser.SECURITY, 0); }
		public ITerminalNode POLICY() { return GetToken(TSqlParser.POLICY, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		public ITerminalNode[] PREDICATE() { return GetTokens(TSqlParser.PREDICATE); }
		public ITerminalNode PREDICATE(int i) {
			return GetToken(TSqlParser.PREDICATE, i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] AFTER() { return GetTokens(TSqlParser.AFTER); }
		public ITerminalNode AFTER(int i) {
			return GetToken(TSqlParser.AFTER, i);
		}
		public ITerminalNode[] BEFORE() { return GetTokens(TSqlParser.BEFORE); }
		public ITerminalNode BEFORE(int i) {
			return GetToken(TSqlParser.BEFORE, i);
		}
		public ITerminalNode SCHEMABINDING() { return GetToken(TSqlParser.SCHEMABINDING, 0); }
		public ITerminalNode[] FILTER() { return GetTokens(TSqlParser.FILTER); }
		public ITerminalNode FILTER(int i) {
			return GetToken(TSqlParser.FILTER, i);
		}
		public ITerminalNode[] BLOCK() { return GetTokens(TSqlParser.BLOCK); }
		public ITerminalNode BLOCK(int i) {
			return GetToken(TSqlParser.BLOCK, i);
		}
		public ITerminalNode[] INSERT() { return GetTokens(TSqlParser.INSERT); }
		public ITerminalNode INSERT(int i) {
			return GetToken(TSqlParser.INSERT, i);
		}
		public ITerminalNode[] UPDATE() { return GetTokens(TSqlParser.UPDATE); }
		public ITerminalNode UPDATE(int i) {
			return GetToken(TSqlParser.UPDATE, i);
		}
		public ITerminalNode[] DELETE() { return GetTokens(TSqlParser.DELETE); }
		public ITerminalNode DELETE(int i) {
			return GetToken(TSqlParser.DELETE, i);
		}
		public Create_security_policyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_security_policy; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_security_policy(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_security_policy(this);
		}
	}

	[RuleVersion(0)]
	public Create_security_policyContext create_security_policy() {
		Create_security_policyContext _localctx = new Create_security_policyContext(_ctx, State);
		EnterRule(_localctx, 396, RULE_create_security_policy);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4996; Match(CREATE);
			State = 4997; Match(SECURITY);
			State = 4998; Match(POLICY);
			State = 5002;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,522,_ctx) ) {
			case 1:
				{
				State = 4999; _localctx.schema_name = id_();
				State = 5000; Match(DOT);
				}
				break;
			}
			State = 5004; _localctx.security_policy_name = id_();
			State = 5045;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 5006;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,523,_ctx) ) {
					case 1:
						{
						State = 5005; Match(COMMA);
						}
						break;
					}
					State = 5008; Match(ADD);
					State = 5010;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,524,_ctx) ) {
					case 1:
						{
						State = 5009;
						_la = _input.La(1);
						if ( !(_la==BLOCK || _la==FILTER) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					State = 5012; Match(PREDICATE);
					State = 5013; _localctx.tvf_schema_name = id_();
					State = 5014; Match(DOT);
					State = 5015; _localctx.security_predicate_function_name = id_();
					State = 5016; Match(LR_BRACKET);
					State = 5021;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 5018;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,525,_ctx) ) {
							case 1:
								{
								State = 5017; Match(COMMA);
								}
								break;
							}
							State = 5020; _localctx.column_name_or_arguments = id_();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 5023;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,526,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					State = 5025; Match(RR_BRACKET);
					State = 5026; Match(ON);
					State = 5027; _localctx.table_schema_name = id_();
					State = 5028; Match(DOT);
					State = 5029; _localctx.name = id_();
					State = 5042;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,530,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 5040;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,529,_ctx) ) {
							case 1:
								{
								State = 5031;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,527,_ctx) ) {
								case 1:
									{
									State = 5030; Match(COMMA);
									}
									break;
								}
								State = 5033; Match(AFTER);
								State = 5034;
								_la = _input.La(1);
								if ( !(_la==INSERT || _la==UPDATE) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;

							case 2:
								{
								State = 5036;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,528,_ctx) ) {
								case 1:
									{
									State = 5035; Match(COMMA);
									}
									break;
								}
								State = 5038; Match(BEFORE);
								State = 5039;
								_la = _input.La(1);
								if ( !(_la==DELETE || _la==UPDATE) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;
							}
							} 
						}
						State = 5044;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,530,_ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5047;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,531,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 5059;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,533,_ctx) ) {
			case 1:
				{
				State = 5049; Match(WITH);
				State = 5050; Match(LR_BRACKET);
				State = 5051; Match(STATE);
				State = 5052; Match(EQUAL);
				State = 5053;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 5056;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,532,_ctx) ) {
				case 1:
					{
					State = 5054; Match(SCHEMABINDING);
					State = 5055;
					_la = _input.La(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 5058; Match(RR_BRACKET);
				}
				break;
			}
			State = 5064;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,534,_ctx) ) {
			case 1:
				{
				State = 5061; Match(NOT);
				State = 5062; Match(FOR);
				State = 5063; Match(REPLICATION);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_sequenceContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context sequence_name;
		public IToken sequnce_increment;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode RESTART() { return GetToken(TSqlParser.RESTART, 0); }
		public ITerminalNode INCREMENT() { return GetToken(TSqlParser.INCREMENT, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode MINVALUE() { return GetToken(TSqlParser.MINVALUE, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] NO() { return GetTokens(TSqlParser.NO); }
		public ITerminalNode NO(int i) {
			return GetToken(TSqlParser.NO, i);
		}
		public ITerminalNode MAXVALUE() { return GetToken(TSqlParser.MAXVALUE, 0); }
		public ITerminalNode CYCLE() { return GetToken(TSqlParser.CYCLE, 0); }
		public ITerminalNode CACHE() { return GetToken(TSqlParser.CACHE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_sequence; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_sequence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_sequence(this);
		}
	}

	[RuleVersion(0)]
	public Alter_sequenceContext alter_sequence() {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(_ctx, State);
		EnterRule(_localctx, 398, RULE_alter_sequence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5066; Match(ALTER);
			State = 5067; Match(SEQUENCE);
			State = 5071;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,535,_ctx) ) {
			case 1:
				{
				State = 5068; _localctx.schema_name = id_();
				State = 5069; Match(DOT);
				}
				break;
			}
			State = 5073; _localctx.sequence_name = id_();
			State = 5079;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,537,_ctx) ) {
			case 1:
				{
				State = 5074; Match(RESTART);
				State = 5077;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,536,_ctx) ) {
				case 1:
					{
					State = 5075; Match(WITH);
					State = 5076; Match(DECIMAL);
					}
					break;
				}
				}
				break;
			}
			State = 5084;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,538,_ctx) ) {
			case 1:
				{
				State = 5081; Match(INCREMENT);
				State = 5082; Match(BY);
				State = 5083; _localctx.sequnce_increment = Match(DECIMAL);
				}
				break;
			}
			State = 5090;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,539,_ctx) ) {
			case 1:
				{
				State = 5086; Match(MINVALUE);
				State = 5087; Match(DECIMAL);
				}
				break;

			case 2:
				{
				State = 5088; Match(NO);
				State = 5089; Match(MINVALUE);
				}
				break;
			}
			State = 5096;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,540,_ctx) ) {
			case 1:
				{
				State = 5092; Match(MAXVALUE);
				State = 5093; Match(DECIMAL);
				}
				break;

			case 2:
				{
				State = 5094; Match(NO);
				State = 5095; Match(MAXVALUE);
				}
				break;
			}
			State = 5101;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,541,_ctx) ) {
			case 1:
				{
				State = 5098; Match(CYCLE);
				}
				break;

			case 2:
				{
				State = 5099; Match(NO);
				State = 5100; Match(CYCLE);
				}
				break;
			}
			State = 5107;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,542,_ctx) ) {
			case 1:
				{
				State = 5103; Match(CACHE);
				State = 5104; Match(DECIMAL);
				}
				break;

			case 2:
				{
				State = 5105; Match(NO);
				State = 5106; Match(CACHE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_sequenceContext : ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context sequence_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode START() { return GetToken(TSqlParser.START, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode INCREMENT() { return GetToken(TSqlParser.INCREMENT, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode MINVALUE() { return GetToken(TSqlParser.MINVALUE, 0); }
		public ITerminalNode[] NO() { return GetTokens(TSqlParser.NO); }
		public ITerminalNode NO(int i) {
			return GetToken(TSqlParser.NO, i);
		}
		public ITerminalNode MAXVALUE() { return GetToken(TSqlParser.MAXVALUE, 0); }
		public ITerminalNode CYCLE() { return GetToken(TSqlParser.CYCLE, 0); }
		public ITerminalNode CACHE() { return GetToken(TSqlParser.CACHE, 0); }
		public ITerminalNode[] MINUS() { return GetTokens(TSqlParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(TSqlParser.MINUS, i);
		}
		public Create_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_sequence; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_sequence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_sequence(this);
		}
	}

	[RuleVersion(0)]
	public Create_sequenceContext create_sequence() {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, State);
		EnterRule(_localctx, 400, RULE_create_sequence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5109; Match(CREATE);
			State = 5110; Match(SEQUENCE);
			State = 5114;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,543,_ctx) ) {
			case 1:
				{
				State = 5111; _localctx.schema_name = id_();
				State = 5112; Match(DOT);
				}
				break;
			}
			State = 5116; _localctx.sequence_name = id_();
			State = 5119;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,544,_ctx) ) {
			case 1:
				{
				State = 5117; Match(AS);
				State = 5118; data_type();
				}
				break;
			}
			State = 5124;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,545,_ctx) ) {
			case 1:
				{
				State = 5121; Match(START);
				State = 5122; Match(WITH);
				State = 5123; Match(DECIMAL);
				}
				break;
			}
			State = 5132;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,547,_ctx) ) {
			case 1:
				{
				State = 5126; Match(INCREMENT);
				State = 5127; Match(BY);
				State = 5129;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,546,_ctx) ) {
				case 1:
					{
					State = 5128; Match(MINUS);
					}
					break;
				}
				State = 5131; Match(DECIMAL);
				}
				break;
			}
			State = 5143;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,550,_ctx) ) {
			case 1:
				{
				State = 5134; Match(MINVALUE);
				State = 5139;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,549,_ctx) ) {
				case 1:
					{
					State = 5136;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,548,_ctx) ) {
					case 1:
						{
						State = 5135; Match(MINUS);
						}
						break;
					}
					State = 5138; Match(DECIMAL);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 5141; Match(NO);
				State = 5142; Match(MINVALUE);
				}
				break;
			}
			State = 5154;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,553,_ctx) ) {
			case 1:
				{
				State = 5145; Match(MAXVALUE);
				State = 5150;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,552,_ctx) ) {
				case 1:
					{
					State = 5147;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,551,_ctx) ) {
					case 1:
						{
						State = 5146; Match(MINUS);
						}
						break;
					}
					State = 5149; Match(DECIMAL);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 5152; Match(NO);
				State = 5153; Match(MAXVALUE);
				}
				break;
			}
			State = 5159;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,554,_ctx) ) {
			case 1:
				{
				State = 5156; Match(CYCLE);
				}
				break;

			case 2:
				{
				State = 5157; Match(NO);
				State = 5158; Match(CYCLE);
				}
				break;
			}
			State = 5167;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,556,_ctx) ) {
			case 1:
				{
				State = 5161; Match(CACHE);
				State = 5163;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,555,_ctx) ) {
				case 1:
					{
					State = 5162; Match(DECIMAL);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 5165; Match(NO);
				State = 5166; Match(CACHE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_auditContext : ParserRuleContext {
		public Id_Context audit_name;
		public IToken filepath;
		public IToken max_rollover_files;
		public IToken max_files;
		public IToken queue_delay;
		public Id_Context event_field_name;
		public Id_Context new_audit_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode APPLICATION_LOG() { return GetToken(TSqlParser.APPLICATION_LOG, 0); }
		public ITerminalNode SECURITY_LOG() { return GetToken(TSqlParser.SECURITY_LOG, 0); }
		public ITerminalNode[] QUEUE_DELAY() { return GetTokens(TSqlParser.QUEUE_DELAY); }
		public ITerminalNode QUEUE_DELAY(int i) {
			return GetToken(TSqlParser.QUEUE_DELAY, i);
		}
		public ITerminalNode[] ON_FAILURE() { return GetTokens(TSqlParser.ON_FAILURE); }
		public ITerminalNode ON_FAILURE(int i) {
			return GetToken(TSqlParser.ON_FAILURE, i);
		}
		public ITerminalNode[] STATE() { return GetTokens(TSqlParser.STATE); }
		public ITerminalNode STATE(int i) {
			return GetToken(TSqlParser.STATE, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public ITerminalNode[] CONTINUE() { return GetTokens(TSqlParser.CONTINUE); }
		public ITerminalNode CONTINUE(int i) {
			return GetToken(TSqlParser.CONTINUE, i);
		}
		public ITerminalNode[] SHUTDOWN() { return GetTokens(TSqlParser.SHUTDOWN); }
		public ITerminalNode SHUTDOWN(int i) {
			return GetToken(TSqlParser.SHUTDOWN, i);
		}
		public ITerminalNode[] FAIL_OPERATION() { return GetTokens(TSqlParser.FAIL_OPERATION); }
		public ITerminalNode FAIL_OPERATION(int i) {
			return GetToken(TSqlParser.FAIL_OPERATION, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode GREATER() { return GetToken(TSqlParser.GREATER, 0); }
		public ITerminalNode LESS() { return GetToken(TSqlParser.LESS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode EXCLAMATION() { return GetToken(TSqlParser.EXCLAMATION, 0); }
		public ITerminalNode[] FILEPATH() { return GetTokens(TSqlParser.FILEPATH); }
		public ITerminalNode FILEPATH(int i) {
			return GetToken(TSqlParser.FILEPATH, i);
		}
		public ITerminalNode[] MAXSIZE() { return GetTokens(TSqlParser.MAXSIZE); }
		public ITerminalNode MAXSIZE(int i) {
			return GetToken(TSqlParser.MAXSIZE, i);
		}
		public ITerminalNode[] MAX_ROLLOVER_FILES() { return GetTokens(TSqlParser.MAX_ROLLOVER_FILES); }
		public ITerminalNode MAX_ROLLOVER_FILES(int i) {
			return GetToken(TSqlParser.MAX_ROLLOVER_FILES, i);
		}
		public ITerminalNode[] MAX_FILES() { return GetTokens(TSqlParser.MAX_FILES); }
		public ITerminalNode MAX_FILES(int i) {
			return GetToken(TSqlParser.MAX_FILES, i);
		}
		public ITerminalNode[] RESERVE_DISK_SPACE() { return GetTokens(TSqlParser.RESERVE_DISK_SPACE); }
		public ITerminalNode RESERVE_DISK_SPACE(int i) {
			return GetToken(TSqlParser.RESERVE_DISK_SPACE, i);
		}
		public ITerminalNode[] UNLIMITED() { return GetTokens(TSqlParser.UNLIMITED); }
		public ITerminalNode UNLIMITED(int i) {
			return GetToken(TSqlParser.UNLIMITED, i);
		}
		public ITerminalNode[] MB() { return GetTokens(TSqlParser.MB); }
		public ITerminalNode MB(int i) {
			return GetToken(TSqlParser.MB, i);
		}
		public ITerminalNode[] GB() { return GetTokens(TSqlParser.GB); }
		public ITerminalNode GB(int i) {
			return GetToken(TSqlParser.GB, i);
		}
		public ITerminalNode[] TB() { return GetTokens(TSqlParser.TB); }
		public ITerminalNode TB(int i) {
			return GetToken(TSqlParser.TB, i);
		}
		public Alter_server_auditContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_audit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_audit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_audit(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_auditContext alter_server_audit() {
		Alter_server_auditContext _localctx = new Alter_server_auditContext(_ctx, State);
		EnterRule(_localctx, 402, RULE_alter_server_audit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5169; Match(ALTER);
			State = 5170; Match(SERVER);
			State = 5171; Match(AUDIT);
			State = 5172; _localctx.audit_name = id_();
			State = 5304;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,581,_ctx) ) {
			case 1:
				{
				State = 5220;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,566,_ctx) ) {
				case 1:
					{
					State = 5173; Match(TO);
					State = 5218;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,565,_ctx) ) {
					case 1:
						{
						State = 5174; Match(FILE);
						{
						State = 5175; Match(LR_BRACKET);
						State = 5212;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,564,_ctx);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
							if ( _alt==1 ) {
								{
								State = 5210;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,563,_ctx) ) {
								case 1:
									{
									State = 5177;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,557,_ctx) ) {
									case 1:
										{
										State = 5176; Match(COMMA);
										}
										break;
									}
									State = 5179; Match(FILEPATH);
									State = 5180; Match(EQUAL);
									State = 5181; _localctx.filepath = Match(STRING);
									}
									break;

								case 2:
									{
									State = 5183;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,558,_ctx) ) {
									case 1:
										{
										State = 5182; Match(COMMA);
										}
										break;
									}
									State = 5185; Match(MAXSIZE);
									State = 5186; Match(EQUAL);
									State = 5190;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,559,_ctx) ) {
									case 1:
										{
										State = 5187; Match(DECIMAL);
										State = 5188;
										_la = _input.La(1);
										if ( !(_la==GB || _la==MB || _la==TB) ) {
										_errHandler.RecoverInline(this);
										} else {
											if (_input.La(1) == TokenConstants.Eof) {
												matchedEOF = true;
											}

											_errHandler.ReportMatch(this);
											Consume();
										}
										}
										break;

									case 2:
										{
										State = 5189; Match(UNLIMITED);
										}
										break;
									}
									}
									break;

								case 3:
									{
									State = 5193;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,560,_ctx) ) {
									case 1:
										{
										State = 5192; Match(COMMA);
										}
										break;
									}
									State = 5195; Match(MAX_ROLLOVER_FILES);
									State = 5196; Match(EQUAL);
									State = 5197;
									_localctx.max_rollover_files = _input.Lt(1);
									_la = _input.La(1);
									if ( !(_la==UNLIMITED || _la==DECIMAL) ) {
										_localctx.max_rollover_files = _errHandler.RecoverInline(this);
									} else {
										if (_input.La(1) == TokenConstants.Eof) {
											matchedEOF = true;
										}

										_errHandler.ReportMatch(this);
										Consume();
									}
									}
									break;

								case 4:
									{
									State = 5199;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,561,_ctx) ) {
									case 1:
										{
										State = 5198; Match(COMMA);
										}
										break;
									}
									State = 5201; Match(MAX_FILES);
									State = 5202; Match(EQUAL);
									State = 5203; _localctx.max_files = Match(DECIMAL);
									}
									break;

								case 5:
									{
									State = 5205;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,562,_ctx) ) {
									case 1:
										{
										State = 5204; Match(COMMA);
										}
										break;
									}
									State = 5207; Match(RESERVE_DISK_SPACE);
									State = 5208; Match(EQUAL);
									State = 5209;
									_la = _input.La(1);
									if ( !(_la==OFF || _la==ON) ) {
									_errHandler.RecoverInline(this);
									} else {
										if (_input.La(1) == TokenConstants.Eof) {
											matchedEOF = true;
										}

										_errHandler.ReportMatch(this);
										Consume();
									}
									}
									break;
								}
								} 
							}
							State = 5214;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,564,_ctx);
						}
						State = 5215; Match(RR_BRACKET);
						}
						}
						break;

					case 2:
						{
						State = 5216; Match(APPLICATION_LOG);
						}
						break;

					case 3:
						{
						State = 5217; Match(SECURITY_LOG);
						}
						break;
					}
					}
					break;
				}
				State = 5248;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,572,_ctx) ) {
				case 1:
					{
					State = 5222; Match(WITH);
					State = 5223; Match(LR_BRACKET);
					State = 5244;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,571,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 5242;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,570,_ctx) ) {
							case 1:
								{
								State = 5225;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,567,_ctx) ) {
								case 1:
									{
									State = 5224; Match(COMMA);
									}
									break;
								}
								State = 5227; Match(QUEUE_DELAY);
								State = 5228; Match(EQUAL);
								State = 5229; _localctx.queue_delay = Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 5231;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,568,_ctx) ) {
								case 1:
									{
									State = 5230; Match(COMMA);
									}
									break;
								}
								State = 5233; Match(ON_FAILURE);
								State = 5234; Match(EQUAL);
								State = 5235;
								_la = _input.La(1);
								if ( !(_la==CONTINUE || _la==FAIL_OPERATION || _la==SHUTDOWN) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;

							case 3:
								{
								State = 5237;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,569,_ctx) ) {
								case 1:
									{
									State = 5236; Match(COMMA);
									}
									break;
								}
								State = 5239; Match(STATE);
								State = 5240; Match(EQUAL);
								State = 5241;
								_la = _input.La(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;
							}
							} 
						}
						State = 5246;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,571,_ctx);
					}
					State = 5247; Match(RR_BRACKET);
					}
					break;
				}
				State = 5296;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,580,_ctx) ) {
				case 1:
					{
					State = 5250; Match(WHERE);
					State = 5294;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,579,_ctx) ) {
					case 1:
						{
						State = 5252;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,573,_ctx) ) {
						case 1:
							{
							State = 5251; Match(COMMA);
							}
							break;
						}
						{
						State = 5255;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,574,_ctx) ) {
						case 1:
							{
							State = 5254; Match(NOT);
							}
							break;
						}
						}
						State = 5257; _localctx.event_field_name = id_();
						State = 5269;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,575,_ctx) ) {
						case 1:
							{
							State = 5258; Match(EQUAL);
							}
							break;

						case 2:
							{
							{
							State = 5259; Match(LESS);
							State = 5260; Match(GREATER);
							}
							}
							break;

						case 3:
							{
							{
							State = 5261; Match(EXCLAMATION);
							State = 5262; Match(EQUAL);
							}
							}
							break;

						case 4:
							{
							State = 5263; Match(GREATER);
							}
							break;

						case 5:
							{
							{
							State = 5264; Match(GREATER);
							State = 5265; Match(EQUAL);
							}
							}
							break;

						case 6:
							{
							State = 5266; Match(LESS);
							}
							break;

						case 7:
							{
							State = 5267; Match(LESS);
							State = 5268; Match(EQUAL);
							}
							break;
						}
						State = 5271;
						_la = _input.La(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 2:
						{
						State = 5274;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,576,_ctx) ) {
						case 1:
							{
							State = 5273; Match(COMMA);
							}
							break;
						}
						State = 5276;
						_la = _input.La(1);
						if ( !(_la==AND || _la==OR) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 5278;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,577,_ctx) ) {
						case 1:
							{
							State = 5277; Match(NOT);
							}
							break;
						}
						State = 5291;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,578,_ctx) ) {
						case 1:
							{
							State = 5280; Match(EQUAL);
							}
							break;

						case 2:
							{
							{
							State = 5281; Match(LESS);
							State = 5282; Match(GREATER);
							}
							}
							break;

						case 3:
							{
							{
							State = 5283; Match(EXCLAMATION);
							State = 5284; Match(EQUAL);
							}
							}
							break;

						case 4:
							{
							State = 5285; Match(GREATER);
							}
							break;

						case 5:
							{
							{
							State = 5286; Match(GREATER);
							State = 5287; Match(EQUAL);
							}
							}
							break;

						case 6:
							{
							State = 5288; Match(LESS);
							}
							break;

						case 7:
							{
							State = 5289; Match(LESS);
							State = 5290; Match(EQUAL);
							}
							break;
						}
						State = 5293;
						_la = _input.La(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 5298; Match(REMOVE);
				State = 5299; Match(WHERE);
				}
				break;

			case 3:
				{
				State = 5300; Match(MODIFY);
				State = 5301; Match(NAME);
				State = 5302; Match(EQUAL);
				State = 5303; _localctx.new_audit_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_server_auditContext : ParserRuleContext {
		public Id_Context audit_name;
		public IToken filepath;
		public IToken max_rollover_files;
		public IToken max_files;
		public IToken queue_delay;
		public Id_Context audit_guid;
		public Id_Context event_field_name;
		public Id_Context new_audit_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode APPLICATION_LOG() { return GetToken(TSqlParser.APPLICATION_LOG, 0); }
		public ITerminalNode SECURITY_LOG() { return GetToken(TSqlParser.SECURITY_LOG, 0); }
		public ITerminalNode[] QUEUE_DELAY() { return GetTokens(TSqlParser.QUEUE_DELAY); }
		public ITerminalNode QUEUE_DELAY(int i) {
			return GetToken(TSqlParser.QUEUE_DELAY, i);
		}
		public ITerminalNode[] ON_FAILURE() { return GetTokens(TSqlParser.ON_FAILURE); }
		public ITerminalNode ON_FAILURE(int i) {
			return GetToken(TSqlParser.ON_FAILURE, i);
		}
		public ITerminalNode[] STATE() { return GetTokens(TSqlParser.STATE); }
		public ITerminalNode STATE(int i) {
			return GetToken(TSqlParser.STATE, i);
		}
		public ITerminalNode[] AUDIT_GUID() { return GetTokens(TSqlParser.AUDIT_GUID); }
		public ITerminalNode AUDIT_GUID(int i) {
			return GetToken(TSqlParser.AUDIT_GUID, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public ITerminalNode[] CONTINUE() { return GetTokens(TSqlParser.CONTINUE); }
		public ITerminalNode CONTINUE(int i) {
			return GetToken(TSqlParser.CONTINUE, i);
		}
		public ITerminalNode[] SHUTDOWN() { return GetTokens(TSqlParser.SHUTDOWN); }
		public ITerminalNode SHUTDOWN(int i) {
			return GetToken(TSqlParser.SHUTDOWN, i);
		}
		public ITerminalNode[] FAIL_OPERATION() { return GetTokens(TSqlParser.FAIL_OPERATION); }
		public ITerminalNode FAIL_OPERATION(int i) {
			return GetToken(TSqlParser.FAIL_OPERATION, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode GREATER() { return GetToken(TSqlParser.GREATER, 0); }
		public ITerminalNode LESS() { return GetToken(TSqlParser.LESS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode EXCLAMATION() { return GetToken(TSqlParser.EXCLAMATION, 0); }
		public ITerminalNode[] FILEPATH() { return GetTokens(TSqlParser.FILEPATH); }
		public ITerminalNode FILEPATH(int i) {
			return GetToken(TSqlParser.FILEPATH, i);
		}
		public ITerminalNode[] MAXSIZE() { return GetTokens(TSqlParser.MAXSIZE); }
		public ITerminalNode MAXSIZE(int i) {
			return GetToken(TSqlParser.MAXSIZE, i);
		}
		public ITerminalNode[] MAX_ROLLOVER_FILES() { return GetTokens(TSqlParser.MAX_ROLLOVER_FILES); }
		public ITerminalNode MAX_ROLLOVER_FILES(int i) {
			return GetToken(TSqlParser.MAX_ROLLOVER_FILES, i);
		}
		public ITerminalNode[] MAX_FILES() { return GetTokens(TSqlParser.MAX_FILES); }
		public ITerminalNode MAX_FILES(int i) {
			return GetToken(TSqlParser.MAX_FILES, i);
		}
		public ITerminalNode[] RESERVE_DISK_SPACE() { return GetTokens(TSqlParser.RESERVE_DISK_SPACE); }
		public ITerminalNode RESERVE_DISK_SPACE(int i) {
			return GetToken(TSqlParser.RESERVE_DISK_SPACE, i);
		}
		public ITerminalNode[] UNLIMITED() { return GetTokens(TSqlParser.UNLIMITED); }
		public ITerminalNode UNLIMITED(int i) {
			return GetToken(TSqlParser.UNLIMITED, i);
		}
		public ITerminalNode[] MB() { return GetTokens(TSqlParser.MB); }
		public ITerminalNode MB(int i) {
			return GetToken(TSqlParser.MB, i);
		}
		public ITerminalNode[] GB() { return GetTokens(TSqlParser.GB); }
		public ITerminalNode GB(int i) {
			return GetToken(TSqlParser.GB, i);
		}
		public ITerminalNode[] TB() { return GetTokens(TSqlParser.TB); }
		public ITerminalNode TB(int i) {
			return GetToken(TSqlParser.TB, i);
		}
		public Create_server_auditContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_server_audit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_server_audit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_server_audit(this);
		}
	}

	[RuleVersion(0)]
	public Create_server_auditContext create_server_audit() {
		Create_server_auditContext _localctx = new Create_server_auditContext(_ctx, State);
		EnterRule(_localctx, 404, RULE_create_server_audit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5306; Match(CREATE);
			State = 5307; Match(SERVER);
			State = 5308; Match(AUDIT);
			State = 5309; _localctx.audit_name = id_();
			State = 5447;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,607,_ctx) ) {
			case 1:
				{
				State = 5357;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,591,_ctx) ) {
				case 1:
					{
					State = 5310; Match(TO);
					State = 5355;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,590,_ctx) ) {
					case 1:
						{
						State = 5311; Match(FILE);
						{
						State = 5312; Match(LR_BRACKET);
						State = 5349;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,589,_ctx);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
							if ( _alt==1 ) {
								{
								State = 5347;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,588,_ctx) ) {
								case 1:
									{
									State = 5314;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,582,_ctx) ) {
									case 1:
										{
										State = 5313; Match(COMMA);
										}
										break;
									}
									State = 5316; Match(FILEPATH);
									State = 5317; Match(EQUAL);
									State = 5318; _localctx.filepath = Match(STRING);
									}
									break;

								case 2:
									{
									State = 5320;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,583,_ctx) ) {
									case 1:
										{
										State = 5319; Match(COMMA);
										}
										break;
									}
									State = 5322; Match(MAXSIZE);
									State = 5323; Match(EQUAL);
									State = 5327;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,584,_ctx) ) {
									case 1:
										{
										State = 5324; Match(DECIMAL);
										State = 5325;
										_la = _input.La(1);
										if ( !(_la==GB || _la==MB || _la==TB) ) {
										_errHandler.RecoverInline(this);
										} else {
											if (_input.La(1) == TokenConstants.Eof) {
												matchedEOF = true;
											}

											_errHandler.ReportMatch(this);
											Consume();
										}
										}
										break;

									case 2:
										{
										State = 5326; Match(UNLIMITED);
										}
										break;
									}
									}
									break;

								case 3:
									{
									State = 5330;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,585,_ctx) ) {
									case 1:
										{
										State = 5329; Match(COMMA);
										}
										break;
									}
									State = 5332; Match(MAX_ROLLOVER_FILES);
									State = 5333; Match(EQUAL);
									State = 5334;
									_localctx.max_rollover_files = _input.Lt(1);
									_la = _input.La(1);
									if ( !(_la==UNLIMITED || _la==DECIMAL) ) {
										_localctx.max_rollover_files = _errHandler.RecoverInline(this);
									} else {
										if (_input.La(1) == TokenConstants.Eof) {
											matchedEOF = true;
										}

										_errHandler.ReportMatch(this);
										Consume();
									}
									}
									break;

								case 4:
									{
									State = 5336;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,586,_ctx) ) {
									case 1:
										{
										State = 5335; Match(COMMA);
										}
										break;
									}
									State = 5338; Match(MAX_FILES);
									State = 5339; Match(EQUAL);
									State = 5340; _localctx.max_files = Match(DECIMAL);
									}
									break;

								case 5:
									{
									State = 5342;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,587,_ctx) ) {
									case 1:
										{
										State = 5341; Match(COMMA);
										}
										break;
									}
									State = 5344; Match(RESERVE_DISK_SPACE);
									State = 5345; Match(EQUAL);
									State = 5346;
									_la = _input.La(1);
									if ( !(_la==OFF || _la==ON) ) {
									_errHandler.RecoverInline(this);
									} else {
										if (_input.La(1) == TokenConstants.Eof) {
											matchedEOF = true;
										}

										_errHandler.ReportMatch(this);
										Consume();
									}
									}
									break;
								}
								} 
							}
							State = 5351;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,589,_ctx);
						}
						State = 5352; Match(RR_BRACKET);
						}
						}
						break;

					case 2:
						{
						State = 5353; Match(APPLICATION_LOG);
						}
						break;

					case 3:
						{
						State = 5354; Match(SECURITY_LOG);
						}
						break;
					}
					}
					break;
				}
				State = 5391;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,598,_ctx) ) {
				case 1:
					{
					State = 5359; Match(WITH);
					State = 5360; Match(LR_BRACKET);
					State = 5387;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,597,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 5385;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,596,_ctx) ) {
							case 1:
								{
								State = 5362;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,592,_ctx) ) {
								case 1:
									{
									State = 5361; Match(COMMA);
									}
									break;
								}
								State = 5364; Match(QUEUE_DELAY);
								State = 5365; Match(EQUAL);
								State = 5366; _localctx.queue_delay = Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 5368;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,593,_ctx) ) {
								case 1:
									{
									State = 5367; Match(COMMA);
									}
									break;
								}
								State = 5370; Match(ON_FAILURE);
								State = 5371; Match(EQUAL);
								State = 5372;
								_la = _input.La(1);
								if ( !(_la==CONTINUE || _la==FAIL_OPERATION || _la==SHUTDOWN) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;

							case 3:
								{
								State = 5374;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,594,_ctx) ) {
								case 1:
									{
									State = 5373; Match(COMMA);
									}
									break;
								}
								State = 5376; Match(STATE);
								State = 5377; Match(EQUAL);
								State = 5378;
								_la = _input.La(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;

							case 4:
								{
								State = 5380;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,595,_ctx) ) {
								case 1:
									{
									State = 5379; Match(COMMA);
									}
									break;
								}
								State = 5382; Match(AUDIT_GUID);
								State = 5383; Match(EQUAL);
								State = 5384; _localctx.audit_guid = id_();
								}
								break;
							}
							} 
						}
						State = 5389;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,597,_ctx);
					}
					State = 5390; Match(RR_BRACKET);
					}
					break;
				}
				State = 5439;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,606,_ctx) ) {
				case 1:
					{
					State = 5393; Match(WHERE);
					State = 5437;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,605,_ctx) ) {
					case 1:
						{
						State = 5395;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,599,_ctx) ) {
						case 1:
							{
							State = 5394; Match(COMMA);
							}
							break;
						}
						{
						State = 5398;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,600,_ctx) ) {
						case 1:
							{
							State = 5397; Match(NOT);
							}
							break;
						}
						}
						State = 5400; _localctx.event_field_name = id_();
						State = 5412;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,601,_ctx) ) {
						case 1:
							{
							State = 5401; Match(EQUAL);
							}
							break;

						case 2:
							{
							{
							State = 5402; Match(LESS);
							State = 5403; Match(GREATER);
							}
							}
							break;

						case 3:
							{
							{
							State = 5404; Match(EXCLAMATION);
							State = 5405; Match(EQUAL);
							}
							}
							break;

						case 4:
							{
							State = 5406; Match(GREATER);
							}
							break;

						case 5:
							{
							{
							State = 5407; Match(GREATER);
							State = 5408; Match(EQUAL);
							}
							}
							break;

						case 6:
							{
							State = 5409; Match(LESS);
							}
							break;

						case 7:
							{
							State = 5410; Match(LESS);
							State = 5411; Match(EQUAL);
							}
							break;
						}
						State = 5414;
						_la = _input.La(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 2:
						{
						State = 5417;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,602,_ctx) ) {
						case 1:
							{
							State = 5416; Match(COMMA);
							}
							break;
						}
						State = 5419;
						_la = _input.La(1);
						if ( !(_la==AND || _la==OR) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 5421;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,603,_ctx) ) {
						case 1:
							{
							State = 5420; Match(NOT);
							}
							break;
						}
						State = 5434;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,604,_ctx) ) {
						case 1:
							{
							State = 5423; Match(EQUAL);
							}
							break;

						case 2:
							{
							{
							State = 5424; Match(LESS);
							State = 5425; Match(GREATER);
							}
							}
							break;

						case 3:
							{
							{
							State = 5426; Match(EXCLAMATION);
							State = 5427; Match(EQUAL);
							}
							}
							break;

						case 4:
							{
							State = 5428; Match(GREATER);
							}
							break;

						case 5:
							{
							{
							State = 5429; Match(GREATER);
							State = 5430; Match(EQUAL);
							}
							}
							break;

						case 6:
							{
							State = 5431; Match(LESS);
							}
							break;

						case 7:
							{
							State = 5432; Match(LESS);
							State = 5433; Match(EQUAL);
							}
							break;
						}
						State = 5436;
						_la = _input.La(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 5441; Match(REMOVE);
				State = 5442; Match(WHERE);
				}
				break;

			case 3:
				{
				State = 5443; Match(MODIFY);
				State = 5444; Match(NAME);
				State = 5445; Match(EQUAL);
				State = 5446; _localctx.new_audit_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_audit_specificationContext : ParserRuleContext {
		public Id_Context audit_specification_name;
		public Id_Context audit_name;
		public Id_Context audit_action_group_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] SERVER() { return GetTokens(TSqlParser.SERVER); }
		public ITerminalNode SERVER(int i) {
			return GetToken(TSqlParser.SERVER, i);
		}
		public ITerminalNode[] AUDIT() { return GetTokens(TSqlParser.AUDIT); }
		public ITerminalNode AUDIT(int i) {
			return GetToken(TSqlParser.AUDIT, i);
		}
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		public ITerminalNode[] DROP() { return GetTokens(TSqlParser.DROP); }
		public ITerminalNode DROP(int i) {
			return GetToken(TSqlParser.DROP, i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Alter_server_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_audit_specification(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_audit_specificationContext alter_server_audit_specification() {
		Alter_server_audit_specificationContext _localctx = new Alter_server_audit_specificationContext(_ctx, State);
		EnterRule(_localctx, 406, RULE_alter_server_audit_specification);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5449; Match(ALTER);
			State = 5450; Match(SERVER);
			State = 5451; Match(AUDIT);
			State = 5452; Match(SPECIFICATION);
			State = 5453; _localctx.audit_specification_name = id_();
			State = 5458;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,608,_ctx) ) {
			case 1:
				{
				State = 5454; Match(FOR);
				State = 5455; Match(SERVER);
				State = 5456; Match(AUDIT);
				State = 5457; _localctx.audit_name = id_();
				}
				break;
			}
			State = 5467;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,609,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 5460;
					_la = _input.La(1);
					if ( !(_la==ADD || _la==DROP) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5461; Match(LR_BRACKET);
					State = 5462; _localctx.audit_action_group_name = id_();
					State = 5463; Match(RR_BRACKET);
					}
					} 
				}
				State = 5469;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,609,_ctx);
			}
			State = 5476;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,610,_ctx) ) {
			case 1:
				{
				State = 5470; Match(WITH);
				State = 5471; Match(LR_BRACKET);
				State = 5472; Match(STATE);
				State = 5473; Match(EQUAL);
				State = 5474;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 5475; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_server_audit_specificationContext : ParserRuleContext {
		public Id_Context audit_specification_name;
		public Id_Context audit_name;
		public Id_Context audit_action_group_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode[] SERVER() { return GetTokens(TSqlParser.SERVER); }
		public ITerminalNode SERVER(int i) {
			return GetToken(TSqlParser.SERVER, i);
		}
		public ITerminalNode[] AUDIT() { return GetTokens(TSqlParser.AUDIT); }
		public ITerminalNode AUDIT(int i) {
			return GetToken(TSqlParser.AUDIT, i);
		}
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_server_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_server_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_server_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_server_audit_specification(this);
		}
	}

	[RuleVersion(0)]
	public Create_server_audit_specificationContext create_server_audit_specification() {
		Create_server_audit_specificationContext _localctx = new Create_server_audit_specificationContext(_ctx, State);
		EnterRule(_localctx, 408, RULE_create_server_audit_specification);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5478; Match(CREATE);
			State = 5479; Match(SERVER);
			State = 5480; Match(AUDIT);
			State = 5481; Match(SPECIFICATION);
			State = 5482; _localctx.audit_specification_name = id_();
			State = 5487;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,611,_ctx) ) {
			case 1:
				{
				State = 5483; Match(FOR);
				State = 5484; Match(SERVER);
				State = 5485; Match(AUDIT);
				State = 5486; _localctx.audit_name = id_();
				}
				break;
			}
			State = 5496;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,612,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 5489; Match(ADD);
					State = 5490; Match(LR_BRACKET);
					State = 5491; _localctx.audit_action_group_name = id_();
					State = 5492; Match(RR_BRACKET);
					}
					} 
				}
				State = 5498;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,612,_ctx);
			}
			State = 5505;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,613,_ctx) ) {
			case 1:
				{
				State = 5499; Match(WITH);
				State = 5500; Match(LR_BRACKET);
				State = 5501; Match(STATE);
				State = 5502; Match(EQUAL);
				State = 5503;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 5504; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_configurationContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode CONFIGURATION() { return GetToken(TSqlParser.CONFIGURATION, 0); }
		public ITerminalNode[] SET() { return GetTokens(TSqlParser.SET); }
		public ITerminalNode SET(int i) {
			return GetToken(TSqlParser.SET, i);
		}
		public ITerminalNode PROCESS() { return GetToken(TSqlParser.PROCESS, 0); }
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode DIAGNOSTICS() { return GetToken(TSqlParser.DIAGNOSTICS, 0); }
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode FAILOVER() { return GetToken(TSqlParser.FAILOVER, 0); }
		public ITerminalNode CLUSTER() { return GetToken(TSqlParser.CLUSTER, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode HADR() { return GetToken(TSqlParser.HADR, 0); }
		public ITerminalNode CONTEXT() { return GetToken(TSqlParser.CONTEXT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode BUFFER() { return GetToken(TSqlParser.BUFFER, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public ITerminalNode EXTENSION() { return GetToken(TSqlParser.EXTENSION, 0); }
		public ITerminalNode SOFTNUMA() { return GetToken(TSqlParser.SOFTNUMA, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LOCAL() { return GetToken(TSqlParser.LOCAL, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode CPU() { return GetToken(TSqlParser.CPU, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		public ITerminalNode MAX_SIZE() { return GetToken(TSqlParser.MAX_SIZE, 0); }
		public ITerminalNode MAX_FILES() { return GetToken(TSqlParser.MAX_FILES, 0); }
		public ITerminalNode VERBOSELOGGING() { return GetToken(TSqlParser.VERBOSELOGGING, 0); }
		public ITerminalNode SQLDUMPERFLAGS() { return GetToken(TSqlParser.SQLDUMPERFLAGS, 0); }
		public ITerminalNode SQLDUMPERPATH() { return GetToken(TSqlParser.SQLDUMPERPATH, 0); }
		public ITerminalNode SQLDUMPERTIMEOUT() { return GetToken(TSqlParser.SQLDUMPERTIMEOUT, 0); }
		public ITerminalNode FAILURECONDITIONLEVEL() { return GetToken(TSqlParser.FAILURECONDITIONLEVEL, 0); }
		public ITerminalNode HEALTHCHECKTIMEOUT() { return GetToken(TSqlParser.HEALTHCHECKTIMEOUT, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode FILENAME() { return GetToken(TSqlParser.FILENAME, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode KB() { return GetToken(TSqlParser.KB, 0); }
		public ITerminalNode MB() { return GetToken(TSqlParser.MB, 0); }
		public ITerminalNode GB() { return GetToken(TSqlParser.GB, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Alter_server_configurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_configuration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_configuration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_configuration(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_configurationContext alter_server_configuration() {
		Alter_server_configurationContext _localctx = new Alter_server_configurationContext(_ctx, State);
		EnterRule(_localctx, 410, RULE_alter_server_configuration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5507; Match(ALTER);
			State = 5508; Match(SERVER);
			State = 5509; Match(CONFIGURATION);
			State = 5510; Match(SET);
			{
			State = 5616;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,628,_ctx) ) {
			case 1:
				{
				State = 5511; Match(PROCESS);
				State = 5512; Match(AFFINITY);
				State = 5548;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,623,_ctx) ) {
				case 1:
					{
					State = 5513; Match(CPU);
					State = 5514; Match(EQUAL);
					State = 5530;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,618,_ctx) ) {
					case 1:
						{
						State = 5515; Match(AUTO);
						}
						break;

					case 2:
						{
						State = 5526;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								State = 5526;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,616,_ctx) ) {
								case 1:
									{
									State = 5517;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,614,_ctx) ) {
									case 1:
										{
										State = 5516; Match(COMMA);
										}
										break;
									}
									State = 5519; Match(DECIMAL);
									}
									break;

								case 2:
									{
									State = 5521;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,615,_ctx) ) {
									case 1:
										{
										State = 5520; Match(COMMA);
										}
										break;
									}
									State = 5523; Match(DECIMAL);
									State = 5524; Match(TO);
									State = 5525; Match(DECIMAL);
									}
									break;
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 5528;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,617,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 5532; Match(NUMANODE);
					State = 5533; Match(EQUAL);
					State = 5544;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							State = 5544;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,621,_ctx) ) {
							case 1:
								{
								State = 5535;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,619,_ctx) ) {
								case 1:
									{
									State = 5534; Match(COMMA);
									}
									break;
								}
								State = 5537; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 5539;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,620,_ctx) ) {
								case 1:
									{
									State = 5538; Match(COMMA);
									}
									break;
								}
								State = 5541; Match(DECIMAL);
								State = 5542; Match(TO);
								State = 5543; Match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 5546;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,622,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 5550; Match(DIAGNOSTICS);
				State = 5551; Match(LOG);
				State = 5567;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,625,_ctx) ) {
				case 1:
					{
					State = 5552; Match(ON);
					}
					break;

				case 2:
					{
					State = 5553; Match(OFF);
					}
					break;

				case 3:
					{
					State = 5554; Match(PATH);
					State = 5555; Match(EQUAL);
					State = 5556;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 4:
					{
					State = 5557; Match(MAX_SIZE);
					State = 5558; Match(EQUAL);
					State = 5562;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,624,_ctx) ) {
					case 1:
						{
						State = 5559; Match(DECIMAL);
						State = 5560; Match(MB);
						}
						break;

					case 2:
						{
						State = 5561; Match(DEFAULT);
						}
						break;
					}
					}
					break;

				case 5:
					{
					State = 5564; Match(MAX_FILES);
					State = 5565; Match(EQUAL);
					State = 5566;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==DECIMAL) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 5569; Match(FAILOVER);
				State = 5570; Match(CLUSTER);
				State = 5571; Match(PROPERTY);
				State = 5589;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,626,_ctx) ) {
				case 1:
					{
					State = 5572; Match(VERBOSELOGGING);
					State = 5573; Match(EQUAL);
					State = 5574;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 2:
					{
					State = 5575; Match(SQLDUMPERFLAGS);
					State = 5576; Match(EQUAL);
					State = 5577;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 3:
					{
					State = 5578; Match(SQLDUMPERPATH);
					State = 5579; Match(EQUAL);
					State = 5580;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 4:
					{
					State = 5581; Match(SQLDUMPERTIMEOUT);
					State = 5582;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 5:
					{
					State = 5583; Match(FAILURECONDITIONLEVEL);
					State = 5584; Match(EQUAL);
					State = 5585;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;

				case 6:
					{
					State = 5586; Match(HEALTHCHECKTIMEOUT);
					State = 5587; Match(EQUAL);
					State = 5588;
					_la = _input.La(1);
					if ( !(_la==DEFAULT || _la==DECIMAL) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 4:
				{
				State = 5591; Match(HADR);
				State = 5592; Match(CLUSTER);
				State = 5593; Match(CONTEXT);
				State = 5594; Match(EQUAL);
				State = 5595;
				_la = _input.La(1);
				if ( !(_la==LOCAL || _la==STRING) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 5:
				{
				State = 5596; Match(BUFFER);
				State = 5597; Match(POOL);
				State = 5598; Match(EXTENSION);
				State = 5611;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,627,_ctx) ) {
				case 1:
					{
					State = 5599; Match(ON);
					State = 5600; Match(LR_BRACKET);
					State = 5601; Match(FILENAME);
					State = 5602; Match(EQUAL);
					State = 5603; Match(STRING);
					State = 5604; Match(COMMA);
					State = 5605; Match(SIZE);
					State = 5606; Match(EQUAL);
					State = 5607; Match(DECIMAL);
					State = 5608;
					_la = _input.La(1);
					if ( !(_la==GB || _la==KB || _la==MB) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5609; Match(RR_BRACKET);
					}
					break;

				case 2:
					{
					State = 5610; Match(OFF);
					}
					break;
				}
				}
				break;

			case 6:
				{
				State = 5613; Match(SET);
				State = 5614; Match(SOFTNUMA);
				State = 5615;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_roleContext : ParserRuleContext {
		public Id_Context server_role_name;
		public Id_Context server_principal;
		public Id_Context new_server_role_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode MEMBER() { return GetToken(TSqlParser.MEMBER, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Alter_server_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_role(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_roleContext alter_server_role() {
		Alter_server_roleContext _localctx = new Alter_server_roleContext(_ctx, State);
		EnterRule(_localctx, 412, RULE_alter_server_role);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5618; Match(ALTER);
			State = 5619; Match(SERVER);
			State = 5620; Match(ROLE);
			State = 5621; _localctx.server_role_name = id_();
			State = 5629;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,629,_ctx) ) {
			case 1:
				{
				State = 5622;
				_la = _input.La(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 5623; Match(MEMBER);
				State = 5624; _localctx.server_principal = id_();
				}
				break;

			case 2:
				{
				State = 5625; Match(WITH);
				State = 5626; Match(NAME);
				State = 5627; Match(EQUAL);
				State = 5628; _localctx.new_server_role_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_server_roleContext : ParserRuleContext {
		public Id_Context server_role;
		public Id_Context server_principal;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_server_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_server_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_server_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_server_role(this);
		}
	}

	[RuleVersion(0)]
	public Create_server_roleContext create_server_role() {
		Create_server_roleContext _localctx = new Create_server_roleContext(_ctx, State);
		EnterRule(_localctx, 414, RULE_create_server_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5631; Match(CREATE);
			State = 5632; Match(SERVER);
			State = 5633; Match(ROLE);
			State = 5634; _localctx.server_role = id_();
			State = 5637;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,630,_ctx) ) {
			case 1:
				{
				State = 5635; Match(AUTHORIZATION);
				State = 5636; _localctx.server_principal = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_role_pdwContext : ParserRuleContext {
		public Id_Context server_role_name;
		public Id_Context login;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode MEMBER() { return GetToken(TSqlParser.MEMBER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Alter_server_role_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_role_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_role_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_role_pdw(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_role_pdwContext alter_server_role_pdw() {
		Alter_server_role_pdwContext _localctx = new Alter_server_role_pdwContext(_ctx, State);
		EnterRule(_localctx, 416, RULE_alter_server_role_pdw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5639; Match(ALTER);
			State = 5640; Match(SERVER);
			State = 5641; Match(ROLE);
			State = 5642; _localctx.server_role_name = id_();
			State = 5643;
			_la = _input.La(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 5644; Match(MEMBER);
			State = 5645; _localctx.login = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_serviceContext : ParserRuleContext {
		public Id_Context modified_service_name;
		public Id_Context schema_name;
		public Id_Context queue_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public Opt_arg_clauseContext[] opt_arg_clause() {
			return GetRuleContexts<Opt_arg_clauseContext>();
		}
		public Opt_arg_clauseContext opt_arg_clause(int i) {
			return GetRuleContext<Opt_arg_clauseContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_serviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_service; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_service(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_service(this);
		}
	}

	[RuleVersion(0)]
	public Alter_serviceContext alter_service() {
		Alter_serviceContext _localctx = new Alter_serviceContext(_ctx, State);
		EnterRule(_localctx, 418, RULE_alter_service);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5647; Match(ALTER);
			State = 5648; Match(SERVICE);
			State = 5649; _localctx.modified_service_name = id_();
			State = 5658;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,632,_ctx) ) {
			case 1:
				{
				State = 5650; Match(ON);
				State = 5651; Match(QUEUE);
				State = 5655;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,631,_ctx) ) {
				case 1:
					{
					State = 5652; _localctx.schema_name = id_();
					State = 5653; Match(DOT);
					}
					break;
				}
				State = 5657; _localctx.queue_name = id_();
				}
				break;
			}
			State = 5671;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,634,_ctx) ) {
			case 1:
				{
				State = 5660; Match(LR_BRACKET);
				State = 5661; opt_arg_clause();
				State = 5666;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,633,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 5662; Match(COMMA);
						State = 5663; opt_arg_clause();
						}
						} 
					}
					State = 5668;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,633,_ctx);
				}
				State = 5669; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_arg_clauseContext : ParserRuleContext {
		public Id_Context modified_contract_name;
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Opt_arg_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_arg_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpt_arg_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpt_arg_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_arg_clauseContext opt_arg_clause() {
		Opt_arg_clauseContext _localctx = new Opt_arg_clauseContext(_ctx, State);
		EnterRule(_localctx, 420, RULE_opt_arg_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5673;
			_la = _input.La(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 5674; Match(CONTRACT);
			State = 5675; _localctx.modified_contract_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_serviceContext : ParserRuleContext {
		public Id_Context create_service_name;
		public Id_Context owner_name;
		public Id_Context schema_name;
		public Id_Context queue_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] DEFAULT() { return GetTokens(TSqlParser.DEFAULT); }
		public ITerminalNode DEFAULT(int i) {
			return GetToken(TSqlParser.DEFAULT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_serviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_service; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_service(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_service(this);
		}
	}

	[RuleVersion(0)]
	public Create_serviceContext create_service() {
		Create_serviceContext _localctx = new Create_serviceContext(_ctx, State);
		EnterRule(_localctx, 422, RULE_create_service);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5677; Match(CREATE);
			State = 5678; Match(SERVICE);
			State = 5679; _localctx.create_service_name = id_();
			State = 5682;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,635,_ctx) ) {
			case 1:
				{
				State = 5680; Match(AUTHORIZATION);
				State = 5681; _localctx.owner_name = id_();
				}
				break;
			}
			State = 5684; Match(ON);
			State = 5685; Match(QUEUE);
			State = 5689;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,636,_ctx) ) {
			case 1:
				{
				State = 5686; _localctx.schema_name = id_();
				State = 5687; Match(DOT);
				}
				break;
			}
			State = 5691; _localctx.queue_name = id_();
			State = 5705;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,640,_ctx) ) {
			case 1:
				{
				State = 5692; Match(LR_BRACKET);
				State = 5700;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 5694;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,637,_ctx) ) {
						case 1:
							{
							State = 5693; Match(COMMA);
							}
							break;
						}
						State = 5698;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,638,_ctx) ) {
						case 1:
							{
							State = 5696; id_();
							}
							break;

						case 2:
							{
							State = 5697; Match(DEFAULT);
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 5702;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,639,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 5704; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_service_master_keyContext : ParserRuleContext {
		public IToken acold_account_name;
		public IToken old_password;
		public IToken new_account_name;
		public IToken new_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode REGENERATE() { return GetToken(TSqlParser.REGENERATE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public ITerminalNode OLD_ACCOUNT() { return GetToken(TSqlParser.OLD_ACCOUNT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public ITerminalNode NEW_ACCOUNT() { return GetToken(TSqlParser.NEW_ACCOUNT, 0); }
		public ITerminalNode NEW_PASSWORD() { return GetToken(TSqlParser.NEW_PASSWORD, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Alter_service_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_service_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_service_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_service_master_key(this);
		}
	}

	[RuleVersion(0)]
	public Alter_service_master_keyContext alter_service_master_key() {
		Alter_service_master_keyContext _localctx = new Alter_service_master_keyContext(_ctx, State);
		EnterRule(_localctx, 424, RULE_alter_service_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5707; Match(ALTER);
			State = 5708; Match(SERVICE);
			State = 5709; Match(MASTER);
			State = 5710; Match(KEY);
			State = 5732;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,643,_ctx) ) {
			case 1:
				{
				State = 5712;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,641,_ctx) ) {
				case 1:
					{
					State = 5711; Match(FORCE);
					}
					break;
				}
				State = 5714; Match(REGENERATE);
				}
				break;

			case 2:
				{
				{
				State = 5715; Match(WITH);
				State = 5730;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,642,_ctx) ) {
				case 1:
					{
					State = 5716; Match(OLD_ACCOUNT);
					State = 5717; Match(EQUAL);
					State = 5718; _localctx.acold_account_name = Match(STRING);
					State = 5719; Match(COMMA);
					State = 5720; Match(OLD_PASSWORD);
					State = 5721; Match(EQUAL);
					State = 5722; _localctx.old_password = Match(STRING);
					}
					break;

				case 2:
					{
					State = 5723; Match(NEW_ACCOUNT);
					State = 5724; Match(EQUAL);
					State = 5725; _localctx.new_account_name = Match(STRING);
					State = 5726; Match(COMMA);
					State = 5727; Match(NEW_PASSWORD);
					State = 5728; Match(EQUAL);
					State = 5729; _localctx.new_password = Match(STRING);
					}
					break;
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_symmetric_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public Id_Context certificate_name;
		public IToken password;
		public Id_Context symmetric_key_name;
		public Id_Context Asym_key_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] SYMMETRIC() { return GetTokens(TSqlParser.SYMMETRIC); }
		public ITerminalNode SYMMETRIC(int i) {
			return GetToken(TSqlParser.SYMMETRIC, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Alter_symmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_symmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_symmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_symmetric_key(this);
		}
	}

	[RuleVersion(0)]
	public Alter_symmetric_keyContext alter_symmetric_key() {
		Alter_symmetric_keyContext _localctx = new Alter_symmetric_keyContext(_ctx, State);
		EnterRule(_localctx, 426, RULE_alter_symmetric_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5734; Match(ALTER);
			State = 5735; Match(SYMMETRIC);
			State = 5736; Match(KEY);
			State = 5737; _localctx.key_name = id_();
			{
			State = 5738;
			_la = _input.La(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 5739; Match(ENCRYPTION);
			State = 5740; Match(BY);
			State = 5752;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,644,_ctx) ) {
			case 1:
				{
				State = 5741; Match(CERTIFICATE);
				State = 5742; _localctx.certificate_name = id_();
				}
				break;

			case 2:
				{
				State = 5743; Match(PASSWORD);
				State = 5744; Match(EQUAL);
				State = 5745; _localctx.password = Match(STRING);
				}
				break;

			case 3:
				{
				State = 5746; Match(SYMMETRIC);
				State = 5747; Match(KEY);
				State = 5748; _localctx.symmetric_key_name = id_();
				}
				break;

			case 4:
				{
				State = 5749; Match(ASYMMETRIC);
				State = 5750; Match(KEY);
				State = 5751; _localctx.Asym_key_name = id_();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_synonymContext : ParserRuleContext {
		public Id_Context schema_name_1;
		public Id_Context synonym_name;
		public Id_Context server_name;
		public Id_Context database_name;
		public Id_Context schema_name_2;
		public Id_Context object_name;
		public Id_Context database_or_schema2;
		public Id_Context schema_id_2_or_object_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SYNONYM() { return GetToken(TSqlParser.SYNONYM, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Create_synonymContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_synonym; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_synonym(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_synonym(this);
		}
	}

	[RuleVersion(0)]
	public Create_synonymContext create_synonym() {
		Create_synonymContext _localctx = new Create_synonymContext(_ctx, State);
		EnterRule(_localctx, 428, RULE_create_synonym);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5754; Match(CREATE);
			State = 5755; Match(SYNONYM);
			State = 5759;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,645,_ctx) ) {
			case 1:
				{
				State = 5756; _localctx.schema_name_1 = id_();
				State = 5757; Match(DOT);
				}
				break;
			}
			State = 5761; _localctx.synonym_name = id_();
			State = 5762; Match(FOR);
			State = 5789;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,651,_ctx) ) {
			case 1:
				{
				State = 5766;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,646,_ctx) ) {
				case 1:
					{
					State = 5763; _localctx.server_name = id_();
					State = 5764; Match(DOT);
					}
					break;
				}
				State = 5771;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,647,_ctx) ) {
				case 1:
					{
					State = 5768; _localctx.database_name = id_();
					State = 5769; Match(DOT);
					}
					break;
				}
				State = 5776;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,648,_ctx) ) {
				case 1:
					{
					State = 5773; _localctx.schema_name_2 = id_();
					State = 5774; Match(DOT);
					}
					break;
				}
				State = 5778; _localctx.object_name = id_();
				}
				break;

			case 2:
				{
				State = 5782;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,649,_ctx) ) {
				case 1:
					{
					State = 5779; _localctx.database_or_schema2 = id_();
					State = 5780; Match(DOT);
					}
					break;
				}
				State = 5787;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,650,_ctx) ) {
				case 1:
					{
					State = 5784; _localctx.schema_id_2_or_object_name = id_();
					State = 5785; Match(DOT);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_userContext : ParserRuleContext {
		public Id_Context username;
		public Id_Context newusername;
		public Id_Context schema_name;
		public Id_Context loginame;
		public IToken lcid;
		public Id_Context language_name_or_alias;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] NAME() { return GetTokens(TSqlParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(TSqlParser.NAME, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] DEFAULT_SCHEMA() { return GetTokens(TSqlParser.DEFAULT_SCHEMA); }
		public ITerminalNode DEFAULT_SCHEMA(int i) {
			return GetToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public ITerminalNode[] LOGIN() { return GetTokens(TSqlParser.LOGIN); }
		public ITerminalNode LOGIN(int i) {
			return GetToken(TSqlParser.LOGIN, i);
		}
		public ITerminalNode[] PASSWORD() { return GetTokens(TSqlParser.PASSWORD); }
		public ITerminalNode PASSWORD(int i) {
			return GetToken(TSqlParser.PASSWORD, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] DEFAULT_LANGUAGE() { return GetTokens(TSqlParser.DEFAULT_LANGUAGE); }
		public ITerminalNode DEFAULT_LANGUAGE(int i) {
			return GetToken(TSqlParser.DEFAULT_LANGUAGE, i);
		}
		public ITerminalNode[] ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return GetTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public ITerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return GetToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode[] NULL_() { return GetTokens(TSqlParser.NULL_); }
		public ITerminalNode NULL_(int i) {
			return GetToken(TSqlParser.NULL_, i);
		}
		public ITerminalNode[] NONE() { return GetTokens(TSqlParser.NONE); }
		public ITerminalNode NONE(int i) {
			return GetToken(TSqlParser.NONE, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] OLD_PASSWORD() { return GetTokens(TSqlParser.OLD_PASSWORD); }
		public ITerminalNode OLD_PASSWORD(int i) {
			return GetToken(TSqlParser.OLD_PASSWORD, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public Alter_userContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_user; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_user(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_user(this);
		}
	}

	[RuleVersion(0)]
	public Alter_userContext alter_user() {
		Alter_userContext _localctx = new Alter_userContext(_ctx, State);
		EnterRule(_localctx, 430, RULE_alter_user);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5791; Match(ALTER);
			State = 5792; Match(USER);
			State = 5793; _localctx.username = id_();
			State = 5794; Match(WITH);
			State = 5845;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 5845;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,661,_ctx) ) {
					case 1:
						{
						State = 5796;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,652,_ctx) ) {
						case 1:
							{
							State = 5795; Match(COMMA);
							}
							break;
						}
						State = 5798; Match(NAME);
						State = 5799; Match(EQUAL);
						State = 5800; _localctx.newusername = id_();
						}
						break;

					case 2:
						{
						State = 5802;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,653,_ctx) ) {
						case 1:
							{
							State = 5801; Match(COMMA);
							}
							break;
						}
						State = 5804; Match(DEFAULT_SCHEMA);
						State = 5805; Match(EQUAL);
						State = 5808;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,654,_ctx) ) {
						case 1:
							{
							State = 5806; _localctx.schema_name = id_();
							}
							break;

						case 2:
							{
							State = 5807; Match(NULL_);
							}
							break;
						}
						}
						break;

					case 3:
						{
						State = 5811;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,655,_ctx) ) {
						case 1:
							{
							State = 5810; Match(COMMA);
							}
							break;
						}
						State = 5813; Match(LOGIN);
						State = 5814; Match(EQUAL);
						State = 5815; _localctx.loginame = id_();
						}
						break;

					case 4:
						{
						State = 5817;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,656,_ctx) ) {
						case 1:
							{
							State = 5816; Match(COMMA);
							}
							break;
						}
						State = 5819; Match(PASSWORD);
						State = 5820; Match(EQUAL);
						State = 5821; Match(STRING);
						State = 5825;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 5822; Match(OLD_PASSWORD);
								State = 5823; Match(EQUAL);
								State = 5824; Match(STRING);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 5827;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,657,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						break;

					case 5:
						{
						State = 5830;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,658,_ctx) ) {
						case 1:
							{
							State = 5829; Match(COMMA);
							}
							break;
						}
						State = 5832; Match(DEFAULT_LANGUAGE);
						State = 5833; Match(EQUAL);
						State = 5837;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,659,_ctx) ) {
						case 1:
							{
							State = 5834; Match(NONE);
							}
							break;

						case 2:
							{
							State = 5835; _localctx.lcid = Match(DECIMAL);
							}
							break;

						case 3:
							{
							State = 5836; _localctx.language_name_or_alias = id_();
							}
							break;
						}
						}
						break;

					case 6:
						{
						State = 5840;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,660,_ctx) ) {
						case 1:
							{
							State = 5839; Match(COMMA);
							}
							break;
						}
						State = 5842; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
						State = 5843; Match(EQUAL);
						State = 5844;
						_la = _input.La(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5847;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,662,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_userContext : ParserRuleContext {
		public Id_Context user_name;
		public Id_Context login_name;
		public Id_Context schema_name;
		public Id_Context windows_principal;
		public Id_Context language_name_or_alias;
		public IToken password;
		public Id_Context Azure_Active_Directory_principal;
		public Id_Context cert_name;
		public Id_Context asym_key_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode[] DEFAULT_SCHEMA() { return GetTokens(TSqlParser.DEFAULT_SCHEMA); }
		public ITerminalNode DEFAULT_SCHEMA(int i) {
			return GetToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return GetTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public ITerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return GetToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode[] DEFAULT_LANGUAGE() { return GetTokens(TSqlParser.DEFAULT_LANGUAGE); }
		public ITerminalNode DEFAULT_LANGUAGE(int i) {
			return GetToken(TSqlParser.DEFAULT_LANGUAGE, i);
		}
		public ITerminalNode[] SID() { return GetTokens(TSqlParser.SID); }
		public ITerminalNode SID(int i) {
			return GetToken(TSqlParser.SID, i);
		}
		public ITerminalNode[] BINARY() { return GetTokens(TSqlParser.BINARY); }
		public ITerminalNode BINARY(int i) {
			return GetToken(TSqlParser.BINARY, i);
		}
		public ITerminalNode[] NONE() { return GetTokens(TSqlParser.NONE); }
		public ITerminalNode NONE(int i) {
			return GetToken(TSqlParser.NONE, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode WITHOUT() { return GetToken(TSqlParser.WITHOUT, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Create_userContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_user; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_user(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_user(this);
		}
	}

	[RuleVersion(0)]
	public Create_userContext create_user() {
		Create_userContext _localctx = new Create_userContext(_ctx, State);
		EnterRule(_localctx, 432, RULE_create_user);
		int _la;
		try {
			int _alt;
			State = 5995;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,690,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5849; Match(CREATE);
				State = 5850; Match(USER);
				State = 5851; _localctx.user_name = id_();
				State = 5855;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,663,_ctx) ) {
				case 1:
					{
					State = 5852;
					_la = _input.La(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5853; Match(LOGIN);
					State = 5854; _localctx.login_name = id_();
					}
					break;
				}
				State = 5875;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,668,_ctx) ) {
				case 1:
					{
					State = 5857; Match(WITH);
					State = 5872;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,667,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 5870;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,666,_ctx) ) {
							case 1:
								{
								State = 5859;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,664,_ctx) ) {
								case 1:
									{
									State = 5858; Match(COMMA);
									}
									break;
								}
								State = 5861; Match(DEFAULT_SCHEMA);
								State = 5862; Match(EQUAL);
								State = 5863; _localctx.schema_name = id_();
								}
								break;

							case 2:
								{
								State = 5865;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,665,_ctx) ) {
								case 1:
									{
									State = 5864; Match(COMMA);
									}
									break;
								}
								State = 5867; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								State = 5868; Match(EQUAL);
								State = 5869;
								_la = _input.La(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;
							}
							} 
						}
						State = 5874;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,667,_ctx);
					}
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5877; Match(CREATE);
				State = 5878; Match(USER);
				State = 5959;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,684,_ctx) ) {
				case 1:
					{
					State = 5879; _localctx.windows_principal = id_();
					State = 5914;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,676,_ctx) ) {
					case 1:
						{
						State = 5880; Match(WITH);
						State = 5911;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,675,_ctx);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
							if ( _alt==1 ) {
								{
								State = 5909;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,674,_ctx) ) {
								case 1:
									{
									State = 5882;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,669,_ctx) ) {
									case 1:
										{
										State = 5881; Match(COMMA);
										}
										break;
									}
									State = 5884; Match(DEFAULT_SCHEMA);
									State = 5885; Match(EQUAL);
									State = 5886; _localctx.schema_name = id_();
									}
									break;

								case 2:
									{
									State = 5888;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,670,_ctx) ) {
									case 1:
										{
										State = 5887; Match(COMMA);
										}
										break;
									}
									State = 5890; Match(DEFAULT_LANGUAGE);
									State = 5891; Match(EQUAL);
									State = 5895;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,671,_ctx) ) {
									case 1:
										{
										State = 5892; Match(NONE);
										}
										break;

									case 2:
										{
										State = 5893; Match(DECIMAL);
										}
										break;

									case 3:
										{
										State = 5894; _localctx.language_name_or_alias = id_();
										}
										break;
									}
									}
									break;

								case 3:
									{
									State = 5898;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,672,_ctx) ) {
									case 1:
										{
										State = 5897; Match(COMMA);
										}
										break;
									}
									State = 5900; Match(SID);
									State = 5901; Match(EQUAL);
									State = 5902; Match(BINARY);
									}
									break;

								case 4:
									{
									State = 5904;
									_errHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(_input,673,_ctx) ) {
									case 1:
										{
										State = 5903; Match(COMMA);
										}
										break;
									}
									State = 5906; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
									State = 5907; Match(EQUAL);
									State = 5908;
									_la = _input.La(1);
									if ( !(_la==OFF || _la==ON) ) {
									_errHandler.RecoverInline(this);
									} else {
										if (_input.La(1) == TokenConstants.Eof) {
											matchedEOF = true;
										}

										_errHandler.ReportMatch(this);
										Consume();
									}
									}
									break;
								}
								} 
							}
							State = 5913;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,675,_ctx);
						}
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 5916; _localctx.user_name = id_();
					State = 5917; Match(WITH);
					State = 5918; Match(PASSWORD);
					State = 5919; Match(EQUAL);
					State = 5920; _localctx.password = Match(STRING);
					State = 5951;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,683,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 5949;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,682,_ctx) ) {
							case 1:
								{
								State = 5922;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,677,_ctx) ) {
								case 1:
									{
									State = 5921; Match(COMMA);
									}
									break;
								}
								State = 5924; Match(DEFAULT_SCHEMA);
								State = 5925; Match(EQUAL);
								State = 5926; _localctx.schema_name = id_();
								}
								break;

							case 2:
								{
								State = 5928;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,678,_ctx) ) {
								case 1:
									{
									State = 5927; Match(COMMA);
									}
									break;
								}
								State = 5930; Match(DEFAULT_LANGUAGE);
								State = 5931; Match(EQUAL);
								State = 5935;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,679,_ctx) ) {
								case 1:
									{
									State = 5932; Match(NONE);
									}
									break;

								case 2:
									{
									State = 5933; Match(DECIMAL);
									}
									break;

								case 3:
									{
									State = 5934; _localctx.language_name_or_alias = id_();
									}
									break;
								}
								}
								break;

							case 3:
								{
								State = 5938;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,680,_ctx) ) {
								case 1:
									{
									State = 5937; Match(COMMA);
									}
									break;
								}
								State = 5940; Match(SID);
								State = 5941; Match(EQUAL);
								State = 5942; Match(BINARY);
								}
								break;

							case 4:
								{
								State = 5944;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,681,_ctx) ) {
								case 1:
									{
									State = 5943; Match(COMMA);
									}
									break;
								}
								State = 5946; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								State = 5947; Match(EQUAL);
								State = 5948;
								_la = _input.La(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;
							}
							} 
						}
						State = 5953;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,683,_ctx);
					}
					}
					break;

				case 3:
					{
					State = 5954; _localctx.Azure_Active_Directory_principal = id_();
					State = 5955; Match(FROM);
					State = 5956; Match(EXTERNAL);
					State = 5957; Match(PROVIDER);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5961; Match(CREATE);
				State = 5962; Match(USER);
				State = 5963; _localctx.user_name = id_();
				State = 5990;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,689,_ctx) ) {
				case 1:
					{
					State = 5964; Match(WITHOUT);
					State = 5965; Match(LOGIN);
					State = 5980;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,688,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 5978;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,687,_ctx) ) {
							case 1:
								{
								State = 5967;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,685,_ctx) ) {
								case 1:
									{
									State = 5966; Match(COMMA);
									}
									break;
								}
								State = 5969; Match(DEFAULT_SCHEMA);
								State = 5970; Match(EQUAL);
								State = 5971; _localctx.schema_name = id_();
								}
								break;

							case 2:
								{
								State = 5973;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,686,_ctx) ) {
								case 1:
									{
									State = 5972; Match(COMMA);
									}
									break;
								}
								State = 5975; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								State = 5976; Match(EQUAL);
								State = 5977;
								_la = _input.La(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								}
								break;
							}
							} 
						}
						State = 5982;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,688,_ctx);
					}
					}
					break;

				case 2:
					{
					State = 5983;
					_la = _input.La(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5984; Match(CERTIFICATE);
					State = 5985; _localctx.cert_name = id_();
					}
					break;

				case 3:
					{
					State = 5986;
					_la = _input.La(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 5987; Match(ASYMMETRIC);
					State = 5988; Match(KEY);
					State = 5989; _localctx.asym_key_name = id_();
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5992; Match(CREATE);
				State = 5993; Match(USER);
				State = 5994; _localctx.user_name = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_user_azure_sql_dwContext : ParserRuleContext {
		public Id_Context user_name;
		public Id_Context login_name;
		public Id_Context schema_name;
		public Id_Context Azure_Active_Directory_principal;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode WITHOUT() { return GetToken(TSqlParser.WITHOUT, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode DEFAULT_SCHEMA() { return GetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Create_user_azure_sql_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_user_azure_sql_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_user_azure_sql_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_user_azure_sql_dw(this);
		}
	}

	[RuleVersion(0)]
	public Create_user_azure_sql_dwContext create_user_azure_sql_dw() {
		Create_user_azure_sql_dwContext _localctx = new Create_user_azure_sql_dwContext(_ctx, State);
		EnterRule(_localctx, 434, RULE_create_user_azure_sql_dw);
		int _la;
		try {
			State = 6025;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,694,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5997; Match(CREATE);
				State = 5998; Match(USER);
				State = 5999; _localctx.user_name = id_();
				State = 6005;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,691,_ctx) ) {
				case 1:
					{
					State = 6000;
					_la = _input.La(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 6001; Match(LOGIN);
					State = 6002; _localctx.login_name = id_();
					}
					break;

				case 2:
					{
					State = 6003; Match(WITHOUT);
					State = 6004; Match(LOGIN);
					}
					break;
				}
				State = 6011;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,692,_ctx) ) {
				case 1:
					{
					State = 6007; Match(WITH);
					State = 6008; Match(DEFAULT_SCHEMA);
					State = 6009; Match(EQUAL);
					State = 6010; _localctx.schema_name = id_();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6013; Match(CREATE);
				State = 6014; Match(USER);
				State = 6015; _localctx.Azure_Active_Directory_principal = id_();
				State = 6016; Match(FROM);
				State = 6017; Match(EXTERNAL);
				State = 6018; Match(PROVIDER);
				State = 6023;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,693,_ctx) ) {
				case 1:
					{
					State = 6019; Match(WITH);
					State = 6020; Match(DEFAULT_SCHEMA);
					State = 6021; Match(EQUAL);
					State = 6022; _localctx.schema_name = id_();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_user_azure_sqlContext : ParserRuleContext {
		public Id_Context username;
		public Id_Context newusername;
		public Id_Context schema_name;
		public Id_Context loginame;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] NAME() { return GetTokens(TSqlParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(TSqlParser.NAME, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] DEFAULT_SCHEMA() { return GetTokens(TSqlParser.DEFAULT_SCHEMA); }
		public ITerminalNode DEFAULT_SCHEMA(int i) {
			return GetToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public ITerminalNode[] LOGIN() { return GetTokens(TSqlParser.LOGIN); }
		public ITerminalNode LOGIN(int i) {
			return GetToken(TSqlParser.LOGIN, i);
		}
		public ITerminalNode[] ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return GetTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public ITerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return GetToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_user_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_user_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_user_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_user_azure_sql(this);
		}
	}

	[RuleVersion(0)]
	public Alter_user_azure_sqlContext alter_user_azure_sql() {
		Alter_user_azure_sqlContext _localctx = new Alter_user_azure_sqlContext(_ctx, State);
		EnterRule(_localctx, 436, RULE_alter_user_azure_sql);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6027; Match(ALTER);
			State = 6028; Match(USER);
			State = 6029; _localctx.username = id_();
			State = 6030; Match(WITH);
			State = 6055;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 6055;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,699,_ctx) ) {
					case 1:
						{
						State = 6032;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,695,_ctx) ) {
						case 1:
							{
							State = 6031; Match(COMMA);
							}
							break;
						}
						State = 6034; Match(NAME);
						State = 6035; Match(EQUAL);
						State = 6036; _localctx.newusername = id_();
						}
						break;

					case 2:
						{
						State = 6038;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,696,_ctx) ) {
						case 1:
							{
							State = 6037; Match(COMMA);
							}
							break;
						}
						State = 6040; Match(DEFAULT_SCHEMA);
						State = 6041; Match(EQUAL);
						State = 6042; _localctx.schema_name = id_();
						}
						break;

					case 3:
						{
						State = 6044;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,697,_ctx) ) {
						case 1:
							{
							State = 6043; Match(COMMA);
							}
							break;
						}
						State = 6046; Match(LOGIN);
						State = 6047; Match(EQUAL);
						State = 6048; _localctx.loginame = id_();
						}
						break;

					case 4:
						{
						State = 6050;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,698,_ctx) ) {
						case 1:
							{
							State = 6049; Match(COMMA);
							}
							break;
						}
						State = 6052; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
						State = 6053; Match(EQUAL);
						State = 6054;
						_la = _input.La(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6057;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,700,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_workload_groupContext : ParserRuleContext {
		public Id_Context workload_group_group_name;
		public IToken request_max_memory_grant;
		public IToken request_max_cpu_time_sec;
		public IToken request_memory_grant_timeout_sec;
		public IToken max_dop;
		public IToken group_max_requests;
		public Id_Context workload_group_pool_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode WORKLOAD() { return GetToken(TSqlParser.WORKLOAD, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode[] DEFAULT_DOUBLE_QUOTE() { return GetTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE); }
		public ITerminalNode DEFAULT_DOUBLE_QUOTE(int i) {
			return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public ITerminalNode[] IMPORTANCE() { return GetTokens(TSqlParser.IMPORTANCE); }
		public ITerminalNode IMPORTANCE(int i) {
			return GetToken(TSqlParser.IMPORTANCE, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] REQUEST_MAX_MEMORY_GRANT_PERCENT() { return GetTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT); }
		public ITerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT(int i) {
			return GetToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
		}
		public ITerminalNode[] REQUEST_MAX_CPU_TIME_SEC() { return GetTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC); }
		public ITerminalNode REQUEST_MAX_CPU_TIME_SEC(int i) {
			return GetToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i);
		}
		public ITerminalNode[] REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return GetTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC); }
		public ITerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC(int i) {
			return GetToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
		}
		public ITerminalNode[] MAX_DOP() { return GetTokens(TSqlParser.MAX_DOP); }
		public ITerminalNode MAX_DOP(int i) {
			return GetToken(TSqlParser.MAX_DOP, i);
		}
		public ITerminalNode[] GROUP_MAX_REQUESTS() { return GetTokens(TSqlParser.GROUP_MAX_REQUESTS); }
		public ITerminalNode GROUP_MAX_REQUESTS(int i) {
			return GetToken(TSqlParser.GROUP_MAX_REQUESTS, i);
		}
		public ITerminalNode[] LOW() { return GetTokens(TSqlParser.LOW); }
		public ITerminalNode LOW(int i) {
			return GetToken(TSqlParser.LOW, i);
		}
		public ITerminalNode[] MEDIUM() { return GetTokens(TSqlParser.MEDIUM); }
		public ITerminalNode MEDIUM(int i) {
			return GetToken(TSqlParser.MEDIUM, i);
		}
		public ITerminalNode[] HIGH() { return GetTokens(TSqlParser.HIGH); }
		public ITerminalNode HIGH(int i) {
			return GetToken(TSqlParser.HIGH, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_workload_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_workload_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_workload_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_workload_group(this);
		}
	}

	[RuleVersion(0)]
	public Alter_workload_groupContext alter_workload_group() {
		Alter_workload_groupContext _localctx = new Alter_workload_groupContext(_ctx, State);
		EnterRule(_localctx, 438, RULE_alter_workload_group);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6059; Match(ALTER);
			State = 6060; Match(WORKLOAD);
			State = 6061; Match(GROUP);
			State = 6064;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,701,_ctx) ) {
			case 1:
				{
				State = 6062; _localctx.workload_group_group_name = id_();
				}
				break;

			case 2:
				{
				State = 6063; Match(DEFAULT_DOUBLE_QUOTE);
				}
				break;
			}
			State = 6097;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,706,_ctx) ) {
			case 1:
				{
				State = 6066; Match(WITH);
				State = 6067; Match(LR_BRACKET);
				State = 6092;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 6092;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,704,_ctx) ) {
						case 1:
							{
							State = 6068; Match(IMPORTANCE);
							State = 6069; Match(EQUAL);
							State = 6070;
							_la = _input.La(1);
							if ( !(_la==HIGH || _la==LOW || _la==MEDIUM) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 2:
							{
							State = 6072;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,702,_ctx) ) {
							case 1:
								{
								State = 6071; Match(COMMA);
								}
								break;
							}
							State = 6074; Match(REQUEST_MAX_MEMORY_GRANT_PERCENT);
							State = 6075; Match(EQUAL);
							State = 6076; _localctx.request_max_memory_grant = Match(DECIMAL);
							}
							break;

						case 3:
							{
							State = 6078;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,703,_ctx) ) {
							case 1:
								{
								State = 6077; Match(COMMA);
								}
								break;
							}
							State = 6080; Match(REQUEST_MAX_CPU_TIME_SEC);
							State = 6081; Match(EQUAL);
							State = 6082; _localctx.request_max_cpu_time_sec = Match(DECIMAL);
							}
							break;

						case 4:
							{
							State = 6083; Match(REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
							State = 6084; Match(EQUAL);
							State = 6085; _localctx.request_memory_grant_timeout_sec = Match(DECIMAL);
							}
							break;

						case 5:
							{
							State = 6086; Match(MAX_DOP);
							State = 6087; Match(EQUAL);
							State = 6088; _localctx.max_dop = Match(DECIMAL);
							}
							break;

						case 6:
							{
							State = 6089; Match(GROUP_MAX_REQUESTS);
							State = 6090; Match(EQUAL);
							State = 6091; _localctx.group_max_requests = Match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6094;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,705,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 6096; Match(RR_BRACKET);
				}
				break;
			}
			State = 6104;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,708,_ctx) ) {
			case 1:
				{
				State = 6099; Match(USING);
				State = 6102;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,707,_ctx) ) {
				case 1:
					{
					State = 6100; _localctx.workload_group_pool_name = id_();
					}
					break;

				case 2:
					{
					State = 6101; Match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_workload_groupContext : ParserRuleContext {
		public Id_Context workload_group_group_name;
		public IToken request_max_memory_grant;
		public IToken request_max_cpu_time_sec;
		public IToken request_memory_grant_timeout_sec;
		public IToken max_dop;
		public IToken group_max_requests;
		public Id_Context workload_group_pool_name;
		public Id_Context external_pool_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode WORKLOAD() { return GetToken(TSqlParser.WORKLOAD, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public ITerminalNode[] IMPORTANCE() { return GetTokens(TSqlParser.IMPORTANCE); }
		public ITerminalNode IMPORTANCE(int i) {
			return GetToken(TSqlParser.IMPORTANCE, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] REQUEST_MAX_MEMORY_GRANT_PERCENT() { return GetTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT); }
		public ITerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT(int i) {
			return GetToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
		}
		public ITerminalNode[] REQUEST_MAX_CPU_TIME_SEC() { return GetTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC); }
		public ITerminalNode REQUEST_MAX_CPU_TIME_SEC(int i) {
			return GetToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i);
		}
		public ITerminalNode[] REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return GetTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC); }
		public ITerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC(int i) {
			return GetToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
		}
		public ITerminalNode[] MAX_DOP() { return GetTokens(TSqlParser.MAX_DOP); }
		public ITerminalNode MAX_DOP(int i) {
			return GetToken(TSqlParser.MAX_DOP, i);
		}
		public ITerminalNode[] GROUP_MAX_REQUESTS() { return GetTokens(TSqlParser.GROUP_MAX_REQUESTS); }
		public ITerminalNode GROUP_MAX_REQUESTS(int i) {
			return GetToken(TSqlParser.GROUP_MAX_REQUESTS, i);
		}
		public ITerminalNode[] DEFAULT_DOUBLE_QUOTE() { return GetTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE); }
		public ITerminalNode DEFAULT_DOUBLE_QUOTE(int i) {
			return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i);
		}
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode[] LOW() { return GetTokens(TSqlParser.LOW); }
		public ITerminalNode LOW(int i) {
			return GetToken(TSqlParser.LOW, i);
		}
		public ITerminalNode[] MEDIUM() { return GetTokens(TSqlParser.MEDIUM); }
		public ITerminalNode MEDIUM(int i) {
			return GetToken(TSqlParser.MEDIUM, i);
		}
		public ITerminalNode[] HIGH() { return GetTokens(TSqlParser.HIGH); }
		public ITerminalNode HIGH(int i) {
			return GetToken(TSqlParser.HIGH, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_workload_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_workload_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_workload_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_workload_group(this);
		}
	}

	[RuleVersion(0)]
	public Create_workload_groupContext create_workload_group() {
		Create_workload_groupContext _localctx = new Create_workload_groupContext(_ctx, State);
		EnterRule(_localctx, 440, RULE_create_workload_group);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6106; Match(CREATE);
			State = 6107; Match(WORKLOAD);
			State = 6108; Match(GROUP);
			State = 6109; _localctx.workload_group_group_name = id_();
			State = 6141;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,713,_ctx) ) {
			case 1:
				{
				State = 6110; Match(WITH);
				State = 6111; Match(LR_BRACKET);
				State = 6136;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 6136;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,711,_ctx) ) {
						case 1:
							{
							State = 6112; Match(IMPORTANCE);
							State = 6113; Match(EQUAL);
							State = 6114;
							_la = _input.La(1);
							if ( !(_la==HIGH || _la==LOW || _la==MEDIUM) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 2:
							{
							State = 6116;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,709,_ctx) ) {
							case 1:
								{
								State = 6115; Match(COMMA);
								}
								break;
							}
							State = 6118; Match(REQUEST_MAX_MEMORY_GRANT_PERCENT);
							State = 6119; Match(EQUAL);
							State = 6120; _localctx.request_max_memory_grant = Match(DECIMAL);
							}
							break;

						case 3:
							{
							State = 6122;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,710,_ctx) ) {
							case 1:
								{
								State = 6121; Match(COMMA);
								}
								break;
							}
							State = 6124; Match(REQUEST_MAX_CPU_TIME_SEC);
							State = 6125; Match(EQUAL);
							State = 6126; _localctx.request_max_cpu_time_sec = Match(DECIMAL);
							}
							break;

						case 4:
							{
							State = 6127; Match(REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
							State = 6128; Match(EQUAL);
							State = 6129; _localctx.request_memory_grant_timeout_sec = Match(DECIMAL);
							}
							break;

						case 5:
							{
							State = 6130; Match(MAX_DOP);
							State = 6131; Match(EQUAL);
							State = 6132; _localctx.max_dop = Match(DECIMAL);
							}
							break;

						case 6:
							{
							State = 6133; Match(GROUP_MAX_REQUESTS);
							State = 6134; Match(EQUAL);
							State = 6135; _localctx.group_max_requests = Match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6138;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,712,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 6140; Match(RR_BRACKET);
				}
				break;
			}
			State = 6156;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,717,_ctx) ) {
			case 1:
				{
				State = 6143; Match(USING);
				State = 6146;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,714,_ctx) ) {
				case 1:
					{
					State = 6144; _localctx.workload_group_pool_name = id_();
					}
					break;

				case 2:
					{
					State = 6145; Match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				State = 6154;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,716,_ctx) ) {
				case 1:
					{
					State = 6149;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,715,_ctx) ) {
					case 1:
						{
						State = 6148; Match(COMMA);
						}
						break;
					}
					State = 6151; Match(EXTERNAL);
					State = 6152; _localctx.external_pool_name = id_();
					}
					break;

				case 2:
					{
					State = 6153; Match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_xml_schema_collectionContext : ParserRuleContext {
		public Id_Context relational_schema;
		public Id_Context sql_identifier;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Create_xml_schema_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_xml_schema_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_xml_schema_collection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_xml_schema_collection(this);
		}
	}

	[RuleVersion(0)]
	public Create_xml_schema_collectionContext create_xml_schema_collection() {
		Create_xml_schema_collectionContext _localctx = new Create_xml_schema_collectionContext(_ctx, State);
		EnterRule(_localctx, 442, RULE_create_xml_schema_collection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6158; Match(CREATE);
			State = 6159; Match(XML);
			State = 6160; Match(SCHEMA);
			State = 6161; Match(COLLECTION);
			State = 6165;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,718,_ctx) ) {
			case 1:
				{
				State = 6162; _localctx.relational_schema = id_();
				State = 6163; Match(DOT);
				}
				break;
			}
			State = 6167; _localctx.sql_identifier = id_();
			State = 6168; Match(AS);
			State = 6172;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,719,_ctx) ) {
			case 1:
				{
				State = 6169; Match(STRING);
				}
				break;

			case 2:
				{
				State = 6170; id_();
				}
				break;

			case 3:
				{
				State = 6171; Match(LOCAL_ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_partition_functionContext : ParserRuleContext {
		public Id_Context partition_function_name;
		public Data_typeContext input_parameter_type;
		public Expression_list_Context boundary_values;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode RANGE() { return GetToken(TSqlParser.RANGE, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public ITerminalNode LEFT() { return GetToken(TSqlParser.LEFT, 0); }
		public ITerminalNode RIGHT() { return GetToken(TSqlParser.RIGHT, 0); }
		public Create_partition_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_partition_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_partition_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_partition_function(this);
		}
	}

	[RuleVersion(0)]
	public Create_partition_functionContext create_partition_function() {
		Create_partition_functionContext _localctx = new Create_partition_functionContext(_ctx, State);
		EnterRule(_localctx, 444, RULE_create_partition_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6174; Match(CREATE);
			State = 6175; Match(PARTITION);
			State = 6176; Match(FUNCTION);
			State = 6177; _localctx.partition_function_name = id_();
			State = 6178; Match(LR_BRACKET);
			State = 6179; _localctx.input_parameter_type = data_type();
			State = 6180; Match(RR_BRACKET);
			State = 6181; Match(AS);
			State = 6182; Match(RANGE);
			State = 6184;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,720,_ctx) ) {
			case 1:
				{
				State = 6183;
				_la = _input.La(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 6186; Match(FOR);
			State = 6187; Match(VALUES);
			State = 6188; Match(LR_BRACKET);
			State = 6189; _localctx.boundary_values = expression_list_();
			State = 6190; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_partition_schemeContext : ParserRuleContext {
		public Id_Context partition_scheme_name;
		public Id_Context partition_function_name;
		public Id_Context _id_;
		public IList<Id_Context> _file_group_names = new List<Id_Context>();
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode[] PARTITION() { return GetTokens(TSqlParser.PARTITION); }
		public ITerminalNode PARTITION(int i) {
			return GetToken(TSqlParser.PARTITION, i);
		}
		public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Create_partition_schemeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_partition_scheme; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_partition_scheme(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_partition_scheme(this);
		}
	}

	[RuleVersion(0)]
	public Create_partition_schemeContext create_partition_scheme() {
		Create_partition_schemeContext _localctx = new Create_partition_schemeContext(_ctx, State);
		EnterRule(_localctx, 446, RULE_create_partition_scheme);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6192; Match(CREATE);
			State = 6193; Match(PARTITION);
			State = 6194; Match(SCHEME);
			State = 6195; _localctx.partition_scheme_name = id_();
			State = 6196; Match(AS);
			State = 6197; Match(PARTITION);
			State = 6198; _localctx.partition_function_name = id_();
			State = 6200;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,721,_ctx) ) {
			case 1:
				{
				State = 6199; Match(ALL);
				}
				break;
			}
			State = 6202; Match(TO);
			State = 6203; Match(LR_BRACKET);
			State = 6204; _localctx._id_ = id_();
			_localctx._file_group_names.Add(_localctx._id_);
			State = 6209;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,722,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6205; Match(COMMA);
					State = 6206; _localctx._id_ = id_();
					_localctx._file_group_names.Add(_localctx._id_);
					}
					} 
				}
				State = 6211;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,722,_ctx);
			}
			State = 6212; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_queueContext : ParserRuleContext {
		public Id_Context queue_name;
		public Id_Context filegroup;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Queue_settingsContext queue_settings() {
			return GetRuleContext<Queue_settingsContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public Create_queueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_queue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_queue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_queue(this);
		}
	}

	[RuleVersion(0)]
	public Create_queueContext create_queue() {
		Create_queueContext _localctx = new Create_queueContext(_ctx, State);
		EnterRule(_localctx, 448, RULE_create_queue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6214; Match(CREATE);
			State = 6215; Match(QUEUE);
			State = 6218;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,723,_ctx) ) {
			case 1:
				{
				State = 6216; full_table_name();
				}
				break;

			case 2:
				{
				State = 6217; _localctx.queue_name = id_();
				}
				break;
			}
			State = 6221;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,724,_ctx) ) {
			case 1:
				{
				State = 6220; queue_settings();
				}
				break;
			}
			State = 6226;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,725,_ctx) ) {
			case 1:
				{
				State = 6223; Match(ON);
				State = 6224; _localctx.filegroup = id_();
				}
				break;

			case 2:
				{
				State = 6225; Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Queue_settingsContext : ParserRuleContext {
		public IToken max_readers;
		public IToken user_name;
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] STATUS() { return GetTokens(TSqlParser.STATUS); }
		public ITerminalNode STATUS(int i) {
			return GetToken(TSqlParser.STATUS, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public On_offContext[] on_off() {
			return GetRuleContexts<On_offContext>();
		}
		public On_offContext on_off(int i) {
			return GetRuleContext<On_offContext>(i);
		}
		public ITerminalNode RETENTION() { return GetToken(TSqlParser.RETENTION, 0); }
		public ITerminalNode ACTIVATION() { return GetToken(TSqlParser.ACTIVATION, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode POISON_MESSAGE_HANDLING() { return GetToken(TSqlParser.POISON_MESSAGE_HANDLING, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode PROCEDURE_NAME() { return GetToken(TSqlParser.PROCEDURE_NAME, 0); }
		public Func_proc_name_database_schemaContext func_proc_name_database_schema() {
			return GetRuleContext<Func_proc_name_database_schemaContext>(0);
		}
		public ITerminalNode MAX_QUEUE_READERS() { return GetToken(TSqlParser.MAX_QUEUE_READERS, 0); }
		public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode SELF() { return GetToken(TSqlParser.SELF, 0); }
		public ITerminalNode OWNER() { return GetToken(TSqlParser.OWNER, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Queue_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queue_settings; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQueue_settings(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQueue_settings(this);
		}
	}

	[RuleVersion(0)]
	public Queue_settingsContext queue_settings() {
		Queue_settingsContext _localctx = new Queue_settingsContext(_ctx, State);
		EnterRule(_localctx, 450, RULE_queue_settings);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6228; Match(WITH);
			State = 6235;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,727,_ctx) ) {
			case 1:
				{
				State = 6229; Match(STATUS);
				State = 6230; Match(EQUAL);
				State = 6231; on_off();
				State = 6233;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,726,_ctx) ) {
				case 1:
					{
					State = 6232; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 6243;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,729,_ctx) ) {
			case 1:
				{
				State = 6237; Match(RETENTION);
				State = 6238; Match(EQUAL);
				State = 6239; on_off();
				State = 6241;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,728,_ctx) ) {
				case 1:
					{
					State = 6240; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 6290;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,741,_ctx) ) {
			case 1:
				{
				State = 6245; Match(ACTIVATION);
				State = 6246; Match(LR_BRACKET);
				State = 6284;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,739,_ctx) ) {
				case 1:
					{
					{
					State = 6253;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,731,_ctx) ) {
					case 1:
						{
						State = 6247; Match(STATUS);
						State = 6248; Match(EQUAL);
						State = 6249; on_off();
						State = 6251;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,730,_ctx) ) {
						case 1:
							{
							State = 6250; Match(COMMA);
							}
							break;
						}
						}
						break;
					}
					State = 6261;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,733,_ctx) ) {
					case 1:
						{
						State = 6255; Match(PROCEDURE_NAME);
						State = 6256; Match(EQUAL);
						State = 6257; func_proc_name_database_schema();
						State = 6259;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,732,_ctx) ) {
						case 1:
							{
							State = 6258; Match(COMMA);
							}
							break;
						}
						}
						break;
					}
					State = 6269;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,735,_ctx) ) {
					case 1:
						{
						State = 6263; Match(MAX_QUEUE_READERS);
						State = 6264; Match(EQUAL);
						State = 6265; _localctx.max_readers = Match(DECIMAL);
						State = 6267;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,734,_ctx) ) {
						case 1:
							{
							State = 6266; Match(COMMA);
							}
							break;
						}
						}
						break;
					}
					State = 6281;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,738,_ctx) ) {
					case 1:
						{
						State = 6271; Match(EXECUTE);
						State = 6272; Match(AS);
						State = 6276;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,736,_ctx) ) {
						case 1:
							{
							State = 6273; Match(SELF);
							}
							break;

						case 2:
							{
							State = 6274; _localctx.user_name = Match(STRING);
							}
							break;

						case 3:
							{
							State = 6275; Match(OWNER);
							}
							break;
						}
						State = 6279;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,737,_ctx) ) {
						case 1:
							{
							State = 6278; Match(COMMA);
							}
							break;
						}
						}
						break;
					}
					}
					}
					break;

				case 2:
					{
					State = 6283; Match(DROP);
					}
					break;
				}
				State = 6286; Match(RR_BRACKET);
				State = 6288;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,740,_ctx) ) {
				case 1:
					{
					State = 6287; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 6300;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,742,_ctx) ) {
			case 1:
				{
				State = 6292; Match(POISON_MESSAGE_HANDLING);
				State = 6293; Match(LR_BRACKET);
				{
				State = 6294; Match(STATUS);
				State = 6295; Match(EQUAL);
				State = 6296; on_off();
				}
				State = 6298; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_queueContext : ParserRuleContext {
		public Id_Context queue_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public Queue_settingsContext queue_settings() {
			return GetRuleContext<Queue_settingsContext>(0);
		}
		public Queue_actionContext queue_action() {
			return GetRuleContext<Queue_actionContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Alter_queueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_queue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_queue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_queue(this);
		}
	}

	[RuleVersion(0)]
	public Alter_queueContext alter_queue() {
		Alter_queueContext _localctx = new Alter_queueContext(_ctx, State);
		EnterRule(_localctx, 452, RULE_alter_queue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6302; Match(ALTER);
			State = 6303; Match(QUEUE);
			State = 6306;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,743,_ctx) ) {
			case 1:
				{
				State = 6304; full_table_name();
				}
				break;

			case 2:
				{
				State = 6305; _localctx.queue_name = id_();
				}
				break;
			}
			State = 6310;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,744,_ctx) ) {
			case 1:
				{
				State = 6308; queue_settings();
				}
				break;

			case 2:
				{
				State = 6309; queue_action();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Queue_actionContext : ParserRuleContext {
		public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Queue_rebuild_optionsContext queue_rebuild_options() {
			return GetRuleContext<Queue_rebuild_optionsContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode REORGANIZE() { return GetToken(TSqlParser.REORGANIZE, 0); }
		public ITerminalNode LOB_COMPACTION() { return GetToken(TSqlParser.LOB_COMPACTION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode MOVE() { return GetToken(TSqlParser.MOVE, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public Queue_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queue_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQueue_action(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQueue_action(this);
		}
	}

	[RuleVersion(0)]
	public Queue_actionContext queue_action() {
		Queue_actionContext _localctx = new Queue_actionContext(_ctx, State);
		EnterRule(_localctx, 454, RULE_queue_action);
		try {
			State = 6333;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,748,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6312; Match(REBUILD);
				State = 6318;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,745,_ctx) ) {
				case 1:
					{
					State = 6313; Match(WITH);
					State = 6314; Match(LR_BRACKET);
					State = 6315; queue_rebuild_options();
					State = 6316; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6320; Match(REORGANIZE);
				State = 6325;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,746,_ctx) ) {
				case 1:
					{
					State = 6321; Match(WITH);
					State = 6322; Match(LOB_COMPACTION);
					State = 6323; Match(EQUAL);
					State = 6324; on_off();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6327; Match(MOVE);
				State = 6328; Match(TO);
				State = 6331;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,747,_ctx) ) {
				case 1:
					{
					State = 6329; id_();
					}
					break;

				case 2:
					{
					State = 6330; Match(DEFAULT);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Queue_rebuild_optionsContext : ParserRuleContext {
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Queue_rebuild_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queue_rebuild_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQueue_rebuild_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQueue_rebuild_options(this);
		}
	}

	[RuleVersion(0)]
	public Queue_rebuild_optionsContext queue_rebuild_options() {
		Queue_rebuild_optionsContext _localctx = new Queue_rebuild_optionsContext(_ctx, State);
		EnterRule(_localctx, 456, RULE_queue_rebuild_options);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6335; Match(MAXDOP);
			State = 6336; Match(EQUAL);
			State = 6337; Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_contractContext : ParserRuleContext {
		public Id_Context owner_name;
		public Id_Context message_type_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public Contract_nameContext contract_name() {
			return GetRuleContext<Contract_nameContext>(0);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode[] SENT() { return GetTokens(TSqlParser.SENT); }
		public ITerminalNode SENT(int i) {
			return GetToken(TSqlParser.SENT, i);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] INITIATOR() { return GetTokens(TSqlParser.INITIATOR); }
		public ITerminalNode INITIATOR(int i) {
			return GetToken(TSqlParser.INITIATOR, i);
		}
		public ITerminalNode[] TARGET() { return GetTokens(TSqlParser.TARGET); }
		public ITerminalNode TARGET(int i) {
			return GetToken(TSqlParser.TARGET, i);
		}
		public ITerminalNode[] ANY() { return GetTokens(TSqlParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(TSqlParser.ANY, i);
		}
		public ITerminalNode[] DEFAULT() { return GetTokens(TSqlParser.DEFAULT); }
		public ITerminalNode DEFAULT(int i) {
			return GetToken(TSqlParser.DEFAULT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_contractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_contract; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_contract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_contract(this);
		}
	}

	[RuleVersion(0)]
	public Create_contractContext create_contract() {
		Create_contractContext _localctx = new Create_contractContext(_ctx, State);
		EnterRule(_localctx, 458, RULE_create_contract);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6339; Match(CREATE);
			State = 6340; Match(CONTRACT);
			State = 6341; contract_name();
			State = 6344;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,749,_ctx) ) {
			case 1:
				{
				State = 6342; Match(AUTHORIZATION);
				State = 6343; _localctx.owner_name = id_();
				}
				break;
			}
			State = 6346; Match(LR_BRACKET);
			State = 6357;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 6349;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,750,_ctx) ) {
					case 1:
						{
						State = 6347; _localctx.message_type_name = id_();
						}
						break;

					case 2:
						{
						State = 6348; Match(DEFAULT);
						}
						break;
					}
					State = 6351; Match(SENT);
					State = 6352; Match(BY);
					State = 6353;
					_la = _input.La(1);
					if ( !(_la==ANY || _la==INITIATOR || _la==TARGET) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 6355;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,751,_ctx) ) {
					case 1:
						{
						State = 6354; Match(COMMA);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6359;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,752,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 6361; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conversation_statementContext : ParserRuleContext {
		public Begin_conversation_timerContext begin_conversation_timer() {
			return GetRuleContext<Begin_conversation_timerContext>(0);
		}
		public Begin_conversation_dialogContext begin_conversation_dialog() {
			return GetRuleContext<Begin_conversation_dialogContext>(0);
		}
		public End_conversationContext end_conversation() {
			return GetRuleContext<End_conversationContext>(0);
		}
		public Get_conversationContext get_conversation() {
			return GetRuleContext<Get_conversationContext>(0);
		}
		public Send_conversationContext send_conversation() {
			return GetRuleContext<Send_conversationContext>(0);
		}
		public Waitfor_conversationContext waitfor_conversation() {
			return GetRuleContext<Waitfor_conversationContext>(0);
		}
		public Conversation_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversation_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterConversation_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitConversation_statement(this);
		}
	}

	[RuleVersion(0)]
	public Conversation_statementContext conversation_statement() {
		Conversation_statementContext _localctx = new Conversation_statementContext(_ctx, State);
		EnterRule(_localctx, 460, RULE_conversation_statement);
		try {
			State = 6369;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,753,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6363; begin_conversation_timer();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6364; begin_conversation_dialog();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6365; end_conversation();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6366; get_conversation();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6367; send_conversation();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6368; waitfor_conversation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Message_statementContext : ParserRuleContext {
		public Id_Context message_type_name;
		public Id_Context owner_name;
		public Id_Context schema_collection_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode VALIDATION() { return GetToken(TSqlParser.VALIDATION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode EMPTY() { return GetToken(TSqlParser.EMPTY, 0); }
		public ITerminalNode WELL_FORMED_XML() { return GetToken(TSqlParser.WELL_FORMED_XML, 0); }
		public ITerminalNode VALID_XML() { return GetToken(TSqlParser.VALID_XML, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Message_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_message_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMessage_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMessage_statement(this);
		}
	}

	[RuleVersion(0)]
	public Message_statementContext message_statement() {
		Message_statementContext _localctx = new Message_statementContext(_ctx, State);
		EnterRule(_localctx, 462, RULE_message_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6371; Match(CREATE);
			State = 6372; Match(MESSAGE);
			State = 6373; Match(TYPE);
			State = 6374; _localctx.message_type_name = id_();
			State = 6377;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,754,_ctx) ) {
			case 1:
				{
				State = 6375; Match(AUTHORIZATION);
				State = 6376; _localctx.owner_name = id_();
				}
				break;
			}
			{
			State = 6379; Match(VALIDATION);
			State = 6380; Match(EQUAL);
			State = 6389;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,755,_ctx) ) {
			case 1:
				{
				State = 6381; Match(NONE);
				}
				break;

			case 2:
				{
				State = 6382; Match(EMPTY);
				}
				break;

			case 3:
				{
				State = 6383; Match(WELL_FORMED_XML);
				}
				break;

			case 4:
				{
				State = 6384; Match(VALID_XML);
				State = 6385; Match(WITH);
				State = 6386; Match(SCHEMA);
				State = 6387; Match(COLLECTION);
				State = 6388; _localctx.schema_collection_name = id_();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_statementContext : ParserRuleContext {
		public ITerminalNode MERGE() { return GetToken(TSqlParser.MERGE, 0); }
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return GetRuleContext<Insert_with_table_hintsContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public When_matchesContext[] when_matches() {
			return GetRuleContexts<When_matchesContext>();
		}
		public When_matchesContext when_matches(int i) {
			return GetRuleContext<When_matchesContext>(i);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public Merge_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMerge_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMerge_statement(this);
		}
	}

	[RuleVersion(0)]
	public Merge_statementContext merge_statement() {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, State);
		EnterRule(_localctx, 464, RULE_merge_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6392;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,756,_ctx) ) {
			case 1:
				{
				State = 6391; with_expression();
				}
				break;
			}
			State = 6394; Match(MERGE);
			State = 6402;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,758,_ctx) ) {
			case 1:
				{
				State = 6395; Match(TOP);
				State = 6396; Match(LR_BRACKET);
				State = 6397; expression(0);
				State = 6398; Match(RR_BRACKET);
				State = 6400;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,757,_ctx) ) {
				case 1:
					{
					State = 6399; Match(PERCENT);
					}
					break;
				}
				}
				break;
			}
			State = 6405;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,759,_ctx) ) {
			case 1:
				{
				State = 6404; Match(INTO);
				}
				break;
			}
			State = 6407; ddl_object();
			State = 6409;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,760,_ctx) ) {
			case 1:
				{
				State = 6408; insert_with_table_hints();
				}
				break;
			}
			State = 6412;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,761,_ctx) ) {
			case 1:
				{
				State = 6411; as_table_alias();
				}
				break;
			}
			State = 6414; Match(USING);
			State = 6415; table_sources();
			State = 6416; Match(ON);
			State = 6417; search_condition(0);
			State = 6419;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 6418; when_matches();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6421;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,762,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 6424;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,763,_ctx) ) {
			case 1:
				{
				State = 6423; output_clause();
				}
				break;
			}
			State = 6427;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,764,_ctx) ) {
			case 1:
				{
				State = 6426; option_clause();
				}
				break;
			}
			State = 6429; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class When_matchesContext : ParserRuleContext {
		public ITerminalNode[] WHEN() { return GetTokens(TSqlParser.WHEN); }
		public ITerminalNode WHEN(int i) {
			return GetToken(TSqlParser.WHEN, i);
		}
		public ITerminalNode[] MATCHED() { return GetTokens(TSqlParser.MATCHED); }
		public ITerminalNode MATCHED(int i) {
			return GetToken(TSqlParser.MATCHED, i);
		}
		public ITerminalNode[] THEN() { return GetTokens(TSqlParser.THEN); }
		public ITerminalNode THEN(int i) {
			return GetToken(TSqlParser.THEN, i);
		}
		public Merge_matchedContext[] merge_matched() {
			return GetRuleContexts<Merge_matchedContext>();
		}
		public Merge_matchedContext merge_matched(int i) {
			return GetRuleContext<Merge_matchedContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(TSqlParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(TSqlParser.AND, i);
		}
		public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		public ITerminalNode[] NOT() { return GetTokens(TSqlParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(TSqlParser.NOT, i);
		}
		public Merge_not_matchedContext merge_not_matched() {
			return GetRuleContext<Merge_not_matchedContext>(0);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public ITerminalNode TARGET() { return GetToken(TSqlParser.TARGET, 0); }
		public ITerminalNode[] SOURCE() { return GetTokens(TSqlParser.SOURCE); }
		public ITerminalNode SOURCE(int i) {
			return GetToken(TSqlParser.SOURCE, i);
		}
		public When_matchesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_when_matches; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWhen_matches(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWhen_matches(this);
		}
	}

	[RuleVersion(0)]
	public When_matchesContext when_matches() {
		When_matchesContext _localctx = new When_matchesContext(_ctx, State);
		EnterRule(_localctx, 466, RULE_when_matches);
		try {
			int _alt;
			State = 6471;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,771,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6439;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 6431; Match(WHEN);
						State = 6432; Match(MATCHED);
						State = 6435;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,765,_ctx) ) {
						case 1:
							{
							State = 6433; Match(AND);
							State = 6434; search_condition(0);
							}
							break;
						}
						State = 6437; Match(THEN);
						State = 6438; merge_matched();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6441;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,766,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 6443; Match(WHEN);
				State = 6444; Match(NOT);
				State = 6445; Match(MATCHED);
				State = 6448;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,767,_ctx) ) {
				case 1:
					{
					State = 6446; Match(BY);
					State = 6447; Match(TARGET);
					}
					break;
				}
				State = 6452;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,768,_ctx) ) {
				case 1:
					{
					State = 6450; Match(AND);
					State = 6451; search_condition(0);
					}
					break;
				}
				State = 6454; Match(THEN);
				State = 6455; merge_not_matched();
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6467;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 6456; Match(WHEN);
						State = 6457; Match(NOT);
						State = 6458; Match(MATCHED);
						State = 6459; Match(BY);
						State = 6460; Match(SOURCE);
						State = 6463;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,769,_ctx) ) {
						case 1:
							{
							State = 6461; Match(AND);
							State = 6462; search_condition(0);
							}
							break;
						}
						State = 6465; Match(THEN);
						State = 6466; merge_matched();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6469;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,770,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_matchedContext : ParserRuleContext {
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public Update_elem_mergeContext[] update_elem_merge() {
			return GetRuleContexts<Update_elem_mergeContext>();
		}
		public Update_elem_mergeContext update_elem_merge(int i) {
			return GetRuleContext<Update_elem_mergeContext>(i);
		}
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public Merge_matchedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_matched; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMerge_matched(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMerge_matched(this);
		}
	}

	[RuleVersion(0)]
	public Merge_matchedContext merge_matched() {
		Merge_matchedContext _localctx = new Merge_matchedContext(_ctx, State);
		EnterRule(_localctx, 468, RULE_merge_matched);
		try {
			int _alt;
			State = 6484;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,773,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6473; Match(UPDATE);
				State = 6474; Match(SET);
				State = 6475; update_elem_merge();
				State = 6480;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,772,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6476; Match(COMMA);
						State = 6477; update_elem_merge();
						}
						} 
					}
					State = 6482;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,772,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6483; Match(DELETE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_not_matchedContext : ParserRuleContext {
		public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		public Table_value_constructorContext table_value_constructor() {
			return GetRuleContext<Table_value_constructorContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Merge_not_matchedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_not_matched; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMerge_not_matched(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMerge_not_matched(this);
		}
	}

	[RuleVersion(0)]
	public Merge_not_matchedContext merge_not_matched() {
		Merge_not_matchedContext _localctx = new Merge_not_matchedContext(_ctx, State);
		EnterRule(_localctx, 470, RULE_merge_not_matched);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6486; Match(INSERT);
			State = 6491;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,774,_ctx) ) {
			case 1:
				{
				State = 6487; Match(LR_BRACKET);
				State = 6488; column_name_list();
				State = 6489; Match(RR_BRACKET);
				}
				break;
			}
			State = 6496;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,775,_ctx) ) {
			case 1:
				{
				State = 6493; table_value_constructor();
				}
				break;

			case 2:
				{
				State = 6494; Match(DEFAULT);
				State = 6495; Match(VALUES);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_statementContext : ParserRuleContext {
		public IToken cursor_var;
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public Delete_statement_fromContext delete_statement_from() {
			return GetRuleContext<Delete_statement_fromContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode[] FROM() { return GetTokens(TSqlParser.FROM); }
		public ITerminalNode FROM(int i) {
			return GetToken(TSqlParser.FROM, i);
		}
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return GetRuleContext<Insert_with_table_hintsContext>(0);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode CURRENT() { return GetToken(TSqlParser.CURRENT, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public Delete_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDelete_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDelete_statement(this);
		}
	}

	[RuleVersion(0)]
	public Delete_statementContext delete_statement() {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, State);
		EnterRule(_localctx, 472, RULE_delete_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6499;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,776,_ctx) ) {
			case 1:
				{
				State = 6498; with_expression();
				}
				break;
			}
			State = 6501; Match(DELETE);
			State = 6511;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,778,_ctx) ) {
			case 1:
				{
				State = 6502; Match(TOP);
				State = 6503; Match(LR_BRACKET);
				State = 6504; expression(0);
				State = 6505; Match(RR_BRACKET);
				State = 6507;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,777,_ctx) ) {
				case 1:
					{
					State = 6506; Match(PERCENT);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 6509; Match(TOP);
				State = 6510; Match(DECIMAL);
				}
				break;
			}
			State = 6514;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,779,_ctx) ) {
			case 1:
				{
				State = 6513; Match(FROM);
				}
				break;
			}
			State = 6516; delete_statement_from();
			State = 6518;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,780,_ctx) ) {
			case 1:
				{
				State = 6517; insert_with_table_hints();
				}
				break;
			}
			State = 6521;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,781,_ctx) ) {
			case 1:
				{
				State = 6520; output_clause();
				}
				break;
			}
			State = 6525;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,782,_ctx) ) {
			case 1:
				{
				State = 6523; Match(FROM);
				State = 6524; table_sources();
				}
				break;
			}
			State = 6540;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,786,_ctx) ) {
			case 1:
				{
				State = 6527; Match(WHERE);
				State = 6538;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,785,_ctx) ) {
				case 1:
					{
					State = 6528; search_condition(0);
					}
					break;

				case 2:
					{
					State = 6529; Match(CURRENT);
					State = 6530; Match(OF);
					State = 6536;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,784,_ctx) ) {
					case 1:
						{
						State = 6532;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,783,_ctx) ) {
						case 1:
							{
							State = 6531; Match(GLOBAL);
							}
							break;
						}
						State = 6534; cursor_name();
						}
						break;

					case 2:
						{
						State = 6535; _localctx.cursor_var = Match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			State = 6543;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,787,_ctx) ) {
			case 1:
				{
				State = 6542; for_clause();
				}
				break;
			}
			State = 6546;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,788,_ctx) ) {
			case 1:
				{
				State = 6545; option_clause();
				}
				break;
			}
			State = 6549;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,789,_ctx) ) {
			case 1:
				{
				State = 6548; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_statement_fromContext : ParserRuleContext {
		public IToken table_var;
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Delete_statement_fromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_statement_from; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDelete_statement_from(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDelete_statement_from(this);
		}
	}

	[RuleVersion(0)]
	public Delete_statement_fromContext delete_statement_from() {
		Delete_statement_fromContext _localctx = new Delete_statement_fromContext(_ctx, State);
		EnterRule(_localctx, 474, RULE_delete_statement_from);
		try {
			State = 6555;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,790,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6551; ddl_object();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6552; table_alias();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6553; rowset_function_limited();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6554; _localctx.table_var = Match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_statementContext : ParserRuleContext {
		public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		public Insert_statement_valueContext insert_statement_value() {
			return GetRuleContext<Insert_statement_valueContext>(0);
		}
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return GetRuleContext<Insert_with_table_hintsContext>(0);
		}
		public Insert_column_name_listContext insert_column_name_list() {
			return GetRuleContext<Insert_column_name_listContext>(0);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public Insert_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_statement(this);
		}
	}

	[RuleVersion(0)]
	public Insert_statementContext insert_statement() {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, State);
		EnterRule(_localctx, 476, RULE_insert_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6558;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,791,_ctx) ) {
			case 1:
				{
				State = 6557; with_expression();
				}
				break;
			}
			State = 6560; Match(INSERT);
			State = 6568;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,793,_ctx) ) {
			case 1:
				{
				State = 6561; Match(TOP);
				State = 6562; Match(LR_BRACKET);
				State = 6563; expression(0);
				State = 6564; Match(RR_BRACKET);
				State = 6566;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,792,_ctx) ) {
				case 1:
					{
					State = 6565; Match(PERCENT);
					}
					break;
				}
				}
				break;
			}
			State = 6571;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,794,_ctx) ) {
			case 1:
				{
				State = 6570; Match(INTO);
				}
				break;
			}
			State = 6575;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,795,_ctx) ) {
			case 1:
				{
				State = 6573; ddl_object();
				}
				break;

			case 2:
				{
				State = 6574; rowset_function_limited();
				}
				break;
			}
			State = 6578;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,796,_ctx) ) {
			case 1:
				{
				State = 6577; insert_with_table_hints();
				}
				break;
			}
			State = 6584;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,797,_ctx) ) {
			case 1:
				{
				State = 6580; Match(LR_BRACKET);
				State = 6581; insert_column_name_list();
				State = 6582; Match(RR_BRACKET);
				}
				break;
			}
			State = 6587;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,798,_ctx) ) {
			case 1:
				{
				State = 6586; output_clause();
				}
				break;
			}
			State = 6589; insert_statement_value();
			State = 6591;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,799,_ctx) ) {
			case 1:
				{
				State = 6590; for_clause();
				}
				break;
			}
			State = 6594;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,800,_ctx) ) {
			case 1:
				{
				State = 6593; option_clause();
				}
				break;
			}
			State = 6597;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,801,_ctx) ) {
			case 1:
				{
				State = 6596; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_statement_valueContext : ParserRuleContext {
		public Table_value_constructorContext table_value_constructor() {
			return GetRuleContext<Table_value_constructorContext>(0);
		}
		public Derived_tableContext derived_table() {
			return GetRuleContext<Derived_tableContext>(0);
		}
		public Execute_statementContext execute_statement() {
			return GetRuleContext<Execute_statementContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Insert_statement_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_statement_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_statement_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_statement_value(this);
		}
	}

	[RuleVersion(0)]
	public Insert_statement_valueContext insert_statement_value() {
		Insert_statement_valueContext _localctx = new Insert_statement_valueContext(_ctx, State);
		EnterRule(_localctx, 478, RULE_insert_statement_value);
		try {
			State = 6604;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,802,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6599; table_value_constructor();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6600; derived_table();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6601; execute_statement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6602; Match(DEFAULT);
				State = 6603; Match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Receive_statementContext : ParserRuleContext {
		public Id_Context table_variable;
		public Search_conditionContext where;
		public ITerminalNode RECEIVE() { return GetToken(TSqlParser.RECEIVE, 0); }
		public Select_list_elemContext select_list_elem() {
			return GetRuleContext<Select_list_elemContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode DISTINCT() { return GetToken(TSqlParser.DISTINCT, 0); }
		public Top_clauseContext top_clause() {
			return GetRuleContext<Top_clauseContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Receive_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receive_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterReceive_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitReceive_statement(this);
		}
	}

	[RuleVersion(0)]
	public Receive_statementContext receive_statement() {
		Receive_statementContext _localctx = new Receive_statementContext(_ctx, State);
		EnterRule(_localctx, 480, RULE_receive_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6607;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,803,_ctx) ) {
			case 1:
				{
				State = 6606; Match(LR_BRACKET);
				}
				break;
			}
			State = 6609; Match(RECEIVE);
			State = 6613;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,804,_ctx) ) {
			case 1:
				{
				State = 6610; Match(ALL);
				}
				break;

			case 2:
				{
				State = 6611; Match(DISTINCT);
				}
				break;

			case 3:
				{
				State = 6612; top_clause();
				}
				break;
			}
			State = 6615; select_list_elem();
			State = 6616; Match(FROM);
			State = 6617; full_table_name();
			State = 6623;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,805,_ctx) ) {
			case 1:
				{
				State = 6618; Match(INTO);
				State = 6619; _localctx.table_variable = id_();
				{
				State = 6620; Match(WHERE);
				State = 6621; _localctx.where = search_condition(0);
				}
				}
				break;
			}
			State = 6626;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,806,_ctx) ) {
			case 1:
				{
				State = 6625; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_statement_standaloneContext : ParserRuleContext {
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public Select_statement_standaloneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_statement_standalone; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_statement_standalone(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_statement_standalone(this);
		}
	}

	[RuleVersion(0)]
	public Select_statement_standaloneContext select_statement_standalone() {
		Select_statement_standaloneContext _localctx = new Select_statement_standaloneContext(_ctx, State);
		EnterRule(_localctx, 482, RULE_select_statement_standalone);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6629;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,807,_ctx) ) {
			case 1:
				{
				State = 6628; with_expression();
				}
				break;
			}
			State = 6631; select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_statementContext : ParserRuleContext {
		public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_statement(this);
		}
	}

	[RuleVersion(0)]
	public Select_statementContext select_statement() {
		Select_statementContext _localctx = new Select_statementContext(_ctx, State);
		EnterRule(_localctx, 484, RULE_select_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6633; query_expression();
			State = 6635;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,808,_ctx) ) {
			case 1:
				{
				State = 6634; order_by_clause();
				}
				break;
			}
			State = 6638;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,809,_ctx) ) {
			case 1:
				{
				State = 6637; for_clause();
				}
				break;
			}
			State = 6641;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,810,_ctx) ) {
			case 1:
				{
				State = 6640; option_clause();
				}
				break;
			}
			State = 6644;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,811,_ctx) ) {
			case 1:
				{
				State = 6643; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public TimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTime(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTime(this);
		}
	}

	[RuleVersion(0)]
	public TimeContext time() {
		TimeContext _localctx = new TimeContext(_ctx, State);
		EnterRule(_localctx, 486, RULE_time);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6648;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,812,_ctx) ) {
			case 1:
				{
				State = 6646; Match(LOCAL_ID);
				}
				break;

			case 2:
				{
				State = 6647; constant();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_statementContext : ParserRuleContext {
		public IToken cursor_var;
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public Update_elemContext[] update_elem() {
			return GetRuleContexts<Update_elemContext>();
		}
		public Update_elemContext update_elem(int i) {
			return GetRuleContext<Update_elemContext>(i);
		}
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode CURRENT() { return GetToken(TSqlParser.CURRENT, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public Update_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_statement(this);
		}
	}

	[RuleVersion(0)]
	public Update_statementContext update_statement() {
		Update_statementContext _localctx = new Update_statementContext(_ctx, State);
		EnterRule(_localctx, 488, RULE_update_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6651;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,813,_ctx) ) {
			case 1:
				{
				State = 6650; with_expression();
				}
				break;
			}
			State = 6653; Match(UPDATE);
			State = 6661;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,815,_ctx) ) {
			case 1:
				{
				State = 6654; Match(TOP);
				State = 6655; Match(LR_BRACKET);
				State = 6656; expression(0);
				State = 6657; Match(RR_BRACKET);
				State = 6659;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,814,_ctx) ) {
				case 1:
					{
					State = 6658; Match(PERCENT);
					}
					break;
				}
				}
				break;
			}
			State = 6665;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,816,_ctx) ) {
			case 1:
				{
				State = 6663; ddl_object();
				}
				break;

			case 2:
				{
				State = 6664; rowset_function_limited();
				}
				break;
			}
			State = 6668;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,817,_ctx) ) {
			case 1:
				{
				State = 6667; with_table_hints();
				}
				break;
			}
			State = 6670; Match(SET);
			State = 6671; update_elem();
			State = 6676;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,818,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6672; Match(COMMA);
					State = 6673; update_elem();
					}
					} 
				}
				State = 6678;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,818,_ctx);
			}
			State = 6680;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,819,_ctx) ) {
			case 1:
				{
				State = 6679; output_clause();
				}
				break;
			}
			State = 6684;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,820,_ctx) ) {
			case 1:
				{
				State = 6682; Match(FROM);
				State = 6683; table_sources();
				}
				break;
			}
			State = 6699;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,824,_ctx) ) {
			case 1:
				{
				State = 6686; Match(WHERE);
				State = 6697;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,823,_ctx) ) {
				case 1:
					{
					State = 6687; search_condition(0);
					}
					break;

				case 2:
					{
					State = 6688; Match(CURRENT);
					State = 6689; Match(OF);
					State = 6695;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,822,_ctx) ) {
					case 1:
						{
						State = 6691;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,821,_ctx) ) {
						case 1:
							{
							State = 6690; Match(GLOBAL);
							}
							break;
						}
						State = 6693; cursor_name();
						}
						break;

					case 2:
						{
						State = 6694; _localctx.cursor_var = Match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			State = 6702;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,825,_ctx) ) {
			case 1:
				{
				State = 6701; for_clause();
				}
				break;
			}
			State = 6705;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,826,_ctx) ) {
			case 1:
				{
				State = 6704; option_clause();
				}
				break;
			}
			State = 6708;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,827,_ctx) ) {
			case 1:
				{
				State = 6707; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_clauseContext : ParserRuleContext {
		public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		public Output_dml_list_elemContext[] output_dml_list_elem() {
			return GetRuleContexts<Output_dml_list_elemContext>();
		}
		public Output_dml_list_elemContext output_dml_list_elem(int i) {
			return GetRuleContext<Output_dml_list_elemContext>(i);
		}
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Output_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOutput_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOutput_clause(this);
		}
	}

	[RuleVersion(0)]
	public Output_clauseContext output_clause() {
		Output_clauseContext _localctx = new Output_clauseContext(_ctx, State);
		EnterRule(_localctx, 490, RULE_output_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6710; Match(OUTPUT);
			State = 6711; output_dml_list_elem();
			State = 6716;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,828,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6712; Match(COMMA);
					State = 6713; output_dml_list_elem();
					}
					} 
				}
				State = 6718;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,828,_ctx);
			}
			State = 6730;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,831,_ctx) ) {
			case 1:
				{
				State = 6719; Match(INTO);
				State = 6722;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,829,_ctx) ) {
				case 1:
					{
					State = 6720; Match(LOCAL_ID);
					}
					break;

				case 2:
					{
					State = 6721; table_name();
					}
					break;
				}
				State = 6728;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,830,_ctx) ) {
				case 1:
					{
					State = 6724; Match(LR_BRACKET);
					State = 6725; column_name_list();
					State = 6726; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_dml_list_elemContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AsteriskContext asterisk() {
			return GetRuleContext<AsteriskContext>(0);
		}
		public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public Output_dml_list_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_dml_list_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOutput_dml_list_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOutput_dml_list_elem(this);
		}
	}

	[RuleVersion(0)]
	public Output_dml_list_elemContext output_dml_list_elem() {
		Output_dml_list_elemContext _localctx = new Output_dml_list_elemContext(_ctx, State);
		EnterRule(_localctx, 492, RULE_output_dml_list_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6734;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,832,_ctx) ) {
			case 1:
				{
				State = 6732; expression(0);
				}
				break;

			case 2:
				{
				State = 6733; asterisk();
				}
				break;
			}
			State = 6737;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,833,_ctx) ) {
			case 1:
				{
				State = 6736; as_column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_databaseContext : ParserRuleContext {
		public Id_Context database;
		public Id_Context collation_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode CONTAINMENT() { return GetToken(TSqlParser.CONTAINMENT, 0); }
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public Database_file_specContext[] database_file_spec() {
			return GetRuleContexts<Database_file_specContext>();
		}
		public Database_file_specContext database_file_spec(int i) {
			return GetRuleContext<Database_file_specContext>(i);
		}
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Create_database_optionContext[] create_database_option() {
			return GetRuleContexts<Create_database_optionContext>();
		}
		public Create_database_optionContext create_database_option(int i) {
			return GetRuleContext<Create_database_optionContext>(i);
		}
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode PARTIAL() { return GetToken(TSqlParser.PARTIAL, 0); }
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public Create_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_database(this);
		}
	}

	[RuleVersion(0)]
	public Create_databaseContext create_database() {
		Create_databaseContext _localctx = new Create_databaseContext(_ctx, State);
		EnterRule(_localctx, 494, RULE_create_database);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6739; Match(CREATE);
			State = 6740; Match(DATABASE);
			{
			State = 6741; _localctx.database = id_();
			}
			State = 6745;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,834,_ctx) ) {
			case 1:
				{
				State = 6742; Match(CONTAINMENT);
				State = 6743; Match(EQUAL);
				State = 6744;
				_la = _input.La(1);
				if ( !(_la==NONE || _la==PARTIAL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 6759;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,837,_ctx) ) {
			case 1:
				{
				State = 6747; Match(ON);
				State = 6749;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,835,_ctx) ) {
				case 1:
					{
					State = 6748; Match(PRIMARY);
					}
					break;
				}
				State = 6751; database_file_spec();
				State = 6756;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,836,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6752; Match(COMMA);
						State = 6753; database_file_spec();
						}
						} 
					}
					State = 6758;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,836,_ctx);
				}
				}
				break;
			}
			State = 6771;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,839,_ctx) ) {
			case 1:
				{
				State = 6761; Match(LOG);
				State = 6762; Match(ON);
				State = 6763; database_file_spec();
				State = 6768;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,838,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6764; Match(COMMA);
						State = 6765; database_file_spec();
						}
						} 
					}
					State = 6770;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,838,_ctx);
				}
				}
				break;
			}
			State = 6775;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,840,_ctx) ) {
			case 1:
				{
				State = 6773; Match(COLLATE);
				State = 6774; _localctx.collation_name = id_();
				}
				break;
			}
			State = 6786;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,842,_ctx) ) {
			case 1:
				{
				State = 6777; Match(WITH);
				State = 6778; create_database_option();
				State = 6783;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,841,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6779; Match(COMMA);
						State = 6780; create_database_option();
						}
						} 
					}
					State = 6785;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,841,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_database_azureContext : ParserRuleContext {
		public Id_Context database;
		public Id_Context collation_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode CONTAINMENT() { return GetToken(TSqlParser.CONTAINMENT, 0); }
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public Database_file_specContext[] database_file_spec() {
			return GetRuleContexts<Database_file_specContext>();
		}
		public Database_file_specContext database_file_spec(int i) {
			return GetRuleContext<Database_file_specContext>(i);
		}
		public Create_database_azure_optionsContext[] create_database_azure_options() {
			return GetRuleContexts<Create_database_azure_optionsContext>();
		}
		public Create_database_azure_optionsContext create_database_azure_options(int i) {
			return GetRuleContext<Create_database_azure_optionsContext>(i);
		}
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Create_database_optionContext[] create_database_option() {
			return GetRuleContexts<Create_database_optionContext>();
		}
		public Create_database_optionContext create_database_option(int i) {
			return GetRuleContext<Create_database_optionContext>(i);
		}
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode PARTIAL() { return GetToken(TSqlParser.PARTIAL, 0); }
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public Create_database_azureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_database_azure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_database_azure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_database_azure(this);
		}
	}

	[RuleVersion(0)]
	public Create_database_azureContext create_database_azure() {
		Create_database_azureContext _localctx = new Create_database_azureContext(_ctx, State);
		EnterRule(_localctx, 496, RULE_create_database_azure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6788; Match(CREATE);
			State = 6789; Match(DATABASE);
			{
			State = 6790; _localctx.database = id_();
			}
			State = 6794;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,843,_ctx) ) {
			case 1:
				{
				State = 6791; Match(CONTAINMENT);
				State = 6792; Match(EQUAL);
				State = 6793;
				_la = _input.La(1);
				if ( !(_la==NONE || _la==PARTIAL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 6808;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,846,_ctx) ) {
			case 1:
				{
				State = 6796; Match(ON);
				State = 6798;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,844,_ctx) ) {
				case 1:
					{
					State = 6797; Match(PRIMARY);
					}
					break;
				}
				State = 6800; database_file_spec();
				State = 6805;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,845,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6801; Match(COMMA);
						State = 6802; database_file_spec();
						}
						} 
					}
					State = 6807;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,845,_ctx);
				}
				}
				break;
			}
			State = 6821;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,848,_ctx) ) {
			case 1:
				{
				State = 6810; Match(LR_BRACKET);
				State = 6811; create_database_azure_options();
				State = 6816;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,847,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6812; Match(COMMA);
						State = 6813; create_database_azure_options();
						}
						} 
					}
					State = 6818;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,847,_ctx);
				}
				State = 6819; Match(RR_BRACKET);
				}
				break;
			}
			State = 6833;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,850,_ctx) ) {
			case 1:
				{
				State = 6823; Match(LOG);
				State = 6824; Match(ON);
				State = 6825; database_file_spec();
				State = 6830;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,849,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6826; Match(COMMA);
						State = 6827; database_file_spec();
						}
						} 
					}
					State = 6832;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,849,_ctx);
				}
				}
				break;
			}
			State = 6837;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,851,_ctx) ) {
			case 1:
				{
				State = 6835; Match(COLLATE);
				State = 6836; _localctx.collation_name = id_();
				}
				break;
			}
			State = 6848;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,853,_ctx) ) {
			case 1:
				{
				State = 6839; Match(WITH);
				State = 6840; create_database_option();
				State = 6845;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,852,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 6841; Match(COMMA);
						State = 6842; create_database_option();
						}
						} 
					}
					State = 6847;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,852,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_database_azure_optionsContext : ParserRuleContext {
		public ITerminalNode MAXSIZE() { return GetToken(TSqlParser.MAXSIZE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode MB() { return GetToken(TSqlParser.MB, 0); }
		public ITerminalNode GB() { return GetToken(TSqlParser.GB, 0); }
		public ITerminalNode SERVICE_OBJECTIVE() { return GetToken(TSqlParser.SERVICE_OBJECTIVE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode EDITION() { return GetToken(TSqlParser.EDITION, 0); }
		public Create_database_azure_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_database_azure_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_database_azure_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_database_azure_options(this);
		}
	}

	[RuleVersion(0)]
	public Create_database_azure_optionsContext create_database_azure_options() {
		Create_database_azure_optionsContext _localctx = new Create_database_azure_optionsContext(_ctx, State);
		EnterRule(_localctx, 498, RULE_create_database_azure_options);
		int _la;
		try {
			State = 6860;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,854,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6850; Match(MAXSIZE);
				State = 6851; Match(EQUAL);
				State = 6852; Match(DECIMAL);
				State = 6853;
				_la = _input.La(1);
				if ( !(_la==GB || _la==MB) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6854; Match(SERVICE_OBJECTIVE);
				State = 6855; Match(EQUAL);
				State = 6856; Match(STRING);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6857; Match(EDITION);
				State = 6858; Match(EQUAL);
				State = 6859; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_indexContext : ParserRuleContext {
		public Search_conditionContext where;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		public ITerminalNode INCLUDE() { return GetToken(TSqlParser.INCLUDE, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Create_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_index(this);
		}
	}

	[RuleVersion(0)]
	public Create_indexContext create_index() {
		Create_indexContext _localctx = new Create_indexContext(_ctx, State);
		EnterRule(_localctx, 500, RULE_create_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6862; Match(CREATE);
			State = 6864;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,855,_ctx) ) {
			case 1:
				{
				State = 6863; Match(UNIQUE);
				}
				break;
			}
			State = 6867;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,856,_ctx) ) {
			case 1:
				{
				State = 6866; clustered();
				}
				break;
			}
			State = 6869; Match(INDEX);
			State = 6870; id_();
			State = 6871; Match(ON);
			State = 6872; table_name();
			State = 6873; Match(LR_BRACKET);
			State = 6874; column_name_list_with_order();
			State = 6875; Match(RR_BRACKET);
			State = 6881;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,857,_ctx) ) {
			case 1:
				{
				State = 6876; Match(INCLUDE);
				State = 6877; Match(LR_BRACKET);
				State = 6878; column_name_list();
				State = 6879; Match(RR_BRACKET);
				}
				break;
			}
			State = 6885;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,858,_ctx) ) {
			case 1:
				{
				State = 6883; Match(WHERE);
				State = 6884; _localctx.where = search_condition(0);
				}
				break;
			}
			State = 6888;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,859,_ctx) ) {
			case 1:
				{
				State = 6887; index_options();
				}
				break;
			}
			State = 6892;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,860,_ctx) ) {
			case 1:
				{
				State = 6890; Match(ON);
				State = 6891; id_();
				}
				break;
			}
			State = 6895;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,861,_ctx) ) {
			case 1:
				{
				State = 6894; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_index_optionsContext : ParserRuleContext {
		public Relational_index_optionContext[] relational_index_option() {
			return GetRuleContexts<Relational_index_optionContext>();
		}
		public Relational_index_optionContext relational_index_option(int i) {
			return GetRuleContext<Relational_index_optionContext>(i);
		}
		public Create_index_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_index_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_index_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_index_options(this);
		}
	}

	[RuleVersion(0)]
	public Create_index_optionsContext create_index_options() {
		Create_index_optionsContext _localctx = new Create_index_optionsContext(_ctx, State);
		EnterRule(_localctx, 502, RULE_create_index_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6897; Match(WITH);
			State = 6898; Match(LR_BRACKET);
			State = 6899; relational_index_option();
			State = 6904;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,862,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6900; Match(COMMA);
					State = 6901; relational_index_option();
					}
					} 
				}
				State = 6906;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,862,_ctx);
			}
			State = 6907; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_index_optionContext : ParserRuleContext {
		public Rebuild_index_optionContext rebuild_index_option() {
			return GetRuleContext<Rebuild_index_optionContext>(0);
		}
		public ITerminalNode DROP_EXISTING() { return GetToken(TSqlParser.DROP_EXISTING, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode OPTIMIZE_FOR_SEQUENTIAL_KEY() { return GetToken(TSqlParser.OPTIMIZE_FOR_SEQUENTIAL_KEY, 0); }
		public Relational_index_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_index_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRelational_index_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRelational_index_option(this);
		}
	}

	[RuleVersion(0)]
	public Relational_index_optionContext relational_index_option() {
		Relational_index_optionContext _localctx = new Relational_index_optionContext(_ctx, State);
		EnterRule(_localctx, 504, RULE_relational_index_option);
		try {
			State = 6916;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,863,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6909; rebuild_index_option();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6910; Match(DROP_EXISTING);
				State = 6911; Match(EQUAL);
				State = 6912; on_off();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6913; Match(OPTIMIZE_FOR_SEQUENTIAL_KEY);
				State = 6914; Match(EQUAL);
				State = 6915; on_off();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_indexContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode PAUSE() { return GetToken(TSqlParser.PAUSE, 0); }
		public ITerminalNode ABORT() { return GetToken(TSqlParser.ABORT, 0); }
		public Rebuild_partitionContext rebuild_partition() {
			return GetRuleContext<Rebuild_partitionContext>(0);
		}
		public Alter_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_index(this);
		}
	}

	[RuleVersion(0)]
	public Alter_indexContext alter_index() {
		Alter_indexContext _localctx = new Alter_indexContext(_ctx, State);
		EnterRule(_localctx, 506, RULE_alter_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6918; Match(ALTER);
			State = 6919; Match(INDEX);
			State = 6920; id_();
			State = 6921; Match(ON);
			State = 6922; table_name();
			State = 6927;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,864,_ctx) ) {
			case 1:
				{
				State = 6923; Match(DISABLE);
				}
				break;

			case 2:
				{
				State = 6924; Match(PAUSE);
				}
				break;

			case 3:
				{
				State = 6925; Match(ABORT);
				}
				break;

			case 4:
				{
				State = 6926; rebuild_partition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Resumable_index_optionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Resumable_index_optionContext[] resumable_index_option() {
			return GetRuleContexts<Resumable_index_optionContext>();
		}
		public Resumable_index_optionContext resumable_index_option(int i) {
			return GetRuleContext<Resumable_index_optionContext>(i);
		}
		public Resumable_index_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resumable_index_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterResumable_index_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitResumable_index_options(this);
		}
	}

	[RuleVersion(0)]
	public Resumable_index_optionsContext resumable_index_options() {
		Resumable_index_optionsContext _localctx = new Resumable_index_optionsContext(_ctx, State);
		EnterRule(_localctx, 508, RULE_resumable_index_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6929; Match(WITH);
			State = 6930; Match(LR_BRACKET);
			{
			State = 6931; resumable_index_option();
			State = 6936;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,865,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6932; Match(COMMA);
					State = 6933; resumable_index_option();
					}
					} 
				}
				State = 6938;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,865,_ctx);
			}
			}
			State = 6939; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Resumable_index_optionContext : ParserRuleContext {
		public IToken max_degree_of_parallelism;
		public IToken max_duration;
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode MAX_DURATION() { return GetToken(TSqlParser.MAX_DURATION, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public Low_priority_lock_waitContext low_priority_lock_wait() {
			return GetRuleContext<Low_priority_lock_waitContext>(0);
		}
		public Resumable_index_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resumable_index_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterResumable_index_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitResumable_index_option(this);
		}
	}

	[RuleVersion(0)]
	public Resumable_index_optionContext resumable_index_option() {
		Resumable_index_optionContext _localctx = new Resumable_index_optionContext(_ctx, State);
		EnterRule(_localctx, 510, RULE_resumable_index_option);
		try {
			State = 6951;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,867,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6941; Match(MAXDOP);
				State = 6942; Match(EQUAL);
				State = 6943; _localctx.max_degree_of_parallelism = Match(DECIMAL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6944; Match(MAX_DURATION);
				State = 6945; Match(EQUAL);
				State = 6946; _localctx.max_duration = Match(DECIMAL);
				State = 6948;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,866,_ctx) ) {
				case 1:
					{
					State = 6947; Match(MINUTES);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6950; low_priority_lock_wait();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reorganize_partitionContext : ParserRuleContext {
		public ITerminalNode REORGANIZE() { return GetToken(TSqlParser.REORGANIZE, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Reorganize_optionsContext reorganize_options() {
			return GetRuleContext<Reorganize_optionsContext>(0);
		}
		public Reorganize_partitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reorganize_partition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterReorganize_partition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitReorganize_partition(this);
		}
	}

	[RuleVersion(0)]
	public Reorganize_partitionContext reorganize_partition() {
		Reorganize_partitionContext _localctx = new Reorganize_partitionContext(_ctx, State);
		EnterRule(_localctx, 512, RULE_reorganize_partition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6953; Match(REORGANIZE);
			State = 6957;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,868,_ctx) ) {
			case 1:
				{
				State = 6954; Match(PARTITION);
				State = 6955; Match(EQUAL);
				State = 6956; Match(DECIMAL);
				}
				break;
			}
			State = 6960;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,869,_ctx) ) {
			case 1:
				{
				State = 6959; reorganize_options();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reorganize_optionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Reorganize_optionContext[] reorganize_option() {
			return GetRuleContexts<Reorganize_optionContext>();
		}
		public Reorganize_optionContext reorganize_option(int i) {
			return GetRuleContext<Reorganize_optionContext>(i);
		}
		public Reorganize_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reorganize_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterReorganize_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitReorganize_options(this);
		}
	}

	[RuleVersion(0)]
	public Reorganize_optionsContext reorganize_options() {
		Reorganize_optionsContext _localctx = new Reorganize_optionsContext(_ctx, State);
		EnterRule(_localctx, 514, RULE_reorganize_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6962; Match(WITH);
			State = 6963; Match(LR_BRACKET);
			{
			State = 6964; reorganize_option();
			State = 6969;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,870,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6965; Match(COMMA);
					State = 6966; reorganize_option();
					}
					} 
				}
				State = 6971;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,870,_ctx);
			}
			}
			State = 6972; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reorganize_optionContext : ParserRuleContext {
		public ITerminalNode LOB_COMPACTION() { return GetToken(TSqlParser.LOB_COMPACTION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode COMPRESS_ALL_ROW_GROUPS() { return GetToken(TSqlParser.COMPRESS_ALL_ROW_GROUPS, 0); }
		public Reorganize_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reorganize_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterReorganize_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitReorganize_option(this);
		}
	}

	[RuleVersion(0)]
	public Reorganize_optionContext reorganize_option() {
		Reorganize_optionContext _localctx = new Reorganize_optionContext(_ctx, State);
		EnterRule(_localctx, 516, RULE_reorganize_option);
		try {
			State = 6980;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,871,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6974; Match(LOB_COMPACTION);
				State = 6975; Match(EQUAL);
				State = 6976; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6977; Match(COMPRESS_ALL_ROW_GROUPS);
				State = 6978; Match(EQUAL);
				State = 6979; on_off();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_index_optionsContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public Set_index_optionContext[] set_index_option() {
			return GetRuleContexts<Set_index_optionContext>();
		}
		public Set_index_optionContext set_index_option(int i) {
			return GetRuleContext<Set_index_optionContext>(i);
		}
		public Set_index_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_index_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSet_index_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSet_index_options(this);
		}
	}

	[RuleVersion(0)]
	public Set_index_optionsContext set_index_options() {
		Set_index_optionsContext _localctx = new Set_index_optionsContext(_ctx, State);
		EnterRule(_localctx, 518, RULE_set_index_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6982; Match(SET);
			State = 6983; Match(LR_BRACKET);
			State = 6984; set_index_option();
			State = 6989;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,872,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 6985; Match(COMMA);
					State = 6986; set_index_option();
					}
					} 
				}
				State = 6991;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,872,_ctx);
			}
			State = 6992; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_index_optionContext : ParserRuleContext {
		public IToken delay;
		public ITerminalNode ALLOW_ROW_LOCKS() { return GetToken(TSqlParser.ALLOW_ROW_LOCKS, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode ALLOW_PAGE_LOCKS() { return GetToken(TSqlParser.ALLOW_PAGE_LOCKS, 0); }
		public ITerminalNode OPTIMIZE_FOR_SEQUENTIAL_KEY() { return GetToken(TSqlParser.OPTIMIZE_FOR_SEQUENTIAL_KEY, 0); }
		public ITerminalNode IGNORE_DUP_KEY() { return GetToken(TSqlParser.IGNORE_DUP_KEY, 0); }
		public ITerminalNode STATISTICS_NORECOMPUTE() { return GetToken(TSqlParser.STATISTICS_NORECOMPUTE, 0); }
		public ITerminalNode COMPRESSION_DELAY() { return GetToken(TSqlParser.COMPRESSION_DELAY, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public Set_index_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_index_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSet_index_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSet_index_option(this);
		}
	}

	[RuleVersion(0)]
	public Set_index_optionContext set_index_option() {
		Set_index_optionContext _localctx = new Set_index_optionContext(_ctx, State);
		EnterRule(_localctx, 520, RULE_set_index_option);
		try {
			State = 7015;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,874,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6994; Match(ALLOW_ROW_LOCKS);
				State = 6995; Match(EQUAL);
				State = 6996; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6997; Match(ALLOW_PAGE_LOCKS);
				State = 6998; Match(EQUAL);
				State = 6999; on_off();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7000; Match(OPTIMIZE_FOR_SEQUENTIAL_KEY);
				State = 7001; Match(EQUAL);
				State = 7002; on_off();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7003; Match(IGNORE_DUP_KEY);
				State = 7004; Match(EQUAL);
				State = 7005; on_off();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7006; Match(STATISTICS_NORECOMPUTE);
				State = 7007; Match(EQUAL);
				State = 7008; on_off();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7009; Match(COMPRESSION_DELAY);
				State = 7010; Match(EQUAL);
				State = 7011; _localctx.delay = Match(DECIMAL);
				State = 7013;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,873,_ctx) ) {
				case 1:
					{
					State = 7012; Match(MINUTES);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rebuild_partitionContext : ParserRuleContext {
		public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Rebuild_index_optionsContext rebuild_index_options() {
			return GetRuleContext<Rebuild_index_optionsContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Single_partition_rebuild_index_optionsContext single_partition_rebuild_index_options() {
			return GetRuleContext<Single_partition_rebuild_index_optionsContext>(0);
		}
		public Rebuild_partitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rebuild_partition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRebuild_partition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRebuild_partition(this);
		}
	}

	[RuleVersion(0)]
	public Rebuild_partitionContext rebuild_partition() {
		Rebuild_partitionContext _localctx = new Rebuild_partitionContext(_ctx, State);
		EnterRule(_localctx, 522, RULE_rebuild_partition);
		try {
			State = 7033;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,878,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7017; Match(REBUILD);
				State = 7021;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,875,_ctx) ) {
				case 1:
					{
					State = 7018; Match(PARTITION);
					State = 7019; Match(EQUAL);
					State = 7020; Match(ALL);
					}
					break;
				}
				State = 7024;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,876,_ctx) ) {
				case 1:
					{
					State = 7023; rebuild_index_options();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7026; Match(REBUILD);
				State = 7027; Match(PARTITION);
				State = 7028; Match(EQUAL);
				State = 7029; Match(DECIMAL);
				State = 7031;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,877,_ctx) ) {
				case 1:
					{
					State = 7030; single_partition_rebuild_index_options();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rebuild_index_optionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Rebuild_index_optionContext[] rebuild_index_option() {
			return GetRuleContexts<Rebuild_index_optionContext>();
		}
		public Rebuild_index_optionContext rebuild_index_option(int i) {
			return GetRuleContext<Rebuild_index_optionContext>(i);
		}
		public Rebuild_index_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rebuild_index_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRebuild_index_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRebuild_index_options(this);
		}
	}

	[RuleVersion(0)]
	public Rebuild_index_optionsContext rebuild_index_options() {
		Rebuild_index_optionsContext _localctx = new Rebuild_index_optionsContext(_ctx, State);
		EnterRule(_localctx, 524, RULE_rebuild_index_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7035; Match(WITH);
			State = 7036; Match(LR_BRACKET);
			State = 7037; rebuild_index_option();
			State = 7042;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,879,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7038; Match(COMMA);
					State = 7039; rebuild_index_option();
					}
					} 
				}
				State = 7044;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,879,_ctx);
			}
			State = 7045; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rebuild_index_optionContext : ParserRuleContext {
		public IToken times;
		public IToken max_degree_of_parallelism;
		public ITerminalNode PAD_INDEX() { return GetToken(TSqlParser.PAD_INDEX, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode FILLFACTOR() { return GetToken(TSqlParser.FILLFACTOR, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode SORT_IN_TEMPDB() { return GetToken(TSqlParser.SORT_IN_TEMPDB, 0); }
		public ITerminalNode IGNORE_DUP_KEY() { return GetToken(TSqlParser.IGNORE_DUP_KEY, 0); }
		public ITerminalNode STATISTICS_NORECOMPUTE() { return GetToken(TSqlParser.STATISTICS_NORECOMPUTE, 0); }
		public ITerminalNode STATISTICS_INCREMENTAL() { return GetToken(TSqlParser.STATISTICS_INCREMENTAL, 0); }
		public ITerminalNode ONLINE() { return GetToken(TSqlParser.ONLINE, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Low_priority_lock_waitContext low_priority_lock_wait() {
			return GetRuleContext<Low_priority_lock_waitContext>(0);
		}
		public ITerminalNode RESUMABLE() { return GetToken(TSqlParser.RESUMABLE, 0); }
		public ITerminalNode MAX_DURATION() { return GetToken(TSqlParser.MAX_DURATION, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public ITerminalNode ALLOW_ROW_LOCKS() { return GetToken(TSqlParser.ALLOW_ROW_LOCKS, 0); }
		public ITerminalNode ALLOW_PAGE_LOCKS() { return GetToken(TSqlParser.ALLOW_PAGE_LOCKS, 0); }
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode DATA_COMPRESSION() { return GetToken(TSqlParser.DATA_COMPRESSION, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		public ITerminalNode PAGE() { return GetToken(TSqlParser.PAGE, 0); }
		public ITerminalNode COLUMNSTORE() { return GetToken(TSqlParser.COLUMNSTORE, 0); }
		public ITerminalNode COLUMNSTORE_ARCHIVE() { return GetToken(TSqlParser.COLUMNSTORE_ARCHIVE, 0); }
		public On_partitionsContext on_partitions() {
			return GetRuleContext<On_partitionsContext>(0);
		}
		public ITerminalNode XML_COMPRESSION() { return GetToken(TSqlParser.XML_COMPRESSION, 0); }
		public Rebuild_index_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rebuild_index_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRebuild_index_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRebuild_index_option(this);
		}
	}

	[RuleVersion(0)]
	public Rebuild_index_optionContext rebuild_index_option() {
		Rebuild_index_optionContext _localctx = new Rebuild_index_optionContext(_ctx, State);
		EnterRule(_localctx, 526, RULE_rebuild_index_option);
		int _la;
		try {
			State = 7107;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,885,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7047; Match(PAD_INDEX);
				State = 7048; Match(EQUAL);
				State = 7049; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7050; Match(FILLFACTOR);
				State = 7051; Match(EQUAL);
				State = 7052; Match(DECIMAL);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7053; Match(SORT_IN_TEMPDB);
				State = 7054; Match(EQUAL);
				State = 7055; on_off();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7056; Match(IGNORE_DUP_KEY);
				State = 7057; Match(EQUAL);
				State = 7058; on_off();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7059; Match(STATISTICS_NORECOMPUTE);
				State = 7060; Match(EQUAL);
				State = 7061; on_off();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7062; Match(STATISTICS_INCREMENTAL);
				State = 7063; Match(EQUAL);
				State = 7064; on_off();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7065; Match(ONLINE);
				State = 7066; Match(EQUAL);
				State = 7075;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,881,_ctx) ) {
				case 1:
					{
					State = 7067; Match(ON);
					State = 7072;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,880,_ctx) ) {
					case 1:
						{
						State = 7068; Match(LR_BRACKET);
						State = 7069; low_priority_lock_wait();
						State = 7070; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 7074; Match(OFF);
					}
					break;
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7077; Match(RESUMABLE);
				State = 7078; Match(EQUAL);
				State = 7079; on_off();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7080; Match(MAX_DURATION);
				State = 7081; Match(EQUAL);
				State = 7082; _localctx.times = Match(DECIMAL);
				State = 7084;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,882,_ctx) ) {
				case 1:
					{
					State = 7083; Match(MINUTES);
					}
					break;
				}
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7086; Match(ALLOW_ROW_LOCKS);
				State = 7087; Match(EQUAL);
				State = 7088; on_off();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 7089; Match(ALLOW_PAGE_LOCKS);
				State = 7090; Match(EQUAL);
				State = 7091; on_off();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 7092; Match(MAXDOP);
				State = 7093; Match(EQUAL);
				State = 7094; _localctx.max_degree_of_parallelism = Match(DECIMAL);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 7095; Match(DATA_COMPRESSION);
				State = 7096; Match(EQUAL);
				State = 7097;
				_la = _input.La(1);
				if ( !(_la==COLUMNSTORE || _la==COLUMNSTORE_ARCHIVE || _la==NONE || _la==PAGE || _la==ROW) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 7099;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,883,_ctx) ) {
				case 1:
					{
					State = 7098; on_partitions();
					}
					break;
				}
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 7101; Match(XML_COMPRESSION);
				State = 7102; Match(EQUAL);
				State = 7103; on_off();
				State = 7105;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,884,_ctx) ) {
				case 1:
					{
					State = 7104; on_partitions();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_partition_rebuild_index_optionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Single_partition_rebuild_index_optionContext[] single_partition_rebuild_index_option() {
			return GetRuleContexts<Single_partition_rebuild_index_optionContext>();
		}
		public Single_partition_rebuild_index_optionContext single_partition_rebuild_index_option(int i) {
			return GetRuleContext<Single_partition_rebuild_index_optionContext>(i);
		}
		public Single_partition_rebuild_index_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_partition_rebuild_index_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSingle_partition_rebuild_index_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSingle_partition_rebuild_index_options(this);
		}
	}

	[RuleVersion(0)]
	public Single_partition_rebuild_index_optionsContext single_partition_rebuild_index_options() {
		Single_partition_rebuild_index_optionsContext _localctx = new Single_partition_rebuild_index_optionsContext(_ctx, State);
		EnterRule(_localctx, 528, RULE_single_partition_rebuild_index_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7109; Match(WITH);
			State = 7110; Match(LR_BRACKET);
			State = 7111; single_partition_rebuild_index_option();
			State = 7116;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,886,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7112; Match(COMMA);
					State = 7113; single_partition_rebuild_index_option();
					}
					} 
				}
				State = 7118;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,886,_ctx);
			}
			State = 7119; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_partition_rebuild_index_optionContext : ParserRuleContext {
		public IToken max_degree_of_parallelism;
		public ITerminalNode SORT_IN_TEMPDB() { return GetToken(TSqlParser.SORT_IN_TEMPDB, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode RESUMABLE() { return GetToken(TSqlParser.RESUMABLE, 0); }
		public ITerminalNode DATA_COMPRESSION() { return GetToken(TSqlParser.DATA_COMPRESSION, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		public ITerminalNode PAGE() { return GetToken(TSqlParser.PAGE, 0); }
		public ITerminalNode COLUMNSTORE() { return GetToken(TSqlParser.COLUMNSTORE, 0); }
		public ITerminalNode COLUMNSTORE_ARCHIVE() { return GetToken(TSqlParser.COLUMNSTORE_ARCHIVE, 0); }
		public On_partitionsContext on_partitions() {
			return GetRuleContext<On_partitionsContext>(0);
		}
		public ITerminalNode XML_COMPRESSION() { return GetToken(TSqlParser.XML_COMPRESSION, 0); }
		public ITerminalNode ONLINE() { return GetToken(TSqlParser.ONLINE, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Low_priority_lock_waitContext low_priority_lock_wait() {
			return GetRuleContext<Low_priority_lock_waitContext>(0);
		}
		public Single_partition_rebuild_index_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_partition_rebuild_index_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSingle_partition_rebuild_index_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSingle_partition_rebuild_index_option(this);
		}
	}

	[RuleVersion(0)]
	public Single_partition_rebuild_index_optionContext single_partition_rebuild_index_option() {
		Single_partition_rebuild_index_optionContext _localctx = new Single_partition_rebuild_index_optionContext(_ctx, State);
		EnterRule(_localctx, 530, RULE_single_partition_rebuild_index_option);
		int _la;
		try {
			State = 7154;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,891,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7121; Match(SORT_IN_TEMPDB);
				State = 7122; Match(EQUAL);
				State = 7123; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7124; Match(MAXDOP);
				State = 7125; Match(EQUAL);
				State = 7126; _localctx.max_degree_of_parallelism = Match(DECIMAL);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7127; Match(RESUMABLE);
				State = 7128; Match(EQUAL);
				State = 7129; on_off();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7130; Match(DATA_COMPRESSION);
				State = 7131; Match(EQUAL);
				State = 7132;
				_la = _input.La(1);
				if ( !(_la==COLUMNSTORE || _la==COLUMNSTORE_ARCHIVE || _la==NONE || _la==PAGE || _la==ROW) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 7134;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,887,_ctx) ) {
				case 1:
					{
					State = 7133; on_partitions();
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7136; Match(XML_COMPRESSION);
				State = 7137; Match(EQUAL);
				State = 7138; on_off();
				State = 7140;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,888,_ctx) ) {
				case 1:
					{
					State = 7139; on_partitions();
					}
					break;
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7142; Match(ONLINE);
				State = 7143; Match(EQUAL);
				State = 7152;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,890,_ctx) ) {
				case 1:
					{
					State = 7144; Match(ON);
					State = 7149;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,889,_ctx) ) {
					case 1:
						{
						State = 7145; Match(LR_BRACKET);
						State = 7146; low_priority_lock_wait();
						State = 7147; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 7151; Match(OFF);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_partitionsContext : ParserRuleContext {
		public IToken partition_number;
		public IToken to_partition_number;
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode PARTITIONS() { return GetToken(TSqlParser.PARTITIONS, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public On_partitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_partitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOn_partitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOn_partitions(this);
		}
	}

	[RuleVersion(0)]
	public On_partitionsContext on_partitions() {
		On_partitionsContext _localctx = new On_partitionsContext(_ctx, State);
		EnterRule(_localctx, 532, RULE_on_partitions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7156; Match(ON);
			State = 7157; Match(PARTITIONS);
			State = 7158; Match(LR_BRACKET);
			State = 7159; _localctx.partition_number = Match(DECIMAL);
			State = 7162;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,892,_ctx) ) {
			case 1:
				{
				State = 7160; Match(TO);
				State = 7161; _localctx.to_partition_number = Match(DECIMAL);
				}
				break;
			}
			State = 7172;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,894,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7164; Match(COMMA);
					State = 7165; _localctx.partition_number = Match(DECIMAL);
					State = 7168;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,893,_ctx) ) {
					case 1:
						{
						State = 7166; Match(TO);
						State = 7167; _localctx.to_partition_number = Match(DECIMAL);
						}
						break;
					}
					}
					} 
				}
				State = 7174;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,894,_ctx);
			}
			State = 7175; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_columnstore_indexContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode COLUMNSTORE() { return GetToken(TSqlParser.COLUMNSTORE, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode CLUSTERED() { return GetToken(TSqlParser.CLUSTERED, 0); }
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public ITerminalNode NONCLUSTERED() { return GetToken(TSqlParser.NONCLUSTERED, 0); }
		public Create_columnstore_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_columnstore_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_columnstore_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_columnstore_index(this);
		}
	}

	[RuleVersion(0)]
	public Create_columnstore_indexContext create_columnstore_index() {
		Create_columnstore_indexContext _localctx = new Create_columnstore_indexContext(_ctx, State);
		EnterRule(_localctx, 534, RULE_create_columnstore_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7177; Match(CREATE);
			State = 7182;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,896,_ctx) ) {
			case 1:
				{
				State = 7178; Match(CLUSTERED);
				}
				break;

			case 2:
				{
				State = 7180;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,895,_ctx) ) {
				case 1:
					{
					State = 7179; Match(NONCLUSTERED);
					}
					break;
				}
				}
				break;
			}
			State = 7184; Match(COLUMNSTORE);
			State = 7185; Match(INDEX);
			State = 7186; id_();
			State = 7187; Match(ON);
			State = 7188; table_name();
			State = 7190;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,897,_ctx) ) {
			case 1:
				{
				State = 7189; index_options();
				}
				break;
			}
			State = 7194;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,898,_ctx) ) {
			case 1:
				{
				State = 7192; Match(ON);
				State = 7193; id_();
				}
				break;
			}
			State = 7197;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,899,_ctx) ) {
			case 1:
				{
				State = 7196; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_columnstore_index_optionsContext : ParserRuleContext {
		public Columnstore_index_optionContext[] columnstore_index_option() {
			return GetRuleContexts<Columnstore_index_optionContext>();
		}
		public Columnstore_index_optionContext columnstore_index_option(int i) {
			return GetRuleContext<Columnstore_index_optionContext>(i);
		}
		public Create_columnstore_index_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_columnstore_index_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_columnstore_index_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_columnstore_index_options(this);
		}
	}

	[RuleVersion(0)]
	public Create_columnstore_index_optionsContext create_columnstore_index_options() {
		Create_columnstore_index_optionsContext _localctx = new Create_columnstore_index_optionsContext(_ctx, State);
		EnterRule(_localctx, 536, RULE_create_columnstore_index_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7199; Match(WITH);
			State = 7200; Match(LR_BRACKET);
			State = 7201; columnstore_index_option();
			State = 7206;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,900,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7202; Match(COMMA);
					State = 7203; columnstore_index_option();
					}
					} 
				}
				State = 7208;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,900,_ctx);
			}
			State = 7209; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Columnstore_index_optionContext : ParserRuleContext {
		public IToken max_degree_of_parallelism;
		public IToken delay;
		public ITerminalNode DROP_EXISTING() { return GetToken(TSqlParser.DROP_EXISTING, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode ONLINE() { return GetToken(TSqlParser.ONLINE, 0); }
		public ITerminalNode COMPRESSION_DELAY() { return GetToken(TSqlParser.COMPRESSION_DELAY, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public ITerminalNode DATA_COMPRESSION() { return GetToken(TSqlParser.DATA_COMPRESSION, 0); }
		public ITerminalNode COLUMNSTORE() { return GetToken(TSqlParser.COLUMNSTORE, 0); }
		public ITerminalNode COLUMNSTORE_ARCHIVE() { return GetToken(TSqlParser.COLUMNSTORE_ARCHIVE, 0); }
		public On_partitionsContext on_partitions() {
			return GetRuleContext<On_partitionsContext>(0);
		}
		public Columnstore_index_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnstore_index_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumnstore_index_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumnstore_index_option(this);
		}
	}

	[RuleVersion(0)]
	public Columnstore_index_optionContext columnstore_index_option() {
		Columnstore_index_optionContext _localctx = new Columnstore_index_optionContext(_ctx, State);
		EnterRule(_localctx, 538, RULE_columnstore_index_option);
		int _la;
		try {
			State = 7232;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,903,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7211; Match(DROP_EXISTING);
				State = 7212; Match(EQUAL);
				State = 7213; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7214; Match(MAXDOP);
				State = 7215; Match(EQUAL);
				State = 7216; _localctx.max_degree_of_parallelism = Match(DECIMAL);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7217; Match(ONLINE);
				State = 7218; Match(EQUAL);
				State = 7219; on_off();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7220; Match(COMPRESSION_DELAY);
				State = 7221; Match(EQUAL);
				State = 7222; _localctx.delay = Match(DECIMAL);
				State = 7224;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,901,_ctx) ) {
				case 1:
					{
					State = 7223; Match(MINUTES);
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7226; Match(DATA_COMPRESSION);
				State = 7227; Match(EQUAL);
				State = 7228;
				_la = _input.La(1);
				if ( !(_la==COLUMNSTORE || _la==COLUMNSTORE_ARCHIVE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 7230;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,902,_ctx) ) {
				case 1:
					{
					State = 7229; on_partitions();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_nonclustered_columnstore_indexContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode COLUMNSTORE() { return GetToken(TSqlParser.COLUMNSTORE, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		public ITerminalNode NONCLUSTERED() { return GetToken(TSqlParser.NONCLUSTERED, 0); }
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public Create_nonclustered_columnstore_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_nonclustered_columnstore_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_nonclustered_columnstore_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_nonclustered_columnstore_index(this);
		}
	}

	[RuleVersion(0)]
	public Create_nonclustered_columnstore_indexContext create_nonclustered_columnstore_index() {
		Create_nonclustered_columnstore_indexContext _localctx = new Create_nonclustered_columnstore_indexContext(_ctx, State);
		EnterRule(_localctx, 540, RULE_create_nonclustered_columnstore_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7234; Match(CREATE);
			State = 7236;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,904,_ctx) ) {
			case 1:
				{
				State = 7235; Match(NONCLUSTERED);
				}
				break;
			}
			State = 7238; Match(COLUMNSTORE);
			State = 7239; Match(INDEX);
			State = 7240; id_();
			State = 7241; Match(ON);
			State = 7242; table_name();
			State = 7243; Match(LR_BRACKET);
			State = 7244; column_name_list_with_order();
			State = 7245; Match(RR_BRACKET);
			State = 7248;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,905,_ctx) ) {
			case 1:
				{
				State = 7246; Match(WHERE);
				State = 7247; search_condition(0);
				}
				break;
			}
			State = 7251;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,906,_ctx) ) {
			case 1:
				{
				State = 7250; index_options();
				}
				break;
			}
			State = 7255;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,907,_ctx) ) {
			case 1:
				{
				State = 7253; Match(ON);
				State = 7254; id_();
				}
				break;
			}
			State = 7258;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,908,_ctx) ) {
			case 1:
				{
				State = 7257; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_xml_indexContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode[] XML() { return GetTokens(TSqlParser.XML); }
		public ITerminalNode XML(int i) {
			return GetToken(TSqlParser.XML, i);
		}
		public ITerminalNode[] INDEX() { return GetTokens(TSqlParser.INDEX); }
		public ITerminalNode INDEX(int i) {
			return GetToken(TSqlParser.INDEX, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public Create_xml_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_xml_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_xml_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_xml_index(this);
		}
	}

	[RuleVersion(0)]
	public Create_xml_indexContext create_xml_index() {
		Create_xml_indexContext _localctx = new Create_xml_indexContext(_ctx, State);
		EnterRule(_localctx, 542, RULE_create_xml_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7260; Match(CREATE);
			State = 7262;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,909,_ctx) ) {
			case 1:
				{
				State = 7261; Match(PRIMARY);
				}
				break;
			}
			State = 7264; Match(XML);
			State = 7265; Match(INDEX);
			State = 7266; id_();
			State = 7267; Match(ON);
			State = 7268; table_name();
			State = 7269; Match(LR_BRACKET);
			State = 7270; id_();
			State = 7271; Match(RR_BRACKET);
			State = 7282;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,912,_ctx) ) {
			case 1:
				{
				State = 7272; Match(USING);
				State = 7273; Match(XML);
				State = 7274; Match(INDEX);
				State = 7275; id_();
				State = 7280;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,911,_ctx) ) {
				case 1:
					{
					State = 7276; Match(FOR);
					State = 7278;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,910,_ctx) ) {
					case 1:
						{
						State = 7277;
						_la = _input.La(1);
						if ( !(_la==PATH || _la==PROPERTY || _la==VALUE) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			State = 7285;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,913,_ctx) ) {
			case 1:
				{
				State = 7284; index_options();
				}
				break;
			}
			State = 7288;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,914,_ctx) ) {
			case 1:
				{
				State = 7287; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_index_optionsContext : ParserRuleContext {
		public Xml_index_optionContext[] xml_index_option() {
			return GetRuleContexts<Xml_index_optionContext>();
		}
		public Xml_index_optionContext xml_index_option(int i) {
			return GetRuleContext<Xml_index_optionContext>(i);
		}
		public Xml_index_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_index_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_index_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_index_options(this);
		}
	}

	[RuleVersion(0)]
	public Xml_index_optionsContext xml_index_options() {
		Xml_index_optionsContext _localctx = new Xml_index_optionsContext(_ctx, State);
		EnterRule(_localctx, 544, RULE_xml_index_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7290; Match(WITH);
			State = 7291; Match(LR_BRACKET);
			State = 7292; xml_index_option();
			State = 7297;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,915,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7293; Match(COMMA);
					State = 7294; xml_index_option();
					}
					} 
				}
				State = 7299;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,915,_ctx);
			}
			State = 7300; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_index_optionContext : ParserRuleContext {
		public IToken max_degree_of_parallelism;
		public ITerminalNode PAD_INDEX() { return GetToken(TSqlParser.PAD_INDEX, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode FILLFACTOR() { return GetToken(TSqlParser.FILLFACTOR, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode SORT_IN_TEMPDB() { return GetToken(TSqlParser.SORT_IN_TEMPDB, 0); }
		public ITerminalNode IGNORE_DUP_KEY() { return GetToken(TSqlParser.IGNORE_DUP_KEY, 0); }
		public ITerminalNode DROP_EXISTING() { return GetToken(TSqlParser.DROP_EXISTING, 0); }
		public ITerminalNode ONLINE() { return GetToken(TSqlParser.ONLINE, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Low_priority_lock_waitContext low_priority_lock_wait() {
			return GetRuleContext<Low_priority_lock_waitContext>(0);
		}
		public ITerminalNode ALLOW_ROW_LOCKS() { return GetToken(TSqlParser.ALLOW_ROW_LOCKS, 0); }
		public ITerminalNode ALLOW_PAGE_LOCKS() { return GetToken(TSqlParser.ALLOW_PAGE_LOCKS, 0); }
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode XML_COMPRESSION() { return GetToken(TSqlParser.XML_COMPRESSION, 0); }
		public Xml_index_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_index_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_index_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_index_option(this);
		}
	}

	[RuleVersion(0)]
	public Xml_index_optionContext xml_index_option() {
		Xml_index_optionContext _localctx = new Xml_index_optionContext(_ctx, State);
		EnterRule(_localctx, 546, RULE_xml_index_option);
		try {
			State = 7341;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,918,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7302; Match(PAD_INDEX);
				State = 7303; Match(EQUAL);
				State = 7304; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7305; Match(FILLFACTOR);
				State = 7306; Match(EQUAL);
				State = 7307; Match(DECIMAL);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7308; Match(SORT_IN_TEMPDB);
				State = 7309; Match(EQUAL);
				State = 7310; on_off();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7311; Match(IGNORE_DUP_KEY);
				State = 7312; Match(EQUAL);
				State = 7313; on_off();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7314; Match(DROP_EXISTING);
				State = 7315; Match(EQUAL);
				State = 7316; on_off();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7317; Match(ONLINE);
				State = 7318; Match(EQUAL);
				State = 7327;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,917,_ctx) ) {
				case 1:
					{
					State = 7319; Match(ON);
					State = 7324;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,916,_ctx) ) {
					case 1:
						{
						State = 7320; Match(LR_BRACKET);
						State = 7321; low_priority_lock_wait();
						State = 7322; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 7326; Match(OFF);
					}
					break;
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7329; Match(ALLOW_ROW_LOCKS);
				State = 7330; Match(EQUAL);
				State = 7331; on_off();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7332; Match(ALLOW_PAGE_LOCKS);
				State = 7333; Match(EQUAL);
				State = 7334; on_off();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7335; Match(MAXDOP);
				State = 7336; Match(EQUAL);
				State = 7337; _localctx.max_degree_of_parallelism = Match(DECIMAL);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7338; Match(XML_COMPRESSION);
				State = 7339; Match(EQUAL);
				State = 7340; on_off();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_procedureContext : ParserRuleContext {
		public IToken proc;
		public Func_proc_name_schemaContext procName;
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Func_proc_name_schemaContext func_proc_name_schema() {
			return GetRuleContext<Func_proc_name_schemaContext>(0);
		}
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode PROC() { return GetToken(TSqlParser.PROC, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(TSqlParser.PROCEDURE, 0); }
		public As_external_nameContext as_external_name() {
			return GetRuleContext<As_external_nameContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Procedure_paramContext[] procedure_param() {
			return GetRuleContexts<Procedure_paramContext>();
		}
		public Procedure_paramContext procedure_param(int i) {
			return GetRuleContext<Procedure_paramContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Procedure_optionContext[] procedure_option() {
			return GetRuleContexts<Procedure_optionContext>();
		}
		public Procedure_optionContext procedure_option(int i) {
			return GetRuleContext<Procedure_optionContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(TSqlParser.REPLACE, 0); }
		public Create_or_alter_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_procedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_procedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_procedure(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_procedureContext create_or_alter_procedure() {
		Create_or_alter_procedureContext _localctx = new Create_or_alter_procedureContext(_ctx, State);
		EnterRule(_localctx, 548, RULE_create_or_alter_procedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7349;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,920,_ctx) ) {
			case 1:
				{
				{
				State = 7343; Match(CREATE);
				State = 7346;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,919,_ctx) ) {
				case 1:
					{
					State = 7344; Match(OR);
					State = 7345;
					_la = _input.La(1);
					if ( !(_la==ALTER || _la==REPLACE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				}
				break;

			case 2:
				{
				State = 7348; Match(ALTER);
				}
				break;
			}
			State = 7351;
			_localctx.proc = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
				_localctx.proc = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 7352; _localctx.procName = func_proc_name_schema();
			State = 7355;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,921,_ctx) ) {
			case 1:
				{
				State = 7353; Match(SEMI);
				State = 7354; Match(DECIMAL);
				}
				break;
			}
			State = 7371;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,925,_ctx) ) {
			case 1:
				{
				State = 7358;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,922,_ctx) ) {
				case 1:
					{
					State = 7357; Match(LR_BRACKET);
					}
					break;
				}
				State = 7360; procedure_param();
				State = 7365;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,923,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7361; Match(COMMA);
						State = 7362; procedure_param();
						}
						} 
					}
					State = 7367;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,923,_ctx);
				}
				State = 7369;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,924,_ctx) ) {
				case 1:
					{
					State = 7368; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
			State = 7382;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,927,_ctx) ) {
			case 1:
				{
				State = 7373; Match(WITH);
				State = 7374; procedure_option();
				State = 7379;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,926,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7375; Match(COMMA);
						State = 7376; procedure_option();
						}
						} 
					}
					State = 7381;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,926,_ctx);
				}
				}
				break;
			}
			State = 7386;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,928,_ctx) ) {
			case 1:
				{
				State = 7384; Match(FOR);
				State = 7385; Match(REPLICATION);
				}
				break;
			}
			State = 7388; Match(AS);
			State = 7396;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,930,_ctx) ) {
			case 1:
				{
				State = 7389; as_external_name();
				}
				break;

			case 2:
				{
				State = 7393;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,929,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7390; sql_clauses();
						}
						} 
					}
					State = 7395;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,929,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_external_nameContext : ParserRuleContext {
		public Id_Context assembly_name;
		public Id_Context class_name;
		public Id_Context method_name;
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public As_external_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_external_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAs_external_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAs_external_name(this);
		}
	}

	[RuleVersion(0)]
	public As_external_nameContext as_external_name() {
		As_external_nameContext _localctx = new As_external_nameContext(_ctx, State);
		EnterRule(_localctx, 550, RULE_as_external_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7398; Match(EXTERNAL);
			State = 7399; Match(NAME);
			State = 7400; _localctx.assembly_name = id_();
			State = 7401; Match(DOT);
			State = 7402; _localctx.class_name = id_();
			State = 7403; Match(DOT);
			State = 7404; _localctx.method_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_triggerContext : ParserRuleContext {
		public Create_or_alter_dml_triggerContext create_or_alter_dml_trigger() {
			return GetRuleContext<Create_or_alter_dml_triggerContext>(0);
		}
		public Create_or_alter_ddl_triggerContext create_or_alter_ddl_trigger() {
			return GetRuleContext<Create_or_alter_ddl_triggerContext>(0);
		}
		public Create_or_alter_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_trigger(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_triggerContext create_or_alter_trigger() {
		Create_or_alter_triggerContext _localctx = new Create_or_alter_triggerContext(_ctx, State);
		EnterRule(_localctx, 552, RULE_create_or_alter_trigger);
		try {
			State = 7408;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,931,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7406; create_or_alter_dml_trigger();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7407; create_or_alter_ddl_trigger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_dml_triggerContext : ParserRuleContext {
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Dml_trigger_operationContext[] dml_trigger_operation() {
			return GetRuleContexts<Dml_trigger_operationContext>();
		}
		public Dml_trigger_operationContext dml_trigger_operation(int i) {
			return GetRuleContext<Dml_trigger_operationContext>(i);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] FOR() { return GetTokens(TSqlParser.FOR); }
		public ITerminalNode FOR(int i) {
			return GetToken(TSqlParser.FOR, i);
		}
		public ITerminalNode AFTER() { return GetToken(TSqlParser.AFTER, 0); }
		public ITerminalNode INSTEAD() { return GetToken(TSqlParser.INSTEAD, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public ITerminalNode[] WITH() { return GetTokens(TSqlParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(TSqlParser.WITH, i);
		}
		public Dml_trigger_optionContext[] dml_trigger_option() {
			return GetRuleContexts<Dml_trigger_optionContext>();
		}
		public Dml_trigger_optionContext dml_trigger_option(int i) {
			return GetRuleContext<Dml_trigger_optionContext>(i);
		}
		public ITerminalNode APPEND() { return GetToken(TSqlParser.APPEND, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(TSqlParser.REPLACE, 0); }
		public Create_or_alter_dml_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_dml_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_dml_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_dml_trigger(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_dml_triggerContext create_or_alter_dml_trigger() {
		Create_or_alter_dml_triggerContext _localctx = new Create_or_alter_dml_triggerContext(_ctx, State);
		EnterRule(_localctx, 554, RULE_create_or_alter_dml_trigger);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7416;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,933,_ctx) ) {
			case 1:
				{
				State = 7410; Match(CREATE);
				State = 7413;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,932,_ctx) ) {
				case 1:
					{
					State = 7411; Match(OR);
					State = 7412;
					_la = _input.La(1);
					if ( !(_la==ALTER || _la==REPLACE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 7415; Match(ALTER);
				}
				break;
			}
			State = 7418; Match(TRIGGER);
			State = 7419; simple_name();
			State = 7420; Match(ON);
			State = 7421; table_name();
			State = 7431;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,935,_ctx) ) {
			case 1:
				{
				State = 7422; Match(WITH);
				State = 7423; dml_trigger_option();
				State = 7428;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,934,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7424; Match(COMMA);
						State = 7425; dml_trigger_option();
						}
						} 
					}
					State = 7430;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,934,_ctx);
				}
				}
				break;
			}
			State = 7437;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,936,_ctx) ) {
			case 1:
				{
				State = 7433; Match(FOR);
				}
				break;

			case 2:
				{
				State = 7434; Match(AFTER);
				}
				break;

			case 3:
				{
				State = 7435; Match(INSTEAD);
				State = 7436; Match(OF);
				}
				break;
			}
			State = 7439; dml_trigger_operation();
			State = 7444;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,937,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7440; Match(COMMA);
					State = 7441; dml_trigger_operation();
					}
					} 
				}
				State = 7446;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,937,_ctx);
			}
			State = 7449;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,938,_ctx) ) {
			case 1:
				{
				State = 7447; Match(WITH);
				State = 7448; Match(APPEND);
				}
				break;
			}
			State = 7454;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,939,_ctx) ) {
			case 1:
				{
				State = 7451; Match(NOT);
				State = 7452; Match(FOR);
				State = 7453; Match(REPLICATION);
				}
				break;
			}
			State = 7456; Match(AS);
			State = 7458;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 7457; sql_clauses();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7460;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,940,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_trigger_optionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public Dml_trigger_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_trigger_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDml_trigger_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDml_trigger_option(this);
		}
	}

	[RuleVersion(0)]
	public Dml_trigger_optionContext dml_trigger_option() {
		Dml_trigger_optionContext _localctx = new Dml_trigger_optionContext(_ctx, State);
		EnterRule(_localctx, 556, RULE_dml_trigger_option);
		try {
			State = 7464;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,941,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7462; Match(ENCRYPTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7463; execute_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_trigger_operationContext : ParserRuleContext {
		public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public Dml_trigger_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_trigger_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDml_trigger_operation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDml_trigger_operation(this);
		}
	}

	[RuleVersion(0)]
	public Dml_trigger_operationContext dml_trigger_operation() {
		Dml_trigger_operationContext _localctx = new Dml_trigger_operationContext(_ctx, State);
		EnterRule(_localctx, 558, RULE_dml_trigger_operation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7466;
			_la = _input.La(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_ddl_triggerContext : ParserRuleContext {
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Ddl_trigger_operationContext[] ddl_trigger_operation() {
			return GetRuleContexts<Ddl_trigger_operationContext>();
		}
		public Ddl_trigger_operationContext ddl_trigger_operation(int i) {
			return GetRuleContext<Ddl_trigger_operationContext>(i);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode AFTER() { return GetToken(TSqlParser.AFTER, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Dml_trigger_optionContext[] dml_trigger_option() {
			return GetRuleContexts<Dml_trigger_optionContext>();
		}
		public Dml_trigger_optionContext dml_trigger_option(int i) {
			return GetRuleContext<Dml_trigger_optionContext>(i);
		}
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(TSqlParser.REPLACE, 0); }
		public Create_or_alter_ddl_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_ddl_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_ddl_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_ddl_trigger(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_ddl_triggerContext create_or_alter_ddl_trigger() {
		Create_or_alter_ddl_triggerContext _localctx = new Create_or_alter_ddl_triggerContext(_ctx, State);
		EnterRule(_localctx, 560, RULE_create_or_alter_ddl_trigger);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7474;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,943,_ctx) ) {
			case 1:
				{
				State = 7468; Match(CREATE);
				State = 7471;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,942,_ctx) ) {
				case 1:
					{
					State = 7469; Match(OR);
					State = 7470;
					_la = _input.La(1);
					if ( !(_la==ALTER || _la==REPLACE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 7473; Match(ALTER);
				}
				break;
			}
			State = 7476; Match(TRIGGER);
			State = 7477; simple_name();
			State = 7478; Match(ON);
			State = 7482;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,944,_ctx) ) {
			case 1:
				{
				State = 7479; Match(ALL);
				State = 7480; Match(SERVER);
				}
				break;

			case 2:
				{
				State = 7481; Match(DATABASE);
				}
				break;
			}
			State = 7493;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,946,_ctx) ) {
			case 1:
				{
				State = 7484; Match(WITH);
				State = 7485; dml_trigger_option();
				State = 7490;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,945,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7486; Match(COMMA);
						State = 7487; dml_trigger_option();
						}
						} 
					}
					State = 7492;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,945,_ctx);
				}
				}
				break;
			}
			State = 7495;
			_la = _input.La(1);
			if ( !(_la==AFTER || _la==FOR) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 7496; ddl_trigger_operation();
			State = 7501;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,947,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7497; Match(COMMA);
					State = 7498; ddl_trigger_operation();
					}
					} 
				}
				State = 7503;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,947,_ctx);
			}
			State = 7504; Match(AS);
			State = 7506;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 7505; sql_clauses();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7508;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,948,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_trigger_operationContext : ParserRuleContext {
		public Simple_idContext simple_id() {
			return GetRuleContext<Simple_idContext>(0);
		}
		public Ddl_trigger_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_trigger_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDdl_trigger_operation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDdl_trigger_operation(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_trigger_operationContext ddl_trigger_operation() {
		Ddl_trigger_operationContext _localctx = new Ddl_trigger_operationContext(_ctx, State);
		EnterRule(_localctx, 562, RULE_ddl_trigger_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7510; simple_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_functionContext : ParserRuleContext {
		public Func_proc_name_schemaContext funcName;
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public Func_proc_name_schemaContext func_proc_name_schema() {
			return GetRuleContext<Func_proc_name_schemaContext>(0);
		}
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public Func_body_returns_selectContext func_body_returns_select() {
			return GetRuleContext<Func_body_returns_selectContext>(0);
		}
		public Func_body_returns_tableContext func_body_returns_table() {
			return GetRuleContext<Func_body_returns_tableContext>(0);
		}
		public Func_body_returns_scalarContext func_body_returns_scalar() {
			return GetRuleContext<Func_body_returns_scalarContext>(0);
		}
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public Procedure_paramContext[] procedure_param() {
			return GetRuleContexts<Procedure_paramContext>();
		}
		public Procedure_paramContext procedure_param(int i) {
			return GetRuleContext<Procedure_paramContext>(i);
		}
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public Create_or_alter_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_function(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_functionContext create_or_alter_function() {
		Create_or_alter_functionContext _localctx = new Create_or_alter_functionContext(_ctx, State);
		EnterRule(_localctx, 564, RULE_create_or_alter_function);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7518;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,950,_ctx) ) {
			case 1:
				{
				{
				State = 7512; Match(CREATE);
				State = 7515;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,949,_ctx) ) {
				case 1:
					{
					State = 7513; Match(OR);
					State = 7514; Match(ALTER);
					}
					break;
				}
				}
				}
				break;

			case 2:
				{
				State = 7517; Match(ALTER);
				}
				break;
			}
			State = 7520; Match(FUNCTION);
			State = 7521; _localctx.funcName = func_proc_name_schema();
			State = 7535;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,952,_ctx) ) {
			case 1:
				{
				{
				State = 7522; Match(LR_BRACKET);
				State = 7523; procedure_param();
				State = 7528;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,951,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7524; Match(COMMA);
						State = 7525; procedure_param();
						}
						} 
					}
					State = 7530;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,951,_ctx);
				}
				State = 7531; Match(RR_BRACKET);
				}
				}
				break;

			case 2:
				{
				State = 7533; Match(LR_BRACKET);
				State = 7534; Match(RR_BRACKET);
				}
				break;
			}
			State = 7540;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,953,_ctx) ) {
			case 1:
				{
				State = 7537; func_body_returns_select();
				}
				break;

			case 2:
				{
				State = 7538; func_body_returns_table();
				}
				break;

			case 3:
				{
				State = 7539; func_body_returns_scalar();
				}
				break;
			}
			State = 7543;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,954,_ctx) ) {
			case 1:
				{
				State = 7542; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_body_returns_selectContext : ParserRuleContext {
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public As_external_nameContext as_external_name() {
			return GetRuleContext<As_external_nameContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		public Select_statement_standaloneContext select_statement_standalone() {
			return GetRuleContext<Select_statement_standaloneContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Function_optionContext[] function_option() {
			return GetRuleContexts<Function_optionContext>();
		}
		public Function_optionContext function_option(int i) {
			return GetRuleContext<Function_optionContext>(i);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Func_body_returns_selectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_body_returns_select; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_body_returns_select(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_body_returns_select(this);
		}
	}

	[RuleVersion(0)]
	public Func_body_returns_selectContext func_body_returns_select() {
		Func_body_returns_selectContext _localctx = new Func_body_returns_selectContext(_ctx, State);
		EnterRule(_localctx, 566, RULE_func_body_returns_select);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7545; Match(RETURNS);
			State = 7546; Match(TABLE);
			State = 7556;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,956,_ctx) ) {
			case 1:
				{
				State = 7547; Match(WITH);
				State = 7548; function_option();
				State = 7553;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,955,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7549; Match(COMMA);
						State = 7550; function_option();
						}
						} 
					}
					State = 7555;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,955,_ctx);
				}
				}
				break;
			}
			State = 7559;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,957,_ctx) ) {
			case 1:
				{
				State = 7558; Match(AS);
				}
				break;
			}
			State = 7570;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,960,_ctx) ) {
			case 1:
				{
				State = 7561; as_external_name();
				}
				break;

			case 2:
				{
				State = 7562; Match(RETURN);
				State = 7564;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,958,_ctx) ) {
				case 1:
					{
					State = 7563; Match(LR_BRACKET);
					}
					break;
				}
				State = 7566; select_statement_standalone();
				State = 7568;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,959,_ctx) ) {
				case 1:
					{
					State = 7567; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_body_returns_tableContext : ParserRuleContext {
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Table_type_definitionContext table_type_definition() {
			return GetRuleContext<Table_type_definitionContext>(0);
		}
		public As_external_nameContext as_external_name() {
			return GetRuleContext<As_external_nameContext>(0);
		}
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Function_optionContext[] function_option() {
			return GetRuleContexts<Function_optionContext>();
		}
		public Function_optionContext function_option(int i) {
			return GetRuleContext<Function_optionContext>(i);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public Func_body_returns_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_body_returns_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_body_returns_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_body_returns_table(this);
		}
	}

	[RuleVersion(0)]
	public Func_body_returns_tableContext func_body_returns_table() {
		Func_body_returns_tableContext _localctx = new Func_body_returns_tableContext(_ctx, State);
		EnterRule(_localctx, 568, RULE_func_body_returns_table);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7572; Match(RETURNS);
			State = 7573; Match(LOCAL_ID);
			State = 7574; table_type_definition();
			State = 7584;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,962,_ctx) ) {
			case 1:
				{
				State = 7575; Match(WITH);
				State = 7576; function_option();
				State = 7581;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,961,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7577; Match(COMMA);
						State = 7578; function_option();
						}
						} 
					}
					State = 7583;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,961,_ctx);
				}
				}
				break;
			}
			State = 7587;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,963,_ctx) ) {
			case 1:
				{
				State = 7586; Match(AS);
				}
				break;
			}
			State = 7605;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,967,_ctx) ) {
			case 1:
				{
				State = 7589; as_external_name();
				}
				break;

			case 2:
				{
				State = 7590; Match(BEGIN);
				State = 7594;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,964,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7591; sql_clauses();
						}
						} 
					}
					State = 7596;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,964,_ctx);
				}
				State = 7597; Match(RETURN);
				State = 7599;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,965,_ctx) ) {
				case 1:
					{
					State = 7598; Match(SEMI);
					}
					break;
				}
				State = 7601; Match(END);
				State = 7603;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,966,_ctx) ) {
				case 1:
					{
					State = 7602; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_body_returns_scalarContext : ParserRuleContext {
		public ExpressionContext ret;
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public As_external_nameContext as_external_name() {
			return GetRuleContext<As_external_nameContext>(0);
		}
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Function_optionContext[] function_option() {
			return GetRuleContexts<Function_optionContext>();
		}
		public Function_optionContext function_option(int i) {
			return GetRuleContext<Function_optionContext>(i);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public Func_body_returns_scalarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_body_returns_scalar; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_body_returns_scalar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_body_returns_scalar(this);
		}
	}

	[RuleVersion(0)]
	public Func_body_returns_scalarContext func_body_returns_scalar() {
		Func_body_returns_scalarContext _localctx = new Func_body_returns_scalarContext(_ctx, State);
		EnterRule(_localctx, 570, RULE_func_body_returns_scalar);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7607; Match(RETURNS);
			State = 7608; data_type();
			State = 7618;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,969,_ctx) ) {
			case 1:
				{
				State = 7609; Match(WITH);
				State = 7610; function_option();
				State = 7615;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,968,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7611; Match(COMMA);
						State = 7612; function_option();
						}
						} 
					}
					State = 7617;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,968,_ctx);
				}
				}
				break;
			}
			State = 7621;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,970,_ctx) ) {
			case 1:
				{
				State = 7620; Match(AS);
				}
				break;
			}
			State = 7638;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,973,_ctx) ) {
			case 1:
				{
				State = 7623; as_external_name();
				}
				break;

			case 2:
				{
				State = 7624; Match(BEGIN);
				State = 7628;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,971,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7625; sql_clauses();
						}
						} 
					}
					State = 7630;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,971,_ctx);
				}
				State = 7631; Match(RETURN);
				State = 7632; _localctx.ret = expression(0);
				State = 7634;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,972,_ctx) ) {
				case 1:
					{
					State = 7633; Match(SEMI);
					}
					break;
				}
				State = 7636; Match(END);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_param_default_valueContext : ParserRuleContext {
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Procedure_param_default_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_param_default_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterProcedure_param_default_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitProcedure_param_default_value(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_param_default_valueContext procedure_param_default_value() {
		Procedure_param_default_valueContext _localctx = new Procedure_param_default_valueContext(_ctx, State);
		EnterRule(_localctx, 572, RULE_procedure_param_default_value);
		try {
			State = 7644;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,974,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7640; Match(NULL_);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7641; Match(DEFAULT);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7642; constant();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7643; Match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_paramContext : ParserRuleContext {
		public Id_Context type_schema;
		public Default_valueContext default_val;
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode VARYING() { return GetToken(TSqlParser.VARYING, 0); }
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode OUT() { return GetToken(TSqlParser.OUT, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		public ITerminalNode READONLY() { return GetToken(TSqlParser.READONLY, 0); }
		public Default_valueContext default_value() {
			return GetRuleContext<Default_valueContext>(0);
		}
		public Procedure_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_param; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterProcedure_param(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitProcedure_param(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_paramContext procedure_param() {
		Procedure_paramContext _localctx = new Procedure_paramContext(_ctx, State);
		EnterRule(_localctx, 574, RULE_procedure_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7646; Match(LOCAL_ID);
			State = 7648;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,975,_ctx) ) {
			case 1:
				{
				State = 7647; Match(AS);
				}
				break;
			}
			State = 7653;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,976,_ctx) ) {
			case 1:
				{
				State = 7650; _localctx.type_schema = id_();
				State = 7651; Match(DOT);
				}
				break;
			}
			State = 7655; data_type();
			State = 7657;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,977,_ctx) ) {
			case 1:
				{
				State = 7656; Match(VARYING);
				}
				break;
			}
			State = 7662;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,978,_ctx) ) {
			case 1:
				{
				{
				State = 7659; Match(EQUAL);
				State = 7660; _localctx.default_val = default_value();
				}
				}
				break;

			case 2:
				{
				State = 7661; Match(NULL_);
				}
				break;
			}
			State = 7665;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,979,_ctx) ) {
			case 1:
				{
				State = 7664;
				_la = _input.La(1);
				if ( !(_la==OUT || _la==OUTPUT || _la==READONLY) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_optionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode RECOMPILE() { return GetToken(TSqlParser.RECOMPILE, 0); }
		public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public Procedure_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterProcedure_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitProcedure_option(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_optionContext procedure_option() {
		Procedure_optionContext _localctx = new Procedure_optionContext(_ctx, State);
		EnterRule(_localctx, 576, RULE_procedure_option);
		try {
			State = 7670;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,980,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7667; Match(ENCRYPTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7668; Match(RECOMPILE);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7669; execute_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_optionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode SCHEMABINDING() { return GetToken(TSqlParser.SCHEMABINDING, 0); }
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public ITerminalNode[] NULL_() { return GetTokens(TSqlParser.NULL_); }
		public ITerminalNode NULL_(int i) {
			return GetToken(TSqlParser.NULL_, i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode INPUT() { return GetToken(TSqlParser.INPUT, 0); }
		public ITerminalNode CALLED() { return GetToken(TSqlParser.CALLED, 0); }
		public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public Function_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunction_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunction_option(this);
		}
	}

	[RuleVersion(0)]
	public Function_optionContext function_option() {
		Function_optionContext _localctx = new Function_optionContext(_ctx, State);
		EnterRule(_localctx, 578, RULE_function_option);
		try {
			State = 7684;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,981,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7672; Match(ENCRYPTION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7673; Match(SCHEMABINDING);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7674; Match(RETURNS);
				State = 7675; Match(NULL_);
				State = 7676; Match(ON);
				State = 7677; Match(NULL_);
				State = 7678; Match(INPUT);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7679; Match(CALLED);
				State = 7680; Match(ON);
				State = 7681; Match(NULL_);
				State = 7682; Match(INPUT);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7683; execute_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_withContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FULLSCAN() { return GetToken(TSqlParser.FULLSCAN, 0); }
		public ITerminalNode SAMPLE() { return GetToken(TSqlParser.SAMPLE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode STATS_STREAM() { return GetToken(TSqlParser.STATS_STREAM, 0); }
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public ITerminalNode ROWS() { return GetToken(TSqlParser.ROWS, 0); }
		public ITerminalNode NORECOMPUTE() { return GetToken(TSqlParser.NORECOMPUTE, 0); }
		public ITerminalNode INCREMENTAL() { return GetToken(TSqlParser.INCREMENTAL, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Partition_withContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_with; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPartition_with(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPartition_with(this);
		}
	}

	[RuleVersion(0)]
	public Partition_withContext partition_with() {
		Partition_withContext _localctx = new Partition_withContext(_ctx, State);
		EnterRule(_localctx, 580, RULE_partition_with);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7686; Match(WITH);
			State = 7692;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,982,_ctx) ) {
			case 1:
				{
				State = 7687; Match(FULLSCAN);
				}
				break;

			case 2:
				{
				State = 7688; Match(SAMPLE);
				State = 7689; Match(DECIMAL);
				State = 7690;
				_la = _input.La(1);
				if ( !(_la==PERCENT || _la==ROWS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 3:
				{
				State = 7691; Match(STATS_STREAM);
				}
				break;
			}
			State = 7696;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,983,_ctx) ) {
			case 1:
				{
				State = 7694; Match(COMMA);
				State = 7695; Match(NORECOMPUTE);
				}
				break;
			}
			State = 7702;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,984,_ctx) ) {
			case 1:
				{
				State = 7698; Match(COMMA);
				State = 7699; Match(INCREMENTAL);
				State = 7700; Match(EQUAL);
				State = 7701; on_off();
				}
				break;
			}
			State = 7705;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,985,_ctx) ) {
			case 1:
				{
				State = 7704; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_statisticsContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Partition_withContext partition_with() {
			return GetRuleContext<Partition_withContext>(0);
		}
		public Create_statisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_statistics; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_statistics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_statistics(this);
		}
	}

	[RuleVersion(0)]
	public Create_statisticsContext create_statistics() {
		Create_statisticsContext _localctx = new Create_statisticsContext(_ctx, State);
		EnterRule(_localctx, 582, RULE_create_statistics);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7707; Match(CREATE);
			State = 7708; Match(STATISTICS);
			State = 7709; id_();
			State = 7710; Match(ON);
			State = 7711; table_name();
			State = 7712; Match(LR_BRACKET);
			State = 7713; column_name_list();
			State = 7714; Match(RR_BRACKET);
			State = 7716;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,986,_ctx) ) {
			case 1:
				{
				State = 7715; partition_with();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_statisticsContext : ParserRuleContext {
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Partition_withContext partition_with() {
			return GetRuleContext<Partition_withContext>(0);
		}
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Update_statisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_statistics; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_statistics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_statistics(this);
		}
	}

	[RuleVersion(0)]
	public Update_statisticsContext update_statistics() {
		Update_statisticsContext _localctx = new Update_statisticsContext(_ctx, State);
		EnterRule(_localctx, 584, RULE_update_statistics);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7718; Match(UPDATE);
			State = 7720;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,987,_ctx) ) {
			case 1:
				{
				State = 7719;
				_la = _input.La(1);
				if ( !(_la==ALL || _la==INDEX) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 7722; Match(STATISTICS);
			State = 7723; full_table_name();
			State = 7725;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,988,_ctx) ) {
			case 1:
				{
				State = 7724; id_();
				}
				break;
			}
			State = 7728;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,989,_ctx) ) {
			case 1:
				{
				State = 7727; partition_with();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_statistics_optionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Update_statistics_optionContext[] update_statistics_option() {
			return GetRuleContexts<Update_statistics_optionContext>();
		}
		public Update_statistics_optionContext update_statistics_option(int i) {
			return GetRuleContext<Update_statistics_optionContext>(i);
		}
		public Update_statistics_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_statistics_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_statistics_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_statistics_options(this);
		}
	}

	[RuleVersion(0)]
	public Update_statistics_optionsContext update_statistics_options() {
		Update_statistics_optionsContext _localctx = new Update_statistics_optionsContext(_ctx, State);
		EnterRule(_localctx, 586, RULE_update_statistics_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7730; Match(WITH);
			State = 7731; update_statistics_option();
			State = 7736;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,990,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7732; Match(COMMA);
					State = 7733; update_statistics_option();
					}
					} 
				}
				State = 7738;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,990,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_statistics_optionContext : ParserRuleContext {
		public IToken number;
		public ExpressionContext stats_stream_;
		public IToken max_dregree_of_parallelism;
		public ITerminalNode FULLSCAN() { return GetToken(TSqlParser.FULLSCAN, 0); }
		public ITerminalNode PERSIST_SAMPLE_PERCENT() { return GetToken(TSqlParser.PERSIST_SAMPLE_PERCENT, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode SAMPLE() { return GetToken(TSqlParser.SAMPLE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public ITerminalNode ROWS() { return GetToken(TSqlParser.ROWS, 0); }
		public ITerminalNode RESAMPLE() { return GetToken(TSqlParser.RESAMPLE, 0); }
		public On_partitionsContext on_partitions() {
			return GetRuleContext<On_partitionsContext>(0);
		}
		public ITerminalNode STATS_STREAM() { return GetToken(TSqlParser.STATS_STREAM, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ROWCOUNT() { return GetToken(TSqlParser.ROWCOUNT, 0); }
		public ITerminalNode PAGECOUNT() { return GetToken(TSqlParser.PAGECOUNT, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode COLUMNS() { return GetToken(TSqlParser.COLUMNS, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public ITerminalNode NORECOMPUTE() { return GetToken(TSqlParser.NORECOMPUTE, 0); }
		public ITerminalNode INCREMENTAL() { return GetToken(TSqlParser.INCREMENTAL, 0); }
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode AUTO_DROP() { return GetToken(TSqlParser.AUTO_DROP, 0); }
		public Update_statistics_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_statistics_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_statistics_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_statistics_option(this);
		}
	}

	[RuleVersion(0)]
	public Update_statistics_optionContext update_statistics_option() {
		Update_statistics_optionContext _localctx = new Update_statistics_optionContext(_ctx, State);
		EnterRule(_localctx, 588, RULE_update_statistics_option);
		int _la;
		try {
			State = 7785;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,996,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 7739; Match(FULLSCAN);
				State = 7746;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,992,_ctx) ) {
				case 1:
					{
					State = 7741;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,991,_ctx) ) {
					case 1:
						{
						State = 7740; Match(COMMA);
						}
						break;
					}
					State = 7743; Match(PERSIST_SAMPLE_PERCENT);
					State = 7744; Match(EQUAL);
					State = 7745; on_off();
					}
					break;
				}
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 7748; Match(SAMPLE);
				State = 7749; _localctx.number = Match(DECIMAL);
				State = 7750;
				_la = _input.La(1);
				if ( !(_la==PERCENT || _la==ROWS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 7757;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,994,_ctx) ) {
				case 1:
					{
					State = 7752;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,993,_ctx) ) {
					case 1:
						{
						State = 7751; Match(COMMA);
						}
						break;
					}
					State = 7754; Match(PERSIST_SAMPLE_PERCENT);
					State = 7755; Match(EQUAL);
					State = 7756; on_off();
					}
					break;
				}
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7759; Match(RESAMPLE);
				State = 7761;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,995,_ctx) ) {
				case 1:
					{
					State = 7760; on_partitions();
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7763; Match(STATS_STREAM);
				State = 7764; Match(EQUAL);
				State = 7765; _localctx.stats_stream_ = expression(0);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7766; Match(ROWCOUNT);
				State = 7767; Match(EQUAL);
				State = 7768; Match(DECIMAL);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7769; Match(PAGECOUNT);
				State = 7770; Match(EQUAL);
				State = 7771; Match(DECIMAL);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7772; Match(ALL);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7773; Match(COLUMNS);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7774; Match(INDEX);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7775; Match(NORECOMPUTE);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 7776; Match(INCREMENTAL);
				State = 7777; Match(EQUAL);
				State = 7778; on_off();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 7779; Match(MAXDOP);
				State = 7780; Match(EQUAL);
				State = 7781; _localctx.max_dregree_of_parallelism = Match(DECIMAL);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 7782; Match(AUTO_DROP);
				State = 7783; Match(EQUAL);
				State = 7784; on_off();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_tableContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return GetRuleContext<Column_def_table_constraintsContext>(0);
		}
		public Table_indicesContext[] table_indices() {
			return GetRuleContexts<Table_indicesContext>();
		}
		public Table_indicesContext table_indices(int i) {
			return GetRuleContext<Table_indicesContext>(i);
		}
		public ITerminalNode LOCK() { return GetToken(TSqlParser.LOCK, 0); }
		public Simple_idContext simple_id() {
			return GetRuleContext<Simple_idContext>(0);
		}
		public Table_optionsContext[] table_options() {
			return GetRuleContexts<Table_optionsContext>();
		}
		public Table_optionsContext table_options(int i) {
			return GetRuleContext<Table_optionsContext>(i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DEFAULT() { return GetTokens(TSqlParser.DEFAULT); }
		public ITerminalNode DEFAULT(int i) {
			return GetToken(TSqlParser.DEFAULT, i);
		}
		public ITerminalNode TEXTIMAGE_ON() { return GetToken(TSqlParser.TEXTIMAGE_ON, 0); }
		public Create_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_table(this);
		}
	}

	[RuleVersion(0)]
	public Create_tableContext create_table() {
		Create_tableContext _localctx = new Create_tableContext(_ctx, State);
		EnterRule(_localctx, 590, RULE_create_table);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7787; Match(CREATE);
			State = 7788; Match(TABLE);
			State = 7789; table_name();
			State = 7790; Match(LR_BRACKET);
			State = 7791; column_def_table_constraints();
			State = 7798;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,998,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7793;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,997,_ctx) ) {
					case 1:
						{
						State = 7792; Match(COMMA);
						}
						break;
					}
					State = 7795; table_indices();
					}
					} 
				}
				State = 7800;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,998,_ctx);
			}
			State = 7802;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,999,_ctx) ) {
			case 1:
				{
				State = 7801; Match(COMMA);
				}
				break;
			}
			State = 7804; Match(RR_BRACKET);
			State = 7807;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1000,_ctx) ) {
			case 1:
				{
				State = 7805; Match(LOCK);
				State = 7806; simple_id();
				}
				break;
			}
			State = 7812;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1001,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7809; table_options();
					}
					} 
				}
				State = 7814;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1001,_ctx);
			}
			State = 7818;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1002,_ctx) ) {
			case 1:
				{
				State = 7815; Match(ON);
				State = 7816; id_();
				}
				break;

			case 2:
				{
				State = 7817; Match(DEFAULT);
				}
				break;
			}
			State = 7823;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1003,_ctx) ) {
			case 1:
				{
				State = 7820; Match(TEXTIMAGE_ON);
				State = 7821; id_();
				}
				break;

			case 2:
				{
				State = 7822; Match(DEFAULT);
				}
				break;
			}
			State = 7826;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1004,_ctx) ) {
			case 1:
				{
				State = 7825; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_indicesContext : ParserRuleContext {
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		public ITerminalNode CLUSTERED() { return GetToken(TSqlParser.CLUSTERED, 0); }
		public ITerminalNode NONCLUSTERED() { return GetToken(TSqlParser.NONCLUSTERED, 0); }
		public Table_indicesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_indices; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_indices(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_indices(this);
		}
	}

	[RuleVersion(0)]
	public Table_indicesContext table_indices() {
		Table_indicesContext _localctx = new Table_indicesContext(_ctx, State);
		EnterRule(_localctx, 592, RULE_table_indices);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7828; Match(INDEX);
			State = 7829; id_();
			State = 7831;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1005,_ctx) ) {
			case 1:
				{
				State = 7830;
				_la = _input.La(1);
				if ( !(_la==CLUSTERED || _la==NONCLUSTERED || _la==UNIQUE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 7833; Match(LR_BRACKET);
			State = 7834; column_name_list_with_order();
			State = 7835; Match(RR_BRACKET);
			State = 7837;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1006,_ctx) ) {
			case 1:
				{
				State = 7836; index_options();
				}
				break;
			}
			State = 7841;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1007,_ctx) ) {
			case 1:
				{
				State = 7839; Match(ON);
				State = 7840; id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_optionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Index_optionContext[] index_option() {
			return GetRuleContexts<Index_optionContext>();
		}
		public Index_optionContext index_option(int i) {
			return GetRuleContext<Index_optionContext>(i);
		}
		public Table_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_options(this);
		}
	}

	[RuleVersion(0)]
	public Table_optionsContext table_options() {
		Table_optionsContext _localctx = new Table_optionsContext(_ctx, State);
		EnterRule(_localctx, 594, RULE_table_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7843; Match(WITH);
			State = 7863;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1010,_ctx) ) {
			case 1:
				{
				State = 7844; Match(LR_BRACKET);
				State = 7845; index_option();
				State = 7850;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1008,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7846; Match(COMMA);
						State = 7847; index_option();
						}
						} 
					}
					State = 7852;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1008,_ctx);
				}
				State = 7853; Match(RR_BRACKET);
				}
				break;

			case 2:
				{
				State = 7855; index_option();
				State = 7860;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1009,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7856; Match(COMMA);
						State = 7857; index_option();
						}
						} 
					}
					State = 7862;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1009,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_optionContext : ParserRuleContext {
		public Simple_idContext[] simple_id() {
			return GetRuleContexts<Simple_idContext>();
		}
		public Simple_idContext simple_id(int i) {
			return GetRuleContext<Simple_idContext>(i);
		}
		public KeywordContext[] keyword() {
			return GetRuleContexts<KeywordContext>();
		}
		public KeywordContext keyword(int i) {
			return GetRuleContext<KeywordContext>(i);
		}
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode CLUSTERED() { return GetToken(TSqlParser.CLUSTERED, 0); }
		public ITerminalNode COLUMNSTORE() { return GetToken(TSqlParser.COLUMNSTORE, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public ITerminalNode HEAP() { return GetToken(TSqlParser.HEAP, 0); }
		public ITerminalNode FILLFACTOR() { return GetToken(TSqlParser.FILLFACTOR, 0); }
		public ITerminalNode DISTRIBUTION() { return GetToken(TSqlParser.DISTRIBUTION, 0); }
		public ITerminalNode HASH() { return GetToken(TSqlParser.HASH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] ASC() { return GetTokens(TSqlParser.ASC); }
		public ITerminalNode ASC(int i) {
			return GetToken(TSqlParser.ASC, i);
		}
		public ITerminalNode[] DESC() { return GetTokens(TSqlParser.DESC); }
		public ITerminalNode DESC(int i) {
			return GetToken(TSqlParser.DESC, i);
		}
		public ITerminalNode DATA_COMPRESSION() { return GetToken(TSqlParser.DATA_COMPRESSION, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		public ITerminalNode PAGE() { return GetToken(TSqlParser.PAGE, 0); }
		public On_partitionsContext on_partitions() {
			return GetRuleContext<On_partitionsContext>(0);
		}
		public ITerminalNode XML_COMPRESSION() { return GetToken(TSqlParser.XML_COMPRESSION, 0); }
		public Table_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_option(this);
		}
	}

	[RuleVersion(0)]
	public Table_optionContext table_option() {
		Table_optionContext _localctx = new Table_optionContext(_ctx, State);
		EnterRule(_localctx, 596, RULE_table_option);
		int _la;
		try {
			int _alt;
			State = 7921;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1018,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7867;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1011,_ctx) ) {
				case 1:
					{
					State = 7865; simple_id();
					}
					break;

				case 2:
					{
					State = 7866; keyword();
					}
					break;
				}
				State = 7869; Match(EQUAL);
				State = 7874;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1012,_ctx) ) {
				case 1:
					{
					State = 7870; simple_id();
					}
					break;

				case 2:
					{
					State = 7871; keyword();
					}
					break;

				case 3:
					{
					State = 7872; on_off();
					}
					break;

				case 4:
					{
					State = 7873; Match(DECIMAL);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7876; Match(CLUSTERED);
				State = 7877; Match(COLUMNSTORE);
				State = 7878; Match(INDEX);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7879; Match(HEAP);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7880; Match(FILLFACTOR);
				State = 7881; Match(EQUAL);
				State = 7882; Match(DECIMAL);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7883; Match(DISTRIBUTION);
				State = 7884; Match(EQUAL);
				State = 7885; Match(HASH);
				State = 7886; Match(LR_BRACKET);
				State = 7887; id_();
				State = 7888; Match(RR_BRACKET);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7890; Match(CLUSTERED);
				State = 7891; Match(INDEX);
				State = 7892; Match(LR_BRACKET);
				State = 7893; id_();
				State = 7895;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1013,_ctx) ) {
				case 1:
					{
					State = 7894;
					_la = _input.La(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 7904;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1015,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7897; Match(COMMA);
						State = 7898; id_();
						State = 7900;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1014,_ctx) ) {
						case 1:
							{
							State = 7899;
							_la = _input.La(1);
							if ( !(_la==ASC || _la==DESC) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;
						}
						}
						} 
					}
					State = 7906;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1015,_ctx);
				}
				State = 7907; Match(RR_BRACKET);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7909; Match(DATA_COMPRESSION);
				State = 7910; Match(EQUAL);
				State = 7911;
				_la = _input.La(1);
				if ( !(_la==NONE || _la==PAGE || _la==ROW) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 7913;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1016,_ctx) ) {
				case 1:
					{
					State = 7912; on_partitions();
					}
					break;
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7915; Match(XML_COMPRESSION);
				State = 7916; Match(EQUAL);
				State = 7917; on_off();
				State = 7919;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1017,_ctx) ) {
				case 1:
					{
					State = 7918; on_partitions();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_index_optionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Create_table_index_optionContext[] create_table_index_option() {
			return GetRuleContexts<Create_table_index_optionContext>();
		}
		public Create_table_index_optionContext create_table_index_option(int i) {
			return GetRuleContext<Create_table_index_optionContext>(i);
		}
		public Create_table_index_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_index_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_table_index_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_table_index_options(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_index_optionsContext create_table_index_options() {
		Create_table_index_optionsContext _localctx = new Create_table_index_optionsContext(_ctx, State);
		EnterRule(_localctx, 598, RULE_create_table_index_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7923; Match(WITH);
			State = 7924; Match(LR_BRACKET);
			State = 7925; create_table_index_option();
			State = 7930;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1019,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 7926; Match(COMMA);
					State = 7927; create_table_index_option();
					}
					} 
				}
				State = 7932;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1019,_ctx);
			}
			State = 7933; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_index_optionContext : ParserRuleContext {
		public ITerminalNode PAD_INDEX() { return GetToken(TSqlParser.PAD_INDEX, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode FILLFACTOR() { return GetToken(TSqlParser.FILLFACTOR, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode IGNORE_DUP_KEY() { return GetToken(TSqlParser.IGNORE_DUP_KEY, 0); }
		public ITerminalNode STATISTICS_NORECOMPUTE() { return GetToken(TSqlParser.STATISTICS_NORECOMPUTE, 0); }
		public ITerminalNode STATISTICS_INCREMENTAL() { return GetToken(TSqlParser.STATISTICS_INCREMENTAL, 0); }
		public ITerminalNode ALLOW_ROW_LOCKS() { return GetToken(TSqlParser.ALLOW_ROW_LOCKS, 0); }
		public ITerminalNode ALLOW_PAGE_LOCKS() { return GetToken(TSqlParser.ALLOW_PAGE_LOCKS, 0); }
		public ITerminalNode OPTIMIZE_FOR_SEQUENTIAL_KEY() { return GetToken(TSqlParser.OPTIMIZE_FOR_SEQUENTIAL_KEY, 0); }
		public ITerminalNode DATA_COMPRESSION() { return GetToken(TSqlParser.DATA_COMPRESSION, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		public ITerminalNode PAGE() { return GetToken(TSqlParser.PAGE, 0); }
		public ITerminalNode COLUMNSTORE() { return GetToken(TSqlParser.COLUMNSTORE, 0); }
		public ITerminalNode COLUMNSTORE_ARCHIVE() { return GetToken(TSqlParser.COLUMNSTORE_ARCHIVE, 0); }
		public On_partitionsContext on_partitions() {
			return GetRuleContext<On_partitionsContext>(0);
		}
		public ITerminalNode XML_COMPRESSION() { return GetToken(TSqlParser.XML_COMPRESSION, 0); }
		public Create_table_index_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_index_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_table_index_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_table_index_option(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_index_optionContext create_table_index_option() {
		Create_table_index_optionContext _localctx = new Create_table_index_optionContext(_ctx, State);
		EnterRule(_localctx, 600, RULE_create_table_index_option);
		int _la;
		try {
			State = 7971;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1022,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7935; Match(PAD_INDEX);
				State = 7936; Match(EQUAL);
				State = 7937; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7938; Match(FILLFACTOR);
				State = 7939; Match(EQUAL);
				State = 7940; Match(DECIMAL);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7941; Match(IGNORE_DUP_KEY);
				State = 7942; Match(EQUAL);
				State = 7943; on_off();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7944; Match(STATISTICS_NORECOMPUTE);
				State = 7945; Match(EQUAL);
				State = 7946; on_off();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7947; Match(STATISTICS_INCREMENTAL);
				State = 7948; Match(EQUAL);
				State = 7949; on_off();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7950; Match(ALLOW_ROW_LOCKS);
				State = 7951; Match(EQUAL);
				State = 7952; on_off();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7953; Match(ALLOW_PAGE_LOCKS);
				State = 7954; Match(EQUAL);
				State = 7955; on_off();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7956; Match(OPTIMIZE_FOR_SEQUENTIAL_KEY);
				State = 7957; Match(EQUAL);
				State = 7958; on_off();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7959; Match(DATA_COMPRESSION);
				State = 7960; Match(EQUAL);
				State = 7961;
				_la = _input.La(1);
				if ( !(_la==COLUMNSTORE || _la==COLUMNSTORE_ARCHIVE || _la==NONE || _la==PAGE || _la==ROW) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 7963;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1020,_ctx) ) {
				case 1:
					{
					State = 7962; on_partitions();
					}
					break;
				}
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7965; Match(XML_COMPRESSION);
				State = 7966; Match(EQUAL);
				State = 7967; on_off();
				State = 7969;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1021,_ctx) ) {
				case 1:
					{
					State = 7968; on_partitions();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_viewContext : ParserRuleContext {
		public ITerminalNode VIEW() { return GetToken(TSqlParser.VIEW, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Select_statement_standaloneContext select_statement_standalone() {
			return GetRuleContext<Select_statement_standaloneContext>(0);
		}
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode[] WITH() { return GetTokens(TSqlParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(TSqlParser.WITH, i);
		}
		public View_attributeContext[] view_attribute() {
			return GetRuleContexts<View_attributeContext>();
		}
		public View_attributeContext view_attribute(int i) {
			return GetRuleContext<View_attributeContext>(i);
		}
		public ITerminalNode CHECK() { return GetToken(TSqlParser.CHECK, 0); }
		public ITerminalNode OPTION() { return GetToken(TSqlParser.OPTION, 0); }
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(TSqlParser.REPLACE, 0); }
		public Create_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_view; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_view(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_view(this);
		}
	}

	[RuleVersion(0)]
	public Create_viewContext create_view() {
		Create_viewContext _localctx = new Create_viewContext(_ctx, State);
		EnterRule(_localctx, 602, RULE_create_view);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7979;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1024,_ctx) ) {
			case 1:
				{
				State = 7973; Match(CREATE);
				State = 7976;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1023,_ctx) ) {
				case 1:
					{
					State = 7974; Match(OR);
					State = 7975;
					_la = _input.La(1);
					if ( !(_la==ALTER || _la==REPLACE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 7978; Match(ALTER);
				}
				break;
			}
			State = 7981; Match(VIEW);
			State = 7982; simple_name();
			State = 7987;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1025,_ctx) ) {
			case 1:
				{
				State = 7983; Match(LR_BRACKET);
				State = 7984; column_name_list();
				State = 7985; Match(RR_BRACKET);
				}
				break;
			}
			State = 7998;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1027,_ctx) ) {
			case 1:
				{
				State = 7989; Match(WITH);
				State = 7990; view_attribute();
				State = 7995;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1026,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 7991; Match(COMMA);
						State = 7992; view_attribute();
						}
						} 
					}
					State = 7997;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1026,_ctx);
				}
				}
				break;
			}
			State = 8000; Match(AS);
			State = 8001; select_statement_standalone();
			State = 8005;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1028,_ctx) ) {
			case 1:
				{
				State = 8002; Match(WITH);
				State = 8003; Match(CHECK);
				State = 8004; Match(OPTION);
				}
				break;
			}
			State = 8008;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1029,_ctx) ) {
			case 1:
				{
				State = 8007; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_attributeContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode SCHEMABINDING() { return GetToken(TSqlParser.SCHEMABINDING, 0); }
		public ITerminalNode VIEW_METADATA() { return GetToken(TSqlParser.VIEW_METADATA, 0); }
		public View_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterView_attribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitView_attribute(this);
		}
	}

	[RuleVersion(0)]
	public View_attributeContext view_attribute() {
		View_attributeContext _localctx = new View_attributeContext(_ctx, State);
		EnterRule(_localctx, 604, RULE_view_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8010;
			_la = _input.La(1);
			if ( !(_la==ENCRYPTION || _la==SCHEMABINDING || _la==VIEW_METADATA) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_tableContext : ParserRuleContext {
		public Id_Context constraint;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		public ITerminalNode[] ALTER() { return GetTokens(TSqlParser.ALTER); }
		public ITerminalNode ALTER(int i) {
			return GetToken(TSqlParser.ALTER, i);
		}
		public ITerminalNode[] TABLE() { return GetTokens(TSqlParser.TABLE); }
		public ITerminalNode TABLE(int i) {
			return GetToken(TSqlParser.TABLE, i);
		}
		public Table_nameContext[] table_name() {
			return GetRuleContexts<Table_nameContext>();
		}
		public Table_nameContext table_name(int i) {
			return GetRuleContext<Table_nameContext>(i);
		}
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode LOCK_ESCALATION() { return GetToken(TSqlParser.LOCK_ESCALATION, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return GetRuleContext<Column_def_table_constraintsContext>(0);
		}
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(TSqlParser.CONSTRAINT, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		public Table_optionsContext table_options() {
			return GetRuleContext<Table_optionsContext>(0);
		}
		public ITerminalNode SWITCH() { return GetToken(TSqlParser.SWITCH, 0); }
		public Switch_partitionContext switch_partition() {
			return GetRuleContext<Switch_partitionContext>(0);
		}
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode[] CHECK() { return GetTokens(TSqlParser.CHECK); }
		public ITerminalNode CHECK(int i) {
			return GetToken(TSqlParser.CHECK, i);
		}
		public ITerminalNode NOCHECK() { return GetToken(TSqlParser.NOCHECK, 0); }
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public Column_definitionContext column_definition() {
			return GetRuleContext<Column_definitionContext>(0);
		}
		public Column_modifierContext column_modifier() {
			return GetRuleContext<Column_modifierContext>(0);
		}
		public ITerminalNode FOREIGN() { return GetToken(TSqlParser.FOREIGN, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Column_name_listContext[] column_name_list() {
			return GetRuleContexts<Column_name_listContext>();
		}
		public Column_name_listContext column_name_list(int i) {
			return GetRuleContext<Column_name_listContext>(i);
		}
		public On_deleteContext[] on_delete() {
			return GetRuleContexts<On_deleteContext>();
		}
		public On_deleteContext on_delete(int i) {
			return GetRuleContext<On_deleteContext>(i);
		}
		public On_updateContext[] on_update() {
			return GetRuleContexts<On_updateContext>();
		}
		public On_updateContext on_update(int i) {
			return GetRuleContext<On_updateContext>(i);
		}
		public Alter_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_table(this);
		}
	}

	[RuleVersion(0)]
	public Alter_tableContext alter_table() {
		Alter_tableContext _localctx = new Alter_tableContext(_ctx, State);
		EnterRule(_localctx, 606, RULE_alter_table);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8012; Match(ALTER);
			State = 8013; Match(TABLE);
			State = 8014; table_name();
			State = 8088;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1038,_ctx) ) {
			case 1:
				{
				State = 8015; Match(SET);
				State = 8016; Match(LR_BRACKET);
				State = 8017; Match(LOCK_ESCALATION);
				State = 8018; Match(EQUAL);
				State = 8019;
				_la = _input.La(1);
				if ( !(_la==AUTO || _la==DISABLE || _la==TABLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 8020; Match(RR_BRACKET);
				}
				break;

			case 2:
				{
				State = 8021; Match(ADD);
				State = 8022; column_def_table_constraints();
				}
				break;

			case 3:
				{
				State = 8023; Match(ALTER);
				State = 8024; Match(COLUMN);
				State = 8027;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1030,_ctx) ) {
				case 1:
					{
					State = 8025; column_definition();
					}
					break;

				case 2:
					{
					State = 8026; column_modifier();
					}
					break;
				}
				}
				break;

			case 4:
				{
				State = 8029; Match(DROP);
				State = 8030; Match(COLUMN);
				State = 8031; id_();
				State = 8036;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1031,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8032; Match(COMMA);
						State = 8033; id_();
						}
						} 
					}
					State = 8038;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1031,_ctx);
				}
				}
				break;

			case 5:
				{
				State = 8039; Match(DROP);
				State = 8040; Match(CONSTRAINT);
				State = 8041; _localctx.constraint = id_();
				}
				break;

			case 6:
				{
				State = 8042; Match(WITH);
				State = 8043;
				_la = _input.La(1);
				if ( !(_la==CHECK || _la==NOCHECK) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 8044; Match(ADD);
				State = 8047;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1032,_ctx) ) {
				case 1:
					{
					State = 8045; Match(CONSTRAINT);
					State = 8046; _localctx.constraint = id_();
					}
					break;
				}
				State = 8074;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1036,_ctx) ) {
				case 1:
					{
					State = 8049; Match(FOREIGN);
					State = 8050; Match(KEY);
					State = 8051; Match(LR_BRACKET);
					State = 8052; _localctx.fk = column_name_list();
					State = 8053; Match(RR_BRACKET);
					State = 8054; Match(REFERENCES);
					State = 8055; table_name();
					State = 8060;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1033,_ctx) ) {
					case 1:
						{
						State = 8056; Match(LR_BRACKET);
						State = 8057; _localctx.pk = column_name_list();
						State = 8058; Match(RR_BRACKET);
						}
						break;
					}
					State = 8066;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1035,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							State = 8064;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1034,_ctx) ) {
							case 1:
								{
								State = 8062; on_delete();
								}
								break;

							case 2:
								{
								State = 8063; on_update();
								}
								break;
							}
							} 
						}
						State = 8068;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1035,_ctx);
					}
					}
					break;

				case 2:
					{
					State = 8069; Match(CHECK);
					State = 8070; Match(LR_BRACKET);
					State = 8071; search_condition(0);
					State = 8072; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;

			case 7:
				{
				State = 8076;
				_la = _input.La(1);
				if ( !(_la==CHECK || _la==NOCHECK) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 8077; Match(CONSTRAINT);
				State = 8078; _localctx.constraint = id_();
				}
				break;

			case 8:
				{
				State = 8079;
				_la = _input.La(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 8080; Match(TRIGGER);
				State = 8082;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1037,_ctx) ) {
				case 1:
					{
					State = 8081; id_();
					}
					break;
				}
				}
				break;

			case 9:
				{
				State = 8084; Match(REBUILD);
				State = 8085; table_options();
				}
				break;

			case 10:
				{
				State = 8086; Match(SWITCH);
				State = 8087; switch_partition();
				}
				break;
			}
			State = 8091;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1039,_ctx) ) {
			case 1:
				{
				State = 8090; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_partitionContext : ParserRuleContext {
		public ExpressionContext source_partition_number_expression;
		public Table_nameContext target_table;
		public ExpressionContext target_partition_number_expression;
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode[] PARTITION() { return GetTokens(TSqlParser.PARTITION); }
		public ITerminalNode PARTITION(int i) {
			return GetToken(TSqlParser.PARTITION, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Low_priority_lock_waitContext low_priority_lock_wait() {
			return GetRuleContext<Low_priority_lock_waitContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Switch_partitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_partition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSwitch_partition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSwitch_partition(this);
		}
	}

	[RuleVersion(0)]
	public Switch_partitionContext switch_partition() {
		Switch_partitionContext _localctx = new Switch_partitionContext(_ctx, State);
		EnterRule(_localctx, 608, RULE_switch_partition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8097;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1041,_ctx) ) {
			case 1:
				{
				State = 8094;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1040,_ctx) ) {
				case 1:
					{
					State = 8093; Match(PARTITION);
					}
					break;
				}
				State = 8096; _localctx.source_partition_number_expression = expression(0);
				}
				break;
			}
			State = 8099; Match(TO);
			State = 8100; _localctx.target_table = table_name();
			State = 8103;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1042,_ctx) ) {
			case 1:
				{
				State = 8101; Match(PARTITION);
				State = 8102; _localctx.target_partition_number_expression = expression(0);
				}
				break;
			}
			State = 8107;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1043,_ctx) ) {
			case 1:
				{
				State = 8105; Match(WITH);
				State = 8106; low_priority_lock_wait();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Low_priority_lock_waitContext : ParserRuleContext {
		public TimeContext max_duration;
		public IToken abort_after_wait;
		public ITerminalNode WAIT_AT_LOW_PRIORITY() { return GetToken(TSqlParser.WAIT_AT_LOW_PRIORITY, 0); }
		public ITerminalNode MAX_DURATION() { return GetToken(TSqlParser.MAX_DURATION, 0); }
		public ITerminalNode ABORT_AFTER_WAIT() { return GetToken(TSqlParser.ABORT_AFTER_WAIT, 0); }
		public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode SELF() { return GetToken(TSqlParser.SELF, 0); }
		public ITerminalNode BLOCKERS() { return GetToken(TSqlParser.BLOCKERS, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public Low_priority_lock_waitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_low_priority_lock_wait; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLow_priority_lock_wait(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLow_priority_lock_wait(this);
		}
	}

	[RuleVersion(0)]
	public Low_priority_lock_waitContext low_priority_lock_wait() {
		Low_priority_lock_waitContext _localctx = new Low_priority_lock_waitContext(_ctx, State);
		EnterRule(_localctx, 610, RULE_low_priority_lock_wait);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8109; Match(WAIT_AT_LOW_PRIORITY);
			State = 8110; Match(LR_BRACKET);
			State = 8111; Match(MAX_DURATION);
			State = 8112; Match(EQUAL);
			State = 8113; _localctx.max_duration = time();
			State = 8115;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1044,_ctx) ) {
			case 1:
				{
				State = 8114; Match(MINUTES);
				}
				break;
			}
			State = 8117; Match(COMMA);
			State = 8118; Match(ABORT_AFTER_WAIT);
			State = 8119; Match(EQUAL);
			State = 8120;
			_localctx.abort_after_wait = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==BLOCKERS || _la==NONE || _la==SELF) ) {
				_localctx.abort_after_wait = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 8121; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_databaseContext : ParserRuleContext {
		public Id_Context database;
		public Id_Context new_name;
		public Id_Context collation;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode CURRENT() { return GetToken(TSqlParser.CURRENT, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public Database_optionspecContext database_optionspec() {
			return GetRuleContext<Database_optionspecContext>(0);
		}
		public Add_or_modify_filesContext add_or_modify_files() {
			return GetRuleContext<Add_or_modify_filesContext>(0);
		}
		public Add_or_modify_filegroupsContext add_or_modify_filegroups() {
			return GetRuleContext<Add_or_modify_filegroupsContext>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public TerminationContext termination() {
			return GetRuleContext<TerminationContext>(0);
		}
		public Alter_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_database(this);
		}
	}

	[RuleVersion(0)]
	public Alter_databaseContext alter_database() {
		Alter_databaseContext _localctx = new Alter_databaseContext(_ctx, State);
		EnterRule(_localctx, 612, RULE_alter_database);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8123; Match(ALTER);
			State = 8124; Match(DATABASE);
			State = 8127;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1045,_ctx) ) {
			case 1:
				{
				State = 8125; _localctx.database = id_();
				}
				break;

			case 2:
				{
				State = 8126; Match(CURRENT);
				}
				break;
			}
			State = 8143;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1047,_ctx) ) {
			case 1:
				{
				State = 8129; Match(MODIFY);
				State = 8130; Match(NAME);
				State = 8131; Match(EQUAL);
				State = 8132; _localctx.new_name = id_();
				}
				break;

			case 2:
				{
				State = 8133; Match(COLLATE);
				State = 8134; _localctx.collation = id_();
				}
				break;

			case 3:
				{
				State = 8135; Match(SET);
				State = 8136; database_optionspec();
				State = 8139;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1046,_ctx) ) {
				case 1:
					{
					State = 8137; Match(WITH);
					State = 8138; termination();
					}
					break;
				}
				}
				break;

			case 4:
				{
				State = 8141; add_or_modify_files();
				}
				break;

			case 5:
				{
				State = 8142; add_or_modify_filegroups();
				}
				break;
			}
			State = 8146;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1048,_ctx) ) {
			case 1:
				{
				State = 8145; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_or_modify_filesContext : ParserRuleContext {
		public Id_Context filegroup_name;
		public Id_Context logical_file_name;
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public FilespecContext[] filespec() {
			return GetRuleContexts<FilespecContext>();
		}
		public FilespecContext filespec(int i) {
			return GetRuleContext<FilespecContext>(i);
		}
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public Add_or_modify_filesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_or_modify_files; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAdd_or_modify_files(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAdd_or_modify_files(this);
		}
	}

	[RuleVersion(0)]
	public Add_or_modify_filesContext add_or_modify_files() {
		Add_or_modify_filesContext _localctx = new Add_or_modify_filesContext(_ctx, State);
		EnterRule(_localctx, 614, RULE_add_or_modify_files);
		try {
			int _alt;
			State = 8180;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1052,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8148; Match(ADD);
				State = 8149; Match(FILE);
				State = 8150; filespec();
				State = 8155;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1049,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8151; Match(COMMA);
						State = 8152; filespec();
						}
						} 
					}
					State = 8157;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1049,_ctx);
				}
				State = 8161;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1050,_ctx) ) {
				case 1:
					{
					State = 8158; Match(TO);
					State = 8159; Match(FILEGROUP);
					State = 8160; _localctx.filegroup_name = id_();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8163; Match(ADD);
				State = 8164; Match(LOG);
				State = 8165; Match(FILE);
				State = 8166; filespec();
				State = 8171;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1051,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8167; Match(COMMA);
						State = 8168; filespec();
						}
						} 
					}
					State = 8173;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1051,_ctx);
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8174; Match(REMOVE);
				State = 8175; Match(FILE);
				State = 8176; _localctx.logical_file_name = id_();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8177; Match(MODIFY);
				State = 8178; Match(FILE);
				State = 8179; filespec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilespecContext : ParserRuleContext {
		public Id_or_stringContext name;
		public Id_or_stringContext new_name;
		public IToken file_name;
		public File_sizeContext size;
		public File_sizeContext max_size;
		public File_sizeContext growth_increment;
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public Id_or_stringContext[] id_or_string() {
			return GetRuleContexts<Id_or_stringContext>();
		}
		public Id_or_stringContext id_or_string(int i) {
			return GetRuleContext<Id_or_stringContext>(i);
		}
		public ITerminalNode NEWNAME() { return GetToken(TSqlParser.NEWNAME, 0); }
		public ITerminalNode FILENAME() { return GetToken(TSqlParser.FILENAME, 0); }
		public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		public ITerminalNode MAXSIZE() { return GetToken(TSqlParser.MAXSIZE, 0); }
		public ITerminalNode UNLIMITED() { return GetToken(TSqlParser.UNLIMITED, 0); }
		public ITerminalNode FILEGROWTH() { return GetToken(TSqlParser.FILEGROWTH, 0); }
		public ITerminalNode OFFLINE() { return GetToken(TSqlParser.OFFLINE, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public File_sizeContext[] file_size() {
			return GetRuleContexts<File_sizeContext>();
		}
		public File_sizeContext file_size(int i) {
			return GetRuleContext<File_sizeContext>(i);
		}
		public FilespecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filespec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFilespec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFilespec(this);
		}
	}

	[RuleVersion(0)]
	public FilespecContext filespec() {
		FilespecContext _localctx = new FilespecContext(_ctx, State);
		EnterRule(_localctx, 616, RULE_filespec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8182; Match(LR_BRACKET);
			State = 8183; Match(NAME);
			State = 8184; Match(EQUAL);
			State = 8185; _localctx.name = id_or_string();
			State = 8190;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1053,_ctx) ) {
			case 1:
				{
				State = 8186; Match(COMMA);
				State = 8187; Match(NEWNAME);
				State = 8188; Match(EQUAL);
				State = 8189; _localctx.new_name = id_or_string();
				}
				break;
			}
			State = 8196;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1054,_ctx) ) {
			case 1:
				{
				State = 8192; Match(COMMA);
				State = 8193; Match(FILENAME);
				State = 8194; Match(EQUAL);
				State = 8195; _localctx.file_name = Match(STRING);
				}
				break;
			}
			State = 8202;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1055,_ctx) ) {
			case 1:
				{
				State = 8198; Match(COMMA);
				State = 8199; Match(SIZE);
				State = 8200; Match(EQUAL);
				State = 8201; _localctx.size = file_size();
				}
				break;
			}
			State = 8209;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1056,_ctx) ) {
			case 1:
				{
				State = 8204; Match(COMMA);
				State = 8205; Match(MAXSIZE);
				State = 8206; Match(EQUAL);
				{
				State = 8207; _localctx.max_size = file_size();
				}
				}
				break;

			case 2:
				{
				State = 8208; Match(UNLIMITED);
				}
				break;
			}
			State = 8215;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1057,_ctx) ) {
			case 1:
				{
				State = 8211; Match(COMMA);
				State = 8212; Match(FILEGROWTH);
				State = 8213; Match(EQUAL);
				State = 8214; _localctx.growth_increment = file_size();
				}
				break;
			}
			State = 8219;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1058,_ctx) ) {
			case 1:
				{
				State = 8217; Match(COMMA);
				State = 8218; Match(OFFLINE);
				}
				break;
			}
			State = 8221; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_or_modify_filegroupsContext : ParserRuleContext {
		public Id_Context filegroup_name;
		public Id_Context filegrou_name;
		public Id_Context new_filegroup_name;
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode CONTAINS() { return GetToken(TSqlParser.CONTAINS, 0); }
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public ITerminalNode MEMORY_OPTIMIZED_DATA() { return GetToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public Filegroup_updatability_optionContext filegroup_updatability_option() {
			return GetRuleContext<Filegroup_updatability_optionContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode AUTOGROW_SINGLE_FILE() { return GetToken(TSqlParser.AUTOGROW_SINGLE_FILE, 0); }
		public ITerminalNode AUTOGROW_ALL_FILES() { return GetToken(TSqlParser.AUTOGROW_ALL_FILES, 0); }
		public Add_or_modify_filegroupsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_or_modify_filegroups; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAdd_or_modify_filegroups(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAdd_or_modify_filegroups(this);
		}
	}

	[RuleVersion(0)]
	public Add_or_modify_filegroupsContext add_or_modify_filegroups() {
		Add_or_modify_filegroupsContext _localctx = new Add_or_modify_filegroupsContext(_ctx, State);
		EnterRule(_localctx, 618, RULE_add_or_modify_filegroups);
		try {
			State = 8247;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1061,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8223; Match(ADD);
				State = 8224; Match(FILEGROUP);
				State = 8225; _localctx.filegroup_name = id_();
				State = 8230;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1059,_ctx) ) {
				case 1:
					{
					State = 8226; Match(CONTAINS);
					State = 8227; Match(FILESTREAM);
					}
					break;

				case 2:
					{
					State = 8228; Match(CONTAINS);
					State = 8229; Match(MEMORY_OPTIMIZED_DATA);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8232; Match(REMOVE);
				State = 8233; Match(FILEGROUP);
				State = 8234; _localctx.filegrou_name = id_();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8235; Match(MODIFY);
				State = 8236; Match(FILEGROUP);
				State = 8237; _localctx.filegrou_name = id_();
				State = 8245;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1060,_ctx) ) {
				case 1:
					{
					State = 8238; filegroup_updatability_option();
					}
					break;

				case 2:
					{
					State = 8239; Match(DEFAULT);
					}
					break;

				case 3:
					{
					State = 8240; Match(NAME);
					State = 8241; Match(EQUAL);
					State = 8242; _localctx.new_filegroup_name = id_();
					}
					break;

				case 4:
					{
					State = 8243; Match(AUTOGROW_SINGLE_FILE);
					}
					break;

				case 5:
					{
					State = 8244; Match(AUTOGROW_ALL_FILES);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Filegroup_updatability_optionContext : ParserRuleContext {
		public ITerminalNode READONLY() { return GetToken(TSqlParser.READONLY, 0); }
		public ITerminalNode READWRITE() { return GetToken(TSqlParser.READWRITE, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(TSqlParser.READ_WRITE, 0); }
		public Filegroup_updatability_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filegroup_updatability_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFilegroup_updatability_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFilegroup_updatability_option(this);
		}
	}

	[RuleVersion(0)]
	public Filegroup_updatability_optionContext filegroup_updatability_option() {
		Filegroup_updatability_optionContext _localctx = new Filegroup_updatability_optionContext(_ctx, State);
		EnterRule(_localctx, 620, RULE_filegroup_updatability_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8249;
			_la = _input.La(1);
			if ( !(((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (READONLY - 770)) | (1L << (READWRITE - 770)) | (1L << (READ_ONLY - 770)) | (1L << (READ_WRITE - 770)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_optionspecContext : ParserRuleContext {
		public Auto_optionContext auto_option() {
			return GetRuleContext<Auto_optionContext>(0);
		}
		public Change_tracking_optionContext change_tracking_option() {
			return GetRuleContext<Change_tracking_optionContext>(0);
		}
		public Containment_optionContext containment_option() {
			return GetRuleContext<Containment_optionContext>(0);
		}
		public Cursor_optionContext cursor_option() {
			return GetRuleContext<Cursor_optionContext>(0);
		}
		public Database_mirroring_optionContext database_mirroring_option() {
			return GetRuleContext<Database_mirroring_optionContext>(0);
		}
		public Date_correlation_optimization_optionContext date_correlation_optimization_option() {
			return GetRuleContext<Date_correlation_optimization_optionContext>(0);
		}
		public Db_encryption_optionContext db_encryption_option() {
			return GetRuleContext<Db_encryption_optionContext>(0);
		}
		public Db_state_optionContext db_state_option() {
			return GetRuleContext<Db_state_optionContext>(0);
		}
		public Db_update_optionContext db_update_option() {
			return GetRuleContext<Db_update_optionContext>(0);
		}
		public Db_user_access_optionContext db_user_access_option() {
			return GetRuleContext<Db_user_access_optionContext>(0);
		}
		public Delayed_durability_optionContext delayed_durability_option() {
			return GetRuleContext<Delayed_durability_optionContext>(0);
		}
		public External_access_optionContext external_access_option() {
			return GetRuleContext<External_access_optionContext>(0);
		}
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public Database_filestream_optionContext database_filestream_option() {
			return GetRuleContext<Database_filestream_optionContext>(0);
		}
		public Hadr_optionsContext hadr_options() {
			return GetRuleContext<Hadr_optionsContext>(0);
		}
		public Mixed_page_allocation_optionContext mixed_page_allocation_option() {
			return GetRuleContext<Mixed_page_allocation_optionContext>(0);
		}
		public Parameterization_optionContext parameterization_option() {
			return GetRuleContext<Parameterization_optionContext>(0);
		}
		public Query_store_optionsContext query_store_options() {
			return GetRuleContext<Query_store_optionsContext>(0);
		}
		public Query_store_options_AzureContext query_store_options_Azure() {
			return GetRuleContext<Query_store_options_AzureContext>(0);
		}
		public Recovery_optionContext recovery_option() {
			return GetRuleContext<Recovery_optionContext>(0);
		}
		public Service_broker_optionContext service_broker_option() {
			return GetRuleContext<Service_broker_optionContext>(0);
		}
		public Snapshot_optionContext snapshot_option() {
			return GetRuleContext<Snapshot_optionContext>(0);
		}
		public Sql_optionContext sql_option() {
			return GetRuleContext<Sql_optionContext>(0);
		}
		public Target_recovery_time_optionContext target_recovery_time_option() {
			return GetRuleContext<Target_recovery_time_optionContext>(0);
		}
		public TerminationContext termination() {
			return GetRuleContext<TerminationContext>(0);
		}
		public Database_optionspecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_optionspec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDatabase_optionspec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDatabase_optionspec(this);
		}
	}

	[RuleVersion(0)]
	public Database_optionspecContext database_optionspec() {
		Database_optionspecContext _localctx = new Database_optionspecContext(_ctx, State);
		EnterRule(_localctx, 622, RULE_database_optionspec);
		try {
			State = 8276;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1062,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8251; auto_option();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8252; change_tracking_option();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8253; containment_option();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8254; cursor_option();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8255; database_mirroring_option();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8256; date_correlation_optimization_option();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8257; db_encryption_option();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8258; db_state_option();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 8259; db_update_option();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 8260; db_user_access_option();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 8261; delayed_durability_option();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 8262; external_access_option();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 8263; Match(FILESTREAM);
				State = 8264; database_filestream_option();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 8265; hadr_options();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 8266; mixed_page_allocation_option();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 8267; parameterization_option();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 8268; query_store_options();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 8269; query_store_options_Azure();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 8270; recovery_option();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 8271; service_broker_option();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 8272; snapshot_option();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 8273; sql_option();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 8274; target_recovery_time_option();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 8275; termination();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_store_optionsContext : ParserRuleContext {
		public ITerminalNode QUERY_STORE() { return GetToken(TSqlParser.QUERY_STORE, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Query_store_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_store_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_store_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_store_options(this);
		}
	}

	[RuleVersion(0)]
	public Query_store_optionsContext query_store_options() {
		Query_store_optionsContext _localctx = new Query_store_optionsContext(_ctx, State);
		EnterRule(_localctx, 624, RULE_query_store_options);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8278; Match(QUERY_STORE);
			State = 8279; Match(EQUAL);
			State = 8280; on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_store_options_AzureContext : ParserRuleContext {
		public ITerminalNode QUERY_STORE() { return GetToken(TSqlParser.QUERY_STORE, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Query_store_option_AzureContext[] query_store_option_Azure() {
			return GetRuleContexts<Query_store_option_AzureContext>();
		}
		public Query_store_option_AzureContext query_store_option_Azure(int i) {
			return GetRuleContext<Query_store_option_AzureContext>(i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Query_store_options_AzureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_store_options_Azure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_store_options_Azure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_store_options_Azure(this);
		}
	}

	[RuleVersion(0)]
	public Query_store_options_AzureContext query_store_options_Azure() {
		Query_store_options_AzureContext _localctx = new Query_store_options_AzureContext(_ctx, State);
		EnterRule(_localctx, 626, RULE_query_store_options_Azure);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8282; Match(QUERY_STORE);
			State = 8283; Match(LR_BRACKET);
			State = 8284; query_store_option_Azure();
			State = 8289;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1063,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 8285; Match(COMMA);
					State = 8286; query_store_option_Azure();
					}
					} 
				}
				State = 8291;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1063,_ctx);
			}
			State = 8292; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_store_option_AzureContext : ParserRuleContext {
		public ITerminalNode OPERATION_MODE() { return GetToken(TSqlParser.OPERATION_MODE, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(TSqlParser.READ_WRITE, 0); }
		public ITerminalNode CLEANUP_POLICY() { return GetToken(TSqlParser.CLEANUP_POLICY, 0); }
		public ITerminalNode STALE_QUERY_THRESHOLD_DAYS() { return GetToken(TSqlParser.STALE_QUERY_THRESHOLD_DAYS, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode DATA_FLUSH_INTERVAL_SECONDS() { return GetToken(TSqlParser.DATA_FLUSH_INTERVAL_SECONDS, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode INTERVAL_LENGTH_MINUTES() { return GetToken(TSqlParser.INTERVAL_LENGTH_MINUTES, 0); }
		public ITerminalNode MAX_STORAGE_SIZE_MB() { return GetToken(TSqlParser.MAX_STORAGE_SIZE_MB, 0); }
		public ITerminalNode QUERY_CAPTURE_MODE() { return GetToken(TSqlParser.QUERY_CAPTURE_MODE, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode SIZE_BASED_CLEANUP_MODE() { return GetToken(TSqlParser.SIZE_BASED_CLEANUP_MODE, 0); }
		public ITerminalNode MAX_PLANS_PER_QUERY() { return GetToken(TSqlParser.MAX_PLANS_PER_QUERY, 0); }
		public ITerminalNode WAIT_STATS_CAPTURE_MODE() { return GetToken(TSqlParser.WAIT_STATS_CAPTURE_MODE, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Query_store_option_AzureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_store_option_Azure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_store_option_Azure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_store_option_Azure(this);
		}
	}

	[RuleVersion(0)]
	public Query_store_option_AzureContext query_store_option_Azure() {
		Query_store_option_AzureContext _localctx = new Query_store_option_AzureContext(_ctx, State);
		EnterRule(_localctx, 628, RULE_query_store_option_Azure);
		try {
			State = 8326;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1064,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8294; Match(OPERATION_MODE);
				State = 8295; Match(EQUAL);
				State = 8296; Match(READ_WRITE);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8297; Match(CLEANUP_POLICY);
				State = 8298; Match(EQUAL);
				State = 8299; Match(LR_BRACKET);
				State = 8300; Match(STALE_QUERY_THRESHOLD_DAYS);
				State = 8301; Match(EQUAL);
				State = 8302; Match(DECIMAL);
				State = 8303; Match(RR_BRACKET);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8304; Match(DATA_FLUSH_INTERVAL_SECONDS);
				State = 8305; Match(EQUAL);
				State = 8306; Match(DECIMAL);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8307; Match(INTERVAL_LENGTH_MINUTES);
				State = 8308; Match(EQUAL);
				State = 8309; Match(DECIMAL);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8310; Match(MAX_STORAGE_SIZE_MB);
				State = 8311; Match(EQUAL);
				State = 8312; Match(DECIMAL);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8313; Match(QUERY_CAPTURE_MODE);
				State = 8314; Match(EQUAL);
				State = 8315; Match(AUTO);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8316; Match(SIZE_BASED_CLEANUP_MODE);
				State = 8317; Match(EQUAL);
				State = 8318; Match(AUTO);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8319; Match(MAX_PLANS_PER_QUERY);
				State = 8320; Match(EQUAL);
				State = 8321; Match(DECIMAL);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 8322; Match(WAIT_STATS_CAPTURE_MODE);
				State = 8323; Match(EQUAL);
				State = 8324; Match(ON);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 8325; Match(OFF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Auto_optionContext : ParserRuleContext {
		public ITerminalNode AUTO_CLOSE() { return GetToken(TSqlParser.AUTO_CLOSE, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode AUTO_CREATE_STATISTICS() { return GetToken(TSqlParser.AUTO_CREATE_STATISTICS, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode INCREMENTAL() { return GetToken(TSqlParser.INCREMENTAL, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode AUTO_SHRINK() { return GetToken(TSqlParser.AUTO_SHRINK, 0); }
		public ITerminalNode AUTO_UPDATE_STATISTICS() { return GetToken(TSqlParser.AUTO_UPDATE_STATISTICS, 0); }
		public ITerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return GetToken(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public Auto_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_auto_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAuto_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAuto_option(this);
		}
	}

	[RuleVersion(0)]
	public Auto_optionContext auto_option() {
		Auto_optionContext _localctx = new Auto_optionContext(_ctx, State);
		EnterRule(_localctx, 630, RULE_auto_option);
		int _la;
		try {
			State = 8345;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1066,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8328; Match(AUTO_CLOSE);
				State = 8329; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8330; Match(AUTO_CREATE_STATISTICS);
				State = 8331; Match(OFF);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8332; Match(ON);
				State = 8337;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1065,_ctx) ) {
				case 1:
					{
					State = 8333; Match(INCREMENTAL);
					State = 8334; Match(EQUAL);
					State = 8335; Match(ON);
					}
					break;

				case 2:
					{
					State = 8336; Match(OFF);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8339; Match(AUTO_SHRINK);
				State = 8340; on_off();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8341; Match(AUTO_UPDATE_STATISTICS);
				State = 8342; on_off();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8343; Match(AUTO_UPDATE_STATISTICS_ASYNC);
				State = 8344;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_tracking_optionContext : ParserRuleContext {
		public ITerminalNode CHANGE_TRACKING() { return GetToken(TSqlParser.CHANGE_TRACKING, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Change_tracking_option_listContext[] change_tracking_option_list() {
			return GetRuleContexts<Change_tracking_option_listContext>();
		}
		public Change_tracking_option_listContext change_tracking_option_list(int i) {
			return GetRuleContext<Change_tracking_option_listContext>(i);
		}
		public Change_tracking_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_tracking_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_tracking_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_tracking_option(this);
		}
	}

	[RuleVersion(0)]
	public Change_tracking_optionContext change_tracking_option() {
		Change_tracking_optionContext _localctx = new Change_tracking_optionContext(_ctx, State);
		EnterRule(_localctx, 632, RULE_change_tracking_option);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8347; Match(CHANGE_TRACKING);
			State = 8348; Match(EQUAL);
			State = 8364;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1069,_ctx) ) {
			case 1:
				{
				State = 8349; Match(OFF);
				}
				break;

			case 2:
				{
				State = 8350; Match(ON);
				State = 8361;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1068,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8351; change_tracking_option_list();
						State = 8356;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1067,_ctx);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
							if ( _alt==1 ) {
								{
								{
								State = 8352; Match(COMMA);
								State = 8353; change_tracking_option_list();
								}
								} 
							}
							State = 8358;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,1067,_ctx);
						}
						}
						} 
					}
					State = 8363;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1068,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_tracking_option_listContext : ParserRuleContext {
		public ITerminalNode AUTO_CLEANUP() { return GetToken(TSqlParser.AUTO_CLEANUP, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode CHANGE_RETENTION() { return GetToken(TSqlParser.CHANGE_RETENTION, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode DAYS() { return GetToken(TSqlParser.DAYS, 0); }
		public ITerminalNode HOURS() { return GetToken(TSqlParser.HOURS, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public Change_tracking_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_tracking_option_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_tracking_option_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_tracking_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Change_tracking_option_listContext change_tracking_option_list() {
		Change_tracking_option_listContext _localctx = new Change_tracking_option_listContext(_ctx, State);
		EnterRule(_localctx, 634, RULE_change_tracking_option_list);
		int _la;
		try {
			State = 8373;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1070,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8366; Match(AUTO_CLEANUP);
				State = 8367; Match(EQUAL);
				State = 8368; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8369; Match(CHANGE_RETENTION);
				State = 8370; Match(EQUAL);
				State = 8371; Match(DECIMAL);
				State = 8372;
				_la = _input.La(1);
				if ( !(_la==DAYS || _la==HOURS || _la==MINUTES) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Containment_optionContext : ParserRuleContext {
		public ITerminalNode CONTAINMENT() { return GetToken(TSqlParser.CONTAINMENT, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode PARTIAL() { return GetToken(TSqlParser.PARTIAL, 0); }
		public Containment_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_containment_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterContainment_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitContainment_option(this);
		}
	}

	[RuleVersion(0)]
	public Containment_optionContext containment_option() {
		Containment_optionContext _localctx = new Containment_optionContext(_ctx, State);
		EnterRule(_localctx, 636, RULE_containment_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8375; Match(CONTAINMENT);
			State = 8376; Match(EQUAL);
			State = 8377;
			_la = _input.La(1);
			if ( !(_la==NONE || _la==PARTIAL) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_optionContext : ParserRuleContext {
		public ITerminalNode CURSOR_CLOSE_ON_COMMIT() { return GetToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode CURSOR_DEFAULT() { return GetToken(TSqlParser.CURSOR_DEFAULT, 0); }
		public ITerminalNode LOCAL() { return GetToken(TSqlParser.LOCAL, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public Cursor_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCursor_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCursor_option(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_optionContext cursor_option() {
		Cursor_optionContext _localctx = new Cursor_optionContext(_ctx, State);
		EnterRule(_localctx, 638, RULE_cursor_option);
		int _la;
		try {
			State = 8383;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1071,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8379; Match(CURSOR_CLOSE_ON_COMMIT);
				State = 8380; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8381; Match(CURSOR_DEFAULT);
				State = 8382;
				_la = _input.La(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_endpointContext : ParserRuleContext {
		public Id_Context endpointname;
		public Id_Context login;
		public IToken state;
		public IToken port;
		public Id_Context cert_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode TCP() { return GetToken(TSqlParser.TCP, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode LISTENER_PORT() { return GetToken(TSqlParser.LISTENER_PORT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode TSQL() { return GetToken(TSqlParser.TSQL, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode SERVICE_BROKER() { return GetToken(TSqlParser.SERVICE_BROKER, 0); }
		public ITerminalNode AUTHENTICATION() { return GetToken(TSqlParser.AUTHENTICATION, 0); }
		public ITerminalNode DATABASE_MIRRORING() { return GetToken(TSqlParser.DATABASE_MIRRORING, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode LISTENER_IP() { return GetToken(TSqlParser.LISTENER_IP, 0); }
		public ITerminalNode WITNESS() { return GetToken(TSqlParser.WITNESS, 0); }
		public ITerminalNode PARTNER() { return GetToken(TSqlParser.PARTNER, 0); }
		public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		public ITerminalNode IPV4_ADDR() { return GetToken(TSqlParser.IPV4_ADDR, 0); }
		public ITerminalNode IPV6_ADDR() { return GetToken(TSqlParser.IPV6_ADDR, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode MESSAGE_FORWARDING() { return GetToken(TSqlParser.MESSAGE_FORWARDING, 0); }
		public ITerminalNode MESSAGE_FORWARD_SIZE() { return GetToken(TSqlParser.MESSAGE_FORWARD_SIZE, 0); }
		public ITerminalNode STARTED() { return GetToken(TSqlParser.STARTED, 0); }
		public ITerminalNode STOPPED() { return GetToken(TSqlParser.STOPPED, 0); }
		public ITerminalNode[] DISABLED() { return GetTokens(TSqlParser.DISABLED); }
		public ITerminalNode DISABLED(int i) {
			return GetToken(TSqlParser.DISABLED, i);
		}
		public ITerminalNode SUPPORTED() { return GetToken(TSqlParser.SUPPORTED, 0); }
		public ITerminalNode REQUIRED() { return GetToken(TSqlParser.REQUIRED, 0); }
		public ITerminalNode ENABLED() { return GetToken(TSqlParser.ENABLED, 0); }
		public ITerminalNode NTLM() { return GetToken(TSqlParser.NTLM, 0); }
		public ITerminalNode KERBEROS() { return GetToken(TSqlParser.KERBEROS, 0); }
		public ITerminalNode NEGOTIATE() { return GetToken(TSqlParser.NEGOTIATE, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode AES() { return GetToken(TSqlParser.AES, 0); }
		public ITerminalNode RC4() { return GetToken(TSqlParser.RC4, 0); }
		public Alter_endpointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_endpoint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_endpoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_endpoint(this);
		}
	}

	[RuleVersion(0)]
	public Alter_endpointContext alter_endpoint() {
		Alter_endpointContext _localctx = new Alter_endpointContext(_ctx, State);
		EnterRule(_localctx, 640, RULE_alter_endpoint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8385; Match(ALTER);
			State = 8386; Match(ENDPOINT);
			State = 8387; _localctx.endpointname = id_();
			State = 8390;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1072,_ctx) ) {
			case 1:
				{
				State = 8388; Match(AUTHORIZATION);
				State = 8389; _localctx.login = id_();
				}
				break;
			}
			State = 8399;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1074,_ctx) ) {
			case 1:
				{
				State = 8392; Match(STATE);
				State = 8393; Match(EQUAL);
				State = 8397;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1073,_ctx) ) {
				case 1:
					{
					State = 8394; _localctx.state = Match(STARTED);
					}
					break;

				case 2:
					{
					State = 8395; _localctx.state = Match(STOPPED);
					}
					break;

				case 3:
					{
					State = 8396; _localctx.state = Match(DISABLED);
					}
					break;
				}
				}
				break;
			}
			State = 8401; Match(AS);
			State = 8402; Match(TCP);
			State = 8403; Match(LR_BRACKET);
			State = 8404; Match(LISTENER_PORT);
			State = 8405; Match(EQUAL);
			State = 8406; _localctx.port = Match(DECIMAL);
			State = 8411;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1075,_ctx) ) {
			case 1:
				{
				State = 8407; Match(COMMA);
				State = 8408; Match(LISTENER_IP);
				State = 8409; Match(EQUAL);
				State = 8410;
				_la = _input.La(1);
				if ( !(_la==ALL || ((((_la - 1129)) & ~0x3f) == 0 && ((1L << (_la - 1129)) & ((1L << (STRING - 1129)) | (1L << (IPV4_ADDR - 1129)) | (1L << (IPV6_ADDR - 1129)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 8413; Match(RR_BRACKET);
			State = 8523;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1099,_ctx) ) {
			case 1:
				{
				State = 8414; Match(TSQL);
				}
				break;

			case 2:
				{
				State = 8415; Match(FOR);
				State = 8416; Match(SERVICE_BROKER);
				State = 8417; Match(LR_BRACKET);
				State = 8418; Match(AUTHENTICATION);
				State = 8419; Match(EQUAL);
				State = 8436;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1080,_ctx) ) {
				case 1:
					{
					State = 8420; Match(WINDOWS);
					State = 8422;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1076,_ctx) ) {
					case 1:
						{
						State = 8421;
						_la = _input.La(1);
						if ( !(_la==KERBEROS || _la==NEGOTIATE || _la==NTLM) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					State = 8426;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1077,_ctx) ) {
					case 1:
						{
						State = 8424; Match(CERTIFICATE);
						State = 8425; _localctx.cert_name = id_();
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 8428; Match(CERTIFICATE);
					State = 8429; _localctx.cert_name = id_();
					State = 8431;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1078,_ctx) ) {
					case 1:
						{
						State = 8430; Match(WINDOWS);
						}
						break;
					}
					State = 8434;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1079,_ctx) ) {
					case 1:
						{
						State = 8433;
						_la = _input.La(1);
						if ( !(_la==KERBEROS || _la==NEGOTIATE || _la==NTLM) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				State = 8455;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1084,_ctx) ) {
				case 1:
					{
					State = 8439;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1081,_ctx) ) {
					case 1:
						{
						State = 8438; Match(COMMA);
						}
						break;
					}
					State = 8441; Match(ENCRYPTION);
					State = 8442; Match(EQUAL);
					State = 8443;
					_la = _input.La(1);
					if ( !(_la==DISABLED || _la==REQUIRED || _la==SUPPORTED) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 8453;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1083,_ctx) ) {
					case 1:
						{
						State = 8444; Match(ALGORITHM);
						State = 8451;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1082,_ctx) ) {
						case 1:
							{
							State = 8445; Match(AES);
							}
							break;

						case 2:
							{
							State = 8446; Match(RC4);
							}
							break;

						case 3:
							{
							State = 8447; Match(AES);
							State = 8448; Match(RC4);
							}
							break;

						case 4:
							{
							State = 8449; Match(RC4);
							State = 8450; Match(AES);
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				State = 8463;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1086,_ctx) ) {
				case 1:
					{
					State = 8458;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1085,_ctx) ) {
					case 1:
						{
						State = 8457; Match(COMMA);
						}
						break;
					}
					State = 8460; Match(MESSAGE_FORWARDING);
					State = 8461; Match(EQUAL);
					State = 8462;
					_la = _input.La(1);
					if ( !(_la==DISABLED || _la==ENABLED) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 8471;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1088,_ctx) ) {
				case 1:
					{
					State = 8466;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1087,_ctx) ) {
					case 1:
						{
						State = 8465; Match(COMMA);
						}
						break;
					}
					State = 8468; Match(MESSAGE_FORWARD_SIZE);
					State = 8469; Match(EQUAL);
					State = 8470; Match(DECIMAL);
					}
					break;
				}
				State = 8473; Match(RR_BRACKET);
				}
				break;

			case 3:
				{
				State = 8474; Match(FOR);
				State = 8475; Match(DATABASE_MIRRORING);
				State = 8476; Match(LR_BRACKET);
				State = 8477; Match(AUTHENTICATION);
				State = 8478; Match(EQUAL);
				State = 8495;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1093,_ctx) ) {
				case 1:
					{
					State = 8479; Match(WINDOWS);
					State = 8481;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1089,_ctx) ) {
					case 1:
						{
						State = 8480;
						_la = _input.La(1);
						if ( !(_la==KERBEROS || _la==NEGOTIATE || _la==NTLM) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					State = 8485;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1090,_ctx) ) {
					case 1:
						{
						State = 8483; Match(CERTIFICATE);
						State = 8484; _localctx.cert_name = id_();
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 8487; Match(CERTIFICATE);
					State = 8488; _localctx.cert_name = id_();
					State = 8490;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1091,_ctx) ) {
					case 1:
						{
						State = 8489; Match(WINDOWS);
						}
						break;
					}
					State = 8493;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1092,_ctx) ) {
					case 1:
						{
						State = 8492;
						_la = _input.La(1);
						if ( !(_la==KERBEROS || _la==NEGOTIATE || _la==NTLM) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				State = 8514;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1097,_ctx) ) {
				case 1:
					{
					State = 8498;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1094,_ctx) ) {
					case 1:
						{
						State = 8497; Match(COMMA);
						}
						break;
					}
					State = 8500; Match(ENCRYPTION);
					State = 8501; Match(EQUAL);
					State = 8502;
					_la = _input.La(1);
					if ( !(_la==DISABLED || _la==REQUIRED || _la==SUPPORTED) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 8512;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1096,_ctx) ) {
					case 1:
						{
						State = 8503; Match(ALGORITHM);
						State = 8510;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1095,_ctx) ) {
						case 1:
							{
							State = 8504; Match(AES);
							}
							break;

						case 2:
							{
							State = 8505; Match(RC4);
							}
							break;

						case 3:
							{
							State = 8506; Match(AES);
							State = 8507; Match(RC4);
							}
							break;

						case 4:
							{
							State = 8508; Match(RC4);
							State = 8509; Match(AES);
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				State = 8517;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1098,_ctx) ) {
				case 1:
					{
					State = 8516; Match(COMMA);
					}
					break;
				}
				State = 8519; Match(ROLE);
				State = 8520; Match(EQUAL);
				State = 8521;
				_la = _input.La(1);
				if ( !(_la==ALL || _la==PARTNER || _la==WITNESS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 8522; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_mirroring_optionContext : ParserRuleContext {
		public Mirroring_set_optionContext mirroring_set_option() {
			return GetRuleContext<Mirroring_set_optionContext>(0);
		}
		public Database_mirroring_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_mirroring_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDatabase_mirroring_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDatabase_mirroring_option(this);
		}
	}

	[RuleVersion(0)]
	public Database_mirroring_optionContext database_mirroring_option() {
		Database_mirroring_optionContext _localctx = new Database_mirroring_optionContext(_ctx, State);
		EnterRule(_localctx, 642, RULE_database_mirroring_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8525; mirroring_set_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mirroring_set_optionContext : ParserRuleContext {
		public Mirroring_partnerContext mirroring_partner() {
			return GetRuleContext<Mirroring_partnerContext>(0);
		}
		public Partner_optionContext partner_option() {
			return GetRuleContext<Partner_optionContext>(0);
		}
		public Mirroring_witnessContext mirroring_witness() {
			return GetRuleContext<Mirroring_witnessContext>(0);
		}
		public Witness_optionContext witness_option() {
			return GetRuleContext<Witness_optionContext>(0);
		}
		public Mirroring_set_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mirroring_set_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMirroring_set_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMirroring_set_option(this);
		}
	}

	[RuleVersion(0)]
	public Mirroring_set_optionContext mirroring_set_option() {
		Mirroring_set_optionContext _localctx = new Mirroring_set_optionContext(_ctx, State);
		EnterRule(_localctx, 644, RULE_mirroring_set_option);
		try {
			State = 8533;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1100,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8527; mirroring_partner();
				State = 8528; partner_option();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8530; mirroring_witness();
				State = 8531; witness_option();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mirroring_partnerContext : ParserRuleContext {
		public ITerminalNode PARTNER() { return GetToken(TSqlParser.PARTNER, 0); }
		public Mirroring_partnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mirroring_partner; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMirroring_partner(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMirroring_partner(this);
		}
	}

	[RuleVersion(0)]
	public Mirroring_partnerContext mirroring_partner() {
		Mirroring_partnerContext _localctx = new Mirroring_partnerContext(_ctx, State);
		EnterRule(_localctx, 646, RULE_mirroring_partner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8535; Match(PARTNER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mirroring_witnessContext : ParserRuleContext {
		public ITerminalNode WITNESS() { return GetToken(TSqlParser.WITNESS, 0); }
		public Mirroring_witnessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mirroring_witness; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMirroring_witness(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMirroring_witness(this);
		}
	}

	[RuleVersion(0)]
	public Mirroring_witnessContext mirroring_witness() {
		Mirroring_witnessContext _localctx = new Mirroring_witnessContext(_ctx, State);
		EnterRule(_localctx, 648, RULE_mirroring_witness);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8537; Match(WITNESS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Witness_partner_equalContext : ParserRuleContext {
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public Witness_partner_equalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_witness_partner_equal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWitness_partner_equal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWitness_partner_equal(this);
		}
	}

	[RuleVersion(0)]
	public Witness_partner_equalContext witness_partner_equal() {
		Witness_partner_equalContext _localctx = new Witness_partner_equalContext(_ctx, State);
		EnterRule(_localctx, 650, RULE_witness_partner_equal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8539; Match(EQUAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partner_optionContext : ParserRuleContext {
		public Witness_partner_equalContext witness_partner_equal() {
			return GetRuleContext<Witness_partner_equalContext>(0);
		}
		public Partner_serverContext partner_server() {
			return GetRuleContext<Partner_serverContext>(0);
		}
		public ITerminalNode FAILOVER() { return GetToken(TSqlParser.FAILOVER, 0); }
		public ITerminalNode FORCE_SERVICE_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode RESUME() { return GetToken(TSqlParser.RESUME, 0); }
		public ITerminalNode SAFETY() { return GetToken(TSqlParser.SAFETY, 0); }
		public ITerminalNode FULL() { return GetToken(TSqlParser.FULL, 0); }
		public ITerminalNode SUSPEND() { return GetToken(TSqlParser.SUSPEND, 0); }
		public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Partner_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partner_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPartner_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPartner_option(this);
		}
	}

	[RuleVersion(0)]
	public Partner_optionContext partner_option() {
		Partner_optionContext _localctx = new Partner_optionContext(_ctx, State);
		EnterRule(_localctx, 652, RULE_partner_option);
		int _la;
		try {
			State = 8553;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1101,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8541; witness_partner_equal();
				State = 8542; partner_server();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8544; Match(FAILOVER);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8545; Match(FORCE_SERVICE_ALLOW_DATA_LOSS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8546; Match(OFF);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8547; Match(RESUME);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8548; Match(SAFETY);
				State = 8549;
				_la = _input.La(1);
				if ( !(_la==FULL || _la==OFF) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8550; Match(SUSPEND);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8551; Match(TIMEOUT);
				State = 8552; Match(DECIMAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Witness_optionContext : ParserRuleContext {
		public Witness_partner_equalContext witness_partner_equal() {
			return GetRuleContext<Witness_partner_equalContext>(0);
		}
		public Witness_serverContext witness_server() {
			return GetRuleContext<Witness_serverContext>(0);
		}
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Witness_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_witness_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWitness_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWitness_option(this);
		}
	}

	[RuleVersion(0)]
	public Witness_optionContext witness_option() {
		Witness_optionContext _localctx = new Witness_optionContext(_ctx, State);
		EnterRule(_localctx, 654, RULE_witness_option);
		try {
			State = 8559;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1102,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8555; witness_partner_equal();
				State = 8556; witness_server();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8558; Match(OFF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Witness_serverContext : ParserRuleContext {
		public Partner_serverContext partner_server() {
			return GetRuleContext<Partner_serverContext>(0);
		}
		public Witness_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_witness_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWitness_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWitness_server(this);
		}
	}

	[RuleVersion(0)]
	public Witness_serverContext witness_server() {
		Witness_serverContext _localctx = new Witness_serverContext(_ctx, State);
		EnterRule(_localctx, 656, RULE_witness_server);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8561; partner_server();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partner_serverContext : ParserRuleContext {
		public Partner_server_tcp_prefixContext partner_server_tcp_prefix() {
			return GetRuleContext<Partner_server_tcp_prefixContext>(0);
		}
		public HostContext host() {
			return GetRuleContext<HostContext>(0);
		}
		public Mirroring_host_port_seperatorContext mirroring_host_port_seperator() {
			return GetRuleContext<Mirroring_host_port_seperatorContext>(0);
		}
		public Port_numberContext port_number() {
			return GetRuleContext<Port_numberContext>(0);
		}
		public Partner_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partner_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPartner_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPartner_server(this);
		}
	}

	[RuleVersion(0)]
	public Partner_serverContext partner_server() {
		Partner_serverContext _localctx = new Partner_serverContext(_ctx, State);
		EnterRule(_localctx, 658, RULE_partner_server);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8563; partner_server_tcp_prefix();
			State = 8564; host();
			State = 8565; mirroring_host_port_seperator();
			State = 8566; port_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mirroring_host_port_seperatorContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(TSqlParser.COLON, 0); }
		public Mirroring_host_port_seperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mirroring_host_port_seperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMirroring_host_port_seperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMirroring_host_port_seperator(this);
		}
	}

	[RuleVersion(0)]
	public Mirroring_host_port_seperatorContext mirroring_host_port_seperator() {
		Mirroring_host_port_seperatorContext _localctx = new Mirroring_host_port_seperatorContext(_ctx, State);
		EnterRule(_localctx, 660, RULE_mirroring_host_port_seperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8568; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partner_server_tcp_prefixContext : ParserRuleContext {
		public ITerminalNode TCP() { return GetToken(TSqlParser.TCP, 0); }
		public ITerminalNode COLON() { return GetToken(TSqlParser.COLON, 0); }
		public ITerminalNode DOUBLE_FORWARD_SLASH() { return GetToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0); }
		public Partner_server_tcp_prefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partner_server_tcp_prefix; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPartner_server_tcp_prefix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPartner_server_tcp_prefix(this);
		}
	}

	[RuleVersion(0)]
	public Partner_server_tcp_prefixContext partner_server_tcp_prefix() {
		Partner_server_tcp_prefixContext _localctx = new Partner_server_tcp_prefixContext(_ctx, State);
		EnterRule(_localctx, 662, RULE_partner_server_tcp_prefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8570; Match(TCP);
			State = 8571; Match(COLON);
			State = 8572; Match(DOUBLE_FORWARD_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Port_numberContext : ParserRuleContext {
		public IToken port;
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Port_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_port_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPort_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPort_number(this);
		}
	}

	[RuleVersion(0)]
	public Port_numberContext port_number() {
		Port_numberContext _localctx = new Port_numberContext(_ctx, State);
		EnterRule(_localctx, 664, RULE_port_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8574; _localctx.port = Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HostContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public HostContext host() {
			return GetRuleContext<HostContext>(0);
		}
		public HostContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_host; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterHost(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitHost(this);
		}
	}

	[RuleVersion(0)]
	public HostContext host() {
		HostContext _localctx = new HostContext(_ctx, State);
		EnterRule(_localctx, 666, RULE_host);
		try {
			State = 8586;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1104,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8576; id_();
				State = 8577; Match(DOT);
				State = 8578; host();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8584;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1103,_ctx) ) {
				case 1:
					{
					State = 8580; id_();
					State = 8581; Match(DOT);
					}
					break;

				case 2:
					{
					State = 8583; id_();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_correlation_optimization_optionContext : ParserRuleContext {
		public ITerminalNode DATE_CORRELATION_OPTIMIZATION() { return GetToken(TSqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Date_correlation_optimization_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_correlation_optimization_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDate_correlation_optimization_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDate_correlation_optimization_option(this);
		}
	}

	[RuleVersion(0)]
	public Date_correlation_optimization_optionContext date_correlation_optimization_option() {
		Date_correlation_optimization_optionContext _localctx = new Date_correlation_optimization_optionContext(_ctx, State);
		EnterRule(_localctx, 668, RULE_date_correlation_optimization_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8588; Match(DATE_CORRELATION_OPTIMIZATION);
			State = 8589; on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_encryption_optionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Db_encryption_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_encryption_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDb_encryption_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDb_encryption_option(this);
		}
	}

	[RuleVersion(0)]
	public Db_encryption_optionContext db_encryption_option() {
		Db_encryption_optionContext _localctx = new Db_encryption_optionContext(_ctx, State);
		EnterRule(_localctx, 670, RULE_db_encryption_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8591; Match(ENCRYPTION);
			State = 8592; on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_state_optionContext : ParserRuleContext {
		public ITerminalNode ONLINE() { return GetToken(TSqlParser.ONLINE, 0); }
		public ITerminalNode OFFLINE() { return GetToken(TSqlParser.OFFLINE, 0); }
		public ITerminalNode EMERGENCY() { return GetToken(TSqlParser.EMERGENCY, 0); }
		public Db_state_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_state_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDb_state_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDb_state_option(this);
		}
	}

	[RuleVersion(0)]
	public Db_state_optionContext db_state_option() {
		Db_state_optionContext _localctx = new Db_state_optionContext(_ctx, State);
		EnterRule(_localctx, 672, RULE_db_state_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8594;
			_la = _input.La(1);
			if ( !(_la==EMERGENCY || _la==OFFLINE || _la==ONLINE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_update_optionContext : ParserRuleContext {
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(TSqlParser.READ_WRITE, 0); }
		public Db_update_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_update_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDb_update_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDb_update_option(this);
		}
	}

	[RuleVersion(0)]
	public Db_update_optionContext db_update_option() {
		Db_update_optionContext _localctx = new Db_update_optionContext(_ctx, State);
		EnterRule(_localctx, 674, RULE_db_update_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8596;
			_la = _input.La(1);
			if ( !(_la==READ_ONLY || _la==READ_WRITE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_user_access_optionContext : ParserRuleContext {
		public ITerminalNode SINGLE_USER() { return GetToken(TSqlParser.SINGLE_USER, 0); }
		public ITerminalNode RESTRICTED_USER() { return GetToken(TSqlParser.RESTRICTED_USER, 0); }
		public ITerminalNode MULTI_USER() { return GetToken(TSqlParser.MULTI_USER, 0); }
		public Db_user_access_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_user_access_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDb_user_access_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDb_user_access_option(this);
		}
	}

	[RuleVersion(0)]
	public Db_user_access_optionContext db_user_access_option() {
		Db_user_access_optionContext _localctx = new Db_user_access_optionContext(_ctx, State);
		EnterRule(_localctx, 676, RULE_db_user_access_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8598;
			_la = _input.La(1);
			if ( !(_la==MULTI_USER || _la==RESTRICTED_USER || _la==SINGLE_USER) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delayed_durability_optionContext : ParserRuleContext {
		public ITerminalNode DELAYED_DURABILITY() { return GetToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DISABLED() { return GetToken(TSqlParser.DISABLED, 0); }
		public ITerminalNode ALLOWED() { return GetToken(TSqlParser.ALLOWED, 0); }
		public ITerminalNode FORCED() { return GetToken(TSqlParser.FORCED, 0); }
		public Delayed_durability_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delayed_durability_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDelayed_durability_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDelayed_durability_option(this);
		}
	}

	[RuleVersion(0)]
	public Delayed_durability_optionContext delayed_durability_option() {
		Delayed_durability_optionContext _localctx = new Delayed_durability_optionContext(_ctx, State);
		EnterRule(_localctx, 678, RULE_delayed_durability_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8600; Match(DELAYED_DURABILITY);
			State = 8601; Match(EQUAL);
			State = 8602;
			_la = _input.La(1);
			if ( !(_la==ALLOWED || _la==DISABLED || _la==FORCED) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_access_optionContext : ParserRuleContext {
		public ITerminalNode DB_CHAINING() { return GetToken(TSqlParser.DB_CHAINING, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode TRUSTWORTHY() { return GetToken(TSqlParser.TRUSTWORTHY, 0); }
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public ITerminalNode NESTED_TRIGGERS() { return GetToken(TSqlParser.NESTED_TRIGGERS, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode TRANSFORM_NOISE_WORDS() { return GetToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public ITerminalNode TWO_DIGIT_YEAR_CUTOFF() { return GetToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public External_access_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_access_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExternal_access_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExternal_access_option(this);
		}
	}

	[RuleVersion(0)]
	public External_access_optionContext external_access_option() {
		External_access_optionContext _localctx = new External_access_optionContext(_ctx, State);
		EnterRule(_localctx, 680, RULE_external_access_option);
		int _la;
		try {
			State = 8629;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1107,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8604; Match(DB_CHAINING);
				State = 8605; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8606; Match(TRUSTWORTHY);
				State = 8607; on_off();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8608; Match(DEFAULT_LANGUAGE);
				State = 8609; Match(EQUAL);
				State = 8612;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1105,_ctx) ) {
				case 1:
					{
					State = 8610; id_();
					}
					break;

				case 2:
					{
					State = 8611; Match(STRING);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8614; Match(DEFAULT_FULLTEXT_LANGUAGE);
				State = 8615; Match(EQUAL);
				State = 8618;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1106,_ctx) ) {
				case 1:
					{
					State = 8616; id_();
					}
					break;

				case 2:
					{
					State = 8617; Match(STRING);
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8620; Match(NESTED_TRIGGERS);
				State = 8621; Match(EQUAL);
				State = 8622;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8623; Match(TRANSFORM_NOISE_WORDS);
				State = 8624; Match(EQUAL);
				State = 8625;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8626; Match(TWO_DIGIT_YEAR_CUTOFF);
				State = 8627; Match(EQUAL);
				State = 8628; Match(DECIMAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hadr_optionsContext : ParserRuleContext {
		public Id_Context availability_group_name;
		public ITerminalNode HADR() { return GetToken(TSqlParser.HADR, 0); }
		public ITerminalNode SUSPEND() { return GetToken(TSqlParser.SUSPEND, 0); }
		public ITerminalNode RESUME() { return GetToken(TSqlParser.RESUME, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Hadr_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hadr_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterHadr_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitHadr_options(this);
		}
	}

	[RuleVersion(0)]
	public Hadr_optionsContext hadr_options() {
		Hadr_optionsContext _localctx = new Hadr_optionsContext(_ctx, State);
		EnterRule(_localctx, 682, RULE_hadr_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8631; Match(HADR);
			State = 8640;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1109,_ctx) ) {
			case 1:
				{
				State = 8637;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1108,_ctx) ) {
				case 1:
					{
					State = 8632; Match(AVAILABILITY);
					State = 8633; Match(GROUP);
					State = 8634; Match(EQUAL);
					State = 8635; _localctx.availability_group_name = id_();
					}
					break;

				case 2:
					{
					State = 8636; Match(OFF);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 8639;
				_la = _input.La(1);
				if ( !(_la==RESUME || _la==SUSPEND) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mixed_page_allocation_optionContext : ParserRuleContext {
		public ITerminalNode MIXED_PAGE_ALLOCATION() { return GetToken(TSqlParser.MIXED_PAGE_ALLOCATION, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Mixed_page_allocation_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mixed_page_allocation_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMixed_page_allocation_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMixed_page_allocation_option(this);
		}
	}

	[RuleVersion(0)]
	public Mixed_page_allocation_optionContext mixed_page_allocation_option() {
		Mixed_page_allocation_optionContext _localctx = new Mixed_page_allocation_optionContext(_ctx, State);
		EnterRule(_localctx, 684, RULE_mixed_page_allocation_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8642; Match(MIXED_PAGE_ALLOCATION);
			State = 8643;
			_la = _input.La(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameterization_optionContext : ParserRuleContext {
		public ITerminalNode PARAMETERIZATION() { return GetToken(TSqlParser.PARAMETERIZATION, 0); }
		public ITerminalNode SIMPLE() { return GetToken(TSqlParser.SIMPLE, 0); }
		public ITerminalNode FORCED() { return GetToken(TSqlParser.FORCED, 0); }
		public Parameterization_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterization_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterParameterization_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitParameterization_option(this);
		}
	}

	[RuleVersion(0)]
	public Parameterization_optionContext parameterization_option() {
		Parameterization_optionContext _localctx = new Parameterization_optionContext(_ctx, State);
		EnterRule(_localctx, 686, RULE_parameterization_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8645; Match(PARAMETERIZATION);
			State = 8646;
			_la = _input.La(1);
			if ( !(_la==FORCED || _la==SIMPLE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Recovery_optionContext : ParserRuleContext {
		public ITerminalNode RECOVERY() { return GetToken(TSqlParser.RECOVERY, 0); }
		public ITerminalNode FULL() { return GetToken(TSqlParser.FULL, 0); }
		public ITerminalNode BULK_LOGGED() { return GetToken(TSqlParser.BULK_LOGGED, 0); }
		public ITerminalNode SIMPLE() { return GetToken(TSqlParser.SIMPLE, 0); }
		public ITerminalNode TORN_PAGE_DETECTION() { return GetToken(TSqlParser.TORN_PAGE_DETECTION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode ACCELERATED_DATABASE_RECOVERY() { return GetToken(TSqlParser.ACCELERATED_DATABASE_RECOVERY, 0); }
		public ITerminalNode PAGE_VERIFY() { return GetToken(TSqlParser.PAGE_VERIFY, 0); }
		public ITerminalNode CHECKSUM() { return GetToken(TSqlParser.CHECKSUM, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public Recovery_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recovery_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRecovery_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRecovery_option(this);
		}
	}

	[RuleVersion(0)]
	public Recovery_optionContext recovery_option() {
		Recovery_optionContext _localctx = new Recovery_optionContext(_ctx, State);
		EnterRule(_localctx, 688, RULE_recovery_option);
		int _la;
		try {
			State = 8657;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1110,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8648; Match(RECOVERY);
				State = 8649;
				_la = _input.La(1);
				if ( !(_la==BULK_LOGGED || _la==FULL || _la==SIMPLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8650; Match(TORN_PAGE_DETECTION);
				State = 8651; on_off();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8652; Match(ACCELERATED_DATABASE_RECOVERY);
				State = 8653; Match(EQUAL);
				State = 8654; on_off();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8655; Match(PAGE_VERIFY);
				State = 8656;
				_la = _input.La(1);
				if ( !(_la==CHECKSUM || _la==NONE || _la==TORN_PAGE_DETECTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Service_broker_optionContext : ParserRuleContext {
		public ITerminalNode ENABLE_BROKER() { return GetToken(TSqlParser.ENABLE_BROKER, 0); }
		public ITerminalNode DISABLE_BROKER() { return GetToken(TSqlParser.DISABLE_BROKER, 0); }
		public ITerminalNode NEW_BROKER() { return GetToken(TSqlParser.NEW_BROKER, 0); }
		public ITerminalNode ERROR_BROKER_CONVERSATIONS() { return GetToken(TSqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
		public ITerminalNode HONOR_BROKER_PRIORITY() { return GetToken(TSqlParser.HONOR_BROKER_PRIORITY, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Service_broker_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_service_broker_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterService_broker_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitService_broker_option(this);
		}
	}

	[RuleVersion(0)]
	public Service_broker_optionContext service_broker_option() {
		Service_broker_optionContext _localctx = new Service_broker_optionContext(_ctx, State);
		EnterRule(_localctx, 690, RULE_service_broker_option);
		try {
			State = 8665;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1111,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8659; Match(ENABLE_BROKER);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8660; Match(DISABLE_BROKER);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8661; Match(NEW_BROKER);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8662; Match(ERROR_BROKER_CONVERSATIONS);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8663; Match(HONOR_BROKER_PRIORITY);
				State = 8664; on_off();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Snapshot_optionContext : ParserRuleContext {
		public IToken MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT;
		public ITerminalNode ALLOW_SNAPSHOT_ISOLATION() { return GetToken(TSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode READ_COMMITTED_SNAPSHOT() { return GetToken(TSqlParser.READ_COMMITTED_SNAPSHOT, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Snapshot_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_snapshot_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSnapshot_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSnapshot_option(this);
		}
	}

	[RuleVersion(0)]
	public Snapshot_optionContext snapshot_option() {
		Snapshot_optionContext _localctx = new Snapshot_optionContext(_ctx, State);
		EnterRule(_localctx, 692, RULE_snapshot_option);
		int _la;
		try {
			State = 8672;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1112,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8667; Match(ALLOW_SNAPSHOT_ISOLATION);
				State = 8668; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8669; Match(READ_COMMITTED_SNAPSHOT);
				State = 8670;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8671;
				_localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
					_localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_optionContext : ParserRuleContext {
		public ITerminalNode ANSI_NULL_DEFAULT() { return GetToken(TSqlParser.ANSI_NULL_DEFAULT, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode ANSI_NULLS() { return GetToken(TSqlParser.ANSI_NULLS, 0); }
		public ITerminalNode ANSI_PADDING() { return GetToken(TSqlParser.ANSI_PADDING, 0); }
		public ITerminalNode ANSI_WARNINGS() { return GetToken(TSqlParser.ANSI_WARNINGS, 0); }
		public ITerminalNode ARITHABORT() { return GetToken(TSqlParser.ARITHABORT, 0); }
		public ITerminalNode COMPATIBILITY_LEVEL() { return GetToken(TSqlParser.COMPATIBILITY_LEVEL, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode CONCAT_NULL_YIELDS_NULL() { return GetToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public ITerminalNode NUMERIC_ROUNDABORT() { return GetToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
		public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public ITerminalNode RECURSIVE_TRIGGERS() { return GetToken(TSqlParser.RECURSIVE_TRIGGERS, 0); }
		public Sql_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSql_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSql_option(this);
		}
	}

	[RuleVersion(0)]
	public Sql_optionContext sql_option() {
		Sql_optionContext _localctx = new Sql_optionContext(_ctx, State);
		EnterRule(_localctx, 694, RULE_sql_option);
		try {
			State = 8695;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1113,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8674; Match(ANSI_NULL_DEFAULT);
				State = 8675; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8676; Match(ANSI_NULLS);
				State = 8677; on_off();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8678; Match(ANSI_PADDING);
				State = 8679; on_off();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8680; Match(ANSI_WARNINGS);
				State = 8681; on_off();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8682; Match(ARITHABORT);
				State = 8683; on_off();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8684; Match(COMPATIBILITY_LEVEL);
				State = 8685; Match(EQUAL);
				State = 8686; Match(DECIMAL);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8687; Match(CONCAT_NULL_YIELDS_NULL);
				State = 8688; on_off();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8689; Match(NUMERIC_ROUNDABORT);
				State = 8690; on_off();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 8691; Match(QUOTED_IDENTIFIER);
				State = 8692; on_off();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 8693; Match(RECURSIVE_TRIGGERS);
				State = 8694; on_off();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target_recovery_time_optionContext : ParserRuleContext {
		public ITerminalNode TARGET_RECOVERY_TIME() { return GetToken(TSqlParser.TARGET_RECOVERY_TIME, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode SECONDS() { return GetToken(TSqlParser.SECONDS, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public Target_recovery_time_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target_recovery_time_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTarget_recovery_time_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTarget_recovery_time_option(this);
		}
	}

	[RuleVersion(0)]
	public Target_recovery_time_optionContext target_recovery_time_option() {
		Target_recovery_time_optionContext _localctx = new Target_recovery_time_optionContext(_ctx, State);
		EnterRule(_localctx, 696, RULE_target_recovery_time_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8697; Match(TARGET_RECOVERY_TIME);
			State = 8698; Match(EQUAL);
			State = 8699; Match(DECIMAL);
			State = 8700;
			_la = _input.La(1);
			if ( !(_la==MINUTES || _la==SECONDS) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminationContext : ParserRuleContext {
		public IToken seconds;
		public ITerminalNode ROLLBACK() { return GetToken(TSqlParser.ROLLBACK, 0); }
		public ITerminalNode AFTER() { return GetToken(TSqlParser.AFTER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(TSqlParser.IMMEDIATE, 0); }
		public ITerminalNode NO_WAIT() { return GetToken(TSqlParser.NO_WAIT, 0); }
		public TerminationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termination; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTermination(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTermination(this);
		}
	}

	[RuleVersion(0)]
	public TerminationContext termination() {
		TerminationContext _localctx = new TerminationContext(_ctx, State);
		EnterRule(_localctx, 698, RULE_termination);
		try {
			State = 8708;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1114,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8702; Match(ROLLBACK);
				State = 8703; Match(AFTER);
				State = 8704; _localctx.seconds = Match(DECIMAL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8705; Match(ROLLBACK);
				State = 8706; Match(IMMEDIATE);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8707; Match(NO_WAIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_indexContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Drop_relational_or_xml_or_spatial_indexContext[] drop_relational_or_xml_or_spatial_index() {
			return GetRuleContexts<Drop_relational_or_xml_or_spatial_indexContext>();
		}
		public Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index(int i) {
			return GetRuleContext<Drop_relational_or_xml_or_spatial_indexContext>(i);
		}
		public Drop_backward_compatible_indexContext[] drop_backward_compatible_index() {
			return GetRuleContexts<Drop_backward_compatible_indexContext>();
		}
		public Drop_backward_compatible_indexContext drop_backward_compatible_index(int i) {
			return GetRuleContext<Drop_backward_compatible_indexContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_index(this);
		}
	}

	[RuleVersion(0)]
	public Drop_indexContext drop_index() {
		Drop_indexContext _localctx = new Drop_indexContext(_ctx, State);
		EnterRule(_localctx, 700, RULE_drop_index);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8710; Match(DROP);
			State = 8711; Match(INDEX);
			State = 8714;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1115,_ctx) ) {
			case 1:
				{
				State = 8712; Match(IF);
				State = 8713; Match(EXISTS);
				}
				break;
			}
			State = 8732;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1118,_ctx) ) {
			case 1:
				{
				State = 8716; drop_relational_or_xml_or_spatial_index();
				State = 8721;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1116,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8717; Match(COMMA);
						State = 8718; drop_relational_or_xml_or_spatial_index();
						}
						} 
					}
					State = 8723;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1116,_ctx);
				}
				}
				break;

			case 2:
				{
				State = 8724; drop_backward_compatible_index();
				State = 8729;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1117,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8725; Match(COMMA);
						State = 8726; drop_backward_compatible_index();
						}
						} 
					}
					State = 8731;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1117,_ctx);
				}
				}
				break;
			}
			State = 8735;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1119,_ctx) ) {
			case 1:
				{
				State = 8734; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_relational_or_xml_or_spatial_indexContext : ParserRuleContext {
		public Id_Context index_name;
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Drop_relational_or_xml_or_spatial_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_relational_or_xml_or_spatial_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_relational_or_xml_or_spatial_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_relational_or_xml_or_spatial_index(this);
		}
	}

	[RuleVersion(0)]
	public Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index() {
		Drop_relational_or_xml_or_spatial_indexContext _localctx = new Drop_relational_or_xml_or_spatial_indexContext(_ctx, State);
		EnterRule(_localctx, 702, RULE_drop_relational_or_xml_or_spatial_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8737; _localctx.index_name = id_();
			State = 8738; Match(ON);
			State = 8739; full_table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_backward_compatible_indexContext : ParserRuleContext {
		public Id_Context owner_name;
		public Id_Context table_or_view_name;
		public Id_Context index_name;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Drop_backward_compatible_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_backward_compatible_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_backward_compatible_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_backward_compatible_index(this);
		}
	}

	[RuleVersion(0)]
	public Drop_backward_compatible_indexContext drop_backward_compatible_index() {
		Drop_backward_compatible_indexContext _localctx = new Drop_backward_compatible_indexContext(_ctx, State);
		EnterRule(_localctx, 704, RULE_drop_backward_compatible_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8744;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1120,_ctx) ) {
			case 1:
				{
				State = 8741; _localctx.owner_name = id_();
				State = 8742; Match(DOT);
				}
				break;
			}
			State = 8746; _localctx.table_or_view_name = id_();
			State = 8747; Match(DOT);
			State = 8748; _localctx.index_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_procedureContext : ParserRuleContext {
		public IToken proc;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Func_proc_name_schemaContext[] func_proc_name_schema() {
			return GetRuleContexts<Func_proc_name_schemaContext>();
		}
		public Func_proc_name_schemaContext func_proc_name_schema(int i) {
			return GetRuleContext<Func_proc_name_schemaContext>(i);
		}
		public ITerminalNode PROC() { return GetToken(TSqlParser.PROC, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(TSqlParser.PROCEDURE, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_procedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_procedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_procedure(this);
		}
	}

	[RuleVersion(0)]
	public Drop_procedureContext drop_procedure() {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, State);
		EnterRule(_localctx, 706, RULE_drop_procedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8750; Match(DROP);
			State = 8751;
			_localctx.proc = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
				_localctx.proc = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 8754;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1121,_ctx) ) {
			case 1:
				{
				State = 8752; Match(IF);
				State = 8753; Match(EXISTS);
				}
				break;
			}
			State = 8756; func_proc_name_schema();
			State = 8761;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1122,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 8757; Match(COMMA);
					State = 8758; func_proc_name_schema();
					}
					} 
				}
				State = 8763;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1122,_ctx);
			}
			State = 8765;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1123,_ctx) ) {
			case 1:
				{
				State = 8764; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_triggerContext : ParserRuleContext {
		public Drop_dml_triggerContext drop_dml_trigger() {
			return GetRuleContext<Drop_dml_triggerContext>(0);
		}
		public Drop_ddl_triggerContext drop_ddl_trigger() {
			return GetRuleContext<Drop_ddl_triggerContext>(0);
		}
		public Drop_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_trigger(this);
		}
	}

	[RuleVersion(0)]
	public Drop_triggerContext drop_trigger() {
		Drop_triggerContext _localctx = new Drop_triggerContext(_ctx, State);
		EnterRule(_localctx, 708, RULE_drop_trigger);
		try {
			State = 8769;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1124,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8767; drop_dml_trigger();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8768; drop_ddl_trigger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_dml_triggerContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext[] simple_name() {
			return GetRuleContexts<Simple_nameContext>();
		}
		public Simple_nameContext simple_name(int i) {
			return GetRuleContext<Simple_nameContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_dml_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_dml_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_dml_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_dml_trigger(this);
		}
	}

	[RuleVersion(0)]
	public Drop_dml_triggerContext drop_dml_trigger() {
		Drop_dml_triggerContext _localctx = new Drop_dml_triggerContext(_ctx, State);
		EnterRule(_localctx, 710, RULE_drop_dml_trigger);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8771; Match(DROP);
			State = 8772; Match(TRIGGER);
			State = 8775;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1125,_ctx) ) {
			case 1:
				{
				State = 8773; Match(IF);
				State = 8774; Match(EXISTS);
				}
				break;
			}
			State = 8777; simple_name();
			State = 8782;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1126,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 8778; Match(COMMA);
					State = 8779; simple_name();
					}
					} 
				}
				State = 8784;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1126,_ctx);
			}
			State = 8786;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1127,_ctx) ) {
			case 1:
				{
				State = 8785; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_ddl_triggerContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext[] simple_name() {
			return GetRuleContexts<Simple_nameContext>();
		}
		public Simple_nameContext simple_name(int i) {
			return GetRuleContext<Simple_nameContext>(i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_ddl_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_ddl_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_ddl_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_ddl_trigger(this);
		}
	}

	[RuleVersion(0)]
	public Drop_ddl_triggerContext drop_ddl_trigger() {
		Drop_ddl_triggerContext _localctx = new Drop_ddl_triggerContext(_ctx, State);
		EnterRule(_localctx, 712, RULE_drop_ddl_trigger);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8788; Match(DROP);
			State = 8789; Match(TRIGGER);
			State = 8792;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1128,_ctx) ) {
			case 1:
				{
				State = 8790; Match(IF);
				State = 8791; Match(EXISTS);
				}
				break;
			}
			State = 8794; simple_name();
			State = 8799;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1129,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 8795; Match(COMMA);
					State = 8796; simple_name();
					}
					} 
				}
				State = 8801;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1129,_ctx);
			}
			State = 8802; Match(ON);
			State = 8806;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1130,_ctx) ) {
			case 1:
				{
				State = 8803; Match(DATABASE);
				}
				break;

			case 2:
				{
				State = 8804; Match(ALL);
				State = 8805; Match(SERVER);
				}
				break;
			}
			State = 8809;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1131,_ctx) ) {
			case 1:
				{
				State = 8808; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_functionContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public Func_proc_name_schemaContext[] func_proc_name_schema() {
			return GetRuleContexts<Func_proc_name_schemaContext>();
		}
		public Func_proc_name_schemaContext func_proc_name_schema(int i) {
			return GetRuleContext<Func_proc_name_schemaContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_function(this);
		}
	}

	[RuleVersion(0)]
	public Drop_functionContext drop_function() {
		Drop_functionContext _localctx = new Drop_functionContext(_ctx, State);
		EnterRule(_localctx, 714, RULE_drop_function);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8811; Match(DROP);
			State = 8812; Match(FUNCTION);
			State = 8815;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1132,_ctx) ) {
			case 1:
				{
				State = 8813; Match(IF);
				State = 8814; Match(EXISTS);
				}
				break;
			}
			State = 8817; func_proc_name_schema();
			State = 8822;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1133,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 8818; Match(COMMA);
					State = 8819; func_proc_name_schema();
					}
					} 
				}
				State = 8824;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1133,_ctx);
			}
			State = 8826;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1134,_ctx) ) {
			case 1:
				{
				State = 8825; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_statisticsContext : ParserRuleContext {
		public Id_Context name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Table_nameContext[] table_name() {
			return GetRuleContexts<Table_nameContext>();
		}
		public Table_nameContext table_name(int i) {
			return GetRuleContext<Table_nameContext>(i);
		}
		public Drop_statisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_statistics; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_statistics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_statistics(this);
		}
	}

	[RuleVersion(0)]
	public Drop_statisticsContext drop_statistics() {
		Drop_statisticsContext _localctx = new Drop_statisticsContext(_ctx, State);
		EnterRule(_localctx, 716, RULE_drop_statistics);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8828; Match(DROP);
			State = 8829; Match(STATISTICS);
			State = 8839;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 8831;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1135,_ctx) ) {
					case 1:
						{
						State = 8830; Match(COMMA);
						}
						break;
					}
					State = 8836;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1136,_ctx) ) {
					case 1:
						{
						State = 8833; table_name();
						State = 8834; Match(DOT);
						}
						break;
					}
					State = 8838; _localctx.name = id_();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8841;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1137,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 8843; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_tableContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Table_nameContext[] table_name() {
			return GetRuleContexts<Table_nameContext>();
		}
		public Table_nameContext table_name(int i) {
			return GetRuleContext<Table_nameContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_table(this);
		}
	}

	[RuleVersion(0)]
	public Drop_tableContext drop_table() {
		Drop_tableContext _localctx = new Drop_tableContext(_ctx, State);
		EnterRule(_localctx, 718, RULE_drop_table);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8845; Match(DROP);
			State = 8846; Match(TABLE);
			State = 8849;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1138,_ctx) ) {
			case 1:
				{
				State = 8847; Match(IF);
				State = 8848; Match(EXISTS);
				}
				break;
			}
			State = 8851; table_name();
			State = 8856;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1139,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 8852; Match(COMMA);
					State = 8853; table_name();
					}
					} 
				}
				State = 8858;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1139,_ctx);
			}
			State = 8860;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1140,_ctx) ) {
			case 1:
				{
				State = 8859; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_viewContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode VIEW() { return GetToken(TSqlParser.VIEW, 0); }
		public Simple_nameContext[] simple_name() {
			return GetRuleContexts<Simple_nameContext>();
		}
		public Simple_nameContext simple_name(int i) {
			return GetRuleContext<Simple_nameContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_view; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_view(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_view(this);
		}
	}

	[RuleVersion(0)]
	public Drop_viewContext drop_view() {
		Drop_viewContext _localctx = new Drop_viewContext(_ctx, State);
		EnterRule(_localctx, 720, RULE_drop_view);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8862; Match(DROP);
			State = 8863; Match(VIEW);
			State = 8866;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1141,_ctx) ) {
			case 1:
				{
				State = 8864; Match(IF);
				State = 8865; Match(EXISTS);
				}
				break;
			}
			State = 8868; simple_name();
			State = 8873;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1142,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 8869; Match(COMMA);
					State = 8870; simple_name();
					}
					} 
				}
				State = 8875;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1142,_ctx);
			}
			State = 8877;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1143,_ctx) ) {
			case 1:
				{
				State = 8876; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_typeContext : ParserRuleContext {
		public Simple_nameContext name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return GetRuleContext<Column_def_table_constraintsContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Default_valueContext default_value() {
			return GetRuleContext<Default_valueContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public Create_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_type(this);
		}
	}

	[RuleVersion(0)]
	public Create_typeContext create_type() {
		Create_typeContext _localctx = new Create_typeContext(_ctx, State);
		EnterRule(_localctx, 722, RULE_create_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8879; Match(CREATE);
			State = 8880; Match(TYPE);
			State = 8881; _localctx.name = simple_name();
			State = 8889;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1145,_ctx) ) {
			case 1:
				{
				State = 8882; Match(FROM);
				State = 8883; data_type();
				State = 8887;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1144,_ctx) ) {
				case 1:
					{
					State = 8884; default_value();
					}
					break;

				case 2:
					{
					State = 8885; Match(NOT);
					State = 8886; Match(NULL_);
					}
					break;
				}
				}
				break;
			}
			State = 8897;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1146,_ctx) ) {
			case 1:
				{
				State = 8891; Match(AS);
				State = 8892; Match(TABLE);
				State = 8893; Match(LR_BRACKET);
				State = 8894; column_def_table_constraints();
				State = 8895; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_typeContext : ParserRuleContext {
		public Simple_nameContext name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_type(this);
		}
	}

	[RuleVersion(0)]
	public Drop_typeContext drop_type() {
		Drop_typeContext _localctx = new Drop_typeContext(_ctx, State);
		EnterRule(_localctx, 724, RULE_drop_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8899; Match(DROP);
			State = 8900; Match(TYPE);
			State = 8903;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1147,_ctx) ) {
			case 1:
				{
				State = 8901; Match(IF);
				State = 8902; Match(EXISTS);
				}
				break;
			}
			State = 8905; _localctx.name = simple_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rowset_function_limitedContext : ParserRuleContext {
		public OpenqueryContext openquery() {
			return GetRuleContext<OpenqueryContext>(0);
		}
		public OpendatasourceContext opendatasource() {
			return GetRuleContext<OpendatasourceContext>(0);
		}
		public Rowset_function_limitedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowset_function_limited; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRowset_function_limited(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRowset_function_limited(this);
		}
	}

	[RuleVersion(0)]
	public Rowset_function_limitedContext rowset_function_limited() {
		Rowset_function_limitedContext _localctx = new Rowset_function_limitedContext(_ctx, State);
		EnterRule(_localctx, 726, RULE_rowset_function_limited);
		try {
			State = 8909;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1148,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8907; openquery();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8908; opendatasource();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenqueryContext : ParserRuleContext {
		public Id_Context linked_server;
		public IToken query;
		public ITerminalNode OPENQUERY() { return GetToken(TSqlParser.OPENQUERY, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public OpenqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpenquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpenquery(this);
		}
	}

	[RuleVersion(0)]
	public OpenqueryContext openquery() {
		OpenqueryContext _localctx = new OpenqueryContext(_ctx, State);
		EnterRule(_localctx, 728, RULE_openquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8911; Match(OPENQUERY);
			State = 8912; Match(LR_BRACKET);
			State = 8913; _localctx.linked_server = id_();
			State = 8914; Match(COMMA);
			State = 8915; _localctx.query = Match(STRING);
			State = 8916; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpendatasourceContext : ParserRuleContext {
		public IToken provider;
		public IToken init;
		public Id_Context database;
		public Id_Context scheme;
		public Id_Context table;
		public ITerminalNode OPENDATASOURCE() { return GetToken(TSqlParser.OPENDATASOURCE, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public OpendatasourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opendatasource; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpendatasource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpendatasource(this);
		}
	}

	[RuleVersion(0)]
	public OpendatasourceContext opendatasource() {
		OpendatasourceContext _localctx = new OpendatasourceContext(_ctx, State);
		EnterRule(_localctx, 730, RULE_opendatasource);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8918; Match(OPENDATASOURCE);
			State = 8919; Match(LR_BRACKET);
			State = 8920; _localctx.provider = Match(STRING);
			State = 8921; Match(COMMA);
			State = 8922; _localctx.init = Match(STRING);
			State = 8923; Match(RR_BRACKET);
			State = 8924; Match(DOT);
			State = 8926;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1149,_ctx) ) {
			case 1:
				{
				State = 8925; _localctx.database = id_();
				}
				break;
			}
			State = 8928; Match(DOT);
			State = 8930;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1150,_ctx) ) {
			case 1:
				{
				State = 8929; _localctx.scheme = id_();
				}
				break;
			}
			State = 8932; Match(DOT);
			{
			State = 8933; _localctx.table = id_();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_statementContext : ParserRuleContext {
		public Declare_localContext _declare_local;
		public IList<Declare_localContext> _loc = new List<Declare_localContext>();
		public Xml_declarationContext _xml_declaration;
		public IList<Xml_declarationContext> _xml_dec = new List<Xml_declarationContext>();
		public ITerminalNode DECLARE() { return GetToken(TSqlParser.DECLARE, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public Table_type_definitionContext table_type_definition() {
			return GetRuleContext<Table_type_definitionContext>(0);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Declare_localContext[] declare_local() {
			return GetRuleContexts<Declare_localContext>();
		}
		public Declare_localContext declare_local(int i) {
			return GetRuleContext<Declare_localContext>(i);
		}
		public Xml_type_definitionContext xml_type_definition() {
			return GetRuleContext<Xml_type_definitionContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode XMLNAMESPACES() { return GetToken(TSqlParser.XMLNAMESPACES, 0); }
		public Xml_declarationContext[] xml_declaration() {
			return GetRuleContexts<Xml_declarationContext>();
		}
		public Xml_declarationContext xml_declaration(int i) {
			return GetRuleContext<Xml_declarationContext>(i);
		}
		public Declare_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_statement(this);
		}
	}

	[RuleVersion(0)]
	public Declare_statementContext declare_statement() {
		Declare_statementContext _localctx = new Declare_statementContext(_ctx, State);
		EnterRule(_localctx, 732, RULE_declare_statement);
		try {
			int _alt;
			State = 8973;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1156,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8935; Match(DECLARE);
				State = 8936; Match(LOCAL_ID);
				State = 8938;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1151,_ctx) ) {
				case 1:
					{
					State = 8937; Match(AS);
					}
					break;
				}
				State = 8943;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1152,_ctx) ) {
				case 1:
					{
					State = 8940; data_type();
					}
					break;

				case 2:
					{
					State = 8941; table_type_definition();
					}
					break;

				case 3:
					{
					State = 8942; table_name();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8945; Match(DECLARE);
				State = 8946; _localctx._declare_local = declare_local();
				_localctx._loc.Add(_localctx._declare_local);
				State = 8951;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1153,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8947; Match(COMMA);
						State = 8948; _localctx._declare_local = declare_local();
						_localctx._loc.Add(_localctx._declare_local);
						}
						} 
					}
					State = 8953;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1153,_ctx);
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8954; Match(DECLARE);
				State = 8955; Match(LOCAL_ID);
				State = 8957;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1154,_ctx) ) {
				case 1:
					{
					State = 8956; Match(AS);
					}
					break;
				}
				State = 8959; xml_type_definition();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8960; Match(WITH);
				State = 8961; Match(XMLNAMESPACES);
				State = 8962; Match(LR_BRACKET);
				State = 8963; _localctx._xml_declaration = xml_declaration();
				_localctx._xml_dec.Add(_localctx._xml_declaration);
				State = 8968;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1155,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 8964; Match(COMMA);
						State = 8965; _localctx._xml_declaration = xml_declaration();
						_localctx._xml_dec.Add(_localctx._xml_declaration);
						}
						} 
					}
					State = 8970;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1155,_ctx);
				}
				State = 8971; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_declarationContext : ParserRuleContext {
		public IToken xml_namespace_uri;
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public Xml_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Xml_declarationContext xml_declaration() {
		Xml_declarationContext _localctx = new Xml_declarationContext(_ctx, State);
		EnterRule(_localctx, 734, RULE_xml_declaration);
		try {
			State = 8980;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1157,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8975; _localctx.xml_namespace_uri = Match(STRING);
				State = 8976; Match(AS);
				State = 8977; id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8978; Match(DEFAULT);
				State = 8979; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_statementContext : ParserRuleContext {
		public ITerminalNode CLOSE() { return GetToken(TSqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public ITerminalNode DEALLOCATE() { return GetToken(TSqlParser.DEALLOCATE, 0); }
		public ITerminalNode CURSOR() { return GetToken(TSqlParser.CURSOR, 0); }
		public Declare_cursorContext declare_cursor() {
			return GetRuleContext<Declare_cursorContext>(0);
		}
		public Fetch_cursorContext fetch_cursor() {
			return GetRuleContext<Fetch_cursorContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(TSqlParser.OPEN, 0); }
		public Cursor_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCursor_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCursor_statement(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_statementContext cursor_statement() {
		Cursor_statementContext _localctx = new Cursor_statementContext(_ctx, State);
		EnterRule(_localctx, 736, RULE_cursor_statement);
		try {
			State = 9011;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1165,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8982; Match(CLOSE);
				State = 8984;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1158,_ctx) ) {
				case 1:
					{
					State = 8983; Match(GLOBAL);
					}
					break;
				}
				State = 8986; cursor_name();
				State = 8988;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1159,_ctx) ) {
				case 1:
					{
					State = 8987; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8990; Match(DEALLOCATE);
				State = 8992;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1160,_ctx) ) {
				case 1:
					{
					State = 8991; Match(GLOBAL);
					}
					break;
				}
				State = 8995;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1161,_ctx) ) {
				case 1:
					{
					State = 8994; Match(CURSOR);
					}
					break;
				}
				State = 8997; cursor_name();
				State = 8999;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1162,_ctx) ) {
				case 1:
					{
					State = 8998; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9001; declare_cursor();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9002; fetch_cursor();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9003; Match(OPEN);
				State = 9005;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1163,_ctx) ) {
				case 1:
					{
					State = 9004; Match(GLOBAL);
					}
					break;
				}
				State = 9007; cursor_name();
				State = 9009;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1164,_ctx) ) {
				case 1:
					{
					State = 9008; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_databaseContext : ParserRuleContext {
		public Id_Context database_name;
		public IToken file_or_filegroup;
		public Id_Context logical_device_name;
		public Id_Context backup_set_name;
		public IToken medianame;
		public IToken stats_percent;
		public Id_Context encryptor_name;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode READ_WRITE_FILEGROUPS() { return GetToken(TSqlParser.READ_WRITE_FILEGROUPS, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] FILE() { return GetTokens(TSqlParser.FILE); }
		public ITerminalNode FILE(int i) {
			return GetToken(TSqlParser.FILE, i);
		}
		public ITerminalNode[] FILEGROUP() { return GetTokens(TSqlParser.FILEGROUP); }
		public ITerminalNode FILEGROUP(int i) {
			return GetToken(TSqlParser.FILEGROUP, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] DISK() { return GetTokens(TSqlParser.DISK); }
		public ITerminalNode DISK(int i) {
			return GetToken(TSqlParser.DISK, i);
		}
		public ITerminalNode[] TAPE() { return GetTokens(TSqlParser.TAPE); }
		public ITerminalNode TAPE(int i) {
			return GetToken(TSqlParser.TAPE, i);
		}
		public ITerminalNode[] URL() { return GetTokens(TSqlParser.URL); }
		public ITerminalNode URL(int i) {
			return GetToken(TSqlParser.URL, i);
		}
		public ITerminalNode[] MIRROR() { return GetTokens(TSqlParser.MIRROR); }
		public ITerminalNode MIRROR(int i) {
			return GetToken(TSqlParser.MIRROR, i);
		}
		public ITerminalNode[] DIFFERENTIAL() { return GetTokens(TSqlParser.DIFFERENTIAL); }
		public ITerminalNode DIFFERENTIAL(int i) {
			return GetToken(TSqlParser.DIFFERENTIAL, i);
		}
		public ITerminalNode[] COPY_ONLY() { return GetTokens(TSqlParser.COPY_ONLY); }
		public ITerminalNode COPY_ONLY(int i) {
			return GetToken(TSqlParser.COPY_ONLY, i);
		}
		public ITerminalNode[] DESCRIPTION() { return GetTokens(TSqlParser.DESCRIPTION); }
		public ITerminalNode DESCRIPTION(int i) {
			return GetToken(TSqlParser.DESCRIPTION, i);
		}
		public ITerminalNode[] NAME() { return GetTokens(TSqlParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(TSqlParser.NAME, i);
		}
		public ITerminalNode[] CREDENTIAL() { return GetTokens(TSqlParser.CREDENTIAL); }
		public ITerminalNode CREDENTIAL(int i) {
			return GetToken(TSqlParser.CREDENTIAL, i);
		}
		public ITerminalNode[] FILE_SNAPSHOT() { return GetTokens(TSqlParser.FILE_SNAPSHOT); }
		public ITerminalNode FILE_SNAPSHOT(int i) {
			return GetToken(TSqlParser.FILE_SNAPSHOT, i);
		}
		public ITerminalNode[] MEDIADESCRIPTION() { return GetTokens(TSqlParser.MEDIADESCRIPTION); }
		public ITerminalNode MEDIADESCRIPTION(int i) {
			return GetToken(TSqlParser.MEDIADESCRIPTION, i);
		}
		public ITerminalNode[] MEDIANAME() { return GetTokens(TSqlParser.MEDIANAME); }
		public ITerminalNode MEDIANAME(int i) {
			return GetToken(TSqlParser.MEDIANAME, i);
		}
		public ITerminalNode[] BLOCKSIZE() { return GetTokens(TSqlParser.BLOCKSIZE); }
		public ITerminalNode BLOCKSIZE(int i) {
			return GetToken(TSqlParser.BLOCKSIZE, i);
		}
		public ITerminalNode[] BUFFERCOUNT() { return GetTokens(TSqlParser.BUFFERCOUNT); }
		public ITerminalNode BUFFERCOUNT(int i) {
			return GetToken(TSqlParser.BUFFERCOUNT, i);
		}
		public ITerminalNode[] MAXTRANSFER() { return GetTokens(TSqlParser.MAXTRANSFER); }
		public ITerminalNode MAXTRANSFER(int i) {
			return GetToken(TSqlParser.MAXTRANSFER, i);
		}
		public ITerminalNode[] RESTART() { return GetTokens(TSqlParser.RESTART); }
		public ITerminalNode RESTART(int i) {
			return GetToken(TSqlParser.RESTART, i);
		}
		public ITerminalNode[] STATS() { return GetTokens(TSqlParser.STATS); }
		public ITerminalNode STATS(int i) {
			return GetToken(TSqlParser.STATS, i);
		}
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] ALGORITHM() { return GetTokens(TSqlParser.ALGORITHM); }
		public ITerminalNode ALGORITHM(int i) {
			return GetToken(TSqlParser.ALGORITHM, i);
		}
		public ITerminalNode[] SERVER() { return GetTokens(TSqlParser.SERVER); }
		public ITerminalNode SERVER(int i) {
			return GetToken(TSqlParser.SERVER, i);
		}
		public ITerminalNode[] CERTIFICATE() { return GetTokens(TSqlParser.CERTIFICATE); }
		public ITerminalNode CERTIFICATE(int i) {
			return GetToken(TSqlParser.CERTIFICATE, i);
		}
		public ITerminalNode[] COMPRESSION() { return GetTokens(TSqlParser.COMPRESSION); }
		public ITerminalNode COMPRESSION(int i) {
			return GetToken(TSqlParser.COMPRESSION, i);
		}
		public ITerminalNode[] NO_COMPRESSION() { return GetTokens(TSqlParser.NO_COMPRESSION); }
		public ITerminalNode NO_COMPRESSION(int i) {
			return GetToken(TSqlParser.NO_COMPRESSION, i);
		}
		public ITerminalNode[] NOINIT() { return GetTokens(TSqlParser.NOINIT); }
		public ITerminalNode NOINIT(int i) {
			return GetToken(TSqlParser.NOINIT, i);
		}
		public ITerminalNode[] INIT() { return GetTokens(TSqlParser.INIT); }
		public ITerminalNode INIT(int i) {
			return GetToken(TSqlParser.INIT, i);
		}
		public ITerminalNode[] NOSKIP() { return GetTokens(TSqlParser.NOSKIP); }
		public ITerminalNode NOSKIP(int i) {
			return GetToken(TSqlParser.NOSKIP, i);
		}
		public ITerminalNode[] SKIP_KEYWORD() { return GetTokens(TSqlParser.SKIP_KEYWORD); }
		public ITerminalNode SKIP_KEYWORD(int i) {
			return GetToken(TSqlParser.SKIP_KEYWORD, i);
		}
		public ITerminalNode[] NOFORMAT() { return GetTokens(TSqlParser.NOFORMAT); }
		public ITerminalNode NOFORMAT(int i) {
			return GetToken(TSqlParser.NOFORMAT, i);
		}
		public ITerminalNode[] FORMAT() { return GetTokens(TSqlParser.FORMAT); }
		public ITerminalNode FORMAT(int i) {
			return GetToken(TSqlParser.FORMAT, i);
		}
		public ITerminalNode[] NO_CHECKSUM() { return GetTokens(TSqlParser.NO_CHECKSUM); }
		public ITerminalNode NO_CHECKSUM(int i) {
			return GetToken(TSqlParser.NO_CHECKSUM, i);
		}
		public ITerminalNode[] CHECKSUM() { return GetTokens(TSqlParser.CHECKSUM); }
		public ITerminalNode CHECKSUM(int i) {
			return GetToken(TSqlParser.CHECKSUM, i);
		}
		public ITerminalNode[] STOP_ON_ERROR() { return GetTokens(TSqlParser.STOP_ON_ERROR); }
		public ITerminalNode STOP_ON_ERROR(int i) {
			return GetToken(TSqlParser.STOP_ON_ERROR, i);
		}
		public ITerminalNode[] CONTINUE_AFTER_ERROR() { return GetTokens(TSqlParser.CONTINUE_AFTER_ERROR); }
		public ITerminalNode CONTINUE_AFTER_ERROR(int i) {
			return GetToken(TSqlParser.CONTINUE_AFTER_ERROR, i);
		}
		public ITerminalNode[] REWIND() { return GetTokens(TSqlParser.REWIND); }
		public ITerminalNode REWIND(int i) {
			return GetToken(TSqlParser.REWIND, i);
		}
		public ITerminalNode[] NOREWIND() { return GetTokens(TSqlParser.NOREWIND); }
		public ITerminalNode NOREWIND(int i) {
			return GetToken(TSqlParser.NOREWIND, i);
		}
		public ITerminalNode[] LOAD() { return GetTokens(TSqlParser.LOAD); }
		public ITerminalNode LOAD(int i) {
			return GetToken(TSqlParser.LOAD, i);
		}
		public ITerminalNode[] NOUNLOAD() { return GetTokens(TSqlParser.NOUNLOAD); }
		public ITerminalNode NOUNLOAD(int i) {
			return GetToken(TSqlParser.NOUNLOAD, i);
		}
		public ITerminalNode[] AES_128() { return GetTokens(TSqlParser.AES_128); }
		public ITerminalNode AES_128(int i) {
			return GetToken(TSqlParser.AES_128, i);
		}
		public ITerminalNode[] AES_192() { return GetTokens(TSqlParser.AES_192); }
		public ITerminalNode AES_192(int i) {
			return GetToken(TSqlParser.AES_192, i);
		}
		public ITerminalNode[] AES_256() { return GetTokens(TSqlParser.AES_256); }
		public ITerminalNode AES_256(int i) {
			return GetToken(TSqlParser.AES_256, i);
		}
		public ITerminalNode[] TRIPLE_DES_3KEY() { return GetTokens(TSqlParser.TRIPLE_DES_3KEY); }
		public ITerminalNode TRIPLE_DES_3KEY(int i) {
			return GetToken(TSqlParser.TRIPLE_DES_3KEY, i);
		}
		public ITerminalNode[] EXPIREDATE() { return GetTokens(TSqlParser.EXPIREDATE); }
		public ITerminalNode EXPIREDATE(int i) {
			return GetToken(TSqlParser.EXPIREDATE, i);
		}
		public ITerminalNode[] RETAINDAYS() { return GetTokens(TSqlParser.RETAINDAYS); }
		public ITerminalNode RETAINDAYS(int i) {
			return GetToken(TSqlParser.RETAINDAYS, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] ASYMMETRIC() { return GetTokens(TSqlParser.ASYMMETRIC); }
		public ITerminalNode ASYMMETRIC(int i) {
			return GetToken(TSqlParser.ASYMMETRIC, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public Backup_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_database(this);
		}
	}

	[RuleVersion(0)]
	public Backup_databaseContext backup_database() {
		Backup_databaseContext _localctx = new Backup_databaseContext(_ctx, State);
		EnterRule(_localctx, 738, RULE_backup_database);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9013; Match(BACKUP);
			State = 9014; Match(DATABASE);
			{
			State = 9015; _localctx.database_name = id_();
			}
			State = 9028;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1168,_ctx) ) {
			case 1:
				{
				State = 9016; Match(READ_WRITE_FILEGROUPS);
				State = 9025;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1167,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 9018;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1166,_ctx) ) {
						case 1:
							{
							State = 9017; Match(COMMA);
							}
							break;
						}
						State = 9020;
						_la = _input.La(1);
						if ( !(_la==FILE || _la==FILEGROUP) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 9021; Match(EQUAL);
						State = 9022; _localctx.file_or_filegroup = Match(STRING);
						}
						} 
					}
					State = 9027;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1167,_ctx);
				}
				}
				break;
			}
			State = 9038;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1170,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 9031;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1169,_ctx) ) {
					case 1:
						{
						State = 9030; Match(COMMA);
						}
						break;
					}
					State = 9033;
					_la = _input.La(1);
					if ( !(_la==FILE || _la==FILEGROUP) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 9034; Match(EQUAL);
					State = 9035; _localctx.file_or_filegroup = Match(STRING);
					}
					} 
				}
				State = 9040;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1170,_ctx);
			}
			State = 9064;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1176,_ctx) ) {
			case 1:
				{
				State = 9041; Match(TO);
				State = 9046;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 9043;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1171,_ctx) ) {
						case 1:
							{
							State = 9042; Match(COMMA);
							}
							break;
						}
						State = 9045; _localctx.logical_device_name = id_();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 9048;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1172,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				{
				State = 9050; Match(TO);
				State = 9060;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 9052;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1173,_ctx) ) {
						case 1:
							{
							State = 9051; Match(COMMA);
							}
							break;
						}
						State = 9054;
						_la = _input.La(1);
						if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 9055; Match(EQUAL);
						State = 9058;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1174,_ctx) ) {
						case 1:
							{
							State = 9056; Match(STRING);
							}
							break;

						case 2:
							{
							State = 9057; id_();
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 9062;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1175,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 9099;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1184,_ctx) ) {
			case 1:
				{
				State = 9076;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 9066; Match(MIRROR);
						State = 9067; Match(TO);
						State = 9072;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 9069;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1177,_ctx) ) {
								case 1:
									{
									State = 9068; Match(COMMA);
									}
									break;
								}
								State = 9071; _localctx.logical_device_name = id_();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 9074;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,1178,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 9078;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1179,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				{
				State = 9095;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 9080; Match(MIRROR);
						State = 9081; Match(TO);
						State = 9091;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 9083;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1180,_ctx) ) {
								case 1:
									{
									State = 9082; Match(COMMA);
									}
									break;
								}
								State = 9085;
								_la = _input.La(1);
								if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								State = 9086; Match(EQUAL);
								State = 9089;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1181,_ctx) ) {
								case 1:
									{
									State = 9087; Match(STRING);
									}
									break;

								case 2:
									{
									State = 9088; id_();
									}
									break;
								}
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 9093;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,1182,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 9097;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1183,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 9261;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1220,_ctx) ) {
			case 1:
				{
				State = 9101; Match(WITH);
				State = 9258;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1219,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						State = 9256;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1218,_ctx) ) {
						case 1:
							{
							State = 9103;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1185,_ctx) ) {
							case 1:
								{
								State = 9102; Match(COMMA);
								}
								break;
							}
							State = 9105; Match(DIFFERENTIAL);
							}
							break;

						case 2:
							{
							State = 9107;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1186,_ctx) ) {
							case 1:
								{
								State = 9106; Match(COMMA);
								}
								break;
							}
							State = 9109; Match(COPY_ONLY);
							}
							break;

						case 3:
							{
							State = 9111;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1187,_ctx) ) {
							case 1:
								{
								State = 9110; Match(COMMA);
								}
								break;
							}
							State = 9113;
							_la = _input.La(1);
							if ( !(_la==COMPRESSION || _la==NO_COMPRESSION) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 4:
							{
							State = 9115;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1188,_ctx) ) {
							case 1:
								{
								State = 9114; Match(COMMA);
								}
								break;
							}
							State = 9117; Match(DESCRIPTION);
							State = 9118; Match(EQUAL);
							State = 9121;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1189,_ctx) ) {
							case 1:
								{
								State = 9119; Match(STRING);
								}
								break;

							case 2:
								{
								State = 9120; id_();
								}
								break;
							}
							}
							break;

						case 5:
							{
							State = 9124;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1190,_ctx) ) {
							case 1:
								{
								State = 9123; Match(COMMA);
								}
								break;
							}
							State = 9126; Match(NAME);
							State = 9127; Match(EQUAL);
							State = 9128; _localctx.backup_set_name = id_();
							}
							break;

						case 6:
							{
							State = 9130;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1191,_ctx) ) {
							case 1:
								{
								State = 9129; Match(COMMA);
								}
								break;
							}
							State = 9132; Match(CREDENTIAL);
							}
							break;

						case 7:
							{
							State = 9134;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1192,_ctx) ) {
							case 1:
								{
								State = 9133; Match(COMMA);
								}
								break;
							}
							State = 9136; Match(FILE_SNAPSHOT);
							}
							break;

						case 8:
							{
							State = 9138;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1193,_ctx) ) {
							case 1:
								{
								State = 9137; Match(COMMA);
								}
								break;
							}
							State = 9152;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1196,_ctx) ) {
							case 1:
								{
								State = 9140; Match(EXPIREDATE);
								State = 9141; Match(EQUAL);
								State = 9144;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1194,_ctx) ) {
								case 1:
									{
									State = 9142; Match(STRING);
									}
									break;

								case 2:
									{
									State = 9143; id_();
									}
									break;
								}
								}
								break;

							case 2:
								{
								State = 9146; Match(RETAINDAYS);
								State = 9147; Match(EQUAL);
								State = 9150;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1195,_ctx) ) {
								case 1:
									{
									State = 9148; Match(DECIMAL);
									}
									break;

								case 2:
									{
									State = 9149; id_();
									}
									break;
								}
								}
								break;
							}
							}
							break;

						case 9:
							{
							State = 9155;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1197,_ctx) ) {
							case 1:
								{
								State = 9154; Match(COMMA);
								}
								break;
							}
							State = 9157;
							_la = _input.La(1);
							if ( !(_la==INIT || _la==NOINIT) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 10:
							{
							State = 9159;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1198,_ctx) ) {
							case 1:
								{
								State = 9158; Match(COMMA);
								}
								break;
							}
							State = 9161;
							_la = _input.La(1);
							if ( !(_la==NOSKIP || _la==SKIP_KEYWORD) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 11:
							{
							State = 9163;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1199,_ctx) ) {
							case 1:
								{
								State = 9162; Match(COMMA);
								}
								break;
							}
							State = 9165;
							_la = _input.La(1);
							if ( !(_la==FORMAT || _la==NOFORMAT) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 12:
							{
							State = 9167;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1200,_ctx) ) {
							case 1:
								{
								State = 9166; Match(COMMA);
								}
								break;
							}
							State = 9169; Match(MEDIADESCRIPTION);
							State = 9170; Match(EQUAL);
							State = 9173;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1201,_ctx) ) {
							case 1:
								{
								State = 9171; Match(STRING);
								}
								break;

							case 2:
								{
								State = 9172; id_();
								}
								break;
							}
							}
							break;

						case 13:
							{
							State = 9176;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1202,_ctx) ) {
							case 1:
								{
								State = 9175; Match(COMMA);
								}
								break;
							}
							State = 9178; Match(MEDIANAME);
							State = 9179; Match(EQUAL);
							{
							State = 9180; _localctx.medianame = Match(STRING);
							}
							}
							break;

						case 14:
							{
							State = 9182;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1203,_ctx) ) {
							case 1:
								{
								State = 9181; Match(COMMA);
								}
								break;
							}
							State = 9184; Match(BLOCKSIZE);
							State = 9185; Match(EQUAL);
							State = 9188;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1204,_ctx) ) {
							case 1:
								{
								State = 9186; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 9187; id_();
								}
								break;
							}
							}
							break;

						case 15:
							{
							State = 9191;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1205,_ctx) ) {
							case 1:
								{
								State = 9190; Match(COMMA);
								}
								break;
							}
							State = 9193; Match(BUFFERCOUNT);
							State = 9194; Match(EQUAL);
							State = 9197;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1206,_ctx) ) {
							case 1:
								{
								State = 9195; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 9196; id_();
								}
								break;
							}
							}
							break;

						case 16:
							{
							State = 9200;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1207,_ctx) ) {
							case 1:
								{
								State = 9199; Match(COMMA);
								}
								break;
							}
							State = 9202; Match(MAXTRANSFER);
							State = 9203; Match(EQUAL);
							State = 9206;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1208,_ctx) ) {
							case 1:
								{
								State = 9204; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 9205; id_();
								}
								break;
							}
							}
							break;

						case 17:
							{
							State = 9209;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1209,_ctx) ) {
							case 1:
								{
								State = 9208; Match(COMMA);
								}
								break;
							}
							State = 9211;
							_la = _input.La(1);
							if ( !(_la==CHECKSUM || _la==NO_CHECKSUM) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 18:
							{
							State = 9213;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1210,_ctx) ) {
							case 1:
								{
								State = 9212; Match(COMMA);
								}
								break;
							}
							State = 9215;
							_la = _input.La(1);
							if ( !(_la==CONTINUE_AFTER_ERROR || _la==STOP_ON_ERROR) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 19:
							{
							State = 9217;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1211,_ctx) ) {
							case 1:
								{
								State = 9216; Match(COMMA);
								}
								break;
							}
							State = 9219; Match(RESTART);
							}
							break;

						case 20:
							{
							State = 9221;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1212,_ctx) ) {
							case 1:
								{
								State = 9220; Match(COMMA);
								}
								break;
							}
							State = 9223; Match(STATS);
							State = 9226;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1213,_ctx) ) {
							case 1:
								{
								State = 9224; Match(EQUAL);
								State = 9225; _localctx.stats_percent = Match(DECIMAL);
								}
								break;
							}
							}
							break;

						case 21:
							{
							State = 9229;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1214,_ctx) ) {
							case 1:
								{
								State = 9228; Match(COMMA);
								}
								break;
							}
							State = 9231;
							_la = _input.La(1);
							if ( !(_la==NOREWIND || _la==REWIND) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 22:
							{
							State = 9233;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1215,_ctx) ) {
							case 1:
								{
								State = 9232; Match(COMMA);
								}
								break;
							}
							State = 9235;
							_la = _input.La(1);
							if ( !(_la==LOAD || _la==NOUNLOAD) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 23:
							{
							State = 9237;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1216,_ctx) ) {
							case 1:
								{
								State = 9236; Match(COMMA);
								}
								break;
							}
							State = 9239; Match(ENCRYPTION);
							State = 9240; Match(LR_BRACKET);
							State = 9241; Match(ALGORITHM);
							State = 9242; Match(EQUAL);
							State = 9243;
							_la = _input.La(1);
							if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AES_128) | (1L << AES_192) | (1L << AES_256))) != 0) || _la==TRIPLE_DES_3KEY) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							State = 9244; Match(COMMA);
							State = 9245; Match(SERVER);
							State = 9246; Match(CERTIFICATE);
							State = 9247; Match(EQUAL);
							State = 9254;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1217,_ctx) ) {
							case 1:
								{
								State = 9248; _localctx.encryptor_name = id_();
								}
								break;

							case 2:
								{
								State = 9249; Match(SERVER);
								State = 9250; Match(ASYMMETRIC);
								State = 9251; Match(KEY);
								State = 9252; Match(EQUAL);
								State = 9253; _localctx.encryptor_name = id_();
								}
								break;
							}
							}
							break;
						}
						} 
					}
					State = 9260;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1219,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_logContext : ParserRuleContext {
		public Id_Context database_name;
		public Id_Context logical_device_name;
		public Id_Context backup_set_name;
		public IToken medianame;
		public IToken stats_percent;
		public IToken undo_file_name;
		public Id_Context encryptor_name;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] DISK() { return GetTokens(TSqlParser.DISK); }
		public ITerminalNode DISK(int i) {
			return GetToken(TSqlParser.DISK, i);
		}
		public ITerminalNode[] TAPE() { return GetTokens(TSqlParser.TAPE); }
		public ITerminalNode TAPE(int i) {
			return GetToken(TSqlParser.TAPE, i);
		}
		public ITerminalNode[] URL() { return GetTokens(TSqlParser.URL); }
		public ITerminalNode URL(int i) {
			return GetToken(TSqlParser.URL, i);
		}
		public ITerminalNode[] MIRROR() { return GetTokens(TSqlParser.MIRROR); }
		public ITerminalNode MIRROR(int i) {
			return GetToken(TSqlParser.MIRROR, i);
		}
		public ITerminalNode[] DIFFERENTIAL() { return GetTokens(TSqlParser.DIFFERENTIAL); }
		public ITerminalNode DIFFERENTIAL(int i) {
			return GetToken(TSqlParser.DIFFERENTIAL, i);
		}
		public ITerminalNode[] COPY_ONLY() { return GetTokens(TSqlParser.COPY_ONLY); }
		public ITerminalNode COPY_ONLY(int i) {
			return GetToken(TSqlParser.COPY_ONLY, i);
		}
		public ITerminalNode[] DESCRIPTION() { return GetTokens(TSqlParser.DESCRIPTION); }
		public ITerminalNode DESCRIPTION(int i) {
			return GetToken(TSqlParser.DESCRIPTION, i);
		}
		public ITerminalNode[] NAME() { return GetTokens(TSqlParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(TSqlParser.NAME, i);
		}
		public ITerminalNode[] CREDENTIAL() { return GetTokens(TSqlParser.CREDENTIAL); }
		public ITerminalNode CREDENTIAL(int i) {
			return GetToken(TSqlParser.CREDENTIAL, i);
		}
		public ITerminalNode[] FILE_SNAPSHOT() { return GetTokens(TSqlParser.FILE_SNAPSHOT); }
		public ITerminalNode FILE_SNAPSHOT(int i) {
			return GetToken(TSqlParser.FILE_SNAPSHOT, i);
		}
		public ITerminalNode[] MEDIADESCRIPTION() { return GetTokens(TSqlParser.MEDIADESCRIPTION); }
		public ITerminalNode MEDIADESCRIPTION(int i) {
			return GetToken(TSqlParser.MEDIADESCRIPTION, i);
		}
		public ITerminalNode[] MEDIANAME() { return GetTokens(TSqlParser.MEDIANAME); }
		public ITerminalNode MEDIANAME(int i) {
			return GetToken(TSqlParser.MEDIANAME, i);
		}
		public ITerminalNode[] BLOCKSIZE() { return GetTokens(TSqlParser.BLOCKSIZE); }
		public ITerminalNode BLOCKSIZE(int i) {
			return GetToken(TSqlParser.BLOCKSIZE, i);
		}
		public ITerminalNode[] BUFFERCOUNT() { return GetTokens(TSqlParser.BUFFERCOUNT); }
		public ITerminalNode BUFFERCOUNT(int i) {
			return GetToken(TSqlParser.BUFFERCOUNT, i);
		}
		public ITerminalNode[] MAXTRANSFER() { return GetTokens(TSqlParser.MAXTRANSFER); }
		public ITerminalNode MAXTRANSFER(int i) {
			return GetToken(TSqlParser.MAXTRANSFER, i);
		}
		public ITerminalNode[] RESTART() { return GetTokens(TSqlParser.RESTART); }
		public ITerminalNode RESTART(int i) {
			return GetToken(TSqlParser.RESTART, i);
		}
		public ITerminalNode[] STATS() { return GetTokens(TSqlParser.STATS); }
		public ITerminalNode STATS(int i) {
			return GetToken(TSqlParser.STATS, i);
		}
		public ITerminalNode[] NO_TRUNCATE() { return GetTokens(TSqlParser.NO_TRUNCATE); }
		public ITerminalNode NO_TRUNCATE(int i) {
			return GetToken(TSqlParser.NO_TRUNCATE, i);
		}
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] ALGORITHM() { return GetTokens(TSqlParser.ALGORITHM); }
		public ITerminalNode ALGORITHM(int i) {
			return GetToken(TSqlParser.ALGORITHM, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] SERVER() { return GetTokens(TSqlParser.SERVER); }
		public ITerminalNode SERVER(int i) {
			return GetToken(TSqlParser.SERVER, i);
		}
		public ITerminalNode[] CERTIFICATE() { return GetTokens(TSqlParser.CERTIFICATE); }
		public ITerminalNode CERTIFICATE(int i) {
			return GetToken(TSqlParser.CERTIFICATE, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] COMPRESSION() { return GetTokens(TSqlParser.COMPRESSION); }
		public ITerminalNode COMPRESSION(int i) {
			return GetToken(TSqlParser.COMPRESSION, i);
		}
		public ITerminalNode[] NO_COMPRESSION() { return GetTokens(TSqlParser.NO_COMPRESSION); }
		public ITerminalNode NO_COMPRESSION(int i) {
			return GetToken(TSqlParser.NO_COMPRESSION, i);
		}
		public ITerminalNode[] NOINIT() { return GetTokens(TSqlParser.NOINIT); }
		public ITerminalNode NOINIT(int i) {
			return GetToken(TSqlParser.NOINIT, i);
		}
		public ITerminalNode[] INIT() { return GetTokens(TSqlParser.INIT); }
		public ITerminalNode INIT(int i) {
			return GetToken(TSqlParser.INIT, i);
		}
		public ITerminalNode[] NOSKIP() { return GetTokens(TSqlParser.NOSKIP); }
		public ITerminalNode NOSKIP(int i) {
			return GetToken(TSqlParser.NOSKIP, i);
		}
		public ITerminalNode[] SKIP_KEYWORD() { return GetTokens(TSqlParser.SKIP_KEYWORD); }
		public ITerminalNode SKIP_KEYWORD(int i) {
			return GetToken(TSqlParser.SKIP_KEYWORD, i);
		}
		public ITerminalNode[] NOFORMAT() { return GetTokens(TSqlParser.NOFORMAT); }
		public ITerminalNode NOFORMAT(int i) {
			return GetToken(TSqlParser.NOFORMAT, i);
		}
		public ITerminalNode[] FORMAT() { return GetTokens(TSqlParser.FORMAT); }
		public ITerminalNode FORMAT(int i) {
			return GetToken(TSqlParser.FORMAT, i);
		}
		public ITerminalNode[] NO_CHECKSUM() { return GetTokens(TSqlParser.NO_CHECKSUM); }
		public ITerminalNode NO_CHECKSUM(int i) {
			return GetToken(TSqlParser.NO_CHECKSUM, i);
		}
		public ITerminalNode[] CHECKSUM() { return GetTokens(TSqlParser.CHECKSUM); }
		public ITerminalNode CHECKSUM(int i) {
			return GetToken(TSqlParser.CHECKSUM, i);
		}
		public ITerminalNode[] STOP_ON_ERROR() { return GetTokens(TSqlParser.STOP_ON_ERROR); }
		public ITerminalNode STOP_ON_ERROR(int i) {
			return GetToken(TSqlParser.STOP_ON_ERROR, i);
		}
		public ITerminalNode[] CONTINUE_AFTER_ERROR() { return GetTokens(TSqlParser.CONTINUE_AFTER_ERROR); }
		public ITerminalNode CONTINUE_AFTER_ERROR(int i) {
			return GetToken(TSqlParser.CONTINUE_AFTER_ERROR, i);
		}
		public ITerminalNode[] REWIND() { return GetTokens(TSqlParser.REWIND); }
		public ITerminalNode REWIND(int i) {
			return GetToken(TSqlParser.REWIND, i);
		}
		public ITerminalNode[] NOREWIND() { return GetTokens(TSqlParser.NOREWIND); }
		public ITerminalNode NOREWIND(int i) {
			return GetToken(TSqlParser.NOREWIND, i);
		}
		public ITerminalNode[] LOAD() { return GetTokens(TSqlParser.LOAD); }
		public ITerminalNode LOAD(int i) {
			return GetToken(TSqlParser.LOAD, i);
		}
		public ITerminalNode[] NOUNLOAD() { return GetTokens(TSqlParser.NOUNLOAD); }
		public ITerminalNode NOUNLOAD(int i) {
			return GetToken(TSqlParser.NOUNLOAD, i);
		}
		public ITerminalNode[] AES_128() { return GetTokens(TSqlParser.AES_128); }
		public ITerminalNode AES_128(int i) {
			return GetToken(TSqlParser.AES_128, i);
		}
		public ITerminalNode[] AES_192() { return GetTokens(TSqlParser.AES_192); }
		public ITerminalNode AES_192(int i) {
			return GetToken(TSqlParser.AES_192, i);
		}
		public ITerminalNode[] AES_256() { return GetTokens(TSqlParser.AES_256); }
		public ITerminalNode AES_256(int i) {
			return GetToken(TSqlParser.AES_256, i);
		}
		public ITerminalNode[] TRIPLE_DES_3KEY() { return GetTokens(TSqlParser.TRIPLE_DES_3KEY); }
		public ITerminalNode TRIPLE_DES_3KEY(int i) {
			return GetToken(TSqlParser.TRIPLE_DES_3KEY, i);
		}
		public ITerminalNode[] EXPIREDATE() { return GetTokens(TSqlParser.EXPIREDATE); }
		public ITerminalNode EXPIREDATE(int i) {
			return GetToken(TSqlParser.EXPIREDATE, i);
		}
		public ITerminalNode[] RETAINDAYS() { return GetTokens(TSqlParser.RETAINDAYS); }
		public ITerminalNode RETAINDAYS(int i) {
			return GetToken(TSqlParser.RETAINDAYS, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] NORECOVERY() { return GetTokens(TSqlParser.NORECOVERY); }
		public ITerminalNode NORECOVERY(int i) {
			return GetToken(TSqlParser.NORECOVERY, i);
		}
		public ITerminalNode[] STANDBY() { return GetTokens(TSqlParser.STANDBY); }
		public ITerminalNode STANDBY(int i) {
			return GetToken(TSqlParser.STANDBY, i);
		}
		public ITerminalNode[] ASYMMETRIC() { return GetTokens(TSqlParser.ASYMMETRIC); }
		public ITerminalNode ASYMMETRIC(int i) {
			return GetToken(TSqlParser.ASYMMETRIC, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public Backup_logContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_log; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_log(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_log(this);
		}
	}

	[RuleVersion(0)]
	public Backup_logContext backup_log() {
		Backup_logContext _localctx = new Backup_logContext(_ctx, State);
		EnterRule(_localctx, 740, RULE_backup_log);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9263; Match(BACKUP);
			State = 9264; Match(LOG);
			{
			State = 9265; _localctx.database_name = id_();
			}
			State = 9289;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1226,_ctx) ) {
			case 1:
				{
				State = 9266; Match(TO);
				State = 9271;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 9268;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1221,_ctx) ) {
						case 1:
							{
							State = 9267; Match(COMMA);
							}
							break;
						}
						State = 9270; _localctx.logical_device_name = id_();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 9273;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1222,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				{
				State = 9275; Match(TO);
				State = 9285;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 9277;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1223,_ctx) ) {
						case 1:
							{
							State = 9276; Match(COMMA);
							}
							break;
						}
						State = 9279;
						_la = _input.La(1);
						if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 9280; Match(EQUAL);
						State = 9283;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1224,_ctx) ) {
						case 1:
							{
							State = 9281; Match(STRING);
							}
							break;

						case 2:
							{
							State = 9282; id_();
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 9287;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1225,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 9324;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1234,_ctx) ) {
			case 1:
				{
				State = 9301;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 9291; Match(MIRROR);
						State = 9292; Match(TO);
						State = 9297;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 9294;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1227,_ctx) ) {
								case 1:
									{
									State = 9293; Match(COMMA);
									}
									break;
								}
								State = 9296; _localctx.logical_device_name = id_();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 9299;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,1228,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 9303;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1229,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				{
				State = 9320;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 9305; Match(MIRROR);
						State = 9306; Match(TO);
						State = 9316;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 9308;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1230,_ctx) ) {
								case 1:
									{
									State = 9307; Match(COMMA);
									}
									break;
								}
								State = 9310;
								_la = _input.La(1);
								if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
								_errHandler.RecoverInline(this);
								} else {
									if (_input.La(1) == TokenConstants.Eof) {
										matchedEOF = true;
									}

									_errHandler.ReportMatch(this);
									Consume();
								}
								State = 9311; Match(EQUAL);
								State = 9314;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1231,_ctx) ) {
								case 1:
									{
									State = 9312; Match(STRING);
									}
									break;

								case 2:
									{
									State = 9313; id_();
									}
									break;
								}
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 9318;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,1232,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 9322;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1233,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 9499;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1273,_ctx) ) {
			case 1:
				{
				State = 9326; Match(WITH);
				State = 9496;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1272,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						State = 9494;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1271,_ctx) ) {
						case 1:
							{
							State = 9328;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1235,_ctx) ) {
							case 1:
								{
								State = 9327; Match(COMMA);
								}
								break;
							}
							State = 9330; Match(DIFFERENTIAL);
							}
							break;

						case 2:
							{
							State = 9332;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1236,_ctx) ) {
							case 1:
								{
								State = 9331; Match(COMMA);
								}
								break;
							}
							State = 9334; Match(COPY_ONLY);
							}
							break;

						case 3:
							{
							State = 9336;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1237,_ctx) ) {
							case 1:
								{
								State = 9335; Match(COMMA);
								}
								break;
							}
							State = 9338;
							_la = _input.La(1);
							if ( !(_la==COMPRESSION || _la==NO_COMPRESSION) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 4:
							{
							State = 9340;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1238,_ctx) ) {
							case 1:
								{
								State = 9339; Match(COMMA);
								}
								break;
							}
							State = 9342; Match(DESCRIPTION);
							State = 9343; Match(EQUAL);
							State = 9346;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1239,_ctx) ) {
							case 1:
								{
								State = 9344; Match(STRING);
								}
								break;

							case 2:
								{
								State = 9345; id_();
								}
								break;
							}
							}
							break;

						case 5:
							{
							State = 9349;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1240,_ctx) ) {
							case 1:
								{
								State = 9348; Match(COMMA);
								}
								break;
							}
							State = 9351; Match(NAME);
							State = 9352; Match(EQUAL);
							State = 9353; _localctx.backup_set_name = id_();
							}
							break;

						case 6:
							{
							State = 9355;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1241,_ctx) ) {
							case 1:
								{
								State = 9354; Match(COMMA);
								}
								break;
							}
							State = 9357; Match(CREDENTIAL);
							}
							break;

						case 7:
							{
							State = 9359;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1242,_ctx) ) {
							case 1:
								{
								State = 9358; Match(COMMA);
								}
								break;
							}
							State = 9361; Match(FILE_SNAPSHOT);
							}
							break;

						case 8:
							{
							State = 9363;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1243,_ctx) ) {
							case 1:
								{
								State = 9362; Match(COMMA);
								}
								break;
							}
							State = 9377;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1246,_ctx) ) {
							case 1:
								{
								State = 9365; Match(EXPIREDATE);
								State = 9366; Match(EQUAL);
								State = 9369;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1244,_ctx) ) {
								case 1:
									{
									State = 9367; Match(STRING);
									}
									break;

								case 2:
									{
									State = 9368; id_();
									}
									break;
								}
								}
								break;

							case 2:
								{
								State = 9371; Match(RETAINDAYS);
								State = 9372; Match(EQUAL);
								State = 9375;
								_errHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(_input,1245,_ctx) ) {
								case 1:
									{
									State = 9373; Match(DECIMAL);
									}
									break;

								case 2:
									{
									State = 9374; id_();
									}
									break;
								}
								}
								break;
							}
							}
							break;

						case 9:
							{
							State = 9380;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1247,_ctx) ) {
							case 1:
								{
								State = 9379; Match(COMMA);
								}
								break;
							}
							State = 9382;
							_la = _input.La(1);
							if ( !(_la==INIT || _la==NOINIT) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 10:
							{
							State = 9384;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1248,_ctx) ) {
							case 1:
								{
								State = 9383; Match(COMMA);
								}
								break;
							}
							State = 9386;
							_la = _input.La(1);
							if ( !(_la==NOSKIP || _la==SKIP_KEYWORD) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 11:
							{
							State = 9388;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1249,_ctx) ) {
							case 1:
								{
								State = 9387; Match(COMMA);
								}
								break;
							}
							State = 9390;
							_la = _input.La(1);
							if ( !(_la==FORMAT || _la==NOFORMAT) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 12:
							{
							State = 9392;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1250,_ctx) ) {
							case 1:
								{
								State = 9391; Match(COMMA);
								}
								break;
							}
							State = 9394; Match(MEDIADESCRIPTION);
							State = 9395; Match(EQUAL);
							State = 9398;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1251,_ctx) ) {
							case 1:
								{
								State = 9396; Match(STRING);
								}
								break;

							case 2:
								{
								State = 9397; id_();
								}
								break;
							}
							}
							break;

						case 13:
							{
							State = 9401;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1252,_ctx) ) {
							case 1:
								{
								State = 9400; Match(COMMA);
								}
								break;
							}
							State = 9403; Match(MEDIANAME);
							State = 9404; Match(EQUAL);
							{
							State = 9405; _localctx.medianame = Match(STRING);
							}
							}
							break;

						case 14:
							{
							State = 9407;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1253,_ctx) ) {
							case 1:
								{
								State = 9406; Match(COMMA);
								}
								break;
							}
							State = 9409; Match(BLOCKSIZE);
							State = 9410; Match(EQUAL);
							State = 9413;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1254,_ctx) ) {
							case 1:
								{
								State = 9411; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 9412; id_();
								}
								break;
							}
							}
							break;

						case 15:
							{
							State = 9416;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1255,_ctx) ) {
							case 1:
								{
								State = 9415; Match(COMMA);
								}
								break;
							}
							State = 9418; Match(BUFFERCOUNT);
							State = 9419; Match(EQUAL);
							State = 9422;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1256,_ctx) ) {
							case 1:
								{
								State = 9420; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 9421; id_();
								}
								break;
							}
							}
							break;

						case 16:
							{
							State = 9425;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1257,_ctx) ) {
							case 1:
								{
								State = 9424; Match(COMMA);
								}
								break;
							}
							State = 9427; Match(MAXTRANSFER);
							State = 9428; Match(EQUAL);
							State = 9431;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1258,_ctx) ) {
							case 1:
								{
								State = 9429; Match(DECIMAL);
								}
								break;

							case 2:
								{
								State = 9430; id_();
								}
								break;
							}
							}
							break;

						case 17:
							{
							State = 9434;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1259,_ctx) ) {
							case 1:
								{
								State = 9433; Match(COMMA);
								}
								break;
							}
							State = 9436;
							_la = _input.La(1);
							if ( !(_la==CHECKSUM || _la==NO_CHECKSUM) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 18:
							{
							State = 9438;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1260,_ctx) ) {
							case 1:
								{
								State = 9437; Match(COMMA);
								}
								break;
							}
							State = 9440;
							_la = _input.La(1);
							if ( !(_la==CONTINUE_AFTER_ERROR || _la==STOP_ON_ERROR) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 19:
							{
							State = 9442;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1261,_ctx) ) {
							case 1:
								{
								State = 9441; Match(COMMA);
								}
								break;
							}
							State = 9444; Match(RESTART);
							}
							break;

						case 20:
							{
							State = 9446;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1262,_ctx) ) {
							case 1:
								{
								State = 9445; Match(COMMA);
								}
								break;
							}
							State = 9448; Match(STATS);
							State = 9451;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1263,_ctx) ) {
							case 1:
								{
								State = 9449; Match(EQUAL);
								State = 9450; _localctx.stats_percent = Match(DECIMAL);
								}
								break;
							}
							}
							break;

						case 21:
							{
							State = 9454;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1264,_ctx) ) {
							case 1:
								{
								State = 9453; Match(COMMA);
								}
								break;
							}
							State = 9456;
							_la = _input.La(1);
							if ( !(_la==NOREWIND || _la==REWIND) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 22:
							{
							State = 9458;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1265,_ctx) ) {
							case 1:
								{
								State = 9457; Match(COMMA);
								}
								break;
							}
							State = 9460;
							_la = _input.La(1);
							if ( !(_la==LOAD || _la==NOUNLOAD) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 23:
							{
							State = 9462;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1266,_ctx) ) {
							case 1:
								{
								State = 9461; Match(COMMA);
								}
								break;
							}
							State = 9468;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1267,_ctx) ) {
							case 1:
								{
								State = 9464; Match(NORECOVERY);
								}
								break;

							case 2:
								{
								State = 9465; Match(STANDBY);
								State = 9466; Match(EQUAL);
								State = 9467; _localctx.undo_file_name = Match(STRING);
								}
								break;
							}
							}
							break;

						case 24:
							{
							State = 9471;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1268,_ctx) ) {
							case 1:
								{
								State = 9470; Match(COMMA);
								}
								break;
							}
							State = 9473; Match(NO_TRUNCATE);
							}
							break;

						case 25:
							{
							State = 9475;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1269,_ctx) ) {
							case 1:
								{
								State = 9474; Match(COMMA);
								}
								break;
							}
							State = 9477; Match(ENCRYPTION);
							State = 9478; Match(LR_BRACKET);
							State = 9479; Match(ALGORITHM);
							State = 9480; Match(EQUAL);
							State = 9481;
							_la = _input.La(1);
							if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AES_128) | (1L << AES_192) | (1L << AES_256))) != 0) || _la==TRIPLE_DES_3KEY) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							State = 9482; Match(COMMA);
							State = 9483; Match(SERVER);
							State = 9484; Match(CERTIFICATE);
							State = 9485; Match(EQUAL);
							State = 9492;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1270,_ctx) ) {
							case 1:
								{
								State = 9486; _localctx.encryptor_name = id_();
								}
								break;

							case 2:
								{
								State = 9487; Match(SERVER);
								State = 9488; Match(ASYMMETRIC);
								State = 9489; Match(KEY);
								State = 9490; Match(EQUAL);
								State = 9491; _localctx.encryptor_name = id_();
								}
								break;
							}
							}
							break;
						}
						} 
					}
					State = 9498;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1272,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_certificateContext : ParserRuleContext {
		public Id_Context certname;
		public IToken cert_file;
		public IToken private_key_file;
		public IToken encryption_password;
		public IToken decryption_pasword;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode[] FILE() { return GetTokens(TSqlParser.FILE); }
		public ITerminalNode FILE(int i) {
			return GetToken(TSqlParser.FILE, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public ITerminalNode[] PASSWORD() { return GetTokens(TSqlParser.PASSWORD); }
		public ITerminalNode PASSWORD(int i) {
			return GetToken(TSqlParser.PASSWORD, i);
		}
		public ITerminalNode[] DECRYPTION() { return GetTokens(TSqlParser.DECRYPTION); }
		public ITerminalNode DECRYPTION(int i) {
			return GetToken(TSqlParser.DECRYPTION, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Backup_certificateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_certificate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_certificate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_certificate(this);
		}
	}

	[RuleVersion(0)]
	public Backup_certificateContext backup_certificate() {
		Backup_certificateContext _localctx = new Backup_certificateContext(_ctx, State);
		EnterRule(_localctx, 742, RULE_backup_certificate);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9501; Match(BACKUP);
			State = 9502; Match(CERTIFICATE);
			State = 9503; _localctx.certname = id_();
			State = 9504; Match(TO);
			State = 9505; Match(FILE);
			State = 9506; Match(EQUAL);
			State = 9507; _localctx.cert_file = Match(STRING);
			State = 9539;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1279,_ctx) ) {
			case 1:
				{
				State = 9508; Match(WITH);
				State = 9509; Match(PRIVATE);
				State = 9510; Match(KEY);
				State = 9511; Match(LR_BRACKET);
				State = 9534;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 9534;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1277,_ctx) ) {
						case 1:
							{
							State = 9513;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1274,_ctx) ) {
							case 1:
								{
								State = 9512; Match(COMMA);
								}
								break;
							}
							State = 9515; Match(FILE);
							State = 9516; Match(EQUAL);
							State = 9517; _localctx.private_key_file = Match(STRING);
							}
							break;

						case 2:
							{
							State = 9519;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1275,_ctx) ) {
							case 1:
								{
								State = 9518; Match(COMMA);
								}
								break;
							}
							State = 9521; Match(ENCRYPTION);
							State = 9522; Match(BY);
							State = 9523; Match(PASSWORD);
							State = 9524; Match(EQUAL);
							State = 9525; _localctx.encryption_password = Match(STRING);
							}
							break;

						case 3:
							{
							State = 9527;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1276,_ctx) ) {
							case 1:
								{
								State = 9526; Match(COMMA);
								}
								break;
							}
							State = 9529; Match(DECRYPTION);
							State = 9530; Match(BY);
							State = 9531; Match(PASSWORD);
							State = 9532; Match(EQUAL);
							State = 9533; _localctx.decryption_pasword = Match(STRING);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 9536;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1278,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 9538; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_master_keyContext : ParserRuleContext {
		public IToken master_key_backup_file;
		public IToken encryption_password;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Backup_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_master_key(this);
		}
	}

	[RuleVersion(0)]
	public Backup_master_keyContext backup_master_key() {
		Backup_master_keyContext _localctx = new Backup_master_keyContext(_ctx, State);
		EnterRule(_localctx, 744, RULE_backup_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9541; Match(BACKUP);
			State = 9542; Match(MASTER);
			State = 9543; Match(KEY);
			State = 9544; Match(TO);
			State = 9545; Match(FILE);
			State = 9546; Match(EQUAL);
			State = 9547; _localctx.master_key_backup_file = Match(STRING);
			State = 9548; Match(ENCRYPTION);
			State = 9549; Match(BY);
			State = 9550; Match(PASSWORD);
			State = 9551; Match(EQUAL);
			State = 9552; _localctx.encryption_password = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_service_master_keyContext : ParserRuleContext {
		public IToken service_master_key_backup_file;
		public IToken encryption_password;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Backup_service_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_service_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_service_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_service_master_key(this);
		}
	}

	[RuleVersion(0)]
	public Backup_service_master_keyContext backup_service_master_key() {
		Backup_service_master_keyContext _localctx = new Backup_service_master_keyContext(_ctx, State);
		EnterRule(_localctx, 746, RULE_backup_service_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9554; Match(BACKUP);
			State = 9555; Match(SERVICE);
			State = 9556; Match(MASTER);
			State = 9557; Match(KEY);
			State = 9558; Match(TO);
			State = 9559; Match(FILE);
			State = 9560; Match(EQUAL);
			State = 9561; _localctx.service_master_key_backup_file = Match(STRING);
			State = 9562; Match(ENCRYPTION);
			State = 9563; Match(BY);
			State = 9564; Match(PASSWORD);
			State = 9565; Match(EQUAL);
			State = 9566; _localctx.encryption_password = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kill_statementContext : ParserRuleContext {
		public ITerminalNode KILL() { return GetToken(TSqlParser.KILL, 0); }
		public Kill_processContext kill_process() {
			return GetRuleContext<Kill_processContext>(0);
		}
		public Kill_query_notificationContext kill_query_notification() {
			return GetRuleContext<Kill_query_notificationContext>(0);
		}
		public Kill_stats_jobContext kill_stats_job() {
			return GetRuleContext<Kill_stats_jobContext>(0);
		}
		public Kill_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kill_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKill_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKill_statement(this);
		}
	}

	[RuleVersion(0)]
	public Kill_statementContext kill_statement() {
		Kill_statementContext _localctx = new Kill_statementContext(_ctx, State);
		EnterRule(_localctx, 748, RULE_kill_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9568; Match(KILL);
			State = 9572;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1280,_ctx) ) {
			case 1:
				{
				State = 9569; kill_process();
				}
				break;

			case 2:
				{
				State = 9570; kill_query_notification();
				}
				break;

			case 3:
				{
				State = 9571; kill_stats_job();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kill_processContext : ParserRuleContext {
		public IToken session_id;
		public ITerminalNode UOW() { return GetToken(TSqlParser.UOW, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STATUSONLY() { return GetToken(TSqlParser.STATUSONLY, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Kill_processContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kill_process; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKill_process(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKill_process(this);
		}
	}

	[RuleVersion(0)]
	public Kill_processContext kill_process() {
		Kill_processContext _localctx = new Kill_processContext(_ctx, State);
		EnterRule(_localctx, 750, RULE_kill_process);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9576;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1281,_ctx) ) {
			case 1:
				{
				State = 9574;
				_localctx.session_id = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==DECIMAL || _la==STRING) ) {
					_localctx.session_id = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				{
				State = 9575; Match(UOW);
				}
				break;
			}
			State = 9580;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1282,_ctx) ) {
			case 1:
				{
				State = 9578; Match(WITH);
				State = 9579; Match(STATUSONLY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kill_query_notificationContext : ParserRuleContext {
		public IToken subscription_id;
		public ITerminalNode QUERY() { return GetToken(TSqlParser.QUERY, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode SUBSCRIPTION() { return GetToken(TSqlParser.SUBSCRIPTION, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Kill_query_notificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kill_query_notification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKill_query_notification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKill_query_notification(this);
		}
	}

	[RuleVersion(0)]
	public Kill_query_notificationContext kill_query_notification() {
		Kill_query_notificationContext _localctx = new Kill_query_notificationContext(_ctx, State);
		EnterRule(_localctx, 752, RULE_kill_query_notification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9582; Match(QUERY);
			State = 9583; Match(NOTIFICATION);
			State = 9584; Match(SUBSCRIPTION);
			State = 9587;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1283,_ctx) ) {
			case 1:
				{
				State = 9585; Match(ALL);
				}
				break;

			case 2:
				{
				State = 9586; _localctx.subscription_id = Match(DECIMAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kill_stats_jobContext : ParserRuleContext {
		public IToken job_id;
		public ITerminalNode STATS() { return GetToken(TSqlParser.STATS, 0); }
		public ITerminalNode JOB() { return GetToken(TSqlParser.JOB, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Kill_stats_jobContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kill_stats_job; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKill_stats_job(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKill_stats_job(this);
		}
	}

	[RuleVersion(0)]
	public Kill_stats_jobContext kill_stats_job() {
		Kill_stats_jobContext _localctx = new Kill_stats_jobContext(_ctx, State);
		EnterRule(_localctx, 754, RULE_kill_stats_job);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9589; Match(STATS);
			State = 9590; Match(JOB);
			State = 9591; _localctx.job_id = Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statementContext : ParserRuleContext {
		public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		public Execute_bodyContext execute_body() {
			return GetRuleContext<Execute_bodyContext>(0);
		}
		public Execute_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_statement(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statementContext execute_statement() {
		Execute_statementContext _localctx = new Execute_statementContext(_ctx, State);
		EnterRule(_localctx, 756, RULE_execute_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9593; Match(EXECUTE);
			State = 9594; execute_body();
			State = 9596;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1284,_ctx) ) {
			case 1:
				{
				State = 9595; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_body_batchContext : ParserRuleContext {
		public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return GetRuleContext<Func_proc_name_server_database_schemaContext>(0);
		}
		public Execute_statement_argContext[] execute_statement_arg() {
			return GetRuleContexts<Execute_statement_argContext>();
		}
		public Execute_statement_argContext execute_statement_arg(int i) {
			return GetRuleContext<Execute_statement_argContext>(i);
		}
		public Execute_body_batchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_body_batch; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_body_batch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_body_batch(this);
		}
	}

	[RuleVersion(0)]
	public Execute_body_batchContext execute_body_batch() {
		Execute_body_batchContext _localctx = new Execute_body_batchContext(_ctx, State);
		EnterRule(_localctx, 758, RULE_execute_body_batch);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9598; func_proc_name_server_database_schema();
			State = 9607;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1286,_ctx) ) {
			case 1:
				{
				State = 9599; execute_statement_arg();
				State = 9604;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1285,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 9600; Match(COMMA);
						State = 9601; execute_statement_arg();
						}
						} 
					}
					State = 9606;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1285,_ctx);
				}
				}
				break;
			}
			State = 9610;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1287,_ctx) ) {
			case 1:
				{
				State = 9609; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_bodyContext : ParserRuleContext {
		public IToken return_status;
		public Id_Context linkedServer;
		public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return GetRuleContext<Func_proc_name_server_database_schemaContext>(0);
		}
		public Execute_var_stringContext[] execute_var_string() {
			return GetRuleContexts<Execute_var_stringContext>();
		}
		public Execute_var_stringContext execute_var_string(int i) {
			return GetRuleContext<Execute_var_stringContext>(i);
		}
		public Execute_statement_argContext execute_statement_arg() {
			return GetRuleContext<Execute_statement_argContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode AT_KEYWORD() { return GetToken(TSqlParser.AT_KEYWORD, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Execute_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_body(this);
		}
	}

	[RuleVersion(0)]
	public Execute_bodyContext execute_body() {
		Execute_bodyContext _localctx = new Execute_bodyContext(_ctx, State);
		EnterRule(_localctx, 760, RULE_execute_body);
		int _la;
		try {
			int _alt;
			State = 9645;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1295,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9614;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1288,_ctx) ) {
				case 1:
					{
					State = 9612; _localctx.return_status = Match(LOCAL_ID);
					State = 9613; Match(EQUAL);
					}
					break;
				}
				State = 9618;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1289,_ctx) ) {
				case 1:
					{
					State = 9616; func_proc_name_server_database_schema();
					}
					break;

				case 2:
					{
					State = 9617; execute_var_string();
					}
					break;
				}
				State = 9621;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1290,_ctx) ) {
				case 1:
					{
					State = 9620; execute_statement_arg();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9623; Match(LR_BRACKET);
				State = 9624; execute_var_string();
				State = 9629;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1291,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 9625; Match(COMMA);
						State = 9626; execute_var_string();
						}
						} 
					}
					State = 9631;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1291,_ctx);
				}
				State = 9632; Match(RR_BRACKET);
				State = 9639;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1293,_ctx) ) {
				case 1:
					{
					State = 9634;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1292,_ctx) ) {
					case 1:
						{
						State = 9633; Match(AS);
						}
						break;
					}
					State = 9636;
					_la = _input.La(1);
					if ( !(_la==LOGIN || _la==USER) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 9637; Match(EQUAL);
					State = 9638; Match(STRING);
					}
					break;
				}
				State = 9643;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1294,_ctx) ) {
				case 1:
					{
					State = 9641; Match(AT_KEYWORD);
					State = 9642; _localctx.linkedServer = id_();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statement_argContext : ParserRuleContext {
		public Execute_statement_arg_unnamedContext execute_statement_arg_unnamed() {
			return GetRuleContext<Execute_statement_arg_unnamedContext>(0);
		}
		public Execute_statement_argContext[] execute_statement_arg() {
			return GetRuleContexts<Execute_statement_argContext>();
		}
		public Execute_statement_argContext execute_statement_arg(int i) {
			return GetRuleContext<Execute_statement_argContext>(i);
		}
		public Execute_statement_arg_namedContext[] execute_statement_arg_named() {
			return GetRuleContexts<Execute_statement_arg_namedContext>();
		}
		public Execute_statement_arg_namedContext execute_statement_arg_named(int i) {
			return GetRuleContext<Execute_statement_arg_namedContext>(i);
		}
		public Execute_statement_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_statement_arg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_statement_arg(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statement_argContext execute_statement_arg() {
		Execute_statement_argContext _localctx = new Execute_statement_argContext(_ctx, State);
		EnterRule(_localctx, 762, RULE_execute_statement_arg);
		try {
			int _alt;
			State = 9663;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1298,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9647; execute_statement_arg_unnamed();
				State = 9652;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1296,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 9648; Match(COMMA);
						State = 9649; execute_statement_arg();
						}
						} 
					}
					State = 9654;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1296,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9655; execute_statement_arg_named();
				State = 9660;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1297,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 9656; Match(COMMA);
						State = 9657; execute_statement_arg_named();
						}
						} 
					}
					State = 9662;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1297,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statement_arg_namedContext : ParserRuleContext {
		public IToken name;
		public Execute_parameterContext value;
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Execute_parameterContext execute_parameter() {
			return GetRuleContext<Execute_parameterContext>(0);
		}
		public Execute_statement_arg_namedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement_arg_named; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_statement_arg_named(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_statement_arg_named(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statement_arg_namedContext execute_statement_arg_named() {
		Execute_statement_arg_namedContext _localctx = new Execute_statement_arg_namedContext(_ctx, State);
		EnterRule(_localctx, 764, RULE_execute_statement_arg_named);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9665; _localctx.name = Match(LOCAL_ID);
			State = 9666; Match(EQUAL);
			State = 9667; _localctx.value = execute_parameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statement_arg_unnamedContext : ParserRuleContext {
		public Execute_parameterContext value;
		public Execute_parameterContext execute_parameter() {
			return GetRuleContext<Execute_parameterContext>(0);
		}
		public Execute_statement_arg_unnamedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement_arg_unnamed; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_statement_arg_unnamed(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_statement_arg_unnamed(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statement_arg_unnamedContext execute_statement_arg_unnamed() {
		Execute_statement_arg_unnamedContext _localctx = new Execute_statement_arg_unnamedContext(_ctx, State);
		EnterRule(_localctx, 766, RULE_execute_statement_arg_unnamed);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9669; _localctx.value = execute_parameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_parameterContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		public ITerminalNode OUT() { return GetToken(TSqlParser.OUT, 0); }
		public Execute_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_parameter(this);
		}
	}

	[RuleVersion(0)]
	public Execute_parameterContext execute_parameter() {
		Execute_parameterContext _localctx = new Execute_parameterContext(_ctx, State);
		EnterRule(_localctx, 768, RULE_execute_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9679;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1300,_ctx) ) {
			case 1:
				{
				State = 9671; constant();
				}
				break;

			case 2:
				{
				State = 9672; Match(LOCAL_ID);
				State = 9674;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1299,_ctx) ) {
				case 1:
					{
					State = 9673;
					_la = _input.La(1);
					if ( !(_la==OUT || _la==OUTPUT) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 9676; id_();
				}
				break;

			case 4:
				{
				State = 9677; Match(DEFAULT);
				}
				break;

			case 5:
				{
				State = 9678; Match(NULL_);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_var_stringContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Execute_var_stringContext execute_var_string() {
			return GetRuleContext<Execute_var_stringContext>(0);
		}
		public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		public ITerminalNode OUT() { return GetToken(TSqlParser.OUT, 0); }
		public Execute_var_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_var_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_var_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_var_string(this);
		}
	}

	[RuleVersion(0)]
	public Execute_var_stringContext execute_var_string() {
		Execute_var_stringContext _localctx = new Execute_var_stringContext(_ctx, State);
		EnterRule(_localctx, 770, RULE_execute_var_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9686;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1302,_ctx) ) {
			case 1:
				{
				State = 9681; Match(LOCAL_ID);
				State = 9683;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1301,_ctx) ) {
				case 1:
					{
					State = 9682;
					_la = _input.La(1);
					if ( !(_la==OUT || _la==OUTPUT) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 9685; Match(STRING);
				}
				break;
			}
			State = 9690;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1303,_ctx) ) {
			case 1:
				{
				State = 9688; Match(PLUS);
				State = 9689; execute_var_string();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Security_statementContext : ParserRuleContext {
		public Table_nameContext on_id;
		public Principal_idContext _principal_id;
		public IList<Principal_idContext> _to_principal = new List<Principal_idContext>();
		public Principal_idContext as_principal;
		public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public ITerminalNode[] GRANT() { return GetTokens(TSqlParser.GRANT); }
		public ITerminalNode GRANT(int i) {
			return GetToken(TSqlParser.GRANT, i);
		}
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public Principal_idContext[] principal_id() {
			return GetRuleContexts<Principal_idContext>();
		}
		public Principal_idContext principal_id(int i) {
			return GetRuleContext<Principal_idContext>(i);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Grant_permissionContext grant_permission() {
			return GetRuleContext<Grant_permissionContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode OPTION() { return GetToken(TSqlParser.OPTION, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode PRIVILEGES() { return GetToken(TSqlParser.PRIVILEGES, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Class_type_for_grantContext class_type_for_grant() {
			return GetRuleContext<Class_type_for_grantContext>(0);
		}
		public ITerminalNode REVERT() { return GetToken(TSqlParser.REVERT, 0); }
		public ITerminalNode COOKIE() { return GetToken(TSqlParser.COOKIE, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Open_keyContext open_key() {
			return GetRuleContext<Open_keyContext>(0);
		}
		public Close_keyContext close_key() {
			return GetRuleContext<Close_keyContext>(0);
		}
		public Create_keyContext create_key() {
			return GetRuleContext<Create_keyContext>(0);
		}
		public Create_certificateContext create_certificate() {
			return GetRuleContext<Create_certificateContext>(0);
		}
		public Security_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_security_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSecurity_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSecurity_statement(this);
		}
	}

	[RuleVersion(0)]
	public Security_statementContext security_statement() {
		Security_statementContext _localctx = new Security_statementContext(_ctx, State);
		EnterRule(_localctx, 772, RULE_security_statement);
		try {
			int _alt;
			State = 9756;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1316,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9692; execute_clause();
				State = 9694;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1304,_ctx) ) {
				case 1:
					{
					State = 9693; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9696; Match(GRANT);
				State = 9708;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1307,_ctx) ) {
				case 1:
					{
					State = 9697; Match(ALL);
					State = 9699;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1305,_ctx) ) {
					case 1:
						{
						State = 9698; Match(PRIVILEGES);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 9701; grant_permission();
					State = 9706;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1306,_ctx) ) {
					case 1:
						{
						State = 9702; Match(LR_BRACKET);
						State = 9703; column_name_list();
						State = 9704; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				State = 9717;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1309,_ctx) ) {
				case 1:
					{
					State = 9710; Match(ON);
					State = 9714;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1308,_ctx) ) {
					case 1:
						{
						State = 9711; class_type_for_grant();
						State = 9712; Match(DOUBLE_COLON);
						}
						break;
					}
					State = 9716; _localctx.on_id = table_name();
					}
					break;
				}
				State = 9719; Match(TO);
				State = 9720; _localctx._principal_id = principal_id();
				_localctx._to_principal.Add(_localctx._principal_id);
				State = 9725;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1310,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 9721; Match(COMMA);
						State = 9722; _localctx._principal_id = principal_id();
						_localctx._to_principal.Add(_localctx._principal_id);
						}
						} 
					}
					State = 9727;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1310,_ctx);
				}
				State = 9731;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1311,_ctx) ) {
				case 1:
					{
					State = 9728; Match(WITH);
					State = 9729; Match(GRANT);
					State = 9730; Match(OPTION);
					}
					break;
				}
				State = 9735;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1312,_ctx) ) {
				case 1:
					{
					State = 9733; Match(AS);
					State = 9734; _localctx.as_principal = principal_id();
					}
					break;
				}
				State = 9738;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1313,_ctx) ) {
				case 1:
					{
					State = 9737; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9740; Match(REVERT);
				State = 9747;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1314,_ctx) ) {
				case 1:
					{
					State = 9741; Match(LR_BRACKET);
					State = 9742; Match(WITH);
					State = 9743; Match(COOKIE);
					State = 9744; Match(EQUAL);
					State = 9745; Match(LOCAL_ID);
					State = 9746; Match(RR_BRACKET);
					}
					break;
				}
				State = 9750;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1315,_ctx) ) {
				case 1:
					{
					State = 9749; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9752; open_key();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9753; close_key();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9754; create_key();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9755; create_certificate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Principal_idContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode PUBLIC() { return GetToken(TSqlParser.PUBLIC, 0); }
		public Principal_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_principal_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrincipal_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrincipal_id(this);
		}
	}

	[RuleVersion(0)]
	public Principal_idContext principal_id() {
		Principal_idContext _localctx = new Principal_idContext(_ctx, State);
		EnterRule(_localctx, 774, RULE_principal_id);
		try {
			State = 9760;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1317,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9758; id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9759; Match(PUBLIC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_certificateContext : ParserRuleContext {
		public Id_Context certificate_name;
		public Id_Context user_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Existing_keysContext existing_keys() {
			return GetRuleContext<Existing_keysContext>(0);
		}
		public Generate_new_keysContext generate_new_keys() {
			return GetRuleContext<Generate_new_keysContext>(0);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode ACTIVE() { return GetToken(TSqlParser.ACTIVE, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode DIALOG() { return GetToken(TSqlParser.DIALOG, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Create_certificateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_certificate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_certificate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_certificate(this);
		}
	}

	[RuleVersion(0)]
	public Create_certificateContext create_certificate() {
		Create_certificateContext _localctx = new Create_certificateContext(_ctx, State);
		EnterRule(_localctx, 776, RULE_create_certificate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9762; Match(CREATE);
			State = 9763; Match(CERTIFICATE);
			State = 9764; _localctx.certificate_name = id_();
			State = 9767;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1318,_ctx) ) {
			case 1:
				{
				State = 9765; Match(AUTHORIZATION);
				State = 9766; _localctx.user_name = id_();
				}
				break;
			}
			State = 9772;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1319,_ctx) ) {
			case 1:
				{
				State = 9769; Match(FROM);
				State = 9770; existing_keys();
				}
				break;

			case 2:
				{
				State = 9771; generate_new_keys();
				}
				break;
			}
			State = 9780;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1320,_ctx) ) {
			case 1:
				{
				State = 9774; Match(ACTIVE);
				State = 9775; Match(FOR);
				State = 9776; Match(BEGIN);
				State = 9777; Match(DIALOG);
				State = 9778; Match(EQUAL);
				State = 9779; on_off();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Existing_keysContext : ParserRuleContext {
		public Id_Context assembly_name;
		public IToken path_to_file;
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode EXECUTABLE() { return GetToken(TSqlParser.EXECUTABLE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Private_key_optionsContext private_key_options() {
			return GetRuleContext<Private_key_optionsContext>(0);
		}
		public Existing_keysContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_existing_keys; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExisting_keys(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExisting_keys(this);
		}
	}

	[RuleVersion(0)]
	public Existing_keysContext existing_keys() {
		Existing_keysContext _localctx = new Existing_keysContext(_ctx, State);
		EnterRule(_localctx, 778, RULE_existing_keys);
		try {
			State = 9799;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1323,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9782; Match(ASSEMBLY);
				State = 9783; _localctx.assembly_name = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9785;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1321,_ctx) ) {
				case 1:
					{
					State = 9784; Match(EXECUTABLE);
					}
					break;
				}
				State = 9787; Match(FILE);
				State = 9788; Match(EQUAL);
				State = 9789; _localctx.path_to_file = Match(STRING);
				State = 9797;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1322,_ctx) ) {
				case 1:
					{
					State = 9790; Match(WITH);
					State = 9791; Match(PRIVATE);
					State = 9792; Match(KEY);
					State = 9793; Match(LR_BRACKET);
					State = 9794; private_key_options();
					State = 9795; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Private_key_optionsContext : ParserRuleContext {
		public IToken path;
		public IToken password;
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode DECRYPTION() { return GetToken(TSqlParser.DECRYPTION, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public Private_key_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_private_key_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrivate_key_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrivate_key_options(this);
		}
	}

	[RuleVersion(0)]
	public Private_key_optionsContext private_key_options() {
		Private_key_optionsContext _localctx = new Private_key_optionsContext(_ctx, State);
		EnterRule(_localctx, 780, RULE_private_key_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9801;
			_la = _input.La(1);
			if ( !(_la==FILE || _la==BINARY) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 9802; Match(EQUAL);
			State = 9803; _localctx.path = Match(STRING);
			State = 9810;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1324,_ctx) ) {
			case 1:
				{
				State = 9804; Match(COMMA);
				State = 9805;
				_la = _input.La(1);
				if ( !(_la==DECRYPTION || _la==ENCRYPTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 9806; Match(BY);
				State = 9807; Match(PASSWORD);
				State = 9808; Match(EQUAL);
				State = 9809; _localctx.password = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generate_new_keysContext : ParserRuleContext {
		public IToken password;
		public IToken certificate_subject_name;
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode SUBJECT() { return GetToken(TSqlParser.SUBJECT, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public Date_optionsContext[] date_options() {
			return GetRuleContexts<Date_optionsContext>();
		}
		public Date_optionsContext date_options(int i) {
			return GetRuleContext<Date_optionsContext>(i);
		}
		public Generate_new_keysContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generate_new_keys; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGenerate_new_keys(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGenerate_new_keys(this);
		}
	}

	[RuleVersion(0)]
	public Generate_new_keysContext generate_new_keys() {
		Generate_new_keysContext _localctx = new Generate_new_keysContext(_ctx, State);
		EnterRule(_localctx, 782, RULE_generate_new_keys);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9817;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1325,_ctx) ) {
			case 1:
				{
				State = 9812; Match(ENCRYPTION);
				State = 9813; Match(BY);
				State = 9814; Match(PASSWORD);
				State = 9815; Match(EQUAL);
				State = 9816; _localctx.password = Match(STRING);
				}
				break;
			}
			State = 9819; Match(WITH);
			State = 9820; Match(SUBJECT);
			State = 9821; Match(EQUAL);
			State = 9822; _localctx.certificate_subject_name = Match(STRING);
			State = 9827;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1326,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 9823; Match(COMMA);
					State = 9824; date_options();
					}
					} 
				}
				State = 9829;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1326,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_optionsContext : ParserRuleContext {
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode START_DATE() { return GetToken(TSqlParser.START_DATE, 0); }
		public ITerminalNode EXPIRY_DATE() { return GetToken(TSqlParser.EXPIRY_DATE, 0); }
		public Date_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDate_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDate_options(this);
		}
	}

	[RuleVersion(0)]
	public Date_optionsContext date_options() {
		Date_optionsContext _localctx = new Date_optionsContext(_ctx, State);
		EnterRule(_localctx, 784, RULE_date_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9830;
			_la = _input.La(1);
			if ( !(_la==EXPIRY_DATE || _la==START_DATE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 9831; Match(EQUAL);
			State = 9832; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public IToken password;
		public ITerminalNode OPEN() { return GetToken(TSqlParser.OPEN, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode DECRYPTION() { return GetToken(TSqlParser.DECRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public Decryption_mechanismContext decryption_mechanism() {
			return GetRuleContext<Decryption_mechanismContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Open_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpen_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpen_key(this);
		}
	}

	[RuleVersion(0)]
	public Open_keyContext open_key() {
		Open_keyContext _localctx = new Open_keyContext(_ctx, State);
		EnterRule(_localctx, 786, RULE_open_key);
		try {
			State = 9850;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1327,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9834; Match(OPEN);
				State = 9835; Match(SYMMETRIC);
				State = 9836; Match(KEY);
				State = 9837; _localctx.key_name = id_();
				State = 9838; Match(DECRYPTION);
				State = 9839; Match(BY);
				State = 9840; decryption_mechanism();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9842; Match(OPEN);
				State = 9843; Match(MASTER);
				State = 9844; Match(KEY);
				State = 9845; Match(DECRYPTION);
				State = 9846; Match(BY);
				State = 9847; Match(PASSWORD);
				State = 9848; Match(EQUAL);
				State = 9849; _localctx.password = Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Close_keyContext : ParserRuleContext {
		public Id_Context key_name;
		public ITerminalNode CLOSE() { return GetToken(TSqlParser.CLOSE, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode KEYS() { return GetToken(TSqlParser.KEYS, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public Close_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_close_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClose_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClose_key(this);
		}
	}

	[RuleVersion(0)]
	public Close_keyContext close_key() {
		Close_keyContext _localctx = new Close_keyContext(_ctx, State);
		EnterRule(_localctx, 788, RULE_close_key);
		try {
			State = 9863;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1328,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9852; Match(CLOSE);
				State = 9853; Match(SYMMETRIC);
				State = 9854; Match(KEY);
				State = 9855; _localctx.key_name = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9856; Match(CLOSE);
				State = 9857; Match(ALL);
				State = 9858; Match(SYMMETRIC);
				State = 9859; Match(KEYS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9860; Match(CLOSE);
				State = 9861; Match(MASTER);
				State = 9862; Match(KEY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_keyContext : ParserRuleContext {
		public IToken password;
		public Id_Context key_name;
		public Id_Context user_name;
		public Id_Context provider_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Key_optionsContext[] key_options() {
			return GetRuleContexts<Key_optionsContext>();
		}
		public Key_optionsContext key_options(int i) {
			return GetRuleContext<Key_optionsContext>(i);
		}
		public Encryption_mechanismContext[] encryption_mechanism() {
			return GetRuleContexts<Encryption_mechanismContext>();
		}
		public Encryption_mechanismContext encryption_mechanism(int i) {
			return GetRuleContext<Encryption_mechanismContext>(i);
		}
		public Create_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_key(this);
		}
	}

	[RuleVersion(0)]
	public Create_keyContext create_key() {
		Create_keyContext _localctx = new Create_keyContext(_ctx, State);
		EnterRule(_localctx, 790, RULE_create_key);
		try {
			int _alt;
			State = 9900;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1334,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9865; Match(CREATE);
				State = 9866; Match(MASTER);
				State = 9867; Match(KEY);
				State = 9868; Match(ENCRYPTION);
				State = 9869; Match(BY);
				State = 9870; Match(PASSWORD);
				State = 9871; Match(EQUAL);
				State = 9872; _localctx.password = Match(STRING);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9873; Match(CREATE);
				State = 9874; Match(SYMMETRIC);
				State = 9875; Match(KEY);
				State = 9876; _localctx.key_name = id_();
				State = 9879;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1329,_ctx) ) {
				case 1:
					{
					State = 9877; Match(AUTHORIZATION);
					State = 9878; _localctx.user_name = id_();
					}
					break;
				}
				State = 9884;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1330,_ctx) ) {
				case 1:
					{
					State = 9881; Match(FROM);
					State = 9882; Match(PROVIDER);
					State = 9883; _localctx.provider_name = id_();
					}
					break;
				}
				State = 9886; Match(WITH);
				State = 9896;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 9891;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1331,_ctx) ) {
						case 1:
							{
							State = 9887; key_options();
							}
							break;

						case 2:
							{
							State = 9888; Match(ENCRYPTION);
							State = 9889; Match(BY);
							State = 9890; encryption_mechanism();
							}
							break;
						}
						State = 9894;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1332,_ctx) ) {
						case 1:
							{
							State = 9893; Match(COMMA);
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 9898;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1333,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_optionsContext : ParserRuleContext {
		public IToken pass_phrase;
		public IToken identity_phrase;
		public IToken key_name_in_provider;
		public ITerminalNode KEY_SOURCE() { return GetToken(TSqlParser.KEY_SOURCE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public AlgorithmContext algorithm() {
			return GetRuleContext<AlgorithmContext>(0);
		}
		public ITerminalNode IDENTITY_VALUE() { return GetToken(TSqlParser.IDENTITY_VALUE, 0); }
		public ITerminalNode PROVIDER_KEY_NAME() { return GetToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public ITerminalNode CREATION_DISPOSITION() { return GetToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public ITerminalNode CREATE_NEW() { return GetToken(TSqlParser.CREATE_NEW, 0); }
		public ITerminalNode OPEN_EXISTING() { return GetToken(TSqlParser.OPEN_EXISTING, 0); }
		public Key_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKey_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKey_options(this);
		}
	}

	[RuleVersion(0)]
	public Key_optionsContext key_options() {
		Key_optionsContext _localctx = new Key_optionsContext(_ctx, State);
		EnterRule(_localctx, 792, RULE_key_options);
		int _la;
		try {
			State = 9917;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1335,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9902; Match(KEY_SOURCE);
				State = 9903; Match(EQUAL);
				State = 9904; _localctx.pass_phrase = Match(STRING);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9905; Match(ALGORITHM);
				State = 9906; Match(EQUAL);
				State = 9907; algorithm();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9908; Match(IDENTITY_VALUE);
				State = 9909; Match(EQUAL);
				State = 9910; _localctx.identity_phrase = Match(STRING);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9911; Match(PROVIDER_KEY_NAME);
				State = 9912; Match(EQUAL);
				State = 9913; _localctx.key_name_in_provider = Match(STRING);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9914; Match(CREATION_DISPOSITION);
				State = 9915; Match(EQUAL);
				State = 9916;
				_la = _input.La(1);
				if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlgorithmContext : ParserRuleContext {
		public ITerminalNode DES() { return GetToken(TSqlParser.DES, 0); }
		public ITerminalNode TRIPLE_DES() { return GetToken(TSqlParser.TRIPLE_DES, 0); }
		public ITerminalNode TRIPLE_DES_3KEY() { return GetToken(TSqlParser.TRIPLE_DES_3KEY, 0); }
		public ITerminalNode RC2() { return GetToken(TSqlParser.RC2, 0); }
		public ITerminalNode RC4() { return GetToken(TSqlParser.RC4, 0); }
		public ITerminalNode RC4_128() { return GetToken(TSqlParser.RC4_128, 0); }
		public ITerminalNode DESX() { return GetToken(TSqlParser.DESX, 0); }
		public ITerminalNode AES_128() { return GetToken(TSqlParser.AES_128, 0); }
		public ITerminalNode AES_192() { return GetToken(TSqlParser.AES_192, 0); }
		public ITerminalNode AES_256() { return GetToken(TSqlParser.AES_256, 0); }
		public AlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_algorithm; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlgorithm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlgorithm(this);
		}
	}

	[RuleVersion(0)]
	public AlgorithmContext algorithm() {
		AlgorithmContext _localctx = new AlgorithmContext(_ctx, State);
		EnterRule(_localctx, 794, RULE_algorithm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9919;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AES_128) | (1L << AES_192) | (1L << AES_256))) != 0) || _la==DES || _la==DESX || ((((_la - 764)) & ~0x3f) == 0 && ((1L << (_la - 764)) & ((1L << (RC2 - 764)) | (1L << (RC4 - 764)) | (1L << (RC4_128 - 764)))) != 0) || _la==TRIPLE_DES || _la==TRIPLE_DES_3KEY) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Encryption_mechanismContext : ParserRuleContext {
		public Id_Context certificate_name;
		public Id_Context asym_key_name;
		public Id_Context decrypting_Key_name;
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Encryption_mechanismContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encryption_mechanism; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEncryption_mechanism(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEncryption_mechanism(this);
		}
	}

	[RuleVersion(0)]
	public Encryption_mechanismContext encryption_mechanism() {
		Encryption_mechanismContext _localctx = new Encryption_mechanismContext(_ctx, State);
		EnterRule(_localctx, 796, RULE_encryption_mechanism);
		try {
			State = 9932;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1336,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9921; Match(CERTIFICATE);
				State = 9922; _localctx.certificate_name = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9923; Match(ASYMMETRIC);
				State = 9924; Match(KEY);
				State = 9925; _localctx.asym_key_name = id_();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9926; Match(SYMMETRIC);
				State = 9927; Match(KEY);
				State = 9928; _localctx.decrypting_Key_name = id_();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9929; Match(PASSWORD);
				State = 9930; Match(EQUAL);
				State = 9931; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decryption_mechanismContext : ParserRuleContext {
		public Id_Context certificate_name;
		public Id_Context asym_key_name;
		public Id_Context decrypting_Key_name;
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public Decryption_mechanismContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decryption_mechanism; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDecryption_mechanism(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDecryption_mechanism(this);
		}
	}

	[RuleVersion(0)]
	public Decryption_mechanismContext decryption_mechanism() {
		Decryption_mechanismContext _localctx = new Decryption_mechanismContext(_ctx, State);
		EnterRule(_localctx, 798, RULE_decryption_mechanism);
		try {
			State = 9957;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1339,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9934; Match(CERTIFICATE);
				State = 9935; _localctx.certificate_name = id_();
				State = 9940;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1337,_ctx) ) {
				case 1:
					{
					State = 9936; Match(WITH);
					State = 9937; Match(PASSWORD);
					State = 9938; Match(EQUAL);
					State = 9939; Match(STRING);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9942; Match(ASYMMETRIC);
				State = 9943; Match(KEY);
				State = 9944; _localctx.asym_key_name = id_();
				State = 9949;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1338,_ctx) ) {
				case 1:
					{
					State = 9945; Match(WITH);
					State = 9946; Match(PASSWORD);
					State = 9947; Match(EQUAL);
					State = 9948; Match(STRING);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9951; Match(SYMMETRIC);
				State = 9952; Match(KEY);
				State = 9953; _localctx.decrypting_Key_name = id_();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9954; Match(PASSWORD);
				State = 9955; Match(EQUAL);
				State = 9956; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grant_permissionContext : ParserRuleContext {
		public ITerminalNode ADMINISTER() { return GetToken(TSqlParser.ADMINISTER, 0); }
		public ITerminalNode BULK() { return GetToken(TSqlParser.BULK, 0); }
		public ITerminalNode OPERATIONS() { return GetToken(TSqlParser.OPERATIONS, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ANY() { return GetToken(TSqlParser.ANY, 0); }
		public ITerminalNode RESOURCES() { return GetToken(TSqlParser.RESOURCES, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode SETTINGS() { return GetToken(TSqlParser.SETTINGS, 0); }
		public ITerminalNode TRACE() { return GetToken(TSqlParser.TRACE, 0); }
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode CONNECTION() { return GetToken(TSqlParser.CONNECTION, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode DATASPACE() { return GetToken(TSqlParser.DATASPACE, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public ITerminalNode LINKED() { return GetToken(TSqlParser.LINKED, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode MASK() { return GetToken(TSqlParser.MASK, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode SECURITY() { return GetToken(TSqlParser.SECURITY, 0); }
		public ITerminalNode POLICY() { return GetToken(TSqlParser.POLICY, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode FORMAT() { return GetToken(TSqlParser.FORMAT, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public ITerminalNode DDL() { return GetToken(TSqlParser.DDL, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public ITerminalNode SCOPED() { return GetToken(TSqlParser.SCOPED, 0); }
		public ITerminalNode CONFIGURATION() { return GetToken(TSqlParser.CONFIGURATION, 0); }
		public ITerminalNode AUTHENTICATE() { return GetToken(TSqlParser.AUTHENTICATE, 0); }
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode CHECKPOINT() { return GetToken(TSqlParser.CHECKPOINT, 0); }
		public ITerminalNode CONNECT() { return GetToken(TSqlParser.CONNECT, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode SQL() { return GetToken(TSqlParser.SQL, 0); }
		public ITerminalNode CONTROL() { return GetToken(TSqlParser.CONTROL, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode AGGREGATE() { return GetToken(TSqlParser.AGGREGATE, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(TSqlParser.PROCEDURE, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public ITerminalNode RULE() { return GetToken(TSqlParser.RULE, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		public ITerminalNode SYNONYM() { return GetToken(TSqlParser.SYNONYM, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public ITerminalNode VIEW() { return GetToken(TSqlParser.VIEW, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		public ITerminalNode SCRIPT() { return GetToken(TSqlParser.SCRIPT, 0); }
		public ITerminalNode ACCESS() { return GetToken(TSqlParser.ACCESS, 0); }
		public ITerminalNode IMPERSONATE() { return GetToken(TSqlParser.IMPERSONATE, 0); }
		public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		public ITerminalNode KILL() { return GetToken(TSqlParser.KILL, 0); }
		public ITerminalNode RECEIVE() { return GetToken(TSqlParser.RECEIVE, 0); }
		public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		public ITerminalNode SELECT() { return GetToken(TSqlParser.SELECT, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode SECURABLES() { return GetToken(TSqlParser.SECURABLES, 0); }
		public ITerminalNode SEND() { return GetToken(TSqlParser.SEND, 0); }
		public ITerminalNode SHOWPLAN() { return GetToken(TSqlParser.SHOWPLAN, 0); }
		public ITerminalNode SHUTDOWN() { return GetToken(TSqlParser.SHUTDOWN, 0); }
		public ITerminalNode SUBSCRIBE() { return GetToken(TSqlParser.SUBSCRIBE, 0); }
		public ITerminalNode QUERY() { return GetToken(TSqlParser.QUERY, 0); }
		public ITerminalNode NOTIFICATIONS() { return GetToken(TSqlParser.NOTIFICATIONS, 0); }
		public ITerminalNode TAKE() { return GetToken(TSqlParser.TAKE, 0); }
		public ITerminalNode OWNERSHIP() { return GetToken(TSqlParser.OWNERSHIP, 0); }
		public ITerminalNode UNMASK() { return GetToken(TSqlParser.UNMASK, 0); }
		public ITerminalNode UNSAFE() { return GetToken(TSqlParser.UNSAFE, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode CHANGE() { return GetToken(TSqlParser.CHANGE, 0); }
		public ITerminalNode TRACKING() { return GetToken(TSqlParser.TRACKING, 0); }
		public ITerminalNode DEFINITION() { return GetToken(TSqlParser.DEFINITION, 0); }
		public Grant_permissionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grant_permission; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGrant_permission(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGrant_permission(this);
		}
	}

	[RuleVersion(0)]
	public Grant_permissionContext grant_permission() {
		Grant_permissionContext _localctx = new Grant_permissionContext(_ctx, State);
		EnterRule(_localctx, 800, RULE_grant_permission);
		int _la;
		try {
			State = 10172;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1356,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9959; Match(ADMINISTER);
				State = 9965;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1340,_ctx) ) {
				case 1:
					{
					State = 9960; Match(BULK);
					State = 9961; Match(OPERATIONS);
					}
					break;

				case 2:
					{
					State = 9962; Match(DATABASE);
					State = 9963; Match(BULK);
					State = 9964; Match(OPERATIONS);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9967; Match(ALTER);
				State = 10038;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1345,_ctx) ) {
				case 1:
					{
					State = 9968; Match(ANY);
					State = 10031;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1344,_ctx) ) {
					case 1:
						{
						State = 9969; Match(APPLICATION);
						State = 9970; Match(ROLE);
						}
						break;

					case 2:
						{
						State = 9971; Match(ASSEMBLY);
						}
						break;

					case 3:
						{
						State = 9972; Match(ASYMMETRIC);
						State = 9973; Match(KEY);
						}
						break;

					case 4:
						{
						State = 9974; Match(AVAILABILITY);
						State = 9975; Match(GROUP);
						}
						break;

					case 5:
						{
						State = 9976; Match(CERTIFICATE);
						}
						break;

					case 6:
						{
						State = 9977; Match(COLUMN);
						State = 9982;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1341,_ctx) ) {
						case 1:
							{
							State = 9978; Match(ENCRYPTION);
							State = 9979; Match(KEY);
							}
							break;

						case 2:
							{
							State = 9980; Match(MASTER);
							State = 9981; Match(KEY);
							}
							break;
						}
						}
						break;

					case 7:
						{
						State = 9984; Match(CONNECTION);
						}
						break;

					case 8:
						{
						State = 9985; Match(CONTRACT);
						}
						break;

					case 9:
						{
						State = 9986; Match(CREDENTIAL);
						}
						break;

					case 10:
						{
						State = 9987; Match(DATABASE);
						State = 9995;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1342,_ctx) ) {
						case 1:
							{
							State = 9988; Match(AUDIT);
							}
							break;

						case 2:
							{
							State = 9989; Match(DDL);
							State = 9990; Match(TRIGGER);
							}
							break;

						case 3:
							{
							State = 9991; Match(EVENT);
							State = 9992;
							_la = _input.La(1);
							if ( !(_la==NOTIFICATION || _la==SESSION) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;

						case 4:
							{
							State = 9993; Match(SCOPED);
							State = 9994; Match(CONFIGURATION);
							}
							break;
						}
						}
						break;

					case 11:
						{
						State = 9997; Match(DATASPACE);
						}
						break;

					case 12:
						{
						State = 9998; Match(ENDPOINT);
						}
						break;

					case 13:
						{
						State = 9999; Match(EVENT);
						State = 10000;
						_la = _input.La(1);
						if ( !(_la==NOTIFICATION || _la==SESSION) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 14:
						{
						State = 10001; Match(EXTERNAL);
						State = 10007;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1343,_ctx) ) {
						case 1:
							{
							State = 10002; Match(DATA);
							State = 10003; Match(SOURCE);
							}
							break;

						case 2:
							{
							State = 10004; Match(FILE);
							State = 10005; Match(FORMAT);
							}
							break;

						case 3:
							{
							State = 10006; Match(LIBRARY);
							}
							break;
						}
						}
						break;

					case 15:
						{
						State = 10009; Match(FULLTEXT);
						State = 10010; Match(CATALOG);
						}
						break;

					case 16:
						{
						State = 10011; Match(LINKED);
						State = 10012; Match(SERVER);
						}
						break;

					case 17:
						{
						State = 10013; Match(LOGIN);
						}
						break;

					case 18:
						{
						State = 10014; Match(MASK);
						}
						break;

					case 19:
						{
						State = 10015; Match(MESSAGE);
						State = 10016; Match(TYPE);
						}
						break;

					case 20:
						{
						State = 10017; Match(REMOTE);
						State = 10018; Match(SERVICE);
						State = 10019; Match(BINDING);
						}
						break;

					case 21:
						{
						State = 10020; Match(ROLE);
						}
						break;

					case 22:
						{
						State = 10021; Match(ROUTE);
						}
						break;

					case 23:
						{
						State = 10022; Match(SCHEMA);
						}
						break;

					case 24:
						{
						State = 10023; Match(SECURITY);
						State = 10024; Match(POLICY);
						}
						break;

					case 25:
						{
						State = 10025; Match(SERVER);
						State = 10026;
						_la = _input.La(1);
						if ( !(_la==AUDIT || _la==ROLE) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 26:
						{
						State = 10027; Match(SERVICE);
						}
						break;

					case 27:
						{
						State = 10028; Match(SYMMETRIC);
						State = 10029; Match(KEY);
						}
						break;

					case 28:
						{
						State = 10030; Match(USER);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 10033; Match(RESOURCES);
					}
					break;

				case 3:
					{
					State = 10034; Match(SERVER);
					State = 10035; Match(STATE);
					}
					break;

				case 4:
					{
					State = 10036; Match(SETTINGS);
					}
					break;

				case 5:
					{
					State = 10037; Match(TRACE);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10040; Match(AUTHENTICATE);
				State = 10042;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1346,_ctx) ) {
				case 1:
					{
					State = 10041; Match(SERVER);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10044; Match(BACKUP);
				State = 10045;
				_la = _input.La(1);
				if ( !(_la==DATABASE || _la==LOG) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10046; Match(CHECKPOINT);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10047; Match(CONNECT);
				State = 10052;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1347,_ctx) ) {
				case 1:
					{
					State = 10048; Match(ANY);
					State = 10049; Match(DATABASE);
					}
					break;

				case 2:
					{
					State = 10050; Match(REPLICATION);
					}
					break;

				case 3:
					{
					State = 10051; Match(SQL);
					}
					break;
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10054; Match(CONTROL);
				State = 10056;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1348,_ctx) ) {
				case 1:
					{
					State = 10055; Match(SERVER);
					}
					break;
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10058; Match(CREATE);
				State = 10112;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1350,_ctx) ) {
				case 1:
					{
					State = 10059; Match(AGGREGATE);
					}
					break;

				case 2:
					{
					State = 10060; Match(ANY);
					State = 10061; Match(DATABASE);
					}
					break;

				case 3:
					{
					State = 10062; Match(ASSEMBLY);
					}
					break;

				case 4:
					{
					State = 10063; Match(ASYMMETRIC);
					State = 10064; Match(KEY);
					}
					break;

				case 5:
					{
					State = 10065; Match(AVAILABILITY);
					State = 10066; Match(GROUP);
					}
					break;

				case 6:
					{
					State = 10067; Match(CERTIFICATE);
					}
					break;

				case 7:
					{
					State = 10068; Match(CONTRACT);
					}
					break;

				case 8:
					{
					State = 10069; Match(DATABASE);
					State = 10073;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1349,_ctx) ) {
					case 1:
						{
						State = 10070; Match(DDL);
						State = 10071; Match(EVENT);
						State = 10072; Match(NOTIFICATION);
						}
						break;
					}
					}
					break;

				case 9:
					{
					State = 10075; Match(DDL);
					State = 10076; Match(EVENT);
					State = 10077; Match(NOTIFICATION);
					}
					break;

				case 10:
					{
					State = 10078; Match(DEFAULT);
					}
					break;

				case 11:
					{
					State = 10079; Match(ENDPOINT);
					}
					break;

				case 12:
					{
					State = 10080; Match(EXTERNAL);
					State = 10081; Match(LIBRARY);
					}
					break;

				case 13:
					{
					State = 10082; Match(FULLTEXT);
					State = 10083; Match(CATALOG);
					}
					break;

				case 14:
					{
					State = 10084; Match(FUNCTION);
					}
					break;

				case 15:
					{
					State = 10085; Match(MESSAGE);
					State = 10086; Match(TYPE);
					}
					break;

				case 16:
					{
					State = 10087; Match(PROCEDURE);
					}
					break;

				case 17:
					{
					State = 10088; Match(QUEUE);
					}
					break;

				case 18:
					{
					State = 10089; Match(REMOTE);
					State = 10090; Match(SERVICE);
					State = 10091; Match(BINDING);
					}
					break;

				case 19:
					{
					State = 10092; Match(ROLE);
					}
					break;

				case 20:
					{
					State = 10093; Match(ROUTE);
					}
					break;

				case 21:
					{
					State = 10094; Match(RULE);
					}
					break;

				case 22:
					{
					State = 10095; Match(SCHEMA);
					}
					break;

				case 23:
					{
					State = 10096; Match(SEQUENCE);
					}
					break;

				case 24:
					{
					State = 10097; Match(SERVER);
					State = 10098; Match(ROLE);
					}
					break;

				case 25:
					{
					State = 10099; Match(SERVICE);
					}
					break;

				case 26:
					{
					State = 10100; Match(SYMMETRIC);
					State = 10101; Match(KEY);
					}
					break;

				case 27:
					{
					State = 10102; Match(SYNONYM);
					}
					break;

				case 28:
					{
					State = 10103; Match(TABLE);
					}
					break;

				case 29:
					{
					State = 10104; Match(TRACE);
					State = 10105; Match(EVENT);
					State = 10106; Match(NOTIFICATION);
					}
					break;

				case 30:
					{
					State = 10107; Match(TYPE);
					}
					break;

				case 31:
					{
					State = 10108; Match(VIEW);
					}
					break;

				case 32:
					{
					State = 10109; Match(XML);
					State = 10110; Match(SCHEMA);
					State = 10111; Match(COLLECTION);
					}
					break;
				}
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 10114; Match(DELETE);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 10115; Match(EXECUTE);
				State = 10119;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1351,_ctx) ) {
				case 1:
					{
					State = 10116; Match(ANY);
					State = 10117; Match(EXTERNAL);
					State = 10118; Match(SCRIPT);
					}
					break;
				}
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 10121; Match(EXTERNAL);
				State = 10122; Match(ACCESS);
				State = 10123; Match(ASSEMBLY);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 10124; Match(IMPERSONATE);
				State = 10127;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1352,_ctx) ) {
				case 1:
					{
					State = 10125; Match(ANY);
					State = 10126; Match(LOGIN);
					}
					break;
				}
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 10129; Match(INSERT);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 10130; Match(KILL);
				State = 10131; Match(DATABASE);
				State = 10132; Match(CONNECTION);
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 10133; Match(RECEIVE);
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 10134; Match(REFERENCES);
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 10135; Match(SELECT);
				State = 10139;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1353,_ctx) ) {
				case 1:
					{
					State = 10136; Match(ALL);
					State = 10137; Match(USER);
					State = 10138; Match(SECURABLES);
					}
					break;
				}
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 10141; Match(SEND);
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 10142; Match(SHOWPLAN);
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 10143; Match(SHUTDOWN);
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 10144; Match(SUBSCRIBE);
				State = 10145; Match(QUERY);
				State = 10146; Match(NOTIFICATIONS);
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 10147; Match(TAKE);
				State = 10148; Match(OWNERSHIP);
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 10149; Match(UNMASK);
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 10150; Match(UNSAFE);
				State = 10151; Match(ASSEMBLY);
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 10152; Match(UPDATE);
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 10153; Match(VIEW);
				State = 10170;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1355,_ctx) ) {
				case 1:
					{
					State = 10154; Match(ANY);
					State = 10161;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1354,_ctx) ) {
					case 1:
						{
						State = 10155; Match(DATABASE);
						}
						break;

					case 2:
						{
						State = 10156; Match(DEFINITION);
						}
						break;

					case 3:
						{
						State = 10157; Match(COLUMN);
						State = 10158;
						_la = _input.La(1);
						if ( !(_la==ENCRYPTION || _la==MASTER) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 10159; Match(KEY);
						State = 10160; Match(DEFINITION);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 10163; Match(CHANGE);
					State = 10164; Match(TRACKING);
					}
					break;

				case 3:
					{
					State = 10165; Match(DATABASE);
					State = 10166; Match(STATE);
					}
					break;

				case 4:
					{
					State = 10167; Match(DEFINITION);
					}
					break;

				case 5:
					{
					State = 10168; Match(SERVER);
					State = 10169; Match(STATE);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_statementContext : ParserRuleContext {
		public Id_Context member_name;
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public ITerminalNode CURSOR() { return GetToken(TSqlParser.CURSOR, 0); }
		public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return GetRuleContext<Declare_set_cursor_commonContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode READ() { return GetToken(TSqlParser.READ, 0); }
		public ITerminalNode ONLY() { return GetToken(TSqlParser.ONLY, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Set_specialContext set_special() {
			return GetRuleContext<Set_specialContext>(0);
		}
		public Set_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSet_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSet_statement(this);
		}
	}

	[RuleVersion(0)]
	public Set_statementContext set_statement() {
		Set_statementContext _localctx = new Set_statementContext(_ctx, State);
		EnterRule(_localctx, 802, RULE_set_statement);
		try {
			State = 10205;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1361,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10174; Match(SET);
				State = 10175; Match(LOCAL_ID);
				State = 10178;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1357,_ctx) ) {
				case 1:
					{
					State = 10176; Match(DOT);
					State = 10177; _localctx.member_name = id_();
					}
					break;
				}
				State = 10180; Match(EQUAL);
				State = 10181; expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10182; Match(SET);
				State = 10183; Match(LOCAL_ID);
				State = 10184; assignment_operator();
				State = 10185; expression(0);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10187; Match(SET);
				State = 10188; Match(LOCAL_ID);
				State = 10189; Match(EQUAL);
				State = 10190; Match(CURSOR);
				State = 10191; declare_set_cursor_common();
				State = 10202;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1360,_ctx) ) {
				case 1:
					{
					State = 10192; Match(FOR);
					State = 10200;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1359,_ctx) ) {
					case 1:
						{
						State = 10193; Match(READ);
						State = 10194; Match(ONLY);
						}
						break;

					case 2:
						{
						State = 10195; Match(UPDATE);
						State = 10198;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1358,_ctx) ) {
						case 1:
							{
							State = 10196; Match(OF);
							State = 10197; column_name_list();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10204; set_special();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_statementContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode DISTRIBUTED() { return GetToken(TSqlParser.DISTRIBUTED, 0); }
		public ITerminalNode TRAN() { return GetToken(TSqlParser.TRAN, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(TSqlParser.TRANSACTION, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode MARK() { return GetToken(TSqlParser.MARK, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode COMMIT() { return GetToken(TSqlParser.COMMIT, 0); }
		public ITerminalNode DELAYED_DURABILITY() { return GetToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode WORK() { return GetToken(TSqlParser.WORK, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(TSqlParser.ROLLBACK, 0); }
		public ITerminalNode SAVE() { return GetToken(TSqlParser.SAVE, 0); }
		public Transaction_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTransaction_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTransaction_statement(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_statementContext transaction_statement() {
		Transaction_statementContext _localctx = new Transaction_statementContext(_ctx, State);
		EnterRule(_localctx, 804, RULE_transaction_statement);
		int _la;
		try {
			State = 10267;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1373,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10207; Match(BEGIN);
				State = 10208; Match(DISTRIBUTED);
				State = 10209;
				_la = _input.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10212;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1362,_ctx) ) {
				case 1:
					{
					State = 10210; id_();
					}
					break;

				case 2:
					{
					State = 10211; Match(LOCAL_ID);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10214; Match(BEGIN);
				State = 10215;
				_la = _input.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10225;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1365,_ctx) ) {
				case 1:
					{
					State = 10218;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1363,_ctx) ) {
					case 1:
						{
						State = 10216; id_();
						}
						break;

					case 2:
						{
						State = 10217; Match(LOCAL_ID);
						}
						break;
					}
					State = 10223;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1364,_ctx) ) {
					case 1:
						{
						State = 10220; Match(WITH);
						State = 10221; Match(MARK);
						State = 10222; Match(STRING);
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10227; Match(COMMIT);
				State = 10228;
				_la = _input.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10241;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1368,_ctx) ) {
				case 1:
					{
					State = 10231;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1366,_ctx) ) {
					case 1:
						{
						State = 10229; id_();
						}
						break;

					case 2:
						{
						State = 10230; Match(LOCAL_ID);
						}
						break;
					}
					State = 10239;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1367,_ctx) ) {
					case 1:
						{
						State = 10233; Match(WITH);
						State = 10234; Match(LR_BRACKET);
						State = 10235; Match(DELAYED_DURABILITY);
						State = 10236; Match(EQUAL);
						State = 10237;
						_la = _input.La(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 10238; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10243; Match(COMMIT);
				State = 10245;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1369,_ctx) ) {
				case 1:
					{
					State = 10244; Match(WORK);
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10247; Match(COMMIT);
				State = 10248; id_();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10249; Match(ROLLBACK);
				State = 10250; id_();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10251; Match(ROLLBACK);
				State = 10252;
				_la = _input.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10255;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1370,_ctx) ) {
				case 1:
					{
					State = 10253; id_();
					}
					break;

				case 2:
					{
					State = 10254; Match(LOCAL_ID);
					}
					break;
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10257; Match(ROLLBACK);
				State = 10259;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1371,_ctx) ) {
				case 1:
					{
					State = 10258; Match(WORK);
					}
					break;
				}
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 10261; Match(SAVE);
				State = 10262;
				_la = _input.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10265;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1372,_ctx) ) {
				case 1:
					{
					State = 10263; id_();
					}
					break;

				case 2:
					{
					State = 10264; Match(LOCAL_ID);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Go_batch_statementContext : ParserRuleContext {
		public IToken count;
		public ITerminalNode GO_BATCH() { return GetToken(TSqlParser.GO_BATCH, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Go_batch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_go_batch_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGo_batch_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGo_batch_statement(this);
		}
	}

	[RuleVersion(0)]
	public Go_batch_statementContext go_batch_statement() {
		Go_batch_statementContext _localctx = new Go_batch_statementContext(_ctx, State);
		EnterRule(_localctx, 806, RULE_go_batch_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10269; Match(GO_BATCH);
			State = 10271;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1374,_ctx) ) {
			case 1:
				{
				State = 10270; _localctx.count = Match(DECIMAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Go_statementContext : ParserRuleContext {
		public IToken count;
		public ITerminalNode GO() { return GetToken(TSqlParser.GO, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Go_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_go_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGo_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGo_statement(this);
		}
	}

	[RuleVersion(0)]
	public Go_statementContext go_statement() {
		Go_statementContext _localctx = new Go_statementContext(_ctx, State);
		EnterRule(_localctx, 808, RULE_go_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10273; Match(GO);
			State = 10275;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1375,_ctx) ) {
			case 1:
				{
				State = 10274; _localctx.count = Match(DECIMAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Use_statementContext : ParserRuleContext {
		public Id_Context database;
		public ITerminalNode USE() { return GetToken(TSqlParser.USE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Use_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUse_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUse_statement(this);
		}
	}

	[RuleVersion(0)]
	public Use_statementContext use_statement() {
		Use_statementContext _localctx = new Use_statementContext(_ctx, State);
		EnterRule(_localctx, 810, RULE_use_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10277; Match(USE);
			State = 10278; _localctx.database = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Setuser_statementContext : ParserRuleContext {
		public IToken user;
		public ITerminalNode SETUSER() { return GetToken(TSqlParser.SETUSER, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Setuser_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setuser_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSetuser_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSetuser_statement(this);
		}
	}

	[RuleVersion(0)]
	public Setuser_statementContext setuser_statement() {
		Setuser_statementContext _localctx = new Setuser_statementContext(_ctx, State);
		EnterRule(_localctx, 812, RULE_setuser_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10280; Match(SETUSER);
			State = 10282;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1376,_ctx) ) {
			case 1:
				{
				State = 10281; _localctx.user = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reconfigure_statementContext : ParserRuleContext {
		public ITerminalNode RECONFIGURE() { return GetToken(TSqlParser.RECONFIGURE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(TSqlParser.OVERRIDE, 0); }
		public Reconfigure_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reconfigure_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterReconfigure_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitReconfigure_statement(this);
		}
	}

	[RuleVersion(0)]
	public Reconfigure_statementContext reconfigure_statement() {
		Reconfigure_statementContext _localctx = new Reconfigure_statementContext(_ctx, State);
		EnterRule(_localctx, 814, RULE_reconfigure_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10284; Match(RECONFIGURE);
			State = 10287;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1377,_ctx) ) {
			case 1:
				{
				State = 10285; Match(WITH);
				State = 10286; Match(OVERRIDE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shutdown_statementContext : ParserRuleContext {
		public ITerminalNode SHUTDOWN() { return GetToken(TSqlParser.SHUTDOWN, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NOWAIT() { return GetToken(TSqlParser.NOWAIT, 0); }
		public Shutdown_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shutdown_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterShutdown_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitShutdown_statement(this);
		}
	}

	[RuleVersion(0)]
	public Shutdown_statementContext shutdown_statement() {
		Shutdown_statementContext _localctx = new Shutdown_statementContext(_ctx, State);
		EnterRule(_localctx, 816, RULE_shutdown_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10289; Match(SHUTDOWN);
			State = 10292;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1378,_ctx) ) {
			case 1:
				{
				State = 10290; Match(WITH);
				State = 10291; Match(NOWAIT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Checkpoint_statementContext : ParserRuleContext {
		public IToken checkPointDuration;
		public ITerminalNode CHECKPOINT() { return GetToken(TSqlParser.CHECKPOINT, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Checkpoint_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkpoint_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCheckpoint_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCheckpoint_statement(this);
		}
	}

	[RuleVersion(0)]
	public Checkpoint_statementContext checkpoint_statement() {
		Checkpoint_statementContext _localctx = new Checkpoint_statementContext(_ctx, State);
		EnterRule(_localctx, 818, RULE_checkpoint_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10294; Match(CHECKPOINT);
			State = 10296;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1379,_ctx) ) {
			case 1:
				{
				State = 10295; _localctx.checkPointDuration = Match(DECIMAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checkalloc_optionContext : ParserRuleContext {
		public ITerminalNode ALL_ERRORMSGS() { return GetToken(TSqlParser.ALL_ERRORMSGS, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public ITerminalNode TABLOCK() { return GetToken(TSqlParser.TABLOCK, 0); }
		public ITerminalNode ESTIMATEONLY() { return GetToken(TSqlParser.ESTIMATEONLY, 0); }
		public Dbcc_checkalloc_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checkalloc_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checkalloc_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checkalloc_option(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checkalloc_optionContext dbcc_checkalloc_option() {
		Dbcc_checkalloc_optionContext _localctx = new Dbcc_checkalloc_optionContext(_ctx, State);
		EnterRule(_localctx, 820, RULE_dbcc_checkalloc_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10298;
			_la = _input.La(1);
			if ( !(_la==ALL_ERRORMSGS || _la==ESTIMATEONLY || _la==NO_INFOMSGS || _la==TABLOCK) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checkallocContext : ParserRuleContext {
		public IToken name;
		public Id_Context database;
		public IToken databaseid;
		public Dbcc_checkalloc_optionContext dbcc_option;
		public ITerminalNode CHECKALLOC() { return GetToken(TSqlParser.CHECKALLOC, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode NOINDEX() { return GetToken(TSqlParser.NOINDEX, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode REPAIR_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.REPAIR_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode REPAIR_FAST() { return GetToken(TSqlParser.REPAIR_FAST, 0); }
		public ITerminalNode REPAIR_REBUILD() { return GetToken(TSqlParser.REPAIR_REBUILD, 0); }
		public Dbcc_checkalloc_optionContext[] dbcc_checkalloc_option() {
			return GetRuleContexts<Dbcc_checkalloc_optionContext>();
		}
		public Dbcc_checkalloc_optionContext dbcc_checkalloc_option(int i) {
			return GetRuleContext<Dbcc_checkalloc_optionContext>(i);
		}
		public Dbcc_checkallocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checkalloc; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checkalloc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checkalloc(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checkallocContext dbcc_checkalloc() {
		Dbcc_checkallocContext _localctx = new Dbcc_checkallocContext(_ctx, State);
		EnterRule(_localctx, 822, RULE_dbcc_checkalloc);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10300; _localctx.name = Match(CHECKALLOC);
			State = 10325;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1384,_ctx) ) {
			case 1:
				{
				State = 10301; Match(LR_BRACKET);
				State = 10305;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1380,_ctx) ) {
				case 1:
					{
					State = 10302; _localctx.database = id_();
					}
					break;

				case 2:
					{
					State = 10303; _localctx.databaseid = Match(STRING);
					}
					break;

				case 3:
					{
					State = 10304; Match(DECIMAL);
					}
					break;
				}
				State = 10311;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1381,_ctx) ) {
				case 1:
					{
					State = 10307; Match(COMMA);
					State = 10308; Match(NOINDEX);
					}
					break;

				case 2:
					{
					State = 10309; Match(COMMA);
					State = 10310;
					_la = _input.La(1);
					if ( !(((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (REPAIR_ALLOW_DATA_LOSS - 796)) | (1L << (REPAIR_FAST - 796)) | (1L << (REPAIR_REBUILD - 796)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 10313; Match(RR_BRACKET);
				State = 10323;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1383,_ctx) ) {
				case 1:
					{
					State = 10314; Match(WITH);
					State = 10315; _localctx.dbcc_option = dbcc_checkalloc_option();
					State = 10320;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1382,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 10316; Match(COMMA);
							State = 10317; _localctx.dbcc_option = dbcc_checkalloc_option();
							}
							} 
						}
						State = 10322;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1382,_ctx);
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checkcatalogContext : ParserRuleContext {
		public IToken name;
		public Id_Context database;
		public IToken databasename;
		public IToken dbcc_option;
		public ITerminalNode CHECKCATALOG() { return GetToken(TSqlParser.CHECKCATALOG, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Dbcc_checkcatalogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checkcatalog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checkcatalog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checkcatalog(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checkcatalogContext dbcc_checkcatalog() {
		Dbcc_checkcatalogContext _localctx = new Dbcc_checkcatalogContext(_ctx, State);
		EnterRule(_localctx, 824, RULE_dbcc_checkcatalog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10327; _localctx.name = Match(CHECKCATALOG);
			State = 10335;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1386,_ctx) ) {
			case 1:
				{
				State = 10328; Match(LR_BRACKET);
				State = 10332;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1385,_ctx) ) {
				case 1:
					{
					State = 10329; _localctx.database = id_();
					}
					break;

				case 2:
					{
					State = 10330; _localctx.databasename = Match(STRING);
					}
					break;

				case 3:
					{
					State = 10331; Match(DECIMAL);
					}
					break;
				}
				State = 10334; Match(RR_BRACKET);
				}
				break;
			}
			State = 10339;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1387,_ctx) ) {
			case 1:
				{
				State = 10337; Match(WITH);
				State = 10338; _localctx.dbcc_option = Match(NO_INFOMSGS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checkconstraints_optionContext : ParserRuleContext {
		public ITerminalNode ALL_CONSTRAINTS() { return GetToken(TSqlParser.ALL_CONSTRAINTS, 0); }
		public ITerminalNode ALL_ERRORMSGS() { return GetToken(TSqlParser.ALL_ERRORMSGS, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public Dbcc_checkconstraints_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checkconstraints_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checkconstraints_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checkconstraints_option(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checkconstraints_optionContext dbcc_checkconstraints_option() {
		Dbcc_checkconstraints_optionContext _localctx = new Dbcc_checkconstraints_optionContext(_ctx, State);
		EnterRule(_localctx, 826, RULE_dbcc_checkconstraints_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10341;
			_la = _input.La(1);
			if ( !(_la==ALL_CONSTRAINTS || _la==ALL_ERRORMSGS || _la==NO_INFOMSGS) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checkconstraintsContext : ParserRuleContext {
		public IToken name;
		public Id_Context table_or_constraint;
		public IToken table_or_constraint_name;
		public Dbcc_checkconstraints_optionContext dbcc_option;
		public ITerminalNode CHECKCONSTRAINTS() { return GetToken(TSqlParser.CHECKCONSTRAINTS, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Dbcc_checkconstraints_optionContext[] dbcc_checkconstraints_option() {
			return GetRuleContexts<Dbcc_checkconstraints_optionContext>();
		}
		public Dbcc_checkconstraints_optionContext dbcc_checkconstraints_option(int i) {
			return GetRuleContext<Dbcc_checkconstraints_optionContext>(i);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Dbcc_checkconstraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checkconstraints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checkconstraints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checkconstraints(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checkconstraintsContext dbcc_checkconstraints() {
		Dbcc_checkconstraintsContext _localctx = new Dbcc_checkconstraintsContext(_ctx, State);
		EnterRule(_localctx, 828, RULE_dbcc_checkconstraints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10343; _localctx.name = Match(CHECKCONSTRAINTS);
			State = 10350;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1389,_ctx) ) {
			case 1:
				{
				State = 10344; Match(LR_BRACKET);
				State = 10347;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1388,_ctx) ) {
				case 1:
					{
					State = 10345; _localctx.table_or_constraint = id_();
					}
					break;

				case 2:
					{
					State = 10346; _localctx.table_or_constraint_name = Match(STRING);
					}
					break;
				}
				State = 10349; Match(RR_BRACKET);
				}
				break;
			}
			State = 10361;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1391,_ctx) ) {
			case 1:
				{
				State = 10352; Match(WITH);
				State = 10353; _localctx.dbcc_option = dbcc_checkconstraints_option();
				State = 10358;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1390,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10354; Match(COMMA);
						State = 10355; _localctx.dbcc_option = dbcc_checkconstraints_option();
						}
						} 
					}
					State = 10360;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1390,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checkdb_table_optionContext : ParserRuleContext {
		public IToken max_dregree_of_parallelism;
		public ITerminalNode ALL_ERRORMSGS() { return GetToken(TSqlParser.ALL_ERRORMSGS, 0); }
		public ITerminalNode EXTENDED_LOGICAL_CHECKS() { return GetToken(TSqlParser.EXTENDED_LOGICAL_CHECKS, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public ITerminalNode TABLOCK() { return GetToken(TSqlParser.TABLOCK, 0); }
		public ITerminalNode ESTIMATEONLY() { return GetToken(TSqlParser.ESTIMATEONLY, 0); }
		public ITerminalNode PHYSICAL_ONLY() { return GetToken(TSqlParser.PHYSICAL_ONLY, 0); }
		public ITerminalNode DATA_PURITY() { return GetToken(TSqlParser.DATA_PURITY, 0); }
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Dbcc_checkdb_table_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checkdb_table_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checkdb_table_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checkdb_table_option(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checkdb_table_optionContext dbcc_checkdb_table_option() {
		Dbcc_checkdb_table_optionContext _localctx = new Dbcc_checkdb_table_optionContext(_ctx, State);
		EnterRule(_localctx, 830, RULE_dbcc_checkdb_table_option);
		try {
			State = 10373;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1392,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10363; Match(ALL_ERRORMSGS);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10364; Match(EXTENDED_LOGICAL_CHECKS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10365; Match(NO_INFOMSGS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10366; Match(TABLOCK);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10367; Match(ESTIMATEONLY);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10368; Match(PHYSICAL_ONLY);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10369; Match(DATA_PURITY);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10370; Match(MAXDOP);
				State = 10371; Match(EQUAL);
				State = 10372; _localctx.max_dregree_of_parallelism = Match(DECIMAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checkdbContext : ParserRuleContext {
		public IToken name;
		public Id_Context database;
		public IToken databasename;
		public Dbcc_checkdb_table_optionContext dbcc_option;
		public ITerminalNode CHECKDB() { return GetToken(TSqlParser.CHECKDB, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Dbcc_checkdb_table_optionContext[] dbcc_checkdb_table_option() {
			return GetRuleContexts<Dbcc_checkdb_table_optionContext>();
		}
		public Dbcc_checkdb_table_optionContext dbcc_checkdb_table_option(int i) {
			return GetRuleContext<Dbcc_checkdb_table_optionContext>(i);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode NOINDEX() { return GetToken(TSqlParser.NOINDEX, 0); }
		public ITerminalNode REPAIR_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.REPAIR_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode REPAIR_FAST() { return GetToken(TSqlParser.REPAIR_FAST, 0); }
		public ITerminalNode REPAIR_REBUILD() { return GetToken(TSqlParser.REPAIR_REBUILD, 0); }
		public Dbcc_checkdbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checkdb; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checkdb(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checkdb(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checkdbContext dbcc_checkdb() {
		Dbcc_checkdbContext _localctx = new Dbcc_checkdbContext(_ctx, State);
		EnterRule(_localctx, 832, RULE_dbcc_checkdb);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10375; _localctx.name = Match(CHECKDB);
			State = 10387;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1395,_ctx) ) {
			case 1:
				{
				State = 10376; Match(LR_BRACKET);
				State = 10380;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1393,_ctx) ) {
				case 1:
					{
					State = 10377; _localctx.database = id_();
					}
					break;

				case 2:
					{
					State = 10378; _localctx.databasename = Match(STRING);
					}
					break;

				case 3:
					{
					State = 10379; Match(DECIMAL);
					}
					break;
				}
				State = 10384;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1394,_ctx) ) {
				case 1:
					{
					State = 10382; Match(COMMA);
					State = 10383;
					_la = _input.La(1);
					if ( !(_la==NOINDEX || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (REPAIR_ALLOW_DATA_LOSS - 796)) | (1L << (REPAIR_FAST - 796)) | (1L << (REPAIR_REBUILD - 796)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 10386; Match(RR_BRACKET);
				}
				break;
			}
			State = 10398;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1397,_ctx) ) {
			case 1:
				{
				State = 10389; Match(WITH);
				State = 10390; _localctx.dbcc_option = dbcc_checkdb_table_option();
				State = 10395;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1396,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10391; Match(COMMA);
						State = 10392; _localctx.dbcc_option = dbcc_checkdb_table_option();
						}
						} 
					}
					State = 10397;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1396,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checkfilegroup_optionContext : ParserRuleContext {
		public IToken max_dregree_of_parallelism;
		public ITerminalNode ALL_ERRORMSGS() { return GetToken(TSqlParser.ALL_ERRORMSGS, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public ITerminalNode TABLOCK() { return GetToken(TSqlParser.TABLOCK, 0); }
		public ITerminalNode ESTIMATEONLY() { return GetToken(TSqlParser.ESTIMATEONLY, 0); }
		public ITerminalNode PHYSICAL_ONLY() { return GetToken(TSqlParser.PHYSICAL_ONLY, 0); }
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Dbcc_checkfilegroup_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checkfilegroup_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checkfilegroup_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checkfilegroup_option(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checkfilegroup_optionContext dbcc_checkfilegroup_option() {
		Dbcc_checkfilegroup_optionContext _localctx = new Dbcc_checkfilegroup_optionContext(_ctx, State);
		EnterRule(_localctx, 834, RULE_dbcc_checkfilegroup_option);
		try {
			State = 10408;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1398,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10400; Match(ALL_ERRORMSGS);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10401; Match(NO_INFOMSGS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10402; Match(TABLOCK);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10403; Match(ESTIMATEONLY);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10404; Match(PHYSICAL_ONLY);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10405; Match(MAXDOP);
				State = 10406; Match(EQUAL);
				State = 10407; _localctx.max_dregree_of_parallelism = Match(DECIMAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checkfilegroupContext : ParserRuleContext {
		public IToken name;
		public IToken filegroup_id;
		public IToken filegroup_name;
		public Dbcc_checkfilegroup_optionContext dbcc_option;
		public ITerminalNode CHECKFILEGROUP() { return GetToken(TSqlParser.CHECKFILEGROUP, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Dbcc_checkfilegroup_optionContext[] dbcc_checkfilegroup_option() {
			return GetRuleContexts<Dbcc_checkfilegroup_optionContext>();
		}
		public Dbcc_checkfilegroup_optionContext dbcc_checkfilegroup_option(int i) {
			return GetRuleContext<Dbcc_checkfilegroup_optionContext>(i);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode NOINDEX() { return GetToken(TSqlParser.NOINDEX, 0); }
		public ITerminalNode REPAIR_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.REPAIR_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode REPAIR_FAST() { return GetToken(TSqlParser.REPAIR_FAST, 0); }
		public ITerminalNode REPAIR_REBUILD() { return GetToken(TSqlParser.REPAIR_REBUILD, 0); }
		public Dbcc_checkfilegroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checkfilegroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checkfilegroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checkfilegroup(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checkfilegroupContext dbcc_checkfilegroup() {
		Dbcc_checkfilegroupContext _localctx = new Dbcc_checkfilegroupContext(_ctx, State);
		EnterRule(_localctx, 836, RULE_dbcc_checkfilegroup);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10410; _localctx.name = Match(CHECKFILEGROUP);
			State = 10421;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1401,_ctx) ) {
			case 1:
				{
				State = 10411; Match(LR_BRACKET);
				State = 10414;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1399,_ctx) ) {
				case 1:
					{
					State = 10412; _localctx.filegroup_id = Match(DECIMAL);
					}
					break;

				case 2:
					{
					State = 10413; _localctx.filegroup_name = Match(STRING);
					}
					break;
				}
				State = 10418;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1400,_ctx) ) {
				case 1:
					{
					State = 10416; Match(COMMA);
					State = 10417;
					_la = _input.La(1);
					if ( !(_la==NOINDEX || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (REPAIR_ALLOW_DATA_LOSS - 796)) | (1L << (REPAIR_FAST - 796)) | (1L << (REPAIR_REBUILD - 796)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 10420; Match(RR_BRACKET);
				}
				break;
			}
			State = 10432;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1403,_ctx) ) {
			case 1:
				{
				State = 10423; Match(WITH);
				State = 10424; _localctx.dbcc_option = dbcc_checkfilegroup_option();
				State = 10429;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1402,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10425; Match(COMMA);
						State = 10426; _localctx.dbcc_option = dbcc_checkfilegroup_option();
						}
						} 
					}
					State = 10431;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1402,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_checktableContext : ParserRuleContext {
		public IToken name;
		public IToken table_or_view_name;
		public ExpressionContext index_id;
		public Dbcc_checkdb_table_optionContext dbcc_option;
		public ITerminalNode CHECKTABLE() { return GetToken(TSqlParser.CHECKTABLE, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Dbcc_checkdb_table_optionContext[] dbcc_checkdb_table_option() {
			return GetRuleContexts<Dbcc_checkdb_table_optionContext>();
		}
		public Dbcc_checkdb_table_optionContext dbcc_checkdb_table_option(int i) {
			return GetRuleContext<Dbcc_checkdb_table_optionContext>(i);
		}
		public ITerminalNode NOINDEX() { return GetToken(TSqlParser.NOINDEX, 0); }
		public ITerminalNode REPAIR_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.REPAIR_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode REPAIR_FAST() { return GetToken(TSqlParser.REPAIR_FAST, 0); }
		public ITerminalNode REPAIR_REBUILD() { return GetToken(TSqlParser.REPAIR_REBUILD, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Dbcc_checktableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_checktable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_checktable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_checktable(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_checktableContext dbcc_checktable() {
		Dbcc_checktableContext _localctx = new Dbcc_checktableContext(_ctx, State);
		EnterRule(_localctx, 838, RULE_dbcc_checktable);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10434; _localctx.name = Match(CHECKTABLE);
			State = 10435; Match(LR_BRACKET);
			State = 10436; _localctx.table_or_view_name = Match(STRING);
			State = 10445;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1405,_ctx) ) {
			case 1:
				{
				State = 10437; Match(COMMA);
				State = 10443;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1404,_ctx) ) {
				case 1:
					{
					State = 10438; Match(NOINDEX);
					}
					break;

				case 2:
					{
					State = 10439; _localctx.index_id = expression(0);
					}
					break;

				case 3:
					{
					State = 10440; Match(REPAIR_ALLOW_DATA_LOSS);
					}
					break;

				case 4:
					{
					State = 10441; Match(REPAIR_FAST);
					}
					break;

				case 5:
					{
					State = 10442; Match(REPAIR_REBUILD);
					}
					break;
				}
				}
				break;
			}
			State = 10447; Match(RR_BRACKET);
			State = 10457;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1407,_ctx) ) {
			case 1:
				{
				State = 10448; Match(WITH);
				State = 10449; _localctx.dbcc_option = dbcc_checkdb_table_option();
				State = 10454;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1406,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10450; Match(COMMA);
						State = 10451; _localctx.dbcc_option = dbcc_checkdb_table_option();
						}
						} 
					}
					State = 10456;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1406,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_cleantableContext : ParserRuleContext {
		public IToken name;
		public Id_Context database;
		public IToken databasename;
		public Id_Context table_or_view;
		public IToken table_or_view_name;
		public IToken batch_size;
		public IToken dbcc_option;
		public ITerminalNode CLEANTABLE() { return GetToken(TSqlParser.CLEANTABLE, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public Dbcc_cleantableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_cleantable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_cleantable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_cleantable(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_cleantableContext dbcc_cleantable() {
		Dbcc_cleantableContext _localctx = new Dbcc_cleantableContext(_ctx, State);
		EnterRule(_localctx, 840, RULE_dbcc_cleantable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10459; _localctx.name = Match(CLEANTABLE);
			State = 10460; Match(LR_BRACKET);
			State = 10464;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1408,_ctx) ) {
			case 1:
				{
				State = 10461; _localctx.database = id_();
				}
				break;

			case 2:
				{
				State = 10462; _localctx.databasename = Match(STRING);
				}
				break;

			case 3:
				{
				State = 10463; Match(DECIMAL);
				}
				break;
			}
			State = 10466; Match(COMMA);
			State = 10469;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1409,_ctx) ) {
			case 1:
				{
				State = 10467; _localctx.table_or_view = id_();
				}
				break;

			case 2:
				{
				State = 10468; _localctx.table_or_view_name = Match(STRING);
				}
				break;
			}
			State = 10473;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1410,_ctx) ) {
			case 1:
				{
				State = 10471; Match(COMMA);
				State = 10472; _localctx.batch_size = Match(DECIMAL);
				}
				break;
			}
			State = 10475; Match(RR_BRACKET);
			State = 10478;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1411,_ctx) ) {
			case 1:
				{
				State = 10476; Match(WITH);
				State = 10477; _localctx.dbcc_option = Match(NO_INFOMSGS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_clonedatabase_optionContext : ParserRuleContext {
		public ITerminalNode NO_STATISTICS() { return GetToken(TSqlParser.NO_STATISTICS, 0); }
		public ITerminalNode NO_QUERYSTORE() { return GetToken(TSqlParser.NO_QUERYSTORE, 0); }
		public ITerminalNode SERVICEBROKER() { return GetToken(TSqlParser.SERVICEBROKER, 0); }
		public ITerminalNode VERIFY_CLONEDB() { return GetToken(TSqlParser.VERIFY_CLONEDB, 0); }
		public ITerminalNode BACKUP_CLONEDB() { return GetToken(TSqlParser.BACKUP_CLONEDB, 0); }
		public Dbcc_clonedatabase_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_clonedatabase_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_clonedatabase_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_clonedatabase_option(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_clonedatabase_optionContext dbcc_clonedatabase_option() {
		Dbcc_clonedatabase_optionContext _localctx = new Dbcc_clonedatabase_optionContext(_ctx, State);
		EnterRule(_localctx, 842, RULE_dbcc_clonedatabase_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10480;
			_la = _input.La(1);
			if ( !(_la==BACKUP_CLONEDB || _la==NO_QUERYSTORE || _la==NO_STATISTICS || _la==SERVICEBROKER || _la==VERIFY_CLONEDB) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_clonedatabaseContext : ParserRuleContext {
		public IToken name;
		public Id_Context source_database;
		public Id_Context target_database;
		public Dbcc_clonedatabase_optionContext dbcc_option;
		public ITerminalNode CLONEDATABASE() { return GetToken(TSqlParser.CLONEDATABASE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Dbcc_clonedatabase_optionContext[] dbcc_clonedatabase_option() {
			return GetRuleContexts<Dbcc_clonedatabase_optionContext>();
		}
		public Dbcc_clonedatabase_optionContext dbcc_clonedatabase_option(int i) {
			return GetRuleContext<Dbcc_clonedatabase_optionContext>(i);
		}
		public Dbcc_clonedatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_clonedatabase; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_clonedatabase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_clonedatabase(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_clonedatabaseContext dbcc_clonedatabase() {
		Dbcc_clonedatabaseContext _localctx = new Dbcc_clonedatabaseContext(_ctx, State);
		EnterRule(_localctx, 844, RULE_dbcc_clonedatabase);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10482; _localctx.name = Match(CLONEDATABASE);
			State = 10483; Match(LR_BRACKET);
			State = 10484; _localctx.source_database = id_();
			State = 10485; Match(COMMA);
			State = 10486; _localctx.target_database = id_();
			State = 10487; Match(RR_BRACKET);
			State = 10497;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1413,_ctx) ) {
			case 1:
				{
				State = 10488; Match(WITH);
				State = 10489; _localctx.dbcc_option = dbcc_clonedatabase_option();
				State = 10494;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1412,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10490; Match(COMMA);
						State = 10491; _localctx.dbcc_option = dbcc_clonedatabase_option();
						}
						} 
					}
					State = 10496;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1412,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_pdw_showspaceusedContext : ParserRuleContext {
		public IToken name;
		public Id_Context tablename;
		public IToken dbcc_option;
		public ITerminalNode PDW_SHOWSPACEUSED() { return GetToken(TSqlParser.PDW_SHOWSPACEUSED, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode IGNORE_REPLICATED_TABLE_CACHE() { return GetToken(TSqlParser.IGNORE_REPLICATED_TABLE_CACHE, 0); }
		public Dbcc_pdw_showspaceusedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_pdw_showspaceused; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_pdw_showspaceused(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_pdw_showspaceused(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_pdw_showspaceusedContext dbcc_pdw_showspaceused() {
		Dbcc_pdw_showspaceusedContext _localctx = new Dbcc_pdw_showspaceusedContext(_ctx, State);
		EnterRule(_localctx, 846, RULE_dbcc_pdw_showspaceused);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10499; _localctx.name = Match(PDW_SHOWSPACEUSED);
			State = 10504;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1414,_ctx) ) {
			case 1:
				{
				State = 10500; Match(LR_BRACKET);
				State = 10501; _localctx.tablename = id_();
				State = 10502; Match(RR_BRACKET);
				}
				break;
			}
			State = 10508;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1415,_ctx) ) {
			case 1:
				{
				State = 10506; Match(WITH);
				State = 10507; _localctx.dbcc_option = Match(IGNORE_REPLICATED_TABLE_CACHE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_proccacheContext : ParserRuleContext {
		public IToken name;
		public IToken dbcc_option;
		public ITerminalNode PROCCACHE() { return GetToken(TSqlParser.PROCCACHE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public Dbcc_proccacheContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_proccache; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_proccache(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_proccache(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_proccacheContext dbcc_proccache() {
		Dbcc_proccacheContext _localctx = new Dbcc_proccacheContext(_ctx, State);
		EnterRule(_localctx, 848, RULE_dbcc_proccache);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10510; _localctx.name = Match(PROCCACHE);
			State = 10513;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1416,_ctx) ) {
			case 1:
				{
				State = 10511; Match(WITH);
				State = 10512; _localctx.dbcc_option = Match(NO_INFOMSGS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_showcontig_optionContext : ParserRuleContext {
		public ITerminalNode ALL_INDEXES() { return GetToken(TSqlParser.ALL_INDEXES, 0); }
		public ITerminalNode TABLERESULTS() { return GetToken(TSqlParser.TABLERESULTS, 0); }
		public ITerminalNode FAST() { return GetToken(TSqlParser.FAST, 0); }
		public ITerminalNode ALL_LEVELS() { return GetToken(TSqlParser.ALL_LEVELS, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public Dbcc_showcontig_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_showcontig_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_showcontig_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_showcontig_option(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_showcontig_optionContext dbcc_showcontig_option() {
		Dbcc_showcontig_optionContext _localctx = new Dbcc_showcontig_optionContext(_ctx, State);
		EnterRule(_localctx, 850, RULE_dbcc_showcontig_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10515;
			_la = _input.La(1);
			if ( !(_la==ALL_INDEXES || _la==ALL_LEVELS || _la==FAST || _la==NO_INFOMSGS || _la==TABLERESULTS) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_showcontigContext : ParserRuleContext {
		public IToken name;
		public ExpressionContext table_or_view;
		public ExpressionContext index;
		public Dbcc_showcontig_optionContext dbcc_option;
		public ITerminalNode SHOWCONTIG() { return GetToken(TSqlParser.SHOWCONTIG, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Dbcc_showcontig_optionContext[] dbcc_showcontig_option() {
			return GetRuleContexts<Dbcc_showcontig_optionContext>();
		}
		public Dbcc_showcontig_optionContext dbcc_showcontig_option(int i) {
			return GetRuleContext<Dbcc_showcontig_optionContext>(i);
		}
		public Dbcc_showcontigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_showcontig; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_showcontig(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_showcontig(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_showcontigContext dbcc_showcontig() {
		Dbcc_showcontigContext _localctx = new Dbcc_showcontigContext(_ctx, State);
		EnterRule(_localctx, 852, RULE_dbcc_showcontig);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10517; _localctx.name = Match(SHOWCONTIG);
			State = 10526;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1418,_ctx) ) {
			case 1:
				{
				State = 10518; Match(LR_BRACKET);
				State = 10519; _localctx.table_or_view = expression(0);
				State = 10522;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1417,_ctx) ) {
				case 1:
					{
					State = 10520; Match(COMMA);
					State = 10521; _localctx.index = expression(0);
					}
					break;
				}
				State = 10524; Match(RR_BRACKET);
				}
				break;
			}
			State = 10537;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1420,_ctx) ) {
			case 1:
				{
				State = 10528; Match(WITH);
				State = 10529; _localctx.dbcc_option = dbcc_showcontig_option();
				State = 10534;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1419,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 10530; Match(COMMA);
						State = 10531; dbcc_showcontig_option();
						}
						} 
					}
					State = 10536;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1419,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_shrinklogContext : ParserRuleContext {
		public IToken name;
		public IToken dbcc_option;
		public ITerminalNode SHRINKLOG() { return GetToken(TSqlParser.SHRINKLOG, 0); }
		public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode MB() { return GetToken(TSqlParser.MB, 0); }
		public ITerminalNode GB() { return GetToken(TSqlParser.GB, 0); }
		public ITerminalNode TB() { return GetToken(TSqlParser.TB, 0); }
		public Dbcc_shrinklogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_shrinklog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_shrinklog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_shrinklog(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_shrinklogContext dbcc_shrinklog() {
		Dbcc_shrinklogContext _localctx = new Dbcc_shrinklogContext(_ctx, State);
		EnterRule(_localctx, 854, RULE_dbcc_shrinklog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10539; _localctx.name = Match(SHRINKLOG);
			State = 10549;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1422,_ctx) ) {
			case 1:
				{
				State = 10540; Match(LR_BRACKET);
				State = 10541; Match(SIZE);
				State = 10542; Match(EQUAL);
				State = 10546;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1421,_ctx) ) {
				case 1:
					{
					{
					State = 10543; Match(DECIMAL);
					State = 10544;
					_la = _input.La(1);
					if ( !(_la==GB || _la==MB || _la==TB) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					}
					break;

				case 2:
					{
					State = 10545; Match(DEFAULT);
					}
					break;
				}
				State = 10548; Match(RR_BRACKET);
				}
				break;
			}
			State = 10553;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1423,_ctx) ) {
			case 1:
				{
				State = 10551; Match(WITH);
				State = 10552; _localctx.dbcc_option = Match(NO_INFOMSGS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_dbreindexContext : ParserRuleContext {
		public IToken name;
		public Id_or_stringContext table;
		public Id_or_stringContext index_name;
		public ExpressionContext fillfactor;
		public IToken dbcc_option;
		public ITerminalNode DBREINDEX() { return GetToken(TSqlParser.DBREINDEX, 0); }
		public Id_or_stringContext[] id_or_string() {
			return GetRuleContexts<Id_or_stringContext>();
		}
		public Id_or_stringContext id_or_string(int i) {
			return GetRuleContext<Id_or_stringContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Dbcc_dbreindexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_dbreindex; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_dbreindex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_dbreindex(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_dbreindexContext dbcc_dbreindex() {
		Dbcc_dbreindexContext _localctx = new Dbcc_dbreindexContext(_ctx, State);
		EnterRule(_localctx, 856, RULE_dbcc_dbreindex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10555; _localctx.name = Match(DBREINDEX);
			State = 10556; Match(LR_BRACKET);
			State = 10557; _localctx.table = id_or_string();
			State = 10564;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1425,_ctx) ) {
			case 1:
				{
				State = 10558; Match(COMMA);
				State = 10559; _localctx.index_name = id_or_string();
				State = 10562;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1424,_ctx) ) {
				case 1:
					{
					State = 10560; Match(COMMA);
					State = 10561; _localctx.fillfactor = expression(0);
					}
					break;
				}
				}
				break;
			}
			State = 10566; Match(RR_BRACKET);
			State = 10569;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1426,_ctx) ) {
			case 1:
				{
				State = 10567; Match(WITH);
				State = 10568; _localctx.dbcc_option = Match(NO_INFOMSGS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_dll_freeContext : ParserRuleContext {
		public Id_Context dllname;
		public IToken name;
		public IToken dbcc_option;
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode FREE() { return GetToken(TSqlParser.FREE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public Dbcc_dll_freeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_dll_free; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_dll_free(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_dll_free(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_dll_freeContext dbcc_dll_free() {
		Dbcc_dll_freeContext _localctx = new Dbcc_dll_freeContext(_ctx, State);
		EnterRule(_localctx, 858, RULE_dbcc_dll_free);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10571; _localctx.dllname = id_();
			State = 10572; Match(LR_BRACKET);
			State = 10573; _localctx.name = Match(FREE);
			State = 10574; Match(RR_BRACKET);
			State = 10577;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1427,_ctx) ) {
			case 1:
				{
				State = 10575; Match(WITH);
				State = 10576; _localctx.dbcc_option = Match(NO_INFOMSGS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_dropcleanbuffersContext : ParserRuleContext {
		public IToken name;
		public IToken dbcc_option;
		public ITerminalNode DROPCLEANBUFFERS() { return GetToken(TSqlParser.DROPCLEANBUFFERS, 0); }
		public ITerminalNode COMPUTE() { return GetToken(TSqlParser.COMPUTE, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public Dbcc_dropcleanbuffersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_dropcleanbuffers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_dropcleanbuffers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_dropcleanbuffers(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_dropcleanbuffersContext dbcc_dropcleanbuffers() {
		Dbcc_dropcleanbuffersContext _localctx = new Dbcc_dropcleanbuffersContext(_ctx, State);
		EnterRule(_localctx, 860, RULE_dbcc_dropcleanbuffers);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10579; _localctx.name = Match(DROPCLEANBUFFERS);
			State = 10584;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1428,_ctx) ) {
			case 1:
				{
				State = 10580; Match(LR_BRACKET);
				State = 10581; Match(COMPUTE);
				}
				break;

			case 2:
				{
				State = 10582; Match(ALL);
				State = 10583; Match(RR_BRACKET);
				}
				break;
			}
			State = 10588;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1429,_ctx) ) {
			case 1:
				{
				State = 10586; Match(WITH);
				State = 10587; _localctx.dbcc_option = Match(NO_INFOMSGS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_clauseContext : ParserRuleContext {
		public ITerminalNode DBCC() { return GetToken(TSqlParser.DBCC, 0); }
		public Dbcc_checkallocContext dbcc_checkalloc() {
			return GetRuleContext<Dbcc_checkallocContext>(0);
		}
		public Dbcc_checkcatalogContext dbcc_checkcatalog() {
			return GetRuleContext<Dbcc_checkcatalogContext>(0);
		}
		public Dbcc_checkconstraintsContext dbcc_checkconstraints() {
			return GetRuleContext<Dbcc_checkconstraintsContext>(0);
		}
		public Dbcc_checkdbContext dbcc_checkdb() {
			return GetRuleContext<Dbcc_checkdbContext>(0);
		}
		public Dbcc_checkfilegroupContext dbcc_checkfilegroup() {
			return GetRuleContext<Dbcc_checkfilegroupContext>(0);
		}
		public Dbcc_checktableContext dbcc_checktable() {
			return GetRuleContext<Dbcc_checktableContext>(0);
		}
		public Dbcc_cleantableContext dbcc_cleantable() {
			return GetRuleContext<Dbcc_cleantableContext>(0);
		}
		public Dbcc_clonedatabaseContext dbcc_clonedatabase() {
			return GetRuleContext<Dbcc_clonedatabaseContext>(0);
		}
		public Dbcc_dbreindexContext dbcc_dbreindex() {
			return GetRuleContext<Dbcc_dbreindexContext>(0);
		}
		public Dbcc_dll_freeContext dbcc_dll_free() {
			return GetRuleContext<Dbcc_dll_freeContext>(0);
		}
		public Dbcc_dropcleanbuffersContext dbcc_dropcleanbuffers() {
			return GetRuleContext<Dbcc_dropcleanbuffersContext>(0);
		}
		public Dbcc_pdw_showspaceusedContext dbcc_pdw_showspaceused() {
			return GetRuleContext<Dbcc_pdw_showspaceusedContext>(0);
		}
		public Dbcc_proccacheContext dbcc_proccache() {
			return GetRuleContext<Dbcc_proccacheContext>(0);
		}
		public Dbcc_showcontigContext dbcc_showcontig() {
			return GetRuleContext<Dbcc_showcontigContext>(0);
		}
		public Dbcc_shrinklogContext dbcc_shrinklog() {
			return GetRuleContext<Dbcc_shrinklogContext>(0);
		}
		public Dbcc_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_clause(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_clauseContext dbcc_clause() {
		Dbcc_clauseContext _localctx = new Dbcc_clauseContext(_ctx, State);
		EnterRule(_localctx, 862, RULE_dbcc_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10590; Match(DBCC);
			State = 10606;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1430,_ctx) ) {
			case 1:
				{
				State = 10591; dbcc_checkalloc();
				}
				break;

			case 2:
				{
				State = 10592; dbcc_checkcatalog();
				}
				break;

			case 3:
				{
				State = 10593; dbcc_checkconstraints();
				}
				break;

			case 4:
				{
				State = 10594; dbcc_checkdb();
				}
				break;

			case 5:
				{
				State = 10595; dbcc_checkfilegroup();
				}
				break;

			case 6:
				{
				State = 10596; dbcc_checktable();
				}
				break;

			case 7:
				{
				State = 10597; dbcc_cleantable();
				}
				break;

			case 8:
				{
				State = 10598; dbcc_clonedatabase();
				}
				break;

			case 9:
				{
				State = 10599; dbcc_dbreindex();
				}
				break;

			case 10:
				{
				State = 10600; dbcc_dll_free();
				}
				break;

			case 11:
				{
				State = 10601; dbcc_dropcleanbuffers();
				}
				break;

			case 12:
				{
				State = 10602; dbcc_pdw_showspaceused();
				}
				break;

			case 13:
				{
				State = 10603; dbcc_proccache();
				}
				break;

			case 14:
				{
				State = 10604; dbcc_showcontig();
				}
				break;

			case 15:
				{
				State = 10605; dbcc_shrinklog();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_clauseContext : ParserRuleContext {
		public IToken clause;
		public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode CALLER() { return GetToken(TSqlParser.CALLER, 0); }
		public ITerminalNode SELF() { return GetToken(TSqlParser.SELF, 0); }
		public ITerminalNode OWNER() { return GetToken(TSqlParser.OWNER, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Execute_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_clause(this);
		}
	}

	[RuleVersion(0)]
	public Execute_clauseContext execute_clause() {
		Execute_clauseContext _localctx = new Execute_clauseContext(_ctx, State);
		EnterRule(_localctx, 864, RULE_execute_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10608; Match(EXECUTE);
			State = 10609; Match(AS);
			State = 10610;
			_localctx.clause = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==CALLER || _la==OWNER || _la==SELF || _la==STRING) ) {
				_localctx.clause = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_localContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Declare_localContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_local; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_local(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_local(this);
		}
	}

	[RuleVersion(0)]
	public Declare_localContext declare_local() {
		Declare_localContext _localctx = new Declare_localContext(_ctx, State);
		EnterRule(_localctx, 866, RULE_declare_local);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10612; Match(LOCAL_ID);
			State = 10614;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1431,_ctx) ) {
			case 1:
				{
				State = 10613; Match(AS);
				}
				break;
			}
			State = 10616; data_type();
			State = 10619;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1432,_ctx) ) {
			case 1:
				{
				State = 10617; Match(EQUAL);
				State = 10618; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_type_definitionContext : ParserRuleContext {
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return GetRuleContext<Column_def_table_constraintsContext>(0);
		}
		public Table_type_indicesContext[] table_type_indices() {
			return GetRuleContexts<Table_type_indicesContext>();
		}
		public Table_type_indicesContext table_type_indices(int i) {
			return GetRuleContext<Table_type_indicesContext>(i);
		}
		public Table_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_type_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_type_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_type_definition(this);
		}
	}

	[RuleVersion(0)]
	public Table_type_definitionContext table_type_definition() {
		Table_type_definitionContext _localctx = new Table_type_definitionContext(_ctx, State);
		EnterRule(_localctx, 868, RULE_table_type_definition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10621; Match(TABLE);
			State = 10622; Match(LR_BRACKET);
			State = 10623; column_def_table_constraints();
			State = 10630;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1434,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 10625;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1433,_ctx) ) {
					case 1:
						{
						State = 10624; Match(COMMA);
						}
						break;
					}
					State = 10627; table_type_indices();
					}
					} 
				}
				State = 10632;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1434,_ctx);
			}
			State = 10633; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_type_indicesContext : ParserRuleContext {
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode CLUSTERED() { return GetToken(TSqlParser.CLUSTERED, 0); }
		public ITerminalNode NONCLUSTERED() { return GetToken(TSqlParser.NONCLUSTERED, 0); }
		public ITerminalNode CHECK() { return GetToken(TSqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Table_type_indicesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_type_indices; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_type_indices(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_type_indices(this);
		}
	}

	[RuleVersion(0)]
	public Table_type_indicesContext table_type_indices() {
		Table_type_indicesContext _localctx = new Table_type_indicesContext(_ctx, State);
		EnterRule(_localctx, 870, RULE_table_type_indices);
		int _la;
		try {
			State = 10656;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1438,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10645;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1437,_ctx) ) {
				case 1:
					{
					{
					State = 10639;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1435,_ctx) ) {
					case 1:
						{
						State = 10635; Match(PRIMARY);
						State = 10636; Match(KEY);
						}
						break;

					case 2:
						{
						State = 10637; Match(INDEX);
						State = 10638; id_();
						}
						break;
					}
					State = 10642;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1436,_ctx) ) {
					case 1:
						{
						State = 10641;
						_la = _input.La(1);
						if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					}
					break;

				case 2:
					{
					State = 10644; Match(UNIQUE);
					}
					break;
				}
				State = 10647; Match(LR_BRACKET);
				State = 10648; column_name_list_with_order();
				State = 10649; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10651; Match(CHECK);
				State = 10652; Match(LR_BRACKET);
				State = 10653; search_condition(0);
				State = 10654; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_type_definitionContext : ParserRuleContext {
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public Xml_schema_collectionContext xml_schema_collection() {
			return GetRuleContext<Xml_schema_collectionContext>(0);
		}
		public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		public ITerminalNode DOCUMENT() { return GetToken(TSqlParser.DOCUMENT, 0); }
		public Xml_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_type_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_type_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_type_definition(this);
		}
	}

	[RuleVersion(0)]
	public Xml_type_definitionContext xml_type_definition() {
		Xml_type_definitionContext _localctx = new Xml_type_definitionContext(_ctx, State);
		EnterRule(_localctx, 872, RULE_xml_type_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10658; Match(XML);
			State = 10659; Match(LR_BRACKET);
			State = 10661;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1439,_ctx) ) {
			case 1:
				{
				State = 10660;
				_la = _input.La(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 10663; xml_schema_collection();
			State = 10664; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_schema_collectionContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(TSqlParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(TSqlParser.ID, i);
		}
		public Xml_schema_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_schema_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_schema_collection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_schema_collection(this);
		}
	}

	[RuleVersion(0)]
	public Xml_schema_collectionContext xml_schema_collection() {
		Xml_schema_collectionContext _localctx = new Xml_schema_collectionContext(_ctx, State);
		EnterRule(_localctx, 874, RULE_xml_schema_collection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10666; Match(ID);
			State = 10667; Match(DOT);
			State = 10668; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_def_table_constraintsContext : ParserRuleContext {
		public Column_def_table_constraintContext[] column_def_table_constraint() {
			return GetRuleContexts<Column_def_table_constraintContext>();
		}
		public Column_def_table_constraintContext column_def_table_constraint(int i) {
			return GetRuleContext<Column_def_table_constraintContext>(i);
		}
		public Column_def_table_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def_table_constraints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_def_table_constraints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_def_table_constraints(this);
		}
	}

	[RuleVersion(0)]
	public Column_def_table_constraintsContext column_def_table_constraints() {
		Column_def_table_constraintsContext _localctx = new Column_def_table_constraintsContext(_ctx, State);
		EnterRule(_localctx, 876, RULE_column_def_table_constraints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10670; column_def_table_constraint();
			State = 10677;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1441,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 10672;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1440,_ctx) ) {
					case 1:
						{
						State = 10671; Match(COMMA);
						}
						break;
					}
					State = 10674; column_def_table_constraint();
					}
					} 
				}
				State = 10679;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1441,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_def_table_constraintContext : ParserRuleContext {
		public Column_definitionContext column_definition() {
			return GetRuleContext<Column_definitionContext>(0);
		}
		public Materialized_column_definitionContext materialized_column_definition() {
			return GetRuleContext<Materialized_column_definitionContext>(0);
		}
		public Table_constraintContext table_constraint() {
			return GetRuleContext<Table_constraintContext>(0);
		}
		public Column_def_table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def_table_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_def_table_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_def_table_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Column_def_table_constraintContext column_def_table_constraint() {
		Column_def_table_constraintContext _localctx = new Column_def_table_constraintContext(_ctx, State);
		EnterRule(_localctx, 878, RULE_column_def_table_constraint);
		try {
			State = 10683;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1442,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10680; column_definition();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10681; materialized_column_definition();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10682; table_constraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_definitionContext : ParserRuleContext {
		public Id_Context schema;
		public Id_Context constraint;
		public IToken seed;
		public IToken increment;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public Null_or_defaultContext[] null_or_default() {
			return GetRuleContexts<Null_or_defaultContext>();
		}
		public Null_or_defaultContext null_or_default(int i) {
			return GetRuleContext<Null_or_defaultContext>(i);
		}
		public ITerminalNode[] IDENTITY() { return GetTokens(TSqlParser.IDENTITY); }
		public ITerminalNode IDENTITY(int i) {
			return GetToken(TSqlParser.IDENTITY, i);
		}
		public ITerminalNode ROWGUIDCOL() { return GetToken(TSqlParser.ROWGUIDCOL, 0); }
		public Column_constraintContext[] column_constraint() {
			return GetRuleContexts<Column_constraintContext>();
		}
		public Column_constraintContext column_constraint(int i) {
			return GetRuleContext<Column_constraintContext>(i);
		}
		public ITerminalNode PERSISTED() { return GetToken(TSqlParser.PERSISTED, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(TSqlParser.CONSTRAINT, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_definition(this);
		}
	}

	[RuleVersion(0)]
	public Column_definitionContext column_definition() {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, State);
		EnterRule(_localctx, 880, RULE_column_definition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10685; id_();
			State = 10697;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1445,_ctx) ) {
			case 1:
				{
				State = 10689;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1443,_ctx) ) {
				case 1:
					{
					State = 10686; _localctx.schema = id_();
					State = 10687; Match(DOT);
					}
					break;
				}
				State = 10691; data_type();
				}
				break;

			case 2:
				{
				State = 10692; Match(AS);
				State = 10693; expression(0);
				State = 10695;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1444,_ctx) ) {
				case 1:
					{
					State = 10694; Match(PERSISTED);
					}
					break;
				}
				}
				break;
			}
			State = 10701;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1446,_ctx) ) {
			case 1:
				{
				State = 10699; Match(COLLATE);
				State = 10700; id_();
				}
				break;
			}
			State = 10704;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1447,_ctx) ) {
			case 1:
				{
				State = 10703; null_notnull();
				}
				break;
			}
			State = 10727;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1452,_ctx) ) {
			case 1:
				{
				State = 10708;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1448,_ctx) ) {
				case 1:
					{
					State = 10706; Match(CONSTRAINT);
					State = 10707; _localctx.constraint = id_();
					}
					break;
				}
				State = 10710; null_or_default();
				State = 10712;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1449,_ctx) ) {
				case 1:
					{
					State = 10711; null_or_default();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 10714; Match(IDENTITY);
				State = 10720;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1450,_ctx) ) {
				case 1:
					{
					State = 10715; Match(LR_BRACKET);
					State = 10716; _localctx.seed = Match(DECIMAL);
					State = 10717; Match(COMMA);
					State = 10718; _localctx.increment = Match(DECIMAL);
					State = 10719; Match(RR_BRACKET);
					}
					break;
				}
				State = 10725;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1451,_ctx) ) {
				case 1:
					{
					State = 10722; Match(NOT);
					State = 10723; Match(FOR);
					State = 10724; Match(REPLICATION);
					}
					break;
				}
				}
				break;
			}
			State = 10730;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1453,_ctx) ) {
			case 1:
				{
				State = 10729; Match(ROWGUIDCOL);
				}
				break;
			}
			State = 10735;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1454,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 10732; column_constraint();
					}
					} 
				}
				State = 10737;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1454,_ctx);
			}
			State = 10746;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1456,_ctx) ) {
			case 1:
				{
				State = 10738; Match(IDENTITY);
				State = 10744;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1455,_ctx) ) {
				case 1:
					{
					State = 10739; Match(LR_BRACKET);
					State = 10740; _localctx.seed = Match(DECIMAL);
					State = 10741; Match(COMMA);
					State = 10742; _localctx.increment = Match(DECIMAL);
					State = 10743; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_definition_elementContext : ParserRuleContext {
		public Id_Context collation_name;
		public IToken mask_function;
		public Id_Context constraint;
		public ExpressionContext constant_expr;
		public IToken seed;
		public IToken increment;
		public IToken key_name;
		public IToken algo;
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode SPARSE() { return GetToken(TSqlParser.SPARSE, 0); }
		public ITerminalNode MASKED() { return GetToken(TSqlParser.MASKED, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(TSqlParser.CONSTRAINT, 0); }
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode GENERATED() { return GetToken(TSqlParser.GENERATED, 0); }
		public ITerminalNode ALWAYS() { return GetToken(TSqlParser.ALWAYS, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		public ITerminalNode TRANSACTION_ID() { return GetToken(TSqlParser.TRANSACTION_ID, 0); }
		public ITerminalNode SEQUENCE_NUMBER() { return GetToken(TSqlParser.SEQUENCE_NUMBER, 0); }
		public ITerminalNode START() { return GetToken(TSqlParser.START, 0); }
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public ITerminalNode HIDDEN_KEYWORD() { return GetToken(TSqlParser.HIDDEN_KEYWORD, 0); }
		public ITerminalNode ROWGUIDCOL() { return GetToken(TSqlParser.ROWGUIDCOL, 0); }
		public ITerminalNode ENCRYPTED() { return GetToken(TSqlParser.ENCRYPTED, 0); }
		public ITerminalNode COLUMN_ENCRYPTION_KEY() { return GetToken(TSqlParser.COLUMN_ENCRYPTION_KEY, 0); }
		public ITerminalNode ENCRYPTION_TYPE() { return GetToken(TSqlParser.ENCRYPTION_TYPE, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode DETERMINISTIC() { return GetToken(TSqlParser.DETERMINISTIC, 0); }
		public ITerminalNode RANDOMIZED() { return GetToken(TSqlParser.RANDOMIZED, 0); }
		public Column_constraintContext column_constraint() {
			return GetRuleContext<Column_constraintContext>(0);
		}
		public Column_definition_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_definition_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_definition_element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_definition_element(this);
		}
	}

	[RuleVersion(0)]
	public Column_definition_elementContext column_definition_element() {
		Column_definition_elementContext _localctx = new Column_definition_elementContext(_ctx, State);
		EnterRule(_localctx, 882, RULE_column_definition_element);
		int _la;
		try {
			State = 10801;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1460,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10748; Match(FILESTREAM);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10749; Match(COLLATE);
				State = 10750; _localctx.collation_name = id_();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10751; Match(SPARSE);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10752; Match(MASKED);
				State = 10753; Match(WITH);
				State = 10754; Match(LR_BRACKET);
				State = 10755; Match(FUNCTION);
				State = 10756; Match(EQUAL);
				State = 10757; _localctx.mask_function = Match(STRING);
				State = 10758; Match(RR_BRACKET);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10761;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1457,_ctx) ) {
				case 1:
					{
					State = 10759; Match(CONSTRAINT);
					State = 10760; _localctx.constraint = id_();
					}
					break;
				}
				State = 10763; Match(DEFAULT);
				State = 10764; _localctx.constant_expr = expression(0);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10765; Match(IDENTITY);
				State = 10771;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1458,_ctx) ) {
				case 1:
					{
					State = 10766; Match(LR_BRACKET);
					State = 10767; _localctx.seed = Match(DECIMAL);
					State = 10768; Match(COMMA);
					State = 10769; _localctx.increment = Match(DECIMAL);
					State = 10770; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10773; Match(NOT);
				State = 10774; Match(FOR);
				State = 10775; Match(REPLICATION);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10776; Match(GENERATED);
				State = 10777; Match(ALWAYS);
				State = 10778; Match(AS);
				State = 10779;
				_la = _input.La(1);
				if ( !(_la==ROW || _la==SEQUENCE_NUMBER || _la==TRANSACTION_ID) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10780;
				_la = _input.La(1);
				if ( !(_la==END || _la==START) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10782;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1459,_ctx) ) {
				case 1:
					{
					State = 10781; Match(HIDDEN_KEYWORD);
					}
					break;
				}
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 10784; Match(ROWGUIDCOL);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 10785; Match(ENCRYPTED);
				State = 10786; Match(WITH);
				State = 10787; Match(LR_BRACKET);
				State = 10788; Match(COLUMN_ENCRYPTION_KEY);
				State = 10789; Match(EQUAL);
				State = 10790; _localctx.key_name = Match(STRING);
				State = 10791; Match(COMMA);
				State = 10792; Match(ENCRYPTION_TYPE);
				State = 10793; Match(EQUAL);
				State = 10794;
				_la = _input.La(1);
				if ( !(_la==DETERMINISTIC || _la==RANDOMIZED) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 10795; Match(COMMA);
				State = 10796; Match(ALGORITHM);
				State = 10797; Match(EQUAL);
				State = 10798; _localctx.algo = Match(STRING);
				State = 10799; Match(RR_BRACKET);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 10800; column_constraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_modifierContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ROWGUIDCOL() { return GetToken(TSqlParser.ROWGUIDCOL, 0); }
		public ITerminalNode PERSISTED() { return GetToken(TSqlParser.PERSISTED, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode SPARSE() { return GetToken(TSqlParser.SPARSE, 0); }
		public ITerminalNode HIDDEN_KEYWORD() { return GetToken(TSqlParser.HIDDEN_KEYWORD, 0); }
		public ITerminalNode MASKED() { return GetToken(TSqlParser.MASKED, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Column_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_modifier(this);
		}
	}

	[RuleVersion(0)]
	public Column_modifierContext column_modifier() {
		Column_modifierContext _localctx = new Column_modifierContext(_ctx, State);
		EnterRule(_localctx, 884, RULE_column_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10803; id_();
			State = 10804;
			_la = _input.La(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 10826;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1463,_ctx) ) {
			case 1:
				{
				State = 10805; Match(ROWGUIDCOL);
				}
				break;

			case 2:
				{
				State = 10806; Match(PERSISTED);
				}
				break;

			case 3:
				{
				State = 10807; Match(NOT);
				State = 10808; Match(FOR);
				State = 10809; Match(REPLICATION);
				}
				break;

			case 4:
				{
				State = 10810; Match(SPARSE);
				}
				break;

			case 5:
				{
				State = 10811; Match(HIDDEN_KEYWORD);
				}
				break;

			case 6:
				{
				State = 10812; Match(MASKED);
				State = 10824;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1462,_ctx) ) {
				case 1:
					{
					State = 10813; Match(WITH);
					State = 10822;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1461,_ctx) ) {
					case 1:
						{
						State = 10814; Match(FUNCTION);
						State = 10815; Match(EQUAL);
						State = 10816; Match(STRING);
						}
						break;

					case 2:
						{
						State = 10817; Match(LR_BRACKET);
						State = 10818; Match(FUNCTION);
						State = 10819; Match(EQUAL);
						State = 10820; Match(STRING);
						State = 10821; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Materialized_column_definitionContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COMPUTE() { return GetToken(TSqlParser.COMPUTE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode MATERIALIZED() { return GetToken(TSqlParser.MATERIALIZED, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public Materialized_column_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialized_column_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMaterialized_column_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMaterialized_column_definition(this);
		}
	}

	[RuleVersion(0)]
	public Materialized_column_definitionContext materialized_column_definition() {
		Materialized_column_definitionContext _localctx = new Materialized_column_definitionContext(_ctx, State);
		EnterRule(_localctx, 886, RULE_materialized_column_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10828; id_();
			State = 10829;
			_la = _input.La(1);
			if ( !(_la==AS || _la==COMPUTE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 10830; expression(0);
			State = 10834;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1464,_ctx) ) {
			case 1:
				{
				State = 10831; Match(MATERIALIZED);
				}
				break;

			case 2:
				{
				State = 10832; Match(NOT);
				State = 10833; Match(MATERIALIZED);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraintContext : ParserRuleContext {
		public Id_Context constraint;
		public Column_name_listContext pk;
		public ITerminalNode CHECK() { return GetToken(TSqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(TSqlParser.CONSTRAINT, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode FOREIGN() { return GetToken(TSqlParser.FOREIGN, 0); }
		public On_deleteContext on_delete() {
			return GetRuleContext<On_deleteContext>(0);
		}
		public On_updateContext on_update() {
			return GetRuleContext<On_updateContext>(0);
		}
		public Column_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraintContext column_constraint() {
		Column_constraintContext _localctx = new Column_constraintContext(_ctx, State);
		EnterRule(_localctx, 888, RULE_column_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10838;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1465,_ctx) ) {
			case 1:
				{
				State = 10836; Match(CONSTRAINT);
				State = 10837; _localctx.constraint = id_();
				}
				break;
			}
			State = 10877;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1473,_ctx) ) {
			case 1:
				{
				State = 10843;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1466,_ctx) ) {
				case 1:
					{
					State = 10840; Match(PRIMARY);
					State = 10841; Match(KEY);
					}
					break;

				case 2:
					{
					State = 10842; Match(UNIQUE);
					}
					break;
				}
				State = 10846;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1467,_ctx) ) {
				case 1:
					{
					State = 10845; clustered();
					}
					break;
				}
				State = 10849;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1468,_ctx) ) {
				case 1:
					{
					State = 10848; index_options();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 10851; Match(CHECK);
				State = 10855;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1469,_ctx) ) {
				case 1:
					{
					State = 10852; Match(NOT);
					State = 10853; Match(FOR);
					State = 10854; Match(REPLICATION);
					}
					break;
				}
				State = 10857; Match(LR_BRACKET);
				State = 10858; search_condition(0);
				State = 10859; Match(RR_BRACKET);
				}
				break;

			case 3:
				{
				State = 10863;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1470,_ctx) ) {
				case 1:
					{
					State = 10861; Match(FOREIGN);
					State = 10862; Match(KEY);
					}
					break;
				}
				State = 10865; Match(REFERENCES);
				State = 10866; table_name();
				State = 10867; Match(LR_BRACKET);
				State = 10868; _localctx.pk = column_name_list();
				State = 10869; Match(RR_BRACKET);
				State = 10871;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1471,_ctx) ) {
				case 1:
					{
					State = 10870; on_delete();
					}
					break;
				}
				State = 10874;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1472,_ctx) ) {
				case 1:
					{
					State = 10873; on_update();
					}
					break;
				}
				}
				break;

			case 4:
				{
				State = 10876; null_notnull();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_indexContext : ParserRuleContext {
		public Id_Context index_name;
		public Id_Context filestream_filegroup_or_partition_schema_name;
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		public Create_table_index_optionsContext create_table_index_options() {
			return GetRuleContext<Create_table_index_optionsContext>(0);
		}
		public On_partition_or_filegroupContext on_partition_or_filegroup() {
			return GetRuleContext<On_partition_or_filegroupContext>(0);
		}
		public ITerminalNode FILESTREAM_ON() { return GetToken(TSqlParser.FILESTREAM_ON, 0); }
		public ITerminalNode NULL_DOUBLE_QUOTE() { return GetToken(TSqlParser.NULL_DOUBLE_QUOTE, 0); }
		public Column_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_index(this);
		}
	}

	[RuleVersion(0)]
	public Column_indexContext column_index() {
		Column_indexContext _localctx = new Column_indexContext(_ctx, State);
		EnterRule(_localctx, 890, RULE_column_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10879; Match(INDEX);
			State = 10880; _localctx.index_name = id_();
			State = 10882;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1474,_ctx) ) {
			case 1:
				{
				State = 10881; clustered();
				}
				break;
			}
			State = 10885;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1475,_ctx) ) {
			case 1:
				{
				State = 10884; create_table_index_options();
				}
				break;
			}
			State = 10888;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1476,_ctx) ) {
			case 1:
				{
				State = 10887; on_partition_or_filegroup();
				}
				break;
			}
			State = 10895;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1478,_ctx) ) {
			case 1:
				{
				State = 10890; Match(FILESTREAM_ON);
				State = 10893;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1477,_ctx) ) {
				case 1:
					{
					State = 10891; _localctx.filestream_filegroup_or_partition_schema_name = id_();
					}
					break;

				case 2:
					{
					State = 10892; Match(NULL_DOUBLE_QUOTE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_partition_or_filegroupContext : ParserRuleContext {
		public Id_Context partition_scheme_name;
		public Id_Context partition_column_name;
		public Id_Context filegroup;
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode DEFAULT_DOUBLE_QUOTE() { return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public On_partition_or_filegroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_partition_or_filegroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOn_partition_or_filegroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOn_partition_or_filegroup(this);
		}
	}

	[RuleVersion(0)]
	public On_partition_or_filegroupContext on_partition_or_filegroup() {
		On_partition_or_filegroupContext _localctx = new On_partition_or_filegroupContext(_ctx, State);
		EnterRule(_localctx, 892, RULE_on_partition_or_filegroup);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10897; Match(ON);
			State = 10905;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1479,_ctx) ) {
			case 1:
				{
				{
				State = 10898; _localctx.partition_scheme_name = id_();
				State = 10899; Match(LR_BRACKET);
				State = 10900; _localctx.partition_column_name = id_();
				State = 10901; Match(RR_BRACKET);
				}
				}
				break;

			case 2:
				{
				State = 10903; _localctx.filegroup = id_();
				}
				break;

			case 3:
				{
				State = 10904; Match(DEFAULT_DOUBLE_QUOTE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_constraintContext : ParserRuleContext {
		public Id_Context constraint;
		public Default_value_columnsContext default_value_column;
		public Id_Context forColumn;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		public ITerminalNode CHECK() { return GetToken(TSqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode FOREIGN() { return GetToken(TSqlParser.FOREIGN, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(TSqlParser.CONSTRAINT, 0); }
		public Default_value_columnsContext default_value_columns() {
			return GetRuleContext<Default_value_columnsContext>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Column_name_listContext[] column_name_list() {
			return GetRuleContexts<Column_name_listContext>();
		}
		public Column_name_listContext column_name_list(int i) {
			return GetRuleContext<Column_name_listContext>(i);
		}
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public On_deleteContext on_delete() {
			return GetRuleContext<On_deleteContext>(0);
		}
		public On_updateContext on_update() {
			return GetRuleContext<On_updateContext>(0);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Table_constraintContext table_constraint() {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, State);
		EnterRule(_localctx, 894, RULE_table_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10909;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1480,_ctx) ) {
			case 1:
				{
				State = 10907; Match(CONSTRAINT);
				State = 10908; _localctx.constraint = id_();
				}
				break;
			}
			State = 10963;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1489,_ctx) ) {
			case 1:
				{
				State = 10914;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1481,_ctx) ) {
				case 1:
					{
					State = 10911; Match(PRIMARY);
					State = 10912; Match(KEY);
					}
					break;

				case 2:
					{
					State = 10913; Match(UNIQUE);
					}
					break;
				}
				State = 10917;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1482,_ctx) ) {
				case 1:
					{
					State = 10916; clustered();
					}
					break;
				}
				State = 10919; Match(LR_BRACKET);
				State = 10920; column_name_list_with_order();
				State = 10921; Match(RR_BRACKET);
				State = 10923;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1483,_ctx) ) {
				case 1:
					{
					State = 10922; index_options();
					}
					break;
				}
				State = 10927;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1484,_ctx) ) {
				case 1:
					{
					State = 10925; Match(ON);
					State = 10926; id_();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 10929; Match(CHECK);
				State = 10933;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1485,_ctx) ) {
				case 1:
					{
					State = 10930; Match(NOT);
					State = 10931; Match(FOR);
					State = 10932; Match(REPLICATION);
					}
					break;
				}
				State = 10935; Match(LR_BRACKET);
				State = 10936; search_condition(0);
				State = 10937; Match(RR_BRACKET);
				}
				break;

			case 3:
				{
				State = 10939; Match(DEFAULT);
				State = 10940; _localctx.default_value_column = default_value_columns();
				State = 10941; Match(FOR);
				State = 10942; _localctx.forColumn = id_();
				}
				break;

			case 4:
				{
				State = 10944; Match(FOREIGN);
				State = 10945; Match(KEY);
				State = 10946; Match(LR_BRACKET);
				State = 10947; _localctx.fk = column_name_list();
				State = 10948; Match(RR_BRACKET);
				State = 10949; Match(REFERENCES);
				State = 10950; table_name();
				State = 10955;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1486,_ctx) ) {
				case 1:
					{
					State = 10951; Match(LR_BRACKET);
					State = 10952; _localctx.pk = column_name_list();
					State = 10953; Match(RR_BRACKET);
					}
					break;
				}
				State = 10958;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1487,_ctx) ) {
				case 1:
					{
					State = 10957; on_delete();
					}
					break;
				}
				State = 10961;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1488,_ctx) ) {
				case 1:
					{
					State = 10960; on_update();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_value_columnsContext : ParserRuleContext {
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode PLUS() { return GetToken(TSqlParser.PLUS, 0); }
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public Default_value_columnsContext default_value_columns() {
			return GetRuleContext<Default_value_columnsContext>(0);
		}
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Default_value_columnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_value_columns; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDefault_value_columns(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDefault_value_columns(this);
		}
	}

	[RuleVersion(0)]
	public Default_value_columnsContext default_value_columns() {
		Default_value_columnsContext _localctx = new Default_value_columnsContext(_ctx, State);
		EnterRule(_localctx, 896, RULE_default_value_columns);
		try {
			int _alt;
			State = 11013;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1495,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10965; Match(NULL_);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10966; Match(STRING);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10967; Match(PLUS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10968; function_call();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10970;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1490,_ctx) ) {
				case 1:
					{
					State = 10969; Match(MINUS);
					}
					break;
				}
				State = 10973;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 10972; Match(DECIMAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 10975;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1491,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10977; Match(LR_BRACKET);
				State = 10978; default_value_columns();
				State = 10979; Match(RR_BRACKET);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10981; Match(LR_BRACKET);
				State = 10982; Match(LR_BRACKET);
				State = 10983; Match(LR_BRACKET);
				State = 10985;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 10984; Match(DECIMAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 10987;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1492,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 10989; Match(RR_BRACKET);
				State = 10990; Match(DIVIDE);
				State = 10991; Match(LR_BRACKET);
				State = 10993;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 10992; Match(DECIMAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 10995;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1493,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 10997; Match(RR_BRACKET);
				State = 10998; Match(RR_BRACKET);
				State = 10999; Match(DIVIDE);
				State = 11000; Match(LR_BRACKET);
				State = 11002;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 11001; Match(DECIMAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 11004;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1494,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 11006; Match(RR_BRACKET);
				State = 11007; Match(RR_BRACKET);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 11008; Match(NEXT);
				State = 11009; Match(VALUE);
				State = 11010; Match(FOR);
				State = 11011; table_name();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 11012; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Connection_nodeContext : ParserRuleContext {
		public Id_Context from_node_table;
		public Id_Context to_node_table;
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Connection_nodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connection_node; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterConnection_node(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitConnection_node(this);
		}
	}

	[RuleVersion(0)]
	public Connection_nodeContext connection_node() {
		Connection_nodeContext _localctx = new Connection_nodeContext(_ctx, State);
		EnterRule(_localctx, 898, RULE_connection_node);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11015; _localctx.from_node_table = id_();
			State = 11016; Match(TO);
			State = 11017; _localctx.to_node_table = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_key_optionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FILLFACTOR() { return GetToken(TSqlParser.FILLFACTOR, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Alter_table_index_optionsContext alter_table_index_options() {
			return GetRuleContext<Alter_table_index_optionsContext>(0);
		}
		public On_partition_or_filegroupContext on_partition_or_filegroup() {
			return GetRuleContext<On_partition_or_filegroupContext>(0);
		}
		public Primary_key_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_key_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrimary_key_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrimary_key_options(this);
		}
	}

	[RuleVersion(0)]
	public Primary_key_optionsContext primary_key_options() {
		Primary_key_optionsContext _localctx = new Primary_key_optionsContext(_ctx, State);
		EnterRule(_localctx, 900, RULE_primary_key_options);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11023;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1496,_ctx) ) {
			case 1:
				{
				State = 11019; Match(WITH);
				State = 11020; Match(FILLFACTOR);
				State = 11021; Match(EQUAL);
				State = 11022; Match(DECIMAL);
				}
				break;
			}
			State = 11026;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1497,_ctx) ) {
			case 1:
				{
				State = 11025; alter_table_index_options();
				}
				break;
			}
			State = 11029;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1498,_ctx) ) {
			case 1:
				{
				State = 11028; on_partition_or_filegroup();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_key_optionsContext : ParserRuleContext {
		public Column_name_listContext pk;
		public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public On_deleteContext[] on_delete() {
			return GetRuleContexts<On_deleteContext>();
		}
		public On_deleteContext on_delete(int i) {
			return GetRuleContext<On_deleteContext>(i);
		}
		public On_updateContext[] on_update() {
			return GetRuleContexts<On_updateContext>();
		}
		public On_updateContext on_update(int i) {
			return GetRuleContext<On_updateContext>(i);
		}
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public Foreign_key_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_key_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterForeign_key_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitForeign_key_options(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_key_optionsContext foreign_key_options() {
		Foreign_key_optionsContext _localctx = new Foreign_key_optionsContext(_ctx, State);
		EnterRule(_localctx, 902, RULE_foreign_key_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11031; Match(REFERENCES);
			State = 11032; table_name();
			State = 11033; Match(LR_BRACKET);
			State = 11034; _localctx.pk = column_name_list();
			State = 11035; Match(RR_BRACKET);
			State = 11040;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1500,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 11038;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1499,_ctx) ) {
					case 1:
						{
						State = 11036; on_delete();
						}
						break;

					case 2:
						{
						State = 11037; on_update();
						}
						break;
					}
					} 
				}
				State = 11042;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1500,_ctx);
			}
			State = 11046;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1501,_ctx) ) {
			case 1:
				{
				State = 11043; Match(NOT);
				State = 11044; Match(FOR);
				State = 11045; Match(REPLICATION);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Check_constraintContext : ParserRuleContext {
		public ITerminalNode CHECK() { return GetToken(TSqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public Check_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_check_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCheck_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCheck_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Check_constraintContext check_constraint() {
		Check_constraintContext _localctx = new Check_constraintContext(_ctx, State);
		EnterRule(_localctx, 904, RULE_check_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11048; Match(CHECK);
			State = 11052;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1502,_ctx) ) {
			case 1:
				{
				State = 11049; Match(NOT);
				State = 11050; Match(FOR);
				State = 11051; Match(REPLICATION);
				}
				break;
			}
			State = 11054; Match(LR_BRACKET);
			State = 11055; search_condition(0);
			State = 11056; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_deleteContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode ACTION() { return GetToken(TSqlParser.ACTION, 0); }
		public ITerminalNode CASCADE() { return GetToken(TSqlParser.CASCADE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public On_deleteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_delete; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOn_delete(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOn_delete(this);
		}
	}

	[RuleVersion(0)]
	public On_deleteContext on_delete() {
		On_deleteContext _localctx = new On_deleteContext(_ctx, State);
		EnterRule(_localctx, 906, RULE_on_delete);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11058; Match(ON);
			State = 11059; Match(DELETE);
			State = 11067;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1503,_ctx) ) {
			case 1:
				{
				State = 11060; Match(NO);
				State = 11061; Match(ACTION);
				}
				break;

			case 2:
				{
				State = 11062; Match(CASCADE);
				}
				break;

			case 3:
				{
				State = 11063; Match(SET);
				State = 11064; Match(NULL_);
				}
				break;

			case 4:
				{
				State = 11065; Match(SET);
				State = 11066; Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_updateContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode ACTION() { return GetToken(TSqlParser.ACTION, 0); }
		public ITerminalNode CASCADE() { return GetToken(TSqlParser.CASCADE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public On_updateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_update; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOn_update(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOn_update(this);
		}
	}

	[RuleVersion(0)]
	public On_updateContext on_update() {
		On_updateContext _localctx = new On_updateContext(_ctx, State);
		EnterRule(_localctx, 908, RULE_on_update);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11069; Match(ON);
			State = 11070; Match(UPDATE);
			State = 11078;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1504,_ctx) ) {
			case 1:
				{
				State = 11071; Match(NO);
				State = 11072; Match(ACTION);
				}
				break;

			case 2:
				{
				State = 11073; Match(CASCADE);
				}
				break;

			case 3:
				{
				State = 11074; Match(SET);
				State = 11075; Match(NULL_);
				}
				break;

			case 4:
				{
				State = 11076; Match(SET);
				State = 11077; Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_index_optionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Alter_table_index_optionContext[] alter_table_index_option() {
			return GetRuleContexts<Alter_table_index_optionContext>();
		}
		public Alter_table_index_optionContext alter_table_index_option(int i) {
			return GetRuleContext<Alter_table_index_optionContext>(i);
		}
		public Alter_table_index_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_index_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_index_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_index_options(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_index_optionsContext alter_table_index_options() {
		Alter_table_index_optionsContext _localctx = new Alter_table_index_optionsContext(_ctx, State);
		EnterRule(_localctx, 910, RULE_alter_table_index_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11080; Match(WITH);
			State = 11081; Match(LR_BRACKET);
			State = 11082; alter_table_index_option();
			State = 11087;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1505,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11083; Match(COMMA);
					State = 11084; alter_table_index_option();
					}
					} 
				}
				State = 11089;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1505,_ctx);
			}
			State = 11090; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_optionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Index_optionContext[] index_option() {
			return GetRuleContexts<Index_optionContext>();
		}
		public Index_optionContext index_option(int i) {
			return GetRuleContext<Index_optionContext>(i);
		}
		public Index_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIndex_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIndex_options(this);
		}
	}

	[RuleVersion(0)]
	public Index_optionsContext index_options() {
		Index_optionsContext _localctx = new Index_optionsContext(_ctx, State);
		EnterRule(_localctx, 912, RULE_index_options);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11092; Match(WITH);
			State = 11093; Match(LR_BRACKET);
			State = 11094; index_option();
			State = 11099;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1506,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11095; Match(COMMA);
					State = 11096; index_option();
					}
					} 
				}
				State = 11101;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1506,_ctx);
			}
			State = 11102; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_optionContext : ParserRuleContext {
		public Simple_idContext[] simple_id() {
			return GetRuleContexts<Simple_idContext>();
		}
		public Simple_idContext simple_id(int i) {
			return GetRuleContext<Simple_idContext>(i);
		}
		public KeywordContext[] keyword() {
			return GetRuleContexts<KeywordContext>();
		}
		public KeywordContext keyword(int i) {
			return GetRuleContext<KeywordContext>(i);
		}
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Index_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIndex_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIndex_option(this);
		}
	}

	[RuleVersion(0)]
	public Index_optionContext index_option() {
		Index_optionContext _localctx = new Index_optionContext(_ctx, State);
		EnterRule(_localctx, 914, RULE_index_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11106;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1507,_ctx) ) {
			case 1:
				{
				State = 11104; simple_id();
				}
				break;

			case 2:
				{
				State = 11105; keyword();
				}
				break;
			}
			State = 11108; Match(EQUAL);
			State = 11113;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1508,_ctx) ) {
			case 1:
				{
				State = 11109; simple_id();
				}
				break;

			case 2:
				{
				State = 11110; keyword();
				}
				break;

			case 3:
				{
				State = 11111; on_off();
				}
				break;

			case 4:
				{
				State = 11112; Match(DECIMAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_index_optionContext : ParserRuleContext {
		public IToken max_degree_of_parallelism;
		public IToken times;
		public ITerminalNode PAD_INDEX() { return GetToken(TSqlParser.PAD_INDEX, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode FILLFACTOR() { return GetToken(TSqlParser.FILLFACTOR, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode IGNORE_DUP_KEY() { return GetToken(TSqlParser.IGNORE_DUP_KEY, 0); }
		public ITerminalNode STATISTICS_NORECOMPUTE() { return GetToken(TSqlParser.STATISTICS_NORECOMPUTE, 0); }
		public ITerminalNode ALLOW_ROW_LOCKS() { return GetToken(TSqlParser.ALLOW_ROW_LOCKS, 0); }
		public ITerminalNode ALLOW_PAGE_LOCKS() { return GetToken(TSqlParser.ALLOW_PAGE_LOCKS, 0); }
		public ITerminalNode OPTIMIZE_FOR_SEQUENTIAL_KEY() { return GetToken(TSqlParser.OPTIMIZE_FOR_SEQUENTIAL_KEY, 0); }
		public ITerminalNode SORT_IN_TEMPDB() { return GetToken(TSqlParser.SORT_IN_TEMPDB, 0); }
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode DATA_COMPRESSION() { return GetToken(TSqlParser.DATA_COMPRESSION, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		public ITerminalNode PAGE() { return GetToken(TSqlParser.PAGE, 0); }
		public ITerminalNode COLUMNSTORE() { return GetToken(TSqlParser.COLUMNSTORE, 0); }
		public ITerminalNode COLUMNSTORE_ARCHIVE() { return GetToken(TSqlParser.COLUMNSTORE_ARCHIVE, 0); }
		public On_partitionsContext on_partitions() {
			return GetRuleContext<On_partitionsContext>(0);
		}
		public ITerminalNode XML_COMPRESSION() { return GetToken(TSqlParser.XML_COMPRESSION, 0); }
		public ITerminalNode DISTRIBUTION() { return GetToken(TSqlParser.DISTRIBUTION, 0); }
		public ITerminalNode HASH() { return GetToken(TSqlParser.HASH, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode CLUSTERED() { return GetToken(TSqlParser.CLUSTERED, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public ITerminalNode[] ASC() { return GetTokens(TSqlParser.ASC); }
		public ITerminalNode ASC(int i) {
			return GetToken(TSqlParser.ASC, i);
		}
		public ITerminalNode[] DESC() { return GetTokens(TSqlParser.DESC); }
		public ITerminalNode DESC(int i) {
			return GetToken(TSqlParser.DESC, i);
		}
		public ITerminalNode ONLINE() { return GetToken(TSqlParser.ONLINE, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Low_priority_lock_waitContext low_priority_lock_wait() {
			return GetRuleContext<Low_priority_lock_waitContext>(0);
		}
		public ITerminalNode RESUMABLE() { return GetToken(TSqlParser.RESUMABLE, 0); }
		public ITerminalNode MAX_DURATION() { return GetToken(TSqlParser.MAX_DURATION, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public Alter_table_index_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_index_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_index_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_index_option(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_index_optionContext alter_table_index_option() {
		Alter_table_index_optionContext _localctx = new Alter_table_index_optionContext(_ctx, State);
		EnterRule(_localctx, 916, RULE_alter_table_index_option);
		int _la;
		try {
			int _alt;
			State = 11201;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1517,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11115; Match(PAD_INDEX);
				State = 11116; Match(EQUAL);
				State = 11117; on_off();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11118; Match(FILLFACTOR);
				State = 11119; Match(EQUAL);
				State = 11120; Match(DECIMAL);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11121; Match(IGNORE_DUP_KEY);
				State = 11122; Match(EQUAL);
				State = 11123; on_off();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11124; Match(STATISTICS_NORECOMPUTE);
				State = 11125; Match(EQUAL);
				State = 11126; on_off();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11127; Match(ALLOW_ROW_LOCKS);
				State = 11128; Match(EQUAL);
				State = 11129; on_off();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 11130; Match(ALLOW_PAGE_LOCKS);
				State = 11131; Match(EQUAL);
				State = 11132; on_off();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 11133; Match(OPTIMIZE_FOR_SEQUENTIAL_KEY);
				State = 11134; Match(EQUAL);
				State = 11135; on_off();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 11136; Match(SORT_IN_TEMPDB);
				State = 11137; Match(EQUAL);
				State = 11138; on_off();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 11139; Match(MAXDOP);
				State = 11140; Match(EQUAL);
				State = 11141; _localctx.max_degree_of_parallelism = Match(DECIMAL);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 11142; Match(DATA_COMPRESSION);
				State = 11143; Match(EQUAL);
				State = 11144;
				_la = _input.La(1);
				if ( !(_la==COLUMNSTORE || _la==COLUMNSTORE_ARCHIVE || _la==NONE || _la==PAGE || _la==ROW) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11146;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1509,_ctx) ) {
				case 1:
					{
					State = 11145; on_partitions();
					}
					break;
				}
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 11148; Match(XML_COMPRESSION);
				State = 11149; Match(EQUAL);
				State = 11150; on_off();
				State = 11152;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1510,_ctx) ) {
				case 1:
					{
					State = 11151; on_partitions();
					}
					break;
				}
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 11154; Match(DISTRIBUTION);
				State = 11155; Match(EQUAL);
				State = 11156; Match(HASH);
				State = 11157; Match(LR_BRACKET);
				State = 11158; id_();
				State = 11159; Match(RR_BRACKET);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 11161; Match(CLUSTERED);
				State = 11162; Match(INDEX);
				State = 11163; Match(LR_BRACKET);
				State = 11164; id_();
				State = 11166;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1511,_ctx) ) {
				case 1:
					{
					State = 11165;
					_la = _input.La(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 11175;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1513,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 11168; Match(COMMA);
						State = 11169; id_();
						State = 11171;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1512,_ctx) ) {
						case 1:
							{
							State = 11170;
							_la = _input.La(1);
							if ( !(_la==ASC || _la==DESC) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;
						}
						}
						} 
					}
					State = 11177;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1513,_ctx);
				}
				State = 11178; Match(RR_BRACKET);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 11180; Match(ONLINE);
				State = 11181; Match(EQUAL);
				State = 11190;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1515,_ctx) ) {
				case 1:
					{
					State = 11182; Match(ON);
					State = 11187;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1514,_ctx) ) {
					case 1:
						{
						State = 11183; Match(LR_BRACKET);
						State = 11184; low_priority_lock_wait();
						State = 11185; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 11189; Match(OFF);
					}
					break;
				}
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 11192; Match(RESUMABLE);
				State = 11193; Match(EQUAL);
				State = 11194; on_off();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 11195; Match(MAX_DURATION);
				State = 11196; Match(EQUAL);
				State = 11197; _localctx.times = Match(DECIMAL);
				State = 11199;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1516,_ctx) ) {
				case 1:
					{
					State = 11198; Match(MINUTES);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_cursorContext : ParserRuleContext {
		public ITerminalNode DECLARE() { return GetToken(TSqlParser.DECLARE, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode CURSOR() { return GetToken(TSqlParser.CURSOR, 0); }
		public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return GetRuleContext<Declare_set_cursor_commonContext>(0);
		}
		public ITerminalNode[] FOR() { return GetTokens(TSqlParser.FOR); }
		public ITerminalNode FOR(int i) {
			return GetToken(TSqlParser.FOR, i);
		}
		public ITerminalNode READ() { return GetToken(TSqlParser.READ, 0); }
		public ITerminalNode ONLY() { return GetToken(TSqlParser.ONLY, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Select_statement_standaloneContext select_statement_standalone() {
			return GetRuleContext<Select_statement_standaloneContext>(0);
		}
		public ITerminalNode SCROLL() { return GetToken(TSqlParser.SCROLL, 0); }
		public ITerminalNode SEMI_SENSITIVE() { return GetToken(TSqlParser.SEMI_SENSITIVE, 0); }
		public ITerminalNode INSENSITIVE() { return GetToken(TSqlParser.INSENSITIVE, 0); }
		public Declare_cursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_cursor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_cursor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_cursor(this);
		}
	}

	[RuleVersion(0)]
	public Declare_cursorContext declare_cursor() {
		Declare_cursorContext _localctx = new Declare_cursorContext(_ctx, State);
		EnterRule(_localctx, 918, RULE_declare_cursor);
		int _la;
		try {
			State = 11243;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1527,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11203; Match(DECLARE);
				State = 11204; cursor_name();
				{
				State = 11205; Match(CURSOR);
				State = 11219;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1521,_ctx) ) {
				case 1:
					{
					State = 11206; declare_set_cursor_common();
					State = 11217;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1520,_ctx) ) {
					case 1:
						{
						State = 11207; Match(FOR);
						State = 11215;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1519,_ctx) ) {
						case 1:
							{
							{
							State = 11208; Match(UPDATE);
							State = 11211;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,1518,_ctx) ) {
							case 1:
								{
								State = 11209; Match(OF);
								State = 11210; column_name_list();
								}
								break;
							}
							}
							}
							break;

						case 2:
							{
							State = 11213; Match(READ);
							State = 11214; Match(ONLY);
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 11222;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1522,_ctx) ) {
				case 1:
					{
					State = 11221;
					_la = _input.La(1);
					if ( !(_la==INSENSITIVE || _la==SEMI_SENSITIVE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 11225;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1523,_ctx) ) {
				case 1:
					{
					State = 11224; Match(SCROLL);
					}
					break;
				}
				State = 11227; Match(CURSOR);
				State = 11228; Match(FOR);
				State = 11229; select_statement_standalone();
				State = 11238;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1525,_ctx) ) {
				case 1:
					{
					State = 11230; Match(FOR);
					State = 11236;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1524,_ctx) ) {
					case 1:
						{
						State = 11231; Match(READ);
						State = 11232; Match(ONLY);
						}
						break;

					case 2:
						{
						State = 11233; Match(UPDATE);
						}
						break;

					case 3:
						{
						{
						State = 11234; Match(OF);
						State = 11235; column_name_list();
						}
						}
						break;
					}
					}
					break;
				}
				}
				State = 11241;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1526,_ctx) ) {
				case 1:
					{
					State = 11240; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_set_cursor_commonContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Select_statement_standaloneContext select_statement_standalone() {
			return GetRuleContext<Select_statement_standaloneContext>(0);
		}
		public Declare_set_cursor_common_partialContext[] declare_set_cursor_common_partial() {
			return GetRuleContexts<Declare_set_cursor_common_partialContext>();
		}
		public Declare_set_cursor_common_partialContext declare_set_cursor_common_partial(int i) {
			return GetRuleContext<Declare_set_cursor_common_partialContext>(i);
		}
		public Declare_set_cursor_commonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_set_cursor_common; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_set_cursor_common(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_set_cursor_common(this);
		}
	}

	[RuleVersion(0)]
	public Declare_set_cursor_commonContext declare_set_cursor_common() {
		Declare_set_cursor_commonContext _localctx = new Declare_set_cursor_commonContext(_ctx, State);
		EnterRule(_localctx, 920, RULE_declare_set_cursor_common);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11248;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1528,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11245; declare_set_cursor_common_partial();
					}
					} 
				}
				State = 11250;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1528,_ctx);
			}
			State = 11251; Match(FOR);
			State = 11252; select_statement_standalone();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_set_cursor_common_partialContext : ParserRuleContext {
		public ITerminalNode LOCAL() { return GetToken(TSqlParser.LOCAL, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public ITerminalNode FORWARD_ONLY() { return GetToken(TSqlParser.FORWARD_ONLY, 0); }
		public ITerminalNode SCROLL() { return GetToken(TSqlParser.SCROLL, 0); }
		public ITerminalNode STATIC() { return GetToken(TSqlParser.STATIC, 0); }
		public ITerminalNode KEYSET() { return GetToken(TSqlParser.KEYSET, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(TSqlParser.DYNAMIC, 0); }
		public ITerminalNode FAST_FORWARD() { return GetToken(TSqlParser.FAST_FORWARD, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode SCROLL_LOCKS() { return GetToken(TSqlParser.SCROLL_LOCKS, 0); }
		public ITerminalNode OPTIMISTIC() { return GetToken(TSqlParser.OPTIMISTIC, 0); }
		public ITerminalNode TYPE_WARNING() { return GetToken(TSqlParser.TYPE_WARNING, 0); }
		public Declare_set_cursor_common_partialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_set_cursor_common_partial; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_set_cursor_common_partial(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_set_cursor_common_partial(this);
		}
	}

	[RuleVersion(0)]
	public Declare_set_cursor_common_partialContext declare_set_cursor_common_partial() {
		Declare_set_cursor_common_partialContext _localctx = new Declare_set_cursor_common_partialContext(_ctx, State);
		EnterRule(_localctx, 922, RULE_declare_set_cursor_common_partial);
		int _la;
		try {
			State = 11259;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1529,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11254;
				_la = _input.La(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11255;
				_la = _input.La(1);
				if ( !(_la==FORWARD_ONLY || _la==SCROLL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11256;
				_la = _input.La(1);
				if ( !(_la==DYNAMIC || _la==FAST_FORWARD || _la==KEYSET || _la==STATIC) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11257;
				_la = _input.La(1);
				if ( !(_la==OPTIMISTIC || _la==READ_ONLY || _la==SCROLL_LOCKS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11258; Match(TYPE_WARNING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fetch_cursorContext : ParserRuleContext {
		public ITerminalNode FETCH() { return GetToken(TSqlParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public ITerminalNode PRIOR() { return GetToken(TSqlParser.PRIOR, 0); }
		public ITerminalNode FIRST() { return GetToken(TSqlParser.FIRST, 0); }
		public ITerminalNode LAST() { return GetToken(TSqlParser.LAST, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ABSOLUTE() { return GetToken(TSqlParser.ABSOLUTE, 0); }
		public ITerminalNode RELATIVE() { return GetToken(TSqlParser.RELATIVE, 0); }
		public Fetch_cursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetch_cursor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFetch_cursor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFetch_cursor(this);
		}
	}

	[RuleVersion(0)]
	public Fetch_cursorContext fetch_cursor() {
		Fetch_cursorContext _localctx = new Fetch_cursorContext(_ctx, State);
		EnterRule(_localctx, 924, RULE_fetch_cursor);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11261; Match(FETCH);
			State = 11271;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1531,_ctx) ) {
			case 1:
				{
				State = 11268;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1530,_ctx) ) {
				case 1:
					{
					State = 11262; Match(NEXT);
					}
					break;

				case 2:
					{
					State = 11263; Match(PRIOR);
					}
					break;

				case 3:
					{
					State = 11264; Match(FIRST);
					}
					break;

				case 4:
					{
					State = 11265; Match(LAST);
					}
					break;

				case 5:
					{
					State = 11266;
					_la = _input.La(1);
					if ( !(_la==ABSOLUTE || _la==RELATIVE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 11267; expression(0);
					}
					break;
				}
				State = 11270; Match(FROM);
				}
				break;
			}
			State = 11274;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1532,_ctx) ) {
			case 1:
				{
				State = 11273; Match(GLOBAL);
				}
				break;
			}
			State = 11276; cursor_name();
			State = 11286;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1534,_ctx) ) {
			case 1:
				{
				State = 11277; Match(INTO);
				State = 11278; Match(LOCAL_ID);
				State = 11283;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1533,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 11279; Match(COMMA);
						State = 11280; Match(LOCAL_ID);
						}
						} 
					}
					State = 11285;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1533,_ctx);
				}
				}
				break;
			}
			State = 11289;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1535,_ctx) ) {
			case 1:
				{
				State = 11288; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_specialContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Constant_LOCAL_IDContext constant_LOCAL_ID() {
			return GetRuleContext<Constant_LOCAL_IDContext>(0);
		}
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public ITerminalNode IO() { return GetToken(TSqlParser.IO, 0); }
		public ITerminalNode TIME() { return GetToken(TSqlParser.TIME, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode PROFILE() { return GetToken(TSqlParser.PROFILE, 0); }
		public ITerminalNode ROWCOUNT() { return GetToken(TSqlParser.ROWCOUNT, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode TEXTSIZE() { return GetToken(TSqlParser.TEXTSIZE, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(TSqlParser.TRANSACTION, 0); }
		public ITerminalNode ISOLATION() { return GetToken(TSqlParser.ISOLATION, 0); }
		public ITerminalNode LEVEL() { return GetToken(TSqlParser.LEVEL, 0); }
		public ITerminalNode READ() { return GetToken(TSqlParser.READ, 0); }
		public ITerminalNode UNCOMMITTED() { return GetToken(TSqlParser.UNCOMMITTED, 0); }
		public ITerminalNode COMMITTED() { return GetToken(TSqlParser.COMMITTED, 0); }
		public ITerminalNode REPEATABLE() { return GetToken(TSqlParser.REPEATABLE, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(TSqlParser.SNAPSHOT, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(TSqlParser.SERIALIZABLE, 0); }
		public ITerminalNode IDENTITY_INSERT() { return GetToken(TSqlParser.IDENTITY_INSERT, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Special_listContext[] special_list() {
			return GetRuleContexts<Special_listContext>();
		}
		public Special_listContext special_list(int i) {
			return GetRuleContext<Special_listContext>(i);
		}
		public Modify_methodContext modify_method() {
			return GetRuleContext<Modify_methodContext>(0);
		}
		public Set_specialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_special; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSet_special(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSet_special(this);
		}
	}

	[RuleVersion(0)]
	public Set_specialContext set_special() {
		Set_specialContext _localctx = new Set_specialContext(_ctx, State);
		EnterRule(_localctx, 926, RULE_set_special);
		int _la;
		try {
			int _alt;
			State = 11358;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1545,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11291; Match(SET);
				State = 11292; id_();
				State = 11296;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1536,_ctx) ) {
				case 1:
					{
					State = 11293; id_();
					}
					break;

				case 2:
					{
					State = 11294; constant_LOCAL_ID();
					}
					break;

				case 3:
					{
					State = 11295; on_off();
					}
					break;
				}
				State = 11299;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1537,_ctx) ) {
				case 1:
					{
					State = 11298; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11301; Match(SET);
				State = 11302; Match(STATISTICS);
				State = 11303;
				_la = _input.La(1);
				if ( !(_la==IO || _la==PROFILE || _la==TIME || _la==XML) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11304; on_off();
				State = 11306;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1538,_ctx) ) {
				case 1:
					{
					State = 11305; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11308; Match(SET);
				State = 11309; Match(ROWCOUNT);
				State = 11310;
				_la = _input.La(1);
				if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11312;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1539,_ctx) ) {
				case 1:
					{
					State = 11311; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11314; Match(SET);
				State = 11315; Match(TEXTSIZE);
				State = 11316; Match(DECIMAL);
				State = 11318;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1540,_ctx) ) {
				case 1:
					{
					State = 11317; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11320; Match(SET);
				State = 11321; Match(TRANSACTION);
				State = 11322; Match(ISOLATION);
				State = 11323; Match(LEVEL);
				State = 11333;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1541,_ctx) ) {
				case 1:
					{
					State = 11324; Match(READ);
					State = 11325; Match(UNCOMMITTED);
					}
					break;

				case 2:
					{
					State = 11326; Match(READ);
					State = 11327; Match(COMMITTED);
					}
					break;

				case 3:
					{
					State = 11328; Match(REPEATABLE);
					State = 11329; Match(READ);
					}
					break;

				case 4:
					{
					State = 11330; Match(SNAPSHOT);
					}
					break;

				case 5:
					{
					State = 11331; Match(SERIALIZABLE);
					}
					break;

				case 6:
					{
					State = 11332; Match(DECIMAL);
					}
					break;
				}
				State = 11336;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1542,_ctx) ) {
				case 1:
					{
					State = 11335; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 11338; Match(SET);
				State = 11339; Match(IDENTITY_INSERT);
				State = 11340; table_name();
				State = 11341; on_off();
				State = 11343;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1543,_ctx) ) {
				case 1:
					{
					State = 11342; Match(SEMI);
					}
					break;
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 11345; Match(SET);
				State = 11346; special_list();
				State = 11351;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1544,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 11347; Match(COMMA);
						State = 11348; special_list();
						}
						} 
					}
					State = 11353;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1544,_ctx);
				}
				State = 11354; on_off();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 11356; Match(SET);
				State = 11357; modify_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Special_listContext : ParserRuleContext {
		public ITerminalNode ANSI_NULLS() { return GetToken(TSqlParser.ANSI_NULLS, 0); }
		public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public ITerminalNode ANSI_PADDING() { return GetToken(TSqlParser.ANSI_PADDING, 0); }
		public ITerminalNode ANSI_WARNINGS() { return GetToken(TSqlParser.ANSI_WARNINGS, 0); }
		public ITerminalNode ANSI_DEFAULTS() { return GetToken(TSqlParser.ANSI_DEFAULTS, 0); }
		public ITerminalNode ANSI_NULL_DFLT_OFF() { return GetToken(TSqlParser.ANSI_NULL_DFLT_OFF, 0); }
		public ITerminalNode ANSI_NULL_DFLT_ON() { return GetToken(TSqlParser.ANSI_NULL_DFLT_ON, 0); }
		public ITerminalNode ARITHABORT() { return GetToken(TSqlParser.ARITHABORT, 0); }
		public ITerminalNode ARITHIGNORE() { return GetToken(TSqlParser.ARITHIGNORE, 0); }
		public ITerminalNode CONCAT_NULL_YIELDS_NULL() { return GetToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public ITerminalNode CURSOR_CLOSE_ON_COMMIT() { return GetToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public ITerminalNode FMTONLY() { return GetToken(TSqlParser.FMTONLY, 0); }
		public ITerminalNode FORCEPLAN() { return GetToken(TSqlParser.FORCEPLAN, 0); }
		public ITerminalNode IMPLICIT_TRANSACTIONS() { return GetToken(TSqlParser.IMPLICIT_TRANSACTIONS, 0); }
		public ITerminalNode NOCOUNT() { return GetToken(TSqlParser.NOCOUNT, 0); }
		public ITerminalNode NOEXEol() { return GetToken(TSqlParser.NOEXEol, 0); }
		public ITerminalNode NUMERIC_ROUNDABORT() { return GetToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
		public ITerminalNode PARSEONLY() { return GetToken(TSqlParser.PARSEONLY, 0); }
		public ITerminalNode REMOTE_PROC_TRANSACTIONS() { return GetToken(TSqlParser.REMOTE_PROC_TRANSACTIONS, 0); }
		public ITerminalNode SHOWPLAN_ALL() { return GetToken(TSqlParser.SHOWPLAN_ALL, 0); }
		public ITerminalNode SHOWPLAN_TEXT() { return GetToken(TSqlParser.SHOWPLAN_TEXT, 0); }
		public ITerminalNode SHOWPLAN_XML() { return GetToken(TSqlParser.SHOWPLAN_XML, 0); }
		public ITerminalNode XACT_ABORT() { return GetToken(TSqlParser.XACT_ABORT, 0); }
		public Special_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_special_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSpecial_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSpecial_list(this);
		}
	}

	[RuleVersion(0)]
	public Special_listContext special_list() {
		Special_listContext _localctx = new Special_listContext(_ctx, State);
		EnterRule(_localctx, 928, RULE_special_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11360;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANSI_DEFAULTS) | (1L << ANSI_NULLS) | (1L << ANSI_NULL_DFLT_OFF) | (1L << ANSI_NULL_DFLT_ON) | (1L << ANSI_PADDING) | (1L << ANSI_WARNINGS) | (1L << ARITHABORT) | (1L << ARITHIGNORE))) != 0) || _la==CONCAT_NULL_YIELDS_NULL || _la==CURSOR_CLOSE_ON_COMMIT || _la==FMTONLY || _la==FORCEPLAN || _la==IMPLICIT_TRANSACTIONS || _la==NOCOUNT || _la==NUMERIC_ROUNDABORT || _la==PARSEONLY || _la==QUOTED_IDENTIFIER || _la==REMOTE_PROC_TRANSACTIONS || ((((_la - 909)) & ~0x3f) == 0 && ((1L << (_la - 909)) & ((1L << (SHOWPLAN_ALL - 909)) | (1L << (SHOWPLAN_TEXT - 909)) | (1L << (SHOWPLAN_XML - 909)))) != 0) || _la==XACT_ABORT || _la==NOEXEol) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_LOCAL_IDContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Constant_LOCAL_IDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_LOCAL_ID; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterConstant_LOCAL_ID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitConstant_LOCAL_ID(this);
		}
	}

	[RuleVersion(0)]
	public Constant_LOCAL_IDContext constant_LOCAL_ID() {
		Constant_LOCAL_IDContext _localctx = new Constant_LOCAL_IDContext(_ctx, State);
		EnterRule(_localctx, 930, RULE_constant_LOCAL_ID);
		try {
			State = 11364;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1546,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11362; constant();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11363; Match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken op;
		public Primitive_expressionContext primitive_expression() {
			return GetRuleContext<Primitive_expressionContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Value_callContext value_call() {
			return GetRuleContext<Value_callContext>(0);
		}
		public Query_callContext query_call() {
			return GetRuleContext<Query_callContext>(0);
		}
		public Exist_callContext exist_call() {
			return GetRuleContext<Exist_callContext>(0);
		}
		public Modify_callContext modify_call() {
			return GetRuleContext<Modify_callContext>(0);
		}
		public Hierarchyid_callContext hierarchyid_call() {
			return GetRuleContext<Hierarchyid_callContext>(0);
		}
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Case_expressionContext case_expression() {
			return GetRuleContext<Case_expressionContext>(0);
		}
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public Bracket_expressionContext bracket_expression() {
			return GetRuleContext<Bracket_expressionContext>(0);
		}
		public Unary_operator_expressionContext unary_operator_expression() {
			return GetRuleContext<Unary_operator_expressionContext>(0);
		}
		public Time_zoneContext time_zone() {
			return GetRuleContext<Time_zoneContext>(0);
		}
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ITerminalNode DOLLAR_ACTION() { return GetToken(TSqlParser.DOLLAR_ACTION, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 932;
		EnterRecursionRule(_localctx, 932, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11375;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1547,_ctx) ) {
			case 1:
				{
				State = 11367; primitive_expression();
				}
				break;

			case 2:
				{
				State = 11368; function_call();
				}
				break;

			case 3:
				{
				State = 11369; case_expression();
				}
				break;

			case 4:
				{
				State = 11370; full_column_name();
				}
				break;

			case 5:
				{
				State = 11371; bracket_expression();
				}
				break;

			case 6:
				{
				State = 11372; unary_operator_expression();
				}
				break;

			case 7:
				{
				State = 11373; over_clause();
				}
				break;

			case 8:
				{
				State = 11374; Match(DOLLAR_ACTION);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 11401;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1550,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 11399;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1549,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 11377;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 11378;
						_localctx.op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 1159)) & ~0x3f) == 0 && ((1L << (_la - 1159)) & ((1L << (STAR - 1159)) | (1L << (DIVIDE - 1159)) | (1L << (MODULE - 1159)))) != 0)) ) {
							_localctx.op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 11379; expression(6);
						}
						break;

					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 11380;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 11381;
						_localctx.op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 1145)) & ~0x3f) == 0 && ((1L << (_la - 1145)) & ((1L << (DOUBLE_BAR - 1145)) | (1L << (PLUS - 1145)) | (1L << (MINUS - 1145)) | (1L << (BIT_OR - 1145)) | (1L << (BIT_AND - 1145)) | (1L << (BIT_XOR - 1145)))) != 0)) ) {
							_localctx.op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 11382; expression(5);
						}
						break;

					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 11383;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 11384; Match(DOT);
						State = 11389;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1548,_ctx) ) {
						case 1:
							{
							State = 11385; value_call();
							}
							break;

						case 2:
							{
							State = 11386; query_call();
							}
							break;

						case 3:
							{
							State = 11387; exist_call();
							}
							break;

						case 4:
							{
							State = 11388; modify_call();
							}
							break;
						}
						}
						break;

					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 11391;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 11392; Match(DOT);
						State = 11393; hierarchyid_call();
						}
						break;

					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 11394;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 11395; Match(COLLATE);
						State = 11396; id_();
						}
						break;

					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 11397;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 11398; time_zone();
						}
						break;
					}
					} 
				}
				State = 11403;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1550,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ITerminalNode PLACEHOLDER() { return GetToken(TSqlParser.PLACEHOLDER, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(_ctx, State);
		EnterRule(_localctx, 934, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11404; Match(PLACEHOLDER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Time_zoneContext : ParserRuleContext {
		public ITerminalNode AT_KEYWORD() { return GetToken(TSqlParser.AT_KEYWORD, 0); }
		public ITerminalNode TIME() { return GetToken(TSqlParser.TIME, 0); }
		public ITerminalNode ZONE() { return GetToken(TSqlParser.ZONE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Time_zoneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time_zone; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTime_zone(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTime_zone(this);
		}
	}

	[RuleVersion(0)]
	public Time_zoneContext time_zone() {
		Time_zoneContext _localctx = new Time_zoneContext(_ctx, State);
		EnterRule(_localctx, 936, RULE_time_zone);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11406; Match(AT_KEYWORD);
			State = 11407; Match(TIME);
			State = 11408; Match(ZONE);
			State = 11409; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primitive_expressionContext : ParserRuleContext {
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Primitive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrimitive_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrimitive_expression(this);
		}
	}

	[RuleVersion(0)]
	public Primitive_expressionContext primitive_expression() {
		Primitive_expressionContext _localctx = new Primitive_expressionContext(_ctx, State);
		EnterRule(_localctx, 938, RULE_primitive_expression);
		try {
			State = 11415;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1551,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11411; Match(DEFAULT);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11412; Match(NULL_);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11413; Match(LOCAL_ID);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11414; constant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_expressionContext : ParserRuleContext {
		public ExpressionContext caseExpr;
		public ExpressionContext elseExpr;
		public ITerminalNode CASE() { return GetToken(TSqlParser.CASE, 0); }
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Switch_sectionContext[] switch_section() {
			return GetRuleContexts<Switch_sectionContext>();
		}
		public Switch_sectionContext switch_section(int i) {
			return GetRuleContext<Switch_sectionContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(TSqlParser.ELSE, 0); }
		public Switch_search_condition_sectionContext[] switch_search_condition_section() {
			return GetRuleContexts<Switch_search_condition_sectionContext>();
		}
		public Switch_search_condition_sectionContext switch_search_condition_section(int i) {
			return GetRuleContext<Switch_search_condition_sectionContext>(i);
		}
		public Case_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCase_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCase_expression(this);
		}
	}

	[RuleVersion(0)]
	public Case_expressionContext case_expression() {
		Case_expressionContext _localctx = new Case_expressionContext(_ctx, State);
		EnterRule(_localctx, 940, RULE_case_expression);
		try {
			int _alt;
			State = 11442;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1556,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11417; Match(CASE);
				State = 11418; _localctx.caseExpr = expression(0);
				State = 11420;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 11419; switch_section();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 11422;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1552,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 11426;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1553,_ctx) ) {
				case 1:
					{
					State = 11424; Match(ELSE);
					State = 11425; _localctx.elseExpr = expression(0);
					}
					break;
				}
				State = 11428; Match(END);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11430; Match(CASE);
				State = 11432;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 11431; switch_search_condition_section();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 11434;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1554,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 11438;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1555,_ctx) ) {
				case 1:
					{
					State = 11436; Match(ELSE);
					State = 11437; _localctx.elseExpr = expression(0);
					}
					break;
				}
				State = 11440; Match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operator_expressionContext : ParserRuleContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Unary_operator_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUnary_operator_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUnary_operator_expression(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operator_expressionContext unary_operator_expression() {
		Unary_operator_expressionContext _localctx = new Unary_operator_expressionContext(_ctx, State);
		EnterRule(_localctx, 942, RULE_unary_operator_expression);
		int _la;
		try {
			State = 11448;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1557,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11444; Match(BIT_NOT);
				State = 11445; expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11446;
				_localctx.op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					_localctx.op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11447; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bracket_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Bracket_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracket_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBracket_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBracket_expression(this);
		}
	}

	[RuleVersion(0)]
	public Bracket_expressionContext bracket_expression() {
		Bracket_expressionContext _localctx = new Bracket_expressionContext(_ctx, State);
		EnterRule(_localctx, 944, RULE_bracket_expression);
		try {
			State = 11458;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1558,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11450; Match(LR_BRACKET);
				State = 11451; expression(0);
				State = 11452; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11454; Match(LR_BRACKET);
				State = 11455; subquery();
				State = 11456; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_expressionContext : ParserRuleContext {
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public Constant_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterConstant_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitConstant_expression(this);
		}
	}

	[RuleVersion(0)]
	public Constant_expressionContext constant_expression() {
		Constant_expressionContext _localctx = new Constant_expressionContext(_ctx, State);
		EnterRule(_localctx, 946, RULE_constant_expression);
		try {
			State = 11468;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1559,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11460; Match(NULL_);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11461; constant();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11462; function_call();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11463; Match(LOCAL_ID);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11464; Match(LR_BRACKET);
				State = 11465; constant_expression();
				State = 11466; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubqueryContext : ParserRuleContext {
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSubquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSubquery(this);
		}
	}

	[RuleVersion(0)]
	public SubqueryContext subquery() {
		SubqueryContext _localctx = new SubqueryContext(_ctx, State);
		EnterRule(_localctx, 948, RULE_subquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11470; select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_expressionContext : ParserRuleContext {
		public Common_table_expressionContext _common_table_expression;
		public IList<Common_table_expressionContext> _ctes = new List<Common_table_expressionContext>();
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Common_table_expressionContext[] common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		public With_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWith_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWith_expression(this);
		}
	}

	[RuleVersion(0)]
	public With_expressionContext with_expression() {
		With_expressionContext _localctx = new With_expressionContext(_ctx, State);
		EnterRule(_localctx, 950, RULE_with_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11472; Match(WITH);
			State = 11473; _localctx._common_table_expression = common_table_expression();
			_localctx._ctes.Add(_localctx._common_table_expression);
			State = 11478;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1560,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11474; Match(COMMA);
					State = 11475; _localctx._common_table_expression = common_table_expression();
					_localctx._ctes.Add(_localctx._common_table_expression);
					}
					} 
				}
				State = 11480;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1560,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_table_expressionContext : ParserRuleContext {
		public Id_Context expression_name;
		public Column_name_listContext columns;
		public Select_statementContext cte_query;
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_table_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCommon_table_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCommon_table_expression(this);
		}
	}

	[RuleVersion(0)]
	public Common_table_expressionContext common_table_expression() {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(_ctx, State);
		EnterRule(_localctx, 952, RULE_common_table_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11481; _localctx.expression_name = id_();
			State = 11486;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1561,_ctx) ) {
			case 1:
				{
				State = 11482; Match(LR_BRACKET);
				State = 11483; _localctx.columns = column_name_list();
				State = 11484; Match(RR_BRACKET);
				}
				break;
			}
			State = 11488; Match(AS);
			State = 11489; Match(LR_BRACKET);
			State = 11490; _localctx.cte_query = select_statement();
			State = 11491; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_elemContext : ParserRuleContext {
		public Id_Context udt_column_name;
		public Id_Context method_name;
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Update_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_elem(this);
		}
	}

	[RuleVersion(0)]
	public Update_elemContext update_elem() {
		Update_elemContext _localctx = new Update_elemContext(_ctx, State);
		EnterRule(_localctx, 954, RULE_update_elem);
		try {
			State = 11518;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1565,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11493; Match(LOCAL_ID);
				State = 11494; Match(EQUAL);
				State = 11495; full_column_name();
				State = 11498;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1562,_ctx) ) {
				case 1:
					{
					State = 11496; Match(EQUAL);
					}
					break;

				case 2:
					{
					State = 11497; assignment_operator();
					}
					break;
				}
				State = 11500; expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11504;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1563,_ctx) ) {
				case 1:
					{
					State = 11502; full_column_name();
					}
					break;

				case 2:
					{
					State = 11503; Match(LOCAL_ID);
					}
					break;
				}
				State = 11508;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1564,_ctx) ) {
				case 1:
					{
					State = 11506; Match(EQUAL);
					}
					break;

				case 2:
					{
					State = 11507; assignment_operator();
					}
					break;
				}
				State = 11510; expression(0);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11511; _localctx.udt_column_name = id_();
				State = 11512; Match(DOT);
				State = 11513; _localctx.method_name = id_();
				State = 11514; Match(LR_BRACKET);
				State = 11515; expression_list_();
				State = 11516; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_elem_mergeContext : ParserRuleContext {
		public Id_Context udt_column_name;
		public Id_Context method_name;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Update_elem_mergeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_elem_merge; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_elem_merge(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_elem_merge(this);
		}
	}

	[RuleVersion(0)]
	public Update_elem_mergeContext update_elem_merge() {
		Update_elem_mergeContext _localctx = new Update_elem_mergeContext(_ctx, State);
		EnterRule(_localctx, 956, RULE_update_elem_merge);
		try {
			State = 11536;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1568,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11522;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1566,_ctx) ) {
				case 1:
					{
					State = 11520; full_column_name();
					}
					break;

				case 2:
					{
					State = 11521; Match(LOCAL_ID);
					}
					break;
				}
				State = 11526;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1567,_ctx) ) {
				case 1:
					{
					State = 11524; Match(EQUAL);
					}
					break;

				case 2:
					{
					State = 11525; assignment_operator();
					}
					break;
				}
				State = 11528; expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11529; _localctx.udt_column_name = id_();
				State = 11530; Match(DOT);
				State = 11531; _localctx.method_name = id_();
				State = 11532; Match(LR_BRACKET);
				State = 11533; expression_list_();
				State = 11534; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_conditionContext : ParserRuleContext {
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		public ITerminalNode[] NOT() { return GetTokens(TSqlParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(TSqlParser.NOT, i);
		}
		public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public Search_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSearch_condition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSearch_condition(this);
		}
	}

	[RuleVersion(0)]
	public Search_conditionContext search_condition() {
		return search_condition(0);
	}

	private Search_conditionContext search_condition(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Search_conditionContext _localctx = new Search_conditionContext(_ctx, _parentState);
		Search_conditionContext _prevctx = _localctx;
		int _startState = 958;
		EnterRecursionRule(_localctx, 958, RULE_search_condition, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 11542;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1569,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11539; Match(NOT);
					}
					} 
				}
				State = 11544;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1569,_ctx);
			}
			State = 11550;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1570,_ctx) ) {
			case 1:
				{
				State = 11545; predicate();
				}
				break;

			case 2:
				{
				State = 11546; Match(LR_BRACKET);
				State = 11547; search_condition(0);
				State = 11548; Match(RR_BRACKET);
				}
				break;
			}
			}
			_ctx.stop = _input.Lt(-1);
			State = 11560;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1572,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 11558;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1571,_ctx) ) {
					case 1:
						{
						_localctx = new Search_conditionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_search_condition);
						State = 11552;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 11553; Match(AND);
						State = 11554; search_condition(3);
						}
						break;

					case 2:
						{
						_localctx = new Search_conditionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_search_condition);
						State = 11555;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 11556; Match(OR);
						State = 11557; search_condition(2);
						}
						break;
					}
					} 
				}
				State = 11562;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1572,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Freetext_predicateContext freetext_predicate() {
			return GetRuleContext<Freetext_predicateContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		public ITerminalNode MULT_ASSIGN() { return GetToken(TSqlParser.MULT_ASSIGN, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode SOME() { return GetToken(TSqlParser.SOME, 0); }
		public ITerminalNode ANY() { return GetToken(TSqlParser.ANY, 0); }
		public ITerminalNode BETWEEN() { return GetToken(TSqlParser.BETWEEN, 0); }
		public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		public ITerminalNode[] NOT() { return GetTokens(TSqlParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(TSqlParser.NOT, i);
		}
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public ITerminalNode LIKE() { return GetToken(TSqlParser.LIKE, 0); }
		public ITerminalNode ESCAPE() { return GetToken(TSqlParser.ESCAPE, 0); }
		public ITerminalNode IS() { return GetToken(TSqlParser.IS, 0); }
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(_ctx, State);
		EnterRule(_localctx, 960, RULE_predicate);
		int _la;
		try {
			int _alt;
			State = 11628;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1578,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11563; Match(EXISTS);
				State = 11564; Match(LR_BRACKET);
				State = 11565; subquery();
				State = 11566; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11568; freetext_predicate();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11569; expression(0);
				State = 11570; comparison_operator();
				State = 11571; expression(0);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11573; expression(0);
				State = 11574; Match(MULT_ASSIGN);
				State = 11575; expression(0);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11577; expression(0);
				State = 11578; comparison_operator();
				State = 11579;
				_la = _input.La(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11580; Match(LR_BRACKET);
				State = 11581; subquery();
				State = 11582; Match(RR_BRACKET);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 11584; expression(0);
				State = 11588;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1573,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 11585; Match(NOT);
						}
						} 
					}
					State = 11590;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1573,_ctx);
				}
				State = 11591; Match(BETWEEN);
				State = 11592; expression(0);
				State = 11593; Match(AND);
				State = 11594; expression(0);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 11596; expression(0);
				State = 11600;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1574,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 11597; Match(NOT);
						}
						} 
					}
					State = 11602;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1574,_ctx);
				}
				State = 11603; Match(IN);
				State = 11604; Match(LR_BRACKET);
				State = 11607;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1575,_ctx) ) {
				case 1:
					{
					State = 11605; subquery();
					}
					break;

				case 2:
					{
					State = 11606; expression_list_();
					}
					break;
				}
				State = 11609; Match(RR_BRACKET);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 11611; expression(0);
				State = 11615;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1576,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 11612; Match(NOT);
						}
						} 
					}
					State = 11617;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1576,_ctx);
				}
				State = 11618; Match(LIKE);
				State = 11619; expression(0);
				State = 11622;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1577,_ctx) ) {
				case 1:
					{
					State = 11620; Match(ESCAPE);
					State = 11621; expression(0);
					}
					break;
				}
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 11624; expression(0);
				State = 11625; Match(IS);
				State = 11626; null_notnull();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_expressionContext : ParserRuleContext {
		public Sql_unionContext _sql_union;
		public IList<Sql_unionContext> _unions = new List<Sql_unionContext>();
		public Query_specificationContext query_specification() {
			return GetRuleContext<Query_specificationContext>(0);
		}
		public Query_expressionContext[] query_expression() {
			return GetRuleContexts<Query_expressionContext>();
		}
		public Query_expressionContext query_expression(int i) {
			return GetRuleContext<Query_expressionContext>(i);
		}
		public ITerminalNode UNION() { return GetToken(TSqlParser.UNION, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Sql_unionContext[] sql_union() {
			return GetRuleContexts<Sql_unionContext>();
		}
		public Sql_unionContext sql_union(int i) {
			return GetRuleContext<Sql_unionContext>(i);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_expression(this);
		}
	}

	[RuleVersion(0)]
	public Query_expressionContext query_expression() {
		Query_expressionContext _localctx = new Query_expressionContext(_ctx, State);
		EnterRule(_localctx, 962, RULE_query_expression);
		try {
			int _alt;
			State = 11653;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1584,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11641;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1581,_ctx) ) {
				case 1:
					{
					State = 11630; query_specification();
					}
					break;

				case 2:
					{
					State = 11631; Match(LR_BRACKET);
					State = 11632; query_expression();
					State = 11633; Match(RR_BRACKET);
					State = 11639;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1580,_ctx) ) {
					case 1:
						{
						State = 11634; Match(UNION);
						State = 11636;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1579,_ctx) ) {
						case 1:
							{
							State = 11635; Match(ALL);
							}
							break;
						}
						State = 11638; query_expression();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11643; query_specification();
				State = 11645;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1582,_ctx) ) {
				case 1:
					{
					State = 11644; order_by_clause();
					}
					break;
				}
				State = 11650;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1583,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 11647; _localctx._sql_union = sql_union();
						_localctx._unions.Add(_localctx._sql_union);
						}
						} 
					}
					State = 11652;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1583,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_unionContext : ParserRuleContext {
		public Query_specificationContext spec;
		public Query_expressionContext op;
		public ITerminalNode UNION() { return GetToken(TSqlParser.UNION, 0); }
		public ITerminalNode EXCEPT() { return GetToken(TSqlParser.EXCEPT, 0); }
		public ITerminalNode INTERSECT() { return GetToken(TSqlParser.INTERSECT, 0); }
		public Query_specificationContext query_specification() {
			return GetRuleContext<Query_specificationContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public Sql_unionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_union; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSql_union(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSql_union(this);
		}
	}

	[RuleVersion(0)]
	public Sql_unionContext sql_union() {
		Sql_unionContext _localctx = new Sql_unionContext(_ctx, State);
		EnterRule(_localctx, 964, RULE_sql_union);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11661;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1586,_ctx) ) {
			case 1:
				{
				State = 11655; Match(UNION);
				State = 11657;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1585,_ctx) ) {
				case 1:
					{
					State = 11656; Match(ALL);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 11659; Match(EXCEPT);
				}
				break;

			case 3:
				{
				State = 11660; Match(INTERSECT);
				}
				break;
			}
			State = 11668;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1587,_ctx) ) {
			case 1:
				{
				State = 11663; _localctx.spec = query_specification();
				}
				break;

			case 2:
				{
				{
				State = 11664; Match(LR_BRACKET);
				State = 11665; _localctx.op = query_expression();
				State = 11666; Match(RR_BRACKET);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_specificationContext : ParserRuleContext {
		public IToken allOrDistinct;
		public Top_clauseContext top;
		public Select_listContext columns;
		public Table_nameContext into;
		public Table_sourcesContext from;
		public Search_conditionContext where;
		public IToken groupByAll;
		public Group_by_itemContext _group_by_item;
		public IList<Group_by_itemContext> _groupBys = new List<Group_by_itemContext>();
		public Search_conditionContext having;
		public ITerminalNode SELECT() { return GetToken(TSqlParser.SELECT, 0); }
		public Select_listContext select_list() {
			return GetRuleContext<Select_listContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode HAVING() { return GetToken(TSqlParser.HAVING, 0); }
		public Top_clauseContext top_clause() {
			return GetRuleContext<Top_clauseContext>(0);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		public Group_by_itemContext[] group_by_item() {
			return GetRuleContexts<Group_by_itemContext>();
		}
		public Group_by_itemContext group_by_item(int i) {
			return GetRuleContext<Group_by_itemContext>(i);
		}
		public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		public ITerminalNode DISTINCT() { return GetToken(TSqlParser.DISTINCT, 0); }
		public Query_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_specification(this);
		}
	}

	[RuleVersion(0)]
	public Query_specificationContext query_specification() {
		Query_specificationContext _localctx = new Query_specificationContext(_ctx, State);
		EnterRule(_localctx, 966, RULE_query_specification);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11670; Match(SELECT);
			State = 11672;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1588,_ctx) ) {
			case 1:
				{
				State = 11671;
				_localctx.allOrDistinct = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					_localctx.allOrDistinct = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 11675;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1589,_ctx) ) {
			case 1:
				{
				State = 11674; _localctx.top = top_clause();
				}
				break;
			}
			State = 11677; _localctx.columns = select_list();
			State = 11680;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1590,_ctx) ) {
			case 1:
				{
				State = 11678; Match(INTO);
				State = 11679; _localctx.into = table_name();
				}
				break;
			}
			State = 11684;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1591,_ctx) ) {
			case 1:
				{
				State = 11682; Match(FROM);
				State = 11683; _localctx.from = table_sources();
				}
				break;
			}
			State = 11688;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1592,_ctx) ) {
			case 1:
				{
				State = 11686; Match(WHERE);
				State = 11687; _localctx.where = search_condition(0);
				}
				break;
			}
			State = 11703;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1595,_ctx) ) {
			case 1:
				{
				State = 11690; Match(GROUP);
				State = 11691; Match(BY);
				State = 11693;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1593,_ctx) ) {
				case 1:
					{
					State = 11692; _localctx.groupByAll = Match(ALL);
					}
					break;
				}
				State = 11695; _localctx._group_by_item = group_by_item();
				_localctx._groupBys.Add(_localctx._group_by_item);
				State = 11700;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1594,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 11696; Match(COMMA);
						State = 11697; _localctx._group_by_item = group_by_item();
						_localctx._groupBys.Add(_localctx._group_by_item);
						}
						} 
					}
					State = 11702;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1594,_ctx);
				}
				}
				break;
			}
			State = 11707;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1596,_ctx) ) {
			case 1:
				{
				State = 11705; Match(HAVING);
				State = 11706; _localctx.having = search_condition(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_clauseContext : ParserRuleContext {
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public Top_percentContext top_percent() {
			return GetRuleContext<Top_percentContext>(0);
		}
		public Top_countContext top_count() {
			return GetRuleContext<Top_countContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode TIES() { return GetToken(TSqlParser.TIES, 0); }
		public Top_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTop_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTop_clause(this);
		}
	}

	[RuleVersion(0)]
	public Top_clauseContext top_clause() {
		Top_clauseContext _localctx = new Top_clauseContext(_ctx, State);
		EnterRule(_localctx, 968, RULE_top_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11709; Match(TOP);
			State = 11712;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1597,_ctx) ) {
			case 1:
				{
				State = 11710; top_percent();
				}
				break;

			case 2:
				{
				State = 11711; top_count();
				}
				break;
			}
			State = 11716;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1598,_ctx) ) {
			case 1:
				{
				State = 11714; Match(WITH);
				State = 11715; Match(TIES);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_percentContext : ParserRuleContext {
		public IToken percent_constant;
		public ExpressionContext topper_expression;
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public ITerminalNode REAL() { return GetToken(TSqlParser.REAL, 0); }
		public ITerminalNode FLOAT() { return GetToken(TSqlParser.FLOAT, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Top_percentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_percent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTop_percent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTop_percent(this);
		}
	}

	[RuleVersion(0)]
	public Top_percentContext top_percent() {
		Top_percentContext _localctx = new Top_percentContext(_ctx, State);
		EnterRule(_localctx, 970, RULE_top_percent);
		int _la;
		try {
			State = 11725;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1599,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11718;
				_localctx.percent_constant = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 1127)) & ~0x3f) == 0 && ((1L << (_la - 1127)) & ((1L << (DECIMAL - 1127)) | (1L << (FLOAT - 1127)) | (1L << (REAL - 1127)))) != 0)) ) {
					_localctx.percent_constant = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11719; Match(PERCENT);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11720; Match(LR_BRACKET);
				State = 11721; _localctx.topper_expression = expression(0);
				State = 11722; Match(RR_BRACKET);
				State = 11723; Match(PERCENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_countContext : ParserRuleContext {
		public IToken count_constant;
		public ExpressionContext topcount_expression;
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Top_countContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_count; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTop_count(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTop_count(this);
		}
	}

	[RuleVersion(0)]
	public Top_countContext top_count() {
		Top_countContext _localctx = new Top_countContext(_ctx, State);
		EnterRule(_localctx, 972, RULE_top_count);
		try {
			State = 11732;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1600,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11727; _localctx.count_constant = Match(DECIMAL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11728; Match(LR_BRACKET);
				State = 11729; _localctx.topcount_expression = expression(0);
				State = 11730; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_clauseContext : ParserRuleContext {
		public Order_by_expressionContext _order_by_expression;
		public IList<Order_by_expressionContext> _order_bys = new List<Order_by_expressionContext>();
		public ExpressionContext offset_exp;
		public IToken offset_rows;
		public IToken fetch_offset;
		public ExpressionContext fetch_exp;
		public IToken fetch_rows;
		public ITerminalNode ORDER() { return GetToken(TSqlParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public Order_by_expressionContext[] order_by_expression() {
			return GetRuleContexts<Order_by_expressionContext>();
		}
		public Order_by_expressionContext order_by_expression(int i) {
			return GetRuleContext<Order_by_expressionContext>(i);
		}
		public ITerminalNode OFFSET() { return GetToken(TSqlParser.OFFSET, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] ROW() { return GetTokens(TSqlParser.ROW); }
		public ITerminalNode ROW(int i) {
			return GetToken(TSqlParser.ROW, i);
		}
		public ITerminalNode[] ROWS() { return GetTokens(TSqlParser.ROWS); }
		public ITerminalNode ROWS(int i) {
			return GetToken(TSqlParser.ROWS, i);
		}
		public ITerminalNode FETCH() { return GetToken(TSqlParser.FETCH, 0); }
		public ITerminalNode ONLY() { return GetToken(TSqlParser.ONLY, 0); }
		public ITerminalNode FIRST() { return GetToken(TSqlParser.FIRST, 0); }
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_clause(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_clauseContext order_by_clause() {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, State);
		EnterRule(_localctx, 974, RULE_order_by_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11734; Match(ORDER);
			State = 11735; Match(BY);
			State = 11736; _localctx._order_by_expression = order_by_expression();
			_localctx._order_bys.Add(_localctx._order_by_expression);
			State = 11741;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1601,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11737; Match(COMMA);
					State = 11738; _localctx._order_by_expression = order_by_expression();
					_localctx._order_bys.Add(_localctx._order_by_expression);
					}
					} 
				}
				State = 11743;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1601,_ctx);
			}
			State = 11755;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1603,_ctx) ) {
			case 1:
				{
				State = 11744; Match(OFFSET);
				State = 11745; _localctx.offset_exp = expression(0);
				State = 11746;
				_localctx.offset_rows = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ROW || _la==ROWS) ) {
					_localctx.offset_rows = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11753;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1602,_ctx) ) {
				case 1:
					{
					State = 11747; Match(FETCH);
					State = 11748;
					_localctx.fetch_offset = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==FIRST || _la==NEXT) ) {
						_localctx.fetch_offset = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 11749; _localctx.fetch_exp = expression(0);
					State = 11750;
					_localctx.fetch_rows = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==ROW || _la==ROWS) ) {
						_localctx.fetch_rows = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 11751; Match(ONLY);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_clauseContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode BROWSE() { return GetToken(TSqlParser.BROWSE, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode RAW() { return GetToken(TSqlParser.RAW, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public Xml_common_directivesContext[] xml_common_directives() {
			return GetRuleContexts<Xml_common_directivesContext>();
		}
		public Xml_common_directivesContext xml_common_directives(int i) {
			return GetRuleContext<Xml_common_directivesContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode ELEMENTS() { return GetToken(TSqlParser.ELEMENTS, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode XMLDATA() { return GetToken(TSqlParser.XMLDATA, 0); }
		public ITerminalNode XMLSCHEMA() { return GetToken(TSqlParser.XMLSCHEMA, 0); }
		public ITerminalNode XSINIL() { return GetToken(TSqlParser.XSINIL, 0); }
		public ITerminalNode ABSENT() { return GetToken(TSqlParser.ABSENT, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(TSqlParser.EXPLICIT, 0); }
		public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		public ITerminalNode JSON() { return GetToken(TSqlParser.JSON, 0); }
		public ITerminalNode ROOT() { return GetToken(TSqlParser.ROOT, 0); }
		public ITerminalNode INCLUDE_NULL_VALUES() { return GetToken(TSqlParser.INCLUDE_NULL_VALUES, 0); }
		public ITerminalNode WITHOUT_ARRAY_WRAPPER() { return GetToken(TSqlParser.WITHOUT_ARRAY_WRAPPER, 0); }
		public For_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFor_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFor_clause(this);
		}
	}

	[RuleVersion(0)]
	public For_clauseContext for_clause() {
		For_clauseContext _localctx = new For_clauseContext(_ctx, State);
		EnterRule(_localctx, 976, RULE_for_clause);
		int _la;
		try {
			int _alt;
			State = 11849;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1622,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11757; Match(FOR);
				State = 11758; Match(BROWSE);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11759; Match(FOR);
				State = 11760; Match(XML);
				State = 11768;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1605,_ctx) ) {
				case 1:
					{
					State = 11761; Match(RAW);
					State = 11765;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1604,_ctx) ) {
					case 1:
						{
						State = 11762; Match(LR_BRACKET);
						State = 11763; Match(STRING);
						State = 11764; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 11767; Match(AUTO);
					}
					break;
				}
				State = 11773;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1606,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 11770; xml_common_directives();
						}
						} 
					}
					State = 11775;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1606,_ctx);
				}
				State = 11786;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1609,_ctx) ) {
				case 1:
					{
					State = 11776; Match(COMMA);
					State = 11784;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1608,_ctx) ) {
					case 1:
						{
						State = 11777; Match(XMLDATA);
						}
						break;

					case 2:
						{
						State = 11778; Match(XMLSCHEMA);
						State = 11782;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,1607,_ctx) ) {
						case 1:
							{
							State = 11779; Match(LR_BRACKET);
							State = 11780; Match(STRING);
							State = 11781; Match(RR_BRACKET);
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				State = 11793;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1611,_ctx) ) {
				case 1:
					{
					State = 11788; Match(COMMA);
					State = 11789; Match(ELEMENTS);
					State = 11791;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1610,_ctx) ) {
					case 1:
						{
						State = 11790;
						_la = _input.La(1);
						if ( !(_la==ABSENT || _la==XSINIL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11795; Match(FOR);
				State = 11796; Match(XML);
				State = 11797; Match(EXPLICIT);
				State = 11801;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1612,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 11798; xml_common_directives();
						}
						} 
					}
					State = 11803;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1612,_ctx);
				}
				State = 11806;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1613,_ctx) ) {
				case 1:
					{
					State = 11804; Match(COMMA);
					State = 11805; Match(XMLDATA);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11808; Match(FOR);
				State = 11809; Match(XML);
				State = 11810; Match(PATH);
				State = 11814;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1614,_ctx) ) {
				case 1:
					{
					State = 11811; Match(LR_BRACKET);
					State = 11812; Match(STRING);
					State = 11813; Match(RR_BRACKET);
					}
					break;
				}
				State = 11819;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1615,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 11816; xml_common_directives();
						}
						} 
					}
					State = 11821;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1615,_ctx);
				}
				State = 11827;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1617,_ctx) ) {
				case 1:
					{
					State = 11822; Match(COMMA);
					State = 11823; Match(ELEMENTS);
					State = 11825;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1616,_ctx) ) {
					case 1:
						{
						State = 11824;
						_la = _input.La(1);
						if ( !(_la==ABSENT || _la==XSINIL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11829; Match(FOR);
				State = 11830; Match(JSON);
				State = 11831;
				_la = _input.La(1);
				if ( !(_la==AUTO || _la==PATH) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11839;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1619,_ctx) ) {
				case 1:
					{
					State = 11832; Match(COMMA);
					State = 11833; Match(ROOT);
					State = 11837;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1618,_ctx) ) {
					case 1:
						{
						State = 11834; Match(LR_BRACKET);
						State = 11835; Match(STRING);
						State = 11836; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				State = 11843;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1620,_ctx) ) {
				case 1:
					{
					State = 11841; Match(COMMA);
					State = 11842; Match(INCLUDE_NULL_VALUES);
					}
					break;
				}
				State = 11847;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1621,_ctx) ) {
				case 1:
					{
					State = 11845; Match(COMMA);
					State = 11846; Match(WITHOUT_ARRAY_WRAPPER);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_common_directivesContext : ParserRuleContext {
		public ITerminalNode BINARY_BASE64() { return GetToken(TSqlParser.BINARY_BASE64, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode ROOT() { return GetToken(TSqlParser.ROOT, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Xml_common_directivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_common_directives; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_common_directives(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_common_directives(this);
		}
	}

	[RuleVersion(0)]
	public Xml_common_directivesContext xml_common_directives() {
		Xml_common_directivesContext _localctx = new Xml_common_directivesContext(_ctx, State);
		EnterRule(_localctx, 978, RULE_xml_common_directives);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11851; Match(COMMA);
			State = 11860;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1624,_ctx) ) {
			case 1:
				{
				State = 11852; Match(BINARY_BASE64);
				}
				break;

			case 2:
				{
				State = 11853; Match(TYPE);
				}
				break;

			case 3:
				{
				State = 11854; Match(ROOT);
				State = 11858;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1623,_ctx) ) {
				case 1:
					{
					State = 11855; Match(LR_BRACKET);
					State = 11856; Match(STRING);
					State = 11857; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_expressionContext : ParserRuleContext {
		public ExpressionContext order_by;
		public IToken ascending;
		public IToken descending;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ASC() { return GetToken(TSqlParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(TSqlParser.DESC, 0); }
		public Order_by_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_expression(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_expressionContext order_by_expression() {
		Order_by_expressionContext _localctx = new Order_by_expressionContext(_ctx, State);
		EnterRule(_localctx, 980, RULE_order_by_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11862; _localctx.order_by = expression(0);
			State = 11865;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1625,_ctx) ) {
			case 1:
				{
				State = 11863; _localctx.ascending = Match(ASC);
				}
				break;

			case 2:
				{
				State = 11864; _localctx.descending = Match(DESC);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_itemContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Group_by_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGroup_by_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGroup_by_item(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_itemContext group_by_item() {
		Group_by_itemContext _localctx = new Group_by_itemContext(_ctx, State);
		EnterRule(_localctx, 982, RULE_group_by_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11867; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Option_clauseContext : ParserRuleContext {
		public OptionContext _option;
		public IList<OptionContext> _options = new List<OptionContext>();
		public ITerminalNode OPTION() { return GetToken(TSqlParser.OPTION, 0); }
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public Option_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOption_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOption_clause(this);
		}
	}

	[RuleVersion(0)]
	public Option_clauseContext option_clause() {
		Option_clauseContext _localctx = new Option_clauseContext(_ctx, State);
		EnterRule(_localctx, 984, RULE_option_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11869; Match(OPTION);
			State = 11870; Match(LR_BRACKET);
			State = 11871; _localctx._option = option();
			_localctx._options.Add(_localctx._option);
			State = 11876;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1626,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11872; Match(COMMA);
					State = 11873; _localctx._option = option();
					_localctx._options.Add(_localctx._option);
					}
					} 
				}
				State = 11878;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1626,_ctx);
			}
			State = 11879; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		public IToken number_rows;
		public IToken number_of_processors;
		public IToken number_recursion;
		public IToken traceFlag;
		public ITerminalNode FAST() { return GetToken(TSqlParser.FAST, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode HASH() { return GetToken(TSqlParser.HASH, 0); }
		public ITerminalNode ORDER() { return GetToken(TSqlParser.ORDER, 0); }
		public ITerminalNode UNION() { return GetToken(TSqlParser.UNION, 0); }
		public ITerminalNode MERGE() { return GetToken(TSqlParser.MERGE, 0); }
		public ITerminalNode CONCAT() { return GetToken(TSqlParser.CONCAT, 0); }
		public ITerminalNode JOIN() { return GetToken(TSqlParser.JOIN, 0); }
		public ITerminalNode LOOP() { return GetToken(TSqlParser.LOOP, 0); }
		public ITerminalNode EXPAND() { return GetToken(TSqlParser.EXPAND, 0); }
		public ITerminalNode VIEWS() { return GetToken(TSqlParser.VIEWS, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public ITerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return GetToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public ITerminalNode KEEP() { return GetToken(TSqlParser.KEEP, 0); }
		public ITerminalNode PLAN() { return GetToken(TSqlParser.PLAN, 0); }
		public ITerminalNode KEEPFIXED() { return GetToken(TSqlParser.KEEPFIXED, 0); }
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode MAXRECURSION() { return GetToken(TSqlParser.MAXRECURSION, 0); }
		public ITerminalNode OPTIMIZE() { return GetToken(TSqlParser.OPTIMIZE, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Optimize_for_argContext[] optimize_for_arg() {
			return GetRuleContexts<Optimize_for_argContext>();
		}
		public Optimize_for_argContext optimize_for_arg(int i) {
			return GetRuleContext<Optimize_for_argContext>(i);
		}
		public ITerminalNode UNKNOWN() { return GetToken(TSqlParser.UNKNOWN, 0); }
		public ITerminalNode PARAMETERIZATION() { return GetToken(TSqlParser.PARAMETERIZATION, 0); }
		public ITerminalNode SIMPLE() { return GetToken(TSqlParser.SIMPLE, 0); }
		public ITerminalNode FORCED() { return GetToken(TSqlParser.FORCED, 0); }
		public ITerminalNode QUERYTRACEON() { return GetToken(TSqlParser.QUERYTRACEON, 0); }
		public ITerminalNode RECOMPILE() { return GetToken(TSqlParser.RECOMPILE, 0); }
		public ITerminalNode ROBUST() { return GetToken(TSqlParser.ROBUST, 0); }
		public ITerminalNode USE() { return GetToken(TSqlParser.USE, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(_ctx, State);
		EnterRule(_localctx, 986, RULE_option);
		int _la;
		try {
			int _alt;
			State = 11928;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1628,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11881; Match(FAST);
				State = 11882; _localctx.number_rows = Match(DECIMAL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11883;
				_la = _input.La(1);
				if ( !(_la==HASH || _la==ORDER) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11884; Match(GROUP);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 11885;
				_la = _input.La(1);
				if ( !(_la==CONCAT || _la==HASH || _la==MERGE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11886; Match(UNION);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 11887;
				_la = _input.La(1);
				if ( !(_la==HASH || _la==LOOP || _la==MERGE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11888; Match(JOIN);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 11889; Match(EXPAND);
				State = 11890; Match(VIEWS);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 11891; Match(FORCE);
				State = 11892; Match(ORDER);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 11893; Match(IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 11894; Match(KEEP);
				State = 11895; Match(PLAN);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 11896; Match(KEEPFIXED);
				State = 11897; Match(PLAN);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 11898; Match(MAXDOP);
				State = 11899; _localctx.number_of_processors = Match(DECIMAL);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 11900; Match(MAXRECURSION);
				State = 11901; _localctx.number_recursion = Match(DECIMAL);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 11902; Match(OPTIMIZE);
				State = 11903; Match(FOR);
				State = 11904; Match(LR_BRACKET);
				State = 11905; optimize_for_arg();
				State = 11910;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1627,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 11906; Match(COMMA);
						State = 11907; optimize_for_arg();
						}
						} 
					}
					State = 11912;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1627,_ctx);
				}
				State = 11913; Match(RR_BRACKET);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 11915; Match(OPTIMIZE);
				State = 11916; Match(FOR);
				State = 11917; Match(UNKNOWN);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 11918; Match(PARAMETERIZATION);
				State = 11919;
				_la = _input.La(1);
				if ( !(_la==FORCED || _la==SIMPLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 11920; Match(QUERYTRACEON);
				State = 11921; _localctx.traceFlag = Match(DECIMAL);
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 11922; Match(RECOMPILE);
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 11923; Match(ROBUST);
				State = 11924; Match(PLAN);
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 11925; Match(USE);
				State = 11926; Match(PLAN);
				State = 11927; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Optimize_for_argContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode UNKNOWN() { return GetToken(TSqlParser.UNKNOWN, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public Optimize_for_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optimize_for_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOptimize_for_arg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOptimize_for_arg(this);
		}
	}

	[RuleVersion(0)]
	public Optimize_for_argContext optimize_for_arg() {
		Optimize_for_argContext _localctx = new Optimize_for_argContext(_ctx, State);
		EnterRule(_localctx, 988, RULE_optimize_for_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11930; Match(LOCAL_ID);
			State = 11937;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1630,_ctx) ) {
			case 1:
				{
				State = 11931; Match(UNKNOWN);
				}
				break;

			case 2:
				{
				State = 11932; Match(EQUAL);
				State = 11935;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1629,_ctx) ) {
				case 1:
					{
					State = 11933; constant();
					}
					break;

				case 2:
					{
					State = 11934; Match(NULL_);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_listContext : ParserRuleContext {
		public Select_list_elemContext _select_list_elem;
		public IList<Select_list_elemContext> _selectElement = new List<Select_list_elemContext>();
		public Select_list_elemContext[] select_list_elem() {
			return GetRuleContexts<Select_list_elemContext>();
		}
		public Select_list_elemContext select_list_elem(int i) {
			return GetRuleContext<Select_list_elemContext>(i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_list(this);
		}
	}

	[RuleVersion(0)]
	public Select_listContext select_list() {
		Select_listContext _localctx = new Select_listContext(_ctx, State);
		EnterRule(_localctx, 990, RULE_select_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11939; _localctx._select_list_elem = select_list_elem();
			_localctx._selectElement.Add(_localctx._select_list_elem);
			State = 11944;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1631,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11940; Match(COMMA);
					State = 11941; _localctx._select_list_elem = select_list_elem();
					_localctx._selectElement.Add(_localctx._select_list_elem);
					}
					} 
				}
				State = 11946;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1631,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Udt_method_argumentsContext : ParserRuleContext {
		public Execute_var_stringContext _execute_var_string;
		public IList<Execute_var_stringContext> _argument = new List<Execute_var_stringContext>();
		public Execute_var_stringContext[] execute_var_string() {
			return GetRuleContexts<Execute_var_stringContext>();
		}
		public Execute_var_stringContext execute_var_string(int i) {
			return GetRuleContext<Execute_var_stringContext>(i);
		}
		public Udt_method_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udt_method_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUdt_method_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUdt_method_arguments(this);
		}
	}

	[RuleVersion(0)]
	public Udt_method_argumentsContext udt_method_arguments() {
		Udt_method_argumentsContext _localctx = new Udt_method_argumentsContext(_ctx, State);
		EnterRule(_localctx, 992, RULE_udt_method_arguments);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 11947; Match(LR_BRACKET);
			State = 11948; _localctx._execute_var_string = execute_var_string();
			_localctx._argument.Add(_localctx._execute_var_string);
			State = 11953;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1632,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 11949; Match(COMMA);
					State = 11950; _localctx._execute_var_string = execute_var_string();
					_localctx._argument.Add(_localctx._execute_var_string);
					}
					} 
				}
				State = 11955;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1632,_ctx);
			}
			State = 11956; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsteriskContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode INSERTED() { return GetToken(TSqlParser.INSERTED, 0); }
		public ITerminalNode DELETED() { return GetToken(TSqlParser.DELETED, 0); }
		public AsteriskContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asterisk; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAsterisk(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAsterisk(this);
		}
	}

	[RuleVersion(0)]
	public AsteriskContext asterisk() {
		AsteriskContext _localctx = new AsteriskContext(_ctx, State);
		EnterRule(_localctx, 994, RULE_asterisk);
		int _la;
		try {
			State = 11967;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1634,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11961;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1633,_ctx) ) {
				case 1:
					{
					State = 11958; table_name();
					State = 11959; Match(DOT);
					}
					break;
				}
				State = 11963; Match(STAR);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11964;
				_la = _input.La(1);
				if ( !(_la==DELETED || _la==INSERTED) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 11965; Match(DOT);
				State = 11966; Match(STAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_elemContext : ParserRuleContext {
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode ROWGUID() { return GetToken(TSqlParser.ROWGUID, 0); }
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public Column_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_elem(this);
		}
	}

	[RuleVersion(0)]
	public Column_elemContext column_elem() {
		Column_elemContext _localctx = new Column_elemContext(_ctx, State);
		EnterRule(_localctx, 996, RULE_column_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11975;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1635,_ctx) ) {
			case 1:
				{
				State = 11969; full_column_name();
				}
				break;

			case 2:
				{
				State = 11970; Match(DOLLAR);
				State = 11971; Match(IDENTITY);
				}
				break;

			case 3:
				{
				State = 11972; Match(DOLLAR);
				State = 11973; Match(ROWGUID);
				}
				break;

			case 4:
				{
				State = 11974; Match(NULL_);
				}
				break;
			}
			State = 11978;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1636,_ctx) ) {
			case 1:
				{
				State = 11977; as_column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Udt_elemContext : ParserRuleContext {
		public Id_Context udt_column_name;
		public Id_Context non_static_attr;
		public Id_Context static_attr;
		public Udt_method_argumentsContext udt_method_arguments() {
			return GetRuleContext<Udt_method_argumentsContext>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public ITerminalNode DOUBLE_COLON() { return GetToken(TSqlParser.DOUBLE_COLON, 0); }
		public Udt_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udt_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUdt_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUdt_elem(this);
		}
	}

	[RuleVersion(0)]
	public Udt_elemContext udt_elem() {
		Udt_elemContext _localctx = new Udt_elemContext(_ctx, State);
		EnterRule(_localctx, 998, RULE_udt_elem);
		try {
			State = 11996;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1640,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11980; _localctx.udt_column_name = id_();
				State = 11981; Match(DOT);
				State = 11982; _localctx.non_static_attr = id_();
				State = 11983; udt_method_arguments();
				State = 11985;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1637,_ctx) ) {
				case 1:
					{
					State = 11984; as_column_alias();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11987; _localctx.udt_column_name = id_();
				State = 11988; Match(DOUBLE_COLON);
				State = 11989; _localctx.static_attr = id_();
				State = 11991;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1638,_ctx) ) {
				case 1:
					{
					State = 11990; udt_method_arguments();
					}
					break;
				}
				State = 11994;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1639,_ctx) ) {
				case 1:
					{
					State = 11993; as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_elemContext : ParserRuleContext {
		public Column_aliasContext leftAlias;
		public IToken eq;
		public ExpressionContext leftAssignment;
		public ExpressionContext expressionAs;
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public Expression_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExpression_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExpression_elem(this);
		}
	}

	[RuleVersion(0)]
	public Expression_elemContext expression_elem() {
		Expression_elemContext _localctx = new Expression_elemContext(_ctx, State);
		EnterRule(_localctx, 1000, RULE_expression_elem);
		try {
			State = 12006;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1642,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11998; _localctx.leftAlias = column_alias();
				State = 11999; _localctx.eq = Match(EQUAL);
				State = 12000; _localctx.leftAssignment = expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12002; _localctx.expressionAs = expression(0);
				State = 12004;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1641,_ctx) ) {
				case 1:
					{
					State = 12003; as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_list_elemContext : ParserRuleContext {
		public AsteriskContext asterisk() {
			return GetRuleContext<AsteriskContext>(0);
		}
		public Column_elemContext column_elem() {
			return GetRuleContext<Column_elemContext>(0);
		}
		public Udt_elemContext udt_elem() {
			return GetRuleContext<Udt_elemContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Expression_elemContext expression_elem() {
			return GetRuleContext<Expression_elemContext>(0);
		}
		public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public Select_list_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_list_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_list_elem(this);
		}
	}

	[RuleVersion(0)]
	public Select_list_elemContext select_list_elem() {
		Select_list_elemContext _localctx = new Select_list_elemContext(_ctx, State);
		EnterRule(_localctx, 1002, RULE_select_list_elem);
		try {
			State = 12031;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1646,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12008; asterisk();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12009; column_elem();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 12010; udt_elem();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 12011; Match(LOCAL_ID);
				State = 12014;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1643,_ctx) ) {
				case 1:
					{
					State = 12012; assignment_operator();
					}
					break;

				case 2:
					{
					State = 12013; Match(EQUAL);
					}
					break;
				}
				State = 12021;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1644,_ctx) ) {
				case 1:
					{
					State = 12016; expression(0);
					}
					break;

				case 2:
					{
					State = 12017; Match(NEXT);
					State = 12018; Match(VALUE);
					State = 12019; Match(FOR);
					State = 12020; table_name();
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 12023; expression_elem();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 12024; Match(NEXT);
				State = 12025; Match(VALUE);
				State = 12026; Match(FOR);
				State = 12027; table_name();
				State = 12029;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1645,_ctx) ) {
				case 1:
					{
					State = 12028; as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_sourcesContext : ParserRuleContext {
		public Table_sourceContext _table_source;
		public IList<Table_sourceContext> _source = new List<Table_sourceContext>();
		public Table_sourceContext[] table_source() {
			return GetRuleContexts<Table_sourceContext>();
		}
		public Table_sourceContext table_source(int i) {
			return GetRuleContext<Table_sourceContext>(i);
		}
		public Table_sourcesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_sources; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_sources(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_sources(this);
		}
	}

	[RuleVersion(0)]
	public Table_sourcesContext table_sources() {
		Table_sourcesContext _localctx = new Table_sourcesContext(_ctx, State);
		EnterRule(_localctx, 1004, RULE_table_sources);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 12033; _localctx._table_source = table_source();
			_localctx._source.Add(_localctx._table_source);
			State = 12038;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1647,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 12034; Match(COMMA);
					State = 12035; _localctx._table_source = table_source();
					_localctx._source.Add(_localctx._table_source);
					}
					} 
				}
				State = 12040;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1647,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_sourceContext : ParserRuleContext {
		public Table_source_item_joinedContext table_source_item_joined() {
			return GetRuleContext<Table_source_item_joinedContext>(0);
		}
		public Table_sourceContext table_source() {
			return GetRuleContext<Table_sourceContext>(0);
		}
		public Table_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_source(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_source(this);
		}
	}

	[RuleVersion(0)]
	public Table_sourceContext table_source() {
		Table_sourceContext _localctx = new Table_sourceContext(_ctx, State);
		EnterRule(_localctx, 1006, RULE_table_source);
		try {
			State = 12046;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1648,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12041; table_source_item_joined();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12042; Match(LR_BRACKET);
				State = 12043; table_source();
				State = 12044; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_source_item_joinedContext : ParserRuleContext {
		public Join_partContext _join_part;
		public IList<Join_partContext> _joins = new List<Join_partContext>();
		public Table_source_itemContext table_source_item() {
			return GetRuleContext<Table_source_itemContext>(0);
		}
		public Join_partContext[] join_part() {
			return GetRuleContexts<Join_partContext>();
		}
		public Join_partContext join_part(int i) {
			return GetRuleContext<Join_partContext>(i);
		}
		public Table_source_item_joinedContext table_source_item_joined() {
			return GetRuleContext<Table_source_item_joinedContext>(0);
		}
		public Table_source_item_joinedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_source_item_joined; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_source_item_joined(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_source_item_joined(this);
		}
	}

	[RuleVersion(0)]
	public Table_source_item_joinedContext table_source_item_joined() {
		Table_source_item_joinedContext _localctx = new Table_source_item_joinedContext(_ctx, State);
		EnterRule(_localctx, 1008, RULE_table_source_item_joined);
		try {
			int _alt;
			State = 12064;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1651,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12048; table_source_item();
				State = 12052;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1649,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 12049; _localctx._join_part = join_part();
						_localctx._joins.Add(_localctx._join_part);
						}
						} 
					}
					State = 12054;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1649,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12055; Match(LR_BRACKET);
				State = 12056; table_source_item_joined();
				State = 12057; Match(RR_BRACKET);
				State = 12061;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1650,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 12058; _localctx._join_part = join_part();
						_localctx._joins.Add(_localctx._join_part);
						}
						} 
					}
					State = 12063;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1650,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_source_itemContext : ParserRuleContext {
		public IToken loc_id;
		public IToken loc_id_call;
		public Function_callContext loc_fcall;
		public Function_callContext oldstyle_fcall;
		public Table_name_with_hintContext table_name_with_hint() {
			return GetRuleContext<Table_name_with_hintContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Rowset_functionContext rowset_function() {
			return GetRuleContext<Rowset_functionContext>(0);
		}
		public Derived_tableContext derived_table() {
			return GetRuleContext<Derived_tableContext>(0);
		}
		public Column_alias_listContext column_alias_list() {
			return GetRuleContext<Column_alias_listContext>(0);
		}
		public Change_tableContext change_table() {
			return GetRuleContext<Change_tableContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Nodes_methodContext nodes_method() {
			return GetRuleContext<Nodes_methodContext>(0);
		}
		public OpenqueryContext openquery() {
			return GetRuleContext<OpenqueryContext>(0);
		}
		public Open_xmlContext open_xml() {
			return GetRuleContext<Open_xmlContext>(0);
		}
		public Open_jsonContext open_json() {
			return GetRuleContext<Open_jsonContext>(0);
		}
		public ITerminalNode DOUBLE_COLON() { return GetToken(TSqlParser.DOUBLE_COLON, 0); }
		public Table_source_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_source_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_source_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_source_item(this);
		}
	}

	[RuleVersion(0)]
	public Table_source_itemContext table_source_item() {
		Table_source_itemContext _localctx = new Table_source_itemContext(_ctx, State);
		EnterRule(_localctx, 1010, RULE_table_source_item);
		try {
			State = 12130;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1668,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12066; table_name_with_hint();
				State = 12068;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1652,_ctx) ) {
				case 1:
					{
					State = 12067; as_table_alias();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12070; full_table_name();
				State = 12072;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1653,_ctx) ) {
				case 1:
					{
					State = 12071; with_table_hints();
					}
					break;
				}
				State = 12075;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1654,_ctx) ) {
				case 1:
					{
					State = 12074; as_table_alias();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 12077; rowset_function();
				State = 12079;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1655,_ctx) ) {
				case 1:
					{
					State = 12078; as_table_alias();
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 12081; derived_table();
				State = 12086;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1657,_ctx) ) {
				case 1:
					{
					State = 12082; as_table_alias();
					State = 12084;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1656,_ctx) ) {
					case 1:
						{
						State = 12083; column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 12088; change_table();
				State = 12090;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1658,_ctx) ) {
				case 1:
					{
					State = 12089; as_table_alias();
					}
					break;
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 12092; function_call();
				State = 12097;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1660,_ctx) ) {
				case 1:
					{
					State = 12093; as_table_alias();
					State = 12095;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1659,_ctx) ) {
					case 1:
						{
						State = 12094; column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 12099; _localctx.loc_id = Match(LOCAL_ID);
				State = 12101;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1661,_ctx) ) {
				case 1:
					{
					State = 12100; as_table_alias();
					}
					break;
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 12103; nodes_method();
				State = 12108;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1663,_ctx) ) {
				case 1:
					{
					State = 12104; as_table_alias();
					State = 12106;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1662,_ctx) ) {
					case 1:
						{
						State = 12105; column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 12110; openquery();
				State = 12112;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1664,_ctx) ) {
				case 1:
					{
					State = 12111; as_table_alias();
					}
					break;
				}
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 12114; _localctx.loc_id_call = Match(LOCAL_ID);
				State = 12115; Match(DOT);
				State = 12116; _localctx.loc_fcall = function_call();
				State = 12121;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1666,_ctx) ) {
				case 1:
					{
					State = 12117; as_table_alias();
					State = 12119;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1665,_ctx) ) {
					case 1:
						{
						State = 12118; column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 12123; open_xml();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 12124; open_json();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 12125; Match(DOUBLE_COLON);
				State = 12126; _localctx.oldstyle_fcall = function_call();
				State = 12128;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1667,_ctx) ) {
				case 1:
					{
					State = 12127; as_table_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_xmlContext : ParserRuleContext {
		public ITerminalNode OPENXML() { return GetToken(TSqlParser.OPENXML, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Schema_declarationContext schema_declaration() {
			return GetRuleContext<Schema_declarationContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public Open_xmlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_xml; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpen_xml(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpen_xml(this);
		}
	}

	[RuleVersion(0)]
	public Open_xmlContext open_xml() {
		Open_xmlContext _localctx = new Open_xmlContext(_ctx, State);
		EnterRule(_localctx, 1012, RULE_open_xml);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12132; Match(OPENXML);
			State = 12133; Match(LR_BRACKET);
			State = 12134; expression(0);
			State = 12135; Match(COMMA);
			State = 12136; expression(0);
			State = 12139;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1669,_ctx) ) {
			case 1:
				{
				State = 12137; Match(COMMA);
				State = 12138; expression(0);
				}
				break;
			}
			State = 12141; Match(RR_BRACKET);
			State = 12147;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1670,_ctx) ) {
			case 1:
				{
				State = 12142; Match(WITH);
				State = 12143; Match(LR_BRACKET);
				State = 12144; schema_declaration();
				State = 12145; Match(RR_BRACKET);
				}
				break;
			}
			State = 12150;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1671,_ctx) ) {
			case 1:
				{
				State = 12149; as_table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_jsonContext : ParserRuleContext {
		public ITerminalNode OPENJSON() { return GetToken(TSqlParser.OPENJSON, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Json_declarationContext json_declaration() {
			return GetRuleContext<Json_declarationContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public Open_jsonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_json; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpen_json(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpen_json(this);
		}
	}

	[RuleVersion(0)]
	public Open_jsonContext open_json() {
		Open_jsonContext _localctx = new Open_jsonContext(_ctx, State);
		EnterRule(_localctx, 1014, RULE_open_json);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12152; Match(OPENJSON);
			State = 12153; Match(LR_BRACKET);
			State = 12154; expression(0);
			State = 12157;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1672,_ctx) ) {
			case 1:
				{
				State = 12155; Match(COMMA);
				State = 12156; expression(0);
				}
				break;
			}
			State = 12159; Match(RR_BRACKET);
			State = 12165;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1673,_ctx) ) {
			case 1:
				{
				State = 12160; Match(WITH);
				State = 12161; Match(LR_BRACKET);
				State = 12162; json_declaration();
				State = 12163; Match(RR_BRACKET);
				}
				break;
			}
			State = 12168;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1674,_ctx) ) {
			case 1:
				{
				State = 12167; as_table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_declarationContext : ParserRuleContext {
		public Json_column_declarationContext _json_column_declaration;
		public IList<Json_column_declarationContext> _json_col = new List<Json_column_declarationContext>();
		public Json_column_declarationContext[] json_column_declaration() {
			return GetRuleContexts<Json_column_declarationContext>();
		}
		public Json_column_declarationContext json_column_declaration(int i) {
			return GetRuleContext<Json_column_declarationContext>(i);
		}
		public Json_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJson_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJson_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Json_declarationContext json_declaration() {
		Json_declarationContext _localctx = new Json_declarationContext(_ctx, State);
		EnterRule(_localctx, 1016, RULE_json_declaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 12170; _localctx._json_column_declaration = json_column_declaration();
			_localctx._json_col.Add(_localctx._json_column_declaration);
			State = 12175;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1675,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 12171; Match(COMMA);
					State = 12172; _localctx._json_column_declaration = json_column_declaration();
					_localctx._json_col.Add(_localctx._json_column_declaration);
					}
					} 
				}
				State = 12177;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1675,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_column_declarationContext : ParserRuleContext {
		public Column_declarationContext column_declaration() {
			return GetRuleContext<Column_declarationContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode JSON() { return GetToken(TSqlParser.JSON, 0); }
		public Json_column_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_column_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJson_column_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJson_column_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Json_column_declarationContext json_column_declaration() {
		Json_column_declarationContext _localctx = new Json_column_declarationContext(_ctx, State);
		EnterRule(_localctx, 1018, RULE_json_column_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12178; column_declaration();
			State = 12181;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1676,_ctx) ) {
			case 1:
				{
				State = 12179; Match(AS);
				State = 12180; Match(JSON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Schema_declarationContext : ParserRuleContext {
		public Column_declarationContext _column_declaration;
		public IList<Column_declarationContext> _xml_col = new List<Column_declarationContext>();
		public Column_declarationContext[] column_declaration() {
			return GetRuleContexts<Column_declarationContext>();
		}
		public Column_declarationContext column_declaration(int i) {
			return GetRuleContext<Column_declarationContext>(i);
		}
		public Schema_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSchema_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSchema_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Schema_declarationContext schema_declaration() {
		Schema_declarationContext _localctx = new Schema_declarationContext(_ctx, State);
		EnterRule(_localctx, 1020, RULE_schema_declaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 12183; _localctx._column_declaration = column_declaration();
			_localctx._xml_col.Add(_localctx._column_declaration);
			State = 12188;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1677,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 12184; Match(COMMA);
					State = 12185; _localctx._column_declaration = column_declaration();
					_localctx._xml_col.Add(_localctx._column_declaration);
					}
					} 
				}
				State = 12190;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1677,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_declarationContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Column_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Column_declarationContext column_declaration() {
		Column_declarationContext _localctx = new Column_declarationContext(_ctx, State);
		EnterRule(_localctx, 1022, RULE_column_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12191; id_();
			State = 12192; data_type();
			State = 12194;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1678,_ctx) ) {
			case 1:
				{
				State = 12193; Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_tableContext : ParserRuleContext {
		public Change_table_changesContext change_table_changes() {
			return GetRuleContext<Change_table_changesContext>(0);
		}
		public Change_table_versionContext change_table_version() {
			return GetRuleContext<Change_table_versionContext>(0);
		}
		public Change_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_table(this);
		}
	}

	[RuleVersion(0)]
	public Change_tableContext change_table() {
		Change_tableContext _localctx = new Change_tableContext(_ctx, State);
		EnterRule(_localctx, 1024, RULE_change_table);
		try {
			State = 12198;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1679,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12196; change_table_changes();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12197; change_table_version();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_table_changesContext : ParserRuleContext {
		public Table_nameContext changetable;
		public IToken changesid;
		public ITerminalNode CHANGETABLE() { return GetToken(TSqlParser.CHANGETABLE, 0); }
		public ITerminalNode CHANGES() { return GetToken(TSqlParser.CHANGES, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Change_table_changesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_table_changes; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_table_changes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_table_changes(this);
		}
	}

	[RuleVersion(0)]
	public Change_table_changesContext change_table_changes() {
		Change_table_changesContext _localctx = new Change_table_changesContext(_ctx, State);
		EnterRule(_localctx, 1026, RULE_change_table_changes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12200; Match(CHANGETABLE);
			State = 12201; Match(LR_BRACKET);
			State = 12202; Match(CHANGES);
			State = 12203; _localctx.changetable = table_name();
			State = 12204; Match(COMMA);
			State = 12205;
			_localctx.changesid = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==NULL_ || _la==LOCAL_ID || _la==DECIMAL) ) {
				_localctx.changesid = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 12206; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_table_versionContext : ParserRuleContext {
		public Table_nameContext versiontable;
		public Full_column_name_listContext pk_columns;
		public Select_listContext pk_values;
		public ITerminalNode CHANGETABLE() { return GetToken(TSqlParser.CHANGETABLE, 0); }
		public ITerminalNode VERSION() { return GetToken(TSqlParser.VERSION, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Full_column_name_listContext full_column_name_list() {
			return GetRuleContext<Full_column_name_listContext>(0);
		}
		public Select_listContext select_list() {
			return GetRuleContext<Select_listContext>(0);
		}
		public Change_table_versionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_table_version; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_table_version(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_table_version(this);
		}
	}

	[RuleVersion(0)]
	public Change_table_versionContext change_table_version() {
		Change_table_versionContext _localctx = new Change_table_versionContext(_ctx, State);
		EnterRule(_localctx, 1028, RULE_change_table_version);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12208; Match(CHANGETABLE);
			State = 12209; Match(LR_BRACKET);
			State = 12210; Match(VERSION);
			State = 12211; _localctx.versiontable = table_name();
			State = 12212; Match(COMMA);
			State = 12213; _localctx.pk_columns = full_column_name_list();
			State = 12214; Match(COMMA);
			State = 12215; _localctx.pk_values = select_list();
			State = 12216; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_partContext : ParserRuleContext {
		public Join_onContext join_on() {
			return GetRuleContext<Join_onContext>(0);
		}
		public Cross_joinContext cross_join() {
			return GetRuleContext<Cross_joinContext>(0);
		}
		public Apply_Context apply_() {
			return GetRuleContext<Apply_Context>(0);
		}
		public PivotContext pivot() {
			return GetRuleContext<PivotContext>(0);
		}
		public UnpivotContext unpivot() {
			return GetRuleContext<UnpivotContext>(0);
		}
		public Join_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_part; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJoin_part(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJoin_part(this);
		}
	}

	[RuleVersion(0)]
	public Join_partContext join_part() {
		Join_partContext _localctx = new Join_partContext(_ctx, State);
		EnterRule(_localctx, 1030, RULE_join_part);
		try {
			State = 12223;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1680,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12218; join_on();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12219; cross_join();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 12220; apply_();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 12221; pivot();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 12222; unpivot();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_onContext : ParserRuleContext {
		public IToken inner;
		public IToken join_type;
		public IToken outer;
		public IToken join_hint;
		public Table_sourceContext source;
		public Search_conditionContext cond;
		public ITerminalNode JOIN() { return GetToken(TSqlParser.JOIN, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Table_sourceContext table_source() {
			return GetRuleContext<Table_sourceContext>(0);
		}
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode LEFT() { return GetToken(TSqlParser.LEFT, 0); }
		public ITerminalNode RIGHT() { return GetToken(TSqlParser.RIGHT, 0); }
		public ITerminalNode FULL() { return GetToken(TSqlParser.FULL, 0); }
		public ITerminalNode LOOP() { return GetToken(TSqlParser.LOOP, 0); }
		public ITerminalNode HASH() { return GetToken(TSqlParser.HASH, 0); }
		public ITerminalNode MERGE() { return GetToken(TSqlParser.MERGE, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode INNER() { return GetToken(TSqlParser.INNER, 0); }
		public ITerminalNode OUTER() { return GetToken(TSqlParser.OUTER, 0); }
		public Join_onContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_on; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJoin_on(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJoin_on(this);
		}
	}

	[RuleVersion(0)]
	public Join_onContext join_on() {
		Join_onContext _localctx = new Join_onContext(_ctx, State);
		EnterRule(_localctx, 1032, RULE_join_on);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12232;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1683,_ctx) ) {
			case 1:
				{
				State = 12226;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1681,_ctx) ) {
				case 1:
					{
					State = 12225; _localctx.inner = Match(INNER);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 12228;
				_localctx.join_type = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
					_localctx.join_type = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 12230;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1682,_ctx) ) {
				case 1:
					{
					State = 12229; _localctx.outer = Match(OUTER);
					}
					break;
				}
				}
				break;
			}
			State = 12235;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1684,_ctx) ) {
			case 1:
				{
				State = 12234;
				_localctx.join_hint = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==HASH || _la==LOOP || _la==MERGE || _la==REMOTE) ) {
					_localctx.join_hint = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 12237; Match(JOIN);
			State = 12238; _localctx.source = table_source();
			State = 12239; Match(ON);
			State = 12240; _localctx.cond = search_condition(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cross_joinContext : ParserRuleContext {
		public ITerminalNode CROSS() { return GetToken(TSqlParser.CROSS, 0); }
		public ITerminalNode JOIN() { return GetToken(TSqlParser.JOIN, 0); }
		public Table_sourceContext table_source() {
			return GetRuleContext<Table_sourceContext>(0);
		}
		public Cross_joinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cross_join; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCross_join(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCross_join(this);
		}
	}

	[RuleVersion(0)]
	public Cross_joinContext cross_join() {
		Cross_joinContext _localctx = new Cross_joinContext(_ctx, State);
		EnterRule(_localctx, 1034, RULE_cross_join);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12242; Match(CROSS);
			State = 12243; Match(JOIN);
			State = 12244; table_source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Apply_Context : ParserRuleContext {
		public IToken apply_style;
		public Table_sourceContext source;
		public ITerminalNode APPLY() { return GetToken(TSqlParser.APPLY, 0); }
		public Table_sourceContext table_source() {
			return GetRuleContext<Table_sourceContext>(0);
		}
		public ITerminalNode CROSS() { return GetToken(TSqlParser.CROSS, 0); }
		public ITerminalNode OUTER() { return GetToken(TSqlParser.OUTER, 0); }
		public Apply_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_apply_; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterApply_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitApply_(this);
		}
	}

	[RuleVersion(0)]
	public Apply_Context apply_() {
		Apply_Context _localctx = new Apply_Context(_ctx, State);
		EnterRule(_localctx, 1036, RULE_apply_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12246;
			_localctx.apply_style = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==CROSS || _la==OUTER) ) {
				_localctx.apply_style = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 12247; Match(APPLY);
			State = 12248; _localctx.source = table_source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PivotContext : ParserRuleContext {
		public ITerminalNode PIVOT() { return GetToken(TSqlParser.PIVOT, 0); }
		public Pivot_clauseContext pivot_clause() {
			return GetRuleContext<Pivot_clauseContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public PivotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPivot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPivot(this);
		}
	}

	[RuleVersion(0)]
	public PivotContext pivot() {
		PivotContext _localctx = new PivotContext(_ctx, State);
		EnterRule(_localctx, 1038, RULE_pivot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12250; Match(PIVOT);
			State = 12251; pivot_clause();
			State = 12252; as_table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnpivotContext : ParserRuleContext {
		public ITerminalNode UNPIVOT() { return GetToken(TSqlParser.UNPIVOT, 0); }
		public Unpivot_clauseContext unpivot_clause() {
			return GetRuleContext<Unpivot_clauseContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public UnpivotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpivot; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUnpivot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUnpivot(this);
		}
	}

	[RuleVersion(0)]
	public UnpivotContext unpivot() {
		UnpivotContext _localctx = new UnpivotContext(_ctx, State);
		EnterRule(_localctx, 1040, RULE_unpivot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12254; Match(UNPIVOT);
			State = 12255; unpivot_clause();
			State = 12256; as_table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pivot_clauseContext : ParserRuleContext {
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return GetRuleContext<Aggregate_windowed_functionContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public Column_alias_listContext column_alias_list() {
			return GetRuleContext<Column_alias_listContext>(0);
		}
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPivot_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPivot_clause(this);
		}
	}

	[RuleVersion(0)]
	public Pivot_clauseContext pivot_clause() {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, State);
		EnterRule(_localctx, 1042, RULE_pivot_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12258; Match(LR_BRACKET);
			State = 12259; aggregate_windowed_function();
			State = 12260; Match(FOR);
			State = 12261; full_column_name();
			State = 12262; Match(IN);
			State = 12263; column_alias_list();
			State = 12264; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unpivot_clauseContext : ParserRuleContext {
		public ExpressionContext unpivot_exp;
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public Full_column_name_listContext full_column_name_list() {
			return GetRuleContext<Full_column_name_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpivot_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUnpivot_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUnpivot_clause(this);
		}
	}

	[RuleVersion(0)]
	public Unpivot_clauseContext unpivot_clause() {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, State);
		EnterRule(_localctx, 1044, RULE_unpivot_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12266; Match(LR_BRACKET);
			State = 12267; _localctx.unpivot_exp = expression(0);
			State = 12268; Match(FOR);
			State = 12269; full_column_name();
			State = 12270; Match(IN);
			State = 12271; Match(LR_BRACKET);
			State = 12272; full_column_name_list();
			State = 12273; Match(RR_BRACKET);
			State = 12274; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_column_name_listContext : ParserRuleContext {
		public Full_column_nameContext _full_column_name;
		public IList<Full_column_nameContext> _column = new List<Full_column_nameContext>();
		public Full_column_nameContext[] full_column_name() {
			return GetRuleContexts<Full_column_nameContext>();
		}
		public Full_column_nameContext full_column_name(int i) {
			return GetRuleContext<Full_column_nameContext>(i);
		}
		public Full_column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_column_name_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFull_column_name_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFull_column_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Full_column_name_listContext full_column_name_list() {
		Full_column_name_listContext _localctx = new Full_column_name_listContext(_ctx, State);
		EnterRule(_localctx, 1046, RULE_full_column_name_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 12276; _localctx._full_column_name = full_column_name();
			_localctx._column.Add(_localctx._full_column_name);
			State = 12281;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1685,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 12277; Match(COMMA);
					State = 12278; _localctx._full_column_name = full_column_name();
					_localctx._column.Add(_localctx._full_column_name);
					}
					} 
				}
				State = 12283;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1685,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_name_with_hintContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Table_name_with_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name_with_hint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_name_with_hint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_name_with_hint(this);
		}
	}

	[RuleVersion(0)]
	public Table_name_with_hintContext table_name_with_hint() {
		Table_name_with_hintContext _localctx = new Table_name_with_hintContext(_ctx, State);
		EnterRule(_localctx, 1048, RULE_table_name_with_hint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12284; table_name();
			State = 12286;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1686,_ctx) ) {
			case 1:
				{
				State = 12285; with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rowset_functionContext : ParserRuleContext {
		public IToken provider_name;
		public IToken connectionString;
		public IToken sql;
		public IToken data_file;
		public ITerminalNode OPENROWSET() { return GetToken(TSqlParser.OPENROWSET, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode BULK() { return GetToken(TSqlParser.BULK, 0); }
		public Bulk_optionContext[] bulk_option() {
			return GetRuleContexts<Bulk_optionContext>();
		}
		public Bulk_optionContext bulk_option(int i) {
			return GetRuleContext<Bulk_optionContext>(i);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Rowset_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowset_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRowset_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRowset_function(this);
		}
	}

	[RuleVersion(0)]
	public Rowset_functionContext rowset_function() {
		Rowset_functionContext _localctx = new Rowset_functionContext(_ctx, State);
		EnterRule(_localctx, 1050, RULE_rowset_function);
		try {
			int _alt;
			State = 12314;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1689,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 12288; Match(OPENROWSET);
				State = 12289; Match(LR_BRACKET);
				State = 12290; _localctx.provider_name = Match(STRING);
				State = 12291; Match(COMMA);
				State = 12292; _localctx.connectionString = Match(STRING);
				State = 12293; Match(COMMA);
				State = 12294; _localctx.sql = Match(STRING);
				State = 12295; Match(RR_BRACKET);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 12296; Match(OPENROWSET);
				State = 12297; Match(LR_BRACKET);
				State = 12298; Match(BULK);
				State = 12299; _localctx.data_file = Match(STRING);
				State = 12300; Match(COMMA);
				State = 12310;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1688,_ctx) ) {
				case 1:
					{
					State = 12301; bulk_option();
					State = 12306;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1687,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 12302; Match(COMMA);
							State = 12303; bulk_option();
							}
							} 
						}
						State = 12308;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1687,_ctx);
					}
					}
					break;

				case 2:
					{
					State = 12309; id_();
					}
					break;
				}
				State = 12312; Match(RR_BRACKET);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bulk_optionContext : ParserRuleContext {
		public IToken bulk_option_value;
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Bulk_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bulk_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBulk_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBulk_option(this);
		}
	}

	[RuleVersion(0)]
	public Bulk_optionContext bulk_option() {
		Bulk_optionContext _localctx = new Bulk_optionContext(_ctx, State);
		EnterRule(_localctx, 1052, RULE_bulk_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12316; id_();
			State = 12317; Match(EQUAL);
			State = 12318;
			_localctx.bulk_option_value = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==DECIMAL || _la==STRING) ) {
				_localctx.bulk_option_value = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_tableContext : ParserRuleContext {
		public SubqueryContext[] subquery() {
			return GetRuleContexts<SubqueryContext>();
		}
		public SubqueryContext subquery(int i) {
			return GetRuleContext<SubqueryContext>(i);
		}
		public ITerminalNode[] UNION() { return GetTokens(TSqlParser.UNION); }
		public ITerminalNode UNION(int i) {
			return GetToken(TSqlParser.UNION, i);
		}
		public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		public Table_value_constructorContext table_value_constructor() {
			return GetRuleContext<Table_value_constructorContext>(0);
		}
		public Derived_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDerived_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDerived_table(this);
		}
	}

	[RuleVersion(0)]
	public Derived_tableContext derived_table() {
		Derived_tableContext _localctx = new Derived_tableContext(_ctx, State);
		EnterRule(_localctx, 1054, RULE_derived_table);
		try {
			int _alt;
			State = 12338;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1691,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12320; subquery();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12321; Match(LR_BRACKET);
				State = 12322; subquery();
				State = 12328;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1690,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 12323; Match(UNION);
						State = 12324; Match(ALL);
						State = 12325; subquery();
						}
						} 
					}
					State = 12330;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1690,_ctx);
				}
				State = 12331; Match(RR_BRACKET);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 12333; table_value_constructor();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 12334; Match(LR_BRACKET);
				State = 12335; table_value_constructor();
				State = 12336; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
	 
		public Function_callContext() { }
		public virtual void CopyFrom(Function_callContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RANKING_WINDOWED_FUNCContext : Function_callContext {
		public Ranking_windowed_functionContext ranking_windowed_function() {
			return GetRuleContext<Ranking_windowed_functionContext>(0);
		}
		public RANKING_WINDOWED_FUNCContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRANKING_WINDOWED_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRANKING_WINDOWED_FUNC(this);
		}
	}
	public partial class AGGREGATE_WINDOWED_FUNCContext : Function_callContext {
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return GetRuleContext<Aggregate_windowed_functionContext>(0);
		}
		public AGGREGATE_WINDOWED_FUNCContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAGGREGATE_WINDOWED_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAGGREGATE_WINDOWED_FUNC(this);
		}
	}
	public partial class ANALYTIC_WINDOWED_FUNCContext : Function_callContext {
		public Analytic_windowed_functionContext analytic_windowed_function() {
			return GetRuleContext<Analytic_windowed_functionContext>(0);
		}
		public ANALYTIC_WINDOWED_FUNCContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterANALYTIC_WINDOWED_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitANALYTIC_WINDOWED_FUNC(this);
		}
	}
	public partial class BUILT_IN_FUNCContext : Function_callContext {
		public Built_in_functionsContext built_in_functions() {
			return GetRuleContext<Built_in_functionsContext>(0);
		}
		public BUILT_IN_FUNCContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBUILT_IN_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBUILT_IN_FUNC(this);
		}
	}
	public partial class SCALAR_FUNCTIONContext : Function_callContext {
		public Scalar_function_nameContext scalar_function_name() {
			return GetRuleContext<Scalar_function_nameContext>(0);
		}
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public SCALAR_FUNCTIONContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSCALAR_FUNCTION(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSCALAR_FUNCTION(this);
		}
	}
	public partial class FREE_TEXTContext : Function_callContext {
		public Freetext_functionContext freetext_function() {
			return GetRuleContext<Freetext_functionContext>(0);
		}
		public FREE_TEXTContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFREE_TEXT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFREE_TEXT(this);
		}
	}
	public partial class PARTITION_FUNCContext : Function_callContext {
		public Partition_functionContext partition_function() {
			return GetRuleContext<Partition_functionContext>(0);
		}
		public PARTITION_FUNCContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPARTITION_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPARTITION_FUNC(this);
		}
	}
	public partial class HIERARCHYID_METHODContext : Function_callContext {
		public Hierarchyid_static_methodContext hierarchyid_static_method() {
			return GetRuleContext<Hierarchyid_static_methodContext>(0);
		}
		public HIERARCHYID_METHODContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterHIERARCHYID_METHOD(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitHIERARCHYID_METHOD(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(_ctx, State);
		EnterRule(_localctx, 1056, RULE_function_call);
		try {
			State = 12354;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1693,_ctx) ) {
			case 1:
				_localctx = new RANKING_WINDOWED_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 12340; ranking_windowed_function();
				}
				break;

			case 2:
				_localctx = new AGGREGATE_WINDOWED_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 12341; aggregate_windowed_function();
				}
				break;

			case 3:
				_localctx = new ANALYTIC_WINDOWED_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 12342; analytic_windowed_function();
				}
				break;

			case 4:
				_localctx = new BUILT_IN_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 12343; built_in_functions();
				}
				break;

			case 5:
				_localctx = new SCALAR_FUNCTIONContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 12344; scalar_function_name();
				State = 12345; Match(LR_BRACKET);
				State = 12347;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1692,_ctx) ) {
				case 1:
					{
					State = 12346; expression_list_();
					}
					break;
				}
				State = 12349; Match(RR_BRACKET);
				}
				break;

			case 6:
				_localctx = new FREE_TEXTContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 12351; freetext_function();
				}
				break;

			case 7:
				_localctx = new PARTITION_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 12352; partition_function();
				}
				break;

			case 8:
				_localctx = new HIERARCHYID_METHODContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 12353; hierarchyid_static_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_functionContext : ParserRuleContext {
		public Id_Context database;
		public Id_Context func_name;
		public ITerminalNode DOLLAR_PARTITION() { return GetToken(TSqlParser.DOLLAR_PARTITION, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Partition_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPartition_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPartition_function(this);
		}
	}

	[RuleVersion(0)]
	public Partition_functionContext partition_function() {
		Partition_functionContext _localctx = new Partition_functionContext(_ctx, State);
		EnterRule(_localctx, 1058, RULE_partition_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12359;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1694,_ctx) ) {
			case 1:
				{
				State = 12356; _localctx.database = id_();
				State = 12357; Match(DOT);
				}
				break;
			}
			State = 12361; Match(DOLLAR_PARTITION);
			State = 12362; Match(DOT);
			State = 12363; _localctx.func_name = id_();
			State = 12364; Match(LR_BRACKET);
			State = 12365; expression(0);
			State = 12366; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Freetext_functionContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode CONTAINSTABLE() { return GetToken(TSqlParser.CONTAINSTABLE, 0); }
		public ITerminalNode FREETEXTTABLE() { return GetToken(TSqlParser.FREETEXTTABLE, 0); }
		public Full_column_nameContext[] full_column_name() {
			return GetRuleContexts<Full_column_nameContext>();
		}
		public Full_column_nameContext full_column_name(int i) {
			return GetRuleContext<Full_column_nameContext>(i);
		}
		public ITerminalNode LANGUAGE() { return GetToken(TSqlParser.LANGUAGE, 0); }
		public ITerminalNode SEMANTICSIMILARITYTABLE() { return GetToken(TSqlParser.SEMANTICSIMILARITYTABLE, 0); }
		public ITerminalNode SEMANTICKEYPHRASETABLE() { return GetToken(TSqlParser.SEMANTICKEYPHRASETABLE, 0); }
		public ITerminalNode SEMANTICSIMILARITYDETAILSTABLE() { return GetToken(TSqlParser.SEMANTICSIMILARITYDETAILSTABLE, 0); }
		public Freetext_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_freetext_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFreetext_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFreetext_function(this);
		}
	}

	[RuleVersion(0)]
	public Freetext_functionContext freetext_function() {
		Freetext_functionContext _localctx = new Freetext_functionContext(_ctx, State);
		EnterRule(_localctx, 1060, RULE_freetext_function);
		int _la;
		try {
			int _alt;
			State = 12436;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1701,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12368;
				_la = _input.La(1);
				if ( !(_la==CONTAINSTABLE || _la==FREETEXTTABLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 12369; Match(LR_BRACKET);
				State = 12370; table_name();
				State = 12371; Match(COMMA);
				State = 12385;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1696,_ctx) ) {
				case 1:
					{
					State = 12372; full_column_name();
					}
					break;

				case 2:
					{
					State = 12373; Match(LR_BRACKET);
					State = 12374; full_column_name();
					State = 12379;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1695,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 12375; Match(COMMA);
							State = 12376; full_column_name();
							}
							} 
						}
						State = 12381;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1695,_ctx);
					}
					State = 12382; Match(RR_BRACKET);
					}
					break;

				case 3:
					{
					State = 12384; Match(STAR);
					}
					break;
				}
				State = 12387; Match(COMMA);
				State = 12388; expression(0);
				State = 12392;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1697,_ctx) ) {
				case 1:
					{
					State = 12389; Match(COMMA);
					State = 12390; Match(LANGUAGE);
					State = 12391; expression(0);
					}
					break;
				}
				State = 12396;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1698,_ctx) ) {
				case 1:
					{
					State = 12394; Match(COMMA);
					State = 12395; expression(0);
					}
					break;
				}
				State = 12398; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12400;
				_la = _input.La(1);
				if ( !(_la==SEMANTICKEYPHRASETABLE || _la==SEMANTICSIMILARITYTABLE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 12401; Match(LR_BRACKET);
				State = 12402; table_name();
				State = 12403; Match(COMMA);
				State = 12417;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1700,_ctx) ) {
				case 1:
					{
					State = 12404; full_column_name();
					}
					break;

				case 2:
					{
					State = 12405; Match(LR_BRACKET);
					State = 12406; full_column_name();
					State = 12411;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1699,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 12407; Match(COMMA);
							State = 12408; full_column_name();
							}
							} 
						}
						State = 12413;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1699,_ctx);
					}
					State = 12414; Match(RR_BRACKET);
					}
					break;

				case 3:
					{
					State = 12416; Match(STAR);
					}
					break;
				}
				State = 12419; Match(COMMA);
				State = 12420; expression(0);
				State = 12421; Match(RR_BRACKET);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 12423; Match(SEMANTICSIMILARITYDETAILSTABLE);
				State = 12424; Match(LR_BRACKET);
				State = 12425; table_name();
				State = 12426; Match(COMMA);
				State = 12427; full_column_name();
				State = 12428; Match(COMMA);
				State = 12429; expression(0);
				State = 12430; Match(COMMA);
				State = 12431; full_column_name();
				State = 12432; Match(COMMA);
				State = 12433; expression(0);
				State = 12434; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Freetext_predicateContext : ParserRuleContext {
		public ITerminalNode CONTAINS() { return GetToken(TSqlParser.CONTAINS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Full_column_nameContext[] full_column_name() {
			return GetRuleContexts<Full_column_nameContext>();
		}
		public Full_column_nameContext full_column_name(int i) {
			return GetRuleContext<Full_column_nameContext>(i);
		}
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode FREETEXT() { return GetToken(TSqlParser.FREETEXT, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode LANGUAGE() { return GetToken(TSqlParser.LANGUAGE, 0); }
		public Freetext_predicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_freetext_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFreetext_predicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFreetext_predicate(this);
		}
	}

	[RuleVersion(0)]
	public Freetext_predicateContext freetext_predicate() {
		Freetext_predicateContext _localctx = new Freetext_predicateContext(_ctx, State);
		EnterRule(_localctx, 1062, RULE_freetext_predicate);
		try {
			int _alt;
			State = 12494;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1707,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12438; Match(CONTAINS);
				State = 12439; Match(LR_BRACKET);
				State = 12460;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1703,_ctx) ) {
				case 1:
					{
					State = 12440; full_column_name();
					}
					break;

				case 2:
					{
					State = 12441; Match(LR_BRACKET);
					State = 12442; full_column_name();
					State = 12447;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1702,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 12443; Match(COMMA);
							State = 12444; full_column_name();
							}
							} 
						}
						State = 12449;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1702,_ctx);
					}
					State = 12450; Match(RR_BRACKET);
					}
					break;

				case 3:
					{
					State = 12452; Match(STAR);
					}
					break;

				case 4:
					{
					State = 12453; Match(PROPERTY);
					State = 12454; Match(LR_BRACKET);
					State = 12455; full_column_name();
					State = 12456; Match(COMMA);
					State = 12457; expression(0);
					State = 12458; Match(RR_BRACKET);
					}
					break;
				}
				State = 12462; Match(COMMA);
				State = 12463; expression(0);
				State = 12464; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12466; Match(FREETEXT);
				State = 12467; Match(LR_BRACKET);
				State = 12468; table_name();
				State = 12469; Match(COMMA);
				State = 12483;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1705,_ctx) ) {
				case 1:
					{
					State = 12470; full_column_name();
					}
					break;

				case 2:
					{
					State = 12471; Match(LR_BRACKET);
					State = 12472; full_column_name();
					State = 12477;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1704,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 12473; Match(COMMA);
							State = 12474; full_column_name();
							}
							} 
						}
						State = 12479;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1704,_ctx);
					}
					State = 12480; Match(RR_BRACKET);
					}
					break;

				case 3:
					{
					State = 12482; Match(STAR);
					}
					break;
				}
				State = 12485; Match(COMMA);
				State = 12486; expression(0);
				State = 12490;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1706,_ctx) ) {
				case 1:
					{
					State = 12487; Match(COMMA);
					State = 12488; Match(LANGUAGE);
					State = 12489; expression(0);
					}
					break;
				}
				State = 12492; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Built_in_functionsContext : ParserRuleContext {
		public Built_in_functionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_built_in_functions; } }
	 
		public Built_in_functionsContext() { }
		public virtual void CopyFrom(Built_in_functionsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BINARY_CHECKSUMContext : Built_in_functionsContext {
		public ITerminalNode BINARY_CHECKSUM() { return GetToken(TSqlParser.BINARY_CHECKSUM, 0); }
		public BINARY_CHECKSUMContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBINARY_CHECKSUM(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBINARY_CHECKSUM(this);
		}
	}
	public partial class CASTContext : Built_in_functionsContext {
		public ITerminalNode CAST() { return GetToken(TSqlParser.CAST, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public CASTContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCAST(this);
		}
	}
	public partial class TRY_CASTContext : Built_in_functionsContext {
		public ITerminalNode TRY_CAST() { return GetToken(TSqlParser.TRY_CAST, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public TRY_CASTContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTRY_CAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTRY_CAST(this);
		}
	}
	public partial class CONVERTContext : Built_in_functionsContext {
		public Data_typeContext convert_data_type;
		public ExpressionContext convert_expression;
		public ExpressionContext style;
		public ITerminalNode CONVERT() { return GetToken(TSqlParser.CONVERT, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CONVERTContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCONVERT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCONVERT(this);
		}
	}
	public partial class CHECKSUMContext : Built_in_functionsContext {
		public ITerminalNode CHECKSUM() { return GetToken(TSqlParser.CHECKSUM, 0); }
		public CHECKSUMContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCHECKSUM(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCHECKSUM(this);
		}
	}
	public partial class COALESCEContext : Built_in_functionsContext {
		public ITerminalNode COALESCE() { return GetToken(TSqlParser.COALESCE, 0); }
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public COALESCEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCOALESCE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCOALESCE(this);
		}
	}
	public partial class CURRENT_TIMESTAMPContext : Built_in_functionsContext {
		public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(TSqlParser.CURRENT_TIMESTAMP, 0); }
		public CURRENT_TIMESTAMPContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCURRENT_TIMESTAMP(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCURRENT_TIMESTAMP(this);
		}
	}
	public partial class CURRENT_USERContext : Built_in_functionsContext {
		public ITerminalNode CURRENT_USER() { return GetToken(TSqlParser.CURRENT_USER, 0); }
		public CURRENT_USERContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCURRENT_USER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCURRENT_USER(this);
		}
	}
	public partial class DATEADDContext : Built_in_functionsContext {
		public IToken datepart;
		public ExpressionContext number;
		public ExpressionContext date;
		public ITerminalNode DATEADD() { return GetToken(TSqlParser.DATEADD, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DATEADDContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATEADD(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATEADD(this);
		}
	}
	public partial class DATEDIFFContext : Built_in_functionsContext {
		public IToken datepart;
		public ExpressionContext date_first;
		public ExpressionContext date_second;
		public ITerminalNode DATEDIFF() { return GetToken(TSqlParser.DATEDIFF, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DATEDIFFContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATEDIFF(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATEDIFF(this);
		}
	}
	public partial class DATENAMEContext : Built_in_functionsContext {
		public IToken datepart;
		public ExpressionContext date;
		public ITerminalNode DATENAME() { return GetToken(TSqlParser.DATENAME, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DATENAMEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATENAME(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATENAME(this);
		}
	}
	public partial class DATEPARTContext : Built_in_functionsContext {
		public IToken datepart;
		public ExpressionContext date;
		public ITerminalNode DATEPART() { return GetToken(TSqlParser.DATEPART, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DATEPARTContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATEPART(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATEPART(this);
		}
	}
	public partial class GETDATEContext : Built_in_functionsContext {
		public ITerminalNode GETDATE() { return GetToken(TSqlParser.GETDATE, 0); }
		public GETDATEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGETDATE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGETDATE(this);
		}
	}
	public partial class GETUTCDATEContext : Built_in_functionsContext {
		public ITerminalNode GETUTCDATE() { return GetToken(TSqlParser.GETUTCDATE, 0); }
		public GETUTCDATEContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGETUTCDATE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGETUTCDATE(this);
		}
	}
	public partial class IDENTITYContext : Built_in_functionsContext {
		public IToken seed;
		public IToken increment;
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public IDENTITYContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIDENTITY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIDENTITY(this);
		}
	}
	public partial class MIN_ACTIVE_ROWVERSIONContext : Built_in_functionsContext {
		public ITerminalNode MIN_ACTIVE_ROWVERSION() { return GetToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		public MIN_ACTIVE_ROWVERSIONContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMIN_ACTIVE_ROWVERSION(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMIN_ACTIVE_ROWVERSION(this);
		}
	}
	public partial class NULLIFContext : Built_in_functionsContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NULLIF() { return GetToken(TSqlParser.NULLIF, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NULLIFContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNULLIF(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNULLIF(this);
		}
	}
	public partial class STUFFContext : Built_in_functionsContext {
		public ExpressionContext str;
		public IToken from;
		public IToken to;
		public ExpressionContext str_with;
		public ITerminalNode STUFF() { return GetToken(TSqlParser.STUFF, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public STUFFContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSTUFF(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSTUFF(this);
		}
	}
	public partial class SESSION_USERContext : Built_in_functionsContext {
		public ITerminalNode SESSION_USER() { return GetToken(TSqlParser.SESSION_USER, 0); }
		public SESSION_USERContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSESSION_USER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSESSION_USER(this);
		}
	}
	public partial class SYSTEM_USERContext : Built_in_functionsContext {
		public ITerminalNode SYSTEM_USER() { return GetToken(TSqlParser.SYSTEM_USER, 0); }
		public SYSTEM_USERContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSYSTEM_USER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSYSTEM_USER(this);
		}
	}
	public partial class USERContext : Built_in_functionsContext {
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public USERContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUSER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUSER(this);
		}
	}
	public partial class ISNULLContext : Built_in_functionsContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode ISNULL() { return GetToken(TSqlParser.ISNULL, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ISNULLContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterISNULL(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitISNULL(this);
		}
	}
	public partial class XML_DATA_TYPE_FUNCContext : Built_in_functionsContext {
		public Xml_data_type_methodsContext xml_data_type_methods() {
			return GetRuleContext<Xml_data_type_methodsContext>(0);
		}
		public XML_DATA_TYPE_FUNCContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXML_DATA_TYPE_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXML_DATA_TYPE_FUNC(this);
		}
	}
	public partial class IIFContext : Built_in_functionsContext {
		public Search_conditionContext cond;
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode IIF() { return GetToken(TSqlParser.IIF, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IIFContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIIF(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIIF(this);
		}
	}
	public partial class STRINGAGGContext : Built_in_functionsContext {
		public ExpressionContext expr;
		public ExpressionContext separator;
		public ITerminalNode STRING_AGG() { return GetToken(TSqlParser.STRING_AGG, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode WITHIN() { return GetToken(TSqlParser.WITHIN, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public STRINGAGGContext(Built_in_functionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSTRINGAGG(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSTRINGAGG(this);
		}
	}

	[RuleVersion(0)]
	public Built_in_functionsContext built_in_functions() {
		Built_in_functionsContext _localctx = new Built_in_functionsContext(_ctx, State);
		EnterRule(_localctx, 1064, RULE_built_in_functions);
		try {
			State = 12642;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1712,_ctx) ) {
			case 1:
				_localctx = new BINARY_CHECKSUMContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 12496; Match(BINARY_CHECKSUM);
				State = 12497; Match(LR_BRACKET);
				State = 12498; Match(STAR);
				State = 12499; Match(RR_BRACKET);
				}
				break;

			case 2:
				_localctx = new CASTContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 12500; Match(CAST);
				State = 12501; Match(LR_BRACKET);
				State = 12502; expression(0);
				State = 12503; Match(AS);
				State = 12504; data_type();
				State = 12505; Match(RR_BRACKET);
				}
				break;

			case 3:
				_localctx = new TRY_CASTContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 12507; Match(TRY_CAST);
				State = 12508; Match(LR_BRACKET);
				State = 12509; expression(0);
				State = 12510; Match(AS);
				State = 12511; data_type();
				State = 12512; Match(RR_BRACKET);
				}
				break;

			case 4:
				_localctx = new CONVERTContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 12514; Match(CONVERT);
				State = 12515; Match(LR_BRACKET);
				State = 12516; ((CONVERTContext)_localctx).convert_data_type = data_type();
				State = 12517; Match(COMMA);
				State = 12518; ((CONVERTContext)_localctx).convert_expression = expression(0);
				State = 12521;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1708,_ctx) ) {
				case 1:
					{
					State = 12519; Match(COMMA);
					State = 12520; ((CONVERTContext)_localctx).style = expression(0);
					}
					break;
				}
				State = 12523; Match(RR_BRACKET);
				}
				break;

			case 5:
				_localctx = new CHECKSUMContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 12525; Match(CHECKSUM);
				State = 12526; Match(LR_BRACKET);
				State = 12527; Match(STAR);
				State = 12528; Match(RR_BRACKET);
				}
				break;

			case 6:
				_localctx = new COALESCEContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 12529; Match(COALESCE);
				State = 12530; Match(LR_BRACKET);
				State = 12531; expression_list_();
				State = 12532; Match(RR_BRACKET);
				}
				break;

			case 7:
				_localctx = new CURRENT_TIMESTAMPContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 12534; Match(CURRENT_TIMESTAMP);
				}
				break;

			case 8:
				_localctx = new CURRENT_USERContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 12535; Match(CURRENT_USER);
				}
				break;

			case 9:
				_localctx = new DATEADDContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 12536; Match(DATEADD);
				State = 12537; Match(LR_BRACKET);
				State = 12538; ((DATEADDContext)_localctx).datepart = Match(ID);
				State = 12539; Match(COMMA);
				State = 12540; ((DATEADDContext)_localctx).number = expression(0);
				State = 12541; Match(COMMA);
				State = 12542; ((DATEADDContext)_localctx).date = expression(0);
				State = 12543; Match(RR_BRACKET);
				}
				break;

			case 10:
				_localctx = new DATEDIFFContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 12545; Match(DATEDIFF);
				State = 12546; Match(LR_BRACKET);
				State = 12547; ((DATEDIFFContext)_localctx).datepart = Match(ID);
				State = 12548; Match(COMMA);
				State = 12549; ((DATEDIFFContext)_localctx).date_first = expression(0);
				State = 12550; Match(COMMA);
				State = 12551; ((DATEDIFFContext)_localctx).date_second = expression(0);
				State = 12552; Match(RR_BRACKET);
				}
				break;

			case 11:
				_localctx = new DATENAMEContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 12554; Match(DATENAME);
				State = 12555; Match(LR_BRACKET);
				State = 12556; ((DATENAMEContext)_localctx).datepart = Match(ID);
				State = 12557; Match(COMMA);
				State = 12558; ((DATENAMEContext)_localctx).date = expression(0);
				State = 12559; Match(RR_BRACKET);
				}
				break;

			case 12:
				_localctx = new DATEPARTContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 12561; Match(DATEPART);
				State = 12562; Match(LR_BRACKET);
				State = 12563; ((DATEPARTContext)_localctx).datepart = Match(ID);
				State = 12564; Match(COMMA);
				State = 12565; ((DATEPARTContext)_localctx).date = expression(0);
				State = 12566; Match(RR_BRACKET);
				}
				break;

			case 13:
				_localctx = new GETDATEContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 12568; Match(GETDATE);
				State = 12569; Match(LR_BRACKET);
				State = 12570; Match(RR_BRACKET);
				}
				break;

			case 14:
				_localctx = new GETUTCDATEContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 12571; Match(GETUTCDATE);
				State = 12572; Match(LR_BRACKET);
				State = 12573; Match(RR_BRACKET);
				}
				break;

			case 15:
				_localctx = new IDENTITYContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 12574; Match(IDENTITY);
				State = 12575; Match(LR_BRACKET);
				State = 12576; data_type();
				State = 12579;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1709,_ctx) ) {
				case 1:
					{
					State = 12577; Match(COMMA);
					State = 12578; ((IDENTITYContext)_localctx).seed = Match(DECIMAL);
					}
					break;
				}
				State = 12583;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1710,_ctx) ) {
				case 1:
					{
					State = 12581; Match(COMMA);
					State = 12582; ((IDENTITYContext)_localctx).increment = Match(DECIMAL);
					}
					break;
				}
				State = 12585; Match(RR_BRACKET);
				}
				break;

			case 16:
				_localctx = new MIN_ACTIVE_ROWVERSIONContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 12587; Match(MIN_ACTIVE_ROWVERSION);
				State = 12588; Match(LR_BRACKET);
				State = 12589; Match(RR_BRACKET);
				}
				break;

			case 17:
				_localctx = new NULLIFContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 12590; Match(NULLIF);
				State = 12591; Match(LR_BRACKET);
				State = 12592; ((NULLIFContext)_localctx).left = expression(0);
				State = 12593; Match(COMMA);
				State = 12594; ((NULLIFContext)_localctx).right = expression(0);
				State = 12595; Match(RR_BRACKET);
				}
				break;

			case 18:
				_localctx = new STUFFContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 12597; Match(STUFF);
				State = 12598; Match(LR_BRACKET);
				State = 12599; ((STUFFContext)_localctx).str = expression(0);
				State = 12600; Match(COMMA);
				State = 12601; ((STUFFContext)_localctx).from = Match(DECIMAL);
				State = 12602; Match(COMMA);
				State = 12603; ((STUFFContext)_localctx).to = Match(DECIMAL);
				State = 12604; Match(COMMA);
				State = 12605; ((STUFFContext)_localctx).str_with = expression(0);
				State = 12606; Match(RR_BRACKET);
				}
				break;

			case 19:
				_localctx = new SESSION_USERContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 12608; Match(SESSION_USER);
				}
				break;

			case 20:
				_localctx = new SYSTEM_USERContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 12609; Match(SYSTEM_USER);
				}
				break;

			case 21:
				_localctx = new USERContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 12610; Match(USER);
				}
				break;

			case 22:
				_localctx = new ISNULLContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 12611; Match(ISNULL);
				State = 12612; Match(LR_BRACKET);
				State = 12613; ((ISNULLContext)_localctx).left = expression(0);
				State = 12614; Match(COMMA);
				State = 12615; ((ISNULLContext)_localctx).right = expression(0);
				State = 12616; Match(RR_BRACKET);
				}
				break;

			case 23:
				_localctx = new XML_DATA_TYPE_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 12618; xml_data_type_methods();
				}
				break;

			case 24:
				_localctx = new IIFContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 12619; Match(IIF);
				State = 12620; Match(LR_BRACKET);
				State = 12621; ((IIFContext)_localctx).cond = search_condition(0);
				State = 12622; Match(COMMA);
				State = 12623; ((IIFContext)_localctx).left = expression(0);
				State = 12624; Match(COMMA);
				State = 12625; ((IIFContext)_localctx).right = expression(0);
				State = 12626; Match(RR_BRACKET);
				}
				break;

			case 25:
				_localctx = new STRINGAGGContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 12628; Match(STRING_AGG);
				State = 12629; Match(LR_BRACKET);
				State = 12630; ((STRINGAGGContext)_localctx).expr = expression(0);
				State = 12631; Match(COMMA);
				State = 12632; ((STRINGAGGContext)_localctx).separator = expression(0);
				State = 12633; Match(RR_BRACKET);
				State = 12640;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1711,_ctx) ) {
				case 1:
					{
					State = 12634; Match(WITHIN);
					State = 12635; Match(GROUP);
					State = 12636; Match(LR_BRACKET);
					State = 12637; order_by_clause();
					State = 12638; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_data_type_methodsContext : ParserRuleContext {
		public Value_methodContext value_method() {
			return GetRuleContext<Value_methodContext>(0);
		}
		public Query_methodContext query_method() {
			return GetRuleContext<Query_methodContext>(0);
		}
		public Exist_methodContext exist_method() {
			return GetRuleContext<Exist_methodContext>(0);
		}
		public Modify_methodContext modify_method() {
			return GetRuleContext<Modify_methodContext>(0);
		}
		public Xml_data_type_methodsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_data_type_methods; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_data_type_methods(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_data_type_methods(this);
		}
	}

	[RuleVersion(0)]
	public Xml_data_type_methodsContext xml_data_type_methods() {
		Xml_data_type_methodsContext _localctx = new Xml_data_type_methodsContext(_ctx, State);
		EnterRule(_localctx, 1066, RULE_xml_data_type_methods);
		try {
			State = 12648;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1713,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12644; value_method();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12645; query_method();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 12646; exist_method();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 12647; modify_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dateparts_9Context : ParserRuleContext {
		public ITerminalNode YEAR() { return GetToken(TSqlParser.YEAR, 0); }
		public ITerminalNode YEAR_ABBR() { return GetToken(TSqlParser.YEAR_ABBR, 0); }
		public ITerminalNode QUARTER() { return GetToken(TSqlParser.QUARTER, 0); }
		public ITerminalNode QUARTER_ABBR() { return GetToken(TSqlParser.QUARTER_ABBR, 0); }
		public ITerminalNode MONTH() { return GetToken(TSqlParser.MONTH, 0); }
		public ITerminalNode MONTH_ABBR() { return GetToken(TSqlParser.MONTH_ABBR, 0); }
		public ITerminalNode DAY() { return GetToken(TSqlParser.DAY, 0); }
		public ITerminalNode DAY_ABBR() { return GetToken(TSqlParser.DAY_ABBR, 0); }
		public ITerminalNode WEEK() { return GetToken(TSqlParser.WEEK, 0); }
		public ITerminalNode WEEK_ABBR() { return GetToken(TSqlParser.WEEK_ABBR, 0); }
		public ITerminalNode HOUR() { return GetToken(TSqlParser.HOUR, 0); }
		public ITerminalNode HOUR_ABBR() { return GetToken(TSqlParser.HOUR_ABBR, 0); }
		public ITerminalNode MINUTE() { return GetToken(TSqlParser.MINUTE, 0); }
		public ITerminalNode MINUTE_ABBR() { return GetToken(TSqlParser.MINUTE_ABBR, 0); }
		public ITerminalNode SECOND() { return GetToken(TSqlParser.SECOND, 0); }
		public ITerminalNode SECOND_ABBR() { return GetToken(TSqlParser.SECOND_ABBR, 0); }
		public ITerminalNode MILLISECOND() { return GetToken(TSqlParser.MILLISECOND, 0); }
		public ITerminalNode MILLISECOND_ABBR() { return GetToken(TSqlParser.MILLISECOND_ABBR, 0); }
		public Dateparts_9Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateparts_9; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDateparts_9(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDateparts_9(this);
		}
	}

	[RuleVersion(0)]
	public Dateparts_9Context dateparts_9() {
		Dateparts_9Context _localctx = new Dateparts_9Context(_ctx, State);
		EnterRule(_localctx, 1068, RULE_dateparts_9);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12650;
			_la = _input.La(1);
			if ( !(((((_la - 1174)) & ~0x3f) == 0 && ((1L << (_la - 1174)) & ((1L << (YEAR - 1174)) | (1L << (YEAR_ABBR - 1174)) | (1L << (QUARTER - 1174)) | (1L << (QUARTER_ABBR - 1174)) | (1L << (MONTH - 1174)) | (1L << (MONTH_ABBR - 1174)) | (1L << (DAY - 1174)) | (1L << (DAY_ABBR - 1174)) | (1L << (WEEK - 1174)) | (1L << (WEEK_ABBR - 1174)) | (1L << (HOUR - 1174)) | (1L << (HOUR_ABBR - 1174)) | (1L << (MINUTE - 1174)) | (1L << (MINUTE_ABBR - 1174)) | (1L << (SECOND - 1174)) | (1L << (SECOND_ABBR - 1174)) | (1L << (MILLISECOND - 1174)) | (1L << (MILLISECOND_ABBR - 1174)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dateparts_12Context : ParserRuleContext {
		public Dateparts_9Context dateparts_9() {
			return GetRuleContext<Dateparts_9Context>(0);
		}
		public ITerminalNode DAYOFYEAR() { return GetToken(TSqlParser.DAYOFYEAR, 0); }
		public ITerminalNode DAYOFYEAR_ABBR() { return GetToken(TSqlParser.DAYOFYEAR_ABBR, 0); }
		public ITerminalNode MICROSECOND() { return GetToken(TSqlParser.MICROSECOND, 0); }
		public ITerminalNode MICROSECOND_ABBR() { return GetToken(TSqlParser.MICROSECOND_ABBR, 0); }
		public ITerminalNode NANOSECOND() { return GetToken(TSqlParser.NANOSECOND, 0); }
		public ITerminalNode NANOSECOND_ABBR() { return GetToken(TSqlParser.NANOSECOND_ABBR, 0); }
		public Dateparts_12Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateparts_12; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDateparts_12(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDateparts_12(this);
		}
	}

	[RuleVersion(0)]
	public Dateparts_12Context dateparts_12() {
		Dateparts_12Context _localctx = new Dateparts_12Context(_ctx, State);
		EnterRule(_localctx, 1070, RULE_dateparts_12);
		try {
			State = 12659;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1714,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12652; dateparts_9();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12653; Match(DAYOFYEAR);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 12654; Match(DAYOFYEAR_ABBR);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 12655; Match(MICROSECOND);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 12656; Match(MICROSECOND_ABBR);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 12657; Match(NANOSECOND);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 12658; Match(NANOSECOND_ABBR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dateparts_15Context : ParserRuleContext {
		public Dateparts_12Context dateparts_12() {
			return GetRuleContext<Dateparts_12Context>(0);
		}
		public ITerminalNode WEEKDAY() { return GetToken(TSqlParser.WEEKDAY, 0); }
		public ITerminalNode WEEKDAY_ABBR() { return GetToken(TSqlParser.WEEKDAY_ABBR, 0); }
		public ITerminalNode TZOFFSET() { return GetToken(TSqlParser.TZOFFSET, 0); }
		public ITerminalNode TZOFFSET_ABBR() { return GetToken(TSqlParser.TZOFFSET_ABBR, 0); }
		public ITerminalNode ISO_WEEK() { return GetToken(TSqlParser.ISO_WEEK, 0); }
		public ITerminalNode ISO_WEEK_ABBR() { return GetToken(TSqlParser.ISO_WEEK_ABBR, 0); }
		public Dateparts_15Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateparts_15; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDateparts_15(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDateparts_15(this);
		}
	}

	[RuleVersion(0)]
	public Dateparts_15Context dateparts_15() {
		Dateparts_15Context _localctx = new Dateparts_15Context(_ctx, State);
		EnterRule(_localctx, 1072, RULE_dateparts_15);
		try {
			State = 12668;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1715,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12661; dateparts_12();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12662; Match(WEEKDAY);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 12663; Match(WEEKDAY_ABBR);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 12664; Match(TZOFFSET);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 12665; Match(TZOFFSET_ABBR);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 12666; Match(ISO_WEEK);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 12667; Match(ISO_WEEK_ABBR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dateparts_datetruncContext : ParserRuleContext {
		public Dateparts_9Context dateparts_9() {
			return GetRuleContext<Dateparts_9Context>(0);
		}
		public ITerminalNode DAYOFYEAR() { return GetToken(TSqlParser.DAYOFYEAR, 0); }
		public ITerminalNode DAYOFYEAR_ABBR() { return GetToken(TSqlParser.DAYOFYEAR_ABBR, 0); }
		public ITerminalNode MICROSECOND() { return GetToken(TSqlParser.MICROSECOND, 0); }
		public ITerminalNode MICROSECOND_ABBR() { return GetToken(TSqlParser.MICROSECOND_ABBR, 0); }
		public ITerminalNode ISO_WEEK() { return GetToken(TSqlParser.ISO_WEEK, 0); }
		public ITerminalNode ISO_WEEK_ABBR() { return GetToken(TSqlParser.ISO_WEEK_ABBR, 0); }
		public Dateparts_datetruncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateparts_datetrunc; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDateparts_datetrunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDateparts_datetrunc(this);
		}
	}

	[RuleVersion(0)]
	public Dateparts_datetruncContext dateparts_datetrunc() {
		Dateparts_datetruncContext _localctx = new Dateparts_datetruncContext(_ctx, State);
		EnterRule(_localctx, 1074, RULE_dateparts_datetrunc);
		try {
			State = 12677;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1716,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12670; dateparts_9();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12671; Match(DAYOFYEAR);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 12672; Match(DAYOFYEAR_ABBR);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 12673; Match(MICROSECOND);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 12674; Match(MICROSECOND_ABBR);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 12675; Match(ISO_WEEK);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 12676; Match(ISO_WEEK_ABBR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_methodContext : ParserRuleContext {
		public IToken loc_id;
		public Id_Context value_id;
		public IToken eventdata;
		public Query_methodContext query;
		public Value_callContext call;
		public Value_callContext value_call() {
			return GetRuleContext<Value_callContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode EVENTDATA() { return GetToken(TSqlParser.EVENTDATA, 0); }
		public Query_methodContext query_method() {
			return GetRuleContext<Query_methodContext>(0);
		}
		public Value_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterValue_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitValue_method(this);
		}
	}

	[RuleVersion(0)]
	public Value_methodContext value_method() {
		Value_methodContext _localctx = new Value_methodContext(_ctx, State);
		EnterRule(_localctx, 1076, RULE_value_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12687;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1717,_ctx) ) {
			case 1:
				{
				State = 12679; _localctx.loc_id = Match(LOCAL_ID);
				}
				break;

			case 2:
				{
				State = 12680; _localctx.value_id = id_();
				}
				break;

			case 3:
				{
				State = 12681; _localctx.eventdata = Match(EVENTDATA);
				}
				break;

			case 4:
				{
				State = 12682; _localctx.query = query_method();
				}
				break;

			case 5:
				{
				State = 12683; Match(LR_BRACKET);
				State = 12684; subquery();
				State = 12685; Match(RR_BRACKET);
				}
				break;
			}
			State = 12689; Match(DOT);
			State = 12690; _localctx.call = value_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_callContext : ParserRuleContext {
		public IToken xquery;
		public IToken sqltype;
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Value_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterValue_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitValue_call(this);
		}
	}

	[RuleVersion(0)]
	public Value_callContext value_call() {
		Value_callContext _localctx = new Value_callContext(_ctx, State);
		EnterRule(_localctx, 1078, RULE_value_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12692; Match(VALUE);
			State = 12693; Match(LR_BRACKET);
			State = 12694; _localctx.xquery = Match(STRING);
			State = 12695; Match(COMMA);
			State = 12696; _localctx.sqltype = Match(STRING);
			State = 12697; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_methodContext : ParserRuleContext {
		public IToken loc_id;
		public Id_Context value_id;
		public Full_table_nameContext table;
		public Query_callContext call;
		public Query_callContext query_call() {
			return GetRuleContext<Query_callContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public Query_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_method(this);
		}
	}

	[RuleVersion(0)]
	public Query_methodContext query_method() {
		Query_methodContext _localctx = new Query_methodContext(_ctx, State);
		EnterRule(_localctx, 1080, RULE_query_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12706;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1718,_ctx) ) {
			case 1:
				{
				State = 12699; _localctx.loc_id = Match(LOCAL_ID);
				}
				break;

			case 2:
				{
				State = 12700; _localctx.value_id = id_();
				}
				break;

			case 3:
				{
				State = 12701; _localctx.table = full_table_name();
				}
				break;

			case 4:
				{
				State = 12702; Match(LR_BRACKET);
				State = 12703; subquery();
				State = 12704; Match(RR_BRACKET);
				}
				break;
			}
			State = 12708; Match(DOT);
			State = 12709; _localctx.call = query_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_callContext : ParserRuleContext {
		public IToken xquery;
		public ITerminalNode QUERY() { return GetToken(TSqlParser.QUERY, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Query_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_call(this);
		}
	}

	[RuleVersion(0)]
	public Query_callContext query_call() {
		Query_callContext _localctx = new Query_callContext(_ctx, State);
		EnterRule(_localctx, 1082, RULE_query_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12711; Match(QUERY);
			State = 12712; Match(LR_BRACKET);
			State = 12713; _localctx.xquery = Match(STRING);
			State = 12714; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exist_methodContext : ParserRuleContext {
		public IToken loc_id;
		public Id_Context value_id;
		public Exist_callContext call;
		public Exist_callContext exist_call() {
			return GetRuleContext<Exist_callContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Exist_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exist_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExist_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExist_method(this);
		}
	}

	[RuleVersion(0)]
	public Exist_methodContext exist_method() {
		Exist_methodContext _localctx = new Exist_methodContext(_ctx, State);
		EnterRule(_localctx, 1084, RULE_exist_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12722;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1719,_ctx) ) {
			case 1:
				{
				State = 12716; _localctx.loc_id = Match(LOCAL_ID);
				}
				break;

			case 2:
				{
				State = 12717; _localctx.value_id = id_();
				}
				break;

			case 3:
				{
				State = 12718; Match(LR_BRACKET);
				State = 12719; subquery();
				State = 12720; Match(RR_BRACKET);
				}
				break;
			}
			State = 12724; Match(DOT);
			State = 12725; _localctx.call = exist_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exist_callContext : ParserRuleContext {
		public IToken xquery;
		public ITerminalNode EXIST() { return GetToken(TSqlParser.EXIST, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Exist_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exist_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExist_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExist_call(this);
		}
	}

	[RuleVersion(0)]
	public Exist_callContext exist_call() {
		Exist_callContext _localctx = new Exist_callContext(_ctx, State);
		EnterRule(_localctx, 1086, RULE_exist_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12727; Match(EXIST);
			State = 12728; Match(LR_BRACKET);
			State = 12729; _localctx.xquery = Match(STRING);
			State = 12730; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Modify_methodContext : ParserRuleContext {
		public IToken loc_id;
		public Id_Context value_id;
		public Modify_callContext call;
		public Modify_callContext modify_call() {
			return GetRuleContext<Modify_callContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Modify_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modify_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterModify_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitModify_method(this);
		}
	}

	[RuleVersion(0)]
	public Modify_methodContext modify_method() {
		Modify_methodContext _localctx = new Modify_methodContext(_ctx, State);
		EnterRule(_localctx, 1088, RULE_modify_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12738;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1720,_ctx) ) {
			case 1:
				{
				State = 12732; _localctx.loc_id = Match(LOCAL_ID);
				}
				break;

			case 2:
				{
				State = 12733; _localctx.value_id = id_();
				}
				break;

			case 3:
				{
				State = 12734; Match(LR_BRACKET);
				State = 12735; subquery();
				State = 12736; Match(RR_BRACKET);
				}
				break;
			}
			State = 12740; Match(DOT);
			State = 12741; _localctx.call = modify_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Modify_callContext : ParserRuleContext {
		public IToken xml_dml;
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Modify_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modify_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterModify_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitModify_call(this);
		}
	}

	[RuleVersion(0)]
	public Modify_callContext modify_call() {
		Modify_callContext _localctx = new Modify_callContext(_ctx, State);
		EnterRule(_localctx, 1090, RULE_modify_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12743; Match(MODIFY);
			State = 12744; Match(LR_BRACKET);
			State = 12745; _localctx.xml_dml = Match(STRING);
			State = 12746; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hierarchyid_callContext : ParserRuleContext {
		public ExpressionContext n;
		public ExpressionContext child1;
		public ExpressionContext child2;
		public ExpressionContext parent_;
		public ExpressionContext oldroot;
		public ExpressionContext newroot;
		public ITerminalNode GETANCESTOR() { return GetToken(TSqlParser.GETANCESTOR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode GETDESCENDANT() { return GetToken(TSqlParser.GETDESCENDANT, 0); }
		public ITerminalNode GETLEVEL() { return GetToken(TSqlParser.GETLEVEL, 0); }
		public ITerminalNode ISDESCENDANTOF() { return GetToken(TSqlParser.ISDESCENDANTOF, 0); }
		public ITerminalNode GETREPARENTEDVALUE() { return GetToken(TSqlParser.GETREPARENTEDVALUE, 0); }
		public ITerminalNode TOSTRING() { return GetToken(TSqlParser.TOSTRING, 0); }
		public Hierarchyid_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hierarchyid_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterHierarchyid_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitHierarchyid_call(this);
		}
	}

	[RuleVersion(0)]
	public Hierarchyid_callContext hierarchyid_call() {
		Hierarchyid_callContext _localctx = new Hierarchyid_callContext(_ctx, State);
		EnterRule(_localctx, 1092, RULE_hierarchyid_call);
		try {
			State = 12778;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1721,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12748; Match(GETANCESTOR);
				State = 12749; Match(LR_BRACKET);
				State = 12750; _localctx.n = expression(0);
				State = 12751; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12753; Match(GETDESCENDANT);
				State = 12754; Match(LR_BRACKET);
				State = 12755; _localctx.child1 = expression(0);
				State = 12756; Match(COMMA);
				State = 12757; _localctx.child2 = expression(0);
				State = 12758; Match(RR_BRACKET);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 12760; Match(GETLEVEL);
				State = 12761; Match(LR_BRACKET);
				State = 12762; Match(RR_BRACKET);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 12763; Match(ISDESCENDANTOF);
				State = 12764; Match(LR_BRACKET);
				State = 12765; _localctx.parent_ = expression(0);
				State = 12766; Match(RR_BRACKET);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 12768; Match(GETREPARENTEDVALUE);
				State = 12769; Match(LR_BRACKET);
				State = 12770; _localctx.oldroot = expression(0);
				State = 12771; Match(COMMA);
				State = 12772; _localctx.newroot = expression(0);
				State = 12773; Match(RR_BRACKET);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 12775; Match(TOSTRING);
				State = 12776; Match(LR_BRACKET);
				State = 12777; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hierarchyid_static_methodContext : ParserRuleContext {
		public ExpressionContext input;
		public ITerminalNode HIERARCHYID() { return GetToken(TSqlParser.HIERARCHYID, 0); }
		public ITerminalNode DOUBLE_COLON() { return GetToken(TSqlParser.DOUBLE_COLON, 0); }
		public ITerminalNode GETROOT() { return GetToken(TSqlParser.GETROOT, 0); }
		public ITerminalNode PARSE() { return GetToken(TSqlParser.PARSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Hierarchyid_static_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hierarchyid_static_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterHierarchyid_static_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitHierarchyid_static_method(this);
		}
	}

	[RuleVersion(0)]
	public Hierarchyid_static_methodContext hierarchyid_static_method() {
		Hierarchyid_static_methodContext _localctx = new Hierarchyid_static_methodContext(_ctx, State);
		EnterRule(_localctx, 1094, RULE_hierarchyid_static_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12780; Match(HIERARCHYID);
			State = 12781; Match(DOUBLE_COLON);
			State = 12790;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1722,_ctx) ) {
			case 1:
				{
				State = 12782; Match(GETROOT);
				State = 12783; Match(LR_BRACKET);
				State = 12784; Match(RR_BRACKET);
				}
				break;

			case 2:
				{
				State = 12785; Match(PARSE);
				State = 12786; Match(LR_BRACKET);
				State = 12787; _localctx.input = expression(0);
				State = 12788; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nodes_methodContext : ParserRuleContext {
		public IToken loc_id;
		public Id_Context value_id;
		public IToken xquery;
		public ITerminalNode NODES() { return GetToken(TSqlParser.NODES, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Nodes_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodes_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNodes_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNodes_method(this);
		}
	}

	[RuleVersion(0)]
	public Nodes_methodContext nodes_method() {
		Nodes_methodContext _localctx = new Nodes_methodContext(_ctx, State);
		EnterRule(_localctx, 1096, RULE_nodes_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12798;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1723,_ctx) ) {
			case 1:
				{
				State = 12792; _localctx.loc_id = Match(LOCAL_ID);
				}
				break;

			case 2:
				{
				State = 12793; _localctx.value_id = id_();
				}
				break;

			case 3:
				{
				State = 12794; Match(LR_BRACKET);
				State = 12795; subquery();
				State = 12796; Match(RR_BRACKET);
				}
				break;
			}
			State = 12800; Match(DOT);
			State = 12801; Match(NODES);
			State = 12802; Match(LR_BRACKET);
			State = 12803; _localctx.xquery = Match(STRING);
			State = 12804; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_sectionContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(TSqlParser.WHEN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(TSqlParser.THEN, 0); }
		public Switch_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSwitch_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSwitch_section(this);
		}
	}

	[RuleVersion(0)]
	public Switch_sectionContext switch_section() {
		Switch_sectionContext _localctx = new Switch_sectionContext(_ctx, State);
		EnterRule(_localctx, 1098, RULE_switch_section);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12806; Match(WHEN);
			State = 12807; expression(0);
			State = 12808; Match(THEN);
			State = 12809; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_search_condition_sectionContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(TSqlParser.WHEN, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(TSqlParser.THEN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Switch_search_condition_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_search_condition_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSwitch_search_condition_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSwitch_search_condition_section(this);
		}
	}

	[RuleVersion(0)]
	public Switch_search_condition_sectionContext switch_search_condition_section() {
		Switch_search_condition_sectionContext _localctx = new Switch_search_condition_sectionContext(_ctx, State);
		EnterRule(_localctx, 1100, RULE_switch_search_condition_section);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12811; Match(WHEN);
			State = 12812; search_condition(0);
			State = 12813; Match(THEN);
			State = 12814; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_column_aliasContext : ParserRuleContext {
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public As_column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_column_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAs_column_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAs_column_alias(this);
		}
	}

	[RuleVersion(0)]
	public As_column_aliasContext as_column_alias() {
		As_column_aliasContext _localctx = new As_column_aliasContext(_ctx, State);
		EnterRule(_localctx, 1102, RULE_as_column_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12817;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1724,_ctx) ) {
			case 1:
				{
				State = 12816; Match(AS);
				}
				break;
			}
			State = 12819; column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_table_aliasContext : ParserRuleContext {
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public As_table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_table_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAs_table_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAs_table_alias(this);
		}
	}

	[RuleVersion(0)]
	public As_table_aliasContext as_table_alias() {
		As_table_aliasContext _localctx = new As_table_aliasContext(_ctx, State);
		EnterRule(_localctx, 1104, RULE_as_table_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12822;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1725,_ctx) ) {
			case 1:
				{
				State = 12821; Match(AS);
				}
				break;
			}
			State = 12824; table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_alias(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, State);
		EnterRule(_localctx, 1106, RULE_table_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12826; id_();
			State = 12828;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1726,_ctx) ) {
			case 1:
				{
				State = 12827; with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_table_hintsContext : ParserRuleContext {
		public Table_hintContext _table_hint;
		public IList<Table_hintContext> _hint = new List<Table_hintContext>();
		public Table_hintContext[] table_hint() {
			return GetRuleContexts<Table_hintContext>();
		}
		public Table_hintContext table_hint(int i) {
			return GetRuleContext<Table_hintContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public With_table_hintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_table_hints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWith_table_hints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWith_table_hints(this);
		}
	}

	[RuleVersion(0)]
	public With_table_hintsContext with_table_hints() {
		With_table_hintsContext _localctx = new With_table_hintsContext(_ctx, State);
		EnterRule(_localctx, 1108, RULE_with_table_hints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 12831;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1727,_ctx) ) {
			case 1:
				{
				State = 12830; Match(WITH);
				}
				break;
			}
			State = 12833; Match(LR_BRACKET);
			State = 12834; _localctx._table_hint = table_hint();
			_localctx._hint.Add(_localctx._table_hint);
			State = 12841;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1729,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 12836;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1728,_ctx) ) {
					case 1:
						{
						State = 12835; Match(COMMA);
						}
						break;
					}
					State = 12838; _localctx._table_hint = table_hint();
					_localctx._hint.Add(_localctx._table_hint);
					}
					} 
				}
				State = 12843;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1729,_ctx);
			}
			State = 12844; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Deprecated_table_hintContext : ParserRuleContext {
		public Table_hintContext table_hint() {
			return GetRuleContext<Table_hintContext>(0);
		}
		public Deprecated_table_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deprecated_table_hint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeprecated_table_hint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeprecated_table_hint(this);
		}
	}

	[RuleVersion(0)]
	public Deprecated_table_hintContext deprecated_table_hint() {
		Deprecated_table_hintContext _localctx = new Deprecated_table_hintContext(_ctx, State);
		EnterRule(_localctx, 1110, RULE_deprecated_table_hint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12846; Match(LR_BRACKET);
			State = 12847; table_hint();
			State = 12848; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sybase_legacy_hintsContext : ParserRuleContext {
		public Sybase_legacy_hintContext[] sybase_legacy_hint() {
			return GetRuleContexts<Sybase_legacy_hintContext>();
		}
		public Sybase_legacy_hintContext sybase_legacy_hint(int i) {
			return GetRuleContext<Sybase_legacy_hintContext>(i);
		}
		public Sybase_legacy_hintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sybase_legacy_hints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSybase_legacy_hints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSybase_legacy_hints(this);
		}
	}

	[RuleVersion(0)]
	public Sybase_legacy_hintsContext sybase_legacy_hints() {
		Sybase_legacy_hintsContext _localctx = new Sybase_legacy_hintsContext(_ctx, State);
		EnterRule(_localctx, 1112, RULE_sybase_legacy_hints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 12851;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 12850; sybase_legacy_hint();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 12853;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1730,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sybase_legacy_hintContext : ParserRuleContext {
		public ITerminalNode HOLDLOCK() { return GetToken(TSqlParser.HOLDLOCK, 0); }
		public ITerminalNode NOHOLDLOCK() { return GetToken(TSqlParser.NOHOLDLOCK, 0); }
		public ITerminalNode READPAST() { return GetToken(TSqlParser.READPAST, 0); }
		public ITerminalNode SHARED() { return GetToken(TSqlParser.SHARED, 0); }
		public Sybase_legacy_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sybase_legacy_hint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSybase_legacy_hint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSybase_legacy_hint(this);
		}
	}

	[RuleVersion(0)]
	public Sybase_legacy_hintContext sybase_legacy_hint() {
		Sybase_legacy_hintContext _localctx = new Sybase_legacy_hintContext(_ctx, State);
		EnterRule(_localctx, 1114, RULE_sybase_legacy_hint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12855;
			_la = _input.La(1);
			if ( !(_la==HOLDLOCK || _la==NOHOLDLOCK || _la==READPAST || _la==SHARED) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_with_table_hintsContext : ParserRuleContext {
		public Table_hintContext _table_hint;
		public IList<Table_hintContext> _hint = new List<Table_hintContext>();
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Table_hintContext[] table_hint() {
			return GetRuleContexts<Table_hintContext>();
		}
		public Table_hintContext table_hint(int i) {
			return GetRuleContext<Table_hintContext>(i);
		}
		public Insert_with_table_hintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_with_table_hints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_with_table_hints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_with_table_hints(this);
		}
	}

	[RuleVersion(0)]
	public Insert_with_table_hintsContext insert_with_table_hints() {
		Insert_with_table_hintsContext _localctx = new Insert_with_table_hintsContext(_ctx, State);
		EnterRule(_localctx, 1116, RULE_insert_with_table_hints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 12857; Match(WITH);
			State = 12858; Match(LR_BRACKET);
			State = 12859; _localctx._table_hint = table_hint();
			_localctx._hint.Add(_localctx._table_hint);
			State = 12866;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1732,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 12861;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1731,_ctx) ) {
					case 1:
						{
						State = 12860; Match(COMMA);
						}
						break;
					}
					State = 12863; _localctx._table_hint = table_hint();
					_localctx._hint.Add(_localctx._table_hint);
					}
					} 
				}
				State = 12868;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1732,_ctx);
			}
			State = 12869; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_hintContext : ParserRuleContext {
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Index_valueContext[] index_value() {
			return GetRuleContexts<Index_valueContext>();
		}
		public Index_valueContext index_value(int i) {
			return GetRuleContext<Index_valueContext>(i);
		}
		public ITerminalNode FORCESEEK() { return GetToken(TSqlParser.FORCESEEK, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(TSqlParser.SERIALIZABLE, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(TSqlParser.SNAPSHOT, 0); }
		public ITerminalNode SPATIAL_WINDOW_MAX_CELLS() { return GetToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode HOLDLOCK() { return GetToken(TSqlParser.HOLDLOCK, 0); }
		public ITerminalNode[] ID() { return GetTokens(TSqlParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(TSqlParser.ID, i);
		}
		public ITerminalNode NOEXPAND() { return GetToken(TSqlParser.NOEXPAND, 0); }
		public Table_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_hint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_hint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_hint(this);
		}
	}

	[RuleVersion(0)]
	public Table_hintContext table_hint() {
		Table_hintContext _localctx = new Table_hintContext(_ctx, State);
		EnterRule(_localctx, 1118, RULE_table_hint);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 12872;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1733,_ctx) ) {
			case 1:
				{
				State = 12871; Match(NOEXPAND);
				}
				break;
			}
			State = 12923;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1739,_ctx) ) {
			case 1:
				{
				State = 12874; Match(INDEX);
				State = 12894;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1736,_ctx) ) {
				case 1:
					{
					State = 12875; Match(LR_BRACKET);
					State = 12876; index_value();
					State = 12881;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1734,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 12877; Match(COMMA);
							State = 12878; index_value();
							}
							} 
						}
						State = 12883;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1734,_ctx);
					}
					State = 12884; Match(RR_BRACKET);
					}
					break;

				case 2:
					{
					State = 12886; index_value();
					State = 12891;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1735,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 12887; Match(COMMA);
							State = 12888; index_value();
							}
							} 
						}
						State = 12893;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1735,_ctx);
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 12896; Match(INDEX);
				State = 12897; Match(EQUAL);
				State = 12898; index_value();
				}
				break;

			case 3:
				{
				State = 12899; Match(FORCESEEK);
				State = 12914;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1738,_ctx) ) {
				case 1:
					{
					State = 12900; Match(LR_BRACKET);
					State = 12901; index_value();
					State = 12902; Match(LR_BRACKET);
					State = 12903; Match(ID);
					State = 12908;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1737,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 12904; Match(COMMA);
							State = 12905; Match(ID);
							}
							} 
						}
						State = 12910;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,1737,_ctx);
					}
					State = 12911; Match(RR_BRACKET);
					State = 12912; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;

			case 4:
				{
				State = 12916; Match(SERIALIZABLE);
				}
				break;

			case 5:
				{
				State = 12917; Match(SNAPSHOT);
				}
				break;

			case 6:
				{
				State = 12918; Match(SPATIAL_WINDOW_MAX_CELLS);
				State = 12919; Match(EQUAL);
				State = 12920; Match(DECIMAL);
				}
				break;

			case 7:
				{
				State = 12921; Match(HOLDLOCK);
				}
				break;

			case 8:
				{
				State = 12922; Match(ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_valueContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Index_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIndex_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIndex_value(this);
		}
	}

	[RuleVersion(0)]
	public Index_valueContext index_value() {
		Index_valueContext _localctx = new Index_valueContext(_ctx, State);
		EnterRule(_localctx, 1120, RULE_index_value);
		try {
			State = 12927;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1740,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12925; id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12926; Match(DECIMAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_alias_listContext : ParserRuleContext {
		public Column_aliasContext _column_alias;
		public IList<Column_aliasContext> _alias = new List<Column_aliasContext>();
		public Column_aliasContext[] column_alias() {
			return GetRuleContexts<Column_aliasContext>();
		}
		public Column_aliasContext column_alias(int i) {
			return GetRuleContext<Column_aliasContext>(i);
		}
		public Column_alias_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_alias_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_alias_list(this);
		}
	}

	[RuleVersion(0)]
	public Column_alias_listContext column_alias_list() {
		Column_alias_listContext _localctx = new Column_alias_listContext(_ctx, State);
		EnterRule(_localctx, 1122, RULE_column_alias_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 12929; Match(LR_BRACKET);
			State = 12930; _localctx._column_alias = column_alias();
			_localctx._alias.Add(_localctx._column_alias);
			State = 12935;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1741,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 12931; Match(COMMA);
					State = 12932; _localctx._column_alias = column_alias();
					_localctx._alias.Add(_localctx._column_alias);
					}
					} 
				}
				State = 12937;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1741,_ctx);
			}
			State = 12938; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_aliasContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_alias(this);
		}
	}

	[RuleVersion(0)]
	public Column_aliasContext column_alias() {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, State);
		EnterRule(_localctx, 1124, RULE_column_alias);
		try {
			State = 12942;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1742,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12940; id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12941; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_value_constructorContext : ParserRuleContext {
		public Expression_list_Context _expression_list_;
		public IList<Expression_list_Context> _exps = new List<Expression_list_Context>();
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Expression_list_Context[] expression_list_() {
			return GetRuleContexts<Expression_list_Context>();
		}
		public Expression_list_Context expression_list_(int i) {
			return GetRuleContext<Expression_list_Context>(i);
		}
		public Table_value_constructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_value_constructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_value_constructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_value_constructor(this);
		}
	}

	[RuleVersion(0)]
	public Table_value_constructorContext table_value_constructor() {
		Table_value_constructorContext _localctx = new Table_value_constructorContext(_ctx, State);
		EnterRule(_localctx, 1126, RULE_table_value_constructor);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 12944; Match(VALUES);
			State = 12945; Match(LR_BRACKET);
			State = 12946; _localctx._expression_list_ = expression_list_();
			_localctx._exps.Add(_localctx._expression_list_);
			State = 12947; Match(RR_BRACKET);
			State = 12955;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1743,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 12948; Match(COMMA);
					State = 12949; Match(LR_BRACKET);
					State = 12950; _localctx._expression_list_ = expression_list_();
					_localctx._exps.Add(_localctx._expression_list_);
					State = 12951; Match(RR_BRACKET);
					}
					} 
				}
				State = 12957;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1743,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_list_Context : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _exp = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Expression_list_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list_; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExpression_list_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExpression_list_(this);
		}
	}

	[RuleVersion(0)]
	public Expression_list_Context expression_list_() {
		Expression_list_Context _localctx = new Expression_list_Context(_ctx, State);
		EnterRule(_localctx, 1128, RULE_expression_list_);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 12958; _localctx._expression = expression(0);
			_localctx._exp.Add(_localctx._expression);
			State = 12963;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1744,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 12959; Match(COMMA);
					State = 12960; _localctx._expression = expression(0);
					_localctx._exp.Add(_localctx._expression);
					}
					} 
				}
				State = 12965;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1744,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ranking_windowed_functionContext : ParserRuleContext {
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ITerminalNode RANK() { return GetToken(TSqlParser.RANK, 0); }
		public ITerminalNode DENSE_RANK() { return GetToken(TSqlParser.DENSE_RANK, 0); }
		public ITerminalNode ROW_NUMBER() { return GetToken(TSqlParser.ROW_NUMBER, 0); }
		public ITerminalNode NTILE() { return GetToken(TSqlParser.NTILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Ranking_windowed_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ranking_windowed_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRanking_windowed_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRanking_windowed_function(this);
		}
	}

	[RuleVersion(0)]
	public Ranking_windowed_functionContext ranking_windowed_function() {
		Ranking_windowed_functionContext _localctx = new Ranking_windowed_functionContext(_ctx, State);
		EnterRule(_localctx, 1130, RULE_ranking_windowed_function);
		int _la;
		try {
			State = 12976;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1745,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12966;
				_la = _input.La(1);
				if ( !(_la==DENSE_RANK || _la==RANK || _la==ROW_NUMBER) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 12967; Match(LR_BRACKET);
				State = 12968; Match(RR_BRACKET);
				State = 12969; over_clause();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12970; Match(NTILE);
				State = 12971; Match(LR_BRACKET);
				State = 12972; expression(0);
				State = 12973; Match(RR_BRACKET);
				State = 12974; over_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_windowed_functionContext : ParserRuleContext {
		public IToken agg_func;
		public IToken cnt;
		public All_distinct_expressionContext all_distinct_expression() {
			return GetRuleContext<All_distinct_expressionContext>(0);
		}
		public ITerminalNode AVG() { return GetToken(TSqlParser.AVG, 0); }
		public ITerminalNode MAX() { return GetToken(TSqlParser.MAX, 0); }
		public ITerminalNode MIN() { return GetToken(TSqlParser.MIN, 0); }
		public ITerminalNode SUM() { return GetToken(TSqlParser.SUM, 0); }
		public ITerminalNode STDEV() { return GetToken(TSqlParser.STDEV, 0); }
		public ITerminalNode STDEVP() { return GetToken(TSqlParser.STDEVP, 0); }
		public ITerminalNode VAR() { return GetToken(TSqlParser.VAR, 0); }
		public ITerminalNode VARP() { return GetToken(TSqlParser.VARP, 0); }
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ITerminalNode COUNT() { return GetToken(TSqlParser.COUNT, 0); }
		public ITerminalNode COUNT_BIG() { return GetToken(TSqlParser.COUNT_BIG, 0); }
		public ITerminalNode CHECKSUM_AGG() { return GetToken(TSqlParser.CHECKSUM_AGG, 0); }
		public ITerminalNode GROUPING() { return GetToken(TSqlParser.GROUPING, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode GROUPING_ID() { return GetToken(TSqlParser.GROUPING_ID, 0); }
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public Aggregate_windowed_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_windowed_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAggregate_windowed_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAggregate_windowed_function(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_windowed_functionContext aggregate_windowed_function() {
		Aggregate_windowed_functionContext _localctx = new Aggregate_windowed_functionContext(_ctx, State);
		EnterRule(_localctx, 1132, RULE_aggregate_windowed_function);
		int _la;
		try {
			State = 13010;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1749,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12978;
				_localctx.agg_func = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==AVG || _la==MAX || _la==MIN || ((((_la - 954)) & ~0x3f) == 0 && ((1L << (_la - 954)) & ((1L << (STDEV - 954)) | (1L << (STDEVP - 954)) | (1L << (SUM - 954)))) != 0) || _la==VAR || _la==VARP) ) {
					_localctx.agg_func = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 12979; Match(LR_BRACKET);
				State = 12980; all_distinct_expression();
				State = 12981; Match(RR_BRACKET);
				State = 12983;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1746,_ctx) ) {
				case 1:
					{
					State = 12982; over_clause();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 12985;
				_localctx.cnt = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==COUNT || _la==COUNT_BIG) ) {
					_localctx.cnt = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 12986; Match(LR_BRACKET);
				State = 12989;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1747,_ctx) ) {
				case 1:
					{
					State = 12987; Match(STAR);
					}
					break;

				case 2:
					{
					State = 12988; all_distinct_expression();
					}
					break;
				}
				State = 12991; Match(RR_BRACKET);
				State = 12993;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1748,_ctx) ) {
				case 1:
					{
					State = 12992; over_clause();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 12995; Match(CHECKSUM_AGG);
				State = 12996; Match(LR_BRACKET);
				State = 12997; all_distinct_expression();
				State = 12998; Match(RR_BRACKET);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 13000; Match(GROUPING);
				State = 13001; Match(LR_BRACKET);
				State = 13002; expression(0);
				State = 13003; Match(RR_BRACKET);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 13005; Match(GROUPING_ID);
				State = 13006; Match(LR_BRACKET);
				State = 13007; expression_list_();
				State = 13008; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Analytic_windowed_functionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ITerminalNode FIRST_VALUE() { return GetToken(TSqlParser.FIRST_VALUE, 0); }
		public ITerminalNode LAST_VALUE() { return GetToken(TSqlParser.LAST_VALUE, 0); }
		public ITerminalNode LAG() { return GetToken(TSqlParser.LAG, 0); }
		public ITerminalNode LEAD() { return GetToken(TSqlParser.LEAD, 0); }
		public ITerminalNode OVER() { return GetToken(TSqlParser.OVER, 0); }
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public ITerminalNode CUME_DIST() { return GetToken(TSqlParser.CUME_DIST, 0); }
		public ITerminalNode PERCENT_RANK() { return GetToken(TSqlParser.PERCENT_RANK, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public ITerminalNode WITHIN() { return GetToken(TSqlParser.WITHIN, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode ORDER() { return GetToken(TSqlParser.ORDER, 0); }
		public ITerminalNode PERCENTILE_CONT() { return GetToken(TSqlParser.PERCENTILE_CONT, 0); }
		public ITerminalNode PERCENTILE_DISC() { return GetToken(TSqlParser.PERCENTILE_DISC, 0); }
		public ITerminalNode ASC() { return GetToken(TSqlParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(TSqlParser.DESC, 0); }
		public Analytic_windowed_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analytic_windowed_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAnalytic_windowed_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAnalytic_windowed_function(this);
		}
	}

	[RuleVersion(0)]
	public Analytic_windowed_functionContext analytic_windowed_function() {
		Analytic_windowed_functionContext _localctx = new Analytic_windowed_functionContext(_ctx, State);
		EnterRule(_localctx, 1134, RULE_analytic_windowed_function);
		int _la;
		try {
			State = 13068;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1755,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13012;
				_la = _input.La(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 13013; Match(LR_BRACKET);
				State = 13014; expression(0);
				State = 13015; Match(RR_BRACKET);
				State = 13016; over_clause();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13018;
				_la = _input.La(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 13019; Match(LR_BRACKET);
				State = 13020; expression(0);
				State = 13027;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1751,_ctx) ) {
				case 1:
					{
					State = 13021; Match(COMMA);
					State = 13022; expression(0);
					State = 13025;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1750,_ctx) ) {
					case 1:
						{
						State = 13023; Match(COMMA);
						State = 13024; expression(0);
						}
						break;
					}
					}
					break;
				}
				State = 13029; Match(RR_BRACKET);
				State = 13030; over_clause();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 13032;
				_la = _input.La(1);
				if ( !(_la==CUME_DIST || _la==PERCENT_RANK) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 13033; Match(LR_BRACKET);
				State = 13034; Match(RR_BRACKET);
				State = 13035; Match(OVER);
				State = 13036; Match(LR_BRACKET);
				State = 13040;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1752,_ctx) ) {
				case 1:
					{
					State = 13037; Match(PARTITION);
					State = 13038; Match(BY);
					State = 13039; expression_list_();
					}
					break;
				}
				State = 13042; order_by_clause();
				State = 13043; Match(RR_BRACKET);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 13045;
				_la = _input.La(1);
				if ( !(_la==PERCENTILE_CONT || _la==PERCENTILE_DISC) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 13046; Match(LR_BRACKET);
				State = 13047; expression(0);
				State = 13048; Match(RR_BRACKET);
				State = 13049; Match(WITHIN);
				State = 13050; Match(GROUP);
				State = 13051; Match(LR_BRACKET);
				State = 13052; Match(ORDER);
				State = 13053; Match(BY);
				State = 13054; expression(0);
				State = 13056;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1753,_ctx) ) {
				case 1:
					{
					State = 13055;
					_la = _input.La(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 13058; Match(RR_BRACKET);
				State = 13059; Match(OVER);
				State = 13060; Match(LR_BRACKET);
				State = 13064;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1754,_ctx) ) {
				case 1:
					{
					State = 13061; Match(PARTITION);
					State = 13062; Match(BY);
					State = 13063; expression_list_();
					}
					break;
				}
				State = 13066; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_distinct_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode DISTINCT() { return GetToken(TSqlParser.DISTINCT, 0); }
		public All_distinct_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_distinct_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAll_distinct_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAll_distinct_expression(this);
		}
	}

	[RuleVersion(0)]
	public All_distinct_expressionContext all_distinct_expression() {
		All_distinct_expressionContext _localctx = new All_distinct_expressionContext(_ctx, State);
		EnterRule(_localctx, 1136, RULE_all_distinct_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13071;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1756,_ctx) ) {
			case 1:
				{
				State = 13070;
				_la = _input.La(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 13073; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Over_clauseContext : ParserRuleContext {
		public ITerminalNode OVER() { return GetToken(TSqlParser.OVER, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public Expression_list_Context expression_list_() {
			return GetRuleContext<Expression_list_Context>(0);
		}
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Row_or_range_clauseContext row_or_range_clause() {
			return GetRuleContext<Row_or_range_clauseContext>(0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOver_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOver_clause(this);
		}
	}

	[RuleVersion(0)]
	public Over_clauseContext over_clause() {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, State);
		EnterRule(_localctx, 1138, RULE_over_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13075; Match(OVER);
			State = 13076; Match(LR_BRACKET);
			State = 13080;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1757,_ctx) ) {
			case 1:
				{
				State = 13077; Match(PARTITION);
				State = 13078; Match(BY);
				State = 13079; expression_list_();
				}
				break;
			}
			State = 13083;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1758,_ctx) ) {
			case 1:
				{
				State = 13082; order_by_clause();
				}
				break;
			}
			State = 13086;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1759,_ctx) ) {
			case 1:
				{
				State = 13085; row_or_range_clause();
				}
				break;
			}
			State = 13088; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_or_range_clauseContext : ParserRuleContext {
		public Window_frame_extentContext window_frame_extent() {
			return GetRuleContext<Window_frame_extentContext>(0);
		}
		public ITerminalNode ROWS() { return GetToken(TSqlParser.ROWS, 0); }
		public ITerminalNode RANGE() { return GetToken(TSqlParser.RANGE, 0); }
		public Row_or_range_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_or_range_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRow_or_range_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRow_or_range_clause(this);
		}
	}

	[RuleVersion(0)]
	public Row_or_range_clauseContext row_or_range_clause() {
		Row_or_range_clauseContext _localctx = new Row_or_range_clauseContext(_ctx, State);
		EnterRule(_localctx, 1140, RULE_row_or_range_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13090;
			_la = _input.La(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 13091; window_frame_extent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_extentContext : ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return GetRuleContext<Window_frame_precedingContext>(0);
		}
		public ITerminalNode BETWEEN() { return GetToken(TSqlParser.BETWEEN, 0); }
		public Window_frame_boundContext[] window_frame_bound() {
			return GetRuleContexts<Window_frame_boundContext>();
		}
		public Window_frame_boundContext window_frame_bound(int i) {
			return GetRuleContext<Window_frame_boundContext>(i);
		}
		public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		public Window_frame_extentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_extent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_extent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_extent(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_extentContext window_frame_extent() {
		Window_frame_extentContext _localctx = new Window_frame_extentContext(_ctx, State);
		EnterRule(_localctx, 1142, RULE_window_frame_extent);
		try {
			State = 13099;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1760,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13093; window_frame_preceding();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13094; Match(BETWEEN);
				State = 13095; window_frame_bound();
				State = 13096; Match(AND);
				State = 13097; window_frame_bound();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_boundContext : ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return GetRuleContext<Window_frame_precedingContext>(0);
		}
		public Window_frame_followingContext window_frame_following() {
			return GetRuleContext<Window_frame_followingContext>(0);
		}
		public Window_frame_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_bound; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_bound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_bound(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_boundContext window_frame_bound() {
		Window_frame_boundContext _localctx = new Window_frame_boundContext(_ctx, State);
		EnterRule(_localctx, 1144, RULE_window_frame_bound);
		try {
			State = 13103;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1761,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13101; window_frame_preceding();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13102; window_frame_following();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_precedingContext : ParserRuleContext {
		public ITerminalNode UNBOUNDED() { return GetToken(TSqlParser.UNBOUNDED, 0); }
		public ITerminalNode PRECEDING() { return GetToken(TSqlParser.PRECEDING, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode CURRENT() { return GetToken(TSqlParser.CURRENT, 0); }
		public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		public Window_frame_precedingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_preceding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_preceding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_preceding(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_precedingContext window_frame_preceding() {
		Window_frame_precedingContext _localctx = new Window_frame_precedingContext(_ctx, State);
		EnterRule(_localctx, 1146, RULE_window_frame_preceding);
		try {
			State = 13111;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1762,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13105; Match(UNBOUNDED);
				State = 13106; Match(PRECEDING);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13107; Match(DECIMAL);
				State = 13108; Match(PRECEDING);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 13109; Match(CURRENT);
				State = 13110; Match(ROW);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_followingContext : ParserRuleContext {
		public ITerminalNode UNBOUNDED() { return GetToken(TSqlParser.UNBOUNDED, 0); }
		public ITerminalNode FOLLOWING() { return GetToken(TSqlParser.FOLLOWING, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Window_frame_followingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_following; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_following(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_following(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_followingContext window_frame_following() {
		Window_frame_followingContext _localctx = new Window_frame_followingContext(_ctx, State);
		EnterRule(_localctx, 1148, RULE_window_frame_following);
		try {
			State = 13117;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1763,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13113; Match(UNBOUNDED);
				State = 13114; Match(FOLLOWING);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13115; Match(DECIMAL);
				State = 13116; Match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_database_optionContext : ParserRuleContext {
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public Database_filestream_optionContext[] database_filestream_option() {
			return GetRuleContexts<Database_filestream_optionContext>();
		}
		public Database_filestream_optionContext database_filestream_option(int i) {
			return GetRuleContext<Database_filestream_optionContext>(i);
		}
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public ITerminalNode NESTED_TRIGGERS() { return GetToken(TSqlParser.NESTED_TRIGGERS, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode TRANSFORM_NOISE_WORDS() { return GetToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public ITerminalNode TWO_DIGIT_YEAR_CUTOFF() { return GetToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode DB_CHAINING() { return GetToken(TSqlParser.DB_CHAINING, 0); }
		public ITerminalNode TRUSTWORTHY() { return GetToken(TSqlParser.TRUSTWORTHY, 0); }
		public ITerminalNode CATALOG_COLLATION() { return GetToken(TSqlParser.CATALOG_COLLATION, 0); }
		public ITerminalNode DATABASE_DEFAULT() { return GetToken(TSqlParser.DATABASE_DEFAULT, 0); }
		public ITerminalNode LEDGER() { return GetToken(TSqlParser.LEDGER, 0); }
		public Create_database_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_database_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_database_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_database_option(this);
		}
	}

	[RuleVersion(0)]
	public Create_database_optionContext create_database_option() {
		Create_database_optionContext _localctx = new Create_database_optionContext(_ctx, State);
		EnterRule(_localctx, 1150, RULE_create_database_option);
		int _la;
		try {
			int _alt;
			State = 13162;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1768,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13119; Match(FILESTREAM);
				{
				State = 13120; database_filestream_option();
				State = 13125;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1764,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 13121; Match(COMMA);
						State = 13122; database_filestream_option();
						}
						} 
					}
					State = 13127;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1764,_ctx);
				}
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13128; Match(DEFAULT_LANGUAGE);
				State = 13129; Match(EQUAL);
				State = 13132;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1765,_ctx) ) {
				case 1:
					{
					State = 13130; id_();
					}
					break;

				case 2:
					{
					State = 13131; Match(STRING);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 13134; Match(DEFAULT_FULLTEXT_LANGUAGE);
				State = 13135; Match(EQUAL);
				State = 13138;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1766,_ctx) ) {
				case 1:
					{
					State = 13136; id_();
					}
					break;

				case 2:
					{
					State = 13137; Match(STRING);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 13140; Match(NESTED_TRIGGERS);
				State = 13141; Match(EQUAL);
				State = 13142;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 13143; Match(TRANSFORM_NOISE_WORDS);
				State = 13144; Match(EQUAL);
				State = 13145;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 13146; Match(TWO_DIGIT_YEAR_CUTOFF);
				State = 13147; Match(EQUAL);
				State = 13148; Match(DECIMAL);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 13149; Match(DB_CHAINING);
				State = 13150;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 13151; Match(TRUSTWORTHY);
				State = 13152;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 13153; Match(CATALOG_COLLATION);
				State = 13154; Match(EQUAL);
				State = 13157;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1767,_ctx) ) {
				case 1:
					{
					State = 13155; id_();
					}
					break;

				case 2:
					{
					State = 13156; Match(DATABASE_DEFAULT);
					}
					break;
				}
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 13159; Match(LEDGER);
				State = 13160; Match(EQUAL);
				State = 13161;
				_la = _input.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_filestream_optionContext : ParserRuleContext {
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode NON_TRANSACTED_ACCESS() { return GetToken(TSqlParser.NON_TRANSACTED_ACCESS, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DIRECTORY_NAME() { return GetToken(TSqlParser.DIRECTORY_NAME, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode FULL() { return GetToken(TSqlParser.FULL, 0); }
		public Database_filestream_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_filestream_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDatabase_filestream_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDatabase_filestream_option(this);
		}
	}

	[RuleVersion(0)]
	public Database_filestream_optionContext database_filestream_option() {
		Database_filestream_optionContext _localctx = new Database_filestream_optionContext(_ctx, State);
		EnterRule(_localctx, 1152, RULE_database_filestream_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13164; Match(LR_BRACKET);
			State = 13171;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1769,_ctx) ) {
			case 1:
				{
				{
				State = 13165; Match(NON_TRANSACTED_ACCESS);
				State = 13166; Match(EQUAL);
				State = 13167;
				_la = _input.La(1);
				if ( !(_la==FULL || _la==OFF || _la==READ_ONLY) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				}
				break;

			case 2:
				{
				{
				State = 13168; Match(DIRECTORY_NAME);
				State = 13169; Match(EQUAL);
				State = 13170; Match(STRING);
				}
				}
				break;
			}
			State = 13173; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_file_specContext : ParserRuleContext {
		public File_groupContext file_group() {
			return GetRuleContext<File_groupContext>(0);
		}
		public File_specContext file_spec() {
			return GetRuleContext<File_specContext>(0);
		}
		public Database_file_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_file_spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDatabase_file_spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDatabase_file_spec(this);
		}
	}

	[RuleVersion(0)]
	public Database_file_specContext database_file_spec() {
		Database_file_specContext _localctx = new Database_file_specContext(_ctx, State);
		EnterRule(_localctx, 1154, RULE_database_file_spec);
		try {
			State = 13177;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1770,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13175; file_group();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13176; file_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_groupContext : ParserRuleContext {
		public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public File_specContext[] file_spec() {
			return GetRuleContexts<File_specContext>();
		}
		public File_specContext file_spec(int i) {
			return GetRuleContext<File_specContext>(i);
		}
		public ITerminalNode[] CONTAINS() { return GetTokens(TSqlParser.CONTAINS); }
		public ITerminalNode CONTAINS(int i) {
			return GetToken(TSqlParser.CONTAINS, i);
		}
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode MEMORY_OPTIMIZED_DATA() { return GetToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public File_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_group(this);
		}
	}

	[RuleVersion(0)]
	public File_groupContext file_group() {
		File_groupContext _localctx = new File_groupContext(_ctx, State);
		EnterRule(_localctx, 1156, RULE_file_group);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 13179; Match(FILEGROUP);
			State = 13180; id_();
			State = 13183;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1771,_ctx) ) {
			case 1:
				{
				State = 13181; Match(CONTAINS);
				State = 13182; Match(FILESTREAM);
				}
				break;
			}
			State = 13186;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1772,_ctx) ) {
			case 1:
				{
				State = 13185; Match(DEFAULT);
				}
				break;
			}
			State = 13190;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1773,_ctx) ) {
			case 1:
				{
				State = 13188; Match(CONTAINS);
				State = 13189; Match(MEMORY_OPTIMIZED_DATA);
				}
				break;
			}
			State = 13192; file_spec();
			State = 13197;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1774,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 13193; Match(COMMA);
					State = 13194; file_spec();
					}
					} 
				}
				State = 13199;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1774,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_specContext : ParserRuleContext {
		public IToken file;
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode FILENAME() { return GetToken(TSqlParser.FILENAME, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		public File_sizeContext[] file_size() {
			return GetRuleContexts<File_sizeContext>();
		}
		public File_sizeContext file_size(int i) {
			return GetRuleContext<File_sizeContext>(i);
		}
		public ITerminalNode MAXSIZE() { return GetToken(TSqlParser.MAXSIZE, 0); }
		public ITerminalNode FILEGROWTH() { return GetToken(TSqlParser.FILEGROWTH, 0); }
		public ITerminalNode UNLIMITED() { return GetToken(TSqlParser.UNLIMITED, 0); }
		public File_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_spec(this);
		}
	}

	[RuleVersion(0)]
	public File_specContext file_spec() {
		File_specContext _localctx = new File_specContext(_ctx, State);
		EnterRule(_localctx, 1158, RULE_file_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13200; Match(LR_BRACKET);
			State = 13201; Match(NAME);
			State = 13202; Match(EQUAL);
			State = 13205;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1775,_ctx) ) {
			case 1:
				{
				State = 13203; id_();
				}
				break;

			case 2:
				{
				State = 13204; Match(STRING);
				}
				break;
			}
			State = 13208;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1776,_ctx) ) {
			case 1:
				{
				State = 13207; Match(COMMA);
				}
				break;
			}
			State = 13210; Match(FILENAME);
			State = 13211; Match(EQUAL);
			State = 13212; _localctx.file = Match(STRING);
			State = 13214;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1777,_ctx) ) {
			case 1:
				{
				State = 13213; Match(COMMA);
				}
				break;
			}
			State = 13222;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1779,_ctx) ) {
			case 1:
				{
				State = 13216; Match(SIZE);
				State = 13217; Match(EQUAL);
				State = 13218; file_size();
				State = 13220;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1778,_ctx) ) {
				case 1:
					{
					State = 13219; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 13233;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1782,_ctx) ) {
			case 1:
				{
				State = 13224; Match(MAXSIZE);
				State = 13225; Match(EQUAL);
				State = 13228;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1780,_ctx) ) {
				case 1:
					{
					State = 13226; file_size();
					}
					break;

				case 2:
					{
					State = 13227; Match(UNLIMITED);
					}
					break;
				}
				State = 13231;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1781,_ctx) ) {
				case 1:
					{
					State = 13230; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 13241;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1784,_ctx) ) {
			case 1:
				{
				State = 13235; Match(FILEGROWTH);
				State = 13236; Match(EQUAL);
				State = 13237; file_size();
				State = 13239;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1783,_ctx) ) {
				case 1:
					{
					State = 13238; Match(COMMA);
					}
					break;
				}
				}
				break;
			}
			State = 13243; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_nameContext : ParserRuleContext {
		public Id_Context server;
		public Id_Context database;
		public Id_Context schema;
		public Id_Context table;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Entity_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEntity_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEntity_name(this);
		}
	}

	[RuleVersion(0)]
	public Entity_nameContext entity_name() {
		Entity_nameContext _localctx = new Entity_nameContext(_ctx, State);
		EnterRule(_localctx, 1160, RULE_entity_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13262;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1786,_ctx) ) {
			case 1:
				{
				State = 13245; _localctx.server = id_();
				State = 13246; Match(DOT);
				State = 13247; _localctx.database = id_();
				State = 13248; Match(DOT);
				State = 13249; _localctx.schema = id_();
				State = 13250; Match(DOT);
				}
				break;

			case 2:
				{
				State = 13252; _localctx.database = id_();
				State = 13253; Match(DOT);
				State = 13255;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1785,_ctx) ) {
				case 1:
					{
					State = 13254; _localctx.schema = id_();
					}
					break;
				}
				State = 13257; Match(DOT);
				}
				break;

			case 3:
				{
				State = 13259; _localctx.schema = id_();
				State = 13260; Match(DOT);
				}
				break;
			}
			State = 13264; _localctx.table = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_name_for_azure_dwContext : ParserRuleContext {
		public Id_Context schema;
		public Id_Context object_name;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Entity_name_for_azure_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_name_for_azure_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEntity_name_for_azure_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEntity_name_for_azure_dw(this);
		}
	}

	[RuleVersion(0)]
	public Entity_name_for_azure_dwContext entity_name_for_azure_dw() {
		Entity_name_for_azure_dwContext _localctx = new Entity_name_for_azure_dwContext(_ctx, State);
		EnterRule(_localctx, 1162, RULE_entity_name_for_azure_dw);
		try {
			State = 13271;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1787,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13266; _localctx.schema = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13267; _localctx.schema = id_();
				State = 13268; Match(DOT);
				State = 13269; _localctx.object_name = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_name_for_parallel_dwContext : ParserRuleContext {
		public Id_Context schema_database;
		public Id_Context schema;
		public Id_Context object_name;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Entity_name_for_parallel_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_name_for_parallel_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEntity_name_for_parallel_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEntity_name_for_parallel_dw(this);
		}
	}

	[RuleVersion(0)]
	public Entity_name_for_parallel_dwContext entity_name_for_parallel_dw() {
		Entity_name_for_parallel_dwContext _localctx = new Entity_name_for_parallel_dwContext(_ctx, State);
		EnterRule(_localctx, 1164, RULE_entity_name_for_parallel_dw);
		try {
			State = 13278;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1788,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13273; _localctx.schema_database = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13274; _localctx.schema = id_();
				State = 13275; Match(DOT);
				State = 13276; _localctx.object_name = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_table_nameContext : ParserRuleContext {
		public Id_Context linkedServer;
		public Id_Context schema;
		public Id_Context server;
		public Id_Context database;
		public Id_Context table;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Full_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFull_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFull_table_name(this);
		}
	}

	[RuleVersion(0)]
	public Full_table_nameContext full_table_name() {
		Full_table_nameContext _localctx = new Full_table_nameContext(_ctx, State);
		EnterRule(_localctx, 1166, RULE_full_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13303;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1790,_ctx) ) {
			case 1:
				{
				State = 13280; _localctx.linkedServer = id_();
				State = 13281; Match(DOT);
				State = 13282; Match(DOT);
				State = 13283; _localctx.schema = id_();
				State = 13284; Match(DOT);
				}
				break;

			case 2:
				{
				State = 13286; _localctx.server = id_();
				State = 13287; Match(DOT);
				State = 13288; _localctx.database = id_();
				State = 13289; Match(DOT);
				State = 13290; _localctx.schema = id_();
				State = 13291; Match(DOT);
				}
				break;

			case 3:
				{
				State = 13293; _localctx.database = id_();
				State = 13294; Match(DOT);
				State = 13296;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1789,_ctx) ) {
				case 1:
					{
					State = 13295; _localctx.schema = id_();
					}
					break;
				}
				State = 13298; Match(DOT);
				}
				break;

			case 4:
				{
				State = 13300; _localctx.schema = id_();
				State = 13301; Match(DOT);
				}
				break;
			}
			State = 13305; _localctx.table = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_nameContext : ParserRuleContext {
		public Id_Context database;
		public Id_Context schema;
		public Id_Context table;
		public IToken blocking_hierarchy;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode BLOCKING_HIERARCHY() { return GetToken(TSqlParser.BLOCKING_HIERARCHY, 0); }
		public Table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_name(this);
		}
	}

	[RuleVersion(0)]
	public Table_nameContext table_name() {
		Table_nameContext _localctx = new Table_nameContext(_ctx, State);
		EnterRule(_localctx, 1168, RULE_table_name);
		try {
			State = 13333;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1795,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13317;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1792,_ctx) ) {
				case 1:
					{
					State = 13307; _localctx.database = id_();
					State = 13308; Match(DOT);
					State = 13310;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1791,_ctx) ) {
					case 1:
						{
						State = 13309; _localctx.schema = id_();
						}
						break;
					}
					State = 13312; Match(DOT);
					}
					break;

				case 2:
					{
					State = 13314; _localctx.schema = id_();
					State = 13315; Match(DOT);
					}
					break;
				}
				State = 13319; _localctx.table = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13330;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1794,_ctx) ) {
				case 1:
					{
					State = 13320; _localctx.database = id_();
					State = 13321; Match(DOT);
					State = 13323;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1793,_ctx) ) {
					case 1:
						{
						State = 13322; _localctx.schema = id_();
						}
						break;
					}
					State = 13325; Match(DOT);
					}
					break;

				case 2:
					{
					State = 13327; _localctx.schema = id_();
					State = 13328; Match(DOT);
					}
					break;
				}
				State = 13332; _localctx.blocking_hierarchy = Match(BLOCKING_HIERARCHY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_nameContext : ParserRuleContext {
		public Id_Context schema;
		public Id_Context name;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Simple_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSimple_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSimple_name(this);
		}
	}

	[RuleVersion(0)]
	public Simple_nameContext simple_name() {
		Simple_nameContext _localctx = new Simple_nameContext(_ctx, State);
		EnterRule(_localctx, 1170, RULE_simple_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13338;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1796,_ctx) ) {
			case 1:
				{
				State = 13335; _localctx.schema = id_();
				State = 13336; Match(DOT);
				}
				break;
			}
			State = 13340; _localctx.name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_proc_name_schemaContext : ParserRuleContext {
		public Id_Context schema;
		public Id_Context procedure;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Func_proc_name_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_proc_name_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_proc_name_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_proc_name_schema(this);
		}
	}

	[RuleVersion(0)]
	public Func_proc_name_schemaContext func_proc_name_schema() {
		Func_proc_name_schemaContext _localctx = new Func_proc_name_schemaContext(_ctx, State);
		EnterRule(_localctx, 1172, RULE_func_proc_name_schema);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13345;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1797,_ctx) ) {
			case 1:
				{
				{
				State = 13342; _localctx.schema = id_();
				}
				State = 13343; Match(DOT);
				}
				break;
			}
			State = 13347; _localctx.procedure = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_proc_name_database_schemaContext : ParserRuleContext {
		public Id_Context database;
		public Id_Context schema;
		public Id_Context procedure;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Func_proc_name_schemaContext func_proc_name_schema() {
			return GetRuleContext<Func_proc_name_schemaContext>(0);
		}
		public Func_proc_name_database_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_proc_name_database_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_proc_name_database_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_proc_name_database_schema(this);
		}
	}

	[RuleVersion(0)]
	public Func_proc_name_database_schemaContext func_proc_name_database_schema() {
		Func_proc_name_database_schemaContext _localctx = new Func_proc_name_database_schemaContext(_ctx, State);
		EnterRule(_localctx, 1174, RULE_func_proc_name_database_schema);
		try {
			State = 13359;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1800,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13350;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1798,_ctx) ) {
				case 1:
					{
					State = 13349; _localctx.database = id_();
					}
					break;
				}
				State = 13352; Match(DOT);
				State = 13354;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1799,_ctx) ) {
				case 1:
					{
					State = 13353; _localctx.schema = id_();
					}
					break;
				}
				State = 13356; Match(DOT);
				State = 13357; _localctx.procedure = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13358; func_proc_name_schema();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_proc_name_server_database_schemaContext : ParserRuleContext {
		public Id_Context server;
		public Id_Context database;
		public Id_Context schema;
		public Id_Context procedure;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Func_proc_name_database_schemaContext func_proc_name_database_schema() {
			return GetRuleContext<Func_proc_name_database_schemaContext>(0);
		}
		public Func_proc_name_server_database_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_proc_name_server_database_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_proc_name_server_database_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_proc_name_server_database_schema(this);
		}
	}

	[RuleVersion(0)]
	public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
		Func_proc_name_server_database_schemaContext _localctx = new Func_proc_name_server_database_schemaContext(_ctx, State);
		EnterRule(_localctx, 1176, RULE_func_proc_name_server_database_schema);
		try {
			State = 13375;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1804,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13362;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1801,_ctx) ) {
				case 1:
					{
					State = 13361; _localctx.server = id_();
					}
					break;
				}
				State = 13364; Match(DOT);
				State = 13366;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1802,_ctx) ) {
				case 1:
					{
					State = 13365; _localctx.database = id_();
					}
					break;
				}
				State = 13368; Match(DOT);
				State = 13370;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1803,_ctx) ) {
				case 1:
					{
					State = 13369; _localctx.schema = id_();
					}
					break;
				}
				State = 13372; Match(DOT);
				State = 13373; _localctx.procedure = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13374; func_proc_name_database_schema();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_objectContext : ParserRuleContext {
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Ddl_objectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_object; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDdl_object(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDdl_object(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_objectContext ddl_object() {
		Ddl_objectContext _localctx = new Ddl_objectContext(_ctx, State);
		EnterRule(_localctx, 1178, RULE_ddl_object);
		try {
			State = 13379;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1805,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13377; full_table_name();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13378; Match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_column_nameContext : ParserRuleContext {
		public Id_Context column_name;
		public Id_Context server;
		public Id_Context schema;
		public Id_Context tablename;
		public ITerminalNode DELETED() { return GetToken(TSqlParser.DELETED, 0); }
		public ITerminalNode INSERTED() { return GetToken(TSqlParser.INSERTED, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Full_column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_column_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFull_column_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFull_column_name(this);
		}
	}

	[RuleVersion(0)]
	public Full_column_nameContext full_column_name() {
		Full_column_nameContext _localctx = new Full_column_nameContext(_ctx, State);
		EnterRule(_localctx, 1180, RULE_full_column_name);
		int _la;
		try {
			State = 13412;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1812,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13381;
				_la = _input.La(1);
				if ( !(_la==DELETED || _la==INSERTED) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 13382; Match(DOT);
				State = 13383; _localctx.column_name = id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13385;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1806,_ctx) ) {
				case 1:
					{
					State = 13384; _localctx.server = id_();
					}
					break;
				}
				State = 13387; Match(DOT);
				State = 13389;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1807,_ctx) ) {
				case 1:
					{
					State = 13388; _localctx.schema = id_();
					}
					break;
				}
				State = 13391; Match(DOT);
				State = 13393;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1808,_ctx) ) {
				case 1:
					{
					State = 13392; _localctx.tablename = id_();
					}
					break;
				}
				State = 13395; Match(DOT);
				State = 13396; _localctx.column_name = id_();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 13398;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1809,_ctx) ) {
				case 1:
					{
					State = 13397; _localctx.schema = id_();
					}
					break;
				}
				State = 13400; Match(DOT);
				State = 13402;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1810,_ctx) ) {
				case 1:
					{
					State = 13401; _localctx.tablename = id_();
					}
					break;
				}
				State = 13404; Match(DOT);
				State = 13405; _localctx.column_name = id_();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 13407;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1811,_ctx) ) {
				case 1:
					{
					State = 13406; _localctx.tablename = id_();
					}
					break;
				}
				State = 13409; Match(DOT);
				State = 13410; _localctx.column_name = id_();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 13411; _localctx.column_name = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_list_with_orderContext : ParserRuleContext {
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public ITerminalNode[] ASC() { return GetTokens(TSqlParser.ASC); }
		public ITerminalNode ASC(int i) {
			return GetToken(TSqlParser.ASC, i);
		}
		public ITerminalNode[] DESC() { return GetTokens(TSqlParser.DESC); }
		public ITerminalNode DESC(int i) {
			return GetToken(TSqlParser.DESC, i);
		}
		public Column_name_list_with_orderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_list_with_order; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_name_list_with_order(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_name_list_with_order(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_list_with_orderContext column_name_list_with_order() {
		Column_name_list_with_orderContext _localctx = new Column_name_list_with_orderContext(_ctx, State);
		EnterRule(_localctx, 1182, RULE_column_name_list_with_order);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 13414; id_();
			State = 13416;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1813,_ctx) ) {
			case 1:
				{
				State = 13415;
				_la = _input.La(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 13425;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1815,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 13418; Match(COMMA);
					State = 13419; id_();
					State = 13421;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1814,_ctx) ) {
					case 1:
						{
						State = 13420;
						_la = _input.La(1);
						if ( !(_la==ASC || _la==DESC) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					}
					} 
				}
				State = 13427;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1815,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_column_name_listContext : ParserRuleContext {
		public Insert_column_idContext _insert_column_id;
		public IList<Insert_column_idContext> _col = new List<Insert_column_idContext>();
		public Insert_column_idContext[] insert_column_id() {
			return GetRuleContexts<Insert_column_idContext>();
		}
		public Insert_column_idContext insert_column_id(int i) {
			return GetRuleContext<Insert_column_idContext>(i);
		}
		public Insert_column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_column_name_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_column_name_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_column_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Insert_column_name_listContext insert_column_name_list() {
		Insert_column_name_listContext _localctx = new Insert_column_name_listContext(_ctx, State);
		EnterRule(_localctx, 1184, RULE_insert_column_name_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 13428; _localctx._insert_column_id = insert_column_id();
			_localctx._col.Add(_localctx._insert_column_id);
			State = 13433;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1816,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 13429; Match(COMMA);
					State = 13430; _localctx._insert_column_id = insert_column_id();
					_localctx._col.Add(_localctx._insert_column_id);
					}
					} 
				}
				State = 13435;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1816,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_column_idContext : ParserRuleContext {
		public Id_Context _id_;
		public IList<Id_Context> _ignore = new List<Id_Context>();
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Insert_column_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_column_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_column_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_column_id(this);
		}
	}

	[RuleVersion(0)]
	public Insert_column_idContext insert_column_id() {
		Insert_column_idContext _localctx = new Insert_column_idContext(_ctx, State);
		EnterRule(_localctx, 1186, RULE_insert_column_id);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 13442;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1818,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 13437;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1817,_ctx) ) {
					case 1:
						{
						State = 13436; _localctx._id_ = id_();
						_localctx._ignore.Add(_localctx._id_);
						}
						break;
					}
					State = 13439; Match(DOT);
					}
					} 
				}
				State = 13444;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1818,_ctx);
			}
			State = 13445; id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_listContext : ParserRuleContext {
		public Id_Context _id_;
		public IList<Id_Context> _col = new List<Id_Context>();
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_name_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_listContext column_name_list() {
		Column_name_listContext _localctx = new Column_name_listContext(_ctx, State);
		EnterRule(_localctx, 1188, RULE_column_name_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 13447; _localctx._id_ = id_();
			_localctx._col.Add(_localctx._id_);
			State = 13452;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1819,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 13448; Match(COMMA);
					State = 13449; _localctx._id_ = id_();
					_localctx._col.Add(_localctx._id_);
					}
					} 
				}
				State = 13454;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1819,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_nameContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Cursor_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCursor_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCursor_name(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_nameContext cursor_name() {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, State);
		EnterRule(_localctx, 1190, RULE_cursor_name);
		try {
			State = 13457;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1820,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13455; id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13456; Match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_offContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public On_offContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_off; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOn_off(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOn_off(this);
		}
	}

	[RuleVersion(0)]
	public On_offContext on_off() {
		On_offContext _localctx = new On_offContext(_ctx, State);
		EnterRule(_localctx, 1192, RULE_on_off);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13459;
			_la = _input.La(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClusteredContext : ParserRuleContext {
		public ITerminalNode CLUSTERED() { return GetToken(TSqlParser.CLUSTERED, 0); }
		public ITerminalNode NONCLUSTERED() { return GetToken(TSqlParser.NONCLUSTERED, 0); }
		public ClusteredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clustered; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClustered(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClustered(this);
		}
	}

	[RuleVersion(0)]
	public ClusteredContext clustered() {
		ClusteredContext _localctx = new ClusteredContext(_ctx, State);
		EnterRule(_localctx, 1194, RULE_clustered);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13461;
			_la = _input.La(1);
			if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_notnullContext : ParserRuleContext {
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public Null_notnullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_notnull; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNull_notnull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNull_notnull(this);
		}
	}

	[RuleVersion(0)]
	public Null_notnullContext null_notnull() {
		Null_notnullContext _localctx = new Null_notnullContext(_ctx, State);
		EnterRule(_localctx, 1196, RULE_null_notnull);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13464;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1821,_ctx) ) {
			case 1:
				{
				State = 13463; Match(NOT);
				}
				break;
			}
			State = 13466; Match(NULL_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_or_defaultContext : ParserRuleContext {
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Null_or_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_or_default; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNull_or_default(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNull_or_default(this);
		}
	}

	[RuleVersion(0)]
	public Null_or_defaultContext null_or_default() {
		Null_or_defaultContext _localctx = new Null_or_defaultContext(_ctx, State);
		EnterRule(_localctx, 1198, RULE_null_or_default);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13479;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1824,_ctx) ) {
			case 1:
				{
				State = 13468; null_notnull();
				}
				break;

			case 2:
				{
				State = 13469; Match(DEFAULT);
				State = 13470; constant_expression();
				State = 13473;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1822,_ctx) ) {
				case 1:
					{
					State = 13471; Match(COLLATE);
					State = 13472; id_();
					}
					break;
				}
				State = 13477;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1823,_ctx) ) {
				case 1:
					{
					State = 13475; Match(WITH);
					State = 13476; Match(VALUES);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_function_nameContext : ParserRuleContext {
		public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return GetRuleContext<Func_proc_name_server_database_schemaContext>(0);
		}
		public ITerminalNode RIGHT() { return GetToken(TSqlParser.RIGHT, 0); }
		public ITerminalNode LEFT() { return GetToken(TSqlParser.LEFT, 0); }
		public ITerminalNode BINARY_CHECKSUM() { return GetToken(TSqlParser.BINARY_CHECKSUM, 0); }
		public ITerminalNode CHECKSUM() { return GetToken(TSqlParser.CHECKSUM, 0); }
		public Scalar_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_function_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterScalar_function_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitScalar_function_name(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_function_nameContext scalar_function_name() {
		Scalar_function_nameContext _localctx = new Scalar_function_nameContext(_ctx, State);
		EnterRule(_localctx, 1200, RULE_scalar_function_name);
		try {
			State = 13486;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1825,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13481; func_proc_name_server_database_schema();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13482; Match(RIGHT);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 13483; Match(LEFT);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 13484; Match(BINARY_CHECKSUM);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 13485; Match(CHECKSUM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Begin_conversation_timerContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode TIMER() { return GetToken(TSqlParser.TIMER, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		public Begin_conversation_timerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_begin_conversation_timer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBegin_conversation_timer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBegin_conversation_timer(this);
		}
	}

	[RuleVersion(0)]
	public Begin_conversation_timerContext begin_conversation_timer() {
		Begin_conversation_timerContext _localctx = new Begin_conversation_timerContext(_ctx, State);
		EnterRule(_localctx, 1202, RULE_begin_conversation_timer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13488; Match(BEGIN);
			State = 13489; Match(CONVERSATION);
			State = 13490; Match(TIMER);
			State = 13491; Match(LR_BRACKET);
			State = 13492; Match(LOCAL_ID);
			State = 13493; Match(RR_BRACKET);
			State = 13494; Match(TIMEOUT);
			State = 13495; Match(EQUAL);
			State = 13496; time();
			State = 13498;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1826,_ctx) ) {
			case 1:
				{
				State = 13497; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Begin_conversation_dialogContext : ParserRuleContext {
		public IToken dialog_handle;
		public Service_nameContext initiator_service_name;
		public Service_nameContext target_service_name;
		public IToken service_broker_guid;
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode DIALOG() { return GetToken(TSqlParser.DIALOG, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode[] SERVICE() { return GetTokens(TSqlParser.SERVICE); }
		public ITerminalNode SERVICE(int i) {
			return GetToken(TSqlParser.SERVICE, i);
		}
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public Contract_nameContext contract_name() {
			return GetRuleContext<Contract_nameContext>(0);
		}
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public Service_nameContext[] service_name() {
			return GetRuleContexts<Service_nameContext>();
		}
		public Service_nameContext service_name(int i) {
			return GetRuleContext<Service_nameContext>(i);
		}
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LIFETIME() { return GetToken(TSqlParser.LIFETIME, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode RELATED_CONVERSATION() { return GetToken(TSqlParser.RELATED_CONVERSATION, 0); }
		public ITerminalNode RELATED_CONVERSATION_GROUP() { return GetToken(TSqlParser.RELATED_CONVERSATION_GROUP, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Begin_conversation_dialogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_begin_conversation_dialog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBegin_conversation_dialog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBegin_conversation_dialog(this);
		}
	}

	[RuleVersion(0)]
	public Begin_conversation_dialogContext begin_conversation_dialog() {
		Begin_conversation_dialogContext _localctx = new Begin_conversation_dialogContext(_ctx, State);
		EnterRule(_localctx, 1204, RULE_begin_conversation_dialog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13500; Match(BEGIN);
			State = 13501; Match(DIALOG);
			State = 13503;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1827,_ctx) ) {
			case 1:
				{
				State = 13502; Match(CONVERSATION);
				}
				break;
			}
			State = 13505; _localctx.dialog_handle = Match(LOCAL_ID);
			State = 13506; Match(FROM);
			State = 13507; Match(SERVICE);
			State = 13508; _localctx.initiator_service_name = service_name();
			State = 13509; Match(TO);
			State = 13510; Match(SERVICE);
			State = 13511; _localctx.target_service_name = service_name();
			State = 13514;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1828,_ctx) ) {
			case 1:
				{
				State = 13512; Match(COMMA);
				State = 13513; _localctx.service_broker_guid = Match(STRING);
				}
				break;
			}
			State = 13516; Match(ON);
			State = 13517; Match(CONTRACT);
			State = 13518; contract_name();
			State = 13541;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1834,_ctx) ) {
			case 1:
				{
				State = 13519; Match(WITH);
				State = 13526;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1830,_ctx) ) {
				case 1:
					{
					State = 13520;
					_la = _input.La(1);
					if ( !(_la==RELATED_CONVERSATION || _la==RELATED_CONVERSATION_GROUP) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 13521; Match(EQUAL);
					State = 13522; Match(LOCAL_ID);
					State = 13524;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1829,_ctx) ) {
					case 1:
						{
						State = 13523; Match(COMMA);
						}
						break;
					}
					}
					break;
				}
				State = 13534;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1832,_ctx) ) {
				case 1:
					{
					State = 13528; Match(LIFETIME);
					State = 13529; Match(EQUAL);
					State = 13530;
					_la = _input.La(1);
					if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 13532;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1831,_ctx) ) {
					case 1:
						{
						State = 13531; Match(COMMA);
						}
						break;
					}
					}
					break;
				}
				State = 13539;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1833,_ctx) ) {
				case 1:
					{
					State = 13536; Match(ENCRYPTION);
					State = 13537; Match(EQUAL);
					State = 13538; on_off();
					}
					break;
				}
				}
				break;
			}
			State = 13544;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1835,_ctx) ) {
			case 1:
				{
				State = 13543; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Contract_nameContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Contract_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contract_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterContract_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitContract_name(this);
		}
	}

	[RuleVersion(0)]
	public Contract_nameContext contract_name() {
		Contract_nameContext _localctx = new Contract_nameContext(_ctx, State);
		EnterRule(_localctx, 1206, RULE_contract_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13548;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1836,_ctx) ) {
			case 1:
				{
				State = 13546; id_();
				}
				break;

			case 2:
				{
				State = 13547; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Service_nameContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Service_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_service_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterService_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitService_name(this);
		}
	}

	[RuleVersion(0)]
	public Service_nameContext service_name() {
		Service_nameContext _localctx = new Service_nameContext(_ctx, State);
		EnterRule(_localctx, 1208, RULE_service_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13552;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1837,_ctx) ) {
			case 1:
				{
				State = 13550; id_();
				}
				break;

			case 2:
				{
				State = 13551; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_conversationContext : ParserRuleContext {
		public IToken conversation_handle;
		public IToken faliure_code;
		public IToken failure_text;
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ERROR() { return GetToken(TSqlParser.ERROR, 0); }
		public ITerminalNode DESCRIPTION() { return GetToken(TSqlParser.DESCRIPTION, 0); }
		public ITerminalNode CLEANUP() { return GetToken(TSqlParser.CLEANUP, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public End_conversationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_conversation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEnd_conversation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEnd_conversation(this);
		}
	}

	[RuleVersion(0)]
	public End_conversationContext end_conversation() {
		End_conversationContext _localctx = new End_conversationContext(_ctx, State);
		EnterRule(_localctx, 1210, RULE_end_conversation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13554; Match(END);
			State = 13555; Match(CONVERSATION);
			State = 13556; _localctx.conversation_handle = Match(LOCAL_ID);
			State = 13558;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1838,_ctx) ) {
			case 1:
				{
				State = 13557; Match(SEMI);
				}
				break;
			}
			State = 13572;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1841,_ctx) ) {
			case 1:
				{
				State = 13560; Match(WITH);
				State = 13567;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1839,_ctx) ) {
				case 1:
					{
					State = 13561; Match(ERROR);
					State = 13562; Match(EQUAL);
					State = 13563;
					_localctx.faliure_code = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						_localctx.faliure_code = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 13564; Match(DESCRIPTION);
					State = 13565; Match(EQUAL);
					State = 13566;
					_localctx.failure_text = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						_localctx.failure_text = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 13570;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1840,_ctx) ) {
				case 1:
					{
					State = 13569; Match(CLEANUP);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Waitfor_conversationContext : ParserRuleContext {
		public TimeContext timeout;
		public Get_conversationContext get_conversation() {
			return GetRuleContext<Get_conversationContext>(0);
		}
		public ITerminalNode WAITFOR() { return GetToken(TSqlParser.WAITFOR, 0); }
		public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		public Waitfor_conversationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitfor_conversation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWaitfor_conversation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWaitfor_conversation(this);
		}
	}

	[RuleVersion(0)]
	public Waitfor_conversationContext waitfor_conversation() {
		Waitfor_conversationContext _localctx = new Waitfor_conversationContext(_ctx, State);
		EnterRule(_localctx, 1212, RULE_waitfor_conversation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13575;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1842,_ctx) ) {
			case 1:
				{
				State = 13574; Match(WAITFOR);
				}
				break;
			}
			State = 13577; Match(LR_BRACKET);
			State = 13578; get_conversation();
			State = 13579; Match(RR_BRACKET);
			State = 13585;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1844,_ctx) ) {
			case 1:
				{
				State = 13581;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1843,_ctx) ) {
				case 1:
					{
					State = 13580; Match(COMMA);
					}
					break;
				}
				State = 13583; Match(TIMEOUT);
				State = 13584; _localctx.timeout = time();
				}
				break;
			}
			State = 13588;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1845,_ctx) ) {
			case 1:
				{
				State = 13587; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_conversationContext : ParserRuleContext {
		public IToken conversation_group_id;
		public Queue_idContext queue;
		public ITerminalNode GET() { return GetToken(TSqlParser.GET, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Queue_idContext queue_id() {
			return GetRuleContext<Queue_idContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Get_conversationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_conversation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGet_conversation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGet_conversation(this);
		}
	}

	[RuleVersion(0)]
	public Get_conversationContext get_conversation() {
		Get_conversationContext _localctx = new Get_conversationContext(_ctx, State);
		EnterRule(_localctx, 1214, RULE_get_conversation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13590; Match(GET);
			State = 13591; Match(CONVERSATION);
			State = 13592; Match(GROUP);
			State = 13593;
			_localctx.conversation_group_id = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
				_localctx.conversation_group_id = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 13594; Match(FROM);
			State = 13595; _localctx.queue = queue_id();
			State = 13597;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1846,_ctx) ) {
			case 1:
				{
				State = 13596; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Queue_idContext : ParserRuleContext {
		public Id_Context database_name;
		public Id_Context schema_name;
		public Id_Context name;
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Queue_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queue_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQueue_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQueue_id(this);
		}
	}

	[RuleVersion(0)]
	public Queue_idContext queue_id() {
		Queue_idContext _localctx = new Queue_idContext(_ctx, State);
		EnterRule(_localctx, 1216, RULE_queue_id);
		try {
			State = 13606;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1847,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 13599; _localctx.database_name = id_();
				State = 13600; Match(DOT);
				State = 13601; _localctx.schema_name = id_();
				State = 13602; Match(DOT);
				State = 13603; _localctx.name = id_();
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13605; id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Send_conversationContext : ParserRuleContext {
		public IToken conversation_handle;
		public ExpressionContext message_type_name;
		public IToken message_body_expression;
		public ITerminalNode SEND() { return GetToken(TSqlParser.SEND, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public Send_conversationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_send_conversation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSend_conversation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSend_conversation(this);
		}
	}

	[RuleVersion(0)]
	public Send_conversationContext send_conversation() {
		Send_conversationContext _localctx = new Send_conversationContext(_ctx, State);
		EnterRule(_localctx, 1218, RULE_send_conversation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13608; Match(SEND);
			State = 13609; Match(ON);
			State = 13610; Match(CONVERSATION);
			State = 13611;
			_localctx.conversation_handle = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
				_localctx.conversation_handle = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 13612; Match(MESSAGE);
			State = 13613; Match(TYPE);
			State = 13614; _localctx.message_type_name = expression(0);
			State = 13618;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1848,_ctx) ) {
			case 1:
				{
				State = 13615; Match(LR_BRACKET);
				State = 13616;
				_localctx.message_body_expression = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==LOCAL_ID || _la==STRING) ) {
					_localctx.message_body_expression = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 13617; Match(RR_BRACKET);
				}
				break;
			}
			State = 13621;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1849,_ctx) ) {
			case 1:
				{
				State = 13620; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_typeContext : ParserRuleContext {
		public Id_Context scaled;
		public Id_Context ext_type;
		public IToken scale;
		public IToken prec;
		public IToken seed;
		public IToken inc;
		public IToken double_prec;
		public Id_Context unscaled_type;
		public ITerminalNode MAX() { return GetToken(TSqlParser.MAX, 0); }
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		public ITerminalNode DOCUMENT() { return GetToken(TSqlParser.DOCUMENT, 0); }
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode DOUBLE() { return GetToken(TSqlParser.DOUBLE, 0); }
		public ITerminalNode PRECISION() { return GetToken(TSqlParser.PRECISION, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterData_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitData_type(this);
		}
	}

	[RuleVersion(0)]
	public Data_typeContext data_type() {
		Data_typeContext _localctx = new Data_typeContext(_ctx, State);
		EnterRule(_localctx, 1220, RULE_data_type);
		int _la;
		try {
			State = 13660;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1852,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13623; _localctx.scaled = id_();
				State = 13624; Match(LR_BRACKET);
				State = 13625; Match(MAX);
				State = 13626; Match(RR_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13628; _localctx.ext_type = id_();
				State = 13629; Match(LR_BRACKET);
				State = 13630; _localctx.scale = Match(DECIMAL);
				State = 13631; Match(COMMA);
				State = 13632; _localctx.prec = Match(DECIMAL);
				State = 13633; Match(RR_BRACKET);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 13635; _localctx.ext_type = id_();
				State = 13636; Match(LR_BRACKET);
				State = 13637; _localctx.scale = Match(DECIMAL);
				State = 13638; Match(RR_BRACKET);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 13640; _localctx.ext_type = id_();
				State = 13641; Match(LR_BRACKET);
				State = 13642;
				_la = _input.La(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 13643; table_name();
				State = 13644; Match(RR_BRACKET);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 13646; _localctx.ext_type = id_();
				State = 13647; Match(IDENTITY);
				State = 13653;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1850,_ctx) ) {
				case 1:
					{
					State = 13648; Match(LR_BRACKET);
					State = 13649; _localctx.seed = Match(DECIMAL);
					State = 13650; Match(COMMA);
					State = 13651; _localctx.inc = Match(DECIMAL);
					State = 13652; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 13655; _localctx.double_prec = Match(DOUBLE);
				State = 13657;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1851,_ctx) ) {
				case 1:
					{
					State = 13656; Match(PRECISION);
					}
					break;
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 13659; _localctx.unscaled_type = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_valueContext : ParserRuleContext {
		public ITerminalNode NULL_() { return GetToken(TSqlParser.NULL_, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public Default_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDefault_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDefault_value(this);
		}
	}

	[RuleVersion(0)]
	public Default_valueContext default_value() {
		Default_valueContext _localctx = new Default_valueContext(_ctx, State);
		EnterRule(_localctx, 1222, RULE_default_value);
		try {
			State = 13666;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1853,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13662; Match(NULL_);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13663; Match(DEFAULT);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 13664; constant();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 13665; id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public IToken dollar;
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public ITerminalNode REAL() { return GetToken(TSqlParser.REAL, 0); }
		public ITerminalNode FLOAT() { return GetToken(TSqlParser.FLOAT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 1224, RULE_constant);
		int _la;
		try {
			State = 13683;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1857,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13668; Match(STRING);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13669; Match(BINARY);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 13671;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1854,_ctx) ) {
				case 1:
					{
					State = 13670; sign();
					}
					break;
				}
				State = 13673; Match(DECIMAL);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 13675;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1855,_ctx) ) {
				case 1:
					{
					State = 13674; sign();
					}
					break;
				}
				State = 13677;
				_la = _input.La(1);
				if ( !(_la==FLOAT || _la==REAL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 13679;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1856,_ctx) ) {
				case 1:
					{
					State = 13678; sign();
					}
					break;
				}
				State = 13681; _localctx.dollar = Match(DOLLAR);
				State = 13682;
				_la = _input.La(1);
				if ( !(_la==DECIMAL || _la==FLOAT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignContext : ParserRuleContext {
		public SignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sign; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSign(this);
		}
	}

	[RuleVersion(0)]
	public SignContext sign() {
		SignContext _localctx = new SignContext(_ctx, State);
		EnterRule(_localctx, 1226, RULE_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13685;
			_la = _input.La(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primitive_constantContext : ParserRuleContext {
		public IToken dollar;
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode REAL() { return GetToken(TSqlParser.REAL, 0); }
		public ITerminalNode FLOAT() { return GetToken(TSqlParser.FLOAT, 0); }
		public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		public Primitive_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrimitive_constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrimitive_constant(this);
		}
	}

	[RuleVersion(0)]
	public Primitive_constantContext primitive_constant() {
		Primitive_constantContext _localctx = new Primitive_constantContext(_ctx, State);
		EnterRule(_localctx, 1228, RULE_primitive_constant);
		int _la;
		try {
			State = 13696;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1859,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13687; Match(STRING);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13688; Match(BINARY);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 13689;
				_la = _input.La(1);
				if ( !(((((_la - 1127)) & ~0x3f) == 0 && ((1L << (_la - 1127)) & ((1L << (DECIMAL - 1127)) | (1L << (FLOAT - 1127)) | (1L << (REAL - 1127)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 13690; _localctx.dollar = Match(DOLLAR);
				State = 13692;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1858,_ctx) ) {
				case 1:
					{
					State = 13691;
					_la = _input.La(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 13694;
				_la = _input.La(1);
				if ( !(_la==DECIMAL || _la==FLOAT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 13695; parameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode ABORT() { return GetToken(TSqlParser.ABORT, 0); }
		public ITerminalNode ABSOLUTE() { return GetToken(TSqlParser.ABSOLUTE, 0); }
		public ITerminalNode ACCENT_SENSITIVITY() { return GetToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		public ITerminalNode ACCESS() { return GetToken(TSqlParser.ACCESS, 0); }
		public ITerminalNode ACTION() { return GetToken(TSqlParser.ACTION, 0); }
		public ITerminalNode ACTIVATION() { return GetToken(TSqlParser.ACTIVATION, 0); }
		public ITerminalNode ACTIVE() { return GetToken(TSqlParser.ACTIVE, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode ADDRESS() { return GetToken(TSqlParser.ADDRESS, 0); }
		public ITerminalNode AES_128() { return GetToken(TSqlParser.AES_128, 0); }
		public ITerminalNode AES_192() { return GetToken(TSqlParser.AES_192, 0); }
		public ITerminalNode AES_256() { return GetToken(TSqlParser.AES_256, 0); }
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode AFTER() { return GetToken(TSqlParser.AFTER, 0); }
		public ITerminalNode AGGREGATE() { return GetToken(TSqlParser.AGGREGATE, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode ALL_CONSTRAINTS() { return GetToken(TSqlParser.ALL_CONSTRAINTS, 0); }
		public ITerminalNode ALL_ERRORMSGS() { return GetToken(TSqlParser.ALL_ERRORMSGS, 0); }
		public ITerminalNode ALL_INDEXES() { return GetToken(TSqlParser.ALL_INDEXES, 0); }
		public ITerminalNode ALL_LEVELS() { return GetToken(TSqlParser.ALL_LEVELS, 0); }
		public ITerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return GetToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, 0); }
		public ITerminalNode ALLOW_PAGE_LOCKS() { return GetToken(TSqlParser.ALLOW_PAGE_LOCKS, 0); }
		public ITerminalNode ALLOW_ROW_LOCKS() { return GetToken(TSqlParser.ALLOW_ROW_LOCKS, 0); }
		public ITerminalNode ALLOW_SNAPSHOT_ISOLATION() { return GetToken(TSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		public ITerminalNode ALLOWED() { return GetToken(TSqlParser.ALLOWED, 0); }
		public ITerminalNode ALWAYS() { return GetToken(TSqlParser.ALWAYS, 0); }
		public ITerminalNode ANSI_DEFAULTS() { return GetToken(TSqlParser.ANSI_DEFAULTS, 0); }
		public ITerminalNode ANSI_NULL_DEFAULT() { return GetToken(TSqlParser.ANSI_NULL_DEFAULT, 0); }
		public ITerminalNode ANSI_NULL_DFLT_OFF() { return GetToken(TSqlParser.ANSI_NULL_DFLT_OFF, 0); }
		public ITerminalNode ANSI_NULL_DFLT_ON() { return GetToken(TSqlParser.ANSI_NULL_DFLT_ON, 0); }
		public ITerminalNode ANSI_NULLS() { return GetToken(TSqlParser.ANSI_NULLS, 0); }
		public ITerminalNode ANSI_PADDING() { return GetToken(TSqlParser.ANSI_PADDING, 0); }
		public ITerminalNode ANSI_WARNINGS() { return GetToken(TSqlParser.ANSI_WARNINGS, 0); }
		public ITerminalNode APP_NAME() { return GetToken(TSqlParser.APP_NAME, 0); }
		public ITerminalNode APPLICATION_LOG() { return GetToken(TSqlParser.APPLICATION_LOG, 0); }
		public ITerminalNode APPLOCK_MODE() { return GetToken(TSqlParser.APPLOCK_MODE, 0); }
		public ITerminalNode APPLOCK_TEST() { return GetToken(TSqlParser.APPLOCK_TEST, 0); }
		public ITerminalNode APPLY() { return GetToken(TSqlParser.APPLY, 0); }
		public ITerminalNode ARITHABORT() { return GetToken(TSqlParser.ARITHABORT, 0); }
		public ITerminalNode ARITHIGNORE() { return GetToken(TSqlParser.ARITHIGNORE, 0); }
		public ITerminalNode ASCII() { return GetToken(TSqlParser.ASCII, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode ASSEMBLYPROPERTY() { return GetToken(TSqlParser.ASSEMBLYPROPERTY, 0); }
		public ITerminalNode AT_KEYWORD() { return GetToken(TSqlParser.AT_KEYWORD, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public ITerminalNode AUDIT_GUID() { return GetToken(TSqlParser.AUDIT_GUID, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode AUTO_CLEANUP() { return GetToken(TSqlParser.AUTO_CLEANUP, 0); }
		public ITerminalNode AUTO_CLOSE() { return GetToken(TSqlParser.AUTO_CLOSE, 0); }
		public ITerminalNode AUTO_CREATE_STATISTICS() { return GetToken(TSqlParser.AUTO_CREATE_STATISTICS, 0); }
		public ITerminalNode AUTO_DROP() { return GetToken(TSqlParser.AUTO_DROP, 0); }
		public ITerminalNode AUTO_SHRINK() { return GetToken(TSqlParser.AUTO_SHRINK, 0); }
		public ITerminalNode AUTO_UPDATE_STATISTICS() { return GetToken(TSqlParser.AUTO_UPDATE_STATISTICS, 0); }
		public ITerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return GetToken(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public ITerminalNode AUTOGROW_ALL_FILES() { return GetToken(TSqlParser.AUTOGROW_ALL_FILES, 0); }
		public ITerminalNode AUTOGROW_SINGLE_FILE() { return GetToken(TSqlParser.AUTOGROW_SINGLE_FILE, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode AVG() { return GetToken(TSqlParser.AVG, 0); }
		public ITerminalNode BACKUP_CLONEDB() { return GetToken(TSqlParser.BACKUP_CLONEDB, 0); }
		public ITerminalNode BACKUP_PRIORITY() { return GetToken(TSqlParser.BACKUP_PRIORITY, 0); }
		public ITerminalNode BASE64() { return GetToken(TSqlParser.BASE64, 0); }
		public ITerminalNode BEGIN_DIALOG() { return GetToken(TSqlParser.BEGIN_DIALOG, 0); }
		public ITerminalNode BIGINT() { return GetToken(TSqlParser.BIGINT, 0); }
		public ITerminalNode[] BINARY_KEYWORD() { return GetTokens(TSqlParser.BINARY_KEYWORD); }
		public ITerminalNode BINARY_KEYWORD(int i) {
			return GetToken(TSqlParser.BINARY_KEYWORD, i);
		}
		public ITerminalNode BINARY_BASE64() { return GetToken(TSqlParser.BINARY_BASE64, 0); }
		public ITerminalNode BINARY_CHECKSUM() { return GetToken(TSqlParser.BINARY_CHECKSUM, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode BLOB_STORAGE() { return GetToken(TSqlParser.BLOB_STORAGE, 0); }
		public ITerminalNode BROKER() { return GetToken(TSqlParser.BROKER, 0); }
		public ITerminalNode BROKER_INSTANCE() { return GetToken(TSqlParser.BROKER_INSTANCE, 0); }
		public ITerminalNode BULK_LOGGED() { return GetToken(TSqlParser.BULK_LOGGED, 0); }
		public ITerminalNode CALLER() { return GetToken(TSqlParser.CALLER, 0); }
		public ITerminalNode CAP_CPU_PERCENT() { return GetToken(TSqlParser.CAP_CPU_PERCENT, 0); }
		public ITerminalNode CAST() { return GetToken(TSqlParser.CAST, 0); }
		public ITerminalNode[] TRY_CAST() { return GetTokens(TSqlParser.TRY_CAST); }
		public ITerminalNode TRY_CAST(int i) {
			return GetToken(TSqlParser.TRY_CAST, i);
		}
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public ITerminalNode CATCH() { return GetToken(TSqlParser.CATCH, 0); }
		public ITerminalNode CERT_ID() { return GetToken(TSqlParser.CERT_ID, 0); }
		public ITerminalNode CERTENCODED() { return GetToken(TSqlParser.CERTENCODED, 0); }
		public ITerminalNode CERTPRIVATEKEY() { return GetToken(TSqlParser.CERTPRIVATEKEY, 0); }
		public ITerminalNode CHANGE() { return GetToken(TSqlParser.CHANGE, 0); }
		public ITerminalNode CHANGE_RETENTION() { return GetToken(TSqlParser.CHANGE_RETENTION, 0); }
		public ITerminalNode CHANGE_TRACKING() { return GetToken(TSqlParser.CHANGE_TRACKING, 0); }
		public ITerminalNode CHAR() { return GetToken(TSqlParser.CHAR, 0); }
		public ITerminalNode CHARINDEX() { return GetToken(TSqlParser.CHARINDEX, 0); }
		public ITerminalNode CHECKALLOC() { return GetToken(TSqlParser.CHECKALLOC, 0); }
		public ITerminalNode CHECKCATALOG() { return GetToken(TSqlParser.CHECKCATALOG, 0); }
		public ITerminalNode CHECKCONSTRAINTS() { return GetToken(TSqlParser.CHECKCONSTRAINTS, 0); }
		public ITerminalNode CHECKDB() { return GetToken(TSqlParser.CHECKDB, 0); }
		public ITerminalNode CHECKFILEGROUP() { return GetToken(TSqlParser.CHECKFILEGROUP, 0); }
		public ITerminalNode CHECKSUM() { return GetToken(TSqlParser.CHECKSUM, 0); }
		public ITerminalNode CHECKSUM_AGG() { return GetToken(TSqlParser.CHECKSUM_AGG, 0); }
		public ITerminalNode CHECKTABLE() { return GetToken(TSqlParser.CHECKTABLE, 0); }
		public ITerminalNode CLEANTABLE() { return GetToken(TSqlParser.CLEANTABLE, 0); }
		public ITerminalNode CLEANUP() { return GetToken(TSqlParser.CLEANUP, 0); }
		public ITerminalNode CLONEDATABASE() { return GetToken(TSqlParser.CLONEDATABASE, 0); }
		public ITerminalNode COL_LENGTH() { return GetToken(TSqlParser.COL_LENGTH, 0); }
		public ITerminalNode COL_NAME() { return GetToken(TSqlParser.COL_NAME, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public ITerminalNode COLUMN_ENCRYPTION_KEY() { return GetToken(TSqlParser.COLUMN_ENCRYPTION_KEY, 0); }
		public ITerminalNode COLUMN_MASTER_KEY() { return GetToken(TSqlParser.COLUMN_MASTER_KEY, 0); }
		public ITerminalNode COLUMNPROPERTY() { return GetToken(TSqlParser.COLUMNPROPERTY, 0); }
		public ITerminalNode COLUMNS() { return GetToken(TSqlParser.COLUMNS, 0); }
		public ITerminalNode COLUMNSTORE() { return GetToken(TSqlParser.COLUMNSTORE, 0); }
		public ITerminalNode COLUMNSTORE_ARCHIVE() { return GetToken(TSqlParser.COLUMNSTORE_ARCHIVE, 0); }
		public ITerminalNode COMMITTED() { return GetToken(TSqlParser.COMMITTED, 0); }
		public ITerminalNode COMPATIBILITY_LEVEL() { return GetToken(TSqlParser.COMPATIBILITY_LEVEL, 0); }
		public ITerminalNode COMPRESS_ALL_ROW_GROUPS() { return GetToken(TSqlParser.COMPRESS_ALL_ROW_GROUPS, 0); }
		public ITerminalNode COMPRESSION_DELAY() { return GetToken(TSqlParser.COMPRESSION_DELAY, 0); }
		public ITerminalNode CONCAT() { return GetToken(TSqlParser.CONCAT, 0); }
		public ITerminalNode CONCAT_WS() { return GetToken(TSqlParser.CONCAT_WS, 0); }
		public ITerminalNode CONCAT_NULL_YIELDS_NULL() { return GetToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		public ITerminalNode CONTROL() { return GetToken(TSqlParser.CONTROL, 0); }
		public ITerminalNode COOKIE() { return GetToken(TSqlParser.COOKIE, 0); }
		public ITerminalNode COUNT() { return GetToken(TSqlParser.COUNT, 0); }
		public ITerminalNode COUNT_BIG() { return GetToken(TSqlParser.COUNT_BIG, 0); }
		public ITerminalNode COUNTER() { return GetToken(TSqlParser.COUNTER, 0); }
		public ITerminalNode CPU() { return GetToken(TSqlParser.CPU, 0); }
		public ITerminalNode CREATE_NEW() { return GetToken(TSqlParser.CREATE_NEW, 0); }
		public ITerminalNode CREATION_DISPOSITION() { return GetToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode[] CUME_DIST() { return GetTokens(TSqlParser.CUME_DIST); }
		public ITerminalNode CUME_DIST(int i) {
			return GetToken(TSqlParser.CUME_DIST, i);
		}
		public ITerminalNode CURSOR_CLOSE_ON_COMMIT() { return GetToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public ITerminalNode CURSOR_DEFAULT() { return GetToken(TSqlParser.CURSOR_DEFAULT, 0); }
		public ITerminalNode CURSOR_STATUS() { return GetToken(TSqlParser.CURSOR_STATUS, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public ITerminalNode DATA_PURITY() { return GetToken(TSqlParser.DATA_PURITY, 0); }
		public ITerminalNode DATABASE_PRINCIPAL_ID() { return GetToken(TSqlParser.DATABASE_PRINCIPAL_ID, 0); }
		public ITerminalNode DATABASEPROPERTYEX() { return GetToken(TSqlParser.DATABASEPROPERTYEX, 0); }
		public ITerminalNode DATALENGTH() { return GetToken(TSqlParser.DATALENGTH, 0); }
		public ITerminalNode DATE_CORRELATION_OPTIMIZATION() { return GetToken(TSqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		public ITerminalNode DATEADD() { return GetToken(TSqlParser.DATEADD, 0); }
		public ITerminalNode DATEDIFF() { return GetToken(TSqlParser.DATEDIFF, 0); }
		public ITerminalNode DATENAME() { return GetToken(TSqlParser.DATENAME, 0); }
		public ITerminalNode DATEPART() { return GetToken(TSqlParser.DATEPART, 0); }
		public ITerminalNode DAYS() { return GetToken(TSqlParser.DAYS, 0); }
		public ITerminalNode DB_CHAINING() { return GetToken(TSqlParser.DB_CHAINING, 0); }
		public ITerminalNode DB_FAILOVER() { return GetToken(TSqlParser.DB_FAILOVER, 0); }
		public ITerminalNode DB_ID() { return GetToken(TSqlParser.DB_ID, 0); }
		public ITerminalNode DB_NAME() { return GetToken(TSqlParser.DB_NAME, 0); }
		public ITerminalNode DBCC() { return GetToken(TSqlParser.DBCC, 0); }
		public ITerminalNode DBREINDEX() { return GetToken(TSqlParser.DBREINDEX, 0); }
		public ITerminalNode DECRYPTION() { return GetToken(TSqlParser.DECRYPTION, 0); }
		public ITerminalNode DEFAULT_DOUBLE_QUOTE() { return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0); }
		public ITerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode DEFINITION() { return GetToken(TSqlParser.DEFINITION, 0); }
		public ITerminalNode DELAY() { return GetToken(TSqlParser.DELAY, 0); }
		public ITerminalNode DELAYED_DURABILITY() { return GetToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public ITerminalNode DELETED() { return GetToken(TSqlParser.DELETED, 0); }
		public ITerminalNode DENSE_RANK() { return GetToken(TSqlParser.DENSE_RANK, 0); }
		public ITerminalNode DEPENDENTS() { return GetToken(TSqlParser.DEPENDENTS, 0); }
		public ITerminalNode DES() { return GetToken(TSqlParser.DES, 0); }
		public ITerminalNode DESCRIPTION() { return GetToken(TSqlParser.DESCRIPTION, 0); }
		public ITerminalNode DESX() { return GetToken(TSqlParser.DESX, 0); }
		public ITerminalNode DETERMINISTIC() { return GetToken(TSqlParser.DETERMINISTIC, 0); }
		public ITerminalNode DHCP() { return GetToken(TSqlParser.DHCP, 0); }
		public ITerminalNode DIALOG() { return GetToken(TSqlParser.DIALOG, 0); }
		public ITerminalNode DIFFERENCE() { return GetToken(TSqlParser.DIFFERENCE, 0); }
		public ITerminalNode DIRECTORY_NAME() { return GetToken(TSqlParser.DIRECTORY_NAME, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode DISABLE_BROKER() { return GetToken(TSqlParser.DISABLE_BROKER, 0); }
		public ITerminalNode DISABLED() { return GetToken(TSqlParser.DISABLED, 0); }
		public ITerminalNode DISK_DRIVE() { return GetToken(TSqlParser.DISK_DRIVE, 0); }
		public ITerminalNode DOCUMENT() { return GetToken(TSqlParser.DOCUMENT, 0); }
		public ITerminalNode DROP_EXISTING() { return GetToken(TSqlParser.DROP_EXISTING, 0); }
		public ITerminalNode DROPCLEANBUFFERS() { return GetToken(TSqlParser.DROPCLEANBUFFERS, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(TSqlParser.DYNAMIC, 0); }
		public ITerminalNode ELEMENTS() { return GetToken(TSqlParser.ELEMENTS, 0); }
		public ITerminalNode EMERGENCY() { return GetToken(TSqlParser.EMERGENCY, 0); }
		public ITerminalNode EMPTY() { return GetToken(TSqlParser.EMPTY, 0); }
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode ENABLE_BROKER() { return GetToken(TSqlParser.ENABLE_BROKER, 0); }
		public ITerminalNode ENCRYPTED() { return GetToken(TSqlParser.ENCRYPTED, 0); }
		public ITerminalNode ENCRYPTED_VALUE() { return GetToken(TSqlParser.ENCRYPTED_VALUE, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode ENCRYPTION_TYPE() { return GetToken(TSqlParser.ENCRYPTION_TYPE, 0); }
		public ITerminalNode ENDPOINT_URL() { return GetToken(TSqlParser.ENDPOINT_URL, 0); }
		public ITerminalNode ERROR_BROKER_CONVERSATIONS() { return GetToken(TSqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
		public ITerminalNode ESTIMATEONLY() { return GetToken(TSqlParser.ESTIMATEONLY, 0); }
		public ITerminalNode EXCLUSIVE() { return GetToken(TSqlParser.EXCLUSIVE, 0); }
		public ITerminalNode EXECUTABLE() { return GetToken(TSqlParser.EXECUTABLE, 0); }
		public ITerminalNode EXIST() { return GetToken(TSqlParser.EXIST, 0); }
		public ITerminalNode EXIST_SQUARE_BRACKET() { return GetToken(TSqlParser.EXIST_SQUARE_BRACKET, 0); }
		public ITerminalNode EXPAND() { return GetToken(TSqlParser.EXPAND, 0); }
		public ITerminalNode EXPIRY_DATE() { return GetToken(TSqlParser.EXPIRY_DATE, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(TSqlParser.EXPLICIT, 0); }
		public ITerminalNode EXTENDED_LOGICAL_CHECKS() { return GetToken(TSqlParser.EXTENDED_LOGICAL_CHECKS, 0); }
		public ITerminalNode FAIL_OPERATION() { return GetToken(TSqlParser.FAIL_OPERATION, 0); }
		public ITerminalNode FAILOVER_MODE() { return GetToken(TSqlParser.FAILOVER_MODE, 0); }
		public ITerminalNode FAILURE() { return GetToken(TSqlParser.FAILURE, 0); }
		public ITerminalNode FAILURE_CONDITION_LEVEL() { return GetToken(TSqlParser.FAILURE_CONDITION_LEVEL, 0); }
		public ITerminalNode FAST() { return GetToken(TSqlParser.FAST, 0); }
		public ITerminalNode FAST_FORWARD() { return GetToken(TSqlParser.FAST_FORWARD, 0); }
		public ITerminalNode FILE_ID() { return GetToken(TSqlParser.FILE_ID, 0); }
		public ITerminalNode FILE_IDEX() { return GetToken(TSqlParser.FILE_IDEX, 0); }
		public ITerminalNode FILE_NAME() { return GetToken(TSqlParser.FILE_NAME, 0); }
		public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		public ITerminalNode FILEGROUP_ID() { return GetToken(TSqlParser.FILEGROUP_ID, 0); }
		public ITerminalNode FILEGROUP_NAME() { return GetToken(TSqlParser.FILEGROUP_NAME, 0); }
		public ITerminalNode FILEGROUPPROPERTY() { return GetToken(TSqlParser.FILEGROUPPROPERTY, 0); }
		public ITerminalNode FILEGROWTH() { return GetToken(TSqlParser.FILEGROWTH, 0); }
		public ITerminalNode[] FILENAME() { return GetTokens(TSqlParser.FILENAME); }
		public ITerminalNode FILENAME(int i) {
			return GetToken(TSqlParser.FILENAME, i);
		}
		public ITerminalNode FILEPATH() { return GetToken(TSqlParser.FILEPATH, 0); }
		public ITerminalNode FILEPROPERTY() { return GetToken(TSqlParser.FILEPROPERTY, 0); }
		public ITerminalNode FILEPROPERTYEX() { return GetToken(TSqlParser.FILEPROPERTYEX, 0); }
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public ITerminalNode FILLFACTOR() { return GetToken(TSqlParser.FILLFACTOR, 0); }
		public ITerminalNode FILTER() { return GetToken(TSqlParser.FILTER, 0); }
		public ITerminalNode FIRST() { return GetToken(TSqlParser.FIRST, 0); }
		public ITerminalNode FIRST_VALUE() { return GetToken(TSqlParser.FIRST_VALUE, 0); }
		public ITerminalNode FMTONLY() { return GetToken(TSqlParser.FMTONLY, 0); }
		public ITerminalNode FOLLOWING() { return GetToken(TSqlParser.FOLLOWING, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public ITerminalNode FORCE_FAILOVER_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode FORCED() { return GetToken(TSqlParser.FORCED, 0); }
		public ITerminalNode FORCEPLAN() { return GetToken(TSqlParser.FORCEPLAN, 0); }
		public ITerminalNode FORCESCAN() { return GetToken(TSqlParser.FORCESCAN, 0); }
		public ITerminalNode FORMAT() { return GetToken(TSqlParser.FORMAT, 0); }
		public ITerminalNode FORWARD_ONLY() { return GetToken(TSqlParser.FORWARD_ONLY, 0); }
		public ITerminalNode FREE() { return GetToken(TSqlParser.FREE, 0); }
		public ITerminalNode FULLSCAN() { return GetToken(TSqlParser.FULLSCAN, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode FULLTEXTCATALOGPROPERTY() { return GetToken(TSqlParser.FULLTEXTCATALOGPROPERTY, 0); }
		public ITerminalNode FULLTEXTSERVICEPROPERTY() { return GetToken(TSqlParser.FULLTEXTSERVICEPROPERTY, 0); }
		public ITerminalNode GB() { return GetToken(TSqlParser.GB, 0); }
		public ITerminalNode GENERATED() { return GetToken(TSqlParser.GENERATED, 0); }
		public ITerminalNode GETDATE() { return GetToken(TSqlParser.GETDATE, 0); }
		public ITerminalNode GETUTCDATE() { return GetToken(TSqlParser.GETUTCDATE, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public ITerminalNode GO() { return GetToken(TSqlParser.GO, 0); }
		public ITerminalNode GREATEST() { return GetToken(TSqlParser.GREATEST, 0); }
		public ITerminalNode GROUP_MAX_REQUESTS() { return GetToken(TSqlParser.GROUP_MAX_REQUESTS, 0); }
		public ITerminalNode GROUPING() { return GetToken(TSqlParser.GROUPING, 0); }
		public ITerminalNode GROUPING_ID() { return GetToken(TSqlParser.GROUPING_ID, 0); }
		public ITerminalNode HADR() { return GetToken(TSqlParser.HADR, 0); }
		public ITerminalNode HAS_DBACCESS() { return GetToken(TSqlParser.HAS_DBACCESS, 0); }
		public ITerminalNode HAS_PERMS_BY_NAME() { return GetToken(TSqlParser.HAS_PERMS_BY_NAME, 0); }
		public ITerminalNode HASH() { return GetToken(TSqlParser.HASH, 0); }
		public ITerminalNode HEALTH_CHECK_TIMEOUT() { return GetToken(TSqlParser.HEALTH_CHECK_TIMEOUT, 0); }
		public ITerminalNode HIDDEN_KEYWORD() { return GetToken(TSqlParser.HIDDEN_KEYWORD, 0); }
		public ITerminalNode HIGH() { return GetToken(TSqlParser.HIGH, 0); }
		public ITerminalNode HONOR_BROKER_PRIORITY() { return GetToken(TSqlParser.HONOR_BROKER_PRIORITY, 0); }
		public ITerminalNode HOURS() { return GetToken(TSqlParser.HOURS, 0); }
		public ITerminalNode IDENT_CURRENT() { return GetToken(TSqlParser.IDENT_CURRENT, 0); }
		public ITerminalNode IDENT_INCR() { return GetToken(TSqlParser.IDENT_INCR, 0); }
		public ITerminalNode IDENT_SEED() { return GetToken(TSqlParser.IDENT_SEED, 0); }
		public ITerminalNode IDENTITY_VALUE() { return GetToken(TSqlParser.IDENTITY_VALUE, 0); }
		public ITerminalNode IGNORE_CONSTRAINTS() { return GetToken(TSqlParser.IGNORE_CONSTRAINTS, 0); }
		public ITerminalNode IGNORE_DUP_KEY() { return GetToken(TSqlParser.IGNORE_DUP_KEY, 0); }
		public ITerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return GetToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public ITerminalNode IGNORE_REPLICATED_TABLE_CACHE() { return GetToken(TSqlParser.IGNORE_REPLICATED_TABLE_CACHE, 0); }
		public ITerminalNode IGNORE_TRIGGERS() { return GetToken(TSqlParser.IGNORE_TRIGGERS, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(TSqlParser.IMMEDIATE, 0); }
		public ITerminalNode IMPERSONATE() { return GetToken(TSqlParser.IMPERSONATE, 0); }
		public ITerminalNode IMPLICIT_TRANSACTIONS() { return GetToken(TSqlParser.IMPLICIT_TRANSACTIONS, 0); }
		public ITerminalNode IMPORTANCE() { return GetToken(TSqlParser.IMPORTANCE, 0); }
		public ITerminalNode INCLUDE_NULL_VALUES() { return GetToken(TSqlParser.INCLUDE_NULL_VALUES, 0); }
		public ITerminalNode INCREMENTAL() { return GetToken(TSqlParser.INCREMENTAL, 0); }
		public ITerminalNode INDEX_COL() { return GetToken(TSqlParser.INDEX_COL, 0); }
		public ITerminalNode INDEXKEY_PROPERTY() { return GetToken(TSqlParser.INDEXKEY_PROPERTY, 0); }
		public ITerminalNode INDEXPROPERTY() { return GetToken(TSqlParser.INDEXPROPERTY, 0); }
		public ITerminalNode INITIATOR() { return GetToken(TSqlParser.INITIATOR, 0); }
		public ITerminalNode INPUT() { return GetToken(TSqlParser.INPUT, 0); }
		public ITerminalNode INSENSITIVE() { return GetToken(TSqlParser.INSENSITIVE, 0); }
		public ITerminalNode INSERTED() { return GetToken(TSqlParser.INSERTED, 0); }
		public ITerminalNode INT() { return GetToken(TSqlParser.INT, 0); }
		public ITerminalNode IP() { return GetToken(TSqlParser.IP, 0); }
		public ITerminalNode IS_MEMBER() { return GetToken(TSqlParser.IS_MEMBER, 0); }
		public ITerminalNode IS_ROLEMEMBER() { return GetToken(TSqlParser.IS_ROLEMEMBER, 0); }
		public ITerminalNode IS_SRVROLEMEMBER() { return GetToken(TSqlParser.IS_SRVROLEMEMBER, 0); }
		public ITerminalNode ISJSON() { return GetToken(TSqlParser.ISJSON, 0); }
		public ITerminalNode ISOLATION() { return GetToken(TSqlParser.ISOLATION, 0); }
		public ITerminalNode JOB() { return GetToken(TSqlParser.JOB, 0); }
		public ITerminalNode JSON() { return GetToken(TSqlParser.JSON, 0); }
		public ITerminalNode JSON_OBJECT() { return GetToken(TSqlParser.JSON_OBJECT, 0); }
		public ITerminalNode JSON_ARRAY() { return GetToken(TSqlParser.JSON_ARRAY, 0); }
		public ITerminalNode JSON_VALUE() { return GetToken(TSqlParser.JSON_VALUE, 0); }
		public ITerminalNode JSON_QUERY() { return GetToken(TSqlParser.JSON_QUERY, 0); }
		public ITerminalNode JSON_MODIFY() { return GetToken(TSqlParser.JSON_MODIFY, 0); }
		public ITerminalNode JSON_PATH_EXISTS() { return GetToken(TSqlParser.JSON_PATH_EXISTS, 0); }
		public ITerminalNode KB() { return GetToken(TSqlParser.KB, 0); }
		public ITerminalNode KEEP() { return GetToken(TSqlParser.KEEP, 0); }
		public ITerminalNode KEEPDEFAULTS() { return GetToken(TSqlParser.KEEPDEFAULTS, 0); }
		public ITerminalNode KEEPFIXED() { return GetToken(TSqlParser.KEEPFIXED, 0); }
		public ITerminalNode KEEPIDENTITY() { return GetToken(TSqlParser.KEEPIDENTITY, 0); }
		public ITerminalNode KEY_SOURCE() { return GetToken(TSqlParser.KEY_SOURCE, 0); }
		public ITerminalNode KEYS() { return GetToken(TSqlParser.KEYS, 0); }
		public ITerminalNode KEYSET() { return GetToken(TSqlParser.KEYSET, 0); }
		public ITerminalNode LAG() { return GetToken(TSqlParser.LAG, 0); }
		public ITerminalNode LAST() { return GetToken(TSqlParser.LAST, 0); }
		public ITerminalNode LAST_VALUE() { return GetToken(TSqlParser.LAST_VALUE, 0); }
		public ITerminalNode LEAD() { return GetToken(TSqlParser.LEAD, 0); }
		public ITerminalNode LEAST() { return GetToken(TSqlParser.LEAST, 0); }
		public ITerminalNode LEN() { return GetToken(TSqlParser.LEN, 0); }
		public ITerminalNode LEVEL() { return GetToken(TSqlParser.LEVEL, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public ITerminalNode LISTENER() { return GetToken(TSqlParser.LISTENER, 0); }
		public ITerminalNode LISTENER_URL() { return GetToken(TSqlParser.LISTENER_URL, 0); }
		public ITerminalNode LOB_COMPACTION() { return GetToken(TSqlParser.LOB_COMPACTION, 0); }
		public ITerminalNode LOCAL() { return GetToken(TSqlParser.LOCAL, 0); }
		public ITerminalNode LOCATION() { return GetToken(TSqlParser.LOCATION, 0); }
		public ITerminalNode LOCK() { return GetToken(TSqlParser.LOCK, 0); }
		public ITerminalNode LOCK_ESCALATION() { return GetToken(TSqlParser.LOCK_ESCALATION, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode LOGINPROPERTY() { return GetToken(TSqlParser.LOGINPROPERTY, 0); }
		public ITerminalNode LOOP() { return GetToken(TSqlParser.LOOP, 0); }
		public ITerminalNode LOW() { return GetToken(TSqlParser.LOW, 0); }
		public ITerminalNode LOWER() { return GetToken(TSqlParser.LOWER, 0); }
		public ITerminalNode LTRIM() { return GetToken(TSqlParser.LTRIM, 0); }
		public ITerminalNode MANUAL() { return GetToken(TSqlParser.MANUAL, 0); }
		public ITerminalNode MARK() { return GetToken(TSqlParser.MARK, 0); }
		public ITerminalNode MASKED() { return GetToken(TSqlParser.MASKED, 0); }
		public ITerminalNode MATERIALIZED() { return GetToken(TSqlParser.MATERIALIZED, 0); }
		public ITerminalNode MAX() { return GetToken(TSqlParser.MAX, 0); }
		public ITerminalNode MAX_CPU_PERCENT() { return GetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public ITerminalNode MAX_DOP() { return GetToken(TSqlParser.MAX_DOP, 0); }
		public ITerminalNode MAX_FILES() { return GetToken(TSqlParser.MAX_FILES, 0); }
		public ITerminalNode MAX_IOPS_PER_VOLUME() { return GetToken(TSqlParser.MAX_IOPS_PER_VOLUME, 0); }
		public ITerminalNode MAX_MEMORY_PERCENT() { return GetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public ITerminalNode MAX_PROCESSES() { return GetToken(TSqlParser.MAX_PROCESSES, 0); }
		public ITerminalNode MAX_QUEUE_READERS() { return GetToken(TSqlParser.MAX_QUEUE_READERS, 0); }
		public ITerminalNode MAX_ROLLOVER_FILES() { return GetToken(TSqlParser.MAX_ROLLOVER_FILES, 0); }
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode MAXRECURSION() { return GetToken(TSqlParser.MAXRECURSION, 0); }
		public ITerminalNode MAXSIZE() { return GetToken(TSqlParser.MAXSIZE, 0); }
		public ITerminalNode MB() { return GetToken(TSqlParser.MB, 0); }
		public ITerminalNode MEDIUM() { return GetToken(TSqlParser.MEDIUM, 0); }
		public ITerminalNode MEMORY_OPTIMIZED_DATA() { return GetToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode MIN() { return GetToken(TSqlParser.MIN, 0); }
		public ITerminalNode MIN_ACTIVE_ROWVERSION() { return GetToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		public ITerminalNode MIN_CPU_PERCENT() { return GetToken(TSqlParser.MIN_CPU_PERCENT, 0); }
		public ITerminalNode MIN_IOPS_PER_VOLUME() { return GetToken(TSqlParser.MIN_IOPS_PER_VOLUME, 0); }
		public ITerminalNode MIN_MEMORY_PERCENT() { return GetToken(TSqlParser.MIN_MEMORY_PERCENT, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public ITerminalNode MIRROR_ADDRESS() { return GetToken(TSqlParser.MIRROR_ADDRESS, 0); }
		public ITerminalNode MIXED_PAGE_ALLOCATION() { return GetToken(TSqlParser.MIXED_PAGE_ALLOCATION, 0); }
		public ITerminalNode MODE() { return GetToken(TSqlParser.MODE, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode MODIFY_SQUARE_BRACKET() { return GetToken(TSqlParser.MODIFY_SQUARE_BRACKET, 0); }
		public ITerminalNode MOVE() { return GetToken(TSqlParser.MOVE, 0); }
		public ITerminalNode MULTI_USER() { return GetToken(TSqlParser.MULTI_USER, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode NCHAR() { return GetToken(TSqlParser.NCHAR, 0); }
		public ITerminalNode NESTED_TRIGGERS() { return GetToken(TSqlParser.NESTED_TRIGGERS, 0); }
		public ITerminalNode NEW_ACCOUNT() { return GetToken(TSqlParser.NEW_ACCOUNT, 0); }
		public ITerminalNode NEW_BROKER() { return GetToken(TSqlParser.NEW_BROKER, 0); }
		public ITerminalNode NEW_PASSWORD() { return GetToken(TSqlParser.NEW_PASSWORD, 0); }
		public ITerminalNode NEWNAME() { return GetToken(TSqlParser.NEWNAME, 0); }
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode NO_INFOMSGS() { return GetToken(TSqlParser.NO_INFOMSGS, 0); }
		public ITerminalNode NO_QUERYSTORE() { return GetToken(TSqlParser.NO_QUERYSTORE, 0); }
		public ITerminalNode NO_STATISTICS() { return GetToken(TSqlParser.NO_STATISTICS, 0); }
		public ITerminalNode NO_TRUNCATE() { return GetToken(TSqlParser.NO_TRUNCATE, 0); }
		public ITerminalNode NO_WAIT() { return GetToken(TSqlParser.NO_WAIT, 0); }
		public ITerminalNode NOCOUNT() { return GetToken(TSqlParser.NOCOUNT, 0); }
		public ITerminalNode NODES() { return GetToken(TSqlParser.NODES, 0); }
		public ITerminalNode NOEXEC() { return GetToken(TSqlParser.NOEXEC, 0); }
		public ITerminalNode NOEXPAND() { return GetToken(TSqlParser.NOEXPAND, 0); }
		public ITerminalNode NOINDEX() { return GetToken(TSqlParser.NOINDEX, 0); }
		public ITerminalNode NOLOCK() { return GetToken(TSqlParser.NOLOCK, 0); }
		public ITerminalNode NON_TRANSACTED_ACCESS() { return GetToken(TSqlParser.NON_TRANSACTED_ACCESS, 0); }
		public ITerminalNode NORECOMPUTE() { return GetToken(TSqlParser.NORECOMPUTE, 0); }
		public ITerminalNode NORECOVERY() { return GetToken(TSqlParser.NORECOVERY, 0); }
		public ITerminalNode NOTIFICATIONS() { return GetToken(TSqlParser.NOTIFICATIONS, 0); }
		public ITerminalNode NOWAIT() { return GetToken(TSqlParser.NOWAIT, 0); }
		public ITerminalNode NTILE() { return GetToken(TSqlParser.NTILE, 0); }
		public ITerminalNode NULL_DOUBLE_QUOTE() { return GetToken(TSqlParser.NULL_DOUBLE_QUOTE, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public ITerminalNode NUMBER() { return GetToken(TSqlParser.NUMBER, 0); }
		public ITerminalNode NUMERIC_ROUNDABORT() { return GetToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode OBJECT_DEFINITION() { return GetToken(TSqlParser.OBJECT_DEFINITION, 0); }
		public ITerminalNode OBJECT_ID() { return GetToken(TSqlParser.OBJECT_ID, 0); }
		public ITerminalNode OBJECT_NAME() { return GetToken(TSqlParser.OBJECT_NAME, 0); }
		public ITerminalNode OBJECT_SCHEMA_NAME() { return GetToken(TSqlParser.OBJECT_SCHEMA_NAME, 0); }
		public ITerminalNode OBJECTPROPERTY() { return GetToken(TSqlParser.OBJECTPROPERTY, 0); }
		public ITerminalNode OBJECTPROPERTYEX() { return GetToken(TSqlParser.OBJECTPROPERTYEX, 0); }
		public ITerminalNode OFFLINE() { return GetToken(TSqlParser.OFFLINE, 0); }
		public ITerminalNode OFFSET() { return GetToken(TSqlParser.OFFSET, 0); }
		public ITerminalNode OLD_ACCOUNT() { return GetToken(TSqlParser.OLD_ACCOUNT, 0); }
		public ITerminalNode ONLINE() { return GetToken(TSqlParser.ONLINE, 0); }
		public ITerminalNode ONLY() { return GetToken(TSqlParser.ONLY, 0); }
		public ITerminalNode OPEN_EXISTING() { return GetToken(TSqlParser.OPEN_EXISTING, 0); }
		public ITerminalNode OPENJSON() { return GetToken(TSqlParser.OPENJSON, 0); }
		public ITerminalNode OPTIMISTIC() { return GetToken(TSqlParser.OPTIMISTIC, 0); }
		public ITerminalNode OPTIMIZE() { return GetToken(TSqlParser.OPTIMIZE, 0); }
		public ITerminalNode OPTIMIZE_FOR_SEQUENTIAL_KEY() { return GetToken(TSqlParser.OPTIMIZE_FOR_SEQUENTIAL_KEY, 0); }
		public ITerminalNode ORIGINAL_DB_NAME() { return GetToken(TSqlParser.ORIGINAL_DB_NAME, 0); }
		public ITerminalNode ORIGINAL_LOGIN() { return GetToken(TSqlParser.ORIGINAL_LOGIN, 0); }
		public ITerminalNode OUT() { return GetToken(TSqlParser.OUT, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(TSqlParser.OVERRIDE, 0); }
		public ITerminalNode OWNER() { return GetToken(TSqlParser.OWNER, 0); }
		public ITerminalNode OWNERSHIP() { return GetToken(TSqlParser.OWNERSHIP, 0); }
		public ITerminalNode PAD_INDEX() { return GetToken(TSqlParser.PAD_INDEX, 0); }
		public ITerminalNode PAGE_VERIFY() { return GetToken(TSqlParser.PAGE_VERIFY, 0); }
		public ITerminalNode PAGECOUNT() { return GetToken(TSqlParser.PAGECOUNT, 0); }
		public ITerminalNode PAGLOCK() { return GetToken(TSqlParser.PAGLOCK, 0); }
		public ITerminalNode PARAMETERIZATION() { return GetToken(TSqlParser.PARAMETERIZATION, 0); }
		public ITerminalNode PARSENAME() { return GetToken(TSqlParser.PARSENAME, 0); }
		public ITerminalNode PARSEONLY() { return GetToken(TSqlParser.PARSEONLY, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode PARTITIONS() { return GetToken(TSqlParser.PARTITIONS, 0); }
		public ITerminalNode PARTNER() { return GetToken(TSqlParser.PARTNER, 0); }
		public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		public ITerminalNode PATINDEX() { return GetToken(TSqlParser.PATINDEX, 0); }
		public ITerminalNode PAUSE() { return GetToken(TSqlParser.PAUSE, 0); }
		public ITerminalNode PDW_SHOWSPACEUSED() { return GetToken(TSqlParser.PDW_SHOWSPACEUSED, 0); }
		public ITerminalNode[] PERCENT_RANK() { return GetTokens(TSqlParser.PERCENT_RANK); }
		public ITerminalNode PERCENT_RANK(int i) {
			return GetToken(TSqlParser.PERCENT_RANK, i);
		}
		public ITerminalNode[] PERCENTILE_CONT() { return GetTokens(TSqlParser.PERCENTILE_CONT); }
		public ITerminalNode PERCENTILE_CONT(int i) {
			return GetToken(TSqlParser.PERCENTILE_CONT, i);
		}
		public ITerminalNode[] PERCENTILE_DISC() { return GetTokens(TSqlParser.PERCENTILE_DISC); }
		public ITerminalNode PERCENTILE_DISC(int i) {
			return GetToken(TSqlParser.PERCENTILE_DISC, i);
		}
		public ITerminalNode PERMISSIONS() { return GetToken(TSqlParser.PERMISSIONS, 0); }
		public ITerminalNode PERSIST_SAMPLE_PERCENT() { return GetToken(TSqlParser.PERSIST_SAMPLE_PERCENT, 0); }
		public ITerminalNode PHYSICAL_ONLY() { return GetToken(TSqlParser.PHYSICAL_ONLY, 0); }
		public ITerminalNode POISON_MESSAGE_HANDLING() { return GetToken(TSqlParser.POISON_MESSAGE_HANDLING, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public ITerminalNode PORT() { return GetToken(TSqlParser.PORT, 0); }
		public ITerminalNode PRECEDING() { return GetToken(TSqlParser.PRECEDING, 0); }
		public ITerminalNode PRIMARY_ROLE() { return GetToken(TSqlParser.PRIMARY_ROLE, 0); }
		public ITerminalNode PRIOR() { return GetToken(TSqlParser.PRIOR, 0); }
		public ITerminalNode PRIORITY() { return GetToken(TSqlParser.PRIORITY, 0); }
		public ITerminalNode PRIORITY_LEVEL() { return GetToken(TSqlParser.PRIORITY_LEVEL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode PRIVATE_KEY() { return GetToken(TSqlParser.PRIVATE_KEY, 0); }
		public ITerminalNode PRIVILEGES() { return GetToken(TSqlParser.PRIVILEGES, 0); }
		public ITerminalNode PROCCACHE() { return GetToken(TSqlParser.PROCCACHE, 0); }
		public ITerminalNode PROCEDURE_NAME() { return GetToken(TSqlParser.PROCEDURE_NAME, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode PROVIDER_KEY_NAME() { return GetToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public ITerminalNode PWDCOMPARE() { return GetToken(TSqlParser.PWDCOMPARE, 0); }
		public ITerminalNode PWDENCRYPT() { return GetToken(TSqlParser.PWDENCRYPT, 0); }
		public ITerminalNode QUERY() { return GetToken(TSqlParser.QUERY, 0); }
		public ITerminalNode QUERY_SQUARE_BRACKET() { return GetToken(TSqlParser.QUERY_SQUARE_BRACKET, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public ITerminalNode QUEUE_DELAY() { return GetToken(TSqlParser.QUEUE_DELAY, 0); }
		public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public ITerminalNode QUOTENAME() { return GetToken(TSqlParser.QUOTENAME, 0); }
		public ITerminalNode RANDOMIZED() { return GetToken(TSqlParser.RANDOMIZED, 0); }
		public ITerminalNode RANGE() { return GetToken(TSqlParser.RANGE, 0); }
		public ITerminalNode RANK() { return GetToken(TSqlParser.RANK, 0); }
		public ITerminalNode RC2() { return GetToken(TSqlParser.RC2, 0); }
		public ITerminalNode RC4() { return GetToken(TSqlParser.RC4, 0); }
		public ITerminalNode RC4_128() { return GetToken(TSqlParser.RC4_128, 0); }
		public ITerminalNode READ_COMMITTED_SNAPSHOT() { return GetToken(TSqlParser.READ_COMMITTED_SNAPSHOT, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode READ_ONLY_ROUTING_LIST() { return GetToken(TSqlParser.READ_ONLY_ROUTING_LIST, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(TSqlParser.READ_WRITE, 0); }
		public ITerminalNode READCOMMITTED() { return GetToken(TSqlParser.READCOMMITTED, 0); }
		public ITerminalNode READCOMMITTEDLOCK() { return GetToken(TSqlParser.READCOMMITTEDLOCK, 0); }
		public ITerminalNode READONLY() { return GetToken(TSqlParser.READONLY, 0); }
		public ITerminalNode READPAST() { return GetToken(TSqlParser.READPAST, 0); }
		public ITerminalNode READUNCOMMITTED() { return GetToken(TSqlParser.READUNCOMMITTED, 0); }
		public ITerminalNode READWRITE() { return GetToken(TSqlParser.READWRITE, 0); }
		public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		public ITerminalNode RECEIVE() { return GetToken(TSqlParser.RECEIVE, 0); }
		public ITerminalNode RECOMPILE() { return GetToken(TSqlParser.RECOMPILE, 0); }
		public ITerminalNode RECOVERY() { return GetToken(TSqlParser.RECOVERY, 0); }
		public ITerminalNode RECURSIVE_TRIGGERS() { return GetToken(TSqlParser.RECURSIVE_TRIGGERS, 0); }
		public ITerminalNode RELATIVE() { return GetToken(TSqlParser.RELATIVE, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode REMOTE_PROC_TRANSACTIONS() { return GetToken(TSqlParser.REMOTE_PROC_TRANSACTIONS, 0); }
		public ITerminalNode REMOTE_SERVICE_NAME() { return GetToken(TSqlParser.REMOTE_SERVICE_NAME, 0); }
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode REORGANIZE() { return GetToken(TSqlParser.REORGANIZE, 0); }
		public ITerminalNode REPAIR_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.REPAIR_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode REPAIR_FAST() { return GetToken(TSqlParser.REPAIR_FAST, 0); }
		public ITerminalNode REPAIR_REBUILD() { return GetToken(TSqlParser.REPAIR_REBUILD, 0); }
		public ITerminalNode REPEATABLE() { return GetToken(TSqlParser.REPEATABLE, 0); }
		public ITerminalNode REPEATABLEREAD() { return GetToken(TSqlParser.REPEATABLEREAD, 0); }
		public ITerminalNode REPLACE() { return GetToken(TSqlParser.REPLACE, 0); }
		public ITerminalNode REPLICA() { return GetToken(TSqlParser.REPLICA, 0); }
		public ITerminalNode REPLICATE() { return GetToken(TSqlParser.REPLICATE, 0); }
		public ITerminalNode REQUEST_MAX_CPU_TIME_SEC() { return GetToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, 0); }
		public ITerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT() { return GetToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, 0); }
		public ITerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return GetToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, 0); }
		public ITerminalNode REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT() { return GetToken(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0); }
		public ITerminalNode RESAMPLE() { return GetToken(TSqlParser.RESAMPLE, 0); }
		public ITerminalNode RESERVE_DISK_SPACE() { return GetToken(TSqlParser.RESERVE_DISK_SPACE, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode RESOURCE_MANAGER_LOCATION() { return GetToken(TSqlParser.RESOURCE_MANAGER_LOCATION, 0); }
		public ITerminalNode RESTRICTED_USER() { return GetToken(TSqlParser.RESTRICTED_USER, 0); }
		public ITerminalNode RESUMABLE() { return GetToken(TSqlParser.RESUMABLE, 0); }
		public ITerminalNode RETENTION() { return GetToken(TSqlParser.RETENTION, 0); }
		public ITerminalNode REVERSE() { return GetToken(TSqlParser.REVERSE, 0); }
		public ITerminalNode ROBUST() { return GetToken(TSqlParser.ROBUST, 0); }
		public ITerminalNode ROOT() { return GetToken(TSqlParser.ROOT, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		public ITerminalNode ROW_NUMBER() { return GetToken(TSqlParser.ROW_NUMBER, 0); }
		public ITerminalNode ROWGUID() { return GetToken(TSqlParser.ROWGUID, 0); }
		public ITerminalNode ROWLOCK() { return GetToken(TSqlParser.ROWLOCK, 0); }
		public ITerminalNode ROWS() { return GetToken(TSqlParser.ROWS, 0); }
		public ITerminalNode RTRIM() { return GetToken(TSqlParser.RTRIM, 0); }
		public ITerminalNode SAMPLE() { return GetToken(TSqlParser.SAMPLE, 0); }
		public ITerminalNode SCHEMA_ID() { return GetToken(TSqlParser.SCHEMA_ID, 0); }
		public ITerminalNode SCHEMA_NAME() { return GetToken(TSqlParser.SCHEMA_NAME, 0); }
		public ITerminalNode SCHEMABINDING() { return GetToken(TSqlParser.SCHEMABINDING, 0); }
		public ITerminalNode SCOPE_IDENTITY() { return GetToken(TSqlParser.SCOPE_IDENTITY, 0); }
		public ITerminalNode SCOPED() { return GetToken(TSqlParser.SCOPED, 0); }
		public ITerminalNode SCROLL() { return GetToken(TSqlParser.SCROLL, 0); }
		public ITerminalNode SCROLL_LOCKS() { return GetToken(TSqlParser.SCROLL_LOCKS, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode SECONDARY() { return GetToken(TSqlParser.SECONDARY, 0); }
		public ITerminalNode SECONDARY_ONLY() { return GetToken(TSqlParser.SECONDARY_ONLY, 0); }
		public ITerminalNode SECONDARY_ROLE() { return GetToken(TSqlParser.SECONDARY_ROLE, 0); }
		public ITerminalNode SECONDS() { return GetToken(TSqlParser.SECONDS, 0); }
		public ITerminalNode SECRET() { return GetToken(TSqlParser.SECRET, 0); }
		public ITerminalNode SECURABLES() { return GetToken(TSqlParser.SECURABLES, 0); }
		public ITerminalNode SECURITY() { return GetToken(TSqlParser.SECURITY, 0); }
		public ITerminalNode SECURITY_LOG() { return GetToken(TSqlParser.SECURITY_LOG, 0); }
		public ITerminalNode SEEDING_MODE() { return GetToken(TSqlParser.SEEDING_MODE, 0); }
		public ITerminalNode SELF() { return GetToken(TSqlParser.SELF, 0); }
		public ITerminalNode SEMI_SENSITIVE() { return GetToken(TSqlParser.SEMI_SENSITIVE, 0); }
		public ITerminalNode SEND() { return GetToken(TSqlParser.SEND, 0); }
		public ITerminalNode SENT() { return GetToken(TSqlParser.SENT, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		public ITerminalNode SEQUENCE_NUMBER() { return GetToken(TSqlParser.SEQUENCE_NUMBER, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(TSqlParser.SERIALIZABLE, 0); }
		public ITerminalNode SERVERPROPERTY() { return GetToken(TSqlParser.SERVERPROPERTY, 0); }
		public ITerminalNode SERVICEBROKER() { return GetToken(TSqlParser.SERVICEBROKER, 0); }
		public ITerminalNode SESSIONPROPERTY() { return GetToken(TSqlParser.SESSIONPROPERTY, 0); }
		public ITerminalNode SESSION_TIMEOUT() { return GetToken(TSqlParser.SESSION_TIMEOUT, 0); }
		public ITerminalNode SETERROR() { return GetToken(TSqlParser.SETERROR, 0); }
		public ITerminalNode SHARE() { return GetToken(TSqlParser.SHARE, 0); }
		public ITerminalNode SHARED() { return GetToken(TSqlParser.SHARED, 0); }
		public ITerminalNode SHOWCONTIG() { return GetToken(TSqlParser.SHOWCONTIG, 0); }
		public ITerminalNode SHOWPLAN() { return GetToken(TSqlParser.SHOWPLAN, 0); }
		public ITerminalNode SHOWPLAN_ALL() { return GetToken(TSqlParser.SHOWPLAN_ALL, 0); }
		public ITerminalNode SHOWPLAN_TEXT() { return GetToken(TSqlParser.SHOWPLAN_TEXT, 0); }
		public ITerminalNode SHOWPLAN_XML() { return GetToken(TSqlParser.SHOWPLAN_XML, 0); }
		public ITerminalNode SIGNATURE() { return GetToken(TSqlParser.SIGNATURE, 0); }
		public ITerminalNode SIMPLE() { return GetToken(TSqlParser.SIMPLE, 0); }
		public ITerminalNode SINGLE_USER() { return GetToken(TSqlParser.SINGLE_USER, 0); }
		public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		public ITerminalNode SMALLINT() { return GetToken(TSqlParser.SMALLINT, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(TSqlParser.SNAPSHOT, 0); }
		public ITerminalNode SORT_IN_TEMPDB() { return GetToken(TSqlParser.SORT_IN_TEMPDB, 0); }
		public ITerminalNode SOUNDEX() { return GetToken(TSqlParser.SOUNDEX, 0); }
		public ITerminalNode SPACE_KEYWORD() { return GetToken(TSqlParser.SPACE_KEYWORD, 0); }
		public ITerminalNode SPARSE() { return GetToken(TSqlParser.SPARSE, 0); }
		public ITerminalNode SPATIAL_WINDOW_MAX_CELLS() { return GetToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public ITerminalNode SQL_VARIANT_PROPERTY() { return GetToken(TSqlParser.SQL_VARIANT_PROPERTY, 0); }
		public ITerminalNode STANDBY() { return GetToken(TSqlParser.STANDBY, 0); }
		public ITerminalNode START_DATE() { return GetToken(TSqlParser.START_DATE, 0); }
		public ITerminalNode STATIC() { return GetToken(TSqlParser.STATIC, 0); }
		public ITerminalNode STATISTICS_INCREMENTAL() { return GetToken(TSqlParser.STATISTICS_INCREMENTAL, 0); }
		public ITerminalNode STATISTICS_NORECOMPUTE() { return GetToken(TSqlParser.STATISTICS_NORECOMPUTE, 0); }
		public ITerminalNode STATS_DATE() { return GetToken(TSqlParser.STATS_DATE, 0); }
		public ITerminalNode STATS_STREAM() { return GetToken(TSqlParser.STATS_STREAM, 0); }
		public ITerminalNode STATUS() { return GetToken(TSqlParser.STATUS, 0); }
		public ITerminalNode STATUSONLY() { return GetToken(TSqlParser.STATUSONLY, 0); }
		public ITerminalNode STDEV() { return GetToken(TSqlParser.STDEV, 0); }
		public ITerminalNode STDEVP() { return GetToken(TSqlParser.STDEVP, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public ITerminalNode STR() { return GetToken(TSqlParser.STR, 0); }
		public ITerminalNode STRING_AGG() { return GetToken(TSqlParser.STRING_AGG, 0); }
		public ITerminalNode STRING_ESCAPE() { return GetToken(TSqlParser.STRING_ESCAPE, 0); }
		public ITerminalNode STUFF() { return GetToken(TSqlParser.STUFF, 0); }
		public ITerminalNode SUBJECT() { return GetToken(TSqlParser.SUBJECT, 0); }
		public ITerminalNode SUBSCRIBE() { return GetToken(TSqlParser.SUBSCRIBE, 0); }
		public ITerminalNode SUBSCRIPTION() { return GetToken(TSqlParser.SUBSCRIPTION, 0); }
		public ITerminalNode SUBSTRING() { return GetToken(TSqlParser.SUBSTRING, 0); }
		public ITerminalNode SUM() { return GetToken(TSqlParser.SUM, 0); }
		public ITerminalNode SUSER_ID() { return GetToken(TSqlParser.SUSER_ID, 0); }
		public ITerminalNode SUSER_NAME() { return GetToken(TSqlParser.SUSER_NAME, 0); }
		public ITerminalNode SUSER_SID() { return GetToken(TSqlParser.SUSER_SID, 0); }
		public ITerminalNode SUSER_SNAME() { return GetToken(TSqlParser.SUSER_SNAME, 0); }
		public ITerminalNode SUSPEND() { return GetToken(TSqlParser.SUSPEND, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode SYNCHRONOUS_COMMIT() { return GetToken(TSqlParser.SYNCHRONOUS_COMMIT, 0); }
		public ITerminalNode SYNONYM() { return GetToken(TSqlParser.SYNONYM, 0); }
		public ITerminalNode SYSTEM() { return GetToken(TSqlParser.SYSTEM, 0); }
		public ITerminalNode TABLERESULTS() { return GetToken(TSqlParser.TABLERESULTS, 0); }
		public ITerminalNode TABLOCK() { return GetToken(TSqlParser.TABLOCK, 0); }
		public ITerminalNode TABLOCKX() { return GetToken(TSqlParser.TABLOCKX, 0); }
		public ITerminalNode TAKE() { return GetToken(TSqlParser.TAKE, 0); }
		public ITerminalNode TARGET_RECOVERY_TIME() { return GetToken(TSqlParser.TARGET_RECOVERY_TIME, 0); }
		public ITerminalNode TB() { return GetToken(TSqlParser.TB, 0); }
		public ITerminalNode TEXTIMAGE_ON() { return GetToken(TSqlParser.TEXTIMAGE_ON, 0); }
		public ITerminalNode THROW() { return GetToken(TSqlParser.THROW, 0); }
		public ITerminalNode TIES() { return GetToken(TSqlParser.TIES, 0); }
		public ITerminalNode TIME() { return GetToken(TSqlParser.TIME, 0); }
		public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public ITerminalNode TIMER() { return GetToken(TSqlParser.TIMER, 0); }
		public ITerminalNode TINYINT() { return GetToken(TSqlParser.TINYINT, 0); }
		public ITerminalNode TORN_PAGE_DETECTION() { return GetToken(TSqlParser.TORN_PAGE_DETECTION, 0); }
		public ITerminalNode TRACKING() { return GetToken(TSqlParser.TRACKING, 0); }
		public ITerminalNode TRANSACTION_ID() { return GetToken(TSqlParser.TRANSACTION_ID, 0); }
		public ITerminalNode TRANSFORM_NOISE_WORDS() { return GetToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public ITerminalNode TRANSLATE() { return GetToken(TSqlParser.TRANSLATE, 0); }
		public ITerminalNode TRIM() { return GetToken(TSqlParser.TRIM, 0); }
		public ITerminalNode TRIPLE_DES() { return GetToken(TSqlParser.TRIPLE_DES, 0); }
		public ITerminalNode TRIPLE_DES_3KEY() { return GetToken(TSqlParser.TRIPLE_DES_3KEY, 0); }
		public ITerminalNode TRUSTWORTHY() { return GetToken(TSqlParser.TRUSTWORTHY, 0); }
		public ITerminalNode TRY() { return GetToken(TSqlParser.TRY, 0); }
		public ITerminalNode TSQL() { return GetToken(TSqlParser.TSQL, 0); }
		public ITerminalNode TWO_DIGIT_YEAR_CUTOFF() { return GetToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode TYPE_ID() { return GetToken(TSqlParser.TYPE_ID, 0); }
		public ITerminalNode TYPE_NAME() { return GetToken(TSqlParser.TYPE_NAME, 0); }
		public ITerminalNode TYPE_WARNING() { return GetToken(TSqlParser.TYPE_WARNING, 0); }
		public ITerminalNode TYPEPROPERTY() { return GetToken(TSqlParser.TYPEPROPERTY, 0); }
		public ITerminalNode UNBOUNDED() { return GetToken(TSqlParser.UNBOUNDED, 0); }
		public ITerminalNode UNCOMMITTED() { return GetToken(TSqlParser.UNCOMMITTED, 0); }
		public ITerminalNode UNICODE() { return GetToken(TSqlParser.UNICODE, 0); }
		public ITerminalNode UNKNOWN() { return GetToken(TSqlParser.UNKNOWN, 0); }
		public ITerminalNode UNLIMITED() { return GetToken(TSqlParser.UNLIMITED, 0); }
		public ITerminalNode UNMASK() { return GetToken(TSqlParser.UNMASK, 0); }
		public ITerminalNode UOW() { return GetToken(TSqlParser.UOW, 0); }
		public ITerminalNode UPDLOCK() { return GetToken(TSqlParser.UPDLOCK, 0); }
		public ITerminalNode UPPER() { return GetToken(TSqlParser.UPPER, 0); }
		public ITerminalNode USER_ID() { return GetToken(TSqlParser.USER_ID, 0); }
		public ITerminalNode USER_NAME() { return GetToken(TSqlParser.USER_NAME, 0); }
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public ITerminalNode VALID_XML() { return GetToken(TSqlParser.VALID_XML, 0); }
		public ITerminalNode VALIDATION() { return GetToken(TSqlParser.VALIDATION, 0); }
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ITerminalNode VALUE_SQUARE_BRACKET() { return GetToken(TSqlParser.VALUE_SQUARE_BRACKET, 0); }
		public ITerminalNode VAR() { return GetToken(TSqlParser.VAR, 0); }
		public ITerminalNode[] VARBINARY_KEYWORD() { return GetTokens(TSqlParser.VARBINARY_KEYWORD); }
		public ITerminalNode VARBINARY_KEYWORD(int i) {
			return GetToken(TSqlParser.VARBINARY_KEYWORD, i);
		}
		public ITerminalNode VARP() { return GetToken(TSqlParser.VARP, 0); }
		public ITerminalNode VERIFY_CLONEDB() { return GetToken(TSqlParser.VERIFY_CLONEDB, 0); }
		public ITerminalNode VERSION() { return GetToken(TSqlParser.VERSION, 0); }
		public ITerminalNode VIEW_METADATA() { return GetToken(TSqlParser.VIEW_METADATA, 0); }
		public ITerminalNode VIEWS() { return GetToken(TSqlParser.VIEWS, 0); }
		public ITerminalNode WAIT() { return GetToken(TSqlParser.WAIT, 0); }
		public ITerminalNode WELL_FORMED_XML() { return GetToken(TSqlParser.WELL_FORMED_XML, 0); }
		public ITerminalNode WITHOUT_ARRAY_WRAPPER() { return GetToken(TSqlParser.WITHOUT_ARRAY_WRAPPER, 0); }
		public ITerminalNode WORK() { return GetToken(TSqlParser.WORK, 0); }
		public ITerminalNode WORKLOAD() { return GetToken(TSqlParser.WORKLOAD, 0); }
		public ITerminalNode XLOCK() { return GetToken(TSqlParser.XLOCK, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode XML_COMPRESSION() { return GetToken(TSqlParser.XML_COMPRESSION, 0); }
		public ITerminalNode XMLDATA() { return GetToken(TSqlParser.XMLDATA, 0); }
		public ITerminalNode XMLNAMESPACES() { return GetToken(TSqlParser.XMLNAMESPACES, 0); }
		public ITerminalNode XMLSCHEMA() { return GetToken(TSqlParser.XMLSCHEMA, 0); }
		public ITerminalNode XSINIL() { return GetToken(TSqlParser.XSINIL, 0); }
		public ITerminalNode[] ZONE() { return GetTokens(TSqlParser.ZONE); }
		public ITerminalNode ZONE(int i) {
			return GetToken(TSqlParser.ZONE, i);
		}
		public ITerminalNode ABORT_AFTER_WAIT() { return GetToken(TSqlParser.ABORT_AFTER_WAIT, 0); }
		public ITerminalNode ABSENT() { return GetToken(TSqlParser.ABSENT, 0); }
		public ITerminalNode ADMINISTER() { return GetToken(TSqlParser.ADMINISTER, 0); }
		public ITerminalNode AES() { return GetToken(TSqlParser.AES, 0); }
		public ITerminalNode ALLOW_CONNECTIONS() { return GetToken(TSqlParser.ALLOW_CONNECTIONS, 0); }
		public ITerminalNode ALLOW_MULTIPLE_EVENT_LOSS() { return GetToken(TSqlParser.ALLOW_MULTIPLE_EVENT_LOSS, 0); }
		public ITerminalNode ALLOW_SINGLE_EVENT_LOSS() { return GetToken(TSqlParser.ALLOW_SINGLE_EVENT_LOSS, 0); }
		public ITerminalNode ANONYMOUS() { return GetToken(TSqlParser.ANONYMOUS, 0); }
		public ITerminalNode APPEND() { return GetToken(TSqlParser.APPEND, 0); }
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode ASYNCHRONOUS_COMMIT() { return GetToken(TSqlParser.ASYNCHRONOUS_COMMIT, 0); }
		public ITerminalNode AUTHENTICATE() { return GetToken(TSqlParser.AUTHENTICATE, 0); }
		public ITerminalNode AUTHENTICATION() { return GetToken(TSqlParser.AUTHENTICATION, 0); }
		public ITerminalNode AUTOMATED_BACKUP_PREFERENCE() { return GetToken(TSqlParser.AUTOMATED_BACKUP_PREFERENCE, 0); }
		public ITerminalNode AUTOMATIC() { return GetToken(TSqlParser.AUTOMATIC, 0); }
		public ITerminalNode AVAILABILITY_MODE() { return GetToken(TSqlParser.AVAILABILITY_MODE, 0); }
		public ITerminalNode BEFORE() { return GetToken(TSqlParser.BEFORE, 0); }
		public ITerminalNode BLOCK() { return GetToken(TSqlParser.BLOCK, 0); }
		public ITerminalNode BLOCKERS() { return GetToken(TSqlParser.BLOCKERS, 0); }
		public ITerminalNode BLOCKSIZE() { return GetToken(TSqlParser.BLOCKSIZE, 0); }
		public ITerminalNode BLOCKING_HIERARCHY() { return GetToken(TSqlParser.BLOCKING_HIERARCHY, 0); }
		public ITerminalNode BUFFER() { return GetToken(TSqlParser.BUFFER, 0); }
		public ITerminalNode BUFFERCOUNT() { return GetToken(TSqlParser.BUFFERCOUNT, 0); }
		public ITerminalNode CACHE() { return GetToken(TSqlParser.CACHE, 0); }
		public ITerminalNode CALLED() { return GetToken(TSqlParser.CALLED, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode CHANGETABLE() { return GetToken(TSqlParser.CHANGETABLE, 0); }
		public ITerminalNode CHANGES() { return GetToken(TSqlParser.CHANGES, 0); }
		public ITerminalNode CHECK_POLICY() { return GetToken(TSqlParser.CHECK_POLICY, 0); }
		public ITerminalNode CHECK_EXPIRATION() { return GetToken(TSqlParser.CHECK_EXPIRATION, 0); }
		public ITerminalNode CLASSIFIER_FUNCTION() { return GetToken(TSqlParser.CLASSIFIER_FUNCTION, 0); }
		public ITerminalNode CLUSTER() { return GetToken(TSqlParser.CLUSTER, 0); }
		public ITerminalNode COMPRESS() { return GetToken(TSqlParser.COMPRESS, 0); }
		public ITerminalNode COMPRESSION() { return GetToken(TSqlParser.COMPRESSION, 0); }
		public ITerminalNode CONNECT() { return GetToken(TSqlParser.CONNECT, 0); }
		public ITerminalNode CONNECTION() { return GetToken(TSqlParser.CONNECTION, 0); }
		public ITerminalNode CONFIGURATION() { return GetToken(TSqlParser.CONFIGURATION, 0); }
		public ITerminalNode CONNECTIONPROPERTY() { return GetToken(TSqlParser.CONNECTIONPROPERTY, 0); }
		public ITerminalNode CONTAINMENT() { return GetToken(TSqlParser.CONTAINMENT, 0); }
		public ITerminalNode CONTEXT() { return GetToken(TSqlParser.CONTEXT, 0); }
		public ITerminalNode CONTEXT_INFO() { return GetToken(TSqlParser.CONTEXT_INFO, 0); }
		public ITerminalNode CONTINUE_AFTER_ERROR() { return GetToken(TSqlParser.CONTINUE_AFTER_ERROR, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public ITerminalNode CONTRACT_NAME() { return GetToken(TSqlParser.CONTRACT_NAME, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode COPY_ONLY() { return GetToken(TSqlParser.COPY_ONLY, 0); }
		public ITerminalNode CYCLE() { return GetToken(TSqlParser.CYCLE, 0); }
		public ITerminalNode DATA_COMPRESSION() { return GetToken(TSqlParser.DATA_COMPRESSION, 0); }
		public ITerminalNode DATA_SOURCE() { return GetToken(TSqlParser.DATA_SOURCE, 0); }
		public ITerminalNode DATABASE_MIRRORING() { return GetToken(TSqlParser.DATABASE_MIRRORING, 0); }
		public ITerminalNode DATASPACE() { return GetToken(TSqlParser.DATASPACE, 0); }
		public ITerminalNode DDL() { return GetToken(TSqlParser.DDL, 0); }
		public ITerminalNode DECOMPRESS() { return GetToken(TSqlParser.DECOMPRESS, 0); }
		public ITerminalNode DEFAULT_DATABASE() { return GetToken(TSqlParser.DEFAULT_DATABASE, 0); }
		public ITerminalNode DEFAULT_SCHEMA() { return GetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public ITerminalNode DIAGNOSTICS() { return GetToken(TSqlParser.DIAGNOSTICS, 0); }
		public ITerminalNode DIFFERENTIAL() { return GetToken(TSqlParser.DIFFERENTIAL, 0); }
		public ITerminalNode DISTRIBUTION() { return GetToken(TSqlParser.DISTRIBUTION, 0); }
		public ITerminalNode DTC_SUPPORT() { return GetToken(TSqlParser.DTC_SUPPORT, 0); }
		public ITerminalNode ENABLED() { return GetToken(TSqlParser.ENABLED, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public ITerminalNode ERROR() { return GetToken(TSqlParser.ERROR, 0); }
		public ITerminalNode ERROR_LINE() { return GetToken(TSqlParser.ERROR_LINE, 0); }
		public ITerminalNode ERROR_MESSAGE() { return GetToken(TSqlParser.ERROR_MESSAGE, 0); }
		public ITerminalNode ERROR_NUMBER() { return GetToken(TSqlParser.ERROR_NUMBER, 0); }
		public ITerminalNode ERROR_PROCEDURE() { return GetToken(TSqlParser.ERROR_PROCEDURE, 0); }
		public ITerminalNode ERROR_SEVERITY() { return GetToken(TSqlParser.ERROR_SEVERITY, 0); }
		public ITerminalNode ERROR_STATE() { return GetToken(TSqlParser.ERROR_STATE, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode EVENTDATA() { return GetToken(TSqlParser.EVENTDATA, 0); }
		public ITerminalNode EVENT_RETENTION_MODE() { return GetToken(TSqlParser.EVENT_RETENTION_MODE, 0); }
		public ITerminalNode EXECUTABLE_FILE() { return GetToken(TSqlParser.EXECUTABLE_FILE, 0); }
		public ITerminalNode EXPIREDATE() { return GetToken(TSqlParser.EXPIREDATE, 0); }
		public ITerminalNode EXTENSION() { return GetToken(TSqlParser.EXTENSION, 0); }
		public ITerminalNode EXTERNAL_ACCESS() { return GetToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		public ITerminalNode FAILOVER() { return GetToken(TSqlParser.FAILOVER, 0); }
		public ITerminalNode FAILURECONDITIONLEVEL() { return GetToken(TSqlParser.FAILURECONDITIONLEVEL, 0); }
		public ITerminalNode FAN_IN() { return GetToken(TSqlParser.FAN_IN, 0); }
		public ITerminalNode FILE_SNAPSHOT() { return GetToken(TSqlParser.FILE_SNAPSHOT, 0); }
		public ITerminalNode FORCESEEK() { return GetToken(TSqlParser.FORCESEEK, 0); }
		public ITerminalNode FORCE_SERVICE_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode FORMATMESSAGE() { return GetToken(TSqlParser.FORMATMESSAGE, 0); }
		public ITerminalNode GET() { return GetToken(TSqlParser.GET, 0); }
		public ITerminalNode GET_FILESTREAM_TRANSACTION_CONTEXT() { return GetToken(TSqlParser.GET_FILESTREAM_TRANSACTION_CONTEXT, 0); }
		public ITerminalNode GETANCESTOR() { return GetToken(TSqlParser.GETANCESTOR, 0); }
		public ITerminalNode GETANSINULL() { return GetToken(TSqlParser.GETANSINULL, 0); }
		public ITerminalNode GETDESCENDANT() { return GetToken(TSqlParser.GETDESCENDANT, 0); }
		public ITerminalNode GETLEVEL() { return GetToken(TSqlParser.GETLEVEL, 0); }
		public ITerminalNode GETREPARENTEDVALUE() { return GetToken(TSqlParser.GETREPARENTEDVALUE, 0); }
		public ITerminalNode GETROOT() { return GetToken(TSqlParser.GETROOT, 0); }
		public ITerminalNode GOVERNOR() { return GetToken(TSqlParser.GOVERNOR, 0); }
		public ITerminalNode HASHED() { return GetToken(TSqlParser.HASHED, 0); }
		public ITerminalNode HEALTHCHECKTIMEOUT() { return GetToken(TSqlParser.HEALTHCHECKTIMEOUT, 0); }
		public ITerminalNode HEAP() { return GetToken(TSqlParser.HEAP, 0); }
		public ITerminalNode HIERARCHYID() { return GetToken(TSqlParser.HIERARCHYID, 0); }
		public ITerminalNode HOST_ID() { return GetToken(TSqlParser.HOST_ID, 0); }
		public ITerminalNode HOST_NAME() { return GetToken(TSqlParser.HOST_NAME, 0); }
		public ITerminalNode IIF() { return GetToken(TSqlParser.IIF, 0); }
		public ITerminalNode IO() { return GetToken(TSqlParser.IO, 0); }
		public ITerminalNode INCLUDE() { return GetToken(TSqlParser.INCLUDE, 0); }
		public ITerminalNode INCREMENT() { return GetToken(TSqlParser.INCREMENT, 0); }
		public ITerminalNode INFINITE() { return GetToken(TSqlParser.INFINITE, 0); }
		public ITerminalNode INIT() { return GetToken(TSqlParser.INIT, 0); }
		public ITerminalNode INSTEAD() { return GetToken(TSqlParser.INSTEAD, 0); }
		public ITerminalNode ISDESCENDANTOF() { return GetToken(TSqlParser.ISDESCENDANTOF, 0); }
		public ITerminalNode ISNULL() { return GetToken(TSqlParser.ISNULL, 0); }
		public ITerminalNode ISNUMERIC() { return GetToken(TSqlParser.ISNUMERIC, 0); }
		public ITerminalNode KERBEROS() { return GetToken(TSqlParser.KERBEROS, 0); }
		public ITerminalNode KEY_PATH() { return GetToken(TSqlParser.KEY_PATH, 0); }
		public ITerminalNode KEY_STORE_PROVIDER_NAME() { return GetToken(TSqlParser.KEY_STORE_PROVIDER_NAME, 0); }
		public ITerminalNode LANGUAGE() { return GetToken(TSqlParser.LANGUAGE, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public ITerminalNode LIFETIME() { return GetToken(TSqlParser.LIFETIME, 0); }
		public ITerminalNode LINKED() { return GetToken(TSqlParser.LINKED, 0); }
		public ITerminalNode LINUX() { return GetToken(TSqlParser.LINUX, 0); }
		public ITerminalNode LISTENER_IP() { return GetToken(TSqlParser.LISTENER_IP, 0); }
		public ITerminalNode LISTENER_PORT() { return GetToken(TSqlParser.LISTENER_PORT, 0); }
		public ITerminalNode LOCAL_SERVICE_NAME() { return GetToken(TSqlParser.LOCAL_SERVICE_NAME, 0); }
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode[] MASK() { return GetTokens(TSqlParser.MASK); }
		public ITerminalNode MASK(int i) {
			return GetToken(TSqlParser.MASK, i);
		}
		public ITerminalNode MATCHED() { return GetToken(TSqlParser.MATCHED, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode MAX_MEMORY() { return GetToken(TSqlParser.MAX_MEMORY, 0); }
		public ITerminalNode MAXTRANSFER() { return GetToken(TSqlParser.MAXTRANSFER, 0); }
		public ITerminalNode MAXVALUE() { return GetToken(TSqlParser.MAXVALUE, 0); }
		public ITerminalNode MAX_DISPATCH_LATENCY() { return GetToken(TSqlParser.MAX_DISPATCH_LATENCY, 0); }
		public ITerminalNode MAX_DURATION() { return GetToken(TSqlParser.MAX_DURATION, 0); }
		public ITerminalNode MAX_EVENT_SIZE() { return GetToken(TSqlParser.MAX_EVENT_SIZE, 0); }
		public ITerminalNode MAX_SIZE() { return GetToken(TSqlParser.MAX_SIZE, 0); }
		public ITerminalNode MAX_OUTSTANDING_IO_PER_VOLUME() { return GetToken(TSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME, 0); }
		public ITerminalNode MEDIADESCRIPTION() { return GetToken(TSqlParser.MEDIADESCRIPTION, 0); }
		public ITerminalNode MEDIANAME() { return GetToken(TSqlParser.MEDIANAME, 0); }
		public ITerminalNode MEMBER() { return GetToken(TSqlParser.MEMBER, 0); }
		public ITerminalNode MEMORY_PARTITION_MODE() { return GetToken(TSqlParser.MEMORY_PARTITION_MODE, 0); }
		public ITerminalNode MESSAGE_FORWARDING() { return GetToken(TSqlParser.MESSAGE_FORWARDING, 0); }
		public ITerminalNode MESSAGE_FORWARD_SIZE() { return GetToken(TSqlParser.MESSAGE_FORWARD_SIZE, 0); }
		public ITerminalNode MINVALUE() { return GetToken(TSqlParser.MINVALUE, 0); }
		public ITerminalNode MIRROR() { return GetToken(TSqlParser.MIRROR, 0); }
		public ITerminalNode MUST_CHANGE() { return GetToken(TSqlParser.MUST_CHANGE, 0); }
		public ITerminalNode NEWID() { return GetToken(TSqlParser.NEWID, 0); }
		public ITerminalNode NEWSEQUENTIALID() { return GetToken(TSqlParser.NEWSEQUENTIALID, 0); }
		public ITerminalNode NOFORMAT() { return GetToken(TSqlParser.NOFORMAT, 0); }
		public ITerminalNode NOINIT() { return GetToken(TSqlParser.NOINIT, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode NOREWIND() { return GetToken(TSqlParser.NOREWIND, 0); }
		public ITerminalNode NOSKIP() { return GetToken(TSqlParser.NOSKIP, 0); }
		public ITerminalNode NOUNLOAD() { return GetToken(TSqlParser.NOUNLOAD, 0); }
		public ITerminalNode NO_CHECKSUM() { return GetToken(TSqlParser.NO_CHECKSUM, 0); }
		public ITerminalNode NO_COMPRESSION() { return GetToken(TSqlParser.NO_COMPRESSION, 0); }
		public ITerminalNode NO_EVENT_LOSS() { return GetToken(TSqlParser.NO_EVENT_LOSS, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode NTLM() { return GetToken(TSqlParser.NTLM, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public ITerminalNode ON_FAILURE() { return GetToken(TSqlParser.ON_FAILURE, 0); }
		public ITerminalNode OPERATIONS() { return GetToken(TSqlParser.OPERATIONS, 0); }
		public ITerminalNode PAGE() { return GetToken(TSqlParser.PAGE, 0); }
		public ITerminalNode PARAM_NODE() { return GetToken(TSqlParser.PARAM_NODE, 0); }
		public ITerminalNode PARTIAL() { return GetToken(TSqlParser.PARTIAL, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode PERMISSION_SET() { return GetToken(TSqlParser.PERMISSION_SET, 0); }
		public ITerminalNode PER_CPU() { return GetToken(TSqlParser.PER_CPU, 0); }
		public ITerminalNode PER_DB() { return GetToken(TSqlParser.PER_DB, 0); }
		public ITerminalNode PER_NODE() { return GetToken(TSqlParser.PER_NODE, 0); }
		public ITerminalNode PERSISTED() { return GetToken(TSqlParser.PERSISTED, 0); }
		public ITerminalNode PLATFORM() { return GetToken(TSqlParser.PLATFORM, 0); }
		public ITerminalNode POLICY() { return GetToken(TSqlParser.POLICY, 0); }
		public ITerminalNode PREDICATE() { return GetToken(TSqlParser.PREDICATE, 0); }
		public ITerminalNode PROCESS() { return GetToken(TSqlParser.PROCESS, 0); }
		public ITerminalNode PROFILE() { return GetToken(TSqlParser.PROFILE, 0); }
		public ITerminalNode PYTHON() { return GetToken(TSqlParser.PYTHON, 0); }
		public ITerminalNode R() { return GetToken(TSqlParser.R, 0); }
		public ITerminalNode READ_WRITE_FILEGROUPS() { return GetToken(TSqlParser.READ_WRITE_FILEGROUPS, 0); }
		public ITerminalNode REGENERATE() { return GetToken(TSqlParser.REGENERATE, 0); }
		public ITerminalNode RELATED_CONVERSATION() { return GetToken(TSqlParser.RELATED_CONVERSATION, 0); }
		public ITerminalNode RELATED_CONVERSATION_GROUP() { return GetToken(TSqlParser.RELATED_CONVERSATION_GROUP, 0); }
		public ITerminalNode REQUIRED() { return GetToken(TSqlParser.REQUIRED, 0); }
		public ITerminalNode RESET() { return GetToken(TSqlParser.RESET, 0); }
		public ITerminalNode RESOURCES() { return GetToken(TSqlParser.RESOURCES, 0); }
		public ITerminalNode RESTART() { return GetToken(TSqlParser.RESTART, 0); }
		public ITerminalNode RESUME() { return GetToken(TSqlParser.RESUME, 0); }
		public ITerminalNode RETAINDAYS() { return GetToken(TSqlParser.RETAINDAYS, 0); }
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public ITerminalNode REWIND() { return GetToken(TSqlParser.REWIND, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode ROUND_ROBIN() { return GetToken(TSqlParser.ROUND_ROBIN, 0); }
		public ITerminalNode ROWCOUNT_BIG() { return GetToken(TSqlParser.ROWCOUNT_BIG, 0); }
		public ITerminalNode RSA_512() { return GetToken(TSqlParser.RSA_512, 0); }
		public ITerminalNode RSA_1024() { return GetToken(TSqlParser.RSA_1024, 0); }
		public ITerminalNode RSA_2048() { return GetToken(TSqlParser.RSA_2048, 0); }
		public ITerminalNode RSA_3072() { return GetToken(TSqlParser.RSA_3072, 0); }
		public ITerminalNode RSA_4096() { return GetToken(TSqlParser.RSA_4096, 0); }
		public ITerminalNode SAFETY() { return GetToken(TSqlParser.SAFETY, 0); }
		public ITerminalNode SAFE() { return GetToken(TSqlParser.SAFE, 0); }
		public ITerminalNode SCHEDULER() { return GetToken(TSqlParser.SCHEDULER, 0); }
		public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		public ITerminalNode SCRIPT() { return GetToken(TSqlParser.SCRIPT, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode SERVICE_BROKER() { return GetToken(TSqlParser.SERVICE_BROKER, 0); }
		public ITerminalNode SERVICE_NAME() { return GetToken(TSqlParser.SERVICE_NAME, 0); }
		public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		public ITerminalNode SESSION_CONTEXT() { return GetToken(TSqlParser.SESSION_CONTEXT, 0); }
		public ITerminalNode SETTINGS() { return GetToken(TSqlParser.SETTINGS, 0); }
		public ITerminalNode SHRINKLOG() { return GetToken(TSqlParser.SHRINKLOG, 0); }
		public ITerminalNode SID() { return GetToken(TSqlParser.SID, 0); }
		public ITerminalNode SKIP_KEYWORD() { return GetToken(TSqlParser.SKIP_KEYWORD, 0); }
		public ITerminalNode SOFTNUMA() { return GetToken(TSqlParser.SOFTNUMA, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public ITerminalNode SPLIT() { return GetToken(TSqlParser.SPLIT, 0); }
		public ITerminalNode SQL() { return GetToken(TSqlParser.SQL, 0); }
		public ITerminalNode SQLDUMPERFLAGS() { return GetToken(TSqlParser.SQLDUMPERFLAGS, 0); }
		public ITerminalNode SQLDUMPERPATH() { return GetToken(TSqlParser.SQLDUMPERPATH, 0); }
		public ITerminalNode SQLDUMPERTIMEOUT() { return GetToken(TSqlParser.SQLDUMPERTIMEOUT, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode STATS() { return GetToken(TSqlParser.STATS, 0); }
		public ITerminalNode START() { return GetToken(TSqlParser.START, 0); }
		public ITerminalNode STARTED() { return GetToken(TSqlParser.STARTED, 0); }
		public ITerminalNode STARTUP_STATE() { return GetToken(TSqlParser.STARTUP_STATE, 0); }
		public ITerminalNode STOP() { return GetToken(TSqlParser.STOP, 0); }
		public ITerminalNode STOPPED() { return GetToken(TSqlParser.STOPPED, 0); }
		public ITerminalNode STOP_ON_ERROR() { return GetToken(TSqlParser.STOP_ON_ERROR, 0); }
		public ITerminalNode SUPPORTED() { return GetToken(TSqlParser.SUPPORTED, 0); }
		public ITerminalNode SWITCH() { return GetToken(TSqlParser.SWITCH, 0); }
		public ITerminalNode TAPE() { return GetToken(TSqlParser.TAPE, 0); }
		public ITerminalNode TARGET() { return GetToken(TSqlParser.TARGET, 0); }
		public ITerminalNode TCP() { return GetToken(TSqlParser.TCP, 0); }
		public ITerminalNode TOSTRING() { return GetToken(TSqlParser.TOSTRING, 0); }
		public ITerminalNode TRACE() { return GetToken(TSqlParser.TRACE, 0); }
		public ITerminalNode TRACK_CAUSALITY() { return GetToken(TSqlParser.TRACK_CAUSALITY, 0); }
		public ITerminalNode TRANSFER() { return GetToken(TSqlParser.TRANSFER, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(TSqlParser.UNCHECKED, 0); }
		public ITerminalNode UNLOCK() { return GetToken(TSqlParser.UNLOCK, 0); }
		public ITerminalNode UNSAFE() { return GetToken(TSqlParser.UNSAFE, 0); }
		public ITerminalNode URL() { return GetToken(TSqlParser.URL, 0); }
		public ITerminalNode USED() { return GetToken(TSqlParser.USED, 0); }
		public ITerminalNode VERBOSELOGGING() { return GetToken(TSqlParser.VERBOSELOGGING, 0); }
		public ITerminalNode VISIBILITY() { return GetToken(TSqlParser.VISIBILITY, 0); }
		public ITerminalNode WAIT_AT_LOW_PRIORITY() { return GetToken(TSqlParser.WAIT_AT_LOW_PRIORITY, 0); }
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode WITHOUT() { return GetToken(TSqlParser.WITHOUT, 0); }
		public ITerminalNode WITNESS() { return GetToken(TSqlParser.WITNESS, 0); }
		public ITerminalNode VARCHAR() { return GetToken(TSqlParser.VARCHAR, 0); }
		public ITerminalNode NVARCHAR() { return GetToken(TSqlParser.NVARCHAR, 0); }
		public ITerminalNode PRECISION() { return GetToken(TSqlParser.PRECISION, 0); }
		public ITerminalNode FILESTREAM_ON() { return GetToken(TSqlParser.FILESTREAM_ON, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(_ctx, State);
		EnterRule(_localctx, 1230, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13698;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABORT_AFTER_WAIT) | (1L << ABSENT) | (1L << ABSOLUTE) | (1L << ACCENT_SENSITIVITY) | (1L << ACCESS) | (1L << ACTION) | (1L << ACTIVATION) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDRESS) | (1L << ADMINISTER) | (1L << AES) | (1L << AES_128) | (1L << AES_192) | (1L << AES_256) | (1L << AFFINITY) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALGORITHM) | (1L << ALLOWED) | (1L << ALLOW_CONNECTIONS) | (1L << ALLOW_ENCRYPTED_VALUE_MODIFICATIONS) | (1L << ALLOW_MULTIPLE_EVENT_LOSS) | (1L << ALLOW_PAGE_LOCKS) | (1L << ALLOW_ROW_LOCKS) | (1L << ALLOW_SINGLE_EVENT_LOSS) | (1L << ALLOW_SNAPSHOT_ISOLATION) | (1L << ALL_CONSTRAINTS) | (1L << ALL_ERRORMSGS) | (1L << ALL_INDEXES) | (1L << ALL_LEVELS) | (1L << ALWAYS) | (1L << ANONYMOUS) | (1L << ANSI_DEFAULTS) | (1L << ANSI_NULLS) | (1L << ANSI_NULL_DEFAULT) | (1L << ANSI_NULL_DFLT_OFF) | (1L << ANSI_NULL_DFLT_ON) | (1L << ANSI_PADDING) | (1L << ANSI_WARNINGS) | (1L << APPEND) | (1L << APPLICATION) | (1L << APPLICATION_LOG) | (1L << APPLOCK_MODE) | (1L << APPLOCK_TEST) | (1L << APPLY) | (1L << APP_NAME) | (1L << ARITHABORT) | (1L << ARITHIGNORE) | (1L << ASCII) | (1L << ASSEMBLY) | (1L << ASSEMBLYPROPERTY) | (1L << ASYMMETRIC) | (1L << ASYNCHRONOUS_COMMIT) | (1L << AT_KEYWORD))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUDIT - 64)) | (1L << (AUDIT_GUID - 64)) | (1L << (AUTHENTICATE - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTO - 64)) | (1L << (AUTOGROW_ALL_FILES - 64)) | (1L << (AUTOGROW_SINGLE_FILE - 64)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 64)) | (1L << (AUTOMATIC - 64)) | (1L << (AUTO_CLEANUP - 64)) | (1L << (AUTO_CLOSE - 64)) | (1L << (AUTO_CREATE_STATISTICS - 64)) | (1L << (AUTO_DROP - 64)) | (1L << (AUTO_SHRINK - 64)) | (1L << (AUTO_UPDATE_STATISTICS - 64)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 64)) | (1L << (AVAILABILITY - 64)) | (1L << (AVAILABILITY_MODE - 64)) | (1L << (AVG - 64)) | (1L << (BACKUP_CLONEDB - 64)) | (1L << (BACKUP_PRIORITY - 64)) | (1L << (BASE64 - 64)) | (1L << (BEFORE - 64)) | (1L << (BEGIN_DIALOG - 64)) | (1L << (BIGINT - 64)) | (1L << (BINARY_BASE64 - 64)) | (1L << (BINARY_CHECKSUM - 64)) | (1L << (BINARY_KEYWORD - 64)) | (1L << (BINDING - 64)) | (1L << (BLOB_STORAGE - 64)) | (1L << (BLOCK - 64)) | (1L << (BLOCKERS - 64)) | (1L << (BLOCKING_HIERARCHY - 64)) | (1L << (BLOCKSIZE - 64)) | (1L << (BROKER - 64)) | (1L << (BROKER_INSTANCE - 64)) | (1L << (BUFFER - 64)) | (1L << (BUFFERCOUNT - 64)) | (1L << (BULK_LOGGED - 64)) | (1L << (CACHE - 64)) | (1L << (CALLED - 64)) | (1L << (CALLER - 64)) | (1L << (CAP_CPU_PERCENT - 64)) | (1L << (CAST - 64)) | (1L << (CATALOG - 64)) | (1L << (CATCH - 64)) | (1L << (CERTENCODED - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CERTPRIVATEKEY - 64)) | (1L << (CERT_ID - 64)) | (1L << (CHANGE - 64)) | (1L << (CHANGES - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CHANGETABLE - 128)) | (1L << (CHANGE_RETENTION - 128)) | (1L << (CHANGE_TRACKING - 128)) | (1L << (CHAR - 128)) | (1L << (CHARINDEX - 128)) | (1L << (CHECKALLOC - 128)) | (1L << (CHECKCATALOG - 128)) | (1L << (CHECKCONSTRAINTS - 128)) | (1L << (CHECKDB - 128)) | (1L << (CHECKFILEGROUP - 128)) | (1L << (CHECKSUM - 128)) | (1L << (CHECKSUM_AGG - 128)) | (1L << (CHECKTABLE - 128)) | (1L << (CHECK_EXPIRATION - 128)) | (1L << (CHECK_POLICY - 128)) | (1L << (CLASSIFIER_FUNCTION - 128)) | (1L << (CLEANTABLE - 128)) | (1L << (CLEANUP - 128)) | (1L << (CLONEDATABASE - 128)) | (1L << (CLUSTER - 128)) | (1L << (COLLECTION - 128)) | (1L << (COLUMNPROPERTY - 128)) | (1L << (COLUMNS - 128)) | (1L << (COLUMNSTORE - 128)) | (1L << (COLUMNSTORE_ARCHIVE - 128)) | (1L << (COLUMN_ENCRYPTION_KEY - 128)) | (1L << (COLUMN_MASTER_KEY - 128)) | (1L << (COL_LENGTH - 128)) | (1L << (COL_NAME - 128)) | (1L << (COMMITTED - 128)) | (1L << (COMPATIBILITY_LEVEL - 128)) | (1L << (COMPRESS - 128)) | (1L << (COMPRESSION - 128)) | (1L << (COMPRESSION_DELAY - 128)) | (1L << (COMPRESS_ALL_ROW_GROUPS - 128)) | (1L << (CONCAT - 128)) | (1L << (CONCAT_NULL_YIELDS_NULL - 128)) | (1L << (CONCAT_WS - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONNECT - 128)) | (1L << (CONNECTION - 128)) | (1L << (CONNECTIONPROPERTY - 128)) | (1L << (CONTAINMENT - 128)) | (1L << (CONTENT - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTEXT_INFO - 128)) | (1L << (CONTINUE_AFTER_ERROR - 128)) | (1L << (CONTRACT - 128)) | (1L << (CONTRACT_NAME - 128)) | (1L << (CONTROL - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (CONVERSATION - 192)) | (1L << (COOKIE - 192)) | (1L << (COPY_ONLY - 192)) | (1L << (COUNT - 192)) | (1L << (COUNTER - 192)) | (1L << (COUNT_BIG - 192)) | (1L << (CPU - 192)) | (1L << (CREATE_NEW - 192)) | (1L << (CREATION_DISPOSITION - 192)) | (1L << (CREDENTIAL - 192)) | (1L << (CRYPTOGRAPHIC - 192)) | (1L << (CUME_DIST - 192)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 192)) | (1L << (CURSOR_DEFAULT - 192)) | (1L << (CURSOR_STATUS - 192)) | (1L << (CYCLE - 192)) | (1L << (DATA - 192)) | (1L << (DATABASE_MIRRORING - 192)) | (1L << (DATABASE_PRINCIPAL_ID - 192)) | (1L << (DATALENGTH - 192)) | (1L << (DATASPACE - 192)) | (1L << (DATA_COMPRESSION - 192)) | (1L << (DATA_PURITY - 192)) | (1L << (DATA_SOURCE - 192)) | (1L << (DATEADD - 192)) | (1L << (DATEDIFF - 192)) | (1L << (DATENAME - 192)) | (1L << (DATEPART - 192)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 192)) | (1L << (DAYS - 192)) | (1L << (DBCC - 192)) | (1L << (DBREINDEX - 192)) | (1L << (DB_CHAINING - 192)) | (1L << (DB_FAILOVER - 192)) | (1L << (DB_ID - 192)) | (1L << (DB_NAME - 192)) | (1L << (DDL - 192)) | (1L << (DECOMPRESS - 192)) | (1L << (DECRYPTION - 192)) | (1L << (DEFAULT_DATABASE - 192)) | (1L << (DEFAULT_DOUBLE_QUOTE - 192)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 192)) | (1L << (DEFAULT_LANGUAGE - 192)) | (1L << (DEFAULT_SCHEMA - 192)) | (1L << (DEFINITION - 192)) | (1L << (DELAY - 192)) | (1L << (DELAYED_DURABILITY - 192)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (DELETED - 257)) | (1L << (DENSE_RANK - 257)) | (1L << (DEPENDENTS - 257)) | (1L << (DES - 257)) | (1L << (DESCRIPTION - 257)) | (1L << (DESX - 257)) | (1L << (DETERMINISTIC - 257)) | (1L << (DHCP - 257)) | (1L << (DIAGNOSTICS - 257)) | (1L << (DIALOG - 257)) | (1L << (DIFFERENCE - 257)) | (1L << (DIFFERENTIAL - 257)) | (1L << (DIRECTORY_NAME - 257)) | (1L << (DISABLE - 257)) | (1L << (DISABLED - 257)) | (1L << (DISABLE_BROKER - 257)) | (1L << (DISTRIBUTION - 257)) | (1L << (DOCUMENT - 257)) | (1L << (DROPCLEANBUFFERS - 257)) | (1L << (DROP_EXISTING - 257)) | (1L << (DTC_SUPPORT - 257)) | (1L << (DYNAMIC - 257)) | (1L << (ELEMENTS - 257)) | (1L << (EMERGENCY - 257)) | (1L << (EMPTY - 257)) | (1L << (ENABLE - 257)) | (1L << (ENABLED - 257)) | (1L << (ENABLE_BROKER - 257)) | (1L << (ENCRYPTED - 257)) | (1L << (ENCRYPTED_VALUE - 257)) | (1L << (ENCRYPTION - 257)) | (1L << (ENCRYPTION_TYPE - 257)) | (1L << (ENDPOINT - 257)) | (1L << (ENDPOINT_URL - 257)) | (1L << (ERROR - 257)) | (1L << (ERROR_BROKER_CONVERSATIONS - 257)) | (1L << (ERROR_LINE - 257)) | (1L << (ERROR_MESSAGE - 257)) | (1L << (ERROR_NUMBER - 257)) | (1L << (ERROR_PROCEDURE - 257)) | (1L << (ERROR_SEVERITY - 257)) | (1L << (ERROR_STATE - 257)) | (1L << (ESTIMATEONLY - 257)) | (1L << (EVENT - 257)) | (1L << (EVENT_RETENTION_MODE - 257)) | (1L << (EVENTDATA - 257)) | (1L << (EXCLUSIVE - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (EXECUTABLE - 321)) | (1L << (EXECUTABLE_FILE - 321)) | (1L << (EXIST - 321)) | (1L << (EXIST_SQUARE_BRACKET - 321)) | (1L << (EXPAND - 321)) | (1L << (EXPIREDATE - 321)) | (1L << (EXPIRY_DATE - 321)) | (1L << (EXPLICIT - 321)) | (1L << (EXTENDED_LOGICAL_CHECKS - 321)) | (1L << (EXTENSION - 321)) | (1L << (EXTERNAL_ACCESS - 321)) | (1L << (FAILOVER - 321)) | (1L << (FAILOVER_MODE - 321)) | (1L << (FAILURE - 321)) | (1L << (FAILURECONDITIONLEVEL - 321)) | (1L << (FAILURE_CONDITION_LEVEL - 321)) | (1L << (FAIL_OPERATION - 321)) | (1L << (FAN_IN - 321)) | (1L << (FAST - 321)) | (1L << (FAST_FORWARD - 321)) | (1L << (FILEGROUP - 321)) | (1L << (FILEGROUPPROPERTY - 321)) | (1L << (FILEGROUP_ID - 321)) | (1L << (FILEGROUP_NAME - 321)) | (1L << (FILEGROWTH - 321)) | (1L << (FILENAME - 321)) | (1L << (FILEPATH - 321)) | (1L << (FILEPROPERTY - 321)) | (1L << (FILEPROPERTYEX - 321)) | (1L << (FILESTREAM - 321)) | (1L << (FILESTREAM_ON - 321)) | (1L << (FILE_ID - 321)) | (1L << (FILE_IDEX - 321)) | (1L << (FILE_NAME - 321)) | (1L << (FILE_SNAPSHOT - 321)) | (1L << (FILLFACTOR - 321)) | (1L << (FILTER - 321)) | (1L << (FIRST - 321)) | (1L << (FIRST_VALUE - 321)) | (1L << (FMTONLY - 321)) | (1L << (FOLLOWING - 321)) | (1L << (FORCE - 321)) | (1L << (FORCED - 321)) | (1L << (FORCEPLAN - 321)) | (1L << (FORCESCAN - 321)) | (1L << (FORCESEEK - 321)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 321)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 321)) | (1L << (FORMAT - 321)) | (1L << (FORMATMESSAGE - 321)) | (1L << (FORWARD_ONLY - 321)) | (1L << (FREE - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (FULLSCAN - 385)) | (1L << (FULLTEXT - 385)) | (1L << (FULLTEXTCATALOGPROPERTY - 385)) | (1L << (FULLTEXTSERVICEPROPERTY - 385)) | (1L << (GB - 385)) | (1L << (GENERATED - 385)) | (1L << (GET - 385)) | (1L << (GETANCESTOR - 385)) | (1L << (GETANSINULL - 385)) | (1L << (GETDATE - 385)) | (1L << (GETDESCENDANT - 385)) | (1L << (GETLEVEL - 385)) | (1L << (GETREPARENTEDVALUE - 385)) | (1L << (GETROOT - 385)) | (1L << (GETUTCDATE - 385)) | (1L << (GET_FILESTREAM_TRANSACTION_CONTEXT - 385)) | (1L << (GLOBAL - 385)) | (1L << (GO - 385)) | (1L << (GOVERNOR - 385)) | (1L << (GREATEST - 385)) | (1L << (GROUPING - 385)) | (1L << (GROUPING_ID - 385)) | (1L << (GROUP_MAX_REQUESTS - 385)) | (1L << (HADR - 385)) | (1L << (HASH - 385)) | (1L << (HASHED - 385)) | (1L << (HAS_DBACCESS - 385)) | (1L << (HAS_PERMS_BY_NAME - 385)) | (1L << (HEALTHCHECKTIMEOUT - 385)) | (1L << (HEALTH_CHECK_TIMEOUT - 385)) | (1L << (HEAP - 385)) | (1L << (HIDDEN_KEYWORD - 385)) | (1L << (HIERARCHYID - 385)) | (1L << (HIGH - 385)) | (1L << (HONOR_BROKER_PRIORITY - 385)) | (1L << (HOST_ID - 385)) | (1L << (HOST_NAME - 385)) | (1L << (HOURS - 385)) | (1L << (IDENTITY_VALUE - 385)) | (1L << (IDENT_CURRENT - 385)) | (1L << (IDENT_INCR - 385)) | (1L << (IDENT_SEED - 385)) | (1L << (IGNORE_CONSTRAINTS - 385)) | (1L << (IGNORE_DUP_KEY - 385)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 385)) | (1L << (IGNORE_REPLICATED_TABLE_CACHE - 385)) | (1L << (IGNORE_TRIGGERS - 385)) | (1L << (IIF - 385)) | (1L << (IMMEDIATE - 385)) | (1L << (IMPERSONATE - 385)) | (1L << (IMPLICIT_TRANSACTIONS - 385)) | (1L << (IMPORTANCE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (INCLUDE - 449)) | (1L << (INCLUDE_NULL_VALUES - 449)) | (1L << (INCREMENT - 449)) | (1L << (INCREMENTAL - 449)) | (1L << (INDEXKEY_PROPERTY - 449)) | (1L << (INDEXPROPERTY - 449)) | (1L << (INDEX_COL - 449)) | (1L << (INFINITE - 449)) | (1L << (INIT - 449)) | (1L << (INITIATOR - 449)) | (1L << (INPUT - 449)) | (1L << (INSENSITIVE - 449)) | (1L << (INSERTED - 449)) | (1L << (INSTEAD - 449)) | (1L << (INT - 449)) | (1L << (IO - 449)) | (1L << (IP - 449)) | (1L << (ISDESCENDANTOF - 449)) | (1L << (ISJSON - 449)) | (1L << (ISNULL - 449)) | (1L << (ISNUMERIC - 449)) | (1L << (ISOLATION - 449)) | (1L << (IS_MEMBER - 449)) | (1L << (IS_ROLEMEMBER - 449)) | (1L << (IS_SRVROLEMEMBER - 449)) | (1L << (JOB - 449)) | (1L << (JSON - 449)) | (1L << (JSON_ARRAY - 449)) | (1L << (JSON_MODIFY - 449)) | (1L << (JSON_OBJECT - 449)) | (1L << (JSON_PATH_EXISTS - 449)) | (1L << (JSON_QUERY - 449)) | (1L << (JSON_VALUE - 449)) | (1L << (KB - 449)) | (1L << (KEEP - 449)) | (1L << (KEEPDEFAULTS - 449)) | (1L << (KEEPFIXED - 449)) | (1L << (KEEPIDENTITY - 449)) | (1L << (KERBEROS - 449)) | (1L << (KEYS - 449)) | (1L << (KEYSET - 449)) | (1L << (KEY_PATH - 449)) | (1L << (KEY_SOURCE - 449)) | (1L << (KEY_STORE_PROVIDER_NAME - 449)) | (1L << (LAG - 449)) | (1L << (LANGUAGE - 449)) | (1L << (LAST - 449)) | (1L << (LAST_VALUE - 449)) | (1L << (LEAD - 449)) | (1L << (LEAST - 449)) | (1L << (LEN - 449)) | (1L << (LEVEL - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LIBRARY - 513)) | (1L << (LIFETIME - 513)) | (1L << (LINKED - 513)) | (1L << (LINUX - 513)) | (1L << (LIST - 513)) | (1L << (LISTENER - 513)) | (1L << (LISTENER_IP - 513)) | (1L << (LISTENER_PORT - 513)) | (1L << (LISTENER_URL - 513)) | (1L << (LOB_COMPACTION - 513)) | (1L << (LOCAL - 513)) | (1L << (LOCAL_SERVICE_NAME - 513)) | (1L << (LOCATION - 513)) | (1L << (LOCK - 513)) | (1L << (LOCK_ESCALATION - 513)) | (1L << (LOG - 513)) | (1L << (LOGIN - 513)) | (1L << (LOGINPROPERTY - 513)) | (1L << (LOOP - 513)) | (1L << (LOW - 513)) | (1L << (LOWER - 513)) | (1L << (LTRIM - 513)) | (1L << (MANUAL - 513)) | (1L << (MARK - 513)) | (1L << (MASK - 513)) | (1L << (MASKED - 513)) | (1L << (MASTER - 513)) | (1L << (MATCHED - 513)) | (1L << (MATERIALIZED - 513)) | (1L << (MAX - 513)) | (1L << (MAXDOP - 513)) | (1L << (MAXRECURSION - 513)) | (1L << (MAXSIZE - 513)) | (1L << (MAXTRANSFER - 513)) | (1L << (MAXVALUE - 513)) | (1L << (MAX_CPU_PERCENT - 513)) | (1L << (MAX_DISPATCH_LATENCY - 513)) | (1L << (MAX_DOP - 513)) | (1L << (MAX_DURATION - 513)) | (1L << (MAX_EVENT_SIZE - 513)) | (1L << (MAX_FILES - 513)) | (1L << (MAX_IOPS_PER_VOLUME - 513)) | (1L << (MAX_MEMORY - 513)) | (1L << (MAX_MEMORY_PERCENT - 513)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 513)) | (1L << (MAX_PROCESSES - 513)) | (1L << (MAX_QUEUE_READERS - 513)) | (1L << (MAX_ROLLOVER_FILES - 513)) | (1L << (MAX_SIZE - 513)) | (1L << (MB - 513)) | (1L << (MEDIADESCRIPTION - 513)) | (1L << (MEDIANAME - 513)) | (1L << (MEDIUM - 513)) | (1L << (MEMBER - 513)) | (1L << (MEMORY_OPTIMIZED_DATA - 513)) | (1L << (MEMORY_PARTITION_MODE - 513)) | (1L << (MESSAGE - 513)) | (1L << (MESSAGE_FORWARDING - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (MESSAGE_FORWARD_SIZE - 577)) | (1L << (MIN - 577)) | (1L << (MINUTES - 577)) | (1L << (MINVALUE - 577)) | (1L << (MIN_ACTIVE_ROWVERSION - 577)) | (1L << (MIN_CPU_PERCENT - 577)) | (1L << (MIN_IOPS_PER_VOLUME - 577)) | (1L << (MIN_MEMORY_PERCENT - 577)) | (1L << (MIRROR - 577)) | (1L << (MIRROR_ADDRESS - 577)) | (1L << (MIXED_PAGE_ALLOCATION - 577)) | (1L << (MODE - 577)) | (1L << (MODIFY - 577)) | (1L << (MODIFY_SQUARE_BRACKET - 577)) | (1L << (MOVE - 577)) | (1L << (MULTI_USER - 577)) | (1L << (MUST_CHANGE - 577)) | (1L << (NAME - 577)) | (1L << (NCHAR - 577)) | (1L << (NESTED_TRIGGERS - 577)) | (1L << (NEWID - 577)) | (1L << (NEWNAME - 577)) | (1L << (NEWSEQUENTIALID - 577)) | (1L << (NEW_ACCOUNT - 577)) | (1L << (NEW_BROKER - 577)) | (1L << (NEW_PASSWORD - 577)) | (1L << (NEXT - 577)) | (1L << (NO - 577)) | (1L << (NOCOUNT - 577)) | (1L << (NODES - 577)) | (1L << (NOEXEC - 577)) | (1L << (NOEXPAND - 577)) | (1L << (NOFORMAT - 577)) | (1L << (NOINDEX - 577)) | (1L << (NOINIT - 577)) | (1L << (NONE - 577)) | (1L << (NON_TRANSACTED_ACCESS - 577)) | (1L << (NORECOMPUTE - 577)) | (1L << (NORECOVERY - 577)) | (1L << (NOREWIND - 577)) | (1L << (NOSKIP - 577)) | (1L << (NOTIFICATION - 577)) | (1L << (NOTIFICATIONS - 577)) | (1L << (NOUNLOAD - 577)) | (1L << (NOWAIT - 577)) | (1L << (NO_CHECKSUM - 577)) | (1L << (NO_COMPRESSION - 577)) | (1L << (NO_EVENT_LOSS - 577)) | (1L << (NO_INFOMSGS - 577)) | (1L << (NO_QUERYSTORE - 577)) | (1L << (NO_STATISTICS - 577)) | (1L << (NO_TRUNCATE - 577)) | (1L << (NO_WAIT - 577)) | (1L << (NTILE - 577)) | (1L << (NTLM - 577)) | (1L << (NULL_DOUBLE_QUOTE - 577)))) != 0) || ((((_la - 641)) & ~0x3f) == 0 && ((1L << (_la - 641)) & ((1L << (NUMANODE - 641)) | (1L << (NUMBER - 641)) | (1L << (NUMERIC_ROUNDABORT - 641)) | (1L << (OBJECT - 641)) | (1L << (OBJECTPROPERTY - 641)) | (1L << (OBJECTPROPERTYEX - 641)) | (1L << (OBJECT_DEFINITION - 641)) | (1L << (OBJECT_ID - 641)) | (1L << (OBJECT_NAME - 641)) | (1L << (OBJECT_SCHEMA_NAME - 641)) | (1L << (OFFLINE - 641)) | (1L << (OFFSET - 641)) | (1L << (OLD_ACCOUNT - 641)) | (1L << (OLD_PASSWORD - 641)) | (1L << (ONLINE - 641)) | (1L << (ONLY - 641)) | (1L << (ON_FAILURE - 641)) | (1L << (OPENJSON - 641)) | (1L << (OPEN_EXISTING - 641)) | (1L << (OPERATIONS - 641)) | (1L << (OPTIMISTIC - 641)) | (1L << (OPTIMIZE - 641)) | (1L << (OPTIMIZE_FOR_SEQUENTIAL_KEY - 641)) | (1L << (ORIGINAL_DB_NAME - 641)) | (1L << (ORIGINAL_LOGIN - 641)) | (1L << (OUT - 641)) | (1L << (OUTPUT - 641)) | (1L << (OVERRIDE - 641)) | (1L << (OWNER - 641)) | (1L << (OWNERSHIP - 641)) | (1L << (PAD_INDEX - 641)) | (1L << (PAGE - 641)) | (1L << (PAGECOUNT - 641)) | (1L << (PAGE_VERIFY - 641)) | (1L << (PAGLOCK - 641)) | (1L << (PARAMETERIZATION - 641)) | (1L << (PARAM_NODE - 641)) | (1L << (PARSENAME - 641)) | (1L << (PARSEONLY - 641)) | (1L << (PARTIAL - 641)) | (1L << (PARTITION - 641)) | (1L << (PARTITIONS - 641)) | (1L << (PARTNER - 641)) | (1L << (PASSWORD - 641)) | (1L << (PATH - 641)) | (1L << (PATINDEX - 641)) | (1L << (PAUSE - 641)) | (1L << (PDW_SHOWSPACEUSED - 641)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (PERCENTILE_CONT - 706)) | (1L << (PERCENTILE_DISC - 706)) | (1L << (PERCENT_RANK - 706)) | (1L << (PERMISSIONS - 706)) | (1L << (PERMISSION_SET - 706)) | (1L << (PERSISTED - 706)) | (1L << (PERSIST_SAMPLE_PERCENT - 706)) | (1L << (PER_CPU - 706)) | (1L << (PER_DB - 706)) | (1L << (PER_NODE - 706)) | (1L << (PHYSICAL_ONLY - 706)) | (1L << (PLATFORM - 706)) | (1L << (POISON_MESSAGE_HANDLING - 706)) | (1L << (POLICY - 706)) | (1L << (POOL - 706)) | (1L << (PORT - 706)) | (1L << (PRECEDING - 706)) | (1L << (PRECISION - 706)) | (1L << (PREDICATE - 706)) | (1L << (PRIMARY_ROLE - 706)) | (1L << (PRIOR - 706)) | (1L << (PRIORITY - 706)) | (1L << (PRIORITY_LEVEL - 706)) | (1L << (PRIVATE - 706)) | (1L << (PRIVATE_KEY - 706)) | (1L << (PRIVILEGES - 706)) | (1L << (PROCCACHE - 706)) | (1L << (PROCEDURE_NAME - 706)) | (1L << (PROCESS - 706)) | (1L << (PROFILE - 706)) | (1L << (PROPERTY - 706)) | (1L << (PROVIDER - 706)) | (1L << (PROVIDER_KEY_NAME - 706)) | (1L << (PWDCOMPARE - 706)) | (1L << (PWDENCRYPT - 706)) | (1L << (PYTHON - 706)) | (1L << (QUERY - 706)) | (1L << (QUERY_SQUARE_BRACKET - 706)) | (1L << (QUEUE - 706)) | (1L << (QUEUE_DELAY - 706)) | (1L << (QUOTED_IDENTIFIER - 706)) | (1L << (QUOTENAME - 706)) | (1L << (R - 706)) | (1L << (RANDOMIZED - 706)) | (1L << (RANGE - 706)) | (1L << (RANK - 706)) | (1L << (RC2 - 706)) | (1L << (RC4 - 706)) | (1L << (RC4_128 - 706)) | (1L << (READCOMMITTED - 706)) | (1L << (READCOMMITTEDLOCK - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (READONLY - 770)) | (1L << (READPAST - 770)) | (1L << (READUNCOMMITTED - 770)) | (1L << (READWRITE - 770)) | (1L << (READ_COMMITTED_SNAPSHOT - 770)) | (1L << (READ_ONLY - 770)) | (1L << (READ_ONLY_ROUTING_LIST - 770)) | (1L << (READ_WRITE - 770)) | (1L << (READ_WRITE_FILEGROUPS - 770)) | (1L << (REBUILD - 770)) | (1L << (RECEIVE - 770)) | (1L << (RECOMPILE - 770)) | (1L << (RECOVERY - 770)) | (1L << (RECURSIVE_TRIGGERS - 770)) | (1L << (REGENERATE - 770)) | (1L << (RELATED_CONVERSATION - 770)) | (1L << (RELATED_CONVERSATION_GROUP - 770)) | (1L << (RELATIVE - 770)) | (1L << (REMOTE - 770)) | (1L << (REMOTE_PROC_TRANSACTIONS - 770)) | (1L << (REMOTE_SERVICE_NAME - 770)) | (1L << (REMOVE - 770)) | (1L << (REORGANIZE - 770)) | (1L << (REPAIR_ALLOW_DATA_LOSS - 770)) | (1L << (REPAIR_FAST - 770)) | (1L << (REPAIR_REBUILD - 770)) | (1L << (REPEATABLE - 770)) | (1L << (REPEATABLEREAD - 770)) | (1L << (REPLACE - 770)) | (1L << (REPLICA - 770)) | (1L << (REPLICATE - 770)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 770)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 770)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 770)) | (1L << (REQUIRED - 770)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 770)) | (1L << (RESAMPLE - 770)) | (1L << (RESERVE_DISK_SPACE - 770)) | (1L << (RESET - 770)) | (1L << (RESOURCE - 770)) | (1L << (RESOURCES - 770)) | (1L << (RESOURCE_MANAGER_LOCATION - 770)) | (1L << (RESTART - 770)) | (1L << (RESTRICTED_USER - 770)) | (1L << (RESUMABLE - 770)) | (1L << (RESUME - 770)) | (1L << (RETAINDAYS - 770)) | (1L << (RETENTION - 770)) | (1L << (RETURNS - 770)) | (1L << (REVERSE - 770)) | (1L << (REWIND - 770)) | (1L << (ROBUST - 770)) | (1L << (ROLE - 770)))) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (ROOT - 834)) | (1L << (ROUND_ROBIN - 834)) | (1L << (ROUTE - 834)) | (1L << (ROW - 834)) | (1L << (ROWCOUNT_BIG - 834)) | (1L << (ROWGUID - 834)) | (1L << (ROWS - 834)) | (1L << (ROW_NUMBER - 834)) | (1L << (RSA_1024 - 834)) | (1L << (RSA_2048 - 834)) | (1L << (RSA_3072 - 834)) | (1L << (RSA_4096 - 834)) | (1L << (RSA_512 - 834)) | (1L << (RTRIM - 834)) | (1L << (SAFE - 834)) | (1L << (SAFETY - 834)) | (1L << (SAMPLE - 834)) | (1L << (SCHEDULER - 834)) | (1L << (SCHEMABINDING - 834)) | (1L << (SCHEMA_ID - 834)) | (1L << (SCHEMA_NAME - 834)) | (1L << (SCHEME - 834)) | (1L << (SCOPED - 834)) | (1L << (SCOPE_IDENTITY - 834)) | (1L << (SCRIPT - 834)) | (1L << (SCROLL - 834)) | (1L << (SCROLL_LOCKS - 834)) | (1L << (SEARCH - 834)) | (1L << (SECONDARY - 834)) | (1L << (SECONDARY_ONLY - 834)) | (1L << (SECONDARY_ROLE - 834)) | (1L << (SECONDS - 834)) | (1L << (SECRET - 834)) | (1L << (SECURABLES - 834)) | (1L << (SECURITY - 834)) | (1L << (SECURITY_LOG - 834)) | (1L << (SEEDING_MODE - 834)) | (1L << (SELF - 834)) | (1L << (SEMI_SENSITIVE - 834)) | (1L << (SEND - 834)) | (1L << (SENT - 834)) | (1L << (SEQUENCE - 834)) | (1L << (SEQUENCE_NUMBER - 834)) | (1L << (SERIALIZABLE - 834)) | (1L << (SERVER - 834)) | (1L << (SERVERPROPERTY - 834)) | (1L << (SERVICE - 834)) | (1L << (SERVICEBROKER - 834)) | (1L << (SERVICE_BROKER - 834)) | (1L << (SERVICE_NAME - 834)) | (1L << (SESSION - 834)) | (1L << (SESSIONPROPERTY - 834)) | (1L << (SESSION_CONTEXT - 834)))) != 0) || ((((_la - 898)) & ~0x3f) == 0 && ((1L << (_la - 898)) & ((1L << (SESSION_TIMEOUT - 898)) | (1L << (SETERROR - 898)) | (1L << (SETTINGS - 898)) | (1L << (SHARE - 898)) | (1L << (SHARED - 898)) | (1L << (SHOWCONTIG - 898)) | (1L << (SHOWPLAN - 898)) | (1L << (SHOWPLAN_ALL - 898)) | (1L << (SHOWPLAN_TEXT - 898)) | (1L << (SHOWPLAN_XML - 898)) | (1L << (SHRINKLOG - 898)) | (1L << (SID - 898)) | (1L << (SIGNATURE - 898)) | (1L << (SIMPLE - 898)) | (1L << (SINGLE_USER - 898)) | (1L << (SIZE - 898)) | (1L << (SKIP_KEYWORD - 898)) | (1L << (SMALLINT - 898)) | (1L << (SNAPSHOT - 898)) | (1L << (SOFTNUMA - 898)) | (1L << (SORT_IN_TEMPDB - 898)) | (1L << (SOUNDEX - 898)) | (1L << (SOURCE - 898)) | (1L << (SPACE_KEYWORD - 898)) | (1L << (SPARSE - 898)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 898)) | (1L << (SPECIFICATION - 898)) | (1L << (SPLIT - 898)) | (1L << (SQL - 898)) | (1L << (SQLDUMPERFLAGS - 898)) | (1L << (SQLDUMPERPATH - 898)) | (1L << (SQLDUMPERTIMEOUT - 898)) | (1L << (SQL_VARIANT_PROPERTY - 898)) | (1L << (STANDBY - 898)) | (1L << (START - 898)) | (1L << (STARTED - 898)) | (1L << (STARTUP_STATE - 898)) | (1L << (START_DATE - 898)) | (1L << (STATE - 898)) | (1L << (STATIC - 898)) | (1L << (STATISTICS_INCREMENTAL - 898)) | (1L << (STATISTICS_NORECOMPUTE - 898)) | (1L << (STATS - 898)) | (1L << (STATS_DATE - 898)) | (1L << (STATS_STREAM - 898)) | (1L << (STATUS - 898)) | (1L << (STATUSONLY - 898)) | (1L << (STDEV - 898)) | (1L << (STDEVP - 898)) | (1L << (STOP - 898)) | (1L << (STOPLIST - 898)) | (1L << (STOPPED - 898)) | (1L << (STOP_ON_ERROR - 898)) | (1L << (STR - 898)) | (1L << (STRING_AGG - 898)))) != 0) || ((((_la - 962)) & ~0x3f) == 0 && ((1L << (_la - 962)) & ((1L << (STRING_ESCAPE - 962)) | (1L << (STUFF - 962)) | (1L << (SUBJECT - 962)) | (1L << (SUBSCRIBE - 962)) | (1L << (SUBSCRIPTION - 962)) | (1L << (SUBSTRING - 962)) | (1L << (SUM - 962)) | (1L << (SUPPORTED - 962)) | (1L << (SUSER_ID - 962)) | (1L << (SUSER_NAME - 962)) | (1L << (SUSER_SID - 962)) | (1L << (SUSER_SNAME - 962)) | (1L << (SUSPEND - 962)) | (1L << (SWITCH - 962)) | (1L << (SYMMETRIC - 962)) | (1L << (SYNCHRONOUS_COMMIT - 962)) | (1L << (SYNONYM - 962)) | (1L << (SYSTEM - 962)) | (1L << (TABLERESULTS - 962)) | (1L << (TABLOCK - 962)) | (1L << (TABLOCKX - 962)) | (1L << (TAKE - 962)) | (1L << (TAPE - 962)) | (1L << (TARGET - 962)) | (1L << (TARGET_RECOVERY_TIME - 962)) | (1L << (TB - 962)) | (1L << (TCP - 962)) | (1L << (TEXTIMAGE_ON - 962)) | (1L << (THROW - 962)) | (1L << (TIES - 962)) | (1L << (TIME - 962)) | (1L << (TIMEOUT - 962)) | (1L << (TIMER - 962)) | (1L << (TINYINT - 962)) | (1L << (TORN_PAGE_DETECTION - 962)) | (1L << (TOSTRING - 962)) | (1L << (TRACE - 962)) | (1L << (TRACKING - 962)) | (1L << (TRACK_CAUSALITY - 962)) | (1L << (TRANSACTION_ID - 962)) | (1L << (TRANSFER - 962)) | (1L << (TRANSFORM_NOISE_WORDS - 962)) | (1L << (TRANSLATE - 962)) | (1L << (TRIM - 962)) | (1L << (TRIPLE_DES - 962)) | (1L << (TRIPLE_DES_3KEY - 962)) | (1L << (TRUSTWORTHY - 962)) | (1L << (TRY - 962)) | (1L << (TRY_CAST - 962)) | (1L << (TSQL - 962)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 962)) | (1L << (TYPE - 962)))) != 0) || ((((_la - 1026)) & ~0x3f) == 0 && ((1L << (_la - 1026)) & ((1L << (TYPEPROPERTY - 1026)) | (1L << (TYPE_ID - 1026)) | (1L << (TYPE_NAME - 1026)) | (1L << (TYPE_WARNING - 1026)) | (1L << (UNBOUNDED - 1026)) | (1L << (UNCHECKED - 1026)) | (1L << (UNCOMMITTED - 1026)) | (1L << (UNICODE - 1026)) | (1L << (UNKNOWN - 1026)) | (1L << (UNLIMITED - 1026)) | (1L << (UNLOCK - 1026)) | (1L << (UNMASK - 1026)) | (1L << (UNSAFE - 1026)) | (1L << (UOW - 1026)) | (1L << (UPPER - 1026)) | (1L << (URL - 1026)) | (1L << (USED - 1026)) | (1L << (USER_ID - 1026)) | (1L << (USER_NAME - 1026)) | (1L << (USING - 1026)) | (1L << (VALIDATION - 1026)) | (1L << (VALID_XML - 1026)) | (1L << (VALUE - 1026)) | (1L << (VALUE_SQUARE_BRACKET - 1026)) | (1L << (VAR - 1026)) | (1L << (VARBINARY_KEYWORD - 1026)) | (1L << (VARP - 1026)) | (1L << (VERBOSELOGGING - 1026)) | (1L << (VERIFY_CLONEDB - 1026)) | (1L << (VERSION - 1026)) | (1L << (VIEWS - 1026)) | (1L << (VIEW_METADATA - 1026)) | (1L << (VISIBILITY - 1026)) | (1L << (WAIT - 1026)) | (1L << (WAIT_AT_LOW_PRIORITY - 1026)) | (1L << (WELL_FORMED_XML - 1026)) | (1L << (WINDOWS - 1026)) | (1L << (WITHOUT - 1026)) | (1L << (WITHOUT_ARRAY_WRAPPER - 1026)) | (1L << (WITNESS - 1026)) | (1L << (WORK - 1026)) | (1L << (WORKLOAD - 1026)) | (1L << (XLOCK - 1026)) | (1L << (XML - 1026)))) != 0) || ((((_la - 1090)) & ~0x3f) == 0 && ((1L << (_la - 1090)) & ((1L << (XMLDATA - 1090)) | (1L << (XMLNAMESPACES - 1090)) | (1L << (XMLSCHEMA - 1090)) | (1L << (XML_COMPRESSION - 1090)) | (1L << (XSINIL - 1090)) | (1L << (ZONE - 1090)) | (1L << (VARCHAR - 1090)) | (1L << (NVARCHAR - 1090)))) != 0) || ((((_la - 1168)) & ~0x3f) == 0 && ((1L << (_la - 1168)) & ((1L << (DISK_DRIVE - 1168)) | (1L << (DATABASEPROPERTYEX - 1168)) | (1L << (NOLOCK - 1168)) | (1L << (ROWLOCK - 1168)) | (1L << (UPDLOCK - 1168)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_Context : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ITerminalNode DOUBLE_QUOTE_ID() { return GetToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public ITerminalNode SQUARE_BRACKET_ID() { return GetToken(TSqlParser.SQUARE_BRACKET_ID, 0); }
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public Id_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterId_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitId_(this);
		}
	}

	[RuleVersion(0)]
	public Id_Context id_() {
		Id_Context _localctx = new Id_Context(_ctx, State);
		EnterRule(_localctx, 1232, RULE_id_);
		try {
			State = 13704;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1860,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13700; Match(ID);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13701; Match(DOUBLE_QUOTE_ID);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 13702; Match(SQUARE_BRACKET_ID);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 13703; keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_idContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public Simple_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSimple_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSimple_id(this);
		}
	}

	[RuleVersion(0)]
	public Simple_idContext simple_id() {
		Simple_idContext _localctx = new Simple_idContext(_ctx, State);
		EnterRule(_localctx, 1234, RULE_simple_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13706; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_or_stringContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Id_or_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_or_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterId_or_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitId_or_string(this);
		}
	}

	[RuleVersion(0)]
	public Id_or_stringContext id_or_string() {
		Id_or_stringContext _localctx = new Id_or_stringContext(_ctx, State);
		EnterRule(_localctx, 1236, RULE_id_or_string);
		try {
			State = 13710;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1861,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13708; id_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13709; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_operatorContext : ParserRuleContext {
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterComparison_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitComparison_operator(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_operatorContext comparison_operator() {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(_ctx, State);
		EnterRule(_localctx, 1238, RULE_comparison_operator);
		try {
			State = 13727;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1862,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13712; Match(EQUAL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 13713; Match(GREATER);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 13714; Match(LESS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 13715; Match(LESS);
				State = 13716; Match(EQUAL);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 13717; Match(GREATER);
				State = 13718; Match(EQUAL);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 13719; Match(LESS);
				State = 13720; Match(GREATER);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 13721; Match(EXCLAMATION);
				State = 13722; Match(EQUAL);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 13723; Match(EXCLAMATION);
				State = 13724; Match(GREATER);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 13725; Match(EXCLAMATION);
				State = 13726; Match(LESS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(_ctx, State);
		EnterRule(_localctx, 1240, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13729;
			_la = _input.La(1);
			if ( !(((((_la - 1137)) & ~0x3f) == 0 && ((1L << (_la - 1137)) & ((1L << (PLUS_ASSIGN - 1137)) | (1L << (MINUS_ASSIGN - 1137)) | (1L << (MULT_ASSIGN - 1137)) | (1L << (DIV_ASSIGN - 1137)) | (1L << (MOD_ASSIGN - 1137)) | (1L << (AND_ASSIGN - 1137)) | (1L << (XOR_ASSIGN - 1137)) | (1L << (OR_ASSIGN - 1137)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_sizeContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode KB() { return GetToken(TSqlParser.KB, 0); }
		public ITerminalNode MB() { return GetToken(TSqlParser.MB, 0); }
		public ITerminalNode GB() { return GetToken(TSqlParser.GB, 0); }
		public ITerminalNode TB() { return GetToken(TSqlParser.TB, 0); }
		public File_sizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_size; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_size(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_size(this);
		}
	}

	[RuleVersion(0)]
	public File_sizeContext file_size() {
		File_sizeContext _localctx = new File_sizeContext(_ctx, State);
		EnterRule(_localctx, 1242, RULE_file_size);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13731; Match(DECIMAL);
			State = 13733;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1863,_ctx) ) {
			case 1:
				{
				State = 13732;
				_la = _input.La(1);
				if ( !(_la==GB || _la==KB || _la==MB || _la==TB || _la==MODULE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 47: return assembly_option_sempred((Assembly_optionContext)_localctx, predIndex);

		case 466: return expression_sempred((ExpressionContext)_localctx, predIndex);

		case 479: return search_condition_sempred((Search_conditionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool assembly_option_sempred(Assembly_optionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(_ctx, 5);

		case 2: return Precpred(_ctx, 4);

		case 3: return Precpred(_ctx, 12);

		case 4: return Precpred(_ctx, 11);

		case 5: return Precpred(_ctx, 10);

		case 6: return Precpred(_ctx, 3);
		}
		return true;
	}
	private bool search_condition_sempred(Search_conditionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(_ctx, 2);

		case 8: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x4B9\x35AA\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9"+
		"\t\xB9\x4\xBA\t\xBA\x4\xBB\t\xBB\x4\xBC\t\xBC\x4\xBD\t\xBD\x4\xBE\t\xBE"+
		"\x4\xBF\t\xBF\x4\xC0\t\xC0\x4\xC1\t\xC1\x4\xC2\t\xC2\x4\xC3\t\xC3\x4\xC4"+
		"\t\xC4\x4\xC5\t\xC5\x4\xC6\t\xC6\x4\xC7\t\xC7\x4\xC8\t\xC8\x4\xC9\t\xC9"+
		"\x4\xCA\t\xCA\x4\xCB\t\xCB\x4\xCC\t\xCC\x4\xCD\t\xCD\x4\xCE\t\xCE\x4\xCF"+
		"\t\xCF\x4\xD0\t\xD0\x4\xD1\t\xD1\x4\xD2\t\xD2\x4\xD3\t\xD3\x4\xD4\t\xD4"+
		"\x4\xD5\t\xD5\x4\xD6\t\xD6\x4\xD7\t\xD7\x4\xD8\t\xD8\x4\xD9\t\xD9\x4\xDA"+
		"\t\xDA\x4\xDB\t\xDB\x4\xDC\t\xDC\x4\xDD\t\xDD\x4\xDE\t\xDE\x4\xDF\t\xDF"+
		"\x4\xE0\t\xE0\x4\xE1\t\xE1\x4\xE2\t\xE2\x4\xE3\t\xE3\x4\xE4\t\xE4\x4\xE5"+
		"\t\xE5\x4\xE6\t\xE6\x4\xE7\t\xE7\x4\xE8\t\xE8\x4\xE9\t\xE9\x4\xEA\t\xEA"+
		"\x4\xEB\t\xEB\x4\xEC\t\xEC\x4\xED\t\xED\x4\xEE\t\xEE\x4\xEF\t\xEF\x4\xF0"+
		"\t\xF0\x4\xF1\t\xF1\x4\xF2\t\xF2\x4\xF3\t\xF3\x4\xF4\t\xF4\x4\xF5\t\xF5"+
		"\x4\xF6\t\xF6\x4\xF7\t\xF7\x4\xF8\t\xF8\x4\xF9\t\xF9\x4\xFA\t\xFA\x4\xFB"+
		"\t\xFB\x4\xFC\t\xFC\x4\xFD\t\xFD\x4\xFE\t\xFE\x4\xFF\t\xFF\x4\x100\t\x100"+
		"\x4\x101\t\x101\x4\x102\t\x102\x4\x103\t\x103\x4\x104\t\x104\x4\x105\t"+
		"\x105\x4\x106\t\x106\x4\x107\t\x107\x4\x108\t\x108\x4\x109\t\x109\x4\x10A"+
		"\t\x10A\x4\x10B\t\x10B\x4\x10C\t\x10C\x4\x10D\t\x10D\x4\x10E\t\x10E\x4"+
		"\x10F\t\x10F\x4\x110\t\x110\x4\x111\t\x111\x4\x112\t\x112\x4\x113\t\x113"+
		"\x4\x114\t\x114\x4\x115\t\x115\x4\x116\t\x116\x4\x117\t\x117\x4\x118\t"+
		"\x118\x4\x119\t\x119\x4\x11A\t\x11A\x4\x11B\t\x11B\x4\x11C\t\x11C\x4\x11D"+
		"\t\x11D\x4\x11E\t\x11E\x4\x11F\t\x11F\x4\x120\t\x120\x4\x121\t\x121\x4"+
		"\x122\t\x122\x4\x123\t\x123\x4\x124\t\x124\x4\x125\t\x125\x4\x126\t\x126"+
		"\x4\x127\t\x127\x4\x128\t\x128\x4\x129\t\x129\x4\x12A\t\x12A\x4\x12B\t"+
		"\x12B\x4\x12C\t\x12C\x4\x12D\t\x12D\x4\x12E\t\x12E\x4\x12F\t\x12F\x4\x130"+
		"\t\x130\x4\x131\t\x131\x4\x132\t\x132\x4\x133\t\x133\x4\x134\t\x134\x4"+
		"\x135\t\x135\x4\x136\t\x136\x4\x137\t\x137\x4\x138\t\x138\x4\x139\t\x139"+
		"\x4\x13A\t\x13A\x4\x13B\t\x13B\x4\x13C\t\x13C\x4\x13D\t\x13D\x4\x13E\t"+
		"\x13E\x4\x13F\t\x13F\x4\x140\t\x140\x4\x141\t\x141\x4\x142\t\x142\x4\x143"+
		"\t\x143\x4\x144\t\x144\x4\x145\t\x145\x4\x146\t\x146\x4\x147\t\x147\x4"+
		"\x148\t\x148\x4\x149\t\x149\x4\x14A\t\x14A\x4\x14B\t\x14B\x4\x14C\t\x14C"+
		"\x4\x14D\t\x14D\x4\x14E\t\x14E\x4\x14F\t\x14F\x4\x150\t\x150\x4\x151\t"+
		"\x151\x4\x152\t\x152\x4\x153\t\x153\x4\x154\t\x154\x4\x155\t\x155\x4\x156"+
		"\t\x156\x4\x157\t\x157\x4\x158\t\x158\x4\x159\t\x159\x4\x15A\t\x15A\x4"+
		"\x15B\t\x15B\x4\x15C\t\x15C\x4\x15D\t\x15D\x4\x15E\t\x15E\x4\x15F\t\x15F"+
		"\x4\x160\t\x160\x4\x161\t\x161\x4\x162\t\x162\x4\x163\t\x163\x4\x164\t"+
		"\x164\x4\x165\t\x165\x4\x166\t\x166\x4\x167\t\x167\x4\x168\t\x168\x4\x169"+
		"\t\x169\x4\x16A\t\x16A\x4\x16B\t\x16B\x4\x16C\t\x16C\x4\x16D\t\x16D\x4"+
		"\x16E\t\x16E\x4\x16F\t\x16F\x4\x170\t\x170\x4\x171\t\x171\x4\x172\t\x172"+
		"\x4\x173\t\x173\x4\x174\t\x174\x4\x175\t\x175\x4\x176\t\x176\x4\x177\t"+
		"\x177\x4\x178\t\x178\x4\x179\t\x179\x4\x17A\t\x17A\x4\x17B\t\x17B\x4\x17C"+
		"\t\x17C\x4\x17D\t\x17D\x4\x17E\t\x17E\x4\x17F\t\x17F\x4\x180\t\x180\x4"+
		"\x181\t\x181\x4\x182\t\x182\x4\x183\t\x183\x4\x184\t\x184\x4\x185\t\x185"+
		"\x4\x186\t\x186\x4\x187\t\x187\x4\x188\t\x188\x4\x189\t\x189\x4\x18A\t"+
		"\x18A\x4\x18B\t\x18B\x4\x18C\t\x18C\x4\x18D\t\x18D\x4\x18E\t\x18E\x4\x18F"+
		"\t\x18F\x4\x190\t\x190\x4\x191\t\x191\x4\x192\t\x192\x4\x193\t\x193\x4"+
		"\x194\t\x194\x4\x195\t\x195\x4\x196\t\x196\x4\x197\t\x197\x4\x198\t\x198"+
		"\x4\x199\t\x199\x4\x19A\t\x19A\x4\x19B\t\x19B\x4\x19C\t\x19C\x4\x19D\t"+
		"\x19D\x4\x19E\t\x19E\x4\x19F\t\x19F\x4\x1A0\t\x1A0\x4\x1A1\t\x1A1\x4\x1A2"+
		"\t\x1A2\x4\x1A3\t\x1A3\x4\x1A4\t\x1A4\x4\x1A5\t\x1A5\x4\x1A6\t\x1A6\x4"+
		"\x1A7\t\x1A7\x4\x1A8\t\x1A8\x4\x1A9\t\x1A9\x4\x1AA\t\x1AA\x4\x1AB\t\x1AB"+
		"\x4\x1AC\t\x1AC\x4\x1AD\t\x1AD\x4\x1AE\t\x1AE\x4\x1AF\t\x1AF\x4\x1B0\t"+
		"\x1B0\x4\x1B1\t\x1B1\x4\x1B2\t\x1B2\x4\x1B3\t\x1B3\x4\x1B4\t\x1B4\x4\x1B5"+
		"\t\x1B5\x4\x1B6\t\x1B6\x4\x1B7\t\x1B7\x4\x1B8\t\x1B8\x4\x1B9\t\x1B9\x4"+
		"\x1BA\t\x1BA\x4\x1BB\t\x1BB\x4\x1BC\t\x1BC\x4\x1BD\t\x1BD\x4\x1BE\t\x1BE"+
		"\x4\x1BF\t\x1BF\x4\x1C0\t\x1C0\x4\x1C1\t\x1C1\x4\x1C2\t\x1C2\x4\x1C3\t"+
		"\x1C3\x4\x1C4\t\x1C4\x4\x1C5\t\x1C5\x4\x1C6\t\x1C6\x4\x1C7\t\x1C7\x4\x1C8"+
		"\t\x1C8\x4\x1C9\t\x1C9\x4\x1CA\t\x1CA\x4\x1CB\t\x1CB\x4\x1CC\t\x1CC\x4"+
		"\x1CD\t\x1CD\x4\x1CE\t\x1CE\x4\x1CF\t\x1CF\x4\x1D0\t\x1D0\x4\x1D1\t\x1D1"+
		"\x4\x1D2\t\x1D2\x4\x1D3\t\x1D3\x4\x1D4\t\x1D4\x4\x1D5\t\x1D5\x4\x1D6\t"+
		"\x1D6\x4\x1D7\t\x1D7\x4\x1D8\t\x1D8\x4\x1D9\t\x1D9\x4\x1DA\t\x1DA\x4\x1DB"+
		"\t\x1DB\x4\x1DC\t\x1DC\x4\x1DD\t\x1DD\x4\x1DE\t\x1DE\x4\x1DF\t\x1DF\x4"+
		"\x1E0\t\x1E0\x4\x1E1\t\x1E1\x4\x1E2\t\x1E2\x4\x1E3\t\x1E3\x4\x1E4\t\x1E4"+
		"\x4\x1E5\t\x1E5\x4\x1E6\t\x1E6\x4\x1E7\t\x1E7\x4\x1E8\t\x1E8\x4\x1E9\t"+
		"\x1E9\x4\x1EA\t\x1EA\x4\x1EB\t\x1EB\x4\x1EC\t\x1EC\x4\x1ED\t\x1ED\x4\x1EE"+
		"\t\x1EE\x4\x1EF\t\x1EF\x4\x1F0\t\x1F0\x4\x1F1\t\x1F1\x4\x1F2\t\x1F2\x4"+
		"\x1F3\t\x1F3\x4\x1F4\t\x1F4\x4\x1F5\t\x1F5\x4\x1F6\t\x1F6\x4\x1F7\t\x1F7"+
		"\x4\x1F8\t\x1F8\x4\x1F9\t\x1F9\x4\x1FA\t\x1FA\x4\x1FB\t\x1FB\x4\x1FC\t"+
		"\x1FC\x4\x1FD\t\x1FD\x4\x1FE\t\x1FE\x4\x1FF\t\x1FF\x4\x200\t\x200\x4\x201"+
		"\t\x201\x4\x202\t\x202\x4\x203\t\x203\x4\x204\t\x204\x4\x205\t\x205\x4"+
		"\x206\t\x206\x4\x207\t\x207\x4\x208\t\x208\x4\x209\t\x209\x4\x20A\t\x20A"+
		"\x4\x20B\t\x20B\x4\x20C\t\x20C\x4\x20D\t\x20D\x4\x20E\t\x20E\x4\x20F\t"+
		"\x20F\x4\x210\t\x210\x4\x211\t\x211\x4\x212\t\x212\x4\x213\t\x213\x4\x214"+
		"\t\x214\x4\x215\t\x215\x4\x216\t\x216\x4\x217\t\x217\x4\x218\t\x218\x4"+
		"\x219\t\x219\x4\x21A\t\x21A\x4\x21B\t\x21B\x4\x21C\t\x21C\x4\x21D\t\x21D"+
		"\x4\x21E\t\x21E\x4\x21F\t\x21F\x4\x220\t\x220\x4\x221\t\x221\x4\x222\t"+
		"\x222\x4\x223\t\x223\x4\x224\t\x224\x4\x225\t\x225\x4\x226\t\x226\x4\x227"+
		"\t\x227\x4\x228\t\x228\x4\x229\t\x229\x4\x22A\t\x22A\x4\x22B\t\x22B\x4"+
		"\x22C\t\x22C\x4\x22D\t\x22D\x4\x22E\t\x22E\x4\x22F\t\x22F\x4\x230\t\x230"+
		"\x4\x231\t\x231\x4\x232\t\x232\x4\x233\t\x233\x4\x234\t\x234\x4\x235\t"+
		"\x235\x4\x236\t\x236\x4\x237\t\x237\x4\x238\t\x238\x4\x239\t\x239\x4\x23A"+
		"\t\x23A\x4\x23B\t\x23B\x4\x23C\t\x23C\x4\x23D\t\x23D\x4\x23E\t\x23E\x4"+
		"\x23F\t\x23F\x4\x240\t\x240\x4\x241\t\x241\x4\x242\t\x242\x4\x243\t\x243"+
		"\x4\x244\t\x244\x4\x245\t\x245\x4\x246\t\x246\x4\x247\t\x247\x4\x248\t"+
		"\x248\x4\x249\t\x249\x4\x24A\t\x24A\x4\x24B\t\x24B\x4\x24C\t\x24C\x4\x24D"+
		"\t\x24D\x4\x24E\t\x24E\x4\x24F\t\x24F\x4\x250\t\x250\x4\x251\t\x251\x4"+
		"\x252\t\x252\x4\x253\t\x253\x4\x254\t\x254\x4\x255\t\x255\x4\x256\t\x256"+
		"\x4\x257\t\x257\x4\x258\t\x258\x4\x259\t\x259\x4\x25A\t\x25A\x4\x25B\t"+
		"\x25B\x4\x25C\t\x25C\x4\x25D\t\x25D\x4\x25E\t\x25E\x4\x25F\t\x25F\x4\x260"+
		"\t\x260\x4\x261\t\x261\x4\x262\t\x262\x4\x263\t\x263\x4\x264\t\x264\x4"+
		"\x265\t\x265\x4\x266\t\x266\x4\x267\t\x267\x4\x268\t\x268\x4\x269\t\x269"+
		"\x4\x26A\t\x26A\x4\x26B\t\x26B\x4\x26C\t\x26C\x4\x26D\t\x26D\x4\x26E\t"+
		"\x26E\x4\x26F\t\x26F\x3\x2\a\x2\x4E0\n\x2\f\x2\xE\x2\x4E3\v\x2\x3\x2\x3"+
		"\x2\x3\x2\a\x2\x4E8\n\x2\f\x2\xE\x2\x4EB\v\x2\x3\x2\x3\x2\x5\x2\x4EF\n"+
		"\x2\x3\x3\x3\x3\x5\x3\x4F3\n\x3\x3\x3\x3\x3\x6\x3\x4F7\n\x3\r\x3\xE\x3"+
		"\x4F8\x5\x3\x4FB\n\x3\x3\x3\a\x3\x4FE\n\x3\f\x3\xE\x3\x501\v\x3\x3\x3"+
		"\x3\x3\a\x3\x505\n\x3\f\x3\xE\x3\x508\v\x3\x3\x3\x5\x3\x50B\n\x3\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x5\x4\x511\n\x4\x3\x5\x3\x5\x5\x5\x515\n\x5\x3\x5\x3"+
		"\x5\x5\x5\x519\n\x5\x3\x5\x3\x5\x5\x5\x51D\n\x5\x3\x5\x3\x5\x5\x5\x521"+
		"\n\x5\x3\x5\x3\x5\x5\x5\x525\n\x5\x3\x5\x3\x5\x5\x5\x529\n\x5\x3\x5\x3"+
		"\x5\x5\x5\x52D\n\x5\x3\x5\x5\x5\x530\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x5\x6\x537\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x5\a\x5DF\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x5E6\n\b\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x5F4\n\t\x3\n"+
		"\x3\n\x5\n\x5F8\n\n\x3\n\a\n\x5FB\n\n\f\n\xE\n\x5FE\v\n\x3\n\x3\n\x5\n"+
		"\x602\n\n\x3\v\x3\v\x5\v\x606\n\v\x3\f\x3\f\x5\f\x60A\n\f\x3\r\x3\r\x3"+
		"\r\x5\r\x60F\n\r\x3\r\x3\r\x3\r\x5\r\x614\n\r\x5\r\x616\n\r\x3\xE\x3\xE"+
		"\x5\xE\x61A\n\xE\x3\xE\x5\xE\x61D\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5"+
		"\xF\x624\n\xF\x3\xF\x5\xF\x627\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x5\x10\x630\n\x10\x3\x10\x5\x10\x633\n\x10\x3\x11\x3\x11"+
		"\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x5\x14\x63E\n\x14\x3"+
		"\x14\x6\x14\x641\n\x14\r\x14\xE\x14\x642\x3\x14\x3\x14\x3\x14\x5\x14\x648"+
		"\n\x14\x3\x14\x3\x14\x3\x14\x5\x14\x64D\n\x14\x3\x14\a\x14\x650\n\x14"+
		"\f\x14\xE\x14\x653\v\x14\x3\x14\x3\x14\x3\x14\x5\x14\x658\n\x14\x3\x15"+
		"\x3\x15\x5\x15\x65C\n\x15\x3\x15\x5\x15\x65F\n\x15\x3\x15\x3\x15\x5\x15"+
		"\x663\n\x15\x3\x15\x5\x15\x666\n\x15\x3\x15\x5\x15\x669\n\x15\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x5\x16\x670\n\x16\x3\x16\x3\x16\x5\x16\x674"+
		"\n\x16\x5\x16\x676\n\x16\x3\x17\x3\x17\x3\x17\x5\x17\x67B\n\x17\x3\x17"+
		"\x3\x17\a\x17\x67F\n\x17\f\x17\xE\x17\x682\v\x17\x3\x17\x5\x17\x685\n"+
		"\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\a"+
		"\x18\x690\n\x18\f\x18\xE\x18\x693\v\x18\x3\x18\x3\x18\x3\x18\x5\x18\x698"+
		"\n\x18\x3\x18\x5\x18\x69B\n\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\a\x18"+
		"\x6A2\n\x18\f\x18\xE\x18\x6A5\v\x18\x5\x18\x6A7\n\x18\x3\x19\x3\x19\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x6BC\n\x1A\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x6C4\n\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x5\x1B\x6C9\n\x1B\x3\x1B\x5\x1B\x6CC\n\x1B\x3\x1B\x3\x1B\x3\x1B\x5"+
		"\x1B\x6D1\n\x1B\x3\x1B\x5\x1B\x6D4\n\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x6D9"+
		"\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x6E2\n"+
		"\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x5\x1D\x6EE\n\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x6F3\n\x1D\x3\x1D\x5"+
		"\x1D\x6F6\n\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x6FB\n\x1D\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x5\x1E\x701\n\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x706\n\x1E\x3"+
		"\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3 \x3!\x3"+
		"!\x3!\x3\"\x5\"\x717\n\"\x3\"\x5\"\x71A\n\"\x3\"\x5\"\x71D\n\"\x3\"\x5"+
		"\"\x720\n\"\x3#\x3#\x3#\x5#\x725\n#\x3$\x3$\x3%\x3%\x3%\x3&\x3&\x5&\x72E"+
		"\n&\x3\'\x3\'\x3(\x3(\x3(\x3)\x3)\x3)\x3)\x3*\x3*\x3*\x3*\x5*\x73D\n*"+
		"\x3+\x3+\x3,\x3,\x3,\x3-\x3-\x3.\x3.\x3.\x3/\x3/\x3\x30\x3\x30\x3\x30"+
		"\x5\x30\x74E\n\x30\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3"+
		"\x31\x3\x31\x5\x31\x759\n\x31\x3\x31\x3\x31\a\x31\x75D\n\x31\f\x31\xE"+
		"\x31\x760\v\x31\x3\x32\x3\x32\x3\x32\x3\x32\x3\x33\x3\x33\x3\x34\x3\x34"+
		"\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x76E\n\x35\x3\x36\x3\x36\x3\x37\x3"+
		"\x37\x3\x37\x3\x38\x3\x38\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x5"+
		"\x39\x77D\n\x39\x3:\x3:\x3;\x3;\x3;\x3;\x3;\x5;\x786\n;\x3;\x3;\x5;\x78A"+
		"\n;\x3;\x6;\x78D\n;\r;\xE;\x78E\x3;\x3;\x3;\x3;\x5;\x795\n;\x3<\x3<\x3"+
		"<\x3<\x5<\x79B\n<\x3<\x5<\x79E\n<\x3<\x6<\x7A1\n<\r<\xE<\x7A2\x3<\x3<"+
		"\x3<\x5<\x7A8\n<\x3=\x3=\x3=\x3=\x3=\x3=\x5=\x7B0\n=\x3>\x3>\x3>\x3>\x3"+
		"?\x3?\x3?\x3?\x5?\x7BA\n?\x3?\x3?\x3@\x3@\x3@\x3@\x3@\x3\x41\x3\x41\x3"+
		"\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x7CD\n\x41"+
		"\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x7D5\n\x42\x3\x42\x3"+
		"\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5"+
		"\x42\x7E2\n\x42\x5\x42\x7E4\n\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3"+
		"\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x7F0\n\x42\x5\x42\x7F2\n\x42\x3"+
		"\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x7F9\n\x42\x3\x43\x3\x43\x3\x43"+
		"\x3\x43\x3\x43\x3\x43\x3\x43\x5\x43\x802\n\x43\x3\x44\x3\x44\x3\x44\x3"+
		"\x44\x5\x44\x808\n\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x45\x3\x45\x3\x45"+
		"\x5\x45\x811\n\x45\x3\x46\x3\x46\x3G\x3G\x3H\x3H\x3H\x3H\x3I\x3I\x3I\x3"+
		"I\x5I\x81F\nI\x3I\x3I\x3I\x3I\x3J\x3J\x3J\x3J\x5J\x829\nJ\x3J\x3J\x3J"+
		"\x3J\x3K\x3K\x3K\x3K\x5K\x833\nK\x3K\x3K\x3K\x3K\x3L\x3L\x3L\x3L\x3L\x3"+
		"L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L"+
		"\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x5L\x85B\nL\x3M\x3M\x3M\x3"+
		"M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M"+
		"\x5M\x872\nM\x3N\x3N\x3O\x3O\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3"+
		"P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P"+
		"\x3P\x3P\x5P\x896\nP\x5P\x898\nP\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3"+
		"P\x3P\x3P\x3P\x3P\x3P\x3P\x5P\x8AA\nP\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P"+
		"\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x5P\x8C2\nP\x3"+
		"P\x5P\x8C5\nP\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x5P\x8D3"+
		"\nP\x3Q\x3Q\x3Q\x3Q\x3Q\x3R\x3R\x3R\x3S\x3S\x3S\x3S\x3S\x3T\x3T\x3T\x3"+
		"T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x5T\x8F3\nT\x3T"+
		"\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x5T\x905"+
		"\nT\x3T\x5T\x908\nT\x3T\x3T\x3T\x5T\x90D\nT\x3T\x5T\x910\nT\x3T\x3T\x3"+
		"T\x5T\x915\nT\x3T\x5T\x918\nT\x3T\x3T\x3T\x5T\x91D\nT\x3T\x5T\x920\nT"+
		"\x3T\x3T\x3T\x5T\x925\nT\x3T\x5T\x928\nT\x3T\x3T\x3T\x3T\x3T\x3T\x5T\x930"+
		"\nT\x3T\x5T\x933\nT\x3T\x3T\x3T\x3T\x3T\x3T\x5T\x93B\nT\x3T\x3T\x3T\x3"+
		"T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x5T\x948\nT\x3T\x3T\x3T\x3T\x3T\x3T\x3T"+
		"\x3T\x3T\x5T\x953\nT\x3T\aT\x956\nT\fT\xET\x959\vT\x3T\x5T\x95C\nT\x3"+
		"T\x3T\x3T\x3T\x5T\x962\nT\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T"+
		"\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x5T\x979\nT\x3T\x3T\x3T\x3T\x3"+
		"T\x3T\x3T\x3T\x3T\x3T\x5T\x985\nT\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T"+
		"\x5T\x990\nT\x3T\aT\x993\nT\fT\xET\x996\vT\x3T\x5T\x999\nT\x3T\x3T\x3"+
		"T\x3T\x5T\x99F\nT\x5T\x9A1\nT\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T"+
		"\x3T\x5T\x9AE\nT\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3"+
		"T\x3T\x3T\x3T\x3T\x3T\x6T\x9C3\nT\rT\xET\x9C4\x3T\x3T\x3T\x3T\x3T\x5T"+
		"\x9CC\nT\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x5T\x9D5\nT\x3T\x3T\x3T\x5T\x9DA"+
		"\nT\x3T\x5T\x9DD\nT\x3T\x3T\x3T\x5T\x9E2\nT\x3T\x5T\x9E5\nT\x3T\x3T\x3"+
		"T\x5T\x9EA\nT\x3T\x6T\x9ED\nT\rT\xET\x9EE\x3T\x3T\x3T\x3T\x3T\x3T\x3T"+
		"\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3"+
		"T\x3T\x5T\xA0B\nT\x3T\x3T\x3T\x3T\x3T\x3T\x5T\xA13\nT\x3T\x3T\x6T\xA17"+
		"\nT\rT\xET\xA18\x3T\x3T\x3T\x3T\x3T\x5T\xA20\nT\x5T\xA22\nT\x3T\x3T\x3"+
		"T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x5T\xA2F\nT\x3T\x3T\x3T\x3T\x3T\x5T"+
		"\xA36\nT\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x5T\xA45"+
		"\nT\x3U\x3U\x3V\x3V\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x5"+
		"W\xA57\nW\x3W\x5W\xA5A\nW\x5W\xA5C\nW\x3W\x3W\x3W\x5W\xA61\nW\x3W\x3W"+
		"\x5W\xA65\nW\x3W\x5W\xA68\nW\x5W\xA6A\nW\x3W\x3W\x3W\x3W\x5W\xA70\nW\x3"+
		"W\x5W\xA73\nW\x5W\xA75\nW\x3W\x3W\x3W\x3W\x5W\xA7B\nW\x5W\xA7D\nW\x3W"+
		"\x3W\x3X\x3X\x3X\x3X\x3X\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3"+
		"Y\x3Y\x5Y\xA93\nY\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x5Y\xA9B\nY\x3Y\x3Y\x3Y\x3Y"+
		"\x3Y\x3Y\x5Y\xAA3\nY\x6Y\xAA5\nY\rY\xEY\xAA6\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3"+
		"Y\x5Y\xAB0\nY\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z"+
		"\x3Z\x3Z\x3Z\x3Z\x3Z\x5Z\xAC5\nZ\x3Z\x3Z\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3"+
		"[\x3[\x5[\xAD2\n[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3["+
		"\x5[\xAE1\n[\x6[\xAE3\n[\r[\xE[\xAE4\x3\\\x3\\\x3\\\x3\\\x3]\x3]\x3]\x3"+
		"]\x3]\x3]\x3^\x3^\x3^\x3^\x3^\x3^\x3_\x3_\x3_\x3_\x3`\x3`\x3`\x3`\x3\x61"+
		"\x3\x61\x3\x61\x3\x61\x3\x61\x3\x62\x3\x62\x3\x62\x3\x62\x5\x62\xB08\n"+
		"\x62\x3\x62\x5\x62\xB0B\n\x62\x3\x62\x6\x62\xB0E\n\x62\r\x62\xE\x62\xB0F"+
		"\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x64\x3\x64\x3\x64\x3\x64"+
		"\x3\x64\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x66\x3\x66\x3\x66"+
		"\x3\x66\x5\x66\xB27\n\x66\x3\x66\x5\x66\xB2A\n\x66\x3\x66\x3\x66\x3\x66"+
		"\x5\x66\xB2F\n\x66\x3\x66\x3\x66\x3g\x3g\x3g\x3g\x3h\x3h\x3h\x3h\x3h\x3"+
		"h\x3i\x3i\x3i\x3i\x3i\x3i\x3j\x3j\x3j\x3j\x3j\x3j\x5j\xB49\nj\x3k\x3k"+
		"\x3k\x3k\x3k\x3k\x3l\x3l\x3l\x3l\x3l\x3l\x5l\xB57\nl\x3l\x3l\x3l\x5l\xB5C"+
		"\nl\x3l\x3l\x3m\x3m\x3m\x3m\x5m\xB64\nm\x3m\x6m\xB67\nm\rm\xEm\xB68\x3"+
		"m\x3m\x3m\x3m\x3m\x5m\xB70\nm\x3n\x3n\x3n\x3n\x3n\x3n\x3n\x3o\x3o\x3o"+
		"\x3o\x3o\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x5p\xB85\np\x3p\x3p\x3q\x3q\x3q\x3"+
		"q\x3q\x3r\x3r\x3r\x3r\x3s\x3s\x3s\x3s\x3t\x3t\x3t\x3t\x3t\x3u\x3u\x3u"+
		"\x3u\x3u\x3v\x3v\x3v\x3v\x3v\x3w\x3w\x3w\x3w\x3w\x5w\xBAA\nw\x3w\x3w\x3"+
		"w\x5w\xBAF\nw\x3w\x3w\x3x\x3x\x3x\x3x\x3x\x3x\x3y\x3y\x3y\x3y\x3y\x3z"+
		"\x3z\x3z\x3z\x5z\xBC2\nz\x3z\x3z\x3{\x3{\x3{\x3{\x3|\x3|\x3|\x3|\x5|\xBCE"+
		"\n|\x3|\x5|\xBD1\n|\x3|\x3|\x3|\x5|\xBD6\n|\x3|\x5|\xBD9\n|\x3}\x3}\x3"+
		"}\x3}\x5}\xBDF\n}\x3}\x3}\x3~\x3~\x3~\x3~\x3~\x3~\x3\x7F\x3\x7F\x3\x7F"+
		"\x3\x7F\x3\x7F\x5\x7F\xBEE\n\x7F\x3\x7F\x3\x7F\x3\x7F\x5\x7F\xBF3\n\x7F"+
		"\x3\x7F\x3\x7F\x3\x80\x3\x80\x3\x80\x3\x80\x5\x80\xBFB\n\x80\x3\x80\x5"+
		"\x80\xBFE\n\x80\x3\x80\x3\x80\x3\x80\x5\x80\xC03\n\x80\x3\x80\x3\x80\x3"+
		"\x80\x5\x80\xC08\n\x80\x3\x80\x5\x80\xC0B\n\x80\x3\x81\x3\x81\x3\x81\x3"+
		"\x81\x3\x81\x3\x82\x3\x82\x3\x82\x3\x82\x3\x82\x3\x82\x3\x83\x3\x83\x3"+
		"\x83\x3\x83\x3\x83\x3\x84\x3\x84\x3\x84\x3\x84\x3\x85\x3\x85\x5\x85\xC23"+
		"\n\x85\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85\x5\x85\xC2A\n\x85\x3\x85\x3"+
		"\x85\x3\x85\x5\x85\xC2F\n\x85\x3\x85\x3\x85\x3\x85\x5\x85\xC34\n\x85\x3"+
		"\x85\x3\x85\x3\x85\x6\x85\xC39\n\x85\r\x85\xE\x85\xC3A\x3\x86\x3\x86\x3"+
		"\x86\x3\x86\x3\x86\x5\x86\xC42\n\x86\x3\x86\x3\x86\x3\x86\x3\x86\x3\x87"+
		"\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x5\x87\xC4F\n\x87\x3\x88\x3"+
		"\x88\x3\x88\x3\x88\x5\x88\xC55\n\x88\x3\x88\x3\x88\x3\x88\x5\x88\xC5A"+
		"\n\x88\x3\x88\x3\x88\x3\x89\x3\x89\x3\x89\x3\x89\x5\x89\xC62\n\x89\x3"+
		"\x89\x3\x89\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8B\x3\x8B\x3\x8B\x3"+
		"\x8B\x3\x8B\x3\x8B\x3\x8B\x5\x8B\xC72\n\x8B\x3\x8B\x3\x8B\x3\x8C\x3\x8C"+
		"\x3\x8C\x5\x8C\xC79\n\x8C\x3\x8C\x3\x8C\x3\x8C\x5\x8C\xC7E\n\x8C\x3\x8C"+
		"\x6\x8C\xC81\n\x8C\r\x8C\xE\x8C\xC82\x3\x8C\x5\x8C\xC86\n\x8C\x3\x8C\x3"+
		"\x8C\x3\x8C\x3\x8C\x5\x8C\xC8C\n\x8C\x3\x8C\x3\x8C\x3\x8C\x3\x8C\x5\x8C"+
		"\xC92\n\x8C\x3\x8D\x3\x8D\x3\x8D\x5\x8D\xC97\n\x8D\x3\x8D\x3\x8D\x3\x8D"+
		"\x5\x8D\xC9C\n\x8D\x3\x8D\x6\x8D\xC9F\n\x8D\r\x8D\xE\x8D\xCA0\x3\x8D\x5"+
		"\x8D\xCA4\n\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x5\x8D\xCAA\n\x8D\x3\x8D\x3"+
		"\x8D\x3\x8D\x3\x8D\x5\x8D\xCB0\n\x8D\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E"+
		"\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x5\x8E\xCBB\n\x8E\x3\x8E\x5\x8E\xCBE\n\x8E"+
		"\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x5\x8F\xCC8\n"+
		"\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x5\x8F\xCCE\n\x8F\x6\x8F\xCD0\n\x8F\r"+
		"\x8F\xE\x8F\xCD1\x3\x8F\x3\x8F\x5\x8F\xCD6\n\x8F\x3\x90\x3\x90\x3\x90"+
		"\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90"+
		"\x3\x90\x3\x90\x3\x90\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91"+
		"\x3\x91\x3\x91\x3\x91\x3\x91\x5\x91\xCF3\n\x91\x3\x92\x3\x92\x3\x92\x3"+
		"\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x5\x92\xD00\n\x92"+
		"\x3\x92\x3\x92\x3\x92\x3\x92\x5\x92\xD06\n\x92\x3\x93\x3\x93\x3\x93\x3"+
		"\x93\x3\x93\x3\x93\x3\x93\x3\x93\x5\x93\xD10\n\x93\x3\x93\x5\x93\xD13"+
		"\n\x93\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94"+
		"\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x5\x95\xD23\n\x95\x3\x95\x3\x95\x3"+
		"\x95\x5\x95\xD28\n\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95"+
		"\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x5\x95\xD38\n\x95\x3"+
		"\x95\x5\x95\xD3B\n\x95\x3\x95\x5\x95\xD3E\n\x95\x3\x95\x3\x95\x3\x95\x5"+
		"\x95\xD43\n\x95\x3\x95\x5\x95\xD46\n\x95\x3\x95\x3\x95\x3\x95\x5\x95\xD4B"+
		"\n\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x5\x95\xD54\n"+
		"\x95\x3\x95\x5\x95\xD57\n\x95\x3\x95\x5\x95\xD5A\n\x95\x3\x95\x3\x95\x3"+
		"\x95\x3\x95\x3\x95\x5\x95\xD61\n\x95\x3\x96\x3\x96\x3\x96\x3\x96\x3\x96"+
		"\x3\x96\x5\x96\xD69\n\x96\x3\x96\x3\x96\x5\x96\xD6D\n\x96\x5\x96\xD6F"+
		"\n\x96\x5\x96\xD71\n\x96\x3\x97\x3\x97\x3\x97\x3\x97\x5\x97\xD77\n\x97"+
		"\x3\x97\x3\x97\x5\x97\xD7B\n\x97\x3\x97\x3\x97\x3\x97\x5\x97\xD80\n\x97"+
		"\x3\x97\x5\x97\xD83\n\x97\x5\x97\xD85\n\x97\x3\x98\x3\x98\x3\x98\x3\x98"+
		"\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x5\x98\xD91\n\x98\x3\x98\x5"+
		"\x98\xD94\n\x98\x5\x98\xD96\n\x98\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x3"+
		"\x99\x3\x99\x3\x99\x3\x99\x5\x99\xDA1\n\x99\x3\x99\x3\x99\x5\x99\xDA5"+
		"\n\x99\x3\x99\x3\x99\x5\x99\xDA9\n\x99\x3\x99\x6\x99\xDAC\n\x99\r\x99"+
		"\xE\x99\xDAD\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x3\x9A\x3\x9A\x3"+
		"\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xDBD\n\x9A\x3\x9A\x3\x9A\x3\x9A"+
		"\x3\x9A\x3\x9A\x5\x9A\xDC4\n\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3"+
		"\x9A\x3\x9A\x5\x9A\xDCD\n\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\a\x9A\xDD3\n"+
		"\x9A\f\x9A\xE\x9A\xDD6\v\x9A\x5\x9A\xDD8\n\x9A\x3\x9A\x3\x9A\x3\x9A\x5"+
		"\x9A\xDDD\n\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xDE2\n\x9A\x3\x9A\x3\x9A\x3"+
		"\x9A\x3\x9A\x6\x9A\xDE8\n\x9A\r\x9A\xE\x9A\xDE9\x3\x9A\x3\x9A\x6\x9A\xDEE"+
		"\n\x9A\r\x9A\xE\x9A\xDEF\x3\x9A\x3\x9A\x5\x9A\xDF4\n\x9A\x3\x9A\x3\x9A"+
		"\a\x9A\xDF8\n\x9A\f\x9A\xE\x9A\xDFB\v\x9A\a\x9A\xDFD\n\x9A\f\x9A\xE\x9A"+
		"\xE00\v\x9A\x3\x9A\x5\x9A\xE03\n\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A"+
		"\x5\x9A\xE0A\n\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\a\x9A\xE10\n\x9A\f\x9A"+
		"\xE\x9A\xE13\v\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xE1A\n\x9A"+
		"\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xE23\n\x9A\x3"+
		"\x9A\x3\x9A\x3\x9A\x5\x9A\xE28\n\x9A\x3\x9A\x3\x9A\x5\x9A\xE2C\n\x9A\x3"+
		"\x9A\x5\x9A\xE2F\n\x9A\x6\x9A\xE31\n\x9A\r\x9A\xE\x9A\xE32\x3\x9A\x3\x9A"+
		"\a\x9A\xE37\n\x9A\f\x9A\xE\x9A\xE3A\v\x9A\a\x9A\xE3C\n\x9A\f\x9A\xE\x9A"+
		"\xE3F\v\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xE46\n\x9A\x3\x9A"+
		"\x3\x9A\x3\x9A\x3\x9A\a\x9A\xE4C\n\x9A\f\x9A\xE\x9A\xE4F\v\x9A\x3\x9A"+
		"\x3\x9A\x3\x9A\x5\x9A\xE54\n\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xE5A"+
		"\n\x9A\x3\x9A\x5\x9A\xE5D\n\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xE62\n\x9A"+
		"\x3\x9A\x5\x9A\xE65\n\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xE6C"+
		"\n\x9A\x5\x9A\xE6E\n\x9A\x3\x9A\x5\x9A\xE71\n\x9A\x3\x9A\x3\x9A\x3\x9A"+
		"\x3\x9A\x5\x9A\xE77\n\x9A\x3\x9A\x5\x9A\xE7A\n\x9A\x3\x9A\x3\x9A\x3\x9A"+
		"\x5\x9A\xE7F\n\x9A\x3\x9A\x5\x9A\xE82\n\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A"+
		"\xE87\n\x9A\x3\x9A\x5\x9A\xE8A\n\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xE8F"+
		"\n\x9A\x3\x9A\x5\x9A\xE92\n\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xE97\n\x9A"+
		"\x3\x9B\x5\x9B\xE9A\n\x9B\x3\x9B\x5\x9B\xE9D\n\x9B\x3\x9B\x5\x9B\xEA0"+
		"\n\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x5\x9B\xEA7\n\x9B\x6\x9B\xEA9"+
		"\n\x9B\r\x9B\xE\x9B\xEAA\x3\x9C\x3\x9C\x3\x9C\x3\x9C\x3\x9C\x5\x9C\xEB2"+
		"\n\x9C\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x5\x9D\xEB9\n\x9D\x3\x9D\x3"+
		"\x9D\x3\x9D\x3\x9D\x5\x9D\xEBF\n\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D"+
		"\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x5\x9D\xECC\n\x9D\x3\x9D\x3"+
		"\x9D\x5\x9D\xED0\n\x9D\x3\x9D\x3\x9D\x3\x9D\x5\x9D\xED5\n\x9D\x3\x9D\x3"+
		"\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x5\x9D\xEDF\n\x9D\x3\x9D"+
		"\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x5\x9D\xEE8\n\x9D\x3\x9D\x3"+
		"\x9D\x5\x9D\xEEC\n\x9D\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E"+
		"\x3\x9E\x3\x9E\x3\x9E\x5\x9E\xEF8\n\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x5"+
		"\x9E\xEFE\n\x9E\x3\x9E\x3\x9E\x3\x9E\x6\x9E\xF03\n\x9E\r\x9E\xE\x9E\xF04"+
		"\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E"+
		"\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x5\x9E\xF19\n"+
		"\x9E\x3\x9E\x3\x9E\x5\x9E\xF1D\n\x9E\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F"+
		"\x3\x9F\x5\x9F\xF25\n\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3"+
		"\x9F\x5\x9F\xF2E\n\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x5\x9F\xF34\n\x9F\x3"+
		"\x9F\x3\x9F\x3\x9F\x3\x9F\x5\x9F\xF3A\n\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F"+
		"\x3\x9F\x3\x9F\x6\x9F\xF42\n\x9F\r\x9F\xE\x9F\xF43\x3\x9F\x3\x9F\x3\xA0"+
		"\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x5\xA0\xF4E\n\xA0\x3\xA0\x3\xA0\x5"+
		"\xA0\xF52\n\xA0\x3\xA0\x5\xA0\xF55\n\xA0\x3\xA0\x3\xA0\x5\xA0\xF59\n\xA0"+
		"\x3\xA0\x3\xA0\x3\xA0\x5\xA0\xF5E\n\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x5"+
		"\xA0\xF64\n\xA0\x3\xA0\x5\xA0\xF67\n\xA0\x3\xA0\x3\xA0\x5\xA0\xF6B\n\xA0"+
		"\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x6\xA0\xF73\n\xA0\r\xA0\xE"+
		"\xA0\xF74\x3\xA0\x5\xA0\xF78\n\xA0\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1"+
		"\x3\xA1\x5\xA1\xF80\n\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x5"+
		"\xA1\xF88\n\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x5\xA1\xF8F\n\xA1\x3"+
		"\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x6\xA1\xF96\n\xA1\r\xA1\xE\xA1\xF97\x5"+
		"\xA1\xF9A\n\xA1\x3\xA1\x3\xA1\x3\xA1\x5\xA1\xF9F\n\xA1\x3\xA1\x3\xA1\x3"+
		"\xA1\x3\xA1\x5\xA1\xFA5\n\xA1\x3\xA1\x6\xA1\xFA8\n\xA1\r\xA1\xE\xA1\xFA9"+
		"\x5\xA1\xFAC\n\xA1\x3\xA1\x5\xA1\xFAF\n\xA1\x3\xA1\x3\xA1\x3\xA1\x5\xA1"+
		"\xFB4\n\xA1\x3\xA1\x5\xA1\xFB7\n\xA1\x3\xA1\x3\xA1\x3\xA1\x5\xA1\xFBC"+
		"\n\xA1\x3\xA1\x3\xA1\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2"+
		"\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x5\xA2\xFCB\n\xA2\x3\xA2\x3\xA2\x3\xA2\x3"+
		"\xA2\x3\xA2\x5\xA2\xFD2\n\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x6\xA2"+
		"\xFD9\n\xA2\r\xA2\xE\xA2\xFDA\x5\xA2\xFDD\n\xA2\x3\xA2\x3\xA2\x3\xA2\x5"+
		"\xA2\xFE2\n\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x5\xA2\xFE8\n\xA2\x3\xA2\x6"+
		"\xA2\xFEB\n\xA2\r\xA2\xE\xA2\xFEC\x5\xA2\xFEF\n\xA2\x3\xA2\x5\xA2\xFF2"+
		"\n\xA2\x3\xA2\x3\xA2\x3\xA2\x5\xA2\xFF7\n\xA2\x3\xA2\x5\xA2\xFFA\n\xA2"+
		"\x3\xA2\x3\xA2\x3\xA2\x5\xA2\xFFF\n\xA2\x3\xA2\x3\xA2\x3\xA3\x3\xA3\x3"+
		"\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x5\xA3\x100C\n\xA3\x3\xA3"+
		"\x3\xA3\x3\xA3\x5\xA3\x1011\n\xA3\x3\xA4\x3\xA4\x3\xA4\x3\xA4\x3\xA4\x3"+
		"\xA4\x3\xA4\x5\xA4\x101A\n\xA4\x3\xA4\x3\xA4\x3\xA4\x5\xA4\x101F\n\xA4"+
		"\x3\xA4\x3\xA4\x3\xA4\x3\xA4\x5\xA4\x1025\n\xA4\x3\xA4\x3\xA4\x5\xA4\x1029"+
		"\n\xA4\x3\xA4\x3\xA4\x5\xA4\x102D\n\xA4\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3"+
		"\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3"+
		"\xA5\x5\xA5\x103E\n\xA5\x5\xA5\x1040\n\xA5\x3\xA6\x3\xA6\x3\xA6\x3\xA6"+
		"\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x5\xA6\x104A\n\xA6\x3\xA6\x3\xA6\x3\xA6\x5"+
		"\xA6\x104F\n\xA6\x5\xA6\x1051\n\xA6\x3\xA6\x3\xA6\x5\xA6\x1055\n\xA6\x3"+
		"\xA7\x3\xA7\x3\xA7\x3\xA7\x5\xA7\x105B\n\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA7"+
		"\x3\xA7\x3\xA7\x5\xA7\x1063\n\xA7\x3\xA7\a\xA7\x1066\n\xA7\f\xA7\xE\xA7"+
		"\x1069\v\xA7\x5\xA7\x106B\n\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA7\a\xA7\x1071"+
		"\n\xA7\f\xA7\xE\xA7\x1074\v\xA7\x5\xA7\x1076\n\xA7\x3\xA7\x3\xA7\x3\xA7"+
		"\x5\xA7\x107B\n\xA7\x3\xA7\x3\xA7\x3\xA7\x5\xA7\x1080\n\xA7\x3\xA7\x3"+
		"\xA7\x3\xA7\x5\xA7\x1085\n\xA7\x3\xA7\x3\xA7\x3\xA7\x5\xA7\x108A\n\xA7"+
		"\x3\xA7\x3\xA7\x3\xA7\x5\xA7\x108F\n\xA7\x3\xA7\x3\xA7\x3\xA7\x5\xA7\x1094"+
		"\n\xA7\x3\xA7\x3\xA7\x5\xA7\x1098\n\xA7\x3\xA7\x3\xA7\x3\xA7\x5\xA7\x109D"+
		"\n\xA7\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8"+
		"\x5\xA8\x10A8\n\xA8\x3\xA8\a\xA8\x10AB\n\xA8\f\xA8\xE\xA8\x10AE\v\xA8"+
		"\x5\xA8\x10B0\n\xA8\x3\xA8\x5\xA8\x10B3\n\xA8\x3\xA8\x3\xA8\x3\xA8\x5"+
		"\xA8\x10B8\n\xA8\x3\xA8\x5\xA8\x10BB\n\xA8\x3\xA8\x3\xA8\x3\xA8\x5\xA8"+
		"\x10C0\n\xA8\x3\xA8\x5\xA8\x10C3\n\xA8\x3\xA8\x3\xA8\x3\xA8\x5\xA8\x10C8"+
		"\n\xA8\x3\xA8\x5\xA8\x10CB\n\xA8\x3\xA8\x3\xA8\x3\xA8\x5\xA8\x10D0\n\xA8"+
		"\x3\xA8\x5\xA8\x10D3\n\xA8\x3\xA8\x3\xA8\x3\xA8\x5\xA8\x10D8\n\xA8\x3"+
		"\xA8\x5\xA8\x10DB\n\xA8\x3\xA8\x3\xA8\x3\xA8\x5\xA8\x10E0\n\xA8\x3\xA8"+
		"\x3\xA8\x3\xA8\x3\xA8\x5\xA8\x10E6\n\xA8\x3\xA8\x3\xA8\x3\xA8\x5\xA8\x10EB"+
		"\n\xA8\x3\xA8\x5\xA8\x10EE\n\xA8\x3\xA8\x3\xA8\x3\xA8\x5\xA8\x10F3\n\xA8"+
		"\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x5\xA8\x10FA\n\xA8\x5\xA8\x10FC\n"+
		"\xA8\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x5\xA9\x1102\n\xA9\x3\xA9\x3\xA9\x3\xA9"+
		"\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x5\xA9\x110B\n\xA9\x3\xA9\x3\xA9\x3\xA9\x5"+
		"\xA9\x1110\n\xA9\x5\xA9\x1112\n\xA9\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA"+
		"\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x5\xAA\x111E\n\xAA\x3\xAB\x3\xAB\x3"+
		"\xAB\x3\xAB\x5\xAB\x1124\n\xAB\x3\xAB\x3\xAB\x3\xAB\x3\xAB\x3\xAB\x3\xAB"+
		"\x3\xAB\x3\xAB\a\xAB\x112E\n\xAB\f\xAB\xE\xAB\x1131\v\xAB\x5\xAB\x1133"+
		"\n\xAB\x3\xAB\x3\xAB\x3\xAB\x5\xAB\x1138\n\xAB\x5\xAB\x113A\n\xAB\x3\xAC"+
		"\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x5\xAC\x1144\n\xAC\x3"+
		"\xAC\x3\xAC\x3\xAC\x5\xAC\x1149\n\xAC\x5\xAC\x114B\n\xAC\x3\xAC\x3\xAC"+
		"\x5\xAC\x114F\n\xAC\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x5\xAD\x1155\n\xAD\x3"+
		"\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3"+
		"\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x5\xAD\x1167\n\xAD\x5\xAD\x1169"+
		"\n\xAD\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE"+
		"\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x5\xAF\x1178\n\xAF\x3\xAF\x3\xAF\x3\xAF\x3"+
		"\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3"+
		"\xAF\x3\xAF\x3\xAF\x5\xAF\x118A\n\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF"+
		"\x3\xAF\x5\xAF\x1192\n\xAF\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x3"+
		"\xB0\x3\xB0\x5\xB0\x119C\n\xB0\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1"+
		"\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x5\xB1\x11AC"+
		"\n\xB1\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2"+
		"\x3\xB2\x3\xB2\x3\xB2\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3"+
		"\x5\xB3\x11C1\n\xB3\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x3"+
		"\xB4\x3\xB4\x5\xB4\x11CC\n\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x5\xB4\x11D2"+
		"\n\xB4\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x5\xB5\x11DB\n"+
		"\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x5\xB5\x11E4\n\xB5"+
		"\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x5\xB5\x11EA\n\xB5\x3\xB6\x3\xB6\x3\xB6\x3"+
		"\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6\x11F3\n\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6"+
		"\x11F8\n\xB6\x3\xB6\x5\xB6\x11FB\n\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6\x1200"+
		"\n\xB6\x3\xB6\x5\xB6\x1203\n\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6\x1208\n\xB6"+
		"\x3\xB6\x5\xB6\x120B\n\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x5"+
		"\xB6\x1213\n\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6\x1219\n\xB6\x6\xB6"+
		"\x121B\n\xB6\r\xB6\xE\xB6\x121C\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x5"+
		"\xB6\x1224\n\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6\x122A\n\xB6\x6\xB6"+
		"\x122C\n\xB6\r\xB6\xE\xB6\x122D\x3\xB6\x5\xB6\x1231\n\xB6\x5\xB6\x1233"+
		"\n\xB6\x3\xB6\x5\xB6\x1236\n\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6\x123B\n\xB6"+
		"\x3\xB6\x5\xB6\x123E\n\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6\x1243\n\xB6\x3"+
		"\xB6\x5\xB6\x1246\n\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6\x124B\n\xB6\x3\xB6"+
		"\x5\xB6\x124E\n\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6\x1253\n\xB6\x3\xB6\x5"+
		"\xB6\x1256\n\xB6\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7"+
		"\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x5\xB7\x1265\n\xB7\x3\xB7\x3\xB7\x3"+
		"\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x5\xB7\x1270\n\xB7\x3\xB8"+
		"\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x5\xB8\x127B"+
		"\n\xB8\x3\xB8\x3\xB8\x3\xB8\a\xB8\x1280\n\xB8\f\xB8\xE\xB8\x1283\v\xB8"+
		"\x5\xB8\x1285\n\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x5\xB8\x128D"+
		"\n\xB8\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x5\xB9\x1293\n\xB9\x3\xB9\x3\xB9\x3"+
		"\xBA\x3\xBA\x3\xBA\a\xBA\x129A\n\xBA\f\xBA\xE\xBA\x129D\v\xBA\x3\xBA\x3"+
		"\xBA\x3\xBA\x3\xBA\x5\xBA\x12A3\n\xBA\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x3\xBA"+
		"\a\xBA\x12AA\n\xBA\f\xBA\xE\xBA\x12AD\v\xBA\x3\xBB\x3\xBB\x3\xBC\x3\xBC"+
		"\x3\xBD\x3\xBD\x3\xBD\x5\xBD\x12B6\n\xBD\x3\xBD\x3\xBD\x3\xBD\x5\xBD\x12BB"+
		"\n\xBD\x3\xBD\x3\xBD\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE"+
		"\x3\xBE\x3\xBE\x3\xBE\x5\xBE\x12C9\n\xBE\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3"+
		"\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x5\xBF\x12D4\n\xBF\x3\xBF\x3\xBF\x3\xBF"+
		"\a\xBF\x12D9\n\xBF\f\xBF\xE\xBF\x12DC\v\xBF\x5\xBF\x12DE\n\xBF\x3\xBF"+
		"\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x5\xBF\x12E6\n\xBF\x3\xC0\x3\xC0\x3"+
		"\xC0\x3\xC0\x3\xC0\x5\xC0\x12ED\n\xC0\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1"+
		"\x5\xC1\x12F4\n\xC1\x3\xC1\x3\xC1\x5\xC1\x12F8\n\xC1\x3\xC1\x3\xC1\x3"+
		"\xC1\x5\xC1\x12FD\n\xC1\x3\xC1\x5\xC1\x1300\n\xC1\x3\xC1\x3\xC1\x3\xC1"+
		"\x5\xC1\x1305\n\xC1\x3\xC1\x5\xC1\x1308\n\xC1\x3\xC1\x3\xC1\x3\xC1\x5"+
		"\xC1\x130D\n\xC1\x3\xC1\x5\xC1\x1310\n\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1"+
		"\x3\xC1\x3\xC1\x3\xC1\x5\xC1\x1319\n\xC1\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x3"+
		"\xC2\x5\xC2\x1320\n\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC3\x3\xC3\x3\xC3"+
		"\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x5\xC3\x132F\n\xC3\x3\xC3\x5"+
		"\xC3\x1332\n\xC3\x3\xC3\x3\xC3\x3\xC3\x5\xC3\x1337\n\xC3\x3\xC4\x3\xC4"+
		"\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x5\xC4\x1342\n\xC4\x3"+
		"\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x5\xC4\x134B\n\xC4\x3\xC4"+
		"\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x5\xC4\x1356"+
		"\n\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\a\xC4\x135C\n\xC4\f\xC4\xE\xC4\x135F"+
		"\v\xC4\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x5\xC5\x1366\n\xC5\x3\xC6\x3"+
		"\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x136E\n\xC6\x3\xC6\x3\xC6\x3\xC6"+
		"\x5\xC6\x1373\n\xC6\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x3"+
		"\xC7\x3\xC7\x5\xC7\x137E\n\xC7\x3\xC7\x5\xC7\x1381\n\xC7\x3\xC7\x3\xC7"+
		"\x5\xC7\x1385\n\xC7\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x138D"+
		"\n\xC8\x3\xC8\x3\xC8\x5\xC8\x1391\n\xC8\x3\xC8\x3\xC8\x5\xC8\x1395\n\xC8"+
		"\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x139D\n\xC8\x3\xC8\x6"+
		"\xC8\x13A0\n\xC8\r\xC8\xE\xC8\x13A1\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8"+
		"\x3\xC8\x5\xC8\x13AA\n\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x13AF\n\xC8\x3"+
		"\xC8\x3\xC8\a\xC8\x13B3\n\xC8\f\xC8\xE\xC8\x13B6\v\xC8\x6\xC8\x13B8\n"+
		"\xC8\r\xC8\xE\xC8\x13B9\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8"+
		"\x5\xC8\x13C3\n\xC8\x3\xC8\x5\xC8\x13C6\n\xC8\x3\xC8\x3\xC8\x3\xC8\x5"+
		"\xC8\x13CB\n\xC8\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x5\xC9\x13D2\n\xC9"+
		"\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x5\xC9\x13D8\n\xC9\x5\xC9\x13DA\n\xC9\x3"+
		"\xC9\x3\xC9\x3\xC9\x5\xC9\x13DF\n\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x5\xC9"+
		"\x13E5\n\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x5\xC9\x13EB\n\xC9\x3\xC9\x3"+
		"\xC9\x3\xC9\x5\xC9\x13F0\n\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x5\xC9\x13F6"+
		"\n\xC9\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA\x13FD\n\xCA\x3\xCA\x3"+
		"\xCA\x3\xCA\x5\xCA\x1402\n\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA\x1407\n\xCA"+
		"\x3\xCA\x3\xCA\x3\xCA\x5\xCA\x140C\n\xCA\x3\xCA\x5\xCA\x140F\n\xCA\x3"+
		"\xCA\x3\xCA\x5\xCA\x1413\n\xCA\x3\xCA\x5\xCA\x1416\n\xCA\x3\xCA\x3\xCA"+
		"\x5\xCA\x141A\n\xCA\x3\xCA\x3\xCA\x5\xCA\x141E\n\xCA\x3\xCA\x5\xCA\x1421"+
		"\n\xCA\x3\xCA\x3\xCA\x5\xCA\x1425\n\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA\x142A"+
		"\n\xCA\x3\xCA\x3\xCA\x5\xCA\x142E\n\xCA\x3\xCA\x3\xCA\x5\xCA\x1432\n\xCA"+
		"\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x143C"+
		"\n\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x1442\n\xCB\x3\xCB\x3\xCB\x3"+
		"\xCB\x3\xCB\x3\xCB\x5\xCB\x1449\n\xCB\x3\xCB\x5\xCB\x144C\n\xCB\x3\xCB"+
		"\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x1452\n\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x5"+
		"\xCB\x1458\n\xCB\x3\xCB\x3\xCB\x3\xCB\a\xCB\x145D\n\xCB\f\xCB\xE\xCB\x1460"+
		"\v\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x1465\n\xCB\x5\xCB\x1467\n\xCB\x3\xCB"+
		"\x3\xCB\x3\xCB\x5\xCB\x146C\n\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x1472"+
		"\n\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x1478\n\xCB\x3\xCB\x3\xCB\x3"+
		"\xCB\a\xCB\x147D\n\xCB\f\xCB\xE\xCB\x1480\v\xCB\x3\xCB\x5\xCB\x1483\n"+
		"\xCB\x3\xCB\x3\xCB\x5\xCB\x1487\n\xCB\x3\xCB\x5\xCB\x148A\n\xCB\x3\xCB"+
		"\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB"+
		"\x3\xCB\x5\xCB\x1498\n\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x149D\n\xCB\x3"+
		"\xCB\x3\xCB\x5\xCB\x14A1\n\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB"+
		"\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x14AE\n\xCB\x3\xCB\x5\xCB\x14B1"+
		"\n\xCB\x5\xCB\x14B3\n\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x5"+
		"\xCB\x14BB\n\xCB\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC"+
		"\x5\xCC\x14C5\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x14CB\n\xCC\x3"+
		"\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x14D2\n\xCC\x3\xCC\x5\xCC\x14D5"+
		"\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x14DB\n\xCC\x3\xCC\x3\xCC\x3"+
		"\xCC\x3\xCC\x5\xCC\x14E1\n\xCC\x3\xCC\x3\xCC\x3\xCC\a\xCC\x14E6\n\xCC"+
		"\f\xCC\xE\xCC\x14E9\v\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x14EE\n\xCC\x5\xCC"+
		"\x14F0\n\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x14F5\n\xCC\x3\xCC\x3\xCC\x3"+
		"\xCC\x3\xCC\x5\xCC\x14FB\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x1501"+
		"\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x1507\n\xCC\x3\xCC\x3\xCC\x3"+
		"\xCC\a\xCC\x150C\n\xCC\f\xCC\xE\xCC\x150F\v\xCC\x3\xCC\x5\xCC\x1512\n"+
		"\xCC\x3\xCC\x3\xCC\x5\xCC\x1516\n\xCC\x3\xCC\x5\xCC\x1519\n\xCC\x3\xCC"+
		"\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC"+
		"\x3\xCC\x5\xCC\x1527\n\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x152C\n\xCC\x3"+
		"\xCC\x3\xCC\x5\xCC\x1530\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC"+
		"\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x153D\n\xCC\x3\xCC\x5\xCC\x1540"+
		"\n\xCC\x5\xCC\x1542\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5"+
		"\xCC\x154A\n\xCC\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD"+
		"\x3\xCD\x5\xCD\x1555\n\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\a\xCD\x155C"+
		"\n\xCD\f\xCD\xE\xCD\x155F\v\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3"+
		"\xCD\x5\xCD\x1567\n\xCD\x3\xCE\x3\xCE\x3\xCE\x3\xCE\x3\xCE\x3\xCE\x3\xCE"+
		"\x3\xCE\x3\xCE\x5\xCE\x1572\n\xCE\x3\xCE\x3\xCE\x3\xCE\x3\xCE\x3\xCE\a"+
		"\xCE\x1579\n\xCE\f\xCE\xE\xCE\x157C\v\xCE\x3\xCE\x3\xCE\x3\xCE\x3\xCE"+
		"\x3\xCE\x3\xCE\x5\xCE\x1584\n\xCE\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3"+
		"\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x5\xCF\x1590\n\xCF\x3\xCF\x3\xCF\x5\xCF"+
		"\x1594\n\xCF\x3\xCF\x3\xCF\x3\xCF\x6\xCF\x1599\n\xCF\r\xCF\xE\xCF\x159A"+
		"\x5\xCF\x159D\n\xCF\x3\xCF\x3\xCF\x3\xCF\x5\xCF\x15A2\n\xCF\x3\xCF\x3"+
		"\xCF\x5\xCF\x15A6\n\xCF\x3\xCF\x3\xCF\x3\xCF\x6\xCF\x15AB\n\xCF\r\xCF"+
		"\xE\xCF\x15AC\x5\xCF\x15AF\n\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3"+
		"\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x5\xCF\x15BD\n\xCF\x3\xCF"+
		"\x3\xCF\x3\xCF\x5\xCF\x15C2\n\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3"+
		"\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3"+
		"\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x5\xCF\x15D8\n\xCF\x3\xCF\x3\xCF\x3\xCF"+
		"\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF"+
		"\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x5\xCF\x15EE\n\xCF\x3"+
		"\xCF\x3\xCF\x3\xCF\x5\xCF\x15F3\n\xCF\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0"+
		"\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x5\xD0\x1600\n\xD0\x3\xD1\x3"+
		"\xD1\x3\xD1\x3\xD1\x3\xD1\x3\xD1\x5\xD1\x1608\n\xD1\x3\xD2\x3\xD2\x3\xD2"+
		"\x3\xD2\x3\xD2\x3\xD2\x3\xD2\x3\xD2\x3\xD3\x3\xD3\x3\xD3\x3\xD3\x3\xD3"+
		"\x3\xD3\x3\xD3\x3\xD3\x5\xD3\x161A\n\xD3\x3\xD3\x5\xD3\x161D\n\xD3\x3"+
		"\xD3\x3\xD3\x3\xD3\x3\xD3\a\xD3\x1623\n\xD3\f\xD3\xE\xD3\x1626\v\xD3\x3"+
		"\xD3\x3\xD3\x5\xD3\x162A\n\xD3\x3\xD4\x3\xD4\x3\xD4\x3\xD4\x3\xD5\x3\xD5"+
		"\x3\xD5\x3\xD5\x3\xD5\x5\xD5\x1635\n\xD5\x3\xD5\x3\xD5\x3\xD5\x3\xD5\x3"+
		"\xD5\x5\xD5\x163C\n\xD5\x3\xD5\x3\xD5\x3\xD5\x5\xD5\x1641\n\xD5\x3\xD5"+
		"\x3\xD5\x5\xD5\x1645\n\xD5\x6\xD5\x1647\n\xD5\r\xD5\xE\xD5\x1648\x3\xD5"+
		"\x5\xD5\x164C\n\xD5\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x5\xD6\x1653\n"+
		"\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3"+
		"\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x3\xD6\x5\xD6\x1665\n\xD6\x5\xD6"+
		"\x1667\n\xD6\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x3"+
		"\xD7\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x5"+
		"\xD7\x167B\n\xD7\x3\xD8\x3\xD8\x3\xD8\x3\xD8\x3\xD8\x5\xD8\x1682\n\xD8"+
		"\x3\xD8\x3\xD8\x3\xD8\x3\xD8\x3\xD8\x5\xD8\x1689\n\xD8\x3\xD8\x3\xD8\x3"+
		"\xD8\x5\xD8\x168E\n\xD8\x3\xD8\x3\xD8\x3\xD8\x5\xD8\x1693\n\xD8\x3\xD8"+
		"\x3\xD8\x3\xD8\x3\xD8\x5\xD8\x1699\n\xD8\x3\xD8\x3\xD8\x3\xD8\x5\xD8\x169E"+
		"\n\xD8\x5\xD8\x16A0\n\xD8\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x5\xD9\x16A7"+
		"\n\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x5\xD9\x16AD\n\xD9\x3\xD9\x3\xD9\x3"+
		"\xD9\x3\xD9\x5\xD9\x16B3\n\xD9\x3\xD9\x5\xD9\x16B6\n\xD9\x3\xD9\x3\xD9"+
		"\x3\xD9\x3\xD9\x5\xD9\x16BC\n\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x3"+
		"\xD9\x6\xD9\x16C4\n\xD9\r\xD9\xE\xD9\x16C5\x3\xD9\x5\xD9\x16C9\n\xD9\x3"+
		"\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x5\xD9\x16D0\n\xD9\x3\xD9\x5\xD9\x16D3"+
		"\n\xD9\x3\xD9\x3\xD9\x3\xD9\x6\xD9\x16D8\n\xD9\r\xD9\xE\xD9\x16D9\x3\xDA"+
		"\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x16E2\n\xDA\x3\xDA\x3\xDA\x5"+
		"\xDA\x16E6\n\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x16EC\n\xDA\x3\xDA"+
		"\x3\xDA\x3\xDA\a\xDA\x16F1\n\xDA\f\xDA\xE\xDA\x16F4\v\xDA\x5\xDA\x16F6"+
		"\n\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x16FD\n\xDA\x3\xDA\x3"+
		"\xDA\x3\xDA\x3\xDA\x5\xDA\x1703\n\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA"+
		"\x5\xDA\x170A\n\xDA\x3\xDA\x5\xDA\x170D\n\xDA\x3\xDA\x3\xDA\x3\xDA\x3"+
		"\xDA\x5\xDA\x1713\n\xDA\x3\xDA\x3\xDA\x3\xDA\a\xDA\x1718\n\xDA\f\xDA\xE"+
		"\xDA\x171B\v\xDA\x5\xDA\x171D\n\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA"+
		"\x3\xDA\x5\xDA\x1725\n\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x172B\n"+
		"\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x1732\n\xDA\x3\xDA\x5\xDA"+
		"\x1735\n\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x173B\n\xDA\x3\xDA\x3"+
		"\xDA\x3\xDA\a\xDA\x1740\n\xDA\f\xDA\xE\xDA\x1743\v\xDA\x3\xDA\x3\xDA\x3"+
		"\xDA\x3\xDA\x3\xDA\x5\xDA\x174A\n\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA"+
		"\x3\xDA\x5\xDA\x1752\n\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x1758\n"+
		"\xDA\x3\xDA\x3\xDA\x3\xDA\a\xDA\x175D\n\xDA\f\xDA\xE\xDA\x1760\v\xDA\x3"+
		"\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5\xDA\x1769\n\xDA\x3\xDA"+
		"\x3\xDA\x3\xDA\x5\xDA\x176E\n\xDA\x3\xDB\x3\xDB\x3\xDB\x3\xDB\x3\xDB\x3"+
		"\xDB\x3\xDB\x3\xDB\x5\xDB\x1778\n\xDB\x3\xDB\x3\xDB\x3\xDB\x3\xDB\x5\xDB"+
		"\x177E\n\xDB\x3\xDB\x3\xDB\x3\xDB\x3\xDB\x3\xDB\x3\xDB\x3\xDB\x3\xDB\x3"+
		"\xDB\x3\xDB\x5\xDB\x178A\n\xDB\x5\xDB\x178C\n\xDB\x3\xDC\x3\xDC\x3\xDC"+
		"\x3\xDC\x3\xDC\x5\xDC\x1793\n\xDC\x3\xDC\x3\xDC\x3\xDC\x3\xDC\x5\xDC\x1799"+
		"\n\xDC\x3\xDC\x3\xDC\x3\xDC\x3\xDC\x5\xDC\x179F\n\xDC\x3\xDC\x3\xDC\x3"+
		"\xDC\x3\xDC\x5\xDC\x17A5\n\xDC\x3\xDC\x3\xDC\x3\xDC\x6\xDC\x17AA\n\xDC"+
		"\r\xDC\xE\xDC\x17AB\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x5\xDD\x17B3\n"+
		"\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x5\xDD\x17BB\n\xDD\x3\xDD"+
		"\x3\xDD\x3\xDD\x3\xDD\x5\xDD\x17C1\n\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3"+
		"\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x6\xDD\x17CF\n\xDD"+
		"\r\xDD\xE\xDD\x17D0\x3\xDD\x5\xDD\x17D4\n\xDD\x3\xDD\x3\xDD\x3\xDD\x5"+
		"\xDD\x17D9\n\xDD\x5\xDD\x17DB\n\xDD\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE"+
		"\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x5\xDE\x17E7\n\xDE\x3\xDE\x3\xDE\x3"+
		"\xDE\x3\xDE\x5\xDE\x17ED\n\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE"+
		"\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x6\xDE\x17FB\n\xDE\r\xDE\xE"+
		"\xDE\x17FC\x3\xDE\x5\xDE\x1800\n\xDE\x3\xDE\x3\xDE\x3\xDE\x5\xDE\x1805"+
		"\n\xDE\x3\xDE\x5\xDE\x1808\n\xDE\x3\xDE\x3\xDE\x3\xDE\x5\xDE\x180D\n\xDE"+
		"\x5\xDE\x180F\n\xDE\x3\xDF\x3\xDF\x3\xDF\x3\xDF\x3\xDF\x3\xDF\x3\xDF\x5"+
		"\xDF\x1818\n\xDF\x3\xDF\x3\xDF\x3\xDF\x3\xDF\x3\xDF\x5\xDF\x181F\n\xDF"+
		"\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0"+
		"\x5\xE0\x182B\n\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE1\x3"+
		"\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x5\xE1\x183B\n\xE1\x3\xE1"+
		"\x3\xE1\x3\xE1\x3\xE1\x3\xE1\a\xE1\x1842\n\xE1\f\xE1\xE\xE1\x1845\v\xE1"+
		"\x3\xE1\x3\xE1\x3\xE2\x3\xE2\x3\xE2\x3\xE2\x5\xE2\x184D\n\xE2\x3\xE2\x5"+
		"\xE2\x1850\n\xE2\x3\xE2\x3\xE2\x3\xE2\x5\xE2\x1855\n\xE2\x3\xE3\x3\xE3"+
		"\x3\xE3\x3\xE3\x3\xE3\x5\xE3\x185C\n\xE3\x5\xE3\x185E\n\xE3\x3\xE3\x3"+
		"\xE3\x3\xE3\x3\xE3\x5\xE3\x1864\n\xE3\x5\xE3\x1866\n\xE3\x3\xE3\x3\xE3"+
		"\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x5\xE3\x186E\n\xE3\x5\xE3\x1870\n\xE3\x3"+
		"\xE3\x3\xE3\x3\xE3\x3\xE3\x5\xE3\x1876\n\xE3\x5\xE3\x1878\n\xE3\x3\xE3"+
		"\x3\xE3\x3\xE3\x3\xE3\x5\xE3\x187E\n\xE3\x5\xE3\x1880\n\xE3\x3\xE3\x3"+
		"\xE3\x3\xE3\x3\xE3\x3\xE3\x5\xE3\x1887\n\xE3\x3\xE3\x5\xE3\x188A\n\xE3"+
		"\x5\xE3\x188C\n\xE3\x3\xE3\x5\xE3\x188F\n\xE3\x3\xE3\x3\xE3\x5\xE3\x1893"+
		"\n\xE3\x5\xE3\x1895\n\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x3"+
		"\xE3\x3\xE3\x5\xE3\x189F\n\xE3\x3\xE4\x3\xE4\x3\xE4\x3\xE4\x5\xE4\x18A5"+
		"\n\xE4\x3\xE4\x3\xE4\x5\xE4\x18A9\n\xE4\x3\xE5\x3\xE5\x3\xE5\x3\xE5\x3"+
		"\xE5\x3\xE5\x5\xE5\x18B1\n\xE5\x3\xE5\x3\xE5\x3\xE5\x3\xE5\x3\xE5\x5\xE5"+
		"\x18B8\n\xE5\x3\xE5\x3\xE5\x3\xE5\x3\xE5\x5\xE5\x18BE\n\xE5\x5\xE5\x18C0"+
		"\n\xE5\x3\xE6\x3\xE6\x3\xE6\x3\xE6\x3\xE7\x3\xE7\x3\xE7\x3\xE7\x3\xE7"+
		"\x5\xE7\x18CB\n\xE7\x3\xE7\x3\xE7\x3\xE7\x5\xE7\x18D0\n\xE7\x3\xE7\x3"+
		"\xE7\x3\xE7\x3\xE7\x5\xE7\x18D6\n\xE7\x6\xE7\x18D8\n\xE7\r\xE7\xE\xE7"+
		"\x18D9\x3\xE7\x3\xE7\x3\xE8\x3\xE8\x3\xE8\x3\xE8\x3\xE8\x3\xE8\x5\xE8"+
		"\x18E4\n\xE8\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x5\xE9\x18EC\n"+
		"\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3"+
		"\xE9\x5\xE9\x18F8\n\xE9\x3\xEA\x5\xEA\x18FB\n\xEA\x3\xEA\x3\xEA\x3\xEA"+
		"\x3\xEA\x3\xEA\x3\xEA\x5\xEA\x1903\n\xEA\x5\xEA\x1905\n\xEA\x3\xEA\x5"+
		"\xEA\x1908\n\xEA\x3\xEA\x3\xEA\x5\xEA\x190C\n\xEA\x3\xEA\x5\xEA\x190F"+
		"\n\xEA\x3\xEA\x3\xEA\x3\xEA\x3\xEA\x3\xEA\x6\xEA\x1916\n\xEA\r\xEA\xE"+
		"\xEA\x1917\x3\xEA\x5\xEA\x191B\n\xEA\x3\xEA\x5\xEA\x191E\n\xEA\x3\xEA"+
		"\x3\xEA\x3\xEB\x3\xEB\x3\xEB\x3\xEB\x5\xEB\x1926\n\xEB\x3\xEB\x3\xEB\x6"+
		"\xEB\x192A\n\xEB\r\xEB\xE\xEB\x192B\x3\xEB\x3\xEB\x3\xEB\x3\xEB\x3\xEB"+
		"\x5\xEB\x1933\n\xEB\x3\xEB\x3\xEB\x5\xEB\x1937\n\xEB\x3\xEB\x3\xEB\x3"+
		"\xEB\x3\xEB\x3\xEB\x3\xEB\x3\xEB\x3\xEB\x3\xEB\x5\xEB\x1942\n\xEB\x3\xEB"+
		"\x3\xEB\x6\xEB\x1946\n\xEB\r\xEB\xE\xEB\x1947\x5\xEB\x194A\n\xEB\x3\xEC"+
		"\x3\xEC\x3\xEC\x3\xEC\x3\xEC\a\xEC\x1951\n\xEC\f\xEC\xE\xEC\x1954\v\xEC"+
		"\x3\xEC\x5\xEC\x1957\n\xEC\x3\xED\x3\xED\x3\xED\x3\xED\x3\xED\x5\xED\x195E"+
		"\n\xED\x3\xED\x3\xED\x3\xED\x5\xED\x1963\n\xED\x3\xEE\x5\xEE\x1966\n\xEE"+
		"\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x5\xEE\x196E\n\xEE\x3\xEE\x3"+
		"\xEE\x5\xEE\x1972\n\xEE\x3\xEE\x5\xEE\x1975\n\xEE\x3\xEE\x3\xEE\x5\xEE"+
		"\x1979\n\xEE\x3\xEE\x5\xEE\x197C\n\xEE\x3\xEE\x3\xEE\x5\xEE\x1980\n\xEE"+
		"\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x5\xEE\x1987\n\xEE\x3\xEE\x3\xEE\x5"+
		"\xEE\x198B\n\xEE\x5\xEE\x198D\n\xEE\x5\xEE\x198F\n\xEE\x3\xEE\x5\xEE\x1992"+
		"\n\xEE\x3\xEE\x5\xEE\x1995\n\xEE\x3\xEE\x5\xEE\x1998\n\xEE\x3\xEF\x3\xEF"+
		"\x3\xEF\x3\xEF\x5\xEF\x199E\n\xEF\x3\xF0\x5\xF0\x19A1\n\xF0\x3\xF0\x3"+
		"\xF0\x3\xF0\x3\xF0\x3\xF0\x3\xF0\x5\xF0\x19A9\n\xF0\x5\xF0\x19AB\n\xF0"+
		"\x3\xF0\x5\xF0\x19AE\n\xF0\x3\xF0\x3\xF0\x5\xF0\x19B2\n\xF0\x3\xF0\x5"+
		"\xF0\x19B5\n\xF0\x3\xF0\x3\xF0\x3\xF0\x3\xF0\x5\xF0\x19BB\n\xF0\x3\xF0"+
		"\x5\xF0\x19BE\n\xF0\x3\xF0\x3\xF0\x5\xF0\x19C2\n\xF0\x3\xF0\x5\xF0\x19C5"+
		"\n\xF0\x3\xF0\x5\xF0\x19C8\n\xF0\x3\xF1\x3\xF1\x3\xF1\x3\xF1\x3\xF1\x5"+
		"\xF1\x19CF\n\xF1\x3\xF2\x5\xF2\x19D2\n\xF2\x3\xF2\x3\xF2\x3\xF2\x3\xF2"+
		"\x5\xF2\x19D8\n\xF2\x3\xF2\x3\xF2\x3\xF2\x3\xF2\x3\xF2\x3\xF2\x3\xF2\x3"+
		"\xF2\x5\xF2\x19E2\n\xF2\x3\xF2\x5\xF2\x19E5\n\xF2\x3\xF3\x5\xF3\x19E8"+
		"\n\xF3\x3\xF3\x3\xF3\x3\xF4\x3\xF4\x5\xF4\x19EE\n\xF4\x3\xF4\x5\xF4\x19F1"+
		"\n\xF4\x3\xF4\x5\xF4\x19F4\n\xF4\x3\xF4\x5\xF4\x19F7\n\xF4\x3\xF5\x3\xF5"+
		"\x5\xF5\x19FB\n\xF5\x3\xF6\x5\xF6\x19FE\n\xF6\x3\xF6\x3\xF6\x3\xF6\x3"+
		"\xF6\x3\xF6\x3\xF6\x5\xF6\x1A06\n\xF6\x5\xF6\x1A08\n\xF6\x3\xF6\x3\xF6"+
		"\x5\xF6\x1A0C\n\xF6\x3\xF6\x5\xF6\x1A0F\n\xF6\x3\xF6\x3\xF6\x3\xF6\x3"+
		"\xF6\a\xF6\x1A15\n\xF6\f\xF6\xE\xF6\x1A18\v\xF6\x3\xF6\x5\xF6\x1A1B\n"+
		"\xF6\x3\xF6\x3\xF6\x5\xF6\x1A1F\n\xF6\x3\xF6\x3\xF6\x3\xF6\x3\xF6\x3\xF6"+
		"\x5\xF6\x1A26\n\xF6\x3\xF6\x3\xF6\x5\xF6\x1A2A\n\xF6\x5\xF6\x1A2C\n\xF6"+
		"\x5\xF6\x1A2E\n\xF6\x3\xF6\x5\xF6\x1A31\n\xF6\x3\xF6\x5\xF6\x1A34\n\xF6"+
		"\x3\xF6\x5\xF6\x1A37\n\xF6\x3\xF7\x3\xF7\x3\xF7\x3\xF7\a\xF7\x1A3D\n\xF7"+
		"\f\xF7\xE\xF7\x1A40\v\xF7\x3\xF7\x3\xF7\x3\xF7\x5\xF7\x1A45\n\xF7\x3\xF7"+
		"\x3\xF7\x3\xF7\x3\xF7\x5\xF7\x1A4B\n\xF7\x5\xF7\x1A4D\n\xF7\x3\xF8\x3"+
		"\xF8\x5\xF8\x1A51\n\xF8\x3\xF8\x5\xF8\x1A54\n\xF8\x3\xF9\x3\xF9\x3\xF9"+
		"\x3\xF9\x3\xF9\x3\xF9\x5\xF9\x1A5C\n\xF9\x3\xF9\x3\xF9\x5\xF9\x1A60\n"+
		"\xF9\x3\xF9\x3\xF9\x3\xF9\a\xF9\x1A65\n\xF9\f\xF9\xE\xF9\x1A68\v\xF9\x5"+
		"\xF9\x1A6A\n\xF9\x3\xF9\x3\xF9\x3\xF9\x3\xF9\x3\xF9\a\xF9\x1A71\n\xF9"+
		"\f\xF9\xE\xF9\x1A74\v\xF9\x5\xF9\x1A76\n\xF9\x3\xF9\x3\xF9\x5\xF9\x1A7A"+
		"\n\xF9\x3\xF9\x3\xF9\x3\xF9\x3\xF9\a\xF9\x1A80\n\xF9\f\xF9\xE\xF9\x1A83"+
		"\v\xF9\x5\xF9\x1A85\n\xF9\x3\xFA\x3\xFA\x3\xFA\x3\xFA\x3\xFA\x3\xFA\x5"+
		"\xFA\x1A8D\n\xFA\x3\xFA\x3\xFA\x5\xFA\x1A91\n\xFA\x3\xFA\x3\xFA\x3\xFA"+
		"\a\xFA\x1A96\n\xFA\f\xFA\xE\xFA\x1A99\v\xFA\x5\xFA\x1A9B\n\xFA\x3\xFA"+
		"\x3\xFA\x3\xFA\x3\xFA\a\xFA\x1AA1\n\xFA\f\xFA\xE\xFA\x1AA4\v\xFA\x3\xFA"+
		"\x3\xFA\x5\xFA\x1AA8\n\xFA\x3\xFA\x3\xFA\x3\xFA\x3\xFA\x3\xFA\a\xFA\x1AAF"+
		"\n\xFA\f\xFA\xE\xFA\x1AB2\v\xFA\x5\xFA\x1AB4\n\xFA\x3\xFA\x3\xFA\x5\xFA"+
		"\x1AB8\n\xFA\x3\xFA\x3\xFA\x3\xFA\x3\xFA\a\xFA\x1ABE\n\xFA\f\xFA\xE\xFA"+
		"\x1AC1\v\xFA\x5\xFA\x1AC3\n\xFA\x3\xFB\x3\xFB\x3\xFB\x3\xFB\x3\xFB\x3"+
		"\xFB\x3\xFB\x3\xFB\x3\xFB\x3\xFB\x5\xFB\x1ACF\n\xFB\x3\xFC\x3\xFC\x5\xFC"+
		"\x1AD3\n\xFC\x3\xFC\x5\xFC\x1AD6\n\xFC\x3\xFC\x3\xFC\x3\xFC\x3\xFC\x3"+
		"\xFC\x3\xFC\x3\xFC\x3\xFC\x3\xFC\x3\xFC\x3\xFC\x3\xFC\x5\xFC\x1AE4\n\xFC"+
		"\x3\xFC\x3\xFC\x5\xFC\x1AE8\n\xFC\x3\xFC\x5\xFC\x1AEB\n\xFC\x3\xFC\x3"+
		"\xFC\x5\xFC\x1AEF\n\xFC\x3\xFC\x5\xFC\x1AF2\n\xFC\x3\xFD\x3\xFD\x3\xFD"+
		"\x3\xFD\x3\xFD\a\xFD\x1AF9\n\xFD\f\xFD\xE\xFD\x1AFC\v\xFD\x3\xFD\x3\xFD"+
		"\x3\xFE\x3\xFE\x3\xFE\x3\xFE\x3\xFE\x3\xFE\x3\xFE\x5\xFE\x1B07\n\xFE\x3"+
		"\xFF\x3\xFF\x3\xFF\x3\xFF\x3\xFF\x3\xFF\x3\xFF\x3\xFF\x3\xFF\x5\xFF\x1B12"+
		"\n\xFF\x3\x100\x3\x100\x3\x100\x3\x100\x3\x100\a\x100\x1B19\n\x100\f\x100"+
		"\xE\x100\x1B1C\v\x100\x3\x100\x3\x100\x3\x101\x3\x101\x3\x101\x3\x101"+
		"\x3\x101\x3\x101\x3\x101\x5\x101\x1B27\n\x101\x3\x101\x5\x101\x1B2A\n"+
		"\x101\x3\x102\x3\x102\x3\x102\x3\x102\x5\x102\x1B30\n\x102\x3\x102\x5"+
		"\x102\x1B33\n\x102\x3\x103\x3\x103\x3\x103\x3\x103\x3\x103\a\x103\x1B3A"+
		"\n\x103\f\x103\xE\x103\x1B3D\v\x103\x3\x103\x3\x103\x3\x104\x3\x104\x3"+
		"\x104\x3\x104\x3\x104\x3\x104\x5\x104\x1B47\n\x104\x3\x105\x3\x105\x3"+
		"\x105\x3\x105\x3\x105\a\x105\x1B4E\n\x105\f\x105\xE\x105\x1B51\v\x105"+
		"\x3\x105\x3\x105\x3\x106\x3\x106\x3\x106\x3\x106\x3\x106\x3\x106\x3\x106"+
		"\x3\x106\x3\x106\x3\x106\x3\x106\x3\x106\x3\x106\x3\x106\x3\x106\x3\x106"+
		"\x3\x106\x3\x106\x3\x106\x5\x106\x1B68\n\x106\x5\x106\x1B6A\n\x106\x3"+
		"\x107\x3\x107\x3\x107\x3\x107\x5\x107\x1B70\n\x107\x3\x107\x5\x107\x1B73"+
		"\n\x107\x3\x107\x3\x107\x3\x107\x3\x107\x3\x107\x5\x107\x1B7A\n\x107\x5"+
		"\x107\x1B7C\n\x107\x3\x108\x3\x108\x3\x108\x3\x108\x3\x108\a\x108\x1B83"+
		"\n\x108\f\x108\xE\x108\x1B86\v\x108\x3\x108\x3\x108\x3\x109\x3\x109\x3"+
		"\x109\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109"+
		"\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109"+
		"\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109\x5\x109\x1BA3\n\x109\x3\x109"+
		"\x5\x109\x1BA6\n\x109\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109"+
		"\x3\x109\x5\x109\x1BAF\n\x109\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109"+
		"\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109\x3\x109\x5\x109"+
		"\x1BBE\n\x109\x3\x109\x3\x109\x3\x109\x3\x109\x5\x109\x1BC4\n\x109\x5"+
		"\x109\x1BC6\n\x109\x3\x10A\x3\x10A\x3\x10A\x3\x10A\x3\x10A\a\x10A\x1BCD"+
		"\n\x10A\f\x10A\xE\x10A\x1BD0\v\x10A\x3\x10A\x3\x10A\x3\x10B\x3\x10B\x3"+
		"\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B"+
		"\x3\x10B\x3\x10B\x5\x10B\x1BE1\n\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B"+
		"\x5\x10B\x1BE7\n\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B"+
		"\x3\x10B\x5\x10B\x1BF0\n\x10B\x3\x10B\x5\x10B\x1BF3\n\x10B\x5\x10B\x1BF5"+
		"\n\x10B\x3\x10C\x3\x10C\x3\x10C\x3\x10C\x3\x10C\x3\x10C\x5\x10C\x1BFD"+
		"\n\x10C\x3\x10C\x3\x10C\x3\x10C\x3\x10C\x5\x10C\x1C03\n\x10C\a\x10C\x1C05"+
		"\n\x10C\f\x10C\xE\x10C\x1C08\v\x10C\x3\x10C\x3\x10C\x3\x10D\x3\x10D\x3"+
		"\x10D\x5\x10D\x1C0F\n\x10D\x5\x10D\x1C11\n\x10D\x3\x10D\x3\x10D\x3\x10D"+
		"\x3\x10D\x3\x10D\x3\x10D\x5\x10D\x1C19\n\x10D\x3\x10D\x3\x10D\x5\x10D"+
		"\x1C1D\n\x10D\x3\x10D\x5\x10D\x1C20\n\x10D\x3\x10E\x3\x10E\x3\x10E\x3"+
		"\x10E\x3\x10E\a\x10E\x1C27\n\x10E\f\x10E\xE\x10E\x1C2A\v\x10E\x3\x10E"+
		"\x3\x10E\x3\x10F\x3\x10F\x3\x10F\x3\x10F\x3\x10F\x3\x10F\x3\x10F\x3\x10F"+
		"\x3\x10F\x3\x10F\x3\x10F\x3\x10F\x3\x10F\x5\x10F\x1C3B\n\x10F\x3\x10F"+
		"\x3\x10F\x3\x10F\x3\x10F\x5\x10F\x1C41\n\x10F\x5\x10F\x1C43\n\x10F\x3"+
		"\x110\x3\x110\x5\x110\x1C47\n\x110\x3\x110\x3\x110\x3\x110\x3\x110\x3"+
		"\x110\x3\x110\x3\x110\x3\x110\x3\x110\x3\x110\x5\x110\x1C53\n\x110\x3"+
		"\x110\x5\x110\x1C56\n\x110\x3\x110\x3\x110\x5\x110\x1C5A\n\x110\x3\x110"+
		"\x5\x110\x1C5D\n\x110\x3\x111\x3\x111\x5\x111\x1C61\n\x111\x3\x111\x3"+
		"\x111\x3\x111\x3\x111\x3\x111\x3\x111\x3\x111\x3\x111\x3\x111\x3\x111"+
		"\x3\x111\x3\x111\x3\x111\x3\x111\x5\x111\x1C71\n\x111\x5\x111\x1C73\n"+
		"\x111\x5\x111\x1C75\n\x111\x3\x111\x5\x111\x1C78\n\x111\x3\x111\x5\x111"+
		"\x1C7B\n\x111\x3\x112\x3\x112\x3\x112\x3\x112\x3\x112\a\x112\x1C82\n\x112"+
		"\f\x112\xE\x112\x1C85\v\x112\x3\x112\x3\x112\x3\x113\x3\x113\x3\x113\x3"+
		"\x113\x3\x113\x3\x113\x3\x113\x3\x113\x3\x113\x3\x113\x3\x113\x3\x113"+
		"\x3\x113\x3\x113\x3\x113\x3\x113\x3\x113\x3\x113\x3\x113\x3\x113\x3\x113"+
		"\x3\x113\x5\x113\x1C9F\n\x113\x3\x113\x5\x113\x1CA2\n\x113\x3\x113\x3"+
		"\x113\x3\x113\x3\x113\x3\x113\x3\x113\x3\x113\x3\x113\x3\x113\x3\x113"+
		"\x3\x113\x3\x113\x5\x113\x1CB0\n\x113\x3\x114\x3\x114\x3\x114\x5\x114"+
		"\x1CB5\n\x114\x3\x114\x5\x114\x1CB8\n\x114\x3\x114\x3\x114\x3\x114\x3"+
		"\x114\x5\x114\x1CBE\n\x114\x3\x114\x5\x114\x1CC1\n\x114\x3\x114\x3\x114"+
		"\x3\x114\a\x114\x1CC6\n\x114\f\x114\xE\x114\x1CC9\v\x114\x3\x114\x5\x114"+
		"\x1CCC\n\x114\x5\x114\x1CCE\n\x114\x3\x114\x3\x114\x3\x114\x3\x114\a\x114"+
		"\x1CD4\n\x114\f\x114\xE\x114\x1CD7\v\x114\x5\x114\x1CD9\n\x114\x3\x114"+
		"\x3\x114\x5\x114\x1CDD\n\x114\x3\x114\x3\x114\x3\x114\a\x114\x1CE2\n\x114"+
		"\f\x114\xE\x114\x1CE5\v\x114\x5\x114\x1CE7\n\x114\x3\x115\x3\x115\x3\x115"+
		"\x3\x115\x3\x115\x3\x115\x3\x115\x3\x115\x3\x116\x3\x116\x5\x116\x1CF3"+
		"\n\x116\x3\x117\x3\x117\x3\x117\x5\x117\x1CF8\n\x117\x3\x117\x5\x117\x1CFB"+
		"\n\x117\x3\x117\x3\x117\x3\x117\x3\x117\x3\x117\x3\x117\x3\x117\x3\x117"+
		"\a\x117\x1D05\n\x117\f\x117\xE\x117\x1D08\v\x117\x5\x117\x1D0A\n\x117"+
		"\x3\x117\x3\x117\x3\x117\x3\x117\x5\x117\x1D10\n\x117\x3\x117\x3\x117"+
		"\x3\x117\a\x117\x1D15\n\x117\f\x117\xE\x117\x1D18\v\x117\x3\x117\x3\x117"+
		"\x5\x117\x1D1C\n\x117\x3\x117\x3\x117\x3\x117\x5\x117\x1D21\n\x117\x3"+
		"\x117\x3\x117\x6\x117\x1D25\n\x117\r\x117\xE\x117\x1D26\x3\x118\x3\x118"+
		"\x5\x118\x1D2B\n\x118\x3\x119\x3\x119\x3\x11A\x3\x11A\x3\x11A\x5\x11A"+
		"\x1D32\n\x11A\x3\x11A\x5\x11A\x1D35\n\x11A\x3\x11A\x3\x11A\x3\x11A\x3"+
		"\x11A\x3\x11A\x3\x11A\x5\x11A\x1D3D\n\x11A\x3\x11A\x3\x11A\x3\x11A\x3"+
		"\x11A\a\x11A\x1D43\n\x11A\f\x11A\xE\x11A\x1D46\v\x11A\x5\x11A\x1D48\n"+
		"\x11A\x3\x11A\x3\x11A\x3\x11A\x3\x11A\a\x11A\x1D4E\n\x11A\f\x11A\xE\x11A"+
		"\x1D51\v\x11A\x3\x11A\x3\x11A\x6\x11A\x1D55\n\x11A\r\x11A\xE\x11A\x1D56"+
		"\x3\x11B\x3\x11B\x3\x11C\x3\x11C\x3\x11C\x5\x11C\x1D5E\n\x11C\x3\x11C"+
		"\x5\x11C\x1D61\n\x11C\x3\x11C\x3\x11C\x3\x11C\x3\x11C\x3\x11C\x3\x11C"+
		"\a\x11C\x1D69\n\x11C\f\x11C\xE\x11C\x1D6C\v\x11C\x3\x11C\x3\x11C\x3\x11C"+
		"\x3\x11C\x5\x11C\x1D72\n\x11C\x3\x11C\x3\x11C\x3\x11C\x5\x11C\x1D77\n"+
		"\x11C\x3\x11C\x5\x11C\x1D7A\n\x11C\x3\x11D\x3\x11D\x3\x11D\x3\x11D\x3"+
		"\x11D\x3\x11D\a\x11D\x1D82\n\x11D\f\x11D\xE\x11D\x1D85\v\x11D\x5\x11D"+
		"\x1D87\n\x11D\x3\x11D\x5\x11D\x1D8A\n\x11D\x3\x11D\x3\x11D\x3\x11D\x5"+
		"\x11D\x1D8F\n\x11D\x3\x11D\x3\x11D\x5\x11D\x1D93\n\x11D\x5\x11D\x1D95"+
		"\n\x11D\x3\x11E\x3\x11E\x3\x11E\x3\x11E\x3\x11E\x3\x11E\x3\x11E\a\x11E"+
		"\x1D9E\n\x11E\f\x11E\xE\x11E\x1DA1\v\x11E\x5\x11E\x1DA3\n\x11E\x3\x11E"+
		"\x5\x11E\x1DA6\n\x11E\x3\x11E\x3\x11E\x3\x11E\a\x11E\x1DAB\n\x11E\f\x11E"+
		"\xE\x11E\x1DAE\v\x11E\x3\x11E\x3\x11E\x5\x11E\x1DB2\n\x11E\x3\x11E\x3"+
		"\x11E\x5\x11E\x1DB6\n\x11E\x5\x11E\x1DB8\n\x11E\x3\x11F\x3\x11F\x3\x11F"+
		"\x3\x11F\x3\x11F\x3\x11F\a\x11F\x1DC0\n\x11F\f\x11F\xE\x11F\x1DC3\v\x11F"+
		"\x5\x11F\x1DC5\n\x11F\x3\x11F\x5\x11F\x1DC8\n\x11F\x3\x11F\x3\x11F\x3"+
		"\x11F\a\x11F\x1DCD\n\x11F\f\x11F\xE\x11F\x1DD0\v\x11F\x3\x11F\x3\x11F"+
		"\x3\x11F\x5\x11F\x1DD5\n\x11F\x3\x11F\x3\x11F\x5\x11F\x1DD9\n\x11F\x3"+
		"\x120\x3\x120\x3\x120\x3\x120\x5\x120\x1DDF\n\x120\x3\x121\x3\x121\x5"+
		"\x121\x1DE3\n\x121\x3\x121\x3\x121\x3\x121\x5\x121\x1DE8\n\x121\x3\x121"+
		"\x3\x121\x5\x121\x1DEC\n\x121\x3\x121\x3\x121\x3\x121\x5\x121\x1DF1\n"+
		"\x121\x3\x121\x5\x121\x1DF4\n\x121\x3\x122\x3\x122\x3\x122\x5\x122\x1DF9"+
		"\n\x122\x3\x123\x3\x123\x3\x123\x3\x123\x3\x123\x3\x123\x3\x123\x3\x123"+
		"\x3\x123\x3\x123\x3\x123\x3\x123\x5\x123\x1E07\n\x123\x3\x124\x3\x124"+
		"\x3\x124\x3\x124\x3\x124\x3\x124\x5\x124\x1E0F\n\x124\x3\x124\x3\x124"+
		"\x5\x124\x1E13\n\x124\x3\x124\x3\x124\x3\x124\x3\x124\x5\x124\x1E19\n"+
		"\x124\x3\x124\x5\x124\x1E1C\n\x124\x3\x125\x3\x125\x3\x125\x3\x125\x3"+
		"\x125\x3\x125\x3\x125\x3\x125\x3\x125\x5\x125\x1E27\n\x125\x3\x126\x3"+
		"\x126\x5\x126\x1E2B\n\x126\x3\x126\x3\x126\x3\x126\x5\x126\x1E30\n\x126"+
		"\x3\x126\x5\x126\x1E33\n\x126\x3\x127\x3\x127\x3\x127\x3\x127\a\x127\x1E39"+
		"\n\x127\f\x127\xE\x127\x1E3C\v\x127\x3\x128\x3\x128\x5\x128\x1E40\n\x128"+
		"\x3\x128\x3\x128\x3\x128\x5\x128\x1E45\n\x128\x3\x128\x3\x128\x3\x128"+
		"\x3\x128\x5\x128\x1E4B\n\x128\x3\x128\x3\x128\x3\x128\x5\x128\x1E50\n"+
		"\x128\x3\x128\x3\x128\x5\x128\x1E54\n\x128\x3\x128\x3\x128\x3\x128\x3"+
		"\x128\x3\x128\x3\x128\x3\x128\x3\x128\x3\x128\x3\x128\x3\x128\x3\x128"+
		"\x3\x128\x3\x128\x3\x128\x3\x128\x3\x128\x3\x128\x3\x128\x3\x128\x3\x128"+
		"\x3\x128\x5\x128\x1E6C\n\x128\x3\x129\x3\x129\x3\x129\x3\x129\x3\x129"+
		"\x3\x129\x5\x129\x1E74\n\x129\x3\x129\a\x129\x1E77\n\x129\f\x129\xE\x129"+
		"\x1E7A\v\x129\x3\x129\x5\x129\x1E7D\n\x129\x3\x129\x3\x129\x3\x129\x5"+
		"\x129\x1E82\n\x129\x3\x129\a\x129\x1E85\n\x129\f\x129\xE\x129\x1E88\v"+
		"\x129\x3\x129\x3\x129\x3\x129\x5\x129\x1E8D\n\x129\x3\x129\x3\x129\x3"+
		"\x129\x5\x129\x1E92\n\x129\x3\x129\x5\x129\x1E95\n\x129\x3\x12A\x3\x12A"+
		"\x3\x12A\x5\x12A\x1E9A\n\x12A\x3\x12A\x3\x12A\x3\x12A\x3\x12A\x5\x12A"+
		"\x1EA0\n\x12A\x3\x12A\x3\x12A\x5\x12A\x1EA4\n\x12A\x3\x12B\x3\x12B\x3"+
		"\x12B\x3\x12B\x3\x12B\a\x12B\x1EAB\n\x12B\f\x12B\xE\x12B\x1EAE\v\x12B"+
		"\x3\x12B\x3\x12B\x3\x12B\x3\x12B\x3\x12B\a\x12B\x1EB5\n\x12B\f\x12B\xE"+
		"\x12B\x1EB8\v\x12B\x5\x12B\x1EBA\n\x12B\x3\x12C\x3\x12C\x5\x12C\x1EBE"+
		"\n\x12C\x3\x12C\x3\x12C\x3\x12C\x3\x12C\x3\x12C\x5\x12C\x1EC5\n\x12C\x3"+
		"\x12C\x3\x12C\x3\x12C\x3\x12C\x3\x12C\x3\x12C\x3\x12C\x3\x12C\x3\x12C"+
		"\x3\x12C\x3\x12C\x3\x12C\x3\x12C\x3\x12C\x3\x12C\x3\x12C\x3\x12C\x3\x12C"+
		"\x3\x12C\x5\x12C\x1EDA\n\x12C\x3\x12C\x3\x12C\x3\x12C\x5\x12C\x1EDF\n"+
		"\x12C\a\x12C\x1EE1\n\x12C\f\x12C\xE\x12C\x1EE4\v\x12C\x3\x12C\x3\x12C"+
		"\x3\x12C\x3\x12C\x3\x12C\x3\x12C\x5\x12C\x1EEC\n\x12C\x3\x12C\x3\x12C"+
		"\x3\x12C\x3\x12C\x5\x12C\x1EF2\n\x12C\x5\x12C\x1EF4\n\x12C\x3\x12D\x3"+
		"\x12D\x3\x12D\x3\x12D\x3\x12D\a\x12D\x1EFB\n\x12D\f\x12D\xE\x12D\x1EFE"+
		"\v\x12D\x3\x12D\x3\x12D\x3\x12E\x3\x12E\x3\x12E\x3\x12E\x3\x12E\x3\x12E"+
		"\x3\x12E\x3\x12E\x3\x12E\x3\x12E\x3\x12E\x3\x12E\x3\x12E\x3\x12E\x3\x12E"+
		"\x3\x12E\x3\x12E\x3\x12E\x3\x12E\x3\x12E\x3\x12E\x3\x12E\x3\x12E\x3\x12E"+
		"\x3\x12E\x3\x12E\x3\x12E\x3\x12E\x5\x12E\x1F1E\n\x12E\x3\x12E\x3\x12E"+
		"\x3\x12E\x3\x12E\x5\x12E\x1F24\n\x12E\x5\x12E\x1F26\n\x12E\x3\x12F\x3"+
		"\x12F\x3\x12F\x5\x12F\x1F2B\n\x12F\x3\x12F\x5\x12F\x1F2E\n\x12F\x3\x12F"+
		"\x3\x12F\x3\x12F\x3\x12F\x3\x12F\x3\x12F\x5\x12F\x1F36\n\x12F\x3\x12F"+
		"\x3\x12F\x3\x12F\x3\x12F\a\x12F\x1F3C\n\x12F\f\x12F\xE\x12F\x1F3F\v\x12F"+
		"\x5\x12F\x1F41\n\x12F\x3\x12F\x3\x12F\x3\x12F\x3\x12F\x3\x12F\x5\x12F"+
		"\x1F48\n\x12F\x3\x12F\x5\x12F\x1F4B\n\x12F\x3\x130\x3\x130\x3\x131\x3"+
		"\x131\x3\x131\x3\x131\x3\x131\x3\x131\x3\x131\x3\x131\x3\x131\x3\x131"+
		"\x3\x131\x3\x131\x3\x131\x3\x131\x3\x131\x5\x131\x1F5E\n\x131\x3\x131"+
		"\x3\x131\x3\x131\x3\x131\x3\x131\a\x131\x1F65\n\x131\f\x131\xE\x131\x1F68"+
		"\v\x131\x3\x131\x3\x131\x3\x131\x3\x131\x3\x131\x3\x131\x3\x131\x3\x131"+
		"\x5\x131\x1F72\n\x131\x3\x131\x3\x131\x3\x131\x3\x131\x3\x131\x3\x131"+
		"\x3\x131\x3\x131\x3\x131\x3\x131\x3\x131\x5\x131\x1F7F\n\x131\x3\x131"+
		"\x3\x131\a\x131\x1F83\n\x131\f\x131\xE\x131\x1F86\v\x131\x3\x131\x3\x131"+
		"\x3\x131\x3\x131\x3\x131\x5\x131\x1F8D\n\x131\x3\x131\x3\x131\x3\x131"+
		"\x3\x131\x3\x131\x3\x131\x5\x131\x1F95\n\x131\x3\x131\x3\x131\x3\x131"+
		"\x3\x131\x5\x131\x1F9B\n\x131\x3\x131\x5\x131\x1F9E\n\x131\x3\x132\x5"+
		"\x132\x1FA1\n\x132\x3\x132\x5\x132\x1FA4\n\x132\x3\x132\x3\x132\x3\x132"+
		"\x3\x132\x5\x132\x1FAA\n\x132\x3\x132\x3\x132\x5\x132\x1FAE\n\x132\x3"+
		"\x133\x3\x133\x3\x133\x3\x133\x3\x133\x3\x133\x5\x133\x1FB6\n\x133\x3"+
		"\x133\x3\x133\x3\x133\x3\x133\x3\x133\x3\x133\x3\x134\x3\x134\x3\x134"+
		"\x3\x134\x5\x134\x1FC2\n\x134\x3\x134\x3\x134\x3\x134\x3\x134\x3\x134"+
		"\x3\x134\x3\x134\x3\x134\x3\x134\x3\x134\x5\x134\x1FCE\n\x134\x3\x134"+
		"\x3\x134\x5\x134\x1FD2\n\x134\x3\x134\x5\x134\x1FD5\n\x134\x3\x135\x3"+
		"\x135\x3\x135\x3\x135\x3\x135\a\x135\x1FDC\n\x135\f\x135\xE\x135\x1FDF"+
		"\v\x135\x3\x135\x3\x135\x3\x135\x5\x135\x1FE4\n\x135\x3\x135\x3\x135\x3"+
		"\x135\x3\x135\x3\x135\x3\x135\a\x135\x1FEC\n\x135\f\x135\xE\x135\x1FEF"+
		"\v\x135\x3\x135\x3\x135\x3\x135\x3\x135\x3\x135\x3\x135\x5\x135\x1FF7"+
		"\n\x135\x3\x136\x3\x136\x3\x136\x3\x136\x3\x136\x3\x136\x3\x136\x3\x136"+
		"\x5\x136\x2001\n\x136\x3\x136\x3\x136\x3\x136\x3\x136\x5\x136\x2007\n"+
		"\x136\x3\x136\x3\x136\x3\x136\x3\x136\x5\x136\x200D\n\x136\x3\x136\x3"+
		"\x136\x3\x136\x3\x136\x3\x136\x5\x136\x2014\n\x136\x3\x136\x3\x136\x3"+
		"\x136\x3\x136\x5\x136\x201A\n\x136\x3\x136\x3\x136\x5\x136\x201E\n\x136"+
		"\x3\x136\x3\x136\x3\x137\x3\x137\x3\x137\x3\x137\x3\x137\x3\x137\x3\x137"+
		"\x5\x137\x2029\n\x137\x3\x137\x3\x137\x3\x137\x3\x137\x3\x137\x3\x137"+
		"\x3\x137\x3\x137\x3\x137\x3\x137\x3\x137\x3\x137\x3\x137\x5\x137\x2038"+
		"\n\x137\x5\x137\x203A\n\x137\x3\x138\x3\x138\x3\x139\x3\x139\x3\x139\x3"+
		"\x139\x3\x139\x3\x139\x3\x139\x3\x139\x3\x139\x3\x139\x3\x139\x3\x139"+
		"\x3\x139\x3\x139\x3\x139\x3\x139\x3\x139\x3\x139\x3\x139\x3\x139\x3\x139"+
		"\x3\x139\x3\x139\x3\x139\x3\x139\x5\x139\x2057\n\x139\x3\x13A\x3\x13A"+
		"\x3\x13A\x3\x13A\x3\x13B\x3\x13B\x3\x13B\x3\x13B\x3\x13B\a\x13B\x2062"+
		"\n\x13B\f\x13B\xE\x13B\x2065\v\x13B\x3\x13B\x3\x13B\x3\x13C\x3\x13C\x3"+
		"\x13C\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x3\x13C"+
		"\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x3\x13C"+
		"\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x3\x13C\x3\x13C"+
		"\x3\x13C\x3\x13C\x3\x13C\x5\x13C\x2089\n\x13C\x3\x13D\x3\x13D\x3\x13D"+
		"\x3\x13D\x3\x13D\x3\x13D\x3\x13D\x3\x13D\x3\x13D\x5\x13D\x2094\n\x13D"+
		"\x3\x13D\x3\x13D\x3\x13D\x3\x13D\x3\x13D\x3\x13D\x5\x13D\x209C\n\x13D"+
		"\x3\x13E\x3\x13E\x3\x13E\x3\x13E\x3\x13E\x3\x13E\x3\x13E\a\x13E\x20A5"+
		"\n\x13E\f\x13E\xE\x13E\x20A8\v\x13E\a\x13E\x20AA\n\x13E\f\x13E\xE\x13E"+
		"\x20AD\v\x13E\x5\x13E\x20AF\n\x13E\x3\x13F\x3\x13F\x3\x13F\x3\x13F\x3"+
		"\x13F\x3\x13F\x3\x13F\x5\x13F\x20B8\n\x13F\x3\x140\x3\x140\x3\x140\x3"+
		"\x140\x3\x141\x3\x141\x3\x141\x3\x141\x5\x141\x20C2\n\x141\x3\x142\x3"+
		"\x142\x3\x142\x3\x142\x3\x142\x5\x142\x20C9\n\x142\x3\x142\x3\x142\x3"+
		"\x142\x3\x142\x3\x142\x5\x142\x20D0\n\x142\x5\x142\x20D2\n\x142\x3\x142"+
		"\x3\x142\x3\x142\x3\x142\x3\x142\x3\x142\x3\x142\x3\x142\x3\x142\x3\x142"+
		"\x5\x142\x20DE\n\x142\x3\x142\x3\x142\x3\x142\x3\x142\x3\x142\x3\x142"+
		"\x3\x142\x3\x142\x3\x142\x5\x142\x20E9\n\x142\x3\x142\x3\x142\x5\x142"+
		"\x20ED\n\x142\x3\x142\x3\x142\x3\x142\x5\x142\x20F2\n\x142\x3\x142\x5"+
		"\x142\x20F5\n\x142\x5\x142\x20F7\n\x142\x3\x142\x5\x142\x20FA\n\x142\x3"+
		"\x142\x3\x142\x3\x142\x3\x142\x3\x142\x3\x142\x3\x142\x3\x142\x3\x142"+
		"\x3\x142\x5\x142\x2106\n\x142\x5\x142\x2108\n\x142\x5\x142\x210A\n\x142"+
		"\x3\x142\x5\x142\x210D\n\x142\x3\x142\x3\x142\x3\x142\x5\x142\x2112\n"+
		"\x142\x3\x142\x5\x142\x2115\n\x142\x3\x142\x3\x142\x3\x142\x5\x142\x211A"+
		"\n\x142\x3\x142\x3\x142\x3\x142\x3\x142\x3\x142\x3\x142\x3\x142\x3\x142"+
		"\x5\x142\x2124\n\x142\x3\x142\x3\x142\x5\x142\x2128\n\x142\x3\x142\x3"+
		"\x142\x3\x142\x5\x142\x212D\n\x142\x3\x142\x5\x142\x2130\n\x142\x5\x142"+
		"\x2132\n\x142\x3\x142\x5\x142\x2135\n\x142\x3\x142\x3\x142\x3\x142\x3"+
		"\x142\x3\x142\x3\x142\x3\x142\x3\x142\x3\x142\x3\x142\x5\x142\x2141\n"+
		"\x142\x5\x142\x2143\n\x142\x5\x142\x2145\n\x142\x3\x142\x5\x142\x2148"+
		"\n\x142\x3\x142\x3\x142\x3\x142\x3\x142\x5\x142\x214E\n\x142\x3\x143\x3"+
		"\x143\x3\x144\x3\x144\x3\x144\x3\x144\x3\x144\x3\x144\x5\x144\x2158\n"+
		"\x144\x3\x145\x3\x145\x3\x146\x3\x146\x3\x147\x3\x147\x3\x148\x3\x148"+
		"\x3\x148\x3\x148\x3\x148\x3\x148\x3\x148\x3\x148\x3\x148\x3\x148\x3\x148"+
		"\x3\x148\x5\x148\x216C\n\x148\x3\x149\x3\x149\x3\x149\x3\x149\x5\x149"+
		"\x2172\n\x149\x3\x14A\x3\x14A\x3\x14B\x3\x14B\x3\x14B\x3\x14B\x3\x14B"+
		"\x3\x14C\x3\x14C\x3\x14D\x3\x14D\x3\x14D\x3\x14D\x3\x14E\x3\x14E\x3\x14F"+
		"\x3\x14F\x3\x14F\x3\x14F\x3\x14F\x3\x14F\x3\x14F\x3\x14F\x5\x14F\x218B"+
		"\n\x14F\x5\x14F\x218D\n\x14F\x3\x150\x3\x150\x3\x150\x3\x151\x3\x151\x3"+
		"\x151\x3\x152\x3\x152\x3\x153\x3\x153\x3\x154\x3\x154\x3\x155\x3\x155"+
		"\x3\x155\x3\x155\x3\x156\x3\x156\x3\x156\x3\x156\x3\x156\x3\x156\x3\x156"+
		"\x3\x156\x5\x156\x21A7\n\x156\x3\x156\x3\x156\x3\x156\x3\x156\x5\x156"+
		"\x21AD\n\x156\x3\x156\x3\x156\x3\x156\x3\x156\x3\x156\x3\x156\x3\x156"+
		"\x3\x156\x3\x156\x5\x156\x21B8\n\x156\x3\x157\x3\x157\x3\x157\x3\x157"+
		"\x3\x157\x3\x157\x5\x157\x21C0\n\x157\x3\x157\x5\x157\x21C3\n\x157\x3"+
		"\x158\x3\x158\x3\x158\x3\x159\x3\x159\x3\x159\x3\x15A\x3\x15A\x3\x15A"+
		"\x3\x15A\x3\x15A\x3\x15A\x3\x15A\x3\x15A\x3\x15A\x5\x15A\x21D4\n\x15A"+
		"\x3\x15B\x3\x15B\x3\x15B\x3\x15B\x3\x15B\x3\x15B\x5\x15B\x21DC\n\x15B"+
		"\x3\x15C\x3\x15C\x3\x15C\x3\x15C\x3\x15C\x5\x15C\x21E3\n\x15C\x3\x15D"+
		"\x3\x15D\x3\x15D\x3\x15D\x3\x15D\x3\x15D\x3\x15D\x3\x15D\x3\x15D\x3\x15D"+
		"\x3\x15D\x3\x15D\x3\x15D\x3\x15D\x3\x15D\x3\x15D\x3\x15D\x3\x15D\x3\x15D"+
		"\x3\x15D\x3\x15D\x5\x15D\x21FA\n\x15D\x3\x15E\x3\x15E\x3\x15E\x3\x15E"+
		"\x3\x15E\x3\x15F\x3\x15F\x3\x15F\x3\x15F\x3\x15F\x3\x15F\x5\x15F\x2207"+
		"\n\x15F\x3\x160\x3\x160\x3\x160\x3\x160\x5\x160\x220D\n\x160\x3\x160\x3"+
		"\x160\x3\x160\a\x160\x2212\n\x160\f\x160\xE\x160\x2215\v\x160\x3\x160"+
		"\x3\x160\x3\x160\a\x160\x221A\n\x160\f\x160\xE\x160\x221D\v\x160\x5\x160"+
		"\x221F\n\x160\x3\x160\x5\x160\x2222\n\x160\x3\x161\x3\x161\x3\x161\x3"+
		"\x161\x3\x162\x3\x162\x3\x162\x5\x162\x222B\n\x162\x3\x162\x3\x162\x3"+
		"\x162\x3\x162\x3\x163\x3\x163\x3\x163\x3\x163\x5\x163\x2235\n\x163\x3"+
		"\x163\x3\x163\x3\x163\a\x163\x223A\n\x163\f\x163\xE\x163\x223D\v\x163"+
		"\x3\x163\x5\x163\x2240\n\x163\x3\x164\x3\x164\x5\x164\x2244\n\x164\x3"+
		"\x165\x3\x165\x3\x165\x3\x165\x5\x165\x224A\n\x165\x3\x165\x3\x165\x3"+
		"\x165\a\x165\x224F\n\x165\f\x165\xE\x165\x2252\v\x165\x3\x165\x5\x165"+
		"\x2255\n\x165\x3\x166\x3\x166\x3\x166\x3\x166\x5\x166\x225B\n\x166\x3"+
		"\x166\x3\x166\x3\x166\a\x166\x2260\n\x166\f\x166\xE\x166\x2263\v\x166"+
		"\x3\x166\x3\x166\x3\x166\x3\x166\x5\x166\x2269\n\x166\x3\x166\x5\x166"+
		"\x226C\n\x166\x3\x167\x3\x167\x3\x167\x3\x167\x5\x167\x2272\n\x167\x3"+
		"\x167\x3\x167\x3\x167\a\x167\x2277\n\x167\f\x167\xE\x167\x227A\v\x167"+
		"\x3\x167\x5\x167\x227D\n\x167\x3\x168\x3\x168\x3\x168\x5\x168\x2282\n"+
		"\x168\x3\x168\x3\x168\x3\x168\x5\x168\x2287\n\x168\x3\x168\x6\x168\x228A"+
		"\n\x168\r\x168\xE\x168\x228B\x3\x168\x3\x168\x3\x169\x3\x169\x3\x169\x3"+
		"\x169\x5\x169\x2294\n\x169\x3\x169\x3\x169\x3\x169\a\x169\x2299\n\x169"+
		"\f\x169\xE\x169\x229C\v\x169\x3\x169\x5\x169\x229F\n\x169\x3\x16A\x3\x16A"+
		"\x3\x16A\x3\x16A\x5\x16A\x22A5\n\x16A\x3\x16A\x3\x16A\x3\x16A\a\x16A\x22AA"+
		"\n\x16A\f\x16A\xE\x16A\x22AD\v\x16A\x3\x16A\x5\x16A\x22B0\n\x16A\x3\x16B"+
		"\x3\x16B\x3\x16B\x3\x16B\x3\x16B\x3\x16B\x3\x16B\x3\x16B\x5\x16B\x22BA"+
		"\n\x16B\x5\x16B\x22BC\n\x16B\x3\x16B\x3\x16B\x3\x16B\x3\x16B\x3\x16B\x3"+
		"\x16B\x5\x16B\x22C4\n\x16B\x3\x16C\x3\x16C\x3\x16C\x3\x16C\x5\x16C\x22CA"+
		"\n\x16C\x3\x16C\x3\x16C\x3\x16D\x3\x16D\x5\x16D\x22D0\n\x16D\x3\x16E\x3"+
		"\x16E\x3\x16E\x3\x16E\x3\x16E\x3\x16E\x3\x16E\x3\x16F\x3\x16F\x3\x16F"+
		"\x3\x16F\x3\x16F\x3\x16F\x3\x16F\x3\x16F\x5\x16F\x22E1\n\x16F\x3\x16F"+
		"\x3\x16F\x5\x16F\x22E5\n\x16F\x3\x16F\x3\x16F\x3\x16F\x3\x170\x3\x170"+
		"\x3\x170\x5\x170\x22ED\n\x170\x3\x170\x3\x170\x3\x170\x5\x170\x22F2\n"+
		"\x170\x3\x170\x3\x170\x3\x170\x3\x170\a\x170\x22F8\n\x170\f\x170\xE\x170"+
		"\x22FB\v\x170\x3\x170\x3\x170\x3\x170\x5\x170\x2300\n\x170\x3\x170\x3"+
		"\x170\x3\x170\x3\x170\x3\x170\x3\x170\x3\x170\a\x170\x2309\n\x170\f\x170"+
		"\xE\x170\x230C\v\x170\x3\x170\x3\x170\x5\x170\x2310\n\x170\x3\x171\x3"+
		"\x171\x3\x171\x3\x171\x3\x171\x5\x171\x2317\n\x171\x3\x172\x3\x172\x5"+
		"\x172\x231B\n\x172\x3\x172\x3\x172\x5\x172\x231F\n\x172\x3\x172\x3\x172"+
		"\x5\x172\x2323\n\x172\x3\x172\x5\x172\x2326\n\x172\x3\x172\x3\x172\x5"+
		"\x172\x232A\n\x172\x3\x172\x3\x172\x3\x172\x3\x172\x5\x172\x2330\n\x172"+
		"\x3\x172\x3\x172\x5\x172\x2334\n\x172\x5\x172\x2336\n\x172\x3\x173\x3"+
		"\x173\x3\x173\x3\x173\x3\x173\x5\x173\x233D\n\x173\x3\x173\x3\x173\x3"+
		"\x173\a\x173\x2342\n\x173\f\x173\xE\x173\x2345\v\x173\x5\x173\x2347\n"+
		"\x173\x3\x173\x5\x173\x234A\n\x173\x3\x173\x3\x173\x3\x173\a\x173\x234F"+
		"\n\x173\f\x173\xE\x173\x2352\v\x173\x3\x173\x3\x173\x5\x173\x2356\n\x173"+
		"\x3\x173\x6\x173\x2359\n\x173\r\x173\xE\x173\x235A\x3\x173\x3\x173\x5"+
		"\x173\x235F\n\x173\x3\x173\x3\x173\x3\x173\x3\x173\x5\x173\x2365\n\x173"+
		"\x6\x173\x2367\n\x173\r\x173\xE\x173\x2368\x5\x173\x236B\n\x173\x3\x173"+
		"\x3\x173\x3\x173\x5\x173\x2370\n\x173\x3\x173\x6\x173\x2373\n\x173\r\x173"+
		"\xE\x173\x2374\x6\x173\x2377\n\x173\r\x173\xE\x173\x2378\x3\x173\x3\x173"+
		"\x3\x173\x5\x173\x237E\n\x173\x3\x173\x3\x173\x3\x173\x3\x173\x5\x173"+
		"\x2384\n\x173\x6\x173\x2386\n\x173\r\x173\xE\x173\x2387\x6\x173\x238A"+
		"\n\x173\r\x173\xE\x173\x238B\x5\x173\x238E\n\x173\x3\x173\x3\x173\x5\x173"+
		"\x2392\n\x173\x3\x173\x3\x173\x5\x173\x2396\n\x173\x3\x173\x3\x173\x5"+
		"\x173\x239A\n\x173\x3\x173\x3\x173\x5\x173\x239E\n\x173\x3\x173\x3\x173"+
		"\x3\x173\x3\x173\x5\x173\x23A4\n\x173\x3\x173\x5\x173\x23A7\n\x173\x3"+
		"\x173\x3\x173\x3\x173\x3\x173\x5\x173\x23AD\n\x173\x3\x173\x3\x173\x5"+
		"\x173\x23B1\n\x173\x3\x173\x3\x173\x5\x173\x23B5\n\x173\x3\x173\x3\x173"+
		"\x3\x173\x3\x173\x5\x173\x23BB\n\x173\x3\x173\x3\x173\x3\x173\x3\x173"+
		"\x5\x173\x23C1\n\x173\x5\x173\x23C3\n\x173\x3\x173\x5\x173\x23C6\n\x173"+
		"\x3\x173\x3\x173\x5\x173\x23CA\n\x173\x3\x173\x3\x173\x5\x173\x23CE\n"+
		"\x173\x3\x173\x3\x173\x5\x173\x23D2\n\x173\x3\x173\x3\x173\x3\x173\x3"+
		"\x173\x5\x173\x23D8\n\x173\x3\x173\x5\x173\x23DB\n\x173\x3\x173\x3\x173"+
		"\x3\x173\x3\x173\x5\x173\x23E1\n\x173\x3\x173\x3\x173\x3\x173\x3\x173"+
		"\x5\x173\x23E7\n\x173\x3\x173\x5\x173\x23EA\n\x173\x3\x173\x3\x173\x3"+
		"\x173\x3\x173\x5\x173\x23F0\n\x173\x3\x173\x5\x173\x23F3\n\x173\x3\x173"+
		"\x3\x173\x3\x173\x3\x173\x5\x173\x23F9\n\x173\x3\x173\x5\x173\x23FC\n"+
		"\x173\x3\x173\x3\x173\x5\x173\x2400\n\x173\x3\x173\x3\x173\x5\x173\x2404"+
		"\n\x173\x3\x173\x3\x173\x5\x173\x2408\n\x173\x3\x173\x3\x173\x3\x173\x5"+
		"\x173\x240D\n\x173\x3\x173\x5\x173\x2410\n\x173\x3\x173\x3\x173\x5\x173"+
		"\x2414\n\x173\x3\x173\x3\x173\x5\x173\x2418\n\x173\x3\x173\x3\x173\x3"+
		"\x173\x3\x173\x3\x173\x3\x173\x3\x173\x3\x173\x3\x173\x3\x173\x3\x173"+
		"\x3\x173\x3\x173\x3\x173\x3\x173\x5\x173\x2429\n\x173\a\x173\x242B\n\x173"+
		"\f\x173\xE\x173\x242E\v\x173\x5\x173\x2430\n\x173\x3\x174\x3\x174\x3\x174"+
		"\x3\x174\x3\x174\x5\x174\x2437\n\x174\x3\x174\x6\x174\x243A\n\x174\r\x174"+
		"\xE\x174\x243B\x3\x174\x3\x174\x5\x174\x2440\n\x174\x3\x174\x3\x174\x3"+
		"\x174\x3\x174\x5\x174\x2446\n\x174\x6\x174\x2448\n\x174\r\x174\xE\x174"+
		"\x2449\x5\x174\x244C\n\x174\x3\x174\x3\x174\x3\x174\x5\x174\x2451\n\x174"+
		"\x3\x174\x6\x174\x2454\n\x174\r\x174\xE\x174\x2455\x6\x174\x2458\n\x174"+
		"\r\x174\xE\x174\x2459\x3\x174\x3\x174\x3\x174\x5\x174\x245F\n\x174\x3"+
		"\x174\x3\x174\x3\x174\x3\x174\x5\x174\x2465\n\x174\x6\x174\x2467\n\x174"+
		"\r\x174\xE\x174\x2468\x6\x174\x246B\n\x174\r\x174\xE\x174\x246C\x5\x174"+
		"\x246F\n\x174\x3\x174\x3\x174\x5\x174\x2473\n\x174\x3\x174\x3\x174\x5"+
		"\x174\x2477\n\x174\x3\x174\x3\x174\x5\x174\x247B\n\x174\x3\x174\x3\x174"+
		"\x5\x174\x247F\n\x174\x3\x174\x3\x174\x3\x174\x3\x174\x5\x174\x2485\n"+
		"\x174\x3\x174\x5\x174\x2488\n\x174\x3\x174\x3\x174\x3\x174\x3\x174\x5"+
		"\x174\x248E\n\x174\x3\x174\x3\x174\x5\x174\x2492\n\x174\x3\x174\x3\x174"+
		"\x5\x174\x2496\n\x174\x3\x174\x3\x174\x3\x174\x3\x174\x5\x174\x249C\n"+
		"\x174\x3\x174\x3\x174\x3\x174\x3\x174\x5\x174\x24A2\n\x174\x5\x174\x24A4"+
		"\n\x174\x3\x174\x5\x174\x24A7\n\x174\x3\x174\x3\x174\x5\x174\x24AB\n\x174"+
		"\x3\x174\x3\x174\x5\x174\x24AF\n\x174\x3\x174\x3\x174\x5\x174\x24B3\n"+
		"\x174\x3\x174\x3\x174\x3\x174\x3\x174\x5\x174\x24B9\n\x174\x3\x174\x5"+
		"\x174\x24BC\n\x174\x3\x174\x3\x174\x3\x174\x3\x174\x5\x174\x24C2\n\x174"+
		"\x3\x174\x3\x174\x3\x174\x3\x174\x5\x174\x24C8\n\x174\x3\x174\x5\x174"+
		"\x24CB\n\x174\x3\x174\x3\x174\x3\x174\x3\x174\x5\x174\x24D1\n\x174\x3"+
		"\x174\x5\x174\x24D4\n\x174\x3\x174\x3\x174\x3\x174\x3\x174\x5\x174\x24DA"+
		"\n\x174\x3\x174\x5\x174\x24DD\n\x174\x3\x174\x3\x174\x5\x174\x24E1\n\x174"+
		"\x3\x174\x3\x174\x5\x174\x24E5\n\x174\x3\x174\x3\x174\x5\x174\x24E9\n"+
		"\x174\x3\x174\x3\x174\x3\x174\x5\x174\x24EE\n\x174\x3\x174\x5\x174\x24F1"+
		"\n\x174\x3\x174\x3\x174\x5\x174\x24F5\n\x174\x3\x174\x3\x174\x5\x174\x24F9"+
		"\n\x174\x3\x174\x3\x174\x3\x174\x3\x174\x5\x174\x24FF\n\x174\x3\x174\x5"+
		"\x174\x2502\n\x174\x3\x174\x3\x174\x5\x174\x2506\n\x174\x3\x174\x3\x174"+
		"\x3\x174\x3\x174\x3\x174\x3\x174\x3\x174\x3\x174\x3\x174\x3\x174\x3\x174"+
		"\x3\x174\x3\x174\x3\x174\x3\x174\x5\x174\x2517\n\x174\a\x174\x2519\n\x174"+
		"\f\x174\xE\x174\x251C\v\x174\x5\x174\x251E\n\x174\x3\x175\x3\x175\x3\x175"+
		"\x3\x175\x3\x175\x3\x175\x3\x175\x3\x175\x3\x175\x3\x175\x3\x175\x3\x175"+
		"\x5\x175\x252C\n\x175\x3\x175\x3\x175\x3\x175\x3\x175\x5\x175\x2532\n"+
		"\x175\x3\x175\x3\x175\x3\x175\x3\x175\x3\x175\x3\x175\x5\x175\x253A\n"+
		"\x175\x3\x175\x3\x175\x3\x175\x3\x175\x3\x175\x6\x175\x2541\n\x175\r\x175"+
		"\xE\x175\x2542\x3\x175\x5\x175\x2546\n\x175\x3\x176\x3\x176\x3\x176\x3"+
		"\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176\x3\x176"+
		"\x3\x176\x3\x177\x3\x177\x3\x177\x3\x177\x3\x177\x3\x177\x3\x177\x3\x177"+
		"\x3\x177\x3\x177\x3\x177\x3\x177\x3\x177\x3\x177\x3\x178\x3\x178\x3\x178"+
		"\x3\x178\x5\x178\x2567\n\x178\x3\x179\x3\x179\x5\x179\x256B\n\x179\x3"+
		"\x179\x3\x179\x5\x179\x256F\n\x179\x3\x17A\x3\x17A\x3\x17A\x3\x17A\x3"+
		"\x17A\x5\x17A\x2576\n\x17A\x3\x17B\x3\x17B\x3\x17B\x3\x17B\x3\x17C\x3"+
		"\x17C\x3\x17C\x5\x17C\x257F\n\x17C\x3\x17D\x3\x17D\x3\x17D\x3\x17D\a\x17D"+
		"\x2585\n\x17D\f\x17D\xE\x17D\x2588\v\x17D\x5\x17D\x258A\n\x17D\x3\x17D"+
		"\x5\x17D\x258D\n\x17D\x3\x17E\x3\x17E\x5\x17E\x2591\n\x17E\x3\x17E\x3"+
		"\x17E\x5\x17E\x2595\n\x17E\x3\x17E\x5\x17E\x2598\n\x17E\x3\x17E\x3\x17E"+
		"\x3\x17E\x3\x17E\a\x17E\x259E\n\x17E\f\x17E\xE\x17E\x25A1\v\x17E\x3\x17E"+
		"\x3\x17E\x5\x17E\x25A5\n\x17E\x3\x17E\x3\x17E\x3\x17E\x5\x17E\x25AA\n"+
		"\x17E\x3\x17E\x3\x17E\x5\x17E\x25AE\n\x17E\x5\x17E\x25B0\n\x17E\x3\x17F"+
		"\x3\x17F\x3\x17F\a\x17F\x25B5\n\x17F\f\x17F\xE\x17F\x25B8\v\x17F\x3\x17F"+
		"\x3\x17F\x3\x17F\a\x17F\x25BD\n\x17F\f\x17F\xE\x17F\x25C0\v\x17F\x5\x17F"+
		"\x25C2\n\x17F\x3\x180\x3\x180\x3\x180\x3\x180\x3\x181\x3\x181\x3\x182"+
		"\x3\x182\x3\x182\x5\x182\x25CD\n\x182\x3\x182\x3\x182\x3\x182\x5\x182"+
		"\x25D2\n\x182\x3\x183\x3\x183\x5\x183\x25D6\n\x183\x3\x183\x5\x183\x25D9"+
		"\n\x183\x3\x183\x3\x183\x5\x183\x25DD\n\x183\x3\x184\x3\x184\x5\x184\x25E1"+
		"\n\x184\x3\x184\x3\x184\x3\x184\x5\x184\x25E6\n\x184\x3\x184\x3\x184\x3"+
		"\x184\x3\x184\x3\x184\x5\x184\x25ED\n\x184\x5\x184\x25EF\n\x184\x3\x184"+
		"\x3\x184\x3\x184\x3\x184\x5\x184\x25F5\n\x184\x3\x184\x5\x184\x25F8\n"+
		"\x184\x3\x184\x3\x184\x3\x184\x3\x184\a\x184\x25FE\n\x184\f\x184\xE\x184"+
		"\x2601\v\x184\x3\x184\x3\x184\x3\x184\x5\x184\x2606\n\x184\x3\x184\x3"+
		"\x184\x5\x184\x260A\n\x184\x3\x184\x5\x184\x260D\n\x184\x3\x184\x3\x184"+
		"\x3\x184\x3\x184\x3\x184\x3\x184\x3\x184\x5\x184\x2616\n\x184\x3\x184"+
		"\x5\x184\x2619\n\x184\x3\x184\x3\x184\x3\x184\x3\x184\x5\x184\x261F\n"+
		"\x184\x3\x185\x3\x185\x5\x185\x2623\n\x185\x3\x186\x3\x186\x3\x186\x3"+
		"\x186\x3\x186\x5\x186\x262A\n\x186\x3\x186\x3\x186\x3\x186\x5\x186\x262F"+
		"\n\x186\x3\x186\x3\x186\x3\x186\x3\x186\x3\x186\x3\x186\x5\x186\x2637"+
		"\n\x186\x3\x187\x3\x187\x3\x187\x5\x187\x263C\n\x187\x3\x187\x3\x187\x3"+
		"\x187\x3\x187\x3\x187\x3\x187\x3\x187\x3\x187\x3\x187\x3\x187\x5\x187"+
		"\x2648\n\x187\x5\x187\x264A\n\x187\x3\x188\x3\x188\x3\x188\x3\x188\x3"+
		"\x188\x3\x188\x3\x188\x3\x188\x3\x188\x5\x188\x2655\n\x188\x3\x189\x3"+
		"\x189\x3\x189\x3\x189\x3\x189\x5\x189\x265C\n\x189\x3\x189\x3\x189\x3"+
		"\x189\x3\x189\x3\x189\x3\x189\a\x189\x2664\n\x189\f\x189\xE\x189\x2667"+
		"\v\x189\x3\x18A\x3\x18A\x3\x18A\x3\x18A\x3\x18B\x3\x18B\x3\x18B\x3\x18B"+
		"\x3\x18B\x3\x18B\x3\x18B\x3\x18B\x3\x18B\x3\x18B\x3\x18B\x3\x18B\x3\x18B"+
		"\x3\x18B\x3\x18B\x3\x18B\x5\x18B\x267D\n\x18B\x3\x18C\x3\x18C\x3\x18C"+
		"\x3\x18C\x3\x18C\x3\x18C\x3\x18C\x3\x18C\x3\x18C\x3\x18C\x3\x18C\x5\x18C"+
		"\x268A\n\x18C\x3\x18D\x3\x18D\x3\x18D\x3\x18D\x3\x18D\x3\x18D\x3\x18D"+
		"\x3\x18D\x3\x18D\x3\x18D\x3\x18D\x3\x18D\x3\x18D\x3\x18D\x5\x18D\x269A"+
		"\n\x18D\x3\x18D\x3\x18D\x3\x18D\x5\x18D\x269F\n\x18D\x3\x18D\x3\x18D\x3"+
		"\x18D\x3\x18D\x3\x18D\x5\x18D\x26A6\n\x18D\x3\x18D\x5\x18D\x26A9\n\x18D"+
		"\x6\x18D\x26AB\n\x18D\r\x18D\xE\x18D\x26AC\x5\x18D\x26AF\n\x18D\x3\x18E"+
		"\x3\x18E\x3\x18E\x3\x18E\x3\x18E\x3\x18E\x3\x18E\x3\x18E\x3\x18E\x3\x18E"+
		"\x3\x18E\x3\x18E\x3\x18E\x3\x18E\x3\x18E\x5\x18E\x26C0\n\x18E\x3\x18F"+
		"\x3\x18F\x3\x190\x3\x190\x3\x190\x3\x190\x3\x190\x3\x190\x3\x190\x3\x190"+
		"\x3\x190\x3\x190\x3\x190\x5\x190\x26CF\n\x190\x3\x191\x3\x191\x3\x191"+
		"\x3\x191\x3\x191\x3\x191\x5\x191\x26D7\n\x191\x3\x191\x3\x191\x3\x191"+
		"\x3\x191\x3\x191\x3\x191\x3\x191\x5\x191\x26E0\n\x191\x3\x191\x3\x191"+
		"\x3\x191\x3\x191\x3\x191\x3\x191\x5\x191\x26E8\n\x191\x3\x192\x3\x192"+
		"\x3\x192\x3\x192\x3\x192\x3\x192\x5\x192\x26F0\n\x192\x3\x192\x3\x192"+
		"\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192"+
		"\x3\x192\x3\x192\x3\x192\x3\x192\x5\x192\x2701\n\x192\x3\x192\x3\x192"+
		"\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192"+
		"\x5\x192\x270E\n\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192"+
		"\x3\x192\x3\x192\x3\x192\x3\x192\x5\x192\x271A\n\x192\x3\x192\x3\x192"+
		"\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192"+
		"\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192"+
		"\x3\x192\x3\x192\x5\x192\x2732\n\x192\x3\x192\x3\x192\x3\x192\x3\x192"+
		"\x3\x192\x5\x192\x2739\n\x192\x3\x192\x3\x192\x5\x192\x273D\n\x192\x3"+
		"\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x5\x192"+
		"\x2747\n\x192\x3\x192\x3\x192\x5\x192\x274B\n\x192\x3\x192\x3\x192\x3"+
		"\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192"+
		"\x3\x192\x3\x192\x3\x192\x3\x192\x5\x192\x275C\n\x192\x3\x192\x3\x192"+
		"\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192"+
		"\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192"+
		"\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192"+
		"\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x5\x192"+
		"\x2783\n\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x5\x192\x278A\n"+
		"\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x5\x192\x2792\n"+
		"\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192"+
		"\x3\x192\x3\x192\x5\x192\x279E\n\x192\x3\x192\x3\x192\x3\x192\x3\x192"+
		"\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192"+
		"\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x5\x192\x27B4"+
		"\n\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x5\x192"+
		"\x27BD\n\x192\x5\x192\x27BF\n\x192\x3\x193\x3\x193\x3\x193\x3\x193\x5"+
		"\x193\x27C5\n\x193\x3\x193\x3\x193\x3\x193\x3\x193\x3\x193\x3\x193\x3"+
		"\x193\x3\x193\x3\x193\x3\x193\x3\x193\x3\x193\x3\x193\x3\x193\x3\x193"+
		"\x3\x193\x3\x193\x3\x193\x5\x193\x27D9\n\x193\x5\x193\x27DB\n\x193\x5"+
		"\x193\x27DD\n\x193\x3\x193\x5\x193\x27E0\n\x193\x3\x194\x3\x194\x3\x194"+
		"\x3\x194\x3\x194\x5\x194\x27E7\n\x194\x3\x194\x3\x194\x3\x194\x3\x194"+
		"\x5\x194\x27ED\n\x194\x3\x194\x3\x194\x3\x194\x5\x194\x27F2\n\x194\x5"+
		"\x194\x27F4\n\x194\x3\x194\x3\x194\x3\x194\x3\x194\x5\x194\x27FA\n\x194"+
		"\x3\x194\x3\x194\x3\x194\x3\x194\x3\x194\x3\x194\x5\x194\x2802\n\x194"+
		"\x5\x194\x2804\n\x194\x3\x194\x3\x194\x5\x194\x2808\n\x194\x3\x194\x3"+
		"\x194\x3\x194\x3\x194\x3\x194\x3\x194\x3\x194\x3\x194\x5\x194\x2812\n"+
		"\x194\x3\x194\x3\x194\x5\x194\x2816\n\x194\x3\x194\x3\x194\x3\x194\x3"+
		"\x194\x5\x194\x281C\n\x194\x5\x194\x281E\n\x194\x3\x195\x3\x195\x5\x195"+
		"\x2822\n\x195\x3\x196\x3\x196\x5\x196\x2826\n\x196\x3\x197\x3\x197\x3"+
		"\x197\x3\x198\x3\x198\x5\x198\x282D\n\x198\x3\x199\x3\x199\x3\x199\x5"+
		"\x199\x2832\n\x199\x3\x19A\x3\x19A\x3\x19A\x5\x19A\x2837\n\x19A\x3\x19B"+
		"\x3\x19B\x5\x19B\x283B\n\x19B\x3\x19C\x3\x19C\x3\x19D\x3\x19D\x3\x19D"+
		"\x3\x19D\x3\x19D\x5\x19D\x2844\n\x19D\x3\x19D\x3\x19D\x3\x19D\x3\x19D"+
		"\x5\x19D\x284A\n\x19D\x3\x19D\x3\x19D\x3\x19D\x3\x19D\x3\x19D\a\x19D\x2851"+
		"\n\x19D\f\x19D\xE\x19D\x2854\v\x19D\x5\x19D\x2856\n\x19D\x5\x19D\x2858"+
		"\n\x19D\x3\x19E\x3\x19E\x3\x19E\x3\x19E\x3\x19E\x5\x19E\x285F\n\x19E\x3"+
		"\x19E\x5\x19E\x2862\n\x19E\x3\x19E\x3\x19E\x5\x19E\x2866\n\x19E\x3\x19F"+
		"\x3\x19F\x3\x1A0\x3\x1A0\x3\x1A0\x3\x1A0\x5\x1A0\x286E\n\x1A0\x3\x1A0"+
		"\x5\x1A0\x2871\n\x1A0\x3\x1A0\x3\x1A0\x3\x1A0\x3\x1A0\a\x1A0\x2877\n\x1A0"+
		"\f\x1A0\xE\x1A0\x287A\v\x1A0\x5\x1A0\x287C\n\x1A0\x3\x1A1\x3\x1A1\x3\x1A1"+
		"\x3\x1A1\x3\x1A1\x3\x1A1\x3\x1A1\x3\x1A1\x3\x1A1\x3\x1A1\x5\x1A1\x2888"+
		"\n\x1A1\x3\x1A2\x3\x1A2\x3\x1A2\x3\x1A2\x3\x1A2\x5\x1A2\x288F\n\x1A2\x3"+
		"\x1A2\x3\x1A2\x5\x1A2\x2893\n\x1A2\x3\x1A2\x5\x1A2\x2896\n\x1A2\x3\x1A2"+
		"\x3\x1A2\x3\x1A2\x3\x1A2\a\x1A2\x289C\n\x1A2\f\x1A2\xE\x1A2\x289F\v\x1A2"+
		"\x5\x1A2\x28A1\n\x1A2\x3\x1A3\x3\x1A3\x3\x1A3\x3\x1A3\x3\x1A3\x3\x1A3"+
		"\x3\x1A3\x3\x1A3\x5\x1A3\x28AB\n\x1A3\x3\x1A4\x3\x1A4\x3\x1A4\x3\x1A4"+
		"\x5\x1A4\x28B1\n\x1A4\x3\x1A4\x3\x1A4\x5\x1A4\x28B5\n\x1A4\x3\x1A4\x5"+
		"\x1A4\x28B8\n\x1A4\x3\x1A4\x3\x1A4\x3\x1A4\x3\x1A4\a\x1A4\x28BE\n\x1A4"+
		"\f\x1A4\xE\x1A4\x28C1\v\x1A4\x5\x1A4\x28C3\n\x1A4\x3\x1A5\x3\x1A5\x3\x1A5"+
		"\x3\x1A5\x3\x1A5\x3\x1A5\x3\x1A5\x3\x1A5\x3\x1A5\x5\x1A5\x28CE\n\x1A5"+
		"\x5\x1A5\x28D0\n\x1A5\x3\x1A5\x3\x1A5\x3\x1A5\x3\x1A5\x3\x1A5\a\x1A5\x28D7"+
		"\n\x1A5\f\x1A5\xE\x1A5\x28DA\v\x1A5\x5\x1A5\x28DC\n\x1A5\x3\x1A6\x3\x1A6"+
		"\x3\x1A6\x3\x1A6\x3\x1A6\x5\x1A6\x28E3\n\x1A6\x3\x1A6\x3\x1A6\x3\x1A6"+
		"\x5\x1A6\x28E8\n\x1A6\x3\x1A6\x3\x1A6\x5\x1A6\x28EC\n\x1A6\x3\x1A6\x3"+
		"\x1A6\x3\x1A6\x5\x1A6\x28F1\n\x1A6\x3\x1A7\x3\x1A7\x3\x1A8\x3\x1A8\x3"+
		"\x1A8\x3\x1A8\x3\x1A8\x3\x1A8\x3\x1A8\x3\x1A8\x3\x1A8\x3\x1A8\a\x1A8\x28FF"+
		"\n\x1A8\f\x1A8\xE\x1A8\x2902\v\x1A8\x5\x1A8\x2904\n\x1A8\x3\x1A9\x3\x1A9"+
		"\x3\x1A9\x3\x1A9\x3\x1A9\x5\x1A9\x290B\n\x1A9\x3\x1A9\x3\x1A9\x5\x1A9"+
		"\x290F\n\x1A9\x3\x1AA\x3\x1AA\x3\x1AA\x5\x1AA\x2914\n\x1AA\x3\x1AB\x3"+
		"\x1AB\x3\x1AC\x3\x1AC\x3\x1AC\x3\x1AC\x3\x1AC\x5\x1AC\x291D\n\x1AC\x3"+
		"\x1AC\x3\x1AC\x5\x1AC\x2921\n\x1AC\x3\x1AC\x3\x1AC\x3\x1AC\x3\x1AC\a\x1AC"+
		"\x2927\n\x1AC\f\x1AC\xE\x1AC\x292A\v\x1AC\x5\x1AC\x292C\n\x1AC\x3\x1AD"+
		"\x3\x1AD\x3\x1AD\x3\x1AD\x3\x1AD\x3\x1AD\x3\x1AD\x5\x1AD\x2935\n\x1AD"+
		"\x3\x1AD\x5\x1AD\x2938\n\x1AD\x3\x1AD\x3\x1AD\x5\x1AD\x293C\n\x1AD\x3"+
		"\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x5\x1AE\x2945\n"+
		"\x1AE\x5\x1AE\x2947\n\x1AE\x3\x1AE\x3\x1AE\x3\x1AE\x5\x1AE\x294C\n\x1AE"+
		"\x3\x1AF\x3\x1AF\x3\x1AF\x3\x1AF\x3\x1AF\x3\x1AF\x5\x1AF\x2954\n\x1AF"+
		"\x3\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x3\x1B0\x5\x1B0\x295B\n\x1B0\x3\x1B0"+
		"\x3\x1B0\x5\x1B0\x295F\n\x1B0\x3\x1B1\x3\x1B1\x3\x1B1\x3\x1B1\x3\x1B1"+
		"\x3\x1B1\x3\x1B1\x3\x1B1\x3\x1B1\x3\x1B1\x3\x1B1\x3\x1B1\x3\x1B1\x3\x1B1"+
		"\x3\x1B1\x3\x1B1\x5\x1B1\x2971\n\x1B1\x3\x1B2\x3\x1B2\x3\x1B2\x3\x1B2"+
		"\x3\x1B3\x3\x1B3\x5\x1B3\x2979\n\x1B3\x3\x1B3\x3\x1B3\x3\x1B3\x5\x1B3"+
		"\x297E\n\x1B3\x3\x1B4\x3\x1B4\x3\x1B4\x3\x1B4\x5\x1B4\x2984\n\x1B4\x3"+
		"\x1B4\a\x1B4\x2987\n\x1B4\f\x1B4\xE\x1B4\x298A\v\x1B4\x3\x1B4\x3\x1B4"+
		"\x3\x1B5\x3\x1B5\x3\x1B5\x3\x1B5\x5\x1B5\x2992\n\x1B5\x3\x1B5\x5\x1B5"+
		"\x2995\n\x1B5\x3\x1B5\x5\x1B5\x2998\n\x1B5\x3\x1B5\x3\x1B5\x3\x1B5\x3"+
		"\x1B5\x3\x1B5\x3\x1B5\x3\x1B5\x3\x1B5\x3\x1B5\x5\x1B5\x29A3\n\x1B5\x3"+
		"\x1B6\x3\x1B6\x3\x1B6\x5\x1B6\x29A8\n\x1B6\x3\x1B6\x3\x1B6\x3\x1B6\x3"+
		"\x1B7\x3\x1B7\x3\x1B7\x3\x1B7\x3\x1B8\x3\x1B8\x5\x1B8\x29B3\n\x1B8\x3"+
		"\x1B8\a\x1B8\x29B6\n\x1B8\f\x1B8\xE\x1B8\x29B9\v\x1B8\x3\x1B9\x3\x1B9"+
		"\x3\x1B9\x5\x1B9\x29BE\n\x1B9\x3\x1BA\x3\x1BA\x3\x1BA\x3\x1BA\x5\x1BA"+
		"\x29C4\n\x1BA\x3\x1BA\x3\x1BA\x3\x1BA\x3\x1BA\x5\x1BA\x29CA\n\x1BA\x5"+
		"\x1BA\x29CC\n\x1BA\x3\x1BA\x3\x1BA\x5\x1BA\x29D0\n\x1BA\x3\x1BA\x5\x1BA"+
		"\x29D3\n\x1BA\x3\x1BA\x3\x1BA\x5\x1BA\x29D7\n\x1BA\x3\x1BA\x3\x1BA\x5"+
		"\x1BA\x29DB\n\x1BA\x3\x1BA\x3\x1BA\x3\x1BA\x3\x1BA\x3\x1BA\x3\x1BA\x5"+
		"\x1BA\x29E3\n\x1BA\x3\x1BA\x3\x1BA\x3\x1BA\x5\x1BA\x29E8\n\x1BA\x5\x1BA"+
		"\x29EA\n\x1BA\x3\x1BA\x5\x1BA\x29ED\n\x1BA\x3\x1BA\a\x1BA\x29F0\n\x1BA"+
		"\f\x1BA\xE\x1BA\x29F3\v\x1BA\x3\x1BA\x3\x1BA\x3\x1BA\x3\x1BA\x3\x1BA\x3"+
		"\x1BA\x5\x1BA\x29FB\n\x1BA\x5\x1BA\x29FD\n\x1BA\x3\x1BB\x3\x1BB\x3\x1BB"+
		"\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB"+
		"\x3\x1BB\x5\x1BB\x2A0C\n\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB"+
		"\x3\x1BB\x3\x1BB\x3\x1BB\x5\x1BB\x2A16\n\x1BB\x3\x1BB\x3\x1BB\x3\x1BB"+
		"\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x5\x1BB\x2A21\n\x1BB"+
		"\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB"+
		"\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x3\x1BB\x5\x1BB"+
		"\x2A34\n\x1BB\x3\x1BC\x3\x1BC\x3\x1BC\x3\x1BC\x3\x1BC\x3\x1BC\x3\x1BC"+
		"\x3\x1BC\x3\x1BC\x3\x1BC\x3\x1BC\x3\x1BC\x3\x1BC\x3\x1BC\x3\x1BC\x3\x1BC"+
		"\x3\x1BC\x3\x1BC\x3\x1BC\x5\x1BC\x2A49\n\x1BC\x5\x1BC\x2A4B\n\x1BC\x5"+
		"\x1BC\x2A4D\n\x1BC\x3\x1BD\x3\x1BD\x3\x1BD\x3\x1BD\x3\x1BD\x3\x1BD\x5"+
		"\x1BD\x2A55\n\x1BD\x3\x1BE\x3\x1BE\x5\x1BE\x2A59\n\x1BE\x3\x1BE\x3\x1BE"+
		"\x3\x1BE\x5\x1BE\x2A5E\n\x1BE\x3\x1BE\x5\x1BE\x2A61\n\x1BE\x3\x1BE\x5"+
		"\x1BE\x2A64\n\x1BE\x3\x1BE\x3\x1BE\x3\x1BE\x3\x1BE\x5\x1BE\x2A6A\n\x1BE"+
		"\x3\x1BE\x3\x1BE\x3\x1BE\x3\x1BE\x3\x1BE\x3\x1BE\x5\x1BE\x2A72\n\x1BE"+
		"\x3\x1BE\x3\x1BE\x3\x1BE\x3\x1BE\x3\x1BE\x3\x1BE\x5\x1BE\x2A7A\n\x1BE"+
		"\x3\x1BE\x5\x1BE\x2A7D\n\x1BE\x3\x1BE\x5\x1BE\x2A80\n\x1BE\x3\x1BF\x3"+
		"\x1BF\x3\x1BF\x5\x1BF\x2A85\n\x1BF\x3\x1BF\x5\x1BF\x2A88\n\x1BF\x3\x1BF"+
		"\x5\x1BF\x2A8B\n\x1BF\x3\x1BF\x3\x1BF\x3\x1BF\x5\x1BF\x2A90\n\x1BF\x5"+
		"\x1BF\x2A92\n\x1BF\x3\x1C0\x3\x1C0\x3\x1C0\x3\x1C0\x3\x1C0\x3\x1C0\x3"+
		"\x1C0\x3\x1C0\x5\x1C0\x2A9C\n\x1C0\x3\x1C1\x3\x1C1\x5\x1C1\x2AA0\n\x1C1"+
		"\x3\x1C1\x3\x1C1\x3\x1C1\x5\x1C1\x2AA5\n\x1C1\x3\x1C1\x5\x1C1\x2AA8\n"+
		"\x1C1\x3\x1C1\x3\x1C1\x3\x1C1\x3\x1C1\x5\x1C1\x2AAE\n\x1C1\x3\x1C1\x3"+
		"\x1C1\x5\x1C1\x2AB2\n\x1C1\x3\x1C1\x3\x1C1\x3\x1C1\x3\x1C1\x5\x1C1\x2AB8"+
		"\n\x1C1\x3\x1C1\x3\x1C1\x3\x1C1\x3\x1C1\x3\x1C1\x3\x1C1\x3\x1C1\x3\x1C1"+
		"\x3\x1C1\x3\x1C1\x3\x1C1\x3\x1C1\x3\x1C1\x3\x1C1\x3\x1C1\x3\x1C1\x3\x1C1"+
		"\x3\x1C1\x3\x1C1\x3\x1C1\x5\x1C1\x2ACE\n\x1C1\x3\x1C1\x5\x1C1\x2AD1\n"+
		"\x1C1\x3\x1C1\x5\x1C1\x2AD4\n\x1C1\x5\x1C1\x2AD6\n\x1C1\x3\x1C2\x3\x1C2"+
		"\x3\x1C2\x3\x1C2\x3\x1C2\x5\x1C2\x2ADD\n\x1C2\x3\x1C2\x6\x1C2\x2AE0\n"+
		"\x1C2\r\x1C2\xE\x1C2\x2AE1\x3\x1C2\x3\x1C2\x3\x1C2\x3\x1C2\x3\x1C2\x3"+
		"\x1C2\x3\x1C2\x3\x1C2\x6\x1C2\x2AEC\n\x1C2\r\x1C2\xE\x1C2\x2AED\x3\x1C2"+
		"\x3\x1C2\x3\x1C2\x3\x1C2\x6\x1C2\x2AF4\n\x1C2\r\x1C2\xE\x1C2\x2AF5\x3"+
		"\x1C2\x3\x1C2\x3\x1C2\x3\x1C2\x3\x1C2\x6\x1C2\x2AFD\n\x1C2\r\x1C2\xE\x1C2"+
		"\x2AFE\x3\x1C2\x3\x1C2\x3\x1C2\x3\x1C2\x3\x1C2\x3\x1C2\x3\x1C2\x5\x1C2"+
		"\x2B08\n\x1C2\x3\x1C3\x3\x1C3\x3\x1C3\x3\x1C3\x3\x1C4\x3\x1C4\x3\x1C4"+
		"\x3\x1C4\x5\x1C4\x2B12\n\x1C4\x3\x1C4\x5\x1C4\x2B15\n\x1C4\x3\x1C4\x5"+
		"\x1C4\x2B18\n\x1C4\x3\x1C5\x3\x1C5\x3\x1C5\x3\x1C5\x3\x1C5\x3\x1C5\x3"+
		"\x1C5\a\x1C5\x2B21\n\x1C5\f\x1C5\xE\x1C5\x2B24\v\x1C5\x3\x1C5\x3\x1C5"+
		"\x3\x1C5\x5\x1C5\x2B29\n\x1C5\x3\x1C6\x3\x1C6\x3\x1C6\x3\x1C6\x5\x1C6"+
		"\x2B2F\n\x1C6\x3\x1C6\x3\x1C6\x3\x1C6\x3\x1C6\x3\x1C7\x3\x1C7\x3\x1C7"+
		"\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x3\x1C7\x5\x1C7\x2B3E\n\x1C7"+
		"\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8\x3\x1C8"+
		"\x5\x1C8\x2B49\n\x1C8\x3\x1C9\x3\x1C9\x3\x1C9\x3\x1C9\x3\x1C9\a\x1C9\x2B50"+
		"\n\x1C9\f\x1C9\xE\x1C9\x2B53\v\x1C9\x3\x1C9\x3\x1C9\x3\x1CA\x3\x1CA\x3"+
		"\x1CA\x3\x1CA\x3\x1CA\a\x1CA\x2B5C\n\x1CA\f\x1CA\xE\x1CA\x2B5F\v\x1CA"+
		"\x3\x1CA\x3\x1CA\x3\x1CB\x3\x1CB\x5\x1CB\x2B65\n\x1CB\x3\x1CB\x3\x1CB"+
		"\x3\x1CB\x3\x1CB\x3\x1CB\x5\x1CB\x2B6C\n\x1CB\x3\x1CC\x3\x1CC\x3\x1CC"+
		"\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC"+
		"\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC"+
		"\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC"+
		"\x3\x1CC\x5\x1CC\x2B8D\n\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x5\x1CC"+
		"\x2B93\n\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC"+
		"\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x5\x1CC\x2BA1\n\x1CC\x3\x1CC"+
		"\x3\x1CC\x3\x1CC\x5\x1CC\x2BA6\n\x1CC\a\x1CC\x2BA8\n\x1CC\f\x1CC\xE\x1CC"+
		"\x2BAB\v\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC"+
		"\x3\x1CC\x3\x1CC\x5\x1CC\x2BB6\n\x1CC\x3\x1CC\x5\x1CC\x2BB9\n\x1CC\x3"+
		"\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x3\x1CC\x5\x1CC\x2BC2\n"+
		"\x1CC\x5\x1CC\x2BC4\n\x1CC\x3\x1CD\x3\x1CD\x3\x1CD\x3\x1CD\x3\x1CD\x3"+
		"\x1CD\x3\x1CD\x3\x1CD\x5\x1CD\x2BCE\n\x1CD\x3\x1CD\x3\x1CD\x5\x1CD\x2BD2"+
		"\n\x1CD\x5\x1CD\x2BD4\n\x1CD\x5\x1CD\x2BD6\n\x1CD\x3\x1CD\x5\x1CD\x2BD9"+
		"\n\x1CD\x3\x1CD\x5\x1CD\x2BDC\n\x1CD\x3\x1CD\x3\x1CD\x3\x1CD\x3\x1CD\x3"+
		"\x1CD\x3\x1CD\x3\x1CD\x3\x1CD\x3\x1CD\x5\x1CD\x2BE7\n\x1CD\x5\x1CD\x2BE9"+
		"\n\x1CD\x3\x1CD\x5\x1CD\x2BEC\n\x1CD\x5\x1CD\x2BEE\n\x1CD\x3\x1CE\a\x1CE"+
		"\x2BF1\n\x1CE\f\x1CE\xE\x1CE\x2BF4\v\x1CE\x3\x1CE\x3\x1CE\x3\x1CE\x3\x1CF"+
		"\x3\x1CF\x3\x1CF\x3\x1CF\x3\x1CF\x5\x1CF\x2BFE\n\x1CF\x3\x1D0\x3\x1D0"+
		"\x3\x1D0\x3\x1D0\x3\x1D0\x3\x1D0\x3\x1D0\x5\x1D0\x2C07\n\x1D0\x3\x1D0"+
		"\x5\x1D0\x2C0A\n\x1D0\x3\x1D0\x5\x1D0\x2C0D\n\x1D0\x3\x1D0\x3\x1D0\x3"+
		"\x1D0\x3\x1D0\x3\x1D0\a\x1D0\x2C14\n\x1D0\f\x1D0\xE\x1D0\x2C17\v\x1D0"+
		"\x5\x1D0\x2C19\n\x1D0\x3\x1D0\x5\x1D0\x2C1C\n\x1D0\x3\x1D1\x3\x1D1\x3"+
		"\x1D1\x3\x1D1\x3\x1D1\x5\x1D1\x2C23\n\x1D1\x3\x1D1\x5\x1D1\x2C26\n\x1D1"+
		"\x3\x1D1\x3\x1D1\x3\x1D1\x3\x1D1\x3\x1D1\x5\x1D1\x2C2D\n\x1D1\x3\x1D1"+
		"\x3\x1D1\x3\x1D1\x3\x1D1\x5\x1D1\x2C33\n\x1D1\x3\x1D1\x3\x1D1\x3\x1D1"+
		"\x3\x1D1\x5\x1D1\x2C39\n\x1D1\x3\x1D1\x3\x1D1\x3\x1D1\x3\x1D1\x3\x1D1"+
		"\x3\x1D1\x3\x1D1\x3\x1D1\x3\x1D1\x3\x1D1\x3\x1D1\x3\x1D1\x3\x1D1\x5\x1D1"+
		"\x2C48\n\x1D1\x3\x1D1\x5\x1D1\x2C4B\n\x1D1\x3\x1D1\x3\x1D1\x3\x1D1\x3"+
		"\x1D1\x3\x1D1\x5\x1D1\x2C52\n\x1D1\x3\x1D1\x3\x1D1\x3\x1D1\x3\x1D1\a\x1D1"+
		"\x2C58\n\x1D1\f\x1D1\xE\x1D1\x2C5B\v\x1D1\x3\x1D1\x3\x1D1\x3\x1D1\x3\x1D1"+
		"\x5\x1D1\x2C61\n\x1D1\x3\x1D2\x3\x1D2\x3\x1D3\x3\x1D3\x5\x1D3\x2C67\n"+
		"\x1D3\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4"+
		"\x3\x1D4\x5\x1D4\x2C72\n\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4"+
		"\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x5\x1D4\x2C80"+
		"\n\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4\x3\x1D4"+
		"\a\x1D4\x2C8A\n\x1D4\f\x1D4\xE\x1D4\x2C8D\v\x1D4\x3\x1D5\x3\x1D5\x3\x1D6"+
		"\x3\x1D6\x3\x1D6\x3\x1D6\x3\x1D6\x3\x1D7\x3\x1D7\x3\x1D7\x3\x1D7\x5\x1D7"+
		"\x2C9A\n\x1D7\x3\x1D8\x3\x1D8\x3\x1D8\x6\x1D8\x2C9F\n\x1D8\r\x1D8\xE\x1D8"+
		"\x2CA0\x3\x1D8\x3\x1D8\x5\x1D8\x2CA5\n\x1D8\x3\x1D8\x3\x1D8\x3\x1D8\x3"+
		"\x1D8\x6\x1D8\x2CAB\n\x1D8\r\x1D8\xE\x1D8\x2CAC\x3\x1D8\x3\x1D8\x5\x1D8"+
		"\x2CB1\n\x1D8\x3\x1D8\x3\x1D8\x5\x1D8\x2CB5\n\x1D8\x3\x1D9\x3\x1D9\x3"+
		"\x1D9\x3\x1D9\x5\x1D9\x2CBB\n\x1D9\x3\x1DA\x3\x1DA\x3\x1DA\x3\x1DA\x3"+
		"\x1DA\x3\x1DA\x3\x1DA\x3\x1DA\x5\x1DA\x2CC5\n\x1DA\x3\x1DB\x3\x1DB\x3"+
		"\x1DB\x3\x1DB\x3\x1DB\x3\x1DB\x3\x1DB\x3\x1DB\x5\x1DB\x2CCF\n\x1DB\x3"+
		"\x1DC\x3\x1DC\x3\x1DD\x3\x1DD\x3\x1DD\x3\x1DD\a\x1DD\x2CD7\n\x1DD\f\x1DD"+
		"\xE\x1DD\x2CDA\v\x1DD\x3\x1DE\x3\x1DE\x3\x1DE\x3\x1DE\x3\x1DE\x5\x1DE"+
		"\x2CE1\n\x1DE\x3\x1DE\x3\x1DE\x3\x1DE\x3\x1DE\x3\x1DE\x3\x1DF\x3\x1DF"+
		"\x3\x1DF\x3\x1DF\x3\x1DF\x5\x1DF\x2CED\n\x1DF\x3\x1DF\x3\x1DF\x3\x1DF"+
		"\x3\x1DF\x5\x1DF\x2CF3\n\x1DF\x3\x1DF\x3\x1DF\x5\x1DF\x2CF7\n\x1DF\x3"+
		"\x1DF\x3\x1DF\x3\x1DF\x3\x1DF\x3\x1DF\x3\x1DF\x3\x1DF\x3\x1DF\x5\x1DF"+
		"\x2D01\n\x1DF\x3\x1E0\x3\x1E0\x5\x1E0\x2D05\n\x1E0\x3\x1E0\x3\x1E0\x5"+
		"\x1E0\x2D09\n\x1E0\x3\x1E0\x3\x1E0\x3\x1E0\x3\x1E0\x3\x1E0\x3\x1E0\x3"+
		"\x1E0\x3\x1E0\x5\x1E0\x2D13\n\x1E0\x3\x1E1\x3\x1E1\a\x1E1\x2D17\n\x1E1"+
		"\f\x1E1\xE\x1E1\x2D1A\v\x1E1\x3\x1E1\x3\x1E1\x3\x1E1\x3\x1E1\x3\x1E1\x5"+
		"\x1E1\x2D21\n\x1E1\x3\x1E1\x3\x1E1\x3\x1E1\x3\x1E1\x3\x1E1\x3\x1E1\a\x1E1"+
		"\x2D29\n\x1E1\f\x1E1\xE\x1E1\x2D2C\v\x1E1\x3\x1E2\x3\x1E2\x3\x1E2\x3\x1E2"+
		"\x3\x1E2\x3\x1E2\x3\x1E2\x3\x1E2\x3\x1E2\x3\x1E2\x3\x1E2\x3\x1E2\x3\x1E2"+
		"\x3\x1E2\x3\x1E2\x3\x1E2\x3\x1E2\x3\x1E2\x3\x1E2\x3\x1E2\x3\x1E2\x3\x1E2"+
		"\x3\x1E2\a\x1E2\x2D45\n\x1E2\f\x1E2\xE\x1E2\x2D48\v\x1E2\x3\x1E2\x3\x1E2"+
		"\x3\x1E2\x3\x1E2\x3\x1E2\x3\x1E2\x3\x1E2\a\x1E2\x2D51\n\x1E2\f\x1E2\xE"+
		"\x1E2\x2D54\v\x1E2\x3\x1E2\x3\x1E2\x3\x1E2\x3\x1E2\x5\x1E2\x2D5A\n\x1E2"+
		"\x3\x1E2\x3\x1E2\x3\x1E2\x3\x1E2\a\x1E2\x2D60\n\x1E2\f\x1E2\xE\x1E2\x2D63"+
		"\v\x1E2\x3\x1E2\x3\x1E2\x3\x1E2\x3\x1E2\x5\x1E2\x2D69\n\x1E2\x3\x1E2\x3"+
		"\x1E2\x3\x1E2\x3\x1E2\x5\x1E2\x2D6F\n\x1E2\x3\x1E3\x3\x1E3\x3\x1E3\x3"+
		"\x1E3\x3\x1E3\x3\x1E3\x5\x1E3\x2D77\n\x1E3\x3\x1E3\x5\x1E3\x2D7A\n\x1E3"+
		"\x5\x1E3\x2D7C\n\x1E3\x3\x1E3\x3\x1E3\x5\x1E3\x2D80\n\x1E3\x3\x1E3\a\x1E3"+
		"\x2D83\n\x1E3\f\x1E3\xE\x1E3\x2D86\v\x1E3\x5\x1E3\x2D88\n\x1E3\x3\x1E4"+
		"\x3\x1E4\x5\x1E4\x2D8C\n\x1E4\x3\x1E4\x3\x1E4\x5\x1E4\x2D90\n\x1E4\x3"+
		"\x1E4\x3\x1E4\x3\x1E4\x3\x1E4\x3\x1E4\x5\x1E4\x2D97\n\x1E4\x3\x1E5\x3"+
		"\x1E5\x5\x1E5\x2D9B\n\x1E5\x3\x1E5\x5\x1E5\x2D9E\n\x1E5\x3\x1E5\x3\x1E5"+
		"\x3\x1E5\x5\x1E5\x2DA3\n\x1E5\x3\x1E5\x3\x1E5\x5\x1E5\x2DA7\n\x1E5\x3"+
		"\x1E5\x3\x1E5\x5\x1E5\x2DAB\n\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\x5\x1E5\x2DB0"+
		"\n\x1E5\x3\x1E5\x3\x1E5\x3\x1E5\a\x1E5\x2DB5\n\x1E5\f\x1E5\xE\x1E5\x2DB8"+
		"\v\x1E5\x5\x1E5\x2DBA\n\x1E5\x3\x1E5\x3\x1E5\x5\x1E5\x2DBE\n\x1E5\x3\x1E6"+
		"\x3\x1E6\x3\x1E6\x5\x1E6\x2DC3\n\x1E6\x3\x1E6\x3\x1E6\x5\x1E6\x2DC7\n"+
		"\x1E6\x3\x1E7\x3\x1E7\x3\x1E7\x3\x1E7\x3\x1E7\x3\x1E7\x3\x1E7\x5\x1E7"+
		"\x2DD0\n\x1E7\x3\x1E8\x3\x1E8\x3\x1E8\x3\x1E8\x3\x1E8\x5\x1E8\x2DD7\n"+
		"\x1E8\x3\x1E9\x3\x1E9\x3\x1E9\x3\x1E9\x3\x1E9\a\x1E9\x2DDE\n\x1E9\f\x1E9"+
		"\xE\x1E9\x2DE1\v\x1E9\x3\x1E9\x3\x1E9\x3\x1E9\x3\x1E9\x3\x1E9\x3\x1E9"+
		"\x3\x1E9\x3\x1E9\x3\x1E9\x5\x1E9\x2DEC\n\x1E9\x5\x1E9\x2DEE\n\x1E9\x3"+
		"\x1EA\x3\x1EA\x3\x1EA\x3\x1EA\x3\x1EA\x3\x1EA\x3\x1EA\x3\x1EA\x5\x1EA"+
		"\x2DF8\n\x1EA\x3\x1EA\x5\x1EA\x2DFB\n\x1EA\x3\x1EA\a\x1EA\x2DFE\n\x1EA"+
		"\f\x1EA\xE\x1EA\x2E01\v\x1EA\x3\x1EA\x3\x1EA\x3\x1EA\x3\x1EA\x3\x1EA\x3"+
		"\x1EA\x5\x1EA\x2E09\n\x1EA\x5\x1EA\x2E0B\n\x1EA\x5\x1EA\x2E0D\n\x1EA\x3"+
		"\x1EA\x3\x1EA\x3\x1EA\x5\x1EA\x2E12\n\x1EA\x5\x1EA\x2E14\n\x1EA\x3\x1EA"+
		"\x3\x1EA\x3\x1EA\x3\x1EA\a\x1EA\x2E1A\n\x1EA\f\x1EA\xE\x1EA\x2E1D\v\x1EA"+
		"\x3\x1EA\x3\x1EA\x5\x1EA\x2E21\n\x1EA\x3\x1EA\x3\x1EA\x3\x1EA\x3\x1EA"+
		"\x3\x1EA\x3\x1EA\x5\x1EA\x2E29\n\x1EA\x3\x1EA\a\x1EA\x2E2C\n\x1EA\f\x1EA"+
		"\xE\x1EA\x2E2F\v\x1EA\x3\x1EA\x3\x1EA\x3\x1EA\x5\x1EA\x2E34\n\x1EA\x5"+
		"\x1EA\x2E36\n\x1EA\x3\x1EA\x3\x1EA\x3\x1EA\x3\x1EA\x3\x1EA\x3\x1EA\x3"+
		"\x1EA\x3\x1EA\x5\x1EA\x2E40\n\x1EA\x5\x1EA\x2E42\n\x1EA\x3\x1EA\x3\x1EA"+
		"\x5\x1EA\x2E46\n\x1EA\x3\x1EA\x3\x1EA\x5\x1EA\x2E4A\n\x1EA\x5\x1EA\x2E4C"+
		"\n\x1EA\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x3\x1EB\x5\x1EB"+
		"\x2E55\n\x1EB\x5\x1EB\x2E57\n\x1EB\x3\x1EC\x3\x1EC\x3\x1EC\x5\x1EC\x2E5C"+
		"\n\x1EC\x3\x1ED\x3\x1ED\x3\x1EE\x3\x1EE\x3\x1EE\x3\x1EE\x3\x1EE\a\x1EE"+
		"\x2E65\n\x1EE\f\x1EE\xE\x1EE\x2E68\v\x1EE\x3\x1EE\x3\x1EE\x3\x1EF\x3\x1EF"+
		"\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF"+
		"\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF"+
		"\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\a\x1EF\x2E87"+
		"\n\x1EF\f\x1EF\xE\x1EF\x2E8A\v\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3"+
		"\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF\x3\x1EF"+
		"\x3\x1EF\x3\x1EF\x5\x1EF\x2E9B\n\x1EF\x3\x1F0\x3\x1F0\x3\x1F0\x3\x1F0"+
		"\x3\x1F0\x5\x1F0\x2EA2\n\x1F0\x5\x1F0\x2EA4\n\x1F0\x3\x1F1\x3\x1F1\x3"+
		"\x1F1\a\x1F1\x2EA9\n\x1F1\f\x1F1\xE\x1F1\x2EAC\v\x1F1\x3\x1F2\x3\x1F2"+
		"\x3\x1F2\x3\x1F2\a\x1F2\x2EB2\n\x1F2\f\x1F2\xE\x1F2\x2EB5\v\x1F2\x3\x1F2"+
		"\x3\x1F2\x3\x1F3\x3\x1F3\x3\x1F3\x5\x1F3\x2EBC\n\x1F3\x3\x1F3\x3\x1F3"+
		"\x3\x1F3\x3\x1F3\x5\x1F3\x2EC2\n\x1F3\x3\x1F4\x3\x1F4\x3\x1F4\x3\x1F4"+
		"\x3\x1F4\x3\x1F4\x5\x1F4\x2ECA\n\x1F4\x3\x1F4\x5\x1F4\x2ECD\n\x1F4\x3"+
		"\x1F5\x3\x1F5\x3\x1F5\x3\x1F5\x3\x1F5\x5\x1F5\x2ED4\n\x1F5\x3\x1F5\x3"+
		"\x1F5\x3\x1F5\x3\x1F5\x5\x1F5\x2EDA\n\x1F5\x3\x1F5\x5\x1F5\x2EDD\n\x1F5"+
		"\x5\x1F5\x2EDF\n\x1F5\x3\x1F6\x3\x1F6\x3\x1F6\x3\x1F6\x3\x1F6\x3\x1F6"+
		"\x5\x1F6\x2EE7\n\x1F6\x5\x1F6\x2EE9\n\x1F6\x3\x1F7\x3\x1F7\x3\x1F7\x3"+
		"\x1F7\x3\x1F7\x3\x1F7\x5\x1F7\x2EF1\n\x1F7\x3\x1F7\x3\x1F7\x3\x1F7\x3"+
		"\x1F7\x3\x1F7\x5\x1F7\x2EF8\n\x1F7\x3\x1F7\x3\x1F7\x3\x1F7\x3\x1F7\x3"+
		"\x1F7\x3\x1F7\x5\x1F7\x2F00\n\x1F7\x5\x1F7\x2F02\n\x1F7\x3\x1F8\x3\x1F8"+
		"\x3\x1F8\a\x1F8\x2F07\n\x1F8\f\x1F8\xE\x1F8\x2F0A\v\x1F8\x3\x1F9\x3\x1F9"+
		"\x3\x1F9\x3\x1F9\x3\x1F9\x5\x1F9\x2F11\n\x1F9\x3\x1FA\x3\x1FA\a\x1FA\x2F15"+
		"\n\x1FA\f\x1FA\xE\x1FA\x2F18\v\x1FA\x3\x1FA\x3\x1FA\x3\x1FA\x3\x1FA\a"+
		"\x1FA\x2F1E\n\x1FA\f\x1FA\xE\x1FA\x2F21\v\x1FA\x5\x1FA\x2F23\n\x1FA\x3"+
		"\x1FB\x3\x1FB\x5\x1FB\x2F27\n\x1FB\x3\x1FB\x3\x1FB\x5\x1FB\x2F2B\n\x1FB"+
		"\x3\x1FB\x5\x1FB\x2F2E\n\x1FB\x3\x1FB\x3\x1FB\x5\x1FB\x2F32\n\x1FB\x3"+
		"\x1FB\x3\x1FB\x3\x1FB\x5\x1FB\x2F37\n\x1FB\x5\x1FB\x2F39\n\x1FB\x3\x1FB"+
		"\x3\x1FB\x5\x1FB\x2F3D\n\x1FB\x3\x1FB\x3\x1FB\x3\x1FB\x5\x1FB\x2F42\n"+
		"\x1FB\x5\x1FB\x2F44\n\x1FB\x3\x1FB\x3\x1FB\x5\x1FB\x2F48\n\x1FB\x3\x1FB"+
		"\x3\x1FB\x3\x1FB\x5\x1FB\x2F4D\n\x1FB\x5\x1FB\x2F4F\n\x1FB\x3\x1FB\x3"+
		"\x1FB\x5\x1FB\x2F53\n\x1FB\x3\x1FB\x3\x1FB\x3\x1FB\x3\x1FB\x3\x1FB\x5"+
		"\x1FB\x2F5A\n\x1FB\x5\x1FB\x2F5C\n\x1FB\x3\x1FB\x3\x1FB\x3\x1FB\x3\x1FB"+
		"\x3\x1FB\x5\x1FB\x2F63\n\x1FB\x5\x1FB\x2F65\n\x1FB\x3\x1FC\x3\x1FC\x3"+
		"\x1FC\x3\x1FC\x3\x1FC\x3\x1FC\x3\x1FC\x5\x1FC\x2F6E\n\x1FC\x3\x1FC\x3"+
		"\x1FC\x3\x1FC\x3\x1FC\x3\x1FC\x3\x1FC\x5\x1FC\x2F76\n\x1FC\x3\x1FC\x5"+
		"\x1FC\x2F79\n\x1FC\x3\x1FD\x3\x1FD\x3\x1FD\x3\x1FD\x3\x1FD\x5\x1FD\x2F80"+
		"\n\x1FD\x3\x1FD\x3\x1FD\x3\x1FD\x3\x1FD\x3\x1FD\x3\x1FD\x5\x1FD\x2F88"+
		"\n\x1FD\x3\x1FD\x5\x1FD\x2F8B\n\x1FD\x3\x1FE\x3\x1FE\x3\x1FE\a\x1FE\x2F90"+
		"\n\x1FE\f\x1FE\xE\x1FE\x2F93\v\x1FE\x3\x1FF\x3\x1FF\x3\x1FF\x5\x1FF\x2F98"+
		"\n\x1FF\x3\x200\x3\x200\x3\x200\a\x200\x2F9D\n\x200\f\x200\xE\x200\x2FA0"+
		"\v\x200\x3\x201\x3\x201\x3\x201\x5\x201\x2FA5\n\x201\x3\x202\x3\x202\x5"+
		"\x202\x2FA9\n\x202\x3\x203\x3\x203\x3\x203\x3\x203\x3\x203\x3\x203\x3"+
		"\x203\x3\x203\x3\x204\x3\x204\x3\x204\x3\x204\x3\x204\x3\x204\x3\x204"+
		"\x3\x204\x3\x204\x3\x204\x3\x205\x3\x205\x3\x205\x3\x205\x3\x205\x5\x205"+
		"\x2FC2\n\x205\x3\x206\x5\x206\x2FC5\n\x206\x3\x206\x3\x206\x5\x206\x2FC9"+
		"\n\x206\x5\x206\x2FCB\n\x206\x3\x206\x5\x206\x2FCE\n\x206\x3\x206\x3\x206"+
		"\x3\x206\x3\x206\x3\x206\x3\x207\x3\x207\x3\x207\x3\x207\x3\x208\x3\x208"+
		"\x3\x208\x3\x208\x3\x209\x3\x209\x3\x209\x3\x209\x3\x20A\x3\x20A\x3\x20A"+
		"\x3\x20A\x3\x20B\x3\x20B\x3\x20B\x3\x20B\x3\x20B\x3\x20B\x3\x20B\x3\x20B"+
		"\x3\x20C\x3\x20C\x3\x20C\x3\x20C\x3\x20C\x3\x20C\x3\x20C\x3\x20C\x3\x20C"+
		"\x3\x20C\x3\x20D\x3\x20D\x3\x20D\a\x20D\x2FFA\n\x20D\f\x20D\xE\x20D\x2FFD"+
		"\v\x20D\x3\x20E\x3\x20E\x5\x20E\x3001\n\x20E\x3\x20F\x3\x20F\x3\x20F\x3"+
		"\x20F\x3\x20F\x3\x20F\x3\x20F\x3\x20F\x3\x20F\x3\x20F\x3\x20F\x3\x20F"+
		"\x3\x20F\x3\x20F\x3\x20F\x3\x20F\a\x20F\x3013\n\x20F\f\x20F\xE\x20F\x3016"+
		"\v\x20F\x3\x20F\x5\x20F\x3019\n\x20F\x3\x20F\x3\x20F\x5\x20F\x301D\n\x20F"+
		"\x3\x210\x3\x210\x3\x210\x3\x210\x3\x211\x3\x211\x3\x211\x3\x211\x3\x211"+
		"\x3\x211\a\x211\x3029\n\x211\f\x211\xE\x211\x302C\v\x211\x3\x211\x3\x211"+
		"\x3\x211\x3\x211\x3\x211\x3\x211\x3\x211\x5\x211\x3035\n\x211\x3\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x5\x212\x303E\n\x212"+
		"\x3\x212\x3\x212\x3\x212\x3\x212\x3\x212\x5\x212\x3045\n\x212\x3\x213"+
		"\x3\x213\x3\x213\x5\x213\x304A\n\x213\x3\x213\x3\x213\x3\x213\x3\x213"+
		"\x3\x213\x3\x213\x3\x213\x3\x214\x3\x214\x3\x214\x3\x214\x3\x214\x3\x214"+
		"\x3\x214\x3\x214\x3\x214\a\x214\x305C\n\x214\f\x214\xE\x214\x305F\v\x214"+
		"\x3\x214\x3\x214\x3\x214\x5\x214\x3064\n\x214\x3\x214\x3\x214\x3\x214"+
		"\x3\x214\x3\x214\x5\x214\x306B\n\x214\x3\x214\x3\x214\x5\x214\x306F\n"+
		"\x214\x3\x214\x3\x214\x3\x214\x3\x214\x3\x214\x3\x214\x3\x214\x3\x214"+
		"\x3\x214\x3\x214\x3\x214\a\x214\x307C\n\x214\f\x214\xE\x214\x307F\v\x214"+
		"\x3\x214\x3\x214\x3\x214\x5\x214\x3084\n\x214\x3\x214\x3\x214\x3\x214"+
		"\x3\x214\x3\x214\x3\x214\x3\x214\x3\x214\x3\x214\x3\x214\x3\x214\x3\x214"+
		"\x3\x214\x3\x214\x3\x214\x3\x214\x3\x214\x5\x214\x3097\n\x214\x3\x215"+
		"\x3\x215\x3\x215\x3\x215\x3\x215\x3\x215\x3\x215\a\x215\x30A0\n\x215\f"+
		"\x215\xE\x215\x30A3\v\x215\x3\x215\x3\x215\x3\x215\x3\x215\x3\x215\x3"+
		"\x215\x3\x215\x3\x215\x3\x215\x3\x215\x5\x215\x30AF\n\x215\x3\x215\x3"+
		"\x215\x3\x215\x3\x215\x3\x215\x3\x215\x3\x215\x3\x215\x3\x215\x3\x215"+
		"\x3\x215\x3\x215\x3\x215\a\x215\x30BE\n\x215\f\x215\xE\x215\x30C1\v\x215"+
		"\x3\x215\x3\x215\x3\x215\x5\x215\x30C6\n\x215\x3\x215\x3\x215\x3\x215"+
		"\x3\x215\x3\x215\x5\x215\x30CD\n\x215\x3\x215\x3\x215\x5\x215\x30D1\n"+
		"\x215\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216"+
		"\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216"+
		"\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x5\x216"+
		"\x30EC\n\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216"+
		"\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216"+
		"\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216"+
		"\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216"+
		"\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216"+
		"\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216"+
		"\x3\x216\x3\x216\x3\x216\x3\x216\x5\x216\x3126\n\x216\x3\x216\x3\x216"+
		"\x5\x216\x312A\n\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216"+
		"\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216"+
		"\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216"+
		"\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216"+
		"\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216"+
		"\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216\x3\x216"+
		"\x3\x216\x3\x216\x3\x216\x3\x216\x5\x216\x3163\n\x216\x5\x216\x3165\n"+
		"\x216\x3\x217\x3\x217\x3\x217\x3\x217\x5\x217\x316B\n\x217\x3\x218\x3"+
		"\x218\x3\x219\x3\x219\x3\x219\x3\x219\x3\x219\x3\x219\x3\x219\x5\x219"+
		"\x3176\n\x219\x3\x21A\x3\x21A\x3\x21A\x3\x21A\x3\x21A\x3\x21A\x3\x21A"+
		"\x5\x21A\x317F\n\x21A\x3\x21B\x3\x21B\x3\x21B\x3\x21B\x3\x21B\x3\x21B"+
		"\x3\x21B\x5\x21B\x3188\n\x21B\x3\x21C\x3\x21C\x3\x21C\x3\x21C\x3\x21C"+
		"\x3\x21C\x3\x21C\x3\x21C\x5\x21C\x3192\n\x21C\x3\x21C\x3\x21C\x3\x21C"+
		"\x3\x21D\x3\x21D\x3\x21D\x3\x21D\x3\x21D\x3\x21D\x3\x21D\x3\x21E\x3\x21E"+
		"\x3\x21E\x3\x21E\x3\x21E\x3\x21E\x3\x21E\x5\x21E\x31A5\n\x21E\x3\x21E"+
		"\x3\x21E\x3\x21E\x3\x21F\x3\x21F\x3\x21F\x3\x21F\x3\x21F\x3\x220\x3\x220"+
		"\x3\x220\x3\x220\x3\x220\x3\x220\x5\x220\x31B5\n\x220\x3\x220\x3\x220"+
		"\x3\x220\x3\x221\x3\x221\x3\x221\x3\x221\x3\x221\x3\x222\x3\x222\x3\x222"+
		"\x3\x222\x3\x222\x3\x222\x5\x222\x31C5\n\x222\x3\x222\x3\x222\x3\x222"+
		"\x3\x223\x3\x223\x3\x223\x3\x223\x3\x223\x3\x224\x3\x224\x3\x224\x3\x224"+
		"\x3\x224\x3\x224\x3\x224\x3\x224\x3\x224\x3\x224\x3\x224\x3\x224\x3\x224"+
		"\x3\x224\x3\x224\x3\x224\x3\x224\x3\x224\x3\x224\x3\x224\x3\x224\x3\x224"+
		"\x3\x224\x3\x224\x3\x224\x3\x224\x3\x224\x3\x224\x3\x224\x3\x224\x5\x224"+
		"\x31ED\n\x224\x3\x225\x3\x225\x3\x225\x3\x225\x3\x225\x3\x225\x3\x225"+
		"\x3\x225\x3\x225\x3\x225\x5\x225\x31F9\n\x225\x3\x226\x3\x226\x3\x226"+
		"\x3\x226\x3\x226\x3\x226\x5\x226\x3201\n\x226\x3\x226\x3\x226\x3\x226"+
		"\x3\x226\x3\x226\x3\x226\x3\x227\x3\x227\x3\x227\x3\x227\x3\x227\x3\x228"+
		"\x3\x228\x3\x228\x3\x228\x3\x228\x3\x229\x5\x229\x3214\n\x229\x3\x229"+
		"\x3\x229\x3\x22A\x5\x22A\x3219\n\x22A\x3\x22A\x3\x22A\x3\x22B\x3\x22B"+
		"\x5\x22B\x321F\n\x22B\x3\x22C\x5\x22C\x3222\n\x22C\x3\x22C\x3\x22C\x3"+
		"\x22C\x5\x22C\x3227\n\x22C\x3\x22C\a\x22C\x322A\n\x22C\f\x22C\xE\x22C"+
		"\x322D\v\x22C\x3\x22C\x3\x22C\x3\x22D\x3\x22D\x3\x22D\x3\x22D\x3\x22E"+
		"\x6\x22E\x3236\n\x22E\r\x22E\xE\x22E\x3237\x3\x22F\x3\x22F\x3\x230\x3"+
		"\x230\x3\x230\x3\x230\x5\x230\x3240\n\x230\x3\x230\a\x230\x3243\n\x230"+
		"\f\x230\xE\x230\x3246\v\x230\x3\x230\x3\x230\x3\x231\x5\x231\x324B\n\x231"+
		"\x3\x231\x3\x231\x3\x231\x3\x231\x3\x231\a\x231\x3252\n\x231\f\x231\xE"+
		"\x231\x3255\v\x231\x3\x231\x3\x231\x3\x231\x3\x231\x3\x231\a\x231\x325C"+
		"\n\x231\f\x231\xE\x231\x325F\v\x231\x5\x231\x3261\n\x231\x3\x231\x3\x231"+
		"\x3\x231\x3\x231\x3\x231\x3\x231\x3\x231\x3\x231\x3\x231\x3\x231\a\x231"+
		"\x326D\n\x231\f\x231\xE\x231\x3270\v\x231\x3\x231\x3\x231\x3\x231\x5\x231"+
		"\x3275\n\x231\x3\x231\x3\x231\x3\x231\x3\x231\x3\x231\x3\x231\x3\x231"+
		"\x5\x231\x327E\n\x231\x3\x232\x3\x232\x5\x232\x3282\n\x232\x3\x233\x3"+
		"\x233\x3\x233\x3\x233\a\x233\x3288\n\x233\f\x233\xE\x233\x328B\v\x233"+
		"\x3\x233\x3\x233\x3\x234\x3\x234\x5\x234\x3291\n\x234\x3\x235\x3\x235"+
		"\x3\x235\x3\x235\x3\x235\x3\x235\x3\x235\x3\x235\x3\x235\a\x235\x329C"+
		"\n\x235\f\x235\xE\x235\x329F\v\x235\x3\x236\x3\x236\x3\x236\a\x236\x32A4"+
		"\n\x236\f\x236\xE\x236\x32A7\v\x236\x3\x237\x3\x237\x3\x237\x3\x237\x3"+
		"\x237\x3\x237\x3\x237\x3\x237\x3\x237\x3\x237\x5\x237\x32B3\n\x237\x3"+
		"\x238\x3\x238\x3\x238\x3\x238\x3\x238\x5\x238\x32BA\n\x238\x3\x238\x3"+
		"\x238\x3\x238\x3\x238\x5\x238\x32C0\n\x238\x3\x238\x3\x238\x5\x238\x32C4"+
		"\n\x238\x3\x238\x3\x238\x3\x238\x3\x238\x3\x238\x3\x238\x3\x238\x3\x238"+
		"\x3\x238\x3\x238\x3\x238\x3\x238\x3\x238\x3\x238\x3\x238\x5\x238\x32D5"+
		"\n\x238\x3\x239\x3\x239\x3\x239\x3\x239\x3\x239\x3\x239\x3\x239\x3\x239"+
		"\x3\x239\x3\x239\x3\x239\x3\x239\x3\x239\x5\x239\x32E4\n\x239\x5\x239"+
		"\x32E6\n\x239\x3\x239\x3\x239\x3\x239\x3\x239\x3\x239\x3\x239\x3\x239"+
		"\x3\x239\x3\x239\x3\x239\x3\x239\x5\x239\x32F3\n\x239\x3\x239\x3\x239"+
		"\x3\x239\x3\x239\x3\x239\x3\x239\x3\x239\x3\x239\x3\x239\x3\x239\x3\x239"+
		"\x3\x239\x3\x239\x3\x239\x5\x239\x3303\n\x239\x3\x239\x3\x239\x3\x239"+
		"\x3\x239\x3\x239\x3\x239\x5\x239\x330B\n\x239\x3\x239\x3\x239\x5\x239"+
		"\x330F\n\x239\x3\x23A\x5\x23A\x3312\n\x23A\x3\x23A\x3\x23A\x3\x23B\x3"+
		"\x23B\x3\x23B\x3\x23B\x3\x23B\x5\x23B\x331B\n\x23B\x3\x23B\x5\x23B\x331E"+
		"\n\x23B\x3\x23B\x5\x23B\x3321\n\x23B\x3\x23B\x3\x23B\x3\x23C\x3\x23C\x3"+
		"\x23C\x3\x23D\x3\x23D\x3\x23D\x3\x23D\x3\x23D\x3\x23D\x5\x23D\x332E\n"+
		"\x23D\x3\x23E\x3\x23E\x5\x23E\x3332\n\x23E\x3\x23F\x3\x23F\x3\x23F\x3"+
		"\x23F\x3\x23F\x3\x23F\x5\x23F\x333A\n\x23F\x3\x240\x3\x240\x3\x240\x3"+
		"\x240\x5\x240\x3340\n\x240\x3\x241\x3\x241\x3\x241\x3\x241\a\x241\x3346"+
		"\n\x241\f\x241\xE\x241\x3349\v\x241\x3\x241\x3\x241\x3\x241\x3\x241\x5"+
		"\x241\x334F\n\x241\x3\x241\x3\x241\x3\x241\x3\x241\x5\x241\x3355\n\x241"+
		"\x3\x241\x3\x241\x3\x241\x3\x241\x3\x241\x3\x241\x3\x241\x3\x241\x3\x241"+
		"\x3\x241\x3\x241\x3\x241\x3\x241\x3\x241\x3\x241\x3\x241\x3\x241\x5\x241"+
		"\x3368\n\x241\x3\x241\x3\x241\x3\x241\x5\x241\x336D\n\x241\x3\x242\x3"+
		"\x242\x3\x242\x3\x242\x3\x242\x3\x242\x3\x242\x5\x242\x3376\n\x242\x3"+
		"\x242\x3\x242\x3\x243\x3\x243\x5\x243\x337C\n\x243\x3\x244\x3\x244\x3"+
		"\x244\x3\x244\x5\x244\x3382\n\x244\x3\x244\x5\x244\x3385\n\x244\x3\x244"+
		"\x3\x244\x5\x244\x3389\n\x244\x3\x244\x3\x244\x3\x244\a\x244\x338E\n\x244"+
		"\f\x244\xE\x244\x3391\v\x244\x3\x245\x3\x245\x3\x245\x3\x245\x3\x245\x5"+
		"\x245\x3398\n\x245\x3\x245\x5\x245\x339B\n\x245\x3\x245\x3\x245\x3\x245"+
		"\x3\x245\x5\x245\x33A1\n\x245\x3\x245\x3\x245\x3\x245\x3\x245\x5\x245"+
		"\x33A7\n\x245\x5\x245\x33A9\n\x245\x3\x245\x3\x245\x3\x245\x3\x245\x5"+
		"\x245\x33AF\n\x245\x3\x245\x5\x245\x33B2\n\x245\x5\x245\x33B4\n\x245\x3"+
		"\x245\x3\x245\x3\x245\x3\x245\x5\x245\x33BA\n\x245\x5\x245\x33BC\n\x245"+
		"\x3\x245\x3\x245\x3\x246\x3\x246\x3\x246\x3\x246\x3\x246\x3\x246\x3\x246"+
		"\x3\x246\x3\x246\x3\x246\x5\x246\x33CA\n\x246\x3\x246\x3\x246\x3\x246"+
		"\x3\x246\x3\x246\x5\x246\x33D1\n\x246\x3\x246\x3\x246\x3\x247\x3\x247"+
		"\x3\x247\x3\x247\x3\x247\x5\x247\x33DA\n\x247\x3\x248\x3\x248\x3\x248"+
		"\x3\x248\x3\x248\x5\x248\x33E1\n\x248\x3\x249\x3\x249\x3\x249\x3\x249"+
		"\x3\x249\x3\x249\x3\x249\x3\x249\x3\x249\x3\x249\x3\x249\x3\x249\x3\x249"+
		"\x3\x249\x3\x249\x3\x249\x5\x249\x33F3\n\x249\x3\x249\x3\x249\x3\x249"+
		"\x3\x249\x3\x249\x5\x249\x33FA\n\x249\x3\x249\x3\x249\x3\x24A\x3\x24A"+
		"\x3\x24A\x5\x24A\x3401\n\x24A\x3\x24A\x3\x24A\x3\x24A\x3\x24A\x3\x24A"+
		"\x5\x24A\x3408\n\x24A\x3\x24A\x3\x24A\x3\x24A\x3\x24A\x5\x24A\x340E\n"+
		"\x24A\x3\x24A\x3\x24A\x3\x24A\x3\x24A\x3\x24A\x5\x24A\x3415\n\x24A\x3"+
		"\x24A\x5\x24A\x3418\n\x24A\x3\x24B\x3\x24B\x3\x24B\x5\x24B\x341D\n\x24B"+
		"\x3\x24B\x3\x24B\x3\x24C\x3\x24C\x3\x24C\x5\x24C\x3424\n\x24C\x3\x24C"+
		"\x3\x24C\x3\x24D\x5\x24D\x3429\n\x24D\x3\x24D\x3\x24D\x5\x24D\x342D\n"+
		"\x24D\x3\x24D\x3\x24D\x3\x24D\x5\x24D\x3432\n\x24D\x3\x24E\x5\x24E\x3435"+
		"\n\x24E\x3\x24E\x3\x24E\x5\x24E\x3439\n\x24E\x3\x24E\x3\x24E\x5\x24E\x343D"+
		"\n\x24E\x3\x24E\x3\x24E\x3\x24E\x5\x24E\x3442\n\x24E\x3\x24F\x3\x24F\x5"+
		"\x24F\x3446\n\x24F\x3\x250\x3\x250\x3\x250\x3\x250\x5\x250\x344C\n\x250"+
		"\x3\x250\x3\x250\x5\x250\x3450\n\x250\x3\x250\x3\x250\x5\x250\x3454\n"+
		"\x250\x3\x250\x3\x250\x3\x250\x5\x250\x3459\n\x250\x3\x250\x3\x250\x5"+
		"\x250\x345D\n\x250\x3\x250\x3\x250\x3\x250\x5\x250\x3462\n\x250\x3\x250"+
		"\x3\x250\x3\x250\x5\x250\x3467\n\x250\x3\x251\x3\x251\x5\x251\x346B\n"+
		"\x251\x3\x251\x3\x251\x3\x251\x5\x251\x3470\n\x251\a\x251\x3472\n\x251"+
		"\f\x251\xE\x251\x3475\v\x251\x3\x252\x3\x252\x3\x252\a\x252\x347A\n\x252"+
		"\f\x252\xE\x252\x347D\v\x252\x3\x253\x5\x253\x3480\n\x253\x3\x253\a\x253"+
		"\x3483\n\x253\f\x253\xE\x253\x3486\v\x253\x3\x253\x3\x253\x3\x254\x3\x254"+
		"\x3\x254\a\x254\x348D\n\x254\f\x254\xE\x254\x3490\v\x254\x3\x255\x3\x255"+
		"\x5\x255\x3494\n\x255\x3\x256\x3\x256\x3\x257\x3\x257\x3\x258\x5\x258"+
		"\x349B\n\x258\x3\x258\x3\x258\x3\x259\x3\x259\x3\x259\x3\x259\x3\x259"+
		"\x5\x259\x34A4\n\x259\x3\x259\x3\x259\x5\x259\x34A8\n\x259\x5\x259\x34AA"+
		"\n\x259\x3\x25A\x3\x25A\x3\x25A\x3\x25A\x3\x25A\x5\x25A\x34B1\n\x25A\x3"+
		"\x25B\x3\x25B\x3\x25B\x3\x25B\x3\x25B\x3\x25B\x3\x25B\x3\x25B\x3\x25B"+
		"\x3\x25B\x5\x25B\x34BD\n\x25B\x3\x25C\x3\x25C\x3\x25C\x5\x25C\x34C2\n"+
		"\x25C\x3\x25C\x3\x25C\x3\x25C\x3\x25C\x3\x25C\x3\x25C\x3\x25C\x3\x25C"+
		"\x3\x25C\x5\x25C\x34CD\n\x25C\x3\x25C\x3\x25C\x3\x25C\x3\x25C\x3\x25C"+
		"\x3\x25C\x3\x25C\x3\x25C\x5\x25C\x34D7\n\x25C\x5\x25C\x34D9\n\x25C\x3"+
		"\x25C\x3\x25C\x3\x25C\x3\x25C\x5\x25C\x34DF\n\x25C\x5\x25C\x34E1\n\x25C"+
		"\x3\x25C\x3\x25C\x3\x25C\x5\x25C\x34E6\n\x25C\x5\x25C\x34E8\n\x25C\x3"+
		"\x25C\x5\x25C\x34EB\n\x25C\x3\x25D\x3\x25D\x5\x25D\x34EF\n\x25D\x3\x25E"+
		"\x3\x25E\x5\x25E\x34F3\n\x25E\x3\x25F\x3\x25F\x3\x25F\x3\x25F\x5\x25F"+
		"\x34F9\n\x25F\x3\x25F\x3\x25F\x3\x25F\x3\x25F\x3\x25F\x3\x25F\x3\x25F"+
		"\x5\x25F\x3502\n\x25F\x3\x25F\x5\x25F\x3505\n\x25F\x5\x25F\x3507\n\x25F"+
		"\x3\x260\x5\x260\x350A\n\x260\x3\x260\x3\x260\x3\x260\x3\x260\x5\x260"+
		"\x3510\n\x260\x3\x260\x3\x260\x5\x260\x3514\n\x260\x3\x260\x5\x260\x3517"+
		"\n\x260\x3\x261\x3\x261\x3\x261\x3\x261\x3\x261\x3\x261\x3\x261\x5\x261"+
		"\x3520\n\x261\x3\x262\x3\x262\x3\x262\x3\x262\x3\x262\x3\x262\x3\x262"+
		"\x5\x262\x3529\n\x262\x3\x263\x3\x263\x3\x263\x3\x263\x3\x263\x3\x263"+
		"\x3\x263\x3\x263\x3\x263\x3\x263\x5\x263\x3535\n\x263\x3\x263\x5\x263"+
		"\x3538\n\x263\x3\x264\x3\x264\x3\x264\x3\x264\x3\x264\x3\x264\x3\x264"+
		"\x3\x264\x3\x264\x3\x264\x3\x264\x3\x264\x3\x264\x3\x264\x3\x264\x3\x264"+
		"\x3\x264\x3\x264\x3\x264\x3\x264\x3\x264\x3\x264\x3\x264\x3\x264\x3\x264"+
		"\x3\x264\x3\x264\x3\x264\x3\x264\x3\x264\x5\x264\x3558\n\x264\x3\x264"+
		"\x3\x264\x5\x264\x355C\n\x264\x3\x264\x5\x264\x355F\n\x264\x3\x265\x3"+
		"\x265\x3\x265\x3\x265\x5\x265\x3565\n\x265\x3\x266\x3\x266\x3\x266\x5"+
		"\x266\x356A\n\x266\x3\x266\x3\x266\x5\x266\x356E\n\x266\x3\x266\x3\x266"+
		"\x5\x266\x3572\n\x266\x3\x266\x3\x266\x5\x266\x3576\n\x266\x3\x267\x3"+
		"\x267\x3\x268\x3\x268\x3\x268\x3\x268\x3\x268\x5\x268\x357F\n\x268\x3"+
		"\x268\x3\x268\x5\x268\x3583\n\x268\x3\x269\x3\x269\x3\x26A\x3\x26A\x3"+
		"\x26A\x3\x26A\x5\x26A\x358B\n\x26A\x3\x26B\x3\x26B\x3\x26C\x3\x26C\x5"+
		"\x26C\x3591\n\x26C\x3\x26D\x3\x26D\x3\x26D\x3\x26D\x3\x26D\x3\x26D\x3"+
		"\x26D\x3\x26D\x3\x26D\x3\x26D\x3\x26D\x3\x26D\x3\x26D\x3\x26D\x3\x26D"+
		"\x5\x26D\x35A2\n\x26D\x3\x26E\x3\x26E\x3\x26F\x3\x26F\x5\x26F\x35A8\n"+
		"\x26F\x3\x26F\x2\x2\x5`\x3A6\x3C0\x270\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2"+
		"\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2"+
		"$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2"+
		"@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2"+
		"^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2"+
		"|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2"+
		"\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2"+
		"\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2\xB6\x2\xB8\x2"+
		"\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2\xCA\x2\xCC\x2"+
		"\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2\xDC\x2\xDE\x2\xE0\x2"+
		"\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2\xF0\x2\xF2\x2\xF4\x2"+
		"\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102\x2\x104\x2\x106\x2\x108"+
		"\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112\x2\x114\x2\x116\x2\x118\x2\x11A"+
		"\x2\x11C\x2\x11E\x2\x120\x2\x122\x2\x124\x2\x126\x2\x128\x2\x12A\x2\x12C"+
		"\x2\x12E\x2\x130\x2\x132\x2\x134\x2\x136\x2\x138\x2\x13A\x2\x13C\x2\x13E"+
		"\x2\x140\x2\x142\x2\x144\x2\x146\x2\x148\x2\x14A\x2\x14C\x2\x14E\x2\x150"+
		"\x2\x152\x2\x154\x2\x156\x2\x158\x2\x15A\x2\x15C\x2\x15E\x2\x160\x2\x162"+
		"\x2\x164\x2\x166\x2\x168\x2\x16A\x2\x16C\x2\x16E\x2\x170\x2\x172\x2\x174"+
		"\x2\x176\x2\x178\x2\x17A\x2\x17C\x2\x17E\x2\x180\x2\x182\x2\x184\x2\x186"+
		"\x2\x188\x2\x18A\x2\x18C\x2\x18E\x2\x190\x2\x192\x2\x194\x2\x196\x2\x198"+
		"\x2\x19A\x2\x19C\x2\x19E\x2\x1A0\x2\x1A2\x2\x1A4\x2\x1A6\x2\x1A8\x2\x1AA"+
		"\x2\x1AC\x2\x1AE\x2\x1B0\x2\x1B2\x2\x1B4\x2\x1B6\x2\x1B8\x2\x1BA\x2\x1BC"+
		"\x2\x1BE\x2\x1C0\x2\x1C2\x2\x1C4\x2\x1C6\x2\x1C8\x2\x1CA\x2\x1CC\x2\x1CE"+
		"\x2\x1D0\x2\x1D2\x2\x1D4\x2\x1D6\x2\x1D8\x2\x1DA\x2\x1DC\x2\x1DE\x2\x1E0"+
		"\x2\x1E2\x2\x1E4\x2\x1E6\x2\x1E8\x2\x1EA\x2\x1EC\x2\x1EE\x2\x1F0\x2\x1F2"+
		"\x2\x1F4\x2\x1F6\x2\x1F8\x2\x1FA\x2\x1FC\x2\x1FE\x2\x200\x2\x202\x2\x204"+
		"\x2\x206\x2\x208\x2\x20A\x2\x20C\x2\x20E\x2\x210\x2\x212\x2\x214\x2\x216"+
		"\x2\x218\x2\x21A\x2\x21C\x2\x21E\x2\x220\x2\x222\x2\x224\x2\x226\x2\x228"+
		"\x2\x22A\x2\x22C\x2\x22E\x2\x230\x2\x232\x2\x234\x2\x236\x2\x238\x2\x23A"+
		"\x2\x23C\x2\x23E\x2\x240\x2\x242\x2\x244\x2\x246\x2\x248\x2\x24A\x2\x24C"+
		"\x2\x24E\x2\x250\x2\x252\x2\x254\x2\x256\x2\x258\x2\x25A\x2\x25C\x2\x25E"+
		"\x2\x260\x2\x262\x2\x264\x2\x266\x2\x268\x2\x26A\x2\x26C\x2\x26E\x2\x270"+
		"\x2\x272\x2\x274\x2\x276\x2\x278\x2\x27A\x2\x27C\x2\x27E\x2\x280\x2\x282"+
		"\x2\x284\x2\x286\x2\x288\x2\x28A\x2\x28C\x2\x28E\x2\x290\x2\x292\x2\x294"+
		"\x2\x296\x2\x298\x2\x29A\x2\x29C\x2\x29E\x2\x2A0\x2\x2A2\x2\x2A4\x2\x2A6"+
		"\x2\x2A8\x2\x2AA\x2\x2AC\x2\x2AE\x2\x2B0\x2\x2B2\x2\x2B4\x2\x2B6\x2\x2B8"+
		"\x2\x2BA\x2\x2BC\x2\x2BE\x2\x2C0\x2\x2C2\x2\x2C4\x2\x2C6\x2\x2C8\x2\x2CA"+
		"\x2\x2CC\x2\x2CE\x2\x2D0\x2\x2D2\x2\x2D4\x2\x2D6\x2\x2D8\x2\x2DA\x2\x2DC"+
		"\x2\x2DE\x2\x2E0\x2\x2E2\x2\x2E4\x2\x2E6\x2\x2E8\x2\x2EA\x2\x2EC\x2\x2EE"+
		"\x2\x2F0\x2\x2F2\x2\x2F4\x2\x2F6\x2\x2F8\x2\x2FA\x2\x2FC\x2\x2FE\x2\x300"+
		"\x2\x302\x2\x304\x2\x306\x2\x308\x2\x30A\x2\x30C\x2\x30E\x2\x310\x2\x312"+
		"\x2\x314\x2\x316\x2\x318\x2\x31A\x2\x31C\x2\x31E\x2\x320\x2\x322\x2\x324"+
		"\x2\x326\x2\x328\x2\x32A\x2\x32C\x2\x32E\x2\x330\x2\x332\x2\x334\x2\x336"+
		"\x2\x338\x2\x33A\x2\x33C\x2\x33E\x2\x340\x2\x342\x2\x344\x2\x346\x2\x348"+
		"\x2\x34A\x2\x34C\x2\x34E\x2\x350\x2\x352\x2\x354\x2\x356\x2\x358\x2\x35A"+
		"\x2\x35C\x2\x35E\x2\x360\x2\x362\x2\x364\x2\x366\x2\x368\x2\x36A\x2\x36C"+
		"\x2\x36E\x2\x370\x2\x372\x2\x374\x2\x376\x2\x378\x2\x37A\x2\x37C\x2\x37E"+
		"\x2\x380\x2\x382\x2\x384\x2\x386\x2\x388\x2\x38A\x2\x38C\x2\x38E\x2\x390"+
		"\x2\x392\x2\x394\x2\x396\x2\x398\x2\x39A\x2\x39C\x2\x39E\x2\x3A0\x2\x3A2"+
		"\x2\x3A4\x2\x3A6\x2\x3A8\x2\x3AA\x2\x3AC\x2\x3AE\x2\x3B0\x2\x3B2\x2\x3B4"+
		"\x2\x3B6\x2\x3B8\x2\x3BA\x2\x3BC\x2\x3BE\x2\x3C0\x2\x3C2\x2\x3C4\x2\x3C6"+
		"\x2\x3C8\x2\x3CA\x2\x3CC\x2\x3CE\x2\x3D0\x2\x3D2\x2\x3D4\x2\x3D6\x2\x3D8"+
		"\x2\x3DA\x2\x3DC\x2\x3DE\x2\x3E0\x2\x3E2\x2\x3E4\x2\x3E6\x2\x3E8\x2\x3EA"+
		"\x2\x3EC\x2\x3EE\x2\x3F0\x2\x3F2\x2\x3F4\x2\x3F6\x2\x3F8\x2\x3FA\x2\x3FC"+
		"\x2\x3FE\x2\x400\x2\x402\x2\x404\x2\x406\x2\x408\x2\x40A\x2\x40C\x2\x40E"+
		"\x2\x410\x2\x412\x2\x414\x2\x416\x2\x418\x2\x41A\x2\x41C\x2\x41E\x2\x420"+
		"\x2\x422\x2\x424\x2\x426\x2\x428\x2\x42A\x2\x42C\x2\x42E\x2\x430\x2\x432"+
		"\x2\x434\x2\x436\x2\x438\x2\x43A\x2\x43C\x2\x43E\x2\x440\x2\x442\x2\x444"+
		"\x2\x446\x2\x448\x2\x44A\x2\x44C\x2\x44E\x2\x450\x2\x452\x2\x454\x2\x456"+
		"\x2\x458\x2\x45A\x2\x45C\x2\x45E\x2\x460\x2\x462\x2\x464\x2\x466\x2\x468"+
		"\x2\x46A\x2\x46C\x2\x46E\x2\x470\x2\x472\x2\x474\x2\x476\x2\x478\x2\x47A"+
		"\x2\x47C\x2\x47E\x2\x480\x2\x482\x2\x484\x2\x486\x2\x488\x2\x48A\x2\x48C"+
		"\x2\x48E\x2\x490\x2\x492\x2\x494\x2\x496\x2\x498\x2\x49A\x2\x49C\x2\x49E"+
		"\x2\x4A0\x2\x4A2\x2\x4A4\x2\x4A6\x2\x4A8\x2\x4AA\x2\x4AC\x2\x4AE\x2\x4B0"+
		"\x2\x4B2\x2\x4B4\x2\x4B6\x2\x4B8\x2\x4BA\x2\x4BC\x2\x4BE\x2\x4C0\x2\x4C2"+
		"\x2\x4C4\x2\x4C6\x2\x4C8\x2\x4CA\x2\x4CC\x2\x4CE\x2\x4D0\x2\x4D2\x2\x4D4"+
		"\x2\x4D6\x2\x4D8\x2\x4DA\x2\x4DC\x2\x2\xAF\x3\x2\x468\x469\x4\x2\x468"+
		"\x468\x46B\x46B\x4\x2\x100\x100\x3E7\x3E8\x4\x2\x468\x469\x46B\x46B\x5"+
		"\x2\x215\x215\x275\x275\x387\x387\x5\x2\x465\x465\x468\x468\x46B\x46B"+
		"\x5\x2\x151\x151\x355\x355\x413\x413\x3\x2\x46B\x46C\x3\x2\x34E\x352\x4"+
		"\x2\xCB\xCB\x29E\x29E\x4\x2\x286\x286\x35A\x35A\x5\x2\xDE\xDE\x286\x286"+
		"\x35A\x35A\x4\x2\x12E\x12E\x220\x220\x5\x2\xDE\xDE\x286\x286\x37A\x37A"+
		"\x4\x2\x187\x187\x35E\x35E\x4\x2\xDE\xDE\x37A\x37A\x5\x2\x26B\x26B\x2D9"+
		"\x2D9\x365\x366\x4\x2\x28E\x28E\x294\x294\x4\x2@@\x3D3\x3D3\x4\x2KK\x21C"+
		"\x21C\x4\x2\x18\x18\x30C\x30C\x5\x2\x18\x18\x260\x260\x30A\x30A\x4\x2"+
		"%%\xCA\xCA\x4\x2\r\r\x11E\x11E\x4\x2\x142\x142\x38B\x38B\x4\x2\x112\x112"+
		"\x129\x129\x5\x2\x113\x113\x3AF\x3AF\x3C0\x3C0\x4\x2\x113\x113\x12A\x12A"+
		"\x5\x2\x18\x18\x2BD\x2BD\x43C\x43C\x5\x2\x113\x113\x32A\x32A\x3CB\x3CB"+
		"\x5\x2\x1F1\x1F1\x257\x257\x27F\x27F\x4\x2\x469\x469\x46B\x46B\x4\x2\x1EC"+
		"\x1EC\x239\x239\x5\x2\x1C\x1C\x1F\x1F\x278\x278\x5\x2\x26B\x26B\x2CB\x2CB"+
		"\x2CD\x2CD\x4\x2\x3AE\x3AE\x3BE\x3BE\x4\x2\'\'\x2A5\x2A5\x4\x2\r\r\x386"+
		"\x386\x4\x2\x208\x208\x437\x437\x4\x2\x2EE\x2EE\x2F8\x2F8\x4\x2\x469\x469"+
		"\x46B\x46C\x4\x2\x253\x253\x410\x410\x4\x2\x240\x240\x3A6\x3A6\x4\x2\x112"+
		"\x112\x311\x311\t\x2\x102\x102\x145\x145\x1D1\x1D1\x30F\x30F\x314\x314"+
		"\x36F\x36F\x415\x415\x5\x2\x286\x286\x35A\x35A\x3D7\x3D7\x4\x2\x105\x105"+
		"\x199\x199\x6\x2\x102\x102\x1D1\x1D1\x36F\x36F\x415\x415\x4\x2\x65\x65"+
		"\x16D\x16D\x4\x2\x1D1\x1D1\x415\x415\x4\x2\x102\x102\x415\x415\x5\x2\x188"+
		"\x188\x239\x239\x3E0\x3E0\x4\x2\x40F\x40F\x469\x469\x5\x2\xBD\xBD\x157"+
		"\x157\x393\x393\x4\x2\xF9\xF9\x46B\x46B\x4\x2\xF9\xF9\x469\x469\x4\x2"+
		"\x210\x210\x46B\x46B\x5\x2\x188\x188\x1EC\x1EC\x239\x239\x4\x2\x172\x172"+
		"\x181\x181\x5\x2\x1AA\x1AA\x219\x219\x23C\x23C\x4\x2\x200\x200\x340\x340"+
		"\x5\x2\x30\x30\x1CD\x1CD\x3DE\x3DE\x4\x2\x26B\x26B\x2BA\x2BA\x4\x2\x188"+
		"\x188\x239\x239\x6\x2\xA1\xA2\x26B\x26B\x2B1\x2B1\x347\x347\x3\x2\xA1"+
		"\xA2\x5\x2\x2BF\x2BF\x2E8\x2E8\x421\x421\x4\x2%%\x323\x323\x4\x2\x2E2"+
		"\x2E2\x2E4\x2E4\x5\x2\x102\x102\x1D1\x1D1\x415\x415\x4\x2\x15\x15\x172"+
		"\x172\x5\x2\x2A9\x2A9\x2AB\x2AB\x304\x304\x4\x2\x2C3\x2C3\x34C\x34C\x4"+
		"\x2\x18\x18\x1C7\x1C7\x5\x2\x9A\x9A\x26A\x26A\x40D\x40D\x4\x2;;\x108\x108"+
		"\x5\x2\x26B\x26B\x2B1\x2B1\x347\x347\x5\x2\x12E\x12E\x35B\x35B\x42D\x42D"+
		"\x5\x2GG\x112\x112\x3D7\x3D7\x4\x2\x87\x87\x261\x261\x5\x2\x66\x66\x26B"+
		"\x26B\x370\x370\x6\x2\x304\x304\x308\x308\x30A\x30A\x30C\x30C\x5\x2\xED"+
		"\xED\x1AF\x1AF\x245\x245\x4\x2\x194\x194\x210\x210\x5\x2\x18\x18\x46B"+
		"\x46B\x493\x494\x4\x2\x182\x182\x28E\x28E\x5\x2\x127\x127\x28F\x28F\x295"+
		"\x295\x4\x2\x30A\x30A\x30C\x30C\x5\x2\x252\x252\x335\x335\x397\x397\x5"+
		"\x2\x19\x19\x113\x113\x174\x174\x4\x2\x337\x337\x3D0\x3D0\x4\x2\x174\x174"+
		"\x396\x396\x5\x2pp\x182\x182\x396\x396\x5\x2\x8E\x8E\x26B\x26B\x3ED\x3ED"+
		"\x4\x2\x245\x245\x368\x368\x3\x2\x15C\x15D\x5\x2\x115\x115\x3DD\x3DD\x418"+
		"\x418\x4\x2\xAB\xAB\x277\x277\x4\x2\x1CC\x1CC\x269\x269\x4\x2\x270\x270"+
		"\x39A\x39A\x4\x2\x17B\x17B\x266\x266\x4\x2\x8E\x8E\x276\x276\x4\x2\xBE"+
		"\xBE\x3C1\x3C1\x4\x2\x26F\x26F\x33F\x33F\x4\x2\x20E\x20E\x274\x274\x4"+
		"\x2\x11\x13\x3FB\x3FB\x4\x2\x216\x216\x41B\x41B\x4\x2\x2A9\x2A9\x2AB\x2AB"+
		"\x4\x2\x15C\x15C\x46C\x46C\x4\x2\xF8\xF8\x12E\x12E\x4\x2\x14C\x14C\x3B1"+
		"\x3B1\a\x2\x11\x13\x107\x107\x10A\x10A\x2FE\x300\x3FA\x3FB\x4\x2\x272"+
		"\x272\x381\x381\x4\x2\x42\x42\x342\x342\x4\x2\xDE\xDE\x215\x215\x3\x2"+
		"\x3F2\x3F3\x6\x2\"\"\x13D\x13D\x279\x279\x3DA\x3DA\x3\x2\x31E\x320\x4"+
		"\x2!\"\x279\x279\x4\x2\x268\x268\x31E\x320\x6\x2XX\x27A\x27B\x37D\x37D"+
		"\x429\x429\x6\x2#$\x159\x159\x279\x279\x3D8\x3D8\x6\x2tt\x2AE\x2AE\x370"+
		"\x370\x46B\x46B\x4\x2\x9A\x9A\x26A\x26A\x4\x2\xBA\xBA\x119\x119\x5\x2"+
		"\x347\x347\x378\x378\x3F4\x3F4\x4\x2\x130\x130\x3AE\x3AE\x4\x2\x10B\x10B"+
		"\x2FA\x2FA\x4\x2::\xAE\xAE\x4\x2\x1D0\x1D0\x374\x374\x4\x2\x17D\x17D\x362"+
		"\x362\x6\x2\x123\x123\x15A\x15A\x1F4\x1F4\x3B3\x3B3\x5\x2\x2A1\x2A1\x30A"+
		"\x30A\x363\x363\x4\x2\x6\x6\x318\x318\x6\x2\x1D8\x1D8\x2E7\x2E7\x3E7\x3E7"+
		"\x443\x443\x12\x2)*,/\x38\x39\xB0\xB0\xD9\xD9\x170\x170\x175\x175\x1C0"+
		"\x1C0\x262\x262\x285\x285\x2B9\x2B9\x2F6\x2F6\x31A\x31A\x38F\x391\x440"+
		"\x440\x495\x495\x3\x2\x489\x48B\x5\x2\x47B\x47B\x48C\x48D\x48F\x491\x3"+
		"\x2\x48C\x48D\x5\x2\x18\x18\x30\x30\x39E\x39E\x4\x2\x18\x18\x116\x116"+
		"\x4\x2\x469\x469\x46D\x46E\x4\x2\x347\x347\x34C\x34C\x4\x2\x16E\x16E\x25F"+
		"\x25F\x4\x2\x5\x5\x448\x448\x4\x2GG\x2BF\x2BF\x4\x2\x1A0\x1A0\x2A6\x2A6"+
		"\x5\x2\xAF\xAF\x1A0\x1A0\x240\x240\x5\x2\x1A0\x1A0\x218\x218\x240\x240"+
		"\x4\x2\x103\x103\x1D2\x1D2\x4\x2\x281\x281\x468\x469\x5\x2\x182\x182\x200"+
		"\x200\x340\x340\x6\x2\x1A0\x1A0\x218\x218\x240\x240\x319\x319\x4\x2\xCE"+
		"\xCE\x2AA\x2AA\x4\x2\xB9\xB9\x180\x180\x4\x2\x371\x371\x373\x373\x3\x2"+
		"\x498\x4A9\x6\x2\x1AB\x1AB\x267\x267\x305\x305\x38C\x38C\x5\x2\x104\x104"+
		"\x2FC\x2FC\x34D\x34D\t\x2UU\x223\x223\x244\x244\x3BC\x3BD\x3CA\x3CA\x424"+
		"\x424\x426\x426\x4\x2\xC6\xC6\xC8\xC8\x4\x2\x16F\x16F\x1FC\x1FC\x4\x2"+
		"\x1F9\x1F9\x1FD\x1FD\x4\x2\xD0\xD0\x2C6\x2C6\x3\x2\x2C4\x2C5\x4\x2\x2FB"+
		"\x2FB\x34C\x34C\x5\x2\x182\x182\x28E\x28E\x30A\x30A\x3\x2\x316\x317\x3"+
		"\x2\x46D\x46E\x4\x2\x469\x469\x46D\x46D\x9F\x2\x3\x6\b\x17\x19$&&(/\x31"+
		"\x39<\x45GUX[]]_hjkmnppruxy{\x86\x88\x8C\x8E\x95\x97\x97\x99\x99\x9D\x9D"+
		"\x9F\xA6\xA8\xAD\xAF\xB5\xB7\xB7\xBA\xBC\xBE\xC2\xC4\xC9\xCB\xCD\xCF\xD0"+
		"\xD9\xDD\xE0\xE4\xE6\xF4\xF7\xF8\xFA\x101\x103\x104\x106\x107\x109\x114"+
		"\x118\x119\x11F\x121\x123\x123\x125\x125\x127\x12F\x131\x132\x134\x13B"+
		"\x13D\x140\x142\x144\x146\x146\x148\x148\x14A\x14F\x151\x15A\x15D\x171"+
		"\x173\x179\x17B\x17E\x183\x186\x188\x195\x198\x198\x19A\x19A\x19C\x1A3"+
		"\x1A5\x1AA\x1AC\x1AF\x1B3\x1B6\x1B8\x1C1\x1C3\x1C6\x1C8\x1CD\x1CF\x1D0"+
		"\x1D2\x1D4\x1D8\x1D9\x1DB\x1E3\x1E5\x1F1\x1F3\x1F7\x1F9\x1FE\x201\x204"+
		"\x207\x20D\x20F\x232\x234\x237\x239\x23F\x241\x254\x256\x256\x258\x260"+
		"\x262\x266\x268\x269\x26B\x270\x272\x27F\x282\x28C\x28F\x290\x292\x293"+
		"\x295\x297\x29A\x29A\x29E\x29F\x2A1\x2A3\x2A7\x2A9\x2AB\x2AB\x2AD\x2B6"+
		"\x2B8\x2C2\x2C4\x2CE\x2D1\x2D8\x2DA\x2DA\x2DC\x2E1\x2E3\x2E3\x2E5\x2EA"+
		"\x2EC\x2EF\x2F1\x2F1\x2F4\x2F8\x2FA\x2FC\x2FE\x300\x302\x305\x307\x310"+
		"\x312\x313\x315\x325\x327\x332\x335\x339\x33B\x33C\x33F\x33F\x341\x342"+
		"\x344\x347\x349\x34A\x34C\x353\x355\x357\x359\x359\x35B\x36B\x36D\x36E"+
		"\x370\x370\x374\x37F\x381\x384\x387\x387\x389\x389\x38B\x392\x394\x398"+
		"\x39A\x39D\x39F\x3AB\x3AD\x3B3\x3B5\x3D5\x3D8\x3D8\x3DA\x3E2\x3E5\x3EA"+
		"\x3ED\x3F1\x3F4\x3F7\x3F9\x3FB\x3FD\x3FF\x401\x40B\x40E\x411\x413\x414"+
		"\x417\x418\x41A\x41A\x41C\x421\x423\x426\x428\x42A\x42C\x42F\x431\x432"+
		"\x437\x437\x43A\x43E\x442\x449\x460\x461\x492\x492\x4B6\x4B9\x3\x2\x473"+
		"\x47A\a\x2\x188\x188\x1EC\x1EC\x239\x239\x3E0\x3E0\x48B\x48B\x3EAD\x2"+
		"\x4EE\x3\x2\x2\x2\x4\x50A\x3\x2\x2\x2\x6\x510\x3\x2\x2\x2\b\x52F\x3\x2"+
		"\x2\x2\n\x536\x3\x2\x2\x2\f\x5DE\x3\x2\x2\x2\xE\x5E5\x3\x2\x2\x2\x10\x5F3"+
		"\x3\x2\x2\x2\x12\x5F5\x3\x2\x2\x2\x14\x603\x3\x2\x2\x2\x16\x607\x3\x2"+
		"\x2\x2\x18\x615\x3\x2\x2\x2\x1A\x617\x3\x2\x2\x2\x1C\x61E\x3\x2\x2\x2"+
		"\x1E\x628\x3\x2\x2\x2 \x634\x3\x2\x2\x2\"\x636\x3\x2\x2\x2$\x638\x3\x2"+
		"\x2\x2&\x63A\x3\x2\x2\x2(\x659\x3\x2\x2\x2*\x66A\x3\x2\x2\x2,\x677\x3"+
		"\x2\x2\x2.\x6A6\x3\x2\x2\x2\x30\x6A8\x3\x2\x2\x2\x32\x6BB\x3\x2\x2\x2"+
		"\x34\x6BD\x3\x2\x2\x2\x36\x6DA\x3\x2\x2\x2\x38\x6E7\x3\x2\x2\x2:\x6FC"+
		"\x3\x2\x2\x2<\x709\x3\x2\x2\x2>\x70E\x3\x2\x2\x2@\x712\x3\x2\x2\x2\x42"+
		"\x716\x3\x2\x2\x2\x44\x721\x3\x2\x2\x2\x46\x726\x3\x2\x2\x2H\x728\x3\x2"+
		"\x2\x2J\x72D\x3\x2\x2\x2L\x72F\x3\x2\x2\x2N\x731\x3\x2\x2\x2P\x734\x3"+
		"\x2\x2\x2R\x738\x3\x2\x2\x2T\x73E\x3\x2\x2\x2V\x740\x3\x2\x2\x2X\x743"+
		"\x3\x2\x2\x2Z\x745\x3\x2\x2\x2\\\x748\x3\x2\x2\x2^\x74D\x3\x2\x2\x2`\x758"+
		"\x3\x2\x2\x2\x62\x761\x3\x2\x2\x2\x64\x765\x3\x2\x2\x2\x66\x767\x3\x2"+
		"\x2\x2h\x76D\x3\x2\x2\x2j\x76F\x3\x2\x2\x2l\x771\x3\x2\x2\x2n\x774\x3"+
		"\x2\x2\x2p\x77C\x3\x2\x2\x2r\x77E\x3\x2\x2\x2t\x780\x3\x2\x2\x2v\x796"+
		"\x3\x2\x2\x2x\x7A9\x3\x2\x2\x2z\x7B1\x3\x2\x2\x2|\x7B5\x3\x2\x2\x2~\x7BD"+
		"\x3\x2\x2\x2\x80\x7CC\x3\x2\x2\x2\x82\x7CE\x3\x2\x2\x2\x84\x7FA\x3\x2"+
		"\x2\x2\x86\x803\x3\x2\x2\x2\x88\x810\x3\x2\x2\x2\x8A\x812\x3\x2\x2\x2"+
		"\x8C\x814\x3\x2\x2\x2\x8E\x816\x3\x2\x2\x2\x90\x81A\x3\x2\x2\x2\x92\x824"+
		"\x3\x2\x2\x2\x94\x82E\x3\x2\x2\x2\x96\x85A\x3\x2\x2\x2\x98\x871\x3\x2"+
		"\x2\x2\x9A\x873\x3\x2\x2\x2\x9C\x875\x3\x2\x2\x2\x9E\x8D2\x3\x2\x2\x2"+
		"\xA0\x8D4\x3\x2\x2\x2\xA2\x8D9\x3\x2\x2\x2\xA4\x8DC\x3\x2\x2\x2\xA6\xA44"+
		"\x3\x2\x2\x2\xA8\xA46\x3\x2\x2\x2\xAA\xA48\x3\x2\x2\x2\xAC\xA4A\x3\x2"+
		"\x2\x2\xAE\xA80\x3\x2\x2\x2\xB0\xA85\x3\x2\x2\x2\xB2\xAB1\x3\x2\x2\x2"+
		"\xB4\xAC8\x3\x2\x2\x2\xB6\xAE6\x3\x2\x2\x2\xB8\xAEA\x3\x2\x2\x2\xBA\xAF0"+
		"\x3\x2\x2\x2\xBC\xAF6\x3\x2\x2\x2\xBE\xAFA\x3\x2\x2\x2\xC0\xAFE\x3\x2"+
		"\x2\x2\xC2\xB03\x3\x2\x2\x2\xC4\xB11\x3\x2\x2\x2\xC6\xB17\x3\x2\x2\x2"+
		"\xC8\xB1C\x3\x2\x2\x2\xCA\xB22\x3\x2\x2\x2\xCC\xB32\x3\x2\x2\x2\xCE\xB36"+
		"\x3\x2\x2\x2\xD0\xB3C\x3\x2\x2\x2\xD2\xB42\x3\x2\x2\x2\xD4\xB4A\x3\x2"+
		"\x2\x2\xD6\xB50\x3\x2\x2\x2\xD8\xB5F\x3\x2\x2\x2\xDA\xB71\x3\x2\x2\x2"+
		"\xDC\xB78\x3\x2\x2\x2\xDE\xB7D\x3\x2\x2\x2\xE0\xB88\x3\x2\x2\x2\xE2\xB8D"+
		"\x3\x2\x2\x2\xE4\xB91\x3\x2\x2\x2\xE6\xB95\x3\x2\x2\x2\xE8\xB9A\x3\x2"+
		"\x2\x2\xEA\xB9F\x3\x2\x2\x2\xEC\xBA4\x3\x2\x2\x2\xEE\xBB2\x3\x2\x2\x2"+
		"\xF0\xBB8\x3\x2\x2\x2\xF2\xBBD\x3\x2\x2\x2\xF4\xBC5\x3\x2\x2\x2\xF6\xBC9"+
		"\x3\x2\x2\x2\xF8\xBDA\x3\x2\x2\x2\xFA\xBE2\x3\x2\x2\x2\xFC\xBE8\x3\x2"+
		"\x2\x2\xFE\xBF6\x3\x2\x2\x2\x100\xC0C\x3\x2\x2\x2\x102\xC11\x3\x2\x2\x2"+
		"\x104\xC17\x3\x2\x2\x2\x106\xC1C\x3\x2\x2\x2\x108\xC20\x3\x2\x2\x2\x10A"+
		"\xC3C\x3\x2\x2\x2\x10C\xC47\x3\x2\x2\x2\x10E\xC50\x3\x2\x2\x2\x110\xC5D"+
		"\x3\x2\x2\x2\x112\xC65\x3\x2\x2\x2\x114\xC6A\x3\x2\x2\x2\x116\xC75\x3"+
		"\x2\x2\x2\x118\xC93\x3\x2\x2\x2\x11A\xCB1\x3\x2\x2\x2\x11C\xCBF\x3\x2"+
		"\x2\x2\x11E\xCD7\x3\x2\x2\x2\x120\xCE7\x3\x2\x2\x2\x122\xCF4\x3\x2\x2"+
		"\x2\x124\xD07\x3\x2\x2\x2\x126\xD14\x3\x2\x2\x2\x128\xD1D\x3\x2\x2\x2"+
		"\x12A\xD62\x3\x2\x2\x2\x12C\xD72\x3\x2\x2\x2\x12E\xD86\x3\x2\x2\x2\x130"+
		"\xD97\x3\x2\x2\x2\x132\xDB5\x3\x2\x2\x2\x134\xEA8\x3\x2\x2\x2\x136\xEB1"+
		"\x3\x2\x2\x2\x138\xEEB\x3\x2\x2\x2\x13A\xF1C\x3\x2\x2\x2\x13C\xF1E\x3"+
		"\x2\x2\x2\x13E\xF47\x3\x2\x2\x2\x140\xF79\x3\x2\x2\x2\x142\xFBF\x3\x2"+
		"\x2\x2\x144\x1002\x3\x2\x2\x2\x146\x1012\x3\x2\x2\x2\x148\x102E\x3\x2"+
		"\x2\x2\x14A\x1041\x3\x2\x2\x2\x14C\x1056\x3\x2\x2\x2\x14E\x109E\x3\x2"+
		"\x2\x2\x150\x10FD\x3\x2\x2\x2\x152\x1113\x3\x2\x2\x2\x154\x111F\x3\x2"+
		"\x2\x2\x156\x113B\x3\x2\x2\x2\x158\x1150\x3\x2\x2\x2\x15A\x116A\x3\x2"+
		"\x2\x2\x15C\x1173\x3\x2\x2\x2\x15E\x1193\x3\x2\x2\x2\x160\x119D\x3\x2"+
		"\x2\x2\x162\x11AD\x3\x2\x2\x2\x164\x11B9\x3\x2\x2\x2\x166\x11C2\x3\x2"+
		"\x2\x2\x168\x11D3\x3\x2\x2\x2\x16A\x11EB\x3\x2\x2\x2\x16C\x1257\x3\x2"+
		"\x2\x2\x16E\x1271\x3\x2\x2\x2\x170\x128E\x3\x2\x2\x2\x172\x1296\x3\x2"+
		"\x2\x2\x174\x12AE\x3\x2\x2\x2\x176\x12B0\x3\x2\x2\x2\x178\x12BA\x3\x2"+
		"\x2\x2\x17A\x12BE\x3\x2\x2\x2\x17C\x12CA\x3\x2\x2\x2\x17E\x12E7\x3\x2"+
		"\x2\x2\x180\x12EE\x3\x2\x2\x2\x182\x131A\x3\x2\x2\x2\x184\x1325\x3\x2"+
		"\x2\x2\x186\x1338\x3\x2\x2\x2\x188\x1360\x3\x2\x2\x2\x18A\x1367\x3\x2"+
		"\x2\x2\x18C\x1374\x3\x2\x2\x2\x18E\x1386\x3\x2\x2\x2\x190\x13CC\x3\x2"+
		"\x2\x2\x192\x13F7\x3\x2\x2\x2\x194\x1433\x3\x2\x2\x2\x196\x14BC\x3\x2"+
		"\x2\x2\x198\x154B\x3\x2\x2\x2\x19A\x1568\x3\x2\x2\x2\x19C\x1585\x3\x2"+
		"\x2\x2\x19E\x15F4\x3\x2\x2\x2\x1A0\x1601\x3\x2\x2\x2\x1A2\x1609\x3\x2"+
		"\x2\x2\x1A4\x1611\x3\x2\x2\x2\x1A6\x162B\x3\x2\x2\x2\x1A8\x162F\x3\x2"+
		"\x2\x2\x1AA\x164D\x3\x2\x2\x2\x1AC\x1668\x3\x2\x2\x2\x1AE\x167C\x3\x2"+
		"\x2\x2\x1B0\x16A1\x3\x2\x2\x2\x1B2\x176D\x3\x2\x2\x2\x1B4\x178B\x3\x2"+
		"\x2\x2\x1B6\x178D\x3\x2\x2\x2\x1B8\x17AD\x3\x2\x2\x2\x1BA\x17DC\x3\x2"+
		"\x2\x2\x1BC\x1810\x3\x2\x2\x2\x1BE\x1820\x3\x2\x2\x2\x1C0\x1832\x3\x2"+
		"\x2\x2\x1C2\x1848\x3\x2\x2\x2\x1C4\x1856\x3\x2\x2\x2\x1C6\x18A0\x3\x2"+
		"\x2\x2\x1C8\x18BF\x3\x2\x2\x2\x1CA\x18C1\x3\x2\x2\x2\x1CC\x18C5\x3\x2"+
		"\x2\x2\x1CE\x18E3\x3\x2\x2\x2\x1D0\x18E5\x3\x2\x2\x2\x1D2\x18FA\x3\x2"+
		"\x2\x2\x1D4\x1949\x3\x2\x2\x2\x1D6\x1956\x3\x2\x2\x2\x1D8\x1958\x3\x2"+
		"\x2\x2\x1DA\x1965\x3\x2\x2\x2\x1DC\x199D\x3\x2\x2\x2\x1DE\x19A0\x3\x2"+
		"\x2\x2\x1E0\x19CE\x3\x2\x2\x2\x1E2\x19D1\x3\x2\x2\x2\x1E4\x19E7\x3\x2"+
		"\x2\x2\x1E6\x19EB\x3\x2\x2\x2\x1E8\x19FA\x3\x2\x2\x2\x1EA\x19FD\x3\x2"+
		"\x2\x2\x1EC\x1A38\x3\x2\x2\x2\x1EE\x1A50\x3\x2\x2\x2\x1F0\x1A55\x3\x2"+
		"\x2\x2\x1F2\x1A86\x3\x2\x2\x2\x1F4\x1ACE\x3\x2\x2\x2\x1F6\x1AD0\x3\x2"+
		"\x2\x2\x1F8\x1AF3\x3\x2\x2\x2\x1FA\x1B06\x3\x2\x2\x2\x1FC\x1B08\x3\x2"+
		"\x2\x2\x1FE\x1B13\x3\x2\x2\x2\x200\x1B29\x3\x2\x2\x2\x202\x1B2B\x3\x2"+
		"\x2\x2\x204\x1B34\x3\x2\x2\x2\x206\x1B46\x3\x2\x2\x2\x208\x1B48\x3\x2"+
		"\x2\x2\x20A\x1B69\x3\x2\x2\x2\x20C\x1B7B\x3\x2\x2\x2\x20E\x1B7D\x3\x2"+
		"\x2\x2\x210\x1BC5\x3\x2\x2\x2\x212\x1BC7\x3\x2\x2\x2\x214\x1BF4\x3\x2"+
		"\x2\x2\x216\x1BF6\x3\x2\x2\x2\x218\x1C0B\x3\x2\x2\x2\x21A\x1C21\x3\x2"+
		"\x2\x2\x21C\x1C42\x3\x2\x2\x2\x21E\x1C44\x3\x2\x2\x2\x220\x1C5E\x3\x2"+
		"\x2\x2\x222\x1C7C\x3\x2\x2\x2\x224\x1CAF\x3\x2\x2\x2\x226\x1CB7\x3\x2"+
		"\x2\x2\x228\x1CE8\x3\x2\x2\x2\x22A\x1CF2\x3\x2\x2\x2\x22C\x1CFA\x3\x2"+
		"\x2\x2\x22E\x1D2A\x3\x2\x2\x2\x230\x1D2C\x3\x2\x2\x2\x232\x1D34\x3\x2"+
		"\x2\x2\x234\x1D58\x3\x2\x2\x2\x236\x1D60\x3\x2\x2\x2\x238\x1D7B\x3\x2"+
		"\x2\x2\x23A\x1D96\x3\x2\x2\x2\x23C\x1DB9\x3\x2\x2\x2\x23E\x1DDE\x3\x2"+
		"\x2\x2\x240\x1DE0\x3\x2\x2\x2\x242\x1DF8\x3\x2\x2\x2\x244\x1E06\x3\x2"+
		"\x2\x2\x246\x1E08\x3\x2\x2\x2\x248\x1E1D\x3\x2\x2\x2\x24A\x1E28\x3\x2"+
		"\x2\x2\x24C\x1E34\x3\x2\x2\x2\x24E\x1E6B\x3\x2\x2\x2\x250\x1E6D\x3\x2"+
		"\x2\x2\x252\x1E96\x3\x2\x2\x2\x254\x1EA5\x3\x2\x2\x2\x256\x1EF3\x3\x2"+
		"\x2\x2\x258\x1EF5\x3\x2\x2\x2\x25A\x1F25\x3\x2\x2\x2\x25C\x1F2D\x3\x2"+
		"\x2\x2\x25E\x1F4C\x3\x2\x2\x2\x260\x1F4E\x3\x2\x2\x2\x262\x1FA3\x3\x2"+
		"\x2\x2\x264\x1FAF\x3\x2\x2\x2\x266\x1FBD\x3\x2\x2\x2\x268\x1FF6\x3\x2"+
		"\x2\x2\x26A\x1FF8\x3\x2\x2\x2\x26C\x2039\x3\x2\x2\x2\x26E\x203B\x3\x2"+
		"\x2\x2\x270\x2056\x3\x2\x2\x2\x272\x2058\x3\x2\x2\x2\x274\x205C\x3\x2"+
		"\x2\x2\x276\x2088\x3\x2\x2\x2\x278\x209B\x3\x2\x2\x2\x27A\x209D\x3\x2"+
		"\x2\x2\x27C\x20B7\x3\x2\x2\x2\x27E\x20B9\x3\x2\x2\x2\x280\x20C1\x3\x2"+
		"\x2\x2\x282\x20C3\x3\x2\x2\x2\x284\x214F\x3\x2\x2\x2\x286\x2157\x3\x2"+
		"\x2\x2\x288\x2159\x3\x2\x2\x2\x28A\x215B\x3\x2\x2\x2\x28C\x215D\x3\x2"+
		"\x2\x2\x28E\x216B\x3\x2\x2\x2\x290\x2171\x3\x2\x2\x2\x292\x2173\x3\x2"+
		"\x2\x2\x294\x2175\x3\x2\x2\x2\x296\x217A\x3\x2\x2\x2\x298\x217C\x3\x2"+
		"\x2\x2\x29A\x2180\x3\x2\x2\x2\x29C\x218C\x3\x2\x2\x2\x29E\x218E\x3\x2"+
		"\x2\x2\x2A0\x2191\x3\x2\x2\x2\x2A2\x2194\x3\x2\x2\x2\x2A4\x2196\x3\x2"+
		"\x2\x2\x2A6\x2198\x3\x2\x2\x2\x2A8\x219A\x3\x2\x2\x2\x2AA\x21B7\x3\x2"+
		"\x2\x2\x2AC\x21B9\x3\x2\x2\x2\x2AE\x21C4\x3\x2\x2\x2\x2B0\x21C7\x3\x2"+
		"\x2\x2\x2B2\x21D3\x3\x2\x2\x2\x2B4\x21DB\x3\x2\x2\x2\x2B6\x21E2\x3\x2"+
		"\x2\x2\x2B8\x21F9\x3\x2\x2\x2\x2BA\x21FB\x3\x2\x2\x2\x2BC\x2206\x3\x2"+
		"\x2\x2\x2BE\x2208\x3\x2\x2\x2\x2C0\x2223\x3\x2\x2\x2\x2C2\x222A\x3\x2"+
		"\x2\x2\x2C4\x2230\x3\x2\x2\x2\x2C6\x2243\x3\x2\x2\x2\x2C8\x2245\x3\x2"+
		"\x2\x2\x2CA\x2256\x3\x2\x2\x2\x2CC\x226D\x3\x2\x2\x2\x2CE\x227E\x3\x2"+
		"\x2\x2\x2D0\x228F\x3\x2\x2\x2\x2D2\x22A0\x3\x2\x2\x2\x2D4\x22B1\x3\x2"+
		"\x2\x2\x2D6\x22C5\x3\x2\x2\x2\x2D8\x22CF\x3\x2\x2\x2\x2DA\x22D1\x3\x2"+
		"\x2\x2\x2DC\x22D8\x3\x2\x2\x2\x2DE\x230F\x3\x2\x2\x2\x2E0\x2316\x3\x2"+
		"\x2\x2\x2E2\x2335\x3\x2\x2\x2\x2E4\x2337\x3\x2\x2\x2\x2E6\x2431\x3\x2"+
		"\x2\x2\x2E8\x251F\x3\x2\x2\x2\x2EA\x2547\x3\x2\x2\x2\x2EC\x2554\x3\x2"+
		"\x2\x2\x2EE\x2562\x3\x2\x2\x2\x2F0\x256A\x3\x2\x2\x2\x2F2\x2570\x3\x2"+
		"\x2\x2\x2F4\x2577\x3\x2\x2\x2\x2F6\x257B\x3\x2\x2\x2\x2F8\x2580\x3\x2"+
		"\x2\x2\x2FA\x25AF\x3\x2\x2\x2\x2FC\x25C1\x3\x2\x2\x2\x2FE\x25C3\x3\x2"+
		"\x2\x2\x300\x25C7\x3\x2\x2\x2\x302\x25D1\x3\x2\x2\x2\x304\x25D8\x3\x2"+
		"\x2\x2\x306\x261E\x3\x2\x2\x2\x308\x2622\x3\x2\x2\x2\x30A\x2624\x3\x2"+
		"\x2\x2\x30C\x2649\x3\x2\x2\x2\x30E\x264B\x3\x2\x2\x2\x310\x265B\x3\x2"+
		"\x2\x2\x312\x2668\x3\x2\x2\x2\x314\x267C\x3\x2\x2\x2\x316\x2689\x3\x2"+
		"\x2\x2\x318\x26AE\x3\x2\x2\x2\x31A\x26BF\x3\x2\x2\x2\x31C\x26C1\x3\x2"+
		"\x2\x2\x31E\x26CE\x3\x2\x2\x2\x320\x26E7\x3\x2\x2\x2\x322\x27BE\x3\x2"+
		"\x2\x2\x324\x27DF\x3\x2\x2\x2\x326\x281D\x3\x2\x2\x2\x328\x281F\x3\x2"+
		"\x2\x2\x32A\x2823\x3\x2\x2\x2\x32C\x2827\x3\x2\x2\x2\x32E\x282A\x3\x2"+
		"\x2\x2\x330\x282E\x3\x2\x2\x2\x332\x2833\x3\x2\x2\x2\x334\x2838\x3\x2"+
		"\x2\x2\x336\x283C\x3\x2\x2\x2\x338\x283E\x3\x2\x2\x2\x33A\x2859\x3\x2"+
		"\x2\x2\x33C\x2867\x3\x2\x2\x2\x33E\x2869\x3\x2\x2\x2\x340\x2887\x3\x2"+
		"\x2\x2\x342\x2889\x3\x2\x2\x2\x344\x28AA\x3\x2\x2\x2\x346\x28AC\x3\x2"+
		"\x2\x2\x348\x28C4\x3\x2\x2\x2\x34A\x28DD\x3\x2\x2\x2\x34C\x28F2\x3\x2"+
		"\x2\x2\x34E\x28F4\x3\x2\x2\x2\x350\x2905\x3\x2\x2\x2\x352\x2910\x3\x2"+
		"\x2\x2\x354\x2915\x3\x2\x2\x2\x356\x2917\x3\x2\x2\x2\x358\x292D\x3\x2"+
		"\x2\x2\x35A\x293D\x3\x2\x2\x2\x35C\x294D\x3\x2\x2\x2\x35E\x2955\x3\x2"+
		"\x2\x2\x360\x2960\x3\x2\x2\x2\x362\x2972\x3\x2\x2\x2\x364\x2976\x3\x2"+
		"\x2\x2\x366\x297F\x3\x2\x2\x2\x368\x29A2\x3\x2\x2\x2\x36A\x29A4\x3\x2"+
		"\x2\x2\x36C\x29AC\x3\x2\x2\x2\x36E\x29B0\x3\x2\x2\x2\x370\x29BD\x3\x2"+
		"\x2\x2\x372\x29BF\x3\x2\x2\x2\x374\x2A33\x3\x2\x2\x2\x376\x2A35\x3\x2"+
		"\x2\x2\x378\x2A4E\x3\x2\x2\x2\x37A\x2A58\x3\x2\x2\x2\x37C\x2A81\x3\x2"+
		"\x2\x2\x37E\x2A93\x3\x2\x2\x2\x380\x2A9F\x3\x2\x2\x2\x382\x2B07\x3\x2"+
		"\x2\x2\x384\x2B09\x3\x2\x2\x2\x386\x2B11\x3\x2\x2\x2\x388\x2B19\x3\x2"+
		"\x2\x2\x38A\x2B2A\x3\x2\x2\x2\x38C\x2B34\x3\x2\x2\x2\x38E\x2B3F\x3\x2"+
		"\x2\x2\x390\x2B4A\x3\x2\x2\x2\x392\x2B56\x3\x2\x2\x2\x394\x2B64\x3\x2"+
		"\x2\x2\x396\x2BC3\x3\x2\x2\x2\x398\x2BED\x3\x2\x2\x2\x39A\x2BF2\x3\x2"+
		"\x2\x2\x39C\x2BFD\x3\x2\x2\x2\x39E\x2BFF\x3\x2\x2\x2\x3A0\x2C60\x3\x2"+
		"\x2\x2\x3A2\x2C62\x3\x2\x2\x2\x3A4\x2C66\x3\x2\x2\x2\x3A6\x2C71\x3\x2"+
		"\x2\x2\x3A8\x2C8E\x3\x2\x2\x2\x3AA\x2C90\x3\x2\x2\x2\x3AC\x2C99\x3\x2"+
		"\x2\x2\x3AE\x2CB4\x3\x2\x2\x2\x3B0\x2CBA\x3\x2\x2\x2\x3B2\x2CC4\x3\x2"+
		"\x2\x2\x3B4\x2CCE\x3\x2\x2\x2\x3B6\x2CD0\x3\x2\x2\x2\x3B8\x2CD2\x3\x2"+
		"\x2\x2\x3BA\x2CDB\x3\x2\x2\x2\x3BC\x2D00\x3\x2\x2\x2\x3BE\x2D12\x3\x2"+
		"\x2\x2\x3C0\x2D14\x3\x2\x2\x2\x3C2\x2D6E\x3\x2\x2\x2\x3C4\x2D87\x3\x2"+
		"\x2\x2\x3C6\x2D8F\x3\x2\x2\x2\x3C8\x2D98\x3\x2\x2\x2\x3CA\x2DBF\x3\x2"+
		"\x2\x2\x3CC\x2DCF\x3\x2\x2\x2\x3CE\x2DD6\x3\x2\x2\x2\x3D0\x2DD8\x3\x2"+
		"\x2\x2\x3D2\x2E4B\x3\x2\x2\x2\x3D4\x2E4D\x3\x2\x2\x2\x3D6\x2E58\x3\x2"+
		"\x2\x2\x3D8\x2E5D\x3\x2\x2\x2\x3DA\x2E5F\x3\x2\x2\x2\x3DC\x2E9A\x3\x2"+
		"\x2\x2\x3DE\x2E9C\x3\x2\x2\x2\x3E0\x2EA5\x3\x2\x2\x2\x3E2\x2EAD\x3\x2"+
		"\x2\x2\x3E4\x2EC1\x3\x2\x2\x2\x3E6\x2EC9\x3\x2\x2\x2\x3E8\x2EDE\x3\x2"+
		"\x2\x2\x3EA\x2EE8\x3\x2\x2\x2\x3EC\x2F01\x3\x2\x2\x2\x3EE\x2F03\x3\x2"+
		"\x2\x2\x3F0\x2F10\x3\x2\x2\x2\x3F2\x2F22\x3\x2\x2\x2\x3F4\x2F64\x3\x2"+
		"\x2\x2\x3F6\x2F66\x3\x2\x2\x2\x3F8\x2F7A\x3\x2\x2\x2\x3FA\x2F8C\x3\x2"+
		"\x2\x2\x3FC\x2F94\x3\x2\x2\x2\x3FE\x2F99\x3\x2\x2\x2\x400\x2FA1\x3\x2"+
		"\x2\x2\x402\x2FA8\x3\x2\x2\x2\x404\x2FAA\x3\x2\x2\x2\x406\x2FB2\x3\x2"+
		"\x2\x2\x408\x2FC1\x3\x2\x2\x2\x40A\x2FCA\x3\x2\x2\x2\x40C\x2FD4\x3\x2"+
		"\x2\x2\x40E\x2FD8\x3\x2\x2\x2\x410\x2FDC\x3\x2\x2\x2\x412\x2FE0\x3\x2"+
		"\x2\x2\x414\x2FE4\x3\x2\x2\x2\x416\x2FEC\x3\x2\x2\x2\x418\x2FF6\x3\x2"+
		"\x2\x2\x41A\x2FFE\x3\x2\x2\x2\x41C\x301C\x3\x2\x2\x2\x41E\x301E\x3\x2"+
		"\x2\x2\x420\x3034\x3\x2\x2\x2\x422\x3044\x3\x2\x2\x2\x424\x3049\x3\x2"+
		"\x2\x2\x426\x3096\x3\x2\x2\x2\x428\x30D0\x3\x2\x2\x2\x42A\x3164\x3\x2"+
		"\x2\x2\x42C\x316A\x3\x2\x2\x2\x42E\x316C\x3\x2\x2\x2\x430\x3175\x3\x2"+
		"\x2\x2\x432\x317E\x3\x2\x2\x2\x434\x3187\x3\x2\x2\x2\x436\x3191\x3\x2"+
		"\x2\x2\x438\x3196\x3\x2\x2\x2\x43A\x31A4\x3\x2\x2\x2\x43C\x31A9\x3\x2"+
		"\x2\x2\x43E\x31B4\x3\x2\x2\x2\x440\x31B9\x3\x2\x2\x2\x442\x31C4\x3\x2"+
		"\x2\x2\x444\x31C9\x3\x2\x2\x2\x446\x31EC\x3\x2\x2\x2\x448\x31EE\x3\x2"+
		"\x2\x2\x44A\x3200\x3\x2\x2\x2\x44C\x3208\x3\x2\x2\x2\x44E\x320D\x3\x2"+
		"\x2\x2\x450\x3213\x3\x2\x2\x2\x452\x3218\x3\x2\x2\x2\x454\x321C\x3\x2"+
		"\x2\x2\x456\x3221\x3\x2\x2\x2\x458\x3230\x3\x2\x2\x2\x45A\x3235\x3\x2"+
		"\x2\x2\x45C\x3239\x3\x2\x2\x2\x45E\x323B\x3\x2\x2\x2\x460\x324A\x3\x2"+
		"\x2\x2\x462\x3281\x3\x2\x2\x2\x464\x3283\x3\x2\x2\x2\x466\x3290\x3\x2"+
		"\x2\x2\x468\x3292\x3\x2\x2\x2\x46A\x32A0\x3\x2\x2\x2\x46C\x32B2\x3\x2"+
		"\x2\x2\x46E\x32D4\x3\x2\x2\x2\x470\x330E\x3\x2\x2\x2\x472\x3311\x3\x2"+
		"\x2\x2\x474\x3315\x3\x2\x2\x2\x476\x3324\x3\x2\x2\x2\x478\x332D\x3\x2"+
		"\x2\x2\x47A\x3331\x3\x2\x2\x2\x47C\x3339\x3\x2\x2\x2\x47E\x333F\x3\x2"+
		"\x2\x2\x480\x336C\x3\x2\x2\x2\x482\x336E\x3\x2\x2\x2\x484\x337B\x3\x2"+
		"\x2\x2\x486\x337D\x3\x2\x2\x2\x488\x3392\x3\x2\x2\x2\x48A\x33D0\x3\x2"+
		"\x2\x2\x48C\x33D9\x3\x2\x2\x2\x48E\x33E0\x3\x2\x2\x2\x490\x33F9\x3\x2"+
		"\x2\x2\x492\x3417\x3\x2\x2\x2\x494\x341C\x3\x2\x2\x2\x496\x3423\x3\x2"+
		"\x2\x2\x498\x3431\x3\x2\x2\x2\x49A\x3441\x3\x2\x2\x2\x49C\x3445\x3\x2"+
		"\x2\x2\x49E\x3466\x3\x2\x2\x2\x4A0\x3468\x3\x2\x2\x2\x4A2\x3476\x3\x2"+
		"\x2\x2\x4A4\x3484\x3\x2\x2\x2\x4A6\x3489\x3\x2\x2\x2\x4A8\x3493\x3\x2"+
		"\x2\x2\x4AA\x3495\x3\x2\x2\x2\x4AC\x3497\x3\x2\x2\x2\x4AE\x349A\x3\x2"+
		"\x2\x2\x4B0\x34A9\x3\x2\x2\x2\x4B2\x34B0\x3\x2\x2\x2\x4B4\x34B2\x3\x2"+
		"\x2\x2\x4B6\x34BE\x3\x2\x2\x2\x4B8\x34EE\x3\x2\x2\x2\x4BA\x34F2\x3\x2"+
		"\x2\x2\x4BC\x34F4\x3\x2\x2\x2\x4BE\x3509\x3\x2\x2\x2\x4C0\x3518\x3\x2"+
		"\x2\x2\x4C2\x3528\x3\x2\x2\x2\x4C4\x352A\x3\x2\x2\x2\x4C6\x355E\x3\x2"+
		"\x2\x2\x4C8\x3564\x3\x2\x2\x2\x4CA\x3575\x3\x2\x2\x2\x4CC\x3577\x3\x2"+
		"\x2\x2\x4CE\x3582\x3\x2\x2\x2\x4D0\x3584\x3\x2\x2\x2\x4D2\x358A\x3\x2"+
		"\x2\x2\x4D4\x358C\x3\x2\x2\x2\x4D6\x3590\x3\x2\x2\x2\x4D8\x35A1\x3\x2"+
		"\x2\x2\x4DA\x35A3\x3\x2\x2\x2\x4DC\x35A5\x3\x2\x2\x2\x4DE\x4E0\x5\x4\x3"+
		"\x2\x4DF\x4DE\x3\x2\x2\x2\x4E0\x4E3\x3\x2\x2\x2\x4E1\x4DF\x3\x2\x2\x2"+
		"\x4E1\x4E2\x3\x2\x2\x2\x4E2\x4E4\x3\x2\x2\x2\x4E3\x4E1\x3\x2\x2\x2\x4E4"+
		"\x4EF\a\x2\x2\x3\x4E5\x4E9\x5\x2F8\x17D\x2\x4E6\x4E8\x5\x328\x195\x2\x4E7"+
		"\x4E6\x3\x2\x2\x2\x4E8\x4EB\x3\x2\x2\x2\x4E9\x4E7\x3\x2\x2\x2\x4E9\x4EA"+
		"\x3\x2\x2\x2\x4EA\x4EC\x3\x2\x2\x2\x4EB\x4E9\x3\x2\x2\x2\x4EC\x4ED\a\x2"+
		"\x2\x3\x4ED\x4EF\x3\x2\x2\x2\x4EE\x4E1\x3\x2\x2\x2\x4EE\x4E5\x3\x2\x2"+
		"\x2\x4EF\x3\x3\x2\x2\x2\x4F0\x50B\x5\x328\x195\x2\x4F1\x4F3\x5\x2F8\x17D"+
		"\x2\x4F2\x4F1\x3\x2\x2\x2\x4F2\x4F3\x3\x2\x2\x2\x4F3\x4FA\x3\x2\x2\x2"+
		"\x4F4\x4FB\x5\x328\x195\x2\x4F5\x4F7\x5\b\x5\x2\x4F6\x4F5\x3\x2\x2\x2"+
		"\x4F7\x4F8\x3\x2\x2\x2\x4F8\x4F6\x3\x2\x2\x2\x4F8\x4F9\x3\x2\x2\x2\x4F9"+
		"\x4FB\x3\x2\x2\x2\x4FA\x4F4\x3\x2\x2\x2\x4FA\x4F6\x3\x2\x2\x2\x4FB\x4FF"+
		"\x3\x2\x2\x2\x4FC\x4FE\x5\x32A\x196\x2\x4FD\x4FC\x3\x2\x2\x2\x4FE\x501"+
		"\x3\x2\x2\x2\x4FF\x4FD\x3\x2\x2\x2\x4FF\x500\x3\x2\x2\x2\x500\x50B\x3"+
		"\x2\x2\x2\x501\x4FF\x3\x2\x2\x2\x502\x506\x5\x6\x4\x2\x503\x505\x5\x32A"+
		"\x196\x2\x504\x503\x3\x2\x2\x2\x505\x508\x3\x2\x2\x2\x506\x504\x3\x2\x2"+
		"\x2\x506\x507\x3\x2\x2\x2\x507\x50B\x3\x2\x2\x2\x508\x506\x3\x2\x2\x2"+
		"\x509\x50B\x5\x32A\x196\x2\x50A\x4F0\x3\x2\x2\x2\x50A\x4F2\x3\x2\x2\x2"+
		"\x50A\x502\x3\x2\x2\x2\x50A\x509\x3\x2\x2\x2\x50B\x5\x3\x2\x2\x2\x50C"+
		"\x511\x5\x236\x11C\x2\x50D\x511\x5\x226\x114\x2\x50E\x511\x5\x22A\x116"+
		"\x2\x50F\x511\x5\x25C\x12F\x2\x510\x50C\x3\x2\x2\x2\x510\x50D\x3\x2\x2"+
		"\x2\x510\x50E\x3\x2\x2\x2\x510\x50F\x3\x2\x2\x2\x511\a\x3\x2\x2\x2\x512"+
		"\x514\x5\n\x6\x2\x513\x515\a\x486\x2\x2\x514\x513\x3\x2\x2\x2\x514\x515"+
		"\x3\x2\x2\x2\x515\x530\x3\x2\x2\x2\x516\x518\x5\x10\t\x2\x517\x519\a\x486"+
		"\x2\x2\x518\x517\x3\x2\x2\x2\x518\x519\x3\x2\x2\x2\x519\x530\x3\x2\x2"+
		"\x2\x51A\x51C\x5\x32\x1A\x2\x51B\x51D\a\x486\x2\x2\x51C\x51B\x3\x2\x2"+
		"\x2\x51C\x51D\x3\x2\x2\x2\x51D\x530\x3\x2\x2\x2\x51E\x520\x5\f\a\x2\x51F"+
		"\x521\a\x486\x2\x2\x520\x51F\x3\x2\x2\x2\x520\x521\x3\x2\x2\x2\x521\x530"+
		"\x3\x2\x2\x2\x522\x524\x5\x360\x1B1\x2\x523\x525\a\x486\x2\x2\x524\x523"+
		"\x3\x2\x2\x2\x524\x525\x3\x2\x2\x2\x525\x530\x3\x2\x2\x2\x526\x528\x5"+
		"\x1E2\xF2\x2\x527\x529\a\x486\x2\x2\x528\x527\x3\x2\x2\x2\x528\x529\x3"+
		"\x2\x2\x2\x529\x530\x3\x2\x2\x2\x52A\x52C\x5\xE\b\x2\x52B\x52D\a\x486"+
		"\x2\x2\x52C\x52B\x3\x2\x2\x2\x52C\x52D\x3\x2\x2\x2\x52D\x530\x3\x2\x2"+
		"\x2\x52E\x530\a\x486\x2\x2\x52F\x512\x3\x2\x2\x2\x52F\x516\x3\x2\x2\x2"+
		"\x52F\x51A\x3\x2\x2\x2\x52F\x51E\x3\x2\x2\x2\x52F\x522\x3\x2\x2\x2\x52F"+
		"\x526\x3\x2\x2\x2\x52F\x52A\x3\x2\x2\x2\x52F\x52E\x3\x2\x2\x2\x530\t\x3"+
		"\x2\x2\x2\x531\x537\x5\x1D2\xEA\x2\x532\x537\x5\x1DA\xEE\x2\x533\x537"+
		"\x5\x1DE\xF0\x2\x534\x537\x5\x1E4\xF3\x2\x535\x537\x5\x1EA\xF6\x2\x536"+
		"\x531\x3\x2\x2\x2\x536\x532\x3\x2\x2\x2\x536\x533\x3\x2\x2\x2\x536\x534"+
		"\x3\x2\x2\x2\x536\x535\x3\x2\x2\x2\x537\v\x3\x2\x2\x2\x538\x5DF\x5\x34"+
		"\x1B\x2\x539\x5DF\x5> \x2\x53A\x5DF\x5x=\x2\x53B\x5DF\x5\x86\x44\x2\x53C"+
		"\x5DF\x5\x92J\x2\x53D\x5DF\x5\x94K\x2\x53E\x5DF\x5\x90I\x2\x53F\x5DF\x5"+
		"\xA2R\x2\x540\x5DF\x5\xB0Y\x2\x541\x5DF\x5\xB2Z\x2\x542\x5DF\x5\x120\x91"+
		"\x2\x543\x5DF\x5\x124\x93\x2\x544\x5DF\x5\x266\x134\x2\x545\x5DF\x5\x16E"+
		"\xB8\x2\x546\x5DF\x5\x17A\xBE\x2\x547\x5DF\x5\x282\x142\x2\x548\x5DF\x5"+
		"\x13A\x9E\x2\x549\x5DF\x5\x13C\x9F\x2\x54A\x5DF\x5\x140\xA1\x2\x54B\x5DF"+
		"\x5\x144\xA3\x2\x54C\x5DF\x5\x148\xA5\x2\x54D\x5DF\x5\x1FC\xFF\x2\x54E"+
		"\x5DF\x5\x150\xA9\x2\x54F\x5DF\x5\x154\xAB\x2\x550\x5DF\x5\x14C\xA7\x2"+
		"\x551\x5DF\x5\x15C\xAF\x2\x552\x5DF\x5\x158\xAD\x2\x553\x5DF\x5\x160\xB1"+
		"\x2\x554\x5DF\x5\x162\xB2\x2\x555\x5DF\x5\x164\xB3\x2\x556\x5DF\x5\x166"+
		"\xB4\x2\x557\x5DF\x5\x16C\xB7\x2\x558\x5DF\x5\x18A\xC6\x2\x559\x5DF\x5"+
		"\x184\xC3\x2\x55A\x5DF\x5\x190\xC9\x2\x55B\x5DF\x5\x194\xCB\x2\x55C\x5DF"+
		"\x5\x198\xCD\x2\x55D\x5DF\x5\x19C\xCF\x2\x55E\x5DF\x5\x19E\xD0\x2\x55F"+
		"\x5DF\x5\x1A2\xD2\x2\x560\x5DF\x5\x1A4\xD3\x2\x561\x5DF\x5\x1AA\xD6\x2"+
		"\x562\x5DF\x5\x1AC\xD7\x2\x563\x5DF\x5\x260\x131\x2\x564\x5DF\x5\x1B0"+
		"\xD9\x2\x565\x5DF\x5\x1B6\xDC\x2\x566\x5DF\x5\x1B8\xDD\x2\x567\x5DF\x5"+
		"\x36\x1C\x2\x568\x5DF\x5\x38\x1D\x2\x569\x5DF\x5t;\x2\x56A\x5DF\x5\x82"+
		"\x42\x2\x56B\x5DF\x5\xB4[\x2\x56C\x5DF\x5\x11E\x90\x2\x56D\x5DF\x5\x218"+
		"\x10D\x2\x56E\x5DF\x5\x122\x92\x2\x56F\x5DF\x5\x126\x94\x2\x570\x5DF\x5"+
		"\x1F0\xF9\x2\x571\x5DF\x5\x1F2\xFA\x2\x572\x5DF\x5\x17C\xBF\x2\x573\x5DF"+
		"\x5\x17E\xC0\x2\x574\x5DF\x5\x128\x95\x2\x575\x5DF\x5\x130\x99\x2\x576"+
		"\x5DF\x5\x13E\xA0\x2\x577\x5DF\x5\x142\xA2\x2\x578\x5DF\x5\x146\xA4\x2"+
		"\x579\x5DF\x5\x14A\xA6\x2\x57A\x5DF\x5\x1F6\xFC\x2\x57B\x5DF\x5\x152\xAA"+
		"\x2\x57C\x5DF\x5\x156\xAC\x2\x57D\x5DF\x5\x14E\xA8\x2\x57E\x5DF\x5\x15E"+
		"\xB0\x2\x57F\x5DF\x5\x15A\xAE\x2\x580\x5DF\x5\x21E\x110\x2\x581\x5DF\x5"+
		"\xACW\x2\x582\x5DF\x5\x132\x9A\x2\x583\x5DF\x5\x1BE\xE0\x2\x584\x5DF\x5"+
		"\x1C0\xE1\x2\x585\x5DF\x5\x168\xB5\x2\x586\x5DF\x5\x16A\xB6\x2\x587\x5DF"+
		"\x5\x180\xC1\x2\x588\x5DF\x5\x182\xC2\x2\x589\x5DF\x5\x186\xC4\x2\x58A"+
		"\x5DF\x5\x188\xC5\x2\x58B\x5DF\x5\x18C\xC7\x2\x58C\x5DF\x5\x18E\xC8\x2"+
		"\x58D\x5DF\x5\x192\xCA\x2\x58E\x5DF\x5\x196\xCC\x2\x58F\x5DF\x5\x19A\xCE"+
		"\x2\x590\x5DF\x5\x1A0\xD1\x2\x591\x5DF\x5\x1A8\xD5\x2\x592\x5DF\x5\x248"+
		"\x125\x2\x593\x5DF\x5\x1AE\xD8\x2\x594\x5DF\x5\x250\x129\x2\x595\x5DF"+
		"\x5\x2D4\x16B\x2\x596\x5DF\x5\x1B2\xDA\x2\x597\x5DF\x5\x1B4\xDB\x2\x598"+
		"\x5DF\x5\x1BA\xDE\x2\x599\x5DF\x5\x220\x111\x2\x59A\x5DF\x5\x1BC\xDF\x2"+
		"\x59B\x5DF\x5\x116\x8C\x2\x59C\x5DF\x5:\x1E\x2\x59D\x5DF\x5<\x1F\x2\x59E"+
		"\x5DF\x5v<\x2\x59F\x5DF\x5\x84\x43\x2\x5A0\x5DF\x5\xA0Q\x2\x5A1\x5DF\x5"+
		"\xAEX\x2\x5A2\x5DF\x5\xB6\\\x2\x5A3\x5DF\x5\xB8]\x2\x5A4\x5DF\x5\xBA^"+
		"\x2\x5A5\x5DF\x5\xBC_\x2\x5A6\x5DF\x5\xBE`\x2\x5A7\x5DF\x5\xC0\x61\x2"+
		"\x5A8\x5DF\x5\xC2\x62\x2\x5A9\x5DF\x5\xC4\x63\x2\x5AA\x5DF\x5\xC6\x64"+
		"\x2\x5AB\x5DF\x5\xC8\x65\x2\x5AC\x5DF\x5\xF2z\x2\x5AD\x5DF\x5\xCA\x66"+
		"\x2\x5AE\x5DF\x5\xCCg\x2\x5AF\x5DF\x5\xD8m\x2\x5B0\x5DF\x5\xDAn\x2\x5B1"+
		"\x5DF\x5\xCEh\x2\x5B2\x5DF\x5\xD0i\x2\x5B3\x5DF\x5\xD2j\x2\x5B4\x5DF\x5"+
		"\xD4k\x2\x5B5\x5DF\x5\xD6l\x2\x5B6\x5DF\x5\xDCo\x2\x5B7\x5DF\x5\xDEp\x2"+
		"\x5B8\x5DF\x5\xE0q\x2\x5B9\x5DF\x5\x2CC\x167\x2\x5BA\x5DF\x5\x2BE\x160"+
		"\x2\x5BB\x5DF\x5\xE2r\x2\x5BC\x5DF\x5\xE4s\x2\x5BD\x5DF\x5\xE6t\x2\x5BE"+
		"\x5DF\x5\xE8u\x2\x5BF\x5DF\x5\xEAv\x2\x5C0\x5DF\x5\x2C4\x163\x2\x5C1\x5DF"+
		"\x5\xECw\x2\x5C2\x5DF\x5\xEEx\x2\x5C3\x5DF\x5\xF0y\x2\x5C4\x5DF\x5\xF4"+
		"{\x2\x5C5\x5DF\x5\xF6|\x2\x5C6\x5DF\x5\xF8}\x2\x5C7\x5DF\x5\xFA~\x2\x5C8"+
		"\x5DF\x5\xFC\x7F\x2\x5C9\x5DF\x5\xFE\x80\x2\x5CA\x5DF\x5\x100\x81\x2\x5CB"+
		"\x5DF\x5\x102\x82\x2\x5CC\x5DF\x5\x104\x83\x2\x5CD\x5DF\x5\x106\x84\x2"+
		"\x5CE\x5DF\x5\x108\x85\x2\x5CF\x5DF\x5\x2CE\x168\x2\x5D0\x5DF\x5\x10A"+
		"\x86\x2\x5D1\x5DF\x5\x10C\x87\x2\x5D2\x5DF\x5\x10E\x88\x2\x5D3\x5DF\x5"+
		"\x2D0\x169\x2\x5D4\x5DF\x5\x2C6\x164\x2\x5D5\x5DF\x5\x2D6\x16C\x2\x5D6"+
		"\x5DF\x5\x110\x89\x2\x5D7\x5DF\x5\x2D2\x16A\x2\x5D8\x5DF\x5\x112\x8A\x2"+
		"\x5D9\x5DF\x5\x114\x8B\x2\x5DA\x5DF\x5\x118\x8D\x2\x5DB\x5DF\x5\x11A\x8E"+
		"\x2\x5DC\x5DF\x5\x11C\x8F\x2\x5DD\x5DF\x5\x24A\x126\x2\x5DE\x538\x3\x2"+
		"\x2\x2\x5DE\x539\x3\x2\x2\x2\x5DE\x53A\x3\x2\x2\x2\x5DE\x53B\x3\x2\x2"+
		"\x2\x5DE\x53C\x3\x2\x2\x2\x5DE\x53D\x3\x2\x2\x2\x5DE\x53E\x3\x2\x2\x2"+
		"\x5DE\x53F\x3\x2\x2\x2\x5DE\x540\x3\x2\x2\x2\x5DE\x541\x3\x2\x2\x2\x5DE"+
		"\x542\x3\x2\x2\x2\x5DE\x543\x3\x2\x2\x2\x5DE\x544\x3\x2\x2\x2\x5DE\x545"+
		"\x3\x2\x2\x2\x5DE\x546\x3\x2\x2\x2\x5DE\x547\x3\x2\x2\x2\x5DE\x548\x3"+
		"\x2\x2\x2\x5DE\x549\x3\x2\x2\x2\x5DE\x54A\x3\x2\x2\x2\x5DE\x54B\x3\x2"+
		"\x2\x2\x5DE\x54C\x3\x2\x2\x2\x5DE\x54D\x3\x2\x2\x2\x5DE\x54E\x3\x2\x2"+
		"\x2\x5DE\x54F\x3\x2\x2\x2\x5DE\x550\x3\x2\x2\x2\x5DE\x551\x3\x2\x2\x2"+
		"\x5DE\x552\x3\x2\x2\x2\x5DE\x553\x3\x2\x2\x2\x5DE\x554\x3\x2\x2\x2\x5DE"+
		"\x555\x3\x2\x2\x2\x5DE\x556\x3\x2\x2\x2\x5DE\x557\x3\x2\x2\x2\x5DE\x558"+
		"\x3\x2\x2\x2\x5DE\x559\x3\x2\x2\x2\x5DE\x55A\x3\x2\x2\x2\x5DE\x55B\x3"+
		"\x2\x2\x2\x5DE\x55C\x3\x2\x2\x2\x5DE\x55D\x3\x2\x2\x2\x5DE\x55E\x3\x2"+
		"\x2\x2\x5DE\x55F\x3\x2\x2\x2\x5DE\x560\x3\x2\x2\x2\x5DE\x561\x3\x2\x2"+
		"\x2\x5DE\x562\x3\x2\x2\x2\x5DE\x563\x3\x2\x2\x2\x5DE\x564\x3\x2\x2\x2"+
		"\x5DE\x565\x3\x2\x2\x2\x5DE\x566\x3\x2\x2\x2\x5DE\x567\x3\x2\x2\x2\x5DE"+
		"\x568\x3\x2\x2\x2\x5DE\x569\x3\x2\x2\x2\x5DE\x56A\x3\x2\x2\x2\x5DE\x56B"+
		"\x3\x2\x2\x2\x5DE\x56C\x3\x2\x2\x2\x5DE\x56D\x3\x2\x2\x2\x5DE\x56E\x3"+
		"\x2\x2\x2\x5DE\x56F\x3\x2\x2\x2\x5DE\x570\x3\x2\x2\x2\x5DE\x571\x3\x2"+
		"\x2\x2\x5DE\x572\x3\x2\x2\x2\x5DE\x573\x3\x2\x2\x2\x5DE\x574\x3\x2\x2"+
		"\x2\x5DE\x575\x3\x2\x2\x2\x5DE\x576\x3\x2\x2\x2\x5DE\x577\x3\x2\x2\x2"+
		"\x5DE\x578\x3\x2\x2\x2\x5DE\x579\x3\x2\x2\x2\x5DE\x57A\x3\x2\x2\x2\x5DE"+
		"\x57B\x3\x2\x2\x2\x5DE\x57C\x3\x2\x2\x2\x5DE\x57D\x3\x2\x2\x2\x5DE\x57E"+
		"\x3\x2\x2\x2\x5DE\x57F\x3\x2\x2\x2\x5DE\x580\x3\x2\x2\x2\x5DE\x581\x3"+
		"\x2\x2\x2\x5DE\x582\x3\x2\x2\x2\x5DE\x583\x3\x2\x2\x2\x5DE\x584\x3\x2"+
		"\x2\x2\x5DE\x585\x3\x2\x2\x2\x5DE\x586\x3\x2\x2\x2\x5DE\x587\x3\x2\x2"+
		"\x2\x5DE\x588\x3\x2\x2\x2\x5DE\x589\x3\x2\x2\x2\x5DE\x58A\x3\x2\x2\x2"+
		"\x5DE\x58B\x3\x2\x2\x2\x5DE\x58C\x3\x2\x2\x2\x5DE\x58D\x3\x2\x2\x2\x5DE"+
		"\x58E\x3\x2\x2\x2\x5DE\x58F\x3\x2\x2\x2\x5DE\x590\x3\x2\x2\x2\x5DE\x591"+
		"\x3\x2\x2\x2\x5DE\x592\x3\x2\x2\x2\x5DE\x593\x3\x2\x2\x2\x5DE\x594\x3"+
		"\x2\x2\x2\x5DE\x595\x3\x2\x2\x2\x5DE\x596\x3\x2\x2\x2\x5DE\x597\x3\x2"+
		"\x2\x2\x5DE\x598\x3\x2\x2\x2\x5DE\x599\x3\x2\x2\x2\x5DE\x59A\x3\x2\x2"+
		"\x2\x5DE\x59B\x3\x2\x2\x2\x5DE\x59C\x3\x2\x2\x2\x5DE\x59D\x3\x2\x2\x2"+
		"\x5DE\x59E\x3\x2\x2\x2\x5DE\x59F\x3\x2\x2\x2\x5DE\x5A0\x3\x2\x2\x2\x5DE"+
		"\x5A1\x3\x2\x2\x2\x5DE\x5A2\x3\x2\x2\x2\x5DE\x5A3\x3\x2\x2\x2\x5DE\x5A4"+
		"\x3\x2\x2\x2\x5DE\x5A5\x3\x2\x2\x2\x5DE\x5A6\x3\x2\x2\x2\x5DE\x5A7\x3"+
		"\x2\x2\x2\x5DE\x5A8\x3\x2\x2\x2\x5DE\x5A9\x3\x2\x2\x2\x5DE\x5AA\x3\x2"+
		"\x2\x2\x5DE\x5AB\x3\x2\x2\x2\x5DE\x5AC\x3\x2\x2\x2\x5DE\x5AD\x3\x2\x2"+
		"\x2\x5DE\x5AE\x3\x2\x2\x2\x5DE\x5AF\x3\x2\x2\x2\x5DE\x5B0\x3\x2\x2\x2"+
		"\x5DE\x5B1\x3\x2\x2\x2\x5DE\x5B2\x3\x2\x2\x2\x5DE\x5B3\x3\x2\x2\x2\x5DE"+
		"\x5B4\x3\x2\x2\x2\x5DE\x5B5\x3\x2\x2\x2\x5DE\x5B6\x3\x2\x2\x2\x5DE\x5B7"+
		"\x3\x2\x2\x2\x5DE\x5B8\x3\x2\x2\x2\x5DE\x5B9\x3\x2\x2\x2\x5DE\x5BA\x3"+
		"\x2\x2\x2\x5DE\x5BB\x3\x2\x2\x2\x5DE\x5BC\x3\x2\x2\x2\x5DE\x5BD\x3\x2"+
		"\x2\x2\x5DE\x5BE\x3\x2\x2\x2\x5DE\x5BF\x3\x2\x2\x2\x5DE\x5C0\x3\x2\x2"+
		"\x2\x5DE\x5C1\x3\x2\x2\x2\x5DE\x5C2\x3\x2\x2\x2\x5DE\x5C3\x3\x2\x2\x2"+
		"\x5DE\x5C4\x3\x2\x2\x2\x5DE\x5C5\x3\x2\x2\x2\x5DE\x5C6\x3\x2\x2\x2\x5DE"+
		"\x5C7\x3\x2\x2\x2\x5DE\x5C8\x3\x2\x2\x2\x5DE\x5C9\x3\x2\x2\x2\x5DE\x5CA"+
		"\x3\x2\x2\x2\x5DE\x5CB\x3\x2\x2\x2\x5DE\x5CC\x3\x2\x2\x2\x5DE\x5CD\x3"+
		"\x2\x2\x2\x5DE\x5CE\x3\x2\x2\x2\x5DE\x5CF\x3\x2\x2\x2\x5DE\x5D0\x3\x2"+
		"\x2\x2\x5DE\x5D1\x3\x2\x2\x2\x5DE\x5D2\x3\x2\x2\x2\x5DE\x5D3\x3\x2\x2"+
		"\x2\x5DE\x5D4\x3\x2\x2\x2\x5DE\x5D5\x3\x2\x2\x2\x5DE\x5D6\x3\x2\x2\x2"+
		"\x5DE\x5D7\x3\x2\x2\x2\x5DE\x5D8\x3\x2\x2\x2\x5DE\x5D9\x3\x2\x2\x2\x5DE"+
		"\x5DA\x3\x2\x2\x2\x5DE\x5DB\x3\x2\x2\x2\x5DE\x5DC\x3\x2\x2\x2\x5DE\x5DD"+
		"\x3\x2\x2\x2\x5DF\r\x3\x2\x2\x2\x5E0\x5E6\x5\x2E4\x173\x2\x5E1\x5E6\x5"+
		"\x2E6\x174\x2\x5E2\x5E6\x5\x2E8\x175\x2\x5E3\x5E6\x5\x2EA\x176\x2\x5E4"+
		"\x5E6\x5\x2EC\x177\x2\x5E5\x5E0\x3\x2\x2\x2\x5E5\x5E1\x3\x2\x2\x2\x5E5"+
		"\x5E2\x3\x2\x2\x2\x5E5\x5E3\x3\x2\x2\x2\x5E5\x5E4\x3\x2\x2\x2\x5E6\xF"+
		"\x3\x2\x2\x2\x5E7\x5F4\x5\x12\n\x2\x5E8\x5F4\x5\x14\v\x2\x5E9\x5F4\x5"+
		"\x16\f\x2\x5EA\x5F4\x5\x18\r\x2\x5EB\x5F4\x5\x1C\xF\x2\x5EC\x5F4\x5,\x17"+
		"\x2\x5ED\x5F4\x5.\x18\x2\x5EE\x5F4\x5\x1A\xE\x2\x5EF\x5F4\x5\x1E\x10\x2"+
		"\x5F0\x5F4\x5&\x14\x2\x5F1\x5F4\x5(\x15\x2\x5F2\x5F4\x5*\x16\x2\x5F3\x5E7"+
		"\x3\x2\x2\x2\x5F3\x5E8\x3\x2\x2\x2\x5F3\x5E9\x3\x2\x2\x2\x5F3\x5EA\x3"+
		"\x2\x2\x2\x5F3\x5EB\x3\x2\x2\x2\x5F3\x5EC\x3\x2\x2\x2\x5F3\x5ED\x3\x2"+
		"\x2\x2\x5F3\x5EE\x3\x2\x2\x2\x5F3\x5EF\x3\x2\x2\x2\x5F3\x5F0\x3\x2\x2"+
		"\x2\x5F3\x5F1\x3\x2\x2\x2\x5F3\x5F2\x3\x2\x2\x2\x5F4\x11\x3\x2\x2\x2\x5F5"+
		"\x5F7\a\\\x2\x2\x5F6\x5F8\a\x486\x2\x2\x5F7\x5F6\x3\x2\x2\x2\x5F7\x5F8"+
		"\x3\x2\x2\x2\x5F8\x5FC\x3\x2\x2\x2\x5F9\x5FB\x5\b\x5\x2\x5FA\x5F9\x3\x2"+
		"\x2\x2\x5FB\x5FE\x3\x2\x2\x2\x5FC\x5FA\x3\x2\x2\x2\x5FC\x5FD\x3\x2\x2"+
		"\x2\x5FD\x5FF\x3\x2\x2\x2\x5FE\x5FC\x3\x2\x2\x2\x5FF\x601\a\x130\x2\x2"+
		"\x600\x602\a\x486\x2\x2\x601\x600\x3\x2\x2\x2\x601\x602\x3\x2\x2\x2\x602"+
		"\x13\x3\x2\x2\x2\x603\x605\ai\x2\x2\x604\x606\a\x486\x2\x2\x605\x604\x3"+
		"\x2\x2\x2\x605\x606\x3\x2\x2\x2\x606\x15\x3\x2\x2\x2\x607\x609\a\xBD\x2"+
		"\x2\x608\x60A\a\x486\x2\x2\x609\x608\x3\x2\x2\x2\x609\x60A\x3\x2\x2\x2"+
		"\x60A\x17\x3\x2\x2\x2\x60B\x60C\a\x197\x2\x2\x60C\x60E\x5\x4D2\x26A\x2"+
		"\x60D\x60F\a\x486\x2\x2\x60E\x60D\x3\x2\x2\x2\x60E\x60F\x3\x2\x2\x2\x60F"+
		"\x616\x3\x2\x2\x2\x610\x611\x5\x4D2\x26A\x2\x611\x613\a\x487\x2\x2\x612"+
		"\x614\a\x486\x2\x2\x613\x612\x3\x2\x2\x2\x613\x614\x3\x2\x2\x2\x614\x616"+
		"\x3\x2\x2\x2\x615\x60B\x3\x2\x2\x2\x615\x610\x3\x2\x2\x2\x616\x19\x3\x2"+
		"\x2\x2\x617\x619\a\x33A\x2\x2\x618\x61A\x5\x3A6\x1D4\x2\x619\x618\x3\x2"+
		"\x2\x2\x619\x61A\x3\x2\x2\x2\x61A\x61C\x3\x2\x2\x2\x61B\x61D\a\x486\x2"+
		"\x2\x61C\x61B\x3\x2\x2\x2\x61C\x61D\x3\x2\x2\x2\x61D\x1B\x3\x2\x2\x2\x61E"+
		"\x61F\a\x1B7\x2\x2\x61F\x620\x5\x3C0\x1E1\x2\x620\x623\x5\b\x5\x2\x621"+
		"\x622\a\x126\x2\x2\x622\x624\x5\b\x5\x2\x623\x621\x3\x2\x2\x2\x623\x624"+
		"\x3\x2\x2\x2\x624\x626\x3\x2\x2\x2\x625\x627\a\x486\x2\x2\x626\x625\x3"+
		"\x2\x2\x2\x626\x627\x3\x2\x2\x2\x627\x1D\x3\x2\x2\x2\x628\x62F\a\x3E5"+
		"\x2\x2\x629\x62A\x5 \x11\x2\x62A\x62B\a\x485\x2\x2\x62B\x62C\x5\"\x12"+
		"\x2\x62C\x62D\a\x485\x2\x2\x62D\x62E\x5$\x13\x2\x62E\x630\x3\x2\x2\x2"+
		"\x62F\x629\x3\x2\x2\x2\x62F\x630\x3\x2\x2\x2\x630\x632\x3\x2\x2\x2\x631"+
		"\x633\a\x486\x2\x2\x632\x631\x3\x2\x2\x2\x632\x633\x3\x2\x2\x2\x633\x1F"+
		"\x3\x2\x2\x2\x634\x635\t\x2\x2\x2\x635!\x3\x2\x2\x2\x636\x637\t\x3\x2"+
		"\x2\x637#\x3\x2\x2\x2\x638\x639\t\x2\x2\x2\x639%\x3\x2\x2\x2\x63A\x63B"+
		"\a\\\x2\x2\x63B\x63D\a\x3FE\x2\x2\x63C\x63E\a\x486\x2\x2\x63D\x63C\x3"+
		"\x2\x2\x2\x63D\x63E\x3\x2\x2\x2\x63E\x640\x3\x2\x2\x2\x63F\x641\x5\b\x5"+
		"\x2\x640\x63F\x3\x2\x2\x2\x641\x642\x3\x2\x2\x2\x642\x640\x3\x2\x2\x2"+
		"\x642\x643\x3\x2\x2\x2\x643\x644\x3\x2\x2\x2\x644\x645\a\x130\x2\x2\x645"+
		"\x647\a\x3FE\x2\x2\x646\x648\a\x486\x2\x2\x647\x646\x3\x2\x2\x2\x647\x648"+
		"\x3\x2\x2\x2\x648\x649\x3\x2\x2\x2\x649\x64A\a\\\x2\x2\x64A\x64C\a{\x2"+
		"\x2\x64B\x64D\a\x486\x2\x2\x64C\x64B\x3\x2\x2\x2\x64C\x64D\x3\x2\x2\x2"+
		"\x64D\x651\x3\x2\x2\x2\x64E\x650\x5\b\x5\x2\x64F\x64E\x3\x2\x2\x2\x650"+
		"\x653\x3\x2\x2\x2\x651\x64F\x3\x2\x2\x2\x651\x652\x3\x2\x2\x2\x652\x654"+
		"\x3\x2\x2\x2\x653\x651\x3\x2\x2\x2\x654\x655\a\x130\x2\x2\x655\x657\a"+
		"{\x2\x2\x656\x658\a\x486\x2\x2\x657\x656\x3\x2\x2\x2\x657\x658\x3\x2\x2"+
		"\x2\x658\'\x3\x2\x2\x2\x659\x65B\a\x430\x2\x2\x65A\x65C\x5\x1E2\xF2\x2"+
		"\x65B\x65A\x3\x2\x2\x2\x65B\x65C\x3\x2\x2\x2\x65C\x65E\x3\x2\x2\x2\x65D"+
		"\x65F\a\x485\x2\x2\x65E\x65D\x3\x2\x2\x2\x65E\x65F\x3\x2\x2\x2\x65F\x662"+
		"\x3\x2\x2\x2\x660\x661\t\x4\x2\x2\x661\x663\x5\x1E8\xF5\x2\x662\x660\x3"+
		"\x2\x2\x2\x662\x663\x3\x2\x2\x2\x663\x665\x3\x2\x2\x2\x664\x666\x5\x3A6"+
		"\x1D4\x2\x665\x664\x3\x2\x2\x2\x665\x666\x3\x2\x2\x2\x666\x668\x3\x2\x2"+
		"\x2\x667\x669\a\x486\x2\x2\x668\x667\x3\x2\x2\x2\x668\x669\x3\x2\x2\x2"+
		"\x669)\x3\x2\x2\x2\x66A\x66B\a\x436\x2\x2\x66B\x675\x5\x3C0\x1E1\x2\x66C"+
		"\x676\x5\b\x5\x2\x66D\x66F\ai\x2\x2\x66E\x670\a\x486\x2\x2\x66F\x66E\x3"+
		"\x2\x2\x2\x66F\x670\x3\x2\x2\x2\x670\x676\x3\x2\x2\x2\x671\x673\a\xBD"+
		"\x2\x2\x672\x674\a\x486\x2\x2\x673\x672\x3\x2\x2\x2\x673\x674\x3\x2\x2"+
		"\x2\x674\x676\x3\x2\x2\x2\x675\x66C\x3\x2\x2\x2\x675\x66D\x3\x2\x2\x2"+
		"\x675\x671\x3\x2\x2\x2\x676+\x3\x2\x2\x2\x677\x67A\a\x2DB\x2\x2\x678\x67B"+
		"\x5\x3A6\x1D4\x2\x679\x67B\a\x465\x2\x2\x67A\x678\x3\x2\x2\x2\x67A\x679"+
		"\x3\x2\x2\x2\x67B\x680\x3\x2\x2\x2\x67C\x67D\a\x485\x2\x2\x67D\x67F\a"+
		"\x468\x2\x2\x67E\x67C\x3\x2\x2\x2\x67F\x682\x3\x2\x2\x2\x680\x67E\x3\x2"+
		"\x2\x2\x680\x681\x3\x2\x2\x2\x681\x684\x3\x2\x2\x2\x682\x680\x3\x2\x2"+
		"\x2\x683\x685\a\x486\x2\x2\x684\x683\x3\x2\x2\x2\x684\x685\x3\x2\x2\x2"+
		"\x685-\x3\x2\x2\x2\x686\x687\a\x2F9\x2\x2\x687\x688\a\x481\x2\x2\x688"+
		"\x689\t\x5\x2\x2\x689\x68A\a\x485\x2\x2\x68A\x68B\x5\x3A4\x1D3\x2\x68B"+
		"\x68C\a\x485\x2\x2\x68C\x691\x5\x3A4\x1D3\x2\x68D\x68E\a\x485\x2\x2\x68E"+
		"\x690\x5\x3A4\x1D3\x2\x68F\x68D\x3\x2\x2\x2\x690\x693\x3\x2\x2\x2\x691"+
		"\x68F\x3\x2\x2\x2\x691\x692\x3\x2\x2\x2\x692\x694\x3\x2\x2\x2\x693\x691"+
		"\x3\x2\x2\x2\x694\x697\a\x482\x2\x2\x695\x696\a\x438\x2\x2\x696\x698\t"+
		"\x6\x2\x2\x697\x695\x3\x2\x2\x2\x697\x698\x3\x2\x2\x2\x698\x69A\x3\x2"+
		"\x2\x2\x699\x69B\a\x486\x2\x2\x69A\x699\x3\x2\x2\x2\x69A\x69B\x3\x2\x2"+
		"\x2\x69B\x6A7\x3\x2\x2\x2\x69C\x69D\a\x2F9\x2\x2\x69D\x69E\a\x469\x2\x2"+
		"\x69E\x6A3\t\a\x2\x2\x69F\x6A0\a\x485\x2\x2\x6A0\x6A2\t\x5\x2\x2\x6A1"+
		"\x69F\x3\x2\x2\x2\x6A2\x6A5\x3\x2\x2\x2\x6A3\x6A1\x3\x2\x2\x2\x6A3\x6A4"+
		"\x3\x2\x2\x2\x6A4\x6A7\x3\x2\x2\x2\x6A5\x6A3\x3\x2\x2\x2\x6A6\x686\x3"+
		"\x2\x2\x2\x6A6\x69C\x3\x2\x2\x2\x6A7/\x3\x2\x2\x2\x6A8\x6A9\a\x486\x2"+
		"\x2\x6A9\x31\x3\x2\x2\x2\x6AA\x6BC\x5\x1C6\xE4\x2\x6AB\x6BC\x5\x334\x19B"+
		"\x2\x6AC\x6BC\x5\x1CE\xE8\x2\x6AD\x6BC\x5\x1CC\xE7\x2\x6AE\x6BC\x5\x1C2"+
		"\xE2\x2\x6AF\x6BC\x5\x2E2\x172\x2\x6B0\x6BC\x5\x2DE\x170\x2\x6B1\x6BC"+
		"\x5\x2F6\x17C\x2\x6B2\x6BC\x5\x2EE\x178\x2\x6B3\x6BC\x5\x1D0\xE9\x2\x6B4"+
		"\x6BC\x5\x330\x199\x2\x6B5\x6BC\x5\x306\x184\x2\x6B6\x6BC\x5\x324\x193"+
		"\x2\x6B7\x6BC\x5\x32E\x198\x2\x6B8\x6BC\x5\x332\x19A\x2\x6B9\x6BC\x5\x326"+
		"\x194\x2\x6BA\x6BC\x5\x32C\x197\x2\x6BB\x6AA\x3\x2\x2\x2\x6BB\x6AB\x3"+
		"\x2\x2\x2\x6BB\x6AC\x3\x2\x2\x2\x6BB\x6AD\x3\x2\x2\x2\x6BB\x6AE\x3\x2"+
		"\x2\x2\x6BB\x6AF\x3\x2\x2\x2\x6BB\x6B0\x3\x2\x2\x2\x6BB\x6B1\x3\x2\x2"+
		"\x2\x6BB\x6B2\x3\x2\x2\x2\x6BB\x6B3\x3\x2\x2\x2\x6BB\x6B4\x3\x2\x2\x2"+
		"\x6BB\x6B5\x3\x2\x2\x2\x6BB\x6B6\x3\x2\x2\x2\x6BB\x6B7\x3\x2\x2\x2\x6BB"+
		"\x6B8\x3\x2\x2\x2\x6BB\x6B9\x3\x2\x2\x2\x6BB\x6BA\x3\x2\x2\x2\x6BC\x33"+
		"\x3\x2\x2\x2\x6BD\x6BE\a%\x2\x2\x6BE\x6BF\a\x32\x2\x2\x6BF\x6C0\a\x342"+
		"\x2\x2\x6C0\x6C1\x5\x4D2\x26A\x2\x6C1\x6C8\a\x438\x2\x2\x6C2\x6C4\a\x485"+
		"\x2\x2\x6C3\x6C2\x3\x2\x2\x2\x6C3\x6C4\x3\x2\x2\x2\x6C4\x6C5\x3\x2\x2"+
		"\x2\x6C5\x6C6\a\x254\x2\x2\x6C6\x6C7\a\x46F\x2\x2\x6C7\x6C9\x5\x4D2\x26A"+
		"\x2\x6C8\x6C3\x3\x2\x2\x2\x6C8\x6C9\x3\x2\x2\x2\x6C9\x6D0\x3\x2\x2\x2"+
		"\x6CA\x6CC\a\x485\x2\x2\x6CB\x6CA\x3\x2\x2\x2\x6CB\x6CC\x3\x2\x2\x2\x6CC"+
		"\x6CD\x3\x2\x2\x2\x6CD\x6CE\a\x2BE\x2\x2\x6CE\x6CF\a\x46F\x2\x2\x6CF\x6D1"+
		"\a\x46B\x2\x2\x6D0\x6CB\x3\x2\x2\x2\x6D0\x6D1\x3\x2\x2\x2\x6D1\x6D8\x3"+
		"\x2\x2\x2\x6D2\x6D4\a\x485\x2\x2\x6D3\x6D2\x3\x2\x2\x2\x6D3\x6D4\x3\x2"+
		"\x2\x2\x6D4\x6D5\x3\x2\x2\x2\x6D5\x6D6\a\xFE\x2\x2\x6D6\x6D7\a\x46F\x2"+
		"\x2\x6D7\x6D9\x5\x4D2\x26A\x2\x6D8\x6D3\x3\x2\x2\x2\x6D8\x6D9\x3\x2\x2"+
		"\x2\x6D9\x35\x3\x2\x2\x2\x6DA\x6DB\a%\x2\x2\x6DB\x6DC\a\x443\x2\x2\x6DC"+
		"\x6DD\a\x35A\x2\x2\x6DD\x6E1\a\x9D\x2\x2\x6DE\x6DF\x5\x4D2\x26A\x2\x6DF"+
		"\x6E0\a\x47C\x2\x2\x6E0\x6E2\x3\x2\x2\x2\x6E1\x6DE\x3\x2\x2\x2\x6E1\x6E2"+
		"\x3\x2\x2\x2\x6E2\x6E3\x3\x2\x2\x2\x6E3\x6E4\x5\x4D2\x26A\x2\x6E4\x6E5"+
		"\a\r\x2\x2\x6E5\x6E6\a\x46B\x2\x2\x6E6\x37\x3\x2\x2\x2\x6E7\x6E8\a\xCA"+
		"\x2\x2\x6E8\x6E9\a\x32\x2\x2\x6E9\x6EA\a\x342\x2\x2\x6EA\x6EB\x5\x4D2"+
		"\x26A\x2\x6EB\x6F2\a\x438\x2\x2\x6EC\x6EE\a\x485\x2\x2\x6ED\x6EC\x3\x2"+
		"\x2\x2\x6ED\x6EE\x3\x2\x2\x2\x6EE\x6EF\x3\x2\x2\x2\x6EF\x6F0\a\x2BE\x2"+
		"\x2\x6F0\x6F1\a\x46F\x2\x2\x6F1\x6F3\a\x46B\x2\x2\x6F2\x6ED\x3\x2\x2\x2"+
		"\x6F2\x6F3\x3\x2\x2\x2\x6F3\x6FA\x3\x2\x2\x2\x6F4\x6F6\a\x485\x2\x2\x6F5"+
		"\x6F4\x3\x2\x2\x2\x6F5\x6F6\x3\x2\x2\x2\x6F6\x6F7\x3\x2\x2\x2\x6F7\x6F8"+
		"\a\xFE\x2\x2\x6F8\x6F9\a\x46F\x2\x2\x6F9\x6FB\x5\x4D2\x26A\x2\x6FA\x6F5"+
		"\x3\x2\x2\x2\x6FA\x6FB\x3\x2\x2\x2\x6FB\x39\x3\x2\x2\x2\x6FC\x6FD\a\x11E"+
		"\x2\x2\x6FD\x700\a\x16\x2\x2\x6FE\x6FF\a\x1B7\x2\x2\x6FF\x701\a\x147\x2"+
		"\x2\x700\x6FE\x3\x2\x2\x2\x700\x701\x3\x2\x2\x2\x701\x705\x3\x2\x2\x2"+
		"\x702\x703\x5\x4D2\x26A\x2\x703\x704\a\x47C\x2\x2\x704\x706\x3\x2\x2\x2"+
		"\x705\x702\x3\x2\x2\x2\x705\x706\x3\x2\x2\x2\x706\x707\x3\x2\x2\x2\x707"+
		"\x708\x5\x4D2\x26A\x2\x708;\x3\x2\x2\x2\x709\x70A\a\x11E\x2\x2\x70A\x70B"+
		"\a\x32\x2\x2\x70B\x70C\a\x342\x2\x2\x70C\x70D\x5\x4D2\x26A\x2\x70D=\x3"+
		"\x2\x2\x2\x70E\x70F\x5@!\x2\x70F\x710\x5\x4D2\x26A\x2\x710\x711\x5\x42"+
		"\"\x2\x711?\x3\x2\x2\x2\x712\x713\a%\x2\x2\x713\x714\a=\x2\x2\x714\x41"+
		"\x3\x2\x2\x2\x715\x717\x5\x44#\x2\x716\x715\x3\x2\x2\x2\x716\x717\x3\x2"+
		"\x2\x2\x717\x719\x3\x2\x2\x2\x718\x71A\x5Z.\x2\x719\x718\x3\x2\x2\x2\x719"+
		"\x71A\x3\x2\x2\x2\x71A\x71C\x3\x2\x2\x2\x71B\x71D\x5H%\x2\x71C\x71B\x3"+
		"\x2\x2\x2\x71C\x71D\x3\x2\x2\x2\x71D\x71F\x3\x2\x2\x2\x71E\x720\x5N(\x2"+
		"\x71F\x71E\x3\x2\x2\x2\x71F\x720\x3\x2\x2\x2\x720\x43\x3\x2\x2\x2\x721"+
		"\x724\x5\x46$\x2\x722\x725\x5^\x30\x2\x723\x725\x5V,\x2\x724\x722\x3\x2"+
		"\x2\x2\x724\x723\x3\x2\x2\x2\x725\x45\x3\x2\x2\x2\x726\x727\a\x181\x2"+
		"\x2\x727G\x3\x2\x2\x2\x728\x729\x5L\'\x2\x729\x72A\x5J&\x2\x72AI\x3\x2"+
		"\x2\x2\x72B\x72E\a\x18\x2\x2\x72C\x72E\x5p\x39\x2\x72D\x72B\x3\x2\x2\x2"+
		"\x72D\x72C\x3\x2\x2\x2\x72EK\x3\x2\x2\x2\x72F\x730\a\x11E\x2\x2\x730M"+
		"\x3\x2\x2\x2\x731\x732\x5P)\x2\x732\x733\x5R*\x2\x733O\x3\x2\x2\x2\x734"+
		"\x735\a\r\x2\x2\x735\x736\a\x15C\x2\x2\x736\x737\a\x181\x2\x2\x737Q\x3"+
		"\x2\x2\x2\x738\x73C\x5T+\x2\x739\x73A\x5X-\x2\x73A\x73B\x5\x4D2\x26A\x2"+
		"\x73B\x73D\x3\x2\x2\x2\x73C\x739\x3\x2\x2\x2\x73C\x73D\x3\x2\x2\x2\x73D"+
		"S\x3\x2\x2\x2\x73E\x73F\a\x46B\x2\x2\x73FU\x3\x2\x2\x2\x740\x741\x5X-"+
		"\x2\x741\x742\x5\x4D2\x26A\x2\x742W\x3\x2\x2\x2\x743\x744\a:\x2\x2\x744"+
		"Y\x3\x2\x2\x2\x745\x746\x5\\/\x2\x746\x747\x5`\x31\x2\x747[\x3\x2\x2\x2"+
		"\x748\x749\a\x438\x2\x2\x749]\x3\x2\x2\x2\x74A\x74E\x5\x62\x32\x2\x74B"+
		"\x74E\x5l\x37\x2\x74C\x74E\a\x46B\x2\x2\x74D\x74A\x3\x2\x2\x2\x74D\x74B"+
		"\x3\x2\x2\x2\x74D\x74C\x3\x2\x2\x2\x74E_\x3\x2\x2\x2\x74F\x750\b\x31\x1"+
		"\x2\x750\x751\a\x2C8\x2\x2\x751\x752\a\x46F\x2\x2\x752\x759\t\b\x2\x2"+
		"\x753\x754\a\x42E\x2\x2\x754\x755\a\x46F\x2\x2\x755\x759\x5\x4AA\x256"+
		"\x2\x756\x757\a\x409\x2\x2\x757\x759\a\xDD\x2\x2\x758\x74F\x3\x2\x2\x2"+
		"\x758\x753\x3\x2\x2\x2\x758\x756\x3\x2\x2\x2\x759\x75E\x3\x2\x2\x2\x75A"+
		"\x75B\f\x3\x2\x2\x75B\x75D\a\x485\x2\x2\x75C\x75A\x3\x2\x2\x2\x75D\x760"+
		"\x3\x2\x2\x2\x75E\x75C\x3\x2\x2\x2\x75E\x75F\x3\x2\x2\x2\x75F\x61\x3\x2"+
		"\x2\x2\x760\x75E\x3\x2\x2\x2\x761\x762\x5\x66\x34\x2\x762\x763\x5\x64"+
		"\x33\x2\x763\x764\x5h\x35\x2\x764\x63\x3\x2\x2\x2\x765\x766\x5\x4D2\x26A"+
		"\x2\x766\x65\x3\x2\x2\x2\x767\x768\a\x11C\x2\x2\x768g\x3\x2\x2\x2\x769"+
		"\x76A\x5j\x36\x2\x76A\x76B\x5h\x35\x2\x76B\x76E\x3\x2\x2\x2\x76C\x76E"+
		"\x5\x4D2\x26A\x2\x76D\x769\x3\x2\x2\x2\x76D\x76C\x3\x2\x2\x2\x76Ei\x3"+
		"\x2\x2\x2\x76F\x770\aV\x2\x2\x770k\x3\x2\x2\x2\x771\x772\x5n\x38\x2\x772"+
		"\x773\x5h\x35\x2\x773m\x3\x2\x2\x2\x774\x775\a\x492\x2\x2\x775o\x3\x2"+
		"\x2\x2\x776\x777\x5r:\x2\x777\x778\x5l\x37\x2\x778\x779\a\x466\x2\x2\x779"+
		"\x77A\a\x485\x2\x2\x77A\x77D\x3\x2\x2\x2\x77B\x77D\x5l\x37\x2\x77C\x776"+
		"\x3\x2\x2\x2\x77C\x77B\x3\x2\x2\x2\x77Dq\x3\x2\x2\x2\x77E\x77F\a\x466"+
		"\x2\x2\x77Fs\x3\x2\x2\x2\x780\x781\a\xCA\x2\x2\x781\x782\a=\x2\x2\x782"+
		"\x785\x5\x4D2\x26A\x2\x783\x784\a\x46\x2\x2\x784\x786\x5\x4D2\x26A\x2"+
		"\x785\x783\x3\x2\x2\x2\x785\x786\x3\x2\x2\x2\x786\x787\x3\x2\x2\x2\x787"+
		"\x78C\a\x181\x2\x2\x788\x78A\a\x485\x2\x2\x789\x788\x3\x2\x2\x2\x789\x78A"+
		"\x3\x2\x2\x2\x78A\x78B\x3\x2\x2\x2\x78B\x78D\t\t\x2\x2\x78C\x789\x3\x2"+
		"\x2\x2\x78D\x78E\x3\x2\x2\x2\x78E\x78C\x3\x2\x2\x2\x78E\x78F\x3\x2\x2"+
		"\x2\x78F\x794\x3\x2\x2\x2\x790\x791\a\x438\x2\x2\x791\x792\a\x2C8\x2\x2"+
		"\x792\x793\a\x46F\x2\x2\x793\x795\t\b\x2\x2\x794\x790\x3\x2\x2\x2\x794"+
		"\x795\x3\x2\x2\x2\x795u\x3\x2\x2\x2\x796\x797\a\x11E\x2\x2\x797\x79A\a"+
		"=\x2\x2\x798\x799\a\x1B7\x2\x2\x799\x79B\a\x147\x2\x2\x79A\x798\x3\x2"+
		"\x2\x2\x79A\x79B\x3\x2\x2\x2\x79B\x7A0\x3\x2\x2\x2\x79C\x79E\a\x485\x2"+
		"\x2\x79D\x79C\x3\x2\x2\x2\x79D\x79E\x3\x2\x2\x2\x79E\x79F\x3\x2\x2\x2"+
		"\x79F\x7A1\x5\x4D2\x26A\x2\x7A0\x79D\x3\x2\x2\x2\x7A1\x7A2\x3\x2\x2\x2"+
		"\x7A2\x7A0\x3\x2\x2\x2\x7A2\x7A3\x3\x2\x2\x2\x7A3\x7A7\x3\x2\x2\x2\x7A4"+
		"\x7A5\a\x438\x2\x2\x7A5\x7A6\a\x260\x2\x2\x7A6\x7A8\a\x106\x2\x2\x7A7"+
		"\x7A4\x3\x2\x2\x2\x7A7\x7A8\x3\x2\x2\x2\x7A8w\x3\x2\x2\x2\x7A9\x7AA\x5"+
		"z>\x2\x7AA\x7AF\x5\x4D2\x26A\x2\x7AB\x7B0\x5|?\x2\x7AC\x7AD\a\x31C\x2"+
		"\x2\x7AD\x7AE\a\x2DF\x2\x2\x7AE\x7B0\a\x1F2\x2\x2\x7AF\x7AB\x3\x2\x2\x2"+
		"\x7AF\x7AC\x3\x2\x2\x2\x7B0y\x3\x2\x2\x2\x7B1\x7B2\a%\x2\x2\x7B2\x7B3"+
		"\a?\x2\x2\x7B3\x7B4\a\x1F2\x2\x2\x7B4{\x3\x2\x2\x2\x7B5\x7B6\x5~@\x2\x7B6"+
		"\x7B9\x5\x80\x41\x2\x7B7\x7B8\a\x485\x2\x2\x7B8\x7BA\x5\x80\x41\x2\x7B9"+
		"\x7B7\x3\x2\x2\x2\x7B9\x7BA\x3\x2\x2\x2\x7BA\x7BB\x3\x2\x2\x2\x7BB\x7BC"+
		"\a\x482\x2\x2\x7BC}\x3\x2\x2\x2\x7BD\x7BE\a\x438\x2\x2\x7BE\x7BF\a\x2DF"+
		"\x2\x2\x7BF\x7C0\a\x1F2\x2\x2\x7C0\x7C1\a\x481\x2\x2\x7C1\x7F\x3\x2\x2"+
		"\x2\x7C2\x7C3\a\xF8\x2\x2\x7C3\x7C4\aq\x2\x2\x7C4\x7C5\a\x2BE\x2\x2\x7C5"+
		"\x7C6\a\x46F\x2\x2\x7C6\x7CD\a\x46B\x2\x2\x7C7\x7C8\a\x12E\x2\x2\x7C8"+
		"\x7C9\aq\x2\x2\x7C9\x7CA\a\x2BE\x2\x2\x7CA\x7CB\a\x46F\x2\x2\x7CB\x7CD"+
		"\a\x46B\x2\x2\x7CC\x7C2\x3\x2\x2\x2\x7CC\x7C7\x3\x2\x2\x2\x7CD\x81\x3"+
		"\x2\x2\x2\x7CE\x7CF\a\xCA\x2\x2\x7CF\x7D0\a?\x2\x2\x7D0\x7D1\a\x1F2\x2"+
		"\x2\x7D1\x7D4\x5\x4D2\x26A\x2\x7D2\x7D3\a\x46\x2\x2\x7D3\x7D5\x5\x4D2"+
		"\x26A\x2\x7D4\x7D2\x3\x2\x2\x2\x7D4\x7D5\x3\x2\x2\x2\x7D5\x7E3\x3\x2\x2"+
		"\x2\x7D6\x7E1\a\x181\x2\x2\x7D7\x7D8\a\x15C\x2\x2\x7D8\x7D9\a\x46F\x2"+
		"\x2\x7D9\x7E2\a\x46B\x2\x2\x7DA\x7DB\a\x144\x2\x2\x7DB\x7DC\a\x46F\x2"+
		"\x2\x7DC\x7E2\a\x46B\x2\x2\x7DD\x7DE\a=\x2\x2\x7DE\x7E2\x5\x4D2\x26A\x2"+
		"\x7DF\x7E0\a\x2E9\x2\x2\x7E0\x7E2\x5\x4D2\x26A\x2\x7E1\x7D7\x3\x2\x2\x2"+
		"\x7E1\x7DA\x3\x2\x2\x2\x7E1\x7DD\x3\x2\x2\x2\x7E1\x7DF\x3\x2\x2\x2\x7E2"+
		"\x7E4\x3\x2\x2\x2\x7E3\x7D6\x3\x2\x2\x2\x7E3\x7E4\x3\x2\x2\x2\x7E4\x7F1"+
		"\x3\x2\x2\x2\x7E5\x7EF\a\x438\x2\x2\x7E6\x7E7\a\x17\x2\x2\x7E7\x7E8\a"+
		"\x46F\x2\x2\x7E8\x7F0\t\n\x2\x2\x7E9\x7EA\a\x2EA\x2\x2\x7EA\x7EB\a\x46F"+
		"\x2\x2\x7EB\x7F0\a\x46B\x2\x2\x7EC\x7ED\a\xCC\x2\x2\x7ED\x7EE\a\x46F\x2"+
		"\x2\x7EE\x7F0\t\v\x2\x2\x7EF\x7E6\x3\x2\x2\x2\x7EF\x7E9\x3\x2\x2\x2\x7EF"+
		"\x7EC\x3\x2\x2\x2\x7F0\x7F2\x3\x2\x2\x2\x7F1\x7E5\x3\x2\x2\x2\x7F1\x7F2"+
		"\x3\x2\x2\x2\x7F2\x7F8\x3\x2\x2\x2\x7F3\x7F4\a\x12E\x2\x2\x7F4\x7F5\a"+
		"q\x2\x2\x7F5\x7F6\a\x2BE\x2\x2\x7F6\x7F7\a\x46F\x2\x2\x7F7\x7F9\a\x46B"+
		"\x2\x2\x7F8\x7F3\x3\x2\x2\x2\x7F8\x7F9\x3\x2\x2\x2\x7F9\x83\x3\x2\x2\x2"+
		"\x7FA\x7FB\a\x11E\x2\x2\x7FB\x7FC\a?\x2\x2\x7FC\x7FD\a\x1F2\x2\x2\x7FD"+
		"\x801\x5\x4D2\x26A\x2\x7FE\x7FF\a\x31C\x2\x2\x7FF\x800\a\x2E9\x2\x2\x800"+
		"\x802\a\x1F2\x2\x2\x801\x7FE\x3\x2\x2\x2\x801\x802\x3\x2\x2\x2\x802\x85"+
		"\x3\x2\x2\x2\x803\x807\x5\x8EH\x2\x804\x805\x5\x96L\x2\x805\x806\x5\x8C"+
		"G\x2\x806\x808\x3\x2\x2\x2\x807\x804\x3\x2\x2\x2\x807\x808\x3\x2\x2\x2"+
		"\x808\x809\x3\x2\x2\x2\x809\x80A\x5\x48A\x246\x2\x80A\x80B\x5\x8A\x46"+
		"\x2\x80B\x80C\x5\x88\x45\x2\x80C\x87\x3\x2\x2\x2\x80D\x811\x5\x4D2\x26A"+
		"\x2\x80E\x80F\a\x35A\x2\x2\x80F\x811\a\x2AE\x2\x2\x810\x80D\x3\x2\x2\x2"+
		"\x810\x80E\x3\x2\x2\x2\x811\x89\x3\x2\x2\x2\x812\x813\a\x3EB\x2\x2\x813"+
		"\x8B\x3\x2\x2\x2\x814\x815\a\x488\x2\x2\x815\x8D\x3\x2\x2\x2\x816\x817"+
		"\a%\x2\x2\x817\x818\a\x46\x2\x2\x818\x819\a\x294\x2\x2\x819\x8F\x3\x2"+
		"\x2\x2\x81A\x81E\x5\x8EH\x2\x81B\x81C\x5\x98M\x2\x81C\x81D\x5\x8CG\x2"+
		"\x81D\x81F\x3\x2\x2\x2\x81E\x81B\x3\x2\x2\x2\x81E\x81F\x3\x2\x2\x2\x81F"+
		"\x820\x3\x2\x2\x2\x820\x821\x5\x48A\x246\x2\x821\x822\x5\x8A\x46\x2\x822"+
		"\x823\x5\x88\x45\x2\x823\x91\x3\x2\x2\x2\x824\x828\x5\x8EH\x2\x825\x826"+
		"\x5\x9AN\x2\x826\x827\x5\x8CG\x2\x827\x829\x3\x2\x2\x2\x828\x825\x3\x2"+
		"\x2\x2\x828\x829\x3\x2\x2\x2\x829\x82A\x3\x2\x2\x2\x82A\x82B\x5\x48C\x247"+
		"\x2\x82B\x82C\x5\x8A\x46\x2\x82C\x82D\x5\x88\x45\x2\x82D\x93\x3\x2\x2"+
		"\x2\x82E\x832\x5\x8EH\x2\x82F\x830\x5\x9CO\x2\x830\x831\x5\x8CG\x2\x831"+
		"\x833\x3\x2\x2\x2\x832\x82F\x3\x2\x2\x2\x832\x833\x3\x2\x2\x2\x833\x834"+
		"\x3\x2\x2\x2\x834\x835\x5\x48E\x248\x2\x835\x836\x5\x8A\x46\x2\x836\x837"+
		"\x5\x88\x45\x2\x837\x95\x3\x2\x2\x2\x838\x85B\a\x286\x2\x2\x839\x85B\a"+
		"=\x2\x2\x83A\x83B\a?\x2\x2\x83B\x85B\a\x1F2\x2\x2\x83C\x83D\aS\x2\x2\x83D"+
		"\x85B\a\x19B\x2\x2\x83E\x85B\a}\x2\x2\x83F\x85B\a\xBF\x2\x2\x840\x85B"+
		"\a\x403\x2\x2\x841\x85B\a\xDE\x2\x2\x842\x85B\a\x131\x2\x2\x843\x844\a"+
		"\x184\x2\x2\x844\x85B\ay\x2\x2\x845\x846\a\x184\x2\x2\x846\x85B\a\x3BF"+
		"\x2\x2\x847\x848\a\x241\x2\x2\x848\x85B\a\x403\x2\x2\x849\x84A\a\x319"+
		"\x2\x2\x84A\x84B\a\x37C\x2\x2\x84B\x85B\a\x63\x2\x2\x84C\x85B\a\x342\x2"+
		"\x2\x84D\x85B\a\x346\x2\x2\x84E\x85B\a\x35A\x2\x2\x84F\x850\a\x364\x2"+
		"\x2\x850\x851\a\x2E8\x2\x2\x851\x85B\a\x209\x2\x2\x852\x853\a\x37A\x2"+
		"\x2\x853\x85B\a\x342\x2\x2\x854\x85B\a\x37C\x2\x2\x855\x856\a\x3D2\x2"+
		"\x2\x856\x85B\a\x1F2\x2\x2\x857\x858\a\x443\x2\x2\x858\x859\a\x35A\x2"+
		"\x2\x859\x85B\a\x9D\x2\x2\x85A\x838\x3\x2\x2\x2\x85A\x839\x3\x2\x2\x2"+
		"\x85A\x83A\x3\x2\x2\x2\x85A\x83C\x3\x2\x2\x2\x85A\x83E\x3\x2\x2\x2\x85A"+
		"\x83F\x3\x2\x2\x2\x85A\x840\x3\x2\x2\x2\x85A\x841\x3\x2\x2\x2\x85A\x842"+
		"\x3\x2\x2\x2\x85A\x843\x3\x2\x2\x2\x85A\x845\x3\x2\x2\x2\x85A\x847\x3"+
		"\x2\x2\x2\x85A\x849\x3\x2\x2\x2\x85A\x84C\x3\x2\x2\x2\x85A\x84D\x3\x2"+
		"\x2\x2\x85A\x84E\x3\x2\x2\x2\x85A\x84F\x3\x2\x2\x2\x85A\x852\x3\x2\x2"+
		"\x2\x85A\x854\x3\x2\x2\x2\x85A\x855\x3\x2\x2\x2\x85A\x857\x3\x2\x2\x2"+
		"\x85B\x97\x3\x2\x2\x2\x85C\x872\a\x286\x2\x2\x85D\x872\a=\x2\x2\x85E\x85F"+
		"\a?\x2\x2\x85F\x872\a\x1F2\x2\x2\x860\x872\a}\x2\x2\x861\x872\a\x403\x2"+
		"\x2\x862\x872\a\xDE\x2\x2\x863\x864\a\x184\x2\x2\x864\x872\ay\x2\x2\x865"+
		"\x866\a\x184\x2\x2\x866\x872\a\x3BF\x2\x2\x867\x872\a\x342\x2\x2\x868"+
		"\x872\a\x35A\x2\x2\x869\x86A\a\x364\x2\x2\x86A\x86B\a\x2E8\x2\x2\x86B"+
		"\x872\a\x209\x2\x2\x86C\x86D\a\x3D2\x2\x2\x86D\x872\a\x1F2\x2\x2\x86E"+
		"\x86F\a\x443\x2\x2\x86F\x870\a\x35A\x2\x2\x870\x872\a\x9D\x2\x2\x871\x85C"+
		"\x3\x2\x2\x2\x871\x85D\x3\x2\x2\x2\x871\x85E\x3\x2\x2\x2\x871\x860\x3"+
		"\x2\x2\x2\x871\x861\x3\x2\x2\x2\x871\x862\x3\x2\x2\x2\x871\x863\x3\x2"+
		"\x2\x2\x871\x865\x3\x2\x2\x2\x871\x867\x3\x2\x2\x2\x871\x868\x3\x2\x2"+
		"\x2\x871\x869\x3\x2\x2\x2\x871\x86C\x3\x2\x2\x2\x871\x86E\x3\x2\x2\x2"+
		"\x872\x99\x3\x2\x2\x2\x873\x874\t\f\x2\x2\x874\x9B\x3\x2\x2\x2\x875\x876"+
		"\t\r\x2\x2\x876\x9D\x3\x2\x2\x2\x877\x878\a\x32\x2\x2\x878\x8D3\a\x342"+
		"\x2\x2\x879\x8D3\a=\x2\x2\x87A\x87B\a?\x2\x2\x87B\x8D3\a\x1F2\x2\x2\x87C"+
		"\x8D3\a\x42\x2\x2\x87D\x87E\aS\x2\x2\x87E\x8D3\a\x19B\x2\x2\x87F\x880"+
		"\aj\x2\x2\x880\x8D3\a\x2DD\x2\x2\x881\x8D3\a}\x2\x2\x882\x883\a\x9E\x2"+
		"\x2\x883\x884\t\xE\x2\x2\x884\x8D3\a\x1F2\x2\x2\x885\x8D3\a\xBF\x2\x2"+
		"\x886\x8D3\a\xCD\x2\x2\x887\x888\a\xCF\x2\x2\x888\x8D3\a\x2E9\x2\x2\x889"+
		"\x897\a\xDE\x2\x2\x88A\x88B\a\x42\x2\x2\x88B\x898\a\x3A5\x2\x2\x88C\x88D"+
		"\a\x12E\x2\x2\x88D\x898\a\x1F2\x2\x2\x88E\x88F\a\x13E\x2\x2\x88F\x898"+
		"\a\x381\x2\x2\x890\x895\a\x35F\x2\x2\x891\x896\a\xB2\x2\x2\x892\x896\a"+
		"\xCD\x2\x2\x893\x894\a\x32F\x2\x2\x894\x896\a\x198\x2\x2\x895\x891\x3"+
		"\x2\x2\x2\x895\x892\x3\x2\x2\x2\x895\x893\x3\x2\x2\x2\x896\x898\x3\x2"+
		"\x2\x2\x897\x88A\x3\x2\x2\x2\x897\x88C\x3\x2\x2\x2\x897\x88E\x3\x2\x2"+
		"\x2\x897\x890\x3\x2\x2\x2\x897\x898\x3\x2\x2\x2\x898\x8D3\x3\x2\x2\x2"+
		"\x899\x8D3\a\x131\x2\x2\x89A\x89B\a\x13E\x2\x2\x89B\x8D3\a\x381\x2\x2"+
		"\x89C\x89D\a\x272\x2\x2\x89D\x8D3\t\xF\x2\x2\x89E\x8A9\a\x150\x2\x2\x89F"+
		"\x8A0\a\xDD\x2\x2\x8A0\x8AA\a\x3A1\x2\x2\x8A1\x8A2\a\x15C\x2\x2\x8A2\x8AA"+
		"\a\x17B\x2\x2\x8A3\x8AA\a\x203\x2\x2\x8A4\x8A5\a\x32F\x2\x2\x8A5\x8AA"+
		"\a\x2D4\x2\x2\x8A6\x8AA\a\x3D7\x2\x2\x8A7\x8AA\ay\x2\x2\x8A8\x8AA\a\x3BF"+
		"\x2\x2\x8A9\x89F\x3\x2\x2\x2\x8A9\x8A1\x3\x2\x2\x2\x8A9\x8A3\x3\x2\x2"+
		"\x2\x8A9\x8A4\x3\x2\x2\x2\x8A9\x8A6\x3\x2\x2\x2\x8A9\x8A7\x3\x2\x2\x2"+
		"\x8A9\x8A8\x3\x2\x2\x2\x8AA\x8D3\x3\x2\x2\x2\x8AB\x8D3\a\x216\x2\x2\x8AC"+
		"\x8AD\a\x220\x2\x2\x8AD\x8D3\a\x1F2\x2\x2\x8AE\x8AF\a\x241\x2\x2\x8AF"+
		"\x8D3\a\x403\x2\x2\x8B0\x8D3\a\x286\x2\x2\x8B1\x8B2\a\x2BB\x2\x2\x8B2"+
		"\x8D3\t\x10\x2\x2\x8B3\x8B4\a\x319\x2\x2\x8B4\x8B5\a\x37C\x2\x2\x8B5\x8D3"+
		"\a\x63\x2\x2\x8B6\x8B7\a\x32F\x2\x2\x8B7\x8D3\a\x198\x2\x2\x8B8\x8D3\a"+
		"\x342\x2\x2\x8B9\x8D3\a\x346\x2\x2\x8BA\x8D3\a\x35A\x2\x2\x8BB\x8BC\a"+
		"\x364\x2\x2\x8BC\x8BD\a\x2E8\x2\x2\x8BD\x8D3\a\x209\x2\x2\x8BE\x8C4\a"+
		"\x37A\x2\x2\x8BF\x8C1\a\x42\x2\x2\x8C0\x8C2\a\x3A5\x2\x2\x8C1\x8C0\x3"+
		"\x2\x2\x2\x8C1\x8C2\x3\x2\x2\x2\x8C2\x8C5\x3\x2\x2\x2\x8C3\x8C5\a\x342"+
		"\x2\x2\x8C4\x8BF\x3\x2\x2\x2\x8C4\x8C3\x3\x2\x2\x2\x8C4\x8C5\x3\x2\x2"+
		"\x2\x8C5\x8D3\x3\x2\x2\x2\x8C6\x8D3\a\x37C\x2\x2\x8C7\x8C8\a\x3A7\x2\x2"+
		"\x8C8\x8D3\a\x216\x2\x2\x8C9\x8CA\a\x3D2\x2\x2\x8CA\x8D3\a\x1F2\x2\x2"+
		"\x8CB\x8CC\a\x3F8\x2\x2\x8CC\x8D3\t\x11\x2\x2\x8CD\x8D3\a\x403\x2\x2\x8CE"+
		"\x8D3\a\x41B\x2\x2\x8CF\x8D0\a\x443\x2\x2\x8D0\x8D1\a\x35A\x2\x2\x8D1"+
		"\x8D3\a\x9D\x2\x2\x8D2\x877\x3\x2\x2\x2\x8D2\x879\x3\x2\x2\x2\x8D2\x87A"+
		"\x3\x2\x2\x2\x8D2\x87C\x3\x2\x2\x2\x8D2\x87D\x3\x2\x2\x2\x8D2\x87F\x3"+
		"\x2\x2\x2\x8D2\x881\x3\x2\x2\x2\x8D2\x882\x3\x2\x2\x2\x8D2\x885\x3\x2"+
		"\x2\x2\x8D2\x886\x3\x2\x2\x2\x8D2\x887\x3\x2\x2\x2\x8D2\x889\x3\x2\x2"+
		"\x2\x8D2\x899\x3\x2\x2\x2\x8D2\x89A\x3\x2\x2\x2\x8D2\x89C\x3\x2\x2\x2"+
		"\x8D2\x89E\x3\x2\x2\x2\x8D2\x8AB\x3\x2\x2\x2\x8D2\x8AC\x3\x2\x2\x2\x8D2"+
		"\x8AE\x3\x2\x2\x2\x8D2\x8B0\x3\x2\x2\x2\x8D2\x8B1\x3\x2\x2\x2\x8D2\x8B3"+
		"\x3\x2\x2\x2\x8D2\x8B6\x3\x2\x2\x2\x8D2\x8B8\x3\x2\x2\x2\x8D2\x8B9\x3"+
		"\x2\x2\x2\x8D2\x8BA\x3\x2\x2\x2\x8D2\x8BB\x3\x2\x2\x2\x8D2\x8BE\x3\x2"+
		"\x2\x2\x8D2\x8C6\x3\x2\x2\x2\x8D2\x8C7\x3\x2\x2\x2\x8D2\x8C9\x3\x2\x2"+
		"\x2\x8D2\x8CB\x3\x2\x2\x2\x8D2\x8CD\x3\x2\x2\x2\x8D2\x8CE\x3\x2\x2\x2"+
		"\x8D2\x8CF\x3\x2\x2\x2\x8D3\x9F\x3\x2\x2\x2\x8D4\x8D5\a\x11E\x2\x2\x8D5"+
		"\x8D6\aS\x2\x2\x8D6\x8D7\a\x19B\x2\x2\x8D7\x8D8\x5\x4D2\x26A\x2\x8D8\xA1"+
		"\x3\x2\x2\x2\x8D9\x8DA\x5\xA4S\x2\x8DA\x8DB\x5\xA6T\x2\x8DB\xA3\x3\x2"+
		"\x2\x2\x8DC\x8DD\a%\x2\x2\x8DD\x8DE\aS\x2\x2\x8DE\x8DF\a\x19B\x2\x2\x8DF"+
		"\x8E0\x5\x4D2\x26A\x2\x8E0\xA5\x3\x2\x2\x2\x8E1\x8E2\a\x386\x2\x2\x8E2"+
		"\x8F2\a\x481\x2\x2\x8E3\x8E4\aJ\x2\x2\x8E4\x8E5\a\x46F\x2\x2\x8E5\x8F3"+
		"\t\x12\x2\x2\x8E6\x8E7\a\x156\x2\x2\x8E7\x8E8\a\x46F\x2\x2\x8E8\x8F3\a"+
		"\x469\x2\x2\x8E9\x8EA\a\x1A6\x2\x2\x8EA\x8EB\a\x46F\x2\x2\x8EB\x8F3\a"+
		"\x469\x2\x2\x8EC\x8ED\a\xF1\x2\x2\x8ED\x8EE\a\x46F\x2\x2\x8EE\x8F3\t\x13"+
		"\x2\x2\x8EF\x8F0\a\x32B\x2\x2\x8F0\x8F1\a\x46F\x2\x2\x8F1\x8F3\a\x469"+
		"\x2\x2\x8F2\x8E3\x3\x2\x2\x2\x8F2\x8E6\x3\x2\x2\x2\x8F2\x8E9\x3\x2\x2"+
		"\x2\x8F2\x8EC\x3\x2\x2\x2\x8F2\x8EF\x3\x2\x2\x2\x8F3\x8F4\x3\x2\x2\x2"+
		"\x8F4\xA45\a\x482\x2\x2\x8F5\x8F6\a\r\x2\x2\x8F6\x8F7\a\xDE\x2\x2\x8F7"+
		"\xA45\x5\x4D2\x26A\x2\x8F8\x8F9\a\x31C\x2\x2\x8F9\x8FA\a\xDE\x2\x2\x8FA"+
		"\xA45\x5\x4D2\x26A\x2\x8FB\x8FC\a\r\x2\x2\x8FC\x8FD\a\x324\x2\x2\x8FD"+
		"\x8FE\a\x294\x2\x2\x8FE\x8FF\a\x46B\x2\x2\x8FF\x900\a\x438\x2\x2\x900"+
		"\x904\a\x481\x2\x2\x901\x902\a\x132\x2\x2\x902\x903\a\x46F\x2\x2\x903"+
		"\x905\a\x46B\x2\x2\x904\x901\x3\x2\x2\x2\x904\x905\x3\x2\x2\x2\x905\x90C"+
		"\x3\x2\x2\x2\x906\x908\a\x485\x2\x2\x907\x906\x3\x2\x2\x2\x907\x908\x3"+
		"\x2\x2\x2\x908\x909\x3\x2\x2\x2\x909\x90A\aT\x2\x2\x90A\x90B\a\x46F\x2"+
		"\x2\x90B\x90D\t\x14\x2\x2\x90C\x907\x3\x2\x2\x2\x90C\x90D\x3\x2\x2\x2"+
		"\x90D\x914\x3\x2\x2\x2\x90E\x910\a\x485\x2\x2\x90F\x90E\x3\x2\x2\x2\x90F"+
		"\x910\x3\x2\x2\x2\x910\x911\x3\x2\x2\x2\x911\x912\a\x153\x2\x2\x912\x913"+
		"\a\x46F\x2\x2\x913\x915\t\x15\x2\x2\x914\x90F\x3\x2\x2\x2\x914\x915\x3"+
		"\x2\x2\x2\x915\x91C\x3\x2\x2\x2\x916\x918\a\x485\x2\x2\x917\x916\x3\x2"+
		"\x2\x2\x917\x918\x3\x2\x2\x2\x918\x919\x3\x2\x2\x2\x919\x91A\a\x36E\x2"+
		"\x2\x91A\x91B\a\x46F\x2\x2\x91B\x91D\t\x15\x2\x2\x91C\x917\x3\x2\x2\x2"+
		"\x91C\x91D\x3\x2\x2\x2\x91D\x924\x3\x2\x2\x2\x91E\x920\a\x485\x2\x2\x91F"+
		"\x91E\x3\x2\x2\x2\x91F\x920\x3\x2\x2\x2\x920\x921\x3\x2\x2\x2\x921\x922"+
		"\aY\x2\x2\x922\x923\a\x46F\x2\x2\x923\x925\a\x469\x2\x2\x924\x91F\x3\x2"+
		"\x2\x2\x924\x925\x3\x2\x2\x2\x925\x92F\x3\x2\x2\x2\x926\x928\a\x485\x2"+
		"\x2\x927\x926\x3\x2\x2\x2\x927\x928\x3\x2\x2\x2\x928\x929\x3\x2\x2\x2"+
		"\x929\x92A\a\x2DA\x2\x2\x92A\x92B\a\x481\x2\x2\x92B\x92C\a\x1A\x2\x2\x92C"+
		"\x92D\a\x46F\x2\x2\x92D\x92E\t\x16\x2\x2\x92E\x930\a\x482\x2\x2\x92F\x927"+
		"\x3\x2\x2\x2\x92F\x930\x3\x2\x2\x2\x930\x93A\x3\x2\x2\x2\x931\x933\a\x485"+
		"\x2\x2\x932\x931\x3\x2\x2\x2\x932\x933\x3\x2\x2\x2\x933\x934\x3\x2\x2"+
		"\x2\x934\x935\a\x367\x2\x2\x935\x936\a\x481\x2\x2\x936\x937\a\x1A\x2\x2"+
		"\x937\x938\a\x46F\x2\x2\x938\x939\a\x30A\x2\x2\x939\x93B\a\x482\x2\x2"+
		"\x93A\x932\x3\x2\x2\x2\x93A\x93B\x3\x2\x2\x2\x93B\x93C\x3\x2\x2\x2\x93C"+
		"\xA45\a\x482\x2\x2\x93D\x93E\a\x367\x2\x2\x93E\x947\a\x481\x2\x2\x93F"+
		"\x940\a\x1A\x2\x2\x940\x941\a\x46F\x2\x2\x941\x948\t\x17\x2\x2\x942\x943"+
		"\a\x30B\x2\x2\x943\x944\a\x46F\x2\x2\x944\x945\a\x481\x2\x2\x945\x946"+
		"\a\x46B\x2\x2\x946\x948\a\x482\x2\x2\x947\x93F\x3\x2\x2\x2\x947\x942\x3"+
		"\x2\x2\x2\x948\xA45\x3\x2\x2\x2\x949\x94A\a\x2DA\x2\x2\x94A\x961\a\x481"+
		"\x2\x2\x94B\x94C\a\x1A\x2\x2\x94C\x94D\a\x46F\x2\x2\x94D\x962\t\x17\x2"+
		"\x2\x94E\x94F\a\x30B\x2\x2\x94F\x950\a\x46F\x2\x2\x950\x95B\a\x481\x2"+
		"\x2\x951\x953\a\x485\x2\x2\x952\x951\x3\x2\x2\x2\x952\x953\x3\x2\x2\x2"+
		"\x953\x954\x3\x2\x2\x2\x954\x956\a\x46B\x2\x2\x955\x952\x3\x2\x2\x2\x956"+
		"\x959\x3\x2\x2\x2\x957\x955\x3\x2\x2\x2\x957\x958\x3\x2\x2\x2\x958\x95C"+
		"\x3\x2\x2\x2\x959\x957\x3\x2\x2\x2\x95A\x95C\a\x26B\x2\x2\x95B\x957\x3"+
		"\x2\x2\x2\x95B\x95A\x3\x2\x2\x2\x95C\x95D\x3\x2\x2\x2\x95D\x962\a\x482"+
		"\x2\x2\x95E\x95F\a\x384\x2\x2\x95F\x960\a\x46F\x2\x2\x960\x962\a\x469"+
		"\x2\x2\x961\x94B\x3\x2\x2\x2\x961\x94E\x3\x2\x2\x2\x961\x95E\x3\x2\x2"+
		"\x2\x962\xA45\x3\x2\x2\x2\x963\x964\a\x24F\x2\x2\x964\x965\a\x324\x2\x2"+
		"\x965\x966\a\x294\x2\x2\x966\x9A0\a\x46B\x2\x2\x967\x968\a\x438\x2\x2"+
		"\x968\x978\a\x481\x2\x2\x969\x96A\a\x132\x2\x2\x96A\x96B\a\x46F\x2\x2"+
		"\x96B\x979\a\x46B\x2\x2\x96C\x96D\aT\x2\x2\x96D\x96E\a\x46F\x2\x2\x96E"+
		"\x979\t\x14\x2\x2\x96F\x970\a\x153\x2\x2\x970\x971\a\x46F\x2\x2\x971\x979"+
		"\t\x15\x2\x2\x972\x973\a\x36E\x2\x2\x973\x974\a\x46F\x2\x2\x974\x979\t"+
		"\x15\x2\x2\x975\x976\aY\x2\x2\x976\x977\a\x46F\x2\x2\x977\x979\a\x469"+
		"\x2\x2\x978\x969\x3\x2\x2\x2\x978\x96C\x3\x2\x2\x2\x978\x96F\x3\x2\x2"+
		"\x2\x978\x972\x3\x2\x2\x2\x978\x975\x3\x2\x2\x2\x979\x9A1\x3\x2\x2\x2"+
		"\x97A\x97B\a\x367\x2\x2\x97B\x984\a\x481\x2\x2\x97C\x97D\a\x1A\x2\x2\x97D"+
		"\x97E\a\x46F\x2\x2\x97E\x985\t\x17\x2\x2\x97F\x980\a\x30B\x2\x2\x980\x981"+
		"\a\x46F\x2\x2\x981\x982\a\x481\x2\x2\x982\x983\a\x46B\x2\x2\x983\x985"+
		"\a\x482\x2\x2\x984\x97C\x3\x2\x2\x2\x984\x97F\x3\x2\x2\x2\x985\x9A1\x3"+
		"\x2\x2\x2\x986\x987\a\x2DA\x2\x2\x987\x99E\a\x481\x2\x2\x988\x989\a\x1A"+
		"\x2\x2\x989\x98A\a\x46F\x2\x2\x98A\x99F\t\x17\x2\x2\x98B\x98C\a\x30B\x2"+
		"\x2\x98C\x98D\a\x46F\x2\x2\x98D\x998\a\x481\x2\x2\x98E\x990\a\x485\x2"+
		"\x2\x98F\x98E\x3\x2\x2\x2\x98F\x990\x3\x2\x2\x2\x990\x991\x3\x2\x2\x2"+
		"\x991\x993\a\x46B\x2\x2\x992\x98F\x3\x2\x2\x2\x993\x996\x3\x2\x2\x2\x994"+
		"\x992\x3\x2\x2\x2\x994\x995\x3\x2\x2\x2\x995\x999\x3\x2\x2\x2\x996\x994"+
		"\x3\x2\x2\x2\x997\x999\a\x26B\x2\x2\x998\x994\x3\x2\x2\x2\x998\x997\x3"+
		"\x2\x2\x2\x999\x99A\x3\x2\x2\x2\x99A\x99F\a\x482\x2\x2\x99B\x99C\a\x384"+
		"\x2\x2\x99C\x99D\a\x46F\x2\x2\x99D\x99F\a\x469\x2\x2\x99E\x988\x3\x2\x2"+
		"\x2\x99E\x98B\x3\x2\x2\x2\x99E\x99B\x3\x2\x2\x2\x99F\x9A1\x3\x2\x2\x2"+
		"\x9A0\x967\x3\x2\x2\x2\x9A0\x97A\x3\x2\x2\x2\x9A0\x986\x3\x2\x2\x2\x9A1"+
		"\x9A2\x3\x2\x2\x2\x9A2\xA45\a\x482\x2\x2\x9A3\x9A4\a\x31C\x2\x2\x9A4\x9A5"+
		"\a\x324\x2\x2\x9A5\x9A6\a\x294\x2\x2\x9A6\xA45\a\x46B\x2\x2\x9A7\xA45"+
		"\a\x1E4\x2\x2\x9A8\x9A9\a\x1E4\x2\x2\x9A9\x9AA\aS\x2\x2\x9AA\x9AB\a\x19B"+
		"\x2\x2\x9AB\x9C2\a\x294\x2\x2\x9AC\x9AE\a\x485\x2\x2\x9AD\x9AC\x3\x2\x2"+
		"\x2\x9AD\x9AE\x3\x2\x2\x2\x9AE\x9AF\x3\x2\x2\x2\x9AF\x9B0\a\x46B\x2\x2"+
		"\x9B0\x9B1\a\x438\x2\x2\x9B1\x9B2\a\x481\x2\x2\x9B2\x9B3\a\x20D\x2\x2"+
		"\x9B3\x9B4\a\x46F\x2\x2\x9B4\x9B5\a\x46B\x2\x2\x9B5\x9B6\a\x485\x2\x2"+
		"\x9B6\x9B7\aT\x2\x2\x9B7\x9B8\a\x46F\x2\x2\x9B8\x9B9\t\x14\x2\x2\x9B9"+
		"\x9BA\a\x485\x2\x2\x9BA\x9BB\a\x153\x2\x2\x9BB\x9BC\a\x46F\x2\x2\x9BC"+
		"\x9BD\a\x21C\x2\x2\x9BD\x9BE\a\x485\x2\x2\x9BE\x9BF\a\x36E\x2\x2\x9BF"+
		"\x9C0\a\x46F\x2\x2\x9C0\x9C1\t\x15\x2\x2\x9C1\x9C3\a\x482\x2\x2\x9C2\x9AD"+
		"\x3\x2\x2\x2\x9C3\x9C4\x3\x2\x2\x2\x9C4\x9C2\x3\x2\x2\x2\x9C4\x9C5\x3"+
		"\x2\x2\x2\x9C5\xA45\x3\x2\x2\x2\x9C6\x9C7\a\x24F\x2\x2\x9C7\x9C8\aS\x2"+
		"\x2\x9C8\x9C9\a\x19B\x2\x2\x9C9\x9EC\a\x294\x2\x2\x9CA\x9CC\a\x485\x2"+
		"\x2\x9CB\x9CA\x3\x2\x2\x2\x9CB\x9CC\x3\x2\x2\x2\x9CC\x9CD\x3\x2\x2\x2"+
		"\x9CD\x9CE\a\x46B\x2\x2\x9CE\x9CF\a\x438\x2\x2\x9CF\x9D0\a\x481\x2\x2"+
		"\x9D0\x9D1\a\x20D\x2\x2\x9D1\x9D2\a\x46F\x2\x2\x9D2\x9D9\a\x46B\x2\x2"+
		"\x9D3\x9D5\a\x485\x2\x2\x9D4\x9D3\x3\x2\x2\x2\x9D4\x9D5\x3\x2\x2\x2\x9D5"+
		"\x9D6\x3\x2\x2\x2\x9D6\x9D7\aT\x2\x2\x9D7\x9D8\a\x46F\x2\x2\x9D8\x9DA"+
		"\t\x14\x2\x2\x9D9\x9D4\x3\x2\x2\x2\x9D9\x9DA\x3\x2\x2\x2\x9DA\x9E1\x3"+
		"\x2\x2\x2\x9DB\x9DD\a\x485\x2\x2\x9DC\x9DB\x3\x2\x2\x2\x9DC\x9DD\x3\x2"+
		"\x2\x2\x9DD\x9DE\x3\x2\x2\x2\x9DE\x9DF\a\x153\x2\x2\x9DF\x9E0\a\x46F\x2"+
		"\x2\x9E0\x9E2\a\x21C\x2\x2\x9E1\x9DC\x3\x2\x2\x2\x9E1\x9E2\x3\x2\x2\x2"+
		"\x9E2\x9E9\x3\x2\x2\x2\x9E3\x9E5\a\x485\x2\x2\x9E4\x9E3\x3\x2\x2\x2\x9E4"+
		"\x9E5\x3\x2\x2\x2\x9E5\x9E6\x3\x2\x2\x2\x9E6\x9E7\a\x36E\x2\x2\x9E7\x9E8"+
		"\a\x46F\x2\x2\x9E8\x9EA\t\x15\x2\x2\x9E9\x9E4\x3\x2\x2\x2\x9E9\x9EA\x3"+
		"\x2\x2\x2\x9EA\x9EB\x3\x2\x2\x2\x9EB\x9ED\a\x482\x2\x2\x9EC\x9CB\x3\x2"+
		"\x2\x2\x9ED\x9EE\x3\x2\x2\x2\x9EE\x9EC\x3\x2\x2\x2\x9EE\x9EF\x3\x2\x2"+
		"\x2\x9EF\xA45\x3\x2\x2\x2\x9F0\x9F1\a\x199\x2\x2\x9F1\x9F2\a\xCA\x2\x2"+
		"\x9F2\x9F3\a\x30\x2\x2\x9F3\xA45\a\xDE\x2\x2\x9F4\x9F5\a\x105\x2\x2\x9F5"+
		"\x9F6\a\xCA\x2\x2\x9F6\x9F7\a\x30\x2\x2\x9F7\xA45\a\xDE\x2\x2\x9F8\xA45"+
		"\a\x152\x2\x2\x9F9\xA45\a\x178\x2\x2\x9FA\x9FB\a\r\x2\x2\x9FB\x9FC\a\x20A"+
		"\x2\x2\x9FC\x9FD\a\x46B\x2\x2\x9FD\xA21\a\x481\x2\x2\x9FE\x9FF\a\x438"+
		"\x2\x2\x9FF\xA00\a\x10C\x2\x2\xA00\xA01\a\x294\x2\x2\xA01\xA02\a\x481"+
		"\x2\x2\xA02\xA03\x5\xA8U\x2\xA03\xA04\x5\xA8U\x2\xA04\xA05\a\x482\x2\x2"+
		"\xA05\xA22\x3\x2\x2\x2\xA06\xA07\a\x438\x2\x2\xA07\xA08\a\x1D9\x2\x2\xA08"+
		"\xA16\a\x481\x2\x2\xA09\xA0B\a\x485\x2\x2\xA0A\xA09\x3\x2\x2\x2\xA0A\xA0B"+
		"\x3\x2\x2\x2\xA0B\xA0C\x3\x2\x2\x2\xA0C\xA12\a\x481\x2\x2\xA0D\xA0E\x5"+
		"\xA8U\x2\xA0E\xA0F\a\x485\x2\x2\xA0F\xA10\x5\xA8U\x2\xA10\xA13\x3\x2\x2"+
		"\x2\xA11\xA13\x5\xAAV\x2\xA12\xA0D\x3\x2\x2\x2\xA12\xA11\x3\x2\x2\x2\xA13"+
		"\xA14\x3\x2\x2\x2\xA14\xA15\a\x482\x2\x2\xA15\xA17\x3\x2\x2\x2\xA16\xA0A"+
		"\x3\x2\x2\x2\xA17\xA18\x3\x2\x2\x2\xA18\xA16\x3\x2\x2\x2\xA18\xA19\x3"+
		"\x2\x2\x2\xA19\xA1A\x3\x2\x2\x2\xA1A\xA1F\a\x482\x2\x2\xA1B\xA1C\a\x485"+
		"\x2\x2\xA1C\xA1D\a\x2D5\x2\x2\xA1D\xA1E\a\x46F\x2\x2\xA1E\xA20\a\x469"+
		"\x2\x2\xA1F\xA1B\x3\x2\x2\x2\xA1F\xA20\x3\x2\x2\x2\xA20\xA22\x3\x2\x2"+
		"\x2\xA21\x9FE\x3\x2\x2\x2\xA21\xA06\x3\x2\x2\x2\xA22\xA23\x3\x2\x2\x2"+
		"\xA23\xA24\a\x482\x2\x2\xA24\xA45\x3\x2\x2\x2\xA25\xA26\a\x24F\x2\x2\xA26"+
		"\xA35\a\x20A\x2\x2\xA27\xA28\a\r\x2\x2\xA28\xA29\a\x1D9\x2\x2\xA29\xA2E"+
		"\a\x481\x2\x2\xA2A\xA2B\x5\xA8U\x2\xA2B\xA2C\x5\xA8U\x2\xA2C\xA2F\x3\x2"+
		"\x2\x2\xA2D\xA2F\x5\xAAV\x2\xA2E\xA2A\x3\x2\x2\x2\xA2E\xA2D\x3\x2\x2\x2"+
		"\xA2F\xA30\x3\x2\x2\x2\xA30\xA31\a\x482\x2\x2\xA31\xA36\x3\x2\x2\x2\xA32"+
		"\xA33\a\x2D5\x2\x2\xA33\xA34\a\x46F\x2\x2\xA34\xA36\a\x469\x2\x2\xA35"+
		"\xA27\x3\x2\x2\x2\xA35\xA32\x3\x2\x2\x2\xA36\xA45\x3\x2\x2\x2\xA37\xA38"+
		"\a\x332\x2\x2\xA38\xA39\a\x20A\x2\x2\xA39\xA45\a\x46B\x2\x2\xA3A\xA3B"+
		"\a\x31C\x2\x2\xA3B\xA3C\a\x20A\x2\x2\xA3C\xA45\a\x46B\x2\x2\xA3D\xA45"+
		"\a\x28F\x2\x2\xA3E\xA3F\a\x438\x2\x2\xA3F\xA40\a\x481\x2\x2\xA40\xA41"+
		"\a\x121\x2\x2\xA41\xA42\a\x46F\x2\x2\xA42\xA43\a\x2CC\x2\x2\xA43\xA45"+
		"\a\x482\x2\x2\xA44\x8E1\x3\x2\x2\x2\xA44\x8F5\x3\x2\x2\x2\xA44\x8F8\x3"+
		"\x2\x2\x2\xA44\x8FB\x3\x2\x2\x2\xA44\x93D\x3\x2\x2\x2\xA44\x949\x3\x2"+
		"\x2\x2\xA44\x963\x3\x2\x2\x2\xA44\x9A3\x3\x2\x2\x2\xA44\x9A7\x3\x2\x2"+
		"\x2\xA44\x9A8\x3\x2\x2\x2\xA44\x9C6\x3\x2\x2\x2\xA44\x9F0\x3\x2\x2\x2"+
		"\xA44\x9F4\x3\x2\x2\x2\xA44\x9F8\x3\x2\x2\x2\xA44\x9F9\x3\x2\x2\x2\xA44"+
		"\x9FA\x3\x2\x2\x2\xA44\xA25\x3\x2\x2\x2\xA44\xA37\x3\x2\x2\x2\xA44\xA3A"+
		"\x3\x2\x2\x2\xA44\xA3D\x3\x2\x2\x2\xA44\xA3E\x3\x2\x2\x2\xA45\xA7\x3\x2"+
		"\x2\x2\xA46\xA47\a\x46B\x2\x2\xA47\xA9\x3\x2\x2\x2\xA48\xA49\a\x46B\x2"+
		"\x2\xA49\xAB\x3\x2\x2\x2\xA4A\xA4B\t\x18\x2\x2\xA4B\xA4C\aj\x2\x2\xA4C"+
		"\xA4D\a\x2DD\x2\x2\xA4D\xA4E\x5\x4D2\x26A\x2\xA4E\xA4F\a\x172\x2\x2\xA4F"+
		"\xA50\a\xC2\x2\x2\xA50\xA51\a\x386\x2\x2\xA51\xA5B\a\x481\x2\x2\xA52\xA53"+
		"\a\xC0\x2\x2\xA53\xA56\a\x46F\x2\x2\xA54\xA57\x5\x4D2\x26A\x2\xA55\xA57"+
		"\a\x30\x2\x2\xA56\xA54\x3\x2\x2\x2\xA56\xA55\x3\x2\x2\x2\xA57\xA59\x3"+
		"\x2\x2\x2\xA58\xA5A\a\x485\x2\x2\xA59\xA58\x3\x2\x2\x2\xA59\xA5A\x3\x2"+
		"\x2\x2\xA5A\xA5C\x3\x2\x2\x2\xA5B\xA52\x3\x2\x2\x2\xA5B\xA5C\x3\x2\x2"+
		"\x2\xA5C\xA69\x3\x2\x2\x2\xA5D\xA5E\a\x211\x2\x2\xA5E\xA64\a\x46F\x2\x2"+
		"\xA5F\xA61\a\x11D\x2\x2\xA60\xA5F\x3\x2\x2\x2\xA60\xA61\x3\x2\x2\x2\xA61"+
		"\xA62\x3\x2\x2\x2\xA62\xA65\x5\x4D2\x26A\x2\xA63\xA65\a\x30\x2\x2\xA64"+
		"\xA60\x3\x2\x2\x2\xA64\xA63\x3\x2\x2\x2\xA65\xA67\x3\x2\x2\x2\xA66\xA68"+
		"\a\x485\x2\x2\xA67\xA66\x3\x2\x2\x2\xA67\xA68\x3\x2\x2\x2\xA68\xA6A\x3"+
		"\x2\x2\x2\xA69\xA5D\x3\x2\x2\x2\xA69\xA6A\x3\x2\x2\x2\xA6A\xA74\x3\x2"+
		"\x2\x2\xA6B\xA6C\a\x31B\x2\x2\xA6C\xA6F\a\x46F\x2\x2\xA6D\xA70\a\x46B"+
		"\x2\x2\xA6E\xA70\a\x30\x2\x2\xA6F\xA6D\x3\x2\x2\x2\xA6F\xA6E\x3\x2\x2"+
		"\x2\xA70\xA72\x3\x2\x2\x2\xA71\xA73\a\x485\x2\x2\xA72\xA71\x3\x2\x2\x2"+
		"\xA72\xA73\x3\x2\x2\x2\xA73\xA75\x3\x2\x2\x2\xA74\xA6B\x3\x2\x2\x2\xA74"+
		"\xA75\x3\x2\x2\x2\xA75\xA7C\x3\x2\x2\x2\xA76\xA77\a\x2DE\x2\x2\xA77\xA7A"+
		"\a\x46F\x2\x2\xA78\xA7B\a\x469\x2\x2\xA79\xA7B\a\xF9\x2\x2\xA7A\xA78\x3"+
		"\x2\x2\x2\xA7A\xA79\x3\x2\x2\x2\xA7B\xA7D\x3\x2\x2\x2\xA7C\xA76\x3\x2"+
		"\x2\x2\xA7C\xA7D\x3\x2\x2\x2\xA7D\xA7E\x3\x2\x2\x2\xA7E\xA7F\a\x482\x2"+
		"\x2\xA7F\xAD\x3\x2\x2\x2\xA80\xA81\a\x11E\x2\x2\xA81\xA82\aj\x2\x2\xA82"+
		"\xA83\a\x2DD\x2\x2\xA83\xA84\x5\x4D2\x26A\x2\xA84\xAF\x3\x2\x2\x2\xA85"+
		"\xA86\a%\x2\x2\xA86\xA87\a}\x2\x2\xA87\xAAF\x5\x4D2\x26A\x2\xA88\xA89"+
		"\a\x31C\x2\x2\xA89\xAB0\a\x2E0\x2\x2\xA8A\xA8B\a\x438\x2\x2\xA8B\xA8C"+
		"\a\x2DF\x2\x2\xA8C\xA8D\a\x1F2\x2\x2\xA8D\xAA4\a\x481\x2\x2\xA8E\xA8F"+
		"\a\x15C\x2\x2\xA8F\xA90\a\x46F\x2\x2\xA90\xA92\a\x46B\x2\x2\xA91\xA93"+
		"\a\x485\x2\x2\xA92\xA91\x3\x2\x2\x2\xA92\xA93\x3\x2\x2\x2\xA93\xAA5\x3"+
		"\x2\x2\x2\xA94\xA95\a\xF8\x2\x2\xA95\xA96\aq\x2\x2\xA96\xA97\a\x2BE\x2"+
		"\x2\xA97\xA98\a\x46F\x2\x2\xA98\xA9A\a\x46B\x2\x2\xA99\xA9B\a\x485\x2"+
		"\x2\xA9A\xA99\x3\x2\x2\x2\xA9A\xA9B\x3\x2\x2\x2\xA9B\xAA5\x3\x2\x2\x2"+
		"\xA9C\xA9D\a\x12E\x2\x2\xA9D\xA9E\aq\x2\x2\xA9E\xA9F\a\x2BE\x2\x2\xA9F"+
		"\xAA0\a\x46F\x2\x2\xAA0\xAA2\a\x46B\x2\x2\xAA1\xAA3\a\x485\x2\x2\xAA2"+
		"\xAA1\x3\x2\x2\x2\xAA2\xAA3\x3\x2\x2\x2\xAA3\xAA5\x3\x2\x2\x2\xAA4\xA8E"+
		"\x3\x2\x2\x2\xAA4\xA94\x3\x2\x2\x2\xAA4\xA9C\x3\x2\x2\x2\xAA5\xAA6\x3"+
		"\x2\x2\x2\xAA6\xAA4\x3\x2\x2\x2\xAA6\xAA7\x3\x2\x2\x2\xAA7\xAA8\x3\x2"+
		"\x2\x2\xAA8\xAB0\a\x482\x2\x2\xAA9\xAAA\a\x438\x2\x2\xAAA\xAAB\a\f\x2"+
		"\x2\xAAB\xAAC\a\x172\x2\x2\xAAC\xAAD\a]\x2\x2\xAAD\xAAE\a\x46F\x2\x2\xAAE"+
		"\xAB0\t\x13\x2\x2\xAAF\xA88\x3\x2\x2\x2\xAAF\xA8A\x3\x2\x2\x2\xAAF\xAA9"+
		"\x3\x2\x2\x2\xAB0\xB1\x3\x2\x2\x2\xAB1\xAB2\a%\x2\x2\xAB2\xAB3\a\x9E\x2"+
		"\x2\xAB3\xAB4\a\x12E\x2\x2\xAB4\xAB5\a\x1F2\x2\x2\xAB5\xAB6\x5\x4D2\x26A"+
		"\x2\xAB6\xAB7\t\x19\x2\x2\xAB7\xAB8\a\x421\x2\x2\xAB8\xAB9\a\x481\x2\x2"+
		"\xAB9\xABA\a\xA4\x2\x2\xABA\xABB\a\x46F\x2\x2\xABB\xAC4\x5\x4D2\x26A\x2"+
		"\xABC\xABD\a\x485\x2\x2\xABD\xABE\a\x17\x2\x2\xABE\xABF\a\x46F\x2\x2\xABF"+
		"\xAC0\a\x46B\x2\x2\xAC0\xAC1\a\x485\x2\x2\xAC1\xAC2\a\x12D\x2\x2\xAC2"+
		"\xAC3\a\x46F\x2\x2\xAC3\xAC5\a\x46C\x2\x2\xAC4\xABC\x3\x2\x2\x2\xAC4\xAC5"+
		"\x3\x2\x2\x2\xAC5\xAC6\x3\x2\x2\x2\xAC6\xAC7\a\x482\x2\x2\xAC7\xB3\x3"+
		"\x2\x2\x2\xAC8\xAC9\a\xCA\x2\x2\xAC9\xACA\a\x9E\x2\x2\xACA\xACB\a\x12E"+
		"\x2\x2\xACB\xACC\a\x1F2\x2\x2\xACC\xACD\x5\x4D2\x26A\x2\xACD\xACE\a\x438"+
		"\x2\x2\xACE\xAE2\a\x422\x2\x2\xACF\xAD1\a\x481\x2\x2\xAD0\xAD2\a\x485"+
		"\x2\x2\xAD1\xAD0\x3\x2\x2\x2\xAD1\xAD2\x3\x2\x2\x2\xAD2\xAD3\x3\x2\x2"+
		"\x2\xAD3\xAD4\a\xA4\x2\x2\xAD4\xAD5\a\x46F\x2\x2\xAD5\xAD6\x5\x4D2\x26A"+
		"\x2\xAD6\xAD7\a\x485\x2\x2\xAD7\xAD8\a\x17\x2\x2\xAD8\xAD9\a\x46F\x2\x2"+
		"\xAD9\xADA\a\x46B\x2\x2\xADA\xADB\a\x485\x2\x2\xADB\xADC\a\x12D\x2\x2"+
		"\xADC\xADD\a\x46F\x2\x2\xADD\xADE\a\x46C\x2\x2\xADE\xAE0\a\x482\x2\x2"+
		"\xADF\xAE1\a\x485\x2\x2\xAE0\xADF\x3\x2\x2\x2\xAE0\xAE1\x3\x2\x2\x2\xAE1"+
		"\xAE3\x3\x2\x2\x2\xAE2\xACF\x3\x2\x2\x2\xAE3\xAE4\x3\x2\x2\x2\xAE4\xAE2"+
		"\x3\x2\x2\x2\xAE4\xAE5\x3\x2\x2\x2\xAE5\xB5\x3\x2\x2\x2\xAE6\xAE7\a\x11E"+
		"\x2\x2\xAE7\xAE8\a}\x2\x2\xAE8\xAE9\x5\x4D2\x26A\x2\xAE9\xB7\x3\x2\x2"+
		"\x2\xAEA\xAEB\a\x11E\x2\x2\xAEB\xAEC\a\x9E\x2\x2\xAEC\xAED\a\x12E\x2\x2"+
		"\xAED\xAEE\a\x1F2\x2\x2\xAEE\xAEF\x5\x4D2\x26A\x2\xAEF\xB9\x3\x2\x2\x2"+
		"\xAF0\xAF1\a\x11E\x2\x2\xAF1\xAF2\a\x9E\x2\x2\xAF2\xAF3\a\x220\x2\x2\xAF3"+
		"\xAF4\a\x1F2\x2\x2\xAF4\xAF5\x5\x4D2\x26A\x2\xAF5\xBB\x3\x2\x2\x2\xAF6"+
		"\xAF7\a\x11E\x2\x2\xAF7\xAF8\a\xBF\x2\x2\xAF8\xAF9\x5\x4D2\x26A\x2\xAF9"+
		"\xBD\x3\x2\x2\x2\xAFA\xAFB\a\x11E\x2\x2\xAFB\xAFC\a\xCD\x2\x2\xAFC\xAFD"+
		"\x5\x4D2\x26A\x2\xAFD\xBF\x3\x2\x2\x2\xAFE\xAFF\a\x11E\x2\x2\xAFF\xB00"+
		"\a\xCF\x2\x2\xB00\xB01\a\x2E9\x2\x2\xB01\xB02\x5\x4D2\x26A\x2\xB02\xC1"+
		"\x3\x2\x2\x2\xB03\xB04\a\x11E\x2\x2\xB04\xB07\a\xDE\x2\x2\xB05\xB06\a"+
		"\x1B7\x2\x2\xB06\xB08\a\x147\x2\x2\xB07\xB05\x3\x2\x2\x2\xB07\xB08\x3"+
		"\x2\x2\x2\xB08\xB0D\x3\x2\x2\x2\xB09\xB0B\a\x485\x2\x2\xB0A\xB09\x3\x2"+
		"\x2\x2\xB0A\xB0B\x3\x2\x2\x2\xB0B\xB0C\x3\x2\x2\x2\xB0C\xB0E\x5\x4D2\x26A"+
		"\x2\xB0D\xB0A\x3\x2\x2\x2\xB0E\xB0F\x3\x2\x2\x2\xB0F\xB0D\x3\x2\x2\x2"+
		"\xB0F\xB10\x3\x2\x2\x2\xB10\xC3\x3\x2\x2\x2\xB11\xB12\a\x11E\x2\x2\xB12"+
		"\xB13\a\xDE\x2\x2\xB13\xB14\a\x42\x2\x2\xB14\xB15\a\x3A5\x2\x2\xB15\xB16"+
		"\x5\x4D2\x26A\x2\xB16\xC5\x3\x2\x2\x2\xB17\xB18\a\x11E\x2\x2\xB18\xB19"+
		"\a\xDE\x2\x2\xB19\xB1A\a\x12E\x2\x2\xB1A\xB1B\a\x1F2\x2\x2\xB1B\xC7\x3"+
		"\x2\x2\x2\xB1C\xB1D\a\x11E\x2\x2\xB1D\xB1E\a\xDE\x2\x2\xB1E\xB1F\a\x35F"+
		"\x2\x2\xB1F\xB20\a\xCD\x2\x2\xB20\xB21\x5\x4D2\x26A\x2\xB21\xC9\x3\x2"+
		"\x2\x2\xB22\xB23\a\x11E\x2\x2\xB23\xB26\a\xF9\x2\x2\xB24\xB25\a\x1B7\x2"+
		"\x2\xB25\xB27\a\x147\x2\x2\xB26\xB24\x3\x2\x2\x2\xB26\xB27\x3\x2\x2\x2"+
		"\xB27\xB29\x3\x2\x2\x2\xB28\xB2A\a\x485\x2\x2\xB29\xB28\x3\x2\x2\x2\xB29"+
		"\xB2A\x3\x2\x2\x2\xB2A\xB2E\x3\x2\x2\x2\xB2B\xB2C\x5\x4D2\x26A\x2\xB2C"+
		"\xB2D\a\x47C\x2\x2\xB2D\xB2F\x3\x2\x2\x2\xB2E\xB2B\x3\x2\x2\x2\xB2E\xB2F"+
		"\x3\x2\x2\x2\xB2F\xB30\x3\x2\x2\x2\xB30\xB31\x5\x4D2\x26A\x2\xB31\xCB"+
		"\x3\x2\x2\x2\xB32\xB33\a\x11E\x2\x2\xB33\xB34\a\x131\x2\x2\xB34\xB35\x5"+
		"\x4D2\x26A\x2\xB35\xCD\x3\x2\x2\x2\xB36\xB37\a\x11E\x2\x2\xB37\xB38\a"+
		"\x150\x2\x2\xB38\xB39\a\xDD\x2\x2\xB39\xB3A\a\x3A1\x2\x2\xB3A\xB3B\x5"+
		"\x4D2\x26A\x2\xB3B\xCF\x3\x2\x2\x2\xB3C\xB3D\a\x11E\x2\x2\xB3D\xB3E\a"+
		"\x150\x2\x2\xB3E\xB3F\a\x15C\x2\x2\xB3F\xB40\a\x17B\x2\x2\xB40\xB41\x5"+
		"\x4D2\x26A\x2\xB41\xD1\x3\x2\x2\x2\xB42\xB43\a\x11E\x2\x2\xB43\xB44\a"+
		"\x150\x2\x2\xB44\xB45\a\x203\x2\x2\xB45\xB48\x5\x4D2\x26A\x2\xB46\xB47"+
		"\a\x46\x2\x2\xB47\xB49\x5\x4D2\x26A\x2\xB48\xB46\x3\x2\x2\x2\xB48\xB49"+
		"\x3\x2\x2\x2\xB49\xD3\x3\x2\x2\x2\xB4A\xB4B\a\x11E\x2\x2\xB4B\xB4C\a\x150"+
		"\x2\x2\xB4C\xB4D\a\x32F\x2\x2\xB4D\xB4E\a\x2D4\x2\x2\xB4E\xB4F\x5\x4D2"+
		"\x26A\x2\xB4F\xD5\x3\x2\x2\x2\xB50\xB51\a\x11E\x2\x2\xB51\xB52\a\x150"+
		"\x2\x2\xB52\xB56\a\x3D7\x2\x2\xB53\xB54\x5\x4D2\x26A\x2\xB54\xB55\a\x47C"+
		"\x2\x2\xB55\xB57\x3\x2\x2\x2\xB56\xB53\x3\x2\x2\x2\xB56\xB57\x3\x2\x2"+
		"\x2\xB57\xB5B\x3\x2\x2\x2\xB58\xB59\x5\x4D2\x26A\x2\xB59\xB5A\a\x47C\x2"+
		"\x2\xB5A\xB5C\x3\x2\x2\x2\xB5B\xB58\x3\x2\x2\x2\xB5B\xB5C\x3\x2\x2\x2"+
		"\xB5C\xB5D\x3\x2\x2\x2\xB5D\xB5E\x5\x4D2\x26A\x2\xB5E\xD7\x3\x2\x2\x2"+
		"\xB5F\xB60\a\x11E\x2\x2\xB60\xB61\a\x13E\x2\x2\xB61\xB66\a\x272\x2\x2"+
		"\xB62\xB64\a\x485\x2\x2\xB63\xB62\x3\x2\x2\x2\xB63\xB64\x3\x2\x2\x2\xB64"+
		"\xB65\x3\x2\x2\x2\xB65\xB67\x5\x4D2\x26A\x2\xB66\xB63\x3\x2\x2\x2\xB67"+
		"\xB68\x3\x2\x2\x2\xB68\xB66\x3\x2\x2\x2\xB68\xB69\x3\x2\x2\x2\xB69\xB6A"+
		"\x3\x2\x2\x2\xB6A\xB6F\a\x294\x2\x2\xB6B\xB70\a\x37A\x2\x2\xB6C\xB70\a"+
		"\xDE\x2\x2\xB6D\xB6E\a\x2F4\x2\x2\xB6E\xB70\x5\x4D2\x26A\x2\xB6F\xB6B"+
		"\x3\x2\x2\x2\xB6F\xB6C\x3\x2\x2\x2\xB6F\xB6D\x3\x2\x2\x2\xB70\xD9\x3\x2"+
		"\x2\x2\xB71\xB72\a\x11E\x2\x2\xB72\xB73\a\x13E\x2\x2\xB73\xB74\a\x381"+
		"\x2\x2\xB74\xB75\x5\x4D2\x26A\x2\xB75\xB76\a\x294\x2\x2\xB76\xB77\a\x37A"+
		"\x2\x2\xB77\xDB\x3\x2\x2\x2\xB78\xB79\a\x11E\x2\x2\xB79\xB7A\a\x184\x2"+
		"\x2\xB7A\xB7B\ay\x2\x2\xB7B\xB7C\x5\x4D2\x26A\x2\xB7C\xDD\x3\x2\x2\x2"+
		"\xB7D\xB7E\a\x11E\x2\x2\xB7E\xB7F\a\x184\x2\x2\xB7F\xB80\a\x1C7\x2\x2"+
		"\xB80\xB84\a\x294\x2\x2\xB81\xB82\x5\x4D2\x26A\x2\xB82\xB83\a\x47C\x2"+
		"\x2\xB83\xB85\x3\x2\x2\x2\xB84\xB81\x3\x2\x2\x2\xB84\xB85\x3\x2\x2\x2"+
		"\xB85\xB86\x3\x2\x2\x2\xB86\xB87\x5\x4D2\x26A\x2\xB87\xDF\x3\x2\x2\x2"+
		"\xB88\xB89\a\x11E\x2\x2\xB89\xB8A\a\x184\x2\x2\xB8A\xB8B\a\x3BF\x2\x2"+
		"\xB8B\xB8C\x5\x4D2\x26A\x2\xB8C\xE1\x3\x2\x2\x2\xB8D\xB8E\a\x11E\x2\x2"+
		"\xB8E\xB8F\a\x216\x2\x2\xB8F\xB90\x5\x4D2\x26A\x2\xB90\xE3\x3\x2\x2\x2"+
		"\xB91\xB92\a\x11E\x2\x2\xB92\xB93\a\x220\x2\x2\xB93\xB94\a\x1F2\x2\x2"+
		"\xB94\xE5\x3\x2\x2\x2\xB95\xB96\a\x11E\x2\x2\xB96\xB97\a\x241\x2\x2\xB97"+
		"\xB98\a\x403\x2\x2\xB98\xB99\x5\x4D2\x26A\x2\xB99\xE7\x3\x2\x2\x2\xB9A"+
		"\xB9B\a\x11E\x2\x2\xB9B\xB9C\a\x2BB\x2\x2\xB9C\xB9D\a\x187\x2\x2\xB9D"+
		"\xB9E\x5\x4D2\x26A\x2\xB9E\xE9\x3\x2\x2\x2\xB9F\xBA0\a\x11E\x2\x2\xBA0"+
		"\xBA1\a\x2BB\x2\x2\xBA1\xBA2\a\x35E\x2\x2\xBA2\xBA3\x5\x4D2\x26A\x2\xBA3"+
		"\xEB\x3\x2\x2\x2\xBA4\xBA5\a\x11E\x2\x2\xBA5\xBA9\a\x2F4\x2\x2\xBA6\xBA7"+
		"\x5\x4D2\x26A\x2\xBA7\xBA8\a\x47C\x2\x2\xBA8\xBAA\x3\x2\x2\x2\xBA9\xBA6"+
		"\x3\x2\x2\x2\xBA9\xBAA\x3\x2\x2\x2\xBAA\xBAE\x3\x2\x2\x2\xBAB\xBAC\x5"+
		"\x4D2\x26A\x2\xBAC\xBAD\a\x47C\x2\x2\xBAD\xBAF\x3\x2\x2\x2\xBAE\xBAB\x3"+
		"\x2\x2\x2\xBAE\xBAF\x3\x2\x2\x2\xBAF\xBB0\x3\x2\x2\x2\xBB0\xBB1\x5\x4D2"+
		"\x26A\x2\xBB1\xED\x3\x2\x2\x2\xBB2\xBB3\a\x11E\x2\x2\xBB3\xBB4\a\x319"+
		"\x2\x2\xBB4\xBB5\a\x37C\x2\x2\xBB5\xBB6\a\x63\x2\x2\xBB6\xBB7\x5\x4D2"+
		"\x26A\x2\xBB7\xEF\x3\x2\x2\x2\xBB8\xBB9\a\x11E\x2\x2\xBB9\xBBA\a\x32F"+
		"\x2\x2\xBBA\xBBB\a\x2D4\x2\x2\xBBB\xBBC\x5\x4D2\x26A\x2\xBBC\xF1\x3\x2"+
		"\x2\x2\xBBD\xBBE\a\x11E\x2\x2\xBBE\xBC1\a\x342\x2\x2\xBBF\xBC0\a\x1B7"+
		"\x2\x2\xBC0\xBC2\a\x147\x2\x2\xBC1\xBBF\x3\x2\x2\x2\xBC1\xBC2\x3\x2\x2"+
		"\x2\xBC2\xBC3\x3\x2\x2\x2\xBC3\xBC4\x5\x4D2\x26A\x2\xBC4\xF3\x3\x2\x2"+
		"\x2\xBC5\xBC6\a\x11E\x2\x2\xBC6\xBC7\a\x346\x2\x2\xBC7\xBC8\x5\x4D2\x26A"+
		"\x2\xBC8\xF5\x3\x2\x2\x2\xBC9\xBCA\a\x11E\x2\x2\xBCA\xBCD\a\x354\x2\x2"+
		"\xBCB\xBCC\a\x1B7\x2\x2\xBCC\xBCE\a\x147\x2\x2\xBCD\xBCB\x3\x2\x2\x2\xBCD"+
		"\xBCE\x3\x2\x2\x2\xBCE\xBD8\x3\x2\x2\x2\xBCF\xBD1\a\x485\x2\x2\xBD0\xBCF"+
		"\x3\x2\x2\x2\xBD0\xBD1\x3\x2\x2\x2\xBD1\xBD5\x3\x2\x2\x2\xBD2\xBD3\x5"+
		"\x4D2\x26A\x2\xBD3\xBD4\a\x47C\x2\x2\xBD4\xBD6\x3\x2\x2\x2\xBD5\xBD2\x3"+
		"\x2\x2\x2\xBD5\xBD6\x3\x2\x2\x2\xBD6\xBD7\x3\x2\x2\x2\xBD7\xBD9\x5\x4D2"+
		"\x26A\x2\xBD8\xBD0\x3\x2\x2\x2\xBD8\xBD9\x3\x2\x2\x2\xBD9\xF7\x3\x2\x2"+
		"\x2\xBDA\xBDB\a\x11E\x2\x2\xBDB\xBDE\a\x35A\x2\x2\xBDC\xBDD\a\x1B7\x2"+
		"\x2\xBDD\xBDF\a\x147\x2\x2\xBDE\xBDC\x3\x2\x2\x2\xBDE\xBDF\x3\x2\x2\x2"+
		"\xBDF\xBE0\x3\x2\x2\x2\xBE0\xBE1\x5\x4D2\x26A\x2\xBE1\xF9\x3\x2\x2\x2"+
		"\xBE2\xBE3\a\x11E\x2\x2\xBE3\xBE4\a\x364\x2\x2\xBE4\xBE5\a\x2E8\x2\x2"+
		"\xBE5\xBE6\a\x209\x2\x2\xBE6\xBE7\x5\x4D2\x26A\x2\xBE7\xFB\x3\x2\x2\x2"+
		"\xBE8\xBE9\a\x11E\x2\x2\xBE9\xBEA\a\x36B\x2\x2\xBEA\xBED\a\x2D3\x2\x2"+
		"\xBEB\xBEC\a\x1B7\x2\x2\xBEC\xBEE\a\x147\x2\x2\xBED\xBEB\x3\x2\x2\x2\xBED"+
		"\xBEE\x3\x2\x2\x2\xBEE\xBF2\x3\x2\x2\x2\xBEF\xBF0\x5\x4D2\x26A\x2\xBF0"+
		"\xBF1\a\x47C\x2\x2\xBF1\xBF3\x3\x2\x2\x2\xBF2\xBEF\x3\x2\x2\x2\xBF2\xBF3"+
		"\x3\x2\x2\x2\xBF3\xBF4\x3\x2\x2\x2\xBF4\xBF5\x5\x4D2\x26A\x2\xBF5\xFD"+
		"\x3\x2\x2\x2\xBF6\xBF7\a\x11E\x2\x2\xBF7\xBFA\a\x377\x2\x2\xBF8\xBF9\a"+
		"\x1B7\x2\x2\xBF9\xBFB\a\x147\x2\x2\xBFA\xBF8\x3\x2\x2\x2\xBFA\xBFB\x3"+
		"\x2\x2\x2\xBFB\xC0A\x3\x2\x2\x2\xBFC\xBFE\a\x485\x2\x2\xBFD\xBFC\x3\x2"+
		"\x2\x2\xBFD\xBFE\x3\x2\x2\x2\xBFE\xC02\x3\x2\x2\x2\xBFF\xC00\x5\x4D2\x26A"+
		"\x2\xC00\xC01\a\x47C\x2\x2\xC01\xC03\x3\x2\x2\x2\xC02\xBFF\x3\x2\x2\x2"+
		"\xC02\xC03\x3\x2\x2\x2\xC03\xC07\x3\x2\x2\x2\xC04\xC05\x5\x4D2\x26A\x2"+
		"\xC05\xC06\a\x47C\x2\x2\xC06\xC08\x3\x2\x2\x2\xC07\xC04\x3\x2\x2\x2\xC07"+
		"\xC08\x3\x2\x2\x2\xC08\xC09\x3\x2\x2\x2\xC09\xC0B\x5\x4D2\x26A\x2\xC0A"+
		"\xBFD\x3\x2\x2\x2\xC0A\xC0B\x3\x2\x2\x2\xC0B\xFF\x3\x2\x2\x2\xC0C\xC0D"+
		"\a\x11E\x2\x2\xC0D\xC0E\a\x37A\x2\x2\xC0E\xC0F\a\x42\x2\x2\xC0F\xC10\x5"+
		"\x4D2\x26A\x2\xC10\x101\x3\x2\x2\x2\xC11\xC12\a\x11E\x2\x2\xC12\xC13\a"+
		"\x37A\x2\x2\xC13\xC14\a\x42\x2\x2\xC14\xC15\a\x3A5\x2\x2\xC15\xC16\x5"+
		"\x4D2\x26A\x2\xC16\x103\x3\x2\x2\x2\xC17\xC18\a\x11E\x2\x2\xC18\xC19\a"+
		"\x37A\x2\x2\xC19\xC1A\a\x342\x2\x2\xC1A\xC1B\x5\x4D2\x26A\x2\xC1B\x105"+
		"\x3\x2\x2\x2\xC1C\xC1D\a\x11E\x2\x2\xC1D\xC1E\a\x37C\x2\x2\xC1E\xC1F\x5"+
		"\x4D2\x26A\x2\xC1F\x107\x3\x2\x2\x2\xC20\xC22\a\x11E\x2\x2\xC21\xC23\a"+
		"\xC7\x2\x2\xC22\xC21\x3\x2\x2\x2\xC22\xC23\x3\x2\x2\x2\xC23\xC24\x3\x2"+
		"\x2\x2\xC24\xC25\a\x395\x2\x2\xC25\xC29\a\x181\x2\x2\xC26\xC27\x5\x4D2"+
		"\x26A\x2\xC27\xC28\a\x47C\x2\x2\xC28\xC2A\x3\x2\x2\x2\xC29\xC26\x3\x2"+
		"\x2\x2\xC29\xC2A\x3\x2\x2\x2\xC2A\xC2B\x3\x2\x2\x2\xC2B\xC2C\x5\x4D2\x26A"+
		"\x2\xC2C\xC38\aq\x2\x2\xC2D\xC2F\a\x485\x2\x2\xC2E\xC2D\x3\x2\x2\x2\xC2E"+
		"\xC2F\x3\x2\x2\x2\xC2F\xC30\x3\x2\x2\x2\xC30\xC31\a}\x2\x2\xC31\xC39\x5"+
		"\x4D2\x26A\x2\xC32\xC34\a\x485\x2\x2\xC33\xC32\x3\x2\x2\x2\xC33\xC34\x3"+
		"\x2\x2\x2\xC34\xC35\x3\x2\x2\x2\xC35\xC36\a?\x2\x2\xC36\xC37\a\x1F2\x2"+
		"\x2\xC37\xC39\x5\x4D2\x26A\x2\xC38\xC2E\x3\x2\x2\x2\xC38\xC33\x3\x2\x2"+
		"\x2\xC39\xC3A\x3\x2\x2\x2\xC3A\xC38\x3\x2\x2\x2\xC3A\xC3B\x3\x2\x2\x2"+
		"\xC3B\x109\x3\x2\x2\x2\xC3C\xC3D\a\x11E\x2\x2\xC3D\xC41\a\x3B4\x2\x2\xC3E"+
		"\xC3F\x5\x4D2\x26A\x2\xC3F\xC40\a\x47C\x2\x2\xC40\xC42\x3\x2\x2\x2\xC41"+
		"\xC3E\x3\x2\x2\x2\xC41\xC42\x3\x2\x2\x2\xC42\xC43\x3\x2\x2\x2\xC43\xC44"+
		"\x5\x4D2\x26A\x2\xC44\xC45\a\x47C\x2\x2\xC45\xC46\x5\x4D2\x26A\x2\xC46"+
		"\x10B\x3\x2\x2\x2\xC47\xC48\a\x11E\x2\x2\xC48\xC49\a\x3D2\x2\x2\xC49\xC4A"+
		"\a\x1F2\x2\x2\xC4A\xC4E\x5\x4D2\x26A\x2\xC4B\xC4C\a\x31C\x2\x2\xC4C\xC4D"+
		"\a\x2E9\x2\x2\xC4D\xC4F\a\x1F2\x2\x2\xC4E\xC4B\x3\x2\x2\x2\xC4E\xC4F\x3"+
		"\x2\x2\x2\xC4F\x10D\x3\x2\x2\x2\xC50\xC51\a\x11E\x2\x2\xC51\xC54\a\x3D4"+
		"\x2\x2\xC52\xC53\a\x1B7\x2\x2\xC53\xC55\a\x147\x2\x2\xC54\xC52\x3\x2\x2"+
		"\x2\xC54\xC55\x3\x2\x2\x2\xC55\xC59\x3\x2\x2\x2\xC56\xC57\x5\x4D2\x26A"+
		"\x2\xC57\xC58\a\x47C\x2\x2\xC58\xC5A\x3\x2\x2\x2\xC59\xC56\x3\x2\x2\x2"+
		"\xC59\xC5A\x3\x2\x2\x2\xC5A\xC5B\x3\x2\x2\x2\xC5B\xC5C\x5\x4D2\x26A\x2"+
		"\xC5C\x10F\x3\x2\x2\x2\xC5D\xC5E\a\x11E\x2\x2\xC5E\xC61\a\x41B\x2\x2\xC5F"+
		"\xC60\a\x1B7\x2\x2\xC60\xC62\a\x147\x2\x2\xC61\xC5F\x3\x2\x2\x2\xC61\xC62"+
		"\x3\x2\x2\x2\xC62\xC63\x3\x2\x2\x2\xC63\xC64\x5\x4D2\x26A\x2\xC64\x111"+
		"\x3\x2\x2\x2\xC65\xC66\a\x11E\x2\x2\xC66\xC67\a\x43E\x2\x2\xC67\xC68\a"+
		"\x19B\x2\x2\xC68\xC69\x5\x4D2\x26A\x2\xC69\x113\x3\x2\x2\x2\xC6A\xC6B"+
		"\a\x11E\x2\x2\xC6B\xC6C\a\x443\x2\x2\xC6C\xC6D\a\x35A\x2\x2\xC6D\xC71"+
		"\a\x9D\x2\x2\xC6E\xC6F\x5\x4D2\x26A\x2\xC6F\xC70\a\x47C\x2\x2\xC70\xC72"+
		"\x3\x2\x2\x2\xC71\xC6E\x3\x2\x2\x2\xC71\xC72\x3\x2\x2\x2\xC72\xC73\x3"+
		"\x2\x2\x2\xC73\xC74\x5\x4D2\x26A\x2\xC74\x115\x3\x2\x2\x2\xC75\xC76\a"+
		"\x112\x2\x2\xC76\xC85\a\x3F8\x2\x2\xC77\xC79\a\x485\x2\x2\xC78\xC77\x3"+
		"\x2\x2\x2\xC78\xC79\x3\x2\x2\x2\xC79\xC7D\x3\x2\x2\x2\xC7A\xC7B\x5\x4D2"+
		"\x26A\x2\xC7B\xC7C\a\x47C\x2\x2\xC7C\xC7E\x3\x2\x2\x2\xC7D\xC7A\x3\x2"+
		"\x2\x2\xC7D\xC7E\x3\x2\x2\x2\xC7E\xC7F\x3\x2\x2\x2\xC7F\xC81\x5\x4D2\x26A"+
		"\x2\xC80\xC78\x3\x2\x2\x2\xC81\xC82\x3\x2\x2\x2\xC82\xC80\x3\x2\x2\x2"+
		"\xC82\xC83\x3\x2\x2\x2\xC83\xC86\x3\x2\x2\x2\xC84\xC86\a\x18\x2\x2\xC85"+
		"\xC80\x3\x2\x2\x2\xC85\xC84\x3\x2\x2\x2\xC86\xC87\x3\x2\x2\x2\xC87\xC91"+
		"\a\x294\x2\x2\xC88\xC89\x5\x4D2\x26A\x2\xC89\xC8A\a\x47C\x2\x2\xC8A\xC8C"+
		"\x3\x2\x2\x2\xC8B\xC88\x3\x2\x2\x2\xC8B\xC8C\x3\x2\x2\x2\xC8C\xC8D\x3"+
		"\x2\x2\x2\xC8D\xC92\x5\x4D2\x26A\x2\xC8E\xC92\a\xDE\x2\x2\xC8F\xC90\a"+
		"\x18\x2\x2\xC90\xC92\a\x37A\x2\x2\xC91\xC8B\x3\x2\x2\x2\xC91\xC8E\x3\x2"+
		"\x2\x2\xC91\xC8F\x3\x2\x2\x2\xC92\x117\x3\x2\x2\x2\xC93\xC94\a\x129\x2"+
		"\x2\xC94\xCA3\a\x3F8\x2\x2\xC95\xC97\a\x485\x2\x2\xC96\xC95\x3\x2\x2\x2"+
		"\xC96\xC97\x3\x2\x2\x2\xC97\xC9B\x3\x2\x2\x2\xC98\xC99\x5\x4D2\x26A\x2"+
		"\xC99\xC9A\a\x47C\x2\x2\xC9A\xC9C\x3\x2\x2\x2\xC9B\xC98\x3\x2\x2\x2\xC9B"+
		"\xC9C\x3\x2\x2\x2\xC9C\xC9D\x3\x2\x2\x2\xC9D\xC9F\x5\x4D2\x26A\x2\xC9E"+
		"\xC96\x3\x2\x2\x2\xC9F\xCA0\x3\x2\x2\x2\xCA0\xC9E\x3\x2\x2\x2\xCA0\xCA1"+
		"\x3\x2\x2\x2\xCA1\xCA4\x3\x2\x2\x2\xCA2\xCA4\a\x18\x2\x2\xCA3\xC9E\x3"+
		"\x2\x2\x2\xCA3\xCA2\x3\x2\x2\x2\xCA4\xCA5\x3\x2\x2\x2\xCA5\xCAF\a\x294"+
		"\x2\x2\xCA6\xCA7\x5\x4D2\x26A\x2\xCA7\xCA8\a\x47C\x2\x2\xCA8\xCAA\x3\x2"+
		"\x2\x2\xCA9\xCA6\x3\x2\x2\x2\xCA9\xCAA\x3\x2\x2\x2\xCAA\xCAB\x3\x2\x2"+
		"\x2\xCAB\xCB0\x5\x4D2\x26A\x2\xCAC\xCB0\a\xDE\x2\x2\xCAD\xCAE\a\x18\x2"+
		"\x2\xCAE\xCB0\a\x37A\x2\x2\xCAF\xCA9\x3\x2\x2\x2\xCAF\xCAC\x3\x2\x2\x2"+
		"\xCAF\xCAD\x3\x2\x2\x2\xCB0\x119\x3\x2\x2\x2\xCB1\xCB2\a\x213\x2\x2\xCB2"+
		"\xCB3\a\x3D7\x2\x2\xCB3\xCB4\x5\x492\x24A\x2\xCB4\xCB5\a\x1C2\x2\x2\xCB5"+
		"\xCB6\t\x1A\x2\x2\xCB6\xCBA\a\x24E\x2\x2\xCB7\xCB8\a\x42F\x2\x2\xCB8\xCBB"+
		"\a\x469\x2\x2\xCB9\xCBB\a\x275\x2\x2\xCBA\xCB7\x3\x2\x2\x2\xCBA\xCB9\x3"+
		"\x2\x2\x2\xCBA\xCBB\x3\x2\x2\x2\xCBB\xCBD\x3\x2\x2\x2\xCBC\xCBE\a\x486"+
		"\x2\x2\xCBD\xCBC\x3\x2\x2\x2\xCBD\xCBE\x3\x2\x2\x2\xCBE\x11B\x3\x2\x2"+
		"\x2\xCBF\xCC0\a\x3FC\x2\x2\xCC0\xCC1\a\x3D7\x2\x2\xCC1\xCD5\x5\x492\x24A"+
		"\x2\xCC2\xCC3\a\x438\x2\x2\xCC3\xCC4\a\x481\x2\x2\xCC4\xCC5\a\x2BC\x2"+
		"\x2\xCC5\xCCF\a\x481\x2\x2\xCC6\xCC8\a\x485\x2\x2\xCC7\xCC6\x3\x2\x2\x2"+
		"\xCC7\xCC8\x3\x2\x2\x2\xCC8\xCCD\x3\x2\x2\x2\xCC9\xCCE\a\x469\x2\x2\xCCA"+
		"\xCCB\a\x469\x2\x2\xCCB\xCCC\a\x3EB\x2\x2\xCCC\xCCE\a\x469\x2\x2\xCCD"+
		"\xCC9\x3\x2\x2\x2\xCCD\xCCA\x3\x2\x2\x2\xCCE\xCD0\x3\x2\x2\x2\xCCF\xCC7"+
		"\x3\x2\x2\x2\xCD0\xCD1\x3\x2\x2\x2\xCD1\xCCF\x3\x2\x2\x2\xCD1\xCD2\x3"+
		"\x2\x2\x2\xCD2\xCD3\x3\x2\x2\x2\xCD3\xCD4\a\x482\x2\x2\xCD4\xCD6\a\x482"+
		"\x2\x2\xCD5\xCC2\x3\x2\x2\x2\xCD5\xCD6\x3\x2\x2\x2\xCD6\x11D\x3\x2\x2"+
		"\x2\xCD7\xCD8\a\xCA\x2\x2\xCD8\xCD9\a\x9E\x2\x2\xCD9\xCDA\a\x220\x2\x2"+
		"\xCDA\xCDB\a\x1F2\x2\x2\xCDB\xCDC\x5\x4D2\x26A\x2\xCDC\xCDD\a\x438\x2"+
		"\x2\xCDD\xCDE\a\x481\x2\x2\xCDE\xCDF\a\x1F7\x2\x2\xCDF\xCE0\a\x46F\x2"+
		"\x2\xCE0\xCE1\a\x46B\x2\x2\xCE1\xCE2\a\x485\x2\x2\xCE2\xCE3\a\x1F5\x2"+
		"\x2\xCE3\xCE4\a\x46F\x2\x2\xCE4\xCE5\a\x46B\x2\x2\xCE5\xCE6\a\x482\x2"+
		"\x2\xCE6\x11F\x3\x2\x2\x2\xCE7\xCE8\a%\x2\x2\xCE8\xCE9\a\xCD\x2\x2\xCE9"+
		"\xCEA\x5\x4D2\x26A\x2\xCEA\xCEB\a\x438\x2\x2\xCEB\xCEC\a\x1B0\x2\x2\xCEC"+
		"\xCED\a\x46F\x2\x2\xCED\xCF2\a\x46B\x2\x2\xCEE\xCEF\a\x485\x2\x2\xCEF"+
		"\xCF0\a\x369\x2\x2\xCF0\xCF1\a\x46F\x2\x2\xCF1\xCF3\a\x46B\x2\x2\xCF2"+
		"\xCEE\x3\x2\x2\x2\xCF2\xCF3\x3\x2\x2\x2\xCF3\x121\x3\x2\x2\x2\xCF4\xCF5"+
		"\a\xCA\x2\x2\xCF5\xCF6\a\xCD\x2\x2\xCF6\xCF7\x5\x4D2\x26A\x2\xCF7\xCF8"+
		"\a\x438\x2\x2\xCF8\xCF9\a\x1B0\x2\x2\xCF9\xCFA\a\x46F\x2\x2\xCFA\xCFF"+
		"\a\x46B\x2\x2\xCFB\xCFC\a\x485\x2\x2\xCFC\xCFD\a\x369\x2\x2\xCFD\xCFE"+
		"\a\x46F\x2\x2\xCFE\xD00\a\x46B\x2\x2\xCFF\xCFB\x3\x2\x2\x2\xCFF\xD00\x3"+
		"\x2\x2\x2\xD00\xD05\x3\x2\x2\x2\xD01\xD02\a\x172\x2\x2\xD02\xD03\a\xCF"+
		"\x2\x2\xD03\xD04\a\x2E9\x2\x2\xD04\xD06\x5\x4D2\x26A\x2\xD05\xD01\x3\x2"+
		"\x2\x2\xD05\xD06\x3\x2\x2\x2\xD06\x123\x3\x2\x2\x2\xD07\xD08\a%\x2\x2"+
		"\xD08\xD09\a\xCF\x2\x2\xD09\xD0A\a\x2E9\x2\x2\xD0A\xD0F\x5\x4D2\x26A\x2"+
		"\xD0B\xD0C\a\x181\x2\x2\xD0C\xD0D\a\x15C\x2\x2\xD0D\xD0E\a\x46F\x2\x2"+
		"\xD0E\xD10\a\x46B\x2\x2\xD0F\xD0B\x3\x2\x2\x2\xD0F\xD10\x3\x2\x2\x2\xD10"+
		"\xD12\x3\x2\x2\x2\xD11\xD13\t\x1B\x2\x2\xD12\xD11\x3\x2\x2\x2\xD12\xD13"+
		"\x3\x2\x2\x2\xD13\x125\x3\x2\x2\x2\xD14\xD15\a\xCA\x2\x2\xD15\xD16\a\xCF"+
		"\x2\x2\xD16\xD17\a\x2E9\x2\x2\xD17\xD18\x5\x4D2\x26A\x2\xD18\xD19\a\x181"+
		"\x2\x2\xD19\xD1A\a\x15C\x2\x2\xD1A\xD1B\a\x46F\x2\x2\xD1B\xD1C\a\x46B"+
		"\x2\x2\xD1C\x127\x3\x2\x2\x2\xD1D\xD1E\a\xCA\x2\x2\xD1E\xD1F\a\x131\x2"+
		"\x2\xD1F\xD22\x5\x4D2\x26A\x2\xD20\xD21\a\x46\x2\x2\xD21\xD23\x5\x4D2"+
		"\x26A\x2\xD22\xD20\x3\x2\x2\x2\xD22\xD23\x3\x2\x2\x2\xD23\xD27\x3\x2\x2"+
		"\x2\xD24\xD25\a\x3B2\x2\x2\xD25\xD26\a\x46F\x2\x2\xD26\xD28\t\x1C\x2\x2"+
		"\xD27\xD24\x3\x2\x2\x2\xD27\xD28\x3\x2\x2\x2\xD28\xD29\x3\x2\x2\x2\xD29"+
		"\xD2A\a:\x2\x2\xD2A\xD2B\a\x3E1\x2\x2\xD2B\xD2C\a\x481\x2\x2\xD2C\xD2D"+
		"\x5\x12E\x98\x2\xD2D\xD60\a\x482\x2\x2\xD2E\xD2F\a\x172\x2\x2\xD2F\xD30"+
		"\a\x401\x2\x2\xD30\xD31\a\x481\x2\x2\xD31\xD61\a\x482\x2\x2\xD32\xD33"+
		"\a\x172\x2\x2\xD33\xD34\a\x37E\x2\x2\xD34\xD35\a\x481\x2\x2\xD35\xD3A"+
		"\x5\x12C\x97\x2\xD36\xD38\a\x485\x2\x2\xD37\xD36\x3\x2\x2\x2\xD37\xD38"+
		"\x3\x2\x2\x2\xD38\xD39\x3\x2\x2\x2\xD39\xD3B\x5\x12A\x96\x2\xD3A\xD37"+
		"\x3\x2\x2\x2\xD3A\xD3B\x3\x2\x2\x2\xD3B\xD42\x3\x2\x2\x2\xD3C\xD3E\a\x485"+
		"\x2\x2\xD3D\xD3C\x3\x2\x2\x2\xD3D\xD3E\x3\x2\x2\x2\xD3E\xD3F\x3\x2\x2"+
		"\x2\xD3F\xD40\a\x242\x2\x2\xD40\xD41\a\x46F\x2\x2\xD41\xD43\t\x1D\x2\x2"+
		"\xD42\xD3D\x3\x2\x2\x2\xD42\xD43\x3\x2\x2\x2\xD43\xD4A\x3\x2\x2\x2\xD44"+
		"\xD46\a\x485\x2\x2\xD45\xD44\x3\x2\x2\x2\xD45\xD46\x3\x2\x2\x2\xD46\xD47"+
		"\x3\x2\x2\x2\xD47\xD48\a\x243\x2\x2\xD48\xD49\a\x46F\x2\x2\xD49\xD4B\a"+
		"\x469\x2\x2\xD4A\xD45\x3\x2\x2\x2\xD4A\xD4B\x3\x2\x2\x2\xD4B\xD4C\x3\x2"+
		"\x2\x2\xD4C\xD4D\a\x482\x2\x2\xD4D\xD61\x3\x2\x2\x2\xD4E\xD4F\a\x172\x2"+
		"\x2\xD4F\xD50\a\xE0\x2\x2\xD50\xD51\a\x481\x2\x2\xD51\xD56\x5\x12C\x97"+
		"\x2\xD52\xD54\a\x485\x2\x2\xD53\xD52\x3\x2\x2\x2\xD53\xD54\x3\x2\x2\x2"+
		"\xD54\xD55\x3\x2\x2\x2\xD55\xD57\x5\x12A\x96\x2\xD56\xD53\x3\x2\x2\x2"+
		"\xD56\xD57\x3\x2\x2\x2\xD57\xD59\x3\x2\x2\x2\xD58\xD5A\a\x485\x2\x2\xD59"+
		"\xD58\x3\x2\x2\x2\xD59\xD5A\x3\x2\x2\x2\xD5A\xD5B\x3\x2\x2\x2\xD5B\xD5C"+
		"\a\x342\x2\x2\xD5C\xD5D\a\x46F\x2\x2\xD5D\xD5E\t\x1E\x2\x2\xD5E\xD5F\a"+
		"\x482\x2\x2\xD5F\xD61\x3\x2\x2\x2\xD60\xD2E\x3\x2\x2\x2\xD60\xD32\x3\x2"+
		"\x2\x2\xD60\xD4E\x3\x2\x2\x2\xD61\x129\x3\x2\x2\x2\xD62\xD63\a\x12E\x2"+
		"\x2\xD63\xD64\a\x46F\x2\x2\xD64\xD70\t\x1F\x2\x2\xD65\xD6E\a\x17\x2\x2"+
		"\xD66\xD68\a\x10\x2\x2\xD67\xD69\a\x2FF\x2\x2\xD68\xD67\x3\x2\x2\x2\xD68"+
		"\xD69\x3\x2\x2\x2\xD69\xD6F\x3\x2\x2\x2\xD6A\xD6C\a\x2FF\x2\x2\xD6B\xD6D"+
		"\a\x10\x2\x2\xD6C\xD6B\x3\x2\x2\x2\xD6C\xD6D\x3\x2\x2\x2\xD6D\xD6F\x3"+
		"\x2\x2\x2\xD6E\xD66\x3\x2\x2\x2\xD6E\xD6A\x3\x2\x2\x2\xD6F\xD71\x3\x2"+
		"\x2\x2\xD70\xD65\x3\x2\x2\x2\xD70\xD71\x3\x2\x2\x2\xD71\x12B\x3\x2\x2"+
		"\x2\xD72\xD73\a\x45\x2\x2\xD73\xD84\a\x46F\x2\x2\xD74\xD76\a\x437\x2\x2"+
		"\xD75\xD77\t \x2\x2\xD76\xD75\x3\x2\x2\x2\xD76\xD77\x3\x2\x2\x2\xD77\xD7A"+
		"\x3\x2\x2\x2\xD78\xD79\a}\x2\x2\xD79\xD7B\x5\x4D2\x26A\x2\xD7A\xD78\x3"+
		"\x2\x2\x2\xD7A\xD7B\x3\x2\x2\x2\xD7B\xD85\x3\x2\x2\x2\xD7C\xD7D\a}\x2"+
		"\x2\xD7D\xD7F\x5\x4D2\x26A\x2\xD7E\xD80\a\x437\x2\x2\xD7F\xD7E\x3\x2\x2"+
		"\x2\xD7F\xD80\x3\x2\x2\x2\xD80\xD82\x3\x2\x2\x2\xD81\xD83\t \x2\x2\xD82"+
		"\xD81\x3\x2\x2\x2\xD82\xD83\x3\x2\x2\x2\xD83\xD85\x3\x2\x2\x2\xD84\xD74"+
		"\x3\x2\x2\x2\xD84\xD7C\x3\x2\x2\x2\xD85\x12D\x3\x2\x2\x2\xD86\xD87\a\x20C"+
		"\x2\x2\xD87\xD88\a\x46F\x2\x2\xD88\xD95\a\x469\x2\x2\xD89\xD8A\a\x485"+
		"\x2\x2\xD8A\xD8B\a\x20B\x2\x2\xD8B\xD93\a\x46F\x2\x2\xD8C\xD94\a\x18\x2"+
		"\x2\xD8D\xD90\a\x481\x2\x2\xD8E\xD91\a\x493\x2\x2\xD8F\xD91\a\x46B\x2"+
		"\x2\xD90\xD8E\x3\x2\x2\x2\xD90\xD8F\x3\x2\x2\x2\xD91\xD92\x3\x2\x2\x2"+
		"\xD92\xD94\a\x482\x2\x2\xD93\xD8C\x3\x2\x2\x2\xD93\xD8D\x3\x2\x2\x2\xD94"+
		"\xD96\x3\x2\x2\x2\xD95\xD89\x3\x2\x2\x2\xD95\xD96\x3\x2\x2\x2\xD96\x12F"+
		"\x3\x2\x2\x2\xD97\xD98\a\xCA\x2\x2\xD98\xD99\a\x13E\x2\x2\xD99\xD9A\a"+
		"\x272\x2\x2\xD9A\xD9B\x5\x4D2\x26A\x2\xD9B\xDA0\a\x294\x2\x2\xD9C\xDA1"+
		"\a\x37A\x2\x2\xD9D\xDA1\a\xDE\x2\x2\xD9E\xD9F\a\x2F4\x2\x2\xD9F\xDA1\x5"+
		"\x4D2\x26A\x2\xDA0\xD9C\x3\x2\x2\x2\xDA0\xD9D\x3\x2\x2\x2\xDA0\xD9E\x3"+
		"\x2\x2\x2\xDA1\xDA4\x3\x2\x2\x2\xDA2\xDA3\a\x438\x2\x2\xDA3\xDA5\a\x158"+
		"\x2\x2\xDA4\xDA2\x3\x2\x2\x2\xDA4\xDA5\x3\x2\x2\x2\xDA5\xDA6\x3\x2\x2"+
		"\x2\xDA6\xDAB\a\x172\x2\x2\xDA7\xDA9\a\x485\x2\x2\xDA8\xDA7\x3\x2\x2\x2"+
		"\xDA8\xDA9\x3\x2\x2\x2\xDA9\xDAA\x3\x2\x2\x2\xDAA\xDAC\x5\x4D2\x26A\x2"+
		"\xDAB\xDA8\x3\x2\x2\x2\xDAC\xDAD\x3\x2\x2\x2\xDAD\xDAB\x3\x2\x2\x2\xDAD"+
		"\xDAE\x3\x2\x2\x2\xDAE\xDAF\x3\x2\x2\x2\xDAF\xDB0\a\x3EB\x2\x2\xDB0\xDB1"+
		"\a\x37C\x2\x2\xDB1\xDB2\a\x46B\x2\x2\xDB2\xDB3\a\x485\x2\x2\xDB3\xDB4"+
		"\a\x46B\x2\x2\xDB4\x131\x3\x2\x2\x2\xDB5\xDB6\t\x18\x2\x2\xDB6\xDB7\a"+
		"\x13E\x2\x2\xDB7\xDB8\a\x381\x2\x2\xDB8\xDB9\x5\x4D2\x26A\x2\xDB9\xDBA"+
		"\a\x294\x2\x2\xDBA\xDFE\a\x37A\x2\x2\xDBB\xDBD\a\x485\x2\x2\xDBC\xDBB"+
		"\x3\x2\x2\x2\xDBC\xDBD\x3\x2\x2\x2\xDBD\xDBE\x3\x2\x2\x2\xDBE\xDBF\a\r"+
		"\x2\x2\xDBF\xDC3\a\x13E\x2\x2\xDC0\xDC1\x5\x4D2\x26A\x2\xDC1\xDC2\a\x47C"+
		"\x2\x2\xDC2\xDC4\x3\x2\x2\x2\xDC3\xDC0\x3\x2\x2\x2\xDC3\xDC4\x3\x2\x2"+
		"\x2\xDC4\xDC5\x3\x2\x2\x2\xDC5\xDC6\x5\x4D2\x26A\x2\xDC6\xDC7\a\x47C\x2"+
		"\x2\xDC7\xDC8\x5\x4D2\x26A\x2\xDC8\xDF9\x3\x2\x2\x2\xDC9\xDD7\a\x481\x2"+
		"\x2\xDCA\xDD4\a\x386\x2\x2\xDCB\xDCD\a\x485\x2\x2\xDCC\xDCB\x3\x2\x2\x2"+
		"\xDCC\xDCD\x3\x2\x2\x2\xDCD\xDCE\x3\x2\x2\x2\xDCE\xDCF\x5\x4D2\x26A\x2"+
		"\xDCF\xDD0\a\x46F\x2\x2\xDD0\xDD1\t!\x2\x2\xDD1\xDD3\x3\x2\x2\x2\xDD2"+
		"\xDCC\x3\x2\x2\x2\xDD3\xDD6\x3\x2\x2\x2\xDD4\xDD2\x3\x2\x2\x2\xDD4\xDD5"+
		"\x3\x2\x2\x2\xDD5\xDD8\x3\x2\x2\x2\xDD6\xDD4\x3\x2\x2\x2\xDD7\xDCA\x3"+
		"\x2\x2\x2\xDD7\xDD8\x3\x2\x2\x2\xDD8\xDED\x3\x2\x2\x2\xDD9\xDDA\a\n\x2"+
		"\x2\xDDA\xDE7\a\x481\x2\x2\xDDB\xDDD\a\x485\x2\x2\xDDC\xDDB\x3\x2\x2\x2"+
		"\xDDC\xDDD\x3\x2\x2\x2\xDDD\xDE1\x3\x2\x2\x2\xDDE\xDDF\x5\x4D2\x26A\x2"+
		"\xDDF\xDE0\a\x47C\x2\x2\xDE0\xDE2\x3\x2\x2\x2\xDE1\xDDE\x3\x2\x2\x2\xDE1"+
		"\xDE2\x3\x2\x2\x2\xDE2\xDE3\x3\x2\x2\x2\xDE3\xDE4\x5\x4D2\x26A\x2\xDE4"+
		"\xDE5\a\x47C\x2\x2\xDE5\xDE6\x5\x4D2\x26A\x2\xDE6\xDE8\x3\x2\x2\x2\xDE7"+
		"\xDDC\x3\x2\x2\x2\xDE8\xDE9\x3\x2\x2\x2\xDE9\xDE7\x3\x2\x2\x2\xDE9\xDEA"+
		"\x3\x2\x2\x2\xDEA\xDEB\x3\x2\x2\x2\xDEB\xDEC\a\x482\x2\x2\xDEC\xDEE\x3"+
		"\x2\x2\x2\xDED\xDD9\x3\x2\x2\x2\xDEE\xDEF\x3\x2\x2\x2\xDEF\xDED\x3\x2"+
		"\x2\x2\xDEF\xDF0\x3\x2\x2\x2\xDF0\xDF3\x3\x2\x2\x2\xDF1\xDF2\a\x435\x2"+
		"\x2\xDF2\xDF4\x5\x134\x9B\x2\xDF3\xDF1\x3\x2\x2\x2\xDF3\xDF4\x3\x2\x2"+
		"\x2\xDF4\xDF5\x3\x2\x2\x2\xDF5\xDF6\a\x482\x2\x2\xDF6\xDF8\x3\x2\x2\x2"+
		"\xDF7\xDC9\x3\x2\x2\x2\xDF8\xDFB\x3\x2\x2\x2\xDF9\xDF7\x3\x2\x2\x2\xDF9"+
		"\xDFA\x3\x2\x2\x2\xDFA\xDFD\x3\x2\x2\x2\xDFB\xDF9\x3\x2\x2\x2\xDFC\xDBC"+
		"\x3\x2\x2\x2\xDFD\xE00\x3\x2\x2\x2\xDFE\xDFC\x3\x2\x2\x2\xDFE\xDFF\x3"+
		"\x2\x2\x2\xDFF\xE11\x3\x2\x2\x2\xE00\xDFE\x3\x2\x2\x2\xE01\xE03\a\x485"+
		"\x2\x2\xE02\xE01\x3\x2\x2\x2\xE02\xE03\x3\x2\x2\x2\xE03\xE04\x3\x2\x2"+
		"\x2\xE04\xE05\a\x11E\x2\x2\xE05\xE09\a\x13E\x2\x2\xE06\xE07\x5\x4D2\x26A"+
		"\x2\xE07\xE08\a\x47C\x2\x2\xE08\xE0A\x3\x2\x2\x2\xE09\xE06\x3\x2\x2\x2"+
		"\xE09\xE0A\x3\x2\x2\x2\xE0A\xE0B\x3\x2\x2\x2\xE0B\xE0C\x5\x4D2\x26A\x2"+
		"\xE0C\xE0D\a\x47C\x2\x2\xE0D\xE0E\x5\x4D2\x26A\x2\xE0E\xE10\x3\x2\x2\x2"+
		"\xE0F\xE02\x3\x2\x2\x2\xE10\xE13\x3\x2\x2\x2\xE11\xE0F\x3\x2\x2\x2\xE11"+
		"\xE12\x3\x2\x2\x2\xE12\xE3D\x3\x2\x2\x2\xE13\xE11\x3\x2\x2\x2\xE14\xE15"+
		"\a\r\x2\x2\xE15\xE19\a\x3DE\x2\x2\xE16\xE17\x5\x4D2\x26A\x2\xE17\xE18"+
		"\a\x47C\x2\x2\xE18\xE1A\x3\x2\x2\x2\xE19\xE16\x3\x2\x2\x2\xE19\xE1A\x3"+
		"\x2\x2\x2\xE1A\xE1B\x3\x2\x2\x2\xE1B\xE1C\x5\x4D2\x26A\x2\xE1C\xE1D\a"+
		"\x47C\x2\x2\xE1D\xE1E\x5\x4D2\x26A\x2\xE1E\xE38\x3\x2\x2\x2\xE1F\xE20"+
		"\a\x481\x2\x2\xE20\xE30\a\x386\x2\x2\xE21\xE23\a\x485\x2\x2\xE22\xE21"+
		"\x3\x2\x2\x2\xE22\xE23\x3\x2\x2\x2\xE23\xE24\x3\x2\x2\x2\xE24\xE25\x5"+
		"\x4D2\x26A\x2\xE25\xE2E\a\x46F\x2\x2\xE26\xE28\a\x481\x2\x2\xE27\xE26"+
		"\x3\x2\x2\x2\xE27\xE28\x3\x2\x2\x2\xE28\xE29\x3\x2\x2\x2\xE29\xE2B\a\x469"+
		"\x2\x2\xE2A\xE2C\a\x482\x2\x2\xE2B\xE2A\x3\x2\x2\x2\xE2B\xE2C\x3\x2\x2"+
		"\x2\xE2C\xE2F\x3\x2\x2\x2\xE2D\xE2F\a\x46B\x2\x2\xE2E\xE27\x3\x2\x2\x2"+
		"\xE2E\xE2D\x3\x2\x2\x2\xE2F\xE31\x3\x2\x2\x2\xE30\xE22\x3\x2\x2\x2\xE31"+
		"\xE32\x3\x2\x2\x2\xE32\xE30\x3\x2\x2\x2\xE32\xE33\x3\x2\x2\x2\xE33\xE34"+
		"\x3\x2\x2\x2\xE34\xE35\a\x482\x2\x2\xE35\xE37\x3\x2\x2\x2\xE36\xE1F\x3"+
		"\x2\x2\x2\xE37\xE3A\x3\x2\x2\x2\xE38\xE36\x3\x2\x2\x2\xE38\xE39\x3\x2"+
		"\x2\x2\xE39\xE3C\x3\x2\x2\x2\xE3A\xE38\x3\x2\x2\x2\xE3B\xE14\x3\x2\x2"+
		"\x2\xE3C\xE3F\x3\x2\x2\x2\xE3D\xE3B\x3\x2\x2\x2\xE3D\xE3E\x3\x2\x2\x2"+
		"\xE3E\xE4D\x3\x2\x2\x2\xE3F\xE3D\x3\x2\x2\x2\xE40\xE41\a\x11E\x2\x2\xE41"+
		"\xE45\a\x3DE\x2\x2\xE42\xE43\x5\x4D2\x26A\x2\xE43\xE44\a\x47C\x2\x2\xE44"+
		"\xE46\x3\x2\x2\x2\xE45\xE42\x3\x2\x2\x2\xE45\xE46\x3\x2\x2\x2\xE46\xE47"+
		"\x3\x2\x2\x2\xE47\xE48\x5\x4D2\x26A\x2\xE48\xE49\a\x47C\x2\x2\xE49\xE4A"+
		"\x5\x4D2\x26A\x2\xE4A\xE4C\x3\x2\x2\x2\xE4B\xE40\x3\x2\x2\x2\xE4C\xE4F"+
		"\x3\x2\x2\x2\xE4D\xE4B\x3\x2\x2\x2\xE4D\xE4E\x3\x2\x2\x2\xE4E\xE91\x3"+
		"\x2\x2\x2\xE4F\xE4D\x3\x2\x2\x2\xE50\xE51\a\x438\x2\x2\xE51\xE59\a\x481"+
		"\x2\x2\xE52\xE54\a\x485\x2\x2\xE53\xE52\x3\x2\x2\x2\xE53\xE54\x3\x2\x2"+
		"\x2\xE54\xE55\x3\x2\x2\x2\xE55\xE56\a\x230\x2\x2\xE56\xE57\a\x46F\x2\x2"+
		"\xE57\xE58\a\x469\x2\x2\xE58\xE5A\t\"\x2\x2\xE59\xE53\x3\x2\x2\x2\xE59"+
		"\xE5A\x3\x2\x2\x2\xE5A\xE61\x3\x2\x2\x2\xE5B\xE5D\a\x485\x2\x2\xE5C\xE5B"+
		"\x3\x2\x2\x2\xE5C\xE5D\x3\x2\x2\x2\xE5D\xE5E\x3\x2\x2\x2\xE5E\xE5F\a\x13F"+
		"\x2\x2\xE5F\xE60\a\x46F\x2\x2\xE60\xE62\t#\x2\x2\xE61\xE5C\x3\x2\x2\x2"+
		"\xE61\xE62\x3\x2\x2\x2\xE62\xE6D\x3\x2\x2\x2\xE63\xE65\a\x485\x2\x2\xE64"+
		"\xE63\x3\x2\x2\x2\xE64\xE65\x3\x2\x2\x2\xE65\xE66\x3\x2\x2\x2\xE66\xE67"+
		"\a\x22A\x2\x2\xE67\xE6B\a\x46F\x2\x2\xE68\xE69\a\x469\x2\x2\xE69\xE6C"+
		"\a\x368\x2\x2\xE6A\xE6C\a\x1CB\x2\x2\xE6B\xE68\x3\x2\x2\x2\xE6B\xE6A\x3"+
		"\x2\x2\x2\xE6C\xE6E\x3\x2\x2\x2\xE6D\xE64\x3\x2\x2\x2\xE6D\xE6E\x3\x2"+
		"\x2\x2\xE6E\xE76\x3\x2\x2\x2\xE6F\xE71\a\x485\x2\x2\xE70\xE6F\x3\x2\x2"+
		"\x2\xE70\xE71\x3\x2\x2\x2\xE71\xE72\x3\x2\x2\x2\xE72\xE73\a\x22D\x2\x2"+
		"\xE73\xE74\a\x46F\x2\x2\xE74\xE75\a\x469\x2\x2\xE75\xE77\t\"\x2\x2\xE76"+
		"\xE70\x3\x2\x2\x2\xE76\xE77\x3\x2\x2\x2\xE77\xE7E\x3\x2\x2\x2\xE78\xE7A"+
		"\a\x485\x2\x2\xE79\xE78\x3\x2\x2\x2\xE79\xE7A\x3\x2\x2\x2\xE7A\xE7B\x3"+
		"\x2\x2\x2\xE7B\xE7C\a\x23F\x2\x2\xE7C\xE7D\a\x46F\x2\x2\xE7D\xE7F\t$\x2"+
		"\x2\xE7E\xE79\x3\x2\x2\x2\xE7E\xE7F\x3\x2\x2\x2\xE7F\xE86\x3\x2\x2\x2"+
		"\xE80\xE82\a\x485\x2\x2\xE81\xE80\x3\x2\x2\x2\xE81\xE82\x3\x2\x2\x2\xE82"+
		"\xE83\x3\x2\x2\x2\xE83\xE84\a\x3F1\x2\x2\xE84\xE85\a\x46F\x2\x2\xE85\xE87"+
		"\t\x13\x2\x2\xE86\xE81\x3\x2\x2\x2\xE86\xE87\x3\x2\x2\x2\xE87\xE8E\x3"+
		"\x2\x2\x2\xE88\xE8A\a\x485\x2\x2\xE89\xE88\x3\x2\x2\x2\xE89\xE8A\x3\x2"+
		"\x2\x2\xE8A\xE8B\x3\x2\x2\x2\xE8B\xE8C\a\x3B0\x2\x2\xE8C\xE8D\a\x46F\x2"+
		"\x2\xE8D\xE8F\t\x13\x2\x2\xE8E\xE89\x3\x2\x2\x2\xE8E\xE8F\x3\x2\x2\x2"+
		"\xE8F\xE90\x3\x2\x2\x2\xE90\xE92\a\x482\x2\x2\xE91\xE50\x3\x2\x2\x2\xE91"+
		"\xE92\x3\x2\x2\x2\xE92\xE96\x3\x2\x2\x2\xE93\xE94\a\x3B2\x2\x2\xE94\xE95"+
		"\a\x46F\x2\x2\xE95\xE97\t%\x2\x2\xE96\xE93\x3\x2\x2\x2\xE96\xE97\x3\x2"+
		"\x2\x2\xE97\x133\x3\x2\x2\x2\xE98\xE9A\a\x485\x2\x2\xE99\xE98\x3\x2\x2"+
		"\x2\xE99\xE9A\x3\x2\x2\x2\xE9A\xE9C\x3\x2\x2\x2\xE9B\xE9D\t&\x2\x2\xE9C"+
		"\xE9B\x3\x2\x2\x2\xE9C\xE9D\x3\x2\x2\x2\xE9D\xE9F\x3\x2\x2\x2\xE9E\xEA0"+
		"\a\x271\x2\x2\xE9F\xE9E\x3\x2\x2\x2\xE9F\xEA0\x3\x2\x2\x2\xEA0\xEA6\x3"+
		"\x2\x2\x2\xEA1\xEA7\x5\x136\x9C\x2\xEA2\xEA3\a\x481\x2\x2\xEA3\xEA4\x5"+
		"\x134\x9B\x2\xEA4\xEA5\a\x482\x2\x2\xEA5\xEA7\x3\x2\x2\x2\xEA6\xEA1\x3"+
		"\x2\x2\x2\xEA6\xEA2\x3\x2\x2\x2\xEA7\xEA9\x3\x2\x2\x2\xEA8\xE99\x3\x2"+
		"\x2\x2\xEA9\xEAA\x3\x2\x2\x2\xEAA\xEA8\x3\x2\x2\x2\xEAA\xEAB\x3\x2\x2"+
		"\x2\xEAB\x135\x3\x2\x2\x2\xEAC\xEB2\x5\x138\x9D\x2\xEAD\xEAE\a\x481\x2"+
		"\x2\xEAE\xEAF\x5\x134\x9B\x2\xEAF\xEB0\a\x482\x2\x2\xEB0\xEB2\x3\x2\x2"+
		"\x2\xEB1\xEAC\x3\x2\x2\x2\xEB1\xEAD\x3\x2\x2\x2\xEB2\x137\x3\x2\x2\x2"+
		"\xEB3\xED0\x5\x4D2\x26A\x2\xEB4\xEBF\x5\x4D2\x26A\x2\xEB5\xEB6\x5\x4D2"+
		"\x26A\x2\xEB6\xEB7\a\x47C\x2\x2\xEB7\xEB9\x3\x2\x2\x2\xEB8\xEB5\x3\x2"+
		"\x2\x2\xEB8\xEB9\x3\x2\x2\x2\xEB9\xEBA\x3\x2\x2\x2\xEBA\xEBB\x5\x4D2\x26A"+
		"\x2\xEBB\xEBC\a\x47C\x2\x2\xEBC\xEBD\x5\x4D2\x26A\x2\xEBD\xEBF\x3\x2\x2"+
		"\x2\xEBE\xEB4\x3\x2\x2\x2\xEBE\xEB8\x3\x2\x2\x2\xEBF\xECB\x3\x2\x2\x2"+
		"\xEC0\xECC\a\x46F\x2\x2\xEC1\xEC2\a\x471\x2\x2\xEC2\xECC\a\x470\x2\x2"+
		"\xEC3\xEC4\a\x472\x2\x2\xEC4\xECC\a\x46F\x2\x2\xEC5\xECC\a\x470\x2\x2"+
		"\xEC6\xEC7\a\x470\x2\x2\xEC7\xECC\a\x46F\x2\x2\xEC8\xECC\a\x471\x2\x2"+
		"\xEC9\xECA\a\x471\x2\x2\xECA\xECC\a\x46F\x2\x2\xECB\xEC0\x3\x2\x2\x2\xECB"+
		"\xEC1\x3\x2\x2\x2\xECB\xEC3\x3\x2\x2\x2\xECB\xEC5\x3\x2\x2\x2\xECB\xEC6"+
		"\x3\x2\x2\x2\xECB\xEC8\x3\x2\x2\x2\xECB\xEC9\x3\x2\x2\x2\xECC\xECD\x3"+
		"\x2\x2\x2\xECD\xECE\t!\x2\x2\xECE\xED0\x3\x2\x2\x2\xECF\xEB3\x3\x2\x2"+
		"\x2\xECF\xEBE\x3\x2\x2\x2\xED0\xEEC\x3\x2\x2\x2\xED1\xED2\x5\x4D2\x26A"+
		"\x2\xED2\xED3\a\x47C\x2\x2\xED3\xED5\x3\x2\x2\x2\xED4\xED1\x3\x2\x2\x2"+
		"\xED4\xED5\x3\x2\x2\x2\xED5\xED6\x3\x2\x2\x2\xED6\xED7\x5\x4D2\x26A\x2"+
		"\xED7\xED8\a\x47C\x2\x2\xED8\xED9\x5\x4D2\x26A\x2\xED9\xEE7\a\x481\x2"+
		"\x2\xEDA\xEE8\x5\x4D2\x26A\x2\xEDB\xEDC\x5\x4D2\x26A\x2\xEDC\xEDD\a\x47C"+
		"\x2\x2\xEDD\xEDF\x3\x2\x2\x2\xEDE\xEDB\x3\x2\x2\x2\xEDE\xEDF\x3\x2\x2"+
		"\x2\xEDF\xEE0\x3\x2\x2\x2\xEE0\xEE1\x5\x4D2\x26A\x2\xEE1\xEE2\a\x47C\x2"+
		"\x2\xEE2\xEE3\x5\x4D2\x26A\x2\xEE3\xEE4\x3\x2\x2\x2\xEE4\xEE5\a\x485\x2"+
		"\x2\xEE5\xEE6\t!\x2\x2\xEE6\xEE8\x3\x2\x2\x2\xEE7\xEDA\x3\x2\x2\x2\xEE7"+
		"\xEDE\x3\x2\x2\x2\xEE8\xEE9\x3\x2\x2\x2\xEE9\xEEA\a\x482\x2\x2\xEEA\xEEC"+
		"\x3\x2\x2\x2\xEEB\xECF\x3\x2\x2\x2\xEEB\xED4\x3\x2\x2\x2\xEEC\x139\x3"+
		"\x2\x2\x2\xEED\xEEE\a%\x2\x2\xEEE\xEEF\a\x150\x2\x2\xEEF\xEF0\a\xDD\x2"+
		"\x2\xEF0\xEF1\a\x3A1\x2\x2\xEF1\xEF2\x5\x4D2\x26A\x2\xEF2\xF02\a\x386"+
		"\x2\x2\xEF3\xEF4\a\x212\x2\x2\xEF4\xEF5\a\x46F\x2\x2\xEF5\xEF7\a\x46B"+
		"\x2\x2\xEF6\xEF8\a\x485\x2\x2\xEF7\xEF6\x3\x2\x2\x2\xEF7\xEF8\x3\x2\x2"+
		"\x2\xEF8\xF03\x3\x2\x2\x2\xEF9\xEFA\a\x331\x2\x2\xEFA\xEFB\a\x46F\x2\x2"+
		"\xEFB\xEFD\a\x46B\x2\x2\xEFC\xEFE\a\x485\x2\x2\xEFD\xEFC\x3\x2\x2\x2\xEFD"+
		"\xEFE\x3\x2\x2\x2\xEFE\xF03\x3\x2\x2\x2\xEFF\xF00\a\xCD\x2\x2\xF00\xF01"+
		"\a\x46F\x2\x2\xF01\xF03\x5\x4D2\x26A\x2\xF02\xEF3\x3\x2\x2\x2\xF02\xEF9"+
		"\x3\x2\x2\x2\xF02\xEFF\x3\x2\x2\x2\xF03\xF04\x3\x2\x2\x2\xF04\xF02\x3"+
		"\x2\x2\x2\xF04\xF05\x3\x2\x2\x2\xF05\xF1D\x3\x2\x2\x2\xF06\xF07\a%\x2"+
		"\x2\xF07\xF08\a\x150\x2\x2\xF08\xF09\a\xDD\x2\x2\xF09\xF0A\a\x3A1\x2\x2"+
		"\xF0A\xF0B\x5\x4D2\x26A\x2\xF0B\xF0C\a\x438\x2\x2\xF0C\xF0D\a\x481\x2"+
		"\x2\xF0D\xF0E\a\x403\x2\x2\xF0E\xF0F\a\x46F\x2\x2\xF0F\xF10\a\x64\x2\x2"+
		"\xF10\xF11\a\x485\x2\x2\xF11\xF12\a\x212\x2\x2\xF12\xF13\a\x46F\x2\x2"+
		"\xF13\xF18\a\x46B\x2\x2\xF14\xF15\a\x485\x2\x2\xF15\xF16\a\xCD\x2\x2\xF16"+
		"\xF17\a\x46F\x2\x2\xF17\xF19\x5\x4D2\x26A\x2\xF18\xF14\x3\x2\x2\x2\xF18"+
		"\xF19\x3\x2\x2\x2\xF19\xF1A\x3\x2\x2\x2\xF1A\xF1B\a\x482\x2\x2\xF1B\xF1D"+
		"\x3\x2\x2\x2\xF1C\xEED\x3\x2\x2\x2\xF1C\xF06\x3\x2\x2\x2\xF1D\x13B\x3"+
		"\x2\x2\x2\xF1E\xF1F\a%\x2\x2\xF1F\xF20\a\x150\x2\x2\xF20\xF21\a\x203\x2"+
		"\x2\xF21\xF24\x5\x4D2\x26A\x2\xF22\xF23\a\x46\x2\x2\xF23\xF25\x5\x4D2"+
		"\x26A\x2\xF24\xF22\x3\x2\x2\x2\xF24\xF25\x3\x2\x2\x2\xF25\xF26\x3\x2\x2"+
		"\x2\xF26\xF27\t\'\x2\x2\xF27\xF28\a\x481\x2\x2\xF28\xF29\a\xBA\x2\x2\xF29"+
		"\xF2D\a\x46F\x2\x2\xF2A\xF2E\a\x46B\x2\x2\xF2B\xF2E\a\x46C\x2\x2\xF2C"+
		"\xF2E\a\x26B\x2\x2\xF2D\xF2A\x3\x2\x2\x2\xF2D\xF2B\x3\x2\x2\x2\xF2D\xF2C"+
		"\x3\x2\x2\x2\xF2E\xF2F\x3\x2\x2\x2\xF2F\xF30\a\x485\x2\x2\xF30\xF31\a"+
		"\x2D1\x2\x2\xF31\xF33\a\x46F\x2\x2\xF32\xF34\t(\x2\x2\xF33\xF32\x3\x2"+
		"\x2\x2\xF33\xF34\x3\x2\x2\x2\xF34\xF35\x3\x2\x2\x2\xF35\xF36\a\x482\x2"+
		"\x2\xF36\xF37\x3\x2\x2\x2\xF37\xF41\a\x438\x2\x2\xF38\xF3A\a\x485\x2\x2"+
		"\xF39\xF38\x3\x2\x2\x2\xF39\xF3A\x3\x2\x2\x2\xF3A\xF3B\x3\x2\x2\x2\xF3B"+
		"\xF3C\a\x1FA\x2\x2\xF3C\xF3D\a\x46F\x2\x2\xF3D\xF42\t)\x2\x2\xF3E\xF3F"+
		"\a\xE7\x2\x2\xF3F\xF40\a\x46F\x2\x2\xF40\xF42\x5\x4D2\x26A\x2\xF41\xF39"+
		"\x3\x2\x2\x2\xF41\xF3E\x3\x2\x2\x2\xF42\xF43\x3\x2\x2\x2\xF43\xF41\x3"+
		"\x2\x2\x2\xF43\xF44\x3\x2\x2\x2\xF44\xF45\x3\x2\x2\x2\xF45\xF46\a\x482"+
		"\x2\x2\xF46\x13D\x3\x2\x2\x2\xF47\xF48\a\xCA\x2\x2\xF48\xF49\a\x150\x2"+
		"\x2\xF49\xF4A\a\x203\x2\x2\xF4A\xF4D\x5\x4D2\x26A\x2\xF4B\xF4C\a\x46\x2"+
		"\x2\xF4C\xF4E\x5\x4D2\x26A\x2\xF4D\xF4B\x3\x2\x2\x2\xF4D\xF4E\x3\x2\x2"+
		"\x2\xF4E\xF4F\x3\x2\x2\x2\xF4F\xF51\a\x181\x2\x2\xF50\xF52\a\x485\x2\x2"+
		"\xF51\xF50\x3\x2\x2\x2\xF51\xF52\x3\x2\x2\x2\xF52\xF54\x3\x2\x2\x2\xF53"+
		"\xF55\a\x481\x2\x2\xF54\xF53\x3\x2\x2\x2\xF54\xF55\x3\x2\x2\x2\xF55\xF58"+
		"\x3\x2\x2\x2\xF56\xF57\a\xBA\x2\x2\xF57\xF59\a\x46F\x2\x2\xF58\xF56\x3"+
		"\x2\x2\x2\xF58\xF59\x3\x2\x2\x2\xF59\xF5D\x3\x2\x2\x2\xF5A\xF5E\a\x46B"+
		"\x2\x2\xF5B\xF5E\a\x46C\x2\x2\xF5C\xF5E\a\x26B\x2\x2\xF5D\xF5A\x3\x2\x2"+
		"\x2\xF5D\xF5B\x3\x2\x2\x2\xF5D\xF5C\x3\x2\x2\x2\xF5E\xF66\x3\x2\x2\x2"+
		"\xF5F\xF60\a\x485\x2\x2\xF60\xF61\a\x2D1\x2\x2\xF61\xF63\a\x46F\x2\x2"+
		"\xF62\xF64\t(\x2\x2\xF63\xF62\x3\x2\x2\x2\xF63\xF64\x3\x2\x2\x2\xF64\xF65"+
		"\x3\x2\x2\x2\xF65\xF67\a\x482\x2\x2\xF66\xF5F\x3\x2\x2\x2\xF66\xF67\x3"+
		"\x2\x2\x2\xF67\xF77\x3\x2\x2\x2\xF68\xF72\a\x438\x2\x2\xF69\xF6B\a\x485"+
		"\x2\x2\xF6A\xF69\x3\x2\x2\x2\xF6A\xF6B\x3\x2\x2\x2\xF6B\xF6C\x3\x2\x2"+
		"\x2\xF6C\xF6D\a\x1FA\x2\x2\xF6D\xF6E\a\x46F\x2\x2\xF6E\xF73\t)\x2\x2\xF6F"+
		"\xF70\a\xE7\x2\x2\xF70\xF71\a\x46F\x2\x2\xF71\xF73\x5\x4D2\x26A\x2\xF72"+
		"\xF6A\x3\x2\x2\x2\xF72\xF6F\x3\x2\x2\x2\xF73\xF74\x3\x2\x2\x2\xF74\xF72"+
		"\x3\x2\x2\x2\xF74\xF75\x3\x2\x2\x2\xF75\xF76\x3\x2\x2\x2\xF76\xF78\a\x482"+
		"\x2\x2\xF77\xF68\x3\x2\x2\x2\xF77\xF78\x3\x2\x2\x2\xF78\x13F\x3\x2\x2"+
		"\x2\xF79\xF7A\a%\x2\x2\xF7A\xF7B\a\x150\x2\x2\xF7B\xF7C\a\x32F\x2\x2\xF7C"+
		"\xF7F\a\x2D4\x2\x2\xF7D\xF80\x5\x4D2\x26A\x2\xF7E\xF80\a\xFB\x2\x2\xF7F"+
		"\xF7D\x3\x2\x2\x2\xF7F\xF7E\x3\x2\x2\x2\xF80\xF81\x3\x2\x2\x2\xF81\xF82"+
		"\a\x438\x2\x2\xF82\xF83\a\x481\x2\x2\xF83\xF84\a\x229\x2\x2\xF84\xF85"+
		"\a\x46F\x2\x2\xF85\xFAB\a\x469\x2\x2\xF86\xF88\a\x485\x2\x2\xF87\xF86"+
		"\x3\x2\x2\x2\xF87\xF88\x3\x2\x2\x2\xF88\xF89\x3\x2\x2\x2\xF89\xF8A\a\x14"+
		"\x2\x2\xF8A\xF8B\a\xC9\x2\x2\xF8B\xF99\a\x46F\x2\x2\xF8C\xF9A\aG\x2\x2"+
		"\xF8D\xF8F\a\x485\x2\x2\xF8E\xF8D\x3\x2\x2\x2\xF8E\xF8F\x3\x2\x2\x2\xF8F"+
		"\xF90\x3\x2\x2\x2\xF90\xF91\a\x469\x2\x2\xF91\xF92\a\x3EB\x2\x2\xF92\xF96"+
		"\a\x469\x2\x2\xF93\xF94\a\x485\x2\x2\xF94\xF96\a\x469\x2\x2\xF95\xF8E"+
		"\x3\x2\x2\x2\xF95\xF93\x3\x2\x2\x2\xF96\xF97\x3\x2\x2\x2\xF97\xF95\x3"+
		"\x2\x2\x2\xF97\xF98\x3\x2\x2\x2\xF98\xF9A\x3\x2\x2\x2\xF99\xF8C\x3\x2"+
		"\x2\x2\xF99\xF95\x3\x2\x2\x2\xF9A\xFAC\x3\x2\x2\x2\xF9B\xF9C\a\x283\x2"+
		"\x2\xF9C\xFA7\a\x46F\x2\x2\xF9D\xF9F\a\x485\x2\x2\xF9E\xF9D\x3\x2\x2\x2"+
		"\xF9E\xF9F\x3\x2\x2\x2\xF9F\xFA0\x3\x2\x2\x2\xFA0\xFA1\a\x469\x2\x2\xFA1"+
		"\xFA2\a\x3EB\x2\x2\xFA2\xFA8\a\x469\x2\x2\xFA3\xFA5\a\x485\x2\x2\xFA4"+
		"\xFA3\x3\x2\x2\x2\xFA4\xFA5\x3\x2\x2\x2\xFA5\xFA6\x3\x2\x2\x2\xFA6\xFA8"+
		"\a\x469\x2\x2\xFA7\xF9E\x3\x2\x2\x2\xFA7\xFA4\x3\x2\x2\x2\xFA8\xFA9\x3"+
		"\x2\x2\x2\xFA9\xFA7\x3\x2\x2\x2\xFA9\xFAA\x3\x2\x2\x2\xFAA\xFAC\x3\x2"+
		"\x2\x2\xFAB\xF87\x3\x2\x2\x2\xFAB\xF9B\x3\x2\x2\x2\xFAC\xFB3\x3\x2\x2"+
		"\x2\xFAD\xFAF\a\x485\x2\x2\xFAE\xFAD\x3\x2\x2\x2\xFAE\xFAF\x3\x2\x2\x2"+
		"\xFAF\xFB0\x3\x2\x2\x2\xFB0\xFB1\a\x231\x2\x2\xFB1\xFB2\a\x46F\x2\x2\xFB2"+
		"\xFB4\a\x469\x2\x2\xFB3\xFAE\x3\x2\x2\x2\xFB3\xFB4\x3\x2\x2\x2\xFB4\xFBB"+
		"\x3\x2\x2\x2\xFB5\xFB7\a\x485\x2\x2\xFB6\xFB5\x3\x2\x2\x2\xFB6\xFB7\x3"+
		"\x2\x2\x2\xFB7\xFB8\x3\x2\x2\x2\xFB8\xFB9\a\x234\x2\x2\xFB9\xFBA\a\x46F"+
		"\x2\x2\xFBA\xFBC\a\x469\x2\x2\xFBB\xFB6\x3\x2\x2\x2\xFBB\xFBC\x3\x2\x2"+
		"\x2\xFBC\xFBD\x3\x2\x2\x2\xFBD\xFBE\a\x482\x2\x2\xFBE\x141\x3\x2\x2\x2"+
		"\xFBF\xFC0\a\xCA\x2\x2\xFC0\xFC1\a\x150\x2\x2\xFC1\xFC2\a\x32F\x2\x2\xFC2"+
		"\xFC3\a\x2D4\x2\x2\xFC3\xFC4\x5\x4D2\x26A\x2\xFC4\xFC5\a\x438\x2\x2\xFC5"+
		"\xFC6\a\x481\x2\x2\xFC6\xFC7\a\x229\x2\x2\xFC7\xFC8\a\x46F\x2\x2\xFC8"+
		"\xFEE\a\x469\x2\x2\xFC9\xFCB\a\x485\x2\x2\xFCA\xFC9\x3\x2\x2\x2\xFCA\xFCB"+
		"\x3\x2\x2\x2\xFCB\xFCC\x3\x2\x2\x2\xFCC\xFCD\a\x14\x2\x2\xFCD\xFCE\a\xC9"+
		"\x2\x2\xFCE\xFDC\a\x46F\x2\x2\xFCF\xFDD\aG\x2\x2\xFD0\xFD2\a\x485\x2\x2"+
		"\xFD1\xFD0\x3\x2\x2\x2\xFD1\xFD2\x3\x2\x2\x2\xFD2\xFD3\x3\x2\x2\x2\xFD3"+
		"\xFD4\a\x469\x2\x2\xFD4\xFD5\a\x3EB\x2\x2\xFD5\xFD9\a\x469\x2\x2\xFD6"+
		"\xFD7\a\x485\x2\x2\xFD7\xFD9\a\x469\x2\x2\xFD8\xFD1\x3\x2\x2\x2\xFD8\xFD6"+
		"\x3\x2\x2\x2\xFD9\xFDA\x3\x2\x2\x2\xFDA\xFD8\x3\x2\x2\x2\xFDA\xFDB\x3"+
		"\x2\x2\x2\xFDB\xFDD\x3\x2\x2\x2\xFDC\xFCF\x3\x2\x2\x2\xFDC\xFD8\x3\x2"+
		"\x2\x2\xFDD\xFEF\x3\x2\x2\x2\xFDE\xFDF\a\x283\x2\x2\xFDF\xFEA\a\x46F\x2"+
		"\x2\xFE0\xFE2\a\x485\x2\x2\xFE1\xFE0\x3\x2\x2\x2\xFE1\xFE2\x3\x2\x2\x2"+
		"\xFE2\xFE3\x3\x2\x2\x2\xFE3\xFE4\a\x469\x2\x2\xFE4\xFE5\a\x3EB\x2\x2\xFE5"+
		"\xFEB\a\x469\x2\x2\xFE6\xFE8\a\x485\x2\x2\xFE7\xFE6\x3\x2\x2\x2\xFE7\xFE8"+
		"\x3\x2\x2\x2\xFE8\xFE9\x3\x2\x2\x2\xFE9\xFEB\a\x469\x2\x2\xFEA\xFE1\x3"+
		"\x2\x2\x2\xFEA\xFE7\x3\x2\x2\x2\xFEB\xFEC\x3\x2\x2\x2\xFEC\xFEA\x3\x2"+
		"\x2\x2\xFEC\xFED\x3\x2\x2\x2\xFED\xFEF\x3\x2\x2\x2\xFEE\xFCA\x3\x2\x2"+
		"\x2\xFEE\xFDE\x3\x2\x2\x2\xFEF\xFF6\x3\x2\x2\x2\xFF0\xFF2\a\x485\x2\x2"+
		"\xFF1\xFF0\x3\x2\x2\x2\xFF1\xFF2\x3\x2\x2\x2\xFF2\xFF3\x3\x2\x2\x2\xFF3"+
		"\xFF4\a\x231\x2\x2\xFF4\xFF5\a\x46F\x2\x2\xFF5\xFF7\a\x469\x2\x2\xFF6"+
		"\xFF1\x3\x2\x2\x2\xFF6\xFF7\x3\x2\x2\x2\xFF7\xFFE\x3\x2\x2\x2\xFF8\xFFA"+
		"\a\x485\x2\x2\xFF9\xFF8\x3\x2\x2\x2\xFF9\xFFA\x3\x2\x2\x2\xFFA\xFFB\x3"+
		"\x2\x2\x2\xFFB\xFFC\a\x234\x2\x2\xFFC\xFFD\a\x46F\x2\x2\xFFD\xFFF\a\x469"+
		"\x2\x2\xFFE\xFF9\x3\x2\x2\x2\xFFE\xFFF\x3\x2\x2\x2\xFFF\x1000\x3\x2\x2"+
		"\x2\x1000\x1001\a\x482\x2\x2\x1001\x143\x3\x2\x2\x2\x1002\x1003\a%\x2"+
		"\x2\x1003\x1004\a\x184\x2\x2\x1004\x1005\ay\x2\x2\x1005\x1010\x5\x4D2"+
		"\x26A\x2\x1006\x100B\a\x30E\x2\x2\x1007\x1008\a\x438\x2\x2\x1008\x1009"+
		"\a\b\x2\x2\x1009\x100A\a\x46F\x2\x2\x100A\x100C\t\x13\x2\x2\x100B\x1007"+
		"\x3\x2\x2\x2\x100B\x100C\x3\x2\x2\x2\x100C\x1011\x3\x2\x2\x2\x100D\x1011"+
		"\a\x31D\x2\x2\x100E\x100F\a:\x2\x2\x100F\x1011\a\xF9\x2\x2\x1010\x1006"+
		"\x3\x2\x2\x2\x1010\x100D\x3\x2\x2\x2\x1010\x100E\x3\x2\x2\x2\x1011\x145"+
		"\x3\x2\x2\x2\x1012\x1013\a\xCA\x2\x2\x1013\x1014\a\x184\x2\x2\x1014\x1015"+
		"\ay\x2\x2\x1015\x1019\x5\x4D2\x26A\x2\x1016\x1017\a\x294\x2\x2\x1017\x1018"+
		"\a\x15D\x2\x2\x1018\x101A\x5\x4D2\x26A\x2\x1019\x1016\x3\x2\x2\x2\x1019"+
		"\x101A\x3\x2\x2\x2\x101A\x101E\x3\x2\x2\x2\x101B\x101C\a\x1C2\x2\x2\x101C"+
		"\x101D\a\x2BF\x2\x2\x101D\x101F\a\x46B\x2\x2\x101E\x101B\x3\x2\x2\x2\x101E"+
		"\x101F\x3\x2\x2\x2\x101F\x1024\x3\x2\x2\x2\x1020\x1021\a\x438\x2\x2\x1021"+
		"\x1022\a\b\x2\x2\x1022\x1023\a\x46F\x2\x2\x1023\x1025\t\x13\x2\x2\x1024"+
		"\x1020\x3\x2\x2\x2\x1024\x1025\x3\x2\x2\x2\x1025\x1028\x3\x2\x2\x2\x1026"+
		"\x1027\a:\x2\x2\x1027\x1029\a\xF9\x2\x2\x1028\x1026\x3\x2\x2\x2\x1028"+
		"\x1029\x3\x2\x2\x2\x1029\x102C\x3\x2\x2\x2\x102A\x102B\a\x46\x2\x2\x102B"+
		"\x102D\x5\x4D2\x26A\x2\x102C\x102A\x3\x2\x2\x2\x102C\x102D\x3\x2\x2\x2"+
		"\x102D\x147\x3\x2\x2\x2\x102E\x102F\a%\x2\x2\x102F\x1030\a\x184\x2\x2"+
		"\x1030\x1031\a\x3BF\x2\x2\x1031\x103F\x5\x4D2\x26A\x2\x1032\x1033\a\r"+
		"\x2\x2\x1033\x1034\a\x46B\x2\x2\x1034\x1035\a\x1FA\x2\x2\x1035\x1040\t"+
		"*\x2\x2\x1036\x103D\a\x11E\x2\x2\x1037\x1038\a\x46B\x2\x2\x1038\x1039"+
		"\a\x1FA\x2\x2\x1039\x103E\t*\x2\x2\x103A\x103B\a\x18\x2\x2\x103B\x103E"+
		"\t*\x2\x2\x103C\x103E\a\x18\x2\x2\x103D\x1037\x3\x2\x2\x2\x103D\x103A"+
		"\x3\x2\x2\x2\x103D\x103C\x3\x2\x2\x2\x103E\x1040\x3\x2\x2\x2\x103F\x1032"+
		"\x3\x2\x2\x2\x103F\x1036\x3\x2\x2\x2\x1040\x149\x3\x2\x2\x2\x1041\x1042"+
		"\a\xCA\x2\x2\x1042\x1043\a\x184\x2\x2\x1043\x1044\a\x3BF\x2\x2\x1044\x1050"+
		"\x5\x4D2\x26A\x2\x1045\x104E\a\x181\x2\x2\x1046\x1047\x5\x4D2\x26A\x2"+
		"\x1047\x1048\a\x47C\x2\x2\x1048\x104A\x3\x2\x2\x2\x1049\x1046\x3\x2\x2"+
		"\x2\x1049\x104A\x3\x2\x2\x2\x104A\x104B\x3\x2\x2\x2\x104B\x104F\x5\x4D2"+
		"\x26A\x2\x104C\x104D\a\x3D5\x2\x2\x104D\x104F\a\x3BF\x2\x2\x104E\x1049"+
		"\x3\x2\x2\x2\x104E\x104C\x3\x2\x2\x2\x104F\x1051\x3\x2\x2\x2\x1050\x1045"+
		"\x3\x2\x2\x2\x1050\x1051\x3\x2\x2\x2\x1051\x1054\x3\x2\x2\x2\x1052\x1053"+
		"\a\x46\x2\x2\x1053\x1055\x5\x4D2\x26A\x2\x1054\x1052\x3\x2\x2\x2\x1054"+
		"\x1055\x3\x2\x2\x2\x1055\x14B\x3\x2\x2\x2\x1056\x1057\a%\x2\x2\x1057\x1058"+
		"\a\x216\x2\x2\x1058\x109C\x5\x4D2\x26A\x2\x1059\x105B\t\x1B\x2\x2\x105A"+
		"\x1059\x3\x2\x2\x2\x105A\x105B\x3\x2\x2\x2\x105B\x109D\x3\x2\x2\x2\x105C"+
		"\x106A\a\x438\x2\x2\x105D\x105E\a\x2BE\x2\x2\x105E\x1062\a\x46F\x2\x2"+
		"\x105F\x1063\a\x46B\x2\x2\x1060\x1061\a\x46C\x2\x2\x1061\x1063\a\x1A1"+
		"\x2\x2\x1062\x105F\x3\x2\x2\x2\x1062\x1060\x3\x2\x2\x2\x1063\x1067\x3"+
		"\x2\x2\x2\x1064\x1066\t+\x2\x2\x1065\x1064\x3\x2\x2\x2\x1066\x1069\x3"+
		"\x2\x2\x2\x1067\x1065\x3\x2\x2\x2\x1067\x1068\x3\x2\x2\x2\x1068\x106B"+
		"\x3\x2\x2\x2\x1069\x1067\x3\x2\x2\x2\x106A\x105D\x3\x2\x2\x2\x106A\x106B"+
		"\x3\x2\x2\x2\x106B\x1075\x3\x2\x2\x2\x106C\x106D\a\x293\x2\x2\x106D\x106E"+
		"\a\x46F\x2\x2\x106E\x1072\a\x46B\x2\x2\x106F\x1071\t+\x2\x2\x1070\x106F"+
		"\x3\x2\x2\x2\x1071\x1074\x3\x2\x2\x2\x1072\x1070\x3\x2\x2\x2\x1072\x1073"+
		"\x3\x2\x2\x2\x1073\x1076\x3\x2\x2\x2\x1074\x1072\x3\x2\x2\x2\x1075\x106C"+
		"\x3\x2\x2\x2\x1075\x1076\x3\x2\x2\x2\x1076\x107A\x3\x2\x2\x2\x1077\x1078"+
		"\a\xFA\x2\x2\x1078\x1079\a\x46F\x2\x2\x1079\x107B\x5\x4D2\x26A\x2\x107A"+
		"\x1077\x3\x2\x2\x2\x107A\x107B\x3\x2\x2\x2\x107B\x107F\x3\x2\x2\x2\x107C"+
		"\x107D\a\xFD\x2\x2\x107D\x107E\a\x46F\x2\x2\x107E\x1080\x5\x4D2\x26A\x2"+
		"\x107F\x107C\x3\x2\x2\x2\x107F\x1080\x3\x2\x2\x2\x1080\x1084\x3\x2\x2"+
		"\x2\x1081\x1082\a\x254\x2\x2\x1082\x1083\a\x46F\x2\x2\x1083\x1085\x5\x4D2"+
		"\x26A\x2\x1084\x1081\x3\x2\x2\x2\x1084\x1085\x3\x2\x2\x2\x1085\x1089\x3"+
		"\x2\x2\x2\x1086\x1087\a\x92\x2\x2\x1087\x1088\a\x46F\x2\x2\x1088\x108A"+
		"\t\x13\x2\x2\x1089\x1086\x3\x2\x2\x2\x1089\x108A\x3\x2\x2\x2\x108A\x108E"+
		"\x3\x2\x2\x2\x108B\x108C\a\x91\x2\x2\x108C\x108D\a\x46F\x2\x2\x108D\x108F"+
		"\t\x13\x2\x2\x108E\x108B\x3\x2\x2\x2\x108E\x108F\x3\x2\x2\x2\x108F\x1093"+
		"\x3\x2\x2\x2\x1090\x1091\a\xCD\x2\x2\x1091\x1092\a\x46F\x2\x2\x1092\x1094"+
		"\x5\x4D2\x26A\x2\x1093\x1090\x3\x2\x2\x2\x1093\x1094\x3\x2\x2\x2\x1094"+
		"\x1097\x3\x2\x2\x2\x1095\x1096\a\x260\x2\x2\x1096\x1098\a\xCD\x2\x2\x1097"+
		"\x1095\x3\x2\x2\x2\x1097\x1098\x3\x2\x2\x2\x1098\x109D\x3\x2\x2\x2\x1099"+
		"\x109A\t\x19\x2\x2\x109A\x109B\a\xCD\x2\x2\x109B\x109D\x5\x4D2\x26A\x2"+
		"\x109C\x105A\x3\x2\x2\x2\x109C\x105C\x3\x2\x2\x2\x109C\x1099\x3\x2\x2"+
		"\x2\x109D\x14D\x3\x2\x2\x2\x109E\x109F\a\xCA\x2\x2\x109F\x10A0\a\x216"+
		"\x2\x2\x10A0\x10FB\x5\x4D2\x26A\x2\x10A1\x10AF\a\x438\x2\x2\x10A2\x10A3"+
		"\a\x2BE\x2\x2\x10A3\x10A7\a\x46F\x2\x2\x10A4\x10A8\a\x46B\x2\x2\x10A5"+
		"\x10A6\a\x46C\x2\x2\x10A6\x10A8\a\x1A1\x2\x2\x10A7\x10A4\x3\x2\x2\x2\x10A7"+
		"\x10A5\x3\x2\x2\x2\x10A8\x10AC\x3\x2\x2\x2\x10A9\x10AB\t+\x2\x2\x10AA"+
		"\x10A9\x3\x2\x2\x2\x10AB\x10AE\x3\x2\x2\x2\x10AC\x10AA\x3\x2\x2\x2\x10AC"+
		"\x10AD\x3\x2\x2\x2\x10AD\x10B0\x3\x2\x2\x2\x10AE\x10AC\x3\x2\x2\x2\x10AF"+
		"\x10A2\x3\x2\x2\x2\x10AF\x10B0\x3\x2\x2\x2\x10B0\x10B7\x3\x2\x2\x2\x10B1"+
		"\x10B3\a\x485\x2\x2\x10B2\x10B1\x3\x2\x2\x2\x10B2\x10B3\x3\x2\x2\x2\x10B3"+
		"\x10B4\x3\x2\x2\x2\x10B4\x10B5\a\x394\x2\x2\x10B5\x10B6\a\x46F\x2\x2\x10B6"+
		"\x10B8\a\x46C\x2\x2\x10B7\x10B2\x3\x2\x2\x2\x10B7\x10B8\x3\x2\x2\x2\x10B8"+
		"\x10BF\x3\x2\x2\x2\x10B9\x10BB\a\x485\x2\x2\x10BA\x10B9\x3\x2\x2\x2\x10BA"+
		"\x10BB\x3\x2\x2\x2\x10BB\x10BC\x3\x2\x2\x2\x10BC\x10BD\a\xFA\x2\x2\x10BD"+
		"\x10BE\a\x46F\x2\x2\x10BE\x10C0\x5\x4D2\x26A\x2\x10BF\x10BA\x3\x2\x2\x2"+
		"\x10BF\x10C0\x3\x2\x2\x2\x10C0\x10C7\x3\x2\x2\x2\x10C1\x10C3\a\x485\x2"+
		"\x2\x10C2\x10C1\x3\x2\x2\x2\x10C2\x10C3\x3\x2\x2\x2\x10C3\x10C4\x3\x2"+
		"\x2\x2\x10C4\x10C5\a\xFD\x2\x2\x10C5\x10C6\a\x46F\x2\x2\x10C6\x10C8\x5"+
		"\x4D2\x26A\x2\x10C7\x10C2\x3\x2\x2\x2\x10C7\x10C8\x3\x2\x2\x2\x10C8\x10CF"+
		"\x3\x2\x2\x2\x10C9\x10CB\a\x485\x2\x2\x10CA\x10C9\x3\x2\x2\x2\x10CA\x10CB"+
		"\x3\x2\x2\x2\x10CB\x10CC\x3\x2\x2\x2\x10CC\x10CD\a\x91\x2\x2\x10CD\x10CE"+
		"\a\x46F\x2\x2\x10CE\x10D0\t\x13\x2\x2\x10CF\x10CA\x3\x2\x2\x2\x10CF\x10D0"+
		"\x3\x2\x2\x2\x10D0\x10D7\x3\x2\x2\x2\x10D1\x10D3\a\x485\x2\x2\x10D2\x10D1"+
		"\x3\x2\x2\x2\x10D2\x10D3\x3\x2\x2\x2\x10D3\x10D4\x3\x2\x2\x2\x10D4\x10D5"+
		"\a\x92\x2\x2\x10D5\x10D6\a\x46F\x2\x2\x10D6\x10D8\t\x13\x2\x2\x10D7\x10D2"+
		"\x3\x2\x2\x2\x10D7\x10D8\x3\x2\x2\x2\x10D8\x10DF\x3\x2\x2\x2\x10D9\x10DB"+
		"\a\x485\x2\x2\x10DA\x10D9\x3\x2\x2\x2\x10DA\x10DB\x3\x2\x2\x2\x10DB\x10DC"+
		"\x3\x2\x2\x2\x10DC\x10DD\a\xCD\x2\x2\x10DD\x10DE\a\x46F\x2\x2\x10DE\x10E0"+
		"\x5\x4D2\x26A\x2\x10DF\x10DA\x3\x2\x2\x2\x10DF\x10E0\x3\x2\x2\x2\x10E0"+
		"\x10FC\x3\x2\x2\x2\x10E1\x10F9\a\x181\x2\x2\x10E2\x10E3\a\x437\x2\x2\x10E3"+
		"\x10EA\a\x438\x2\x2\x10E4\x10E6\a\x485\x2\x2\x10E5\x10E4\x3\x2\x2\x2\x10E5"+
		"\x10E6\x3\x2\x2\x2\x10E6\x10E7\x3\x2\x2\x2\x10E7\x10E8\a\xFA\x2\x2\x10E8"+
		"\x10E9\a\x46F\x2\x2\x10E9\x10EB\x5\x4D2\x26A\x2\x10EA\x10E5\x3\x2\x2\x2"+
		"\x10EA\x10EB\x3\x2\x2\x2\x10EB\x10F2\x3\x2\x2\x2\x10EC\x10EE\a\x485\x2"+
		"\x2\x10ED\x10EC\x3\x2\x2\x2\x10ED\x10EE\x3\x2\x2\x2\x10EE\x10EF\x3\x2"+
		"\x2\x2\x10EF\x10F0\a\xFD\x2\x2\x10F0\x10F1\a\x46F\x2\x2\x10F1\x10F3\a"+
		"\x46B\x2\x2\x10F2\x10ED\x3\x2\x2\x2\x10F2\x10F3\x3\x2\x2\x2\x10F3\x10FA"+
		"\x3\x2\x2\x2\x10F4\x10F5\a}\x2\x2\x10F5\x10FA\x5\x4D2\x26A\x2\x10F6\x10F7"+
		"\a?\x2\x2\x10F7\x10F8\a\x1F2\x2\x2\x10F8\x10FA\x5\x4D2\x26A\x2\x10F9\x10E2"+
		"\x3\x2\x2\x2\x10F9\x10F4\x3\x2\x2\x2\x10F9\x10F6\x3\x2\x2\x2\x10FA\x10FC"+
		"\x3\x2\x2\x2\x10FB\x10A1\x3\x2\x2\x2\x10FB\x10E1\x3\x2\x2\x2\x10FC\x14F"+
		"\x3\x2\x2\x2\x10FD\x10FE\a%\x2\x2\x10FE\x10FF\a\x216\x2\x2\x10FF\x1111"+
		"\x5\x4D2\x26A\x2\x1100\x1102\t\x1B\x2\x2\x1101\x1100\x3\x2\x2\x2\x1101"+
		"\x1102\x3\x2\x2\x2\x1102\x1112\x3\x2\x2\x2\x1103\x110F\a\x438\x2\x2\x1104"+
		"\x1105\a\x2BE\x2\x2\x1105\x1106\a\x46F\x2\x2\x1106\x110A\a\x46B\x2\x2"+
		"\x1107\x1108\a\x293\x2\x2\x1108\x1109\a\x46F\x2\x2\x1109\x110B\a\x46B"+
		"\x2\x2\x110A\x1107\x3\x2\x2\x2\x110A\x110B\x3\x2\x2\x2\x110B\x1110\x3"+
		"\x2\x2\x2\x110C\x110D\a\x254\x2\x2\x110D\x110E\a\x46F\x2\x2\x110E\x1110"+
		"\x5\x4D2\x26A\x2\x110F\x1104\x3\x2\x2\x2\x110F\x110C\x3\x2\x2\x2\x1110"+
		"\x1112\x3\x2\x2\x2\x1111\x1101\x3\x2\x2\x2\x1111\x1103\x3\x2\x2\x2\x1112"+
		"\x151\x3\x2\x2\x2\x1113\x1114\a\xCA\x2\x2\x1114\x1115\a\x216\x2\x2\x1115"+
		"\x1116\x5\x4D2\x26A\x2\x1116\x1117\a\x438\x2\x2\x1117\x1118\a\x2BE\x2"+
		"\x2\x1118\x1119\a\x46F\x2\x2\x1119\x111D\a\x46B\x2\x2\x111A\x111B\a\x394"+
		"\x2\x2\x111B\x111C\a\x46F\x2\x2\x111C\x111E\a\x46C\x2\x2\x111D\x111A\x3"+
		"\x2\x2\x2\x111D\x111E\x3\x2\x2\x2\x111E\x153\x3\x2\x2\x2\x111F\x1120\a"+
		"%\x2\x2\x1120\x1121\a\x216\x2\x2\x1121\x1139\x5\x4D2\x26A\x2\x1122\x1124"+
		"\t\x1B\x2\x2\x1123\x1122\x3\x2\x2\x2\x1123\x1124\x3\x2\x2\x2\x1124\x113A"+
		"\x3\x2\x2\x2\x1125\x1137\a\x438\x2\x2\x1126\x1127\a\x2BE\x2\x2\x1127\x1128"+
		"\a\x46F\x2\x2\x1128\x1132\a\x46B\x2\x2\x1129\x112A\a\x293\x2\x2\x112A"+
		"\x112B\a\x46F\x2\x2\x112B\x112F\a\x46B\x2\x2\x112C\x112E\t+\x2\x2\x112D"+
		"\x112C\x3\x2\x2\x2\x112E\x1131\x3\x2\x2\x2\x112F\x112D\x3\x2\x2\x2\x112F"+
		"\x1130\x3\x2\x2\x2\x1130\x1133\x3\x2\x2\x2\x1131\x112F\x3\x2\x2\x2\x1132"+
		"\x1129\x3\x2\x2\x2\x1132\x1133\x3\x2\x2\x2\x1133\x1138\x3\x2\x2\x2\x1134"+
		"\x1135\a\x254\x2\x2\x1135\x1136\a\x46F\x2\x2\x1136\x1138\x5\x4D2\x26A"+
		"\x2\x1137\x1126\x3\x2\x2\x2\x1137\x1134\x3\x2\x2\x2\x1138\x113A\x3\x2"+
		"\x2\x2\x1139\x1123\x3\x2\x2\x2\x1139\x1125\x3\x2\x2\x2\x113A\x155\x3\x2"+
		"\x2\x2\x113B\x113C\a\xCA\x2\x2\x113C\x113D\a\x216\x2\x2\x113D\x114E\x5"+
		"\x4D2\x26A\x2\x113E\x113F\a\x438\x2\x2\x113F\x1140\a\x2BE\x2\x2\x1140"+
		"\x1141\a\x46F\x2\x2\x1141\x1143\a\x46B\x2\x2\x1142\x1144\a\x253\x2\x2"+
		"\x1143\x1142\x3\x2\x2\x2\x1143\x1144\x3\x2\x2\x2\x1144\x114A\x3\x2\x2"+
		"\x2\x1145\x1146\a\x92\x2\x2\x1146\x1148\a\x46F\x2\x2\x1147\x1149\t\x13"+
		"\x2\x2\x1148\x1147\x3\x2\x2\x2\x1148\x1149\x3\x2\x2\x2\x1149\x114B\x3"+
		"\x2\x2\x2\x114A\x1145\x3\x2\x2\x2\x114A\x114B\x3\x2\x2\x2\x114B\x114F"+
		"\x3\x2\x2\x2\x114C\x114D\a\x181\x2\x2\x114D\x114F\a\x437\x2\x2\x114E\x113E"+
		"\x3\x2\x2\x2\x114E\x114C\x3\x2\x2\x2\x114F\x157\x3\x2\x2\x2\x1150\x1151"+
		"\a%\x2\x2\x1151\x1152\a\x220\x2\x2\x1152\x1168\a\x1F2\x2\x2\x1153\x1155"+
		"\a\x173\x2\x2\x1154\x1153\x3\x2\x2\x2\x1154\x1155\x3\x2\x2\x2\x1155\x1156"+
		"\x3\x2\x2\x2\x1156\x1157\a\x315\x2\x2\x1157\x1158\a\x438\x2\x2\x1158\x1159"+
		"\a\x12E\x2\x2\x1159\x115A\aq\x2\x2\x115A\x115B\a\x2BE\x2\x2\x115B\x115C"+
		"\a\x46F\x2\x2\x115C\x1169\a\x46B\x2\x2\x115D\x115E\t\x19\x2\x2\x115E\x115F"+
		"\a\x12E\x2\x2\x115F\x1166\aq\x2\x2\x1160\x1161\a\x37C\x2\x2\x1161\x1162"+
		"\a\x220\x2\x2\x1162\x1167\a\x1F2\x2\x2\x1163\x1164\a\x2BE\x2\x2\x1164"+
		"\x1165\a\x46F\x2\x2\x1165\x1167\a\x46B\x2\x2\x1166\x1160\x3\x2\x2\x2\x1166"+
		"\x1163\x3\x2\x2\x2\x1167\x1169\x3\x2\x2\x2\x1168\x1154\x3\x2\x2\x2\x1168"+
		"\x115D\x3\x2\x2\x2\x1169\x159\x3\x2\x2\x2\x116A\x116B\a\xCA\x2\x2\x116B"+
		"\x116C\a\x220\x2\x2\x116C\x116D\a\x1F2\x2\x2\x116D\x116E\a\x12E\x2\x2"+
		"\x116E\x116F\aq\x2\x2\x116F\x1170\a\x2BE\x2\x2\x1170\x1171\a\x46F\x2\x2"+
		"\x1171\x1172\a\x46B\x2\x2\x1172\x15B\x3\x2\x2\x2\x1173\x1174\a%\x2\x2"+
		"\x1174\x1175\a\x220\x2\x2\x1175\x1191\a\x1F2\x2\x2\x1176\x1178\a\x173"+
		"\x2\x2\x1177\x1176\x3\x2\x2\x2\x1177\x1178\x3\x2\x2\x2\x1178\x1179\x3"+
		"\x2\x2\x2\x1179\x117A\a\x315\x2\x2\x117A\x117B\a\x438\x2\x2\x117B\x117C"+
		"\a\x12E\x2\x2\x117C\x117D\aq\x2\x2\x117D\x117E\a\x2BE\x2\x2\x117E\x117F"+
		"\a\x46F\x2\x2\x117F\x1192\a\x46B\x2\x2\x1180\x1181\a\r\x2\x2\x1181\x1182"+
		"\a\x12E\x2\x2\x1182\x1189\aq\x2\x2\x1183\x1184\a\x37C\x2\x2\x1184\x1185"+
		"\a\x220\x2\x2\x1185\x118A\a\x1F2\x2\x2\x1186\x1187\a\x2BE\x2\x2\x1187"+
		"\x1188\a\x46F\x2\x2\x1188\x118A\a\x46B\x2\x2\x1189\x1183\x3\x2\x2\x2\x1189"+
		"\x1186\x3\x2\x2\x2\x118A\x1192\x3\x2\x2\x2\x118B\x118C\a\x11E\x2\x2\x118C"+
		"\x118D\a\x12E\x2\x2\x118D\x118E\aq\x2\x2\x118E\x118F\a\x2BE\x2\x2\x118F"+
		"\x1190\a\x46F\x2\x2\x1190\x1192\a\x46B\x2\x2\x1191\x1177\x3\x2\x2\x2\x1191"+
		"\x1180\x3\x2\x2\x2\x1191\x118B\x3\x2\x2\x2\x1192\x15D\x3\x2\x2\x2\x1193"+
		"\x1194\a\xCA\x2\x2\x1194\x1195\a\x220\x2\x2\x1195\x119B\a\x1F2\x2\x2\x1196"+
		"\x1197\a\x12E\x2\x2\x1197\x1198\aq\x2\x2\x1198\x1199\a\x2BE\x2\x2\x1199"+
		"\x119A\a\x46F\x2\x2\x119A\x119C\a\x46B\x2\x2\x119B\x1196\x3\x2\x2\x2\x119B"+
		"\x119C\x3\x2\x2\x2\x119C\x15F\x3\x2\x2\x2\x119D\x119E\a%\x2\x2\x119E\x119F"+
		"\a\x241\x2\x2\x119F\x11A0\a\x403\x2\x2\x11A0\x11A1\x5\x4D2\x26A\x2\x11A1"+
		"\x11A2\a\x41F\x2\x2\x11A2\x11AB\a\x46F\x2\x2\x11A3\x11AC\a\x26B\x2\x2"+
		"\x11A4\x11AC\a\x128\x2\x2\x11A5\x11AC\a\x432\x2\x2\x11A6\x11A7\a\x420"+
		"\x2\x2\x11A7\x11A8\a\x438\x2\x2\x11A8\x11A9\a\x35A\x2\x2\x11A9\x11AA\a"+
		"\x9D\x2\x2\x11AA\x11AC\x5\x4D2\x26A\x2\x11AB\x11A3\x3\x2\x2\x2\x11AB\x11A4"+
		"\x3\x2\x2\x2\x11AB\x11A5\x3\x2\x2\x2\x11AB\x11A6\x3\x2\x2\x2\x11AC\x161"+
		"\x3\x2\x2\x2\x11AD\x11AE\a%\x2\x2\x11AE\x11AF\a\x2BB\x2\x2\x11AF\x11B0"+
		"\a\x187\x2\x2\x11B0\x11B1\x5\x4D2\x26A\x2\x11B1\x11B2\a\x481\x2\x2\x11B2"+
		"\x11B3\a\x482\x2\x2\x11B3\x11B4\t,\x2\x2\x11B4\x11B5\a\x2FB\x2\x2\x11B5"+
		"\x11B6\a\x481\x2\x2\x11B6\x11B7\a\x469\x2\x2\x11B7\x11B8\a\x482\x2\x2"+
		"\x11B8\x163\x3\x2\x2\x2\x11B9\x11BA\a%\x2\x2\x11BA\x11BB\a\x2BB\x2\x2"+
		"\x11BB\x11BC\a\x35E\x2\x2\x11BC\x11BD\x5\x4D2\x26A\x2\x11BD\x11BE\a\x25F"+
		"\x2\x2\x11BE\x11C0\a\x41A\x2\x2\x11BF\x11C1\x5\x4D2\x26A\x2\x11C0\x11BF"+
		"\x3\x2\x2\x2\x11C0\x11C1\x3\x2\x2\x2\x11C1\x165\x3\x2\x2\x2\x11C2\x11C3"+
		"\a%\x2\x2\x11C3\x11C4\a\x319\x2\x2\x11C4\x11C5\a\x37C\x2\x2\x11C5\x11C6"+
		"\a\x63\x2\x2\x11C6\x11C7\x5\x4D2\x26A\x2\x11C7\x11CB\a\x438\x2\x2\x11C8"+
		"\x11C9\a\x41B\x2\x2\x11C9\x11CA\a\x46F\x2\x2\x11CA\x11CC\x5\x4D2\x26A"+
		"\x2\x11CB\x11C8\x3\x2\x2\x2\x11CB\x11CC\x3\x2\x2\x2\x11CC\x11D1\x3\x2"+
		"\x2\x2\x11CD\x11CE\a\x485\x2\x2\x11CE\x11CF\a(\x2\x2\x11CF\x11D0\a\x46F"+
		"\x2\x2\x11D0\x11D2\t\x13\x2\x2\x11D1\x11CD\x3\x2\x2\x2\x11D1\x11D2\x3"+
		"\x2\x2\x2\x11D2\x167\x3\x2\x2\x2\x11D3\x11D4\a\xCA\x2\x2\x11D4\x11D5\a"+
		"\x319\x2\x2\x11D5\x11D6\a\x37C\x2\x2\x11D6\x11D7\a\x63\x2\x2\x11D7\x11DA"+
		"\x5\x4D2\x26A\x2\x11D8\x11D9\a\x46\x2\x2\x11D9\x11DB\x5\x4D2\x26A\x2\x11DA"+
		"\x11D8\x3\x2\x2\x2\x11DA\x11DB\x3\x2\x2\x2\x11DB\x11DC\x3\x2\x2\x2\x11DC"+
		"\x11DD\a\x3EB\x2\x2\x11DD\x11DE\a\x37C\x2\x2\x11DE\x11DF\a\x46B\x2\x2"+
		"\x11DF\x11E3\a\x438\x2\x2\x11E0\x11E1\a\x41B\x2\x2\x11E1\x11E2\a\x46F"+
		"\x2\x2\x11E2\x11E4\x5\x4D2\x26A\x2\x11E3\x11E0\x3\x2\x2\x2\x11E3\x11E4"+
		"\x3\x2\x2\x2\x11E4\x11E9\x3\x2\x2\x2\x11E5\x11E6\a\x485\x2\x2\x11E6\x11E7"+
		"\a(\x2\x2\x11E7\x11E8\a\x46F\x2\x2\x11E8\x11EA\t\x13\x2\x2\x11E9\x11E5"+
		"\x3\x2\x2\x2\x11E9\x11EA\x3\x2\x2\x2\x11EA\x169\x3\x2\x2\x2\x11EB\x11EC"+
		"\a\xCA\x2\x2\x11EC\x11ED\a\x32F\x2\x2\x11ED\x11EE\a\x2D4\x2\x2\x11EE\x1255"+
		"\x5\x4D2\x26A\x2\x11EF\x11F0\a\x438\x2\x2\x11F0\x11F7\a\x481\x2\x2\x11F1"+
		"\x11F3\a\x485\x2\x2\x11F2\x11F1\x3\x2\x2\x2\x11F2\x11F3\x3\x2\x2\x2\x11F3"+
		"\x11F4\x3\x2\x2\x2\x11F4\x11F5\a\x248\x2\x2\x11F5\x11F6\a\x46F\x2\x2\x11F6"+
		"\x11F8\a\x469\x2\x2\x11F7\x11F2\x3\x2\x2\x2\x11F7\x11F8\x3\x2\x2\x2\x11F8"+
		"\x11FF\x3\x2\x2\x2\x11F9\x11FB\a\x485\x2\x2\x11FA\x11F9\x3\x2\x2\x2\x11FA"+
		"\x11FB\x3\x2\x2\x2\x11FB\x11FC\x3\x2\x2\x2\x11FC\x11FD\a\x229\x2\x2\x11FD"+
		"\x11FE\a\x46F\x2\x2\x11FE\x1200\a\x469\x2\x2\x11FF\x11FA\x3\x2\x2\x2\x11FF"+
		"\x1200\x3\x2\x2\x2\x1200\x1207\x3\x2\x2\x2\x1201\x1203\a\x485\x2\x2\x1202"+
		"\x1201\x3\x2\x2\x2\x1202\x1203\x3\x2\x2\x2\x1203\x1204\x3\x2\x2\x2\x1204"+
		"\x1205\au\x2\x2\x1205\x1206\a\x46F\x2\x2\x1206\x1208\a\x469\x2\x2\x1207"+
		"\x1202\x3\x2\x2\x2\x1207\x1208\x3\x2\x2\x2\x1208\x1232\x3\x2\x2\x2\x1209"+
		"\x120B\a\x485\x2\x2\x120A\x1209\x3\x2\x2\x2\x120A\x120B\x3\x2\x2\x2\x120B"+
		"\x120C\x3\x2\x2\x2\x120C\x120D\a\x14\x2\x2\x120D\x120E\a\x359\x2\x2\x120E"+
		"\x1230\a\x46F\x2\x2\x120F\x1231\aG\x2\x2\x1210\x121A\a\x481\x2\x2\x1211"+
		"\x1213\a\x485\x2\x2\x1212\x1211\x3\x2\x2\x2\x1212\x1213\x3\x2\x2\x2\x1213"+
		"\x1218\x3\x2\x2\x2\x1214\x1219\a\x469\x2\x2\x1215\x1216\a\x469\x2\x2\x1216"+
		"\x1217\a\x3EB\x2\x2\x1217\x1219\a\x469\x2\x2\x1218\x1214\x3\x2\x2\x2\x1218"+
		"\x1215\x3\x2\x2\x2\x1219\x121B\x3\x2\x2\x2\x121A\x1212\x3\x2\x2\x2\x121B"+
		"\x121C\x3\x2\x2\x2\x121C\x121A\x3\x2\x2\x2\x121C\x121D\x3\x2\x2\x2\x121D"+
		"\x121E\x3\x2\x2\x2\x121E\x1231\a\x482\x2\x2\x121F\x1220\a\x283\x2\x2\x1220"+
		"\x1221\a\x46F\x2\x2\x1221\x122B\a\x481\x2\x2\x1222\x1224\a\x485\x2\x2"+
		"\x1223\x1222\x3\x2\x2\x2\x1223\x1224\x3\x2\x2\x2\x1224\x1229\x3\x2\x2"+
		"\x2\x1225\x122A\a\x469\x2\x2\x1226\x1227\a\x469\x2\x2\x1227\x1228\a\x3EB"+
		"\x2\x2\x1228\x122A\a\x469\x2\x2\x1229\x1225\x3\x2\x2\x2\x1229\x1226\x3"+
		"\x2\x2\x2\x122A\x122C\x3\x2\x2\x2\x122B\x1223\x3\x2\x2\x2\x122C\x122D"+
		"\x3\x2\x2\x2\x122D\x122B\x3\x2\x2\x2\x122D\x122E\x3\x2\x2\x2\x122E\x122F"+
		"\x3\x2\x2\x2\x122F\x1231\a\x482\x2\x2\x1230\x120F\x3\x2\x2\x2\x1230\x1210"+
		"\x3\x2\x2\x2\x1230\x121F\x3\x2\x2\x2\x1231\x1233\x3\x2\x2\x2\x1232\x120A"+
		"\x3\x2\x2\x2\x1232\x1233\x3\x2\x2\x2\x1233\x123A\x3\x2\x2\x2\x1234\x1236"+
		"\a\x485\x2\x2\x1235\x1234\x3\x2\x2\x2\x1235\x1236\x3\x2\x2\x2\x1236\x1237"+
		"\x3\x2\x2\x2\x1237\x1238\a\x24A\x2\x2\x1238\x1239\a\x46F\x2\x2\x1239\x123B"+
		"\a\x469\x2\x2\x123A\x1235\x3\x2\x2\x2\x123A\x123B\x3\x2\x2\x2\x123B\x1242"+
		"\x3\x2\x2\x2\x123C\x123E\a\x485\x2\x2\x123D\x123C\x3\x2\x2\x2\x123D\x123E"+
		"\x3\x2\x2\x2\x123E\x123F\x3\x2\x2\x2\x123F\x1240\a\x231\x2\x2\x1240\x1241"+
		"\a\x46F\x2\x2\x1241\x1243\a\x469\x2\x2\x1242\x123D\x3\x2\x2\x2\x1242\x1243"+
		"\x3\x2\x2\x2\x1243\x124A\x3\x2\x2\x2\x1244\x1246\a\x485\x2\x2\x1245\x1244"+
		"\x3\x2\x2\x2\x1245\x1246\x3\x2\x2\x2\x1246\x1247\x3\x2\x2\x2\x1247\x1248"+
		"\a\x249\x2\x2\x1248\x1249\a\x46F\x2\x2\x1249\x124B\a\x469\x2\x2\x124A"+
		"\x1245\x3\x2\x2\x2\x124A\x124B\x3\x2\x2\x2\x124B\x1252\x3\x2\x2\x2\x124C"+
		"\x124E\a\x485\x2\x2\x124D\x124C\x3\x2\x2\x2\x124D\x124E\x3\x2\x2\x2\x124E"+
		"\x124F\x3\x2\x2\x2\x124F\x1250\a\x22F\x2\x2\x1250\x1251\a\x46F\x2\x2\x1251"+
		"\x1253\a\x469\x2\x2\x1252\x124D\x3\x2\x2\x2\x1252\x1253\x3\x2\x2\x2\x1253"+
		"\x1254\x3\x2\x2\x2\x1254\x1256\a\x482\x2\x2\x1255\x11EF\x3\x2\x2\x2\x1255"+
		"\x1256\x3\x2\x2\x2\x1256\x16B\x3\x2\x2\x2\x1257\x1258\a%\x2\x2\x1258\x1259"+
		"\a\x32F\x2\x2\x1259\x126F\a\x198\x2\x2\x125A\x1270\t-\x2\x2\x125B\x125C"+
		"\a\x438\x2\x2\x125C\x125D\a\x481\x2\x2\x125D\x125E\a\x93\x2\x2\x125E\x1264"+
		"\a\x46F\x2\x2\x125F\x1260\x5\x4D2\x26A\x2\x1260\x1261\a\x47C\x2\x2\x1261"+
		"\x1262\x5\x4D2\x26A\x2\x1262\x1265\x3\x2\x2\x2\x1263\x1265\a\x281\x2\x2"+
		"\x1264\x125F\x3\x2\x2\x2\x1264\x1263\x3\x2\x2\x2\x1265\x1266\x3\x2\x2"+
		"\x2\x1266\x1270\a\x482\x2\x2\x1267\x1268\a\x32E\x2\x2\x1268\x1270\a\x3B4"+
		"\x2\x2\x1269\x126A\a\x438\x2\x2\x126A\x126B\a\x481\x2\x2\x126B\x126C\a"+
		"\x232\x2\x2\x126C\x126D\a\x46F\x2\x2\x126D\x126E\a\x469\x2\x2\x126E\x1270"+
		"\a\x482\x2\x2\x126F\x125A\x3\x2\x2\x2\x126F\x125B\x3\x2\x2\x2\x126F\x1267"+
		"\x3\x2\x2\x2\x126F\x1269\x3\x2\x2\x2\x1270\x16D\x3\x2\x2\x2\x1271\x1272"+
		"\a%\x2\x2\x1272\x1273\a\xDE\x2\x2\x1273\x1274\a\x42\x2\x2\x1274\x1275"+
		"\a\x3A5\x2\x2\x1275\x127A\x5\x4D2\x26A\x2\x1276\x1277\a\x172\x2\x2\x1277"+
		"\x1278\a\x37A\x2\x2\x1278\x1279\a\x42\x2\x2\x1279\x127B\x5\x4D2\x26A\x2"+
		"\x127A\x1276\x3\x2\x2\x2\x127A\x127B\x3\x2\x2\x2\x127B\x1284\x3\x2\x2"+
		"\x2\x127C\x1281\x5\x170\xB9\x2\x127D\x127E\a\x485\x2\x2\x127E\x1280\x5"+
		"\x170\xB9\x2\x127F\x127D\x3\x2\x2\x2\x1280\x1283\x3\x2\x2\x2\x1281\x127F"+
		"\x3\x2\x2\x2\x1281\x1282\x3\x2\x2\x2\x1282\x1285\x3\x2\x2\x2\x1283\x1281"+
		"\x3\x2\x2\x2\x1284\x127C\x3\x2\x2\x2\x1284\x1285\x3\x2\x2\x2\x1285\x128C"+
		"\x3\x2\x2\x2\x1286\x1287\a\x438\x2\x2\x1287\x1288\a\x481\x2\x2\x1288\x1289"+
		"\a\x3B2\x2\x2\x1289\x128A\a\x46F\x2\x2\x128A\x128B\t\x13\x2\x2\x128B\x128D"+
		"\a\x482\x2\x2\x128C\x1286\x3\x2\x2\x2\x128C\x128D\x3\x2\x2\x2\x128D\x16F"+
		"\x3\x2\x2\x2\x128E\x128F\t\x19\x2\x2\x128F\x1292\a\x481\x2\x2\x1290\x1293"+
		"\x5\x172\xBA\x2\x1291\x1293\x5\x4D2\x26A\x2\x1292\x1290\x3\x2\x2\x2\x1292"+
		"\x1291\x3\x2\x2\x2\x1293\x1294\x3\x2\x2\x2\x1294\x1295\a\x482\x2\x2\x1295"+
		"\x171\x3\x2\x2\x2\x1296\x129B\x5\x174\xBB\x2\x1297\x1298\a\x485\x2\x2"+
		"\x1298\x129A\x5\x174\xBB\x2\x1299\x1297\x3\x2\x2\x2\x129A\x129D\x3\x2"+
		"\x2\x2\x129B\x1299\x3\x2\x2\x2\x129B\x129C\x3\x2\x2\x2\x129C\x129E\x3"+
		"\x2\x2\x2\x129D\x129B\x3\x2\x2\x2\x129E\x12A2\a\x294\x2\x2\x129F\x12A0"+
		"\x5\x176\xBC\x2\x12A0\x12A1\a\x488\x2\x2\x12A1\x12A3\x3\x2\x2\x2\x12A2"+
		"\x129F\x3\x2\x2\x2\x12A2\x12A3\x3\x2\x2\x2\x12A3\x12A4\x3\x2\x2\x2\x12A4"+
		"\x12A5\x5\x178\xBD\x2\x12A5\x12A6\aq\x2\x2\x12A6\x12AB\x5\x308\x185\x2"+
		"\x12A7\x12A8\a\x485\x2\x2\x12A8\x12AA\x5\x308\x185\x2\x12A9\x12A7\x3\x2"+
		"\x2\x2\x12AA\x12AD\x3\x2\x2\x2\x12AB\x12A9\x3\x2\x2\x2\x12AB\x12AC\x3"+
		"\x2\x2\x2\x12AC\x173\x3\x2\x2\x2\x12AD\x12AB\x3\x2\x2\x2\x12AE\x12AF\t"+
		".\x2\x2\x12AF\x175\x3\x2\x2\x2\x12B0\x12B1\t/\x2\x2\x12B1\x177\x3\x2\x2"+
		"\x2\x12B2\x12B3\x5\x4D2\x26A\x2\x12B3\x12B4\a\x47C\x2\x2\x12B4\x12B6\x3"+
		"\x2\x2\x2\x12B5\x12B2\x3\x2\x2\x2\x12B5\x12B6\x3\x2\x2\x2\x12B6\x12B7"+
		"\x3\x2\x2\x2\x12B7\x12B8\x5\x4D2\x26A\x2\x12B8\x12B9\a\x47C\x2\x2\x12B9"+
		"\x12BB\x3\x2\x2\x2\x12BA\x12B5\x3\x2\x2\x2\x12BA\x12BB\x3\x2\x2\x2\x12BB"+
		"\x12BC\x3\x2\x2\x2\x12BC\x12BD\x5\x4D2\x26A\x2\x12BD\x179\x3\x2\x2\x2"+
		"\x12BE\x12BF\a%\x2\x2\x12BF\x12C0\a\x342\x2\x2\x12C0\x12C8\x5\x4D2\x26A"+
		"\x2\x12C1\x12C2\t\x19\x2\x2\x12C2\x12C3\a\x23D\x2\x2\x12C3\x12C9\x5\x4D2"+
		"\x26A\x2\x12C4\x12C5\a\x438\x2\x2\x12C5\x12C6\a\x254\x2\x2\x12C6\x12C7"+
		"\a\x46F\x2\x2\x12C7\x12C9\x5\x4D2\x26A\x2\x12C8\x12C1\x3\x2\x2\x2\x12C8"+
		"\x12C4\x3\x2\x2\x2\x12C9\x17B\x3\x2\x2\x2\x12CA\x12CB\a\xCA\x2\x2\x12CB"+
		"\x12CC\a\xDE\x2\x2\x12CC\x12CD\a\x42\x2\x2\x12CD\x12CE\a\x3A5\x2\x2\x12CE"+
		"\x12D3\x5\x4D2\x26A\x2\x12CF\x12D0\a\x172\x2\x2\x12D0\x12D1\a\x37A\x2"+
		"\x2\x12D1\x12D2\a\x42\x2\x2\x12D2\x12D4\x5\x4D2\x26A\x2\x12D3\x12CF\x3"+
		"\x2\x2\x2\x12D3\x12D4\x3\x2\x2\x2\x12D4\x12DD\x3\x2\x2\x2\x12D5\x12DA"+
		"\x5\x170\xB9\x2\x12D6\x12D7\a\x485\x2\x2\x12D7\x12D9\x5\x170\xB9\x2\x12D8"+
		"\x12D6\x3\x2\x2\x2\x12D9\x12DC\x3\x2\x2\x2\x12DA\x12D8\x3\x2\x2\x2\x12DA"+
		"\x12DB\x3\x2\x2\x2\x12DB\x12DE\x3\x2\x2\x2\x12DC\x12DA\x3\x2\x2\x2\x12DD"+
		"\x12D5\x3\x2\x2\x2\x12DD\x12DE\x3\x2\x2\x2\x12DE\x12E5\x3\x2\x2\x2\x12DF"+
		"\x12E0\a\x438\x2\x2\x12E0\x12E1\a\x481\x2\x2\x12E1\x12E2\a\x3B2\x2\x2"+
		"\x12E2\x12E3\a\x46F\x2\x2\x12E3\x12E4\t\x13\x2\x2\x12E4\x12E6\a\x482\x2"+
		"\x2\x12E5\x12DF\x3\x2\x2\x2\x12E5\x12E6\x3\x2\x2\x2\x12E6\x17D\x3\x2\x2"+
		"\x2\x12E7\x12E8\a\xCA\x2\x2\x12E8\x12E9\a\x342\x2\x2\x12E9\x12EC\x5\x4D2"+
		"\x26A\x2\x12EA\x12EB\a\x46\x2\x2\x12EB\x12ED\x5\x4D2\x26A\x2\x12EC\x12EA"+
		"\x3\x2\x2\x2\x12EC\x12ED\x3\x2\x2\x2\x12ED\x17F\x3\x2\x2\x2\x12EE\x12EF"+
		"\a\xCA\x2\x2\x12EF\x12F0\a\x346\x2\x2\x12F0\x12F3\x5\x4D2\x26A\x2\x12F1"+
		"\x12F2\a\x46\x2\x2\x12F2\x12F4\x5\x4D2\x26A\x2\x12F3\x12F1\x3\x2\x2\x2"+
		"\x12F3\x12F4\x3\x2\x2\x2\x12F4\x12F5\x3\x2\x2\x2\x12F5\x12FC\a\x438\x2"+
		"\x2\x12F6\x12F8\a\x485\x2\x2\x12F7\x12F6\x3\x2\x2\x2\x12F7\x12F8\x3\x2"+
		"\x2\x2\x12F8\x12F9\x3\x2\x2\x2\x12F9\x12FA\a\x37F\x2\x2\x12FA\x12FB\a"+
		"\x46F\x2\x2\x12FB\x12FD\a\x46B\x2\x2\x12FC\x12F7\x3\x2\x2\x2\x12FC\x12FD"+
		"\x3\x2\x2\x2\x12FD\x1304\x3\x2\x2\x2\x12FE\x1300\a\x485\x2\x2\x12FF\x12FE"+
		"\x3\x2\x2\x2\x12FF\x1300\x3\x2\x2\x2\x1300\x1301\x3\x2\x2\x2\x1301\x1302"+
		"\ak\x2\x2\x1302\x1303\a\x46F\x2\x2\x1303\x1305\a\x46B\x2\x2\x1304\x12FF"+
		"\x3\x2\x2\x2\x1304\x1305\x3\x2\x2\x2\x1305\x130C\x3\x2\x2\x2\x1306\x1308"+
		"\a\x485\x2\x2\x1307\x1306\x3\x2\x2\x2\x1307\x1308\x3\x2\x2\x2\x1308\x1309"+
		"\x3\x2\x2\x2\x1309\x130A\a\x204\x2\x2\x130A\x130B\a\x46F\x2\x2\x130B\x130D"+
		"\a\x469\x2\x2\x130C\x1307\x3\x2\x2\x2\x130C\x130D\x3\x2\x2\x2\x130D\x130F"+
		"\x3\x2\x2\x2\x130E\x1310\a\x485\x2\x2\x130F\x130E\x3\x2\x2\x2\x130F\x1310"+
		"\x3\x2\x2\x2\x1310\x1311\x3\x2\x2\x2\x1311\x1312\a\xE\x2\x2\x1312\x1313"+
		"\a\x46F\x2\x2\x1313\x1318\a\x46B\x2\x2\x1314\x1315\a\x485\x2\x2\x1315"+
		"\x1316\a\x24C\x2\x2\x1316\x1317\a\x46F\x2\x2\x1317\x1319\a\x46B\x2\x2"+
		"\x1318\x1314\x3\x2\x2\x2\x1318\x1319\x3\x2\x2\x2\x1319\x181\x3\x2\x2\x2"+
		"\x131A\x131B\a\xCA\x2\x2\x131B\x131F\a\x354\x2\x2\x131C\x131D\x5\x4D2"+
		"\x26A\x2\x131D\x131E\a\x47C\x2\x2\x131E\x1320\x3\x2\x2\x2\x131F\x131C"+
		"\x3\x2\x2\x2\x131F\x1320\x3\x2\x2\x2\x1320\x1321\x3\x2\x2\x2\x1321\x1322"+
		"\x5\x4D2\x26A\x2\x1322\x1323\a:\x2\x2\x1323\x1324\x5\x3C0\x1E1\x2\x1324"+
		"\x183\x3\x2\x2\x2\x1325\x1326\a%\x2\x2\x1326\x1327\a\x35A\x2\x2\x1327"+
		"\x1328\x5\x4D2\x26A\x2\x1328\x1331\a\x3F5\x2\x2\x1329\x132F\a\x286\x2"+
		"\x2\x132A\x132F\a\x403\x2\x2\x132B\x132C\a\x443\x2\x2\x132C\x132D\a\x35A"+
		"\x2\x2\x132D\x132F\a\x9D\x2\x2\x132E\x1329\x3\x2\x2\x2\x132E\x132A\x3"+
		"\x2\x2\x2\x132E\x132B\x3\x2\x2\x2\x132F\x1330\x3\x2\x2\x2\x1330\x1332"+
		"\a\x488\x2\x2\x1331\x132E\x3\x2\x2\x2\x1331\x1332\x3\x2\x2\x2\x1332\x1333"+
		"\x3\x2\x2\x2\x1333\x1336\x5\x4D2\x26A\x2\x1334\x1335\a\x47C\x2\x2\x1335"+
		"\x1337\x5\x4D2\x26A\x2\x1336\x1334\x3\x2\x2\x2\x1336\x1337\x3\x2\x2\x2"+
		"\x1337\x185\x3\x2\x2\x2\x1338\x1339\a\xCA\x2\x2\x1339\x1341\a\x35A\x2"+
		"\x2\x133A\x1342\x5\x4D2\x26A\x2\x133B\x133C\a\x46\x2\x2\x133C\x1342\x5"+
		"\x4D2\x26A\x2\x133D\x133E\x5\x4D2\x26A\x2\x133E\x133F\a\x46\x2\x2\x133F"+
		"\x1340\x5\x4D2\x26A\x2\x1340\x1342\x3\x2\x2\x2\x1341\x133A\x3\x2\x2\x2"+
		"\x1341\x133B\x3\x2\x2\x2\x1341\x133D\x3\x2\x2\x2\x1342\x135D\x3\x2\x2"+
		"\x2\x1343\x135C\x5\x250\x129\x2\x1344\x135C\x5\x25C\x12F\x2\x1345\x1346"+
		"\t\x30\x2\x2\x1346\x1347\t\x31\x2\x2\x1347\x134A\a\x294\x2\x2\x1348\x1349"+
		"\a\x35A\x2\x2\x1349\x134B\a\x488\x2\x2\x134A\x1348\x3\x2\x2\x2\x134A\x134B"+
		"\x3\x2\x2\x2\x134B\x134C\x3\x2\x2\x2\x134C\x134D\x5\x4D2\x26A\x2\x134D"+
		"\x134E\a\x3EB\x2\x2\x134E\x134F\x5\x4D2\x26A\x2\x134F\x135C\x3\x2\x2\x2"+
		"\x1350\x1351\a\x33E\x2\x2\x1351\x1352\t\x31\x2\x2\x1352\x1355\a\x294\x2"+
		"\x2\x1353\x1354\a\x35A\x2\x2\x1354\x1356\a\x488\x2\x2\x1355\x1353\x3\x2"+
		"\x2\x2\x1355\x1356\x3\x2\x2\x2\x1356\x1357\x3\x2\x2\x2\x1357\x1358\x5"+
		"\x4D2\x26A\x2\x1358\x1359\a\x181\x2\x2\x1359\x135A\x5\x4D2\x26A\x2\x135A"+
		"\x135C\x3\x2\x2\x2\x135B\x1343\x3\x2\x2\x2\x135B\x1344\x3\x2\x2\x2\x135B"+
		"\x1345\x3\x2\x2\x2\x135B\x1350\x3\x2\x2\x2\x135C\x135F\x3\x2\x2\x2\x135D"+
		"\x135B\x3\x2\x2\x2\x135D\x135E\x3\x2\x2\x2\x135E\x187\x3\x2\x2\x2\x135F"+
		"\x135D\x3\x2\x2\x2\x1360\x1361\a\xCA\x2\x2\x1361\x1362\a\x35A\x2\x2\x1362"+
		"\x1365\x5\x4D2\x26A\x2\x1363\x1364\a\x46\x2\x2\x1364\x1366\x5\x4D2\x26A"+
		"\x2\x1365\x1363\x3\x2\x2\x2\x1365\x1366\x3\x2\x2\x2\x1366\x189\x3\x2\x2"+
		"\x2\x1367\x1368\a%\x2\x2\x1368\x1369\a\x35A\x2\x2\x1369\x136A\x5\x4D2"+
		"\x26A\x2\x136A\x136D\a\x3F5\x2\x2\x136B\x136C\a\x286\x2\x2\x136C\x136E"+
		"\a\x488\x2\x2\x136D\x136B\x3\x2\x2\x2\x136D\x136E\x3\x2\x2\x2\x136E\x136F"+
		"\x3\x2\x2\x2\x136F\x1372\x5\x4D2\x26A\x2\x1370\x1371\a\x47C\x2\x2\x1371"+
		"\x1373\a\x46A\x2\x2\x1372\x1370\x3\x2\x2\x2\x1372\x1373\x3\x2\x2\x2\x1373"+
		"\x18B\x3\x2\x2\x2\x1374\x1375\a\xCA\x2\x2\x1375\x1376\a\x364\x2\x2\x1376"+
		"\x1377\a\x2E8\x2\x2\x1377\x1378\a\x209\x2\x2\x1378\x1380\x5\x4D2\x26A"+
		"\x2\x1379\x137D\a\x181\x2\x2\x137A\x137B\x5\x4D2\x26A\x2\x137B\x137C\a"+
		"\x47C\x2\x2\x137C\x137E\x3\x2\x2\x2\x137D\x137A\x3\x2\x2\x2\x137D\x137E"+
		"\x3\x2\x2\x2\x137E\x137F\x3\x2\x2\x2\x137F\x1381\x5\x4D2\x26A\x2\x1380"+
		"\x1379\x3\x2\x2\x2\x1380\x1381\x3\x2\x2\x2\x1381\x1384\x3\x2\x2\x2\x1382"+
		"\x1383\a\x46\x2\x2\x1383\x1385\x5\x4D2\x26A\x2\x1384\x1382\x3\x2\x2\x2"+
		"\x1384\x1385\x3\x2\x2\x2\x1385\x18D\x3\x2\x2\x2\x1386\x1387\a\xCA\x2\x2"+
		"\x1387\x1388\a\x36B\x2\x2\x1388\x138C\a\x2D3\x2\x2\x1389\x138A\x5\x4D2"+
		"\x26A\x2\x138A\x138B\a\x47C\x2\x2\x138B\x138D\x3\x2\x2\x2\x138C\x1389"+
		"\x3\x2\x2\x2\x138C\x138D\x3\x2\x2\x2\x138D\x138E\x3\x2\x2\x2\x138E\x13B7"+
		"\x5\x4D2\x26A\x2\x138F\x1391\a\x485\x2\x2\x1390\x138F\x3\x2\x2\x2\x1390"+
		"\x1391\x3\x2\x2\x2\x1391\x1392\x3\x2\x2\x2\x1392\x1394\a\r\x2\x2\x1393"+
		"\x1395\t\x32\x2\x2\x1394\x1393\x3\x2\x2\x2\x1394\x1395\x3\x2\x2\x2\x1395"+
		"\x1396\x3\x2\x2\x2\x1396\x1397\a\x2D8\x2\x2\x1397\x1398\x5\x4D2\x26A\x2"+
		"\x1398\x1399\a\x47C\x2\x2\x1399\x139A\x5\x4D2\x26A\x2\x139A\x139F\a\x481"+
		"\x2\x2\x139B\x139D\a\x485\x2\x2\x139C\x139B\x3\x2\x2\x2\x139C\x139D\x3"+
		"\x2\x2\x2\x139D\x139E\x3\x2\x2\x2\x139E\x13A0\x5\x4D2\x26A\x2\x139F\x139C"+
		"\x3\x2\x2\x2\x13A0\x13A1\x3\x2\x2\x2\x13A1\x139F\x3\x2\x2\x2\x13A1\x13A2"+
		"\x3\x2\x2\x2\x13A2\x13A3\x3\x2\x2\x2\x13A3\x13A4\a\x482\x2\x2\x13A4\x13A5"+
		"\a\x294\x2\x2\x13A5\x13A6\x5\x4D2\x26A\x2\x13A6\x13A7\a\x47C\x2\x2\x13A7"+
		"\x13B4\x5\x4D2\x26A\x2\x13A8\x13AA\a\x485\x2\x2\x13A9\x13A8\x3\x2\x2\x2"+
		"\x13A9\x13AA\x3\x2\x2\x2\x13AA\x13AB\x3\x2\x2\x2\x13AB\x13AC\a\x15\x2"+
		"\x2\x13AC\x13B3\t\x33\x2\x2\x13AD\x13AF\a\x485\x2\x2\x13AE\x13AD\x3\x2"+
		"\x2\x2\x13AE\x13AF\x3\x2\x2\x2\x13AF\x13B0\x3\x2\x2\x2\x13B0\x13B1\a["+
		"\x2\x2\x13B1\x13B3\t\x34\x2\x2\x13B2\x13A9\x3\x2\x2\x2\x13B2\x13AE\x3"+
		"\x2\x2\x2\x13B3\x13B6\x3\x2\x2\x2\x13B4\x13B2\x3\x2\x2\x2\x13B4\x13B5"+
		"\x3\x2\x2\x2\x13B5\x13B8\x3\x2\x2\x2\x13B6\x13B4\x3\x2\x2\x2\x13B7\x1390"+
		"\x3\x2\x2\x2\x13B8\x13B9\x3\x2\x2\x2\x13B9\x13B7\x3\x2\x2\x2\x13B9\x13BA"+
		"\x3\x2\x2\x2\x13BA\x13C5\x3\x2\x2\x2\x13BB\x13BC\a\x438\x2\x2\x13BC\x13BD"+
		"\a\x481\x2\x2\x13BD\x13BE\a\x3B2\x2\x2\x13BE\x13BF\a\x46F\x2\x2\x13BF"+
		"\x13C2\t\x13\x2\x2\x13C0\x13C1\a\x35B\x2\x2\x13C1\x13C3\t\x13\x2\x2\x13C2"+
		"\x13C0\x3\x2\x2\x2\x13C2\x13C3\x3\x2\x2\x2\x13C3\x13C4\x3\x2\x2\x2\x13C4"+
		"\x13C6\a\x482\x2\x2\x13C5\x13BB\x3\x2\x2\x2\x13C5\x13C6\x3\x2\x2\x2\x13C6"+
		"\x13CA\x3\x2\x2\x2\x13C7\x13C8\a\x271\x2\x2\x13C8\x13C9\a\x172\x2\x2\x13C9"+
		"\x13CB\a\x326\x2\x2\x13CA\x13C7\x3\x2\x2\x2\x13CA\x13CB\x3\x2\x2\x2\x13CB"+
		"\x18F\x3\x2\x2\x2\x13CC\x13CD\a%\x2\x2\x13CD\x13D1\a\x377\x2\x2\x13CE"+
		"\x13CF\x5\x4D2\x26A\x2\x13CF\x13D0\a\x47C\x2\x2\x13D0\x13D2\x3\x2\x2\x2"+
		"\x13D1\x13CE\x3\x2\x2\x2\x13D1\x13D2\x3\x2\x2\x2\x13D2\x13D3\x3\x2\x2"+
		"\x2\x13D3\x13D9\x5\x4D2\x26A\x2\x13D4\x13D7\a\x332\x2\x2\x13D5\x13D6\a"+
		"\x438\x2\x2\x13D6\x13D8\a\x469\x2\x2\x13D7\x13D5\x3\x2\x2\x2\x13D7\x13D8"+
		"\x3\x2\x2\x2\x13D8\x13DA\x3\x2\x2\x2\x13D9\x13D4\x3\x2\x2\x2\x13D9\x13DA"+
		"\x3\x2\x2\x2\x13DA\x13DE\x3\x2\x2\x2\x13DB\x13DC\a\x1C5\x2\x2\x13DC\x13DD"+
		"\aq\x2\x2\x13DD\x13DF\a\x469\x2\x2\x13DE\x13DB\x3\x2\x2\x2\x13DE\x13DF"+
		"\x3\x2\x2\x2\x13DF\x13E4\x3\x2\x2\x2\x13E0\x13E1\a\x246\x2\x2\x13E1\x13E5"+
		"\a\x469\x2\x2\x13E2\x13E3\a\x260\x2\x2\x13E3\x13E5\a\x246\x2\x2\x13E4"+
		"\x13E0\x3\x2\x2\x2\x13E4\x13E2\x3\x2\x2\x2\x13E4\x13E5\x3\x2\x2\x2\x13E5"+
		"\x13EA\x3\x2\x2\x2\x13E6\x13E7\a\x228\x2\x2\x13E7\x13EB\a\x469\x2\x2\x13E8"+
		"\x13E9\a\x260\x2\x2\x13E9\x13EB\a\x228\x2\x2\x13EA\x13E6\x3\x2\x2\x2\x13EA"+
		"\x13E8\x3\x2\x2\x2\x13EA\x13EB\x3\x2\x2\x2\x13EB\x13EF\x3\x2\x2\x2\x13EC"+
		"\x13F0\a\xDC\x2\x2\x13ED\x13EE\a\x260\x2\x2\x13EE\x13F0\a\xDC\x2\x2\x13EF"+
		"\x13EC\x3\x2\x2\x2\x13EF\x13ED\x3\x2\x2\x2\x13EF\x13F0\x3\x2\x2\x2\x13F0"+
		"\x13F5\x3\x2\x2\x2\x13F1\x13F2\ar\x2\x2\x13F2\x13F6\a\x469\x2\x2\x13F3"+
		"\x13F4\a\x260\x2\x2\x13F4\x13F6\ar\x2\x2\x13F5\x13F1\x3\x2\x2\x2\x13F5"+
		"\x13F3\x3\x2\x2\x2\x13F5\x13F6\x3\x2\x2\x2\x13F6\x191\x3\x2\x2\x2\x13F7"+
		"\x13F8\a\xCA\x2\x2\x13F8\x13FC\a\x377\x2\x2\x13F9\x13FA\x5\x4D2\x26A\x2"+
		"\x13FA\x13FB\a\x47C\x2\x2\x13FB\x13FD\x3\x2\x2\x2\x13FC\x13F9\x3\x2\x2"+
		"\x2\x13FC\x13FD\x3\x2\x2\x2\x13FD\x13FE\x3\x2\x2\x2\x13FE\x1401\x5\x4D2"+
		"\x26A\x2\x13FF\x1400\a:\x2\x2\x1400\x1402\x5\x4C6\x264\x2\x1401\x13FF"+
		"\x3\x2\x2\x2\x1401\x1402\x3\x2\x2\x2\x1402\x1406\x3\x2\x2\x2\x1403\x1404"+
		"\a\x3AE\x2\x2\x1404\x1405\a\x438\x2\x2\x1405\x1407\a\x469\x2\x2\x1406"+
		"\x1403\x3\x2\x2\x2\x1406\x1407\x3\x2\x2\x2\x1407\x140E\x3\x2\x2\x2\x1408"+
		"\x1409\a\x1C5\x2\x2\x1409\x140B\aq\x2\x2\x140A\x140C\a\x48D\x2\x2\x140B"+
		"\x140A\x3\x2\x2\x2\x140B\x140C\x3\x2\x2\x2\x140C\x140D\x3\x2\x2\x2\x140D"+
		"\x140F\a\x469\x2\x2\x140E\x1408\x3\x2\x2\x2\x140E\x140F\x3\x2\x2\x2\x140F"+
		"\x1419\x3\x2\x2\x2\x1410\x1415\a\x246\x2\x2\x1411\x1413\a\x48D\x2\x2\x1412"+
		"\x1411\x3\x2\x2\x2\x1412\x1413\x3\x2\x2\x2\x1413\x1414\x3\x2\x2\x2\x1414"+
		"\x1416\a\x469\x2\x2\x1415\x1412\x3\x2\x2\x2\x1415\x1416\x3\x2\x2\x2\x1416"+
		"\x141A\x3\x2\x2\x2\x1417\x1418\a\x260\x2\x2\x1418\x141A\a\x246\x2\x2\x1419"+
		"\x1410\x3\x2\x2\x2\x1419\x1417\x3\x2\x2\x2\x1419\x141A\x3\x2\x2\x2\x141A"+
		"\x1424\x3\x2\x2\x2\x141B\x1420\a\x228\x2\x2\x141C\x141E\a\x48D\x2\x2\x141D"+
		"\x141C\x3\x2\x2\x2\x141D\x141E\x3\x2\x2\x2\x141E\x141F\x3\x2\x2\x2\x141F"+
		"\x1421\a\x469\x2\x2\x1420\x141D\x3\x2\x2\x2\x1420\x1421\x3\x2\x2\x2\x1421"+
		"\x1425\x3\x2\x2\x2\x1422\x1423\a\x260\x2\x2\x1423\x1425\a\x228\x2\x2\x1424"+
		"\x141B\x3\x2\x2\x2\x1424\x1422\x3\x2\x2\x2\x1424\x1425\x3\x2\x2\x2\x1425"+
		"\x1429\x3\x2\x2\x2\x1426\x142A\a\xDC\x2\x2\x1427\x1428\a\x260\x2\x2\x1428"+
		"\x142A\a\xDC\x2\x2\x1429\x1426\x3\x2\x2\x2\x1429\x1427\x3\x2\x2\x2\x1429"+
		"\x142A\x3\x2\x2\x2\x142A\x1431\x3\x2\x2\x2\x142B\x142D\ar\x2\x2\x142C"+
		"\x142E\a\x469\x2\x2\x142D\x142C\x3\x2\x2\x2\x142D\x142E\x3\x2\x2\x2\x142E"+
		"\x1432\x3\x2\x2\x2\x142F\x1430\a\x260\x2\x2\x1430\x1432\ar\x2\x2\x1431"+
		"\x142B\x3\x2\x2\x2\x1431\x142F\x3\x2\x2\x2\x1431\x1432\x3\x2\x2\x2\x1432"+
		"\x193\x3\x2\x2\x2\x1433\x1434\a%\x2\x2\x1434\x1435\a\x37A\x2\x2\x1435"+
		"\x1436\a\x42\x2\x2\x1436\x14BA\x5\x4D2\x26A\x2\x1437\x1464\a\x3EB\x2\x2"+
		"\x1438\x1439\a\x15C\x2\x2\x1439\x145E\a\x481\x2\x2\x143A\x143C\a\x485"+
		"\x2\x2\x143B\x143A\x3\x2\x2\x2\x143B\x143C\x3\x2\x2\x2\x143C\x143D\x3"+
		"\x2\x2\x2\x143D\x143E\a\x163\x2\x2\x143E\x143F\a\x46F\x2\x2\x143F\x145D"+
		"\a\x46B\x2\x2\x1440\x1442\a\x485\x2\x2\x1441\x1440\x3\x2\x2\x2\x1441\x1442"+
		"\x3\x2\x2\x2\x1442\x1443\x3\x2\x2\x2\x1443\x1444\a\x226\x2\x2\x1444\x1448"+
		"\a\x46F\x2\x2\x1445\x1446\a\x469\x2\x2\x1446\x1449\t\x35\x2\x2\x1447\x1449"+
		"\a\x40F\x2\x2\x1448\x1445\x3\x2\x2\x2\x1448\x1447\x3\x2\x2\x2\x1449\x145D"+
		"\x3\x2\x2\x2\x144A\x144C\a\x485\x2\x2\x144B\x144A\x3\x2\x2\x2\x144B\x144C"+
		"\x3\x2\x2\x2\x144C\x144D\x3\x2\x2\x2\x144D\x144E\a\x236\x2\x2\x144E\x144F"+
		"\a\x46F\x2\x2\x144F\x145D\t\x36\x2\x2\x1450\x1452\a\x485\x2\x2\x1451\x1450"+
		"\x3\x2\x2\x2\x1451\x1452\x3\x2\x2\x2\x1452\x1453\x3\x2\x2\x2\x1453\x1454"+
		"\a\x22E\x2\x2\x1454\x1455\a\x46F\x2\x2\x1455\x145D\a\x469\x2\x2\x1456"+
		"\x1458\a\x485\x2\x2\x1457\x1456\x3\x2\x2\x2\x1457\x1458\x3\x2\x2\x2\x1458"+
		"\x1459\x3\x2\x2\x2\x1459\x145A\a\x32D\x2\x2\x145A\x145B\a\x46F\x2\x2\x145B"+
		"\x145D\t\x13\x2\x2\x145C\x143B\x3\x2\x2\x2\x145C\x1441\x3\x2\x2\x2\x145C"+
		"\x144B\x3\x2\x2\x2\x145C\x1451\x3\x2\x2\x2\x145C\x1457\x3\x2\x2\x2\x145D"+
		"\x1460\x3\x2\x2\x2\x145E\x145C\x3\x2\x2\x2\x145E\x145F\x3\x2\x2\x2\x145F"+
		"\x1461\x3\x2\x2\x2\x1460\x145E\x3\x2\x2\x2\x1461\x1465\a\x482\x2\x2\x1462"+
		"\x1465\a\x33\x2\x2\x1463\x1465\a\x36D\x2\x2\x1464\x1438\x3\x2\x2\x2\x1464"+
		"\x1462\x3\x2\x2\x2\x1464\x1463\x3\x2\x2\x2\x1465\x1467\x3\x2\x2\x2\x1466"+
		"\x1437\x3\x2\x2\x2\x1466\x1467\x3\x2\x2\x2\x1467\x1482\x3\x2\x2\x2\x1468"+
		"\x1469\a\x438\x2\x2\x1469\x147E\a\x481\x2\x2\x146A\x146C\a\x485\x2\x2"+
		"\x146B\x146A\x3\x2\x2\x2\x146B\x146C\x3\x2\x2\x2\x146C\x146D\x3\x2\x2"+
		"\x2\x146D\x146E\a\x2F5\x2\x2\x146E\x146F\a\x46F\x2\x2\x146F\x147D\a\x469"+
		"\x2\x2\x1470\x1472\a\x485\x2\x2\x1471\x1470\x3\x2\x2\x2\x1471\x1472\x3"+
		"\x2\x2\x2\x1472\x1473\x3\x2\x2\x2\x1473\x1474\a\x297\x2\x2\x1474\x1475"+
		"\a\x46F\x2\x2\x1475\x147D\t\x37\x2\x2\x1476\x1478\a\x485\x2\x2\x1477\x1476"+
		"\x3\x2\x2\x2\x1477\x1478\x3\x2\x2\x2\x1478\x1479\x3\x2\x2\x2\x1479\x147A"+
		"\a\x3B2\x2\x2\x147A\x147B\a\x46F\x2\x2\x147B\x147D\t\x13\x2\x2\x147C\x146B"+
		"\x3\x2\x2\x2\x147C\x1471\x3\x2\x2\x2\x147C\x1477\x3\x2\x2\x2\x147D\x1480"+
		"\x3\x2\x2\x2\x147E\x147C\x3\x2\x2\x2\x147E\x147F\x3\x2\x2\x2\x147F\x1481"+
		"\x3\x2\x2\x2\x1480\x147E\x3\x2\x2\x2\x1481\x1483\a\x482\x2\x2\x1482\x1468"+
		"\x3\x2\x2\x2\x1482\x1483\x3\x2\x2\x2\x1483\x14B2\x3\x2\x2\x2\x1484\x14B0"+
		"\a\x435\x2\x2\x1485\x1487\a\x485\x2\x2\x1486\x1485\x3\x2\x2\x2\x1486\x1487"+
		"\x3\x2\x2\x2\x1487\x1489\x3\x2\x2\x2\x1488\x148A\a\x271\x2\x2\x1489\x1488"+
		"\x3\x2\x2\x2\x1489\x148A\x3\x2\x2\x2\x148A\x148B\x3\x2\x2\x2\x148B\x1497"+
		"\x5\x4D2\x26A\x2\x148C\x1498\a\x46F\x2\x2\x148D\x148E\a\x471\x2\x2\x148E"+
		"\x1498\a\x470\x2\x2\x148F\x1490\a\x472\x2\x2\x1490\x1498\a\x46F\x2\x2"+
		"\x1491\x1498\a\x470\x2\x2\x1492\x1493\a\x470\x2\x2\x1493\x1498\a\x46F"+
		"\x2\x2\x1494\x1498\a\x471\x2\x2\x1495\x1496\a\x471\x2\x2\x1496\x1498\a"+
		"\x46F\x2\x2\x1497\x148C\x3\x2\x2\x2\x1497\x148D\x3\x2\x2\x2\x1497\x148F"+
		"\x3\x2\x2\x2\x1497\x1491\x3\x2\x2\x2\x1497\x1492\x3\x2\x2\x2\x1497\x1494"+
		"\x3\x2\x2\x2\x1497\x1495\x3\x2\x2\x2\x1498\x1499\x3\x2\x2\x2\x1499\x149A"+
		"\t!\x2\x2\x149A\x14B1\x3\x2\x2\x2\x149B\x149D\a\x485\x2\x2\x149C\x149B"+
		"\x3\x2\x2\x2\x149C\x149D\x3\x2\x2\x2\x149D\x149E\x3\x2\x2\x2\x149E\x14A0"+
		"\t&\x2\x2\x149F\x14A1\a\x271\x2\x2\x14A0\x149F\x3\x2\x2\x2\x14A0\x14A1"+
		"\x3\x2\x2\x2\x14A1\x14AD\x3\x2\x2\x2\x14A2\x14AE\a\x46F\x2\x2\x14A3\x14A4"+
		"\a\x471\x2\x2\x14A4\x14AE\a\x470\x2\x2\x14A5\x14A6\a\x472\x2\x2\x14A6"+
		"\x14AE\a\x46F\x2\x2\x14A7\x14AE\a\x470\x2\x2\x14A8\x14A9\a\x470\x2\x2"+
		"\x14A9\x14AE\a\x46F\x2\x2\x14AA\x14AE\a\x471\x2\x2\x14AB\x14AC\a\x471"+
		"\x2\x2\x14AC\x14AE\a\x46F\x2\x2\x14AD\x14A2\x3\x2\x2\x2\x14AD\x14A3\x3"+
		"\x2\x2\x2\x14AD\x14A5\x3\x2\x2\x2\x14AD\x14A7\x3\x2\x2\x2\x14AD\x14A8"+
		"\x3\x2\x2\x2\x14AD\x14AA\x3\x2\x2\x2\x14AD\x14AB\x3\x2\x2\x2\x14AE\x14AF"+
		"\x3\x2\x2\x2\x14AF\x14B1\t!\x2\x2\x14B0\x1486\x3\x2\x2\x2\x14B0\x149C"+
		"\x3\x2\x2\x2\x14B1\x14B3\x3\x2\x2\x2\x14B2\x1484\x3\x2\x2\x2\x14B2\x14B3"+
		"\x3\x2\x2\x2\x14B3\x14BB\x3\x2\x2\x2\x14B4\x14B5\a\x31C\x2\x2\x14B5\x14BB"+
		"\a\x435\x2\x2\x14B6\x14B7\a\x24F\x2\x2\x14B7\x14B8\a\x254\x2\x2\x14B8"+
		"\x14B9\a\x46F\x2\x2\x14B9\x14BB\x5\x4D2\x26A\x2\x14BA\x1466\x3\x2\x2\x2"+
		"\x14BA\x14B4\x3\x2\x2\x2\x14BA\x14B6\x3\x2\x2\x2\x14BB\x195\x3\x2\x2\x2"+
		"\x14BC\x14BD\a\xCA\x2\x2\x14BD\x14BE\a\x37A\x2\x2\x14BE\x14BF\a\x42\x2"+
		"\x2\x14BF\x1549\x5\x4D2\x26A\x2\x14C0\x14ED\a\x3EB\x2\x2\x14C1\x14C2\a"+
		"\x15C\x2\x2\x14C2\x14E7\a\x481\x2\x2\x14C3\x14C5\a\x485\x2\x2\x14C4\x14C3"+
		"\x3\x2\x2\x2\x14C4\x14C5\x3\x2\x2\x2\x14C5\x14C6\x3\x2\x2\x2\x14C6\x14C7"+
		"\a\x163\x2\x2\x14C7\x14C8\a\x46F\x2\x2\x14C8\x14E6\a\x46B\x2\x2\x14C9"+
		"\x14CB\a\x485\x2\x2\x14CA\x14C9\x3\x2\x2\x2\x14CA\x14CB\x3\x2\x2\x2\x14CB"+
		"\x14CC\x3\x2\x2\x2\x14CC\x14CD\a\x226\x2\x2\x14CD\x14D1\a\x46F\x2\x2\x14CE"+
		"\x14CF\a\x469\x2\x2\x14CF\x14D2\t\x35\x2\x2\x14D0\x14D2\a\x40F\x2\x2\x14D1"+
		"\x14CE\x3\x2\x2\x2\x14D1\x14D0\x3\x2\x2\x2\x14D2\x14E6\x3\x2\x2\x2\x14D3"+
		"\x14D5\a\x485\x2\x2\x14D4\x14D3\x3\x2\x2\x2\x14D4\x14D5\x3\x2\x2\x2\x14D5"+
		"\x14D6\x3\x2\x2\x2\x14D6\x14D7\a\x236\x2\x2\x14D7\x14D8\a\x46F\x2\x2\x14D8"+
		"\x14E6\t\x36\x2\x2\x14D9\x14DB\a\x485\x2\x2\x14DA\x14D9\x3\x2\x2\x2\x14DA"+
		"\x14DB\x3\x2\x2\x2\x14DB\x14DC\x3\x2\x2\x2\x14DC\x14DD\a\x22E\x2\x2\x14DD"+
		"\x14DE\a\x46F\x2\x2\x14DE\x14E6\a\x469\x2\x2\x14DF\x14E1\a\x485\x2\x2"+
		"\x14E0\x14DF\x3\x2\x2\x2\x14E0\x14E1\x3\x2\x2\x2\x14E1\x14E2\x3\x2\x2"+
		"\x2\x14E2\x14E3\a\x32D\x2\x2\x14E3\x14E4\a\x46F\x2\x2\x14E4\x14E6\t\x13"+
		"\x2\x2\x14E5\x14C4\x3\x2\x2\x2\x14E5\x14CA\x3\x2\x2\x2\x14E5\x14D4\x3"+
		"\x2\x2\x2\x14E5\x14DA\x3\x2\x2\x2\x14E5\x14E0\x3\x2\x2\x2\x14E6\x14E9"+
		"\x3\x2\x2\x2\x14E7\x14E5\x3\x2\x2\x2\x14E7\x14E8\x3\x2\x2\x2\x14E8\x14EA"+
		"\x3\x2\x2\x2\x14E9\x14E7\x3\x2\x2\x2\x14EA\x14EE\a\x482\x2\x2\x14EB\x14EE"+
		"\a\x33\x2\x2\x14EC\x14EE\a\x36D\x2\x2\x14ED\x14C1\x3\x2\x2\x2\x14ED\x14EB"+
		"\x3\x2\x2\x2\x14ED\x14EC\x3\x2\x2\x2\x14EE\x14F0\x3\x2\x2\x2\x14EF\x14C0"+
		"\x3\x2\x2\x2\x14EF\x14F0\x3\x2\x2\x2\x14F0\x1511\x3\x2\x2\x2\x14F1\x14F2"+
		"\a\x438\x2\x2\x14F2\x150D\a\x481\x2\x2\x14F3\x14F5\a\x485\x2\x2\x14F4"+
		"\x14F3\x3\x2\x2\x2\x14F4\x14F5\x3\x2\x2\x2\x14F5\x14F6\x3\x2\x2\x2\x14F6"+
		"\x14F7\a\x2F5\x2\x2\x14F7\x14F8\a\x46F\x2\x2\x14F8\x150C\a\x469\x2\x2"+
		"\x14F9\x14FB\a\x485\x2\x2\x14FA\x14F9\x3\x2\x2\x2\x14FA\x14FB\x3\x2\x2"+
		"\x2\x14FB\x14FC\x3\x2\x2\x2\x14FC\x14FD\a\x297\x2\x2\x14FD\x14FE\a\x46F"+
		"\x2\x2\x14FE\x150C\t\x37\x2\x2\x14FF\x1501\a\x485\x2\x2\x1500\x14FF\x3"+
		"\x2\x2\x2\x1500\x1501\x3\x2\x2\x2\x1501\x1502\x3\x2\x2\x2\x1502\x1503"+
		"\a\x3B2\x2\x2\x1503\x1504\a\x46F\x2\x2\x1504\x150C\t\x13\x2\x2\x1505\x1507"+
		"\a\x485\x2\x2\x1506\x1505\x3\x2\x2\x2\x1506\x1507\x3\x2\x2\x2\x1507\x1508"+
		"\x3\x2\x2\x2\x1508\x1509\a\x43\x2\x2\x1509\x150A\a\x46F\x2\x2\x150A\x150C"+
		"\x5\x4D2\x26A\x2\x150B\x14F4\x3\x2\x2\x2\x150B\x14FA\x3\x2\x2\x2\x150B"+
		"\x1500\x3\x2\x2\x2\x150B\x1506\x3\x2\x2\x2\x150C\x150F\x3\x2\x2\x2\x150D"+
		"\x150B\x3\x2\x2\x2\x150D\x150E\x3\x2\x2\x2\x150E\x1510\x3\x2\x2\x2\x150F"+
		"\x150D\x3\x2\x2\x2\x1510\x1512\a\x482\x2\x2\x1511\x14F1\x3\x2\x2\x2\x1511"+
		"\x1512\x3\x2\x2\x2\x1512\x1541\x3\x2\x2\x2\x1513\x153F\a\x435\x2\x2\x1514"+
		"\x1516\a\x485\x2\x2\x1515\x1514\x3\x2\x2\x2\x1515\x1516\x3\x2\x2\x2\x1516"+
		"\x1518\x3\x2\x2\x2\x1517\x1519\a\x271\x2\x2\x1518\x1517\x3\x2\x2\x2\x1518"+
		"\x1519\x3\x2\x2\x2\x1519\x151A\x3\x2\x2\x2\x151A\x1526\x5\x4D2\x26A\x2"+
		"\x151B\x1527\a\x46F\x2\x2\x151C\x151D\a\x471\x2\x2\x151D\x1527\a\x470"+
		"\x2\x2\x151E\x151F\a\x472\x2\x2\x151F\x1527\a\x46F\x2\x2\x1520\x1527\a"+
		"\x470\x2\x2\x1521\x1522\a\x470\x2\x2\x1522\x1527\a\x46F\x2\x2\x1523\x1527"+
		"\a\x471\x2\x2\x1524\x1525\a\x471\x2\x2\x1525\x1527\a\x46F\x2\x2\x1526"+
		"\x151B\x3\x2\x2\x2\x1526\x151C\x3\x2\x2\x2\x1526\x151E\x3\x2\x2\x2\x1526"+
		"\x1520\x3\x2\x2\x2\x1526\x1521\x3\x2\x2\x2\x1526\x1523\x3\x2\x2\x2\x1526"+
		"\x1524\x3\x2\x2\x2\x1527\x1528\x3\x2\x2\x2\x1528\x1529\t!\x2\x2\x1529"+
		"\x1540\x3\x2\x2\x2\x152A\x152C\a\x485\x2\x2\x152B\x152A\x3\x2\x2\x2\x152B"+
		"\x152C\x3\x2\x2\x2\x152C\x152D\x3\x2\x2\x2\x152D\x152F\t&\x2\x2\x152E"+
		"\x1530\a\x271\x2\x2\x152F\x152E\x3\x2\x2\x2\x152F\x1530\x3\x2\x2\x2\x1530"+
		"\x153C\x3\x2\x2\x2\x1531\x153D\a\x46F\x2\x2\x1532\x1533\a\x471\x2\x2\x1533"+
		"\x153D\a\x470\x2\x2\x1534\x1535\a\x472\x2\x2\x1535\x153D\a\x46F\x2\x2"+
		"\x1536\x153D\a\x470\x2\x2\x1537\x1538\a\x470\x2\x2\x1538\x153D\a\x46F"+
		"\x2\x2\x1539\x153D\a\x471\x2\x2\x153A\x153B\a\x471\x2\x2\x153B\x153D\a"+
		"\x46F\x2\x2\x153C\x1531\x3\x2\x2\x2\x153C\x1532\x3\x2\x2\x2\x153C\x1534"+
		"\x3\x2\x2\x2\x153C\x1536\x3\x2\x2\x2\x153C\x1537\x3\x2\x2\x2\x153C\x1539"+
		"\x3\x2\x2\x2\x153C\x153A\x3\x2\x2\x2\x153D\x153E\x3\x2\x2\x2\x153E\x1540"+
		"\t!\x2\x2\x153F\x1515\x3\x2\x2\x2\x153F\x152B\x3\x2\x2\x2\x1540\x1542"+
		"\x3\x2\x2\x2\x1541\x1513\x3\x2\x2\x2\x1541\x1542\x3\x2\x2\x2\x1542\x154A"+
		"\x3\x2\x2\x2\x1543\x1544\a\x31C\x2\x2\x1544\x154A\a\x435\x2\x2\x1545\x1546"+
		"\a\x24F\x2\x2\x1546\x1547\a\x254\x2\x2\x1547\x1548\a\x46F\x2\x2\x1548"+
		"\x154A\x5\x4D2\x26A\x2\x1549\x14EF\x3\x2\x2\x2\x1549\x1543\x3\x2\x2\x2"+
		"\x1549\x1545\x3\x2\x2\x2\x154A\x197\x3\x2\x2\x2\x154B\x154C\a%\x2\x2\x154C"+
		"\x154D\a\x37A\x2\x2\x154D\x154E\a\x42\x2\x2\x154E\x154F\a\x3A5\x2\x2\x154F"+
		"\x1554\x5\x4D2\x26A\x2\x1550\x1551\a\x172\x2\x2\x1551\x1552\a\x37A\x2"+
		"\x2\x1552\x1553\a\x42\x2\x2\x1553\x1555\x5\x4D2\x26A\x2\x1554\x1550\x3"+
		"\x2\x2\x2\x1554\x1555\x3\x2\x2\x2\x1555\x155D\x3\x2\x2\x2\x1556\x1557"+
		"\t\x19\x2\x2\x1557\x1558\a\x481\x2\x2\x1558\x1559\x5\x4D2\x26A\x2\x1559"+
		"\x155A\a\x482\x2\x2\x155A\x155C\x3\x2\x2\x2\x155B\x1556\x3\x2\x2\x2\x155C"+
		"\x155F\x3\x2\x2\x2\x155D\x155B\x3\x2\x2\x2\x155D\x155E\x3\x2\x2\x2\x155E"+
		"\x1566\x3\x2\x2\x2\x155F\x155D\x3\x2\x2\x2\x1560\x1561\a\x438\x2\x2\x1561"+
		"\x1562\a\x481\x2\x2\x1562\x1563\a\x3B2\x2\x2\x1563\x1564\a\x46F\x2\x2"+
		"\x1564\x1565\t\x13\x2\x2\x1565\x1567\a\x482\x2\x2\x1566\x1560\x3\x2\x2"+
		"\x2\x1566\x1567\x3\x2\x2\x2\x1567\x199\x3\x2\x2\x2\x1568\x1569\a\xCA\x2"+
		"\x2\x1569\x156A\a\x37A\x2\x2\x156A\x156B\a\x42\x2\x2\x156B\x156C\a\x3A5"+
		"\x2\x2\x156C\x1571\x5\x4D2\x26A\x2\x156D\x156E\a\x172\x2\x2\x156E\x156F"+
		"\a\x37A\x2\x2\x156F\x1570\a\x42\x2\x2\x1570\x1572\x5\x4D2\x26A\x2\x1571"+
		"\x156D\x3\x2\x2\x2\x1571\x1572\x3\x2\x2\x2\x1572\x157A\x3\x2\x2\x2\x1573"+
		"\x1574\a\r\x2\x2\x1574\x1575\a\x481\x2\x2\x1575\x1576\x5\x4D2\x26A\x2"+
		"\x1576\x1577\a\x482\x2\x2\x1577\x1579\x3\x2\x2\x2\x1578\x1573\x3\x2\x2"+
		"\x2\x1579\x157C\x3\x2\x2\x2\x157A\x1578\x3\x2\x2\x2\x157A\x157B\x3\x2"+
		"\x2\x2\x157B\x1583\x3\x2\x2\x2\x157C\x157A\x3\x2\x2\x2\x157D\x157E\a\x438"+
		"\x2\x2\x157E\x157F\a\x481\x2\x2\x157F\x1580\a\x3B2\x2\x2\x1580\x1581\a"+
		"\x46F\x2\x2\x1581\x1582\t\x13\x2\x2\x1582\x1584\a\x482\x2\x2\x1583\x157D"+
		"\x3\x2\x2\x2\x1583\x1584\x3\x2\x2\x2\x1584\x19B\x3\x2\x2\x2\x1585\x1586"+
		"\a%\x2\x2\x1586\x1587\a\x37A\x2\x2\x1587\x1588\a\xB2\x2\x2\x1588\x15F2"+
		"\a\x386\x2\x2\x1589\x158A\a\x2E6\x2\x2\x158A\x15AE\a\x14\x2\x2\x158B\x158C"+
		"\a\xC9\x2\x2\x158C\x159C\a\x46F\x2\x2\x158D\x159D\aG\x2\x2\x158E\x1590"+
		"\a\x485\x2\x2\x158F\x158E\x3\x2\x2\x2\x158F\x1590\x3\x2\x2\x2\x1590\x1591"+
		"\x3\x2\x2\x2\x1591\x1599\a\x469\x2\x2\x1592\x1594\a\x485\x2\x2\x1593\x1592"+
		"\x3\x2\x2\x2\x1593\x1594\x3\x2\x2\x2\x1594\x1595\x3\x2\x2\x2\x1595\x1596"+
		"\a\x469\x2\x2\x1596\x1597\a\x3EB\x2\x2\x1597\x1599\a\x469\x2\x2\x1598"+
		"\x158F\x3\x2\x2\x2\x1598\x1593\x3\x2\x2\x2\x1599\x159A\x3\x2\x2\x2\x159A"+
		"\x1598\x3\x2\x2\x2\x159A\x159B\x3\x2\x2\x2\x159B\x159D\x3\x2\x2\x2\x159C"+
		"\x158D\x3\x2\x2\x2\x159C\x1598\x3\x2\x2\x2\x159D\x15AF\x3\x2\x2\x2\x159E"+
		"\x159F\a\x283\x2\x2\x159F\x15AA\a\x46F\x2\x2\x15A0\x15A2\a\x485\x2\x2"+
		"\x15A1\x15A0\x3\x2\x2\x2\x15A1\x15A2\x3\x2\x2\x2\x15A2\x15A3\x3\x2\x2"+
		"\x2\x15A3\x15AB\a\x469\x2\x2\x15A4\x15A6\a\x485\x2\x2\x15A5\x15A4\x3\x2"+
		"\x2\x2\x15A5\x15A6\x3\x2\x2\x2\x15A6\x15A7\x3\x2\x2\x2\x15A7\x15A8\a\x469"+
		"\x2\x2\x15A8\x15A9\a\x3EB\x2\x2\x15A9\x15AB\a\x469\x2\x2\x15AA\x15A1\x3"+
		"\x2\x2\x2\x15AA\x15A5\x3\x2\x2\x2\x15AB\x15AC\x3\x2\x2\x2\x15AC\x15AA"+
		"\x3\x2\x2\x2\x15AC\x15AD\x3\x2\x2\x2\x15AD\x15AF\x3\x2\x2\x2\x15AE\x158B"+
		"\x3\x2\x2\x2\x15AE\x159E\x3\x2\x2\x2\x15AF\x15F3\x3\x2\x2\x2\x15B0\x15B1"+
		"\a\x10D\x2\x2\x15B1\x15C1\a\x215\x2\x2\x15B2\x15C2\a\x294\x2\x2\x15B3"+
		"\x15C2\a\x28E\x2\x2\x15B4\x15B5\a\x2BF\x2\x2\x15B5\x15B6\a\x46F\x2\x2"+
		"\x15B6\x15C2\t\x38\x2\x2\x15B7\x15B8\a\x237\x2\x2\x15B8\x15BC\a\x46F\x2"+
		"\x2\x15B9\x15BA\a\x469\x2\x2\x15BA\x15BD\a\x239\x2\x2\x15BB\x15BD\a\xF9"+
		"\x2\x2\x15BC\x15B9\x3\x2\x2\x2\x15BC\x15BB\x3\x2\x2\x2\x15BD\x15C2\x3"+
		"\x2\x2\x2\x15BE\x15BF\a\x22E\x2\x2\x15BF\x15C0\a\x46F\x2\x2\x15C0\x15C2"+
		"\t\x39\x2\x2\x15C1\x15B2\x3\x2\x2\x2\x15C1\x15B3\x3\x2\x2\x2\x15C1\x15B4"+
		"\x3\x2\x2\x2\x15C1\x15B7\x3\x2\x2\x2\x15C1\x15BE\x3\x2\x2\x2\x15C2\x15F3"+
		"\x3\x2\x2\x2\x15C3\x15C4\a\x152\x2\x2\x15C4\x15C5\a\x99\x2\x2\x15C5\x15D7"+
		"\a\x2E8\x2\x2\x15C6\x15C7\a\x428\x2\x2\x15C7\x15C8\a\x46F\x2\x2\x15C8"+
		"\x15D8\t\x38\x2\x2\x15C9\x15CA\a\x3A8\x2\x2\x15CA\x15CB\a\x46F\x2\x2\x15CB"+
		"\x15D8\t\x38\x2\x2\x15CC\x15CD\a\x3A9\x2\x2\x15CD\x15CE\a\x46F\x2\x2\x15CE"+
		"\x15D8\t\x38\x2\x2\x15CF\x15D0\a\x3AA\x2\x2\x15D0\x15D8\t\x38\x2\x2\x15D1"+
		"\x15D2\a\x155\x2\x2\x15D2\x15D3\a\x46F\x2\x2\x15D3\x15D8\t\x38\x2\x2\x15D4"+
		"\x15D5\a\x1A5\x2\x2\x15D5\x15D6\a\x46F\x2\x2\x15D6\x15D8\t\x39\x2\x2\x15D7"+
		"\x15C6\x3\x2\x2\x2\x15D7\x15C9\x3\x2\x2\x2\x15D7\x15CC\x3\x2\x2\x2\x15D7"+
		"\x15CF\x3\x2\x2\x2\x15D7\x15D1\x3\x2\x2\x2\x15D7\x15D4\x3\x2\x2\x2\x15D8"+
		"\x15F3\x3\x2\x2\x2\x15D9\x15DA\a\x19F\x2\x2\x15DA\x15DB\a\x99\x2\x2\x15DB"+
		"\x15DC\a\xBB\x2\x2\x15DC\x15DD\a\x46F\x2\x2\x15DD\x15F3\t:\x2\x2\x15DE"+
		"\x15DF\am\x2\x2\x15DF\x15E0\a\x2D4\x2\x2\x15E0\x15ED\a\x14F\x2\x2\x15E1"+
		"\x15E2\a\x294\x2\x2\x15E2\x15E3\a\x481\x2\x2\x15E3\x15E4\a\x162\x2\x2"+
		"\x15E4\x15E5\a\x46F\x2\x2\x15E5\x15E6\a\x46B\x2\x2\x15E6\x15E7\a\x485"+
		"\x2\x2\x15E7\x15E8\a\x398\x2\x2\x15E8\x15E9\a\x46F\x2\x2\x15E9\x15EA\a"+
		"\x469\x2\x2\x15EA\x15EB\t;\x2\x2\x15EB\x15EE\a\x482\x2\x2\x15EC\x15EE"+
		"\a\x28E\x2\x2\x15ED\x15E1\x3\x2\x2\x2\x15ED\x15EC\x3\x2\x2\x2\x15EE\x15F3"+
		"\x3\x2\x2\x2\x15EF\x15F0\a\x386\x2\x2\x15F0\x15F1\a\x39D\x2\x2\x15F1\x15F3"+
		"\t\x13\x2\x2\x15F2\x1589\x3\x2\x2\x2\x15F2\x15B0\x3\x2\x2\x2\x15F2\x15C3"+
		"\x3\x2\x2\x2\x15F2\x15D9\x3\x2\x2\x2\x15F2\x15DE\x3\x2\x2\x2\x15F2\x15EF"+
		"\x3\x2\x2\x2\x15F3\x19D\x3\x2\x2\x2\x15F4\x15F5\a%\x2\x2\x15F5\x15F6\a"+
		"\x37A\x2\x2\x15F6\x15F7\a\x342\x2\x2\x15F7\x15FF\x5\x4D2\x26A\x2\x15F8"+
		"\x15F9\t\x19\x2\x2\x15F9\x15FA\a\x23D\x2\x2\x15FA\x1600\x5\x4D2\x26A\x2"+
		"\x15FB\x15FC\a\x438\x2\x2\x15FC\x15FD\a\x254\x2\x2\x15FD\x15FE\a\x46F"+
		"\x2\x2\x15FE\x1600\x5\x4D2\x26A\x2\x15FF\x15F8\x3\x2\x2\x2\x15FF\x15FB"+
		"\x3\x2\x2\x2\x1600\x19F\x3\x2\x2\x2\x1601\x1602\a\xCA\x2\x2\x1602\x1603"+
		"\a\x37A\x2\x2\x1603\x1604\a\x342\x2\x2\x1604\x1607\x5\x4D2\x26A\x2\x1605"+
		"\x1606\a\x46\x2\x2\x1606\x1608\x5\x4D2\x26A\x2\x1607\x1605\x3\x2\x2\x2"+
		"\x1607\x1608\x3\x2\x2\x2\x1608\x1A1\x3\x2\x2\x2\x1609\x160A\a%\x2\x2\x160A"+
		"\x160B\a\x37A\x2\x2\x160B\x160C\a\x342\x2\x2\x160C\x160D\x5\x4D2\x26A"+
		"\x2\x160D\x160E\t\x19\x2\x2\x160E\x160F\a\x23D\x2\x2\x160F\x1610\x5\x4D2"+
		"\x26A\x2\x1610\x1A3\x3\x2\x2\x2\x1611\x1612\a%\x2\x2\x1612\x1613\a\x37C"+
		"\x2\x2\x1613\x161C\x5\x4D2\x26A\x2\x1614\x1615\a\x294\x2\x2\x1615\x1619"+
		"\a\x2F4\x2\x2\x1616\x1617\x5\x4D2\x26A\x2\x1617\x1618\a\x47C\x2\x2\x1618"+
		"\x161A\x3\x2\x2\x2\x1619\x1616\x3\x2\x2\x2\x1619\x161A\x3\x2\x2\x2\x161A"+
		"\x161B\x3\x2\x2\x2\x161B\x161D\x5\x4D2\x26A\x2\x161C\x1614\x3\x2\x2\x2"+
		"\x161C\x161D\x3\x2\x2\x2\x161D\x1629\x3\x2\x2\x2\x161E\x161F\a\x481\x2"+
		"\x2\x161F\x1624\x5\x1A6\xD4\x2\x1620\x1621\a\x485\x2\x2\x1621\x1623\x5"+
		"\x1A6\xD4\x2\x1622\x1620\x3\x2\x2\x2\x1623\x1626\x3\x2\x2\x2\x1624\x1622"+
		"\x3\x2\x2\x2\x1624\x1625\x3\x2\x2\x2\x1625\x1627\x3\x2\x2\x2\x1626\x1624"+
		"\x3\x2\x2\x2\x1627\x1628\a\x482\x2\x2\x1628\x162A\x3\x2\x2\x2\x1629\x161E"+
		"\x3\x2\x2\x2\x1629\x162A\x3\x2\x2\x2\x162A\x1A5\x3\x2\x2\x2\x162B\x162C"+
		"\t\x19\x2\x2\x162C\x162D\a\xBF\x2\x2\x162D\x162E\x5\x4D2\x26A\x2\x162E"+
		"\x1A7\x3\x2\x2\x2\x162F\x1630\a\xCA\x2\x2\x1630\x1631\a\x37C\x2\x2\x1631"+
		"\x1634\x5\x4D2\x26A\x2\x1632\x1633\a\x46\x2\x2\x1633\x1635\x5\x4D2\x26A"+
		"\x2\x1634\x1632\x3\x2\x2\x2\x1634\x1635\x3\x2\x2\x2\x1635\x1636\x3\x2"+
		"\x2\x2\x1636\x1637\a\x294\x2\x2\x1637\x163B\a\x2F4\x2\x2\x1638\x1639\x5"+
		"\x4D2\x26A\x2\x1639\x163A\a\x47C\x2\x2\x163A\x163C\x3\x2\x2\x2\x163B\x1638"+
		"\x3\x2\x2\x2\x163B\x163C\x3\x2\x2\x2\x163C\x163D\x3\x2\x2\x2\x163D\x164B"+
		"\x5\x4D2\x26A\x2\x163E\x1646\a\x481\x2\x2\x163F\x1641\a\x485\x2\x2\x1640"+
		"\x163F\x3\x2\x2\x2\x1640\x1641\x3\x2\x2\x2\x1641\x1644\x3\x2\x2\x2\x1642"+
		"\x1645\x5\x4D2\x26A\x2\x1643\x1645\a\xF9\x2\x2\x1644\x1642\x3\x2\x2\x2"+
		"\x1644\x1643\x3\x2\x2\x2\x1645\x1647\x3\x2\x2\x2\x1646\x1640\x3\x2\x2"+
		"\x2\x1647\x1648\x3\x2\x2\x2\x1648\x1646\x3\x2\x2\x2\x1648\x1649\x3\x2"+
		"\x2\x2\x1649\x164A\x3\x2\x2\x2\x164A\x164C\a\x482\x2\x2\x164B\x163E\x3"+
		"\x2\x2\x2\x164B\x164C\x3\x2\x2\x2\x164C\x1A9\x3\x2\x2\x2\x164D\x164E\a"+
		"%\x2\x2\x164E\x164F\a\x37C\x2\x2\x164F\x1650\a\x220\x2\x2\x1650\x1666"+
		"\a\x1F2\x2\x2\x1651\x1653\a\x173\x2\x2\x1652\x1651\x3\x2\x2\x2\x1652\x1653"+
		"\x3\x2\x2\x2\x1653\x1654\x3\x2\x2\x2\x1654\x1667\a\x315\x2\x2\x1655\x1664"+
		"\a\x438\x2\x2\x1656\x1657\a\x292\x2\x2\x1657\x1658\a\x46F\x2\x2\x1658"+
		"\x1659\a\x46B\x2\x2\x1659\x165A\a\x485\x2\x2\x165A\x165B\a\x293\x2\x2"+
		"\x165B\x165C\a\x46F\x2\x2\x165C\x1665\a\x46B\x2\x2\x165D\x165E\a\x25C"+
		"\x2\x2\x165E\x165F\a\x46F\x2\x2\x165F\x1660\a\x46B\x2\x2\x1660\x1661\a"+
		"\x485\x2\x2\x1661\x1662\a\x25E\x2\x2\x1662\x1663\a\x46F\x2\x2\x1663\x1665"+
		"\a\x46B\x2\x2\x1664\x1656\x3\x2\x2\x2\x1664\x165D\x3\x2\x2\x2\x1664\x1665"+
		"\x3\x2\x2\x2\x1665\x1667\x3\x2\x2\x2\x1666\x1652\x3\x2\x2\x2\x1666\x1655"+
		"\x3\x2\x2\x2\x1667\x1AB\x3\x2\x2\x2\x1668\x1669\a%\x2\x2\x1669\x166A\a"+
		"\x3D2\x2\x2\x166A\x166B\a\x1F2\x2\x2\x166B\x166C\x5\x4D2\x26A\x2\x166C"+
		"\x166D\t\x19\x2\x2\x166D\x166E\a\x12E\x2\x2\x166E\x167A\aq\x2\x2\x166F"+
		"\x1670\a}\x2\x2\x1670\x167B\x5\x4D2\x26A\x2\x1671\x1672\a\x2BE\x2\x2\x1672"+
		"\x1673\a\x46F\x2\x2\x1673\x167B\a\x46B\x2\x2\x1674\x1675\a\x3D2\x2\x2"+
		"\x1675\x1676\a\x1F2\x2\x2\x1676\x167B\x5\x4D2\x26A\x2\x1677\x1678\a?\x2"+
		"\x2\x1678\x1679\a\x1F2\x2\x2\x1679\x167B\x5\x4D2\x26A\x2\x167A\x166F\x3"+
		"\x2\x2\x2\x167A\x1671\x3\x2\x2\x2\x167A\x1674\x3\x2\x2\x2\x167A\x1677"+
		"\x3\x2\x2\x2\x167B\x1AD\x3\x2\x2\x2\x167C\x167D\a\xCA\x2\x2\x167D\x1681"+
		"\a\x3D4\x2\x2\x167E\x167F\x5\x4D2\x26A\x2\x167F\x1680\a\x47C\x2\x2\x1680"+
		"\x1682\x3\x2\x2\x2\x1681\x167E\x3\x2\x2\x2\x1681\x1682\x3\x2\x2\x2\x1682"+
		"\x1683\x3\x2\x2\x2\x1683\x1684\x5\x4D2\x26A\x2\x1684\x169F\a\x172\x2\x2"+
		"\x1685\x1686\x5\x4D2\x26A\x2\x1686\x1687\a\x47C\x2\x2\x1687\x1689\x3\x2"+
		"\x2\x2\x1688\x1685\x3\x2\x2\x2\x1688\x1689\x3\x2\x2\x2\x1689\x168D\x3"+
		"\x2\x2\x2\x168A\x168B\x5\x4D2\x26A\x2\x168B\x168C\a\x47C\x2\x2\x168C\x168E"+
		"\x3\x2\x2\x2\x168D\x168A\x3\x2\x2\x2\x168D\x168E\x3\x2\x2\x2\x168E\x1692"+
		"\x3\x2\x2\x2\x168F\x1690\x5\x4D2\x26A\x2\x1690\x1691\a\x47C\x2\x2\x1691"+
		"\x1693\x3\x2\x2\x2\x1692\x168F\x3\x2\x2\x2\x1692\x1693\x3\x2\x2\x2\x1693"+
		"\x1694\x3\x2\x2\x2\x1694\x16A0\x5\x4D2\x26A\x2\x1695\x1696\x5\x4D2\x26A"+
		"\x2\x1696\x1697\a\x47C\x2\x2\x1697\x1699\x3\x2\x2\x2\x1698\x1695\x3\x2"+
		"\x2\x2\x1698\x1699\x3\x2\x2\x2\x1699\x169D\x3\x2\x2\x2\x169A\x169B\x5"+
		"\x4D2\x26A\x2\x169B\x169C\a\x47C\x2\x2\x169C\x169E\x3\x2\x2\x2\x169D\x169A"+
		"\x3\x2\x2\x2\x169D\x169E\x3\x2\x2\x2\x169E\x16A0\x3\x2\x2\x2\x169F\x1688"+
		"\x3\x2\x2\x2\x169F\x1698\x3\x2\x2\x2\x16A0\x1AF\x3\x2\x2\x2\x16A1\x16A2"+
		"\a%\x2\x2\x16A2\x16A3\a\x41B\x2\x2\x16A3\x16A4\x5\x4D2\x26A\x2\x16A4\x16D7"+
		"\a\x438\x2\x2\x16A5\x16A7\a\x485\x2\x2\x16A6\x16A5\x3\x2\x2\x2\x16A6\x16A7"+
		"\x3\x2\x2\x2\x16A7\x16A8\x3\x2\x2\x2\x16A8\x16A9\a\x254\x2\x2\x16A9\x16AA"+
		"\a\x46F\x2\x2\x16AA\x16D8\x5\x4D2\x26A\x2\x16AB\x16AD\a\x485\x2\x2\x16AC"+
		"\x16AB\x3\x2\x2\x2\x16AC\x16AD\x3\x2\x2\x2\x16AD\x16AE\x3\x2\x2\x2\x16AE"+
		"\x16AF\a\xFE\x2\x2\x16AF\x16B2\a\x46F\x2\x2\x16B0\x16B3\x5\x4D2\x26A\x2"+
		"\x16B1\x16B3\a\x281\x2\x2\x16B2\x16B0\x3\x2\x2\x2\x16B2\x16B1\x3\x2\x2"+
		"\x2\x16B3\x16D8\x3\x2\x2\x2\x16B4\x16B6\a\x485\x2\x2\x16B5\x16B4\x3\x2"+
		"\x2\x2\x16B5\x16B6\x3\x2\x2\x2\x16B6\x16B7\x3\x2\x2\x2\x16B7\x16B8\a\x216"+
		"\x2\x2\x16B8\x16B9\a\x46F\x2\x2\x16B9\x16D8\x5\x4D2\x26A\x2\x16BA\x16BC"+
		"\a\x485\x2\x2\x16BB\x16BA\x3\x2\x2\x2\x16BB\x16BC\x3\x2\x2\x2\x16BC\x16BD"+
		"\x3\x2\x2\x2\x16BD\x16BE\a\x2BE\x2\x2\x16BE\x16BF\a\x46F\x2\x2\x16BF\x16C3"+
		"\a\x46B\x2\x2\x16C0\x16C1\a\x293\x2\x2\x16C1\x16C2\a\x46F\x2\x2\x16C2"+
		"\x16C4\a\x46B\x2\x2\x16C3\x16C0\x3\x2\x2\x2\x16C4\x16C5\x3\x2\x2\x2\x16C5"+
		"\x16C3\x3\x2\x2\x2\x16C5\x16C6\x3\x2\x2\x2\x16C6\x16D8\x3\x2\x2\x2\x16C7"+
		"\x16C9\a\x485\x2\x2\x16C8\x16C7\x3\x2\x2\x2\x16C8\x16C9\x3\x2\x2\x2\x16C9"+
		"\x16CA\x3\x2\x2\x2\x16CA\x16CB\a\xFD\x2\x2\x16CB\x16CF\a\x46F\x2\x2\x16CC"+
		"\x16D0\a\x26B\x2\x2\x16CD\x16D0\a\x469\x2\x2\x16CE\x16D0\x5\x4D2\x26A"+
		"\x2\x16CF\x16CC\x3\x2\x2\x2\x16CF\x16CD\x3\x2\x2\x2\x16CF\x16CE\x3\x2"+
		"\x2\x2\x16D0\x16D8\x3\x2\x2\x2\x16D1\x16D3\a\x485\x2\x2\x16D2\x16D1\x3"+
		"\x2\x2\x2\x16D2\x16D3\x3\x2\x2\x2\x16D3\x16D4\x3\x2\x2\x2\x16D4\x16D5"+
		"\a\x1B\x2\x2\x16D5\x16D6\a\x46F\x2\x2\x16D6\x16D8\t\x13\x2\x2\x16D7\x16A6"+
		"\x3\x2\x2\x2\x16D7\x16AC\x3\x2\x2\x2\x16D7\x16B5\x3\x2\x2\x2\x16D7\x16BB"+
		"\x3\x2\x2\x2\x16D7\x16C8\x3\x2\x2\x2\x16D7\x16D2\x3\x2\x2\x2\x16D8\x16D9"+
		"\x3\x2\x2\x2\x16D9\x16D7\x3\x2\x2\x2\x16D9\x16DA\x3\x2\x2\x2\x16DA\x1B1"+
		"\x3\x2\x2\x2\x16DB\x16DC\a\xCA\x2\x2\x16DC\x16DD\a\x41B\x2\x2\x16DD\x16E1"+
		"\x5\x4D2\x26A\x2\x16DE\x16DF\t<\x2\x2\x16DF\x16E0\a\x216\x2\x2\x16E0\x16E2"+
		"\x5\x4D2\x26A\x2\x16E1\x16DE\x3\x2\x2\x2\x16E1\x16E2\x3\x2\x2\x2\x16E2"+
		"\x16F5\x3\x2\x2\x2\x16E3\x16F2\a\x438\x2\x2\x16E4\x16E6\a\x485\x2\x2\x16E5"+
		"\x16E4\x3\x2\x2\x2\x16E5\x16E6\x3\x2\x2\x2\x16E6\x16E7\x3\x2\x2\x2\x16E7"+
		"\x16E8\a\xFE\x2\x2\x16E8\x16E9\a\x46F\x2\x2\x16E9\x16F1\x5\x4D2\x26A\x2"+
		"\x16EA\x16EC\a\x485\x2\x2\x16EB\x16EA\x3\x2\x2\x2\x16EB\x16EC\x3\x2\x2"+
		"\x2\x16EC\x16ED\x3\x2\x2\x2\x16ED\x16EE\a\x1B\x2\x2\x16EE\x16EF\a\x46F"+
		"\x2\x2\x16EF\x16F1\t\x13\x2\x2\x16F0\x16E5\x3\x2\x2\x2\x16F0\x16EB\x3"+
		"\x2\x2\x2\x16F1\x16F4\x3\x2\x2\x2\x16F2\x16F0\x3\x2\x2\x2\x16F2\x16F3"+
		"\x3\x2\x2\x2\x16F3\x16F6\x3\x2\x2\x2\x16F4\x16F2\x3\x2\x2\x2\x16F5\x16E3"+
		"\x3\x2\x2\x2\x16F5\x16F6\x3\x2\x2\x2\x16F6\x176E\x3\x2\x2\x2\x16F7\x16F8"+
		"\a\xCA\x2\x2\x16F8\x1749\a\x41B\x2\x2\x16F9\x171C\x5\x4D2\x26A\x2\x16FA"+
		"\x1719\a\x438\x2\x2\x16FB\x16FD\a\x485\x2\x2\x16FC\x16FB\x3\x2\x2\x2\x16FC"+
		"\x16FD\x3\x2\x2\x2\x16FD\x16FE\x3\x2\x2\x2\x16FE\x16FF\a\xFE\x2\x2\x16FF"+
		"\x1700\a\x46F\x2\x2\x1700\x1718\x5\x4D2\x26A\x2\x1701\x1703\a\x485\x2"+
		"\x2\x1702\x1701\x3\x2\x2\x2\x1702\x1703\x3\x2\x2\x2\x1703\x1704\x3\x2"+
		"\x2\x2\x1704\x1705\a\xFD\x2\x2\x1705\x1709\a\x46F\x2\x2\x1706\x170A\a"+
		"\x26B\x2\x2\x1707\x170A\a\x469\x2\x2\x1708\x170A\x5\x4D2\x26A\x2\x1709"+
		"\x1706\x3\x2\x2\x2\x1709\x1707\x3\x2\x2\x2\x1709\x1708\x3\x2\x2\x2\x170A"+
		"\x1718\x3\x2\x2\x2\x170B\x170D\a\x485\x2\x2\x170C\x170B\x3\x2\x2\x2\x170C"+
		"\x170D\x3\x2\x2\x2\x170D\x170E\x3\x2\x2\x2\x170E\x170F\a\x394\x2\x2\x170F"+
		"\x1710\a\x46F\x2\x2\x1710\x1718\a\x46C\x2\x2\x1711\x1713\a\x485\x2\x2"+
		"\x1712\x1711\x3\x2\x2\x2\x1712\x1713\x3\x2\x2\x2\x1713\x1714\x3\x2\x2"+
		"\x2\x1714\x1715\a\x1B\x2\x2\x1715\x1716\a\x46F\x2\x2\x1716\x1718\t\x13"+
		"\x2\x2\x1717\x16FC\x3\x2\x2\x2\x1717\x1702\x3\x2\x2\x2\x1717\x170C\x3"+
		"\x2\x2\x2\x1717\x1712\x3\x2\x2\x2\x1718\x171B\x3\x2\x2\x2\x1719\x1717"+
		"\x3\x2\x2\x2\x1719\x171A\x3\x2\x2\x2\x171A\x171D\x3\x2\x2\x2\x171B\x1719"+
		"\x3\x2\x2\x2\x171C\x16FA\x3\x2\x2\x2\x171C\x171D\x3\x2\x2\x2\x171D\x174A"+
		"\x3\x2\x2\x2\x171E\x171F\x5\x4D2\x26A\x2\x171F\x1720\a\x438\x2\x2\x1720"+
		"\x1721\a\x2BE\x2\x2\x1721\x1722\a\x46F\x2\x2\x1722\x1741\a\x46B\x2\x2"+
		"\x1723\x1725\a\x485\x2\x2\x1724\x1723\x3\x2\x2\x2\x1724\x1725\x3\x2\x2"+
		"\x2\x1725\x1726\x3\x2\x2\x2\x1726\x1727\a\xFE\x2\x2\x1727\x1728\a\x46F"+
		"\x2\x2\x1728\x1740\x5\x4D2\x26A\x2\x1729\x172B\a\x485\x2\x2\x172A\x1729"+
		"\x3\x2\x2\x2\x172A\x172B\x3\x2\x2\x2\x172B\x172C\x3\x2\x2\x2\x172C\x172D"+
		"\a\xFD\x2\x2\x172D\x1731\a\x46F\x2\x2\x172E\x1732\a\x26B\x2\x2\x172F\x1732"+
		"\a\x469\x2\x2\x1730\x1732\x5\x4D2\x26A\x2\x1731\x172E\x3\x2\x2\x2\x1731"+
		"\x172F\x3\x2\x2\x2\x1731\x1730\x3\x2\x2\x2\x1732\x1740\x3\x2\x2\x2\x1733"+
		"\x1735\a\x485\x2\x2\x1734\x1733\x3\x2\x2\x2\x1734\x1735\x3\x2\x2\x2\x1735"+
		"\x1736\x3\x2\x2\x2\x1736\x1737\a\x394\x2\x2\x1737\x1738\a\x46F\x2\x2\x1738"+
		"\x1740\a\x46C\x2\x2\x1739\x173B\a\x485\x2\x2\x173A\x1739\x3\x2\x2\x2\x173A"+
		"\x173B\x3\x2\x2\x2\x173B\x173C\x3\x2\x2\x2\x173C\x173D\a\x1B\x2\x2\x173D"+
		"\x173E\a\x46F\x2\x2\x173E\x1740\t\x13\x2\x2\x173F\x1724\x3\x2\x2\x2\x173F"+
		"\x172A\x3\x2\x2\x2\x173F\x1734\x3\x2\x2\x2\x173F\x173A\x3\x2\x2\x2\x1740"+
		"\x1743\x3\x2\x2\x2\x1741\x173F\x3\x2\x2\x2\x1741\x1742\x3\x2\x2\x2\x1742"+
		"\x174A\x3\x2\x2\x2\x1743\x1741\x3\x2\x2\x2\x1744\x1745\x5\x4D2\x26A\x2"+
		"\x1745\x1746\a\x181\x2\x2\x1746\x1747\a\x150\x2\x2\x1747\x1748\a\x2E9"+
		"\x2\x2\x1748\x174A\x3\x2\x2\x2\x1749\x16F9\x3\x2\x2\x2\x1749\x171E\x3"+
		"\x2\x2\x2\x1749\x1744\x3\x2\x2\x2\x174A\x176E\x3\x2\x2\x2\x174B\x174C"+
		"\a\xCA\x2\x2\x174C\x174D\a\x41B\x2\x2\x174D\x1768\x5\x4D2\x26A\x2\x174E"+
		"\x174F\a\x43A\x2\x2\x174F\x175E\a\x216\x2\x2\x1750\x1752\a\x485\x2\x2"+
		"\x1751\x1750\x3\x2\x2\x2\x1751\x1752\x3\x2\x2\x2\x1752\x1753\x3\x2\x2"+
		"\x2\x1753\x1754\a\xFE\x2\x2\x1754\x1755\a\x46F\x2\x2\x1755\x175D\x5\x4D2"+
		"\x26A\x2\x1756\x1758\a\x485\x2\x2\x1757\x1756\x3\x2\x2\x2\x1757\x1758"+
		"\x3\x2\x2\x2\x1758\x1759\x3\x2\x2\x2\x1759\x175A\a\x1B\x2\x2\x175A\x175B"+
		"\a\x46F\x2\x2\x175B\x175D\t\x13\x2\x2\x175C\x1751\x3\x2\x2\x2\x175C\x1757"+
		"\x3\x2\x2\x2\x175D\x1760\x3\x2\x2\x2\x175E\x175C\x3\x2\x2\x2\x175E\x175F"+
		"\x3\x2\x2\x2\x175F\x1769\x3\x2\x2\x2\x1760\x175E\x3\x2\x2\x2\x1761\x1762"+
		"\t<\x2\x2\x1762\x1763\a}\x2\x2\x1763\x1769\x5\x4D2\x26A\x2\x1764\x1765"+
		"\t<\x2\x2\x1765\x1766\a?\x2\x2\x1766\x1767\a\x1F2\x2\x2\x1767\x1769\x5"+
		"\x4D2\x26A\x2\x1768\x174E\x3\x2\x2\x2\x1768\x1761\x3\x2\x2\x2\x1768\x1764"+
		"\x3\x2\x2\x2\x1769\x176E\x3\x2\x2\x2\x176A\x176B\a\xCA\x2\x2\x176B\x176C"+
		"\a\x41B\x2\x2\x176C\x176E\x5\x4D2\x26A\x2\x176D\x16DB\x3\x2\x2\x2\x176D"+
		"\x16F7\x3\x2\x2\x2\x176D\x174B\x3\x2\x2\x2\x176D\x176A\x3\x2\x2\x2\x176E"+
		"\x1B3\x3\x2\x2\x2\x176F\x1770\a\xCA\x2\x2\x1770\x1771\a\x41B\x2\x2\x1771"+
		"\x1777\x5\x4D2\x26A\x2\x1772\x1773\t<\x2\x2\x1773\x1774\a\x216\x2\x2\x1774"+
		"\x1778\x5\x4D2\x26A\x2\x1775\x1776\a\x43A\x2\x2\x1776\x1778\a\x216\x2"+
		"\x2\x1777\x1772\x3\x2\x2\x2\x1777\x1775\x3\x2\x2\x2\x1777\x1778\x3\x2"+
		"\x2\x2\x1778\x177D\x3\x2\x2\x2\x1779\x177A\a\x438\x2\x2\x177A\x177B\a"+
		"\xFE\x2\x2\x177B\x177C\a\x46F\x2\x2\x177C\x177E\x5\x4D2\x26A\x2\x177D"+
		"\x1779\x3\x2\x2\x2\x177D\x177E\x3\x2\x2\x2\x177E\x178C\x3\x2\x2\x2\x177F"+
		"\x1780\a\xCA\x2\x2\x1780\x1781\a\x41B\x2\x2\x1781\x1782\x5\x4D2\x26A\x2"+
		"\x1782\x1783\a\x181\x2\x2\x1783\x1784\a\x150\x2\x2\x1784\x1789\a\x2E9"+
		"\x2\x2\x1785\x1786\a\x438\x2\x2\x1786\x1787\a\xFE\x2\x2\x1787\x1788\a"+
		"\x46F\x2\x2\x1788\x178A\x5\x4D2\x26A\x2\x1789\x1785\x3\x2\x2\x2\x1789"+
		"\x178A\x3\x2\x2\x2\x178A\x178C\x3\x2\x2\x2\x178B\x176F\x3\x2\x2\x2\x178B"+
		"\x177F\x3\x2\x2\x2\x178C\x1B5\x3\x2\x2\x2\x178D\x178E\a%\x2\x2\x178E\x178F"+
		"\a\x41B\x2\x2\x178F\x1790\x5\x4D2\x26A\x2\x1790\x17A9\a\x438\x2\x2\x1791"+
		"\x1793\a\x485\x2\x2\x1792\x1791\x3\x2\x2\x2\x1792\x1793\x3\x2\x2\x2\x1793"+
		"\x1794\x3\x2\x2\x2\x1794\x1795\a\x254\x2\x2\x1795\x1796\a\x46F\x2\x2\x1796"+
		"\x17AA\x5\x4D2\x26A\x2\x1797\x1799\a\x485\x2\x2\x1798\x1797\x3\x2\x2\x2"+
		"\x1798\x1799\x3\x2\x2\x2\x1799\x179A\x3\x2\x2\x2\x179A\x179B\a\xFE\x2"+
		"\x2\x179B\x179C\a\x46F\x2\x2\x179C\x17AA\x5\x4D2\x26A\x2\x179D\x179F\a"+
		"\x485\x2\x2\x179E\x179D\x3\x2\x2\x2\x179E\x179F\x3\x2\x2\x2\x179F\x17A0"+
		"\x3\x2\x2\x2\x17A0\x17A1\a\x216\x2\x2\x17A1\x17A2\a\x46F\x2\x2\x17A2\x17AA"+
		"\x5\x4D2\x26A\x2\x17A3\x17A5\a\x485\x2\x2\x17A4\x17A3\x3\x2\x2\x2\x17A4"+
		"\x17A5\x3\x2\x2\x2\x17A5\x17A6\x3\x2\x2\x2\x17A6\x17A7\a\x1B\x2\x2\x17A7"+
		"\x17A8\a\x46F\x2\x2\x17A8\x17AA\t\x13\x2\x2\x17A9\x1792\x3\x2\x2\x2\x17A9"+
		"\x1798\x3\x2\x2\x2\x17A9\x179E\x3\x2\x2\x2\x17A9\x17A4\x3\x2\x2\x2\x17AA"+
		"\x17AB\x3\x2\x2\x2\x17AB\x17A9\x3\x2\x2\x2\x17AB\x17AC\x3\x2\x2\x2\x17AC"+
		"\x1B7\x3\x2\x2\x2\x17AD\x17AE\a%\x2\x2\x17AE\x17AF\a\x43E\x2\x2\x17AF"+
		"\x17B2\a\x19B\x2\x2\x17B0\x17B3\x5\x4D2\x26A\x2\x17B1\x17B3\a\xFB\x2\x2"+
		"\x17B2\x17B0\x3\x2\x2\x2\x17B2\x17B1\x3\x2\x2\x2\x17B3\x17D3\x3\x2\x2"+
		"\x2\x17B4\x17B5\a\x438\x2\x2\x17B5\x17CE\a\x481\x2\x2\x17B6\x17B7\a\x1C1"+
		"\x2\x2\x17B7\x17B8\a\x46F\x2\x2\x17B8\x17CF\t=\x2\x2\x17B9\x17BB\a\x485"+
		"\x2\x2\x17BA\x17B9\x3\x2\x2\x2\x17BA\x17BB\x3\x2\x2\x2\x17BB\x17BC\x3"+
		"\x2\x2\x2\x17BC\x17BD\a\x328\x2\x2\x17BD\x17BE\a\x46F\x2\x2\x17BE\x17CF"+
		"\a\x469\x2\x2\x17BF\x17C1\a\x485\x2\x2\x17C0\x17BF\x3\x2\x2\x2\x17C0\x17C1"+
		"\x3\x2\x2\x2\x17C1\x17C2\x3\x2\x2\x2\x17C2\x17C3\a\x327\x2\x2\x17C3\x17C4"+
		"\a\x46F\x2\x2\x17C4\x17CF\a\x469\x2\x2\x17C5\x17C6\a\x329\x2\x2\x17C6"+
		"\x17C7\a\x46F\x2\x2\x17C7\x17CF\a\x469\x2\x2\x17C8\x17C9\a\x22B\x2\x2"+
		"\x17C9\x17CA\a\x46F\x2\x2\x17CA\x17CF\a\x469\x2\x2\x17CB\x17CC\a\x19E"+
		"\x2\x2\x17CC\x17CD\a\x46F\x2\x2\x17CD\x17CF\a\x469\x2\x2\x17CE\x17B6\x3"+
		"\x2\x2\x2\x17CE\x17BA\x3\x2\x2\x2\x17CE\x17C0\x3\x2\x2\x2\x17CE\x17C5"+
		"\x3\x2\x2\x2\x17CE\x17C8\x3\x2\x2\x2\x17CE\x17CB\x3\x2\x2\x2\x17CF\x17D0"+
		"\x3\x2\x2\x2\x17D0\x17CE\x3\x2\x2\x2\x17D0\x17D1\x3\x2\x2\x2\x17D1\x17D2"+
		"\x3\x2\x2\x2\x17D2\x17D4\a\x482\x2\x2\x17D3\x17B4\x3\x2\x2\x2\x17D3\x17D4"+
		"\x3\x2\x2\x2\x17D4\x17DA\x3\x2\x2\x2\x17D5\x17D8\a\x41E\x2\x2\x17D6\x17D9"+
		"\x5\x4D2\x26A\x2\x17D7\x17D9\a\xFB\x2\x2\x17D8\x17D6\x3\x2\x2\x2\x17D8"+
		"\x17D7\x3\x2\x2\x2\x17D9\x17DB\x3\x2\x2\x2\x17DA\x17D5\x3\x2\x2\x2\x17DA"+
		"\x17DB\x3\x2\x2\x2\x17DB\x1B9\x3\x2\x2\x2\x17DC\x17DD\a\xCA\x2\x2\x17DD"+
		"\x17DE\a\x43E\x2\x2\x17DE\x17DF\a\x19B\x2\x2\x17DF\x17FF\x5\x4D2\x26A"+
		"\x2\x17E0\x17E1\a\x438\x2\x2\x17E1\x17FA\a\x481\x2\x2\x17E2\x17E3\a\x1C1"+
		"\x2\x2\x17E3\x17E4\a\x46F\x2\x2\x17E4\x17FB\t=\x2\x2\x17E5\x17E7\a\x485"+
		"\x2\x2\x17E6\x17E5\x3\x2\x2\x2\x17E6\x17E7\x3\x2\x2\x2\x17E7\x17E8\x3"+
		"\x2\x2\x2\x17E8\x17E9\a\x328\x2\x2\x17E9\x17EA\a\x46F\x2\x2\x17EA\x17FB"+
		"\a\x469\x2\x2\x17EB\x17ED\a\x485\x2\x2\x17EC\x17EB\x3\x2\x2\x2\x17EC\x17ED"+
		"\x3\x2\x2\x2\x17ED\x17EE\x3\x2\x2\x2\x17EE\x17EF\a\x327\x2\x2\x17EF\x17F0"+
		"\a\x46F\x2\x2\x17F0\x17FB\a\x469\x2\x2\x17F1\x17F2\a\x329\x2\x2\x17F2"+
		"\x17F3\a\x46F\x2\x2\x17F3\x17FB\a\x469\x2\x2\x17F4\x17F5\a\x22B\x2\x2"+
		"\x17F5\x17F6\a\x46F\x2\x2\x17F6\x17FB\a\x469\x2\x2\x17F7\x17F8\a\x19E"+
		"\x2\x2\x17F8\x17F9\a\x46F\x2\x2\x17F9\x17FB\a\x469\x2\x2\x17FA\x17E2\x3"+
		"\x2\x2\x2\x17FA\x17E6\x3\x2\x2\x2\x17FA\x17EC\x3\x2\x2\x2\x17FA\x17F1"+
		"\x3\x2\x2\x2\x17FA\x17F4\x3\x2\x2\x2\x17FA\x17F7\x3\x2\x2\x2\x17FB\x17FC"+
		"\x3\x2\x2\x2\x17FC\x17FA\x3\x2\x2\x2\x17FC\x17FD\x3\x2\x2\x2\x17FD\x17FE"+
		"\x3\x2\x2\x2\x17FE\x1800\a\x482\x2\x2\x17FF\x17E0\x3\x2\x2\x2\x17FF\x1800"+
		"\x3\x2\x2\x2\x1800\x180E\x3\x2\x2\x2\x1801\x1804\a\x41E\x2\x2\x1802\x1805"+
		"\x5\x4D2\x26A\x2\x1803\x1805\a\xFB\x2\x2\x1804\x1802\x3\x2\x2\x2\x1804"+
		"\x1803\x3\x2\x2\x2\x1804\x1805\x3\x2\x2\x2\x1805\x180C\x3\x2\x2\x2\x1806"+
		"\x1808\a\x485\x2\x2\x1807\x1806\x3\x2\x2\x2\x1807\x1808\x3\x2\x2\x2\x1808"+
		"\x1809\x3\x2\x2\x2\x1809\x180A\a\x150\x2\x2\x180A\x180D\x5\x4D2\x26A\x2"+
		"\x180B\x180D\a\xFB\x2\x2\x180C\x1807\x3\x2\x2\x2\x180C\x180B\x3\x2\x2"+
		"\x2\x180C\x180D\x3\x2\x2\x2\x180D\x180F\x3\x2\x2\x2\x180E\x1801\x3\x2"+
		"\x2\x2\x180E\x180F\x3\x2\x2\x2\x180F\x1BB\x3\x2\x2\x2\x1810\x1811\a\xCA"+
		"\x2\x2\x1811\x1812\a\x443\x2\x2\x1812\x1813\a\x35A\x2\x2\x1813\x1817\a"+
		"\x9D\x2\x2\x1814\x1815\x5\x4D2\x26A\x2\x1815\x1816\a\x47C\x2\x2\x1816"+
		"\x1818\x3\x2\x2\x2\x1817\x1814\x3\x2\x2\x2\x1817\x1818\x3\x2\x2\x2\x1818"+
		"\x1819\x3\x2\x2\x2\x1819\x181A\x5\x4D2\x26A\x2\x181A\x181E\a:\x2\x2\x181B"+
		"\x181F\a\x46B\x2\x2\x181C\x181F\x5\x4D2\x26A\x2\x181D\x181F\a\x468\x2"+
		"\x2\x181E\x181B\x3\x2\x2\x2\x181E\x181C\x3\x2\x2\x2\x181E\x181D\x3\x2"+
		"\x2\x2\x181F\x1BD\x3\x2\x2\x2\x1820\x1821\a\xCA\x2\x2\x1821\x1822\a\x2BB"+
		"\x2\x2\x1822\x1823\a\x187\x2\x2\x1823\x1824\x5\x4D2\x26A\x2\x1824\x1825"+
		"\a\x481\x2\x2\x1825\x1826\x5\x4C6\x264\x2\x1826\x1827\a\x482\x2\x2\x1827"+
		"\x1828\a:\x2\x2\x1828\x182A\a\x2FB\x2\x2\x1829\x182B\t>\x2\x2\x182A\x1829"+
		"\x3\x2\x2\x2\x182A\x182B\x3\x2\x2\x2\x182B\x182C\x3\x2\x2\x2\x182C\x182D"+
		"\a\x172\x2\x2\x182D\x182E\a\x422\x2\x2\x182E\x182F\a\x481\x2\x2\x182F"+
		"\x1830\x5\x46A\x236\x2\x1830\x1831\a\x482\x2\x2\x1831\x1BF\x3\x2\x2\x2"+
		"\x1832\x1833\a\xCA\x2\x2\x1833\x1834\a\x2BB\x2\x2\x1834\x1835\a\x35E\x2"+
		"\x2\x1835\x1836\x5\x4D2\x26A\x2\x1836\x1837\a:\x2\x2\x1837\x1838\a\x2BB"+
		"\x2\x2\x1838\x183A\x5\x4D2\x26A\x2\x1839\x183B\a\x18\x2\x2\x183A\x1839"+
		"\x3\x2\x2\x2\x183A\x183B\x3\x2\x2\x2\x183B\x183C\x3\x2\x2\x2\x183C\x183D"+
		"\a\x3EB\x2\x2\x183D\x183E\a\x481\x2\x2\x183E\x1843\x5\x4D2\x26A\x2\x183F"+
		"\x1840\a\x485\x2\x2\x1840\x1842\x5\x4D2\x26A\x2\x1841\x183F\x3\x2\x2\x2"+
		"\x1842\x1845\x3\x2\x2\x2\x1843\x1841\x3\x2\x2\x2\x1843\x1844\x3\x2\x2"+
		"\x2\x1844\x1846\x3\x2\x2\x2\x1845\x1843\x3\x2\x2\x2\x1846\x1847\a\x482"+
		"\x2\x2\x1847\x1C1\x3\x2\x2\x2\x1848\x1849\a\xCA\x2\x2\x1849\x184C\a\x2F4"+
		"\x2\x2\x184A\x184D\x5\x490\x249\x2\x184B\x184D\x5\x4D2\x26A\x2\x184C\x184A"+
		"\x3\x2\x2\x2\x184C\x184B\x3\x2\x2\x2\x184D\x184F\x3\x2\x2\x2\x184E\x1850"+
		"\x5\x1C4\xE3\x2\x184F\x184E\x3\x2\x2\x2\x184F\x1850\x3\x2\x2\x2\x1850"+
		"\x1854\x3\x2\x2\x2\x1851\x1852\a\x294\x2\x2\x1852\x1855\x5\x4D2\x26A\x2"+
		"\x1853\x1855\a\xF9\x2\x2\x1854\x1851\x3\x2\x2\x2\x1854\x1853\x3\x2\x2"+
		"\x2\x1854\x1855\x3\x2\x2\x2\x1855\x1C3\x3\x2\x2\x2\x1856\x185D\a\x438"+
		"\x2\x2\x1857\x1858\a\x3BA\x2\x2\x1858\x1859\a\x46F\x2\x2\x1859\x185B\x5"+
		"\x4AA\x256\x2\x185A\x185C\a\x485\x2\x2\x185B\x185A\x3\x2\x2\x2\x185B\x185C"+
		"\x3\x2\x2\x2\x185C\x185E\x3\x2\x2\x2\x185D\x1857\x3\x2\x2\x2\x185D\x185E"+
		"\x3\x2\x2\x2\x185E\x1865\x3\x2\x2\x2\x185F\x1860\a\x339\x2\x2\x1860\x1861"+
		"\a\x46F\x2\x2\x1861\x1863\x5\x4AA\x256\x2\x1862\x1864\a\x485\x2\x2\x1863"+
		"\x1862\x3\x2\x2\x2\x1863\x1864\x3\x2\x2\x2\x1864\x1866\x3\x2\x2\x2\x1865"+
		"\x185F\x3\x2\x2\x2\x1865\x1866\x3\x2\x2\x2\x1866\x1894\x3\x2\x2\x2\x1867"+
		"\x1868\a\v\x2\x2\x1868\x188E\a\x481\x2\x2\x1869\x186A\a\x3BA\x2\x2\x186A"+
		"\x186B\a\x46F\x2\x2\x186B\x186D\x5\x4AA\x256\x2\x186C\x186E\a\x485\x2"+
		"\x2\x186D\x186C\x3\x2\x2\x2\x186D\x186E\x3\x2\x2\x2\x186E\x1870\x3\x2"+
		"\x2\x2\x186F\x1869\x3\x2\x2\x2\x186F\x1870\x3\x2\x2\x2\x1870\x1877\x3"+
		"\x2\x2\x2\x1871\x1872\a\x2E5\x2\x2\x1872\x1873\a\x46F\x2\x2\x1873\x1875"+
		"\x5\x498\x24D\x2\x1874\x1876\a\x485\x2\x2\x1875\x1874\x3\x2\x2\x2\x1875"+
		"\x1876\x3\x2\x2\x2\x1876\x1878\x3\x2\x2\x2\x1877\x1871\x3\x2\x2\x2\x1877"+
		"\x1878\x3\x2\x2\x2\x1878\x187F\x3\x2\x2\x2\x1879\x187A\a\x235\x2\x2\x187A"+
		"\x187B\a\x46F\x2\x2\x187B\x187D\a\x469\x2\x2\x187C\x187E\a\x485\x2\x2"+
		"\x187D\x187C\x3\x2\x2\x2\x187D\x187E\x3\x2\x2\x2\x187E\x1880\x3\x2\x2"+
		"\x2\x187F\x1879\x3\x2\x2\x2\x187F\x1880\x3\x2\x2\x2\x1880\x188B\x3\x2"+
		"\x2\x2\x1881\x1882\a\x145\x2\x2\x1882\x1886\a:\x2\x2\x1883\x1887\a\x370"+
		"\x2\x2\x1884\x1887\a\x46B\x2\x2\x1885\x1887\a\x2AE\x2\x2\x1886\x1883\x3"+
		"\x2\x2\x2\x1886\x1884\x3\x2\x2\x2\x1886\x1885\x3\x2\x2\x2\x1887\x1889"+
		"\x3\x2\x2\x2\x1888\x188A\a\x485\x2\x2\x1889\x1888\x3\x2\x2\x2\x1889\x188A"+
		"\x3\x2\x2\x2\x188A\x188C\x3\x2\x2\x2\x188B\x1881\x3\x2\x2\x2\x188B\x188C"+
		"\x3\x2\x2\x2\x188C\x188F\x3\x2\x2\x2\x188D\x188F\a\x11E\x2\x2\x188E\x186F"+
		"\x3\x2\x2\x2\x188E\x188D\x3\x2\x2\x2\x188F\x1890\x3\x2\x2\x2\x1890\x1892"+
		"\a\x482\x2\x2\x1891\x1893\a\x485\x2\x2\x1892\x1891\x3\x2\x2\x2\x1892\x1893"+
		"\x3\x2\x2\x2\x1893\x1895\x3\x2\x2\x2\x1894\x1867\x3\x2\x2\x2\x1894\x1895"+
		"\x3\x2\x2\x2\x1895\x189E\x3\x2\x2\x2\x1896\x1897\a\x2D2\x2\x2\x1897\x1898"+
		"\a\x481\x2\x2\x1898\x1899\a\x3BA\x2\x2\x1899\x189A\a\x46F\x2\x2\x189A"+
		"\x189B\x5\x4AA\x256\x2\x189B\x189C\x3\x2\x2\x2\x189C\x189D\a\x482\x2\x2"+
		"\x189D\x189F\x3\x2\x2\x2\x189E\x1896\x3\x2\x2\x2\x189E\x189F\x3\x2\x2"+
		"\x2\x189F\x1C5\x3\x2\x2\x2\x18A0\x18A1\a%\x2\x2\x18A1\x18A4\a\x2F4\x2"+
		"\x2\x18A2\x18A5\x5\x490\x249\x2\x18A3\x18A5\x5\x4D2\x26A\x2\x18A4\x18A2"+
		"\x3\x2\x2\x2\x18A4\x18A3\x3\x2\x2\x2\x18A5\x18A8\x3\x2\x2\x2\x18A6\x18A9"+
		"\x5\x1C4\xE3\x2\x18A7\x18A9\x5\x1C8\xE5\x2\x18A8\x18A6\x3\x2\x2\x2\x18A8"+
		"\x18A7\x3\x2\x2\x2\x18A9\x1C7\x3\x2\x2\x2\x18AA\x18B0\a\x30E\x2\x2\x18AB"+
		"\x18AC\a\x438\x2\x2\x18AC\x18AD\a\x481\x2\x2\x18AD\x18AE\x5\x1CA\xE6\x2"+
		"\x18AE\x18AF\a\x482\x2\x2\x18AF\x18B1\x3\x2\x2\x2\x18B0\x18AB\x3\x2\x2"+
		"\x2\x18B0\x18B1\x3\x2\x2\x2\x18B1\x18C0\x3\x2\x2\x2\x18B2\x18B7\a\x31D"+
		"\x2\x2\x18B3\x18B4\a\x438\x2\x2\x18B4\x18B5\a\x20F\x2\x2\x18B5\x18B6\a"+
		"\x46F\x2\x2\x18B6\x18B8\x5\x4AA\x256\x2\x18B7\x18B3\x3\x2\x2\x2\x18B7"+
		"\x18B8\x3\x2\x2\x2\x18B8\x18C0\x3\x2\x2\x2\x18B9\x18BA\a\x251\x2\x2\x18BA"+
		"\x18BD\a\x3EB\x2\x2\x18BB\x18BE\x5\x4D2\x26A\x2\x18BC\x18BE\a\xF9\x2\x2"+
		"\x18BD\x18BB\x3\x2\x2\x2\x18BD\x18BC\x3\x2\x2\x2\x18BE\x18C0\x3\x2\x2"+
		"\x2\x18BF\x18AA\x3\x2\x2\x2\x18BF\x18B2\x3\x2\x2\x2\x18BF\x18B9\x3\x2"+
		"\x2\x2\x18C0\x1C9\x3\x2\x2\x2\x18C1\x18C2\a\x224\x2\x2\x18C2\x18C3\a\x46F"+
		"\x2\x2\x18C3\x18C4\a\x469\x2\x2\x18C4\x1CB\x3\x2\x2\x2\x18C5\x18C6\a\xCA"+
		"\x2\x2\x18C6\x18C7\a\xBF\x2\x2\x18C7\x18CA\x5\x4B8\x25D\x2\x18C8\x18C9"+
		"\a\x46\x2\x2\x18C9\x18CB\x5\x4D2\x26A\x2\x18CA\x18C8\x3\x2\x2\x2\x18CA"+
		"\x18CB\x3\x2\x2\x2\x18CB\x18CC\x3\x2\x2\x2\x18CC\x18D7\a\x481\x2\x2\x18CD"+
		"\x18D0\x5\x4D2\x26A\x2\x18CE\x18D0\a\xF9\x2\x2\x18CF\x18CD\x3\x2\x2\x2"+
		"\x18CF\x18CE\x3\x2\x2\x2\x18D0\x18D1\x3\x2\x2\x2\x18D1\x18D2\a\x376\x2"+
		"\x2\x18D2\x18D3\aq\x2\x2\x18D3\x18D5\t?\x2\x2\x18D4\x18D6\a\x485\x2\x2"+
		"\x18D5\x18D4\x3\x2\x2\x2\x18D5\x18D6\x3\x2\x2\x2\x18D6\x18D8\x3\x2\x2"+
		"\x2\x18D7\x18CF\x3\x2\x2\x2\x18D8\x18D9\x3\x2\x2\x2\x18D9\x18D7\x3\x2"+
		"\x2\x2\x18D9\x18DA\x3\x2\x2\x2\x18DA\x18DB\x3\x2\x2\x2\x18DB\x18DC\a\x482"+
		"\x2\x2\x18DC\x1CD\x3\x2\x2\x2\x18DD\x18E4\x5\x4B4\x25B\x2\x18DE\x18E4"+
		"\x5\x4B6\x25C\x2\x18DF\x18E4\x5\x4BC\x25F\x2\x18E0\x18E4\x5\x4C0\x261"+
		"\x2\x18E1\x18E4\x5\x4C4\x263\x2\x18E2\x18E4\x5\x4BE\x260\x2\x18E3\x18DD"+
		"\x3\x2\x2\x2\x18E3\x18DE\x3\x2\x2\x2\x18E3\x18DF\x3\x2\x2\x2\x18E3\x18E0"+
		"\x3\x2\x2\x2\x18E3\x18E1\x3\x2\x2\x2\x18E3\x18E2\x3\x2\x2\x2\x18E4\x1CF"+
		"\x3\x2\x2\x2\x18E5\x18E6\a\xCA\x2\x2\x18E6\x18E7\a\x241\x2\x2\x18E7\x18E8"+
		"\a\x403\x2\x2\x18E8\x18EB\x5\x4D2\x26A\x2\x18E9\x18EA\a\x46\x2\x2\x18EA"+
		"\x18EC\x5\x4D2\x26A\x2\x18EB\x18E9\x3\x2\x2\x2\x18EB\x18EC\x3\x2\x2\x2"+
		"\x18EC\x18ED\x3\x2\x2\x2\x18ED\x18EE\a\x41F\x2\x2\x18EE\x18F7\a\x46F\x2"+
		"\x2\x18EF\x18F8\a\x26B\x2\x2\x18F0\x18F8\a\x128\x2\x2\x18F1\x18F8\a\x432"+
		"\x2\x2\x18F2\x18F3\a\x420\x2\x2\x18F3\x18F4\a\x438\x2\x2\x18F4\x18F5\a"+
		"\x35A\x2\x2\x18F5\x18F6\a\x9D\x2\x2\x18F6\x18F8\x5\x4D2\x26A\x2\x18F7"+
		"\x18EF\x3\x2\x2\x2\x18F7\x18F0\x3\x2\x2\x2\x18F7\x18F1\x3\x2\x2\x2\x18F7"+
		"\x18F2\x3\x2\x2\x2\x18F8\x1D1\x3\x2\x2\x2\x18F9\x18FB\x5\x3B8\x1DD\x2"+
		"\x18FA\x18F9\x3\x2\x2\x2\x18FA\x18FB\x3\x2\x2\x2\x18FB\x18FC\x3\x2\x2"+
		"\x2\x18FC\x1904\a\x240\x2\x2\x18FD\x18FE\a\x3EC\x2\x2\x18FE\x18FF\a\x481"+
		"\x2\x2\x18FF\x1900\x5\x3A6\x1D4\x2\x1900\x1902\a\x482\x2\x2\x1901\x1903"+
		"\a\x2C3\x2\x2\x1902\x1901\x3\x2\x2\x2\x1902\x1903\x3\x2\x2\x2\x1903\x1905"+
		"\x3\x2\x2\x2\x1904\x18FD\x3\x2\x2\x2\x1904\x1905\x3\x2\x2\x2\x1905\x1907"+
		"\x3\x2\x2\x2\x1906\x1908\a\x1D7\x2\x2\x1907\x1906\x3\x2\x2\x2\x1907\x1908"+
		"\x3\x2\x2\x2\x1908\x1909\x3\x2\x2\x2\x1909\x190B\x5\x49C\x24F\x2\x190A"+
		"\x190C\x5\x45E\x230\x2\x190B\x190A\x3\x2\x2\x2\x190B\x190C\x3\x2\x2\x2"+
		"\x190C\x190E\x3\x2\x2\x2\x190D\x190F\x5\x452\x22A\x2\x190E\x190D\x3\x2"+
		"\x2\x2\x190E\x190F\x3\x2\x2\x2\x190F\x1910\x3\x2\x2\x2\x1910\x1911\a\x41E"+
		"\x2\x2\x1911\x1912\x5\x3EE\x1F8\x2\x1912\x1913\a\x294\x2\x2\x1913\x1915"+
		"\x5\x3C0\x1E1\x2\x1914\x1916\x5\x1D4\xEB\x2\x1915\x1914\x3\x2\x2\x2\x1916"+
		"\x1917\x3\x2\x2\x2\x1917\x1915\x3\x2\x2\x2\x1917\x1918\x3\x2\x2\x2\x1918"+
		"\x191A\x3\x2\x2\x2\x1919\x191B\x5\x1EC\xF7\x2\x191A\x1919\x3\x2\x2\x2"+
		"\x191A\x191B\x3\x2\x2\x2\x191B\x191D\x3\x2\x2\x2\x191C\x191E\x5\x3DA\x1EE"+
		"\x2\x191D\x191C\x3\x2\x2\x2\x191D\x191E\x3\x2\x2\x2\x191E\x191F\x3\x2"+
		"\x2\x2\x191F\x1920\a\x486\x2\x2\x1920\x1D3\x3\x2\x2\x2\x1921\x1922\a\x434"+
		"\x2\x2\x1922\x1925\a\x221\x2\x2\x1923\x1924\a\'\x2\x2\x1924\x1926\x5\x3C0"+
		"\x1E1\x2\x1925\x1923\x3\x2\x2\x2\x1925\x1926\x3\x2\x2\x2\x1926\x1927\x3"+
		"\x2\x2\x2\x1927\x1928\a\x3E4\x2\x2\x1928\x192A\x5\x1D6\xEC\x2\x1929\x1921"+
		"\x3\x2\x2\x2\x192A\x192B\x3\x2\x2\x2\x192B\x1929\x3\x2\x2\x2\x192B\x192C"+
		"\x3\x2\x2\x2\x192C\x194A\x3\x2\x2\x2\x192D\x192E\a\x434\x2\x2\x192E\x192F"+
		"\a\x271\x2\x2\x192F\x1932\a\x221\x2\x2\x1930\x1931\aq\x2\x2\x1931\x1933"+
		"\a\x3DE\x2\x2\x1932\x1930\x3\x2\x2\x2\x1932\x1933\x3\x2\x2\x2\x1933\x1936"+
		"\x3\x2\x2\x2\x1934\x1935\a\'\x2\x2\x1935\x1937\x5\x3C0\x1E1\x2\x1936\x1934"+
		"\x3\x2\x2\x2\x1936\x1937\x3\x2\x2\x2\x1937\x1938\x3\x2\x2\x2\x1938\x1939"+
		"\a\x3E4\x2\x2\x1939\x194A\x5\x1D8\xED\x2\x193A\x193B\a\x434\x2\x2\x193B"+
		"\x193C\a\x271\x2\x2\x193C\x193D\a\x221\x2\x2\x193D\x193E\aq\x2\x2\x193E"+
		"\x1941\a\x3A1\x2\x2\x193F\x1940\a\'\x2\x2\x1940\x1942\x5\x3C0\x1E1\x2"+
		"\x1941\x193F\x3\x2\x2\x2\x1941\x1942\x3\x2\x2\x2\x1942\x1943\x3\x2\x2"+
		"\x2\x1943\x1944\a\x3E4\x2\x2\x1944\x1946\x5\x1D6\xEC\x2\x1945\x193A\x3"+
		"\x2\x2\x2\x1946\x1947\x3\x2\x2\x2\x1947\x1945\x3\x2\x2\x2\x1947\x1948"+
		"\x3\x2\x2\x2\x1948\x194A\x3\x2\x2\x2\x1949\x1929\x3\x2\x2\x2\x1949\x192D"+
		"\x3\x2\x2\x2\x1949\x1945\x3\x2\x2\x2\x194A\x1D5\x3\x2\x2\x2\x194B\x194C"+
		"\a\x415\x2\x2\x194C\x194D\a\x386\x2\x2\x194D\x1952\x5\x3BE\x1E0\x2\x194E"+
		"\x194F\a\x485\x2\x2\x194F\x1951\x5\x3BE\x1E0\x2\x1950\x194E\x3\x2\x2\x2"+
		"\x1951\x1954\x3\x2\x2\x2\x1952\x1950\x3\x2\x2\x2\x1952\x1953\x3\x2\x2"+
		"\x2\x1953\x1957\x3\x2\x2\x2\x1954\x1952\x3\x2\x2\x2\x1955\x1957\a\x102"+
		"\x2\x2\x1956\x194B\x3\x2\x2\x2\x1956\x1955\x3\x2\x2\x2\x1957\x1D7\x3\x2"+
		"\x2\x2\x1958\x195D\a\x1D1\x2\x2\x1959\x195A\a\x481\x2\x2\x195A\x195B\x5"+
		"\x4A6\x254\x2\x195B\x195C\a\x482\x2\x2\x195C\x195E\x3\x2\x2\x2\x195D\x1959"+
		"\x3\x2\x2\x2\x195D\x195E\x3\x2\x2\x2\x195E\x1962\x3\x2\x2\x2\x195F\x1963"+
		"\x5\x468\x235\x2\x1960\x1961\a\xF9\x2\x2\x1961\x1963\a\x422\x2\x2\x1962"+
		"\x195F\x3\x2\x2\x2\x1962\x1960\x3\x2\x2\x2\x1963\x1D9\x3\x2\x2\x2\x1964"+
		"\x1966\x5\x3B8\x1DD\x2\x1965\x1964\x3\x2\x2\x2\x1965\x1966\x3\x2\x2\x2"+
		"\x1966\x1967\x3\x2\x2\x2\x1967\x1971\a\x102\x2\x2\x1968\x1969\a\x3EC\x2"+
		"\x2\x1969\x196A\a\x481\x2\x2\x196A\x196B\x5\x3A6\x1D4\x2\x196B\x196D\a"+
		"\x482\x2\x2\x196C\x196E\a\x2C3\x2\x2\x196D\x196C\x3\x2\x2\x2\x196D\x196E"+
		"\x3\x2\x2\x2\x196E\x1972\x3\x2\x2\x2\x196F\x1970\a\x3EC\x2\x2\x1970\x1972"+
		"\a\x469\x2\x2\x1971\x1968\x3\x2\x2\x2\x1971\x196F\x3\x2\x2\x2\x1971\x1972"+
		"\x3\x2\x2\x2\x1972\x1974\x3\x2\x2\x2\x1973\x1975\a\x181\x2\x2\x1974\x1973"+
		"\x3\x2\x2\x2\x1974\x1975\x3\x2\x2\x2\x1975\x1976\x3\x2\x2\x2\x1976\x1978"+
		"\x5\x1DC\xEF\x2\x1977\x1979\x5\x45E\x230\x2\x1978\x1977\x3\x2\x2\x2\x1978"+
		"\x1979\x3\x2\x2\x2\x1979\x197B\x3\x2\x2\x2\x197A\x197C\x5\x1EC\xF7\x2"+
		"\x197B\x197A\x3\x2\x2\x2\x197B\x197C\x3\x2\x2\x2\x197C\x197F\x3\x2\x2"+
		"\x2\x197D\x197E\a\x181\x2\x2\x197E\x1980\x5\x3EE\x1F8\x2\x197F\x197D\x3"+
		"\x2\x2\x2\x197F\x1980\x3\x2\x2\x2\x1980\x198E\x3\x2\x2\x2\x1981\x198C"+
		"\a\x435\x2\x2\x1982\x198D\x5\x3C0\x1E1\x2\x1983\x1984\a\xD1\x2\x2\x1984"+
		"\x198A\a\x28D\x2\x2\x1985\x1987\a\x194\x2\x2\x1986\x1985\x3\x2\x2\x2\x1986"+
		"\x1987\x3\x2\x2\x2\x1987\x1988\x3\x2\x2\x2\x1988\x198B\x5\x4A8\x255\x2"+
		"\x1989\x198B\a\x468\x2\x2\x198A\x1986\x3\x2\x2\x2\x198A\x1989\x3\x2\x2"+
		"\x2\x198B\x198D\x3\x2\x2\x2\x198C\x1982\x3\x2\x2\x2\x198C\x1983\x3\x2"+
		"\x2\x2\x198D\x198F\x3\x2\x2\x2\x198E\x1981\x3\x2\x2\x2\x198E\x198F\x3"+
		"\x2\x2\x2\x198F\x1991\x3\x2\x2\x2\x1990\x1992\x5\x3D2\x1EA\x2\x1991\x1990"+
		"\x3\x2\x2\x2\x1991\x1992\x3\x2\x2\x2\x1992\x1994\x3\x2\x2\x2\x1993\x1995"+
		"\x5\x3DA\x1EE\x2\x1994\x1993\x3\x2\x2\x2\x1994\x1995\x3\x2\x2\x2\x1995"+
		"\x1997\x3\x2\x2\x2\x1996\x1998\a\x486\x2\x2\x1997\x1996\x3\x2\x2\x2\x1997"+
		"\x1998\x3\x2\x2\x2\x1998\x1DB\x3\x2\x2\x2\x1999\x199E\x5\x49C\x24F\x2"+
		"\x199A\x199E\x5\x454\x22B\x2\x199B\x199E\x5\x2D8\x16D\x2\x199C\x199E\a"+
		"\x468\x2\x2\x199D\x1999\x3\x2\x2\x2\x199D\x199A\x3\x2\x2\x2\x199D\x199B"+
		"\x3\x2\x2\x2\x199D\x199C\x3\x2\x2\x2\x199E\x1DD\x3\x2\x2\x2\x199F\x19A1"+
		"\x5\x3B8\x1DD\x2\x19A0\x199F\x3\x2\x2\x2\x19A0\x19A1\x3\x2\x2\x2\x19A1"+
		"\x19A2\x3\x2\x2\x2\x19A2\x19AA\a\x1D1\x2\x2\x19A3\x19A4\a\x3EC\x2\x2\x19A4"+
		"\x19A5\a\x481\x2\x2\x19A5\x19A6\x5\x3A6\x1D4\x2\x19A6\x19A8\a\x482\x2"+
		"\x2\x19A7\x19A9\a\x2C3\x2\x2\x19A8\x19A7\x3\x2\x2\x2\x19A8\x19A9\x3\x2"+
		"\x2\x2\x19A9\x19AB\x3\x2\x2\x2\x19AA\x19A3\x3\x2\x2\x2\x19AA\x19AB\x3"+
		"\x2\x2\x2\x19AB\x19AD\x3\x2\x2\x2\x19AC\x19AE\a\x1D7\x2\x2\x19AD\x19AC"+
		"\x3\x2\x2\x2\x19AD\x19AE\x3\x2\x2\x2\x19AE\x19B1\x3\x2\x2\x2\x19AF\x19B2"+
		"\x5\x49C\x24F\x2\x19B0\x19B2\x5\x2D8\x16D\x2\x19B1\x19AF\x3\x2\x2\x2\x19B1"+
		"\x19B0\x3\x2\x2\x2\x19B2\x19B4\x3\x2\x2\x2\x19B3\x19B5\x5\x45E\x230\x2"+
		"\x19B4\x19B3\x3\x2\x2\x2\x19B4\x19B5\x3\x2\x2\x2\x19B5\x19BA\x3\x2\x2"+
		"\x2\x19B6\x19B7\a\x481\x2\x2\x19B7\x19B8\x5\x4A2\x252\x2\x19B8\x19B9\a"+
		"\x482\x2\x2\x19B9\x19BB\x3\x2\x2\x2\x19BA\x19B6\x3\x2\x2\x2\x19BA\x19BB"+
		"\x3\x2\x2\x2\x19BB\x19BD\x3\x2\x2\x2\x19BC\x19BE\x5\x1EC\xF7\x2\x19BD"+
		"\x19BC\x3\x2\x2\x2\x19BD\x19BE\x3\x2\x2\x2\x19BE\x19BF\x3\x2\x2\x2\x19BF"+
		"\x19C1\x5\x1E0\xF1\x2\x19C0\x19C2\x5\x3D2\x1EA\x2\x19C1\x19C0\x3\x2\x2"+
		"\x2\x19C1\x19C2\x3\x2\x2\x2\x19C2\x19C4\x3\x2\x2\x2\x19C3\x19C5\x5\x3DA"+
		"\x1EE\x2\x19C4\x19C3\x3\x2\x2\x2\x19C4\x19C5\x3\x2\x2\x2\x19C5\x19C7\x3"+
		"\x2\x2\x2\x19C6\x19C8\a\x486\x2\x2\x19C7\x19C6\x3\x2\x2\x2\x19C7\x19C8"+
		"\x3\x2\x2\x2\x19C8\x1DF\x3\x2\x2\x2\x19C9\x19CF\x5\x468\x235\x2\x19CA"+
		"\x19CF\x5\x420\x211\x2\x19CB\x19CF\x5\x2F6\x17C\x2\x19CC\x19CD\a\xF9\x2"+
		"\x2\x19CD\x19CF\a\x422\x2\x2\x19CE\x19C9\x3\x2\x2\x2\x19CE\x19CA\x3\x2"+
		"\x2\x2\x19CE\x19CB\x3\x2\x2\x2\x19CE\x19CC\x3\x2\x2\x2\x19CF\x1E1\x3\x2"+
		"\x2\x2\x19D0\x19D2\a\x481\x2\x2\x19D1\x19D0\x3\x2\x2\x2\x19D1\x19D2\x3"+
		"\x2\x2\x2\x19D2\x19D3\x3\x2\x2\x2\x19D3\x19D7\a\x30F\x2\x2\x19D4\x19D8"+
		"\a\x18\x2\x2\x19D5\x19D8\a\x116\x2\x2\x19D6\x19D8\x5\x3CA\x1E6\x2\x19D7"+
		"\x19D4\x3\x2\x2\x2\x19D7\x19D5\x3\x2\x2\x2\x19D7\x19D6\x3\x2\x2\x2\x19D8"+
		"\x19D9\x3\x2\x2\x2\x19D9\x19DA\x5\x3EC\x1F7\x2\x19DA\x19DB\a\x181\x2\x2"+
		"\x19DB\x19E1\x5\x490\x249\x2\x19DC\x19DD\a\x1D7\x2\x2\x19DD\x19DE\x5\x4D2"+
		"\x26A\x2\x19DE\x19DF\a\x435\x2\x2\x19DF\x19E0\x5\x3C0\x1E1\x2\x19E0\x19E2"+
		"\x3\x2\x2\x2\x19E1\x19DC\x3\x2\x2\x2\x19E1\x19E2\x3\x2\x2\x2\x19E2\x19E4"+
		"\x3\x2\x2\x2\x19E3\x19E5\a\x482\x2\x2\x19E4\x19E3\x3\x2\x2\x2\x19E4\x19E5"+
		"\x3\x2\x2\x2\x19E5\x1E3\x3\x2\x2\x2\x19E6\x19E8\x5\x3B8\x1DD\x2\x19E7"+
		"\x19E6\x3\x2\x2\x2\x19E7\x19E8\x3\x2\x2\x2\x19E8\x19E9\x3\x2\x2\x2\x19E9"+
		"\x19EA\x5\x1E6\xF4\x2\x19EA\x1E5\x3\x2\x2\x2\x19EB\x19ED\x5\x3C4\x1E3"+
		"\x2\x19EC\x19EE\x5\x3D0\x1E9\x2\x19ED\x19EC\x3\x2\x2\x2\x19ED\x19EE\x3"+
		"\x2\x2\x2\x19EE\x19F0\x3\x2\x2\x2\x19EF\x19F1\x5\x3D2\x1EA\x2\x19F0\x19EF"+
		"\x3\x2\x2\x2\x19F0\x19F1\x3\x2\x2\x2\x19F1\x19F3\x3\x2\x2\x2\x19F2\x19F4"+
		"\x5\x3DA\x1EE\x2\x19F3\x19F2\x3\x2\x2\x2\x19F3\x19F4\x3\x2\x2\x2\x19F4"+
		"\x19F6\x3\x2\x2\x2\x19F5\x19F7\a\x486\x2\x2\x19F6\x19F5\x3\x2\x2\x2\x19F6"+
		"\x19F7\x3\x2\x2\x2\x19F7\x1E7\x3\x2\x2\x2\x19F8\x19FB\a\x468\x2\x2\x19F9"+
		"\x19FB\x5\x4CA\x266\x2\x19FA\x19F8\x3\x2\x2\x2\x19FA\x19F9\x3\x2\x2\x2"+
		"\x19FB\x1E9\x3\x2\x2\x2\x19FC\x19FE\x5\x3B8\x1DD\x2\x19FD\x19FC\x3\x2"+
		"\x2\x2\x19FD\x19FE\x3\x2\x2\x2\x19FE\x19FF\x3\x2\x2\x2\x19FF\x1A07\a\x415"+
		"\x2\x2\x1A00\x1A01\a\x3EC\x2\x2\x1A01\x1A02\a\x481\x2\x2\x1A02\x1A03\x5"+
		"\x3A6\x1D4\x2\x1A03\x1A05\a\x482\x2\x2\x1A04\x1A06\a\x2C3\x2\x2\x1A05"+
		"\x1A04\x3\x2\x2\x2\x1A05\x1A06\x3\x2\x2\x2\x1A06\x1A08\x3\x2\x2\x2\x1A07"+
		"\x1A00\x3\x2\x2\x2\x1A07\x1A08\x3\x2\x2\x2\x1A08\x1A0B\x3\x2\x2\x2\x1A09"+
		"\x1A0C\x5\x49C\x24F\x2\x1A0A\x1A0C\x5\x2D8\x16D\x2\x1A0B\x1A09\x3\x2\x2"+
		"\x2\x1A0B\x1A0A\x3\x2\x2\x2\x1A0C\x1A0E\x3\x2\x2\x2\x1A0D\x1A0F\x5\x456"+
		"\x22C\x2\x1A0E\x1A0D\x3\x2\x2\x2\x1A0E\x1A0F\x3\x2\x2\x2\x1A0F\x1A10\x3"+
		"\x2\x2\x2\x1A10\x1A11\a\x386\x2\x2\x1A11\x1A16\x5\x3BC\x1DF\x2\x1A12\x1A13"+
		"\a\x485\x2\x2\x1A13\x1A15\x5\x3BC\x1DF\x2\x1A14\x1A12\x3\x2\x2\x2\x1A15"+
		"\x1A18\x3\x2\x2\x2\x1A16\x1A14\x3\x2\x2\x2\x1A16\x1A17\x3\x2\x2\x2\x1A17"+
		"\x1A1A\x3\x2\x2\x2\x1A18\x1A16\x3\x2\x2\x2\x1A19\x1A1B\x5\x1EC\xF7\x2"+
		"\x1A1A\x1A19\x3\x2\x2\x2\x1A1A\x1A1B\x3\x2\x2\x2\x1A1B\x1A1E\x3\x2\x2"+
		"\x2\x1A1C\x1A1D\a\x181\x2\x2\x1A1D\x1A1F\x5\x3EE\x1F8\x2\x1A1E\x1A1C\x3"+
		"\x2\x2\x2\x1A1E\x1A1F\x3\x2\x2\x2\x1A1F\x1A2D\x3\x2\x2\x2\x1A20\x1A2B"+
		"\a\x435\x2\x2\x1A21\x1A2C\x5\x3C0\x1E1\x2\x1A22\x1A23\a\xD1\x2\x2\x1A23"+
		"\x1A29\a\x28D\x2\x2\x1A24\x1A26\a\x194\x2\x2\x1A25\x1A24\x3\x2\x2\x2\x1A25"+
		"\x1A26\x3\x2\x2\x2\x1A26\x1A27\x3\x2\x2\x2\x1A27\x1A2A\x5\x4A8\x255\x2"+
		"\x1A28\x1A2A\a\x468\x2\x2\x1A29\x1A25\x3\x2\x2\x2\x1A29\x1A28\x3\x2\x2"+
		"\x2\x1A2A\x1A2C\x3\x2\x2\x2\x1A2B\x1A21\x3\x2\x2\x2\x1A2B\x1A22\x3\x2"+
		"\x2\x2\x1A2C\x1A2E\x3\x2\x2\x2\x1A2D\x1A20\x3\x2\x2\x2\x1A2D\x1A2E\x3"+
		"\x2\x2\x2\x1A2E\x1A30\x3\x2\x2\x2\x1A2F\x1A31\x5\x3D2\x1EA\x2\x1A30\x1A2F"+
		"\x3\x2\x2\x2\x1A30\x1A31\x3\x2\x2\x2\x1A31\x1A33\x3\x2\x2\x2\x1A32\x1A34"+
		"\x5\x3DA\x1EE\x2\x1A33\x1A32\x3\x2\x2\x2\x1A33\x1A34\x3\x2\x2\x2\x1A34"+
		"\x1A36\x3\x2\x2\x2\x1A35\x1A37\a\x486\x2\x2\x1A36\x1A35\x3\x2\x2\x2\x1A36"+
		"\x1A37\x3\x2\x2\x2\x1A37\x1EB\x3\x2\x2\x2\x1A38\x1A39\a\x2AB\x2\x2\x1A39"+
		"\x1A3E\x5\x1EE\xF8\x2\x1A3A\x1A3B\a\x485\x2\x2\x1A3B\x1A3D\x5\x1EE\xF8"+
		"\x2\x1A3C\x1A3A\x3\x2\x2\x2\x1A3D\x1A40\x3\x2\x2\x2\x1A3E\x1A3C\x3\x2"+
		"\x2\x2\x1A3E\x1A3F\x3\x2\x2\x2\x1A3F\x1A4C\x3\x2\x2\x2\x1A40\x1A3E\x3"+
		"\x2\x2\x2\x1A41\x1A44\a\x1D7\x2\x2\x1A42\x1A45\a\x468\x2\x2\x1A43\x1A45"+
		"\x5\x492\x24A\x2\x1A44\x1A42\x3\x2\x2\x2\x1A44\x1A43\x3\x2\x2\x2\x1A45"+
		"\x1A4A\x3\x2\x2\x2\x1A46\x1A47\a\x481\x2\x2\x1A47\x1A48\x5\x4A6\x254\x2"+
		"\x1A48\x1A49\a\x482\x2\x2\x1A49\x1A4B\x3\x2\x2\x2\x1A4A\x1A46\x3\x2\x2"+
		"\x2\x1A4A\x1A4B\x3\x2\x2\x2\x1A4B\x1A4D\x3\x2\x2\x2\x1A4C\x1A41\x3\x2"+
		"\x2\x2\x1A4C\x1A4D\x3\x2\x2\x2\x1A4D\x1ED\x3\x2\x2\x2\x1A4E\x1A51\x5\x3A6"+
		"\x1D4\x2\x1A4F\x1A51\x5\x3E4\x1F3\x2\x1A50\x1A4E\x3\x2\x2\x2\x1A50\x1A4F"+
		"\x3\x2\x2\x2\x1A51\x1A53\x3\x2\x2\x2\x1A52\x1A54\x5\x450\x229\x2\x1A53"+
		"\x1A52\x3\x2\x2\x2\x1A53\x1A54\x3\x2\x2\x2\x1A54\x1EF\x3\x2\x2\x2\x1A55"+
		"\x1A56\a\xCA\x2\x2\x1A56\x1A57\a\xDE\x2\x2\x1A57\x1A5B\x5\x4D2\x26A\x2"+
		"\x1A58\x1A59\a\xB7\x2\x2\x1A59\x1A5A\a\x46F\x2\x2\x1A5A\x1A5C\t@\x2\x2"+
		"\x1A5B\x1A58\x3\x2\x2\x2\x1A5B\x1A5C\x3\x2\x2\x2\x1A5C\x1A69\x3\x2\x2"+
		"\x2\x1A5D\x1A5F\a\x294\x2\x2\x1A5E\x1A60\a\x2D9\x2\x2\x1A5F\x1A5E\x3\x2"+
		"\x2\x2\x1A5F\x1A60\x3\x2\x2\x2\x1A60\x1A61\x3\x2\x2\x2\x1A61\x1A66\x5"+
		"\x484\x243\x2\x1A62\x1A63\a\x485\x2\x2\x1A63\x1A65\x5\x484\x243\x2\x1A64"+
		"\x1A62\x3\x2\x2\x2\x1A65\x1A68\x3\x2\x2\x2\x1A66\x1A64\x3\x2\x2\x2\x1A66"+
		"\x1A67\x3\x2\x2\x2\x1A67\x1A6A\x3\x2\x2\x2\x1A68\x1A66\x3\x2\x2\x2\x1A69"+
		"\x1A5D\x3\x2\x2\x2\x1A69\x1A6A\x3\x2\x2\x2\x1A6A\x1A75\x3\x2\x2\x2\x1A6B"+
		"\x1A6C\a\x215\x2\x2\x1A6C\x1A6D\a\x294\x2\x2\x1A6D\x1A72\x5\x484\x243"+
		"\x2\x1A6E\x1A6F\a\x485\x2\x2\x1A6F\x1A71\x5\x484\x243\x2\x1A70\x1A6E\x3"+
		"\x2\x2\x2\x1A71\x1A74\x3\x2\x2\x2\x1A72\x1A70\x3\x2\x2\x2\x1A72\x1A73"+
		"\x3\x2\x2\x2\x1A73\x1A76\x3\x2\x2\x2\x1A74\x1A72\x3\x2\x2\x2\x1A75\x1A6B"+
		"\x3\x2\x2\x2\x1A75\x1A76\x3\x2\x2\x2\x1A76\x1A79\x3\x2\x2\x2\x1A77\x1A78"+
		"\a\x9C\x2\x2\x1A78\x1A7A\x5\x4D2\x26A\x2\x1A79\x1A77\x3\x2\x2\x2\x1A79"+
		"\x1A7A\x3\x2\x2\x2\x1A7A\x1A84\x3\x2\x2\x2\x1A7B\x1A7C\a\x438\x2\x2\x1A7C"+
		"\x1A81\x5\x480\x241\x2\x1A7D\x1A7E\a\x485\x2\x2\x1A7E\x1A80\x5\x480\x241"+
		"\x2\x1A7F\x1A7D\x3\x2\x2\x2\x1A80\x1A83\x3\x2\x2\x2\x1A81\x1A7F\x3\x2"+
		"\x2\x2\x1A81\x1A82\x3\x2\x2\x2\x1A82\x1A85\x3\x2\x2\x2\x1A83\x1A81\x3"+
		"\x2\x2\x2\x1A84\x1A7B\x3\x2\x2\x2\x1A84\x1A85\x3\x2\x2\x2\x1A85\x1F1\x3"+
		"\x2\x2\x2\x1A86\x1A87\a\xCA\x2\x2\x1A87\x1A88\a\xDE\x2\x2\x1A88\x1A8C"+
		"\x5\x4D2\x26A\x2\x1A89\x1A8A\a\xB7\x2\x2\x1A8A\x1A8B\a\x46F\x2\x2\x1A8B"+
		"\x1A8D\t@\x2\x2\x1A8C\x1A89\x3\x2\x2\x2\x1A8C\x1A8D\x3\x2\x2\x2\x1A8D"+
		"\x1A9A\x3\x2\x2\x2\x1A8E\x1A90\a\x294\x2\x2\x1A8F\x1A91\a\x2D9\x2\x2\x1A90"+
		"\x1A8F\x3\x2\x2\x2\x1A90\x1A91\x3\x2\x2\x2\x1A91\x1A92\x3\x2\x2\x2\x1A92"+
		"\x1A97\x5\x484\x243\x2\x1A93\x1A94\a\x485\x2\x2\x1A94\x1A96\x5\x484\x243"+
		"\x2\x1A95\x1A93\x3\x2\x2\x2\x1A96\x1A99\x3\x2\x2\x2\x1A97\x1A95\x3\x2"+
		"\x2\x2\x1A97\x1A98\x3\x2\x2\x2\x1A98\x1A9B\x3\x2\x2\x2\x1A99\x1A97\x3"+
		"\x2\x2\x2\x1A9A\x1A8E\x3\x2\x2\x2\x1A9A\x1A9B\x3\x2\x2\x2\x1A9B\x1AA7"+
		"\x3\x2\x2\x2\x1A9C\x1A9D\a\x481\x2\x2\x1A9D\x1AA2\x5\x1F4\xFB\x2\x1A9E"+
		"\x1A9F\a\x485\x2\x2\x1A9F\x1AA1\x5\x1F4\xFB\x2\x1AA0\x1A9E\x3\x2\x2\x2"+
		"\x1AA1\x1AA4\x3\x2\x2\x2\x1AA2\x1AA0\x3\x2\x2\x2\x1AA2\x1AA3\x3\x2\x2"+
		"\x2\x1AA3\x1AA5\x3\x2\x2\x2\x1AA4\x1AA2\x3\x2\x2\x2\x1AA5\x1AA6\a\x482"+
		"\x2\x2\x1AA6\x1AA8\x3\x2\x2\x2\x1AA7\x1A9C\x3\x2\x2\x2\x1AA7\x1AA8\x3"+
		"\x2\x2\x2\x1AA8\x1AB3\x3\x2\x2\x2\x1AA9\x1AAA\a\x215\x2\x2\x1AAA\x1AAB"+
		"\a\x294\x2\x2\x1AAB\x1AB0\x5\x484\x243\x2\x1AAC\x1AAD\a\x485\x2\x2\x1AAD"+
		"\x1AAF\x5\x484\x243\x2\x1AAE\x1AAC\x3\x2\x2\x2\x1AAF\x1AB2\x3\x2\x2\x2"+
		"\x1AB0\x1AAE\x3\x2\x2\x2\x1AB0\x1AB1\x3\x2\x2\x2\x1AB1\x1AB4\x3\x2\x2"+
		"\x2\x1AB2\x1AB0\x3\x2\x2\x2\x1AB3\x1AA9\x3\x2\x2\x2\x1AB3\x1AB4\x3\x2"+
		"\x2\x2\x1AB4\x1AB7\x3\x2\x2\x2\x1AB5\x1AB6\a\x9C\x2\x2\x1AB6\x1AB8\x5"+
		"\x4D2\x26A\x2\x1AB7\x1AB5\x3\x2\x2\x2\x1AB7\x1AB8\x3\x2\x2\x2\x1AB8\x1AC2"+
		"\x3\x2\x2\x2\x1AB9\x1ABA\a\x438\x2\x2\x1ABA\x1ABF\x5\x480\x241\x2\x1ABB"+
		"\x1ABC\a\x485\x2\x2\x1ABC\x1ABE\x5\x480\x241\x2\x1ABD\x1ABB\x3\x2\x2\x2"+
		"\x1ABE\x1AC1\x3\x2\x2\x2\x1ABF\x1ABD\x3\x2\x2\x2\x1ABF\x1AC0\x3\x2\x2"+
		"\x2\x1AC0\x1AC3\x3\x2\x2\x2\x1AC1\x1ABF\x3\x2\x2\x2\x1AC2\x1AB9\x3\x2"+
		"\x2\x2\x1AC2\x1AC3\x3\x2\x2\x2\x1AC3\x1F3\x3\x2\x2\x2\x1AC4\x1AC5\a\x226"+
		"\x2\x2\x1AC5\x1AC6\a\x46F\x2\x2\x1AC6\x1AC7\a\x469\x2\x2\x1AC7\x1ACF\t"+
		"\x41\x2\x2\x1AC8\x1AC9\a\x380\x2\x2\x1AC9\x1ACA\a\x46F\x2\x2\x1ACA\x1ACF"+
		"\a\x46B\x2\x2\x1ACB\x1ACC\a\x124\x2\x2\x1ACC\x1ACD\a\x46F\x2\x2\x1ACD"+
		"\x1ACF\a\x46B\x2\x2\x1ACE\x1AC4\x3\x2\x2\x2\x1ACE\x1AC8\x3\x2\x2\x2\x1ACE"+
		"\x1ACB\x3\x2\x2\x2\x1ACF\x1F5\x3\x2\x2\x2\x1AD0\x1AD2\a\xCA\x2\x2\x1AD1"+
		"\x1AD3\a\x40D\x2\x2\x1AD2\x1AD1\x3\x2\x2\x2\x1AD2\x1AD3\x3\x2\x2\x2\x1AD3"+
		"\x1AD5\x3\x2\x2\x2\x1AD4\x1AD6\x5\x4AC\x257\x2\x1AD5\x1AD4\x3\x2\x2\x2"+
		"\x1AD5\x1AD6\x3\x2\x2\x2\x1AD6\x1AD7\x3\x2\x2\x2\x1AD7\x1AD8\a\x1C7\x2"+
		"\x2\x1AD8\x1AD9\x5\x4D2\x26A\x2\x1AD9\x1ADA\a\x294\x2\x2\x1ADA\x1ADB\x5"+
		"\x492\x24A\x2\x1ADB\x1ADC\a\x481\x2\x2\x1ADC\x1ADD\x5\x4A0\x251\x2\x1ADD"+
		"\x1AE3\a\x482\x2\x2\x1ADE\x1ADF\a\x1C3\x2\x2\x1ADF\x1AE0\a\x481\x2\x2"+
		"\x1AE0\x1AE1\x5\x4A6\x254\x2\x1AE1\x1AE2\a\x482\x2\x2\x1AE2\x1AE4\x3\x2"+
		"\x2\x2\x1AE3\x1ADE\x3\x2\x2\x2\x1AE3\x1AE4\x3\x2\x2\x2\x1AE4\x1AE7\x3"+
		"\x2\x2\x2\x1AE5\x1AE6\a\x435\x2\x2\x1AE6\x1AE8\x5\x3C0\x1E1\x2\x1AE7\x1AE5"+
		"\x3\x2\x2\x2\x1AE7\x1AE8\x3\x2\x2\x2\x1AE8\x1AEA\x3\x2\x2\x2\x1AE9\x1AEB"+
		"\x5\x392\x1CA\x2\x1AEA\x1AE9\x3\x2\x2\x2\x1AEA\x1AEB\x3\x2\x2\x2\x1AEB"+
		"\x1AEE\x3\x2\x2\x2\x1AEC\x1AED\a\x294\x2\x2\x1AED\x1AEF\x5\x4D2\x26A\x2"+
		"\x1AEE\x1AEC\x3\x2\x2\x2\x1AEE\x1AEF\x3\x2\x2\x2\x1AEF\x1AF1\x3\x2\x2"+
		"\x2\x1AF0\x1AF2\a\x486\x2\x2\x1AF1\x1AF0\x3\x2\x2\x2\x1AF1\x1AF2\x3\x2"+
		"\x2\x2\x1AF2\x1F7\x3\x2\x2\x2\x1AF3\x1AF4\a\x438\x2\x2\x1AF4\x1AF5\a\x481"+
		"\x2\x2\x1AF5\x1AFA\x5\x1FA\xFE\x2\x1AF6\x1AF7\a\x485\x2\x2\x1AF7\x1AF9"+
		"\x5\x1FA\xFE\x2\x1AF8\x1AF6\x3\x2\x2\x2\x1AF9\x1AFC\x3\x2\x2\x2\x1AFA"+
		"\x1AF8\x3\x2\x2\x2\x1AFA\x1AFB\x3\x2\x2\x2\x1AFB\x1AFD\x3\x2\x2\x2\x1AFC"+
		"\x1AFA\x3\x2\x2\x2\x1AFD\x1AFE\a\x482\x2\x2\x1AFE\x1F9\x3\x2\x2\x2\x1AFF"+
		"\x1B07\x5\x210\x109\x2\x1B00\x1B01\a\x120\x2\x2\x1B01\x1B02\a\x46F\x2"+
		"\x2\x1B02\x1B07\x5\x4AA\x256\x2\x1B03\x1B04\a\x2A3\x2\x2\x1B04\x1B05\a"+
		"\x46F\x2\x2\x1B05\x1B07\x5\x4AA\x256\x2\x1B06\x1AFF\x3\x2\x2\x2\x1B06"+
		"\x1B00\x3\x2\x2\x2\x1B06\x1B03\x3\x2\x2\x2\x1B07\x1FB\x3\x2\x2\x2\x1B08"+
		"\x1B09\a%\x2\x2\x1B09\x1B0A\a\x1C7\x2\x2\x1B0A\x1B0B\x5\x4D2\x26A\x2\x1B0B"+
		"\x1B0C\a\x294\x2\x2\x1B0C\x1B11\x5\x492\x24A\x2\x1B0D\x1B12\a\x112\x2"+
		"\x2\x1B0E\x1B12\a\x2C1\x2\x2\x1B0F\x1B12\a\x3\x2\x2\x1B10\x1B12\x5\x20C"+
		"\x107\x2\x1B11\x1B0D\x3\x2\x2\x2\x1B11\x1B0E\x3\x2\x2\x2\x1B11\x1B0F\x3"+
		"\x2\x2\x2\x1B11\x1B10\x3\x2\x2\x2\x1B12\x1FD\x3\x2\x2\x2\x1B13\x1B14\a"+
		"\x438\x2\x2\x1B14\x1B15\a\x481\x2\x2\x1B15\x1B1A\x5\x200\x101\x2\x1B16"+
		"\x1B17\a\x485\x2\x2\x1B17\x1B19\x5\x200\x101\x2\x1B18\x1B16\x3\x2\x2\x2"+
		"\x1B19\x1B1C\x3\x2\x2\x2\x1B1A\x1B18\x3\x2\x2\x2\x1B1A\x1B1B\x3\x2\x2"+
		"\x2\x1B1B\x1B1D\x3\x2\x2\x2\x1B1C\x1B1A\x3\x2\x2\x2\x1B1D\x1B1E\a\x482"+
		"\x2\x2\x1B1E\x1FF\x3\x2\x2\x2\x1B1F\x1B20\a\x224\x2\x2\x1B20\x1B21\a\x46F"+
		"\x2\x2\x1B21\x1B2A\a\x469\x2\x2\x1B22\x1B23\a\x22C\x2\x2\x1B23\x1B24\a"+
		"\x46F\x2\x2\x1B24\x1B26\a\x469\x2\x2\x1B25\x1B27\a\x245\x2\x2\x1B26\x1B25"+
		"\x3\x2\x2\x2\x1B26\x1B27\x3\x2\x2\x2\x1B27\x1B2A\x3\x2\x2\x2\x1B28\x1B2A"+
		"\x5\x264\x133\x2\x1B29\x1B1F\x3\x2\x2\x2\x1B29\x1B22\x3\x2\x2\x2\x1B29"+
		"\x1B28\x3\x2\x2\x2\x1B2A\x201\x3\x2\x2\x2\x1B2B\x1B2F\a\x31D\x2\x2\x1B2C"+
		"\x1B2D\a\x2BB\x2\x2\x1B2D\x1B2E\a\x46F\x2\x2\x1B2E\x1B30\a\x469\x2\x2"+
		"\x1B2F\x1B2C\x3\x2\x2\x2\x1B2F\x1B30\x3\x2\x2\x2\x1B30\x1B32\x3\x2\x2"+
		"\x2\x1B31\x1B33\x5\x204\x103\x2\x1B32\x1B31\x3\x2\x2\x2\x1B32\x1B33\x3"+
		"\x2\x2\x2\x1B33\x203\x3\x2\x2\x2\x1B34\x1B35\a\x438\x2\x2\x1B35\x1B36"+
		"\a\x481\x2\x2\x1B36\x1B3B\x5\x206\x104\x2\x1B37\x1B38\a\x485\x2\x2\x1B38"+
		"\x1B3A\x5\x206\x104\x2\x1B39\x1B37\x3\x2\x2\x2\x1B3A\x1B3D\x3\x2\x2\x2"+
		"\x1B3B\x1B39\x3\x2\x2\x2\x1B3B\x1B3C\x3\x2\x2\x2\x1B3C\x1B3E\x3\x2\x2"+
		"\x2\x1B3D\x1B3B\x3\x2\x2\x2\x1B3E\x1B3F\a\x482\x2\x2\x1B3F\x205\x3\x2"+
		"\x2\x2\x1B40\x1B41\a\x20F\x2\x2\x1B41\x1B42\a\x46F\x2\x2\x1B42\x1B47\x5"+
		"\x4AA\x256\x2\x1B43\x1B44\a\xAD\x2\x2\x1B44\x1B45\a\x46F\x2\x2\x1B45\x1B47"+
		"\x5\x4AA\x256\x2\x1B46\x1B40\x3\x2\x2\x2\x1B46\x1B43\x3\x2\x2\x2\x1B47"+
		"\x207\x3\x2\x2\x2\x1B48\x1B49\a\x386\x2\x2\x1B49\x1B4A\a\x481\x2\x2\x1B4A"+
		"\x1B4F\x5\x20A\x106\x2\x1B4B\x1B4C\a\x485\x2\x2\x1B4C\x1B4E\x5\x20A\x106"+
		"\x2\x1B4D\x1B4B\x3\x2\x2\x2\x1B4E\x1B51\x3\x2\x2\x2\x1B4F\x1B4D\x3\x2"+
		"\x2\x2\x1B4F\x1B50\x3\x2\x2\x2\x1B50\x1B52\x3\x2\x2\x2\x1B51\x1B4F\x3"+
		"\x2\x2\x2\x1B52\x1B53\a\x482\x2\x2\x1B53\x209\x3\x2\x2\x2\x1B54\x1B55"+
		"\a\x1E\x2\x2\x1B55\x1B56\a\x46F\x2\x2\x1B56\x1B6A\x5\x4AA\x256\x2\x1B57"+
		"\x1B58\a\x1D\x2\x2\x1B58\x1B59\a\x46F\x2\x2\x1B59\x1B6A\x5\x4AA\x256\x2"+
		"\x1B5A\x1B5B\a\x2A3\x2\x2\x1B5B\x1B5C\a\x46F\x2\x2\x1B5C\x1B6A\x5\x4AA"+
		"\x256\x2\x1B5D\x1B5E\a\x1B9\x2\x2\x1B5E\x1B5F\a\x46F\x2\x2\x1B5F\x1B6A"+
		"\x5\x4AA\x256\x2\x1B60\x1B61\a\x3B6\x2\x2\x1B61\x1B62\a\x46F\x2\x2\x1B62"+
		"\x1B6A\x5\x4AA\x256\x2\x1B63\x1B64\a\xAC\x2\x2\x1B64\x1B65\a\x46F\x2\x2"+
		"\x1B65\x1B67\a\x469\x2\x2\x1B66\x1B68\a\x245\x2\x2\x1B67\x1B66\x3\x2\x2"+
		"\x2\x1B67\x1B68\x3\x2\x2\x2\x1B68\x1B6A\x3\x2\x2\x2\x1B69\x1B54\x3\x2"+
		"\x2\x2\x1B69\x1B57\x3\x2\x2\x2\x1B69\x1B5A\x3\x2\x2\x2\x1B69\x1B5D\x3"+
		"\x2\x2\x2\x1B69\x1B60\x3\x2\x2\x2\x1B69\x1B63\x3\x2\x2\x2\x1B6A\x20B\x3"+
		"\x2\x2\x2\x1B6B\x1B6F\a\x30E\x2\x2\x1B6C\x1B6D\a\x2BB\x2\x2\x1B6D\x1B6E"+
		"\a\x46F\x2\x2\x1B6E\x1B70\a\x18\x2\x2\x1B6F\x1B6C\x3\x2\x2\x2\x1B6F\x1B70"+
		"\x3\x2\x2\x2\x1B70\x1B72\x3\x2\x2\x2\x1B71\x1B73\x5\x20E\x108\x2\x1B72"+
		"\x1B71\x3\x2\x2\x2\x1B72\x1B73\x3\x2\x2\x2\x1B73\x1B7C\x3\x2\x2\x2\x1B74"+
		"\x1B75\a\x30E\x2\x2\x1B75\x1B76\a\x2BB\x2\x2\x1B76\x1B77\a\x46F\x2\x2"+
		"\x1B77\x1B79\a\x469\x2\x2\x1B78\x1B7A\x5\x212\x10A\x2\x1B79\x1B78\x3\x2"+
		"\x2\x2\x1B79\x1B7A\x3\x2\x2\x2\x1B7A\x1B7C\x3\x2\x2\x2\x1B7B\x1B6B\x3"+
		"\x2\x2\x2\x1B7B\x1B74\x3\x2\x2\x2\x1B7C\x20D\x3\x2\x2\x2\x1B7D\x1B7E\a"+
		"\x438\x2\x2\x1B7E\x1B7F\a\x481\x2\x2\x1B7F\x1B84\x5\x210\x109\x2\x1B80"+
		"\x1B81\a\x485\x2\x2\x1B81\x1B83\x5\x210\x109\x2\x1B82\x1B80\x3\x2\x2\x2"+
		"\x1B83\x1B86\x3\x2\x2\x2\x1B84\x1B82\x3\x2\x2\x2\x1B84\x1B85\x3\x2\x2"+
		"\x2\x1B85\x1B87\x3\x2\x2\x2\x1B86\x1B84\x3\x2\x2\x2\x1B87\x1B88\a\x482"+
		"\x2\x2\x1B88\x20F\x3\x2\x2\x2\x1B89\x1B8A\a\x2B0\x2\x2\x1B8A\x1B8B\a\x46F"+
		"\x2\x2\x1B8B\x1BC6\x5\x4AA\x256\x2\x1B8C\x1B8D\a\x16C\x2\x2\x1B8D\x1B8E"+
		"\a\x46F\x2\x2\x1B8E\x1BC6\a\x469\x2\x2\x1B8F\x1B90\a\x39F\x2\x2\x1B90"+
		"\x1B91\a\x46F\x2\x2\x1B91\x1BC6\x5\x4AA\x256\x2\x1B92\x1B93\a\x1B9\x2"+
		"\x2\x1B93\x1B94\a\x46F\x2\x2\x1B94\x1BC6\x5\x4AA\x256\x2\x1B95\x1B96\a"+
		"\x3B6\x2\x2\x1B96\x1B97\a\x46F\x2\x2\x1B97\x1BC6\x5\x4AA\x256\x2\x1B98"+
		"\x1B99\a\x3B5\x2\x2\x1B99\x1B9A\a\x46F\x2\x2\x1B9A\x1BC6\x5\x4AA\x256"+
		"\x2\x1B9B\x1B9C\a\x295\x2\x2\x1B9C\x1BA5\a\x46F\x2\x2\x1B9D\x1BA2\a\x294"+
		"\x2\x2\x1B9E\x1B9F\a\x481\x2\x2\x1B9F\x1BA0\x5\x264\x133\x2\x1BA0\x1BA1"+
		"\a\x482\x2\x2\x1BA1\x1BA3\x3\x2\x2\x2\x1BA2\x1B9E\x3\x2\x2\x2\x1BA2\x1BA3"+
		"\x3\x2\x2\x2\x1BA3\x1BA6\x3\x2\x2\x2\x1BA4\x1BA6\a\x28E\x2\x2\x1BA5\x1B9D"+
		"\x3\x2\x2\x2\x1BA5\x1BA4\x3\x2\x2\x2\x1BA6\x1BC6\x3\x2\x2\x2\x1BA7\x1BA8"+
		"\a\x336\x2\x2\x1BA8\x1BA9\a\x46F\x2\x2\x1BA9\x1BC6\x5\x4AA\x256\x2\x1BAA"+
		"\x1BAB\a\x22C\x2\x2\x1BAB\x1BAC\a\x46F\x2\x2\x1BAC\x1BAE\a\x469\x2\x2"+
		"\x1BAD\x1BAF\a\x245\x2\x2\x1BAE\x1BAD\x3\x2\x2\x2\x1BAE\x1BAF\x3\x2\x2"+
		"\x2\x1BAF\x1BC6\x3\x2\x2\x2\x1BB0\x1BB1\a\x1E\x2\x2\x1BB1\x1BB2\a\x46F"+
		"\x2\x2\x1BB2\x1BC6\x5\x4AA\x256\x2\x1BB3\x1BB4\a\x1D\x2\x2\x1BB4\x1BB5"+
		"\a\x46F\x2\x2\x1BB5\x1BC6\x5\x4AA\x256\x2\x1BB6\x1BB7\a\x224\x2\x2\x1BB7"+
		"\x1BB8\a\x46F\x2\x2\x1BB8\x1BC6\a\x469\x2\x2\x1BB9\x1BBA\a\xE4\x2\x2\x1BBA"+
		"\x1BBB\a\x46F\x2\x2\x1BBB\x1BBD\t\x42\x2\x2\x1BBC\x1BBE\x5\x216\x10C\x2"+
		"\x1BBD\x1BBC\x3\x2\x2\x2\x1BBD\x1BBE\x3\x2\x2\x2\x1BBE\x1BC6\x3\x2\x2"+
		"\x2\x1BBF\x1BC0\a\x447\x2\x2\x1BC0\x1BC1\a\x46F\x2\x2\x1BC1\x1BC3\x5\x4AA"+
		"\x256\x2\x1BC2\x1BC4\x5\x216\x10C\x2\x1BC3\x1BC2\x3\x2\x2\x2\x1BC3\x1BC4"+
		"\x3\x2\x2\x2\x1BC4\x1BC6\x3\x2\x2\x2\x1BC5\x1B89\x3\x2\x2\x2\x1BC5\x1B8C"+
		"\x3\x2\x2\x2\x1BC5\x1B8F\x3\x2\x2\x2\x1BC5\x1B92\x3\x2\x2\x2\x1BC5\x1B95"+
		"\x3\x2\x2\x2\x1BC5\x1B98\x3\x2\x2\x2\x1BC5\x1B9B\x3\x2\x2\x2\x1BC5\x1BA7"+
		"\x3\x2\x2\x2\x1BC5\x1BAA\x3\x2\x2\x2\x1BC5\x1BB0\x3\x2\x2\x2\x1BC5\x1BB3"+
		"\x3\x2\x2\x2\x1BC5\x1BB6\x3\x2\x2\x2\x1BC5\x1BB9\x3\x2\x2\x2\x1BC5\x1BBF"+
		"\x3\x2\x2\x2\x1BC6\x211\x3\x2\x2\x2\x1BC7\x1BC8\a\x438\x2\x2\x1BC8\x1BC9"+
		"\a\x481\x2\x2\x1BC9\x1BCE\x5\x214\x10B\x2\x1BCA\x1BCB\a\x485\x2\x2\x1BCB"+
		"\x1BCD\x5\x214\x10B\x2\x1BCC\x1BCA\x3\x2\x2\x2\x1BCD\x1BD0\x3\x2\x2\x2"+
		"\x1BCE\x1BCC\x3\x2\x2\x2\x1BCE\x1BCF\x3\x2\x2\x2\x1BCF\x1BD1\x3\x2\x2"+
		"\x2\x1BD0\x1BCE\x3\x2\x2\x2\x1BD1\x1BD2\a\x482\x2\x2\x1BD2\x213\x3\x2"+
		"\x2\x2\x1BD3\x1BD4\a\x39F\x2\x2\x1BD4\x1BD5\a\x46F\x2\x2\x1BD5\x1BF5\x5"+
		"\x4AA\x256\x2\x1BD6\x1BD7\a\x224\x2\x2\x1BD7\x1BD8\a\x46F\x2\x2\x1BD8"+
		"\x1BF5\a\x469\x2\x2\x1BD9\x1BDA\a\x336\x2\x2\x1BDA\x1BDB\a\x46F\x2\x2"+
		"\x1BDB\x1BF5\x5\x4AA\x256\x2\x1BDC\x1BDD\a\xE4\x2\x2\x1BDD\x1BDE\a\x46F"+
		"\x2\x2\x1BDE\x1BE0\t\x42\x2\x2\x1BDF\x1BE1\x5\x216\x10C\x2\x1BE0\x1BDF"+
		"\x3\x2\x2\x2\x1BE0\x1BE1\x3\x2\x2\x2\x1BE1\x1BF5\x3\x2\x2\x2\x1BE2\x1BE3"+
		"\a\x447\x2\x2\x1BE3\x1BE4\a\x46F\x2\x2\x1BE4\x1BE6\x5\x4AA\x256\x2\x1BE5"+
		"\x1BE7\x5\x216\x10C\x2\x1BE6\x1BE5\x3\x2\x2\x2\x1BE6\x1BE7\x3\x2\x2\x2"+
		"\x1BE7\x1BF5\x3\x2\x2\x2\x1BE8\x1BE9\a\x295\x2\x2\x1BE9\x1BF2\a\x46F\x2"+
		"\x2\x1BEA\x1BEF\a\x294\x2\x2\x1BEB\x1BEC\a\x481\x2\x2\x1BEC\x1BED\x5\x264"+
		"\x133\x2\x1BED\x1BEE\a\x482\x2\x2\x1BEE\x1BF0\x3\x2\x2\x2\x1BEF\x1BEB"+
		"\x3\x2\x2\x2\x1BEF\x1BF0\x3\x2\x2\x2\x1BF0\x1BF3\x3\x2\x2\x2\x1BF1\x1BF3"+
		"\a\x28E\x2\x2\x1BF2\x1BEA\x3\x2\x2\x2\x1BF2\x1BF1\x3\x2\x2\x2\x1BF3\x1BF5"+
		"\x3\x2\x2\x2\x1BF4\x1BD3\x3\x2\x2\x2\x1BF4\x1BD6\x3\x2\x2\x2\x1BF4\x1BD9"+
		"\x3\x2\x2\x2\x1BF4\x1BDC\x3\x2\x2\x2\x1BF4\x1BE2\x3\x2\x2\x2\x1BF4\x1BE8"+
		"\x3\x2\x2\x2\x1BF5\x215\x3\x2\x2\x2\x1BF6\x1BF7\a\x294\x2\x2\x1BF7\x1BF8"+
		"\a\x2BC\x2\x2\x1BF8\x1BF9\a\x481\x2\x2\x1BF9\x1BFC\a\x469\x2\x2\x1BFA"+
		"\x1BFB\a\x3EB\x2\x2\x1BFB\x1BFD\a\x469\x2\x2\x1BFC\x1BFA\x3\x2\x2\x2\x1BFC"+
		"\x1BFD\x3\x2\x2\x2\x1BFD\x1C06\x3\x2\x2\x2\x1BFE\x1BFF\a\x485\x2\x2\x1BFF"+
		"\x1C02\a\x469\x2\x2\x1C00\x1C01\a\x3EB\x2\x2\x1C01\x1C03\a\x469\x2\x2"+
		"\x1C02\x1C00\x3\x2\x2\x2\x1C02\x1C03\x3\x2\x2\x2\x1C03\x1C05\x3\x2\x2"+
		"\x2\x1C04\x1BFE\x3\x2\x2\x2\x1C05\x1C08\x3\x2\x2\x2\x1C06\x1C04\x3\x2"+
		"\x2\x2\x1C06\x1C07\x3\x2\x2\x2\x1C07\x1C09\x3\x2\x2\x2\x1C08\x1C06\x3"+
		"\x2\x2\x2\x1C09\x1C0A\a\x482\x2\x2\x1C0A\x217\x3\x2\x2\x2\x1C0B\x1C10"+
		"\a\xCA\x2\x2\x1C0C\x1C11\a\x9A\x2\x2\x1C0D\x1C0F\a\x26A\x2\x2\x1C0E\x1C0D"+
		"\x3\x2\x2\x2\x1C0E\x1C0F\x3\x2\x2\x2\x1C0F\x1C11\x3\x2\x2\x2\x1C10\x1C0C"+
		"\x3\x2\x2\x2\x1C10\x1C0E\x3\x2\x2\x2\x1C11\x1C12\x3\x2\x2\x2\x1C12\x1C13"+
		"\a\xA1\x2\x2\x1C13\x1C14\a\x1C7\x2\x2\x1C14\x1C15\x5\x4D2\x26A\x2\x1C15"+
		"\x1C16\a\x294\x2\x2\x1C16\x1C18\x5\x492\x24A\x2\x1C17\x1C19\x5\x392\x1CA"+
		"\x2\x1C18\x1C17\x3\x2\x2\x2\x1C18\x1C19\x3\x2\x2\x2\x1C19\x1C1C\x3\x2"+
		"\x2\x2\x1C1A\x1C1B\a\x294\x2\x2\x1C1B\x1C1D\x5\x4D2\x26A\x2\x1C1C\x1C1A"+
		"\x3\x2\x2\x2\x1C1C\x1C1D\x3\x2\x2\x2\x1C1D\x1C1F\x3\x2\x2\x2\x1C1E\x1C20"+
		"\a\x486\x2\x2\x1C1F\x1C1E\x3\x2\x2\x2\x1C1F\x1C20\x3\x2\x2\x2\x1C20\x219"+
		"\x3\x2\x2\x2\x1C21\x1C22\a\x438\x2\x2\x1C22\x1C23\a\x481\x2\x2\x1C23\x1C28"+
		"\x5\x21C\x10F\x2\x1C24\x1C25\a\x485\x2\x2\x1C25\x1C27\x5\x21C\x10F\x2"+
		"\x1C26\x1C24\x3\x2\x2\x2\x1C27\x1C2A\x3\x2\x2\x2\x1C28\x1C26\x3\x2\x2"+
		"\x2\x1C28\x1C29\x3\x2\x2\x2\x1C29\x1C2B\x3\x2\x2\x2\x1C2A\x1C28\x3\x2"+
		"\x2\x2\x1C2B\x1C2C\a\x482\x2\x2\x1C2C\x21B\x3\x2\x2\x2\x1C2D\x1C2E\a\x120"+
		"\x2\x2\x1C2E\x1C2F\a\x46F\x2\x2\x1C2F\x1C43\x5\x4AA\x256\x2\x1C30\x1C31"+
		"\a\x224\x2\x2\x1C31\x1C32\a\x46F\x2\x2\x1C32\x1C43\a\x469\x2\x2\x1C33"+
		"\x1C34\a\x295\x2\x2\x1C34\x1C35\a\x46F\x2\x2\x1C35\x1C43\x5\x4AA\x256"+
		"\x2\x1C36\x1C37\a\xAC\x2\x2\x1C37\x1C38\a\x46F\x2\x2\x1C38\x1C3A\a\x469"+
		"\x2\x2\x1C39\x1C3B\a\x245\x2\x2\x1C3A\x1C39\x3\x2\x2\x2\x1C3A\x1C3B\x3"+
		"\x2\x2\x2\x1C3B\x1C43\x3\x2\x2\x2\x1C3C\x1C3D\a\xE4\x2\x2\x1C3D\x1C3E"+
		"\a\x46F\x2\x2\x1C3E\x1C40\t\x43\x2\x2\x1C3F\x1C41\x5\x216\x10C\x2\x1C40"+
		"\x1C3F\x3\x2\x2\x2\x1C40\x1C41\x3\x2\x2\x2\x1C41\x1C43\x3\x2\x2\x2\x1C42"+
		"\x1C2D\x3\x2\x2\x2\x1C42\x1C30\x3\x2\x2\x2\x1C42\x1C33\x3\x2\x2\x2\x1C42"+
		"\x1C36\x3\x2\x2\x2\x1C42\x1C3C\x3\x2\x2\x2\x1C43\x21D\x3\x2\x2\x2\x1C44"+
		"\x1C46\a\xCA\x2\x2\x1C45\x1C47\a\x26A\x2\x2\x1C46\x1C45\x3\x2\x2\x2\x1C46"+
		"\x1C47\x3\x2\x2\x2\x1C47\x1C48\x3\x2\x2\x2\x1C48\x1C49\a\xA1\x2\x2\x1C49"+
		"\x1C4A\a\x1C7\x2\x2\x1C4A\x1C4B\x5\x4D2\x26A\x2\x1C4B\x1C4C\a\x294\x2"+
		"\x2\x1C4C\x1C4D\x5\x492\x24A\x2\x1C4D\x1C4E\a\x481\x2\x2\x1C4E\x1C4F\x5"+
		"\x4A0\x251\x2\x1C4F\x1C52\a\x482\x2\x2\x1C50\x1C51\a\x435\x2\x2\x1C51"+
		"\x1C53\x5\x3C0\x1E1\x2\x1C52\x1C50\x3\x2\x2\x2\x1C52\x1C53\x3\x2\x2\x2"+
		"\x1C53\x1C55\x3\x2\x2\x2\x1C54\x1C56\x5\x392\x1CA\x2\x1C55\x1C54\x3\x2"+
		"\x2\x2\x1C55\x1C56\x3\x2\x2\x2\x1C56\x1C59\x3\x2\x2\x2\x1C57\x1C58\a\x294"+
		"\x2\x2\x1C58\x1C5A\x5\x4D2\x26A\x2\x1C59\x1C57\x3\x2\x2\x2\x1C59\x1C5A"+
		"\x3\x2\x2\x2\x1C5A\x1C5C\x3\x2\x2\x2\x1C5B\x1C5D\a\x486\x2\x2\x1C5C\x1C5B"+
		"\x3\x2\x2\x2\x1C5C\x1C5D\x3\x2\x2\x2\x1C5D\x21F\x3\x2\x2\x2\x1C5E\x1C60"+
		"\a\xCA\x2\x2\x1C5F\x1C61\a\x2D9\x2\x2\x1C60\x1C5F\x3\x2\x2\x2\x1C60\x1C61"+
		"\x3\x2\x2\x2\x1C61\x1C62\x3\x2\x2\x2\x1C62\x1C63\a\x443\x2\x2\x1C63\x1C64"+
		"\a\x1C7\x2\x2\x1C64\x1C65\x5\x4D2\x26A\x2\x1C65\x1C66\a\x294\x2\x2\x1C66"+
		"\x1C67\x5\x492\x24A\x2\x1C67\x1C68\a\x481\x2\x2\x1C68\x1C69\x5\x4D2\x26A"+
		"\x2\x1C69\x1C74\a\x482\x2\x2\x1C6A\x1C6B\a\x41E\x2\x2\x1C6B\x1C6C\a\x443"+
		"\x2\x2\x1C6C\x1C6D\a\x1C7\x2\x2\x1C6D\x1C72\x5\x4D2\x26A\x2\x1C6E\x1C70"+
		"\a\x172\x2\x2\x1C6F\x1C71\t\x44\x2\x2\x1C70\x1C6F\x3\x2\x2\x2\x1C70\x1C71"+
		"\x3\x2\x2\x2\x1C71\x1C73\x3\x2\x2\x2\x1C72\x1C6E\x3\x2\x2\x2\x1C72\x1C73"+
		"\x3\x2\x2\x2\x1C73\x1C75\x3\x2\x2\x2\x1C74\x1C6A\x3\x2\x2\x2\x1C74\x1C75"+
		"\x3\x2\x2\x2\x1C75\x1C77\x3\x2\x2\x2\x1C76\x1C78\x5\x392\x1CA\x2\x1C77"+
		"\x1C76\x3\x2\x2\x2\x1C77\x1C78\x3\x2\x2\x2\x1C78\x1C7A\x3\x2\x2\x2\x1C79"+
		"\x1C7B\a\x486\x2\x2\x1C7A\x1C79\x3\x2\x2\x2\x1C7A\x1C7B\x3\x2\x2\x2\x1C7B"+
		"\x221\x3\x2\x2\x2\x1C7C\x1C7D\a\x438\x2\x2\x1C7D\x1C7E\a\x481\x2\x2\x1C7E"+
		"\x1C83\x5\x224\x113\x2\x1C7F\x1C80\a\x485\x2\x2\x1C80\x1C82\x5\x224\x113"+
		"\x2\x1C81\x1C7F\x3\x2\x2\x2\x1C82\x1C85\x3\x2\x2\x2\x1C83\x1C81\x3\x2"+
		"\x2\x2\x1C83\x1C84\x3\x2\x2\x2\x1C84\x1C86\x3\x2\x2\x2\x1C85\x1C83\x3"+
		"\x2\x2\x2\x1C86\x1C87\a\x482\x2\x2\x1C87\x223\x3\x2\x2\x2\x1C88\x1C89"+
		"\a\x2B0\x2\x2\x1C89\x1C8A\a\x46F\x2\x2\x1C8A\x1CB0\x5\x4AA\x256\x2\x1C8B"+
		"\x1C8C\a\x16C\x2\x2\x1C8C\x1C8D\a\x46F\x2\x2\x1C8D\x1CB0\a\x469\x2\x2"+
		"\x1C8E\x1C8F\a\x39F\x2\x2\x1C8F\x1C90\a\x46F\x2\x2\x1C90\x1CB0\x5\x4AA"+
		"\x256\x2\x1C91\x1C92\a\x1B9\x2\x2\x1C92\x1C93\a\x46F\x2\x2\x1C93\x1CB0"+
		"\x5\x4AA\x256\x2\x1C94\x1C95\a\x120\x2\x2\x1C95\x1C96\a\x46F\x2\x2\x1C96"+
		"\x1CB0\x5\x4AA\x256\x2\x1C97\x1C98\a\x295\x2\x2\x1C98\x1CA1\a\x46F\x2"+
		"\x2\x1C99\x1C9E\a\x294\x2\x2\x1C9A\x1C9B\a\x481\x2\x2\x1C9B\x1C9C\x5\x264"+
		"\x133\x2\x1C9C\x1C9D\a\x482\x2\x2\x1C9D\x1C9F\x3\x2\x2\x2\x1C9E\x1C9A"+
		"\x3\x2\x2\x2\x1C9E\x1C9F\x3\x2\x2\x2\x1C9F\x1CA2\x3\x2\x2\x2\x1CA0\x1CA2"+
		"\a\x28E\x2\x2\x1CA1\x1C99\x3\x2\x2\x2\x1CA1\x1CA0\x3\x2\x2\x2\x1CA2\x1CB0"+
		"\x3\x2\x2\x2\x1CA3\x1CA4\a\x1E\x2\x2\x1CA4\x1CA5\a\x46F\x2\x2\x1CA5\x1CB0"+
		"\x5\x4AA\x256\x2\x1CA6\x1CA7\a\x1D\x2\x2\x1CA7\x1CA8\a\x46F\x2\x2\x1CA8"+
		"\x1CB0\x5\x4AA\x256\x2\x1CA9\x1CAA\a\x224\x2\x2\x1CAA\x1CAB\a\x46F\x2"+
		"\x2\x1CAB\x1CB0\a\x469\x2\x2\x1CAC\x1CAD\a\x447\x2\x2\x1CAD\x1CAE\a\x46F"+
		"\x2\x2\x1CAE\x1CB0\x5\x4AA\x256\x2\x1CAF\x1C88\x3\x2\x2\x2\x1CAF\x1C8B"+
		"\x3\x2\x2\x2\x1CAF\x1C8E\x3\x2\x2\x2\x1CAF\x1C91\x3\x2\x2\x2\x1CAF\x1C94"+
		"\x3\x2\x2\x2\x1CAF\x1C97\x3\x2\x2\x2\x1CAF\x1CA3\x3\x2\x2\x2\x1CAF\x1CA6"+
		"\x3\x2\x2\x2\x1CAF\x1CA9\x3\x2\x2\x2\x1CAF\x1CAC\x3\x2\x2\x2\x1CB0\x225"+
		"\x3\x2\x2\x2\x1CB1\x1CB4\a\xCA\x2\x2\x1CB2\x1CB3\a\x2A5\x2\x2\x1CB3\x1CB5"+
		"\t\x45\x2\x2\x1CB4\x1CB2\x3\x2\x2\x2\x1CB4\x1CB5\x3\x2\x2\x2\x1CB5\x1CB8"+
		"\x3\x2\x2\x2\x1CB6\x1CB8\a%\x2\x2\x1CB7\x1CB1\x3\x2\x2\x2\x1CB7\x1CB6"+
		"\x3\x2\x2\x2\x1CB8\x1CB9\x3\x2\x2\x2\x1CB9\x1CBA\t\x46\x2\x2\x1CBA\x1CBD"+
		"\x5\x496\x24C\x2\x1CBB\x1CBC\a\x486\x2\x2\x1CBC\x1CBE\a\x469\x2\x2\x1CBD"+
		"\x1CBB\x3\x2\x2\x2\x1CBD\x1CBE\x3\x2\x2\x2\x1CBE\x1CCD\x3\x2\x2\x2\x1CBF"+
		"\x1CC1\a\x481\x2\x2\x1CC0\x1CBF\x3\x2\x2\x2\x1CC0\x1CC1\x3\x2\x2\x2\x1CC1"+
		"\x1CC2\x3\x2\x2\x2\x1CC2\x1CC7\x5\x240\x121\x2\x1CC3\x1CC4\a\x485\x2\x2"+
		"\x1CC4\x1CC6\x5\x240\x121\x2\x1CC5\x1CC3\x3\x2\x2\x2\x1CC6\x1CC9\x3\x2"+
		"\x2\x2\x1CC7\x1CC5\x3\x2\x2\x2\x1CC7\x1CC8\x3\x2\x2\x2\x1CC8\x1CCB\x3"+
		"\x2\x2\x2\x1CC9\x1CC7\x3\x2\x2\x2\x1CCA\x1CCC\a\x482\x2\x2\x1CCB\x1CCA"+
		"\x3\x2\x2\x2\x1CCB\x1CCC\x3\x2\x2\x2\x1CCC\x1CCE\x3\x2\x2\x2\x1CCD\x1CC0"+
		"\x3\x2\x2\x2\x1CCD\x1CCE\x3\x2\x2\x2\x1CCE\x1CD8\x3\x2\x2\x2\x1CCF\x1CD0"+
		"\a\x438\x2\x2\x1CD0\x1CD5\x5\x242\x122\x2\x1CD1\x1CD2\a\x485\x2\x2\x1CD2"+
		"\x1CD4\x5\x242\x122\x2\x1CD3\x1CD1\x3\x2\x2\x2\x1CD4\x1CD7\x3\x2\x2\x2"+
		"\x1CD5\x1CD3\x3\x2\x2\x2\x1CD5\x1CD6\x3\x2\x2\x2\x1CD6\x1CD9\x3\x2\x2"+
		"\x2\x1CD7\x1CD5\x3\x2\x2\x2\x1CD8\x1CCF\x3\x2\x2\x2\x1CD8\x1CD9\x3\x2"+
		"\x2\x2\x1CD9\x1CDC\x3\x2\x2\x2\x1CDA\x1CDB\a\x172\x2\x2\x1CDB\x1CDD\a"+
		"\x326\x2\x2\x1CDC\x1CDA\x3\x2\x2\x2\x1CDC\x1CDD\x3\x2\x2\x2\x1CDD\x1CDE"+
		"\x3\x2\x2\x2\x1CDE\x1CE6\a:\x2\x2\x1CDF\x1CE7\x5\x228\x115\x2\x1CE0\x1CE2"+
		"\x5\b\x5\x2\x1CE1\x1CE0\x3\x2\x2\x2\x1CE2\x1CE5\x3\x2\x2\x2\x1CE3\x1CE1"+
		"\x3\x2\x2\x2\x1CE3\x1CE4\x3\x2\x2\x2\x1CE4\x1CE7\x3\x2\x2\x2\x1CE5\x1CE3"+
		"\x3\x2\x2\x2\x1CE6\x1CDF\x3\x2\x2\x2\x1CE6\x1CE3\x3\x2\x2\x2\x1CE7\x227"+
		"\x3\x2\x2\x2\x1CE8\x1CE9\a\x150\x2\x2\x1CE9\x1CEA\a\x254\x2\x2\x1CEA\x1CEB"+
		"\x5\x4D2\x26A\x2\x1CEB\x1CEC\a\x47C\x2\x2\x1CEC\x1CED\x5\x4D2\x26A\x2"+
		"\x1CED\x1CEE\a\x47C\x2\x2\x1CEE\x1CEF\x5\x4D2\x26A\x2\x1CEF\x229\x3\x2"+
		"\x2\x2\x1CF0\x1CF3\x5\x22C\x117\x2\x1CF1\x1CF3\x5\x232\x11A\x2\x1CF2\x1CF0"+
		"\x3\x2\x2\x2\x1CF2\x1CF1\x3\x2\x2\x2\x1CF3\x22B\x3\x2\x2\x2\x1CF4\x1CF7"+
		"\a\xCA\x2\x2\x1CF5\x1CF6\a\x2A5\x2\x2\x1CF6\x1CF8\t\x45\x2\x2\x1CF7\x1CF5"+
		"\x3\x2\x2\x2\x1CF7\x1CF8\x3\x2\x2\x2\x1CF8\x1CFB\x3\x2\x2\x2\x1CF9\x1CFB"+
		"\a%\x2\x2\x1CFA\x1CF4\x3\x2\x2\x2\x1CFA\x1CF9\x3\x2\x2\x2\x1CFB\x1CFC"+
		"\x3\x2\x2\x2\x1CFC\x1CFD\a\x3F8\x2\x2\x1CFD\x1CFE\x5\x494\x24B\x2\x1CFE"+
		"\x1CFF\a\x294\x2\x2\x1CFF\x1D09\x5\x492\x24A\x2\x1D00\x1D01\a\x438\x2"+
		"\x2\x1D01\x1D06\x5\x22E\x118\x2\x1D02\x1D03\a\x485\x2\x2\x1D03\x1D05\x5"+
		"\x22E\x118\x2\x1D04\x1D02\x3\x2\x2\x2\x1D05\x1D08\x3\x2\x2\x2\x1D06\x1D04"+
		"\x3\x2\x2\x2\x1D06\x1D07\x3\x2\x2\x2\x1D07\x1D0A\x3\x2\x2\x2\x1D08\x1D06"+
		"\x3\x2\x2\x2\x1D09\x1D00\x3\x2\x2\x2\x1D09\x1D0A\x3\x2\x2\x2\x1D0A\x1D0F"+
		"\x3\x2\x2\x2\x1D0B\x1D10\a\x172\x2\x2\x1D0C\x1D10\a\x15\x2\x2\x1D0D\x1D0E"+
		"\a\x1D3\x2\x2\x1D0E\x1D10\a\x28D\x2\x2\x1D0F\x1D0B\x3\x2\x2\x2\x1D0F\x1D0C"+
		"\x3\x2\x2\x2\x1D0F\x1D0D\x3\x2\x2\x2\x1D10\x1D11\x3\x2\x2\x2\x1D11\x1D16"+
		"\x5\x230\x119\x2\x1D12\x1D13\a\x485\x2\x2\x1D13\x1D15\x5\x230\x119\x2"+
		"\x1D14\x1D12\x3\x2\x2\x2\x1D15\x1D18\x3\x2\x2\x2\x1D16\x1D14\x3\x2\x2"+
		"\x2\x1D16\x1D17\x3\x2\x2\x2\x1D17\x1D1B\x3\x2\x2\x2\x1D18\x1D16\x3\x2"+
		"\x2\x2\x1D19\x1D1A\a\x438\x2\x2\x1D1A\x1D1C\a\x31\x2\x2\x1D1B\x1D19\x3"+
		"\x2\x2\x2\x1D1B\x1D1C\x3\x2\x2\x2\x1D1C\x1D20\x3\x2\x2\x2\x1D1D\x1D1E"+
		"\a\x271\x2\x2\x1D1E\x1D1F\a\x172\x2\x2\x1D1F\x1D21\a\x326\x2\x2\x1D20"+
		"\x1D1D\x3\x2\x2\x2\x1D20\x1D21\x3\x2\x2\x2\x1D21\x1D22\x3\x2\x2\x2\x1D22"+
		"\x1D24\a:\x2\x2\x1D23\x1D25\x5\b\x5\x2\x1D24\x1D23\x3\x2\x2\x2\x1D25\x1D26"+
		"\x3\x2\x2\x2\x1D26\x1D24\x3\x2\x2\x2\x1D26\x1D27\x3\x2\x2\x2\x1D27\x22D"+
		"\x3\x2\x2\x2\x1D28\x1D2B\a\x12E\x2\x2\x1D29\x1D2B\x5\x362\x1B2\x2\x1D2A"+
		"\x1D28\x3\x2\x2\x2\x1D2A\x1D29\x3\x2\x2\x2\x1D2B\x22F\x3\x2\x2\x2\x1D2C"+
		"\x1D2D\tG\x2\x2\x1D2D\x231\x3\x2\x2\x2\x1D2E\x1D31\a\xCA\x2\x2\x1D2F\x1D30"+
		"\a\x2A5\x2\x2\x1D30\x1D32\t\x45\x2\x2\x1D31\x1D2F\x3\x2\x2\x2\x1D31\x1D32"+
		"\x3\x2\x2\x2\x1D32\x1D35\x3\x2\x2\x2\x1D33\x1D35\a%\x2\x2\x1D34\x1D2E"+
		"\x3\x2\x2\x2\x1D34\x1D33\x3\x2\x2\x2\x1D35\x1D36\x3\x2\x2\x2\x1D36\x1D37"+
		"\a\x3F8\x2\x2\x1D37\x1D38\x5\x494\x24B\x2\x1D38\x1D3C\a\x294\x2\x2\x1D39"+
		"\x1D3A\a\x18\x2\x2\x1D3A\x1D3D\a\x37A\x2\x2\x1D3B\x1D3D\a\xDE\x2\x2\x1D3C"+
		"\x1D39\x3\x2\x2\x2\x1D3C\x1D3B\x3\x2\x2\x2\x1D3D\x1D47\x3\x2\x2\x2\x1D3E"+
		"\x1D3F\a\x438\x2\x2\x1D3F\x1D44\x5\x22E\x118\x2\x1D40\x1D41\a\x485\x2"+
		"\x2\x1D41\x1D43\x5\x22E\x118\x2\x1D42\x1D40\x3\x2\x2\x2\x1D43\x1D46\x3"+
		"\x2\x2\x2\x1D44\x1D42\x3\x2\x2\x2\x1D44\x1D45\x3\x2\x2\x2\x1D45\x1D48"+
		"\x3\x2\x2\x2\x1D46\x1D44\x3\x2\x2\x2\x1D47\x1D3E\x3\x2\x2\x2\x1D47\x1D48"+
		"\x3\x2\x2\x2\x1D48\x1D49\x3\x2\x2\x2\x1D49\x1D4A\tH\x2\x2\x1D4A\x1D4F"+
		"\x5\x234\x11B\x2\x1D4B\x1D4C\a\x485\x2\x2\x1D4C\x1D4E\x5\x234\x11B\x2"+
		"\x1D4D\x1D4B\x3\x2\x2\x2\x1D4E\x1D51\x3\x2\x2\x2\x1D4F\x1D4D\x3\x2\x2"+
		"\x2\x1D4F\x1D50\x3\x2\x2\x2\x1D50\x1D52\x3\x2\x2\x2\x1D51\x1D4F\x3\x2"+
		"\x2\x2\x1D52\x1D54\a:\x2\x2\x1D53\x1D55\x5\b\x5\x2\x1D54\x1D53\x3\x2\x2"+
		"\x2\x1D55\x1D56\x3\x2\x2\x2\x1D56\x1D54\x3\x2\x2\x2\x1D56\x1D57\x3\x2"+
		"\x2\x2\x1D57\x233\x3\x2\x2\x2\x1D58\x1D59\x5\x4D4\x26B\x2\x1D59\x235\x3"+
		"\x2\x2\x2\x1D5A\x1D5D\a\xCA\x2\x2\x1D5B\x1D5C\a\x2A5\x2\x2\x1D5C\x1D5E"+
		"\a%\x2\x2\x1D5D\x1D5B\x3\x2\x2\x2\x1D5D\x1D5E\x3\x2\x2\x2\x1D5E\x1D61"+
		"\x3\x2\x2\x2\x1D5F\x1D61\a%\x2\x2\x1D60\x1D5A\x3\x2\x2\x2\x1D60\x1D5F"+
		"\x3\x2\x2\x2\x1D61\x1D62\x3\x2\x2\x2\x1D62\x1D63\a\x187\x2\x2\x1D63\x1D71"+
		"\x5\x496\x24C\x2\x1D64\x1D65\a\x481\x2\x2\x1D65\x1D6A\x5\x240\x121\x2"+
		"\x1D66\x1D67\a\x485\x2\x2\x1D67\x1D69\x5\x240\x121\x2\x1D68\x1D66\x3\x2"+
		"\x2\x2\x1D69\x1D6C\x3\x2\x2\x2\x1D6A\x1D68\x3\x2\x2\x2\x1D6A\x1D6B\x3"+
		"\x2\x2\x2\x1D6B\x1D6D\x3\x2\x2\x2\x1D6C\x1D6A\x3\x2\x2\x2\x1D6D\x1D6E"+
		"\a\x482\x2\x2\x1D6E\x1D72\x3\x2\x2\x2\x1D6F\x1D70\a\x481\x2\x2\x1D70\x1D72"+
		"\a\x482\x2\x2\x1D71\x1D64\x3\x2\x2\x2\x1D71\x1D6F\x3\x2\x2\x2\x1D72\x1D76"+
		"\x3\x2\x2\x2\x1D73\x1D77\x5\x238\x11D\x2\x1D74\x1D77\x5\x23A\x11E\x2\x1D75"+
		"\x1D77\x5\x23C\x11F\x2\x1D76\x1D73\x3\x2\x2\x2\x1D76\x1D74\x3\x2\x2\x2"+
		"\x1D76\x1D75\x3\x2\x2\x2\x1D77\x1D79\x3\x2\x2\x2\x1D78\x1D7A\a\x486\x2"+
		"\x2\x1D79\x1D78\x3\x2\x2\x2\x1D79\x1D7A\x3\x2\x2\x2\x1D7A\x237\x3\x2\x2"+
		"\x2\x1D7B\x1D7C\a\x33B\x2\x2\x1D7C\x1D86\a\x3D7\x2\x2\x1D7D\x1D7E\a\x438"+
		"\x2\x2\x1D7E\x1D83\x5\x244\x123\x2\x1D7F\x1D80\a\x485\x2\x2\x1D80\x1D82"+
		"\x5\x244\x123\x2\x1D81\x1D7F\x3\x2\x2\x2\x1D82\x1D85\x3\x2\x2\x2\x1D83"+
		"\x1D81\x3\x2\x2\x2\x1D83\x1D84\x3\x2\x2\x2\x1D84\x1D87\x3\x2\x2\x2\x1D85"+
		"\x1D83\x3\x2\x2\x2\x1D86\x1D7D\x3\x2\x2\x2\x1D86\x1D87\x3\x2\x2\x2\x1D87"+
		"\x1D89\x3\x2\x2\x2\x1D88\x1D8A\a:\x2\x2\x1D89\x1D88\x3\x2\x2\x2\x1D89"+
		"\x1D8A\x3\x2\x2\x2\x1D8A\x1D94\x3\x2\x2\x2\x1D8B\x1D95\x5\x228\x115\x2"+
		"\x1D8C\x1D8E\a\x33A\x2\x2\x1D8D\x1D8F\a\x481\x2\x2\x1D8E\x1D8D\x3\x2\x2"+
		"\x2\x1D8E\x1D8F\x3\x2\x2\x2\x1D8F\x1D90\x3\x2\x2\x2\x1D90\x1D92\x5\x1E4"+
		"\xF3\x2\x1D91\x1D93\a\x482\x2\x2\x1D92\x1D91\x3\x2\x2\x2\x1D92\x1D93\x3"+
		"\x2\x2\x2\x1D93\x1D95\x3\x2\x2\x2\x1D94\x1D8B\x3\x2\x2\x2\x1D94\x1D8C"+
		"\x3\x2\x2\x2\x1D95\x239\x3\x2\x2\x2\x1D96\x1D97\a\x33B\x2\x2\x1D97\x1D98"+
		"\a\x468\x2\x2\x1D98\x1DA2\x5\x366\x1B4\x2\x1D99\x1D9A\a\x438\x2\x2\x1D9A"+
		"\x1D9F\x5\x244\x123\x2\x1D9B\x1D9C\a\x485\x2\x2\x1D9C\x1D9E\x5\x244\x123"+
		"\x2\x1D9D\x1D9B\x3\x2\x2\x2\x1D9E\x1DA1\x3\x2\x2\x2\x1D9F\x1D9D\x3\x2"+
		"\x2\x2\x1D9F\x1DA0\x3\x2\x2\x2\x1DA0\x1DA3\x3\x2\x2\x2\x1DA1\x1D9F\x3"+
		"\x2\x2\x2\x1DA2\x1D99\x3\x2\x2\x2\x1DA2\x1DA3\x3\x2\x2\x2\x1DA3\x1DA5"+
		"\x3\x2\x2\x2\x1DA4\x1DA6\a:\x2\x2\x1DA5\x1DA4\x3\x2\x2\x2\x1DA5\x1DA6"+
		"\x3\x2\x2\x2\x1DA6\x1DB7\x3\x2\x2\x2\x1DA7\x1DB8\x5\x228\x115\x2\x1DA8"+
		"\x1DAC\a\\\x2\x2\x1DA9\x1DAB\x5\b\x5\x2\x1DAA\x1DA9\x3\x2\x2\x2\x1DAB"+
		"\x1DAE\x3\x2\x2\x2\x1DAC\x1DAA\x3\x2\x2\x2\x1DAC\x1DAD\x3\x2\x2\x2\x1DAD"+
		"\x1DAF\x3\x2\x2\x2\x1DAE\x1DAC\x3\x2\x2\x2\x1DAF\x1DB1\a\x33A\x2\x2\x1DB0"+
		"\x1DB2\a\x486\x2\x2\x1DB1\x1DB0\x3\x2\x2\x2\x1DB1\x1DB2\x3\x2\x2\x2\x1DB2"+
		"\x1DB3\x3\x2\x2\x2\x1DB3\x1DB5\a\x130\x2\x2\x1DB4\x1DB6\a\x486\x2\x2\x1DB5"+
		"\x1DB4\x3\x2\x2\x2\x1DB5\x1DB6\x3\x2\x2\x2\x1DB6\x1DB8\x3\x2\x2\x2\x1DB7"+
		"\x1DA7\x3\x2\x2\x2\x1DB7\x1DA8\x3\x2\x2\x2\x1DB8\x23B\x3\x2\x2\x2\x1DB9"+
		"\x1DBA\a\x33B\x2\x2\x1DBA\x1DC4\x5\x4C6\x264\x2\x1DBB\x1DBC\a\x438\x2"+
		"\x2\x1DBC\x1DC1\x5\x244\x123\x2\x1DBD\x1DBE\a\x485\x2\x2\x1DBE\x1DC0\x5"+
		"\x244\x123\x2\x1DBF\x1DBD\x3\x2\x2\x2\x1DC0\x1DC3\x3\x2\x2\x2\x1DC1\x1DBF"+
		"\x3\x2\x2\x2\x1DC1\x1DC2\x3\x2\x2\x2\x1DC2\x1DC5\x3\x2\x2\x2\x1DC3\x1DC1"+
		"\x3\x2\x2\x2\x1DC4\x1DBB\x3\x2\x2\x2\x1DC4\x1DC5\x3\x2\x2\x2\x1DC5\x1DC7"+
		"\x3\x2\x2\x2\x1DC6\x1DC8\a:\x2\x2\x1DC7\x1DC6\x3\x2\x2\x2\x1DC7\x1DC8"+
		"\x3\x2\x2\x2\x1DC8\x1DD8\x3\x2\x2\x2\x1DC9\x1DD9\x5\x228\x115\x2\x1DCA"+
		"\x1DCE\a\\\x2\x2\x1DCB\x1DCD\x5\b\x5\x2\x1DCC\x1DCB\x3\x2\x2\x2\x1DCD"+
		"\x1DD0\x3\x2\x2\x2\x1DCE\x1DCC\x3\x2\x2\x2\x1DCE\x1DCF\x3\x2\x2\x2\x1DCF"+
		"\x1DD1\x3\x2\x2\x2\x1DD0\x1DCE\x3\x2\x2\x2\x1DD1\x1DD2\a\x33A\x2\x2\x1DD2"+
		"\x1DD4\x5\x3A6\x1D4\x2\x1DD3\x1DD5\a\x486\x2\x2\x1DD4\x1DD3\x3\x2\x2\x2"+
		"\x1DD4\x1DD5\x3\x2\x2\x2\x1DD5\x1DD6\x3\x2\x2\x2\x1DD6\x1DD7\a\x130\x2"+
		"\x2\x1DD7\x1DD9\x3\x2\x2\x2\x1DD8\x1DC9\x3\x2\x2\x2\x1DD8\x1DCA\x3\x2"+
		"\x2\x2\x1DD9\x23D\x3\x2\x2\x2\x1DDA\x1DDF\a\x281\x2\x2\x1DDB\x1DDF\a\xF9"+
		"\x2\x2\x1DDC\x1DDF\x5\x4CA\x266\x2\x1DDD\x1DDF\a\x468\x2\x2\x1DDE\x1DDA"+
		"\x3\x2\x2\x2\x1DDE\x1DDB\x3\x2\x2\x2\x1DDE\x1DDC\x3\x2\x2\x2\x1DDE\x1DDD"+
		"\x3\x2\x2\x2\x1DDF\x23F\x3\x2\x2\x2\x1DE0\x1DE2\a\x468\x2\x2\x1DE1\x1DE3"+
		"\a:\x2\x2\x1DE2\x1DE1\x3\x2\x2\x2\x1DE2\x1DE3\x3\x2\x2\x2\x1DE3\x1DE7"+
		"\x3\x2\x2\x2\x1DE4\x1DE5\x5\x4D2\x26A\x2\x1DE5\x1DE6\a\x47C\x2\x2\x1DE6"+
		"\x1DE8\x3\x2\x2\x2\x1DE7\x1DE4\x3\x2\x2\x2\x1DE7\x1DE8\x3\x2\x2\x2\x1DE8"+
		"\x1DE9\x3\x2\x2\x2\x1DE9\x1DEB\x5\x4C6\x264\x2\x1DEA\x1DEC\a\x427\x2\x2"+
		"\x1DEB\x1DEA\x3\x2\x2\x2\x1DEB\x1DEC\x3\x2\x2\x2\x1DEC\x1DF0\x3\x2\x2"+
		"\x2\x1DED\x1DEE\a\x46F\x2\x2\x1DEE\x1DF1\x5\x4C8\x265\x2\x1DEF\x1DF1\a"+
		"\x281\x2\x2\x1DF0\x1DED\x3\x2\x2\x2\x1DF0\x1DEF\x3\x2\x2\x2\x1DF0\x1DF1"+
		"\x3\x2\x2\x2\x1DF1\x1DF3\x3\x2\x2\x2\x1DF2\x1DF4\tI\x2\x2\x1DF3\x1DF2"+
		"\x3\x2\x2\x2\x1DF3\x1DF4\x3\x2\x2\x2\x1DF4\x241\x3\x2\x2\x2\x1DF5\x1DF9"+
		"\a\x12E\x2\x2\x1DF6\x1DF9\a\x310\x2\x2\x1DF7\x1DF9\x5\x362\x1B2\x2\x1DF8"+
		"\x1DF5\x3\x2\x2\x2\x1DF8\x1DF6\x3\x2\x2\x2\x1DF8\x1DF7\x3\x2\x2\x2\x1DF9"+
		"\x243\x3\x2\x2\x2\x1DFA\x1E07\a\x12E\x2\x2\x1DFB\x1E07\a\x35B\x2\x2\x1DFC"+
		"\x1DFD\a\x33B\x2\x2\x1DFD\x1DFE\a\x281\x2\x2\x1DFE\x1DFF\a\x294\x2\x2"+
		"\x1DFF\x1E00\a\x281\x2\x2\x1E00\x1E07\a\x1CF\x2\x2\x1E01\x1E02\as\x2\x2"+
		"\x1E02\x1E03\a\x294\x2\x2\x1E03\x1E04\a\x281\x2\x2\x1E04\x1E07\a\x1CF"+
		"\x2\x2\x1E05\x1E07\x5\x362\x1B2\x2\x1E06\x1DFA\x3\x2\x2\x2\x1E06\x1DFB"+
		"\x3\x2\x2\x2\x1E06\x1DFC\x3\x2\x2\x2\x1E06\x1E01\x3\x2\x2\x2\x1E06\x1E05"+
		"\x3\x2\x2\x2\x1E07\x245\x3\x2\x2\x2\x1E08\x1E0E\a\x438\x2\x2\x1E09\x1E0F"+
		"\a\x183\x2\x2\x1E0A\x1E0B\a\x357\x2\x2\x1E0B\x1E0C\a\x469\x2\x2\x1E0C"+
		"\x1E0F\tJ\x2\x2\x1E0D\x1E0F\a\x3B9\x2\x2\x1E0E\x1E09\x3\x2\x2\x2\x1E0E"+
		"\x1E0A\x3\x2\x2\x2\x1E0E\x1E0D\x3\x2\x2\x2\x1E0F\x1E12\x3\x2\x2\x2\x1E10"+
		"\x1E11\a\x485\x2\x2\x1E11\x1E13\a\x26D\x2\x2\x1E12\x1E10\x3\x2\x2\x2\x1E12"+
		"\x1E13\x3\x2\x2\x2\x1E13\x1E18\x3\x2\x2\x2\x1E14\x1E15\a\x485\x2\x2\x1E15"+
		"\x1E16\a\x1C6\x2\x2\x1E16\x1E17\a\x46F\x2\x2\x1E17\x1E19\x5\x4AA\x256"+
		"\x2\x1E18\x1E14\x3\x2\x2\x2\x1E18\x1E19\x3\x2\x2\x2\x1E19\x1E1B\x3\x2"+
		"\x2\x2\x1E1A\x1E1C\a\x486\x2\x2\x1E1B\x1E1A\x3\x2\x2\x2\x1E1B\x1E1C\x3"+
		"\x2\x2\x2\x1E1C\x247\x3\x2\x2\x2\x1E1D\x1E1E\a\xCA\x2\x2\x1E1E\x1E1F\a"+
		"\x3B4\x2\x2\x1E1F\x1E20\x5\x4D2\x26A\x2\x1E20\x1E21\a\x294\x2\x2\x1E21"+
		"\x1E22\x5\x492\x24A\x2\x1E22\x1E23\a\x481\x2\x2\x1E23\x1E24\x5\x4A6\x254"+
		"\x2\x1E24\x1E26\a\x482\x2\x2\x1E25\x1E27\x5\x246\x124\x2\x1E26\x1E25\x3"+
		"\x2\x2\x2\x1E26\x1E27\x3\x2\x2\x2\x1E27\x249\x3\x2\x2\x2\x1E28\x1E2A\a"+
		"\x415\x2\x2\x1E29\x1E2B\tK\x2\x2\x1E2A\x1E29\x3\x2\x2\x2\x1E2A\x1E2B\x3"+
		"\x2\x2\x2\x1E2B\x1E2C\x3\x2\x2\x2\x1E2C\x1E2D\a\x3B4\x2\x2\x1E2D\x1E2F"+
		"\x5\x490\x249\x2\x1E2E\x1E30\x5\x4D2\x26A\x2\x1E2F\x1E2E\x3\x2\x2\x2\x1E2F"+
		"\x1E30\x3\x2\x2\x2\x1E30\x1E32\x3\x2\x2\x2\x1E31\x1E33\x5\x246\x124\x2"+
		"\x1E32\x1E31\x3\x2\x2\x2\x1E32\x1E33\x3\x2\x2\x2\x1E33\x24B\x3\x2\x2\x2"+
		"\x1E34\x1E35\a\x438\x2\x2\x1E35\x1E3A\x5\x24E\x128\x2\x1E36\x1E37\a\x485"+
		"\x2\x2\x1E37\x1E39\x5\x24E\x128\x2\x1E38\x1E36\x3\x2\x2\x2\x1E39\x1E3C"+
		"\x3\x2\x2\x2\x1E3A\x1E38\x3\x2\x2\x2\x1E3A\x1E3B\x3\x2\x2\x2\x1E3B\x24D"+
		"\x3\x2\x2\x2\x1E3C\x1E3A\x3\x2\x2\x2\x1E3D\x1E44\a\x183\x2\x2\x1E3E\x1E40"+
		"\a\x485\x2\x2\x1E3F\x1E3E\x3\x2\x2\x2\x1E3F\x1E40\x3\x2\x2\x2\x1E40\x1E41"+
		"\x3\x2\x2\x2\x1E41\x1E42\a\x2CA\x2\x2\x1E42\x1E43\a\x46F\x2\x2\x1E43\x1E45"+
		"\x5\x4AA\x256\x2\x1E44\x1E3F\x3\x2\x2\x2\x1E44\x1E45\x3\x2\x2\x2\x1E45"+
		"\x1E6C\x3\x2\x2\x2\x1E46\x1E47\a\x357\x2\x2\x1E47\x1E48\a\x469\x2\x2\x1E48"+
		"\x1E4F\tJ\x2\x2\x1E49\x1E4B\a\x485\x2\x2\x1E4A\x1E49\x3\x2\x2\x2\x1E4A"+
		"\x1E4B\x3\x2\x2\x2\x1E4B\x1E4C\x3\x2\x2\x2\x1E4C\x1E4D\a\x2CA\x2\x2\x1E4D"+
		"\x1E4E\a\x46F\x2\x2\x1E4E\x1E50\x5\x4AA\x256\x2\x1E4F\x1E4A\x3\x2\x2\x2"+
		"\x1E4F\x1E50\x3\x2\x2\x2\x1E50\x1E6C\x3\x2\x2\x2\x1E51\x1E53\a\x32C\x2"+
		"\x2\x1E52\x1E54\x5\x216\x10C\x2\x1E53\x1E52\x3\x2\x2\x2\x1E53\x1E54\x3"+
		"\x2\x2\x2\x1E54\x1E6C\x3\x2\x2\x2\x1E55\x1E56\a\x3B9\x2\x2\x1E56\x1E57"+
		"\a\x46F\x2\x2\x1E57\x1E6C\x5\x3A6\x1D4\x2\x1E58\x1E59\a\x348\x2\x2\x1E59"+
		"\x1E5A\a\x46F\x2\x2\x1E5A\x1E6C\a\x469\x2\x2\x1E5B\x1E5C\a\x2B2\x2\x2"+
		"\x1E5C\x1E5D\a\x46F\x2\x2\x1E5D\x1E6C\a\x469\x2\x2\x1E5E\x1E6C\a\x18\x2"+
		"\x2\x1E5F\x1E6C\a\xA0\x2\x2\x1E60\x1E6C\a\x1C7\x2\x2\x1E61\x1E6C\a\x26D"+
		"\x2\x2\x1E62\x1E63\a\x1C6\x2\x2\x1E63\x1E64\a\x46F\x2\x2\x1E64\x1E6C\x5"+
		"\x4AA\x256\x2\x1E65\x1E66\a\x224\x2\x2\x1E66\x1E67\a\x46F\x2\x2\x1E67"+
		"\x1E6C\a\x469\x2\x2\x1E68\x1E69\aO\x2\x2\x1E69\x1E6A\a\x46F\x2\x2\x1E6A"+
		"\x1E6C\x5\x4AA\x256\x2\x1E6B\x1E3D\x3\x2\x2\x2\x1E6B\x1E46\x3\x2\x2\x2"+
		"\x1E6B\x1E51\x3\x2\x2\x2\x1E6B\x1E55\x3\x2\x2\x2\x1E6B\x1E58\x3\x2\x2"+
		"\x2\x1E6B\x1E5B\x3\x2\x2\x2\x1E6B\x1E5E\x3\x2\x2\x2\x1E6B\x1E5F\x3\x2"+
		"\x2\x2\x1E6B\x1E60\x3\x2\x2\x2\x1E6B\x1E61\x3\x2\x2\x2\x1E6B\x1E62\x3"+
		"\x2\x2\x2\x1E6B\x1E65\x3\x2\x2\x2\x1E6B\x1E68\x3\x2\x2\x2\x1E6C\x24F\x3"+
		"\x2\x2\x2\x1E6D\x1E6E\a\xCA\x2\x2\x1E6E\x1E6F\a\x3D7\x2\x2\x1E6F\x1E70"+
		"\x5\x492\x24A\x2\x1E70\x1E71\a\x481\x2\x2\x1E71\x1E78\x5\x36E\x1B8\x2"+
		"\x1E72\x1E74\a\x485\x2\x2\x1E73\x1E72\x3\x2\x2\x2\x1E73\x1E74\x3\x2\x2"+
		"\x2\x1E74\x1E75\x3\x2\x2\x2\x1E75\x1E77\x5\x252\x12A\x2\x1E76\x1E73\x3"+
		"\x2\x2\x2\x1E77\x1E7A\x3\x2\x2\x2\x1E78\x1E76\x3\x2\x2\x2\x1E78\x1E79"+
		"\x3\x2\x2\x2\x1E79\x1E7C\x3\x2\x2\x2\x1E7A\x1E78\x3\x2\x2\x2\x1E7B\x1E7D"+
		"\a\x485\x2\x2\x1E7C\x1E7B\x3\x2\x2\x2\x1E7C\x1E7D\x3\x2\x2\x2\x1E7D\x1E7E"+
		"\x3\x2\x2\x2\x1E7E\x1E81\a\x482\x2\x2\x1E7F\x1E80\a\x213\x2\x2\x1E80\x1E82"+
		"\x5\x4D4\x26B\x2\x1E81\x1E7F\x3\x2\x2\x2\x1E81\x1E82\x3\x2\x2\x2\x1E82"+
		"\x1E86\x3\x2\x2\x2\x1E83\x1E85\x5\x254\x12B\x2\x1E84\x1E83\x3\x2\x2\x2"+
		"\x1E85\x1E88\x3\x2\x2\x2\x1E86\x1E84\x3\x2\x2\x2\x1E86\x1E87\x3\x2\x2"+
		"\x2\x1E87\x1E8C\x3\x2\x2\x2\x1E88\x1E86\x3\x2\x2\x2\x1E89\x1E8A\a\x294"+
		"\x2\x2\x1E8A\x1E8D\x5\x4D2\x26A\x2\x1E8B\x1E8D\a\xF9\x2\x2\x1E8C\x1E89"+
		"\x3\x2\x2\x2\x1E8C\x1E8B\x3\x2\x2\x2\x1E8C\x1E8D\x3\x2\x2\x2\x1E8D\x1E91"+
		"\x3\x2\x2\x2\x1E8E\x1E8F\a\x3E2\x2\x2\x1E8F\x1E92\x5\x4D2\x26A\x2\x1E90"+
		"\x1E92\a\xF9\x2\x2\x1E91\x1E8E\x3\x2\x2\x2\x1E91\x1E90\x3\x2\x2\x2\x1E91"+
		"\x1E92\x3\x2\x2\x2\x1E92\x1E94\x3\x2\x2\x2\x1E93\x1E95\a\x486\x2\x2\x1E94"+
		"\x1E93\x3\x2\x2\x2\x1E94\x1E95\x3\x2\x2\x2\x1E95\x251\x3\x2\x2\x2\x1E96"+
		"\x1E97\a\x1C7\x2\x2\x1E97\x1E99\x5\x4D2\x26A\x2\x1E98\x1E9A\tL\x2\x2\x1E99"+
		"\x1E98\x3\x2\x2\x2\x1E99\x1E9A\x3\x2\x2\x2\x1E9A\x1E9B\x3\x2\x2\x2\x1E9B"+
		"\x1E9C\a\x481\x2\x2\x1E9C\x1E9D\x5\x4A0\x251\x2\x1E9D\x1E9F\a\x482\x2"+
		"\x2\x1E9E\x1EA0\x5\x392\x1CA\x2\x1E9F\x1E9E\x3\x2\x2\x2\x1E9F\x1EA0\x3"+
		"\x2\x2\x2\x1EA0\x1EA3\x3\x2\x2\x2\x1EA1\x1EA2\a\x294\x2\x2\x1EA2\x1EA4"+
		"\x5\x4D2\x26A\x2\x1EA3\x1EA1\x3\x2\x2\x2\x1EA3\x1EA4\x3\x2\x2\x2\x1EA4"+
		"\x253\x3\x2\x2\x2\x1EA5\x1EB9\a\x438\x2\x2\x1EA6\x1EA7\a\x481\x2\x2\x1EA7"+
		"\x1EAC\x5\x394\x1CB\x2\x1EA8\x1EA9\a\x485\x2\x2\x1EA9\x1EAB\x5\x394\x1CB"+
		"\x2\x1EAA\x1EA8\x3\x2\x2\x2\x1EAB\x1EAE\x3\x2\x2\x2\x1EAC\x1EAA\x3\x2"+
		"\x2\x2\x1EAC\x1EAD\x3\x2\x2\x2\x1EAD\x1EAF\x3\x2\x2\x2\x1EAE\x1EAC\x3"+
		"\x2\x2\x2\x1EAF\x1EB0\a\x482\x2\x2\x1EB0\x1EBA\x3\x2\x2\x2\x1EB1\x1EB6"+
		"\x5\x394\x1CB\x2\x1EB2\x1EB3\a\x485\x2\x2\x1EB3\x1EB5\x5\x394\x1CB\x2"+
		"\x1EB4\x1EB2\x3\x2\x2\x2\x1EB5\x1EB8\x3\x2\x2\x2\x1EB6\x1EB4\x3\x2\x2"+
		"\x2\x1EB6\x1EB7\x3\x2\x2\x2\x1EB7\x1EBA\x3\x2\x2\x2\x1EB8\x1EB6\x3\x2"+
		"\x2\x2\x1EB9\x1EA6\x3\x2\x2\x2\x1EB9\x1EB1\x3\x2\x2\x2\x1EBA\x255\x3\x2"+
		"\x2\x2\x1EBB\x1EBE\x5\x4D4\x26B\x2\x1EBC\x1EBE\x5\x4D0\x269\x2\x1EBD\x1EBB"+
		"\x3\x2\x2\x2\x1EBD\x1EBC\x3\x2\x2\x2\x1EBE\x1EBF\x3\x2\x2\x2\x1EBF\x1EC4"+
		"\a\x46F\x2\x2\x1EC0\x1EC5\x5\x4D4\x26B\x2\x1EC1\x1EC5\x5\x4D0\x269\x2"+
		"\x1EC2\x1EC5\x5\x4AA\x256\x2\x1EC3\x1EC5\a\x469\x2\x2\x1EC4\x1EC0\x3\x2"+
		"\x2\x2\x1EC4\x1EC1\x3\x2\x2\x2\x1EC4\x1EC2\x3\x2\x2\x2\x1EC4\x1EC3\x3"+
		"\x2\x2\x2\x1EC5\x1EF4\x3\x2\x2\x2\x1EC6\x1EC7\a\x9A\x2\x2\x1EC7\x1EC8"+
		"\a\xA1\x2\x2\x1EC8\x1EF4\a\x1C7\x2\x2\x1EC9\x1EF4\a\x1A7\x2\x2\x1ECA\x1ECB"+
		"\a\x16C\x2\x2\x1ECB\x1ECC\a\x46F\x2\x2\x1ECC\x1EF4\a\x469\x2\x2\x1ECD"+
		"\x1ECE\a\x118\x2\x2\x1ECE\x1ECF\a\x46F\x2\x2\x1ECF\x1ED0\a\x1A0\x2\x2"+
		"\x1ED0\x1ED1\a\x481\x2\x2\x1ED1\x1ED2\x5\x4D2\x26A\x2\x1ED2\x1ED3\a\x482"+
		"\x2\x2\x1ED3\x1EF4\x3\x2\x2\x2\x1ED4\x1ED5\a\x9A\x2\x2\x1ED5\x1ED6\a\x1C7"+
		"\x2\x2\x1ED6\x1ED7\a\x481\x2\x2\x1ED7\x1ED9\x5\x4D2\x26A\x2\x1ED8\x1EDA"+
		"\tM\x2\x2\x1ED9\x1ED8\x3\x2\x2\x2\x1ED9\x1EDA\x3\x2\x2\x2\x1EDA\x1EE2"+
		"\x3\x2\x2\x2\x1EDB\x1EDC\a\x485\x2\x2\x1EDC\x1EDE\x5\x4D2\x26A\x2\x1EDD"+
		"\x1EDF\tM\x2\x2\x1EDE\x1EDD\x3\x2\x2\x2\x1EDE\x1EDF\x3\x2\x2\x2\x1EDF"+
		"\x1EE1\x3\x2\x2\x2\x1EE0\x1EDB\x3\x2\x2\x2\x1EE1\x1EE4\x3\x2\x2\x2\x1EE2"+
		"\x1EE0\x3\x2\x2\x2\x1EE2\x1EE3\x3\x2\x2\x2\x1EE3\x1EE5\x3\x2\x2\x2\x1EE4"+
		"\x1EE2\x3\x2\x2\x2\x1EE5\x1EE6\a\x482\x2\x2\x1EE6\x1EF4\x3\x2\x2\x2\x1EE7"+
		"\x1EE8\a\xE4\x2\x2\x1EE8\x1EE9\a\x46F\x2\x2\x1EE9\x1EEB\tN\x2\x2\x1EEA"+
		"\x1EEC\x5\x216\x10C\x2\x1EEB\x1EEA\x3\x2\x2\x2\x1EEB\x1EEC\x3\x2\x2\x2"+
		"\x1EEC\x1EF4\x3\x2\x2\x2\x1EED\x1EEE\a\x447\x2\x2\x1EEE\x1EEF\a\x46F\x2"+
		"\x2\x1EEF\x1EF1\x5\x4AA\x256\x2\x1EF0\x1EF2\x5\x216\x10C\x2\x1EF1\x1EF0"+
		"\x3\x2\x2\x2\x1EF1\x1EF2\x3\x2\x2\x2\x1EF2\x1EF4\x3\x2\x2\x2\x1EF3\x1EBD"+
		"\x3\x2\x2\x2\x1EF3\x1EC6\x3\x2\x2\x2\x1EF3\x1EC9\x3\x2\x2\x2\x1EF3\x1ECA"+
		"\x3\x2\x2\x2\x1EF3\x1ECD\x3\x2\x2\x2\x1EF3\x1ED4\x3\x2\x2\x2\x1EF3\x1EE7"+
		"\x3\x2\x2\x2\x1EF3\x1EED\x3\x2\x2\x2\x1EF4\x257\x3\x2\x2\x2\x1EF5\x1EF6"+
		"\a\x438\x2\x2\x1EF6\x1EF7\a\x481\x2\x2\x1EF7\x1EFC\x5\x25A\x12E\x2\x1EF8"+
		"\x1EF9\a\x485\x2\x2\x1EF9\x1EFB\x5\x25A\x12E\x2\x1EFA\x1EF8\x3\x2\x2\x2"+
		"\x1EFB\x1EFE\x3\x2\x2\x2\x1EFC\x1EFA\x3\x2\x2\x2\x1EFC\x1EFD\x3\x2\x2"+
		"\x2\x1EFD\x1EFF\x3\x2\x2\x2\x1EFE\x1EFC\x3\x2\x2\x2\x1EFF\x1F00\a\x482"+
		"\x2\x2\x1F00\x259\x3\x2\x2\x2\x1F01\x1F02\a\x2B0\x2\x2\x1F02\x1F03\a\x46F"+
		"\x2\x2\x1F03\x1F26\x5\x4AA\x256\x2\x1F04\x1F05\a\x16C\x2\x2\x1F05\x1F06"+
		"\a\x46F\x2\x2\x1F06\x1F26\a\x469\x2\x2\x1F07\x1F08\a\x1B9\x2\x2\x1F08"+
		"\x1F09\a\x46F\x2\x2\x1F09\x1F26\x5\x4AA\x256\x2\x1F0A\x1F0B\a\x3B6\x2"+
		"\x2\x1F0B\x1F0C\a\x46F\x2\x2\x1F0C\x1F26\x5\x4AA\x256\x2\x1F0D\x1F0E\a"+
		"\x3B5\x2\x2\x1F0E\x1F0F\a\x46F\x2\x2\x1F0F\x1F26\x5\x4AA\x256\x2\x1F10"+
		"\x1F11\a\x1E\x2\x2\x1F11\x1F12\a\x46F\x2\x2\x1F12\x1F26\x5\x4AA\x256\x2"+
		"\x1F13\x1F14\a\x1D\x2\x2\x1F14\x1F15\a\x46F\x2\x2\x1F15\x1F26\x5\x4AA"+
		"\x256\x2\x1F16\x1F17\a\x2A3\x2\x2\x1F17\x1F18\a\x46F\x2\x2\x1F18\x1F26"+
		"\x5\x4AA\x256\x2\x1F19\x1F1A\a\xE4\x2\x2\x1F1A\x1F1B\a\x46F\x2\x2\x1F1B"+
		"\x1F1D\t\x42\x2\x2\x1F1C\x1F1E\x5\x216\x10C\x2\x1F1D\x1F1C\x3\x2\x2\x2"+
		"\x1F1D\x1F1E\x3\x2\x2\x2\x1F1E\x1F26\x3\x2\x2\x2\x1F1F\x1F20\a\x447\x2"+
		"\x2\x1F20\x1F21\a\x46F\x2\x2\x1F21\x1F23\x5\x4AA\x256\x2\x1F22\x1F24\x5"+
		"\x216\x10C\x2\x1F23\x1F22\x3\x2\x2\x2\x1F23\x1F24\x3\x2\x2\x2\x1F24\x1F26"+
		"\x3\x2\x2\x2\x1F25\x1F01\x3\x2\x2\x2\x1F25\x1F04\x3\x2\x2\x2\x1F25\x1F07"+
		"\x3\x2\x2\x2\x1F25\x1F0A\x3\x2\x2\x2\x1F25\x1F0D\x3\x2\x2\x2\x1F25\x1F10"+
		"\x3\x2\x2\x2\x1F25\x1F13\x3\x2\x2\x2\x1F25\x1F16\x3\x2\x2\x2\x1F25\x1F19"+
		"\x3\x2\x2\x2\x1F25\x1F1F\x3\x2\x2\x2\x1F26\x25B\x3\x2\x2\x2\x1F27\x1F2A"+
		"\a\xCA\x2\x2\x1F28\x1F29\a\x2A5\x2\x2\x1F29\x1F2B\t\x45\x2\x2\x1F2A\x1F28"+
		"\x3\x2\x2\x2\x1F2A\x1F2B\x3\x2\x2\x2\x1F2B\x1F2E\x3\x2\x2\x2\x1F2C\x1F2E"+
		"\a%\x2\x2\x1F2D\x1F27\x3\x2\x2\x2\x1F2D\x1F2C\x3\x2\x2\x2\x1F2E\x1F2F"+
		"\x3\x2\x2\x2\x1F2F\x1F30\a\x42B\x2\x2\x1F30\x1F35\x5\x494\x24B\x2\x1F31"+
		"\x1F32\a\x481\x2\x2\x1F32\x1F33\x5\x4A6\x254\x2\x1F33\x1F34\a\x482\x2"+
		"\x2\x1F34\x1F36\x3\x2\x2\x2\x1F35\x1F31\x3\x2\x2\x2\x1F35\x1F36\x3\x2"+
		"\x2\x2\x1F36\x1F40\x3\x2\x2\x2\x1F37\x1F38\a\x438\x2\x2\x1F38\x1F3D\x5"+
		"\x25E\x130\x2\x1F39\x1F3A\a\x485\x2\x2\x1F3A\x1F3C\x5\x25E\x130\x2\x1F3B"+
		"\x1F39\x3\x2\x2\x2\x1F3C\x1F3F\x3\x2\x2\x2\x1F3D\x1F3B\x3\x2\x2\x2\x1F3D"+
		"\x1F3E\x3\x2\x2\x2\x1F3E\x1F41\x3\x2\x2\x2\x1F3F\x1F3D\x3\x2\x2\x2\x1F40"+
		"\x1F37\x3\x2\x2\x2\x1F40\x1F41\x3\x2\x2\x2\x1F41\x1F42\x3\x2\x2\x2\x1F42"+
		"\x1F43\a:\x2\x2\x1F43\x1F47\x5\x1E4\xF3\x2\x1F44\x1F45\a\x438\x2\x2\x1F45"+
		"\x1F46\a\x87\x2\x2\x1F46\x1F48\a\x2A4\x2\x2\x1F47\x1F44\x3\x2\x2\x2\x1F47"+
		"\x1F48\x3\x2\x2\x2\x1F48\x1F4A\x3\x2\x2\x2\x1F49\x1F4B\a\x486\x2\x2\x1F4A"+
		"\x1F49\x3\x2\x2\x2\x1F4A\x1F4B\x3\x2\x2\x2\x1F4B\x25D\x3\x2\x2\x2\x1F4C"+
		"\x1F4D\tO\x2\x2\x1F4D\x25F\x3\x2\x2\x2\x1F4E\x1F4F\a%\x2\x2\x1F4F\x1F50"+
		"\a\x3D7\x2\x2\x1F50\x1F9A\x5\x492\x24A\x2\x1F51\x1F52\a\x386\x2\x2\x1F52"+
		"\x1F53\a\x481\x2\x2\x1F53\x1F54\a\x214\x2\x2\x1F54\x1F55\a\x46F\x2\x2"+
		"\x1F55\x1F56\tP\x2\x2\x1F56\x1F9B\a\x482\x2\x2\x1F57\x1F58\a\r\x2\x2\x1F58"+
		"\x1F9B\x5\x36E\x1B8\x2\x1F59\x1F5A\a%\x2\x2\x1F5A\x1F5D\a\x9E\x2\x2\x1F5B"+
		"\x1F5E\x5\x372\x1BA\x2\x1F5C\x1F5E\x5\x376\x1BC\x2\x1F5D\x1F5B\x3\x2\x2"+
		"\x2\x1F5D\x1F5C\x3\x2\x2\x2\x1F5E\x1F9B\x3\x2\x2\x2\x1F5F\x1F60\a\x11E"+
		"\x2\x2\x1F60\x1F61\a\x9E\x2\x2\x1F61\x1F66\x5\x4D2\x26A\x2\x1F62\x1F63"+
		"\a\x485\x2\x2\x1F63\x1F65\x5\x4D2\x26A\x2\x1F64\x1F62\x3\x2\x2\x2\x1F65"+
		"\x1F68\x3\x2\x2\x2\x1F66\x1F64\x3\x2\x2\x2\x1F66\x1F67\x3\x2\x2\x2\x1F67"+
		"\x1F9B\x3\x2\x2\x2\x1F68\x1F66\x3\x2\x2\x2\x1F69\x1F6A\a\x11E\x2\x2\x1F6A"+
		"\x1F6B\a\xB6\x2\x2\x1F6B\x1F9B\x5\x4D2\x26A\x2\x1F6C\x1F6D\a\x438\x2\x2"+
		"\x1F6D\x1F6E\tQ\x2\x2\x1F6E\x1F71\a\r\x2\x2\x1F6F\x1F70\a\xB6\x2\x2\x1F70"+
		"\x1F72\x5\x4D2\x26A\x2\x1F71\x1F6F\x3\x2\x2\x2\x1F71\x1F72\x3\x2\x2\x2"+
		"\x1F72\x1F8C\x3\x2\x2\x2\x1F73\x1F74\a\x17A\x2\x2\x1F74\x1F75\a\x1F2\x2"+
		"\x2\x1F75\x1F76\a\x481\x2\x2\x1F76\x1F77\x5\x4A6\x254\x2\x1F77\x1F78\a"+
		"\x482\x2\x2\x1F78\x1F79\a\x314\x2\x2\x1F79\x1F7E\x5\x492\x24A\x2\x1F7A"+
		"\x1F7B\a\x481\x2\x2\x1F7B\x1F7C\x5\x4A6\x254\x2\x1F7C\x1F7D\a\x482\x2"+
		"\x2\x1F7D\x1F7F\x3\x2\x2\x2\x1F7E\x1F7A\x3\x2\x2\x2\x1F7E\x1F7F\x3\x2"+
		"\x2\x2\x1F7F\x1F84\x3\x2\x2\x2\x1F80\x1F83\x5\x38C\x1C7\x2\x1F81\x1F83"+
		"\x5\x38E\x1C8\x2\x1F82\x1F80\x3\x2\x2\x2\x1F82\x1F81\x3\x2\x2\x2\x1F83"+
		"\x1F86\x3\x2\x2\x2\x1F84\x1F82\x3\x2\x2\x2\x1F84\x1F85\x3\x2\x2\x2\x1F85"+
		"\x1F8D\x3\x2\x2\x2\x1F86\x1F84\x3\x2\x2\x2\x1F87\x1F88\a\x87\x2\x2\x1F88"+
		"\x1F89\a\x481\x2\x2\x1F89\x1F8A\x5\x3C0\x1E1\x2\x1F8A\x1F8B\a\x482\x2"+
		"\x2\x1F8B\x1F8D\x3\x2\x2\x2\x1F8C\x1F73\x3\x2\x2\x2\x1F8C\x1F87\x3\x2"+
		"\x2\x2\x1F8D\x1F9B\x3\x2\x2\x2\x1F8E\x1F8F\tQ\x2\x2\x1F8F\x1F90\a\xB6"+
		"\x2\x2\x1F90\x1F9B\x5\x4D2\x26A\x2\x1F91\x1F92\t\x1B\x2\x2\x1F92\x1F94"+
		"\a\x3F8\x2\x2\x1F93\x1F95\x5\x4D2\x26A\x2\x1F94\x1F93\x3\x2\x2\x2\x1F94"+
		"\x1F95\x3\x2\x2\x2\x1F95\x1F9B\x3\x2\x2\x2\x1F96\x1F97\a\x30E\x2\x2\x1F97"+
		"\x1F9B\x5\x254\x12B\x2\x1F98\x1F99\a\x3D1\x2\x2\x1F99\x1F9B\x5\x262\x132"+
		"\x2\x1F9A\x1F51\x3\x2\x2\x2\x1F9A\x1F57\x3\x2\x2\x2\x1F9A\x1F59\x3\x2"+
		"\x2\x2\x1F9A\x1F5F\x3\x2\x2\x2\x1F9A\x1F69\x3\x2\x2\x2\x1F9A\x1F6C\x3"+
		"\x2\x2\x2\x1F9A\x1F8E\x3\x2\x2\x2\x1F9A\x1F91\x3\x2\x2\x2\x1F9A\x1F96"+
		"\x3\x2\x2\x2\x1F9A\x1F98\x3\x2\x2\x2\x1F9B\x1F9D\x3\x2\x2\x2\x1F9C\x1F9E"+
		"\a\x486\x2\x2\x1F9D\x1F9C\x3\x2\x2\x2\x1F9D\x1F9E\x3\x2\x2\x2\x1F9E\x261"+
		"\x3\x2\x2\x2\x1F9F\x1FA1\a\x2BB\x2\x2\x1FA0\x1F9F\x3\x2\x2\x2\x1FA0\x1FA1"+
		"\x3\x2\x2\x2\x1FA1\x1FA2\x3\x2\x2\x2\x1FA2\x1FA4\x5\x3A6\x1D4\x2\x1FA3"+
		"\x1FA0\x3\x2\x2\x2\x1FA3\x1FA4\x3\x2\x2\x2\x1FA4\x1FA5\x3\x2\x2\x2\x1FA5"+
		"\x1FA6\a\x3EB\x2\x2\x1FA6\x1FA9\x5\x492\x24A\x2\x1FA7\x1FA8\a\x2BB\x2"+
		"\x2\x1FA8\x1FAA\x5\x3A6\x1D4\x2\x1FA9\x1FA7\x3\x2\x2\x2\x1FA9\x1FAA\x3"+
		"\x2\x2\x2\x1FAA\x1FAD\x3\x2\x2\x2\x1FAB\x1FAC\a\x438\x2\x2\x1FAC\x1FAE"+
		"\x5\x264\x133\x2\x1FAD\x1FAB\x3\x2\x2\x2\x1FAD\x1FAE\x3\x2\x2\x2\x1FAE"+
		"\x263\x3\x2\x2\x2\x1FAF\x1FB0\a\x431\x2\x2\x1FB0\x1FB1\a\x481\x2\x2\x1FB1"+
		"\x1FB2\a\x22C\x2\x2\x1FB2\x1FB3\a\x46F\x2\x2\x1FB3\x1FB5\x5\x1E8\xF5\x2"+
		"\x1FB4\x1FB6\a\x245\x2\x2\x1FB5\x1FB4\x3\x2\x2\x2\x1FB5\x1FB6\x3\x2\x2"+
		"\x2\x1FB6\x1FB7\x3\x2\x2\x2\x1FB7\x1FB8\a\x485\x2\x2\x1FB8\x1FB9\a\x4"+
		"\x2\x2\x1FB9\x1FBA\a\x46F\x2\x2\x1FBA\x1FBB\tR\x2\x2\x1FBB\x1FBC\a\x482"+
		"\x2\x2\x1FBC\x265\x3\x2\x2\x2\x1FBD\x1FBE\a%\x2\x2\x1FBE\x1FC1\a\xDE\x2"+
		"\x2\x1FBF\x1FC2\x5\x4D2\x26A\x2\x1FC0\x1FC2\a\xD1\x2\x2\x1FC1\x1FBF\x3"+
		"\x2\x2\x2\x1FC1\x1FC0\x3\x2\x2\x2\x1FC2\x1FD1\x3\x2\x2\x2\x1FC3\x1FC4"+
		"\a\x24F\x2\x2\x1FC4\x1FC5\a\x254\x2\x2\x1FC5\x1FC6\a\x46F\x2\x2\x1FC6"+
		"\x1FD2\x5\x4D2\x26A\x2\x1FC7\x1FC8\a\x9C\x2\x2\x1FC8\x1FD2\x5\x4D2\x26A"+
		"\x2\x1FC9\x1FCA\a\x386\x2\x2\x1FCA\x1FCD\x5\x270\x139\x2\x1FCB\x1FCC\a"+
		"\x438\x2\x2\x1FCC\x1FCE\x5\x2BC\x15F\x2\x1FCD\x1FCB\x3\x2\x2\x2\x1FCD"+
		"\x1FCE\x3\x2\x2\x2\x1FCE\x1FD2\x3\x2\x2\x2\x1FCF\x1FD2\x5\x268\x135\x2"+
		"\x1FD0\x1FD2\x5\x26C\x137\x2\x1FD1\x1FC3\x3\x2\x2\x2\x1FD1\x1FC7\x3\x2"+
		"\x2\x2\x1FD1\x1FC9\x3\x2\x2\x2\x1FD1\x1FCF\x3\x2\x2\x2\x1FD1\x1FD0\x3"+
		"\x2\x2\x2\x1FD2\x1FD4\x3\x2\x2\x2\x1FD3\x1FD5\a\x486\x2\x2\x1FD4\x1FD3"+
		"\x3\x2\x2\x2\x1FD4\x1FD5\x3\x2\x2\x2\x1FD5\x267\x3\x2\x2\x2\x1FD6\x1FD7"+
		"\a\r\x2\x2\x1FD7\x1FD8\a\x15C\x2\x2\x1FD8\x1FDD\x5\x26A\x136\x2\x1FD9"+
		"\x1FDA\a\x485\x2\x2\x1FDA\x1FDC\x5\x26A\x136\x2\x1FDB\x1FD9\x3\x2\x2\x2"+
		"\x1FDC\x1FDF\x3\x2\x2\x2\x1FDD\x1FDB\x3\x2\x2\x2\x1FDD\x1FDE\x3\x2\x2"+
		"\x2\x1FDE\x1FE3\x3\x2\x2\x2\x1FDF\x1FDD\x3\x2\x2\x2\x1FE0\x1FE1\a\x3EB"+
		"\x2\x2\x1FE1\x1FE2\a\x15D\x2\x2\x1FE2\x1FE4\x5\x4D2\x26A\x2\x1FE3\x1FE0"+
		"\x3\x2\x2\x2\x1FE3\x1FE4\x3\x2\x2\x2\x1FE4\x1FF7\x3\x2\x2\x2\x1FE5\x1FE6"+
		"\a\r\x2\x2\x1FE6\x1FE7\a\x215\x2\x2\x1FE7\x1FE8\a\x15C\x2\x2\x1FE8\x1FED"+
		"\x5\x26A\x136\x2\x1FE9\x1FEA\a\x485\x2\x2\x1FEA\x1FEC\x5\x26A\x136\x2"+
		"\x1FEB\x1FE9\x3\x2\x2\x2\x1FEC\x1FEF\x3\x2\x2\x2\x1FED\x1FEB\x3\x2\x2"+
		"\x2\x1FED\x1FEE\x3\x2\x2\x2\x1FEE\x1FF7\x3\x2\x2\x2\x1FEF\x1FED\x3\x2"+
		"\x2\x2\x1FF0\x1FF1\a\x31C\x2\x2\x1FF1\x1FF2\a\x15C\x2\x2\x1FF2\x1FF7\x5"+
		"\x4D2\x26A\x2\x1FF3\x1FF4\a\x24F\x2\x2\x1FF4\x1FF5\a\x15C\x2\x2\x1FF5"+
		"\x1FF7\x5\x26A\x136\x2\x1FF6\x1FD6\x3\x2\x2\x2\x1FF6\x1FE5\x3\x2\x2\x2"+
		"\x1FF6\x1FF0\x3\x2\x2\x2\x1FF6\x1FF3\x3\x2\x2\x2\x1FF7\x269\x3\x2\x2\x2"+
		"\x1FF8\x1FF9\a\x481\x2\x2\x1FF9\x1FFA\a\x254\x2\x2\x1FFA\x1FFB\a\x46F"+
		"\x2\x2\x1FFB\x2000\x5\x4D6\x26C\x2\x1FFC\x1FFD\a\x485\x2\x2\x1FFD\x1FFE"+
		"\a\x25A\x2\x2\x1FFE\x1FFF\a\x46F\x2\x2\x1FFF\x2001\x5\x4D6\x26C\x2\x2000"+
		"\x1FFC\x3\x2\x2\x2\x2000\x2001\x3\x2\x2\x2\x2001\x2006\x3\x2\x2\x2\x2002"+
		"\x2003\a\x485\x2\x2\x2003\x2004\a\x162\x2\x2\x2004\x2005\a\x46F\x2\x2"+
		"\x2005\x2007\a\x46B\x2\x2\x2006\x2002\x3\x2\x2\x2\x2006\x2007\x3\x2\x2"+
		"\x2\x2007\x200C\x3\x2\x2\x2\x2008\x2009\a\x485\x2\x2\x2009\x200A\a\x398"+
		"\x2\x2\x200A\x200B\a\x46F\x2\x2\x200B\x200D\x5\x4DC\x26F\x2\x200C\x2008"+
		"\x3\x2\x2\x2\x200C\x200D\x3\x2\x2\x2\x200D\x2013\x3\x2\x2\x2\x200E\x200F"+
		"\a\x485\x2\x2\x200F\x2010\a\x226\x2\x2\x2010\x2011\a\x46F\x2\x2\x2011"+
		"\x2014\x5\x4DC\x26F\x2\x2012\x2014\a\x40F\x2\x2\x2013\x200E\x3\x2\x2\x2"+
		"\x2013\x2012\x3\x2\x2\x2\x2013\x2014\x3\x2\x2\x2\x2014\x2019\x3\x2\x2"+
		"\x2\x2015\x2016\a\x485\x2\x2\x2016\x2017\a\x161\x2\x2\x2017\x2018\a\x46F"+
		"\x2\x2\x2018\x201A\x5\x4DC\x26F\x2\x2019\x2015\x3\x2\x2\x2\x2019\x201A"+
		"\x3\x2\x2\x2\x201A\x201D\x3\x2\x2\x2\x201B\x201C\a\x485\x2\x2\x201C\x201E"+
		"\a\x28F\x2\x2\x201D\x201B\x3\x2\x2\x2\x201D\x201E\x3\x2\x2\x2\x201E\x201F"+
		"\x3\x2\x2\x2\x201F\x2020\a\x482\x2\x2\x2020\x26B\x3\x2\x2\x2\x2021\x2022"+
		"\a\r\x2\x2\x2022\x2023\a\x15D\x2\x2\x2023\x2028\x5\x4D2\x26A\x2\x2024"+
		"\x2025\a\xB8\x2\x2\x2025\x2029\a\x166\x2\x2\x2026\x2027\a\xB8\x2\x2\x2027"+
		"\x2029\a\x23E\x2\x2\x2028\x2024\x3\x2\x2\x2\x2028\x2026\x3\x2\x2\x2\x2028"+
		"\x2029\x3\x2\x2\x2\x2029\x203A\x3\x2\x2\x2\x202A\x202B\a\x31C\x2\x2\x202B"+
		"\x202C\a\x15D\x2\x2\x202C\x203A\x5\x4D2\x26A\x2\x202D\x202E\a\x24F\x2"+
		"\x2\x202E\x202F\a\x15D\x2\x2\x202F\x2037\x5\x4D2\x26A\x2\x2030\x2038\x5"+
		"\x26E\x138\x2\x2031\x2038\a\xF9\x2\x2\x2032\x2033\a\x254\x2\x2\x2033\x2034"+
		"\a\x46F\x2\x2\x2034\x2038\x5\x4D2\x26A\x2\x2035\x2038\aI\x2\x2\x2036\x2038"+
		"\aH\x2\x2\x2037\x2030\x3\x2\x2\x2\x2037\x2031\x3\x2\x2\x2\x2037\x2032"+
		"\x3\x2\x2\x2\x2037\x2035\x3\x2\x2\x2\x2037\x2036\x3\x2\x2\x2\x2038\x203A"+
		"\x3\x2\x2\x2\x2039\x2021\x3\x2\x2\x2\x2039\x202A\x3\x2\x2\x2\x2039\x202D"+
		"\x3\x2\x2\x2\x203A\x26D\x3\x2\x2\x2\x203B\x203C\tS\x2\x2\x203C\x26F\x3"+
		"\x2\x2\x2\x203D\x2057\x5\x278\x13D\x2\x203E\x2057\x5\x27A\x13E\x2\x203F"+
		"\x2057\x5\x27E\x140\x2\x2040\x2057\x5\x280\x141\x2\x2041\x2057\x5\x284"+
		"\x143\x2\x2042\x2057\x5\x29E\x150\x2\x2043\x2057\x5\x2A0\x151\x2\x2044"+
		"\x2057\x5\x2A2\x152\x2\x2045\x2057\x5\x2A4\x153\x2\x2046\x2057\x5\x2A6"+
		"\x154\x2\x2047\x2057\x5\x2A8\x155\x2\x2048\x2057\x5\x2AA\x156\x2\x2049"+
		"\x204A\a\x166\x2\x2\x204A\x2057\x5\x482\x242\x2\x204B\x2057\x5\x2AC\x157"+
		"\x2\x204C\x2057\x5\x2AE\x158\x2\x204D\x2057\x5\x2B0\x159\x2\x204E\x2057"+
		"\x5\x272\x13A\x2\x204F\x2057\x5\x274\x13B\x2\x2050\x2057\x5\x2B2\x15A"+
		"\x2\x2051\x2057\x5\x2B4\x15B\x2\x2052\x2057\x5\x2B6\x15C\x2\x2053\x2057"+
		"\x5\x2B8\x15D\x2\x2054\x2057\x5\x2BA\x15E\x2\x2055\x2057\x5\x2BC\x15F"+
		"\x2\x2056\x203D\x3\x2\x2\x2\x2056\x203E\x3\x2\x2\x2\x2056\x203F\x3\x2"+
		"\x2\x2\x2056\x2040\x3\x2\x2\x2\x2056\x2041\x3\x2\x2\x2\x2056\x2042\x3"+
		"\x2\x2\x2\x2056\x2043\x3\x2\x2\x2\x2056\x2044\x3\x2\x2\x2\x2056\x2045"+
		"\x3\x2\x2\x2\x2056\x2046\x3\x2\x2\x2\x2056\x2047\x3\x2\x2\x2\x2056\x2048"+
		"\x3\x2\x2\x2\x2056\x2049\x3\x2\x2\x2\x2056\x204B\x3\x2\x2\x2\x2056\x204C"+
		"\x3\x2\x2\x2\x2056\x204D\x3\x2\x2\x2\x2056\x204E\x3\x2\x2\x2\x2056\x204F"+
		"\x3\x2\x2\x2\x2056\x2050\x3\x2\x2\x2\x2056\x2051\x3\x2\x2\x2\x2056\x2052"+
		"\x3\x2\x2\x2\x2056\x2053\x3\x2\x2\x2\x2056\x2054\x3\x2\x2\x2\x2056\x2055"+
		"\x3\x2\x2\x2\x2057\x271\x3\x2\x2\x2\x2058\x2059\a\x2F2\x2\x2\x2059\x205A"+
		"\a\x46F\x2\x2\x205A\x205B\x5\x4AA\x256\x2\x205B\x273\x3\x2\x2\x2\x205C"+
		"\x205D\a\x2F2\x2\x2\x205D\x205E\a\x481\x2\x2\x205E\x2063\x5\x276\x13C"+
		"\x2\x205F\x2060\a\x485\x2\x2\x2060\x2062\x5\x276\x13C\x2\x2061\x205F\x3"+
		"\x2\x2\x2\x2062\x2065\x3\x2\x2\x2\x2063\x2061\x3\x2\x2\x2\x2063\x2064"+
		"\x3\x2\x2\x2\x2064\x2066\x3\x2\x2\x2\x2065\x2063\x3\x2\x2\x2\x2066\x2067"+
		"\a\x482\x2\x2\x2067\x275\x3\x2\x2\x2\x2068\x2069\a\x2A0\x2\x2\x2069\x206A"+
		"\a\x46F\x2\x2\x206A\x2089\a\x30C\x2\x2\x206B\x206C\a\x96\x2\x2\x206C\x206D"+
		"\a\x46F\x2\x2\x206D\x206E\a\x481\x2\x2\x206E\x206F\a\x3AC\x2\x2\x206F"+
		"\x2070\a\x46F\x2\x2\x2070\x2071\a\x469\x2\x2\x2071\x2089\a\x482\x2\x2"+
		"\x2072\x2073\a\xE5\x2\x2\x2073\x2074\a\x46F\x2\x2\x2074\x2089\a\x469\x2"+
		"\x2\x2075\x2076\a\x1D6\x2\x2\x2076\x2077\a\x46F\x2\x2\x2077\x2089\a\x469"+
		"\x2\x2\x2078\x2079\a\x238\x2\x2\x2079\x207A\a\x46F\x2\x2\x207A\x2089\a"+
		"\x469\x2\x2\x207B\x207C\a\x2F0\x2\x2\x207C\x207D\a\x46F\x2\x2\x207D\x2089"+
		"\aG\x2\x2\x207E\x207F\a\x399\x2\x2\x207F\x2080\a\x46F\x2\x2\x2080\x2089"+
		"\aG\x2\x2\x2081\x2082\a\x233\x2\x2\x2082\x2083\a\x46F\x2\x2\x2083\x2089"+
		"\a\x469\x2\x2\x2084\x2085\a\x433\x2\x2\x2085\x2086\a\x46F\x2\x2\x2086"+
		"\x2089\a\x294\x2\x2\x2087\x2089\a\x28E\x2\x2\x2088\x2068\x3\x2\x2\x2\x2088"+
		"\x206B\x3\x2\x2\x2\x2088\x2072\x3\x2\x2\x2\x2088\x2075\x3\x2\x2\x2\x2088"+
		"\x2078\x3\x2\x2\x2\x2088\x207B\x3\x2\x2\x2\x2088\x207E\x3\x2\x2\x2\x2088"+
		"\x2081\x3\x2\x2\x2\x2088\x2084\x3\x2\x2\x2\x2088\x2087\x3\x2\x2\x2\x2089"+
		"\x277\x3\x2\x2\x2\x208A\x208B\aM\x2\x2\x208B\x209C\x5\x4AA\x256\x2\x208C"+
		"\x208D\aN\x2\x2\x208D\x209C\a\x28E\x2\x2\x208E\x2093\a\x294\x2\x2\x208F"+
		"\x2090\a\x1C6\x2\x2\x2090\x2091\a\x46F\x2\x2\x2091\x2094\a\x294\x2\x2"+
		"\x2092\x2094\a\x28E\x2\x2\x2093\x208F\x3\x2\x2\x2\x2093\x2092\x3\x2\x2"+
		"\x2\x2094\x209C\x3\x2\x2\x2\x2095\x2096\aP\x2\x2\x2096\x209C\x5\x4AA\x256"+
		"\x2\x2097\x2098\aQ\x2\x2\x2098\x209C\x5\x4AA\x256\x2\x2099\x209A\aR\x2"+
		"\x2\x209A\x209C\t\x13\x2\x2\x209B\x208A\x3\x2\x2\x2\x209B\x208C\x3\x2"+
		"\x2\x2\x209B\x208E\x3\x2\x2\x2\x209B\x2095\x3\x2\x2\x2\x209B\x2097\x3"+
		"\x2\x2\x2\x209B\x2099\x3\x2\x2\x2\x209C\x279\x3\x2\x2\x2\x209D\x209E\a"+
		"\x84\x2\x2\x209E\x20AE\a\x46F\x2\x2\x209F\x20AF\a\x28E\x2\x2\x20A0\x20AB"+
		"\a\x294\x2\x2\x20A1\x20A6\x5\x27C\x13F\x2\x20A2\x20A3\a\x485\x2\x2\x20A3"+
		"\x20A5\x5\x27C\x13F\x2\x20A4\x20A2\x3\x2\x2\x2\x20A5\x20A8\x3\x2\x2\x2"+
		"\x20A6\x20A4\x3\x2\x2\x2\x20A6\x20A7\x3\x2\x2\x2\x20A7\x20AA\x3\x2\x2"+
		"\x2\x20A8\x20A6\x3\x2\x2\x2\x20A9\x20A1\x3\x2\x2\x2\x20AA\x20AD\x3\x2"+
		"\x2\x2\x20AB\x20A9\x3\x2\x2\x2\x20AB\x20AC\x3\x2\x2\x2\x20AC\x20AF\x3"+
		"\x2\x2\x2\x20AD\x20AB\x3\x2\x2\x2\x20AE\x209F\x3\x2\x2\x2\x20AE\x20A0"+
		"\x3\x2\x2\x2\x20AF\x27B\x3\x2\x2\x2\x20B0\x20B1\aL\x2\x2\x20B1\x20B2\a"+
		"\x46F\x2\x2\x20B2\x20B8\x5\x4AA\x256\x2\x20B3\x20B4\a\x83\x2\x2\x20B4"+
		"\x20B5\a\x46F\x2\x2\x20B5\x20B6\a\x469\x2\x2\x20B6\x20B8\tT\x2\x2\x20B7"+
		"\x20B0\x3\x2\x2\x2\x20B7\x20B3\x3\x2\x2\x2\x20B8\x27D\x3\x2\x2\x2\x20B9"+
		"\x20BA\a\xB7\x2\x2\x20BA\x20BB\a\x46F\x2\x2\x20BB\x20BC\t@\x2\x2\x20BC"+
		"\x27F\x3\x2\x2\x2\x20BD\x20BE\a\xD9\x2\x2\x20BE\x20C2\x5\x4AA\x256\x2"+
		"\x20BF\x20C0\a\xDA\x2\x2\x20C0\x20C2\tU\x2\x2\x20C1\x20BD\x3\x2\x2\x2"+
		"\x20C1\x20BF\x3\x2\x2\x2\x20C2\x281\x3\x2\x2\x2\x20C3\x20C4\a%\x2\x2\x20C4"+
		"\x20C5\a\x131\x2\x2\x20C5\x20C8\x5\x4D2\x26A\x2\x20C6\x20C7\a\x46\x2\x2"+
		"\x20C7\x20C9\x5\x4D2\x26A\x2\x20C8\x20C6\x3\x2\x2\x2\x20C8\x20C9\x3\x2"+
		"\x2\x2\x20C9\x20D1\x3\x2\x2\x2\x20CA\x20CB\a\x3B2\x2\x2\x20CB\x20CF\a"+
		"\x46F\x2\x2\x20CC\x20D0\a\x3AF\x2\x2\x20CD\x20D0\a\x3C0\x2\x2\x20CE\x20D0"+
		"\a\x113\x2\x2\x20CF\x20CC\x3\x2\x2\x2\x20CF\x20CD\x3\x2\x2\x2\x20CF\x20CE"+
		"\x3\x2\x2\x2\x20D0\x20D2\x3\x2\x2\x2\x20D1\x20CA\x3\x2\x2\x2\x20D1\x20D2"+
		"\x3\x2\x2\x2\x20D2\x20D3\x3\x2\x2\x2\x20D3\x20D4\a:\x2\x2\x20D4\x20D5"+
		"\a\x3E1\x2\x2\x20D5\x20D6\a\x481\x2\x2\x20D6\x20D7\a\x20C\x2\x2\x20D7"+
		"\x20D8\a\x46F\x2\x2\x20D8\x20DD\a\x469\x2\x2\x20D9\x20DA\a\x485\x2\x2"+
		"\x20DA\x20DB\a\x20B\x2\x2\x20DB\x20DC\a\x46F\x2\x2\x20DC\x20DE\tV\x2\x2"+
		"\x20DD\x20D9\x3\x2\x2\x2\x20DD\x20DE\x3\x2\x2\x2\x20DE\x20DF\x3\x2\x2"+
		"\x2\x20DF\x214D\a\x482\x2\x2\x20E0\x214E\a\x401\x2\x2\x20E1\x20E2\a\x172"+
		"\x2\x2\x20E2\x20E3\a\x37E\x2\x2\x20E3\x20E4\a\x481\x2\x2\x20E4\x20E5\a"+
		"\x45\x2\x2\x20E5\x20F6\a\x46F\x2\x2\x20E6\x20E8\a\x437\x2\x2\x20E7\x20E9"+
		"\t \x2\x2\x20E8\x20E7\x3\x2\x2\x2\x20E8\x20E9\x3\x2\x2\x2\x20E9\x20EC"+
		"\x3\x2\x2\x2\x20EA\x20EB\a}\x2\x2\x20EB\x20ED\x5\x4D2\x26A\x2\x20EC\x20EA"+
		"\x3\x2\x2\x2\x20EC\x20ED\x3\x2\x2\x2\x20ED\x20F7\x3\x2\x2\x2\x20EE\x20EF"+
		"\a}\x2\x2\x20EF\x20F1\x5\x4D2\x26A\x2\x20F0\x20F2\a\x437\x2\x2\x20F1\x20F0"+
		"\x3\x2\x2\x2\x20F1\x20F2\x3\x2\x2\x2\x20F2\x20F4\x3\x2\x2\x2\x20F3\x20F5"+
		"\t \x2\x2\x20F4\x20F3\x3\x2\x2\x2\x20F4\x20F5\x3\x2\x2\x2\x20F5\x20F7"+
		"\x3\x2\x2\x2\x20F6\x20E6\x3\x2\x2\x2\x20F6\x20EE\x3\x2\x2\x2\x20F7\x2109"+
		"\x3\x2\x2\x2\x20F8\x20FA\a\x485\x2\x2\x20F9\x20F8\x3\x2\x2\x2\x20F9\x20FA"+
		"\x3\x2\x2\x2\x20FA\x20FB\x3\x2\x2\x2\x20FB\x20FC\a\x12E\x2\x2\x20FC\x20FD"+
		"\a\x46F\x2\x2\x20FD\x2107\t\x1F\x2\x2\x20FE\x2105\a\x17\x2\x2\x20FF\x2106"+
		"\a\x10\x2\x2\x2100\x2106\a\x2FF\x2\x2\x2101\x2102\a\x10\x2\x2\x2102\x2106"+
		"\a\x2FF\x2\x2\x2103\x2104\a\x2FF\x2\x2\x2104\x2106\a\x10\x2\x2\x2105\x20FF"+
		"\x3\x2\x2\x2\x2105\x2100\x3\x2\x2\x2\x2105\x2101\x3\x2\x2\x2\x2105\x2103"+
		"\x3\x2\x2\x2\x2106\x2108\x3\x2\x2\x2\x2107\x20FE\x3\x2\x2\x2\x2107\x2108"+
		"\x3\x2\x2\x2\x2108\x210A\x3\x2\x2\x2\x2109\x20F9\x3\x2\x2\x2\x2109\x210A"+
		"\x3\x2\x2\x2\x210A\x2111\x3\x2\x2\x2\x210B\x210D\a\x485\x2\x2\x210C\x210B"+
		"\x3\x2\x2\x2\x210C\x210D\x3\x2\x2\x2\x210D\x210E\x3\x2\x2\x2\x210E\x210F"+
		"\a\x242\x2\x2\x210F\x2110\a\x46F\x2\x2\x2110\x2112\t\x1D\x2\x2\x2111\x210C"+
		"\x3\x2\x2\x2\x2111\x2112\x3\x2\x2\x2\x2112\x2119\x3\x2\x2\x2\x2113\x2115"+
		"\a\x485\x2\x2\x2114\x2113\x3\x2\x2\x2\x2114\x2115\x3\x2\x2\x2\x2115\x2116"+
		"\x3\x2\x2\x2\x2116\x2117\a\x243\x2\x2\x2117\x2118\a\x46F\x2\x2\x2118\x211A"+
		"\a\x469\x2\x2\x2119\x2114\x3\x2\x2\x2\x2119\x211A\x3\x2\x2\x2\x211A\x211B"+
		"\x3\x2\x2\x2\x211B\x214E\a\x482\x2\x2\x211C\x211D\a\x172\x2\x2\x211D\x211E"+
		"\a\xE0\x2\x2\x211E\x211F\a\x481\x2\x2\x211F\x2120\a\x45\x2\x2\x2120\x2131"+
		"\a\x46F\x2\x2\x2121\x2123\a\x437\x2\x2\x2122\x2124\t \x2\x2\x2123\x2122"+
		"\x3\x2\x2\x2\x2123\x2124\x3\x2\x2\x2\x2124\x2127\x3\x2\x2\x2\x2125\x2126"+
		"\a}\x2\x2\x2126\x2128\x5\x4D2\x26A\x2\x2127\x2125\x3\x2\x2\x2\x2127\x2128"+
		"\x3\x2\x2\x2\x2128\x2132\x3\x2\x2\x2\x2129\x212A\a}\x2\x2\x212A\x212C"+
		"\x5\x4D2\x26A\x2\x212B\x212D\a\x437\x2\x2\x212C\x212B\x3\x2\x2\x2\x212C"+
		"\x212D\x3\x2\x2\x2\x212D\x212F\x3\x2\x2\x2\x212E\x2130\t \x2\x2\x212F"+
		"\x212E\x3\x2\x2\x2\x212F\x2130\x3\x2\x2\x2\x2130\x2132\x3\x2\x2\x2\x2131"+
		"\x2121\x3\x2\x2\x2\x2131\x2129\x3\x2\x2\x2\x2132\x2144\x3\x2\x2\x2\x2133"+
		"\x2135\a\x485\x2\x2\x2134\x2133\x3\x2\x2\x2\x2134\x2135\x3\x2\x2\x2\x2135"+
		"\x2136\x3\x2\x2\x2\x2136\x2137\a\x12E\x2\x2\x2137\x2138\a\x46F\x2\x2\x2138"+
		"\x2142\t\x1F\x2\x2\x2139\x2140\a\x17\x2\x2\x213A\x2141\a\x10\x2\x2\x213B"+
		"\x2141\a\x2FF\x2\x2\x213C\x213D\a\x10\x2\x2\x213D\x2141\a\x2FF\x2\x2\x213E"+
		"\x213F\a\x2FF\x2\x2\x213F\x2141\a\x10\x2\x2\x2140\x213A\x3\x2\x2\x2\x2140"+
		"\x213B\x3\x2\x2\x2\x2140\x213C\x3\x2\x2\x2\x2140\x213E\x3\x2\x2\x2\x2141"+
		"\x2143\x3\x2\x2\x2\x2142\x2139\x3\x2\x2\x2\x2142\x2143\x3\x2\x2\x2\x2143"+
		"\x2145\x3\x2\x2\x2\x2144\x2134\x3\x2\x2\x2\x2144\x2145\x3\x2\x2\x2\x2145"+
		"\x2147\x3\x2\x2\x2\x2146\x2148\a\x485\x2\x2\x2147\x2146\x3\x2\x2\x2\x2147"+
		"\x2148\x3\x2\x2\x2\x2148\x2149\x3\x2\x2\x2\x2149\x214A\a\x342\x2\x2\x214A"+
		"\x214B\a\x46F\x2\x2\x214B\x214C\t\x1E\x2\x2\x214C\x214E\a\x482\x2\x2\x214D"+
		"\x20E0\x3\x2\x2\x2\x214D\x20E1\x3\x2\x2\x2\x214D\x211C\x3\x2\x2\x2\x214E"+
		"\x283\x3\x2\x2\x2\x214F\x2150\x5\x286\x144\x2\x2150\x285\x3\x2\x2\x2\x2151"+
		"\x2152\x5\x288\x145\x2\x2152\x2153\x5\x28E\x148\x2\x2153\x2158\x3\x2\x2"+
		"\x2\x2154\x2155\x5\x28A\x146\x2\x2155\x2156\x5\x290\x149\x2\x2156\x2158"+
		"\x3\x2\x2\x2\x2157\x2151\x3\x2\x2\x2\x2157\x2154\x3\x2\x2\x2\x2158\x287"+
		"\x3\x2\x2\x2\x2159\x215A\a\x2BD\x2\x2\x215A\x289\x3\x2\x2\x2\x215B\x215C"+
		"\a\x43C\x2\x2\x215C\x28B\x3\x2\x2\x2\x215D\x215E\a\x46F\x2\x2\x215E\x28D"+
		"\x3\x2\x2\x2\x215F\x2160\x5\x28C\x147\x2\x2160\x2161\x5\x294\x14B\x2\x2161"+
		"\x216C\x3\x2\x2\x2\x2162\x216C\a\x152\x2\x2\x2163\x216C\a\x179\x2\x2\x2164"+
		"\x216C\a\x28E\x2\x2\x2165\x216C\a\x337\x2\x2\x2166\x2167\a\x356\x2\x2"+
		"\x2167\x216C\tW\x2\x2\x2168\x216C\a\x3D0\x2\x2\x2169\x216A\a\x3E8\x2\x2"+
		"\x216A\x216C\a\x469\x2\x2\x216B\x215F\x3\x2\x2\x2\x216B\x2162\x3\x2\x2"+
		"\x2\x216B\x2163\x3\x2\x2\x2\x216B\x2164\x3\x2\x2\x2\x216B\x2165\x3\x2"+
		"\x2\x2\x216B\x2166\x3\x2\x2\x2\x216B\x2168\x3\x2\x2\x2\x216B\x2169\x3"+
		"\x2\x2\x2\x216C\x28F\x3\x2\x2\x2\x216D\x216E\x5\x28C\x147\x2\x216E\x216F"+
		"\x5\x292\x14A\x2\x216F\x2172\x3\x2\x2\x2\x2170\x2172\a\x28E\x2\x2\x2171"+
		"\x216D\x3\x2\x2\x2\x2171\x2170\x3\x2\x2\x2\x2172\x291\x3\x2\x2\x2\x2173"+
		"\x2174\x5\x294\x14B\x2\x2174\x293\x3\x2\x2\x2\x2175\x2176\x5\x298\x14D"+
		"\x2\x2176\x2177\x5\x29C\x14F\x2\x2177\x2178\x5\x296\x14C\x2\x2178\x2179"+
		"\x5\x29A\x14E\x2\x2179\x295\x3\x2\x2\x2\x217A\x217B\a\x487\x2\x2\x217B"+
		"\x297\x3\x2\x2\x2\x217C\x217D\a\x3E1\x2\x2\x217D\x217E\a\x487\x2\x2\x217E"+
		"\x217F\a\x11D\x2\x2\x217F\x299\x3\x2\x2\x2\x2180\x2181\a\x469\x2\x2\x2181"+
		"\x29B\x3\x2\x2\x2\x2182\x2183\x5\x4D2\x26A\x2\x2183\x2184\a\x47C\x2\x2"+
		"\x2184\x2185\x5\x29C\x14F\x2\x2185\x218D\x3\x2\x2\x2\x2186\x2187\x5\x4D2"+
		"\x26A\x2\x2187\x2188\a\x47C\x2\x2\x2188\x218B\x3\x2\x2\x2\x2189\x218B"+
		"\x5\x4D2\x26A\x2\x218A\x2186\x3\x2\x2\x2\x218A\x2189\x3\x2\x2\x2\x218B"+
		"\x218D\x3\x2\x2\x2\x218C\x2182\x3\x2\x2\x2\x218C\x218A\x3\x2\x2\x2\x218D"+
		"\x29D\x3\x2\x2\x2\x218E\x218F\a\xEC\x2\x2\x218F\x2190\x5\x4AA\x256\x2"+
		"\x2190\x29F\x3\x2\x2\x2\x2191\x2192\a\x12E\x2\x2\x2192\x2193\x5\x4AA\x256"+
		"\x2\x2193\x2A1\x3\x2\x2\x2\x2194\x2195\tX\x2\x2\x2195\x2A3\x3\x2\x2\x2"+
		"\x2196\x2197\tY\x2\x2\x2197\x2A5\x3\x2\x2\x2\x2198\x2199\tZ\x2\x2\x2199"+
		"\x2A7\x3\x2\x2\x2\x219A\x219B\a\x101\x2\x2\x219B\x219C\a\x46F\x2\x2\x219C"+
		"\x219D\t[\x2\x2\x219D\x2A9\x3\x2\x2\x2\x219E\x219F\a\xF0\x2\x2\x219F\x21B8"+
		"\x5\x4AA\x256\x2\x21A0\x21A1\a\x3FD\x2\x2\x21A1\x21B8\x5\x4AA\x256\x2"+
		"\x21A2\x21A3\a\xFD\x2\x2\x21A3\x21A6\a\x46F\x2\x2\x21A4\x21A7\x5\x4D2"+
		"\x26A\x2\x21A5\x21A7\a\x46B\x2\x2\x21A6\x21A4\x3\x2\x2\x2\x21A6\x21A5"+
		"\x3\x2\x2\x2\x21A7\x21B8\x3\x2\x2\x2\x21A8\x21A9\a\xFC\x2\x2\x21A9\x21AC"+
		"\a\x46F\x2\x2\x21AA\x21AD\x5\x4D2\x26A\x2\x21AB\x21AD\a\x46B\x2\x2\x21AC"+
		"\x21AA\x3\x2\x2\x2\x21AC\x21AB\x3\x2\x2\x2\x21AD\x21B8\x3\x2\x2\x2\x21AE"+
		"\x21AF\a\x258\x2\x2\x21AF\x21B0\a\x46F\x2\x2\x21B0\x21B8\t\x13\x2\x2\x21B1"+
		"\x21B2\a\x3F6\x2\x2\x21B2\x21B3\a\x46F\x2\x2\x21B3\x21B8\t\x13\x2\x2\x21B4"+
		"\x21B5\a\x402\x2\x2\x21B5\x21B6\a\x46F\x2\x2\x21B6\x21B8\a\x469\x2\x2"+
		"\x21B7\x219E\x3\x2\x2\x2\x21B7\x21A0\x3\x2\x2\x2\x21B7\x21A2\x3\x2\x2"+
		"\x2\x21B7\x21A8\x3\x2\x2\x2\x21B7\x21AE\x3\x2\x2\x2\x21B7\x21B1\x3\x2"+
		"\x2\x2\x21B7\x21B4\x3\x2\x2\x2\x21B8\x2AB\x3\x2\x2\x2\x21B9\x21C2\a\x19F"+
		"\x2\x2\x21BA\x21BB\aS\x2\x2\x21BB\x21BC\a\x19B\x2\x2\x21BC\x21BD\a\x46F"+
		"\x2\x2\x21BD\x21C0\x5\x4D2\x26A\x2\x21BE\x21C0\a\x28E\x2\x2\x21BF\x21BA"+
		"\x3\x2\x2\x2\x21BF\x21BE\x3\x2\x2\x2\x21C0\x21C3\x3\x2\x2\x2\x21C1\x21C3"+
		"\t\\\x2\x2\x21C2\x21BF\x3\x2\x2\x2\x21C2\x21C1\x3\x2\x2\x2\x21C3\x2AD"+
		"\x3\x2\x2\x2\x21C4\x21C5\a\x24D\x2\x2\x21C5\x21C6\t\x13\x2\x2\x21C6\x2AF"+
		"\x3\x2\x2\x2\x21C7\x21C8\a\x2B5\x2\x2\x21C8\x21C9\t]\x2\x2\x21C9\x2B1"+
		"\x3\x2\x2\x2\x21CA\x21CB\a\x312\x2\x2\x21CB\x21D4\t^\x2\x2\x21CC\x21CD"+
		"\a\x3ED\x2\x2\x21CD\x21D4\x5\x4AA\x256\x2\x21CE\x21CF\a\a\x2\x2\x21CF"+
		"\x21D0\a\x46F\x2\x2\x21D0\x21D4\x5\x4AA\x256\x2\x21D1\x21D2\a\x2B3\x2"+
		"\x2\x21D2\x21D4\t_\x2\x2\x21D3\x21CA\x3\x2\x2\x2\x21D3\x21CC\x3\x2\x2"+
		"\x2\x21D3\x21CE\x3\x2\x2\x2\x21D3\x21D1\x3\x2\x2\x2\x21D4\x2B3\x3\x2\x2"+
		"\x2\x21D5\x21DC\a\x12B\x2\x2\x21D6\x21DC\a\x114\x2\x2\x21D7\x21DC\a\x25D"+
		"\x2\x2\x21D8\x21DC\a\x135\x2\x2\x21D9\x21DA\a\x1AC\x2\x2\x21DA\x21DC\x5"+
		"\x4AA\x256\x2\x21DB\x21D5\x3\x2\x2\x2\x21DB\x21D6\x3\x2\x2\x2\x21DB\x21D7"+
		"\x3\x2\x2\x2\x21DB\x21D8\x3\x2\x2\x2\x21DB\x21D9\x3\x2\x2\x2\x21DC\x2B5"+
		"\x3\x2\x2\x2\x21DD\x21DE\a \x2\x2\x21DE\x21E3\x5\x4AA\x256\x2\x21DF\x21E0"+
		"\a\x309\x2\x2\x21E0\x21E3\t\x13\x2\x2\x21E1\x21E3\t\x13\x2\x2\x21E2\x21DD"+
		"\x3\x2\x2\x2\x21E2\x21DF\x3\x2\x2\x2\x21E2\x21E1\x3\x2\x2\x2\x21E3\x2B7"+
		"\x3\x2\x2\x2\x21E4\x21E5\a+\x2\x2\x21E5\x21FA\x5\x4AA\x256\x2\x21E6\x21E7"+
		"\a*\x2\x2\x21E7\x21FA\x5\x4AA\x256\x2\x21E8\x21E9\a.\x2\x2\x21E9\x21FA"+
		"\x5\x4AA\x256\x2\x21EA\x21EB\a/\x2\x2\x21EB\x21FA\x5\x4AA\x256\x2\x21EC"+
		"\x21ED\a\x38\x2\x2\x21ED\x21FA\x5\x4AA\x256\x2\x21EE\x21EF\a\xA9\x2\x2"+
		"\x21EF\x21F0\a\x46F\x2\x2\x21F0\x21FA\a\x469\x2\x2\x21F1\x21F2\a\xB0\x2"+
		"\x2\x21F2\x21FA\x5\x4AA\x256\x2\x21F3\x21F4\a\x285\x2\x2\x21F4\x21FA\x5"+
		"\x4AA\x256\x2\x21F5\x21F6\a\x2F6\x2\x2\x21F6\x21FA\x5\x4AA\x256\x2\x21F7"+
		"\x21F8\a\x313\x2\x2\x21F8\x21FA\x5\x4AA\x256\x2\x21F9\x21E4\x3\x2\x2\x2"+
		"\x21F9\x21E6\x3\x2\x2\x2\x21F9\x21E8\x3\x2\x2\x2\x21F9\x21EA\x3\x2\x2"+
		"\x2\x21F9\x21EC\x3\x2\x2\x2\x21F9\x21EE\x3\x2\x2\x2\x21F9\x21F1\x3\x2"+
		"\x2\x2\x21F9\x21F3\x3\x2\x2\x2\x21F9\x21F5\x3\x2\x2\x2\x21F9\x21F7\x3"+
		"\x2\x2\x2\x21FA\x2B9\x3\x2\x2\x2\x21FB\x21FC\a\x3DF\x2\x2\x21FC\x21FD"+
		"\a\x46F\x2\x2\x21FD\x21FE\a\x469\x2\x2\x21FE\x21FF\t`\x2\x2\x21FF\x2BB"+
		"\x3\x2\x2\x2\x2200\x2201\a\x343\x2\x2\x2201\x2202\a\x15\x2\x2\x2202\x2207"+
		"\a\x469\x2\x2\x2203\x2204\a\x343\x2\x2\x2204\x2207\a\x1BE\x2\x2\x2205"+
		"\x2207\a\x27D\x2\x2\x2206\x2200\x3\x2\x2\x2\x2206\x2203\x3\x2\x2\x2\x2206"+
		"\x2205\x3\x2\x2\x2\x2207\x2BD\x3\x2\x2\x2\x2208\x2209\a\x11E\x2\x2\x2209"+
		"\x220C\a\x1C7\x2\x2\x220A\x220B\a\x1B7\x2\x2\x220B\x220D\a\x147\x2\x2"+
		"\x220C\x220A\x3\x2\x2\x2\x220C\x220D\x3\x2\x2\x2\x220D\x221E\x3\x2\x2"+
		"\x2\x220E\x2213\x5\x2C0\x161\x2\x220F\x2210\a\x485\x2\x2\x2210\x2212\x5"+
		"\x2C0\x161\x2\x2211\x220F\x3\x2\x2\x2\x2212\x2215\x3\x2\x2\x2\x2213\x2211"+
		"\x3\x2\x2\x2\x2213\x2214\x3\x2\x2\x2\x2214\x221F\x3\x2\x2\x2\x2215\x2213"+
		"\x3\x2\x2\x2\x2216\x221B\x5\x2C2\x162\x2\x2217\x2218\a\x485\x2\x2\x2218"+
		"\x221A\x5\x2C2\x162\x2\x2219\x2217\x3\x2\x2\x2\x221A\x221D\x3\x2\x2\x2"+
		"\x221B\x2219\x3\x2\x2\x2\x221B\x221C\x3\x2\x2\x2\x221C\x221F\x3\x2\x2"+
		"\x2\x221D\x221B\x3\x2\x2\x2\x221E\x220E\x3\x2\x2\x2\x221E\x2216\x3\x2"+
		"\x2\x2\x221F\x2221\x3\x2\x2\x2\x2220\x2222\a\x486\x2\x2\x2221\x2220\x3"+
		"\x2\x2\x2\x2221\x2222\x3\x2\x2\x2\x2222\x2BF\x3\x2\x2\x2\x2223\x2224\x5"+
		"\x4D2\x26A\x2\x2224\x2225\a\x294\x2\x2\x2225\x2226\x5\x490\x249\x2\x2226"+
		"\x2C1\x3\x2\x2\x2\x2227\x2228\x5\x4D2\x26A\x2\x2228\x2229\a\x47C\x2\x2"+
		"\x2229\x222B\x3\x2\x2\x2\x222A\x2227\x3\x2\x2\x2\x222A\x222B\x3\x2\x2"+
		"\x2\x222B\x222C\x3\x2\x2\x2\x222C\x222D\x5\x4D2\x26A\x2\x222D\x222E\a"+
		"\x47C\x2\x2\x222E\x222F\x5\x4D2\x26A\x2\x222F\x2C3\x3\x2\x2\x2\x2230\x2231"+
		"\a\x11E\x2\x2\x2231\x2234\t\x46\x2\x2\x2232\x2233\a\x1B7\x2\x2\x2233\x2235"+
		"\a\x147\x2\x2\x2234\x2232\x3\x2\x2\x2\x2234\x2235\x3\x2\x2\x2\x2235\x2236"+
		"\x3\x2\x2\x2\x2236\x223B\x5\x496\x24C\x2\x2237\x2238\a\x485\x2\x2\x2238"+
		"\x223A\x5\x496\x24C\x2\x2239\x2237\x3\x2\x2\x2\x223A\x223D\x3\x2\x2\x2"+
		"\x223B\x2239\x3\x2\x2\x2\x223B\x223C\x3\x2\x2\x2\x223C\x223F\x3\x2\x2"+
		"\x2\x223D\x223B\x3\x2\x2\x2\x223E\x2240\a\x486\x2\x2\x223F\x223E\x3\x2"+
		"\x2\x2\x223F\x2240\x3\x2\x2\x2\x2240\x2C5\x3\x2\x2\x2\x2241\x2244\x5\x2C8"+
		"\x165\x2\x2242\x2244\x5\x2CA\x166\x2\x2243\x2241\x3\x2\x2\x2\x2243\x2242"+
		"\x3\x2\x2\x2\x2244\x2C7\x3\x2\x2\x2\x2245\x2246\a\x11E\x2\x2\x2246\x2249"+
		"\a\x3F8\x2\x2\x2247\x2248\a\x1B7\x2\x2\x2248\x224A\a\x147\x2\x2\x2249"+
		"\x2247\x3\x2\x2\x2\x2249\x224A\x3\x2\x2\x2\x224A\x224B\x3\x2\x2\x2\x224B"+
		"\x2250\x5\x494\x24B\x2\x224C\x224D\a\x485\x2\x2\x224D\x224F\x5\x494\x24B"+
		"\x2\x224E\x224C\x3\x2\x2\x2\x224F\x2252\x3\x2\x2\x2\x2250\x224E\x3\x2"+
		"\x2\x2\x2250\x2251\x3\x2\x2\x2\x2251\x2254\x3\x2\x2\x2\x2252\x2250\x3"+
		"\x2\x2\x2\x2253\x2255\a\x486\x2\x2\x2254\x2253\x3\x2\x2\x2\x2254\x2255"+
		"\x3\x2\x2\x2\x2255\x2C9\x3\x2\x2\x2\x2256\x2257\a\x11E\x2\x2\x2257\x225A"+
		"\a\x3F8\x2\x2\x2258\x2259\a\x1B7\x2\x2\x2259\x225B\a\x147\x2\x2\x225A"+
		"\x2258\x3\x2\x2\x2\x225A\x225B\x3\x2\x2\x2\x225B\x225C\x3\x2\x2\x2\x225C"+
		"\x2261\x5\x494\x24B\x2\x225D\x225E\a\x485\x2\x2\x225E\x2260\x5\x494\x24B"+
		"\x2\x225F\x225D\x3\x2\x2\x2\x2260\x2263\x3\x2\x2\x2\x2261\x225F\x3\x2"+
		"\x2\x2\x2261\x2262\x3\x2\x2\x2\x2262\x2264\x3\x2\x2\x2\x2263\x2261\x3"+
		"\x2\x2\x2\x2264\x2268\a\x294\x2\x2\x2265\x2269\a\xDE\x2\x2\x2266\x2267"+
		"\a\x18\x2\x2\x2267\x2269\a\x37A\x2\x2\x2268\x2265\x3\x2\x2\x2\x2268\x2266"+
		"\x3\x2\x2\x2\x2269\x226B\x3\x2\x2\x2\x226A\x226C\a\x486\x2\x2\x226B\x226A"+
		"\x3\x2\x2\x2\x226B\x226C\x3\x2\x2\x2\x226C\x2CB\x3\x2\x2\x2\x226D\x226E"+
		"\a\x11E\x2\x2\x226E\x2271\a\x187\x2\x2\x226F\x2270\a\x1B7\x2\x2\x2270"+
		"\x2272\a\x147\x2\x2\x2271\x226F\x3\x2\x2\x2\x2271\x2272\x3\x2\x2\x2\x2272"+
		"\x2273\x3\x2\x2\x2\x2273\x2278\x5\x496\x24C\x2\x2274\x2275\a\x485\x2\x2"+
		"\x2275\x2277\x5\x496\x24C\x2\x2276\x2274\x3\x2\x2\x2\x2277\x227A\x3\x2"+
		"\x2\x2\x2278\x2276\x3\x2\x2\x2\x2278\x2279\x3\x2\x2\x2\x2279\x227C\x3"+
		"\x2\x2\x2\x227A\x2278\x3\x2\x2\x2\x227B\x227D\a\x486\x2\x2\x227C\x227B"+
		"\x3\x2\x2\x2\x227C\x227D\x3\x2\x2\x2\x227D\x2CD\x3\x2\x2\x2\x227E\x227F"+
		"\a\x11E\x2\x2\x227F\x2289\a\x3B4\x2\x2\x2280\x2282\a\x485\x2\x2\x2281"+
		"\x2280\x3\x2\x2\x2\x2281\x2282\x3\x2\x2\x2\x2282\x2286\x3\x2\x2\x2\x2283"+
		"\x2284\x5\x492\x24A\x2\x2284\x2285\a\x47C\x2\x2\x2285\x2287\x3\x2\x2\x2"+
		"\x2286\x2283\x3\x2\x2\x2\x2286\x2287\x3\x2\x2\x2\x2287\x2288\x3\x2\x2"+
		"\x2\x2288\x228A\x5\x4D2\x26A\x2\x2289\x2281\x3\x2\x2\x2\x228A\x228B\x3"+
		"\x2\x2\x2\x228B\x2289\x3\x2\x2\x2\x228B\x228C\x3\x2\x2\x2\x228C\x228D"+
		"\x3\x2\x2\x2\x228D\x228E\a\x486\x2\x2\x228E\x2CF\x3\x2\x2\x2\x228F\x2290"+
		"\a\x11E\x2\x2\x2290\x2293\a\x3D7\x2\x2\x2291\x2292\a\x1B7\x2\x2\x2292"+
		"\x2294\a\x147\x2\x2\x2293\x2291\x3\x2\x2\x2\x2293\x2294\x3\x2\x2\x2\x2294"+
		"\x2295\x3\x2\x2\x2\x2295\x229A\x5\x492\x24A\x2\x2296\x2297\a\x485\x2\x2"+
		"\x2297\x2299\x5\x492\x24A\x2\x2298\x2296\x3\x2\x2\x2\x2299\x229C\x3\x2"+
		"\x2\x2\x229A\x2298\x3\x2\x2\x2\x229A\x229B\x3\x2\x2\x2\x229B\x229E\x3"+
		"\x2\x2\x2\x229C\x229A\x3\x2\x2\x2\x229D\x229F\a\x486\x2\x2\x229E\x229D"+
		"\x3\x2\x2\x2\x229E\x229F\x3\x2\x2\x2\x229F\x2D1\x3\x2\x2\x2\x22A0\x22A1"+
		"\a\x11E\x2\x2\x22A1\x22A4\a\x42B\x2\x2\x22A2\x22A3\a\x1B7\x2\x2\x22A3"+
		"\x22A5\a\x147\x2\x2\x22A4\x22A2\x3\x2\x2\x2\x22A4\x22A5\x3\x2\x2\x2\x22A5"+
		"\x22A6\x3\x2\x2\x2\x22A6\x22AB\x5\x494\x24B\x2\x22A7\x22A8\a\x485\x2\x2"+
		"\x22A8\x22AA\x5\x494\x24B\x2\x22A9\x22A7\x3\x2\x2\x2\x22AA\x22AD\x3\x2"+
		"\x2\x2\x22AB\x22A9\x3\x2\x2\x2\x22AB\x22AC\x3\x2\x2\x2\x22AC\x22AF\x3"+
		"\x2\x2\x2\x22AD\x22AB\x3\x2\x2\x2\x22AE\x22B0\a\x486\x2\x2\x22AF\x22AE"+
		"\x3\x2\x2\x2\x22AF\x22B0\x3\x2\x2\x2\x22B0\x2D3\x3\x2\x2\x2\x22B1\x22B2"+
		"\a\xCA\x2\x2\x22B2\x22B3\a\x403\x2\x2\x22B3\x22BB\x5\x494\x24B\x2\x22B4"+
		"\x22B5\a\x181\x2\x2\x22B5\x22B9\x5\x4C6\x264\x2\x22B6\x22BA\x5\x4C8\x265"+
		"\x2\x22B7\x22B8\a\x271\x2\x2\x22B8\x22BA\a\x281\x2\x2\x22B9\x22B6\x3\x2"+
		"\x2\x2\x22B9\x22B7\x3\x2\x2\x2\x22BA\x22BC\x3\x2\x2\x2\x22BB\x22B4\x3"+
		"\x2\x2\x2\x22BB\x22BC\x3\x2\x2\x2\x22BC\x22C3\x3\x2\x2\x2\x22BD\x22BE"+
		"\a:\x2\x2\x22BE\x22BF\a\x3D7\x2\x2\x22BF\x22C0\a\x481\x2\x2\x22C0\x22C1"+
		"\x5\x36E\x1B8\x2\x22C1\x22C2\a\x482\x2\x2\x22C2\x22C4\x3\x2\x2\x2\x22C3"+
		"\x22BD\x3\x2\x2\x2\x22C3\x22C4\x3\x2\x2\x2\x22C4\x2D5\x3\x2\x2\x2\x22C5"+
		"\x22C6\a\x11E\x2\x2\x22C6\x22C9\a\x403\x2\x2\x22C7\x22C8\a\x1B7\x2\x2"+
		"\x22C8\x22CA\a\x147\x2\x2\x22C9\x22C7\x3\x2\x2\x2\x22C9\x22CA\x3\x2\x2"+
		"\x2\x22CA\x22CB\x3\x2\x2\x2\x22CB\x22CC\x5\x494\x24B\x2\x22CC\x2D7\x3"+
		"\x2\x2\x2\x22CD\x22D0\x5\x2DA\x16E\x2\x22CE\x22D0\x5\x2DC\x16F\x2\x22CF"+
		"\x22CD\x3\x2\x2\x2\x22CF\x22CE\x3\x2\x2\x2\x22D0\x2D9\x3\x2\x2\x2\x22D1"+
		"\x22D2\a\x29B\x2\x2\x22D2\x22D3\a\x481\x2\x2\x22D3\x22D4\x5\x4D2\x26A"+
		"\x2\x22D4\x22D5\a\x485\x2\x2\x22D5\x22D6\a\x46B\x2\x2\x22D6\x22D7\a\x482"+
		"\x2\x2\x22D7\x2DB\x3\x2\x2\x2\x22D8\x22D9\a\x299\x2\x2\x22D9\x22DA\a\x481"+
		"\x2\x2\x22DA\x22DB\a\x46B\x2\x2\x22DB\x22DC\a\x485\x2\x2\x22DC\x22DD\a"+
		"\x46B\x2\x2\x22DD\x22DE\a\x482\x2\x2\x22DE\x22E0\a\x47C\x2\x2\x22DF\x22E1"+
		"\x5\x4D2\x26A\x2\x22E0\x22DF\x3\x2\x2\x2\x22E0\x22E1\x3\x2\x2\x2\x22E1"+
		"\x22E2\x3\x2\x2\x2\x22E2\x22E4\a\x47C\x2\x2\x22E3\x22E5\x5\x4D2\x26A\x2"+
		"\x22E4\x22E3\x3\x2\x2\x2\x22E4\x22E5\x3\x2\x2\x2\x22E5\x22E6\x3\x2\x2"+
		"\x2\x22E6\x22E7\a\x47C\x2\x2\x22E7\x22E8\x5\x4D2\x26A\x2\x22E8\x2DD\x3"+
		"\x2\x2\x2\x22E9\x22EA\a\xF6\x2\x2\x22EA\x22EC\a\x468\x2\x2\x22EB\x22ED"+
		"\a:\x2\x2\x22EC\x22EB\x3\x2\x2\x2\x22EC\x22ED\x3\x2\x2\x2\x22ED\x22F1"+
		"\x3\x2\x2\x2\x22EE\x22F2\x5\x4C6\x264\x2\x22EF\x22F2\x5\x366\x1B4\x2\x22F0"+
		"\x22F2\x5\x492\x24A\x2\x22F1\x22EE\x3\x2\x2\x2\x22F1\x22EF\x3\x2\x2\x2"+
		"\x22F1\x22F0\x3\x2\x2\x2\x22F2\x2310\x3\x2\x2\x2\x22F3\x22F4\a\xF6\x2"+
		"\x2\x22F4\x22F9\x5\x364\x1B3\x2\x22F5\x22F6\a\x485\x2\x2\x22F6\x22F8\x5"+
		"\x364\x1B3\x2\x22F7\x22F5\x3\x2\x2\x2\x22F8\x22FB\x3\x2\x2\x2\x22F9\x22F7"+
		"\x3\x2\x2\x2\x22F9\x22FA\x3\x2\x2\x2\x22FA\x2310\x3\x2\x2\x2\x22FB\x22F9"+
		"\x3\x2\x2\x2\x22FC\x22FD\a\xF6\x2\x2\x22FD\x22FF\a\x468\x2\x2\x22FE\x2300"+
		"\a:\x2\x2\x22FF\x22FE\x3\x2\x2\x2\x22FF\x2300\x3\x2\x2\x2\x2300\x2301"+
		"\x3\x2\x2\x2\x2301\x2310\x5\x36A\x1B6\x2\x2302\x2303\a\x438\x2\x2\x2303"+
		"\x2304\a\x445\x2\x2\x2304\x2305\a\x481\x2\x2\x2305\x230A\x5\x2E0\x171"+
		"\x2\x2306\x2307\a\x485\x2\x2\x2307\x2309\x5\x2E0\x171\x2\x2308\x2306\x3"+
		"\x2\x2\x2\x2309\x230C\x3\x2\x2\x2\x230A\x2308\x3\x2\x2\x2\x230A\x230B"+
		"\x3\x2\x2\x2\x230B\x230D\x3\x2\x2\x2\x230C\x230A\x3\x2\x2\x2\x230D\x230E"+
		"\a\x482\x2\x2\x230E\x2310\x3\x2\x2\x2\x230F\x22E9\x3\x2\x2\x2\x230F\x22F3"+
		"\x3\x2\x2\x2\x230F\x22FC\x3\x2\x2\x2\x230F\x2302\x3\x2\x2\x2\x2310\x2DF"+
		"\x3\x2\x2\x2\x2311\x2312\a\x46B\x2\x2\x2312\x2313\a:\x2\x2\x2313\x2317"+
		"\x5\x4D2\x26A\x2\x2314\x2315\a\xF9\x2\x2\x2315\x2317\a\x46B\x2\x2\x2316"+
		"\x2311\x3\x2\x2\x2\x2316\x2314\x3\x2\x2\x2\x2317\x2E1\x3\x2\x2\x2\x2318"+
		"\x231A\a\x98\x2\x2\x2319\x231B\a\x194\x2\x2\x231A\x2319\x3\x2\x2\x2\x231A"+
		"\x231B\x3\x2\x2\x2\x231B\x231C\x3\x2\x2\x2\x231C\x231E\x5\x4A8\x255\x2"+
		"\x231D\x231F\a\x486\x2\x2\x231E\x231D\x3\x2\x2\x2\x231E\x231F\x3\x2\x2"+
		"\x2\x231F\x2336\x3\x2\x2\x2\x2320\x2322\a\xF5\x2\x2\x2321\x2323\a\x194"+
		"\x2\x2\x2322\x2321\x3\x2\x2\x2\x2322\x2323\x3\x2\x2\x2\x2323\x2325\x3"+
		"\x2\x2\x2\x2324\x2326\a\xD8\x2\x2\x2325\x2324\x3\x2\x2\x2\x2325\x2326"+
		"\x3\x2\x2\x2\x2326\x2327\x3\x2\x2\x2\x2327\x2329\x5\x4A8\x255\x2\x2328"+
		"\x232A\a\x486\x2\x2\x2329\x2328\x3\x2\x2\x2\x2329\x232A\x3\x2\x2\x2\x232A"+
		"\x2336\x3\x2\x2\x2\x232B\x2336\x5\x398\x1CD\x2\x232C\x2336\x5\x39E\x1D0"+
		"\x2\x232D\x232F\a\x298\x2\x2\x232E\x2330\a\x194\x2\x2\x232F\x232E\x3\x2"+
		"\x2\x2\x232F\x2330\x3\x2\x2\x2\x2330\x2331\x3\x2\x2\x2\x2331\x2333\x5"+
		"\x4A8\x255\x2\x2332\x2334\a\x486\x2\x2\x2333\x2332\x3\x2\x2\x2\x2333\x2334"+
		"\x3\x2\x2\x2\x2334\x2336\x3\x2\x2\x2\x2335\x2318\x3\x2\x2\x2\x2335\x2320"+
		"\x3\x2\x2\x2\x2335\x232B\x3\x2\x2\x2\x2335\x232C\x3\x2\x2\x2\x2335\x232D"+
		"\x3\x2\x2\x2\x2336\x2E3\x3\x2\x2\x2\x2337\x2338\aW\x2\x2\x2338\x2339\a"+
		"\xDE\x2\x2\x2339\x2346\x5\x4D2\x26A\x2\x233A\x2343\a\x30D\x2\x2\x233B"+
		"\x233D\a\x485\x2\x2\x233C\x233B\x3\x2\x2\x2\x233C\x233D\x3\x2\x2\x2\x233D"+
		"\x233E\x3\x2\x2\x2\x233E\x233F\t\x61\x2\x2\x233F\x2340\a\x46F\x2\x2\x2340"+
		"\x2342\a\x46B\x2\x2\x2341\x233C\x3\x2\x2\x2\x2342\x2345\x3\x2\x2\x2\x2343"+
		"\x2341\x3\x2\x2\x2\x2343\x2344\x3\x2\x2\x2\x2344\x2347\x3\x2\x2\x2\x2345"+
		"\x2343\x3\x2\x2\x2\x2346\x233A\x3\x2\x2\x2\x2346\x2347\x3\x2\x2\x2\x2347"+
		"\x2350\x3\x2\x2\x2\x2348\x234A\a\x485\x2\x2\x2349\x2348\x3\x2\x2\x2\x2349"+
		"\x234A\x3\x2\x2\x2\x234A\x234B\x3\x2\x2\x2\x234B\x234C\t\x61\x2\x2\x234C"+
		"\x234D\a\x46F\x2\x2\x234D\x234F\a\x46B\x2\x2\x234E\x2349\x3\x2\x2\x2\x234F"+
		"\x2352\x3\x2\x2\x2\x2350\x234E\x3\x2\x2\x2\x2350\x2351\x3\x2\x2\x2\x2351"+
		"\x236A\x3\x2\x2\x2\x2352\x2350\x3\x2\x2\x2\x2353\x2358\a\x3EB\x2\x2\x2354"+
		"\x2356\a\x485\x2\x2\x2355\x2354\x3\x2\x2\x2\x2355\x2356\x3\x2\x2\x2\x2356"+
		"\x2357\x3\x2\x2\x2\x2357\x2359\x5\x4D2\x26A\x2\x2358\x2355\x3\x2\x2\x2"+
		"\x2359\x235A\x3\x2\x2\x2\x235A\x2358\x3\x2\x2\x2\x235A\x235B\x3\x2\x2"+
		"\x2\x235B\x236B\x3\x2\x2\x2\x235C\x2366\a\x3EB\x2\x2\x235D\x235F\a\x485"+
		"\x2\x2\x235E\x235D\x3\x2\x2\x2\x235E\x235F\x3\x2\x2\x2\x235F\x2360\x3"+
		"\x2\x2\x2\x2360\x2361\t\x62\x2\x2\x2361\x2364\a\x46F\x2\x2\x2362\x2365"+
		"\a\x46B\x2\x2\x2363\x2365\x5\x4D2\x26A\x2\x2364\x2362\x3\x2\x2\x2\x2364"+
		"\x2363\x3\x2\x2\x2\x2365\x2367\x3\x2\x2\x2\x2366\x235E\x3\x2\x2\x2\x2367"+
		"\x2368\x3\x2\x2\x2\x2368\x2366\x3\x2\x2\x2\x2368\x2369\x3\x2\x2\x2\x2369"+
		"\x236B\x3\x2\x2\x2\x236A\x2353\x3\x2\x2\x2\x236A\x235C\x3\x2\x2\x2\x236B"+
		"\x238D\x3\x2\x2\x2\x236C\x236D\a\x24B\x2\x2\x236D\x2372\a\x3EB\x2\x2\x236E"+
		"\x2370\a\x485\x2\x2\x236F\x236E\x3\x2\x2\x2\x236F\x2370\x3\x2\x2\x2\x2370"+
		"\x2371\x3\x2\x2\x2\x2371\x2373\x5\x4D2\x26A\x2\x2372\x236F\x3\x2\x2\x2"+
		"\x2373\x2374\x3\x2\x2\x2\x2374\x2372\x3\x2\x2\x2\x2374\x2375\x3\x2\x2"+
		"\x2\x2375\x2377\x3\x2\x2\x2\x2376\x236C\x3\x2\x2\x2\x2377\x2378\x3\x2"+
		"\x2\x2\x2378\x2376\x3\x2\x2\x2\x2378\x2379\x3\x2\x2\x2\x2379\x238E\x3"+
		"\x2\x2\x2\x237A\x237B\a\x24B\x2\x2\x237B\x2385\a\x3EB\x2\x2\x237C\x237E"+
		"\a\x485\x2\x2\x237D\x237C\x3\x2\x2\x2\x237D\x237E\x3\x2\x2\x2\x237E\x237F"+
		"\x3\x2\x2\x2\x237F\x2380\t\x62\x2\x2\x2380\x2383\a\x46F\x2\x2\x2381\x2384"+
		"\a\x46B\x2\x2\x2382\x2384\x5\x4D2\x26A\x2\x2383\x2381\x3\x2\x2\x2\x2383"+
		"\x2382\x3\x2\x2\x2\x2384\x2386\x3\x2\x2\x2\x2385\x237D\x3\x2\x2\x2\x2386"+
		"\x2387\x3\x2\x2\x2\x2387\x2385\x3\x2\x2\x2\x2387\x2388\x3\x2\x2\x2\x2388"+
		"\x238A\x3\x2\x2\x2\x2389\x237A\x3\x2\x2\x2\x238A\x238B\x3\x2\x2\x2\x238B"+
		"\x2389\x3\x2\x2\x2\x238B\x238C\x3\x2\x2\x2\x238C\x238E\x3\x2\x2\x2\x238D"+
		"\x2376\x3\x2\x2\x2\x238D\x2389\x3\x2\x2\x2\x238D\x238E\x3\x2\x2\x2\x238E"+
		"\x242F\x3\x2\x2\x2\x238F\x242C\a\x438\x2\x2\x2390\x2392\a\x485\x2\x2\x2391"+
		"\x2390\x3\x2\x2\x2\x2391\x2392\x3\x2\x2\x2\x2392\x2393\x3\x2\x2\x2\x2393"+
		"\x242B\a\x110\x2\x2\x2394\x2396\a\x485\x2\x2\x2395\x2394\x3\x2\x2\x2\x2395"+
		"\x2396\x3\x2\x2\x2\x2396\x2397\x3\x2\x2\x2\x2397\x242B\a\xC5\x2\x2\x2398"+
		"\x239A\a\x485\x2\x2\x2399\x2398\x3\x2\x2\x2\x2399\x239A\x3\x2\x2\x2\x239A"+
		"\x239B\x3\x2\x2\x2\x239B\x242B\t\x63\x2\x2\x239C\x239E\a\x485\x2\x2\x239D"+
		"\x239C\x3\x2\x2\x2\x239D\x239E\x3\x2\x2\x2\x239E\x239F\x3\x2\x2\x2\x239F"+
		"\x23A0\a\x109\x2\x2\x23A0\x23A3\a\x46F\x2\x2\x23A1\x23A4\a\x46B\x2\x2"+
		"\x23A2\x23A4\x5\x4D2\x26A\x2\x23A3\x23A1\x3\x2\x2\x2\x23A3\x23A2\x3\x2"+
		"\x2\x2\x23A4\x242B\x3\x2\x2\x2\x23A5\x23A7\a\x485\x2\x2\x23A6\x23A5\x3"+
		"\x2\x2\x2\x23A6\x23A7\x3\x2\x2\x2\x23A7\x23A8\x3\x2\x2\x2\x23A8\x23A9"+
		"\a\x254\x2\x2\x23A9\x23AA\a\x46F\x2\x2\x23AA\x242B\x5\x4D2\x26A\x2\x23AB"+
		"\x23AD\a\x485\x2\x2\x23AC\x23AB\x3\x2\x2\x2\x23AC\x23AD\x3\x2\x2\x2\x23AD"+
		"\x23AE\x3\x2\x2\x2\x23AE\x242B\a\xCD\x2\x2\x23AF\x23B1\a\x485\x2\x2\x23B0"+
		"\x23AF\x3\x2\x2\x2\x23B0\x23B1\x3\x2\x2\x2\x23B1\x23B2\x3\x2\x2\x2\x23B2"+
		"\x242B\a\x16B\x2\x2\x23B3\x23B5\a\x485\x2\x2\x23B4\x23B3\x3\x2\x2\x2\x23B4"+
		"\x23B5\x3\x2\x2\x2\x23B5\x23C2\x3\x2\x2\x2\x23B6\x23B7\a\x14B\x2\x2\x23B7"+
		"\x23BA\a\x46F\x2\x2\x23B8\x23BB\a\x46B\x2\x2\x23B9\x23BB\x5\x4D2\x26A"+
		"\x2\x23BA\x23B8\x3\x2\x2\x2\x23BA\x23B9\x3\x2\x2\x2\x23BB\x23C3\x3\x2"+
		"\x2\x2\x23BC\x23BD\a\x338\x2\x2\x23BD\x23C0\a\x46F\x2\x2\x23BE\x23C1\a"+
		"\x469\x2\x2\x23BF\x23C1\x5\x4D2\x26A\x2\x23C0\x23BE\x3\x2\x2\x2\x23C0"+
		"\x23BF\x3\x2\x2\x2\x23C1\x23C3\x3\x2\x2\x2\x23C2\x23B6\x3\x2\x2\x2\x23C2"+
		"\x23BC\x3\x2\x2\x2\x23C3\x242B\x3\x2\x2\x2\x23C4\x23C6\a\x485\x2\x2\x23C5"+
		"\x23C4\x3\x2\x2\x2\x23C5\x23C6\x3\x2\x2\x2\x23C6\x23C7\x3\x2\x2\x2\x23C7"+
		"\x242B\t\x64\x2\x2\x23C8\x23CA\a\x485\x2\x2\x23C9\x23C8\x3\x2\x2\x2\x23C9"+
		"\x23CA\x3\x2\x2\x2\x23CA\x23CB\x3\x2\x2\x2\x23CB\x242B\t\x65\x2\x2\x23CC"+
		"\x23CE\a\x485\x2\x2\x23CD\x23CC\x3\x2\x2\x2\x23CD\x23CE\x3\x2\x2\x2\x23CE"+
		"\x23CF\x3\x2\x2\x2\x23CF\x242B\t\x66\x2\x2\x23D0\x23D2\a\x485\x2\x2\x23D1"+
		"\x23D0\x3\x2\x2\x2\x23D1\x23D2\x3\x2\x2\x2\x23D2\x23D3\x3\x2\x2\x2\x23D3"+
		"\x23D4\a\x23A\x2\x2\x23D4\x23D7\a\x46F\x2\x2\x23D5\x23D8\a\x46B\x2\x2"+
		"\x23D6\x23D8\x5\x4D2\x26A\x2\x23D7\x23D5\x3\x2\x2\x2\x23D7\x23D6\x3\x2"+
		"\x2\x2\x23D8\x242B\x3\x2\x2\x2\x23D9\x23DB\a\x485\x2\x2\x23DA\x23D9\x3"+
		"\x2\x2\x2\x23DA\x23DB\x3\x2\x2\x2\x23DB\x23DC\x3\x2\x2\x2\x23DC\x23DD"+
		"\a\x23B\x2\x2\x23DD\x23DE\a\x46F\x2\x2\x23DE\x242B\a\x46B\x2\x2\x23DF"+
		"\x23E1\a\x485\x2\x2\x23E0\x23DF\x3\x2\x2\x2\x23E0\x23E1\x3\x2\x2\x2\x23E1"+
		"\x23E2\x3\x2\x2\x2\x23E2\x23E3\ah\x2\x2\x23E3\x23E6\a\x46F\x2\x2\x23E4"+
		"\x23E7\a\x469\x2\x2\x23E5\x23E7\x5\x4D2\x26A\x2\x23E6\x23E4\x3\x2\x2\x2"+
		"\x23E6\x23E5\x3\x2\x2\x2\x23E7\x242B\x3\x2\x2\x2\x23E8\x23EA\a\x485\x2"+
		"\x2\x23E9\x23E8\x3\x2\x2\x2\x23E9\x23EA\x3\x2\x2\x2\x23EA\x23EB\x3\x2"+
		"\x2\x2\x23EB\x23EC\an\x2\x2\x23EC\x23EF\a\x46F\x2\x2\x23ED\x23F0\a\x469"+
		"\x2\x2\x23EE\x23F0\x5\x4D2\x26A\x2\x23EF\x23ED\x3\x2\x2\x2\x23EF\x23EE"+
		"\x3\x2\x2\x2\x23F0\x242B\x3\x2\x2\x2\x23F1\x23F3\a\x485\x2\x2\x23F2\x23F1"+
		"\x3\x2\x2\x2\x23F2\x23F3\x3\x2\x2\x2\x23F3\x23F4\x3\x2\x2\x2\x23F4\x23F5"+
		"\a\x227\x2\x2\x23F5\x23F8\a\x46F\x2\x2\x23F6\x23F9\a\x469\x2\x2\x23F7"+
		"\x23F9\x5\x4D2\x26A\x2\x23F8\x23F6\x3\x2\x2\x2\x23F8\x23F7\x3\x2\x2\x2"+
		"\x23F9\x242B\x3\x2\x2\x2\x23FA\x23FC\a\x485\x2\x2\x23FB\x23FA\x3\x2\x2"+
		"\x2\x23FB\x23FC\x3\x2\x2\x2\x23FC\x23FD\x3\x2\x2\x2\x23FD\x242B\tg\x2"+
		"\x2\x23FE\x2400\a\x485\x2\x2\x23FF\x23FE\x3\x2\x2\x2\x23FF\x2400\x3\x2"+
		"\x2\x2\x2400\x2401\x3\x2\x2\x2\x2401\x242B\th\x2\x2\x2402\x2404\a\x485"+
		"\x2\x2\x2403\x2402\x3\x2\x2\x2\x2403\x2404\x3\x2\x2\x2\x2404\x2405\x3"+
		"\x2\x2\x2\x2405\x242B\a\x332\x2\x2\x2406\x2408\a\x485\x2\x2\x2407\x2406"+
		"\x3\x2\x2\x2\x2407\x2408\x3\x2\x2\x2\x2408\x2409\x3\x2\x2\x2\x2409\x240C"+
		"\a\x3B7\x2\x2\x240A\x240B\a\x46F\x2\x2\x240B\x240D\a\x469\x2\x2\x240C"+
		"\x240A\x3\x2\x2\x2\x240C\x240D\x3\x2\x2\x2\x240D\x242B\x3\x2\x2\x2\x240E"+
		"\x2410\a\x485\x2\x2\x240F\x240E\x3\x2\x2\x2\x240F\x2410\x3\x2\x2\x2\x2410"+
		"\x2411\x3\x2\x2\x2\x2411\x242B\ti\x2\x2\x2412\x2414\a\x485\x2\x2\x2413"+
		"\x2412\x3\x2\x2\x2\x2413\x2414\x3\x2\x2\x2\x2414\x2415\x3\x2\x2\x2\x2415"+
		"\x242B\tj\x2\x2\x2416\x2418\a\x485\x2\x2\x2417\x2416\x3\x2\x2\x2\x2417"+
		"\x2418\x3\x2\x2\x2\x2418\x2419\x3\x2\x2\x2\x2419\x241A\a\x12E\x2\x2\x241A"+
		"\x241B\a\x481\x2\x2\x241B\x241C\a\x17\x2\x2\x241C\x241D\a\x46F\x2\x2\x241D"+
		"\x241E\tk\x2\x2\x241E\x241F\a\x485\x2\x2\x241F\x2420\a\x37A\x2\x2\x2420"+
		"\x2421\a}\x2\x2\x2421\x2428\a\x46F\x2\x2\x2422\x2429\x5\x4D2\x26A\x2\x2423"+
		"\x2424\a\x37A\x2\x2\x2424\x2425\a?\x2\x2\x2425\x2426\a\x1F2\x2\x2\x2426"+
		"\x2427\a\x46F\x2\x2\x2427\x2429\x5\x4D2\x26A\x2\x2428\x2422\x3\x2\x2\x2"+
		"\x2428\x2423\x3\x2\x2\x2\x2429\x242B\x3\x2\x2\x2\x242A\x2391\x3\x2\x2"+
		"\x2\x242A\x2395\x3\x2\x2\x2\x242A\x2399\x3\x2\x2\x2\x242A\x239D\x3\x2"+
		"\x2\x2\x242A\x23A6\x3\x2\x2\x2\x242A\x23AC\x3\x2\x2\x2\x242A\x23B0\x3"+
		"\x2\x2\x2\x242A\x23B4\x3\x2\x2\x2\x242A\x23C5\x3\x2\x2\x2\x242A\x23C9"+
		"\x3\x2\x2\x2\x242A\x23CD\x3\x2\x2\x2\x242A\x23D1\x3\x2\x2\x2\x242A\x23DA"+
		"\x3\x2\x2\x2\x242A\x23E0\x3\x2\x2\x2\x242A\x23E9\x3\x2\x2\x2\x242A\x23F2"+
		"\x3\x2\x2\x2\x242A\x23FB\x3\x2\x2\x2\x242A\x23FF\x3\x2\x2\x2\x242A\x2403"+
		"\x3\x2\x2\x2\x242A\x2407\x3\x2\x2\x2\x242A\x240F\x3\x2\x2\x2\x242A\x2413"+
		"\x3\x2\x2\x2\x242A\x2417\x3\x2\x2\x2\x242B\x242E\x3\x2\x2\x2\x242C\x242A"+
		"\x3\x2\x2\x2\x242C\x242D\x3\x2\x2\x2\x242D\x2430\x3\x2\x2\x2\x242E\x242C"+
		"\x3\x2\x2\x2\x242F\x238F\x3\x2\x2\x2\x242F\x2430\x3\x2\x2\x2\x2430\x2E5"+
		"\x3\x2\x2\x2\x2431\x2432\aW\x2\x2\x2432\x2433\a\x215\x2\x2\x2433\x244B"+
		"\x5\x4D2\x26A\x2\x2434\x2439\a\x3EB\x2\x2\x2435\x2437\a\x485\x2\x2\x2436"+
		"\x2435\x3\x2\x2\x2\x2436\x2437\x3\x2\x2\x2\x2437\x2438\x3\x2\x2\x2\x2438"+
		"\x243A\x5\x4D2\x26A\x2\x2439\x2436\x3\x2\x2\x2\x243A\x243B\x3\x2\x2\x2"+
		"\x243B\x2439\x3\x2\x2\x2\x243B\x243C\x3\x2\x2\x2\x243C\x244C\x3\x2\x2"+
		"\x2\x243D\x2447\a\x3EB\x2\x2\x243E\x2440\a\x485\x2\x2\x243F\x243E\x3\x2"+
		"\x2\x2\x243F\x2440\x3\x2\x2\x2\x2440\x2441\x3\x2\x2\x2\x2441\x2442\t\x62"+
		"\x2\x2\x2442\x2445\a\x46F\x2\x2\x2443\x2446\a\x46B\x2\x2\x2444\x2446\x5"+
		"\x4D2\x26A\x2\x2445\x2443\x3\x2\x2\x2\x2445\x2444\x3\x2\x2\x2\x2446\x2448"+
		"\x3\x2\x2\x2\x2447\x243F\x3\x2\x2\x2\x2448\x2449\x3\x2\x2\x2\x2449\x2447"+
		"\x3\x2\x2\x2\x2449\x244A\x3\x2\x2\x2\x244A\x244C\x3\x2\x2\x2\x244B\x2434"+
		"\x3\x2\x2\x2\x244B\x243D\x3\x2\x2\x2\x244C\x246E\x3\x2\x2\x2\x244D\x244E"+
		"\a\x24B\x2\x2\x244E\x2453\a\x3EB\x2\x2\x244F\x2451\a\x485\x2\x2\x2450"+
		"\x244F\x3\x2\x2\x2\x2450\x2451\x3\x2\x2\x2\x2451\x2452\x3\x2\x2\x2\x2452"+
		"\x2454\x5\x4D2\x26A\x2\x2453\x2450\x3\x2\x2\x2\x2454\x2455\x3\x2\x2\x2"+
		"\x2455\x2453\x3\x2\x2\x2\x2455\x2456\x3\x2\x2\x2\x2456\x2458\x3\x2\x2"+
		"\x2\x2457\x244D\x3\x2\x2\x2\x2458\x2459\x3\x2\x2\x2\x2459\x2457\x3\x2"+
		"\x2\x2\x2459\x245A\x3\x2\x2\x2\x245A\x246F\x3\x2\x2\x2\x245B\x245C\a\x24B"+
		"\x2\x2\x245C\x2466\a\x3EB\x2\x2\x245D\x245F\a\x485\x2\x2\x245E\x245D\x3"+
		"\x2\x2\x2\x245E\x245F\x3\x2\x2\x2\x245F\x2460\x3\x2\x2\x2\x2460\x2461"+
		"\t\x62\x2\x2\x2461\x2464\a\x46F\x2\x2\x2462\x2465\a\x46B\x2\x2\x2463\x2465"+
		"\x5\x4D2\x26A\x2\x2464\x2462\x3\x2\x2\x2\x2464\x2463\x3\x2\x2\x2\x2465"+
		"\x2467\x3\x2\x2\x2\x2466\x245E\x3\x2\x2\x2\x2467\x2468\x3\x2\x2\x2\x2468"+
		"\x2466\x3\x2\x2\x2\x2468\x2469\x3\x2\x2\x2\x2469\x246B\x3\x2\x2\x2\x246A"+
		"\x245B\x3\x2\x2\x2\x246B\x246C\x3\x2\x2\x2\x246C\x246A\x3\x2\x2\x2\x246C"+
		"\x246D\x3\x2\x2\x2\x246D\x246F\x3\x2\x2\x2\x246E\x2457\x3\x2\x2\x2\x246E"+
		"\x246A\x3\x2\x2\x2\x246E\x246F\x3\x2\x2\x2\x246F\x251D\x3\x2\x2\x2\x2470"+
		"\x251A\a\x438\x2\x2\x2471\x2473\a\x485\x2\x2\x2472\x2471\x3\x2\x2\x2\x2472"+
		"\x2473\x3\x2\x2\x2\x2473\x2474\x3\x2\x2\x2\x2474\x2519\a\x110\x2\x2\x2475"+
		"\x2477\a\x485\x2\x2\x2476\x2475\x3\x2\x2\x2\x2476\x2477\x3\x2\x2\x2\x2477"+
		"\x2478\x3\x2\x2\x2\x2478\x2519\a\xC5\x2\x2\x2479\x247B\a\x485\x2\x2\x247A"+
		"\x2479\x3\x2\x2\x2\x247A\x247B\x3\x2\x2\x2\x247B\x247C\x3\x2\x2\x2\x247C"+
		"\x2519\t\x63\x2\x2\x247D\x247F\a\x485\x2\x2\x247E\x247D\x3\x2\x2\x2\x247E"+
		"\x247F\x3\x2\x2\x2\x247F\x2480\x3\x2\x2\x2\x2480\x2481\a\x109\x2\x2\x2481"+
		"\x2484\a\x46F\x2\x2\x2482\x2485\a\x46B\x2\x2\x2483\x2485\x5\x4D2\x26A"+
		"\x2\x2484\x2482\x3\x2\x2\x2\x2484\x2483\x3\x2\x2\x2\x2485\x2519\x3\x2"+
		"\x2\x2\x2486\x2488\a\x485\x2\x2\x2487\x2486\x3\x2\x2\x2\x2487\x2488\x3"+
		"\x2\x2\x2\x2488\x2489\x3\x2\x2\x2\x2489\x248A\a\x254\x2\x2\x248A\x248B"+
		"\a\x46F\x2\x2\x248B\x2519\x5\x4D2\x26A\x2\x248C\x248E\a\x485\x2\x2\x248D"+
		"\x248C\x3\x2\x2\x2\x248D\x248E\x3\x2\x2\x2\x248E\x248F\x3\x2\x2\x2\x248F"+
		"\x2519\a\xCD\x2\x2\x2490\x2492\a\x485\x2\x2\x2491\x2490\x3\x2\x2\x2\x2491"+
		"\x2492\x3\x2\x2\x2\x2492\x2493\x3\x2\x2\x2\x2493\x2519\a\x16B\x2\x2\x2494"+
		"\x2496\a\x485\x2\x2\x2495\x2494\x3\x2\x2\x2\x2495\x2496\x3\x2\x2\x2\x2496"+
		"\x24A3\x3\x2\x2\x2\x2497\x2498\a\x14B\x2\x2\x2498\x249B\a\x46F\x2\x2\x2499"+
		"\x249C\a\x46B\x2\x2\x249A\x249C\x5\x4D2\x26A\x2\x249B\x2499\x3\x2\x2\x2"+
		"\x249B\x249A\x3\x2\x2\x2\x249C\x24A4\x3\x2\x2\x2\x249D\x249E\a\x338\x2"+
		"\x2\x249E\x24A1\a\x46F\x2\x2\x249F\x24A2\a\x469\x2\x2\x24A0\x24A2\x5\x4D2"+
		"\x26A\x2\x24A1\x249F\x3\x2\x2\x2\x24A1\x24A0\x3\x2\x2\x2\x24A2\x24A4\x3"+
		"\x2\x2\x2\x24A3\x2497\x3\x2\x2\x2\x24A3\x249D\x3\x2\x2\x2\x24A4\x2519"+
		"\x3\x2\x2\x2\x24A5\x24A7\a\x485\x2\x2\x24A6\x24A5\x3\x2\x2\x2\x24A6\x24A7"+
		"\x3\x2\x2\x2\x24A7\x24A8\x3\x2\x2\x2\x24A8\x2519\t\x64\x2\x2\x24A9\x24AB"+
		"\a\x485\x2\x2\x24AA\x24A9\x3\x2\x2\x2\x24AA\x24AB\x3\x2\x2\x2\x24AB\x24AC"+
		"\x3\x2\x2\x2\x24AC\x2519\t\x65\x2\x2\x24AD\x24AF\a\x485\x2\x2\x24AE\x24AD"+
		"\x3\x2\x2\x2\x24AE\x24AF\x3\x2\x2\x2\x24AF\x24B0\x3\x2\x2\x2\x24B0\x2519"+
		"\t\x66\x2\x2\x24B1\x24B3\a\x485\x2\x2\x24B2\x24B1\x3\x2\x2\x2\x24B2\x24B3"+
		"\x3\x2\x2\x2\x24B3\x24B4\x3\x2\x2\x2\x24B4\x24B5\a\x23A\x2\x2\x24B5\x24B8"+
		"\a\x46F\x2\x2\x24B6\x24B9\a\x46B\x2\x2\x24B7\x24B9\x5\x4D2\x26A\x2\x24B8"+
		"\x24B6\x3\x2\x2\x2\x24B8\x24B7\x3\x2\x2\x2\x24B9\x2519\x3\x2\x2\x2\x24BA"+
		"\x24BC\a\x485\x2\x2\x24BB\x24BA\x3\x2\x2\x2\x24BB\x24BC\x3\x2\x2\x2\x24BC"+
		"\x24BD\x3\x2\x2\x2\x24BD\x24BE\a\x23B\x2\x2\x24BE\x24BF\a\x46F\x2\x2\x24BF"+
		"\x2519\a\x46B\x2\x2\x24C0\x24C2\a\x485\x2\x2\x24C1\x24C0\x3\x2\x2\x2\x24C1"+
		"\x24C2\x3\x2\x2\x2\x24C2\x24C3\x3\x2\x2\x2\x24C3\x24C4\ah\x2\x2\x24C4"+
		"\x24C7\a\x46F\x2\x2\x24C5\x24C8\a\x469\x2\x2\x24C6\x24C8\x5\x4D2\x26A"+
		"\x2\x24C7\x24C5\x3\x2\x2\x2\x24C7\x24C6\x3\x2\x2\x2\x24C8\x2519\x3\x2"+
		"\x2\x2\x24C9\x24CB\a\x485\x2\x2\x24CA\x24C9\x3\x2\x2\x2\x24CA\x24CB\x3"+
		"\x2\x2\x2\x24CB\x24CC\x3\x2\x2\x2\x24CC\x24CD\an\x2\x2\x24CD\x24D0\a\x46F"+
		"\x2\x2\x24CE\x24D1\a\x469\x2\x2\x24CF\x24D1\x5\x4D2\x26A\x2\x24D0\x24CE"+
		"\x3\x2\x2\x2\x24D0\x24CF\x3\x2\x2\x2\x24D1\x2519\x3\x2\x2\x2\x24D2\x24D4"+
		"\a\x485\x2\x2\x24D3\x24D2\x3\x2\x2\x2\x24D3\x24D4\x3\x2\x2\x2\x24D4\x24D5"+
		"\x3\x2\x2\x2\x24D5\x24D6\a\x227\x2\x2\x24D6\x24D9\a\x46F\x2\x2\x24D7\x24DA"+
		"\a\x469\x2\x2\x24D8\x24DA\x5\x4D2\x26A\x2\x24D9\x24D7\x3\x2\x2\x2\x24D9"+
		"\x24D8\x3\x2\x2\x2\x24DA\x2519\x3\x2\x2\x2\x24DB\x24DD\a\x485\x2\x2\x24DC"+
		"\x24DB\x3\x2\x2\x2\x24DC\x24DD\x3\x2\x2\x2\x24DD\x24DE\x3\x2\x2\x2\x24DE"+
		"\x2519\tg\x2\x2\x24DF\x24E1\a\x485\x2\x2\x24E0\x24DF\x3\x2\x2\x2\x24E0"+
		"\x24E1\x3\x2\x2\x2\x24E1\x24E2\x3\x2\x2\x2\x24E2\x2519\th\x2\x2\x24E3"+
		"\x24E5\a\x485\x2\x2\x24E4\x24E3\x3\x2\x2\x2\x24E4\x24E5\x3\x2\x2\x2\x24E5"+
		"\x24E6\x3\x2\x2\x2\x24E6\x2519\a\x332\x2\x2\x24E7\x24E9\a\x485\x2\x2\x24E8"+
		"\x24E7\x3\x2\x2\x2\x24E8\x24E9\x3\x2\x2\x2\x24E9\x24EA\x3\x2\x2\x2\x24EA"+
		"\x24ED\a\x3B7\x2\x2\x24EB\x24EC\a\x46F\x2\x2\x24EC\x24EE\a\x469\x2\x2"+
		"\x24ED\x24EB\x3\x2\x2\x2\x24ED\x24EE\x3\x2\x2\x2\x24EE\x2519\x3\x2\x2"+
		"\x2\x24EF\x24F1\a\x485\x2\x2\x24F0\x24EF\x3\x2\x2\x2\x24F0\x24F1\x3\x2"+
		"\x2\x2\x24F1\x24F2\x3\x2\x2\x2\x24F2\x2519\ti\x2\x2\x24F3\x24F5\a\x485"+
		"\x2\x2\x24F4\x24F3\x3\x2\x2\x2\x24F4\x24F5\x3\x2\x2\x2\x24F5\x24F6\x3"+
		"\x2\x2\x2\x24F6\x2519\tj\x2\x2\x24F7\x24F9\a\x485\x2\x2\x24F8\x24F7\x3"+
		"\x2\x2\x2\x24F8\x24F9\x3\x2\x2\x2\x24F9\x24FE\x3\x2\x2\x2\x24FA\x24FF"+
		"\a\x26E\x2\x2\x24FB\x24FC\a\x3AD\x2\x2\x24FC\x24FD\a\x46F\x2\x2\x24FD"+
		"\x24FF\a\x46B\x2\x2\x24FE\x24FA\x3\x2\x2\x2\x24FE\x24FB\x3\x2\x2\x2\x24FF"+
		"\x2519\x3\x2\x2\x2\x2500\x2502\a\x485\x2\x2\x2501\x2500\x3\x2\x2\x2\x2501"+
		"\x2502\x3\x2\x2\x2\x2502\x2503\x3\x2\x2\x2\x2503\x2519\a\x27C\x2\x2\x2504"+
		"\x2506\a\x485\x2\x2\x2505\x2504\x3\x2\x2\x2\x2505\x2506\x3\x2\x2\x2\x2506"+
		"\x2507\x3\x2\x2\x2\x2507\x2508\a\x12E\x2\x2\x2508\x2509\a\x481\x2\x2\x2509"+
		"\x250A\a\x17\x2\x2\x250A\x250B\a\x46F\x2\x2\x250B\x250C\tk\x2\x2\x250C"+
		"\x250D\a\x485\x2\x2\x250D\x250E\a\x37A\x2\x2\x250E\x250F\a}\x2\x2\x250F"+
		"\x2516\a\x46F\x2\x2\x2510\x2517\x5\x4D2\x26A\x2\x2511\x2512\a\x37A\x2"+
		"\x2\x2512\x2513\a?\x2\x2\x2513\x2514\a\x1F2\x2\x2\x2514\x2515\a\x46F\x2"+
		"\x2\x2515\x2517\x5\x4D2\x26A\x2\x2516\x2510\x3\x2\x2\x2\x2516\x2511\x3"+
		"\x2\x2\x2\x2517\x2519\x3\x2\x2\x2\x2518\x2472\x3\x2\x2\x2\x2518\x2476"+
		"\x3\x2\x2\x2\x2518\x247A\x3\x2\x2\x2\x2518\x247E\x3\x2\x2\x2\x2518\x2487"+
		"\x3\x2\x2\x2\x2518\x248D\x3\x2\x2\x2\x2518\x2491\x3\x2\x2\x2\x2518\x2495"+
		"\x3\x2\x2\x2\x2518\x24A6\x3\x2\x2\x2\x2518\x24AA\x3\x2\x2\x2\x2518\x24AE"+
		"\x3\x2\x2\x2\x2518\x24B2\x3\x2\x2\x2\x2518\x24BB\x3\x2\x2\x2\x2518\x24C1"+
		"\x3\x2\x2\x2\x2518\x24CA\x3\x2\x2\x2\x2518\x24D3\x3\x2\x2\x2\x2518\x24DC"+
		"\x3\x2\x2\x2\x2518\x24E0\x3\x2\x2\x2\x2518\x24E4\x3\x2\x2\x2\x2518\x24E8"+
		"\x3\x2\x2\x2\x2518\x24F0\x3\x2\x2\x2\x2518\x24F4\x3\x2\x2\x2\x2518\x24F8"+
		"\x3\x2\x2\x2\x2518\x2501\x3\x2\x2\x2\x2518\x2505\x3\x2\x2\x2\x2519\x251C"+
		"\x3\x2\x2\x2\x251A\x2518\x3\x2\x2\x2\x251A\x251B\x3\x2\x2\x2\x251B\x251E"+
		"\x3\x2\x2\x2\x251C\x251A\x3\x2\x2\x2\x251D\x2470\x3\x2\x2\x2\x251D\x251E"+
		"\x3\x2\x2\x2\x251E\x2E7\x3\x2\x2\x2\x251F\x2520\aW\x2\x2\x2520\x2521\a"+
		"}\x2\x2\x2521\x2522\x5\x4D2\x26A\x2\x2522\x2523\a\x3EB\x2\x2\x2523\x2524"+
		"\a\x15C\x2\x2\x2524\x2525\a\x46F\x2\x2\x2525\x2545\a\x46B\x2\x2\x2526"+
		"\x2527\a\x438\x2\x2\x2527\x2528\a\x2DF\x2\x2\x2528\x2529\a\x1F2\x2\x2"+
		"\x2529\x2540\a\x481\x2\x2\x252A\x252C\a\x485\x2\x2\x252B\x252A\x3\x2\x2"+
		"\x2\x252B\x252C\x3\x2\x2\x2\x252C\x252D\x3\x2\x2\x2\x252D\x252E\a\x15C"+
		"\x2\x2\x252E\x252F\a\x46F\x2\x2\x252F\x2541\a\x46B\x2\x2\x2530\x2532\a"+
		"\x485\x2\x2\x2531\x2530\x3\x2\x2\x2\x2531\x2532\x3\x2\x2\x2\x2532\x2533"+
		"\x3\x2\x2\x2\x2533\x2534\a\x12E\x2\x2\x2534\x2535\aq\x2\x2\x2535\x2536"+
		"\a\x2BE\x2\x2\x2536\x2537\a\x46F\x2\x2\x2537\x2541\a\x46B\x2\x2\x2538"+
		"\x253A\a\x485\x2\x2\x2539\x2538\x3\x2\x2\x2\x2539\x253A\x3\x2\x2\x2\x253A"+
		"\x253B\x3\x2\x2\x2\x253B\x253C\a\xF8\x2\x2\x253C\x253D\aq\x2\x2\x253D"+
		"\x253E\a\x2BE\x2\x2\x253E\x253F\a\x46F\x2\x2\x253F\x2541\a\x46B\x2\x2"+
		"\x2540\x252B\x3\x2\x2\x2\x2540\x2531\x3\x2\x2\x2\x2540\x2539\x3\x2\x2"+
		"\x2\x2541\x2542\x3\x2\x2\x2\x2542\x2540\x3\x2\x2\x2\x2542\x2543\x3\x2"+
		"\x2\x2\x2543\x2544\x3\x2\x2\x2\x2544\x2546\a\x482\x2\x2\x2545\x2526\x3"+
		"\x2\x2\x2\x2545\x2546\x3\x2\x2\x2\x2546\x2E9\x3\x2\x2\x2\x2547\x2548\a"+
		"W\x2\x2\x2548\x2549\a\x220\x2\x2\x2549\x254A\a\x1F2\x2\x2\x254A\x254B"+
		"\a\x3EB\x2\x2\x254B\x254C\a\x15C\x2\x2\x254C\x254D\a\x46F\x2\x2\x254D"+
		"\x254E\a\x46B\x2\x2\x254E\x254F\a\x12E\x2\x2\x254F\x2550\aq\x2\x2\x2550"+
		"\x2551\a\x2BE\x2\x2\x2551\x2552\a\x46F\x2\x2\x2552\x2553\a\x46B\x2\x2"+
		"\x2553\x2EB\x3\x2\x2\x2\x2554\x2555\aW\x2\x2\x2555\x2556\a\x37C\x2\x2"+
		"\x2556\x2557\a\x220\x2\x2\x2557\x2558\a\x1F2\x2\x2\x2558\x2559\a\x3EB"+
		"\x2\x2\x2559\x255A\a\x15C\x2\x2\x255A\x255B\a\x46F\x2\x2\x255B\x255C\a"+
		"\x46B\x2\x2\x255C\x255D\a\x12E\x2\x2\x255D\x255E\aq\x2\x2\x255E\x255F"+
		"\a\x2BE\x2\x2\x255F\x2560\a\x46F\x2\x2\x2560\x2561\a\x46B\x2\x2\x2561"+
		"\x2ED\x3\x2\x2\x2\x2562\x2566\a\x1F8\x2\x2\x2563\x2567\x5\x2F0\x179\x2"+
		"\x2564\x2567\x5\x2F2\x17A\x2\x2565\x2567\x5\x2F4\x17B\x2\x2566\x2563\x3"+
		"\x2\x2\x2\x2566\x2564\x3\x2\x2\x2\x2566\x2565\x3\x2\x2\x2\x2567\x2EF\x3"+
		"\x2\x2\x2\x2568\x256B\t!\x2\x2\x2569\x256B\a\x414\x2\x2\x256A\x2568\x3"+
		"\x2\x2\x2\x256A\x2569\x3\x2\x2\x2\x256B\x256E\x3\x2\x2\x2\x256C\x256D"+
		"\a\x438\x2\x2\x256D\x256F\a\x3BB\x2\x2\x256E\x256C\x3\x2\x2\x2\x256E\x256F"+
		"\x3\x2\x2\x2\x256F\x2F1\x3\x2\x2\x2\x2570\x2571\a\x2EF\x2\x2\x2571\x2572"+
		"\a\x272\x2\x2\x2572\x2575\a\x3C8\x2\x2\x2573\x2576\a\x18\x2\x2\x2574\x2576"+
		"\a\x469\x2\x2\x2575\x2573\x3\x2\x2\x2\x2575\x2574\x3\x2\x2\x2\x2576\x2F3"+
		"\x3\x2\x2\x2\x2577\x2578\a\x3B7\x2\x2\x2578\x2579\a\x1E3\x2\x2\x2579\x257A"+
		"\a\x469\x2\x2\x257A\x2F5\x3\x2\x2\x2\x257B\x257C\a\x145\x2\x2\x257C\x257E"+
		"\x5\x2FA\x17E\x2\x257D\x257F\a\x486\x2\x2\x257E\x257D\x3\x2\x2\x2\x257E"+
		"\x257F\x3\x2\x2\x2\x257F\x2F7\x3\x2\x2\x2\x2580\x2589\x5\x49A\x24E\x2"+
		"\x2581\x2586\x5\x2FC\x17F\x2\x2582\x2583\a\x485\x2\x2\x2583\x2585\x5\x2FC"+
		"\x17F\x2\x2584\x2582\x3\x2\x2\x2\x2585\x2588\x3\x2\x2\x2\x2586\x2584\x3"+
		"\x2\x2\x2\x2586\x2587\x3\x2\x2\x2\x2587\x258A\x3\x2\x2\x2\x2588\x2586"+
		"\x3\x2\x2\x2\x2589\x2581\x3\x2\x2\x2\x2589\x258A\x3\x2\x2\x2\x258A\x258C"+
		"\x3\x2\x2\x2\x258B\x258D\a\x486\x2\x2\x258C\x258B\x3\x2\x2\x2\x258C\x258D"+
		"\x3\x2\x2\x2\x258D\x2F9\x3\x2\x2\x2\x258E\x258F\a\x468\x2\x2\x258F\x2591"+
		"\a\x46F\x2\x2\x2590\x258E\x3\x2\x2\x2\x2590\x2591\x3\x2\x2\x2\x2591\x2594"+
		"\x3\x2\x2\x2\x2592\x2595\x5\x49A\x24E\x2\x2593\x2595\x5\x304\x183\x2\x2594"+
		"\x2592\x3\x2\x2\x2\x2594\x2593\x3\x2\x2\x2\x2595\x2597\x3\x2\x2\x2\x2596"+
		"\x2598\x5\x2FC\x17F\x2\x2597\x2596\x3\x2\x2\x2\x2597\x2598\x3\x2\x2\x2"+
		"\x2598\x25B0\x3\x2\x2\x2\x2599\x259A\a\x481\x2\x2\x259A\x259F\x5\x304"+
		"\x183\x2\x259B\x259C\a\x485\x2\x2\x259C\x259E\x5\x304\x183\x2\x259D\x259B"+
		"\x3\x2\x2\x2\x259E\x25A1\x3\x2\x2\x2\x259F\x259D\x3\x2\x2\x2\x259F\x25A0"+
		"\x3\x2\x2\x2\x25A0\x25A2\x3\x2\x2\x2\x25A1\x259F\x3\x2\x2\x2\x25A2\x25A9"+
		"\a\x482\x2\x2\x25A3\x25A5\a:\x2\x2\x25A4\x25A3\x3\x2\x2\x2\x25A4\x25A5"+
		"\x3\x2\x2\x2\x25A5\x25A6\x3\x2\x2\x2\x25A6\x25A7\tl\x2\x2\x25A7\x25A8"+
		"\a\x46F\x2\x2\x25A8\x25AA\a\x46B\x2\x2\x25A9\x25A4\x3\x2\x2\x2\x25A9\x25AA"+
		"\x3\x2\x2\x2\x25AA\x25AD\x3\x2\x2\x2\x25AB\x25AC\a\x41\x2\x2\x25AC\x25AE"+
		"\x5\x4D2\x26A\x2\x25AD\x25AB\x3\x2\x2\x2\x25AD\x25AE\x3\x2\x2\x2\x25AE"+
		"\x25B0\x3\x2\x2\x2\x25AF\x2590\x3\x2\x2\x2\x25AF\x2599\x3\x2\x2\x2\x25B0"+
		"\x2FB\x3\x2\x2\x2\x25B1\x25B6\x5\x300\x181\x2\x25B2\x25B3\a\x485\x2\x2"+
		"\x25B3\x25B5\x5\x2FC\x17F\x2\x25B4\x25B2\x3\x2\x2\x2\x25B5\x25B8\x3\x2"+
		"\x2\x2\x25B6\x25B4\x3\x2\x2\x2\x25B6\x25B7\x3\x2\x2\x2\x25B7\x25C2\x3"+
		"\x2\x2\x2\x25B8\x25B6\x3\x2\x2\x2\x25B9\x25BE\x5\x2FE\x180\x2\x25BA\x25BB"+
		"\a\x485\x2\x2\x25BB\x25BD\x5\x2FE\x180\x2\x25BC\x25BA\x3\x2\x2\x2\x25BD"+
		"\x25C0\x3\x2\x2\x2\x25BE\x25BC\x3\x2\x2\x2\x25BE\x25BF\x3\x2\x2\x2\x25BF"+
		"\x25C2\x3\x2\x2\x2\x25C0\x25BE\x3\x2\x2\x2\x25C1\x25B1\x3\x2\x2\x2\x25C1"+
		"\x25B9\x3\x2\x2\x2\x25C2\x2FD\x3\x2\x2\x2\x25C3\x25C4\a\x468\x2\x2\x25C4"+
		"\x25C5\a\x46F\x2\x2\x25C5\x25C6\x5\x302\x182\x2\x25C6\x2FF\x3\x2\x2\x2"+
		"\x25C7\x25C8\x5\x302\x182\x2\x25C8\x301\x3\x2\x2\x2\x25C9\x25D2\x5\x4CA"+
		"\x266\x2\x25CA\x25CC\a\x468\x2\x2\x25CB\x25CD\tm\x2\x2\x25CC\x25CB\x3"+
		"\x2\x2\x2\x25CC\x25CD\x3\x2\x2\x2\x25CD\x25D2\x3\x2\x2\x2\x25CE\x25D2"+
		"\x5\x4D2\x26A\x2\x25CF\x25D2\a\xF9\x2\x2\x25D0\x25D2\a\x281\x2\x2\x25D1"+
		"\x25C9\x3\x2\x2\x2\x25D1\x25CA\x3\x2\x2\x2\x25D1\x25CE\x3\x2\x2\x2\x25D1"+
		"\x25CF\x3\x2\x2\x2\x25D1\x25D0\x3\x2\x2\x2\x25D2\x303\x3\x2\x2\x2\x25D3"+
		"\x25D5\a\x468\x2\x2\x25D4\x25D6\tm\x2\x2\x25D5\x25D4\x3\x2\x2\x2\x25D5"+
		"\x25D6\x3\x2\x2\x2\x25D6\x25D9\x3\x2\x2\x2\x25D7\x25D9\a\x46B\x2\x2\x25D8"+
		"\x25D3\x3\x2\x2\x2\x25D8\x25D7\x3\x2\x2\x2\x25D9\x25DC\x3\x2\x2\x2\x25DA"+
		"\x25DB\a\x48C\x2\x2\x25DB\x25DD\x5\x304\x183\x2\x25DC\x25DA\x3\x2\x2\x2"+
		"\x25DC\x25DD\x3\x2\x2\x2\x25DD\x305\x3\x2\x2\x2\x25DE\x25E0\x5\x362\x1B2"+
		"\x2\x25DF\x25E1\a\x486\x2\x2\x25E0\x25DF\x3\x2\x2\x2\x25E0\x25E1\x3\x2"+
		"\x2\x2\x25E1\x261F\x3\x2\x2\x2\x25E2\x25EE\a\x199\x2\x2\x25E3\x25E5\a"+
		"\x18\x2\x2\x25E4\x25E6\a\x2E1\x2\x2\x25E5\x25E4\x3\x2\x2\x2\x25E5\x25E6"+
		"\x3\x2\x2\x2\x25E6\x25EF\x3\x2\x2\x2\x25E7\x25EC\x5\x322\x192\x2\x25E8"+
		"\x25E9\a\x481\x2\x2\x25E9\x25EA\x5\x4A6\x254\x2\x25EA\x25EB\a\x482\x2"+
		"\x2\x25EB\x25ED\x3\x2\x2\x2\x25EC\x25E8\x3\x2\x2\x2\x25EC\x25ED\x3\x2"+
		"\x2\x2\x25ED\x25EF\x3\x2\x2\x2\x25EE\x25E3\x3\x2\x2\x2\x25EE\x25E7\x3"+
		"\x2\x2\x2\x25EF\x25F7\x3\x2\x2\x2\x25F0\x25F4\a\x294\x2\x2\x25F1\x25F2"+
		"\x5\x9EP\x2\x25F2\x25F3\a\x488\x2\x2\x25F3\x25F5\x3\x2\x2\x2\x25F4\x25F1"+
		"\x3\x2\x2\x2\x25F4\x25F5\x3\x2\x2\x2\x25F5\x25F6\x3\x2\x2\x2\x25F6\x25F8"+
		"\x5\x492\x24A\x2\x25F7\x25F0\x3\x2\x2\x2\x25F7\x25F8\x3\x2\x2\x2\x25F8"+
		"\x25F9\x3\x2\x2\x2\x25F9\x25FA\a\x3EB\x2\x2\x25FA\x25FF\x5\x308\x185\x2"+
		"\x25FB\x25FC\a\x485\x2\x2\x25FC\x25FE\x5\x308\x185\x2\x25FD\x25FB\x3\x2"+
		"\x2\x2\x25FE\x2601\x3\x2\x2\x2\x25FF\x25FD\x3\x2\x2\x2\x25FF\x2600\x3"+
		"\x2\x2\x2\x2600\x2605\x3\x2\x2\x2\x2601\x25FF\x3\x2\x2\x2\x2602\x2603"+
		"\a\x438\x2\x2\x2603\x2604\a\x199\x2\x2\x2604\x2606\a\x2A4\x2\x2\x2605"+
		"\x2602\x3\x2\x2\x2\x2605\x2606\x3\x2\x2\x2\x2606\x2609\x3\x2\x2\x2\x2607"+
		"\x2608\a:\x2\x2\x2608\x260A\x5\x308\x185\x2\x2609\x2607\x3\x2\x2\x2\x2609"+
		"\x260A\x3\x2\x2\x2\x260A\x260C\x3\x2\x2\x2\x260B\x260D\a\x486\x2\x2\x260C"+
		"\x260B\x3\x2\x2\x2\x260C\x260D\x3\x2\x2\x2\x260D\x261F\x3\x2\x2\x2\x260E"+
		"\x2615\a\x33D\x2\x2\x260F\x2610\a\x481\x2\x2\x2610\x2611\a\x438\x2\x2"+
		"\x2611\x2612\a\xC4\x2\x2\x2612\x2613\a\x46F\x2\x2\x2613\x2614\a\x468\x2"+
		"\x2\x2614\x2616\a\x482\x2\x2\x2615\x260F\x3\x2\x2\x2\x2615\x2616\x3\x2"+
		"\x2\x2\x2616\x2618\x3\x2\x2\x2\x2617\x2619\a\x486\x2\x2\x2618\x2617\x3"+
		"\x2\x2\x2\x2618\x2619\x3\x2\x2\x2\x2619\x261F\x3\x2\x2\x2\x261A\x261F"+
		"\x5\x314\x18B\x2\x261B\x261F\x5\x316\x18C\x2\x261C\x261F\x5\x318\x18D"+
		"\x2\x261D\x261F\x5\x30A\x186\x2\x261E\x25DE\x3\x2\x2\x2\x261E\x25E2\x3"+
		"\x2\x2\x2\x261E\x260E\x3\x2\x2\x2\x261E\x261A\x3\x2\x2\x2\x261E\x261B"+
		"\x3\x2\x2\x2\x261E\x261C\x3\x2\x2\x2\x261E\x261D\x3\x2\x2\x2\x261F\x307"+
		"\x3\x2\x2\x2\x2620\x2623\x5\x4D2\x26A\x2\x2621\x2623\a\x2EB\x2\x2\x2622"+
		"\x2620\x3\x2\x2\x2\x2622\x2621\x3\x2\x2\x2\x2623\x309\x3\x2\x2\x2\x2624"+
		"\x2625\a\xCA\x2\x2\x2625\x2626\a}\x2\x2\x2626\x2629\x5\x4D2\x26A\x2\x2627"+
		"\x2628\a\x46\x2\x2\x2628\x262A\x5\x4D2\x26A\x2\x2629\x2627\x3\x2\x2\x2"+
		"\x2629\x262A\x3\x2\x2\x2\x262A\x262E\x3\x2\x2\x2\x262B\x262C\a\x181\x2"+
		"\x2\x262C\x262F\x5\x30C\x187\x2\x262D\x262F\x5\x310\x189\x2\x262E\x262B"+
		"\x3\x2\x2\x2\x262E\x262D\x3\x2\x2\x2\x262F\x2636\x3\x2\x2\x2\x2630\x2631"+
		"\a\f\x2\x2\x2631\x2632\a\x172\x2\x2\x2632\x2633\a\\\x2\x2\x2633\x2634"+
		"\a\x10E\x2\x2\x2634\x2635\a\x46F\x2\x2\x2635\x2637\x5\x4AA\x256\x2\x2636"+
		"\x2630\x3\x2\x2\x2\x2636\x2637\x3\x2\x2\x2\x2637\x30B\x3\x2\x2\x2\x2638"+
		"\x2639\a=\x2\x2\x2639\x264A\x5\x4D2\x26A\x2\x263A\x263C\a\x143\x2\x2\x263B"+
		"\x263A\x3\x2\x2\x2\x263B\x263C\x3\x2\x2\x2\x263C\x263D\x3\x2\x2\x2\x263D"+
		"\x263E\a\x15C\x2\x2\x263E\x263F\a\x46F\x2\x2\x263F\x2647\a\x46B\x2\x2"+
		"\x2640\x2641\a\x438\x2\x2\x2641\x2642\a\x2DF\x2\x2\x2642\x2643\a\x1F2"+
		"\x2\x2\x2643\x2644\a\x481\x2\x2\x2644\x2645\x5\x30E\x188\x2\x2645\x2646"+
		"\a\x482\x2\x2\x2646\x2648\x3\x2\x2\x2\x2647\x2640\x3\x2\x2\x2\x2647\x2648"+
		"\x3\x2\x2\x2\x2648\x264A\x3\x2\x2\x2\x2649\x2638\x3\x2\x2\x2\x2649\x263B"+
		"\x3\x2\x2\x2\x264A\x30D\x3\x2\x2\x2\x264B\x264C\tn\x2\x2\x264C\x264D\a"+
		"\x46F\x2\x2\x264D\x2654\a\x46B\x2\x2\x264E\x264F\a\x485\x2\x2\x264F\x2650"+
		"\to\x2\x2\x2650\x2651\aq\x2\x2\x2651\x2652\a\x2BE\x2\x2\x2652\x2653\a"+
		"\x46F\x2\x2\x2653\x2655\a\x46B\x2\x2\x2654\x264E\x3\x2\x2\x2\x2654\x2655"+
		"\x3\x2\x2\x2\x2655\x30F\x3\x2\x2\x2\x2656\x2657\a\x12E\x2\x2\x2657\x2658"+
		"\aq\x2\x2\x2658\x2659\a\x2BE\x2\x2\x2659\x265A\a\x46F\x2\x2\x265A\x265C"+
		"\a\x46B\x2\x2\x265B\x2656\x3\x2\x2\x2\x265B\x265C\x3\x2\x2\x2\x265C\x265D"+
		"\x3\x2\x2\x2\x265D\x265E\a\x438\x2\x2\x265E\x265F\a\x3C6\x2\x2\x265F\x2660"+
		"\a\x46F\x2\x2\x2660\x2665\a\x46B\x2\x2\x2661\x2662\a\x485\x2\x2\x2662"+
		"\x2664\x5\x312\x18A\x2\x2663\x2661\x3\x2\x2\x2\x2664\x2667\x3\x2\x2\x2"+
		"\x2665\x2663\x3\x2\x2\x2\x2665\x2666\x3\x2\x2\x2\x2666\x311\x3\x2\x2\x2"+
		"\x2667\x2665\x3\x2\x2\x2\x2668\x2669\tp\x2\x2\x2669\x266A\a\x46F\x2\x2"+
		"\x266A\x266B\a\x46B\x2\x2\x266B\x313\x3\x2\x2\x2\x266C\x266D\a\x298\x2"+
		"\x2\x266D\x266E\a\x3D2\x2\x2\x266E\x266F\a\x1F2\x2\x2\x266F\x2670\x5\x4D2"+
		"\x26A\x2\x2670\x2671\a\xF8\x2\x2\x2671\x2672\aq\x2\x2\x2672\x2673\x5\x320"+
		"\x191\x2\x2673\x267D\x3\x2\x2\x2\x2674\x2675\a\x298\x2\x2\x2675\x2676"+
		"\a\x220\x2\x2\x2676\x2677\a\x1F2\x2\x2\x2677\x2678\a\xF8\x2\x2\x2678\x2679"+
		"\aq\x2\x2\x2679\x267A\a\x2BE\x2\x2\x267A\x267B\a\x46F\x2\x2\x267B\x267D"+
		"\a\x46B\x2\x2\x267C\x266C\x3\x2\x2\x2\x267C\x2674\x3\x2\x2\x2\x267D\x315"+
		"\x3\x2\x2\x2\x267E\x267F\a\x98\x2\x2\x267F\x2680\a\x3D2\x2\x2\x2680\x2681"+
		"\a\x1F2\x2\x2\x2681\x268A\x5\x4D2\x26A\x2\x2682\x2683\a\x98\x2\x2\x2683"+
		"\x2684\a\x18\x2\x2\x2684\x2685\a\x3D2\x2\x2\x2685\x268A\a\x1F3\x2\x2\x2686"+
		"\x2687\a\x98\x2\x2\x2687\x2688\a\x220\x2\x2\x2688\x268A\a\x1F2\x2\x2\x2689"+
		"\x267E\x3\x2\x2\x2\x2689\x2682\x3\x2\x2\x2\x2689\x2686\x3\x2\x2\x2\x268A"+
		"\x317\x3\x2\x2\x2\x268B\x268C\a\xCA\x2\x2\x268C\x268D\a\x220\x2\x2\x268D"+
		"\x268E\a\x1F2\x2\x2\x268E\x268F\a\x12E\x2\x2\x268F\x2690\aq\x2\x2\x2690"+
		"\x2691\a\x2BE\x2\x2\x2691\x2692\a\x46F\x2\x2\x2692\x26AF\a\x46B\x2\x2"+
		"\x2693\x2694\a\xCA\x2\x2\x2694\x2695\a\x3D2\x2\x2\x2695\x2696\a\x1F2\x2"+
		"\x2\x2696\x2699\x5\x4D2\x26A\x2\x2697\x2698\a\x46\x2\x2\x2698\x269A\x5"+
		"\x4D2\x26A\x2\x2699\x2697\x3\x2\x2\x2\x2699\x269A\x3\x2\x2\x2\x269A\x269E"+
		"\x3\x2\x2\x2\x269B\x269C\a\x181\x2\x2\x269C\x269D\a\x2E9\x2\x2\x269D\x269F"+
		"\x5\x4D2\x26A\x2\x269E\x269B\x3\x2\x2\x2\x269E\x269F\x3\x2\x2\x2\x269F"+
		"\x26A0\x3\x2\x2\x2\x26A0\x26AA\a\x438\x2\x2\x26A1\x26A6\x5\x31A\x18E\x2"+
		"\x26A2\x26A3\a\x12E\x2\x2\x26A3\x26A4\aq\x2\x2\x26A4\x26A6\x5\x31E\x190"+
		"\x2\x26A5\x26A1\x3\x2\x2\x2\x26A5\x26A2\x3\x2\x2\x2\x26A6\x26A8\x3\x2"+
		"\x2\x2\x26A7\x26A9\a\x485\x2\x2\x26A8\x26A7\x3\x2\x2\x2\x26A8\x26A9\x3"+
		"\x2\x2\x2\x26A9\x26AB\x3\x2\x2\x2\x26AA\x26A5\x3\x2\x2\x2\x26AB\x26AC"+
		"\x3\x2\x2\x2\x26AC\x26AA\x3\x2\x2\x2\x26AC\x26AD\x3\x2\x2\x2\x26AD\x26AF"+
		"\x3\x2\x2\x2\x26AE\x268B\x3\x2\x2\x2\x26AE\x2693\x3\x2\x2\x2\x26AF\x319"+
		"\x3\x2\x2\x2\x26B0\x26B1\a\x1F6\x2\x2\x26B1\x26B2\a\x46F\x2\x2\x26B2\x26C0"+
		"\a\x46B\x2\x2\x26B3\x26B4\a\x17\x2\x2\x26B4\x26B5\a\x46F\x2\x2\x26B5\x26C0"+
		"\x5\x31C\x18F\x2\x26B6\x26B7\a\x1B3\x2\x2\x26B7\x26B8\a\x46F\x2\x2\x26B8"+
		"\x26C0\a\x46B\x2\x2\x26B9\x26BA\a\x2EA\x2\x2\x26BA\x26BB\a\x46F\x2\x2"+
		"\x26BB\x26C0\a\x46B\x2\x2\x26BC\x26BD\a\xCC\x2\x2\x26BD\x26BE\a\x46F\x2"+
		"\x2\x26BE\x26C0\t\v\x2\x2\x26BF\x26B0\x3\x2\x2\x2\x26BF\x26B3\x3\x2\x2"+
		"\x2\x26BF\x26B6\x3\x2\x2\x2\x26BF\x26B9\x3\x2\x2\x2\x26BF\x26BC\x3\x2"+
		"\x2\x2\x26C0\x31B\x3\x2\x2\x2\x26C1\x26C2\tq\x2\x2\x26C2\x31D\x3\x2\x2"+
		"\x2\x26C3\x26C4\a}\x2\x2\x26C4\x26CF\x5\x4D2\x26A\x2\x26C5\x26C6\a?\x2"+
		"\x2\x26C6\x26C7\a\x1F2\x2\x2\x26C7\x26CF\x5\x4D2\x26A\x2\x26C8\x26C9\a"+
		"\x3D2\x2\x2\x26C9\x26CA\a\x1F2\x2\x2\x26CA\x26CF\x5\x4D2\x26A\x2\x26CB"+
		"\x26CC\a\x2BE\x2\x2\x26CC\x26CD\a\x46F\x2\x2\x26CD\x26CF\a\x46B\x2\x2"+
		"\x26CE\x26C3\x3\x2\x2\x2\x26CE\x26C5\x3\x2\x2\x2\x26CE\x26C8\x3\x2\x2"+
		"\x2\x26CE\x26CB\x3\x2\x2\x2\x26CF\x31F\x3\x2\x2\x2\x26D0\x26D1\a}\x2\x2"+
		"\x26D1\x26D6\x5\x4D2\x26A\x2\x26D2\x26D3\a\x438\x2\x2\x26D3\x26D4\a\x2BE"+
		"\x2\x2\x26D4\x26D5\a\x46F\x2\x2\x26D5\x26D7\a\x46B\x2\x2\x26D6\x26D2\x3"+
		"\x2\x2\x2\x26D6\x26D7\x3\x2\x2\x2\x26D7\x26E8\x3\x2\x2\x2\x26D8\x26D9"+
		"\a?\x2\x2\x26D9\x26DA\a\x1F2\x2\x2\x26DA\x26DF\x5\x4D2\x26A\x2\x26DB\x26DC"+
		"\a\x438\x2\x2\x26DC\x26DD\a\x2BE\x2\x2\x26DD\x26DE\a\x46F\x2\x2\x26DE"+
		"\x26E0\a\x46B\x2\x2\x26DF\x26DB\x3\x2\x2\x2\x26DF\x26E0\x3\x2\x2\x2\x26E0"+
		"\x26E8\x3\x2\x2\x2\x26E1\x26E2\a\x3D2\x2\x2\x26E2\x26E3\a\x1F2\x2\x2\x26E3"+
		"\x26E8\x5\x4D2\x26A\x2\x26E4\x26E5\a\x2BE\x2\x2\x26E5\x26E6\a\x46F\x2"+
		"\x2\x26E6\x26E8\a\x46B\x2\x2\x26E7\x26D0\x3\x2\x2\x2\x26E7\x26D8\x3\x2"+
		"\x2\x2\x26E7\x26E1\x3\x2\x2\x2\x26E7\x26E4\x3\x2\x2\x2\x26E8\x321\x3\x2"+
		"\x2\x2\x26E9\x26EF\a\xF\x2\x2\x26EA\x26EB\ao\x2\x2\x26EB\x26F0\a\x29F"+
		"\x2\x2\x26EC\x26ED\a\xDE\x2\x2\x26ED\x26EE\ao\x2\x2\x26EE\x26F0\a\x29F"+
		"\x2\x2\x26EF\x26EA\x3\x2\x2\x2\x26EF\x26EC\x3\x2\x2\x2\x26F0\x27BF\x3"+
		"\x2\x2\x2\x26F1\x2738\a%\x2\x2\x26F2\x2731\a\x30\x2\x2\x26F3\x26F4\a\x32"+
		"\x2\x2\x26F4\x2732\a\x342\x2\x2\x26F5\x2732\a=\x2\x2\x26F6\x26F7\a?\x2"+
		"\x2\x26F7\x2732\a\x1F2\x2\x2\x26F8\x26F9\aS\x2\x2\x26F9\x2732\a\x19B\x2"+
		"\x2\x26FA\x2732\a}\x2\x2\x26FB\x2700\a\x9E\x2\x2\x26FC\x26FD\a\x12E\x2"+
		"\x2\x26FD\x2701\a\x1F2\x2\x2\x26FE\x26FF\a\x220\x2\x2\x26FF\x2701\a\x1F2"+
		"\x2\x2\x2700\x26FC\x3\x2\x2\x2\x2700\x26FE\x3\x2\x2\x2\x2701\x2732\x3"+
		"\x2\x2\x2\x2702\x2732\a\xB4\x2\x2\x2703\x2732\a\xBF\x2\x2\x2704\x2732"+
		"\a\xCD\x2\x2\x2705\x270D\a\xDE\x2\x2\x2706\x270E\a\x42\x2\x2\x2707\x2708"+
		"\a\xF4\x2\x2\x2708\x270E\a\x3F8\x2\x2\x2709\x270A\a\x13E\x2\x2\x270A\x270E"+
		"\tr\x2\x2\x270B\x270C\a\x35F\x2\x2\x270C\x270E\a\xB2\x2\x2\x270D\x2706"+
		"\x3\x2\x2\x2\x270D\x2707\x3\x2\x2\x2\x270D\x2709\x3\x2\x2\x2\x270D\x270B"+
		"\x3\x2\x2\x2\x270D\x270E\x3\x2\x2\x2\x270E\x2732\x3\x2\x2\x2\x270F\x2732"+
		"\a\xE3\x2\x2\x2710\x2732\a\x131\x2\x2\x2711\x2712\a\x13E\x2\x2\x2712\x2732"+
		"\tr\x2\x2\x2713\x2719\a\x150\x2\x2\x2714\x2715\a\xDD\x2\x2\x2715\x271A"+
		"\a\x3A1\x2\x2\x2716\x2717\a\x15C\x2\x2\x2717\x271A\a\x17B\x2\x2\x2718"+
		"\x271A\a\x203\x2\x2\x2719\x2714\x3\x2\x2\x2\x2719\x2716\x3\x2\x2\x2\x2719"+
		"\x2718\x3\x2\x2\x2\x271A\x2732\x3\x2\x2\x2\x271B\x271C\a\x184\x2\x2\x271C"+
		"\x2732\ay\x2\x2\x271D\x271E\a\x207\x2\x2\x271E\x2732\a\x37A\x2\x2\x271F"+
		"\x2732\a\x216\x2\x2\x2720\x2732\a\x21E\x2\x2\x2721\x2722\a\x241\x2\x2"+
		"\x2722\x2732\a\x403\x2\x2\x2723\x2724\a\x319\x2\x2\x2724\x2725\a\x37C"+
		"\x2\x2\x2725\x2732\a\x63\x2\x2\x2726\x2732\a\x342\x2\x2\x2727\x2732\a"+
		"\x346\x2\x2\x2728\x2732\a\x35A\x2\x2\x2729\x272A\a\x36B\x2\x2\x272A\x2732"+
		"\a\x2D3\x2\x2\x272B\x272C\a\x37A\x2\x2\x272C\x2732\ts\x2\x2\x272D\x2732"+
		"\a\x37C\x2\x2\x272E\x272F\a\x3D2\x2\x2\x272F\x2732\a\x1F2\x2\x2\x2730"+
		"\x2732\a\x41B\x2\x2\x2731\x26F3\x3\x2\x2\x2\x2731\x26F5\x3\x2\x2\x2\x2731"+
		"\x26F6\x3\x2\x2\x2\x2731\x26F8\x3\x2\x2\x2\x2731\x26FA\x3\x2\x2\x2\x2731"+
		"\x26FB\x3\x2\x2\x2\x2731\x2702\x3\x2\x2\x2\x2731\x2703\x3\x2\x2\x2\x2731"+
		"\x2704\x3\x2\x2\x2\x2731\x2705\x3\x2\x2\x2\x2731\x270F\x3\x2\x2\x2\x2731"+
		"\x2710\x3\x2\x2\x2\x2731\x2711\x3\x2\x2\x2\x2731\x2713\x3\x2\x2\x2\x2731"+
		"\x271B\x3\x2\x2\x2\x2731\x271D\x3\x2\x2\x2\x2731\x271F\x3\x2\x2\x2\x2731"+
		"\x2720\x3\x2\x2\x2\x2731\x2721\x3\x2\x2\x2\x2731\x2723\x3\x2\x2\x2\x2731"+
		"\x2726\x3\x2\x2\x2\x2731\x2727\x3\x2\x2\x2\x2731\x2728\x3\x2\x2\x2\x2731"+
		"\x2729\x3\x2\x2\x2\x2731\x272B\x3\x2\x2\x2\x2731\x272D\x3\x2\x2\x2\x2731"+
		"\x272E\x3\x2\x2\x2\x2731\x2730\x3\x2\x2\x2\x2732\x2739\x3\x2\x2\x2\x2733"+
		"\x2739\a\x330\x2\x2\x2734\x2735\a\x37A\x2\x2\x2735\x2739\a\x3B2\x2\x2"+
		"\x2736\x2739\a\x389\x2\x2\x2737\x2739\a\x3EF\x2\x2\x2738\x26F2\x3\x2\x2"+
		"\x2\x2738\x2733\x3\x2\x2\x2\x2738\x2734\x3\x2\x2\x2\x2738\x2736\x3\x2"+
		"\x2\x2\x2738\x2737\x3\x2\x2\x2\x2738\x2739\x3\x2\x2\x2\x2739\x27BF\x3"+
		"\x2\x2\x2\x273A\x273C\a\x44\x2\x2\x273B\x273D\a\x37A\x2\x2\x273C\x273B"+
		"\x3\x2\x2\x2\x273C\x273D\x3\x2\x2\x2\x273D\x27BF\x3\x2\x2\x2\x273E\x273F"+
		"\aW\x2\x2\x273F\x27BF\tt\x2\x2\x2740\x27BF\a\x8D\x2\x2\x2741\x2746\a\xB3"+
		"\x2\x2\x2742\x2743\a\x30\x2\x2\x2743\x2747\a\xDE\x2\x2\x2744\x2747\a\x326"+
		"\x2\x2\x2745\x2747\a\x3A7\x2\x2\x2746\x2742\x3\x2\x2\x2\x2746\x2744\x3"+
		"\x2\x2\x2\x2746\x2745\x3\x2\x2\x2\x2746\x2747\x3\x2\x2\x2\x2747\x27BF"+
		"\x3\x2\x2\x2\x2748\x274A\a\xC1\x2\x2\x2749\x274B\a\x37A\x2\x2\x274A\x2749"+
		"\x3\x2\x2\x2\x274A\x274B\x3\x2\x2\x2\x274B\x27BF\x3\x2\x2\x2\x274C\x2782"+
		"\a\xCA\x2\x2\x274D\x2783\a\x16\x2\x2\x274E\x274F\a\x30\x2\x2\x274F\x2783"+
		"\a\xDE\x2\x2\x2750\x2783\a=\x2\x2\x2751\x2752\a?\x2\x2\x2752\x2783\a\x1F2"+
		"\x2\x2\x2753\x2754\aS\x2\x2\x2754\x2783\a\x19B\x2\x2\x2755\x2783\a}\x2"+
		"\x2\x2756\x2783\a\xBF\x2\x2\x2757\x275B\a\xDE\x2\x2\x2758\x2759\a\xF4"+
		"\x2\x2\x2759\x275A\a\x13E\x2\x2\x275A\x275C\a\x272\x2\x2\x275B\x2758\x3"+
		"\x2\x2\x2\x275B\x275C\x3\x2\x2\x2\x275C\x2783\x3\x2\x2\x2\x275D\x275E"+
		"\a\xF4\x2\x2\x275E\x275F\a\x13E\x2\x2\x275F\x2783\a\x272\x2\x2\x2760\x2783"+
		"\a\xF9\x2\x2\x2761\x2783\a\x131\x2\x2\x2762\x2763\a\x150\x2\x2\x2763\x2783"+
		"\a\x203\x2\x2\x2764\x2765\a\x184\x2\x2\x2765\x2783\ay\x2\x2\x2766\x2783"+
		"\a\x187\x2\x2\x2767\x2768\a\x241\x2\x2\x2768\x2783\a\x403\x2\x2\x2769"+
		"\x2783\a\x2E4\x2\x2\x276A\x2783\a\x2F4\x2\x2\x276B\x276C\a\x319\x2\x2"+
		"\x276C\x276D\a\x37C\x2\x2\x276D\x2783\a\x63\x2\x2\x276E\x2783\a\x342\x2"+
		"\x2\x276F\x2783\a\x346\x2\x2\x2770\x2783\a\x354\x2\x2\x2771\x2783\a\x35A"+
		"\x2\x2\x2772\x2783\a\x377\x2\x2\x2773\x2774\a\x37A\x2\x2\x2774\x2783\a"+
		"\x342\x2\x2\x2775\x2783\a\x37C\x2\x2\x2776\x2777\a\x3D2\x2\x2\x2777\x2783"+
		"\a\x1F2\x2\x2\x2778\x2783\a\x3D4\x2\x2\x2779\x2783\a\x3D7\x2\x2\x277A"+
		"\x277B\a\x3EF\x2\x2\x277B\x277C\a\x13E\x2\x2\x277C\x2783\a\x272\x2\x2"+
		"\x277D\x2783\a\x403\x2\x2\x277E\x2783\a\x42B\x2\x2\x277F\x2780\a\x443"+
		"\x2\x2\x2780\x2781\a\x35A\x2\x2\x2781\x2783\a\x9D\x2\x2\x2782\x274D\x3"+
		"\x2\x2\x2\x2782\x274E\x3\x2\x2\x2\x2782\x2750\x3\x2\x2\x2\x2782\x2751"+
		"\x3\x2\x2\x2\x2782\x2753\x3\x2\x2\x2\x2782\x2755\x3\x2\x2\x2\x2782\x2756"+
		"\x3\x2\x2\x2\x2782\x2757\x3\x2\x2\x2\x2782\x275D\x3\x2\x2\x2\x2782\x2760"+
		"\x3\x2\x2\x2\x2782\x2761\x3\x2\x2\x2\x2782\x2762\x3\x2\x2\x2\x2782\x2764"+
		"\x3\x2\x2\x2\x2782\x2766\x3\x2\x2\x2\x2782\x2767\x3\x2\x2\x2\x2782\x2769"+
		"\x3\x2\x2\x2\x2782\x276A\x3\x2\x2\x2\x2782\x276B\x3\x2\x2\x2\x2782\x276E"+
		"\x3\x2\x2\x2\x2782\x276F\x3\x2\x2\x2\x2782\x2770\x3\x2\x2\x2\x2782\x2771"+
		"\x3\x2\x2\x2\x2782\x2772\x3\x2\x2\x2\x2782\x2773\x3\x2\x2\x2\x2782\x2775"+
		"\x3\x2\x2\x2\x2782\x2776\x3\x2\x2\x2\x2782\x2778\x3\x2\x2\x2\x2782\x2779"+
		"\x3\x2\x2\x2\x2782\x277A\x3\x2\x2\x2\x2782\x277D\x3\x2\x2\x2\x2782\x277E"+
		"\x3\x2\x2\x2\x2782\x277F\x3\x2\x2\x2\x2783\x27BF\x3\x2\x2\x2\x2784\x27BF"+
		"\a\x102\x2\x2\x2785\x2789\a\x145\x2\x2\x2786\x2787\a\x30\x2\x2\x2787\x2788"+
		"\a\x150\x2\x2\x2788\x278A\a\x361\x2\x2\x2789\x2786\x3\x2\x2\x2\x2789\x278A"+
		"\x3\x2\x2\x2\x278A\x27BF\x3\x2\x2\x2\x278B\x278C\a\x150\x2\x2\x278C\x278D"+
		"\a\t\x2\x2\x278D\x27BF\a=\x2\x2\x278E\x2791\a\x1BF\x2\x2\x278F\x2790\a"+
		"\x30\x2\x2\x2790\x2792\a\x216\x2\x2\x2791\x278F\x3\x2\x2\x2\x2791\x2792"+
		"\x3\x2\x2\x2\x2792\x27BF\x3\x2\x2\x2\x2793\x27BF\a\x1D1\x2\x2\x2794\x2795"+
		"\a\x1F8\x2\x2\x2795\x2796\a\xDE\x2\x2\x2796\x27BF\a\xB4\x2\x2\x2797\x27BF"+
		"\a\x30F\x2\x2\x2798\x27BF\a\x314\x2\x2\x2799\x279D\a\x36F\x2\x2\x279A"+
		"\x279B\a\x18\x2\x2\x279B\x279C\a\x41B\x2\x2\x279C\x279E\a\x36A\x2\x2\x279D"+
		"\x279A\x3\x2\x2\x2\x279D\x279E\x3\x2\x2\x2\x279E\x27BF\x3\x2\x2\x2\x279F"+
		"\x27BF\a\x375\x2\x2\x27A0\x27BF\a\x38E\x2\x2\x27A1\x27BF\a\x393\x2\x2"+
		"\x27A2\x27A3\a\x3C7\x2\x2\x27A3\x27A4\a\x2EF\x2\x2\x27A4\x27BF\a\x273"+
		"\x2\x2\x27A5\x27A6\a\x3DC\x2\x2\x27A6\x27BF\a\x2AF\x2\x2\x27A7\x27BF\a"+
		"\x411\x2\x2\x27A8\x27A9\a\x413\x2\x2\x27A9\x27BF\a=\x2\x2\x27AA\x27BF"+
		"\a\x415\x2\x2\x27AB\x27BC\a\x42B\x2\x2\x27AC\x27B3\a\x30\x2\x2\x27AD\x27B4"+
		"\a\xDE\x2\x2\x27AE\x27B4\a\xFF\x2\x2\x27AF\x27B0\a\x9E\x2\x2\x27B0\x27B1"+
		"\t\xE\x2\x2\x27B1\x27B2\a\x1F2\x2\x2\x27B2\x27B4\a\xFF\x2\x2\x27B3\x27AD"+
		"\x3\x2\x2\x2\x27B3\x27AE\x3\x2\x2\x2\x27B3\x27AF\x3\x2\x2\x2\x27B4\x27BD"+
		"\x3\x2\x2\x2\x27B5\x27B6\a\x80\x2\x2\x27B6\x27BD\a\x3F0\x2\x2\x27B7\x27B8"+
		"\a\xDE\x2\x2\x27B8\x27BD\a\x3B2\x2\x2\x27B9\x27BD\a\xFF\x2\x2\x27BA\x27BB"+
		"\a\x37A\x2\x2\x27BB\x27BD\a\x3B2\x2\x2\x27BC\x27AC\x3\x2\x2\x2\x27BC\x27B5"+
		"\x3\x2\x2\x2\x27BC\x27B7\x3\x2\x2\x2\x27BC\x27B9\x3\x2\x2\x2\x27BC\x27BA"+
		"\x3\x2\x2\x2\x27BD\x27BF\x3\x2\x2\x2\x27BE\x26E9\x3\x2\x2\x2\x27BE\x26F1"+
		"\x3\x2\x2\x2\x27BE\x273A\x3\x2\x2\x2\x27BE\x273E\x3\x2\x2\x2\x27BE\x2740"+
		"\x3\x2\x2\x2\x27BE\x2741\x3\x2\x2\x2\x27BE\x2748\x3\x2\x2\x2\x27BE\x274C"+
		"\x3\x2\x2\x2\x27BE\x2784\x3\x2\x2\x2\x27BE\x2785\x3\x2\x2\x2\x27BE\x278B"+
		"\x3\x2\x2\x2\x27BE\x278E\x3\x2\x2\x2\x27BE\x2793\x3\x2\x2\x2\x27BE\x2794"+
		"\x3\x2\x2\x2\x27BE\x2797\x3\x2\x2\x2\x27BE\x2798\x3\x2\x2\x2\x27BE\x2799"+
		"\x3\x2\x2\x2\x27BE\x279F\x3\x2\x2\x2\x27BE\x27A0\x3\x2\x2\x2\x27BE\x27A1"+
		"\x3\x2\x2\x2\x27BE\x27A2\x3\x2\x2\x2\x27BE\x27A5\x3\x2\x2\x2\x27BE\x27A7"+
		"\x3\x2\x2\x2\x27BE\x27A8\x3\x2\x2\x2\x27BE\x27AA\x3\x2\x2\x2\x27BE\x27AB"+
		"\x3\x2\x2\x2\x27BF\x323\x3\x2\x2\x2\x27C0\x27C1\a\x386\x2\x2\x27C1\x27C4"+
		"\a\x468\x2\x2\x27C2\x27C3\a\x47C\x2\x2\x27C3\x27C5\x5\x4D2\x26A\x2\x27C4"+
		"\x27C2\x3\x2\x2\x2\x27C4\x27C5\x3\x2\x2\x2\x27C5\x27C6\x3\x2\x2\x2\x27C6"+
		"\x27C7\a\x46F\x2\x2\x27C7\x27E0\x5\x3A6\x1D4\x2\x27C8\x27C9\a\x386\x2"+
		"\x2\x27C9\x27CA\a\x468\x2\x2\x27CA\x27CB\x5\x4DA\x26E\x2\x27CB\x27CC\x5"+
		"\x3A6\x1D4\x2\x27CC\x27E0\x3\x2\x2\x2\x27CD\x27CE\a\x386\x2\x2\x27CE\x27CF"+
		"\a\x468\x2\x2\x27CF\x27D0\a\x46F\x2\x2\x27D0\x27D1\a\xD8\x2\x2\x27D1\x27DC"+
		"\x5\x39A\x1CE\x2\x27D2\x27DA\a\x172\x2\x2\x27D3\x27D4\a\x301\x2\x2\x27D4"+
		"\x27DB\a\x296\x2\x2\x27D5\x27D8\a\x415\x2\x2\x27D6\x27D7\a\x28D\x2\x2"+
		"\x27D7\x27D9\x5\x4A6\x254\x2\x27D8\x27D6\x3\x2\x2\x2\x27D8\x27D9\x3\x2"+
		"\x2\x2\x27D9\x27DB\x3\x2\x2\x2\x27DA\x27D3\x3\x2\x2\x2\x27DA\x27D5\x3"+
		"\x2\x2\x2\x27DB\x27DD\x3\x2\x2\x2\x27DC\x27D2\x3\x2\x2\x2\x27DC\x27DD"+
		"\x3\x2\x2\x2\x27DD\x27E0\x3\x2\x2\x2\x27DE\x27E0\x5\x3A0\x1D1\x2\x27DF"+
		"\x27C0\x3\x2\x2\x2\x27DF\x27C8\x3\x2\x2\x2\x27DF\x27CD\x3\x2\x2\x2\x27DF"+
		"\x27DE\x3\x2\x2\x2\x27E0\x325\x3\x2\x2\x2\x27E1\x27E2\a\\\x2\x2\x27E2"+
		"\x27E3\a\x117\x2\x2\x27E3\x27E6\tu\x2\x2\x27E4\x27E7\x5\x4D2\x26A\x2\x27E5"+
		"\x27E7\a\x468\x2\x2\x27E6\x27E4\x3\x2\x2\x2\x27E6\x27E5\x3\x2\x2\x2\x27E6"+
		"\x27E7\x3\x2\x2\x2\x27E7\x281E\x3\x2\x2\x2\x27E8\x27E9\a\\\x2\x2\x27E9"+
		"\x27F3\tu\x2\x2\x27EA\x27ED\x5\x4D2\x26A\x2\x27EB\x27ED\a\x468\x2\x2\x27EC"+
		"\x27EA\x3\x2\x2\x2\x27EC\x27EB\x3\x2\x2\x2\x27ED\x27F1\x3\x2\x2\x2\x27EE"+
		"\x27EF\a\x438\x2\x2\x27EF\x27F0\a\x21D\x2\x2\x27F0\x27F2\a\x46B\x2\x2"+
		"\x27F1\x27EE\x3\x2\x2\x2\x27F1\x27F2\x3\x2\x2\x2\x27F2\x27F4\x3\x2\x2"+
		"\x2\x27F3\x27EC\x3\x2\x2\x2\x27F3\x27F4\x3\x2\x2\x2\x27F4\x281E\x3\x2"+
		"\x2\x2\x27F5\x27F6\a\xA7\x2\x2\x27F6\x2803\tu\x2\x2\x27F7\x27FA\x5\x4D2"+
		"\x26A\x2\x27F8\x27FA\a\x468\x2\x2\x27F9\x27F7\x3\x2\x2\x2\x27F9\x27F8"+
		"\x3\x2\x2\x2\x27FA\x2801\x3\x2\x2\x2\x27FB\x27FC\a\x438\x2\x2\x27FC\x27FD"+
		"\a\x481\x2\x2\x27FD\x27FE\a\x101\x2\x2\x27FE\x27FF\a\x46F\x2\x2\x27FF"+
		"\x2800\t\x13\x2\x2\x2800\x2802\a\x482\x2\x2\x2801\x27FB\x3\x2\x2\x2\x2801"+
		"\x2802\x3\x2\x2\x2\x2802\x2804\x3\x2\x2\x2\x2803\x27F9\x3\x2\x2\x2\x2803"+
		"\x2804\x3\x2\x2\x2\x2804\x281E\x3\x2\x2\x2\x2805\x2807\a\xA7\x2\x2\x2806"+
		"\x2808\a\x43D\x2\x2\x2807\x2806\x3\x2\x2\x2\x2807\x2808\x3\x2\x2\x2\x2808"+
		"\x281E\x3\x2\x2\x2\x2809\x280A\a\xA7\x2\x2\x280A\x281E\x5\x4D2\x26A\x2"+
		"\x280B\x280C\a\x343\x2\x2\x280C\x281E\x5\x4D2\x26A\x2\x280D\x280E\a\x343"+
		"\x2\x2\x280E\x2811\tu\x2\x2\x280F\x2812\x5\x4D2\x26A\x2\x2810\x2812\a"+
		"\x468\x2\x2\x2811\x280F\x3\x2\x2\x2\x2811\x2810\x3\x2\x2\x2\x2811\x2812"+
		"\x3\x2\x2\x2\x2812\x281E\x3\x2\x2\x2\x2813\x2815\a\x343\x2\x2\x2814\x2816"+
		"\a\x43D\x2\x2\x2815\x2814\x3\x2\x2\x2\x2815\x2816\x3\x2\x2\x2\x2816\x281E"+
		"\x3\x2\x2\x2\x2817\x2818\a\x358\x2\x2\x2818\x281B\tu\x2\x2\x2819\x281C"+
		"\x5\x4D2\x26A\x2\x281A\x281C\a\x468\x2\x2\x281B\x2819\x3\x2\x2\x2\x281B"+
		"\x281A\x3\x2\x2\x2\x281B\x281C\x3\x2\x2\x2\x281C\x281E\x3\x2\x2\x2\x281D"+
		"\x27E1\x3\x2\x2\x2\x281D\x27E8\x3\x2\x2\x2\x281D\x27F5\x3\x2\x2\x2\x281D"+
		"\x2805\x3\x2\x2\x2\x281D\x2809\x3\x2\x2\x2\x281D\x280B\x3\x2\x2\x2\x281D"+
		"\x280D\x3\x2\x2\x2\x281D\x2813\x3\x2\x2\x2\x281D\x2817\x3\x2\x2\x2\x281E"+
		"\x327\x3\x2\x2\x2\x281F\x2821\a\x196\x2\x2\x2820\x2822\a\x469\x2\x2\x2821"+
		"\x2820\x3\x2\x2\x2\x2821\x2822\x3\x2\x2\x2\x2822\x329\x3\x2\x2\x2\x2823"+
		"\x2825\a\x195\x2\x2\x2824\x2826\a\x469\x2\x2\x2825\x2824\x3\x2\x2\x2\x2825"+
		"\x2826\x3\x2\x2\x2\x2826\x32B\x3\x2\x2\x2\x2827\x2828\a\x419\x2\x2\x2828"+
		"\x2829\x5\x4D2\x26A\x2\x2829\x32D\x3\x2\x2\x2\x282A\x282C\a\x38A\x2\x2"+
		"\x282B\x282D\a\x46B\x2\x2\x282C\x282B\x3\x2\x2\x2\x282C\x282D\x3\x2\x2"+
		"\x2\x282D\x32F\x3\x2\x2\x2\x282E\x2831\a\x311\x2\x2\x282F\x2830\a\x438"+
		"\x2\x2\x2830\x2832\a\x2AD\x2\x2\x2831\x282F\x3\x2\x2\x2\x2831\x2832\x3"+
		"\x2\x2\x2\x2832\x331\x3\x2\x2\x2\x2833\x2836\a\x393\x2\x2\x2834\x2835"+
		"\a\x438\x2\x2\x2835\x2837\a\x275\x2\x2\x2836\x2834\x3\x2\x2\x2\x2836\x2837"+
		"\x3\x2\x2\x2\x2837\x333\x3\x2\x2\x2\x2838\x283A\a\x8D\x2\x2\x2839\x283B"+
		"\a\x469\x2\x2\x283A\x2839\x3\x2\x2\x2\x283A\x283B\x3\x2\x2\x2\x283B\x335"+
		"\x3\x2\x2\x2\x283C\x283D\tv\x2\x2\x283D\x337\x3\x2\x2\x2\x283E\x2857\a"+
		"\x88\x2\x2\x283F\x2843\a\x481\x2\x2\x2840\x2844\x5\x4D2\x26A\x2\x2841"+
		"\x2844\a\x46B\x2\x2\x2842\x2844\a\x469\x2\x2\x2843\x2840\x3\x2\x2\x2\x2843"+
		"\x2841\x3\x2\x2\x2\x2843\x2842\x3\x2\x2\x2\x2844\x2849\x3\x2\x2\x2\x2845"+
		"\x2846\a\x485\x2\x2\x2846\x284A\a\x268\x2\x2\x2847\x2848\a\x485\x2\x2"+
		"\x2848\x284A\tw\x2\x2\x2849\x2845\x3\x2\x2\x2\x2849\x2847\x3\x2\x2\x2"+
		"\x2849\x284A\x3\x2\x2\x2\x284A\x284B\x3\x2\x2\x2\x284B\x2855\a\x482\x2"+
		"\x2\x284C\x284D\a\x438\x2\x2\x284D\x2852\x5\x336\x19C\x2\x284E\x284F\a"+
		"\x485\x2\x2\x284F\x2851\x5\x336\x19C\x2\x2850\x284E\x3\x2\x2\x2\x2851"+
		"\x2854\x3\x2\x2\x2\x2852\x2850\x3\x2\x2\x2\x2852\x2853\x3\x2\x2\x2\x2853"+
		"\x2856\x3\x2\x2\x2\x2854\x2852\x3\x2\x2\x2\x2855\x284C\x3\x2\x2\x2\x2855"+
		"\x2856\x3\x2\x2\x2\x2856\x2858\x3\x2\x2\x2\x2857\x283F\x3\x2\x2\x2\x2857"+
		"\x2858\x3\x2\x2\x2\x2858\x339\x3\x2\x2\x2\x2859\x2861\a\x89\x2\x2\x285A"+
		"\x285E\a\x481\x2\x2\x285B\x285F\x5\x4D2\x26A\x2\x285C\x285F\a\x46B\x2"+
		"\x2\x285D\x285F\a\x469\x2\x2\x285E\x285B\x3\x2\x2\x2\x285E\x285C\x3\x2"+
		"\x2\x2\x285E\x285D\x3\x2\x2\x2\x285F\x2860\x3\x2\x2\x2\x2860\x2862\a\x482"+
		"\x2\x2\x2861\x285A\x3\x2\x2\x2\x2861\x2862\x3\x2\x2\x2\x2862\x2865\x3"+
		"\x2\x2\x2\x2863\x2864\a\x438\x2\x2\x2864\x2866\a\x279\x2\x2\x2865\x2863"+
		"\x3\x2\x2\x2\x2865\x2866\x3\x2\x2\x2\x2866\x33B\x3\x2\x2\x2\x2867\x2868"+
		"\tx\x2\x2\x2868\x33D\x3\x2\x2\x2\x2869\x2870\a\x8A\x2\x2\x286A\x286D\a"+
		"\x481\x2\x2\x286B\x286E\x5\x4D2\x26A\x2\x286C\x286E\a\x46B\x2\x2\x286D"+
		"\x286B\x3\x2\x2\x2\x286D\x286C\x3\x2\x2\x2\x286E\x286F\x3\x2\x2\x2\x286F"+
		"\x2871\a\x482\x2\x2\x2870\x286A\x3\x2\x2\x2\x2870\x2871\x3\x2\x2\x2\x2871"+
		"\x287B\x3\x2\x2\x2\x2872\x2873\a\x438\x2\x2\x2873\x2878\x5\x33C\x19F\x2"+
		"\x2874\x2875\a\x485\x2\x2\x2875\x2877\x5\x33C\x19F\x2\x2876\x2874\x3\x2"+
		"\x2\x2\x2877\x287A\x3\x2\x2\x2\x2878\x2876\x3\x2\x2\x2\x2878\x2879\x3"+
		"\x2\x2\x2\x2879\x287C\x3\x2\x2\x2\x287A\x2878\x3\x2\x2\x2\x287B\x2872"+
		"\x3\x2\x2\x2\x287B\x287C\x3\x2\x2\x2\x287C\x33F\x3\x2\x2\x2\x287D\x2888"+
		"\a\"\x2\x2\x287E\x2888\a\x14E\x2\x2\x287F\x2888\a\x279\x2\x2\x2880\x2888"+
		"\a\x3DA\x2\x2\x2881\x2888\a\x13D\x2\x2\x2882\x2888\a\x2CE\x2\x2\x2883"+
		"\x2888\a\xE6\x2\x2\x2884\x2885\a\x224\x2\x2\x2885\x2886\a\x46F\x2\x2\x2886"+
		"\x2888\a\x469\x2\x2\x2887\x287D\x3\x2\x2\x2\x2887\x287E\x3\x2\x2\x2\x2887"+
		"\x287F\x3\x2\x2\x2\x2887\x2880\x3\x2\x2\x2\x2887\x2881\x3\x2\x2\x2\x2887"+
		"\x2882\x3\x2\x2\x2\x2887\x2883\x3\x2\x2\x2\x2887\x2884\x3\x2\x2\x2\x2888"+
		"\x341\x3\x2\x2\x2\x2889\x2895\a\x8B\x2\x2\x288A\x288E\a\x481\x2\x2\x288B"+
		"\x288F\x5\x4D2\x26A\x2\x288C\x288F\a\x46B\x2\x2\x288D\x288F\a\x469\x2"+
		"\x2\x288E\x288B\x3\x2\x2\x2\x288E\x288C\x3\x2\x2\x2\x288E\x288D\x3\x2"+
		"\x2\x2\x288F\x2892\x3\x2\x2\x2\x2890\x2891\a\x485\x2\x2\x2891\x2893\t"+
		"y\x2\x2\x2892\x2890\x3\x2\x2\x2\x2892\x2893\x3\x2\x2\x2\x2893\x2894\x3"+
		"\x2\x2\x2\x2894\x2896\a\x482\x2\x2\x2895\x288A\x3\x2\x2\x2\x2895\x2896"+
		"\x3\x2\x2\x2\x2896\x28A0\x3\x2\x2\x2\x2897\x2898\a\x438\x2\x2\x2898\x289D"+
		"\x5\x340\x1A1\x2\x2899\x289A\a\x485\x2\x2\x289A\x289C\x5\x340\x1A1\x2"+
		"\x289B\x2899\x3\x2\x2\x2\x289C\x289F\x3\x2\x2\x2\x289D\x289B\x3\x2\x2"+
		"\x2\x289D\x289E\x3\x2\x2\x2\x289E\x28A1\x3\x2\x2\x2\x289F\x289D\x3\x2"+
		"\x2\x2\x28A0\x2897\x3\x2\x2\x2\x28A0\x28A1\x3\x2\x2\x2\x28A1\x343\x3\x2"+
		"\x2\x2\x28A2\x28AB\a\"\x2\x2\x28A3\x28AB\a\x279\x2\x2\x28A4\x28AB\a\x3DA"+
		"\x2\x2\x28A5\x28AB\a\x13D\x2\x2\x28A6\x28AB\a\x2CE\x2\x2\x28A7\x28A8\a"+
		"\x224\x2\x2\x28A8\x28A9\a\x46F\x2\x2\x28A9\x28AB\a\x469\x2\x2\x28AA\x28A2"+
		"\x3\x2\x2\x2\x28AA\x28A3\x3\x2\x2\x2\x28AA\x28A4\x3\x2\x2\x2\x28AA\x28A5"+
		"\x3\x2\x2\x2\x28AA\x28A6\x3\x2\x2\x2\x28AA\x28A7\x3\x2\x2\x2\x28AB\x345"+
		"\x3\x2\x2\x2\x28AC\x28B7\a\x8C\x2\x2\x28AD\x28B0\a\x481\x2\x2\x28AE\x28B1"+
		"\a\x469\x2\x2\x28AF\x28B1\a\x46B\x2\x2\x28B0\x28AE\x3\x2\x2\x2\x28B0\x28AF"+
		"\x3\x2\x2\x2\x28B1\x28B4\x3\x2\x2\x2\x28B2\x28B3\a\x485\x2\x2\x28B3\x28B5"+
		"\ty\x2\x2\x28B4\x28B2\x3\x2\x2\x2\x28B4\x28B5\x3\x2\x2\x2\x28B5\x28B6"+
		"\x3\x2\x2\x2\x28B6\x28B8\a\x482\x2\x2\x28B7\x28AD\x3\x2\x2\x2\x28B7\x28B8"+
		"\x3\x2\x2\x2\x28B8\x28C2\x3\x2\x2\x2\x28B9\x28BA\a\x438\x2\x2\x28BA\x28BF"+
		"\x5\x344\x1A3\x2\x28BB\x28BC\a\x485\x2\x2\x28BC\x28BE\x5\x344\x1A3\x2"+
		"\x28BD\x28BB\x3\x2\x2\x2\x28BE\x28C1\x3\x2\x2\x2\x28BF\x28BD\x3\x2\x2"+
		"\x2\x28BF\x28C0\x3\x2\x2\x2\x28C0\x28C3\x3\x2\x2\x2\x28C1\x28BF\x3\x2"+
		"\x2\x2\x28C2\x28B9\x3\x2\x2\x2\x28C2\x28C3\x3\x2\x2\x2\x28C3\x347\x3\x2"+
		"\x2\x2\x28C4\x28C5\a\x90\x2\x2\x28C5\x28C6\a\x481\x2\x2\x28C6\x28CF\a"+
		"\x46B\x2\x2\x28C7\x28CD\a\x485\x2\x2\x28C8\x28CE\a\x268\x2\x2\x28C9\x28CE"+
		"\x5\x3A6\x1D4\x2\x28CA\x28CE\a\x31E\x2\x2\x28CB\x28CE\a\x31F\x2\x2\x28CC"+
		"\x28CE\a\x320\x2\x2\x28CD\x28C8\x3\x2\x2\x2\x28CD\x28C9\x3\x2\x2\x2\x28CD"+
		"\x28CA\x3\x2\x2\x2\x28CD\x28CB\x3\x2\x2\x2\x28CD\x28CC\x3\x2\x2\x2\x28CE"+
		"\x28D0\x3\x2\x2\x2\x28CF\x28C7\x3\x2\x2\x2\x28CF\x28D0\x3\x2\x2\x2\x28D0"+
		"\x28D1\x3\x2\x2\x2\x28D1\x28DB\a\x482\x2\x2\x28D2\x28D3\a\x438\x2\x2\x28D3"+
		"\x28D8\x5\x340\x1A1\x2\x28D4\x28D5\a\x485\x2\x2\x28D5\x28D7\x5\x340\x1A1"+
		"\x2\x28D6\x28D4\x3\x2\x2\x2\x28D7\x28DA\x3\x2\x2\x2\x28D8\x28D6\x3\x2"+
		"\x2\x2\x28D8\x28D9\x3\x2\x2\x2\x28D9\x28DC\x3\x2\x2\x2\x28DA\x28D8\x3"+
		"\x2\x2\x2\x28DB\x28D2\x3\x2\x2\x2\x28DB\x28DC\x3\x2\x2\x2\x28DC\x349\x3"+
		"\x2\x2\x2\x28DD\x28DE\a\x94\x2\x2\x28DE\x28E2\a\x481\x2\x2\x28DF\x28E3"+
		"\x5\x4D2\x26A\x2\x28E0\x28E3\a\x46B\x2\x2\x28E1\x28E3\a\x469\x2\x2\x28E2"+
		"\x28DF\x3\x2\x2\x2\x28E2\x28E0\x3\x2\x2\x2\x28E2\x28E1\x3\x2\x2\x2\x28E3"+
		"\x28E4\x3\x2\x2\x2\x28E4\x28E7\a\x485\x2\x2\x28E5\x28E8\x5\x4D2\x26A\x2"+
		"\x28E6\x28E8\a\x46B\x2\x2\x28E7\x28E5\x3\x2\x2\x2\x28E7\x28E6\x3\x2\x2"+
		"\x2\x28E8\x28EB\x3\x2\x2\x2\x28E9\x28EA\a\x485\x2\x2\x28EA\x28EC\a\x469"+
		"\x2\x2\x28EB\x28E9\x3\x2\x2\x2\x28EB\x28EC\x3\x2\x2\x2\x28EC\x28ED\x3"+
		"\x2\x2\x2\x28ED\x28F0\a\x482\x2\x2\x28EE\x28EF\a\x438\x2\x2\x28EF\x28F1"+
		"\a\x279\x2\x2\x28F0\x28EE\x3\x2\x2\x2\x28F0\x28F1\x3\x2\x2\x2\x28F1\x34B"+
		"\x3\x2\x2\x2\x28F2\x28F3\tz\x2\x2\x28F3\x34D\x3\x2\x2\x2\x28F4\x28F5\a"+
		"\x97\x2\x2\x28F5\x28F6\a\x481\x2\x2\x28F6\x28F7\x5\x4D2\x26A\x2\x28F7"+
		"\x28F8\a\x485\x2\x2\x28F8\x28F9\x5\x4D2\x26A\x2\x28F9\x2903\a\x482\x2"+
		"\x2\x28FA\x28FB\a\x438\x2\x2\x28FB\x2900\x5\x34C\x1A7\x2\x28FC\x28FD\a"+
		"\x485\x2\x2\x28FD\x28FF\x5\x34C\x1A7\x2\x28FE\x28FC\x3\x2\x2\x2\x28FF"+
		"\x2902\x3\x2\x2\x2\x2900\x28FE\x3\x2\x2\x2\x2900\x2901\x3\x2\x2\x2\x2901"+
		"\x2904\x3\x2\x2\x2\x2902\x2900\x3\x2\x2\x2\x2903\x28FA\x3\x2\x2\x2\x2903"+
		"\x2904\x3\x2\x2\x2\x2904\x34F\x3\x2\x2\x2\x2905\x290A\a\x2C2\x2\x2\x2906"+
		"\x2907\a\x481\x2\x2\x2907\x2908\x5\x4D2\x26A\x2\x2908\x2909\a\x482\x2"+
		"\x2\x2909\x290B\x3\x2\x2\x2\x290A\x2906\x3\x2\x2\x2\x290A\x290B\x3\x2"+
		"\x2\x2\x290B\x290E\x3\x2\x2\x2\x290C\x290D\a\x438\x2\x2\x290D\x290F\a"+
		"\x1BB\x2\x2\x290E\x290C\x3\x2\x2\x2\x290E\x290F\x3\x2\x2\x2\x290F\x351"+
		"\x3\x2\x2\x2\x2910\x2913\a\x2E3\x2\x2\x2911\x2912\a\x438\x2\x2\x2912\x2914"+
		"\a\x279\x2\x2\x2913\x2911\x3\x2\x2\x2\x2913\x2914\x3\x2\x2\x2\x2914\x353"+
		"\x3\x2\x2\x2\x2915\x2916\t{\x2\x2\x2916\x355\x3\x2\x2\x2\x2917\x2920\a"+
		"\x38D\x2\x2\x2918\x2919\a\x481\x2\x2\x2919\x291C\x5\x3A6\x1D4\x2\x291A"+
		"\x291B\a\x485\x2\x2\x291B\x291D\x5\x3A6\x1D4\x2\x291C\x291A\x3\x2\x2\x2"+
		"\x291C\x291D\x3\x2\x2\x2\x291D\x291E\x3\x2\x2\x2\x291E\x291F\a\x482\x2"+
		"\x2\x291F\x2921\x3\x2\x2\x2\x2920\x2918\x3\x2\x2\x2\x2920\x2921\x3\x2"+
		"\x2\x2\x2921\x292B\x3\x2\x2\x2\x2922\x2923\a\x438\x2\x2\x2923\x2928\x5"+
		"\x354\x1AB\x2\x2924\x2925\a\x485\x2\x2\x2925\x2927\x5\x354\x1AB\x2\x2926"+
		"\x2924\x3\x2\x2\x2\x2927\x292A\x3\x2\x2\x2\x2928\x2926\x3\x2\x2\x2\x2928"+
		"\x2929\x3\x2\x2\x2\x2929\x292C\x3\x2\x2\x2\x292A\x2928\x3\x2\x2\x2\x292B"+
		"\x2922\x3\x2\x2\x2\x292B\x292C\x3\x2\x2\x2\x292C\x357\x3\x2\x2\x2\x292D"+
		"\x2937\a\x392\x2\x2\x292E\x292F\a\x481\x2\x2\x292F\x2930\a\x398\x2\x2"+
		"\x2930\x2934\a\x46F\x2\x2\x2931\x2932\a\x469\x2\x2\x2932\x2935\t\x35\x2"+
		"\x2\x2933\x2935\a\xF9\x2\x2\x2934\x2931\x3\x2\x2\x2\x2934\x2933\x3\x2"+
		"\x2\x2\x2935\x2936\x3\x2\x2\x2\x2936\x2938\a\x482\x2\x2\x2937\x292E\x3"+
		"\x2\x2\x2\x2937\x2938\x3\x2\x2\x2\x2938\x293B\x3\x2\x2\x2\x2939\x293A"+
		"\a\x438\x2\x2\x293A\x293C\a\x279\x2\x2\x293B\x2939\x3\x2\x2\x2\x293B\x293C"+
		"\x3\x2\x2\x2\x293C\x359\x3\x2\x2\x2\x293D\x293E\a\xEF\x2\x2\x293E\x293F"+
		"\a\x481\x2\x2\x293F\x2946\x5\x4D6\x26C\x2\x2940\x2941\a\x485\x2\x2\x2941"+
		"\x2944\x5\x4D6\x26C\x2\x2942\x2943\a\x485\x2\x2\x2943\x2945\x5\x3A6\x1D4"+
		"\x2\x2944\x2942\x3\x2\x2\x2\x2944\x2945\x3\x2\x2\x2\x2945\x2947\x3\x2"+
		"\x2\x2\x2946\x2940\x3\x2\x2\x2\x2946\x2947\x3\x2\x2\x2\x2947\x2948\x3"+
		"\x2\x2\x2\x2948\x294B\a\x482\x2\x2\x2949\x294A\a\x438\x2\x2\x294A\x294C"+
		"\a\x279\x2\x2\x294B\x2949\x3\x2\x2\x2\x294B\x294C\x3\x2\x2\x2\x294C\x35B"+
		"\x3\x2\x2\x2\x294D\x294E\x5\x4D2\x26A\x2\x294E\x294F\a\x481\x2\x2\x294F"+
		"\x2950\a\x17E\x2\x2\x2950\x2953\a\x482\x2\x2\x2951\x2952\a\x438\x2\x2"+
		"\x2952\x2954\a\x279\x2\x2\x2953\x2951\x3\x2\x2\x2\x2953\x2954\x3\x2\x2"+
		"\x2\x2954\x35D\x3\x2\x2\x2\x2955\x295A\a\x11F\x2\x2\x2956\x2957\a\x481"+
		"\x2\x2\x2957\x295B\a\xAE\x2\x2\x2958\x2959\a\x18\x2\x2\x2959\x295B\a\x482"+
		"\x2\x2\x295A\x2956\x3\x2\x2\x2\x295A\x2958\x3\x2\x2\x2\x295A\x295B\x3"+
		"\x2\x2\x2\x295B\x295E\x3\x2\x2\x2\x295C\x295D\a\x438\x2\x2\x295D\x295F"+
		"\a\x279\x2\x2\x295E\x295C\x3\x2\x2\x2\x295E\x295F\x3\x2\x2\x2\x295F\x35F"+
		"\x3\x2\x2\x2\x2960\x2970\a\xEE\x2\x2\x2961\x2971\x5\x338\x19D\x2\x2962"+
		"\x2971\x5\x33A\x19E\x2\x2963\x2971\x5\x33E\x1A0\x2\x2964\x2971\x5\x342"+
		"\x1A2\x2\x2965\x2971\x5\x346\x1A4\x2\x2966\x2971\x5\x348\x1A5\x2\x2967"+
		"\x2971\x5\x34A\x1A6\x2\x2968\x2971\x5\x34E\x1A8\x2\x2969\x2971\x5\x35A"+
		"\x1AE\x2\x296A\x2971\x5\x35C\x1AF\x2\x296B\x2971\x5\x35E\x1B0\x2\x296C"+
		"\x2971\x5\x350\x1A9\x2\x296D\x2971\x5\x352\x1AA\x2\x296E\x2971\x5\x356"+
		"\x1AC\x2\x296F\x2971\x5\x358\x1AD\x2\x2970\x2961\x3\x2\x2\x2\x2970\x2962"+
		"\x3\x2\x2\x2\x2970\x2963\x3\x2\x2\x2\x2970\x2964\x3\x2\x2\x2\x2970\x2965"+
		"\x3\x2\x2\x2\x2970\x2966\x3\x2\x2\x2\x2970\x2967\x3\x2\x2\x2\x2970\x2968"+
		"\x3\x2\x2\x2\x2970\x2969\x3\x2\x2\x2\x2970\x296A\x3\x2\x2\x2\x2970\x296B"+
		"\x3\x2\x2\x2\x2970\x296C\x3\x2\x2\x2\x2970\x296D\x3\x2\x2\x2\x2970\x296E"+
		"\x3\x2\x2\x2\x2970\x296F\x3\x2\x2\x2\x2971\x361\x3\x2\x2\x2\x2972\x2973"+
		"\a\x145\x2\x2\x2973\x2974\a:\x2\x2\x2974\x2975\t|\x2\x2\x2975\x363\x3"+
		"\x2\x2\x2\x2976\x2978\a\x468\x2\x2\x2977\x2979\a:\x2\x2\x2978\x2977\x3"+
		"\x2\x2\x2\x2978\x2979\x3\x2\x2\x2\x2979\x297A\x3\x2\x2\x2\x297A\x297D"+
		"\x5\x4C6\x264\x2\x297B\x297C\a\x46F\x2\x2\x297C\x297E\x5\x3A6\x1D4\x2"+
		"\x297D\x297B\x3\x2\x2\x2\x297D\x297E\x3\x2\x2\x2\x297E\x365\x3\x2\x2\x2"+
		"\x297F\x2980\a\x3D7\x2\x2\x2980\x2981\a\x481\x2\x2\x2981\x2988\x5\x36E"+
		"\x1B8\x2\x2982\x2984\a\x485\x2\x2\x2983\x2982\x3\x2\x2\x2\x2983\x2984"+
		"\x3\x2\x2\x2\x2984\x2985\x3\x2\x2\x2\x2985\x2987\x5\x368\x1B5\x2\x2986"+
		"\x2983\x3\x2\x2\x2\x2987\x298A\x3\x2\x2\x2\x2988\x2986\x3\x2\x2\x2\x2988"+
		"\x2989\x3\x2\x2\x2\x2989\x298B\x3\x2\x2\x2\x298A\x2988\x3\x2\x2\x2\x298B"+
		"\x298C\a\x482\x2\x2\x298C\x367\x3\x2\x2\x2\x298D\x298E\a\x2D9\x2\x2\x298E"+
		"\x2992\a\x1F2\x2\x2\x298F\x2990\a\x1C7\x2\x2\x2990\x2992\x5\x4D2\x26A"+
		"\x2\x2991\x298D\x3\x2\x2\x2\x2991\x298F\x3\x2\x2\x2\x2992\x2994\x3\x2"+
		"\x2\x2\x2993\x2995\t}\x2\x2\x2994\x2993\x3\x2\x2\x2\x2994\x2995\x3\x2"+
		"\x2\x2\x2995\x2998\x3\x2\x2\x2\x2996\x2998\a\x40D\x2\x2\x2997\x2991\x3"+
		"\x2\x2\x2\x2997\x2996\x3\x2\x2\x2\x2998\x2999\x3\x2\x2\x2\x2999\x299A"+
		"\a\x481\x2\x2\x299A\x299B\x5\x4A0\x251\x2\x299B\x299C\a\x482\x2\x2\x299C"+
		"\x29A3\x3\x2\x2\x2\x299D\x299E\a\x87\x2\x2\x299E\x299F\a\x481\x2\x2\x299F"+
		"\x29A0\x5\x3C0\x1E1\x2\x29A0\x29A1\a\x482\x2\x2\x29A1\x29A3\x3\x2\x2\x2"+
		"\x29A2\x2997\x3\x2\x2\x2\x29A2\x299D\x3\x2\x2\x2\x29A3\x369\x3\x2\x2\x2"+
		"\x29A4\x29A5\a\x443\x2\x2\x29A5\x29A7\a\x481\x2\x2\x29A6\x29A8\t~\x2\x2"+
		"\x29A7\x29A6\x3\x2\x2\x2\x29A7\x29A8\x3\x2\x2\x2\x29A8\x29A9\x3\x2\x2"+
		"\x2\x29A9\x29AA\x5\x36C\x1B7\x2\x29AA\x29AB\a\x482\x2\x2\x29AB\x36B\x3"+
		"\x2\x2\x2\x29AC\x29AD\a\x46A\x2\x2\x29AD\x29AE\a\x47C\x2\x2\x29AE\x29AF"+
		"\a\x46A\x2\x2\x29AF\x36D\x3\x2\x2\x2\x29B0\x29B7\x5\x370\x1B9\x2\x29B1"+
		"\x29B3\a\x485\x2\x2\x29B2\x29B1\x3\x2\x2\x2\x29B2\x29B3\x3\x2\x2\x2\x29B3"+
		"\x29B4\x3\x2\x2\x2\x29B4\x29B6\x5\x370\x1B9\x2\x29B5\x29B2\x3\x2\x2\x2"+
		"\x29B6\x29B9\x3\x2\x2\x2\x29B7\x29B5\x3\x2\x2\x2\x29B7\x29B8\x3\x2\x2"+
		"\x2\x29B8\x36F\x3\x2\x2\x2\x29B9\x29B7\x3\x2\x2\x2\x29BA\x29BE\x5\x372"+
		"\x1BA\x2\x29BB\x29BE\x5\x378\x1BD\x2\x29BC\x29BE\x5\x380\x1C1\x2\x29BD"+
		"\x29BA\x3\x2\x2\x2\x29BD\x29BB\x3\x2\x2\x2\x29BD\x29BC\x3\x2\x2\x2\x29BE"+
		"\x371\x3\x2\x2\x2\x29BF\x29CB\x5\x4D2\x26A\x2\x29C0\x29C1\x5\x4D2\x26A"+
		"\x2\x29C1\x29C2\a\x47C\x2\x2\x29C2\x29C4\x3\x2\x2\x2\x29C3\x29C0\x3\x2"+
		"\x2\x2\x29C3\x29C4\x3\x2\x2\x2\x29C4\x29C5\x3\x2\x2\x2\x29C5\x29CC\x5"+
		"\x4C6\x264\x2\x29C6\x29C7\a:\x2\x2\x29C7\x29C9\x5\x3A6\x1D4\x2\x29C8\x29CA"+
		"\a\x2C9\x2\x2\x29C9\x29C8\x3\x2\x2\x2\x29C9\x29CA\x3\x2\x2\x2\x29CA\x29CC"+
		"\x3\x2\x2\x2\x29CB\x29C3\x3\x2\x2\x2\x29CB\x29C6\x3\x2\x2\x2\x29CC\x29CF"+
		"\x3\x2\x2\x2\x29CD\x29CE\a\x9C\x2\x2\x29CE\x29D0\x5\x4D2\x26A\x2\x29CF"+
		"\x29CD\x3\x2\x2\x2\x29CF\x29D0\x3\x2\x2\x2\x29D0\x29D2\x3\x2\x2\x2\x29D1"+
		"\x29D3\x5\x4AE\x258\x2\x29D2\x29D1\x3\x2\x2\x2\x29D2\x29D3\x3\x2\x2\x2"+
		"\x29D3\x29E9\x3\x2\x2\x2\x29D4\x29D5\a\xB6\x2\x2\x29D5\x29D7\x5\x4D2\x26A"+
		"\x2\x29D6\x29D4\x3\x2\x2\x2\x29D6\x29D7\x3\x2\x2\x2\x29D7\x29D8\x3\x2"+
		"\x2\x2\x29D8\x29DA\x5\x4B0\x259\x2\x29D9\x29DB\x5\x4B0\x259\x2\x29DA\x29D9"+
		"\x3\x2\x2\x2\x29DA\x29DB\x3\x2\x2\x2\x29DB\x29EA\x3\x2\x2\x2\x29DC\x29E2"+
		"\a\x1B0\x2\x2\x29DD\x29DE\a\x481\x2\x2\x29DE\x29DF\a\x469\x2\x2\x29DF"+
		"\x29E0\a\x485\x2\x2\x29E0\x29E1\a\x469\x2\x2\x29E1\x29E3\a\x482\x2\x2"+
		"\x29E2\x29DD\x3\x2\x2\x2\x29E2\x29E3\x3\x2\x2\x2\x29E3\x29E7\x3\x2\x2"+
		"\x2\x29E4\x29E5\a\x271\x2\x2\x29E5\x29E6\a\x172\x2\x2\x29E6\x29E8\a\x326"+
		"\x2\x2\x29E7\x29E4\x3\x2\x2\x2\x29E7\x29E8\x3\x2\x2\x2\x29E8\x29EA\x3"+
		"\x2\x2\x2\x29E9\x29D6\x3\x2\x2\x2\x29E9\x29DC\x3\x2\x2\x2\x29E9\x29EA"+
		"\x3\x2\x2\x2\x29EA\x29EC\x3\x2\x2\x2\x29EB\x29ED\a\x34B\x2\x2\x29EC\x29EB"+
		"\x3\x2\x2\x2\x29EC\x29ED\x3\x2\x2\x2\x29ED\x29F1\x3\x2\x2\x2\x29EE\x29F0"+
		"\x5\x37A\x1BE\x2\x29EF\x29EE\x3\x2\x2\x2\x29F0\x29F3\x3\x2\x2\x2\x29F1"+
		"\x29EF\x3\x2\x2\x2\x29F1\x29F2\x3\x2\x2\x2\x29F2\x29FC\x3\x2\x2\x2\x29F3"+
		"\x29F1\x3\x2\x2\x2\x29F4\x29FA\a\x1B0\x2\x2\x29F5\x29F6\a\x481\x2\x2\x29F6"+
		"\x29F7\a\x469\x2\x2\x29F7\x29F8\a\x485\x2\x2\x29F8\x29F9\a\x469\x2\x2"+
		"\x29F9\x29FB\a\x482\x2\x2\x29FA\x29F5\x3\x2\x2\x2\x29FA\x29FB\x3\x2\x2"+
		"\x2\x29FB\x29FD\x3\x2\x2\x2\x29FC\x29F4\x3\x2\x2\x2\x29FC\x29FD\x3\x2"+
		"\x2\x2\x29FD\x373\x3\x2\x2\x2\x29FE\x2A34\a\x166\x2\x2\x29FF\x2A00\a\x9C"+
		"\x2\x2\x2A00\x2A34\x5\x4D2\x26A\x2\x2A01\x2A34\a\x3A3\x2\x2\x2A02\x2A03"+
		"\a\x21F\x2\x2\x2A03\x2A04\a\x438\x2\x2\x2A04\x2A05\a\x481\x2\x2\x2A05"+
		"\x2A06\a\x187\x2\x2\x2A06\x2A07\a\x46F\x2\x2\x2A07\x2A08\a\x46B\x2\x2"+
		"\x2A08\x2A34\a\x482\x2\x2\x2A09\x2A0A\a\xB6\x2\x2\x2A0A\x2A0C\x5\x4D2"+
		"\x26A\x2\x2A0B\x2A09\x3\x2\x2\x2\x2A0B\x2A0C\x3\x2\x2\x2\x2A0C\x2A0D\x3"+
		"\x2\x2\x2\x2A0D\x2A0E\a\xF9\x2\x2\x2A0E\x2A34\x5\x3A6\x1D4\x2\x2A0F\x2A15"+
		"\a\x1B0\x2\x2\x2A10\x2A11\a\x481\x2\x2\x2A11\x2A12\a\x469\x2\x2\x2A12"+
		"\x2A13\a\x485\x2\x2\x2A13\x2A14\a\x469\x2\x2\x2A14\x2A16\a\x482\x2\x2"+
		"\x2A15\x2A10\x3\x2\x2\x2\x2A15\x2A16\x3\x2\x2\x2\x2A16\x2A34\x3\x2\x2"+
		"\x2\x2A17\x2A18\a\x271\x2\x2\x2A18\x2A19\a\x172\x2\x2\x2A19\x2A34\a\x326"+
		"\x2\x2\x2A1A\x2A1B\a\x189\x2\x2\x2A1B\x2A1C\a&\x2\x2\x2A1C\x2A1D\a:\x2"+
		"\x2\x2A1D\x2A1E\t\x7F\x2\x2\x2A1E\x2A20\t\x80\x2\x2\x2A1F\x2A21\a\x1A8"+
		"\x2\x2\x2A20\x2A1F\x3\x2\x2\x2\x2A20\x2A21\x3\x2\x2\x2\x2A21\x2A34\x3"+
		"\x2\x2\x2\x2A22\x2A34\a\x34B\x2\x2\x2A23\x2A24\a\x12C\x2\x2\x2A24\x2A25"+
		"\a\x438\x2\x2\x2A25\x2A26\a\x481\x2\x2\x2A26\x2A27\a\xA3\x2\x2\x2A27\x2A28"+
		"\a\x46F\x2\x2\x2A28\x2A29\a\x46B\x2\x2\x2A29\x2A2A\a\x485\x2\x2\x2A2A"+
		"\x2A2B\a\x12F\x2\x2\x2A2B\x2A2C\a\x46F\x2\x2\x2A2C\x2A2D\t\x81\x2\x2\x2A2D"+
		"\x2A2E\a\x485\x2\x2\x2A2E\x2A2F\a\x17\x2\x2\x2A2F\x2A30\a\x46F\x2\x2\x2A30"+
		"\x2A31\a\x46B\x2\x2\x2A31\x2A34\a\x482\x2\x2\x2A32\x2A34\x5\x37A\x1BE"+
		"\x2\x2A33\x29FE\x3\x2\x2\x2\x2A33\x29FF\x3\x2\x2\x2\x2A33\x2A01\x3\x2"+
		"\x2\x2\x2A33\x2A02\x3\x2\x2\x2\x2A33\x2A0B\x3\x2\x2\x2\x2A33\x2A0F\x3"+
		"\x2\x2\x2\x2A33\x2A17\x3\x2\x2\x2\x2A33\x2A1A\x3\x2\x2\x2\x2A33\x2A22"+
		"\x3\x2\x2\x2\x2A33\x2A23\x3\x2\x2\x2\x2A33\x2A32\x3\x2\x2\x2\x2A34\x375"+
		"\x3\x2\x2\x2\x2A35\x2A36\x5\x4D2\x26A\x2\x2A36\x2A4C\t\x19\x2\x2\x2A37"+
		"\x2A4D\a\x34B\x2\x2\x2A38\x2A4D\a\x2C9\x2\x2\x2A39\x2A3A\a\x271\x2\x2"+
		"\x2A3A\x2A3B\a\x172\x2\x2\x2A3B\x2A4D\a\x326\x2\x2\x2A3C\x2A4D\a\x3A3"+
		"\x2\x2\x2A3D\x2A4D\a\x1A8\x2\x2\x2A3E\x2A4A\a\x21F\x2\x2\x2A3F\x2A48\a"+
		"\x438\x2\x2\x2A40\x2A41\a\x187\x2\x2\x2A41\x2A42\a\x46F\x2\x2\x2A42\x2A49"+
		"\a\x46B\x2\x2\x2A43\x2A44\a\x481\x2\x2\x2A44\x2A45\a\x187\x2\x2\x2A45"+
		"\x2A46\a\x46F\x2\x2\x2A46\x2A47\a\x46B\x2\x2\x2A47\x2A49\a\x482\x2\x2"+
		"\x2A48\x2A40\x3\x2\x2\x2\x2A48\x2A43\x3\x2\x2\x2\x2A49\x2A4B\x3\x2\x2"+
		"\x2\x2A4A\x2A3F\x3\x2\x2\x2\x2A4A\x2A4B\x3\x2\x2\x2\x2A4B\x2A4D\x3\x2"+
		"\x2\x2\x2A4C\x2A37\x3\x2\x2\x2\x2A4C\x2A38\x3\x2\x2\x2\x2A4C\x2A39\x3"+
		"\x2\x2\x2\x2A4C\x2A3C\x3\x2\x2\x2\x2A4C\x2A3D\x3\x2\x2\x2\x2A4C\x2A3E"+
		"\x3\x2\x2\x2\x2A4D\x377\x3\x2\x2\x2\x2A4E\x2A4F\x5\x4D2\x26A\x2\x2A4F"+
		"\x2A50\t\x82\x2\x2\x2A50\x2A54\x5\x3A6\x1D4\x2\x2A51\x2A55\a\x222\x2\x2"+
		"\x2A52\x2A53\a\x271\x2\x2\x2A53\x2A55\a\x222\x2\x2\x2A54\x2A51\x3\x2\x2"+
		"\x2\x2A54\x2A52\x3\x2\x2\x2\x2A54\x2A55\x3\x2\x2\x2\x2A55\x379\x3\x2\x2"+
		"\x2\x2A56\x2A57\a\xB6\x2\x2\x2A57\x2A59\x5\x4D2\x26A\x2\x2A58\x2A56\x3"+
		"\x2\x2\x2\x2A58\x2A59\x3\x2\x2\x2\x2A59\x2A7F\x3\x2\x2\x2\x2A5A\x2A5B"+
		"\a\x2D9\x2\x2\x2A5B\x2A5E\a\x1F2\x2\x2\x2A5C\x2A5E\a\x40D\x2\x2\x2A5D"+
		"\x2A5A\x3\x2\x2\x2\x2A5D\x2A5C\x3\x2\x2\x2\x2A5E\x2A60\x3\x2\x2\x2\x2A5F"+
		"\x2A61\x5\x4AC\x257\x2\x2A60\x2A5F\x3\x2\x2\x2\x2A60\x2A61\x3\x2\x2\x2"+
		"\x2A61\x2A63\x3\x2\x2\x2\x2A62\x2A64\x5\x392\x1CA\x2\x2A63\x2A62\x3\x2"+
		"\x2\x2\x2A63\x2A64\x3\x2\x2\x2\x2A64\x2A80\x3\x2\x2\x2\x2A65\x2A69\a\x87"+
		"\x2\x2\x2A66\x2A67\a\x271\x2\x2\x2A67\x2A68\a\x172\x2\x2\x2A68\x2A6A\a"+
		"\x326\x2\x2\x2A69\x2A66\x3\x2\x2\x2\x2A69\x2A6A\x3\x2\x2\x2\x2A6A\x2A6B"+
		"\x3\x2\x2\x2\x2A6B\x2A6C\a\x481\x2\x2\x2A6C\x2A6D\x5\x3C0\x1E1\x2\x2A6D"+
		"\x2A6E\a\x482\x2\x2\x2A6E\x2A80\x3\x2\x2\x2\x2A6F\x2A70\a\x17A\x2\x2\x2A70"+
		"\x2A72\a\x1F2\x2\x2\x2A71\x2A6F\x3\x2\x2\x2\x2A71\x2A72\x3\x2\x2\x2\x2A72"+
		"\x2A73\x3\x2\x2\x2\x2A73\x2A74\a\x314\x2\x2\x2A74\x2A75\x5\x492\x24A\x2"+
		"\x2A75\x2A76\a\x481\x2\x2\x2A76\x2A77\x5\x4A6\x254\x2\x2A77\x2A79\a\x482"+
		"\x2\x2\x2A78\x2A7A\x5\x38C\x1C7\x2\x2A79\x2A78\x3\x2\x2\x2\x2A79\x2A7A"+
		"\x3\x2\x2\x2\x2A7A\x2A7C\x3\x2\x2\x2\x2A7B\x2A7D\x5\x38E\x1C8\x2\x2A7C"+
		"\x2A7B\x3\x2\x2\x2\x2A7C\x2A7D\x3\x2\x2\x2\x2A7D\x2A80\x3\x2\x2\x2\x2A7E"+
		"\x2A80\x5\x4AE\x258\x2\x2A7F\x2A5D\x3\x2\x2\x2\x2A7F\x2A65\x3\x2\x2\x2"+
		"\x2A7F\x2A71\x3\x2\x2\x2\x2A7F\x2A7E\x3\x2\x2\x2\x2A80\x37B\x3\x2\x2\x2"+
		"\x2A81\x2A82\a\x1C7\x2\x2\x2A82\x2A84\x5\x4D2\x26A\x2\x2A83\x2A85\x5\x4AC"+
		"\x257\x2\x2A84\x2A83\x3\x2\x2\x2\x2A84\x2A85\x3\x2\x2\x2\x2A85\x2A87\x3"+
		"\x2\x2\x2\x2A86\x2A88\x5\x258\x12D\x2\x2A87\x2A86\x3\x2\x2\x2\x2A87\x2A88"+
		"\x3\x2\x2\x2\x2A88\x2A8A\x3\x2\x2\x2\x2A89\x2A8B\x5\x37E\x1C0\x2\x2A8A"+
		"\x2A89\x3\x2\x2\x2\x2A8A\x2A8B\x3\x2\x2\x2\x2A8B\x2A91\x3\x2\x2\x2\x2A8C"+
		"\x2A8F\a\x167\x2\x2\x2A8D\x2A90\x5\x4D2\x26A\x2\x2A8E\x2A90\a\x282\x2"+
		"\x2\x2A8F\x2A8D\x3\x2\x2\x2\x2A8F\x2A8E\x3\x2\x2\x2\x2A90\x2A92\x3\x2"+
		"\x2\x2\x2A91\x2A8C\x3\x2\x2\x2\x2A91\x2A92\x3\x2\x2\x2\x2A92\x37D\x3\x2"+
		"\x2\x2\x2A93\x2A9B\a\x294\x2\x2\x2A94\x2A95\x5\x4D2\x26A\x2\x2A95\x2A96"+
		"\a\x481\x2\x2\x2A96\x2A97\x5\x4D2\x26A\x2\x2A97\x2A98\a\x482\x2\x2\x2A98"+
		"\x2A9C\x3\x2\x2\x2\x2A99\x2A9C\x5\x4D2\x26A\x2\x2A9A\x2A9C\a\xFB\x2\x2"+
		"\x2A9B\x2A94\x3\x2\x2\x2\x2A9B\x2A99\x3\x2\x2\x2\x2A9B\x2A9A\x3\x2\x2"+
		"\x2\x2A9C\x37F\x3\x2\x2\x2\x2A9D\x2A9E\a\xB6\x2\x2\x2A9E\x2AA0\x5\x4D2"+
		"\x26A\x2\x2A9F\x2A9D\x3\x2\x2\x2\x2A9F\x2AA0\x3\x2\x2\x2\x2AA0\x2AD5\x3"+
		"\x2\x2\x2\x2AA1\x2AA2\a\x2D9\x2\x2\x2AA2\x2AA5\a\x1F2\x2\x2\x2AA3\x2AA5"+
		"\a\x40D\x2\x2\x2AA4\x2AA1\x3\x2\x2\x2\x2AA4\x2AA3\x3\x2\x2\x2\x2AA5\x2AA7"+
		"\x3\x2\x2\x2\x2AA6\x2AA8\x5\x4AC\x257\x2\x2AA7\x2AA6\x3\x2\x2\x2\x2AA7"+
		"\x2AA8\x3\x2\x2\x2\x2AA8\x2AA9\x3\x2\x2\x2\x2AA9\x2AAA\a\x481\x2\x2\x2AAA"+
		"\x2AAB\x5\x4A0\x251\x2\x2AAB\x2AAD\a\x482\x2\x2\x2AAC\x2AAE\x5\x392\x1CA"+
		"\x2\x2AAD\x2AAC\x3\x2\x2\x2\x2AAD\x2AAE\x3\x2\x2\x2\x2AAE\x2AB1\x3\x2"+
		"\x2\x2\x2AAF\x2AB0\a\x294\x2\x2\x2AB0\x2AB2\x5\x4D2\x26A\x2\x2AB1\x2AAF"+
		"\x3\x2\x2\x2\x2AB1\x2AB2\x3\x2\x2\x2\x2AB2\x2AD6\x3\x2\x2\x2\x2AB3\x2AB7"+
		"\a\x87\x2\x2\x2AB4\x2AB5\a\x271\x2\x2\x2AB5\x2AB6\a\x172\x2\x2\x2AB6\x2AB8"+
		"\a\x326\x2\x2\x2AB7\x2AB4\x3\x2\x2\x2\x2AB7\x2AB8\x3\x2\x2\x2\x2AB8\x2AB9"+
		"\x3\x2\x2\x2\x2AB9\x2ABA\a\x481\x2\x2\x2ABA\x2ABB\x5\x3C0\x1E1\x2\x2ABB"+
		"\x2ABC\a\x482\x2\x2\x2ABC\x2AD6\x3\x2\x2\x2\x2ABD\x2ABE\a\xF9\x2\x2\x2ABE"+
		"\x2ABF\x5\x382\x1C2\x2\x2ABF\x2AC0\a\x172\x2\x2\x2AC0\x2AC1\x5\x4D2\x26A"+
		"\x2\x2AC1\x2AD6\x3\x2\x2\x2\x2AC2\x2AC3\a\x17A\x2\x2\x2AC3\x2AC4\a\x1F2"+
		"\x2\x2\x2AC4\x2AC5\a\x481\x2\x2\x2AC5\x2AC6\x5\x4A6\x254\x2\x2AC6\x2AC7"+
		"\a\x482\x2\x2\x2AC7\x2AC8\a\x314\x2\x2\x2AC8\x2ACD\x5\x492\x24A\x2\x2AC9"+
		"\x2ACA\a\x481\x2\x2\x2ACA\x2ACB\x5\x4A6\x254\x2\x2ACB\x2ACC\a\x482\x2"+
		"\x2\x2ACC\x2ACE\x3\x2\x2\x2\x2ACD\x2AC9\x3\x2\x2\x2\x2ACD\x2ACE\x3\x2"+
		"\x2\x2\x2ACE\x2AD0\x3\x2\x2\x2\x2ACF\x2AD1\x5\x38C\x1C7\x2\x2AD0\x2ACF"+
		"\x3\x2\x2\x2\x2AD0\x2AD1\x3\x2\x2\x2\x2AD1\x2AD3\x3\x2\x2\x2\x2AD2\x2AD4"+
		"\x5\x38E\x1C8\x2\x2AD3\x2AD2\x3\x2\x2\x2\x2AD3\x2AD4\x3\x2\x2\x2\x2AD4"+
		"\x2AD6\x3\x2\x2\x2\x2AD5\x2AA4\x3\x2\x2\x2\x2AD5\x2AB3\x3\x2\x2\x2\x2AD5"+
		"\x2ABD\x3\x2\x2\x2\x2AD5\x2AC2\x3\x2\x2\x2\x2AD6\x381\x3\x2\x2\x2\x2AD7"+
		"\x2B08\a\x281\x2\x2\x2AD8\x2B08\a\x46B\x2\x2\x2AD9\x2B08\a\x48C\x2\x2"+
		"\x2ADA\x2B08\x5\x422\x212\x2\x2ADB\x2ADD\a\x48D\x2\x2\x2ADC\x2ADB\x3\x2"+
		"\x2\x2\x2ADC\x2ADD\x3\x2\x2\x2\x2ADD\x2ADF\x3\x2\x2\x2\x2ADE\x2AE0\a\x469"+
		"\x2\x2\x2ADF\x2ADE\x3\x2\x2\x2\x2AE0\x2AE1\x3\x2\x2\x2\x2AE1\x2ADF\x3"+
		"\x2\x2\x2\x2AE1\x2AE2\x3\x2\x2\x2\x2AE2\x2B08\x3\x2\x2\x2\x2AE3\x2AE4"+
		"\a\x481\x2\x2\x2AE4\x2AE5\x5\x382\x1C2\x2\x2AE5\x2AE6\a\x482\x2\x2\x2AE6"+
		"\x2B08\x3\x2\x2\x2\x2AE7\x2AE8\a\x481\x2\x2\x2AE8\x2AE9\a\x481\x2\x2\x2AE9"+
		"\x2AEB\a\x481\x2\x2\x2AEA\x2AEC\a\x469\x2\x2\x2AEB\x2AEA\x3\x2\x2\x2\x2AEC"+
		"\x2AED\x3\x2\x2\x2\x2AED\x2AEB\x3\x2\x2\x2\x2AED\x2AEE\x3\x2\x2\x2\x2AEE"+
		"\x2AEF\x3\x2\x2\x2\x2AEF\x2AF0\a\x482\x2\x2\x2AF0\x2AF1\a\x48A\x2\x2\x2AF1"+
		"\x2AF3\a\x481\x2\x2\x2AF2\x2AF4\a\x469\x2\x2\x2AF3\x2AF2\x3\x2\x2\x2\x2AF4"+
		"\x2AF5\x3\x2\x2\x2\x2AF5\x2AF3\x3\x2\x2\x2\x2AF5\x2AF6\x3\x2\x2\x2\x2AF6"+
		"\x2AF7\x3\x2\x2\x2\x2AF7\x2AF8\a\x482\x2\x2\x2AF8\x2AF9\a\x482\x2\x2\x2AF9"+
		"\x2AFA\a\x48A\x2\x2\x2AFA\x2AFC\a\x481\x2\x2\x2AFB\x2AFD\a\x469\x2\x2"+
		"\x2AFC\x2AFB\x3\x2\x2\x2\x2AFD\x2AFE\x3\x2\x2\x2\x2AFE\x2AFC\x3\x2\x2"+
		"\x2\x2AFE\x2AFF\x3\x2\x2\x2\x2AFF\x2B00\x3\x2\x2\x2\x2B00\x2B01\a\x482"+
		"\x2\x2\x2B01\x2B08\a\x482\x2\x2\x2B02\x2B03\a\x25F\x2\x2\x2B03\x2B04\a"+
		"\x421\x2\x2\x2B04\x2B05\a\x172\x2\x2\x2B05\x2B08\x5\x492\x24A\x2\x2B06"+
		"\x2B08\x5\x3A6\x1D4\x2\x2B07\x2AD7\x3\x2\x2\x2\x2B07\x2AD8\x3\x2\x2\x2"+
		"\x2B07\x2AD9\x3\x2\x2\x2\x2B07\x2ADA\x3\x2\x2\x2\x2B07\x2ADC\x3\x2\x2"+
		"\x2\x2B07\x2AE3\x3\x2\x2\x2\x2B07\x2AE7\x3\x2\x2\x2\x2B07\x2B02\x3\x2"+
		"\x2\x2\x2B07\x2B06\x3\x2\x2\x2\x2B08\x383\x3\x2\x2\x2\x2B09\x2B0A\x5\x4D2"+
		"\x26A\x2\x2B0A\x2B0B\a\x3EB\x2\x2\x2B0B\x2B0C\x5\x4D2\x26A\x2\x2B0C\x385"+
		"\x3\x2\x2\x2\x2B0D\x2B0E\a\x438\x2\x2\x2B0E\x2B0F\a\x16C\x2\x2\x2B0F\x2B10"+
		"\a\x46F\x2\x2\x2B10\x2B12\a\x469\x2\x2\x2B11\x2B0D\x3\x2\x2\x2\x2B11\x2B12"+
		"\x3\x2\x2\x2\x2B12\x2B14\x3\x2\x2\x2\x2B13\x2B15\x5\x390\x1C9\x2\x2B14"+
		"\x2B13\x3\x2\x2\x2\x2B14\x2B15\x3\x2\x2\x2\x2B15\x2B17\x3\x2\x2\x2\x2B16"+
		"\x2B18\x5\x37E\x1C0\x2\x2B17\x2B16\x3\x2\x2\x2\x2B17\x2B18\x3\x2\x2\x2"+
		"\x2B18\x387\x3\x2\x2\x2\x2B19\x2B1A\a\x314\x2\x2\x2B1A\x2B1B\x5\x492\x24A"+
		"\x2\x2B1B\x2B1C\a\x481\x2\x2\x2B1C\x2B1D\x5\x4A6\x254\x2\x2B1D\x2B22\a"+
		"\x482\x2\x2\x2B1E\x2B21\x5\x38C\x1C7\x2\x2B1F\x2B21\x5\x38E\x1C8\x2\x2B20"+
		"\x2B1E\x3\x2\x2\x2\x2B20\x2B1F\x3\x2\x2\x2\x2B21\x2B24\x3\x2\x2\x2\x2B22"+
		"\x2B20\x3\x2\x2\x2\x2B22\x2B23\x3\x2\x2\x2\x2B23\x2B28\x3\x2\x2\x2\x2B24"+
		"\x2B22\x3\x2\x2\x2\x2B25\x2B26\a\x271\x2\x2\x2B26\x2B27\a\x172\x2\x2\x2B27"+
		"\x2B29\a\x326\x2\x2\x2B28\x2B25\x3\x2\x2\x2\x2B28\x2B29\x3\x2\x2\x2\x2B29"+
		"\x389\x3\x2\x2\x2\x2B2A\x2B2E\a\x87\x2\x2\x2B2B\x2B2C\a\x271\x2\x2\x2B2C"+
		"\x2B2D\a\x172\x2\x2\x2B2D\x2B2F\a\x326\x2\x2\x2B2E\x2B2B\x3\x2\x2\x2\x2B2E"+
		"\x2B2F\x3\x2\x2\x2\x2B2F\x2B30\x3\x2\x2\x2\x2B30\x2B31\a\x481\x2\x2\x2B31"+
		"\x2B32\x5\x3C0\x1E1\x2\x2B32\x2B33\a\x482\x2\x2\x2B33\x38B\x3\x2\x2\x2"+
		"\x2B34\x2B35\a\x294\x2\x2\x2B35\x2B3D\a\x102\x2\x2\x2B36\x2B37\a\x260"+
		"\x2\x2\x2B37\x2B3E\a\n\x2\x2\x2B38\x2B3E\av\x2\x2\x2B39\x2B3A\a\x386\x2"+
		"\x2\x2B3A\x2B3E\a\x281\x2\x2\x2B3B\x2B3C\a\x386\x2\x2\x2B3C\x2B3E\a\xF9"+
		"\x2\x2\x2B3D\x2B36\x3\x2\x2\x2\x2B3D\x2B38\x3\x2\x2\x2\x2B3D\x2B39\x3"+
		"\x2\x2\x2\x2B3D\x2B3B\x3\x2\x2\x2\x2B3E\x38D\x3\x2\x2\x2\x2B3F\x2B40\a"+
		"\x294\x2\x2\x2B40\x2B48\a\x415\x2\x2\x2B41\x2B42\a\x260\x2\x2\x2B42\x2B49"+
		"\a\n\x2\x2\x2B43\x2B49\av\x2\x2\x2B44\x2B45\a\x386\x2\x2\x2B45\x2B49\a"+
		"\x281\x2\x2\x2B46\x2B47\a\x386\x2\x2\x2B47\x2B49\a\xF9\x2\x2\x2B48\x2B41"+
		"\x3\x2\x2\x2\x2B48\x2B43\x3\x2\x2\x2\x2B48\x2B44\x3\x2\x2\x2\x2B48\x2B46"+
		"\x3\x2\x2\x2\x2B49\x38F\x3\x2\x2\x2\x2B4A\x2B4B\a\x438\x2\x2\x2B4B\x2B4C"+
		"\a\x481\x2\x2\x2B4C\x2B51\x5\x396\x1CC\x2\x2B4D\x2B4E\a\x485\x2\x2\x2B4E"+
		"\x2B50\x5\x396\x1CC\x2\x2B4F\x2B4D\x3\x2\x2\x2\x2B50\x2B53\x3\x2\x2\x2"+
		"\x2B51\x2B4F\x3\x2\x2\x2\x2B51\x2B52\x3\x2\x2\x2\x2B52\x2B54\x3\x2\x2"+
		"\x2\x2B53\x2B51\x3\x2\x2\x2\x2B54\x2B55\a\x482\x2\x2\x2B55\x391\x3\x2"+
		"\x2\x2\x2B56\x2B57\a\x438\x2\x2\x2B57\x2B58\a\x481\x2\x2\x2B58\x2B5D\x5"+
		"\x394\x1CB\x2\x2B59\x2B5A\a\x485\x2\x2\x2B5A\x2B5C\x5\x394\x1CB\x2\x2B5B"+
		"\x2B59\x3\x2\x2\x2\x2B5C\x2B5F\x3\x2\x2\x2\x2B5D\x2B5B\x3\x2\x2\x2\x2B5D"+
		"\x2B5E\x3\x2\x2\x2\x2B5E\x2B60\x3\x2\x2\x2\x2B5F\x2B5D\x3\x2\x2\x2\x2B60"+
		"\x2B61\a\x482\x2\x2\x2B61\x393\x3\x2\x2\x2\x2B62\x2B65\x5\x4D4\x26B\x2"+
		"\x2B63\x2B65\x5\x4D0\x269\x2\x2B64\x2B62\x3\x2\x2\x2\x2B64\x2B63\x3\x2"+
		"\x2\x2\x2B65\x2B66\x3\x2\x2\x2\x2B66\x2B6B\a\x46F\x2\x2\x2B67\x2B6C\x5"+
		"\x4D4\x26B\x2\x2B68\x2B6C\x5\x4D0\x269\x2\x2B69\x2B6C\x5\x4AA\x256\x2"+
		"\x2B6A\x2B6C\a\x469\x2\x2\x2B6B\x2B67\x3\x2\x2\x2\x2B6B\x2B68\x3\x2\x2"+
		"\x2\x2B6B\x2B69\x3\x2\x2\x2\x2B6B\x2B6A\x3\x2\x2\x2\x2B6C\x395\x3\x2\x2"+
		"\x2\x2B6D\x2B6E\a\x2B0\x2\x2\x2B6E\x2B6F\a\x46F\x2\x2\x2B6F\x2BC4\x5\x4AA"+
		"\x256\x2\x2B70\x2B71\a\x16C\x2\x2\x2B71\x2B72\a\x46F\x2\x2\x2B72\x2BC4"+
		"\a\x469\x2\x2\x2B73\x2B74\a\x1B9\x2\x2\x2B74\x2B75\a\x46F\x2\x2\x2B75"+
		"\x2BC4\x5\x4AA\x256\x2\x2B76\x2B77\a\x3B6\x2\x2\x2B77\x2B78\a\x46F\x2"+
		"\x2\x2B78\x2BC4\x5\x4AA\x256\x2\x2B79\x2B7A\a\x1E\x2\x2\x2B7A\x2B7B\a"+
		"\x46F\x2\x2\x2B7B\x2BC4\x5\x4AA\x256\x2\x2B7C\x2B7D\a\x1D\x2\x2\x2B7D"+
		"\x2B7E\a\x46F\x2\x2\x2B7E\x2BC4\x5\x4AA\x256\x2\x2B7F\x2B80\a\x2A3\x2"+
		"\x2\x2B80\x2B81\a\x46F\x2\x2\x2B81\x2BC4\x5\x4AA\x256\x2\x2B82\x2B83\a"+
		"\x39F\x2\x2\x2B83\x2B84\a\x46F\x2\x2\x2B84\x2BC4\x5\x4AA\x256\x2\x2B85"+
		"\x2B86\a\x224\x2\x2\x2B86\x2B87\a\x46F\x2\x2\x2B87\x2BC4\a\x469\x2\x2"+
		"\x2B88\x2B89\a\xE4\x2\x2\x2B89\x2B8A\a\x46F\x2\x2\x2B8A\x2B8C\t\x42\x2"+
		"\x2\x2B8B\x2B8D\x5\x216\x10C\x2\x2B8C\x2B8B\x3\x2\x2\x2\x2B8C\x2B8D\x3"+
		"\x2\x2\x2\x2B8D\x2BC4\x3\x2\x2\x2\x2B8E\x2B8F\a\x447\x2\x2\x2B8F\x2B90"+
		"\a\x46F\x2\x2\x2B90\x2B92\x5\x4AA\x256\x2\x2B91\x2B93\x5\x216\x10C\x2"+
		"\x2B92\x2B91\x3\x2\x2\x2\x2B92\x2B93\x3\x2\x2\x2\x2B93\x2BC4\x3\x2\x2"+
		"\x2\x2B94\x2B95\a\x118\x2\x2\x2B95\x2B96\a\x46F\x2\x2\x2B96\x2B97\a\x1A0"+
		"\x2\x2\x2B97\x2B98\a\x481\x2\x2\x2B98\x2B99\x5\x4D2\x26A\x2\x2B99\x2B9A"+
		"\a\x482\x2\x2\x2B9A\x2BC4\x3\x2\x2\x2\x2B9B\x2B9C\a\x9A\x2\x2\x2B9C\x2B9D"+
		"\a\x1C7\x2\x2\x2B9D\x2B9E\a\x481\x2\x2\x2B9E\x2BA0\x5\x4D2\x26A\x2\x2B9F"+
		"\x2BA1\tM\x2\x2\x2BA0\x2B9F\x3\x2\x2\x2\x2BA0\x2BA1\x3\x2\x2\x2\x2BA1"+
		"\x2BA9\x3\x2\x2\x2\x2BA2\x2BA3\a\x485\x2\x2\x2BA3\x2BA5\x5\x4D2\x26A\x2"+
		"\x2BA4\x2BA6\tM\x2\x2\x2BA5\x2BA4\x3\x2\x2\x2\x2BA5\x2BA6\x3\x2\x2\x2"+
		"\x2BA6\x2BA8\x3\x2\x2\x2\x2BA7\x2BA2\x3\x2\x2\x2\x2BA8\x2BAB\x3\x2\x2"+
		"\x2\x2BA9\x2BA7\x3\x2\x2\x2\x2BA9\x2BAA\x3\x2\x2\x2\x2BAA\x2BAC\x3\x2"+
		"\x2\x2\x2BAB\x2BA9\x3\x2\x2\x2\x2BAC\x2BAD\a\x482\x2\x2\x2BAD\x2BC4\x3"+
		"\x2\x2\x2\x2BAE\x2BAF\a\x295\x2\x2\x2BAF\x2BB8\a\x46F\x2\x2\x2BB0\x2BB5"+
		"\a\x294\x2\x2\x2BB1\x2BB2\a\x481\x2\x2\x2BB2\x2BB3\x5\x264\x133\x2\x2BB3"+
		"\x2BB4\a\x482\x2\x2\x2BB4\x2BB6\x3\x2\x2\x2\x2BB5\x2BB1\x3\x2\x2\x2\x2BB5"+
		"\x2BB6\x3\x2\x2\x2\x2BB6\x2BB9\x3\x2\x2\x2\x2BB7\x2BB9\a\x28E\x2\x2\x2BB8"+
		"\x2BB0\x3\x2\x2\x2\x2BB8\x2BB7\x3\x2\x2\x2\x2BB9\x2BC4\x3\x2\x2\x2\x2BBA"+
		"\x2BBB\a\x336\x2\x2\x2BBB\x2BBC\a\x46F\x2\x2\x2BBC\x2BC4\x5\x4AA\x256"+
		"\x2\x2BBD\x2BBE\a\x22C\x2\x2\x2BBE\x2BBF\a\x46F\x2\x2\x2BBF\x2BC1\a\x469"+
		"\x2\x2\x2BC0\x2BC2\a\x245\x2\x2\x2BC1\x2BC0\x3\x2\x2\x2\x2BC1\x2BC2\x3"+
		"\x2\x2\x2\x2BC2\x2BC4\x3\x2\x2\x2\x2BC3\x2B6D\x3\x2\x2\x2\x2BC3\x2B70"+
		"\x3\x2\x2\x2\x2BC3\x2B73\x3\x2\x2\x2\x2BC3\x2B76\x3\x2\x2\x2\x2BC3\x2B79"+
		"\x3\x2\x2\x2\x2BC3\x2B7C\x3\x2\x2\x2\x2BC3\x2B7F\x3\x2\x2\x2\x2BC3\x2B82"+
		"\x3\x2\x2\x2\x2BC3\x2B85\x3\x2\x2\x2\x2BC3\x2B88\x3\x2\x2\x2\x2BC3\x2B8E"+
		"\x3\x2\x2\x2\x2BC3\x2B94\x3\x2\x2\x2\x2BC3\x2B9B\x3\x2\x2\x2\x2BC3\x2BAE"+
		"\x3\x2\x2\x2\x2BC3\x2BBA\x3\x2\x2\x2\x2BC3\x2BBD\x3\x2\x2\x2\x2BC4\x397"+
		"\x3\x2\x2\x2\x2BC5\x2BC6\a\xF6\x2\x2\x2BC6\x2BC7\x5\x4A8\x255\x2\x2BC7"+
		"\x2BD5\a\xD8\x2\x2\x2BC8\x2BD3\x5\x39A\x1CE\x2\x2BC9\x2BD1\a\x172\x2\x2"+
		"\x2BCA\x2BCD\a\x415\x2\x2\x2BCB\x2BCC\a\x28D\x2\x2\x2BCC\x2BCE\x5\x4A6"+
		"\x254\x2\x2BCD\x2BCB\x3\x2\x2\x2\x2BCD\x2BCE\x3\x2\x2\x2\x2BCE\x2BD2\x3"+
		"\x2\x2\x2\x2BCF\x2BD0\a\x301\x2\x2\x2BD0\x2BD2\a\x296\x2\x2\x2BD1\x2BCA"+
		"\x3\x2\x2\x2\x2BD1\x2BCF\x3\x2\x2\x2\x2BD1\x2BD2\x3\x2\x2\x2\x2BD2\x2BD4"+
		"\x3\x2\x2\x2\x2BD3\x2BC9\x3\x2\x2\x2\x2BD3\x2BD4\x3\x2\x2\x2\x2BD4\x2BD6"+
		"\x3\x2\x2\x2\x2BD5\x2BC8\x3\x2\x2\x2\x2BD5\x2BD6\x3\x2\x2\x2\x2BD6\x2BEE"+
		"\x3\x2\x2\x2\x2BD7\x2BD9\t\x83\x2\x2\x2BD8\x2BD7\x3\x2\x2\x2\x2BD8\x2BD9"+
		"\x3\x2\x2\x2\x2BD9\x2BDB\x3\x2\x2\x2\x2BDA\x2BDC\a\x362\x2\x2\x2BDB\x2BDA"+
		"\x3\x2\x2\x2\x2BDB\x2BDC\x3\x2\x2\x2\x2BDC\x2BDD\x3\x2\x2\x2\x2BDD\x2BDE"+
		"\a\xD8\x2\x2\x2BDE\x2BDF\a\x172\x2\x2\x2BDF\x2BE8\x5\x1E4\xF3\x2\x2BE0"+
		"\x2BE6\a\x172\x2\x2\x2BE1\x2BE2\a\x301\x2\x2\x2BE2\x2BE7\a\x296\x2\x2"+
		"\x2BE3\x2BE7\a\x415\x2\x2\x2BE4\x2BE5\a\x28D\x2\x2\x2BE5\x2BE7\x5\x4A6"+
		"\x254\x2\x2BE6\x2BE1\x3\x2\x2\x2\x2BE6\x2BE3\x3\x2\x2\x2\x2BE6\x2BE4\x3"+
		"\x2\x2\x2\x2BE7\x2BE9\x3\x2\x2\x2\x2BE8\x2BE0\x3\x2\x2\x2\x2BE8\x2BE9"+
		"\x3\x2\x2\x2\x2BE9\x2BEB\x3\x2\x2\x2\x2BEA\x2BEC\a\x486\x2\x2\x2BEB\x2BEA"+
		"\x3\x2\x2\x2\x2BEB\x2BEC\x3\x2\x2\x2\x2BEC\x2BEE\x3\x2\x2\x2\x2BED\x2BC5"+
		"\x3\x2\x2\x2\x2BED\x2BD8\x3\x2\x2\x2\x2BEE\x399\x3\x2\x2\x2\x2BEF\x2BF1"+
		"\x5\x39C\x1CF\x2\x2BF0\x2BEF\x3\x2\x2\x2\x2BF1\x2BF4\x3\x2\x2\x2\x2BF2"+
		"\x2BF0\x3\x2\x2\x2\x2BF2\x2BF3\x3\x2\x2\x2\x2BF3\x2BF5\x3\x2\x2\x2\x2BF4"+
		"\x2BF2\x3\x2\x2\x2\x2BF5\x2BF6\a\x172\x2\x2\x2BF6\x2BF7\x5\x1E4\xF3\x2"+
		"\x2BF7\x39B\x3\x2\x2\x2\x2BF8\x2BFE\tU\x2\x2\x2BF9\x2BFE\t\x84\x2\x2\x2BFA"+
		"\x2BFE\t\x85\x2\x2\x2BFB\x2BFE\t\x86\x2\x2\x2BFC\x2BFE\a\x407\x2\x2\x2BFD"+
		"\x2BF8\x3\x2\x2\x2\x2BFD\x2BF9\x3\x2\x2\x2\x2BFD\x2BFA\x3\x2\x2\x2\x2BFD"+
		"\x2BFB\x3\x2\x2\x2\x2BFD\x2BFC\x3\x2\x2\x2\x2BFE\x39D\x3\x2\x2\x2\x2BFF"+
		"\x2C09\a\x15B\x2\x2\x2C00\x2C07\a\x25F\x2\x2\x2C01\x2C07\a\x2DC\x2\x2"+
		"\x2C02\x2C07\a\x16E\x2\x2\x2C03\x2C07\a\x1FB\x2\x2\x2C04\x2C05\t\x87\x2"+
		"\x2\x2C05\x2C07\x5\x3A6\x1D4\x2\x2C06\x2C00\x3\x2\x2\x2\x2C06\x2C01\x3"+
		"\x2\x2\x2\x2C06\x2C02\x3\x2\x2\x2\x2C06\x2C03\x3\x2\x2\x2\x2C06\x2C04"+
		"\x3\x2\x2\x2\x2C06\x2C07\x3\x2\x2\x2\x2C07\x2C08\x3\x2\x2\x2\x2C08\x2C0A"+
		"\a\x181\x2\x2\x2C09\x2C06\x3\x2\x2\x2\x2C09\x2C0A\x3\x2\x2\x2\x2C0A\x2C0C"+
		"\x3\x2\x2\x2\x2C0B\x2C0D\a\x194\x2\x2\x2C0C\x2C0B\x3\x2\x2\x2\x2C0C\x2C0D"+
		"\x3\x2\x2\x2\x2C0D\x2C0E\x3\x2\x2\x2\x2C0E\x2C18\x5\x4A8\x255\x2\x2C0F"+
		"\x2C10\a\x1D7\x2\x2\x2C10\x2C15\a\x468\x2\x2\x2C11\x2C12\a\x485\x2\x2"+
		"\x2C12\x2C14\a\x468\x2\x2\x2C13\x2C11\x3\x2\x2\x2\x2C14\x2C17\x3\x2\x2"+
		"\x2\x2C15\x2C13\x3\x2\x2\x2\x2C15\x2C16\x3\x2\x2\x2\x2C16\x2C19\x3\x2"+
		"\x2\x2\x2C17\x2C15\x3\x2\x2\x2\x2C18\x2C0F\x3\x2\x2\x2\x2C18\x2C19\x3"+
		"\x2\x2\x2\x2C19\x2C1B\x3\x2\x2\x2\x2C1A\x2C1C\a\x486\x2\x2\x2C1B\x2C1A"+
		"\x3\x2\x2\x2\x2C1B\x2C1C\x3\x2\x2\x2\x2C1C\x39F\x3\x2\x2\x2\x2C1D\x2C1E"+
		"\a\x386\x2\x2\x2C1E\x2C22\x5\x4D2\x26A\x2\x2C1F\x2C23\x5\x4D2\x26A\x2"+
		"\x2C20\x2C23\x5\x3A4\x1D3\x2\x2C21\x2C23\x5\x4AA\x256\x2\x2C22\x2C1F\x3"+
		"\x2\x2\x2\x2C22\x2C20\x3\x2\x2\x2\x2C22\x2C21\x3\x2\x2\x2\x2C23\x2C25"+
		"\x3\x2\x2\x2\x2C24\x2C26\a\x486\x2\x2\x2C25\x2C24\x3\x2\x2\x2\x2C25\x2C26"+
		"\x3\x2\x2\x2\x2C26\x2C61\x3\x2\x2\x2\x2C27\x2C28\a\x386\x2\x2\x2C28\x2C29"+
		"\a\x3B4\x2\x2\x2C29\x2C2A\t\x88\x2\x2\x2C2A\x2C2C\x5\x4AA\x256\x2\x2C2B"+
		"\x2C2D\a\x486\x2\x2\x2C2C\x2C2B\x3\x2\x2\x2\x2C2C\x2C2D\x3\x2\x2\x2\x2C2D"+
		"\x2C61\x3\x2\x2\x2\x2C2E\x2C2F\a\x386\x2\x2\x2C2F\x2C30\a\x348\x2\x2\x2C30"+
		"\x2C32\t\x2\x2\x2\x2C31\x2C33\a\x486\x2\x2\x2C32\x2C31\x3\x2\x2\x2\x2C32"+
		"\x2C33\x3\x2\x2\x2\x2C33\x2C61\x3\x2\x2\x2\x2C34\x2C35\a\x386\x2\x2\x2C35"+
		"\x2C36\a\x3E3\x2\x2\x2C36\x2C38\a\x469\x2\x2\x2C37\x2C39\a\x486\x2\x2"+
		"\x2C38\x2C37\x3\x2\x2\x2\x2C38\x2C39\x3\x2\x2\x2\x2C39\x2C61\x3\x2\x2"+
		"\x2\x2C3A\x2C3B\a\x386\x2\x2\x2C3B\x2C3C\a\x3F3\x2\x2\x2C3C\x2C3D\a\x1DF"+
		"\x2\x2\x2C3D\x2C47\a\x202\x2\x2\x2C3E\x2C3F\a\x301\x2\x2\x2C3F\x2C48\a"+
		"\x40A\x2\x2\x2C40\x2C41\a\x301\x2\x2\x2C41\x2C48\a\xA8\x2\x2\x2C42\x2C43"+
		"\a\x321\x2\x2\x2C43\x2C48\a\x301\x2\x2\x2C44\x2C48\a\x39C\x2\x2\x2C45"+
		"\x2C48\a\x379\x2\x2\x2C46\x2C48\a\x469\x2\x2\x2C47\x2C3E\x3\x2\x2\x2\x2C47"+
		"\x2C40\x3\x2\x2\x2\x2C47\x2C42\x3\x2\x2\x2\x2C47\x2C44\x3\x2\x2\x2\x2C47"+
		"\x2C45\x3\x2\x2\x2\x2C47\x2C46\x3\x2\x2\x2\x2C48\x2C4A\x3\x2\x2\x2\x2C49"+
		"\x2C4B\a\x486\x2\x2\x2C4A\x2C49\x3\x2\x2\x2\x2C4A\x2C4B\x3\x2\x2\x2\x2C4B"+
		"\x2C61\x3\x2\x2\x2\x2C4C\x2C4D\a\x386\x2\x2\x2C4D\x2C4E\a\x1B2\x2\x2\x2C4E"+
		"\x2C4F\x5\x492\x24A\x2\x2C4F\x2C51\x5\x4AA\x256\x2\x2C50\x2C52\a\x486"+
		"\x2\x2\x2C51\x2C50\x3\x2\x2\x2\x2C51\x2C52\x3\x2\x2\x2\x2C52\x2C61\x3"+
		"\x2\x2\x2\x2C53\x2C54\a\x386\x2\x2\x2C54\x2C59\x5\x3A2\x1D2\x2\x2C55\x2C56"+
		"\a\x485\x2\x2\x2C56\x2C58\x5\x3A2\x1D2\x2\x2C57\x2C55\x3\x2\x2\x2\x2C58"+
		"\x2C5B\x3\x2\x2\x2\x2C59\x2C57\x3\x2\x2\x2\x2C59\x2C5A\x3\x2\x2\x2\x2C5A"+
		"\x2C5C\x3\x2\x2\x2\x2C5B\x2C59\x3\x2\x2\x2\x2C5C\x2C5D\x5\x4AA\x256\x2"+
		"\x2C5D\x2C61\x3\x2\x2\x2\x2C5E\x2C5F\a\x386\x2\x2\x2C5F\x2C61\x5\x442"+
		"\x222\x2\x2C60\x2C1D\x3\x2\x2\x2\x2C60\x2C27\x3\x2\x2\x2\x2C60\x2C2E\x3"+
		"\x2\x2\x2\x2C60\x2C34\x3\x2\x2\x2\x2C60\x2C3A\x3\x2\x2\x2\x2C60\x2C4C"+
		"\x3\x2\x2\x2\x2C60\x2C53\x3\x2\x2\x2\x2C60\x2C5E\x3\x2\x2\x2\x2C61\x3A1"+
		"\x3\x2\x2\x2\x2C62\x2C63\t\x89\x2\x2\x2C63\x3A3\x3\x2\x2\x2\x2C64\x2C67"+
		"\x5\x4CA\x266\x2\x2C65\x2C67\a\x468\x2\x2\x2C66\x2C64\x3\x2\x2\x2\x2C66"+
		"\x2C65\x3\x2\x2\x2\x2C67\x3A5\x3\x2\x2\x2\x2C68\x2C69\b\x1D4\x1\x2\x2C69"+
		"\x2C72\x5\x3AC\x1D7\x2\x2C6A\x2C72\x5\x422\x212\x2\x2C6B\x2C72\x5\x3AE"+
		"\x1D8\x2\x2C6C\x2C72\x5\x49E\x250\x2\x2C6D\x2C72\x5\x3B2\x1DA\x2\x2C6E"+
		"\x2C72\x5\x3B0\x1D9\x2\x2C6F\x2C72\x5\x474\x23B\x2\x2C70\x2C72\a\x496"+
		"\x2\x2\x2C71\x2C68\x3\x2\x2\x2\x2C71\x2C6A\x3\x2\x2\x2\x2C71\x2C6B\x3"+
		"\x2\x2\x2\x2C71\x2C6C\x3\x2\x2\x2\x2C71\x2C6D\x3\x2\x2\x2\x2C71\x2C6E"+
		"\x3\x2\x2\x2\x2C71\x2C6F\x3\x2\x2\x2\x2C71\x2C70\x3\x2\x2\x2\x2C72\x2C8B"+
		"\x3\x2\x2\x2\x2C73\x2C74\f\a\x2\x2\x2C74\x2C75\t\x8A\x2\x2\x2C75\x2C8A"+
		"\x5\x3A6\x1D4\b\x2C76\x2C77\f\x6\x2\x2\x2C77\x2C78\t\x8B\x2\x2\x2C78\x2C8A"+
		"\x5\x3A6\x1D4\a\x2C79\x2C7A\f\xE\x2\x2\x2C7A\x2C7F\a\x47C\x2\x2\x2C7B"+
		"\x2C80\x5\x438\x21D\x2\x2C7C\x2C80\x5\x43C\x21F\x2\x2C7D\x2C80\x5\x440"+
		"\x221\x2\x2C7E\x2C80\x5\x444\x223\x2\x2C7F\x2C7B\x3\x2\x2\x2\x2C7F\x2C7C"+
		"\x3\x2\x2\x2\x2C7F\x2C7D\x3\x2\x2\x2\x2C7F\x2C7E\x3\x2\x2\x2\x2C80\x2C8A"+
		"\x3\x2\x2\x2\x2C81\x2C82\f\r\x2\x2\x2C82\x2C83\a\x47C\x2\x2\x2C83\x2C8A"+
		"\x5\x446\x224\x2\x2C84\x2C85\f\f\x2\x2\x2C85\x2C86\a\x9C\x2\x2\x2C86\x2C8A"+
		"\x5\x4D2\x26A\x2\x2C87\x2C88\f\x5\x2\x2\x2C88\x2C8A\x5\x3AA\x1D6\x2\x2C89"+
		"\x2C73\x3\x2\x2\x2\x2C89\x2C76\x3\x2\x2\x2\x2C89\x2C79\x3\x2\x2\x2\x2C89"+
		"\x2C81\x3\x2\x2\x2\x2C89\x2C84\x3\x2\x2\x2\x2C89\x2C87\x3\x2\x2\x2\x2C8A"+
		"\x2C8D\x3\x2\x2\x2\x2C8B\x2C89\x3\x2\x2\x2\x2C8B\x2C8C\x3\x2\x2\x2\x2C8C"+
		"\x3A7\x3\x2\x2\x2\x2C8D\x2C8B\x3\x2\x2\x2\x2C8E\x2C8F\a\x497\x2\x2\x2C8F"+
		"\x3A9\x3\x2\x2\x2\x2C90\x2C91\a\x41\x2\x2\x2C91\x2C92\a\x3E7\x2\x2\x2C92"+
		"\x2C93\a\x449\x2\x2\x2C93\x2C94\x5\x3A6\x1D4\x2\x2C94\x3AB\x3\x2\x2\x2"+
		"\x2C95\x2C9A\a\xF9\x2\x2\x2C96\x2C9A\a\x281\x2\x2\x2C97\x2C9A\a\x468\x2"+
		"\x2\x2C98\x2C9A\x5\x4CA\x266\x2\x2C99\x2C95\x3\x2\x2\x2\x2C99\x2C96\x3"+
		"\x2\x2\x2\x2C99\x2C97\x3\x2\x2\x2\x2C99\x2C98\x3\x2\x2\x2\x2C9A\x3AD\x3"+
		"\x2\x2\x2\x2C9B\x2C9C\aw\x2\x2\x2C9C\x2C9E\x5\x3A6\x1D4\x2\x2C9D\x2C9F"+
		"\x5\x44C\x227\x2\x2C9E\x2C9D\x3\x2\x2\x2\x2C9F\x2CA0\x3\x2\x2\x2\x2CA0"+
		"\x2C9E\x3\x2\x2\x2\x2CA0\x2CA1\x3\x2\x2\x2\x2CA1\x2CA4\x3\x2\x2\x2\x2CA2"+
		"\x2CA3\a\x126\x2\x2\x2CA3\x2CA5\x5\x3A6\x1D4\x2\x2CA4\x2CA2\x3\x2\x2\x2"+
		"\x2CA4\x2CA5\x3\x2\x2\x2\x2CA5\x2CA6\x3\x2\x2\x2\x2CA6\x2CA7\a\x130\x2"+
		"\x2\x2CA7\x2CB5\x3\x2\x2\x2\x2CA8\x2CAA\aw\x2\x2\x2CA9\x2CAB\x5\x44E\x228"+
		"\x2\x2CAA\x2CA9\x3\x2\x2\x2\x2CAB\x2CAC\x3\x2\x2\x2\x2CAC\x2CAA\x3\x2"+
		"\x2\x2\x2CAC\x2CAD\x3\x2\x2\x2\x2CAD\x2CB0\x3\x2\x2\x2\x2CAE\x2CAF\a\x126"+
		"\x2\x2\x2CAF\x2CB1\x5\x3A6\x1D4\x2\x2CB0\x2CAE\x3\x2\x2\x2\x2CB0\x2CB1"+
		"\x3\x2\x2\x2\x2CB1\x2CB2\x3\x2\x2\x2\x2CB2\x2CB3\a\x130\x2\x2\x2CB3\x2CB5"+
		"\x3\x2\x2\x2\x2CB4\x2C9B\x3\x2\x2\x2\x2CB4\x2CA8\x3\x2\x2\x2\x2CB5\x3AF"+
		"\x3\x2\x2\x2\x2CB6\x2CB7\a\x48E\x2\x2\x2CB7\x2CBB\x5\x3A6\x1D4\x2\x2CB8"+
		"\x2CB9\t\x8C\x2\x2\x2CB9\x2CBB\x5\x3A6\x1D4\x2\x2CBA\x2CB6\x3\x2\x2\x2"+
		"\x2CBA\x2CB8\x3\x2\x2\x2\x2CBB\x3B1\x3\x2\x2\x2\x2CBC\x2CBD\a\x481\x2"+
		"\x2\x2CBD\x2CBE\x5\x3A6\x1D4\x2\x2CBE\x2CBF\a\x482\x2\x2\x2CBF\x2CC5\x3"+
		"\x2\x2\x2\x2CC0\x2CC1\a\x481\x2\x2\x2CC1\x2CC2\x5\x3B6\x1DC\x2\x2CC2\x2CC3"+
		"\a\x482\x2\x2\x2CC3\x2CC5\x3\x2\x2\x2\x2CC4\x2CBC\x3\x2\x2\x2\x2CC4\x2CC0"+
		"\x3\x2\x2\x2\x2CC5\x3B3\x3\x2\x2\x2\x2CC6\x2CCF\a\x281\x2\x2\x2CC7\x2CCF"+
		"\x5\x4CA\x266\x2\x2CC8\x2CCF\x5\x422\x212\x2\x2CC9\x2CCF\a\x468\x2\x2"+
		"\x2CCA\x2CCB\a\x481\x2\x2\x2CCB\x2CCC\x5\x3B4\x1DB\x2\x2CCC\x2CCD\a\x482"+
		"\x2\x2\x2CCD\x2CCF\x3\x2\x2\x2\x2CCE\x2CC6\x3\x2\x2\x2\x2CCE\x2CC7\x3"+
		"\x2\x2\x2\x2CCE\x2CC8\x3\x2\x2\x2\x2CCE\x2CC9\x3\x2\x2\x2\x2CCE\x2CCA"+
		"\x3\x2\x2\x2\x2CCF\x3B5\x3\x2\x2\x2\x2CD0\x2CD1\x5\x1E6\xF4\x2\x2CD1\x3B7"+
		"\x3\x2\x2\x2\x2CD2\x2CD3\a\x438\x2\x2\x2CD3\x2CD8\x5\x3BA\x1DE\x2\x2CD4"+
		"\x2CD5\a\x485\x2\x2\x2CD5\x2CD7\x5\x3BA\x1DE\x2\x2CD6\x2CD4\x3\x2\x2\x2"+
		"\x2CD7\x2CDA\x3\x2\x2\x2\x2CD8\x2CD6\x3\x2\x2\x2\x2CD8\x2CD9\x3\x2\x2"+
		"\x2\x2CD9\x3B9\x3\x2\x2\x2\x2CDA\x2CD8\x3\x2\x2\x2\x2CDB\x2CE0\x5\x4D2"+
		"\x26A\x2\x2CDC\x2CDD\a\x481\x2\x2\x2CDD\x2CDE\x5\x4A6\x254\x2\x2CDE\x2CDF"+
		"\a\x482\x2\x2\x2CDF\x2CE1\x3\x2\x2\x2\x2CE0\x2CDC\x3\x2\x2\x2\x2CE0\x2CE1"+
		"\x3\x2\x2\x2\x2CE1\x2CE2\x3\x2\x2\x2\x2CE2\x2CE3\a:\x2\x2\x2CE3\x2CE4"+
		"\a\x481\x2\x2\x2CE4\x2CE5\x5\x1E6\xF4\x2\x2CE5\x2CE6\a\x482\x2\x2\x2CE6"+
		"\x3BB\x3\x2\x2\x2\x2CE7\x2CE8\a\x468\x2\x2\x2CE8\x2CE9\a\x46F\x2\x2\x2CE9"+
		"\x2CEC\x5\x49E\x250\x2\x2CEA\x2CED\a\x46F\x2\x2\x2CEB\x2CED\x5\x4DA\x26E"+
		"\x2\x2CEC\x2CEA\x3\x2\x2\x2\x2CEC\x2CEB\x3\x2\x2\x2\x2CED\x2CEE\x3\x2"+
		"\x2\x2\x2CEE\x2CEF\x5\x3A6\x1D4\x2\x2CEF\x2D01\x3\x2\x2\x2\x2CF0\x2CF3"+
		"\x5\x49E\x250\x2\x2CF1\x2CF3\a\x468\x2\x2\x2CF2\x2CF0\x3\x2\x2\x2\x2CF2"+
		"\x2CF1\x3\x2\x2\x2\x2CF3\x2CF6\x3\x2\x2\x2\x2CF4\x2CF7\a\x46F\x2\x2\x2CF5"+
		"\x2CF7\x5\x4DA\x26E\x2\x2CF6\x2CF4\x3\x2\x2\x2\x2CF6\x2CF5\x3\x2\x2\x2"+
		"\x2CF7\x2CF8\x3\x2\x2\x2\x2CF8\x2D01\x5\x3A6\x1D4\x2\x2CF9\x2CFA\x5\x4D2"+
		"\x26A\x2\x2CFA\x2CFB\a\x47C\x2\x2\x2CFB\x2CFC\x5\x4D2\x26A\x2\x2CFC\x2CFD"+
		"\a\x481\x2\x2\x2CFD\x2CFE\x5\x46A\x236\x2\x2CFE\x2CFF\a\x482\x2\x2\x2CFF"+
		"\x2D01\x3\x2\x2\x2\x2D00\x2CE7\x3\x2\x2\x2\x2D00\x2CF2\x3\x2\x2\x2\x2D00"+
		"\x2CF9\x3\x2\x2\x2\x2D01\x3BD\x3\x2\x2\x2\x2D02\x2D05\x5\x49E\x250\x2"+
		"\x2D03\x2D05\a\x468\x2\x2\x2D04\x2D02\x3\x2\x2\x2\x2D04\x2D03\x3\x2\x2"+
		"\x2\x2D05\x2D08\x3\x2\x2\x2\x2D06\x2D09\a\x46F\x2\x2\x2D07\x2D09\x5\x4DA"+
		"\x26E\x2\x2D08\x2D06\x3\x2\x2\x2\x2D08\x2D07\x3\x2\x2\x2\x2D09\x2D0A\x3"+
		"\x2\x2\x2\x2D0A\x2D13\x5\x3A6\x1D4\x2\x2D0B\x2D0C\x5\x4D2\x26A\x2\x2D0C"+
		"\x2D0D\a\x47C\x2\x2\x2D0D\x2D0E\x5\x4D2\x26A\x2\x2D0E\x2D0F\a\x481\x2"+
		"\x2\x2D0F\x2D10\x5\x46A\x236\x2\x2D10\x2D11\a\x482\x2\x2\x2D11\x2D13\x3"+
		"\x2\x2\x2\x2D12\x2D04\x3\x2\x2\x2\x2D12\x2D0B\x3\x2\x2\x2\x2D13\x3BF\x3"+
		"\x2\x2\x2\x2D14\x2D18\b\x1E1\x1\x2\x2D15\x2D17\a\x271\x2\x2\x2D16\x2D15"+
		"\x3\x2\x2\x2\x2D17\x2D1A\x3\x2\x2\x2\x2D18\x2D16\x3\x2\x2\x2\x2D18\x2D19"+
		"\x3\x2\x2\x2\x2D19\x2D20\x3\x2\x2\x2\x2D1A\x2D18\x3\x2\x2\x2\x2D1B\x2D21"+
		"\x5\x3C2\x1E2\x2\x2D1C\x2D1D\a\x481\x2\x2\x2D1D\x2D1E\x5\x3C0\x1E1\x2"+
		"\x2D1E\x2D1F\a\x482\x2\x2\x2D1F\x2D21\x3\x2\x2\x2\x2D20\x2D1B\x3\x2\x2"+
		"\x2\x2D20\x2D1C\x3\x2\x2\x2\x2D21\x2D2A\x3\x2\x2\x2\x2D22\x2D23\f\x4\x2"+
		"\x2\x2D23\x2D24\a\'\x2\x2\x2D24\x2D29\x5\x3C0\x1E1\x5\x2D25\x2D26\f\x3"+
		"\x2\x2\x2D26\x2D27\a\x2A5\x2\x2\x2D27\x2D29\x5\x3C0\x1E1\x4\x2D28\x2D22"+
		"\x3\x2\x2\x2\x2D28\x2D25\x3\x2\x2\x2\x2D29\x2D2C\x3\x2\x2\x2\x2D2A\x2D28"+
		"\x3\x2\x2\x2\x2D2A\x2D2B\x3\x2\x2\x2\x2D2B\x3C1\x3\x2\x2\x2\x2D2C\x2D2A"+
		"\x3\x2\x2\x2\x2D2D\x2D2E\a\x147\x2\x2\x2D2E\x2D2F\a\x481\x2\x2\x2D2F\x2D30"+
		"\x5\x3B6\x1DC\x2\x2D30\x2D31\a\x482\x2\x2\x2D31\x2D6F\x3\x2\x2\x2\x2D32"+
		"\x2D6F\x5\x428\x215\x2\x2D33\x2D34\x5\x3A6\x1D4\x2\x2D34\x2D35\x5\x4D8"+
		"\x26D\x2\x2D35\x2D36\x5\x3A6\x1D4\x2\x2D36\x2D6F\x3\x2\x2\x2\x2D37\x2D38"+
		"\x5\x3A6\x1D4\x2\x2D38\x2D39\a\x475\x2\x2\x2D39\x2D3A\x5\x3A6\x1D4\x2"+
		"\x2D3A\x2D6F\x3\x2\x2\x2\x2D3B\x2D3C\x5\x3A6\x1D4\x2\x2D3C\x2D3D\x5\x4D8"+
		"\x26D\x2\x2D3D\x2D3E\t\x8D\x2\x2\x2D3E\x2D3F\a\x481\x2\x2\x2D3F\x2D40"+
		"\x5\x3B6\x1DC\x2\x2D40\x2D41\a\x482\x2\x2\x2D41\x2D6F\x3\x2\x2\x2\x2D42"+
		"\x2D46\x5\x3A6\x1D4\x2\x2D43\x2D45\a\x271\x2\x2\x2D44\x2D43\x3\x2\x2\x2"+
		"\x2D45\x2D48\x3\x2\x2\x2\x2D46\x2D44\x3\x2\x2\x2\x2D46\x2D47\x3\x2\x2"+
		"\x2\x2D47\x2D49\x3\x2\x2\x2\x2D48\x2D46\x3\x2\x2\x2\x2D49\x2D4A\a^\x2"+
		"\x2\x2D4A\x2D4B\x5\x3A6\x1D4\x2\x2D4B\x2D4C\a\'\x2\x2\x2D4C\x2D4D\x5\x3A6"+
		"\x1D4\x2\x2D4D\x2D6F\x3\x2\x2\x2\x2D4E\x2D52\x5\x3A6\x1D4\x2\x2D4F\x2D51"+
		"\a\x271\x2\x2\x2D50\x2D4F\x3\x2\x2\x2\x2D51\x2D54\x3\x2\x2\x2\x2D52\x2D50"+
		"\x3\x2\x2\x2\x2D52\x2D53\x3\x2\x2\x2\x2D53\x2D55\x3\x2\x2\x2\x2D54\x2D52"+
		"\x3\x2\x2\x2\x2D55\x2D56\a\x1C2\x2\x2\x2D56\x2D59\a\x481\x2\x2\x2D57\x2D5A"+
		"\x5\x3B6\x1DC\x2\x2D58\x2D5A\x5\x46A\x236\x2\x2D59\x2D57\x3\x2\x2\x2\x2D59"+
		"\x2D58\x3\x2\x2\x2\x2D5A\x2D5B\x3\x2\x2\x2\x2D5B\x2D5C\a\x482\x2\x2\x2D5C"+
		"\x2D6F\x3\x2\x2\x2\x2D5D\x2D61\x5\x3A6\x1D4\x2\x2D5E\x2D60\a\x271\x2\x2"+
		"\x2D5F\x2D5E\x3\x2\x2\x2\x2D60\x2D63\x3\x2\x2\x2\x2D61\x2D5F\x3\x2\x2"+
		"\x2\x2D61\x2D62\x3\x2\x2\x2\x2D62\x2D64\x3\x2\x2\x2\x2D63\x2D61\x3\x2"+
		"\x2\x2\x2D64\x2D65\a\x205\x2\x2\x2D65\x2D68\x5\x3A6\x1D4\x2\x2D66\x2D67"+
		"\a\x13C\x2\x2\x2D67\x2D69\x5\x3A6\x1D4\x2\x2D68\x2D66\x3\x2\x2\x2\x2D68"+
		"\x2D69\x3\x2\x2\x2\x2D69\x2D6F\x3\x2\x2\x2\x2D6A\x2D6B\x5\x3A6\x1D4\x2"+
		"\x2D6B\x2D6C\a\x1DA\x2\x2\x2D6C\x2D6D\x5\x4AE\x258\x2\x2D6D\x2D6F\x3\x2"+
		"\x2\x2\x2D6E\x2D2D\x3\x2\x2\x2\x2D6E\x2D32\x3\x2\x2\x2\x2D6E\x2D33\x3"+
		"\x2\x2\x2\x2D6E\x2D37\x3\x2\x2\x2\x2D6E\x2D3B\x3\x2\x2\x2\x2D6E\x2D42"+
		"\x3\x2\x2\x2\x2D6E\x2D4E\x3\x2\x2\x2\x2D6E\x2D5D\x3\x2\x2\x2\x2D6E\x2D6A"+
		"\x3\x2\x2\x2\x2D6F\x3C3\x3\x2\x2\x2\x2D70\x2D7C\x5\x3C8\x1E5\x2\x2D71"+
		"\x2D72\a\x481\x2\x2\x2D72\x2D73\x5\x3C4\x1E3\x2\x2D73\x2D79\a\x482\x2"+
		"\x2\x2D74\x2D76\a\x40C\x2\x2\x2D75\x2D77\a\x18\x2\x2\x2D76\x2D75\x3\x2"+
		"\x2\x2\x2D76\x2D77\x3\x2\x2\x2\x2D77\x2D78\x3\x2\x2\x2\x2D78\x2D7A\x5"+
		"\x3C4\x1E3\x2\x2D79\x2D74\x3\x2\x2\x2\x2D79\x2D7A\x3\x2\x2\x2\x2D7A\x2D7C"+
		"\x3\x2\x2\x2\x2D7B\x2D70\x3\x2\x2\x2\x2D7B\x2D71\x3\x2\x2\x2\x2D7C\x2D88"+
		"\x3\x2\x2\x2\x2D7D\x2D7F\x5\x3C8\x1E5\x2\x2D7E\x2D80\x5\x3D0\x1E9\x2\x2D7F"+
		"\x2D7E\x3\x2\x2\x2\x2D7F\x2D80\x3\x2\x2\x2\x2D80\x2D84\x3\x2\x2\x2\x2D81"+
		"\x2D83\x5\x3C6\x1E4\x2\x2D82\x2D81\x3\x2\x2\x2\x2D83\x2D86\x3\x2\x2\x2"+
		"\x2D84\x2D82\x3\x2\x2\x2\x2D84\x2D85\x3\x2\x2\x2\x2D85\x2D88\x3\x2\x2"+
		"\x2\x2D86\x2D84\x3\x2\x2\x2\x2D87\x2D7B\x3\x2\x2\x2\x2D87\x2D7D\x3\x2"+
		"\x2\x2\x2D88\x3C5\x3\x2\x2\x2\x2D89\x2D8B\a\x40C\x2\x2\x2D8A\x2D8C\a\x18"+
		"\x2\x2\x2D8B\x2D8A\x3\x2\x2\x2\x2D8B\x2D8C\x3\x2\x2\x2\x2D8C\x2D90\x3"+
		"\x2\x2\x2\x2D8D\x2D90\a\x141\x2\x2\x2D8E\x2D90\a\x1D5\x2\x2\x2D8F\x2D89"+
		"\x3\x2\x2\x2\x2D8F\x2D8D\x3\x2\x2\x2\x2D8F\x2D8E\x3\x2\x2\x2\x2D90\x2D96"+
		"\x3\x2\x2\x2\x2D91\x2D97\x5\x3C8\x1E5\x2\x2D92\x2D93\a\x481\x2\x2\x2D93"+
		"\x2D94\x5\x3C4\x1E3\x2\x2D94\x2D95\a\x482\x2\x2\x2D95\x2D97\x3\x2\x2\x2"+
		"\x2D96\x2D91\x3\x2\x2\x2\x2D96\x2D92\x3\x2\x2\x2\x2D97\x3C7\x3\x2\x2\x2"+
		"\x2D98\x2D9A\a\x36F\x2\x2\x2D99\x2D9B\t\x8E\x2\x2\x2D9A\x2D99\x3\x2\x2"+
		"\x2\x2D9A\x2D9B\x3\x2\x2\x2\x2D9B\x2D9D\x3\x2\x2\x2\x2D9C\x2D9E\x5\x3CA"+
		"\x1E6\x2\x2D9D\x2D9C\x3\x2\x2\x2\x2D9D\x2D9E\x3\x2\x2\x2\x2D9E\x2D9F\x3"+
		"\x2\x2\x2\x2D9F\x2DA2\x5\x3E0\x1F1\x2\x2DA0\x2DA1\a\x1D7\x2\x2\x2DA1\x2DA3"+
		"\x5\x492\x24A\x2\x2DA2\x2DA0\x3\x2\x2\x2\x2DA2\x2DA3\x3\x2\x2\x2\x2DA3"+
		"\x2DA6\x3\x2\x2\x2\x2DA4\x2DA5\a\x181\x2\x2\x2DA5\x2DA7\x5\x3EE\x1F8\x2"+
		"\x2DA6\x2DA4\x3\x2\x2\x2\x2DA6\x2DA7\x3\x2\x2\x2\x2DA7\x2DAA\x3\x2\x2"+
		"\x2\x2DA8\x2DA9\a\x435\x2\x2\x2DA9\x2DAB\x5\x3C0\x1E1\x2\x2DAA\x2DA8\x3"+
		"\x2\x2\x2\x2DAA\x2DAB\x3\x2\x2\x2\x2DAB\x2DB9\x3\x2\x2\x2\x2DAC\x2DAD"+
		"\a\x19B\x2\x2\x2DAD\x2DAF\aq\x2\x2\x2DAE\x2DB0\a\x18\x2\x2\x2DAF\x2DAE"+
		"\x3\x2\x2\x2\x2DAF\x2DB0\x3\x2\x2\x2\x2DB0\x2DB1\x3\x2\x2\x2\x2DB1\x2DB6"+
		"\x5\x3D8\x1ED\x2\x2DB2\x2DB3\a\x485\x2\x2\x2DB3\x2DB5\x5\x3D8\x1ED\x2"+
		"\x2DB4\x2DB2\x3\x2\x2\x2\x2DB5\x2DB8\x3\x2\x2\x2\x2DB6\x2DB4\x3\x2\x2"+
		"\x2\x2DB6\x2DB7\x3\x2\x2\x2\x2DB7\x2DBA\x3\x2\x2\x2\x2DB8\x2DB6\x3\x2"+
		"\x2\x2\x2DB9\x2DAC\x3\x2\x2\x2\x2DB9\x2DBA\x3\x2\x2\x2\x2DBA\x2DBD\x3"+
		"\x2\x2\x2\x2DBB\x2DBC\a\x1A4\x2\x2\x2DBC\x2DBE\x5\x3C0\x1E1\x2\x2DBD\x2DBB"+
		"\x3\x2\x2\x2\x2DBD\x2DBE\x3\x2\x2\x2\x2DBE\x3C9\x3\x2\x2\x2\x2DBF\x2DC2"+
		"\a\x3EC\x2\x2\x2DC0\x2DC3\x5\x3CC\x1E7\x2\x2DC1\x2DC3\x5\x3CE\x1E8\x2"+
		"\x2DC2\x2DC0\x3\x2\x2\x2\x2DC2\x2DC1\x3\x2\x2\x2\x2DC3\x2DC6\x3\x2\x2"+
		"\x2\x2DC4\x2DC5\a\x438\x2\x2\x2DC5\x2DC7\a\x3E6\x2\x2\x2DC6\x2DC4\x3\x2"+
		"\x2\x2\x2DC6\x2DC7\x3\x2\x2\x2\x2DC7\x3CB\x3\x2\x2\x2\x2DC8\x2DC9\t\x8F"+
		"\x2\x2\x2DC9\x2DD0\a\x2C3\x2\x2\x2DCA\x2DCB\a\x481\x2\x2\x2DCB\x2DCC\x5"+
		"\x3A6\x1D4\x2\x2DCC\x2DCD\a\x482\x2\x2\x2DCD\x2DCE\a\x2C3\x2\x2\x2DCE"+
		"\x2DD0\x3\x2\x2\x2\x2DCF\x2DC8\x3\x2\x2\x2\x2DCF\x2DCA\x3\x2\x2\x2\x2DD0"+
		"\x3CD\x3\x2\x2\x2\x2DD1\x2DD7\a\x469\x2\x2\x2DD2\x2DD3\a\x481\x2\x2\x2DD3"+
		"\x2DD4\x5\x3A6\x1D4\x2\x2DD4\x2DD5\a\x482\x2\x2\x2DD5\x2DD7\x3\x2\x2\x2"+
		"\x2DD6\x2DD1\x3\x2\x2\x2\x2DD6\x2DD2\x3\x2\x2\x2\x2DD7\x3CF\x3\x2\x2\x2"+
		"\x2DD8\x2DD9\a\x2A6\x2\x2\x2DD9\x2DDA\aq\x2\x2\x2DDA\x2DDF\x5\x3D6\x1EC"+
		"\x2\x2DDB\x2DDC\a\x485\x2\x2\x2DDC\x2DDE\x5\x3D6\x1EC\x2\x2DDD\x2DDB\x3"+
		"\x2\x2\x2\x2DDE\x2DE1\x3\x2\x2\x2\x2DDF\x2DDD\x3\x2\x2\x2\x2DDF\x2DE0"+
		"\x3\x2\x2\x2\x2DE0\x2DED\x3\x2\x2\x2\x2DE1\x2DDF\x3\x2\x2\x2\x2DE2\x2DE3"+
		"\a\x290\x2\x2\x2DE3\x2DE4\x5\x3A6\x1D4\x2\x2DE4\x2DEB\t\x90\x2\x2\x2DE5"+
		"\x2DE6\a\x15B\x2\x2\x2DE6\x2DE7\t\x91\x2\x2\x2DE7\x2DE8\x5\x3A6\x1D4\x2"+
		"\x2DE8\x2DE9\t\x90\x2\x2\x2DE9\x2DEA\a\x296\x2\x2\x2DEA\x2DEC\x3\x2\x2"+
		"\x2\x2DEB\x2DE5\x3\x2\x2\x2\x2DEB\x2DEC\x3\x2\x2\x2\x2DEC\x2DEE\x3\x2"+
		"\x2\x2\x2DED\x2DE2\x3\x2\x2\x2\x2DED\x2DEE\x3\x2\x2\x2\x2DEE\x3D1\x3\x2"+
		"\x2\x2\x2DEF\x2DF0\a\x172\x2\x2\x2DF0\x2E4C\al\x2\x2\x2DF1\x2DF2\a\x172"+
		"\x2\x2\x2DF2\x2DFA\a\x443\x2\x2\x2DF3\x2DF7\a\x2FD\x2\x2\x2DF4\x2DF5\a"+
		"\x481\x2\x2\x2DF5\x2DF6\a\x46B\x2\x2\x2DF6\x2DF8\a\x482\x2\x2\x2DF7\x2DF4"+
		"\x3\x2\x2\x2\x2DF7\x2DF8\x3\x2\x2\x2\x2DF8\x2DFB\x3\x2\x2\x2\x2DF9\x2DFB"+
		"\aG\x2\x2\x2DFA\x2DF3\x3\x2\x2\x2\x2DFA\x2DF9\x3\x2\x2\x2\x2DFB\x2DFF"+
		"\x3\x2\x2\x2\x2DFC\x2DFE\x5\x3D4\x1EB\x2\x2DFD\x2DFC\x3\x2\x2\x2\x2DFE"+
		"\x2E01\x3\x2\x2\x2\x2DFF\x2DFD\x3\x2\x2\x2\x2DFF\x2E00\x3\x2\x2\x2\x2E00"+
		"\x2E0C\x3\x2\x2\x2\x2E01\x2DFF\x3\x2\x2\x2\x2E02\x2E0A\a\x485\x2\x2\x2E03"+
		"\x2E0B\a\x444\x2\x2\x2E04\x2E08\a\x446\x2\x2\x2E05\x2E06\a\x481\x2\x2"+
		"\x2E06\x2E07\a\x46B\x2\x2\x2E07\x2E09\a\x482\x2\x2\x2E08\x2E05\x3\x2\x2"+
		"\x2\x2E08\x2E09\x3\x2\x2\x2\x2E09\x2E0B\x3\x2\x2\x2\x2E0A\x2E03\x3\x2"+
		"\x2\x2\x2E0A\x2E04\x3\x2\x2\x2\x2E0B\x2E0D\x3\x2\x2\x2\x2E0C\x2E02\x3"+
		"\x2\x2\x2\x2E0C\x2E0D\x3\x2\x2\x2\x2E0D\x2E13\x3\x2\x2\x2\x2E0E\x2E0F"+
		"\a\x485\x2\x2\x2E0F\x2E11\a\x125\x2\x2\x2E10\x2E12\t\x92\x2\x2\x2E11\x2E10"+
		"\x3\x2\x2\x2\x2E11\x2E12\x3\x2\x2\x2\x2E12\x2E14\x3\x2\x2\x2\x2E13\x2E0E"+
		"\x3\x2\x2\x2\x2E13\x2E14\x3\x2\x2\x2\x2E14\x2E4C\x3\x2\x2\x2\x2E15\x2E16"+
		"\a\x172\x2\x2\x2E16\x2E17\a\x443\x2\x2\x2E17\x2E1B\a\x14D\x2\x2\x2E18"+
		"\x2E1A\x5\x3D4\x1EB\x2\x2E19\x2E18\x3\x2\x2\x2\x2E1A\x2E1D\x3\x2\x2\x2"+
		"\x2E1B\x2E19\x3\x2\x2\x2\x2E1B\x2E1C\x3\x2\x2\x2\x2E1C\x2E20\x3\x2\x2"+
		"\x2\x2E1D\x2E1B\x3\x2\x2\x2\x2E1E\x2E1F\a\x485\x2\x2\x2E1F\x2E21\a\x444"+
		"\x2\x2\x2E20\x2E1E\x3\x2\x2\x2\x2E20\x2E21\x3\x2\x2\x2\x2E21\x2E4C\x3"+
		"\x2\x2\x2\x2E22\x2E23\a\x172\x2\x2\x2E23\x2E24\a\x443\x2\x2\x2E24\x2E28"+
		"\a\x2BF\x2\x2\x2E25\x2E26\a\x481\x2\x2\x2E26\x2E27\a\x46B\x2\x2\x2E27"+
		"\x2E29\a\x482\x2\x2\x2E28\x2E25\x3\x2\x2\x2\x2E28\x2E29\x3\x2\x2\x2\x2E29"+
		"\x2E2D\x3\x2\x2\x2\x2E2A\x2E2C\x5\x3D4\x1EB\x2\x2E2B\x2E2A\x3\x2\x2\x2"+
		"\x2E2C\x2E2F\x3\x2\x2\x2\x2E2D\x2E2B\x3\x2\x2\x2\x2E2D\x2E2E\x3\x2\x2"+
		"\x2\x2E2E\x2E35\x3\x2\x2\x2\x2E2F\x2E2D\x3\x2\x2\x2\x2E30\x2E31\a\x485"+
		"\x2\x2\x2E31\x2E33\a\x125\x2\x2\x2E32\x2E34\t\x92\x2\x2\x2E33\x2E32\x3"+
		"\x2\x2\x2\x2E33\x2E34\x3\x2\x2\x2\x2E34\x2E36\x3\x2\x2\x2\x2E35\x2E30"+
		"\x3\x2\x2\x2\x2E35\x2E36\x3\x2\x2\x2\x2E36\x2E4C\x3\x2\x2\x2\x2E37\x2E38"+
		"\a\x172\x2\x2\x2E38\x2E39\a\x1E5\x2\x2\x2E39\x2E41\t\x93\x2\x2\x2E3A\x2E3B"+
		"\a\x485\x2\x2\x2E3B\x2E3F\a\x344\x2\x2\x2E3C\x2E3D\a\x481\x2\x2\x2E3D"+
		"\x2E3E\a\x46B\x2\x2\x2E3E\x2E40\a\x482\x2\x2\x2E3F\x2E3C\x3\x2\x2\x2\x2E3F"+
		"\x2E40\x3\x2\x2\x2\x2E40\x2E42\x3\x2\x2\x2\x2E41\x2E3A\x3\x2\x2\x2\x2E41"+
		"\x2E42\x3\x2\x2\x2\x2E42\x2E45\x3\x2\x2\x2\x2E43\x2E44\a\x485\x2\x2\x2E44"+
		"\x2E46\a\x1C4\x2\x2\x2E45\x2E43\x3\x2\x2\x2\x2E45\x2E46\x3\x2\x2\x2\x2E46"+
		"\x2E49\x3\x2\x2\x2\x2E47\x2E48\a\x485\x2\x2\x2E48\x2E4A\a\x43B\x2\x2\x2E49"+
		"\x2E47\x3\x2\x2\x2\x2E49\x2E4A\x3\x2\x2\x2\x2E4A\x2E4C\x3\x2\x2\x2\x2E4B"+
		"\x2DEF\x3\x2\x2\x2\x2E4B\x2DF1\x3\x2\x2\x2\x2E4B\x2E15\x3\x2\x2\x2\x2E4B"+
		"\x2E22\x3\x2\x2\x2\x2E4B\x2E37\x3\x2\x2\x2\x2E4C\x3D3\x3\x2\x2\x2\x2E4D"+
		"\x2E56\a\x485\x2\x2\x2E4E\x2E57\a`\x2\x2\x2E4F\x2E57\a\x403\x2\x2\x2E50"+
		"\x2E54\a\x344\x2\x2\x2E51\x2E52\a\x481\x2\x2\x2E52\x2E53\a\x46B\x2\x2"+
		"\x2E53\x2E55\a\x482\x2\x2\x2E54\x2E51\x3\x2\x2\x2\x2E54\x2E55\x3\x2\x2"+
		"\x2\x2E55\x2E57\x3\x2\x2\x2\x2E56\x2E4E\x3\x2\x2\x2\x2E56\x2E4F\x3\x2"+
		"\x2\x2\x2E56\x2E50\x3\x2\x2\x2\x2E57\x3D5\x3\x2\x2\x2\x2E58\x2E5B\x5\x3A6"+
		"\x1D4\x2\x2E59\x2E5C\a;\x2\x2\x2E5A\x2E5C\a\x108\x2\x2\x2E5B\x2E59\x3"+
		"\x2\x2\x2\x2E5B\x2E5A\x3\x2\x2\x2\x2E5B\x2E5C\x3\x2\x2\x2\x2E5C\x3D7\x3"+
		"\x2\x2\x2\x2E5D\x2E5E\x5\x3A6\x1D4\x2\x2E5E\x3D9\x3\x2\x2\x2\x2E5F\x2E60"+
		"\a\x2A4\x2\x2\x2E60\x2E61\a\x481\x2\x2\x2E61\x2E66\x5\x3DC\x1EF\x2\x2E62"+
		"\x2E63\a\x485\x2\x2\x2E63\x2E65\x5\x3DC\x1EF\x2\x2E64\x2E62\x3\x2\x2\x2"+
		"\x2E65\x2E68\x3\x2\x2\x2\x2E66\x2E64\x3\x2\x2\x2\x2E66\x2E67\x3\x2\x2"+
		"\x2\x2E67\x2E69\x3\x2\x2\x2\x2E68\x2E66\x3\x2\x2\x2\x2E69\x2E6A\a\x482"+
		"\x2\x2\x2E6A\x3DB\x3\x2\x2\x2\x2E6B\x2E6C\a\x159\x2\x2\x2E6C\x2E9B\a\x469"+
		"\x2\x2\x2E6D\x2E6E\t\x94\x2\x2\x2E6E\x2E9B\a\x19B\x2\x2\x2E6F\x2E70\t"+
		"\x95\x2\x2\x2E70\x2E9B\a\x40C\x2\x2\x2E71\x2E72\t\x96\x2\x2\x2E72\x2E9B"+
		"\a\x1E4\x2\x2\x2E73\x2E74\a\x14A\x2\x2\x2E74\x2E9B\a\x42C\x2\x2\x2E75"+
		"\x2E76\a\x173\x2\x2\x2E76\x2E9B\a\x2A6\x2\x2\x2E77\x2E9B\a\x1BA\x2\x2"+
		"\x2E78\x2E79\a\x1ED\x2\x2\x2E79\x2E9B\a\x2D0\x2\x2\x2E7A\x2E7B\a\x1EF"+
		"\x2\x2\x2E7B\x2E9B\a\x2D0\x2\x2\x2E7C\x2E7D\a\x224\x2\x2\x2E7D\x2E9B\a"+
		"\x469\x2\x2\x2E7E\x2E7F\a\x225\x2\x2\x2E7F\x2E9B\a\x469\x2\x2\x2E80\x2E81"+
		"\a\x2A2\x2\x2\x2E81\x2E82\a\x172\x2\x2\x2E82\x2E83\a\x481\x2\x2\x2E83"+
		"\x2E88\x5\x3DE\x1F0\x2\x2E84\x2E85\a\x485\x2\x2\x2E85\x2E87\x5\x3DE\x1F0"+
		"\x2\x2E86\x2E84\x3\x2\x2\x2\x2E87\x2E8A\x3\x2\x2\x2\x2E88\x2E86\x3\x2"+
		"\x2\x2\x2E88\x2E89\x3\x2\x2\x2\x2E89\x2E8B\x3\x2\x2\x2\x2E8A\x2E88\x3"+
		"\x2\x2\x2\x2E8B\x2E8C\a\x482\x2\x2\x2E8C\x2E9B\x3\x2\x2\x2\x2E8D\x2E8E"+
		"\a\x2A2\x2\x2\x2E8E\x2E8F\a\x172\x2\x2\x2E8F\x2E9B\a\x40E\x2\x2\x2E90"+
		"\x2E91\a\x2B5\x2\x2\x2E91\x2E9B\t]\x2\x2\x2E92\x2E93\a\x2F3\x2\x2\x2E93"+
		"\x2E9B\a\x469\x2\x2\x2E94\x2E9B\a\x310\x2\x2\x2E95\x2E96\a\x341\x2\x2"+
		"\x2E96\x2E9B\a\x2D0\x2\x2\x2E97\x2E98\a\x419\x2\x2\x2E98\x2E99\a\x2D0"+
		"\x2\x2\x2E99\x2E9B\a\x46B\x2\x2\x2E9A\x2E6B\x3\x2\x2\x2\x2E9A\x2E6D\x3"+
		"\x2\x2\x2\x2E9A\x2E6F\x3\x2\x2\x2\x2E9A\x2E71\x3\x2\x2\x2\x2E9A\x2E73"+
		"\x3\x2\x2\x2\x2E9A\x2E75\x3\x2\x2\x2\x2E9A\x2E77\x3\x2\x2\x2\x2E9A\x2E78"+
		"\x3\x2\x2\x2\x2E9A\x2E7A\x3\x2\x2\x2\x2E9A\x2E7C\x3\x2\x2\x2\x2E9A\x2E7E"+
		"\x3\x2\x2\x2\x2E9A\x2E80\x3\x2\x2\x2\x2E9A\x2E8D\x3\x2\x2\x2\x2E9A\x2E90"+
		"\x3\x2\x2\x2\x2E9A\x2E92\x3\x2\x2\x2\x2E9A\x2E94\x3\x2\x2\x2\x2E9A\x2E95"+
		"\x3\x2\x2\x2\x2E9A\x2E97\x3\x2\x2\x2\x2E9B\x3DD\x3\x2\x2\x2\x2E9C\x2EA3"+
		"\a\x468\x2\x2\x2E9D\x2EA4\a\x40E\x2\x2\x2E9E\x2EA1\a\x46F\x2\x2\x2E9F"+
		"\x2EA2\x5\x4CA\x266\x2\x2EA0\x2EA2\a\x281\x2\x2\x2EA1\x2E9F\x3\x2\x2\x2"+
		"\x2EA1\x2EA0\x3\x2\x2\x2\x2EA2\x2EA4\x3\x2\x2\x2\x2EA3\x2E9D\x3\x2\x2"+
		"\x2\x2EA3\x2E9E\x3\x2\x2\x2\x2EA4\x3DF\x3\x2\x2\x2\x2EA5\x2EAA\x5\x3EC"+
		"\x1F7\x2\x2EA6\x2EA7\a\x485\x2\x2\x2EA7\x2EA9\x5\x3EC\x1F7\x2\x2EA8\x2EA6"+
		"\x3\x2\x2\x2\x2EA9\x2EAC\x3\x2\x2\x2\x2EAA\x2EA8\x3\x2\x2\x2\x2EAA\x2EAB"+
		"\x3\x2\x2\x2\x2EAB\x3E1\x3\x2\x2\x2\x2EAC\x2EAA\x3\x2\x2\x2\x2EAD\x2EAE"+
		"\a\x481\x2\x2\x2EAE\x2EB3\x5\x304\x183\x2\x2EAF\x2EB0\a\x485\x2\x2\x2EB0"+
		"\x2EB2\x5\x304\x183\x2\x2EB1\x2EAF\x3\x2\x2\x2\x2EB2\x2EB5\x3\x2\x2\x2"+
		"\x2EB3\x2EB1\x3\x2\x2\x2\x2EB3\x2EB4\x3\x2\x2\x2\x2EB4\x2EB6\x3\x2\x2"+
		"\x2\x2EB5\x2EB3\x3\x2\x2\x2\x2EB6\x2EB7\a\x482\x2\x2\x2EB7\x3E3\x3\x2"+
		"\x2\x2\x2EB8\x2EB9\x5\x492\x24A\x2\x2EB9\x2EBA\a\x47C\x2\x2\x2EBA\x2EBC"+
		"\x3\x2\x2\x2\x2EBB\x2EB8\x3\x2\x2\x2\x2EBB\x2EBC\x3\x2\x2\x2\x2EBC\x2EBD"+
		"\x3\x2\x2\x2\x2EBD\x2EC2\a\x489\x2\x2\x2EBE\x2EBF\t\x97\x2\x2\x2EBF\x2EC0"+
		"\a\x47C\x2\x2\x2EC0\x2EC2\a\x489\x2\x2\x2EC1\x2EBB\x3\x2\x2\x2\x2EC1\x2EBE"+
		"\x3\x2\x2\x2\x2EC2\x3E5\x3\x2\x2\x2\x2EC3\x2ECA\x5\x49E\x250\x2\x2EC4"+
		"\x2EC5\a\x480\x2\x2\x2EC5\x2ECA\a\x1B0\x2\x2\x2EC6\x2EC7\a\x480\x2\x2"+
		"\x2EC7\x2ECA\a\x34A\x2\x2\x2EC8\x2ECA\a\x281\x2\x2\x2EC9\x2EC3\x3\x2\x2"+
		"\x2\x2EC9\x2EC4\x3\x2\x2\x2\x2EC9\x2EC6\x3\x2\x2\x2\x2EC9\x2EC8\x3\x2"+
		"\x2\x2\x2ECA\x2ECC\x3\x2\x2\x2\x2ECB\x2ECD\x5\x450\x229\x2\x2ECC\x2ECB"+
		"\x3\x2\x2\x2\x2ECC\x2ECD\x3\x2\x2\x2\x2ECD\x3E7\x3\x2\x2\x2\x2ECE\x2ECF"+
		"\x5\x4D2\x26A\x2\x2ECF\x2ED0\a\x47C\x2\x2\x2ED0\x2ED1\x5\x4D2\x26A\x2"+
		"\x2ED1\x2ED3\x5\x3E2\x1F2\x2\x2ED2\x2ED4\x5\x450\x229\x2\x2ED3\x2ED2\x3"+
		"\x2\x2\x2\x2ED3\x2ED4\x3\x2\x2\x2\x2ED4\x2EDF\x3\x2\x2\x2\x2ED5\x2ED6"+
		"\x5\x4D2\x26A\x2\x2ED6\x2ED7\a\x488\x2\x2\x2ED7\x2ED9\x5\x4D2\x26A\x2"+
		"\x2ED8\x2EDA\x5\x3E2\x1F2\x2\x2ED9\x2ED8\x3\x2\x2\x2\x2ED9\x2EDA\x3\x2"+
		"\x2\x2\x2EDA\x2EDC\x3\x2\x2\x2\x2EDB\x2EDD\x5\x450\x229\x2\x2EDC\x2EDB"+
		"\x3\x2\x2\x2\x2EDC\x2EDD\x3\x2\x2\x2\x2EDD\x2EDF\x3\x2\x2\x2\x2EDE\x2ECE"+
		"\x3\x2\x2\x2\x2EDE\x2ED5\x3\x2\x2\x2\x2EDF\x3E9\x3\x2\x2\x2\x2EE0\x2EE1"+
		"\x5\x466\x234\x2\x2EE1\x2EE2\a\x46F\x2\x2\x2EE2\x2EE3\x5\x3A6\x1D4\x2"+
		"\x2EE3\x2EE9\x3\x2\x2\x2\x2EE4\x2EE6\x5\x3A6\x1D4\x2\x2EE5\x2EE7\x5\x450"+
		"\x229\x2\x2EE6\x2EE5\x3\x2\x2\x2\x2EE6\x2EE7\x3\x2\x2\x2\x2EE7\x2EE9\x3"+
		"\x2\x2\x2\x2EE8\x2EE0\x3\x2\x2\x2\x2EE8\x2EE4\x3\x2\x2\x2\x2EE9\x3EB\x3"+
		"\x2\x2\x2\x2EEA\x2F02\x5\x3E4\x1F3\x2\x2EEB\x2F02\x5\x3E6\x1F4\x2\x2EEC"+
		"\x2F02\x5\x3E8\x1F5\x2\x2EED\x2EF0\a\x468\x2\x2\x2EEE\x2EF1\x5\x4DA\x26E"+
		"\x2\x2EEF\x2EF1\a\x46F\x2\x2\x2EF0\x2EEE\x3\x2\x2\x2\x2EF0\x2EEF\x3\x2"+
		"\x2\x2\x2EF1\x2EF7\x3\x2\x2\x2\x2EF2\x2EF8\x5\x3A6\x1D4\x2\x2EF3\x2EF4"+
		"\a\x25F\x2\x2\x2EF4\x2EF5\a\x421\x2\x2\x2EF5\x2EF6\a\x172\x2\x2\x2EF6"+
		"\x2EF8\x5\x492\x24A\x2\x2EF7\x2EF2\x3\x2\x2\x2\x2EF7\x2EF3\x3\x2\x2\x2"+
		"\x2EF8\x2F02\x3\x2\x2\x2\x2EF9\x2F02\x5\x3EA\x1F6\x2\x2EFA\x2EFB\a\x25F"+
		"\x2\x2\x2EFB\x2EFC\a\x421\x2\x2\x2EFC\x2EFD\a\x172\x2\x2\x2EFD\x2EFF\x5"+
		"\x492\x24A\x2\x2EFE\x2F00\x5\x450\x229\x2\x2EFF\x2EFE\x3\x2\x2\x2\x2EFF"+
		"\x2F00\x3\x2\x2\x2\x2F00\x2F02\x3\x2\x2\x2\x2F01\x2EEA\x3\x2\x2\x2\x2F01"+
		"\x2EEB\x3\x2\x2\x2\x2F01\x2EEC\x3\x2\x2\x2\x2F01\x2EED\x3\x2\x2\x2\x2F01"+
		"\x2EF9\x3\x2\x2\x2\x2F01\x2EFA\x3\x2\x2\x2\x2F02\x3ED\x3\x2\x2\x2\x2F03"+
		"\x2F08\x5\x3F0\x1F9\x2\x2F04\x2F05\a\x485\x2\x2\x2F05\x2F07\x5\x3F0\x1F9"+
		"\x2\x2F06\x2F04\x3\x2\x2\x2\x2F07\x2F0A\x3\x2\x2\x2\x2F08\x2F06\x3\x2"+
		"\x2\x2\x2F08\x2F09\x3\x2\x2\x2\x2F09\x3EF\x3\x2\x2\x2\x2F0A\x2F08\x3\x2"+
		"\x2\x2\x2F0B\x2F11\x5\x3F2\x1FA\x2\x2F0C\x2F0D\a\x481\x2\x2\x2F0D\x2F0E"+
		"\x5\x3F0\x1F9\x2\x2F0E\x2F0F\a\x482\x2\x2\x2F0F\x2F11\x3\x2\x2\x2\x2F10"+
		"\x2F0B\x3\x2\x2\x2\x2F10\x2F0C\x3\x2\x2\x2\x2F11\x3F1\x3\x2\x2\x2\x2F12"+
		"\x2F16\x5\x3F4\x1FB\x2\x2F13\x2F15\x5\x408\x205\x2\x2F14\x2F13\x3\x2\x2"+
		"\x2\x2F15\x2F18\x3\x2\x2\x2\x2F16\x2F14\x3\x2\x2\x2\x2F16\x2F17\x3\x2"+
		"\x2\x2\x2F17\x2F23\x3\x2\x2\x2\x2F18\x2F16\x3\x2\x2\x2\x2F19\x2F1A\a\x481"+
		"\x2\x2\x2F1A\x2F1B\x5\x3F2\x1FA\x2\x2F1B\x2F1F\a\x482\x2\x2\x2F1C\x2F1E"+
		"\x5\x408\x205\x2\x2F1D\x2F1C\x3\x2\x2\x2\x2F1E\x2F21\x3\x2\x2\x2\x2F1F"+
		"\x2F1D\x3\x2\x2\x2\x2F1F\x2F20\x3\x2\x2\x2\x2F20\x2F23\x3\x2\x2\x2\x2F21"+
		"\x2F1F\x3\x2\x2\x2\x2F22\x2F12\x3\x2\x2\x2\x2F22\x2F19\x3\x2\x2\x2\x2F23"+
		"\x3F3\x3\x2\x2\x2\x2F24\x2F26\x5\x41A\x20E\x2\x2F25\x2F27\x5\x452\x22A"+
		"\x2\x2F26\x2F25\x3\x2\x2\x2\x2F26\x2F27\x3\x2\x2\x2\x2F27\x2F65\x3\x2"+
		"\x2\x2\x2F28\x2F2A\x5\x490\x249\x2\x2F29\x2F2B\x5\x456\x22C\x2\x2F2A\x2F29"+
		"\x3\x2\x2\x2\x2F2A\x2F2B\x3\x2\x2\x2\x2F2B\x2F2D\x3\x2\x2\x2\x2F2C\x2F2E"+
		"\x5\x452\x22A\x2\x2F2D\x2F2C\x3\x2\x2\x2\x2F2D\x2F2E\x3\x2\x2\x2\x2F2E"+
		"\x2F65\x3\x2\x2\x2\x2F2F\x2F31\x5\x41C\x20F\x2\x2F30\x2F32\x5\x452\x22A"+
		"\x2\x2F31\x2F30\x3\x2\x2\x2\x2F31\x2F32\x3\x2\x2\x2\x2F32\x2F65\x3\x2"+
		"\x2\x2\x2F33\x2F38\x5\x420\x211\x2\x2F34\x2F36\x5\x452\x22A\x2\x2F35\x2F37"+
		"\x5\x464\x233\x2\x2F36\x2F35\x3\x2\x2\x2\x2F36\x2F37\x3\x2\x2\x2\x2F37"+
		"\x2F39\x3\x2\x2\x2\x2F38\x2F34\x3\x2\x2\x2\x2F38\x2F39\x3\x2\x2\x2\x2F39"+
		"\x2F65\x3\x2\x2\x2\x2F3A\x2F3C\x5\x402\x202\x2\x2F3B\x2F3D\x5\x452\x22A"+
		"\x2\x2F3C\x2F3B\x3\x2\x2\x2\x2F3C\x2F3D\x3\x2\x2\x2\x2F3D\x2F65\x3\x2"+
		"\x2\x2\x2F3E\x2F43\x5\x422\x212\x2\x2F3F\x2F41\x5\x452\x22A\x2\x2F40\x2F42"+
		"\x5\x464\x233\x2\x2F41\x2F40\x3\x2\x2\x2\x2F41\x2F42\x3\x2\x2\x2\x2F42"+
		"\x2F44\x3\x2\x2\x2\x2F43\x2F3F\x3\x2\x2\x2\x2F43\x2F44\x3\x2\x2\x2\x2F44"+
		"\x2F65\x3\x2\x2\x2\x2F45\x2F47\a\x468\x2\x2\x2F46\x2F48\x5\x452\x22A\x2"+
		"\x2F47\x2F46\x3\x2\x2\x2\x2F47\x2F48\x3\x2\x2\x2\x2F48\x2F65\x3\x2\x2"+
		"\x2\x2F49\x2F4E\x5\x44A\x226\x2\x2F4A\x2F4C\x5\x452\x22A\x2\x2F4B\x2F4D"+
		"\x5\x464\x233\x2\x2F4C\x2F4B\x3\x2\x2\x2\x2F4C\x2F4D\x3\x2\x2\x2\x2F4D"+
		"\x2F4F\x3\x2\x2\x2\x2F4E\x2F4A\x3\x2\x2\x2\x2F4E\x2F4F\x3\x2\x2\x2\x2F4F"+
		"\x2F65\x3\x2\x2\x2\x2F50\x2F52\x5\x2DA\x16E\x2\x2F51\x2F53\x5\x452\x22A"+
		"\x2\x2F52\x2F51\x3\x2\x2\x2\x2F52\x2F53\x3\x2\x2\x2\x2F53\x2F65\x3\x2"+
		"\x2\x2\x2F54\x2F55\a\x468\x2\x2\x2F55\x2F56\a\x47C\x2\x2\x2F56\x2F5B\x5"+
		"\x422\x212\x2\x2F57\x2F59\x5\x452\x22A\x2\x2F58\x2F5A\x5\x464\x233\x2"+
		"\x2F59\x2F58\x3\x2\x2\x2\x2F59\x2F5A\x3\x2\x2\x2\x2F5A\x2F5C\x3\x2\x2"+
		"\x2\x2F5B\x2F57\x3\x2\x2\x2\x2F5B\x2F5C\x3\x2\x2\x2\x2F5C\x2F65\x3\x2"+
		"\x2\x2\x2F5D\x2F65\x5\x3F6\x1FC\x2\x2F5E\x2F65\x5\x3F8\x1FD\x2\x2F5F\x2F60"+
		"\a\x488\x2\x2\x2F60\x2F62\x5\x422\x212\x2\x2F61\x2F63\x5\x452\x22A\x2"+
		"\x2F62\x2F61\x3\x2\x2\x2\x2F62\x2F63\x3\x2\x2\x2\x2F63\x2F65\x3\x2\x2"+
		"\x2\x2F64\x2F24\x3\x2\x2\x2\x2F64\x2F28\x3\x2\x2\x2\x2F64\x2F2F\x3\x2"+
		"\x2\x2\x2F64\x2F33\x3\x2\x2\x2\x2F64\x2F3A\x3\x2\x2\x2\x2F64\x2F3E\x3"+
		"\x2\x2\x2\x2F64\x2F45\x3\x2\x2\x2\x2F64\x2F49\x3\x2\x2\x2\x2F64\x2F50"+
		"\x3\x2\x2\x2\x2F64\x2F54\x3\x2\x2\x2\x2F64\x2F5D\x3\x2\x2\x2\x2F64\x2F5E"+
		"\x3\x2\x2\x2\x2F64\x2F5F\x3\x2\x2\x2\x2F65\x3F5\x3\x2\x2\x2\x2F66\x2F67"+
		"\a\x29D\x2\x2\x2F67\x2F68\a\x481\x2\x2\x2F68\x2F69\x5\x3A6\x1D4\x2\x2F69"+
		"\x2F6A\a\x485\x2\x2\x2F6A\x2F6D\x5\x3A6\x1D4\x2\x2F6B\x2F6C\a\x485\x2"+
		"\x2\x2F6C\x2F6E\x5\x3A6\x1D4\x2\x2F6D\x2F6B\x3\x2\x2\x2\x2F6D\x2F6E\x3"+
		"\x2\x2\x2\x2F6E\x2F6F\x3\x2\x2\x2\x2F6F\x2F75\a\x482\x2\x2\x2F70\x2F71"+
		"\a\x438\x2\x2\x2F71\x2F72\a\x481\x2\x2\x2F72\x2F73\x5\x3FE\x200\x2\x2F73"+
		"\x2F74\a\x482\x2\x2\x2F74\x2F76\x3\x2\x2\x2\x2F75\x2F70\x3\x2\x2\x2\x2F75"+
		"\x2F76\x3\x2\x2\x2\x2F76\x2F78\x3\x2\x2\x2\x2F77\x2F79\x5\x452\x22A\x2"+
		"\x2F78\x2F77\x3\x2\x2\x2\x2F78\x2F79\x3\x2\x2\x2\x2F79\x3F7\x3\x2\x2\x2"+
		"\x2F7A\x2F7B\a\x29A\x2\x2\x2F7B\x2F7C\a\x481\x2\x2\x2F7C\x2F7F\x5\x3A6"+
		"\x1D4\x2\x2F7D\x2F7E\a\x485\x2\x2\x2F7E\x2F80\x5\x3A6\x1D4\x2\x2F7F\x2F7D"+
		"\x3\x2\x2\x2\x2F7F\x2F80\x3\x2\x2\x2\x2F80\x2F81\x3\x2\x2\x2\x2F81\x2F87"+
		"\a\x482\x2\x2\x2F82\x2F83\a\x438\x2\x2\x2F83\x2F84\a\x481\x2\x2\x2F84"+
		"\x2F85\x5\x3FA\x1FE\x2\x2F85\x2F86\a\x482\x2\x2\x2F86\x2F88\x3\x2\x2\x2"+
		"\x2F87\x2F82\x3\x2\x2\x2\x2F87\x2F88\x3\x2\x2\x2\x2F88\x2F8A\x3\x2\x2"+
		"\x2\x2F89\x2F8B\x5\x452\x22A\x2\x2F8A\x2F89\x3\x2\x2\x2\x2F8A\x2F8B\x3"+
		"\x2\x2\x2\x2F8B\x3F9\x3\x2\x2\x2\x2F8C\x2F91\x5\x3FC\x1FF\x2\x2F8D\x2F8E"+
		"\a\x485\x2\x2\x2F8E\x2F90\x5\x3FC\x1FF\x2\x2F8F\x2F8D\x3\x2\x2\x2\x2F90"+
		"\x2F93\x3\x2\x2\x2\x2F91\x2F8F\x3\x2\x2\x2\x2F91\x2F92\x3\x2\x2\x2\x2F92"+
		"\x3FB\x3\x2\x2\x2\x2F93\x2F91\x3\x2\x2\x2\x2F94\x2F97\x5\x400\x201\x2"+
		"\x2F95\x2F96\a:\x2\x2\x2F96\x2F98\a\x1E5\x2\x2\x2F97\x2F95\x3\x2\x2\x2"+
		"\x2F97\x2F98\x3\x2\x2\x2\x2F98\x3FD\x3\x2\x2\x2\x2F99\x2F9E\x5\x400\x201"+
		"\x2\x2F9A\x2F9B\a\x485\x2\x2\x2F9B\x2F9D\x5\x400\x201\x2\x2F9C\x2F9A\x3"+
		"\x2\x2\x2\x2F9D\x2FA0\x3\x2\x2\x2\x2F9E\x2F9C\x3\x2\x2\x2\x2F9E\x2F9F"+
		"\x3\x2\x2\x2\x2F9F\x3FF\x3\x2\x2\x2\x2FA0\x2F9E\x3\x2\x2\x2\x2FA1\x2FA2"+
		"\x5\x4D2\x26A\x2\x2FA2\x2FA4\x5\x4C6\x264\x2\x2FA3\x2FA5\a\x46B\x2\x2"+
		"\x2FA4\x2FA3\x3\x2\x2\x2\x2FA4\x2FA5\x3\x2\x2\x2\x2FA5\x401\x3\x2\x2\x2"+
		"\x2FA6\x2FA9\x5\x404\x203\x2\x2FA7\x2FA9\x5\x406\x204\x2\x2FA8\x2FA6\x3"+
		"\x2\x2\x2\x2FA8\x2FA7\x3\x2\x2\x2\x2FA9\x403\x3\x2\x2\x2\x2FAA\x2FAB\a"+
		"\x82\x2\x2\x2FAB\x2FAC\a\x481\x2\x2\x2FAC\x2FAD\a\x81\x2\x2\x2FAD\x2FAE"+
		"\x5\x492\x24A\x2\x2FAE\x2FAF\a\x485\x2\x2\x2FAF\x2FB0\t\x98\x2\x2\x2FB0"+
		"\x2FB1\a\x482\x2\x2\x2FB1\x405\x3\x2\x2\x2\x2FB2\x2FB3\a\x82\x2\x2\x2FB3"+
		"\x2FB4\a\x481\x2\x2\x2FB4\x2FB5\a\x42A\x2\x2\x2FB5\x2FB6\x5\x492\x24A"+
		"\x2\x2FB6\x2FB7\a\x485\x2\x2\x2FB7\x2FB8\x5\x418\x20D\x2\x2FB8\x2FB9\a"+
		"\x485\x2\x2\x2FB9\x2FBA\x5\x3E0\x1F1\x2\x2FBA\x2FBB\a\x482\x2\x2\x2FBB"+
		"\x407\x3\x2\x2\x2\x2FBC\x2FC2\x5\x40A\x206\x2\x2FBD\x2FC2\x5\x40C\x207"+
		"\x2\x2FBE\x2FC2\x5\x40E\x208\x2\x2FBF\x2FC2\x5\x410\x209\x2\x2FC0\x2FC2"+
		"\x5\x412\x20A\x2\x2FC1\x2FBC\x3\x2\x2\x2\x2FC1\x2FBD\x3\x2\x2\x2\x2FC1"+
		"\x2FBE\x3\x2\x2\x2\x2FC1\x2FBF\x3\x2\x2\x2\x2FC1\x2FC0\x3\x2\x2\x2\x2FC2"+
		"\x409\x3\x2\x2\x2\x2FC3\x2FC5\a\x1CE\x2\x2\x2FC4\x2FC3\x3\x2\x2\x2\x2FC4"+
		"\x2FC5\x3\x2\x2\x2\x2FC5\x2FCB\x3\x2\x2\x2\x2FC6\x2FC8\t\x99\x2\x2\x2FC7"+
		"\x2FC9\a\x2AA\x2\x2\x2FC8\x2FC7\x3\x2\x2\x2\x2FC8\x2FC9\x3\x2\x2\x2\x2FC9"+
		"\x2FCB\x3\x2\x2\x2\x2FCA\x2FC4\x3\x2\x2\x2\x2FCA\x2FC6\x3\x2\x2\x2\x2FCB"+
		"\x2FCD\x3\x2\x2\x2\x2FCC\x2FCE\t\x9A\x2\x2\x2FCD\x2FCC\x3\x2\x2\x2\x2FCD"+
		"\x2FCE\x3\x2\x2\x2\x2FCE\x2FCF\x3\x2\x2\x2\x2FCF\x2FD0\a\x1E4\x2\x2\x2FD0"+
		"\x2FD1\x5\x3F0\x1F9\x2\x2FD1\x2FD2\a\x294\x2\x2\x2FD2\x2FD3\x5\x3C0\x1E1"+
		"\x2\x2FD3\x40B\x3\x2\x2\x2\x2FD4\x2FD5\a\xCE\x2\x2\x2FD5\x2FD6\a\x1E4"+
		"\x2\x2\x2FD6\x2FD7\x5\x3F0\x1F9\x2\x2FD7\x40D\x3\x2\x2\x2\x2FD8\x2FD9"+
		"\t\x9B\x2\x2\x2FD9\x2FDA\a\x36\x2\x2\x2FDA\x2FDB\x5\x3F0\x1F9\x2\x2FDB"+
		"\x40F\x3\x2\x2\x2\x2FDC\x2FDD\a\x2CF\x2\x2\x2FDD\x2FDE\x5\x414\x20B\x2"+
		"\x2FDE\x2FDF\x5\x452\x22A\x2\x2FDF\x411\x3\x2\x2\x2\x2FE0\x2FE1\a\x412"+
		"\x2\x2\x2FE1\x2FE2\x5\x416\x20C\x2\x2FE2\x2FE3\x5\x452\x22A\x2\x2FE3\x413"+
		"\x3\x2\x2\x2\x2FE4\x2FE5\a\x481\x2\x2\x2FE5\x2FE6\x5\x46E\x238\x2\x2FE6"+
		"\x2FE7\a\x172\x2\x2\x2FE7\x2FE8\x5\x49E\x250\x2\x2FE8\x2FE9\a\x1C2\x2"+
		"\x2\x2FE9\x2FEA\x5\x464\x233\x2\x2FEA\x2FEB\a\x482\x2\x2\x2FEB\x415\x3"+
		"\x2\x2\x2\x2FEC\x2FED\a\x481\x2\x2\x2FED\x2FEE\x5\x3A6\x1D4\x2\x2FEE\x2FEF"+
		"\a\x172\x2\x2\x2FEF\x2FF0\x5\x49E\x250\x2\x2FF0\x2FF1\a\x1C2\x2\x2\x2FF1"+
		"\x2FF2\a\x481\x2\x2\x2FF2\x2FF3\x5\x418\x20D\x2\x2FF3\x2FF4\a\x482\x2"+
		"\x2\x2FF4\x2FF5\a\x482\x2\x2\x2FF5\x417\x3\x2\x2\x2\x2FF6\x2FFB\x5\x49E"+
		"\x250\x2\x2FF7\x2FF8\a\x485\x2\x2\x2FF8\x2FFA\x5\x49E\x250\x2\x2FF9\x2FF7"+
		"\x3\x2\x2\x2\x2FFA\x2FFD\x3\x2\x2\x2\x2FFB\x2FF9\x3\x2\x2\x2\x2FFB\x2FFC"+
		"\x3\x2\x2\x2\x2FFC\x419\x3\x2\x2\x2\x2FFD\x2FFB\x3\x2\x2\x2\x2FFE\x3000"+
		"\x5\x492\x24A\x2\x2FFF\x3001\x5\x456\x22C\x2\x3000\x2FFF\x3\x2\x2\x2\x3000"+
		"\x3001\x3\x2\x2\x2\x3001\x41B\x3\x2\x2\x2\x3002\x3003\a\x29C\x2\x2\x3003"+
		"\x3004\a\x481\x2\x2\x3004\x3005\a\x46B\x2\x2\x3005\x3006\a\x485\x2\x2"+
		"\x3006\x3007\a\x46B\x2\x2\x3007\x3008\a\x485\x2\x2\x3008\x3009\a\x46B"+
		"\x2\x2\x3009\x301D\a\x482\x2\x2\x300A\x300B\a\x29C\x2\x2\x300B\x300C\a"+
		"\x481\x2\x2\x300C\x300D\ao\x2\x2\x300D\x300E\a\x46B\x2\x2\x300E\x3018"+
		"\a\x485\x2\x2\x300F\x3014\x5\x41E\x210\x2\x3010\x3011\a\x485\x2\x2\x3011"+
		"\x3013\x5\x41E\x210\x2\x3012\x3010\x3\x2\x2\x2\x3013\x3016\x3\x2\x2\x2"+
		"\x3014\x3012\x3\x2\x2\x2\x3014\x3015\x3\x2\x2\x2\x3015\x3019\x3\x2\x2"+
		"\x2\x3016\x3014\x3\x2\x2\x2\x3017\x3019\x5\x4D2\x26A\x2\x3018\x300F\x3"+
		"\x2\x2\x2\x3018\x3017\x3\x2\x2\x2\x3019\x301A\x3\x2\x2\x2\x301A\x301B"+
		"\a\x482\x2\x2\x301B\x301D\x3\x2\x2\x2\x301C\x3002\x3\x2\x2\x2\x301C\x300A"+
		"\x3\x2\x2\x2\x301D\x41D\x3\x2\x2\x2\x301E\x301F\x5\x4D2\x26A\x2\x301F"+
		"\x3020\a\x46F\x2\x2\x3020\x3021\t!\x2\x2\x3021\x41F\x3\x2\x2\x2\x3022"+
		"\x3035\x5\x3B6\x1DC\x2\x3023\x3024\a\x481\x2\x2\x3024\x302A\x5\x3B6\x1DC"+
		"\x2\x3025\x3026\a\x40C\x2\x2\x3026\x3027\a\x18\x2\x2\x3027\x3029\x5\x3B6"+
		"\x1DC\x2\x3028\x3025\x3\x2\x2\x2\x3029\x302C\x3\x2\x2\x2\x302A\x3028\x3"+
		"\x2\x2\x2\x302A\x302B\x3\x2\x2\x2\x302B\x302D\x3\x2\x2\x2\x302C\x302A"+
		"\x3\x2\x2\x2\x302D\x302E\a\x482\x2\x2\x302E\x3035\x3\x2\x2\x2\x302F\x3035"+
		"\x5\x468\x235\x2\x3030\x3031\a\x481\x2\x2\x3031\x3032\x5\x468\x235\x2"+
		"\x3032\x3033\a\x482\x2\x2\x3033\x3035\x3\x2\x2\x2\x3034\x3022\x3\x2\x2"+
		"\x2\x3034\x3023\x3\x2\x2\x2\x3034\x302F\x3\x2\x2\x2\x3034\x3030\x3\x2"+
		"\x2\x2\x3035\x421\x3\x2\x2\x2\x3036\x3045\x5\x46C\x237\x2\x3037\x3045"+
		"\x5\x46E\x238\x2\x3038\x3045\x5\x470\x239\x2\x3039\x3045\x5\x42A\x216"+
		"\x2\x303A\x303B\x5\x4B2\x25A\x2\x303B\x303D\a\x481\x2\x2\x303C\x303E\x5"+
		"\x46A\x236\x2\x303D\x303C\x3\x2\x2\x2\x303D\x303E\x3\x2\x2\x2\x303E\x303F"+
		"\x3\x2\x2\x2\x303F\x3040\a\x482\x2\x2\x3040\x3045\x3\x2\x2\x2\x3041\x3045"+
		"\x5\x426\x214\x2\x3042\x3045\x5\x424\x213\x2\x3043\x3045\x5\x448\x225"+
		"\x2\x3044\x3036\x3\x2\x2\x2\x3044\x3037\x3\x2\x2\x2\x3044\x3038\x3\x2"+
		"\x2\x2\x3044\x3039\x3\x2\x2\x2\x3044\x303A\x3\x2\x2\x2\x3044\x3041\x3"+
		"\x2\x2\x2\x3044\x3042\x3\x2\x2\x2\x3044\x3043\x3\x2\x2\x2\x3045\x423\x3"+
		"\x2\x2\x2\x3046\x3047\x5\x4D2\x26A\x2\x3047\x3048\a\x47C\x2\x2\x3048\x304A"+
		"\x3\x2\x2\x2\x3049\x3046\x3\x2\x2\x2\x3049\x304A\x3\x2\x2\x2\x304A\x304B"+
		"\x3\x2\x2\x2\x304B\x304C\a\x11A\x2\x2\x304C\x304D\a\x47C\x2\x2\x304D\x304E"+
		"\x5\x4D2\x26A\x2\x304E\x304F\a\x481\x2\x2\x304F\x3050\x5\x3A6\x1D4\x2"+
		"\x3050\x3051\a\x482\x2\x2\x3051\x425\x3\x2\x2\x2\x3052\x3053\t\x9C\x2"+
		"\x2\x3053\x3054\a\x481\x2\x2\x3054\x3055\x5\x492\x24A\x2\x3055\x3063\a"+
		"\x485\x2\x2\x3056\x3064\x5\x49E\x250\x2\x3057\x3058\a\x481\x2\x2\x3058"+
		"\x305D\x5\x49E\x250\x2\x3059\x305A\a\x485\x2\x2\x305A\x305C\x5\x49E\x250"+
		"\x2\x305B\x3059\x3\x2\x2\x2\x305C\x305F\x3\x2\x2\x2\x305D\x305B\x3\x2"+
		"\x2\x2\x305D\x305E\x3\x2\x2\x2\x305E\x3060\x3\x2\x2\x2\x305F\x305D\x3"+
		"\x2\x2\x2\x3060\x3061\a\x482\x2\x2\x3061\x3064\x3\x2\x2\x2\x3062\x3064"+
		"\a\x489\x2\x2\x3063\x3056\x3\x2\x2\x2\x3063\x3057\x3\x2\x2\x2\x3063\x3062"+
		"\x3\x2\x2\x2\x3064\x3065\x3\x2\x2\x2\x3065\x3066\a\x485\x2\x2\x3066\x306A"+
		"\x5\x3A6\x1D4\x2\x3067\x3068\a\x485\x2\x2\x3068\x3069\a\x1FA\x2\x2\x3069"+
		"\x306B\x5\x3A6\x1D4\x2\x306A\x3067\x3\x2\x2\x2\x306A\x306B\x3\x2\x2\x2"+
		"\x306B\x306E\x3\x2\x2\x2\x306C\x306D\a\x485\x2\x2\x306D\x306F\x5\x3A6"+
		"\x1D4\x2\x306E\x306C\x3\x2\x2\x2\x306E\x306F\x3\x2\x2\x2\x306F\x3070\x3"+
		"\x2\x2\x2\x3070\x3071\a\x482\x2\x2\x3071\x3097\x3\x2\x2\x2\x3072\x3073"+
		"\t\x9D\x2\x2\x3073\x3074\a\x481\x2\x2\x3074\x3075\x5\x492\x24A\x2\x3075"+
		"\x3083\a\x485\x2\x2\x3076\x3084\x5\x49E\x250\x2\x3077\x3078\a\x481\x2"+
		"\x2\x3078\x307D\x5\x49E\x250\x2\x3079\x307A\a\x485\x2\x2\x307A\x307C\x5"+
		"\x49E\x250\x2\x307B\x3079\x3\x2\x2\x2\x307C\x307F\x3\x2\x2\x2\x307D\x307B"+
		"\x3\x2\x2\x2\x307D\x307E\x3\x2\x2\x2\x307E\x3080\x3\x2\x2\x2\x307F\x307D"+
		"\x3\x2\x2\x2\x3080\x3081\a\x482\x2\x2\x3081\x3084\x3\x2\x2\x2\x3082\x3084"+
		"\a\x489\x2\x2\x3083\x3076\x3\x2\x2\x2\x3083\x3077\x3\x2\x2\x2\x3083\x3082"+
		"\x3\x2\x2\x2\x3084\x3085\x3\x2\x2\x2\x3085\x3086\a\x485\x2\x2\x3086\x3087"+
		"\x5\x3A6\x1D4\x2\x3087\x3088\a\x482\x2\x2\x3088\x3097\x3\x2\x2\x2\x3089"+
		"\x308A\a\x372\x2\x2\x308A\x308B\a\x481\x2\x2\x308B\x308C\x5\x492\x24A"+
		"\x2\x308C\x308D\a\x485\x2\x2\x308D\x308E\x5\x49E\x250\x2\x308E\x308F\a"+
		"\x485\x2\x2\x308F\x3090\x5\x3A6\x1D4\x2\x3090\x3091\a\x485\x2\x2\x3091"+
		"\x3092\x5\x49E\x250\x2\x3092\x3093\a\x485\x2\x2\x3093\x3094\x5\x3A6\x1D4"+
		"\x2\x3094\x3095\a\x482\x2\x2\x3095\x3097\x3\x2\x2\x2\x3096\x3052\x3\x2"+
		"\x2\x2\x3096\x3072\x3\x2\x2\x2\x3096\x3089\x3\x2\x2\x2\x3097\x427\x3\x2"+
		"\x2\x2\x3098\x3099\a\xB8\x2\x2\x3099\x30AE\a\x481\x2\x2\x309A\x30AF\x5"+
		"\x49E\x250\x2\x309B\x309C\a\x481\x2\x2\x309C\x30A1\x5\x49E\x250\x2\x309D"+
		"\x309E\a\x485\x2\x2\x309E\x30A0\x5\x49E\x250\x2\x309F\x309D\x3\x2\x2\x2"+
		"\x30A0\x30A3\x3\x2\x2\x2\x30A1\x309F\x3\x2\x2\x2\x30A1\x30A2\x3\x2\x2"+
		"\x2\x30A2\x30A4\x3\x2\x2\x2\x30A3\x30A1\x3\x2\x2\x2\x30A4\x30A5\a\x482"+
		"\x2\x2\x30A5\x30AF\x3\x2\x2\x2\x30A6\x30AF\a\x489\x2\x2\x30A7\x30A8\a"+
		"\x2E8\x2\x2\x30A8\x30A9\a\x481\x2\x2\x30A9\x30AA\x5\x49E\x250\x2\x30AA"+
		"\x30AB\a\x485\x2\x2\x30AB\x30AC\x5\x3A6\x1D4\x2\x30AC\x30AD\a\x482\x2"+
		"\x2\x30AD\x30AF\x3\x2\x2\x2\x30AE\x309A\x3\x2\x2\x2\x30AE\x309B\x3\x2"+
		"\x2\x2\x30AE\x30A6\x3\x2\x2\x2\x30AE\x30A7\x3\x2\x2\x2\x30AF\x30B0\x3"+
		"\x2\x2\x2\x30B0\x30B1\a\x485\x2\x2\x30B1\x30B2\x5\x3A6\x1D4\x2\x30B2\x30B3"+
		"\a\x482\x2\x2\x30B3\x30D1\x3\x2\x2\x2\x30B4\x30B5\a\x17F\x2\x2\x30B5\x30B6"+
		"\a\x481\x2\x2\x30B6\x30B7\x5\x492\x24A\x2\x30B7\x30C5\a\x485\x2\x2\x30B8"+
		"\x30C6\x5\x49E\x250\x2\x30B9\x30BA\a\x481\x2\x2\x30BA\x30BF\x5\x49E\x250"+
		"\x2\x30BB\x30BC\a\x485\x2\x2\x30BC\x30BE\x5\x49E\x250\x2\x30BD\x30BB\x3"+
		"\x2\x2\x2\x30BE\x30C1\x3\x2\x2\x2\x30BF\x30BD\x3\x2\x2\x2\x30BF\x30C0"+
		"\x3\x2\x2\x2\x30C0\x30C2\x3\x2\x2\x2\x30C1\x30BF\x3\x2\x2\x2\x30C2\x30C3"+
		"\a\x482\x2\x2\x30C3\x30C6\x3\x2\x2\x2\x30C4\x30C6\a\x489\x2\x2\x30C5\x30B8"+
		"\x3\x2\x2\x2\x30C5\x30B9\x3\x2\x2\x2\x30C5\x30C4\x3\x2\x2\x2\x30C6\x30C7"+
		"\x3\x2\x2\x2\x30C7\x30C8\a\x485\x2\x2\x30C8\x30CC\x5\x3A6\x1D4\x2\x30C9"+
		"\x30CA\a\x485\x2\x2\x30CA\x30CB\a\x1FA\x2\x2\x30CB\x30CD\x5\x3A6\x1D4"+
		"\x2\x30CC\x30C9\x3\x2\x2\x2\x30CC\x30CD\x3\x2\x2\x2\x30CD\x30CE\x3\x2"+
		"\x2\x2\x30CE\x30CF\a\x482\x2\x2\x30CF\x30D1\x3\x2\x2\x2\x30D0\x3098\x3"+
		"\x2\x2\x2\x30D0\x30B4\x3\x2\x2\x2\x30D1\x429\x3\x2\x2\x2\x30D2\x30D3\a"+
		"\x61\x2\x2\x30D3\x30D4\a\x481\x2\x2\x30D4\x30D5\a\x489\x2\x2\x30D5\x3165"+
		"\a\x482\x2\x2\x30D6\x30D7\ax\x2\x2\x30D7\x30D8\a\x481\x2\x2\x30D8\x30D9"+
		"\x5\x3A6\x1D4\x2\x30D9\x30DA\a:\x2\x2\x30DA\x30DB\x5\x4C6\x264\x2\x30DB"+
		"\x30DC\a\x482\x2\x2\x30DC\x3165\x3\x2\x2\x2\x30DD\x30DE\a\x3FF\x2\x2\x30DE"+
		"\x30DF\a\x481\x2\x2\x30DF\x30E0\x5\x3A6\x1D4\x2\x30E0\x30E1\a:\x2\x2\x30E1"+
		"\x30E2\x5\x4C6\x264\x2\x30E2\x30E3\a\x482\x2\x2\x30E3\x3165\x3\x2\x2\x2"+
		"\x30E4\x30E5\a\xC3\x2\x2\x30E5\x30E6\a\x481\x2\x2\x30E6\x30E7\x5\x4C6"+
		"\x264\x2\x30E7\x30E8\a\x485\x2\x2\x30E8\x30EB\x5\x3A6\x1D4\x2\x30E9\x30EA"+
		"\a\x485\x2\x2\x30EA\x30EC\x5\x3A6\x1D4\x2\x30EB\x30E9\x3\x2\x2\x2\x30EB"+
		"\x30EC\x3\x2\x2\x2\x30EC\x30ED\x3\x2\x2\x2\x30ED\x30EE\a\x482\x2\x2\x30EE"+
		"\x3165\x3\x2\x2\x2\x30EF\x30F0\a\x8E\x2\x2\x30F0\x30F1\a\x481\x2\x2\x30F1"+
		"\x30F2\a\x489\x2\x2\x30F2\x3165\a\x482\x2\x2\x30F3\x30F4\a\x9B\x2\x2\x30F4"+
		"\x30F5\a\x481\x2\x2\x30F5\x30F6\x5\x46A\x236\x2\x30F6\x30F7\a\x482\x2"+
		"\x2\x30F7\x3165\x3\x2\x2\x2\x30F8\x3165\a\xD5\x2\x2\x30F9\x3165\a\xD7"+
		"\x2\x2\x30FA\x30FB\a\xE8\x2\x2\x30FB\x30FC\a\x481\x2\x2\x30FC\x30FD\a"+
		"\x46A\x2\x2\x30FD\x30FE\a\x485\x2\x2\x30FE\x30FF\x5\x3A6\x1D4\x2\x30FF"+
		"\x3100\a\x485\x2\x2\x3100\x3101\x5\x3A6\x1D4\x2\x3101\x3102\a\x482\x2"+
		"\x2\x3102\x3165\x3\x2\x2\x2\x3103\x3104\a\xE9\x2\x2\x3104\x3105\a\x481"+
		"\x2\x2\x3105\x3106\a\x46A\x2\x2\x3106\x3107\a\x485\x2\x2\x3107\x3108\x5"+
		"\x3A6\x1D4\x2\x3108\x3109\a\x485\x2\x2\x3109\x310A\x5\x3A6\x1D4\x2\x310A"+
		"\x310B\a\x482\x2\x2\x310B\x3165\x3\x2\x2\x2\x310C\x310D\a\xEA\x2\x2\x310D"+
		"\x310E\a\x481\x2\x2\x310E\x310F\a\x46A\x2\x2\x310F\x3110\a\x485\x2\x2"+
		"\x3110\x3111\x5\x3A6\x1D4\x2\x3111\x3112\a\x482\x2\x2\x3112\x3165\x3\x2"+
		"\x2\x2\x3113\x3114\a\xEB\x2\x2\x3114\x3115\a\x481\x2\x2\x3115\x3116\a"+
		"\x46A\x2\x2\x3116\x3117\a\x485\x2\x2\x3117\x3118\x5\x3A6\x1D4\x2\x3118"+
		"\x3119\a\x482\x2\x2\x3119\x3165\x3\x2\x2\x2\x311A\x311B\a\x18D\x2\x2\x311B"+
		"\x311C\a\x481\x2\x2\x311C\x3165\a\x482\x2\x2\x311D\x311E\a\x192\x2\x2"+
		"\x311E\x311F\a\x481\x2\x2\x311F\x3165\a\x482\x2\x2\x3120\x3121\a\x1B0"+
		"\x2\x2\x3121\x3122\a\x481\x2\x2\x3122\x3125\x5\x4C6\x264\x2\x3123\x3124"+
		"\a\x485\x2\x2\x3124\x3126\a\x469\x2\x2\x3125\x3123\x3\x2\x2\x2\x3125\x3126"+
		"\x3\x2\x2\x2\x3126\x3129\x3\x2\x2\x2\x3127\x3128\a\x485\x2\x2\x3128\x312A"+
		"\a\x469\x2\x2\x3129\x3127\x3\x2\x2\x2\x3129\x312A\x3\x2\x2\x2\x312A\x312B"+
		"\x3\x2\x2\x2\x312B\x312C\a\x482\x2\x2\x312C\x3165\x3\x2\x2\x2\x312D\x312E"+
		"\a\x247\x2\x2\x312E\x312F\a\x481\x2\x2\x312F\x3165\a\x482\x2\x2\x3130"+
		"\x3131\a\x280\x2\x2\x3131\x3132\a\x481\x2\x2\x3132\x3133\x5\x3A6\x1D4"+
		"\x2\x3133\x3134\a\x485\x2\x2\x3134\x3135\x5\x3A6\x1D4\x2\x3135\x3136\a"+
		"\x482\x2\x2\x3136\x3165\x3\x2\x2\x2\x3137\x3138\a\x3C5\x2\x2\x3138\x3139"+
		"\a\x481\x2\x2\x3139\x313A\x5\x3A6\x1D4\x2\x313A\x313B\a\x485\x2\x2\x313B"+
		"\x313C\a\x469\x2\x2\x313C\x313D\a\x485\x2\x2\x313D\x313E\a\x469\x2\x2"+
		"\x313E\x313F\a\x485\x2\x2\x313F\x3140\x5\x3A6\x1D4\x2\x3140\x3141\a\x482"+
		"\x2\x2\x3141\x3165\x3\x2\x2\x2\x3142\x3165\a\x385\x2\x2\x3143\x3165\a"+
		"\x3D6\x2\x2\x3144\x3165\a\x41B\x2\x2\x3145\x3146\a\x1DD\x2\x2\x3146\x3147"+
		"\a\x481\x2\x2\x3147\x3148\x5\x3A6\x1D4\x2\x3148\x3149\a\x485\x2\x2\x3149"+
		"\x314A\x5\x3A6\x1D4\x2\x314A\x314B\a\x482\x2\x2\x314B\x3165\x3\x2\x2\x2"+
		"\x314C\x3165\x5\x42C\x217\x2\x314D\x314E\a\x1BD\x2\x2\x314E\x314F\a\x481"+
		"\x2\x2\x314F\x3150\x5\x3C0\x1E1\x2\x3150\x3151\a\x485\x2\x2\x3151\x3152"+
		"\x5\x3A6\x1D4\x2\x3152\x3153\a\x485\x2\x2\x3153\x3154\x5\x3A6\x1D4\x2"+
		"\x3154\x3155\a\x482\x2\x2\x3155\x3165\x3\x2\x2\x2\x3156\x3157\a\x3C3\x2"+
		"\x2\x3157\x3158\a\x481\x2\x2\x3158\x3159\x5\x3A6\x1D4\x2\x3159\x315A\a"+
		"\x485\x2\x2\x315A\x315B\x5\x3A6\x1D4\x2\x315B\x3162\a\x482\x2\x2\x315C"+
		"\x315D\a\x439\x2\x2\x315D\x315E\a\x19B\x2\x2\x315E\x315F\a\x481\x2\x2"+
		"\x315F\x3160\x5\x3D0\x1E9\x2\x3160\x3161\a\x482\x2\x2\x3161\x3163\x3\x2"+
		"\x2\x2\x3162\x315C\x3\x2\x2\x2\x3162\x3163\x3\x2\x2\x2\x3163\x3165\x3"+
		"\x2\x2\x2\x3164\x30D2\x3\x2\x2\x2\x3164\x30D6\x3\x2\x2\x2\x3164\x30DD"+
		"\x3\x2\x2\x2\x3164\x30E4\x3\x2\x2\x2\x3164\x30EF\x3\x2\x2\x2\x3164\x30F3"+
		"\x3\x2\x2\x2\x3164\x30F8\x3\x2\x2\x2\x3164\x30F9\x3\x2\x2\x2\x3164\x30FA"+
		"\x3\x2\x2\x2\x3164\x3103\x3\x2\x2\x2\x3164\x310C\x3\x2\x2\x2\x3164\x3113"+
		"\x3\x2\x2\x2\x3164\x311A\x3\x2\x2\x2\x3164\x311D\x3\x2\x2\x2\x3164\x3120"+
		"\x3\x2\x2\x2\x3164\x312D\x3\x2\x2\x2\x3164\x3130\x3\x2\x2\x2\x3164\x3137"+
		"\x3\x2\x2\x2\x3164\x3142\x3\x2\x2\x2\x3164\x3143\x3\x2\x2\x2\x3164\x3144"+
		"\x3\x2\x2\x2\x3164\x3145\x3\x2\x2\x2\x3164\x314C\x3\x2\x2\x2\x3164\x314D"+
		"\x3\x2\x2\x2\x3164\x3156\x3\x2\x2\x2\x3165\x42B\x3\x2\x2\x2\x3166\x316B"+
		"\x5\x436\x21C\x2\x3167\x316B\x5\x43A\x21E\x2\x3168\x316B\x5\x43E\x220"+
		"\x2\x3169\x316B\x5\x442\x222\x2\x316A\x3166\x3\x2\x2\x2\x316A\x3167\x3"+
		"\x2\x2\x2\x316A\x3168\x3\x2\x2\x2\x316A\x3169\x3\x2\x2\x2\x316B\x42D\x3"+
		"\x2\x2\x2\x316C\x316D\t\x9E\x2\x2\x316D\x42F\x3\x2\x2\x2\x316E\x3176\x5"+
		"\x42E\x218\x2\x316F\x3176\a\x4AA\x2\x2\x3170\x3176\a\x4AB\x2\x2\x3171"+
		"\x3176\a\x4AC\x2\x2\x3172\x3176\a\x4AD\x2\x2\x3173\x3176\a\x4AE\x2\x2"+
		"\x3174\x3176\a\x4AF\x2\x2\x3175\x316E\x3\x2\x2\x2\x3175\x316F\x3\x2\x2"+
		"\x2\x3175\x3170\x3\x2\x2\x2\x3175\x3171\x3\x2\x2\x2\x3175\x3172\x3\x2"+
		"\x2\x2\x3175\x3173\x3\x2\x2\x2\x3175\x3174\x3\x2\x2\x2\x3176\x431\x3\x2"+
		"\x2\x2\x3177\x317F\x5\x430\x219\x2\x3178\x317F\a\x4B0\x2\x2\x3179\x317F"+
		"\a\x4B1\x2\x2\x317A\x317F\a\x4B2\x2\x2\x317B\x317F\a\x4B3\x2\x2\x317C"+
		"\x317F\a\x4B4\x2\x2\x317D\x317F\a\x4B5\x2\x2\x317E\x3177\x3\x2\x2\x2\x317E"+
		"\x3178\x3\x2\x2\x2\x317E\x3179\x3\x2\x2\x2\x317E\x317A\x3\x2\x2\x2\x317E"+
		"\x317B\x3\x2\x2\x2\x317E\x317C\x3\x2\x2\x2\x317E\x317D\x3\x2\x2\x2\x317F"+
		"\x433\x3\x2\x2\x2\x3180\x3188\x5\x42E\x218\x2\x3181\x3188\a\x4AA\x2\x2"+
		"\x3182\x3188\a\x4AB\x2\x2\x3183\x3188\a\x4AC\x2\x2\x3184\x3188\a\x4AD"+
		"\x2\x2\x3185\x3188\a\x4B4\x2\x2\x3186\x3188\a\x4B5\x2\x2\x3187\x3180\x3"+
		"\x2\x2\x2\x3187\x3181\x3\x2\x2\x2\x3187\x3182\x3\x2\x2\x2\x3187\x3183"+
		"\x3\x2\x2\x2\x3187\x3184\x3\x2\x2\x2\x3187\x3185\x3\x2\x2\x2\x3187\x3186"+
		"\x3\x2\x2\x2\x3188\x435\x3\x2\x2\x2\x3189\x3192\a\x468\x2\x2\x318A\x3192"+
		"\x5\x4D2\x26A\x2\x318B\x3192\a\x140\x2\x2\x318C\x3192\x5\x43A\x21E\x2"+
		"\x318D\x318E\a\x481\x2\x2\x318E\x318F\x5\x3B6\x1DC\x2\x318F\x3190\a\x482"+
		"\x2\x2\x3190\x3192\x3\x2\x2\x2\x3191\x3189\x3\x2\x2\x2\x3191\x318A\x3"+
		"\x2\x2\x2\x3191\x318B\x3\x2\x2\x2\x3191\x318C\x3\x2\x2\x2\x3191\x318D"+
		"\x3\x2\x2\x2\x3192\x3193\x3\x2\x2\x2\x3193\x3194\a\x47C\x2\x2\x3194\x3195"+
		"\x5\x438\x21D\x2\x3195\x437\x3\x2\x2\x2\x3196\x3197\a\x421\x2\x2\x3197"+
		"\x3198\a\x481\x2\x2\x3198\x3199\a\x46B\x2\x2\x3199\x319A\a\x485\x2\x2"+
		"\x319A\x319B\a\x46B\x2\x2\x319B\x319C\a\x482\x2\x2\x319C\x439\x3\x2\x2"+
		"\x2\x319D\x31A5\a\x468\x2\x2\x319E\x31A5\x5\x4D2\x26A\x2\x319F\x31A5\x5"+
		"\x490\x249\x2\x31A0\x31A1\a\x481\x2\x2\x31A1\x31A2\x5\x3B6\x1DC\x2\x31A2"+
		"\x31A3\a\x482\x2\x2\x31A3\x31A5\x3\x2\x2\x2\x31A4\x319D\x3\x2\x2\x2\x31A4"+
		"\x319E\x3\x2\x2\x2\x31A4\x319F\x3\x2\x2\x2\x31A4\x31A0\x3\x2\x2\x2\x31A5"+
		"\x31A6\x3\x2\x2\x2\x31A6\x31A7\a\x47C\x2\x2\x31A7\x31A8\x5\x43C\x21F\x2"+
		"\x31A8\x43B\x3\x2\x2\x2\x31A9\x31AA\a\x2EF\x2\x2\x31AA\x31AB\a\x481\x2"+
		"\x2\x31AB\x31AC\a\x46B\x2\x2\x31AC\x31AD\a\x482\x2\x2\x31AD\x43D\x3\x2"+
		"\x2\x2\x31AE\x31B5\a\x468\x2\x2\x31AF\x31B5\x5\x4D2\x26A\x2\x31B0\x31B1"+
		"\a\x481\x2\x2\x31B1\x31B2\x5\x3B6\x1DC\x2\x31B2\x31B3\a\x482\x2\x2\x31B3"+
		"\x31B5\x3\x2\x2\x2\x31B4\x31AE\x3\x2\x2\x2\x31B4\x31AF\x3\x2\x2\x2\x31B4"+
		"\x31B0\x3\x2\x2\x2\x31B5\x31B6\x3\x2\x2\x2\x31B6\x31B7\a\x47C\x2\x2\x31B7"+
		"\x31B8\x5\x440\x221\x2\x31B8\x43F\x3\x2\x2\x2\x31B9\x31BA\a\x146\x2\x2"+
		"\x31BA\x31BB\a\x481\x2\x2\x31BB\x31BC\a\x46B\x2\x2\x31BC\x31BD\a\x482"+
		"\x2\x2\x31BD\x441\x3\x2\x2\x2\x31BE\x31C5\a\x468\x2\x2\x31BF\x31C5\x5"+
		"\x4D2\x26A\x2\x31C0\x31C1\a\x481\x2\x2\x31C1\x31C2\x5\x3B6\x1DC\x2\x31C2"+
		"\x31C3\a\x482\x2\x2\x31C3\x31C5\x3\x2\x2\x2\x31C4\x31BE\x3\x2\x2\x2\x31C4"+
		"\x31BF\x3\x2\x2\x2\x31C4\x31C0\x3\x2\x2\x2\x31C5\x31C6\x3\x2\x2\x2\x31C6"+
		"\x31C7\a\x47C\x2\x2\x31C7\x31C8\x5\x444\x223\x2\x31C8\x443\x3\x2\x2\x2"+
		"\x31C9\x31CA\a\x24F\x2\x2\x31CA\x31CB\a\x481\x2\x2\x31CB\x31CC\a\x46B"+
		"\x2\x2\x31CC\x31CD\a\x482\x2\x2\x31CD\x445\x3\x2\x2\x2\x31CE\x31CF\a\x18B"+
		"\x2\x2\x31CF\x31D0\a\x481\x2\x2\x31D0\x31D1\x5\x3A6\x1D4\x2\x31D1\x31D2"+
		"\a\x482\x2\x2\x31D2\x31ED\x3\x2\x2\x2\x31D3\x31D4\a\x18E\x2\x2\x31D4\x31D5"+
		"\a\x481\x2\x2\x31D5\x31D6\x5\x3A6\x1D4\x2\x31D6\x31D7\a\x485\x2\x2\x31D7"+
		"\x31D8\x5\x3A6\x1D4\x2\x31D8\x31D9\a\x482\x2\x2\x31D9\x31ED\x3\x2\x2\x2"+
		"\x31DA\x31DB\a\x18F\x2\x2\x31DB\x31DC\a\x481\x2\x2\x31DC\x31ED\a\x482"+
		"\x2\x2\x31DD\x31DE\a\x1DB\x2\x2\x31DE\x31DF\a\x481\x2\x2\x31DF\x31E0\x5"+
		"\x3A6\x1D4\x2\x31E0\x31E1\a\x482\x2\x2\x31E1\x31ED\x3\x2\x2\x2\x31E2\x31E3"+
		"\a\x190\x2\x2\x31E3\x31E4\a\x481\x2\x2\x31E4\x31E5\x5\x3A6\x1D4\x2\x31E5"+
		"\x31E6\a\x485\x2\x2\x31E6\x31E7\x5\x3A6\x1D4\x2\x31E7\x31E8\a\x482\x2"+
		"\x2\x31E8\x31ED\x3\x2\x2\x2\x31E9\x31EA\a\x3EE\x2\x2\x31EA\x31EB\a\x481"+
		"\x2\x2\x31EB\x31ED\a\x482\x2\x2\x31EC\x31CE\x3\x2\x2\x2\x31EC\x31D3\x3"+
		"\x2\x2\x2\x31EC\x31DA\x3\x2\x2\x2\x31EC\x31DD\x3\x2\x2\x2\x31EC\x31E2"+
		"\x3\x2\x2\x2\x31EC\x31E9\x3\x2\x2\x2\x31ED\x447\x3\x2\x2\x2\x31EE\x31EF"+
		"\a\x1A9\x2\x2\x31EF\x31F8\a\x488\x2\x2\x31F0\x31F1\a\x191\x2\x2\x31F1"+
		"\x31F2\a\x481\x2\x2\x31F2\x31F9\a\x482\x2\x2\x31F3\x31F4\a\x2B7\x2\x2"+
		"\x31F4\x31F5\a\x481\x2\x2\x31F5\x31F6\x5\x3A6\x1D4\x2\x31F6\x31F7\a\x482"+
		"\x2\x2\x31F7\x31F9\x3\x2\x2\x2\x31F8\x31F0\x3\x2\x2\x2\x31F8\x31F3\x3"+
		"\x2\x2\x2\x31F9\x449\x3\x2\x2\x2\x31FA\x3201\a\x468\x2\x2\x31FB\x3201"+
		"\x5\x4D2\x26A\x2\x31FC\x31FD\a\x481\x2\x2\x31FD\x31FE\x5\x3B6\x1DC\x2"+
		"\x31FE\x31FF\a\x482\x2\x2\x31FF\x3201\x3\x2\x2\x2\x3200\x31FA\x3\x2\x2"+
		"\x2\x3200\x31FB\x3\x2\x2\x2\x3200\x31FC\x3\x2\x2\x2\x3201\x3202\x3\x2"+
		"\x2\x2\x3202\x3203\a\x47C\x2\x2\x3203\x3204\a\x263\x2\x2\x3204\x3205\a"+
		"\x481\x2\x2\x3205\x3206\a\x46B\x2\x2\x3206\x3207\a\x482\x2\x2\x3207\x44B"+
		"\x3\x2\x2\x2\x3208\x3209\a\x434\x2\x2\x3209\x320A\x5\x3A6\x1D4\x2\x320A"+
		"\x320B\a\x3E4\x2\x2\x320B\x320C\x5\x3A6\x1D4\x2\x320C\x44D\x3\x2\x2\x2"+
		"\x320D\x320E\a\x434\x2\x2\x320E\x320F\x5\x3C0\x1E1\x2\x320F\x3210\a\x3E4"+
		"\x2\x2\x3210\x3211\x5\x3A6\x1D4\x2\x3211\x44F\x3\x2\x2\x2\x3212\x3214"+
		"\a:\x2\x2\x3213\x3212\x3\x2\x2\x2\x3213\x3214\x3\x2\x2\x2\x3214\x3215"+
		"\x3\x2\x2\x2\x3215\x3216\x5\x466\x234\x2\x3216\x451\x3\x2\x2\x2\x3217"+
		"\x3219\a:\x2\x2\x3218\x3217\x3\x2\x2\x2\x3218\x3219\x3\x2\x2\x2\x3219"+
		"\x321A\x3\x2\x2\x2\x321A\x321B\x5\x454\x22B\x2\x321B\x453\x3\x2\x2\x2"+
		"\x321C\x321E\x5\x4D2\x26A\x2\x321D\x321F\x5\x456\x22C\x2\x321E\x321D\x3"+
		"\x2\x2\x2\x321E\x321F\x3\x2\x2\x2\x321F\x455\x3\x2\x2\x2\x3220\x3222\a"+
		"\x438\x2\x2\x3221\x3220\x3\x2\x2\x2\x3221\x3222\x3\x2\x2\x2\x3222\x3223"+
		"\x3\x2\x2\x2\x3223\x3224\a\x481\x2\x2\x3224\x322B\x5\x460\x231\x2\x3225"+
		"\x3227\a\x485\x2\x2\x3226\x3225\x3\x2\x2\x2\x3226\x3227\x3\x2\x2\x2\x3227"+
		"\x3228\x3\x2\x2\x2\x3228\x322A\x5\x460\x231\x2\x3229\x3226\x3\x2\x2\x2"+
		"\x322A\x322D\x3\x2\x2\x2\x322B\x3229\x3\x2\x2\x2\x322B\x322C\x3\x2\x2"+
		"\x2\x322C\x322E\x3\x2\x2\x2\x322D\x322B\x3\x2\x2\x2\x322E\x322F\a\x482"+
		"\x2\x2\x322F\x457\x3\x2\x2\x2\x3230\x3231\a\x481\x2\x2\x3231\x3232\x5"+
		"\x460\x231\x2\x3232\x3233\a\x482\x2\x2\x3233\x459\x3\x2\x2\x2\x3234\x3236"+
		"\x5\x45C\x22F\x2\x3235\x3234\x3\x2\x2\x2\x3236\x3237\x3\x2\x2\x2\x3237"+
		"\x3235\x3\x2\x2\x2\x3237\x3238\x3\x2\x2\x2\x3238\x45B\x3\x2\x2\x2\x3239"+
		"\x323A\t\x9F\x2\x2\x323A\x45D\x3\x2\x2\x2\x323B\x323C\a\x438\x2\x2\x323C"+
		"\x323D\a\x481\x2\x2\x323D\x3244\x5\x460\x231\x2\x323E\x3240\a\x485\x2"+
		"\x2\x323F\x323E\x3\x2\x2\x2\x323F\x3240\x3\x2\x2\x2\x3240\x3241\x3\x2"+
		"\x2\x2\x3241\x3243\x5\x460\x231\x2\x3242\x323F\x3\x2\x2\x2\x3243\x3246"+
		"\x3\x2\x2\x2\x3244\x3242\x3\x2\x2\x2\x3244\x3245\x3\x2\x2\x2\x3245\x3247"+
		"\x3\x2\x2\x2\x3246\x3244\x3\x2\x2\x2\x3247\x3248\a\x482\x2\x2\x3248\x45F"+
		"\x3\x2\x2\x2\x3249\x324B\a\x265\x2\x2\x324A\x3249\x3\x2\x2\x2\x324A\x324B"+
		"\x3\x2\x2\x2\x324B\x327D\x3\x2\x2\x2\x324C\x3260\a\x1C7\x2\x2\x324D\x324E"+
		"\a\x481\x2\x2\x324E\x3253\x5\x462\x232\x2\x324F\x3250\a\x485\x2\x2\x3250"+
		"\x3252\x5\x462\x232\x2\x3251\x324F\x3\x2\x2\x2\x3252\x3255\x3\x2\x2\x2"+
		"\x3253\x3251\x3\x2\x2\x2\x3253\x3254\x3\x2\x2\x2\x3254\x3256\x3\x2\x2"+
		"\x2\x3255\x3253\x3\x2\x2\x2\x3256\x3257\a\x482\x2\x2\x3257\x3261\x3\x2"+
		"\x2\x2\x3258\x325D\x5\x462\x232\x2\x3259\x325A\a\x485\x2\x2\x325A\x325C"+
		"\x5\x462\x232\x2\x325B\x3259\x3\x2\x2\x2\x325C\x325F\x3\x2\x2\x2\x325D"+
		"\x325B\x3\x2\x2\x2\x325D\x325E\x3\x2\x2\x2\x325E\x3261\x3\x2\x2\x2\x325F"+
		"\x325D\x3\x2\x2\x2\x3260\x324D\x3\x2\x2\x2\x3260\x3258\x3\x2\x2\x2\x3261"+
		"\x327E\x3\x2\x2\x2\x3262\x3263\a\x1C7\x2\x2\x3263\x3264\a\x46F\x2\x2\x3264"+
		"\x327E\x5\x462\x232\x2\x3265\x3274\a\x177\x2\x2\x3266\x3267\a\x481\x2"+
		"\x2\x3267\x3268\x5\x462\x232\x2\x3268\x3269\a\x481\x2\x2\x3269\x326E\a"+
		"\x46A\x2\x2\x326A\x326B\a\x485\x2\x2\x326B\x326D\a\x46A\x2\x2\x326C\x326A"+
		"\x3\x2\x2\x2\x326D\x3270\x3\x2\x2\x2\x326E\x326C\x3\x2\x2\x2\x326E\x326F"+
		"\x3\x2\x2\x2\x326F\x3271\x3\x2\x2\x2\x3270\x326E\x3\x2\x2\x2\x3271\x3272"+
		"\a\x482\x2\x2\x3272\x3273\a\x482\x2\x2\x3273\x3275\x3\x2\x2\x2\x3274\x3266"+
		"\x3\x2\x2\x2\x3274\x3275\x3\x2\x2\x2\x3275\x327E\x3\x2\x2\x2\x3276\x327E"+
		"\a\x379\x2\x2\x3277\x327E\a\x39C\x2\x2\x3278\x3279\a\x3A4\x2\x2\x3279"+
		"\x327A\a\x46F\x2\x2\x327A\x327E\a\x469\x2\x2\x327B\x327E\a\x1AB\x2\x2"+
		"\x327C\x327E\a\x46A\x2\x2\x327D\x324C\x3\x2\x2\x2\x327D\x3262\x3\x2\x2"+
		"\x2\x327D\x3265\x3\x2\x2\x2\x327D\x3276\x3\x2\x2\x2\x327D\x3277\x3\x2"+
		"\x2\x2\x327D\x3278\x3\x2\x2\x2\x327D\x327B\x3\x2\x2\x2\x327D\x327C\x3"+
		"\x2\x2\x2\x327E\x461\x3\x2\x2\x2\x327F\x3282\x5\x4D2\x26A\x2\x3280\x3282"+
		"\a\x469\x2\x2\x3281\x327F\x3\x2\x2\x2\x3281\x3280\x3\x2\x2\x2\x3282\x463"+
		"\x3\x2\x2\x2\x3283\x3284\a\x481\x2\x2\x3284\x3289\x5\x466\x234\x2\x3285"+
		"\x3286\a\x485\x2\x2\x3286\x3288\x5\x466\x234\x2\x3287\x3285\x3\x2\x2\x2"+
		"\x3288\x328B\x3\x2\x2\x2\x3289\x3287\x3\x2\x2\x2\x3289\x328A\x3\x2\x2"+
		"\x2\x328A\x328C\x3\x2\x2\x2\x328B\x3289\x3\x2\x2\x2\x328C\x328D\a\x482"+
		"\x2\x2\x328D\x465\x3\x2\x2\x2\x328E\x3291\x5\x4D2\x26A\x2\x328F\x3291"+
		"\a\x46B\x2\x2\x3290\x328E\x3\x2\x2\x2\x3290\x328F\x3\x2\x2\x2\x3291\x467"+
		"\x3\x2\x2\x2\x3292\x3293\a\x422\x2\x2\x3293\x3294\a\x481\x2\x2\x3294\x3295"+
		"\x5\x46A\x236\x2\x3295\x329D\a\x482\x2\x2\x3296\x3297\a\x485\x2\x2\x3297"+
		"\x3298\a\x481\x2\x2\x3298\x3299\x5\x46A\x236\x2\x3299\x329A\a\x482\x2"+
		"\x2\x329A\x329C\x3\x2\x2\x2\x329B\x3296\x3\x2\x2\x2\x329C\x329F\x3\x2"+
		"\x2\x2\x329D\x329B\x3\x2\x2\x2\x329D\x329E\x3\x2\x2\x2\x329E\x469\x3\x2"+
		"\x2\x2\x329F\x329D\x3\x2\x2\x2\x32A0\x32A5\x5\x3A6\x1D4\x2\x32A1\x32A2"+
		"\a\x485\x2\x2\x32A2\x32A4\x5\x3A6\x1D4\x2\x32A3\x32A1\x3\x2\x2\x2\x32A4"+
		"\x32A7\x3\x2\x2\x2\x32A5\x32A3\x3\x2\x2\x2\x32A5\x32A6\x3\x2\x2\x2\x32A6"+
		"\x46B\x3\x2\x2\x2\x32A7\x32A5\x3\x2\x2\x2\x32A8\x32A9\t\xA0\x2\x2\x32A9"+
		"\x32AA\a\x481\x2\x2\x32AA\x32AB\a\x482\x2\x2\x32AB\x32B3\x5\x474\x23B"+
		"\x2\x32AC\x32AD\a\x27E\x2\x2\x32AD\x32AE\a\x481\x2\x2\x32AE\x32AF\x5\x3A6"+
		"\x1D4\x2\x32AF\x32B0\a\x482\x2\x2\x32B0\x32B1\x5\x474\x23B\x2\x32B1\x32B3"+
		"\x3\x2\x2\x2\x32B2\x32A8\x3\x2\x2\x2\x32B2\x32AC\x3\x2\x2\x2\x32B3\x46D"+
		"\x3\x2\x2\x2\x32B4\x32B5\t\xA1\x2\x2\x32B5\x32B6\a\x481\x2\x2\x32B6\x32B7"+
		"\x5\x472\x23A\x2\x32B7\x32B9\a\x482\x2\x2\x32B8\x32BA\x5\x474\x23B\x2"+
		"\x32B9\x32B8\x3\x2\x2\x2\x32B9\x32BA\x3\x2\x2\x2\x32BA\x32D5\x3\x2\x2"+
		"\x2\x32BB\x32BC\t\xA2\x2\x2\x32BC\x32BF\a\x481\x2\x2\x32BD\x32C0\a\x489"+
		"\x2\x2\x32BE\x32C0\x5\x472\x23A\x2\x32BF\x32BD\x3\x2\x2\x2\x32BF\x32BE"+
		"\x3\x2\x2\x2\x32C0\x32C1\x3\x2\x2\x2\x32C1\x32C3\a\x482\x2\x2\x32C2\x32C4"+
		"\x5\x474\x23B\x2\x32C3\x32C2\x3\x2\x2\x2\x32C3\x32C4\x3\x2\x2\x2\x32C4"+
		"\x32D5\x3\x2\x2\x2\x32C5\x32C6\a\x8F\x2\x2\x32C6\x32C7\a\x481\x2\x2\x32C7"+
		"\x32C8\x5\x472\x23A\x2\x32C8\x32C9\a\x482\x2\x2\x32C9\x32D5\x3\x2\x2\x2"+
		"\x32CA\x32CB\a\x19C\x2\x2\x32CB\x32CC\a\x481\x2\x2\x32CC\x32CD\x5\x3A6"+
		"\x1D4\x2\x32CD\x32CE\a\x482\x2\x2\x32CE\x32D5\x3\x2\x2\x2\x32CF\x32D0"+
		"\a\x19D\x2\x2\x32D0\x32D1\a\x481\x2\x2\x32D1\x32D2\x5\x46A\x236\x2\x32D2"+
		"\x32D3\a\x482\x2\x2\x32D3\x32D5\x3\x2\x2\x2\x32D4\x32B4\x3\x2\x2\x2\x32D4"+
		"\x32BB\x3\x2\x2\x2\x32D4\x32C5\x3\x2\x2\x2\x32D4\x32CA\x3\x2\x2\x2\x32D4"+
		"\x32CF\x3\x2\x2\x2\x32D5\x46F\x3\x2\x2\x2\x32D6\x32D7\t\xA3\x2\x2\x32D7"+
		"\x32D8\a\x481\x2\x2\x32D8\x32D9\x5\x3A6\x1D4\x2\x32D9\x32DA\a\x482\x2"+
		"\x2\x32DA\x32DB\x5\x474\x23B\x2\x32DB\x330F\x3\x2\x2\x2\x32DC\x32DD\t"+
		"\xA4\x2\x2\x32DD\x32DE\a\x481\x2\x2\x32DE\x32E5\x5\x3A6\x1D4\x2\x32DF"+
		"\x32E0\a\x485\x2\x2\x32E0\x32E3\x5\x3A6\x1D4\x2\x32E1\x32E2\a\x485\x2"+
		"\x2\x32E2\x32E4\x5\x3A6\x1D4\x2\x32E3\x32E1\x3\x2\x2\x2\x32E3\x32E4\x3"+
		"\x2\x2\x2\x32E4\x32E6\x3\x2\x2\x2\x32E5\x32DF\x3\x2\x2\x2\x32E5\x32E6"+
		"\x3\x2\x2\x2\x32E6\x32E7\x3\x2\x2\x2\x32E7\x32E8\a\x482\x2\x2\x32E8\x32E9"+
		"\x5\x474\x23B\x2\x32E9\x330F\x3\x2\x2\x2\x32EA\x32EB\t\xA5\x2\x2\x32EB"+
		"\x32EC\a\x481\x2\x2\x32EC\x32ED\a\x482\x2\x2\x32ED\x32EE\a\x2AC\x2\x2"+
		"\x32EE\x32F2\a\x481\x2\x2\x32EF\x32F0\a\x2BB\x2\x2\x32F0\x32F1\aq\x2\x2"+
		"\x32F1\x32F3\x5\x46A\x236\x2\x32F2\x32EF\x3\x2\x2\x2\x32F2\x32F3\x3\x2"+
		"\x2\x2\x32F3\x32F4\x3\x2\x2\x2\x32F4\x32F5\x5\x3D0\x1E9\x2\x32F5\x32F6"+
		"\a\x482\x2\x2\x32F6\x330F\x3\x2\x2\x2\x32F7\x32F8\t\xA6\x2\x2\x32F8\x32F9"+
		"\a\x481\x2\x2\x32F9\x32FA\x5\x3A6\x1D4\x2\x32FA\x32FB\a\x482\x2\x2\x32FB"+
		"\x32FC\a\x439\x2\x2\x32FC\x32FD\a\x19B\x2\x2\x32FD\x32FE\a\x481\x2\x2"+
		"\x32FE\x32FF\a\x2A6\x2\x2\x32FF\x3300\aq\x2\x2\x3300\x3302\x5\x3A6\x1D4"+
		"\x2\x3301\x3303\tM\x2\x2\x3302\x3301\x3\x2\x2\x2\x3302\x3303\x3\x2\x2"+
		"\x2\x3303\x3304\x3\x2\x2\x2\x3304\x3305\a\x482\x2\x2\x3305\x3306\a\x2AC"+
		"\x2\x2\x3306\x330A\a\x481\x2\x2\x3307\x3308\a\x2BB\x2\x2\x3308\x3309\a"+
		"q\x2\x2\x3309\x330B\x5\x46A\x236\x2\x330A\x3307\x3\x2\x2\x2\x330A\x330B"+
		"\x3\x2\x2\x2\x330B\x330C\x3\x2\x2\x2\x330C\x330D\a\x482\x2\x2\x330D\x330F"+
		"\x3\x2\x2\x2\x330E\x32D6\x3\x2\x2\x2\x330E\x32DC\x3\x2\x2\x2\x330E\x32EA"+
		"\x3\x2\x2\x2\x330E\x32F7\x3\x2\x2\x2\x330F\x471\x3\x2\x2\x2\x3310\x3312"+
		"\t\x8E\x2\x2\x3311\x3310\x3\x2\x2\x2\x3311\x3312\x3\x2\x2\x2\x3312\x3313"+
		"\x3\x2\x2\x2\x3313\x3314\x5\x3A6\x1D4\x2\x3314\x473\x3\x2\x2\x2\x3315"+
		"\x3316\a\x2AC\x2\x2\x3316\x331A\a\x481\x2\x2\x3317\x3318\a\x2BB\x2\x2"+
		"\x3318\x3319\aq\x2\x2\x3319\x331B\x5\x46A\x236\x2\x331A\x3317\x3\x2\x2"+
		"\x2\x331A\x331B\x3\x2\x2\x2\x331B\x331D\x3\x2\x2\x2\x331C\x331E\x5\x3D0"+
		"\x1E9\x2\x331D\x331C\x3\x2\x2\x2\x331D\x331E\x3\x2\x2\x2\x331E\x3320\x3"+
		"\x2\x2\x2\x331F\x3321\x5\x476\x23C\x2\x3320\x331F\x3\x2\x2\x2\x3320\x3321"+
		"\x3\x2\x2\x2\x3321\x3322\x3\x2\x2\x2\x3322\x3323\a\x482\x2\x2\x3323\x475"+
		"\x3\x2\x2\x2\x3324\x3325\t\xA7\x2\x2\x3325\x3326\x5\x478\x23D\x2\x3326"+
		"\x477\x3\x2\x2\x2\x3327\x332E\x5\x47C\x23F\x2\x3328\x3329\a^\x2\x2\x3329"+
		"\x332A\x5\x47A\x23E\x2\x332A\x332B\a\'\x2\x2\x332B\x332C\x5\x47A\x23E"+
		"\x2\x332C\x332E\x3\x2\x2\x2\x332D\x3327\x3\x2\x2\x2\x332D\x3328\x3\x2"+
		"\x2\x2\x332E\x479\x3\x2\x2\x2\x332F\x3332\x5\x47C\x23F\x2\x3330\x3332"+
		"\x5\x47E\x240\x2\x3331\x332F\x3\x2\x2\x2\x3331\x3330\x3\x2\x2\x2\x3332"+
		"\x47B\x3\x2\x2\x2\x3333\x3334\a\x408\x2\x2\x3334\x333A\a\x2D6\x2\x2\x3335"+
		"\x3336\a\x469\x2\x2\x3336\x333A\a\x2D6\x2\x2\x3337\x3338\a\xD1\x2\x2\x3338"+
		"\x333A\a\x347\x2\x2\x3339\x3333\x3\x2\x2\x2\x3339\x3335\x3\x2\x2\x2\x3339"+
		"\x3337\x3\x2\x2\x2\x333A\x47D\x3\x2\x2\x2\x333B\x333C\a\x408\x2\x2\x333C"+
		"\x3340\a\x171\x2\x2\x333D\x333E\a\x469\x2\x2\x333E\x3340\a\x171\x2\x2"+
		"\x333F\x333B\x3\x2\x2\x2\x333F\x333D\x3\x2\x2\x2\x3340\x47F\x3\x2\x2\x2"+
		"\x3341\x3342\a\x166\x2\x2\x3342\x3347\x5\x482\x242\x2\x3343\x3344\a\x485"+
		"\x2\x2\x3344\x3346\x5\x482\x242\x2\x3345\x3343\x3\x2\x2\x2\x3346\x3349"+
		"\x3\x2\x2\x2\x3347\x3345\x3\x2\x2\x2\x3347\x3348\x3\x2\x2\x2\x3348\x336D"+
		"\x3\x2\x2\x2\x3349\x3347\x3\x2\x2\x2\x334A\x334B\a\xFD\x2\x2\x334B\x334E"+
		"\a\x46F\x2\x2\x334C\x334F\x5\x4D2\x26A\x2\x334D\x334F\a\x46B\x2\x2\x334E"+
		"\x334C\x3\x2\x2\x2\x334E\x334D\x3\x2\x2\x2\x334F\x336D\x3\x2\x2\x2\x3350"+
		"\x3351\a\xFC\x2\x2\x3351\x3354\a\x46F\x2\x2\x3352\x3355\x5\x4D2\x26A\x2"+
		"\x3353\x3355\a\x46B\x2\x2\x3354\x3352\x3\x2\x2\x2\x3354\x3353\x3\x2\x2"+
		"\x2\x3355\x336D\x3\x2\x2\x2\x3356\x3357\a\x258\x2\x2\x3357\x3358\a\x46F"+
		"\x2\x2\x3358\x336D\t\x13\x2\x2\x3359\x335A\a\x3F6\x2\x2\x335A\x335B\a"+
		"\x46F\x2\x2\x335B\x336D\t\x13\x2\x2\x335C\x335D\a\x402\x2\x2\x335D\x335E"+
		"\a\x46F\x2\x2\x335E\x336D\a\x469\x2\x2\x335F\x3360\a\xF0\x2\x2\x3360\x336D"+
		"\t\x13\x2\x2\x3361\x3362\a\x3FD\x2\x2\x3362\x336D\t\x13\x2\x2\x3363\x3364"+
		"\az\x2\x2\x3364\x3367\a\x46F\x2\x2\x3365\x3368\x5\x4D2\x26A\x2\x3366\x3368"+
		"\a\xDF\x2\x2\x3367\x3365\x3\x2\x2\x2\x3367\x3366\x3\x2\x2\x2\x3368\x336D"+
		"\x3\x2\x2\x2\x3369\x336A\a\x1FF\x2\x2\x336A\x336B\a\x46F\x2\x2\x336B\x336D"+
		"\t\x13\x2\x2\x336C\x3341\x3\x2\x2\x2\x336C\x334A\x3\x2\x2\x2\x336C\x3350"+
		"\x3\x2\x2\x2\x336C\x3356\x3\x2\x2\x2\x336C\x3359\x3\x2\x2\x2\x336C\x335C"+
		"\x3\x2\x2\x2\x336C\x335F\x3\x2\x2\x2\x336C\x3361\x3\x2\x2\x2\x336C\x3363"+
		"\x3\x2\x2\x2\x336C\x3369\x3\x2\x2\x2\x336D\x481\x3\x2\x2\x2\x336E\x3375"+
		"\a\x481\x2\x2\x336F\x3370\a\x26C\x2\x2\x3370\x3371\a\x46F\x2\x2\x3371"+
		"\x3376\t\xA8\x2\x2\x3372\x3373\a\x111\x2\x2\x3373\x3374\a\x46F\x2\x2\x3374"+
		"\x3376\a\x46B\x2\x2\x3375\x336F\x3\x2\x2\x2\x3375\x3372\x3\x2\x2\x2\x3376"+
		"\x3377\x3\x2\x2\x2\x3377\x3378\a\x482\x2\x2\x3378\x483\x3\x2\x2\x2\x3379"+
		"\x337C\x5\x486\x244\x2\x337A\x337C\x5\x488\x245\x2\x337B\x3379\x3\x2\x2"+
		"\x2\x337B\x337A\x3\x2\x2\x2\x337C\x485\x3\x2\x2\x2\x337D\x337E\a\x15D"+
		"\x2\x2\x337E\x3381\x5\x4D2\x26A\x2\x337F\x3380\a\xB8\x2\x2\x3380\x3382"+
		"\a\x166\x2\x2\x3381\x337F\x3\x2\x2\x2\x3381\x3382\x3\x2\x2\x2\x3382\x3384"+
		"\x3\x2\x2\x2\x3383\x3385\a\xF9\x2\x2\x3384\x3383\x3\x2\x2\x2\x3384\x3385"+
		"\x3\x2\x2\x2\x3385\x3388\x3\x2\x2\x2\x3386\x3387\a\xB8\x2\x2\x3387\x3389"+
		"\a\x23E\x2\x2\x3388\x3386\x3\x2\x2\x2\x3388\x3389\x3\x2\x2\x2\x3389\x338A"+
		"\x3\x2\x2\x2\x338A\x338F\x5\x488\x245\x2\x338B\x338C\a\x485\x2\x2\x338C"+
		"\x338E\x5\x488\x245\x2\x338D\x338B\x3\x2\x2\x2\x338E\x3391\x3\x2\x2\x2"+
		"\x338F\x338D\x3\x2\x2\x2\x338F\x3390\x3\x2\x2\x2\x3390\x487\x3\x2\x2\x2"+
		"\x3391\x338F\x3\x2\x2\x2\x3392\x3393\a\x481\x2\x2\x3393\x3394\a\x254\x2"+
		"\x2\x3394\x3397\a\x46F\x2\x2\x3395\x3398\x5\x4D2\x26A\x2\x3396\x3398\a"+
		"\x46B\x2\x2\x3397\x3395\x3\x2\x2\x2\x3397\x3396\x3\x2\x2\x2\x3398\x339A"+
		"\x3\x2\x2\x2\x3399\x339B\a\x485\x2\x2\x339A\x3399\x3\x2\x2\x2\x339A\x339B"+
		"\x3\x2\x2\x2\x339B\x339C\x3\x2\x2\x2\x339C\x339D\a\x162\x2\x2\x339D\x339E"+
		"\a\x46F\x2\x2\x339E\x33A0\a\x46B\x2\x2\x339F\x33A1\a\x485\x2\x2\x33A0"+
		"\x339F\x3\x2\x2\x2\x33A0\x33A1\x3\x2\x2\x2\x33A1\x33A8\x3\x2\x2\x2\x33A2"+
		"\x33A3\a\x398\x2\x2\x33A3\x33A4\a\x46F\x2\x2\x33A4\x33A6\x5\x4DC\x26F"+
		"\x2\x33A5\x33A7\a\x485\x2\x2\x33A6\x33A5\x3\x2\x2\x2\x33A6\x33A7\x3\x2"+
		"\x2\x2\x33A7\x33A9\x3\x2\x2\x2\x33A8\x33A2\x3\x2\x2\x2\x33A8\x33A9\x3"+
		"\x2\x2\x2\x33A9\x33B3\x3\x2\x2\x2\x33AA\x33AB\a\x226\x2\x2\x33AB\x33AE"+
		"\a\x46F\x2\x2\x33AC\x33AF\x5\x4DC\x26F\x2\x33AD\x33AF\a\x40F\x2\x2\x33AE"+
		"\x33AC\x3\x2\x2\x2\x33AE\x33AD\x3\x2\x2\x2\x33AF\x33B1\x3\x2\x2\x2\x33B0"+
		"\x33B2\a\x485\x2\x2\x33B1\x33B0\x3\x2\x2\x2\x33B1\x33B2\x3\x2\x2\x2\x33B2"+
		"\x33B4\x3\x2\x2\x2\x33B3\x33AA\x3\x2\x2\x2\x33B3\x33B4\x3\x2\x2\x2\x33B4"+
		"\x33BB\x3\x2\x2\x2\x33B5\x33B6\a\x161\x2\x2\x33B6\x33B7\a\x46F\x2\x2\x33B7"+
		"\x33B9\x5\x4DC\x26F\x2\x33B8\x33BA\a\x485\x2\x2\x33B9\x33B8\x3\x2\x2\x2"+
		"\x33B9\x33BA\x3\x2\x2\x2\x33BA\x33BC\x3\x2\x2\x2\x33BB\x33B5\x3\x2\x2"+
		"\x2\x33BB\x33BC\x3\x2\x2\x2\x33BC\x33BD\x3\x2\x2\x2\x33BD\x33BE\a\x482"+
		"\x2\x2\x33BE\x489\x3\x2\x2\x2\x33BF\x33C0\x5\x4D2\x26A\x2\x33C0\x33C1"+
		"\a\x47C\x2\x2\x33C1\x33C2\x5\x4D2\x26A\x2\x33C2\x33C3\a\x47C\x2\x2\x33C3"+
		"\x33C4\x5\x4D2\x26A\x2\x33C4\x33C5\a\x47C\x2\x2\x33C5\x33D1\x3\x2\x2\x2"+
		"\x33C6\x33C7\x5\x4D2\x26A\x2\x33C7\x33C9\a\x47C\x2\x2\x33C8\x33CA\x5\x4D2"+
		"\x26A\x2\x33C9\x33C8\x3\x2\x2\x2\x33C9\x33CA\x3\x2\x2\x2\x33CA\x33CB\x3"+
		"\x2\x2\x2\x33CB\x33CC\a\x47C\x2\x2\x33CC\x33D1\x3\x2\x2\x2\x33CD\x33CE"+
		"\x5\x4D2\x26A\x2\x33CE\x33CF\a\x47C\x2\x2\x33CF\x33D1\x3\x2\x2\x2\x33D0"+
		"\x33BF\x3\x2\x2\x2\x33D0\x33C6\x3\x2\x2\x2\x33D0\x33CD\x3\x2\x2\x2\x33D0"+
		"\x33D1\x3\x2\x2\x2\x33D1\x33D2\x3\x2\x2\x2\x33D2\x33D3\x5\x4D2\x26A\x2"+
		"\x33D3\x48B\x3\x2\x2\x2\x33D4\x33DA\x5\x4D2\x26A\x2\x33D5\x33D6\x5\x4D2"+
		"\x26A\x2\x33D6\x33D7\a\x47C\x2\x2\x33D7\x33D8\x5\x4D2\x26A\x2\x33D8\x33DA"+
		"\x3\x2\x2\x2\x33D9\x33D4\x3\x2\x2\x2\x33D9\x33D5\x3\x2\x2\x2\x33DA\x48D"+
		"\x3\x2\x2\x2\x33DB\x33E1\x5\x4D2\x26A\x2\x33DC\x33DD\x5\x4D2\x26A\x2\x33DD"+
		"\x33DE\a\x47C\x2\x2\x33DE\x33DF\x5\x4D2\x26A\x2\x33DF\x33E1\x3\x2\x2\x2"+
		"\x33E0\x33DB\x3\x2\x2\x2\x33E0\x33DC\x3\x2\x2\x2\x33E1\x48F\x3\x2\x2\x2"+
		"\x33E2\x33E3\x5\x4D2\x26A\x2\x33E3\x33E4\a\x47C\x2\x2\x33E4\x33E5\a\x47C"+
		"\x2\x2\x33E5\x33E6\x5\x4D2\x26A\x2\x33E6\x33E7\a\x47C\x2\x2\x33E7\x33FA"+
		"\x3\x2\x2\x2\x33E8\x33E9\x5\x4D2\x26A\x2\x33E9\x33EA\a\x47C\x2\x2\x33EA"+
		"\x33EB\x5\x4D2\x26A\x2\x33EB\x33EC\a\x47C\x2\x2\x33EC\x33ED\x5\x4D2\x26A"+
		"\x2\x33ED\x33EE\a\x47C\x2\x2\x33EE\x33FA\x3\x2\x2\x2\x33EF\x33F0\x5\x4D2"+
		"\x26A\x2\x33F0\x33F2\a\x47C\x2\x2\x33F1\x33F3\x5\x4D2\x26A\x2\x33F2\x33F1"+
		"\x3\x2\x2\x2\x33F2\x33F3\x3\x2\x2\x2\x33F3\x33F4\x3\x2\x2\x2\x33F4\x33F5"+
		"\a\x47C\x2\x2\x33F5\x33FA\x3\x2\x2\x2\x33F6\x33F7\x5\x4D2\x26A\x2\x33F7"+
		"\x33F8\a\x47C\x2\x2\x33F8\x33FA\x3\x2\x2\x2\x33F9\x33E2\x3\x2\x2\x2\x33F9"+
		"\x33E8\x3\x2\x2\x2\x33F9\x33EF\x3\x2\x2\x2\x33F9\x33F6\x3\x2\x2\x2\x33F9"+
		"\x33FA\x3\x2\x2\x2\x33FA\x33FB\x3\x2\x2\x2\x33FB\x33FC\x5\x4D2\x26A\x2"+
		"\x33FC\x491\x3\x2\x2\x2\x33FD\x33FE\x5\x4D2\x26A\x2\x33FE\x3400\a\x47C"+
		"\x2\x2\x33FF\x3401\x5\x4D2\x26A\x2\x3400\x33FF\x3\x2\x2\x2\x3400\x3401"+
		"\x3\x2\x2\x2\x3401\x3402\x3\x2\x2\x2\x3402\x3403\a\x47C\x2\x2\x3403\x3408"+
		"\x3\x2\x2\x2\x3404\x3405\x5\x4D2\x26A\x2\x3405\x3406\a\x47C\x2\x2\x3406"+
		"\x3408\x3\x2\x2\x2\x3407\x33FD\x3\x2\x2\x2\x3407\x3404\x3\x2\x2\x2\x3407"+
		"\x3408\x3\x2\x2\x2\x3408\x3409\x3\x2\x2\x2\x3409\x3418\x5\x4D2\x26A\x2"+
		"\x340A\x340B\x5\x4D2\x26A\x2\x340B\x340D\a\x47C\x2\x2\x340C\x340E\x5\x4D2"+
		"\x26A\x2\x340D\x340C\x3\x2\x2\x2\x340D\x340E\x3\x2\x2\x2\x340E\x340F\x3"+
		"\x2\x2\x2\x340F\x3410\a\x47C\x2\x2\x3410\x3415\x3\x2\x2\x2\x3411\x3412"+
		"\x5\x4D2\x26A\x2\x3412\x3413\a\x47C\x2\x2\x3413\x3415\x3\x2\x2\x2\x3414"+
		"\x340A\x3\x2\x2\x2\x3414\x3411\x3\x2\x2\x2\x3414\x3415\x3\x2\x2\x2\x3415"+
		"\x3416\x3\x2\x2\x2\x3416\x3418\ag\x2\x2\x3417\x3407\x3\x2\x2\x2\x3417"+
		"\x3414\x3\x2\x2\x2\x3418\x493\x3\x2\x2\x2\x3419\x341A\x5\x4D2\x26A\x2"+
		"\x341A\x341B\a\x47C\x2\x2\x341B\x341D\x3\x2\x2\x2\x341C\x3419\x3\x2\x2"+
		"\x2\x341C\x341D\x3\x2\x2\x2\x341D\x341E\x3\x2\x2\x2\x341E\x341F\x5\x4D2"+
		"\x26A\x2\x341F\x495\x3\x2\x2\x2\x3420\x3421\x5\x4D2\x26A\x2\x3421\x3422"+
		"\a\x47C\x2\x2\x3422\x3424\x3\x2\x2\x2\x3423\x3420\x3\x2\x2\x2\x3423\x3424"+
		"\x3\x2\x2\x2\x3424\x3425\x3\x2\x2\x2\x3425\x3426\x5\x4D2\x26A\x2\x3426"+
		"\x497\x3\x2\x2\x2\x3427\x3429\x5\x4D2\x26A\x2\x3428\x3427\x3\x2\x2\x2"+
		"\x3428\x3429\x3\x2\x2\x2\x3429\x342A\x3\x2\x2\x2\x342A\x342C\a\x47C\x2"+
		"\x2\x342B\x342D\x5\x4D2\x26A\x2\x342C\x342B\x3\x2\x2\x2\x342C\x342D\x3"+
		"\x2\x2\x2\x342D\x342E\x3\x2\x2\x2\x342E\x342F\a\x47C\x2\x2\x342F\x3432"+
		"\x5\x4D2\x26A\x2\x3430\x3432\x5\x496\x24C\x2\x3431\x3428\x3\x2\x2\x2\x3431"+
		"\x3430\x3\x2\x2\x2\x3432\x499\x3\x2\x2\x2\x3433\x3435\x5\x4D2\x26A\x2"+
		"\x3434\x3433\x3\x2\x2\x2\x3434\x3435\x3\x2\x2\x2\x3435\x3436\x3\x2\x2"+
		"\x2\x3436\x3438\a\x47C\x2\x2\x3437\x3439\x5\x4D2\x26A\x2\x3438\x3437\x3"+
		"\x2\x2\x2\x3438\x3439\x3\x2\x2\x2\x3439\x343A\x3\x2\x2\x2\x343A\x343C"+
		"\a\x47C\x2\x2\x343B\x343D\x5\x4D2\x26A\x2\x343C\x343B\x3\x2\x2\x2\x343C"+
		"\x343D\x3\x2\x2\x2\x343D\x343E\x3\x2\x2\x2\x343E\x343F\a\x47C\x2\x2\x343F"+
		"\x3442\x5\x4D2\x26A\x2\x3440\x3442\x5\x498\x24D\x2\x3441\x3434\x3\x2\x2"+
		"\x2\x3441\x3440\x3\x2\x2\x2\x3442\x49B\x3\x2\x2\x2\x3443\x3446\x5\x490"+
		"\x249\x2\x3444\x3446\a\x468\x2\x2\x3445\x3443\x3\x2\x2\x2\x3445\x3444"+
		"\x3\x2\x2\x2\x3446\x49D\x3\x2\x2\x2\x3447\x3448\t\x97\x2\x2\x3448\x3449"+
		"\a\x47C\x2\x2\x3449\x3467\x5\x4D2\x26A\x2\x344A\x344C\x5\x4D2\x26A\x2"+
		"\x344B\x344A\x3\x2\x2\x2\x344B\x344C\x3\x2\x2\x2\x344C\x344D\x3\x2\x2"+
		"\x2\x344D\x344F\a\x47C\x2\x2\x344E\x3450\x5\x4D2\x26A\x2\x344F\x344E\x3"+
		"\x2\x2\x2\x344F\x3450\x3\x2\x2\x2\x3450\x3451\x3\x2\x2\x2\x3451\x3453"+
		"\a\x47C\x2\x2\x3452\x3454\x5\x4D2\x26A\x2\x3453\x3452\x3\x2\x2\x2\x3453"+
		"\x3454\x3\x2\x2\x2\x3454\x3455\x3\x2\x2\x2\x3455\x3456\a\x47C\x2\x2\x3456"+
		"\x3467\x5\x4D2\x26A\x2\x3457\x3459\x5\x4D2\x26A\x2\x3458\x3457\x3\x2\x2"+
		"\x2\x3458\x3459\x3\x2\x2\x2\x3459\x345A\x3\x2\x2\x2\x345A\x345C\a\x47C"+
		"\x2\x2\x345B\x345D\x5\x4D2\x26A\x2\x345C\x345B\x3\x2\x2\x2\x345C\x345D"+
		"\x3\x2\x2\x2\x345D\x345E\x3\x2\x2\x2\x345E\x345F\a\x47C\x2\x2\x345F\x3467"+
		"\x5\x4D2\x26A\x2\x3460\x3462\x5\x4D2\x26A\x2\x3461\x3460\x3\x2\x2\x2\x3461"+
		"\x3462\x3\x2\x2\x2\x3462\x3463\x3\x2\x2\x2\x3463\x3464\a\x47C\x2\x2\x3464"+
		"\x3467\x5\x4D2\x26A\x2\x3465\x3467\x5\x4D2\x26A\x2\x3466\x3447\x3\x2\x2"+
		"\x2\x3466\x344B\x3\x2\x2\x2\x3466\x3458\x3\x2\x2\x2\x3466\x3461\x3\x2"+
		"\x2\x2\x3466\x3465\x3\x2\x2\x2\x3467\x49F\x3\x2\x2\x2\x3468\x346A\x5\x4D2"+
		"\x26A\x2\x3469\x346B\tM\x2\x2\x346A\x3469\x3\x2\x2\x2\x346A\x346B\x3\x2"+
		"\x2\x2\x346B\x3473\x3\x2\x2\x2\x346C\x346D\a\x485\x2\x2\x346D\x346F\x5"+
		"\x4D2\x26A\x2\x346E\x3470\tM\x2\x2\x346F\x346E\x3\x2\x2\x2\x346F\x3470"+
		"\x3\x2\x2\x2\x3470\x3472\x3\x2\x2\x2\x3471\x346C\x3\x2\x2\x2\x3472\x3475"+
		"\x3\x2\x2\x2\x3473\x3471\x3\x2\x2\x2\x3473\x3474\x3\x2\x2\x2\x3474\x4A1"+
		"\x3\x2\x2\x2\x3475\x3473\x3\x2\x2\x2\x3476\x347B\x5\x4A4\x253\x2\x3477"+
		"\x3478\a\x485\x2\x2\x3478\x347A\x5\x4A4\x253\x2\x3479\x3477\x3\x2\x2\x2"+
		"\x347A\x347D\x3\x2\x2\x2\x347B\x3479\x3\x2\x2\x2\x347B\x347C\x3\x2\x2"+
		"\x2\x347C\x4A3\x3\x2\x2\x2\x347D\x347B\x3\x2\x2\x2\x347E\x3480\x5\x4D2"+
		"\x26A\x2\x347F\x347E\x3\x2\x2\x2\x347F\x3480\x3\x2\x2\x2\x3480\x3481\x3"+
		"\x2\x2\x2\x3481\x3483\a\x47C\x2\x2\x3482\x347F\x3\x2\x2\x2\x3483\x3486"+
		"\x3\x2\x2\x2\x3484\x3482\x3\x2\x2\x2\x3484\x3485\x3\x2\x2\x2\x3485\x3487"+
		"\x3\x2\x2\x2\x3486\x3484\x3\x2\x2\x2\x3487\x3488\x5\x4D2\x26A\x2\x3488"+
		"\x4A5\x3\x2\x2\x2\x3489\x348E\x5\x4D2\x26A\x2\x348A\x348B\a\x485\x2\x2"+
		"\x348B\x348D\x5\x4D2\x26A\x2\x348C\x348A\x3\x2\x2\x2\x348D\x3490\x3\x2"+
		"\x2\x2\x348E\x348C\x3\x2\x2\x2\x348E\x348F\x3\x2\x2\x2\x348F\x4A7\x3\x2"+
		"\x2\x2\x3490\x348E\x3\x2\x2\x2\x3491\x3494\x5\x4D2\x26A\x2\x3492\x3494"+
		"\a\x468\x2\x2\x3493\x3491\x3\x2\x2\x2\x3493\x3492\x3\x2\x2\x2\x3494\x4A9"+
		"\x3\x2\x2\x2\x3495\x3496\t\x13\x2\x2\x3496\x4AB\x3\x2\x2\x2\x3497\x3498"+
		"\t}\x2\x2\x3498\x4AD\x3\x2\x2\x2\x3499\x349B\a\x271\x2\x2\x349A\x3499"+
		"\x3\x2\x2\x2\x349A\x349B\x3\x2\x2\x2\x349B\x349C\x3\x2\x2\x2\x349C\x349D"+
		"\a\x281\x2\x2\x349D\x4AF\x3\x2\x2\x2\x349E\x34AA\x5\x4AE\x258\x2\x349F"+
		"\x34A0\a\xF9\x2\x2\x34A0\x34A3\x5\x3B4\x1DB\x2\x34A1\x34A2\a\x9C\x2\x2"+
		"\x34A2\x34A4\x5\x4D2\x26A\x2\x34A3\x34A1\x3\x2\x2\x2\x34A3\x34A4\x3\x2"+
		"\x2\x2\x34A4\x34A7\x3\x2\x2\x2\x34A5\x34A6\a\x438\x2\x2\x34A6\x34A8\a"+
		"\x422\x2\x2\x34A7\x34A5\x3\x2\x2\x2\x34A7\x34A8\x3\x2\x2\x2\x34A8\x34AA"+
		"\x3\x2\x2\x2\x34A9\x349E\x3\x2\x2\x2\x34A9\x349F\x3\x2\x2\x2\x34AA\x4B1"+
		"\x3\x2\x2\x2\x34AB\x34B1\x5\x49A\x24E\x2\x34AC\x34B1\a\x340\x2\x2\x34AD"+
		"\x34B1\a\x200\x2\x2\x34AE\x34B1\a\x61\x2\x2\x34AF\x34B1\a\x8E\x2\x2\x34B0"+
		"\x34AB\x3\x2\x2\x2\x34B0\x34AC\x3\x2\x2\x2\x34B0\x34AD\x3\x2\x2\x2\x34B0"+
		"\x34AE\x3\x2\x2\x2\x34B0\x34AF\x3\x2\x2\x2\x34B1\x4B3\x3\x2\x2\x2\x34B2"+
		"\x34B3\a\\\x2\x2\x34B3\x34B4\a\xC2\x2\x2\x34B4\x34B5\a\x3E9\x2\x2\x34B5"+
		"\x34B6\a\x481\x2\x2\x34B6\x34B7\a\x468\x2\x2\x34B7\x34B8\a\x482\x2\x2"+
		"\x34B8\x34B9\a\x3E8\x2\x2\x34B9\x34BA\a\x46F\x2\x2\x34BA\x34BC\x5\x1E8"+
		"\xF5\x2\x34BB\x34BD\a\x486\x2\x2\x34BC\x34BB\x3\x2\x2\x2\x34BC\x34BD\x3"+
		"\x2\x2\x2\x34BD\x4B5\x3\x2\x2\x2\x34BE\x34BF\a\\\x2\x2\x34BF\x34C1\a\x10E"+
		"\x2\x2\x34C0\x34C2\a\xC2\x2\x2\x34C1\x34C0\x3\x2\x2\x2\x34C1\x34C2\x3"+
		"\x2\x2\x2\x34C2\x34C3\x3\x2\x2\x2\x34C3\x34C4\a\x468\x2\x2\x34C4\x34C5"+
		"\a\x181\x2\x2\x34C5\x34C6\a\x37C\x2\x2\x34C6\x34C7\x5\x4BA\x25E\x2\x34C7"+
		"\x34C8\a\x3EB\x2\x2\x34C8\x34C9\a\x37C\x2\x2\x34C9\x34CC\x5\x4BA\x25E"+
		"\x2\x34CA\x34CB\a\x485\x2\x2\x34CB\x34CD\a\x46B\x2\x2\x34CC\x34CA\x3\x2"+
		"\x2\x2\x34CC\x34CD\x3\x2\x2\x2\x34CD\x34CE\x3\x2\x2\x2\x34CE\x34CF\a\x294"+
		"\x2\x2\x34CF\x34D0\a\xBF\x2\x2\x34D0\x34E7\x5\x4B8\x25D\x2\x34D1\x34D8"+
		"\a\x438\x2\x2\x34D2\x34D3\t\xA9\x2\x2\x34D3\x34D4\a\x46F\x2\x2\x34D4\x34D6"+
		"\a\x468\x2\x2\x34D5\x34D7\a\x485\x2\x2\x34D6\x34D5\x3\x2\x2\x2\x34D6\x34D7"+
		"\x3\x2\x2\x2\x34D7\x34D9\x3\x2\x2\x2\x34D8\x34D2\x3\x2\x2\x2\x34D8\x34D9"+
		"\x3\x2\x2\x2\x34D9\x34E0\x3\x2\x2\x2\x34DA\x34DB\a\x204\x2\x2\x34DB\x34DC"+
		"\a\x46F\x2\x2\x34DC\x34DE\t\x2\x2\x2\x34DD\x34DF\a\x485\x2\x2\x34DE\x34DD"+
		"\x3\x2\x2\x2\x34DE\x34DF\x3\x2\x2\x2\x34DF\x34E1\x3\x2\x2\x2\x34E0\x34DA"+
		"\x3\x2\x2\x2\x34E0\x34E1\x3\x2\x2\x2\x34E1\x34E5\x3\x2\x2\x2\x34E2\x34E3"+
		"\a\x12E\x2\x2\x34E3\x34E4\a\x46F\x2\x2\x34E4\x34E6\x5\x4AA\x256\x2\x34E5"+
		"\x34E2\x3\x2\x2\x2\x34E5\x34E6\x3\x2\x2\x2\x34E6\x34E8\x3\x2\x2\x2\x34E7"+
		"\x34D1\x3\x2\x2\x2\x34E7\x34E8\x3\x2\x2\x2\x34E8\x34EA\x3\x2\x2\x2\x34E9"+
		"\x34EB\a\x486\x2\x2\x34EA\x34E9\x3\x2\x2\x2\x34EA\x34EB\x3\x2\x2\x2\x34EB"+
		"\x4B7\x3\x2\x2\x2\x34EC\x34EF\x5\x4D2\x26A\x2\x34ED\x34EF\x5\x3A6\x1D4"+
		"\x2\x34EE\x34EC\x3\x2\x2\x2\x34EE\x34ED\x3\x2\x2\x2\x34EF\x4B9\x3\x2\x2"+
		"\x2\x34F0\x34F3\x5\x4D2\x26A\x2\x34F1\x34F3\x5\x3A6\x1D4\x2\x34F2\x34F0"+
		"\x3\x2\x2\x2\x34F2\x34F1\x3\x2\x2\x2\x34F3\x4BB\x3\x2\x2\x2\x34F4\x34F5"+
		"\a\x130\x2\x2\x34F5\x34F6\a\xC2\x2\x2\x34F6\x34F8\a\x468\x2\x2\x34F7\x34F9"+
		"\a\x486\x2\x2\x34F8\x34F7\x3\x2\x2\x2\x34F8\x34F9\x3\x2\x2\x2\x34F9\x3506"+
		"\x3\x2\x2\x2\x34FA\x3501\a\x438\x2\x2\x34FB\x34FC\a\x134\x2\x2\x34FC\x34FD"+
		"\a\x46F\x2\x2\x34FD\x34FE\t\x3\x2\x2\x34FE\x34FF\a\x109\x2\x2\x34FF\x3500"+
		"\a\x46F\x2\x2\x3500\x3502\t\x3\x2\x2\x3501\x34FB\x3\x2\x2\x2\x3501\x3502"+
		"\x3\x2\x2\x2\x3502\x3504\x3\x2\x2\x2\x3503\x3505\a\x95\x2\x2\x3504\x3503"+
		"\x3\x2\x2\x2\x3504\x3505\x3\x2\x2\x2\x3505\x3507\x3\x2\x2\x2\x3506\x34FA"+
		"\x3\x2\x2\x2\x3506\x3507\x3\x2\x2\x2\x3507\x4BD\x3\x2\x2\x2\x3508\x350A"+
		"\a\x430\x2\x2\x3509\x3508\x3\x2\x2\x2\x3509\x350A\x3\x2\x2\x2\x350A\x350B"+
		"\x3\x2\x2\x2\x350B\x350C\a\x481\x2\x2\x350C\x350D\x5\x4C0\x261\x2\x350D"+
		"\x3513\a\x482\x2\x2\x350E\x3510\a\x485\x2\x2\x350F\x350E\x3\x2\x2\x2\x350F"+
		"\x3510\x3\x2\x2\x2\x3510\x3511\x3\x2\x2\x2\x3511\x3512\a\x3E8\x2\x2\x3512"+
		"\x3514\x5\x1E8\xF5\x2\x3513\x350F\x3\x2\x2\x2\x3513\x3514\x3\x2\x2\x2"+
		"\x3514\x3516\x3\x2\x2\x2\x3515\x3517\a\x486\x2\x2\x3516\x3515\x3\x2\x2"+
		"\x2\x3516\x3517\x3\x2\x2\x2\x3517\x4BF\x3\x2\x2\x2\x3518\x3519\a\x18A"+
		"\x2\x2\x3519\x351A\a\xC2\x2\x2\x351A\x351B\a\x19B\x2\x2\x351B\x351C\t"+
		"\x3\x2\x2\x351C\x351D\a\x181\x2\x2\x351D\x351F\x5\x4C2\x262\x2\x351E\x3520"+
		"\a\x486\x2\x2\x351F\x351E\x3\x2\x2\x2\x351F\x3520\x3\x2\x2\x2\x3520\x4C1"+
		"\x3\x2\x2\x2\x3521\x3522\x5\x4D2\x26A\x2\x3522\x3523\a\x47C\x2\x2\x3523"+
		"\x3524\x5\x4D2\x26A\x2\x3524\x3525\a\x47C\x2\x2\x3525\x3526\x5\x4D2\x26A"+
		"\x2\x3526\x3529\x3\x2\x2\x2\x3527\x3529\x5\x4D2\x26A\x2\x3528\x3521\x3"+
		"\x2\x2\x2\x3528\x3527\x3\x2\x2\x2\x3529\x4C3\x3\x2\x2\x2\x352A\x352B\a"+
		"\x375\x2\x2\x352B\x352C\a\x294\x2\x2\x352C\x352D\a\xC2\x2\x2\x352D\x352E"+
		"\t\x3\x2\x2\x352E\x352F\a\x241\x2\x2\x352F\x3530\a\x403\x2\x2\x3530\x3534"+
		"\x5\x3A6\x1D4\x2\x3531\x3532\a\x481\x2\x2\x3532\x3533\t\x3\x2\x2\x3533"+
		"\x3535\a\x482\x2\x2\x3534\x3531\x3\x2\x2\x2\x3534\x3535\x3\x2\x2\x2\x3535"+
		"\x3537\x3\x2\x2\x2\x3536\x3538\a\x486\x2\x2\x3537\x3536\x3\x2\x2\x2\x3537"+
		"\x3538\x3\x2\x2\x2\x3538\x4C5\x3\x2\x2\x2\x3539\x353A\x5\x4D2\x26A\x2"+
		"\x353A\x353B\a\x481\x2\x2\x353B\x353C\a\x223\x2\x2\x353C\x353D\a\x482"+
		"\x2\x2\x353D\x355F\x3\x2\x2\x2\x353E\x353F\x5\x4D2\x26A\x2\x353F\x3540"+
		"\a\x481\x2\x2\x3540\x3541\a\x469\x2\x2\x3541\x3542\a\x485\x2\x2\x3542"+
		"\x3543\a\x469\x2\x2\x3543\x3544\a\x482\x2\x2\x3544\x355F\x3\x2\x2\x2\x3545"+
		"\x3546\x5\x4D2\x26A\x2\x3546\x3547\a\x481\x2\x2\x3547\x3548\a\x469\x2"+
		"\x2\x3548\x3549\a\x482\x2\x2\x3549\x355F\x3\x2\x2\x2\x354A\x354B\x5\x4D2"+
		"\x26A\x2\x354B\x354C\a\x481\x2\x2\x354C\x354D\t~\x2\x2\x354D\x354E\x5"+
		"\x492\x24A\x2\x354E\x354F\a\x482\x2\x2\x354F\x355F\x3\x2\x2\x2\x3550\x3551"+
		"\x5\x4D2\x26A\x2\x3551\x3557\a\x1B0\x2\x2\x3552\x3553\a\x481\x2\x2\x3553"+
		"\x3554\a\x469\x2\x2\x3554\x3555\a\x485\x2\x2\x3555\x3556\a\x469\x2\x2"+
		"\x3556\x3558\a\x482\x2\x2\x3557\x3552\x3\x2\x2\x2\x3557\x3558\x3\x2\x2"+
		"\x2\x3558\x355F\x3\x2\x2\x2\x3559\x355B\a\x11B\x2\x2\x355A\x355C\a\x2D7"+
		"\x2\x2\x355B\x355A\x3\x2\x2\x2\x355B\x355C\x3\x2\x2\x2\x355C\x355F\x3"+
		"\x2\x2\x2\x355D\x355F\x5\x4D2\x26A\x2\x355E\x3539\x3\x2\x2\x2\x355E\x353E"+
		"\x3\x2\x2\x2\x355E\x3545\x3\x2\x2\x2\x355E\x354A\x3\x2\x2\x2\x355E\x3550"+
		"\x3\x2\x2\x2\x355E\x3559\x3\x2\x2\x2\x355E\x355D\x3\x2\x2\x2\x355F\x4C7"+
		"\x3\x2\x2\x2\x3560\x3565\a\x281\x2\x2\x3561\x3565\a\xF9\x2\x2\x3562\x3565"+
		"\x5\x4CA\x266\x2\x3563\x3565\x5\x4D2\x26A\x2\x3564\x3560\x3\x2\x2\x2\x3564"+
		"\x3561\x3\x2\x2\x2\x3564\x3562\x3\x2\x2\x2\x3564\x3563\x3\x2\x2\x2\x3565"+
		"\x4C9\x3\x2\x2\x2\x3566\x3576\a\x46B\x2\x2\x3567\x3576\a\x46C\x2\x2\x3568"+
		"\x356A\x5\x4CC\x267\x2\x3569\x3568\x3\x2\x2\x2\x3569\x356A\x3\x2\x2\x2"+
		"\x356A\x356B\x3\x2\x2\x2\x356B\x3576\a\x469\x2\x2\x356C\x356E\x5\x4CC"+
		"\x267\x2\x356D\x356C\x3\x2\x2\x2\x356D\x356E\x3\x2\x2\x2\x356E\x356F\x3"+
		"\x2\x2\x2\x356F\x3576\t\xAA\x2\x2\x3570\x3572\x5\x4CC\x267\x2\x3571\x3570"+
		"\x3\x2\x2\x2\x3571\x3572\x3\x2\x2\x2\x3572\x3573\x3\x2\x2\x2\x3573\x3574"+
		"\a\x480\x2\x2\x3574\x3576\t\xAB\x2\x2\x3575\x3566\x3\x2\x2\x2\x3575\x3567"+
		"\x3\x2\x2\x2\x3575\x3569\x3\x2\x2\x2\x3575\x356D\x3\x2\x2\x2\x3575\x3571"+
		"\x3\x2\x2\x2\x3576\x4CB\x3\x2\x2\x2\x3577\x3578\t\x8C\x2\x2\x3578\x4CD"+
		"\x3\x2\x2\x2\x3579\x3583\a\x46B\x2\x2\x357A\x3583\a\x46C\x2\x2\x357B\x3583"+
		"\t\x8F\x2\x2\x357C\x357E\a\x480\x2\x2\x357D\x357F\t\x8C\x2\x2\x357E\x357D"+
		"\x3\x2\x2\x2\x357E\x357F\x3\x2\x2\x2\x357F\x3580\x3\x2\x2\x2\x3580\x3583"+
		"\t\xAB\x2\x2\x3581\x3583\x5\x3A8\x1D5\x2\x3582\x3579\x3\x2\x2\x2\x3582"+
		"\x357A\x3\x2\x2\x2\x3582\x357B\x3\x2\x2\x2\x3582\x357C\x3\x2\x2\x2\x3582"+
		"\x3581\x3\x2\x2\x2\x3583\x4CF\x3\x2\x2\x2\x3584\x3585\t\xAC\x2\x2\x3585"+
		"\x4D1\x3\x2\x2\x2\x3586\x358B\a\x46A\x2\x2\x3587\x358B\a\x465\x2\x2\x3588"+
		"\x358B\a\x467\x2\x2\x3589\x358B\x5\x4D0\x269\x2\x358A\x3586\x3\x2\x2\x2"+
		"\x358A\x3587\x3\x2\x2\x2\x358A\x3588\x3\x2\x2\x2\x358A\x3589\x3\x2\x2"+
		"\x2\x358B\x4D3\x3\x2\x2\x2\x358C\x358D\a\x46A\x2\x2\x358D\x4D5\x3\x2\x2"+
		"\x2\x358E\x3591\x5\x4D2\x26A\x2\x358F\x3591\a\x46B\x2\x2\x3590\x358E\x3"+
		"\x2\x2\x2\x3590\x358F\x3\x2\x2\x2\x3591\x4D7\x3\x2\x2\x2\x3592\x35A2\a"+
		"\x46F\x2\x2\x3593\x35A2\a\x470\x2\x2\x3594\x35A2\a\x471\x2\x2\x3595\x3596"+
		"\a\x471\x2\x2\x3596\x35A2\a\x46F\x2\x2\x3597\x3598\a\x470\x2\x2\x3598"+
		"\x35A2\a\x46F\x2\x2\x3599\x359A\a\x471\x2\x2\x359A\x35A2\a\x470\x2\x2"+
		"\x359B\x359C\a\x472\x2\x2\x359C\x35A2\a\x46F\x2\x2\x359D\x359E\a\x472"+
		"\x2\x2\x359E\x35A2\a\x470\x2\x2\x359F\x35A0\a\x472\x2\x2\x35A0\x35A2\a"+
		"\x471\x2\x2\x35A1\x3592\x3\x2\x2\x2\x35A1\x3593\x3\x2\x2\x2\x35A1\x3594"+
		"\x3\x2\x2\x2\x35A1\x3595\x3\x2\x2\x2\x35A1\x3597\x3\x2\x2\x2\x35A1\x3599"+
		"\x3\x2\x2\x2\x35A1\x359B\x3\x2\x2\x2\x35A1\x359D\x3\x2\x2\x2\x35A1\x359F"+
		"\x3\x2\x2\x2\x35A2\x4D9\x3\x2\x2\x2\x35A3\x35A4\t\xAD\x2\x2\x35A4\x4DB"+
		"\x3\x2\x2\x2\x35A5\x35A7\a\x469\x2\x2\x35A6\x35A8\t\xAE\x2\x2\x35A7\x35A6"+
		"\x3\x2\x2\x2\x35A7\x35A8\x3\x2\x2\x2\x35A8\x4DD\x3\x2\x2\x2\x74A\x4E1"+
		"\x4E9\x4EE\x4F2\x4F8\x4FA\x4FF\x506\x50A\x510\x514\x518\x51C\x520\x524"+
		"\x528\x52C\x52F\x536\x5DE\x5E5\x5F3\x5F7\x5FC\x601\x605\x609\x60E\x613"+
		"\x615\x619\x61C\x623\x626\x62F\x632\x63D\x642\x647\x64C\x651\x657\x65B"+
		"\x65E\x662\x665\x668\x66F\x673\x675\x67A\x680\x684\x691\x697\x69A\x6A3"+
		"\x6A6\x6BB\x6C3\x6C8\x6CB\x6D0\x6D3\x6D8\x6E1\x6ED\x6F2\x6F5\x6FA\x700"+
		"\x705\x716\x719\x71C\x71F\x724\x72D\x73C\x74D\x758\x75E\x76D\x77C\x785"+
		"\x789\x78E\x794\x79A\x79D\x7A2\x7A7\x7AF\x7B9\x7CC\x7D4\x7E1\x7E3\x7EF"+
		"\x7F1\x7F8\x801\x807\x810\x81E\x828\x832\x85A\x871\x895\x897\x8A9\x8C1"+
		"\x8C4\x8D2\x8F2\x904\x907\x90C\x90F\x914\x917\x91C\x91F\x924\x927\x92F"+
		"\x932\x93A\x947\x952\x957\x95B\x961\x978\x984\x98F\x994\x998\x99E\x9A0"+
		"\x9AD\x9C4\x9CB\x9D4\x9D9\x9DC\x9E1\x9E4\x9E9\x9EE\xA0A\xA12\xA18\xA1F"+
		"\xA21\xA2E\xA35\xA44\xA56\xA59\xA5B\xA60\xA64\xA67\xA69\xA6F\xA72\xA74"+
		"\xA7A\xA7C\xA92\xA9A\xAA2\xAA4\xAA6\xAAF\xAC4\xAD1\xAE0\xAE4\xB07\xB0A"+
		"\xB0F\xB26\xB29\xB2E\xB48\xB56\xB5B\xB63\xB68\xB6F\xB84\xBA9\xBAE\xBC1"+
		"\xBCD\xBD0\xBD5\xBD8\xBDE\xBED\xBF2\xBFA\xBFD\xC02\xC07\xC0A\xC22\xC29"+
		"\xC2E\xC33\xC38\xC3A\xC41\xC4E\xC54\xC59\xC61\xC71\xC78\xC7D\xC82\xC85"+
		"\xC8B\xC91\xC96\xC9B\xCA0\xCA3\xCA9\xCAF\xCBA\xCBD\xCC7\xCCD\xCD1\xCD5"+
		"\xCF2\xCFF\xD05\xD0F\xD12\xD22\xD27\xD37\xD3A\xD3D\xD42\xD45\xD4A\xD53"+
		"\xD56\xD59\xD60\xD68\xD6C\xD6E\xD70\xD76\xD7A\xD7F\xD82\xD84\xD90\xD93"+
		"\xD95\xDA0\xDA4\xDA8\xDAD\xDBC\xDC3\xDCC\xDD4\xDD7\xDDC\xDE1\xDE9\xDEF"+
		"\xDF3\xDF9\xDFE\xE02\xE09\xE11\xE19\xE22\xE27\xE2B\xE2E\xE32\xE38\xE3D"+
		"\xE45\xE4D\xE53\xE59\xE5C\xE61\xE64\xE6B\xE6D\xE70\xE76\xE79\xE7E\xE81"+
		"\xE86\xE89\xE8E\xE91\xE96\xE99\xE9C\xE9F\xEA6\xEAA\xEB1\xEB8\xEBE\xECB"+
		"\xECF\xED4\xEDE\xEE7\xEEB\xEF7\xEFD\xF02\xF04\xF18\xF1C\xF24\xF2D\xF33"+
		"\xF39\xF41\xF43\xF4D\xF51\xF54\xF58\xF5D\xF63\xF66\xF6A\xF72\xF74\xF77"+
		"\xF7F\xF87\xF8E\xF95\xF97\xF99\xF9E\xFA4\xFA7\xFA9\xFAB\xFAE\xFB3\xFB6"+
		"\xFBB\xFCA\xFD1\xFD8\xFDA\xFDC\xFE1\xFE7\xFEA\xFEC\xFEE\xFF1\xFF6\xFF9"+
		"\xFFE\x100B\x1010\x1019\x101E\x1024\x1028\x102C\x103D\x103F\x1049\x104E"+
		"\x1050\x1054\x105A\x1062\x1067\x106A\x1072\x1075\x107A\x107F\x1084\x1089"+
		"\x108E\x1093\x1097\x109C\x10A7\x10AC\x10AF\x10B2\x10B7\x10BA\x10BF\x10C2"+
		"\x10C7\x10CA\x10CF\x10D2\x10D7\x10DA\x10DF\x10E5\x10EA\x10ED\x10F2\x10F9"+
		"\x10FB\x1101\x110A\x110F\x1111\x111D\x1123\x112F\x1132\x1137\x1139\x1143"+
		"\x1148\x114A\x114E\x1154\x1166\x1168\x1177\x1189\x1191\x119B\x11AB\x11C0"+
		"\x11CB\x11D1\x11DA\x11E3\x11E9\x11F2\x11F7\x11FA\x11FF\x1202\x1207\x120A"+
		"\x1212\x1218\x121C\x1223\x1229\x122D\x1230\x1232\x1235\x123A\x123D\x1242"+
		"\x1245\x124A\x124D\x1252\x1255\x1264\x126F\x127A\x1281\x1284\x128C\x1292"+
		"\x129B\x12A2\x12AB\x12B5\x12BA\x12C8\x12D3\x12DA\x12DD\x12E5\x12EC\x12F3"+
		"\x12F7\x12FC\x12FF\x1304\x1307\x130C\x130F\x1318\x131F\x132E\x1331\x1336"+
		"\x1341\x134A\x1355\x135B\x135D\x1365\x136D\x1372\x137D\x1380\x1384\x138C"+
		"\x1390\x1394\x139C\x13A1\x13A9\x13AE\x13B2\x13B4\x13B9\x13C2\x13C5\x13CA"+
		"\x13D1\x13D7\x13D9\x13DE\x13E4\x13EA\x13EF\x13F5\x13FC\x1401\x1406\x140B"+
		"\x140E\x1412\x1415\x1419\x141D\x1420\x1424\x1429\x142D\x1431\x143B\x1441"+
		"\x1448\x144B\x1451\x1457\x145C\x145E\x1464\x1466\x146B\x1471\x1477\x147C"+
		"\x147E\x1482\x1486\x1489\x1497\x149C\x14A0\x14AD\x14B0\x14B2\x14BA\x14C4"+
		"\x14CA\x14D1\x14D4\x14DA\x14E0\x14E5\x14E7\x14ED\x14EF\x14F4\x14FA\x1500"+
		"\x1506\x150B\x150D\x1511\x1515\x1518\x1526\x152B\x152F\x153C\x153F\x1541"+
		"\x1549\x1554\x155D\x1566\x1571\x157A\x1583\x158F\x1593\x1598\x159A\x159C"+
		"\x15A1\x15A5\x15AA\x15AC\x15AE\x15BC\x15C1\x15D7\x15ED\x15F2\x15FF\x1607"+
		"\x1619\x161C\x1624\x1629\x1634\x163B\x1640\x1644\x1648\x164B\x1652\x1664"+
		"\x1666\x167A\x1681\x1688\x168D\x1692\x1698\x169D\x169F\x16A6\x16AC\x16B2"+
		"\x16B5\x16BB\x16C5\x16C8\x16CF\x16D2\x16D7\x16D9\x16E1\x16E5\x16EB\x16F0"+
		"\x16F2\x16F5\x16FC\x1702\x1709\x170C\x1712\x1717\x1719\x171C\x1724\x172A"+
		"\x1731\x1734\x173A\x173F\x1741\x1749\x1751\x1757\x175C\x175E\x1768\x176D"+
		"\x1777\x177D\x1789\x178B\x1792\x1798\x179E\x17A4\x17A9\x17AB\x17B2\x17BA"+
		"\x17C0\x17CE\x17D0\x17D3\x17D8\x17DA\x17E6\x17EC\x17FA\x17FC\x17FF\x1804"+
		"\x1807\x180C\x180E\x1817\x181E\x182A\x183A\x1843\x184C\x184F\x1854\x185B"+
		"\x185D\x1863\x1865\x186D\x186F\x1875\x1877\x187D\x187F\x1886\x1889\x188B"+
		"\x188E\x1892\x1894\x189E\x18A4\x18A8\x18B0\x18B7\x18BD\x18BF\x18CA\x18CF"+
		"\x18D5\x18D9\x18E3\x18EB\x18F7\x18FA\x1902\x1904\x1907\x190B\x190E\x1917"+
		"\x191A\x191D\x1925\x192B\x1932\x1936\x1941\x1947\x1949\x1952\x1956\x195D"+
		"\x1962\x1965\x196D\x1971\x1974\x1978\x197B\x197F\x1986\x198A\x198C\x198E"+
		"\x1991\x1994\x1997\x199D\x19A0\x19A8\x19AA\x19AD\x19B1\x19B4\x19BA\x19BD"+
		"\x19C1\x19C4\x19C7\x19CE\x19D1\x19D7\x19E1\x19E4\x19E7\x19ED\x19F0\x19F3"+
		"\x19F6\x19FA\x19FD\x1A05\x1A07\x1A0B\x1A0E\x1A16\x1A1A\x1A1E\x1A25\x1A29"+
		"\x1A2B\x1A2D\x1A30\x1A33\x1A36\x1A3E\x1A44\x1A4A\x1A4C\x1A50\x1A53\x1A5B"+
		"\x1A5F\x1A66\x1A69\x1A72\x1A75\x1A79\x1A81\x1A84\x1A8C\x1A90\x1A97\x1A9A"+
		"\x1AA2\x1AA7\x1AB0\x1AB3\x1AB7\x1ABF\x1AC2\x1ACE\x1AD2\x1AD5\x1AE3\x1AE7"+
		"\x1AEA\x1AEE\x1AF1\x1AFA\x1B06\x1B11\x1B1A\x1B26\x1B29\x1B2F\x1B32\x1B3B"+
		"\x1B46\x1B4F\x1B67\x1B69\x1B6F\x1B72\x1B79\x1B7B\x1B84\x1BA2\x1BA5\x1BAE"+
		"\x1BBD\x1BC3\x1BC5\x1BCE\x1BE0\x1BE6\x1BEF\x1BF2\x1BF4\x1BFC\x1C02\x1C06"+
		"\x1C0E\x1C10\x1C18\x1C1C\x1C1F\x1C28\x1C3A\x1C40\x1C42\x1C46\x1C52\x1C55"+
		"\x1C59\x1C5C\x1C60\x1C70\x1C72\x1C74\x1C77\x1C7A\x1C83\x1C9E\x1CA1\x1CAF"+
		"\x1CB4\x1CB7\x1CBD\x1CC0\x1CC7\x1CCB\x1CCD\x1CD5\x1CD8\x1CDC\x1CE3\x1CE6"+
		"\x1CF2\x1CF7\x1CFA\x1D06\x1D09\x1D0F\x1D16\x1D1B\x1D20\x1D26\x1D2A\x1D31"+
		"\x1D34\x1D3C\x1D44\x1D47\x1D4F\x1D56\x1D5D\x1D60\x1D6A\x1D71\x1D76\x1D79"+
		"\x1D83\x1D86\x1D89\x1D8E\x1D92\x1D94\x1D9F\x1DA2\x1DA5\x1DAC\x1DB1\x1DB5"+
		"\x1DB7\x1DC1\x1DC4\x1DC7\x1DCE\x1DD4\x1DD8\x1DDE\x1DE2\x1DE7\x1DEB\x1DF0"+
		"\x1DF3\x1DF8\x1E06\x1E0E\x1E12\x1E18\x1E1B\x1E26\x1E2A\x1E2F\x1E32\x1E3A"+
		"\x1E3F\x1E44\x1E4A\x1E4F\x1E53\x1E6B\x1E73\x1E78\x1E7C\x1E81\x1E86\x1E8C"+
		"\x1E91\x1E94\x1E99\x1E9F\x1EA3\x1EAC\x1EB6\x1EB9\x1EBD\x1EC4\x1ED9\x1EDE"+
		"\x1EE2\x1EEB\x1EF1\x1EF3\x1EFC\x1F1D\x1F23\x1F25\x1F2A\x1F2D\x1F35\x1F3D"+
		"\x1F40\x1F47\x1F4A\x1F5D\x1F66\x1F71\x1F7E\x1F82\x1F84\x1F8C\x1F94\x1F9A"+
		"\x1F9D\x1FA0\x1FA3\x1FA9\x1FAD\x1FB5\x1FC1\x1FCD\x1FD1\x1FD4\x1FDD\x1FE3"+
		"\x1FED\x1FF6\x2000\x2006\x200C\x2013\x2019\x201D\x2028\x2037\x2039\x2056"+
		"\x2063\x2088\x2093\x209B\x20A6\x20AB\x20AE\x20B7\x20C1\x20C8\x20CF\x20D1"+
		"\x20DD\x20E8\x20EC\x20F1\x20F4\x20F6\x20F9\x2105\x2107\x2109\x210C\x2111"+
		"\x2114\x2119\x2123\x2127\x212C\x212F\x2131\x2134\x2140\x2142\x2144\x2147"+
		"\x214D\x2157\x216B\x2171\x218A\x218C\x21A6\x21AC\x21B7\x21BF\x21C2\x21D3"+
		"\x21DB\x21E2\x21F9\x2206\x220C\x2213\x221B\x221E\x2221\x222A\x2234\x223B"+
		"\x223F\x2243\x2249\x2250\x2254\x225A\x2261\x2268\x226B\x2271\x2278\x227C"+
		"\x2281\x2286\x228B\x2293\x229A\x229E\x22A4\x22AB\x22AF\x22B9\x22BB\x22C3"+
		"\x22C9\x22CF\x22E0\x22E4\x22EC\x22F1\x22F9\x22FF\x230A\x230F\x2316\x231A"+
		"\x231E\x2322\x2325\x2329\x232F\x2333\x2335\x233C\x2343\x2346\x2349\x2350"+
		"\x2355\x235A\x235E\x2364\x2368\x236A\x236F\x2374\x2378\x237D\x2383\x2387"+
		"\x238B\x238D\x2391\x2395\x2399\x239D\x23A3\x23A6\x23AC\x23B0\x23B4\x23BA"+
		"\x23C0\x23C2\x23C5\x23C9\x23CD\x23D1\x23D7\x23DA\x23E0\x23E6\x23E9\x23EF"+
		"\x23F2\x23F8\x23FB\x23FF\x2403\x2407\x240C\x240F\x2413\x2417\x2428\x242A"+
		"\x242C\x242F\x2436\x243B\x243F\x2445\x2449\x244B\x2450\x2455\x2459\x245E"+
		"\x2464\x2468\x246C\x246E\x2472\x2476\x247A\x247E\x2484\x2487\x248D\x2491"+
		"\x2495\x249B\x24A1\x24A3\x24A6\x24AA\x24AE\x24B2\x24B8\x24BB\x24C1\x24C7"+
		"\x24CA\x24D0\x24D3\x24D9\x24DC\x24E0\x24E4\x24E8\x24ED\x24F0\x24F4\x24F8"+
		"\x24FE\x2501\x2505\x2516\x2518\x251A\x251D\x252B\x2531\x2539\x2540\x2542"+
		"\x2545\x2566\x256A\x256E\x2575\x257E\x2586\x2589\x258C\x2590\x2594\x2597"+
		"\x259F\x25A4\x25A9\x25AD\x25AF\x25B6\x25BE\x25C1\x25CC\x25D1\x25D5\x25D8"+
		"\x25DC\x25E0\x25E5\x25EC\x25EE\x25F4\x25F7\x25FF\x2605\x2609\x260C\x2615"+
		"\x2618\x261E\x2622\x2629\x262E\x2636\x263B\x2647\x2649\x2654\x265B\x2665"+
		"\x267C\x2689\x2699\x269E\x26A5\x26A8\x26AC\x26AE\x26BF\x26CE\x26D6\x26DF"+
		"\x26E7\x26EF\x2700\x270D\x2719\x2731\x2738\x273C\x2746\x274A\x275B\x2782"+
		"\x2789\x2791\x279D\x27B3\x27BC\x27BE\x27C4\x27D8\x27DA\x27DC\x27DF\x27E6"+
		"\x27EC\x27F1\x27F3\x27F9\x2801\x2803\x2807\x2811\x2815\x281B\x281D\x2821"+
		"\x2825\x282C\x2831\x2836\x283A\x2843\x2849\x2852\x2855\x2857\x285E\x2861"+
		"\x2865\x286D\x2870\x2878\x287B\x2887\x288E\x2892\x2895\x289D\x28A0\x28AA"+
		"\x28B0\x28B4\x28B7\x28BF\x28C2\x28CD\x28CF\x28D8\x28DB\x28E2\x28E7\x28EB"+
		"\x28F0\x2900\x2903\x290A\x290E\x2913\x291C\x2920\x2928\x292B\x2934\x2937"+
		"\x293B\x2944\x2946\x294B\x2953\x295A\x295E\x2970\x2978\x297D\x2983\x2988"+
		"\x2991\x2994\x2997\x29A2\x29A7\x29B2\x29B7\x29BD\x29C3\x29C9\x29CB\x29CF"+
		"\x29D2\x29D6\x29DA\x29E2\x29E7\x29E9\x29EC\x29F1\x29FA\x29FC\x2A0B\x2A15"+
		"\x2A20\x2A33\x2A48\x2A4A\x2A4C\x2A54\x2A58\x2A5D\x2A60\x2A63\x2A69\x2A71"+
		"\x2A79\x2A7C\x2A7F\x2A84\x2A87\x2A8A\x2A8F\x2A91\x2A9B\x2A9F\x2AA4\x2AA7"+
		"\x2AAD\x2AB1\x2AB7\x2ACD\x2AD0\x2AD3\x2AD5\x2ADC\x2AE1\x2AED\x2AF5\x2AFE"+
		"\x2B07\x2B11\x2B14\x2B17\x2B20\x2B22\x2B28\x2B2E\x2B3D\x2B48\x2B51\x2B5D"+
		"\x2B64\x2B6B\x2B8C\x2B92\x2BA0\x2BA5\x2BA9\x2BB5\x2BB8\x2BC1\x2BC3\x2BCD"+
		"\x2BD1\x2BD3\x2BD5\x2BD8\x2BDB\x2BE6\x2BE8\x2BEB\x2BED\x2BF2\x2BFD\x2C06"+
		"\x2C09\x2C0C\x2C15\x2C18\x2C1B\x2C22\x2C25\x2C2C\x2C32\x2C38\x2C47\x2C4A"+
		"\x2C51\x2C59\x2C60\x2C66\x2C71\x2C7F\x2C89\x2C8B\x2C99\x2CA0\x2CA4\x2CAC"+
		"\x2CB0\x2CB4\x2CBA\x2CC4\x2CCE\x2CD8\x2CE0\x2CEC\x2CF2\x2CF6\x2D00\x2D04"+
		"\x2D08\x2D12\x2D18\x2D20\x2D28\x2D2A\x2D46\x2D52\x2D59\x2D61\x2D68\x2D6E"+
		"\x2D76\x2D79\x2D7B\x2D7F\x2D84\x2D87\x2D8B\x2D8F\x2D96\x2D9A\x2D9D\x2DA2"+
		"\x2DA6\x2DAA\x2DAF\x2DB6\x2DB9\x2DBD\x2DC2\x2DC6\x2DCF\x2DD6\x2DDF\x2DEB"+
		"\x2DED\x2DF7\x2DFA\x2DFF\x2E08\x2E0A\x2E0C\x2E11\x2E13\x2E1B\x2E20\x2E28"+
		"\x2E2D\x2E33\x2E35\x2E3F\x2E41\x2E45\x2E49\x2E4B\x2E54\x2E56\x2E5B\x2E66"+
		"\x2E88\x2E9A\x2EA1\x2EA3\x2EAA\x2EB3\x2EBB\x2EC1\x2EC9\x2ECC\x2ED3\x2ED9"+
		"\x2EDC\x2EDE\x2EE6\x2EE8\x2EF0\x2EF7\x2EFF\x2F01\x2F08\x2F10\x2F16\x2F1F"+
		"\x2F22\x2F26\x2F2A\x2F2D\x2F31\x2F36\x2F38\x2F3C\x2F41\x2F43\x2F47\x2F4C"+
		"\x2F4E\x2F52\x2F59\x2F5B\x2F62\x2F64\x2F6D\x2F75\x2F78\x2F7F\x2F87\x2F8A"+
		"\x2F91\x2F97\x2F9E\x2FA4\x2FA8\x2FC1\x2FC4\x2FC8\x2FCA\x2FCD\x2FFB\x3000"+
		"\x3014\x3018\x301C\x302A\x3034\x303D\x3044\x3049\x305D\x3063\x306A\x306E"+
		"\x307D\x3083\x3096\x30A1\x30AE\x30BF\x30C5\x30CC\x30D0\x30EB\x3125\x3129"+
		"\x3162\x3164\x316A\x3175\x317E\x3187\x3191\x31A4\x31B4\x31C4\x31EC\x31F8"+
		"\x3200\x3213\x3218\x321E\x3221\x3226\x322B\x3237\x323F\x3244\x324A\x3253"+
		"\x325D\x3260\x326E\x3274\x327D\x3281\x3289\x3290\x329D\x32A5\x32B2\x32B9"+
		"\x32BF\x32C3\x32D4\x32E3\x32E5\x32F2\x3302\x330A\x330E\x3311\x331A\x331D"+
		"\x3320\x332D\x3331\x3339\x333F\x3347\x334E\x3354\x3367\x336C\x3375\x337B"+
		"\x3381\x3384\x3388\x338F\x3397\x339A\x33A0\x33A6\x33A8\x33AE\x33B1\x33B3"+
		"\x33B9\x33BB\x33C9\x33D0\x33D9\x33E0\x33F2\x33F9\x3400\x3407\x340D\x3414"+
		"\x3417\x341C\x3423\x3428\x342C\x3431\x3434\x3438\x343C\x3441\x3445\x344B"+
		"\x344F\x3453\x3458\x345C\x3461\x3466\x346A\x346F\x3473\x347B\x347F\x3484"+
		"\x348E\x3493\x349A\x34A3\x34A7\x34A9\x34B0\x34BC\x34C1\x34CC\x34D6\x34D8"+
		"\x34DE\x34E0\x34E5\x34E7\x34EA\x34EE\x34F2\x34F8\x3501\x3504\x3506\x3509"+
		"\x350F\x3513\x3516\x351F\x3528\x3534\x3537\x3557\x355B\x355E\x3564\x3569"+
		"\x356D\x3571\x3575\x357E\x3582\x358A\x3590\x35A1\x35A7";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace SqlSchemaCompare.Core.TSql
